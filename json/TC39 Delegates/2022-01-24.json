[
{"content":{"body":"üëÄ is there drafted agenda for this meeting so I can schedule my sleeping time? thanks!","msgtype":"m.text"},"ts":1643015881927,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$6g_c78daTMzIIDYtMN3tikb-v1GOxThqPM0c1Y_Q2TA"},
{"content":{"body":"jschoi: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators and returned an array of values, instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","msgtype":"m.text"},"ts":1643022874838,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM"},
{"content":{"body":" * jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","m.new_content":{"body":"jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async","msgtype":"m.text"},"m.relates_to":{"event_id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643023021295,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-QEX0XEz0sXkhZVku_PlxgxQaZPUHUhh2OlxvCIjOFk"},
{"content":{"body":"The draft schedule for today's meeting is now posted:  https://hackmd.io/s3ovtgLsTa-QAhFqYTl_YA","msgtype":"m.text"},"ts":1643030937100,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs"},
{"content":{"body":" * The draft schedule for today's meeting is now posted","m.new_content":{"body":"The draft schedule for today's meeting is now posted","msgtype":"m.text"},"m.relates_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643030946829,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$x3OojhDljhgIYrkIxNvDYLz3ucOZn4dPh9GadTvQj5g"},
{"content":{"body":" * The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411","m.new_content":{"body":"The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411","msgtype":"m.text"},"m.relates_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643030966725,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$nhcusgzKHWC8jYr6N9rpdO3OQ38vzUEmD9x3-ev_USQ"},
{"content":{"body":"> <@robpalme:matrix.org> The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411\n\nThanks! üôè","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>The draft schedule for today's meeting is now posted: https://github.com/tc39/Reflector/issues/411</blockquote></mx-reply>Thanks! üôè","m.relates_to":{"m.in_reply_to":{"event_id":"$bxDNUEk-9LJfpbukLPAw1Fbd-Ii0ZfDO6CZbiNgOgDs"}},"msgtype":"m.text"},"ts":1643031108122,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$R8Md_GPUm4sep5mcZjRIzMY6M_P9Pr1MDXBlwoRQO-0"},
{"content":{"body":"> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$3kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM"}},"msgtype":"m.text"},"ts":1643039993759,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9PdWopGywE4L8L18E7h9B4KghPfE4MF_lGoZKT5eFBY"},
{"content":{"body":"I see, thanks!","msgtype":"m.text"},"ts":1643040030717,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NP2NZWtkZ9QFJCDLdjwnrZrf_JYYlEnLK8XDRG-fyhI"},
{"content":{"body":"* > <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","m.new_content":{"body":"> <@yulia:mozilla.org> jschoi: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async\n\n`Promise.all`‚Äôs current semantics involve parallel awaiting of input values. If some `input` yields `a, b, c`, then `Promise.all(input)` would first drain `input` into its three items `a, b, c`, and then it would simultaneously await `a, b, c`.\n\nParallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values. \n\nI think it would be quite confusing if `Promise.all` did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if `for await` did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243kDU9OgkQidY2VS5wSqExYWABWR9QRLwIRXtFKFu-CM\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: i have a dumb question, what if promise.all accepted async iterators (it already takes iterables), instead of doing that in a separate API? re: https://github.com/tc39/proposal-array-from-async</blockquote></mx-reply><p><code>Promise.all</code>‚Äôs current semantics involve parallel awaiting of input values. If some <code>input</code> yields <code>a, b, c</code>, then <code>Promise.all(input)</code> would first drain <code>input</code> into its three items <code>a, b, c</code>, and then it would simultaneously await <code>a, b, c</code>.</p>\n<p>Parallel awaiting is impossible when getting values from async iterators; we must sequentially await for the values.</p>\n<p>I think it would be quite confusing if <code>Promise.all</code> did parallel awaiting on sync inputs and sequential awaiting on async inputs. This is the similar to how it would be confusing if <code>for await</code> did parallel awaiting on sync inputs but sequential sequential awaiting on async inputs. Hopefully that makes sense.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$9PdWopGywE4L8L18E7h9B4KghPfE4MF_lGoZKT5eFBY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643041053102,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$sZPWI5s-NII0i-y778o4A2EdODhQPmqZkLDdPeLND-Q"},
{"content":{"body":"We will start the meeting in 12 minutes!","msgtype":"m.text"},"ts":1643046489063,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dOsmJvfOPztZ92UYzW3GTZFsY8qyGl6C8Kq5F6yzaPc"},
{"content":{"body":"I like the formal votes, but fine with it going without it.\n\nI also have no opposition to ryzokuken being on both roles (402 Editor + TC39 Co-Chair).","format":"org.matrix.custom.html","formatted_body":"<p>I like the formal votes, but fine with it going without it.</p>\n<p>I also have no opposition to <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> being on both roles (402 Editor + TC39 Co-Chair).</p>\n","msgtype":"m.text"},"ts":1643048667713,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$65HjuxCebEOLGa0iFrA0Vsu8k-Y2uTPfkroezilSw3w"},
{"content":{"body":"we could in theory make a bot to download issues but I don't wanna do it","msgtype":"m.text"},"ts":1643050229004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NPoq_qH_JShqxA2uZO3QHyDMC7AkIqnMKs1QDpYZN4M"},
{"content":{"body":"bakkot: is the ecmarkup change an API change or breaking in the sense that new things in the biblio will change where links go/what links/etc.?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: is the ecmarkup change an API change or breaking in the sense that new things in the biblio will change where links go/what links/etc.?","msgtype":"m.text"},"ts":1643050519300,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$L1wMKCDuMfbkCM0rsJTMtK2pcsa36di2UuYrIBbBSjE"},
{"content":{"body":"just curious","msgtype":"m.text"},"ts":1643050522470,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$NsDuE9cf23VfgZCq4M8zOAmXYas6pFaC3qmsSDwwNPo"},
{"content":{"body":"Rick Waldron: can you confirm that https://github.com/tc39/proposal-modules-pragma should become an inactive proposal?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rwaldron:matrix.org\">Rick Waldron</a>: can you confirm that https://github.com/tc39/proposal-modules-pragma should become an inactive proposal?","msgtype":"m.text"},"ts":1643050589306,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v27yZFgMUlmOOqxNCBBy5v-xqC5JbdzdASbzxGM0dXQ"},
{"content":{"body":"ljharb: That was true in 2017. I have no further information that changes that status ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: That was true in 2017. I have no further information that changes that status","msgtype":"m.text"},"ts":1643050661978,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$S3nE6TB28hxxJsHkdQJbkyyHWZJHtJooRbbXi0_feDM"},
{"content":{"body":"ok thanks, i'll update the repo and the proposals list to mark it as such. would you call it \"rejected' or \"withdrawn\"?","msgtype":"m.text"},"ts":1643050680772,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1hh1BaA7CSJS1AUUgivu17vgVy2w2FfDXDjjRaWW_Qc"},
{"content":{"body":"ljharb: lemme check the notes, one sec. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: lemme check the notes, one sec.","msgtype":"m.text"},"ts":1643050704198,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$3iwBwXLFLQt_KWJLT3mOPdIFAgsItVIUMMiH1nKwa4Q"},
{"content":{"body":"possible bot autocorrect needed: \"x markup\" -> \"ecmarkup\"","msgtype":"m.text"},"ts":1643050797044,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2SicBNPFRwqbXFv4YoS0JdUr5ldkVHSY0Z2SxR22FDw"},
{"content":{"body":"bterlson: main change is that the biblio will not be built in, and you'll have to specify `--load-biblio=file/package` to get the biblio","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: main change is that the biblio will not be built in, and you'll have to specify <code>--load-biblio=file/package</code> to get the biblio","msgtype":"m.text"},"ts":1643050798341,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7JtfrXpmIi3IFDKTFGWSUIEbbla-QC1TKJNZuqKqSKk"},
{"content":{"body":"so it can be updated independently of ecmarkup","msgtype":"m.text"},"ts":1643050808548,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JP0z6aIA8THzY89vQRAEtM2Tx4Gpt0zJt7LZAjbOUQo"},
{"content":{"body":"(in particular the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)","msgtype":"m.text"},"ts":1643050828513,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5cd3t5PECzvHXmxj6GuXwPia8zOiuaZMMyHwqBTWuYE"},
{"content":{"body":" * (in particularly the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)","m.new_content":{"body":"(in particularly the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)","msgtype":"m.text"},"m.relates_to":{"event_id":"$5cd3t5PECzvHXmxj6GuXwPia8zOiuaZMMyHwqBTWuYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643050837210,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FOlzOkngIkWYpWa8opSLeOpD9CCqq7QyVxhpqwaS5fk"},
{"content":{"body":" * (in particular the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)","m.new_content":{"body":"(in particular the plan is to release a new biblio with every commit to the spec, or at least every one which affects the biblio)","msgtype":"m.text"},"m.relates_to":{"event_id":"$5cd3t5PECzvHXmxj6GuXwPia8zOiuaZMMyHwqBTWuYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643050874011,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DvkVU_6yBm0urS24TdeixaRqowIR7oJ9SV107-aMD2c"},
{"content":{"body":"ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.","msgtype":"m.text"},"ts":1643050895707,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$kKruOODN4TAIW0w1wOdGykk7OMPqB03V-ghU4x93HZ4"},
{"content":{"body":" thank you for the feedback on this topic, sffc :-)","format":"org.matrix.custom.html","formatted_body":"thank you for the feedback on this topic, <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a> :-)","msgtype":"m.text"},"ts":1643050909425,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oIOUX-Ab6RYjP-GVURQVcNYa1XJpadkqFOaeDrVETjc"},
{"content":{"body":"> <@rwaldron:matrix.org> ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.\n\nI may have been doing a favor for a community member ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kKruOODN4TAIW0w1wOdGykk7OMPqB03V-ghU4x93HZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rwaldron:matrix.org\">@rwaldron:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.</blockquote></mx-reply>I may have been doing a favor for a community member","m.relates_to":{"m.in_reply_to":{"event_id":"$kKruOODN4TAIW0w1wOdGykk7OMPqB03V-ghU4x93HZ4"}},"msgtype":"m.text"},"ts":1643050925559,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$y1CirfrvhuVuYyP427qnpx_Z6F-GY6xqK2azlBhK8js"},
{"content":{"body":"> <@rwaldron:matrix.org> ljharb: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.\n\nas i recall, it was around the time of the fauxtrage about `.js` and ESM in node","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kKruOODN4TAIW0w1wOdGykk7OMPqB03V-ghU4x93HZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rwaldron:matrix.org\">@rwaldron:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I cannot find discussion of record, but I would not pursue it myself in 2022, or any year... I can't even remember why I thought it was an idea to explore at the time.</blockquote></mx-reply>as i recall, it was around the time of the fauxtrage about <code>.js</code> and ESM in node","m.relates_to":{"m.in_reply_to":{"event_id":"$kKruOODN4TAIW0w1wOdGykk7OMPqB03V-ghU4x93HZ4"}},"msgtype":"m.text"},"ts":1643050936837,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iUTMkLH_Rt9_u_GwdzX-u2qpc04VElveSekBnnLZDEw"},
{"content":{"body":"i'll mark it as just being \"inactive\"","msgtype":"m.text"},"ts":1643050947483,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MVNsWyW6YoAkgwA5o3_6mwcCbUW_yWntcR9B848-6YM"},
{"content":{"body":"@bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P","msgtype":"m.text"},"ts":1643050970867,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$MsHkRxoJusXuD2umfOIVJZLbVXaOqudHq3mIw8Bx9z0"},
{"content":{"body":"> <@ljharb:matrix.org> as i recall, it was around the time of the fauxtrage about `.js` and ESM in node\n\nWhich would TOTALLY support my suspicion that I was \"proxy-championing\" this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iUTMkLH_Rt9_u_GwdzX-u2qpc04VElveSekBnnLZDEw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>as i recall, it was around the time of the fauxtrage about <code>.js</code> and ESM in node</blockquote></mx-reply>Which would TOTALLY support my suspicion that I was &quot;proxy-championing&quot; this","m.relates_to":{"m.in_reply_to":{"event_id":"$iUTMkLH_Rt9_u_GwdzX-u2qpc04VElveSekBnnLZDEw"}},"msgtype":"m.text"},"ts":1643050985610,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$6KoR75WTi35M3ToAjEq1BiQzV751y4B8ooQNRqklpGk"},
{"content":{"body":"This is so amazing shu ","format":"org.matrix.custom.html","formatted_body":"This is so amazing <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1643050994968,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$J0CfVNnkj57ZcF-8NwAxn4YW9egjd_KMiKrdkJqnsCk"},
{"content":{"body":"yulia Michael Ficarra Here is a discussion from October (https://github.com/tc39/ecma402/blob/master/meetings/notes-2021-10-07.md#normative-add-new-numbering-system-tnsa) and another from January (https://github.com/tc39/ecma402/blob/master/meetings/notes-2022-01-13.md#normative-add-new-numbering-system-tnsa)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> Here is a discussion from October (https://github.com/tc39/ecma402/blob/master/meetings/notes-2021-10-07.md#normative-add-new-numbering-system-tnsa) and another from January (https://github.com/tc39/ecma402/blob/master/meetings/notes-2022-01-13.md#normative-add-new-numbering-system-tnsa)","msgtype":"m.text"},"ts":1643051003760,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$HhEh1H0Nfzn4qDNZN2EKsaEN6CqA220wB7YHcEKcIaM"},
{"content":{"body":"That is something I would've done: tell a community member to write a solution and that I would present it in good faith. ","msgtype":"m.text"},"ts":1643051012345,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$3pNodgJ9bS-Ps1B6vWYzXqFvjS0ijx5DP_cL4xTp7pM"},
{"content":{"body":"thanks! kevin helped a lot too with the ecmarkup stuff needed","msgtype":"m.text"},"ts":1643051016564,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Txo2EzFf6Be9smsDt6-d9NVv05m2ie-M-Q_Ge0ZxLXY"},
{"content":{"body":"But it looks like they never really pushed forward on it, and since I was acting in a proxy role, I wouldn't have done any extra work beyond reporting to committee. ","msgtype":"m.text"},"ts":1643051054248,"senderName":"Rick Waldron","senderId":"@rwaldron:matrix.org","id":"$L-slqFUJIYbDvI52qAgBWVIIWug9JbdGFhl38ljNQ1c"},
{"content":{"body":"> <@bterlson:matrix.org> @bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P\n\nthere's actually already a `--no-ecma-262-biblio` which tells it not to load it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MsHkRxoJusXuD2umfOIVJZLbVXaOqudHq3mIw8Bx9z0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">@bterlson:matrix.org</a><br>@bakkot sounds great, it&#39;s super annoying for non-262 uses to have the biblio there at all :-P</blockquote></mx-reply>there's actually already a <code>--no-ecma-262-biblio</code> which tells it not to load it","m.relates_to":{"m.in_reply_to":{"event_id":"$MsHkRxoJusXuD2umfOIVJZLbVXaOqudHq3mIw8Bx9z0"}},"msgtype":"m.text"},"ts":1643051383381,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gni4rpYIiMLOIBKE3HqtmCL6k1mLOD6xyziZn8Dx_Js"},
{"content":{"body":"> <@bterlson:matrix.org> @bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P\n\n * there's actually already a `--no-ecma-262-biblio` which tells it not to load the built-in one","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MsHkRxoJusXuD2umfOIVJZLbVXaOqudHq3mIw8Bx9z0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">@bterlson:matrix.org</a><br>@bakkot sounds great, it's super annoying for non-262 uses to have the biblio there at all :-P</blockquote></mx-reply> * there's actually already a <code>--no-ecma-262-biblio</code> which tells it not to load the built-in one","m.new_content":{"body":"there's actually already a `--no-ecma-262-biblio` which tells it not to load the built-in one","format":"org.matrix.custom.html","formatted_body":"there's actually already a <code>--no-ecma-262-biblio</code> which tells it not to load the built-in one","msgtype":"m.text"},"m.relates_to":{"event_id":"$gni4rpYIiMLOIBKE3HqtmCL6k1mLOD6xyziZn8Dx_Js","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643051400862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4kfdkQUsUn4D5s-JbqcXsrkr_DVnU9DlraFn36kmFXw"},
{"content":{"body":"sffc: per anba's comment here (https://github.com/tc39/ecma402/pull/614#issuecomment-938638422) i don't think we have any comments but i will clear it with our intl team","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: per anba's comment here (https://github.com/tc39/ecma402/pull/614#issuecomment-938638422) i don't think we have any comments but i will clear it with our intl team","msgtype":"m.text"},"ts":1643051436748,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$d5DywgbF0gD-hJpk5yAmj9mrrb9OQCE0Nta113YGLf4"},
{"content":{"body":"How do you annotate that something doesn't call user code?","msgtype":"m.text"},"ts":1643051609358,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Dj4RjFYPdm-kXrEnLLjerFOzkvWM2ZLhArPOLdiZTP0"},
{"content":{"body":"waldemar: https://github.com/tc39/ecma262/pull/2548 describes guidance for spec authors, relevant part of which is\n\n> False positives can be manually suppressed with `<emu-meta suppress-effects=\"user-code\">suppressed</emu-meta>`.\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: https://github.com/tc39/ecma262/pull/2548 describes guidance for spec authors, relevant part of which is</p>\n<blockquote>\n<p>False positives can be manually suppressed with <code>&lt;emu-meta suppress-effects=&quot;user-code&quot;&gt;suppressed&lt;/emu-meta&gt;</code>.</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1643051711540,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ym-uvnc5VAZdIs1ABp_JjrFn4mPxs5KHAoplixPf_sI"},
{"content":{"body":"waldemar: if you need to do it manually, like this: https://github.com/tc39/ecma262/pull/2548/files#diff-181371b08d71216599b0acccbaabd03c306da6de142ea6275c2135810999805aR18446","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: if you need to do it manually, like this: https://github.com/tc39/ecma262/pull/2548/files#diff-181371b08d71216599b0acccbaabd03c306da6de142ea6275c2135810999805aR18446","msgtype":"m.text"},"ts":1643051713208,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$js3LFDRI8702Rmx_hqubIIOIWM3ROhHDTxQlVh1ED-4"},
{"content":{"body":"but mostly it's implied by `!`","format":"org.matrix.custom.html","formatted_body":"but mostly it's implied by <code>!</code>","msgtype":"m.text"},"ts":1643051731905,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$c6d2q2T2jND2k4gEGTEWI8yCEAeBxf3LIoIbtewIW68"},
{"content":{"body":"@waldemar: you can wrap the abstract operation / SDO call in `<emu-meta suppress-effects=\"user-code\">AbstractOp()</emu-meta>`, but yeah as Michael Ficarra says `!` implies the suppression","format":"org.matrix.custom.html","formatted_body":"@waldemar: you can wrap the abstract operation / SDO call in <code>&lt;emu-meta suppress-effects=&quot;user-code&quot;&gt;AbstractOp()&lt;/emu-meta&gt;</code>, but yeah as <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> says <code>!</code> implies the suppression","msgtype":"m.text"},"ts":1643051782246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EYK75-Ut5swCuCG-BrTXrOia6IJexcMameBqAEStyG4"},
{"content":{"body":"for spec authors, the tests in this file also serve as a good tutorial for how to annotate, but hopefully most spec authors require no additional work: https://github.com/tc39/ecmarkup/blob/main/test/baselines/sources/effect-user-code.html","msgtype":"m.text"},"ts":1643052268695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WjkrBZwOZ3tncUvR19D7PAAO8YPJzIaYiPTWFhcaw88"},
{"content":{"body":" * for spec authors, the tests in this file also serve as a good tutorial for how to annotate, but hopefully most spec drafts require no additional work: https://github.com/tc39/ecmarkup/blob/main/test/baselines/sources/effect-user-code.html","m.new_content":{"body":"for spec authors, the tests in this file also serve as a good tutorial for how to annotate, but hopefully most spec drafts require no additional work: https://github.com/tc39/ecmarkup/blob/main/test/baselines/sources/effect-user-code.html","msgtype":"m.text"},"m.relates_to":{"event_id":"$WjkrBZwOZ3tncUvR19D7PAAO8YPJzIaYiPTWFhcaw88","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643052351989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rOgO28l1C1JIqJBe9VOEAncRJjqldsi8HNVjx1uT_E0"}
]