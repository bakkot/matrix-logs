[
{"content":{"body":"oh ok great, not sure how i missed that too","msgtype":"m.text","org.matrix.msc1767.text":"oh ok great, not sure how i missed that too"},"ts":1670643027126,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D5kQ423CeMEUIkh0yyL6MB0M_QbIrZX2u7sXv7uHZKw"},
{"content":{"body":"altho its property descriptor isn't properly specified; it just says in a note that it's writable. i assume it's configurable and nonenumerable?","msgtype":"m.text","org.matrix.msc1767.text":"altho its property descriptor isn't properly specified; it just says in a note that it's writable. i assume it's configurable and nonenumerable?"},"ts":1670649785642,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$USu7oLfB1YFJWDmuoozdbR0W9zBgiAwj4bK_CUi2Nls"},
{"content":{"body":"ljharb: yes; see the second-last paragraph of https://tc39.es/ecma262/multipage/ecmascript-standard-built-in-objects.html#sec-ecmascript-standard-built-in-objects","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yes; see the second-last paragraph of https://tc39.es/ecma262/multipage/ecmascript-standard-built-in-objects.html#sec-ecmascript-standard-built-in-objects","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: yes; see the second-last paragraph of https://tc39.es/ecma262/multipage/ecmascript-standard-built-in-objects.html#sec-ecmascript-standard-built-in-objects","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yes; see the second-last paragraph of https://tc39.es/ecma262/multipage/ecmascript-standard-built-in-objects.html#sec-ecmascript-standard-built-in-objects","mimetype":"text/html"}]},"ts":1670652403573,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Oxam8s8lcj_oj2_T_jPxUm7nb5SCdS0jQ6ZXb5Bhr0"},
{"content":{"body":"right, but that's a non-normative note on top of the normative default. when the descriptor isn't default, it's supposed to be specified in its entirety, like https://tc39.es/ecma262/#sec-%throwtypeerror% etc","msgtype":"m.text","org.matrix.msc1767.text":"right, but that's a non-normative note on top of the normative default. when the descriptor isn't default, it's supposed to be specified in its entirety, like https://tc39.es/ecma262/#sec-%throwtypeerror% etc"},"ts":1670652784925,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bF48Vo9UD2cgWE5HGOhrh70bNMND77dO4Nev6iklaTQ"},
{"content":{"body":"so in this case, `taken.next()` will throw because `next` returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object","format":"org.matrix.custom.html","formatted_body":"so in this case, <code>taken.next()</code> will throw because <code>next</code> returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so in this case, `taken.next()` will throw because `next` returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object","mimetype":"text/plain"},{"body":"so in this case, <code>taken.next()</code> will throw because <code>next</code> returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object","mimetype":"text/html"}]},"ts":1670652964881,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y3qizGQpWiV7Kxin2jqbWFKVP-MkI1Q5Wl8G4B36-OQ"},
{"content":{"body":"but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a `throw` method, so `taken.throw` doesn't exist","format":"org.matrix.custom.html","formatted_body":"but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a <code>throw</code> method, so <code>taken.throw</code> doesn't exist","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$y3qizGQpWiV7Kxin2jqbWFKVP-MkI1Q5Wl8G4B36-OQ"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a `throw` method, so `taken.throw` doesn't exist","mimetype":"text/plain"},{"body":"but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a <code>throw</code> method, so <code>taken.throw</code> doesn't exist","mimetype":"text/html"}]},"ts":1670652994639,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6zdsRAUL43lQhiMilflebi7uG8_9DZUAvZ4MGzBxh8M"},
{"content":{"body":"should there be a default `throw` method, or getter, that refers to the wrapped iterator's throw method when present?","format":"org.matrix.custom.html","formatted_body":"should there be a default <code>throw</code> method, or getter, that refers to the wrapped iterator's throw method when present?","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$6zdsRAUL43lQhiMilflebi7uG8_9DZUAvZ4MGzBxh8M"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"should there be a default `throw` method, or getter, that refers to the wrapped iterator's throw method when present?","mimetype":"text/plain"},{"body":"should there be a default <code>throw</code> method, or getter, that refers to the wrapped iterator's throw method when present?","mimetype":"text/html"}]},"ts":1670653016238,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P_dpo4f_9dKCW757XXz5hwV0C1udtuxZDx5rNZDEnk0"},
{"content":{"body":"> when the descriptor isn't default, it's supposed to be specified in its entirety\n\nright, but it is default, so it's not specified at all","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>when the descriptor isn't default, it's supposed to be specified in its entirety</p>\n</blockquote>\n<p>right, but it is default, so it's not specified at all</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> when the descriptor isn't default, it's supposed to be specified in its entirety\n\nright, but it is default, so it's not specified at all","mimetype":"text/plain"},{"body":"<blockquote>\n<p>when the descriptor isn't default, it's supposed to be specified in its entirety</p>\n</blockquote>\n<p>right, but it is default, so it's not specified at all</p>\n","mimetype":"text/html"}]},"ts":1670657071392,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5hG3OI7ykxudprZZKFqzcq8dAnLHrp-ShPPX4L043PI"},
{"content":{"body":"\"Every other data property described in clauses 19 through 28 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\"","msgtype":"m.text","org.matrix.msc1767.text":"\"Every other data property described in clauses 19 through 28 and in Annex B.2 has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true } unless otherwise specified.\""},"ts":1670657098126,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GQUPfUNFQDZ4X2BlVdSbN1JRhgIDPylf5n4GQQVpjY4"},
{"content":{"body":"> <@ljharb:matrix.org> so in this case, `taken.next()` will throw because `next` returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object\n\nah yeah sorry, `next` should return `{ done: false, value: null }` or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y3qizGQpWiV7Kxin2jqbWFKVP-MkI1Q5Wl8G4B36-OQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so in this case, <code>taken.next()</code> will throw because <code>next</code> returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object</blockquote></mx-reply>ah yeah sorry, <code>next</code> should return <code>{ done: false, value: null }</code> or something","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","m.in_reply_to":{"event_id":"$y3qizGQpWiV7Kxin2jqbWFKVP-MkI1Q5Wl8G4B36-OQ"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> so in this case, `taken.next()` will throw because `next` returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object\n\nah yeah sorry, `next` should return `{ done: false, value: null }` or something","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y3qizGQpWiV7Kxin2jqbWFKVP-MkI1Q5Wl8G4B36-OQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so in this case, <code>taken.next()</code> will throw because <code>next</code> returns a non-Object, and the wrapper throws on that; if i modify next to return an empty object</blockquote></mx-reply>ah yeah sorry, <code>next</code> should return <code>{ done: false, value: null }</code> or something","mimetype":"text/html"}]},"ts":1670657180924,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rHDmT6yISpMezW0ZmQoPFmBTeu4KK_buN0MZSgNG3Lw"},
{"content":{"body":"so should `return` for that matter","format":"org.matrix.custom.html","formatted_body":"so should <code>return</code> for that matter","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so should `return` for that matter","mimetype":"text/plain"},{"body":"so should <code>return</code> for that matter","mimetype":"text/html"}]},"ts":1670657192096,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aOXCutHDXgsLiHSTQSKpsfwr5I5PvQaUr2C-8RTF1YA"},
{"content":{"body":" * simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n```","format":"org.matrix.custom.html","formatted_body":" * <p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n</code></pre>\n","m.new_content":{"body":"simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n```","format":"org.matrix.custom.html","formatted_body":"<p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n```","mimetype":"text/plain"},{"body":"<p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n```","mimetype":"text/plain"},{"body":" * <p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntry { taken.throw('err'); } catch (e) { console.log('caught', e); } // prints 'closing' and then 'caught err'\n</code></pre>\n","mimetype":"text/html"}]},"ts":1670657212554,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$znERCBWCcLXuNfq_DDLiL3v2oofN9yhEy5eVCYGKPRo"},
{"content":{"body":"updated my snippet","msgtype":"m.text","org.matrix.msc1767.text":"updated my snippet"},"ts":1670657217918,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z4yuq8V9P7U6jkDqX2_89j9oap9uelASe_8Qr6PMu3A"},
{"content":{"body":"> <@ljharb:matrix.org> but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a `throw` method, so `taken.throw` doesn't exist\n\nhm, ok, I guess it's just `.return` then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6zdsRAUL43lQhiMilflebi7uG8_9DZUAvZ4MGzBxh8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a <code>throw</code> method, so <code>taken.throw</code> doesn't exist</blockquote></mx-reply>hm, ok, I guess it's just <code>.return</code> then","m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","m.in_reply_to":{"event_id":"$6zdsRAUL43lQhiMilflebi7uG8_9DZUAvZ4MGzBxh8M"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a `throw` method, so `taken.throw` doesn't exist\n\nhm, ok, I guess it's just `.return` then","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6zdsRAUL43lQhiMilflebi7uG8_9DZUAvZ4MGzBxh8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but also, the iterator helper wrapper, nor Iterator.prototype, seems to specify a <code>throw</code> method, so <code>taken.throw</code> doesn't exist</blockquote></mx-reply>hm, ok, I guess it's just <code>.return</code> then","mimetype":"text/html"}]},"ts":1670657257478,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wzKVwGo-x2vGOoH0s7dlCMu1TqzTp54NEq6Z2bZUi4g"},
{"content":{"body":"which does not cause an exception, but does still cause an abrupt completion","msgtype":"m.text","org.matrix.msc1767.text":"which does not cause an exception, but does still cause an abrupt completion"},"ts":1670657291986,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dGN2URp3msUM4wopXJEjnxSSpw2PWmMT7sFJzoqi5V0"},
{"content":{"body":" * simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n```","format":"org.matrix.custom.html","formatted_body":" * <p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n</code></pre>\n","m.new_content":{"body":"simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n```","format":"org.matrix.custom.html","formatted_body":"<p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n```","mimetype":"text/plain"},{"body":"<p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ZOeZbb3680ZWWnl_rOLlka9oJtaKQxlJmMjOBYRnDSQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * simple test for this example:\n\n```\nlet manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n```","mimetype":"text/plain"},{"body":" * <p>simple test for this example:</p>\n<pre><code>let manualIter = {\n  next(){ console.log('next'); return { done: false, value: null } },\n  throw(){ console.log('not hit'); },\n  return() { console.log('closing'); return {}; },\n};\n\nlet taken = Iterator.from(manualIter).take(10);\ntaken.next(); // prints 'next'\ntaken.return(); // prints 'closing'\ntaken.next(); // returns { done: true }\n</code></pre>\n","mimetype":"text/html"}]},"ts":1670657343348,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lhYPyz2rf9VikDztQ_8nmKxL6iCGyfj-7wOQSAdpLmI"},
{"content":{"body":"that makes it a little harder for a test to clearly demonstrate what's going on, but updated my snippet anyway","msgtype":"m.text","org.matrix.msc1767.text":"that makes it a little harder for a test to clearly demonstrate what's going on, but updated my snippet anyway"},"ts":1670657364745,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LVrpnzDbxuD1jVXZr7yvBK1dtg0wH9cxcUkEFNow0fI"},
{"content":{"body":"writing tests without code to run them against is hard","msgtype":"m.text","org.matrix.msc1767.text":"writing tests without code to run them against is hard"},"ts":1670657379347,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7mniZyuIjHx9dikvvST3-iXI7musdS1RyO__K6O8U3o"}
]