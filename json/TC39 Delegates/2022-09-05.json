[
{"content":{"body":"i didn’t realize that. It shouldn’t use instanceof - like everything else in the language, it should use a brand.","msgtype":"m.text"},"ts":1662340382539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-C59eABB4tLopeNA70QDInrmx_ThLOoRp6L0LOZJonA"},
{"content":{"body":"no, it's an interface","msgtype":"m.text","org.matrix.msc1767.text":"no, it's an interface"},"ts":1662340671847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w_9mcym64NeBW1BahlfAYlH2DwZ5c0Z8gW2xaUjVGlY"},
{"content":{"body":"it's not a class","msgtype":"m.text","org.matrix.msc1767.text":"it's not a class"},"ts":1662340674377,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zQwnLrkplEET2n3l_ubfUJWj5ldoCufSJFnEKGajrQI"},
{"content":{"body":"I mean, it is also a class","msgtype":"m.text","org.matrix.msc1767.text":"I mean, it is also a class"},"ts":1662340678963,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4QMhEifke8dCmYYJAOv8_dbL-_2mH_8tjhu4K2UL1z4"},
{"content":{"body":"but there is no particular reason a userland instance needs to have the brand","msgtype":"m.text","org.matrix.msc1767.text":"but there is no particular reason a userland instance needs to have the brand"},"ts":1662340710356,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gd1aFxN8Oom6Gn5Bh4cnX54Xt-Ix69VjfCVbA5E1Msc"},
{"content":{"body":"> <@ljharb:matrix.org> i didn’t realize that. It shouldn’t use instanceof - like everything else in the language, it should use a brand.\n\nhow do you brand something whose definition is \"has a next method that returns { value, done }\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-C59eABB4tLopeNA70QDInrmx_ThLOoRp6L0LOZJonA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i didn’t realize that. It shouldn’t use instanceof - like everything else in the language, it should use a brand.</blockquote></mx-reply>how do you brand something whose definition is &quot;has a next method that returns { value, done }&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$-C59eABB4tLopeNA70QDInrmx_ThLOoRp6L0LOZJonA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i didn’t realize that. It shouldn’t use instanceof - like everything else in the language, it should use a brand.\n\nhow do you brand something whose definition is \"has a next method that returns { value, done }\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-C59eABB4tLopeNA70QDInrmx_ThLOoRp6L0LOZJonA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i didn’t realize that. It shouldn’t use instanceof - like everything else in the language, it should use a brand.</blockquote></mx-reply>how do you brand something whose definition is &quot;has a next method that returns { value, done }&quot;","mimetype":"text/html"}]},"ts":1662344055471,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wjliZHNiid8QGrTB7kgtS87RG_3zjE_CgbtSVqha9IM"},
{"content":{"body":"or if you subscribe to the other idea, \"an object inheriting Iterator.prototype\"","msgtype":"m.text","org.matrix.msc1767.text":"or if you subscribe to the other idea, \"an object inheriting Iterator.prototype\""},"ts":1662344156312,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TM2MohzNM668zrEC6G5fWwteSc68jC9fWX0q8u-DZws"},
{"content":{"body":"objects in the language that inherit from a prototype also have a brand, thats checked in places. ","format":"org.matrix.custom.html","formatted_body":"objects in the language that inherit from a prototype also have a brand, thats checked in places.","msgtype":"m.text"},"ts":1662348923409,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q70-jSJ6c-bbc5zHbFu0diwU0_yWY-nqXO_pK6pqwF4"},
{"content":{"body":"no i like","msgtype":"m.text","org.matrix.msc1767.text":"no i like"},"ts":1662349115852,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yLzX0qD9MSI4rNSHJguAS5gaBdVQ8PzVuFGjzDweC-E"},
{"content":{"body":"i do not understand the mechanic by which this would work","msgtype":"m.text","org.matrix.msc1767.text":"i do not understand the mechanic by which this would work"},"ts":1662349122553,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BNxdPSLejvoMef5pSzoqcJdFd48xGGEJ6Dpodd9PWR4"},
{"content":{"body":"anything that's `instanceof Iterator` in the language would have an internal slot, which is what Iterator.from would check","format":"org.matrix.custom.html","formatted_body":"anything that's <code>instanceof Iterator</code> in the language would have an internal slot, which is what Iterator.from would check","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"anything that's `instanceof Iterator` in the language would have an internal slot, which is what Iterator.from would check","mimetype":"text/plain"},{"body":"anything that's <code>instanceof Iterator</code> in the language would have an internal slot, which is what Iterator.from would check","mimetype":"text/html"}]},"ts":1662398246579,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cTKEEmqCQeaiaaSXLxkAUeRjkbM9cPLH43JTd3s12eo"},
{"content":{"body":"in the language or, presumably, the web platform?","msgtype":"m.text","org.matrix.msc1767.text":"in the language or, presumably, the web platform?"},"ts":1662398894641,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H699GBWUMXeVf7zL4ti-BDABSHratzi_FVj05gDIvCg"},
{"content":{"body":"I suppose that would be possible but... why?","msgtype":"m.text","org.matrix.msc1767.text":"I suppose that would be possible but... why?"},"ts":1662398908850,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yVcmyI3OOTUnDho7vxgNnhNnhlRSTXon5I9LAelmfDo"},
{"content":{"body":"> <@ljharb:matrix.org> anything that's `instanceof Iterator` in the language would have an internal slot, which is what Iterator.from would check\n\nhow do they get the internal slot? they're just random objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cTKEEmqCQeaiaaSXLxkAUeRjkbM9cPLH43JTd3s12eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>anything that's <code>instanceof Iterator</code> in the language would have an internal slot, which is what Iterator.from would check</blockquote></mx-reply>how do they get the internal slot? they're just random objects","m.relates_to":{"m.in_reply_to":{"event_id":"$cTKEEmqCQeaiaaSXLxkAUeRjkbM9cPLH43JTd3s12eo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> anything that's `instanceof Iterator` in the language would have an internal slot, which is what Iterator.from would check\n\nhow do they get the internal slot? they're just random objects","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cTKEEmqCQeaiaaSXLxkAUeRjkbM9cPLH43JTd3s12eo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>anything that's <code>instanceof Iterator</code> in the language would have an internal slot, which is what Iterator.from would check</blockquote></mx-reply>how do they get the internal slot? they're just random objects","mimetype":"text/html"}]},"ts":1662402129722,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$X1gvWyi6YDLpBtZ1pshW4hk0Ha5h0d7OC4R4WQkYiOI"},
{"content":{"body":"oh are you saying Iterator.from would be the thing that produces objects with that slot","msgtype":"m.text","org.matrix.msc1767.text":"oh are you saying Iterator.from would be the thing that produces objects with that slot"},"ts":1662402220028,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$p6nqnnB3vTDL1nXXRSti-FSYP7YyD337OrpVUqA_eeQ"},
{"content":{"body":"technically the new object it returns has `[[Iterated]]`","format":"org.matrix.custom.html","formatted_body":"technically the new object it returns has <code>[[Iterated]]</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"technically the new object it returns has `[[Iterated]]`","mimetype":"text/plain"},{"body":"technically the new object it returns has <code>[[Iterated]]</code>","mimetype":"text/html"}]},"ts":1662402330272,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GbZ5clIaMu45qRy04EdC3eOYkZctSQyTu8dcqIbTF0Y"},
{"content":{"body":"but","msgtype":"m.text","org.matrix.msc1767.text":"but"},"ts":1662402331130,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rnVb2gNeBFL4S4ui_67If6vaoHCrxfeN-KJ-Og_8iSM"},
{"content":{"body":"it doesn't have to return the new object","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't have to return the new object"},"ts":1662402337717,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FImd2mhLwI5KJblBv9c0IqQmVgECw6pKxoILQur6oac"},
{"content":{"body":"like if i run `Iterator.from({ next() {}, __proto__: Iterator.prototype })`, it should return that argument unchanged","format":"org.matrix.custom.html","formatted_body":"like if i run <code>Iterator.from({ next() {}, __proto__: Iterator.prototype })</code>, it should return that argument unchanged","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like if i run `Iterator.from({ next() {}, __proto__: Iterator.prototype })`, it should return that argument unchanged","mimetype":"text/plain"},{"body":"like if i run <code>Iterator.from({ next() {}, __proto__: Iterator.prototype })</code>, it should return that argument unchanged","mimetype":"text/html"}]},"ts":1662402370577,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OWQs9dKQ1qBGHbp2eP5FuuM2feT22tcVozo8XegTveM"},
{"content":{"body":"that doesn’t seem like what it should be doing at all.","msgtype":"m.text"},"ts":1662405990104,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LU3cw5R66YweG_OuBW8UbulR5gu5Wx_RLoEV3Y_i8wY"},
{"content":{"body":"Array.from doesnt pass through return an arraylike object that has a proto of Array.prototype - it returns a proper array. So should Iterator.from.","msgtype":"m.text"},"ts":1662406037394,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sMBNGrmFsAXPnpyBfRa1GixxF0X4RoFX09Do9UvEwRQ"},
{"content":{"body":"the definition of \"proper iterator\" _is_ \"inherits from Iterator.prototype\", in this context","format":"org.matrix.custom.html","formatted_body":"the definition of &quot;proper iterator&quot; <em>is</em> &quot;inherits from Iterator.prototype&quot;, in this context","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the definition of \"proper iterator\" _is_ \"inherits from Iterator.prototype\", in this context","mimetype":"text/plain"},{"body":"the definition of &quot;proper iterator&quot; <em>is</em> &quot;inherits from Iterator.prototype&quot;, in this context","mimetype":"text/html"}]},"ts":1662406111086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rhIFVxAciD99tFkC1diOBZ1-Z4iNfndgvnCzRnGua7s"},
{"content":{"body":"i don't think that is or should be the definition","msgtype":"m.text","org.matrix.msc1767.text":"i don't think that is or should be the definition"},"ts":1662407070140,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PkFPIq2S9HNVlb-gv81EDgh6WJbXSugsyO114Vh91ic"},
{"content":{"body":"why?","msgtype":"m.text","org.matrix.msc1767.text":"why?"},"ts":1662408034611,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BBH7AJ37pGAwiEKIq3wRKVq_IsuKiVEcFnbwqI1wIzc"},
{"content":{"body":"Iterator is not a concrete thing, I'd rather rename the method if that's the problem","msgtype":"m.text"},"ts":1662412091778,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kyEfzx5BwRZTdhnpPyYnPN097xLUp100bgwTYsgZoj0"},
{"content":{"body":"the whole point of Iterator.from is that it's becoming a concrete thing","msgtype":"m.text","org.matrix.msc1767.text":"the whole point of Iterator.from is that it's becoming a concrete thing"},"ts":1662412540372,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hepC8qp5jygT6-uZNc9eHxYaWzEC6GAYODFYFprO2xo"},
{"content":{"body":"no its just that its giving it the prototype","msgtype":"m.text","org.matrix.msc1767.text":"no its just that its giving it the prototype"},"ts":1662412549067,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FE0rlmxy_GK0HeXUJhvgnUTCJPfJyED3k_ywltgyse0"},
{"content":{"body":"its a convenience for the methods","msgtype":"m.text","org.matrix.msc1767.text":"its a convenience for the methods"},"ts":1662412565528,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$E8bxHBUxmxhp8w3WU-5xDzN06x9zCbrYRwOBXBFkeNw"},
{"content":{"body":"… and the methods do a wrap (to something with the slot) if they're `.call`ed on a random object?","format":"org.matrix.custom.html","formatted_body":"… and the methods do a wrap (to something with the slot) if they're <code>.call</code>ed on a random object?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"… and the methods do a wrap (to something with the slot) if they're `.call`ed on a random object?","mimetype":"text/plain"},{"body":"… and the methods do a wrap (to something with the slot) if they're <code>.call</code>ed on a random object?","mimetype":"text/html"}]},"ts":1662412607742,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8om3A2rYhbiL9qiKm_6g4uTAqDfusKoicN-rhtlq8B8"},
{"content":{"body":"i don't understand what this means","msgtype":"m.text","org.matrix.msc1767.text":"i don't understand what this means"},"ts":1662412653567,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4y18Alvo2QR-DH61yVvsCEmp-yt9AcIglBYDA9w5LXI"},
{"content":{"body":"the `[[Iterated]]` slot you mentioned","format":"org.matrix.custom.html","formatted_body":"the <code>[[Iterated]]</code> slot you mentioned","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `[[Iterated]]` slot you mentioned","mimetype":"text/plain"},{"body":"the <code>[[Iterated]]</code> slot you mentioned","mimetype":"text/html"}]},"ts":1662412661235,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bWqUF80JmuxzCOOjIkAFnNiaxbDllP0GyKCKrME0N_o"},
{"content":{"body":"`[[Iterated]]` is just used for %WrapForValidIteratorPrototype%.next/return","format":"org.matrix.custom.html","formatted_body":"<code>[[Iterated]]</code> is just used for %WrapForValidIteratorPrototype%.next/return","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`[[Iterated]]` is just used for %WrapForValidIteratorPrototype%.next/return","mimetype":"text/plain"},{"body":"<code>[[Iterated]]</code> is just used for %WrapForValidIteratorPrototype%.next/return","mimetype":"text/html"}]},"ts":1662412701801,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$t6dDaVveWa5HklxLHMxMvWZJ5SLNSVLLOv4dBwmIbbQ"},
{"content":{"body":"how can the next method retain internal state unless it has a place to put it?","msgtype":"m.text","org.matrix.msc1767.text":"how can the next method retain internal state unless it has a place to put it?"},"ts":1662412713754,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YUtSAI8Ia3CLqBNdrKSzoTthqVbAAbVABJrkaSYSEdc"},
{"content":{"body":"WrapForValidIteratorPrototype objects don't have any internal state","msgtype":"m.text","org.matrix.msc1767.text":"WrapForValidIteratorPrototype objects don't have any internal state"},"ts":1662412751869,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Chokgskh61ZfT6hzvBkXKydOAPVD9Qg49QTlDGPJj9E"},
{"content":{"body":"[[Iterated]] is just the object they wrap","msgtype":"m.text","org.matrix.msc1767.text":"[[Iterated]] is just the object they wrap"},"ts":1662412764161,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uifLs0ix1MxemQo1bo3GCPCfk4w6ESIu2JnE7XHZKF8"},
{"content":{"body":"well, the iterator record for it","msgtype":"m.text","org.matrix.msc1767.text":"well, the iterator record for it"},"ts":1662412781461,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vfKpR1zfXUy-bDuoXlWhiRF0K03RE8-Lff-jAsNqEAs"},
{"content":{"body":"ok so like `map`. it has to hold on to the original iterator, and to the callback","format":"org.matrix.custom.html","formatted_body":"ok so like <code>map</code>. it has to hold on to the original iterator, and to the callback","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok so like `map`. it has to hold on to the original iterator, and to the callback","mimetype":"text/plain"},{"body":"ok so like <code>map</code>. it has to hold on to the original iterator, and to the callback","mimetype":"text/html"}]},"ts":1662412857151,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WI8Lg7DXkL9wVyWRXaZFPAWVYisro7hhZYOcEPH0X3Y"},
{"content":{"body":"so presumably the iterator object returned by `map` holds that, in an internal slot","format":"org.matrix.custom.html","formatted_body":"so presumably the iterator object returned by <code>map</code> holds that, in an internal slot","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so presumably the iterator object returned by `map` holds that, in an internal slot","mimetype":"text/plain"},{"body":"so presumably the iterator object returned by <code>map</code> holds that, in an internal slot","mimetype":"text/html"}]},"ts":1662412875595,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hm5fBy1l1s9bT1vCgwkyBqcdYr3do9AgQUusGu3tbAQ"},
{"content":{"body":"they use closures","msgtype":"m.text","org.matrix.msc1767.text":"they use closures"},"ts":1662412913713,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$u764kryPeEMI_nPwkSpNznS2IENxDJ2D1_mtPRvp29I"},
{"content":{"body":"so the iterator object doesn't use a shared `next` method, it makes a new one each time `map` is called?","format":"org.matrix.custom.html","formatted_body":"so the iterator object doesn't use a shared <code>next</code> method, it makes a new one each time <code>map</code> is called?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so the iterator object doesn't use a shared `next` method, it makes a new one each time `map` is called?","mimetype":"text/plain"},{"body":"so the iterator object doesn't use a shared <code>next</code> method, it makes a new one each time <code>map</code> is called?","mimetype":"text/html"}]},"ts":1662412947105,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m_JDr1vvkmyrn8USQwcL2MGeaUK6lRT6bbK6Ak1irUY"},
{"content":{"body":"uhh","msgtype":"m.text","org.matrix.msc1767.text":"uhh"},"ts":1662412959264,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ANPLK7QsLfmt4DQX1nNiUgeISIVIvVRbW4Pat6KtaGc"},
{"content":{"body":"it uses %IteratorHelperPrototype%.next","msgtype":"m.text","org.matrix.msc1767.text":"it uses %IteratorHelperPrototype%.next"},"ts":1662412963674,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$RztOoehKHCvyBGOiGBtPhNaCDaBHyTdviK1oy_vMr-o"},
{"content":{"body":" * it uses %IteratorHelperPrototype%.next","m.new_content":{"body":"it uses %IteratorHelperPrototype%.next","msgtype":"m.text","org.matrix.msc1767.text":"it uses %IteratorHelperPrototype%.next"},"m.relates_to":{"event_id":"$RztOoehKHCvyBGOiGBtPhNaCDaBHyTdviK1oy_vMr-o","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it uses %IteratorHelperPrototype%.next"},"ts":1662412967801,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OJVAl4kxBFzOQjGvAafq0M92rg3nJk-MI-JZlXNCDM4"},
{"content":{"body":"right. but that's a shared method.","msgtype":"m.text","org.matrix.msc1767.text":"right. but that's a shared method."},"ts":1662412968948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5sixVeJuCGROoMvIp4WFCQBQISNodLMxMcfuDgxt01k"},
{"content":{"body":"which is just %GeneratorPrototype%.next but fancy","msgtype":"m.text","org.matrix.msc1767.text":"which is just %GeneratorPrototype%.next but fancy"},"ts":1662412975382,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$es-sgvVFFATpWgnv9AtzsqkVR16mtwUqYIgu9_H0LBI"},
{"content":{"body":"so it can't close over something that's unique to a given `map` call","format":"org.matrix.custom.html","formatted_body":"so it can't close over something that's unique to a given <code>map</code> call","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so it can't close over something that's unique to a given `map` call","mimetype":"text/plain"},{"body":"so it can't close over something that's unique to a given <code>map</code> call","mimetype":"text/html"}]},"ts":1662412976847,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QUsquZz7GyX5sz6ENG2Lr4z8THe84BHOaueVqKeXlSY"},
{"content":{"body":"because it exists before `map` is ever called.","format":"org.matrix.custom.html","formatted_body":"because it exists before <code>map</code> is ever called.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because it exists before `map` is ever called.","mimetype":"text/plain"},{"body":"because it exists before <code>map</code> is ever called.","mimetype":"text/html"}]},"ts":1662412990849,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5uDd5NWjxiVH2ErbW6giS1OcwarXUAlOHIdrVjL70O0"},
{"content":{"body":" * which is just %GeneratorPrototype%.next but fancy","m.new_content":{"body":"which is just %GeneratorPrototype%.next but fancy","msgtype":"m.text","org.matrix.msc1767.text":"which is just %GeneratorPrototype%.next but fancy"},"m.relates_to":{"event_id":"$es-sgvVFFATpWgnv9AtzsqkVR16mtwUqYIgu9_H0LBI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * which is just %GeneratorPrototype%.next but fancy"},"ts":1662412991878,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gkTL-A9-lig6LtkD6Ap0Q-l9wPTfen9nxTtDezriB5Q"},
{"content":{"body":"so where is that state held so that `next` can access it?","format":"org.matrix.custom.html","formatted_body":"so where is that state held so that <code>next</code> can access it?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so where is that state held so that `next` can access it?","mimetype":"text/plain"},{"body":"so where is that state held so that <code>next</code> can access it?","mimetype":"text/html"}]},"ts":1662413004823,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FvRpgEY5PKf6fK3jOEILDjeSBi3szXg2C0Ud_NuF_4Y"},
{"content":{"body":"same place that normal generators store it","msgtype":"m.text","org.matrix.msc1767.text":"same place that normal generators store it"},"ts":1662413019873,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2q35xroKvY3pO6gg3K0Z_oKYVUdtWXndA6pUkRRSJSU"},
{"content":{"body":"the only thing is","msgtype":"m.text","org.matrix.msc1767.text":"the only thing is"},"ts":1662413030121,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xanjyeh7zrCwzzOAm9oyjteQ1YYYBq0rr-JyU1J3ivM"},
{"content":{"body":"you can grep for `[[GeneratorBrand]]` in the spec","format":"org.matrix.custom.html","formatted_body":"you can grep for <code>[[GeneratorBrand]]</code> in the spec","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can grep for `[[GeneratorBrand]]` in the spec","mimetype":"text/plain"},{"body":"you can grep for <code>[[GeneratorBrand]]</code> in the spec","mimetype":"text/html"}]},"ts":1662413046149,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vXq1WwFQH7rQfKd-yf8GAjUi8TGlRcXr6jKrWnXca9M"},
{"content":{"body":"right but that's in a slot on the generator instance, no?","msgtype":"m.text","org.matrix.msc1767.text":"right but that's in a slot on the generator instance, no?"},"ts":1662413046150,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SNgaZ022SGw4sK5Qhf5dsZLVb3X2XTzIy4VRZ7ZBBsw"},
{"content":{"body":"https://tc39.es/ecma262/#sec-generatorvalidate","msgtype":"m.text","org.matrix.msc1767.text":"https://tc39.es/ecma262/#sec-generatorvalidate"},"ts":1662413053324,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$w11QVFYnx0_kRW_4gYgALbMRDHQBmO-gTYM5VgNQQ2k"},
{"content":{"body":"this is the only way it tells them apart","msgtype":"m.text","org.matrix.msc1767.text":"this is the only way it tells them apart"},"ts":1662413059829,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$m-IS-jQrMBBmIZkSynqf1lf3TRt2fO1ehUxHtFyuRIo"},
{"content":{"body":"but that just tells you if it was a generator helper method","msgtype":"m.text","org.matrix.msc1767.text":"but that just tells you if it was a generator helper method"},"ts":1662413068839,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XYoZnm_a4UxmKmytGOM6Y-CvlMHYRcuj_yUmWDVmbf0"},
{"content":{"body":"tbh i'm not sure why we separate them at all, they just call `GeneratorResume`","format":"org.matrix.custom.html","formatted_body":"tbh i'm not sure why we separate them at all, they just call <code>GeneratorResume</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"tbh i'm not sure why we separate them at all, they just call `GeneratorResume`","mimetype":"text/plain"},{"body":"tbh i'm not sure why we separate them at all, they just call <code>GeneratorResume</code>","mimetype":"text/html"}]},"ts":1662413082969,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$sqJY42ySJEzIwx9Au5iu2x5Qdr6jAWVxzInssSPIOQo"},
{"content":{"body":"right. and [[GeneratorContext]] and [[GeneratorState]] are slots on the iterator object that hold the state","msgtype":"m.text","org.matrix.msc1767.text":"right. and [[GeneratorContext]] and [[GeneratorState]] are slots on the iterator object that hold the state"},"ts":1662413104878,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SEGaU_vUse8dQU-dyXUwSBWDCcAlDlNnaIMyNP1yoB4"},
{"content":{"body":"yeah its a generator","msgtype":"m.text","org.matrix.msc1767.text":"yeah its a generator"},"ts":1662413122708,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gG0pbye9mOOUxZPfyaswLBY0go8dMlkX7PisfUnWwb0"},
{"content":{"body":"right","msgtype":"m.text","org.matrix.msc1767.text":"right"},"ts":1662413127530,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$08y8kDBYg0B0YUbKRpP0YF75OlXlLL817TAgW4Vwrsw"},
{"content":{"body":"and GeneratorValidate brand-checks the iterator. it doesn't matter what its [[Prototype]] is, it matters if it has the expected slots.","msgtype":"m.text","org.matrix.msc1767.text":"and GeneratorValidate brand-checks the iterator. it doesn't matter what its [[Prototype]] is, it matters if it has the expected slots."},"ts":1662413163805,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UeJ2m8WC6I4YwgKXk8yU6m-Dw6QjcaxnIZYG6d47H7w"},
{"content":{"body":"ye","msgtype":"m.text","org.matrix.msc1767.text":"ye"},"ts":1662413172585,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_8x4LwVnCZ8HDh18cFm45h-ilxY42eMZgMIArpXdDWs"},
{"content":{"body":"so i assume that Iterator Helper methods all do the same validation","msgtype":"m.text","org.matrix.msc1767.text":"so i assume that Iterator Helper methods all do the same validation"},"ts":1662413185083,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VcSlyM6z_xCedRYgDw-f4id1g76xXwb06Vsu_zNedH4"},
{"content":{"body":"iterator helper methods do not know about those brand checks, they perform them via calling stuff like `GeneratorResume`","format":"org.matrix.custom.html","formatted_body":"iterator helper methods do not know about those brand checks, they perform them via calling stuff like <code>GeneratorResume</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"iterator helper methods do not know about those brand checks, they perform them via calling stuff like `GeneratorResume`","mimetype":"text/plain"},{"body":"iterator helper methods do not know about those brand checks, they perform them via calling stuff like <code>GeneratorResume</code>","mimetype":"text/html"}]},"ts":1662413211015,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-5WYr1wTeWQEjpdNfeibewhcPJMptkEtFNSDkmyc1yg"},
{"content":{"body":"right but they still exist","msgtype":"m.text","org.matrix.msc1767.text":"right but they still exist"},"ts":1662413217036,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$H2gjQjSMRWyY03xBBq5PRMCzl-SbIC6pLBoUjNM5Iq8"},
{"content":{"body":"sure","msgtype":"m.text","org.matrix.msc1767.text":"sure"},"ts":1662413219533,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XYrgFds9njTj2Jx-NMsoTvc06WWB9mAT9kubuAPLQcE"},
{"content":{"body":"which means that `{ __proto__: Iterator.prototype }` would fail that check, and not be a usable receiver with the Iterator Helper methods. which means Iterator.from musn't ever return it.","format":"org.matrix.custom.html","formatted_body":"which means that <code>{ __proto__: Iterator.prototype }</code> would fail that check, and not be a usable receiver with the Iterator Helper methods. which means Iterator.from musn't ever return it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"which means that `{ __proto__: Iterator.prototype }` would fail that check, and not be a usable receiver with the Iterator Helper methods. which means Iterator.from musn't ever return it.","mimetype":"text/plain"},{"body":"which means that <code>{ __proto__: Iterator.prototype }</code> would fail that check, and not be a usable receiver with the Iterator Helper methods. which means Iterator.from musn't ever return it.","mimetype":"text/html"}]},"ts":1662413221744,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BWyvtk0Qf7Ng3CQgBl7N69otJfVIiznSBdTygfCPajY"},
{"content":{"body":"which means that Iterator.from always returns a brand-checkable object, one that GeneratorValidate will accept.","msgtype":"m.text","org.matrix.msc1767.text":"which means that Iterator.from always returns a brand-checkable object, one that GeneratorValidate will accept."},"ts":1662413237449,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KMejRCtV06Ufv9QYrPunzWm3IexqdKQl9Qfpw4sOCbw"},
{"content":{"body":"uhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh","msgtype":"m.text","org.matrix.msc1767.text":"uhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"},"ts":1662413246938,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LV5sYiAIzbL9Lq-m5vcJ6wrL2w1KXKbKFbI7LfEbB0Q"},
{"content":{"body":"no","msgtype":"m.text","org.matrix.msc1767.text":"no"},"ts":1662413247624,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yyX0Duo-OVwh9KOT2riuFEg8TTjtRDpHSU9kr2VvegI"},
{"content":{"body":"what am i missing there?","msgtype":"m.text","org.matrix.msc1767.text":"what am i missing there?"},"ts":1662413256444,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hCtygA_lIuxI3APenyh0LOA5_9CSiKp-ZVZmR33GQ0I"},
{"content":{"body":"assuming this `let iterWithGeneratorSlots = [].values().map(x => x); `","format":"org.matrix.custom.html","formatted_body":"assuming this <code>let iterWithGeneratorSlots = [].values().map(x =&gt; x); </code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"assuming this `let iterWithGeneratorSlots = [].values().map(x => x); `","mimetype":"text/plain"},{"body":"assuming this <code>let iterWithGeneratorSlots = [].values().map(x =&gt; x); </code>","mimetype":"text/html"}]},"ts":1662413280628,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LpTy7V_bAze8WVlbAQ3sEfbhlijWLGauFs7yMlV--8M"},
{"content":{"body":"`Iterator.from(iterWithGeneratorSlots)` passes it through unchanged because it inherits from %Iterator.prototype%","format":"org.matrix.custom.html","formatted_body":"<code>Iterator.from(iterWithGeneratorSlots)</code> passes it through unchanged because it inherits from %Iterator.prototype%","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Iterator.from(iterWithGeneratorSlots)` passes it through unchanged because it inherits from %Iterator.prototype%","mimetype":"text/plain"},{"body":"<code>Iterator.from(iterWithGeneratorSlots)</code> passes it through unchanged because it inherits from %Iterator.prototype%","mimetype":"text/html"}]},"ts":1662413302541,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Qzbn4C0hQ4IzkecQkv7Yy84lN9uIfpG9WRkEUjCws74"},
{"content":{"body":"but","msgtype":"m.text","org.matrix.msc1767.text":"but"},"ts":1662413304787,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NNwcjuKed7d1Gp0qvpd0XHfQYvGcu9VBgIVOnfTVEUQ"},
{"content":{"body":"if you do `Iterator.from({ next() {}, __proto__: Iterator.prototype })` it also passes it through unchanged","format":"org.matrix.custom.html","formatted_body":"if you do <code>Iterator.from({ next() {}, __proto__: Iterator.prototype })</code> it also passes it through unchanged","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you do `Iterator.from({ next() {}, __proto__: Iterator.prototype })` it also passes it through unchanged","mimetype":"text/plain"},{"body":"if you do <code>Iterator.from({ next() {}, __proto__: Iterator.prototype })</code> it also passes it through unchanged","mimetype":"text/html"}]},"ts":1662413337242,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Kw3P6CB2H9B0heBADQZysbSK7Ug7B7XM9TbmqNNQzKI"},
{"content":{"body":"that's not doing any generator stuff","msgtype":"m.text","org.matrix.msc1767.text":"that's not doing any generator stuff"},"ts":1662413344970,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nAobu_N3dG5njRBYix9c7EovFtNgcRgv65eIH0K2m-8"},
{"content":{"body":"if you do `Iterator.from({ next() {} })` that creates a %WrapForValidIteratorPrototype% object and returns it","format":"org.matrix.custom.html","formatted_body":"if you do <code>Iterator.from({ next() {} })</code> that creates a %WrapForValidIteratorPrototype% object and returns it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you do `Iterator.from({ next() {} })` that creates a %WrapForValidIteratorPrototype% object and returns it","mimetype":"text/plain"},{"body":"if you do <code>Iterator.from({ next() {} })</code> that creates a %WrapForValidIteratorPrototype% object and returns it","mimetype":"text/html"}]},"ts":1662413369694,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qQrWJ53mZ7nVzGRfLMqF0_0ggWwDTc6DqOrZ-LlUFJg"},
{"content":{"body":"ok but what happens with `Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x => x)`?","format":"org.matrix.custom.html","formatted_body":"ok but what happens with <code>Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x =&gt; x)</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok but what happens with `Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x => x)`?","mimetype":"text/plain"},{"body":"ok but what happens with <code>Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x =&gt; x)</code>?","mimetype":"text/html"}]},"ts":1662413370204,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LsQtqLaQ5qIkW0SyurbgXlaKLmZY7Ul9Gb130njlwlo"},
{"content":{"body":"but that still doesn't have any generator slots","msgtype":"m.text","org.matrix.msc1767.text":"but that still doesn't have any generator slots"},"ts":1662413377331,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tNk2Yop4o224kZcuzfzJ_oDUDMMArZkIZpjqvclLccw"},
{"content":{"body":"cuz its not a generator","msgtype":"m.text","org.matrix.msc1767.text":"cuz its not a generator"},"ts":1662413380615,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$STGt1M7epvd85mChsbQ-JMmHdF25w9HJVc4GKTd4prY"},
{"content":{"body":"its just a stupid wrapper","msgtype":"m.text","org.matrix.msc1767.text":"its just a stupid wrapper"},"ts":1662413384860,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PbRXsRiITS2FH2mlZECo56cBThPAWQ5bX-jECHmPAwQ"},
{"content":{"body":"> <@ljharb:matrix.org> ok but what happens with `Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x => x)`?\n\nthat has generator slots cuz you called map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LsQtqLaQ5qIkW0SyurbgXlaKLmZY7Ul9Gb130njlwlo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok but what happens with <code>Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x =&gt; x)</code>?</blockquote></mx-reply>that has generator slots cuz you called map","m.relates_to":{"m.in_reply_to":{"event_id":"$LsQtqLaQ5qIkW0SyurbgXlaKLmZY7Ul9Gb130njlwlo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> ok but what happens with `Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x => x)`?\n\nthat has generator slots cuz you called map","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LsQtqLaQ5qIkW0SyurbgXlaKLmZY7Ul9Gb130njlwlo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok but what happens with <code>Iterator.from({ next() {}, __proto__: Iterator.prototype }).map(x =&gt; x)</code>?</blockquote></mx-reply>that has generator slots cuz you called map","mimetype":"text/html"}]},"ts":1662413391977,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aNDjHm5hoNoPJXPkz435Dn8xpL6l8CvzUVNWU3RRXhM"},
{"content":{"body":"ok, and `.map` doesn't care if its receiver has the slots?","format":"org.matrix.custom.html","formatted_body":"ok, and <code>.map</code> doesn't care if its receiver has the slots?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok, and `.map` doesn't care if its receiver has the slots?","mimetype":"text/plain"},{"body":"ok, and <code>.map</code> doesn't care if its receiver has the slots?","mimetype":"text/html"}]},"ts":1662413406286,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_WUnW9vaCZf37VS_e3JohALiOQkww3gDwV5ZjNsZqh0"},
{"content":{"body":" * ok, and `.map` doesn't care if its receiver has the slots?","format":"org.matrix.custom.html","formatted_body":" * ok, and <code>.map</code> doesn't care if its receiver has the slots?","m.new_content":{"body":"ok, and `.map` doesn't care if its receiver has the slots?","format":"org.matrix.custom.html","formatted_body":"ok, and <code>.map</code> doesn't care if its receiver has the slots?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ok, and `.map` doesn't care if its receiver has the slots?","mimetype":"text/plain"},{"body":"ok, and <code>.map</code> doesn't care if its receiver has the slots?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_WUnW9vaCZf37VS_e3JohALiOQkww3gDwV5ZjNsZqh0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * ok, and `.map` doesn't care if its receiver has the slots?","mimetype":"text/plain"},{"body":" * ok, and <code>.map</code> doesn't care if its receiver has the slots?","mimetype":"text/html"}]},"ts":1662413407853,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uQKMxkxdyQLt0_qQFM5gBcr7wnPEMsPOAcsebpF8fd0"},
{"content":{"body":"no it does not","msgtype":"m.text","org.matrix.msc1767.text":"no it does not"},"ts":1662413412540,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EvwhFe8tejQVdtZFNRWZ32MaZW7e5ZnDs-JNQV8kdRI"},
{"content":{"body":"oof","msgtype":"m.text","org.matrix.msc1767.text":"oof"},"ts":1662413415145,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I8cS2dPh9CNhsUoYr6-hTiC8HmfAgYt93sxGW2kYYtE"},
{"content":{"body":"all it cares is that the receiver is an iterator","msgtype":"m.text","org.matrix.msc1767.text":"all it cares is that the receiver is an iterator"},"ts":1662413419662,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Cok4wE_p6lnekXhXhju7VQCyKCZUII09JsCoodwSGZ4"},
{"content":{"body":"https://gc.gy/130118458.png","msgtype":"m.text","org.matrix.msc1767.text":"https://gc.gy/130118458.png"},"ts":1662413459446,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rYQLuWC5EIF3ZlzV_c2QK0tfwv_g4l8v1OXLm2abvLI"},
{"content":{"body":"this is why `{ next() {}, __proto__: Iterator.prototype }` is valid","format":"org.matrix.custom.html","formatted_body":"this is why <code>{ next() {}, __proto__: Iterator.prototype }</code> is valid","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this is why `{ next() {}, __proto__: Iterator.prototype }` is valid","mimetype":"text/plain"},{"body":"this is why <code>{ next() {}, __proto__: Iterator.prototype }</code> is valid","mimetype":"text/html"}]},"ts":1662413533928,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BsUkxxa9dXtWBNKsjnWVxE15cJ9iJUObNNM5LSCjld4"},
{"content":{"body":"with protocols you have to assume that the object is already created as some other shape, you're augmenting them with the functionality, implementing the protocol on top of something else","msgtype":"m.text","org.matrix.msc1767.text":"with protocols you have to assume that the object is already created as some other shape, you're augmenting them with the functionality, implementing the protocol on top of something else"},"ts":1662413572882,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HFGzAQWv5oIcoEjpmwjfeGe_h95sHvhS8p3r-S9TdV8"},
{"content":{"body":"i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","format":"org.matrix.custom.html","formatted_body":"i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","mimetype":"text/plain"},{"body":"i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","mimetype":"text/html"}]},"ts":1662413584619,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hBP3x0IJCza7zLXgh9ANjjNwYLVm6otT4WtVE3YQ_Pc"},
{"content":{"body":" * i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","format":"org.matrix.custom.html","formatted_body":" * i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","m.new_content":{"body":"i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","format":"org.matrix.custom.html","formatted_body":"i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","mimetype":"text/plain"},{"body":"i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$hBP3x0IJCza7zLXgh9ANjjNwYLVm6otT4WtVE3YQ_Pc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i don't understand why, if everyone's going to `Iterator.from()` anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally `.map(x => x)`","mimetype":"text/plain"},{"body":" * i don't understand why, if everyone's going to <code>Iterator.from()</code> anyways to get the methods, we wouldn't want to unconditionally wrap - ie, to unconditionally <code>.map(x =&gt; x)</code>","mimetype":"text/html"}]},"ts":1662413604469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$73wf1ixegE37smJt1dJqyeCF5P2xjdA4TdxtGo1sojg"},
{"content":{"body":"i think its pretty rare that you would *need* to use Iterator.from","format":"org.matrix.custom.html","formatted_body":"i think its pretty rare that you would <em>need</em> to use Iterator.from","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i think its pretty rare that you would *need* to use Iterator.from","mimetype":"text/plain"},{"body":"i think its pretty rare that you would <em>need</em> to use Iterator.from","mimetype":"text/html"}]},"ts":1662413612370,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fM7cUps8uOQzuab0vKAUaUumd2OsmTFo3OlL9oqVWYM"},
{"content":{"body":"that way we have a consistent \"real iterator\" definition","msgtype":"m.text","org.matrix.msc1767.text":"that way we have a consistent \"real iterator\" definition"},"ts":1662413614392,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tkQ33PgNWVX489cTO4ClOu8OTvEsTsGVo1XktgsEN8Q"},
{"content":{"body":"i think you'll want to do it any time you're dealing with a user-supplied iterator. which will be frequent.","msgtype":"m.text","org.matrix.msc1767.text":"i think you'll want to do it any time you're dealing with a user-supplied iterator. which will be frequent."},"ts":1662413646617,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dq5oKbcY-LCnWd_DLdS1LjDOCrnjWdbblaKVZmM-abc"},
{"content":{"body":"i mean, those are rare lol","msgtype":"m.text","org.matrix.msc1767.text":"i mean, those are rare lol"},"ts":1662413667005,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$AvFfTizl-t7PPDpeSnrw0nMFUx337NdLK4im-QiNOq8"},
{"content":{"body":"you'd want to maximally accept and normalize all possible iterators","msgtype":"m.text","org.matrix.msc1767.text":"you'd want to maximally accept and normalize all possible iterators"},"ts":1662413667301,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9EWAYAU9ygArVJ_in_K0-DdHDK8yl7HrouWqI_lYeCU"},
{"content":{"body":"that's what `Promise.resolve` is good for too","format":"org.matrix.custom.html","formatted_body":"that's what <code>Promise.resolve</code> is good for too","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that's what `Promise.resolve` is good for too","mimetype":"text/plain"},{"body":"that's what <code>Promise.resolve</code> is good for too","mimetype":"text/html"}]},"ts":1662413673290,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8JUDQUJRPxj3FeeIZvsgzUFi0bz8mz2J72ksxIT73RM"},
{"content":{"body":"yeah i mean","msgtype":"m.text","org.matrix.msc1767.text":"yeah i mean"},"ts":1662413676360,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1mW3jmp0wxiJ8IUD4cMh9pC8UAS4hGo8w9lr5V-xWyg"},
{"content":{"body":"it normalizes thenables into Real Promises, which are always preferred","msgtype":"m.text","org.matrix.msc1767.text":"it normalizes thenables into Real Promises, which are always preferred"},"ts":1662413681810,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2CUvuetOtjZ8qjNDNqdUdyqDODZAsIsDnBFXQBS5TFE"},
{"content":{"body":"if you're you, writing some sort of complex fancy library that has to deal with the world","msgtype":"m.text","org.matrix.msc1767.text":"if you're you, writing some sort of complex fancy library that has to deal with the world"},"ts":1662413686635,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SoxYm46PbMeiJUYqVidoaCQhbIQZ8UnDgqooSZzX2oE"},
{"content":{"body":"similarly i'd always want a Real Iterator, not just an \"iterator\"","msgtype":"m.text","org.matrix.msc1767.text":"similarly i'd always want a Real Iterator, not just an \"iterator\""},"ts":1662413689388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4ogiOLk7__p-30Nj5euhjb95QJ1EBLTWukEsXB6HXk8"},
{"content":{"body":"go for it","msgtype":"m.text","org.matrix.msc1767.text":"go for it"},"ts":1662413691688,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9ip9YnJdzKnf2XzFl7Q1DJ5dBvYrzf9L2pbINHWrp70"},
{"content":{"body":"this isn't just a \"my unique coding style\" thing tho, this is any package","msgtype":"m.text","org.matrix.msc1767.text":"this isn't just a \"my unique coding style\" thing tho, this is any package"},"ts":1662413706469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ra1h19-bMmPIl_NqDkVN865hxjdjemrVRLiZR8Ep9YE"},
{"content":{"body":"anything that accepts an iterator. just like anything that accepts a thenable always uses Promise.resolve or `await` to normalize it first into a real promise","format":"org.matrix.custom.html","formatted_body":"anything that accepts an iterator. just like anything that accepts a thenable always uses Promise.resolve or <code>await</code> to normalize it first into a real promise","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"anything that accepts an iterator. just like anything that accepts a thenable always uses Promise.resolve or `await` to normalize it first into a real promise","mimetype":"text/plain"},{"body":"anything that accepts an iterator. just like anything that accepts a thenable always uses Promise.resolve or <code>await</code> to normalize it first into a real promise","mimetype":"text/html"}]},"ts":1662413725531,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qli8koXGzpVKNx4jEXLRnWiz9qti086063n5OM9yJxc"},
{"content":{"body":"Iterator.from will be exceedingly common imo.","msgtype":"m.text","org.matrix.msc1767.text":"Iterator.from will be exceedingly common imo."},"ts":1662413735379,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rndy2vyUceW5BNH-AK2fLijU7zDStawjQO6Ci0sR3QE"},
{"content":{"body":"its a nice convenient method yeah","msgtype":"m.text","org.matrix.msc1767.text":"its a nice convenient method yeah"},"ts":1662413735989,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3hzqi_BCJCz_dXY7H_WAwpNrVj5uBys3RsXa0xESxO0"},
{"content":{"body":"i was just pointing out","msgtype":"m.text","org.matrix.msc1767.text":"i was just pointing out"},"ts":1662413738604,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-EoOS84yeRJRA2CTYyBswTxS9bODyJ5ejIkaBn4Rgi4"},
{"content":{"body":"its superfluous in 99% of cases","msgtype":"m.text","org.matrix.msc1767.text":"its superfluous in 99% of cases"},"ts":1662413744264,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$N5alGxkSPiSStYgB-dBSNt8OHJbgiAoy_z00r6gxP1o"},
{"content":{"body":"so we made it not add extra overhead","msgtype":"m.text","org.matrix.msc1767.text":"so we made it not add extra overhead"},"ts":1662413761138,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ITGm9EAdivtYVARR_5VwmuX19dGHtr0yxEZEfNSeyo4"},
{"content":{"body":"i don't think that's true","msgtype":"m.text","org.matrix.msc1767.text":"i don't think that's true"},"ts":1662413761299,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cWtJ79-deV9xdQ2ROPSJdBHVNEbAPWyWsCLHoY6zo5k"},
{"content":{"body":"i think 99% of cases will be dealing with untrusted iterators","msgtype":"m.text","org.matrix.msc1767.text":"i think 99% of cases will be dealing with untrusted iterators"},"ts":1662413768795,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UKiXEXvV8Wbvi1KLx6AJzJBvQHJq77NQU1gamrjHBxc"},
{"content":{"body":"the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)","msgtype":"m.text","org.matrix.msc1767.text":"the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)"},"ts":1662413779924,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mj5M3HF2AC7-iVg1JC9ZrgDcPGzGaOxCn5fbBNNKnTw"},
{"content":{"body":" * the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)","m.new_content":{"body":"the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)","msgtype":"m.text","org.matrix.msc1767.text":"the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)"},"m.relates_to":{"event_id":"$mj5M3HF2AC7-iVg1JC9ZrgDcPGzGaOxCn5fbBNNKnTw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the case where you're iterating your own iterator are likely to be far rarer. (where \"your own\" doesn't deal with who the author is, but which chunk of code owns it)"},"ts":1662413796548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hGAHJnsZyz7pAMqNxrWEdsXUmApu7erlEyvF5mhNK88"},
{"content":{"body":"\"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be","msgtype":"m.text","org.matrix.msc1767.text":"\"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be"},"ts":1662413843449,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d6AX7Cy7P4isN6lty1Q70Zau5RdtGhVaG6QS_flwlRA"},
{"content":{"body":"the genesis of this proposal was the observation that all web and js platform iterators already inherit from a shared %IteratorPrototype%","msgtype":"m.text","org.matrix.msc1767.text":"the genesis of this proposal was the observation that all web and js platform iterators already inherit from a shared %IteratorPrototype%"},"ts":1662413847301,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oKD87HV3sPFiAXROpxKyegC2Sh3TCS3VuQpK5nwVm30"},
{"content":{"body":" * \"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be","m.new_content":{"body":"\"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be","msgtype":"m.text","org.matrix.msc1767.text":"\"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be"},"m.relates_to":{"event_id":"$d6AX7Cy7P4isN6lty1Q70Zau5RdtGhVaG6QS_flwlRA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * \"extra overhead\" isn't a real problem (it can be optimized away), but a footgun like \"sometimes it doesn't wrap\" imo would be"},"ts":1662413851109,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D2365Hdjhhs5rmfdEg6-fO2Is4spNTidM9VW0i4r3So"},
{"content":{"body":"and the remaining weird ones often use the `(function*(){})().next().__proto__` trick or whatever it is","format":"org.matrix.custom.html","formatted_body":"and the remaining weird ones often use the <code>(function*(){})().next().__proto__</code> trick or whatever it is","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and the remaining weird ones often use the `(function*(){})().next().__proto__` trick or whatever it is","mimetype":"text/plain"},{"body":"and the remaining weird ones often use the <code>(function*(){})().next().__proto__</code> trick or whatever it is","mimetype":"text/html"}]},"ts":1662413865242,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2n51cRDJdcsPNFMfk6u18ZDAScBzM47kPJRNjyNKfJ8"},
{"content":{"body":"then whose don't need to wrap because they'll have the slots to begin with, so it doesn't matter what `Iterator.from` does for them","format":"org.matrix.custom.html","formatted_body":"then whose don't need to wrap because they'll have the slots to begin with, so it doesn't matter what <code>Iterator.from</code> does for them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"then whose don't need to wrap because they'll have the slots to begin with, so it doesn't matter what `Iterator.from` does for them","mimetype":"text/plain"},{"body":"then whose don't need to wrap because they'll have the slots to begin with, so it doesn't matter what <code>Iterator.from</code> does for them","mimetype":"text/html"}]},"ts":1662413865962,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gHb4m-9cCqLRcKL-gXIxih8TIAwg5JnOpHvCXAJqj-g"},
{"content":{"body":"why are we concerned with \"overhead\" for the highly unlikely case of someone doing `{ __proto__: Iterator.prototype }`?","format":"org.matrix.custom.html","formatted_body":"why are we concerned with &quot;overhead&quot; for the highly unlikely case of someone doing <code>{ __proto__: Iterator.prototype }</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why are we concerned with \"overhead\" for the highly unlikely case of someone doing `{ __proto__: Iterator.prototype }`?","mimetype":"text/plain"},{"body":"why are we concerned with &quot;overhead&quot; for the highly unlikely case of someone doing <code>{ __proto__: Iterator.prototype }</code>?","mimetype":"text/html"}]},"ts":1662413892240,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YfTBCGHyxTrbewVbnrHytx-NcICxO-FrAVj2K_Rfek4"},
{"content":{"body":"unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)","msgtype":"m.text","org.matrix.msc1767.text":"unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)"},"ts":1662413922354,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5c0ZrT1IEqJupy1pQ1NneH2TbD82e3Rq5bKAf5hTST0"},
{"content":{"body":" * unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)","m.new_content":{"body":"unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)","msgtype":"m.text","org.matrix.msc1767.text":"unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)"},"m.relates_to":{"event_id":"$5c0ZrT1IEqJupy1pQ1NneH2TbD82e3Rq5bKAf5hTST0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * unlikely still means nonzero, and having to deal with that complexity (in the current case) is far more dangerous than \"it's a bit slower if you do something super weird\" (in the \"always wrap\" case)"},"ts":1662413939139,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UQ02FcllpBK8Di9jBYDSIMLV2d8dgkdRLIYyaid6y8g"},
{"content":{"body":"i am lost now","msgtype":"m.text","org.matrix.msc1767.text":"i am lost now"},"ts":1662413985721,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$muGdzJHt8qgD1cPLknTzmV0uq5PbK8660hD1J0VEJoo"},
{"content":{"body":"the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around","msgtype":"m.text","org.matrix.msc1767.text":"the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around"},"ts":1662414036674,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ky0WrOk65BFx6ooQqK5ONIorBysOjjwnvpJeq4tjE_A"},
{"content":{"body":" * the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around","m.new_content":{"body":"the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around","msgtype":"m.text","org.matrix.msc1767.text":"the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around"},"m.relates_to":{"event_id":"$Ky0WrOk65BFx6ooQqK5ONIorBysOjjwnvpJeq4tjE_A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * the overhead is when you wrap something that is already matching the \"iterator with prototype\" definition, which is most iterator objects flying around"},"ts":1662414068230,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CzzgRbiPrb4KXDe9yGLNMvmkcuK3i6GytK64kW6SA3M"},
{"content":{"body":"anything created from the language or a generator or the web would/could already have the slots it needs. It’d only be a custom iterator implementation that’d need wrapping. How common are those?","msgtype":"m.text"},"ts":1662414251723,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qeDPgskQaobQHuBk8pqTqV4MLwUhDxqNpYF5ou5BuNM"},
{"content":{"body":"most custom ones already inherit from Iterator.prototype","msgtype":"m.text","org.matrix.msc1767.text":"most custom ones already inherit from Iterator.prototype"},"ts":1662414273604,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vc6IqPgEcw-N1i6xXp6rg872YhwxvVudxMqncHj3wQI"},
{"content":{"body":"or they did, i haven't looked in several years ","msgtype":"m.text","org.matrix.msc1767.text":"or they did, i haven't looked in several years "},"ts":1662414286954,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yYj8GX7-6FD_eKQHSUqWEhwMbLr6bUEe68KV0t_yMdU"},
{"content":{"body":"i would assume they didn't delete that though lol","msgtype":"m.text","org.matrix.msc1767.text":"i would assume they didn't delete that though lol"},"ts":1662414295217,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lvwn0xwkZzipy5hr6bMkFMZS6ipR5d4yppELLiZswWk"},
{"content":{"body":"the pattern is `[][Symbol.iterator]().__proto__.__proto__`","format":"org.matrix.custom.html","formatted_body":"the pattern is <code>[][Symbol.iterator]().__proto__.__proto__</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the pattern is `[][Symbol.iterator]().__proto__.__proto__`","mimetype":"text/plain"},{"body":"the pattern is <code>[][Symbol.iterator]().__proto__.__proto__</code>","mimetype":"text/html"}]},"ts":1662414331244,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IRxxzvlz5IYsnYRn3nXA0AabRAjtgKdQvhOnBdFwOIg"},
{"content":{"body":"or getPrototypeOf instead","msgtype":"m.text","org.matrix.msc1767.text":"or getPrototypeOf instead"},"ts":1662414349173,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$L6K6-t-eDJiQUJJRLZ-mxLG40FYoCIWUjFHIccBIgzQ"},
{"content":{"body":"so anyway to handle the case where they don't, we have this `Iterator.from` helper, and you can throw that in random places as needed","format":"org.matrix.custom.html","formatted_body":"so anyway to handle the case where they don't, we have this <code>Iterator.from</code> helper, and you can throw that in random places as needed","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so anyway to handle the case where they don't, we have this `Iterator.from` helper, and you can throw that in random places as needed","mimetype":"text/plain"},{"body":"so anyway to handle the case where they don't, we have this <code>Iterator.from</code> helper, and you can throw that in random places as needed","mimetype":"text/html"}]},"ts":1662414455746,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XDrdKZwJW20IlwtEfoksRBbI1lQwPgDd0VvA5Tn7R0A"},
{"content":{"body":"but it exists purely to paper over the prototype","msgtype":"m.text","org.matrix.msc1767.text":"but it exists purely to paper over the prototype"},"ts":1662414469977,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NshT6rYlnAOWzxQigvA8w9EwCDg18Tsc4YaISJRPTy8"},
{"content":{"body":"like just thinking about the code i write for my day-to-day work, i would basically never use `Iterator.from`","format":"org.matrix.custom.html","formatted_body":"like just thinking about the code i write for my day-to-day work, i would basically never use <code>Iterator.from</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like just thinking about the code i write for my day-to-day work, i would basically never use `Iterator.from`","mimetype":"text/plain"},{"body":"like just thinking about the code i write for my day-to-day work, i would basically never use <code>Iterator.from</code>","mimetype":"text/html"}]},"ts":1662414523178,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9VhvMFZir7XB8gQKLwSqksWmyAqQ2H39DpMMlrgFeIw"},
{"content":{"body":"> i think 99% of cases will be dealing with untrusted iterators\n\ni would guess well over 99% of code is internal, not in libraries, and in internal code you are not dealing with untrusted stuff, as a rule","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>i think 99% of cases will be dealing with untrusted iterators</p>\n</blockquote>\n<p>i would guess well over 99% of code is internal, not in libraries, and in internal code you are not dealing with untrusted stuff, as a rule</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> i think 99% of cases will be dealing with untrusted iterators\n\ni would guess well over 99% of code is internal, not in libraries, and in internal code you are not dealing with untrusted stuff, as a rule","mimetype":"text/plain"},{"body":"<blockquote>\n<p>i think 99% of cases will be dealing with untrusted iterators</p>\n</blockquote>\n<p>i would guess well over 99% of code is internal, not in libraries, and in internal code you are not dealing with untrusted stuff, as a rule</p>\n","mimetype":"text/html"}]},"ts":1662416096504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LmqIAE04EYculqU7huiQSWJd8H6MEyl7E3fEUeHsg-o"},
{"content":{"body":"also I guess I am missing what the benefit of the internal slot is supposed to be","msgtype":"m.text","org.matrix.msc1767.text":"also I guess I am missing what the benefit of the internal slot is supposed to be"},"ts":1662416350909,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2xXvQK1_Az5IteKQ_Md9B4tkQfNby6rJF6CzRoGjFmQ"},
{"content":{"body":"I voiced an opinion, several years ago now, that I believed the iterator helper methods should always just do `this[Symbol.iterator]()` so that they would work for both `Iterator` *and* Iterables. Then, the presence of `Symbol.iterator` would be enough of a brand check (insomuch as it is the same amount of brand checking that `yield*` and `for..of` care about). ","format":"org.matrix.custom.html","formatted_body":"I voiced an opinion, several years ago now, that I believed the iterator helper methods should always just do <code>this[Symbol.iterator]()</code> so that they would work for both <code>Iterator</code> <em>and</em> Iterables. Then, the presence of <code>Symbol.iterator</code> would be enough of a brand check (insomuch as it is the same amount of brand checking that <code>yield*</code> and <code>for..of</code> care about).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I voiced an opinion, several years ago now, that I believed the iterator helper methods should always just do `this[Symbol.iterator]()` so that they would work for both `Iterator` *and* Iterables. Then, the presence of `Symbol.iterator` would be enough of a brand check (insomuch as it is the same amount of brand checking that `yield*` and `for..of` care about). ","mimetype":"text/plain"},{"body":"I voiced an opinion, several years ago now, that I believed the iterator helper methods should always just do <code>this[Symbol.iterator]()</code> so that they would work for both <code>Iterator</code> <em>and</em> Iterables. Then, the presence of <code>Symbol.iterator</code> would be enough of a brand check (insomuch as it is the same amount of brand checking that <code>yield*</code> and <code>for..of</code> care about).","mimetype":"text/html"}]},"ts":1662416928186,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pK8rEWVCwb4wc7wa2B9v0obCF_JPzuXr0fETKCtTHXE"},
{"content":{"body":"> <@devsnek:matrix.org> most custom ones already inherit from Iterator.prototype\n\nMost custom \"Iterators\" I've seen are just `{ next() { ... }, [Symbol.iterator]() { return this; } }`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vc6IqPgEcw-N1i6xXp6rg872YhwxvVudxMqncHj3wQI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>most custom ones already inherit from Iterator.prototype</blockquote></mx-reply>Most custom &quot;Iterators&quot; I've seen are just <code>{ next() { ... }, [Symbol.iterator]() { return this; } }</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$vc6IqPgEcw-N1i6xXp6rg872YhwxvVudxMqncHj3wQI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> most custom ones already inherit from Iterator.prototype\n\nMost custom \"Iterators\" I've seen are just `{ next() { ... }, [Symbol.iterator]() { return this; } }`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vc6IqPgEcw-N1i6xXp6rg872YhwxvVudxMqncHj3wQI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>most custom ones already inherit from Iterator.prototype</blockquote></mx-reply>Most custom &quot;Iterators&quot; I've seen are just <code>{ next() { ... }, [Symbol.iterator]() { return this; } }</code>.","mimetype":"text/html"}]},"ts":1662417018451,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YLf3x69DtorgJ1VTIiZgfOvfgFmEJGZPOcnpiJvQXbo"},
{"content":{"body":"rbuckton: why would you ever be invoking an iterator helper method on something which was an iterable-and-not-iterator?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: why would you ever be invoking an iterator helper method on something which was an iterable-and-not-iterator?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: why would you ever be invoking an iterator helper method on something which was an iterable-and-not-iterator?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: why would you ever be invoking an iterator helper method on something which was an iterable-and-not-iterator?","mimetype":"text/html"}]},"ts":1662417659748,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eq4fU2tnU-FoljhnYizySUB0o2GkNZXPP3PHA1LNxAI"},
{"content":{"body":"what is an example of some code where that might come up?","msgtype":"m.text","org.matrix.msc1767.text":"what is an example of some code where that might come up?"},"ts":1662417680412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EG7W1Nd7-TK3Bpo5Hpp6J8jFKUi491OmnLzSvEgvqIM"},
{"content":{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","format":"org.matrix.custom.html","formatted_body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","mimetype":"text/plain"},{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","mimetype":"text/html"}]},"ts":1662418282240,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qd44BJv-IkhkqteTg1sbzZGlPADQEznMv2fQKR3_AtI"},
{"content":{"body":" * My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","format":"org.matrix.custom.html","formatted_body":" * My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","m.new_content":{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","format":"org.matrix.custom.html","formatted_body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","mimetype":"text/plain"},{"body":"My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qd44BJv-IkhkqteTg1sbzZGlPADQEznMv2fQKR3_AtI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a `next()` then we would have the same kind of duck typing we get with `.then()` on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like `{ next() { ... } }` wouldn't have.","mimetype":"text/plain"},{"body":" * My original argument stems from my belief that Iterator is still the wrong level of abstraction. But aside from that, if the iterator helper methods were to only care about whether the object had a <code>next()</code> then we would have the same kind of duck typing we get with <code>.then()</code> on Promises. As a result, we end up needing a brand check of some kind which a custom iterator like <code>{ next() { ... } }</code> wouldn't have.","mimetype":"text/html"}]},"ts":1662418297395,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kXQqaMlNbSHCH7CuWWq5nHCuT0xoMgiEjnP77I8hhms"},
{"content":{"body":"that wouldn't be any different than the current proposal which just checks the [[Prototype]] - it's not a brand check if it's based on a public property.","msgtype":"m.text","org.matrix.msc1767.text":"that wouldn't be any different than the current proposal which just checks the [[Prototype]] - it's not a brand check if it's based on a public property."},"ts":1662418303883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BGvYxfPPbBwLOjPFkhUSOZduzH13Qd41LjNpBbjPF3E"},
{"content":{"body":"> <@rbuckton:matrix.org> Most custom \"Iterators\" I've seen are just `{ next() { ... }, [Symbol.iterator]() { return this; } }`.\n\ni agree, but why would those use Iterator Helper methods without being passed through `Iterator.from` first?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YLf3x69DtorgJ1VTIiZgfOvfgFmEJGZPOcnpiJvQXbo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Most custom \"Iterators\" I've seen are just <code>{ next() { ... }, [Symbol.iterator]() { return this; } }</code>.</blockquote></mx-reply>i agree, but why would those use Iterator Helper methods without being passed through <code>Iterator.from</code> first?","m.relates_to":{"m.in_reply_to":{"event_id":"$YLf3x69DtorgJ1VTIiZgfOvfgFmEJGZPOcnpiJvQXbo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Most custom \"Iterators\" I've seen are just `{ next() { ... }, [Symbol.iterator]() { return this; } }`.\n\ni agree, but why would those use Iterator Helper methods without being passed through `Iterator.from` first?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YLf3x69DtorgJ1VTIiZgfOvfgFmEJGZPOcnpiJvQXbo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Most custom \"Iterators\" I've seen are just <code>{ next() { ... }, [Symbol.iterator]() { return this; } }</code>.</blockquote></mx-reply>i agree, but why would those use Iterator Helper methods without being passed through <code>Iterator.from</code> first?","mimetype":"text/html"}]},"ts":1662418335471,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZgXI5pcVDMZHsUcuaT98S3WnhjaZ08-zs9NNnwIVksc"},
{"content":{"body":"Honestly I wish we'd left IteratorPrototype alone and had adopted a chainable wrapper object over Iterable, or just bare functions to work with `|>`, but we're probably already too far gone.","format":"org.matrix.custom.html","formatted_body":"Honestly I wish we'd left IteratorPrototype alone and had adopted a chainable wrapper object over Iterable, or just bare functions to work with <code>|&gt;</code>, but we're probably already too far gone.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Honestly I wish we'd left IteratorPrototype alone and had adopted a chainable wrapper object over Iterable, or just bare functions to work with `|>`, but we're probably already too far gone.","mimetype":"text/plain"},{"body":"Honestly I wish we'd left IteratorPrototype alone and had adopted a chainable wrapper object over Iterable, or just bare functions to work with <code>|&gt;</code>, but we're probably already too far gone.","mimetype":"text/html"}]},"ts":1662418356703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jP_IMJEWKi_fBXT946qjmb0KPkypOfjqLANhPg_BUjM"},
{"content":{"body":"i definitely do not want to argue about iterable vs iterator more","msgtype":"m.text","org.matrix.msc1767.text":"i definitely do not want to argue about iterable vs iterator more"},"ts":1662418381718,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Z09kSGKbegbn5IIAvVwwvZMPQKeafmSBOsH2nSsoekc"}
]