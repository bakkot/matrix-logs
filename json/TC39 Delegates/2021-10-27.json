[
{"content":{"body":"https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê `String.cooked` for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","format":"org.matrix.custom.html","formatted_body":"https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê <code>String.cooked</code> for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","msgtype":"m.text"},"ts":1635313549504,"senderName":"Hemanth H.M","senderId":"@hemanth.hm:matrix.org","id":"$O07D1vbHnpUaysufVH90fLuc5bXpsSdkvDMkJM1JEUE"},
{"content":{"body":" * https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê `String.cooked` for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","format":"org.matrix.custom.html","formatted_body":" * https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê <code>String.cooked</code> for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","m.new_content":{"body":"https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê `String.cooked` for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","format":"org.matrix.custom.html","formatted_body":"https://hackmd.io/PjvSgvS-Tj-nv3lJl5Dglg?view#1300-15002 15m | üïê <code>String.cooked</code> for Stage 1 will be at 13:00hrs or earlier? As we already covered Error Cause on Day-2","msgtype":"m.text"},"m.relates_to":{"event_id":"$O07D1vbHnpUaysufVH90fLuc5bXpsSdkvDMkJM1JEUE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635313566864,"senderName":"Hemanth H.M","senderId":"@hemanth.hm:matrix.org","id":"$e7skBJzgx90CdiwD8auLXLepBUbDBlXAnI__4rB74UI"},
{"content":{"body":"we are starting plenary now!","msgtype":"m.text"},"ts":1635325226066,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Q0z8wmHks9LWpZWRYf9ibew2wnWkk0PvFoBxBP5sWJ0"},
{"content":{"body":"Good morning everyone i'm already one scotch in","msgtype":"m.text"},"ts":1635325414302,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$1XZu753FrXKMmV5t5o5QHqXbJ7faxino0p8BmBwDc7Y"},
{"content":{"body":"seems like we should use stages but go straight to stage 2","msgtype":"m.text"},"ts":1635325679084,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$A_t_uklWwfPjO4L18VusCih7phvE2DUV9uXVJMYvgi4"},
{"content":{"body":"I'm happy to be a reviewer for 2->3","msgtype":"m.text"},"ts":1635325786162,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BcVds_Tr5Edm-1sOtZQe2hKewn9LI2aUxi6ru9bzp4w"},
{"content":{"body":"also support stage 2","msgtype":"m.text"},"ts":1635325789624,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lk6xOjFLTQu8euJslAf2AxXngG4rI5pPex8qe_IU0p0"},
{"content":{"body":"wait, ask for reviewers!","msgtype":"m.text"},"ts":1635325805732,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ra5PvEaJ2FDEK0QqjJoUJVAiQJHNKTkoWZQPzolwheE"},
{"content":{"body":"my b thanks bakkot & yulia ","format":"org.matrix.custom.html","formatted_body":"my b thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> &amp; <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>","msgtype":"m.text"},"ts":1635325967212,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$fNc7dNjqZeaibNbiGAFfb-pRs2DuaYDoKJsDPTeKdLY"},
{"content":{"body":"does anyone else see aki in the middle of the stream?","msgtype":"m.text"},"ts":1635326039526,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FxHesO3hehKw3rPI3_AB2Nx9d1dL-rVylGMnG1rahQ4"},
{"content":{"body":"oh yeah was just about to ask","msgtype":"m.text"},"ts":1635326040326,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fytxsEN0SFNFz2QNR_n4c_Kz-z2aN2EIsX0GiLaOnWw"},
{"content":{"body":"lol Jitsi just wants to make sure i'm on everyone's mind","msgtype":"m.text"},"ts":1635326058733,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$BJOhRsAS2ygdKBUQeoUoZfTWnPMACxPgJt5MibAJL9w"},
{"content":{"body":"why not just \"using\" and then the expression? why is \"using const void\" better?","msgtype":"m.text"},"ts":1635326526920,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KbXCfGKaBJ8R1XvDgLiI0DVWOJ89CGf4MgdcR170eQM"},
{"content":{"body":"waldemar: i'm going to delete your topic, if you re-add it to the queue i can move it back to the top.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: i'm going to delete your topic, if you re-add it to the queue i can move it back to the top.","msgtype":"m.text"},"ts":1635327256256,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$XvnMPWVvxkhqmcNq6w1ZheYIZd5rsIJ84U5F66zLKdU"},
{"content":{"body":"the `await` in a `for await` happens on the line with the `await`","format":"org.matrix.custom.html","formatted_body":"the <code>await</code> in a <code>for await</code> happens on the line with the <code>await</code>","msgtype":"m.text"},"ts":1635327354380,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tcQSY8OxkomWU_uUPDVHIWj3pNyOm5nZfG0iZ9Sa4rA"},
{"content":{"body":"it does not seem analalgous","msgtype":"m.text"},"ts":1635327357869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$--YaRpqiJmXI1ZTynH6cfuFTL2oPchVxpiHDgm7qC3U"},
{"content":{"body":"agree, mathieu's point was that it was in the middle","msgtype":"m.text"},"ts":1635327400536,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PwCQSfVixUCc06VxdJLtQ6PqC7YIj4m6pCibLVNcMN8"},
{"content":{"body":"well it does affect control flow, it can throw","msgtype":"m.text"},"ts":1635327408258,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YIzKjcI19qWJR39DnuitT6jEncOwjvmzM1MbYAU0YvY"},
{"content":{"body":"correct me if i am wrong, but isn't this implicit resource management rather than explicit resource management?","msgtype":"m.text"},"ts":1635327648070,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$IdjC1bcB-fKxY-TRnKG696zH92XO1XyxSJOB2vp2COE"},
{"content":{"body":"the finally block is implicitly called","msgtype":"m.text"},"ts":1635327664145,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$-F-Cpw0khl5_JZ331kSGGkiHEPisKXRrq0DxkM9mUp0"},
{"content":{"body":"> <@michaelficarra:matrix.org> why not just \"using\" and then the expression? why is \"using const void\" better?\n\n`using (expr)` would be a problem, since that's a valid function call","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KbXCfGKaBJ8R1XvDgLiI0DVWOJ89CGf4MgdcR170eQM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>why not just &quot;using&quot; and then the expression? why is &quot;using const void&quot; better?</blockquote></mx-reply><code>using (expr)</code> would be a problem, since that's a valid function call","m.relates_to":{"m.in_reply_to":{"event_id":"$KbXCfGKaBJ8R1XvDgLiI0DVWOJ89CGf4MgdcR170eQM"}},"msgtype":"m.text"},"ts":1635327669851,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8Tray4EyJBVI7fYUnpz5GRshIy0V7YEm2nv9mlThNmE"},
{"content":{"body":"> <@yulia:mozilla.org> correct me if i am wrong, but isn't this implicit resource management rather than explicit resource management?\n\nexactly! By reading the title, I'd expect a `free` function or something like that üòÖ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IdjC1bcB-fKxY-TRnKG696zH92XO1XyxSJOB2vp2COE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>correct me if i am wrong, but isn&#39;t this implicit resource management rather than explicit resource management?</blockquote></mx-reply>exactly! By reading the title, I'd expect a <code>free</code> function or something like that üòÖ","m.relates_to":{"m.in_reply_to":{"event_id":"$IdjC1bcB-fKxY-TRnKG696zH92XO1XyxSJOB2vp2COE"}},"msgtype":"m.text"},"ts":1635327706322,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$z-qbcqj0_w5q66pWluIUJb1iLQ6BrY98mK0SGhHPtuw"},
{"content":{"body":"aki i added my topic back so you can clear me","msgtype":"m.text"},"ts":1635327715479,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xZXrTcFj-9loNI562xeLTfV2ZNY94uXWKU9EbFaL6mo"},
{"content":{"body":"yulia: well i guess it's explicitly queuing the disposal method up to be called at a different place","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: well i guess it's explicitly queuing the disposal method up to be called at a different place","msgtype":"m.text"},"ts":1635327740270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cBhdmLk5RUbhsVZf09JxYvLJsT5gfrGgIsSWYk5BhjE"},
{"content":{"body":"implicit would be a destructor, imo","msgtype":"m.text"},"ts":1635327743926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Rn9wLp7qaninc82Td-pbRP-FuEWSEbQhKEsqk-lJPcw"},
{"content":{"body":"erights makes some good points","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a> makes some good points","msgtype":"m.text"},"ts":1635327792485,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PB8Q6mlTxwlc0yut9D9N8B1khD8paB48WGCpNWUlwvE"},
{"content":{"body":"in both cases the disposal method is not explicitly stated by the programmer, but this is a nit","msgtype":"m.text"},"ts":1635327804117,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VFC4Vd7DBikzCLX62fKec-O4TLcLeqF0upxUc079_0s"},
{"content":{"body":"its not a substantial criticism","msgtype":"m.text"},"ts":1635327810451,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hunPj7vEAMx1Vgq92LmfvFZQWCMLHp1x62EqmGgzxGs"},
{"content":{"body":"what we have now is explicit, but that comes with the possibility that steps are missed especially during control flow, so i understand the goal here","msgtype":"m.text"},"ts":1635327854421,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$H0asJ6pSZxwpNsDUH8nYd-UzP1abU4tAMewBFU3oKsU"},
{"content":{"body":"is it possible to limit `using await` to\n- top of an async function\n- top of an async do expression\n\nto resolve the implicit interleaving point problem?","format":"org.matrix.custom.html","formatted_body":"<p>is it possible to limit <code>using await</code> to</p>\n<ul>\n<li>top of an async function</li>\n<li>top of an async do expression</li>\n</ul>\n<p>to resolve the implicit interleaving point problem?</p>\n","msgtype":"m.text"},"ts":1635327899394,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wTZLMRm6HUlzWULh-gXWvZWjCyEjWUKq3_MFyexftZ8"},
{"content":{"body":"Jack Works: not really, you need to do it in a loop body or lots of other places","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: not really, you need to do it in a loop body or lots of other places","msgtype":"m.text"},"ts":1635327930784,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pxcM2WwBkkjMfn4c_g65srDK5YHECWn6oHPLb_AxrOU"},
{"content":{"body":"what are some example of async disposal methods?","msgtype":"m.text"},"ts":1635327944921,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_p5UbTGBa6EAMH9Ziux9ecG8fAZJmIH2kueX_NlVlrw"},
{"content":{"body":"> <@bakkot:matrix.org> Jack Works: not really, you need to do it in a loop body or lots of other places\n\nmake sense","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pxcM2WwBkkjMfn4c_g65srDK5YHECWn6oHPLb_AxrOU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: not really, you need to do it in a loop body or lots of other places</blockquote></mx-reply>make sense","m.relates_to":{"m.in_reply_to":{"event_id":"$pxcM2WwBkkjMfn4c_g65srDK5YHECWn6oHPLb_AxrOU"}},"msgtype":"m.text"},"ts":1635327962204,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$abo5kbpaObH6QmDD3XwXVhf_5dlNxO-x7pNgO_Zq4oQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> what are some example of async disposal methods?\n\nclosing a network resource, for example","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_p5UbTGBa6EAMH9Ziux9ecG8fAZJmIH2kueX_NlVlrw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what are some example of async disposal methods?</blockquote></mx-reply>closing a network resource, for example","m.relates_to":{"m.in_reply_to":{"event_id":"$_p5UbTGBa6EAMH9Ziux9ecG8fAZJmIH2kueX_NlVlrw"}},"msgtype":"m.text"},"ts":1635327972221,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$a8Ph8fjcD77pwaNE_h7RZWZaK7G-PRtilZssEmMTWVs"},
{"content":{"body":"that's async?","msgtype":"m.text"},"ts":1635327981865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$83KDm9HQpAYYYeogFK0jXBd5vgZfd_uE-x7O_3NuXdE"},
{"content":{"body":"> <@bakkot:matrix.org> Jack Works: not really, you need to do it in a loop body or lots of other places\n\ntop of a block?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pxcM2WwBkkjMfn4c_g65srDK5YHECWn6oHPLb_AxrOU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: not really, you need to do it in a loop body or lots of other places</blockquote></mx-reply>top of a block?","m.relates_to":{"m.in_reply_to":{"event_id":"$pxcM2WwBkkjMfn4c_g65srDK5YHECWn6oHPLb_AxrOU"}},"msgtype":"m.text"},"ts":1635328011300,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rY_FADW2GkcUCGFqm_zBMQmxXTmo-CJ20bRk2dr4yTQ"},
{"content":{"body":"I think of it as the `defer myVar.close()` in Golang","format":"org.matrix.custom.html","formatted_body":"I think of it as the <code>defer myVar.close()</code> in Golang","msgtype":"m.text"},"ts":1635328026267,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$qhyMkah4I6wUKqj8Sk5R3VChkDFEwuga8_THDEcWi7U"},
{"content":{"body":"so you'd close the file/socket async to avoid blocking","msgtype":"m.text"},"ts":1635328076646,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$75-ISEPwbaBzPcFvjt2spQxUmpIhqfP-D84ULip-69Y"},
{"content":{"body":"but you'd want to definitely do it once the block ends","msgtype":"m.text"},"ts":1635328089110,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$BESgD-22F_7m4IP3DgakEI7CN0KSrXb0kO6npllqCg4"},
{"content":{"body":"Michael Ficarra: top of a block works, but that's pretty much just `try using` again, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: top of a block works, but that's pretty much just <code>try using</code> again, right?","msgtype":"m.text"},"ts":1635328093515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$be5cur0n90Zp54gk2usq8ZOXx_ESUIC1DnWU-lAZ_gI"},
{"content":{"body":"> <@shuyuguo:matrix.org> that's async?\n\nin node most of them are async","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$83KDm9HQpAYYYeogFK0jXBd5vgZfd_uE-x7O_3NuXdE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that&#39;s async?</blockquote></mx-reply>in node most of them are async","m.relates_to":{"m.in_reply_to":{"event_id":"$83KDm9HQpAYYYeogFK0jXBd5vgZfd_uE-x7O_3NuXdE"}},"msgtype":"m.text"},"ts":1635328094202,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$32WtWgbRBZLAdd9nZskcslUtqL4sfcHWQGZq1dyrYSs"},
{"content":{"body":"actually why did we go away from `try using`?","format":"org.matrix.custom.html","formatted_body":"actually why did we go away from <code>try using</code>?","msgtype":"m.text"},"ts":1635328103481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IGBU2124i5OGFOX5sw3NigFc21MtOVCiwIzesTHeB-E"},
{"content":{"body":"i see, thanks","msgtype":"m.text"},"ts":1635328104426,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ikgo5zbjLNfGtLFQYp5RjNoYTbKFou-3_kRB3hIuXNw"},
{"content":{"body":" bakkot  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","msgtype":"m.text"},"ts":1635328119284,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UPORXJIN7k3K52PP2szhZiyGExjM3_5nkXtu0zzgI9M"},
{"content":{"body":"> <@bakkot:matrix.org> Michael Ficarra: top of a block works, but that's pretty much just `try using` again, right?\n\nSGTM","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$be5cur0n90Zp54gk2usq8ZOXx_ESUIC1DnWU-lAZ_gI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: top of a block works, but that's pretty much just <code>try using</code> again, right?</blockquote></mx-reply>SGTM","m.relates_to":{"m.in_reply_to":{"event_id":"$be5cur0n90Zp54gk2usq8ZOXx_ESUIC1DnWU-lAZ_gI"}},"msgtype":"m.text"},"ts":1635328119753,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3NYVeG8i8KkF-ay2XINXwdCsXTTSVBgM3s7-Kc5SeSc"},
{"content":{"body":"> <@bakkot:matrix.org> actually why did we go away from `try using`?\n\napparently feedback from the incubator call","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IGBU2124i5OGFOX5sw3NigFc21MtOVCiwIzesTHeB-E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>actually why did we go away from <code>try using</code>?</blockquote></mx-reply>apparently feedback from the incubator call","m.relates_to":{"m.in_reply_to":{"event_id":"$IGBU2124i5OGFOX5sw3NigFc21MtOVCiwIzesTHeB-E"}},"msgtype":"m.text"},"ts":1635328133247,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nkWlJor9r7QQH2lWpyGU2q7UmgeWZ9XOThwpurGafqQ"},
{"content":{"body":" *  bakkot  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","m.new_content":{"body":" bakkot  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>  I want to present this issue https://github.com/tc39/proposal-do-expressions/issues/75 to the committee to get a consensus of adding the restriction I proposed. How do you think?","msgtype":"m.text"},"m.relates_to":{"event_id":"$UPORXJIN7k3K52PP2szhZiyGExjM3_5nkXtu0zzgI9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635328141902,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1yX8MSt0SEHS3CNC2T1nmNhJnmwo7-H38IHiE76yqWU"},
{"content":{"body":"Jack Works: I'll bring it up next time I present; I don't think there's much reason to present it before then","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I'll bring it up next time I present; I don't think there's much reason to present it before then","msgtype":"m.text"},"ts":1635328221114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9CgeOqCrW9ZLhhOhaTiYQDViT61DLktGFfZ4HK_f0YY"},
{"content":{"body":"> <@bakkot:matrix.org> Jack Works: I'll bring it up next time I present; I don't think there's much reason to present it before then\n\nok I just want to have that restriction so I can continue to work on the typescript implementation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9CgeOqCrW9ZLhhOhaTiYQDViT61DLktGFfZ4HK_f0YY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I'll bring it up next time I present; I don't think there's much reason to present it before then</blockquote></mx-reply>ok I just want to have that restriction so I can continue to work on the typescript implementation","m.relates_to":{"m.in_reply_to":{"event_id":"$9CgeOqCrW9ZLhhOhaTiYQDViT61DLktGFfZ4HK_f0YY"}},"msgtype":"m.text"},"ts":1635328279125,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PWr1j1cYovx6h9FS-XsWTAfE81I1ahr1k4NUYcULLzE"},
{"content":{"body":"about 20 min remaining","msgtype":"m.text"},"ts":1635328420635,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$NflOKYI0k4eK6zPtwPBRoSKCH_g4eofv6LLT_FTSG4s"},
{"content":{"body":"I am confused about the `Disposable` container - how is `new Disposable(() => foo())` different from `({ [Symbol.dispose]() { foo() })` ?","format":"org.matrix.custom.html","formatted_body":"I am confused about the <code>Disposable</code> container - how is <code>new Disposable(() =&gt; foo())</code> different from <code>({ [Symbol.dispose]() { foo() })</code> ?","msgtype":"m.text"},"ts":1635328464775,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dKUBYBskX3d6K5aKR9QYZoaLOafVPMssO9_dCzCN41I"},
{"content":{"body":"@bakkot it takes iterables","msgtype":"m.text"},"ts":1635328534361,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dkw5v4lwy0PtOKSrvOmYlhsAgrHxXx_Ao130AnCc3Gs"},
{"content":{"body":"No difference I guess","msgtype":"m.text"},"ts":1635328543139,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Ck_MQj6vweJnsNL63BqCOX-V0zAgoo3IDdnCnWtg05U"},
{"content":{"body":"an iterable of disposables","msgtype":"m.text"},"ts":1635328546236,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O0YqeRmAHSRcraLK2UnJWU6XGLTHDFS4ZjnMS2YJ2_c"},
{"content":{"body":"> <@michaelficarra:matrix.org> @bakkot it takes iterables\n\nIsn't `Disposable.from` take iterables instead of the constructor?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dkw5v4lwy0PtOKSrvOmYlhsAgrHxXx_Ao130AnCc3Gs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>@bakkot it takes iterables</blockquote></mx-reply>Isn't <code>Disposable.from</code> take iterables instead of the constructor?","m.relates_to":{"m.in_reply_to":{"event_id":"$dkw5v4lwy0PtOKSrvOmYlhsAgrHxXx_Ao130AnCc3Gs"}},"msgtype":"m.text"},"ts":1635328560727,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$a8Pcg-kEd8TrrLoPNHEOENFL0DRn-zCS23J0CC-UmJc"},
{"content":{"body":" * No difference I guess","m.new_content":{"body":"No difference I guess","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ck_MQj6vweJnsNL63BqCOX-V0zAgoo3IDdnCnWtg05U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635328568436,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RBqUAWAvSahzgP8ZR3FrJ2bwTRsu6b2yW-L5pbe1-XY"},
{"content":{"body":"Jack Works: yes that's right, was there a constructor too?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: yes that's right, was there a constructor too?","msgtype":"m.text"},"ts":1635328582844,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nFjLORUKyV5-CSk2xAUcfsZ2njnTarBopG7ecSO1nZI"},
{"content":{"body":"I guess it's for DX, `new Disposable(f)` is much easier to write than `({ [Symbol.dispose]: f })`","format":"org.matrix.custom.html","formatted_body":"I guess it's for DX, <code>new Disposable(f)</code> is much easier to write than <code>({ [Symbol.dispose]: f })</code>","msgtype":"m.text"},"ts":1635328655959,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rvQWO8O2ehCEuLGy3SGXMa3TpSJuL375rRT2DgowFto"},
{"content":{"body":"this example doesn't seem particularly problematic to me","msgtype":"m.text"},"ts":1635328723903,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UM8lQIC15aRdt9UvE4-7KxMxfV5A02FwMQEwaVREBwA"},
{"content":{"body":"oh oops i advanced the queue, misinterpreted what Waldemar meant by \"let's move on to the next one\"","msgtype":"m.text"},"ts":1635328841136,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$omWyB99DxVDPY5C6es_-68z73sJTX_SyW8yLd2nrfLc"},
{"content":{"body":"it's okay, I don't think anyone would begin talking before Waldemar is finished üòá","msgtype":"m.text"},"ts":1635328889035,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7x4fssOH9dkwbVS4G3G_6sYSjBAz6hEPzrn55bLXB6Y"},
{"content":{"body":"wouldn't any implicit disposal solution make figuring out tail calls more difficult (for humans)?","msgtype":"m.text"},"ts":1635328945737,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$eY6O_d4UafpdM-L66mMoOpQ7o27n6YDFq7uWZSN-MeY"},
{"content":{"body":"maybe in a world where tail calls matter","msgtype":"m.text"},"ts":1635328987211,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KDeinM9OfFybKQrdpdHYbXFvlMRGlP5R-KoR6prntaY"},
{"content":{"body":"Michael Ficarra made this same point the first time this proposal came up, IIRC","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> made this same point the first time this proposal came up, IIRC","msgtype":"m.text"},"ts":1635329417749,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vyRJn46Z-TpJdUKNAGT2iHlK_OL_upEkgoAqgvqw4aY"},
{"content":{"body":"i think RAII is so common new syntax is warranted, abusing for-of seems not great","msgtype":"m.text"},"ts":1635329494838,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-c41ZnQB6Dt51BrM9O9jyJVor6ISA0POo7IA1pHUw1E"},
{"content":{"body":"for reading anyway","msgtype":"m.text"},"ts":1635329503114,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VfZHsUSYt8lwfDFvV0_msOHHtG0xdzbpvelDbtRDXpI"},
{"content":{"body":"eh, I don't think it's an abuse of for-of","msgtype":"m.text"},"ts":1635329514191,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Hr-xzbmeSQdei_fxEFZdWwRGx-OthumTFw8Ma9Po7b0"},
{"content":{"body":"in the Scala world, they use `for` for everything and it works nicely for them","format":"org.matrix.custom.html","formatted_body":"in the Scala world, they use <code>for</code> for everything and it works nicely for them","msgtype":"m.text"},"ts":1635329534845,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FupJmyYXXu4r0IRGOgw3PRohy4VrNSrL8wCiJZWBGpc"},
{"content":{"body":"(`for` in scala is like Haskell `do` notation)","format":"org.matrix.custom.html","formatted_body":"(<code>for</code> in scala is like Haskell <code>do</code> notation)","msgtype":"m.text"},"ts":1635329549284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mulLzPyjU9HNcWasMQynom9nTd3BHGngSUe8uXSd5hQ"},
{"content":{"body":"that `for-of` trick is really cleaver","format":"org.matrix.custom.html","formatted_body":"that <code>for-of</code> trick is really cleaver","msgtype":"m.text"},"ts":1635329553902,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZxJrtdCKwrQGVRwcjRrEt1kFxG1Toxw1-VLh2Z__Cps"},
{"content":{"body":"but in the JS world `for` is for iteration?","format":"org.matrix.custom.html","formatted_body":"but in the JS world <code>for</code> is for iteration?","msgtype":"m.text"},"ts":1635329560065,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$C3USXNBiwbnTjbs8sTvziMJR_OBQoXwwdNaJqWGSYOI"},
{"content":{"body":"shu: not for-of, it's syntax for a protocol","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: not for-of, it's syntax for a protocol","msgtype":"m.text"},"ts":1635329581839,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JZOX1lkcA2PZu6AqOL0XKVPoMXy_sfyKixW2Kseg3o8"},
{"content":{"body":"we can use it to not wait for this proposal ship that might take years","msgtype":"m.text"},"ts":1635329586155,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jzxyaEizQIvAJUkMTf6VRu8Gpn0ozpo_BRsERbxNhOQ"},
{"content":{"body":"we disagree","msgtype":"m.text"},"ts":1635329588499,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kU-MYYnTkC96ubQf6T157SRWxcH0wBNDmjAJuPqW27E"},
{"content":{"body":"for-of _has_ a protocol, i would contend very few would understand it as syntax for protocols","format":"org.matrix.custom.html","formatted_body":"for-of <em>has</em> a protocol, i would contend very few would understand it as syntax for protocols","msgtype":"m.text"},"ts":1635329615950,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6RnII8N7tPJpC2MmQdfqbyRG_fFcQH195dEF_yGC52s"},
{"content":{"body":"it's syntax for iteration","msgtype":"m.text"},"ts":1635329623906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vNu-nXC4vzvQaNNMUBJAdILkLp7K0R4QqtIzeH392NM"},
{"content":{"body":"yeah, we just disagree","msgtype":"m.text"},"ts":1635329693999,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KtGtPhH-GN3FhsbiR7IxhX8tSLDXrph_QG7rxK11-i0"},
{"content":{"body":"Michael Ficarra: tbf, the protocol literally uses \"Symbol.iterator\", so I feel like it's fair to say that it is for iteration","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: tbf, the protocol literally uses &quot;Symbol.iterator&quot;, so I feel like it's fair to say that it is for iteration","msgtype":"m.text"},"ts":1635329738153,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O7gQ-AsGdpCI-gs_po-DhtPkb5QCqBJSZFM3IkrV6TQ"},
{"content":{"body":"that said, I also agree that this is a perfectly fine use of for-of","msgtype":"m.text"},"ts":1635329761794,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5tJFpWbVBSHFbG4P5nOkqZSYHmCmR7OhbaTTyZbwpss"},
{"content":{"body":"lots of languages use `for` like this","format":"org.matrix.custom.html","formatted_body":"lots of languages use <code>for</code> like this","msgtype":"m.text"},"ts":1635329767361,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CdotmH2_NnhIYzMOqu5X3KWLzsY9i8XBCLx76xg312s"},
{"content":{"body":"it's syntax for interacting with the iteration protocol, but \"iteration\" can mean many things","msgtype":"m.text"},"ts":1635329768056,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$omUoTVnmq_bwDtpoBKP0zh9xV1O1a4CK1VNtuAtkiAY"},
{"content":{"body":"why async is a fault? is there any articles I can know the reason? cc yulia ","format":"org.matrix.custom.html","formatted_body":"why async is a fault? is there any articles I can know the reason? cc <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>","msgtype":"m.text"},"ts":1635329773017,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QD_UoZTQECaA-XLZOnMk_ZcwaUwrVcpvvwhqKNzlymA"},
{"content":{"body":"yeah i strongly disagree with the opinion that async/await is a mistake","msgtype":"m.text"},"ts":1635329793151,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ttlqADibXESIn3LrQKsj-YzzVkX0kRCShgVzSD0tI2o"},
{"content":{"body":"we iterate over Maybe in our code all the time, and people don't typically think of that as \"iteration\"","msgtype":"m.text"},"ts":1635329796289,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lIbIl1bhWadeOAgSkWTZ9QbCM-xPf3heRJX4me2pXh0"},
{"content":{"body":"the bugs stem from, well, asynchrony, not the syntax","msgtype":"m.text"},"ts":1635329799371,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NnDQuWnpy7DlNb8Nvig--vQNho0a-sRDINR3cVcPMuw"},
{"content":{"body":"> <@jackworks:matrix.org> why async is a fault? is there any articles I can know the reason? cc yulia\n\nit is very tricky to determine a fire and forget bug with async await","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QD_UoZTQECaA-XLZOnMk_ZcwaUwrVcpvvwhqKNzlymA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>why async is a fault? is there any articles I can know the reason? cc <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a></blockquote></mx-reply>it is very tricky to determine a fire and forget bug with async await","m.relates_to":{"m.in_reply_to":{"event_id":"$QD_UoZTQECaA-XLZOnMk_ZcwaUwrVcpvvwhqKNzlymA"}},"msgtype":"m.text"},"ts":1635329835680,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dc2uYmfdYSF_DQqQQ39_6UVX_C7f3aAwdLqORVO1CeU"},
{"content":{"body":"it is very difficult to find just from reading or from static analysis","msgtype":"m.text"},"ts":1635329847074,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$74t9H1u_mW1IQrkiLHjGz8K8QH9xYCmnLOXozAlYExQ"},
{"content":{"body":"but the comparison is with Promise handlers, right?","msgtype":"m.text"},"ts":1635329873388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YYVj2tfUlUqnQ98LzJTanVkiUVRVJsg8Eo_YQylglBY"},
{"content":{"body":"which i feel like has to be harder","msgtype":"m.text"},"ts":1635329881314,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vnTNmKfc5GjRO1w7BA3_RW8ktY0dYVOYtL_RdQS4g1g"},
{"content":{"body":"https://github.com/mhofman/disposator","msgtype":"m.text"},"ts":1635329886475,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gM5R-f-oLl4nru6Uf5txfUAsBfMX7NdoJ_5rwdpke8M"},
{"content":{"body":"the other issue with async await is the added viscosity to the language, and the reliance on unnecessarily writing code in a step wise fashion","msgtype":"m.text"},"ts":1635329898678,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$L45MbA4aAqOPT7PwLXg7sqs7FrQhoD5JA-NyRKKFNBc"},
{"content":{"body":"i think the space of async code is unsolved","msgtype":"m.text"},"ts":1635329911459,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iyw70_-TmvRz4Jy6VDhtroZevVuy5Q3eZYitA9BGe84"},
{"content":{"body":"at least in javascript, this is easier in typed languages","msgtype":"m.text"},"ts":1635329922906,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cZl7cnJLKhbA_GR7OKiT1i9tXtk1VxhgHAkVqlWGDY0"},
{"content":{"body":"IMO the iterator approach is not particularly hard to read. Sure it takes a minute to understand why it actually works, but it's not obscure:\n```\nfor (const {using} of Disposable) {\n   const resource = using(getResource());\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>IMO the iterator approach is not particularly hard to read. Sure it takes a minute to understand why it actually works, but it's not obscure:</p>\n<pre><code>for (const {using} of Disposable) {\n   const resource = using(getResource());\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1635329931523,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$L5ceEPG330LNunLx_FebWdhVcqNYbQ13iY0dwrcW580"},
{"content":{"body":"> <@yulia:mozilla.org> i think the space of async code is unsolved\n\nI sometimes think the knowledge that `async`/`await` was coming led to less investment in the spaces of Promises and Generators (in particular)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iyw70_-TmvRz4Jy6VDhtroZevVuy5Q3eZYitA9BGe84?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i think the space of async code is unsolved</blockquote></mx-reply>I sometimes think the knowledge that <code>async</code>/<code>await</code> was coming led to less investment in the spaces of Promises and Generators (in particular)","m.relates_to":{"m.in_reply_to":{"event_id":"$iyw70_-TmvRz4Jy6VDhtroZevVuy5Q3eZYitA9BGe84"}},"msgtype":"m.text"},"ts":1635329993099,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$0HVOZjemDz64HjBCFGW2r7qDb0tqg8Ko3DDOrMj1u6g"},
{"content":{"body":"rbuckton:  sorry i cam across strong there","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>:  sorry i cam across strong there","msgtype":"m.text"},"ts":1635330006695,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$k3Mvs2VeeWlu_0jje0moz_FITUcabUKWJrh5a8d8kTs"},
{"content":{"body":"> <@yulia:mozilla.org> it is very difficult to find just from reading or from static analysis\n\nhmm Isn't it save us from promise chain/callback hell? I think it actually improved the readability and static analysis","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$74t9H1u_mW1IQrkiLHjGz8K8QH9xYCmnLOXozAlYExQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>it is very difficult to find just from reading or from static analysis</blockquote></mx-reply>hmm Isn't it save us from promise chain/callback hell? I think it actually improved the readability and static analysis","m.relates_to":{"m.in_reply_to":{"event_id":"$74t9H1u_mW1IQrkiLHjGz8K8QH9xYCmnLOXozAlYExQ"}},"msgtype":"m.text"},"ts":1635330016385,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SI1PkfpkxZOsZPjhP4dCpmg5CdHLadtbFPfSWp-8420"},
{"content":{"body":"I'm still looking for another reviewer","msgtype":"m.text"},"ts":1635330022772,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OjBBNA8ktGBIvjpRuVHoVlPy0cjW4dt389mRqyyKH70"},
{"content":{"body":"i don't feel like *strongly* about this","format":"org.matrix.custom.html","formatted_body":"i don't feel like <em>strongly</em> about this","msgtype":"m.text"},"ts":1635330023408,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$i06kP5QD45Wg9ysvnrsQIgxuOWFEDambujmOVEvRuI0"},
{"content":{"body":"> <@jackworks:matrix.org> hmm Isn't it save us from promise chain/callback hell? I think it actually improved the readability and static analysis\n\nhow does it improve static analysis? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SI1PkfpkxZOsZPjhP4dCpmg5CdHLadtbFPfSWp-8420?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>hmm Isn't it save us from promise chain/callback hell? I think it actually improved the readability and static analysis</blockquote></mx-reply>how does it improve static analysis?","m.relates_to":{"m.in_reply_to":{"event_id":"$SI1PkfpkxZOsZPjhP4dCpmg5CdHLadtbFPfSWp-8420"}},"msgtype":"m.text"},"ts":1635330058660,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$vGaAK_OANozkSscxQEQard4Ikux2upqUQ5VG4RMN3bc"},
{"content":{"body":"like, over promises","msgtype":"m.text"},"ts":1635330078750,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cf3yQgs4R_FJ3bXDg8w5jX5gSbgdVSh8KGd1F6I_aKY"},
{"content":{"body":"> <@mhofman:matrix.org> IMO the iterator approach is not particularly hard to read. Sure it takes a minute to understand why it actually works, but it's not obscure:\n> ```\n> for (const {using} of Disposable) {\n>    const resource = using(getResource());\n> }\n> ```\n\nI still think that, while this is usable, it feels very easy to mistake what's going on here with normal iteration.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L5ceEPG330LNunLx_FebWdhVcqNYbQ13iY0dwrcW580?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><p>IMO the iterator approach is not particularly hard to read. Sure it takes a minute to understand why it actually works, but it's not obscure:</p>\n<pre><code>for (const {using} of Disposable) {\n   const resource = using(getResource());\n}\n</code></pre>\n</blockquote></mx-reply>I still think that, while this is usable, it feels very easy to mistake what's going on here with normal iteration.","m.relates_to":{"m.in_reply_to":{"event_id":"$L5ceEPG330LNunLx_FebWdhVcqNYbQ13iY0dwrcW580"}},"msgtype":"m.text"},"ts":1635330090189,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HKYRii1C2YqX2v_iK0PAvVwBuBp_1-VxEn_U5ygAAe0"},
{"content":{"body":"it's syntax","msgtype":"m.text"},"ts":1635330090290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5-KYuxbhGMRZWgr4WqKd4lYn0_GvmO-YXCRXFDudPyM"},
{"content":{"body":"it's more analyzable than promise handlers, which are just functions flowing places","msgtype":"m.text"},"ts":1635330099102,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YOJMeJd17tEjxU8mujuJVMxI8Q_NbIFRIx2KkxcXu-8"},
{"content":{"body":"> <@yulia:mozilla.org> rbuckton:  sorry i cam across strong there\n\nNot a problem, it wasn't my intent to characterize stage 2 in that way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$k3Mvs2VeeWlu_0jje0moz_FITUcabUKWJrh5a8d8kTs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>:  sorry i cam across strong there</blockquote></mx-reply>Not a problem, it wasn't my intent to characterize stage 2 in that way.","m.relates_to":{"m.in_reply_to":{"event_id":"$k3Mvs2VeeWlu_0jje0moz_FITUcabUKWJrh5a8d8kTs"}},"msgtype":"m.text"},"ts":1635330125502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1QWBlfXcIwMyTqhaX8a3SYxSYB1Yx5TgoewUYatYU0o"},
{"content":{"body":"right but you can also await non-promises","msgtype":"m.text"},"ts":1635330142676,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jPVZ3KBuV5L30c5_7ywR2XOqDpMpnqWJEj2eFHgvlx4"},
{"content":{"body":"so you don't necessarily know anything about what you are awaiting","msgtype":"m.text"},"ts":1635330154163,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7YclIMYqxZHA_381xYh7j83FxsIcWDYtMbSMP7AsLQE"},
{"content":{"body":"i think we're assuming different goals of the analysis","msgtype":"m.text"},"ts":1635330166456,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CV7SRMt3Q9l-k0BLGcafW1qhAe_V6DEiDzvPSvyVkyc"},
{"content":{"body":"i was referring to analyzing the conceptual control flow of the code","msgtype":"m.text"},"ts":1635330179262,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J65kIxyxWbjjvEFAJEXcOB0Fdv16DMlnbYVcnoQwAgs"},
{"content":{"body":"what would you like this analysis to answer?","msgtype":"m.text"},"ts":1635330218556,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uLj5Wf_zfhqH9XaqyvnqMVe6Y8BpEdQ97AC9VThJ6UA"},
{"content":{"body":"alright, i mean -- i use async await, my main point is that its highly bug prone","msgtype":"m.text"},"ts":1635330221046,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zKkxYwOyM8bO5NX8saDz75yk9zSufaA0DUNDI3QPapI"},
{"content":{"body":"Aki: We advanced topics without getting another Stage 2 reviewer. Waldemar is still willing to review but I'm still missing a reviewer since it seems Yehuda is unavailable.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: We advanced topics without getting another Stage 2 reviewer. Waldemar is still willing to review but I'm still missing a reviewer since it seems Yehuda is unavailable.","msgtype":"m.text"},"ts":1635330234626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C2b7IIzVeb7LlKIl8cj5AgNlK8nB8cM-V8ty6X6wAsc"},
{"content":{"body":"shit damn ","msgtype":"m.text"},"ts":1635330250470,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$ZIC7oGRFAA9DuI4gk9fkWTqFPUcnN2H8vKDaRwRRlK8"},
{"content":{"body":"sorry","msgtype":"m.text"},"ts":1635330252233,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$5EqVLyWDIMt0Brx4NdfLHRlntt-8o5XkKEDJyzMN364"},
{"content":{"body":"yulia: i feel like that's categorically false, it was an improvement over the Promise handlers and callbacks before that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i feel like that's categorically false, it was an improvement over the Promise handlers and callbacks before that","msgtype":"m.text"},"ts":1635330267091,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7sk61mzoucfHRXuflCyfWfqVQFf8qKLdR1IT1sDdk5s"},
{"content":{"body":"which were much _more_ bug prone","format":"org.matrix.custom.html","formatted_body":"which were much <em>more</em> bug prone","msgtype":"m.text"},"ts":1635330275798,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tXBzyCBpXmadqglSlzQbwsqLYUfdxvn9JmYfSgFfVn8"},
{"content":{"body":"the static analysis came up because this has been solved by typescript -- by introducing a promise type, its much easier to track async bugs","msgtype":"m.text"},"ts":1635330277918,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$JIchwU8jyjOtqdkJaAh4F50B4IDkL24TMejj1lE4ehU"},
{"content":{"body":"Can we add a topic to the agenda to bring this back up after the break?","msgtype":"m.text"},"ts":1635330279595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cXfnbu7oQliUNnvi0SMyd05JY_TarsIOdT7k2yAJMeo"},
{"content":{"body":"yup","msgtype":"m.text"},"ts":1635330284484,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$kzDDjAyB1f_igpj8vDlsC023KLSrwB-bvjmkHah09RM"},
{"content":{"body":"if you're making a statement that the absolute bugproneness is still high, then i agree with that","msgtype":"m.text"},"ts":1635330297000,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UaTmwURbAu2vjT67yV45DpI7RxSgIUwxu-oQ0mABPiY"},
{"content":{"body":"but to characterize it as a \"mistake\" suggests to me that it was worse than the status quo before it","msgtype":"m.text"},"ts":1635330309524,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2L6xOowit3lDwb1Ah6vJvyX9f8BNgL8HZi2o6Sjlarg"},
{"content":{"body":"yulia: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a `yield` based on its input value. So we can't correctly type an async coroutine built using a generator.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a <code>yield</code> based on its input value. So we can't correctly type an async coroutine built using a generator.","msgtype":"m.text"},"ts":1635330345840,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$75xmHfl-kbJNR-W4KwGWBp5xNQ8ttvwM8WsAuGsOORY"},
{"content":{"body":" * yulia: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a `yield` based on its input value. So we can't correctly type an async coroutine built using a generator.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a <code>yield</code> based on its input value. So we can't correctly type an async coroutine built using a generator.","m.new_content":{"body":"yulia: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a `yield` based on its input value. So we can't correctly type an async coroutine built using a generator.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: If it were just generators/yield, TypeScript doesn't yet have a way to contextually type the result of a <code>yield</code> based on its input value. So we can't correctly type an async coroutine built using a generator.","msgtype":"m.text"},"m.relates_to":{"event_id":"$75xmHfl-kbJNR-W4KwGWBp5xNQ8ttvwM8WsAuGsOORY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635330367581,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0xfI2XWyF4WK0bBpG7cQepa5sUj3cvPydreviMQIdGg"},
{"content":{"body":"rbuckton: i didn't mean the generators yield pattern","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i didn't mean the generators yield pattern","msgtype":"m.text"},"ts":1635330380937,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$LF5S66hr72RFXg0dOiToTZ72GyAAJCjhmvWVkBxwE08"},
{"content":{"body":"i meant the async await pattern in typescript","msgtype":"m.text"},"ts":1635330387897,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$KYIUQwU5fsZisOo_6NHpebuqLj6fXEqeiTtpk3oXLfI"},
{"content":{"body":"the reason i was saying mistake was because i think there was a design space before, that doesn't exist now that we have async await","msgtype":"m.text"},"ts":1635330451469,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$st-nAM7cNQwKJ9UcKLY5C01xQ9MwD17QxaEMe4_YdLQ"},
{"content":{"body":"i don't think we want to add yet another promise handling syntax","msgtype":"m.text"},"ts":1635330463277,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5LIbNZPlszD5hZA_8UXG87cxVl1kvqBZqMHE7dGueiE"},
{"content":{"body":"that would likely be a waste","msgtype":"m.text"},"ts":1635330467444,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gyG7IV5RpeCYoY-GTo0J6ogU9bk1ie-BHThB6SUZmlU"},
{"content":{"body":"i see","msgtype":"m.text"},"ts":1635330485470,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YvI5alOTH9p6Hf8PkA2QMRWL1_jDLZ4kYaIvO8m7BOg"},
{"content":{"body":"and my point around saying it was a mistake was related too \"stage 2 is agreed upon\" which i brought across too strongly","msgtype":"m.text"},"ts":1635330496779,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mPOsTtHwbpZyEI82LZ74VWcRPIHg4Xu9KcNrvAJGstI"},
{"content":{"body":"i can understand being disappointed in not exploring closed avenues","msgtype":"m.text"},"ts":1635330510813,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rmBZB5clxPIYSEXEckRHKEa-6rJIJkGsw-DQMC2yNUY"},
{"content":{"body":"or, rather, not having any reason to anymore","msgtype":"m.text"},"ts":1635330518132,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ryLJ356SBxE8SnUx1oPPhwLKZMsFNqyrtk8J2uu5_60"},
{"content":{"body":"yep, thats what i have regrets about","msgtype":"m.text"},"ts":1635330534315,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1VgskZR0D_JwR25ciMDcGF2aylqnK2e0p8z9-OcukVM"},
{"content":{"body":"but we're not a research language, so eh","msgtype":"m.text"},"ts":1635330540608,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hGquqgxFxx_3bVRjdU-6DPOp2Ab0J6BFx6XJQLwdI24"},
{"content":{"body":"yeah, what can you do","msgtype":"m.text"},"ts":1635330612092,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EblXbIab-hZWqX7c8i-xE5skdxJX3idm2NNFspkSBxg"},
{"content":{"body":"about mistake, I think the biggest mistake is all `then`ables can be awaited. That really cause bugs in my program while I'm using Proxy","format":"org.matrix.custom.html","formatted_body":"about mistake, I think the biggest mistake is all <code>then</code>ables can be awaited. That really cause bugs in my program while I'm using Proxy","msgtype":"m.text"},"ts":1635330652619,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$msuXyw6ygHijhuE-wvQ6DmjxNUlG5_AzYwA3IGGD7DY"},
{"content":{"body":"oh yeah thenables are terrible","msgtype":"m.text"},"ts":1635330676069,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d8szssbDwLL0RKZGTkcBEuOryxv6Cp4l9Frn1IFF3ZA"},
{"content":{"body":"F# does have a few niceties that avoid some of the gotchas that languages like JS have for async/await, but I think async/await in JS is pretty good and pragmatic given all the constraints.","msgtype":"m.text"},"ts":1635330682643,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$B1CYA4SoHkkm5Bdnj7ja2uBZle-znWI8I1qhexvemYs"},
{"content":{"body":"there is also the kotlin approach but i don't know how much i like it","msgtype":"m.text"},"ts":1635330702898,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$j-3fWmFE0uaB_cTFSTr1DFVYKzlSuuM3szMXAsSK3II"},
{"content":{"body":"though it would address some bugs","msgtype":"m.text"},"ts":1635330709300,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iuyqwcFF5DKJem79dt2vgO6-ANIucxmiJnmEgZgNh_k"},
{"content":{"body":"thenables :(","msgtype":"m.text"},"ts":1635330730808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PBPtuM_M--PXItYEsKzUa9QDDiauY5cj4vAMk4nqeg8"},
{"content":{"body":"perhaps you meant thenables ü§°","msgtype":"m.text"},"ts":1635330769197,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SoqQs97QRK7qeQghGlBzduyitvKC8bAyrD-38Cu4O7g"},
{"content":{"body":"At Agoric, we found that a simple lintable syntactic  restriction on use of await that avoids a large class of bugs:\n\nhttps://github.com/Agoric/agoric-sdk/wiki/No-Nested-Await","msgtype":"m.text"},"ts":1635330784483,"senderName":"erights","senderId":"@erights:matrix.org","id":"$ntF1K-b1US669R8CLSyJ-Ev0CiVvcx9fgOIbjxVa3ZY"},
{"content":{"body":"that looks like a very subtle bug","msgtype":"m.text"},"ts":1635330863747,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$BPobNEORFA5mYVVgpmUAZX9RK07qCxwgJTneltHkHmw"},
{"content":{"body":"how do you... not use `await` in a loop","format":"org.matrix.custom.html","formatted_body":"how do you... not use <code>await</code> in a loop","msgtype":"m.text"},"ts":1635330893070,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZSEV24D2hlB5sJf-cAyNwFoGmgBEIYrDSPk5isx2CYE"},
{"content":{"body":"A top level `for await of` loop is fine. We do not have `await` inside the loop. Was surprised that all the in-loop awaits we had were easy to rewrite, and made the code better.","format":"org.matrix.custom.html","formatted_body":"A top level <code>for await of</code> loop is fine. We do not have <code>await</code> inside the loop. Was surprised that all the in-loop awaits we had were easy to rewrite, and made the code better.","msgtype":"m.text"},"ts":1635330987769,"senderName":"erights","senderId":"@erights:matrix.org","id":"$iCRgd8GFFhanAAXlIy_TG-A9H4Dxg8cGeLUP3bPjYEQ"},
{"content":{"body":"the example from this slide of \"people storing regexen in a way which doesn't allow them to represent flags\" is not compelling","msgtype":"m.text"},"ts":1635331010168,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$so8cpYvBXMbuYLgi_rngqYca-mDmY9vrVHKrDXG5n1M"},
{"content":{"body":"ü§î","msgtype":"m.text"},"ts":1635331022006,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$bmdwzt39HwvPEmx3jbTZV4ZO3mgyM0-t0phSWKVRx24"},
{"content":{"body":"We have more and more powerful & complicated RegExps","msgtype":"m.text"},"ts":1635331045628,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$YCIFjx2-12xaC36xjaEQ2zMBFPhm67SdtiOmr-V2EWI"},
{"content":{"body":"but I never used any advanced features of RegExp (I think it's hard to learn and hard to read)","msgtype":"m.text"},"ts":1635331071867,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VtzUG7TpgSKiqBnzyILx2dGPST1o1fUPTt1yi1Hzm5Y"},
{"content":{"body":"bakkot: 100% agree, and I think that's the only motivation for the feature","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: 100% agree, and I think that's the only motivation for the feature","msgtype":"m.text"},"ts":1635331082570,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$a3_MfoQt-KqavsuVc-WhDASPCooGJyUqXm_6L7DX3lM"},
{"content":{"body":" * but I never used any advanced features of RegExp (I think it's hard to learn and hard to read)","m.new_content":{"body":"but I never used any advanced features of RegExp (I think it's hard to learn and hard to read)","msgtype":"m.text"},"m.relates_to":{"event_id":"$VtzUG7TpgSKiqBnzyILx2dGPST1o1fUPTt1yi1Hzm5Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635331106438,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7Zv2G5VyYPD0oqMTKlLxgKM_YUayTeBn32aR2jgJ8Go"},
{"content":{"body":"I think having part of the regex be case sensitive is a reasonable thing to want","msgtype":"m.text"},"ts":1635331238315,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B-uGX9ZE2p7c2SG7tanLG3y7obgswN6gs7x1UWpYuHA"},
{"content":{"body":"I want to see actual motivating regexps","msgtype":"m.text"},"ts":1635331249714,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0M5BYOAdEKJVAvRM6y5UWq9BK4uIV6AjBOL3VB70AAo"},
{"content":{"body":"you should say that maybe","msgtype":"m.text"},"ts":1635331283562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qUvdimIq__rMrskjMTgxpqzTwTibzZBK1tw4gRPc64E"},
{"content":{"body":"bakkot: so we don't need to change arbitrary flags, we need a case-sensitivity modifier? I'd be much more okay with that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so we don't need to change arbitrary flags, we need a case-sensitivity modifier? I'd be much more okay with that","msgtype":"m.text"},"ts":1635331303241,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qyUmOWIQDrXBF6fGmDo2LYuInda_u55FMdhGBnSXABs"},
{"content":{"body":"at the end of today, i'm going to wish we had that regexp subgroup chip talked about last time (or maybe 2 meetings ago)","msgtype":"m.text"},"ts":1635331446817,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TWCLa-O-QDTWUfKVcmuLvAGCo-xSx2u-aYIABCFZ3aI"},
{"content":{"body":"i feel like i _should_ care but i don't really","format":"org.matrix.custom.html","formatted_body":"i feel like i <em>should</em> care but i don't really","msgtype":"m.text"},"ts":1635331460181,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AxetVc7RHrYn7Q2l2ZuoAuPaR6U0ZTtWjyJW-7bh-dg"},
{"content":{"body":"this isn't my area so... i don't have much of an opinion","msgtype":"m.text"},"ts":1635331537453,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Y4P9BTO1xOvdzyz7wqbBYSV2VSS4lU25xYlRoBiCab4"},
{"content":{"body":"also we don't have an expert on this rn since we are integrating an external engine.","msgtype":"m.text"},"ts":1635331571032,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$13E_hFAsoXlfGAELBOU5Ws_flDl1fBiGTWHvPLQK900"},
{"content":{"body":"thanks y'all, btw","msgtype":"m.text"},"ts":1635331666860,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZACTDa3-1G1UWSu0XTq5WUYWnynKCxanfxF5LvhDrPM"},
{"content":{"body":"> <@shuyuguo:matrix.org> at the end of today, i'm going to wish we had that regexp subgroup chip talked about last time (or maybe 2 meetings ago)\n\nDid I say that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TWCLa-O-QDTWUfKVcmuLvAGCo-xSx2u-aYIABCFZ3aI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>at the end of today, i&#39;m going to wish we had that regexp subgroup chip talked about last time (or maybe 2 meetings ago)</blockquote></mx-reply>Did I say that?","m.relates_to":{"m.in_reply_to":{"event_id":"$TWCLa-O-QDTWUfKVcmuLvAGCo-xSx2u-aYIABCFZ3aI"}},"msgtype":"m.text"},"ts":1635331717730,"senderName":"chipmorningstar","senderId":"@chipmorningstar:matrix.org","id":"$6Cll2SKfcLnuNMCueNo_BKNriAm0gplJtSkipbQe_TY"},
{"content":{"body":"i thought so! but it's 4am","msgtype":"m.text"},"ts":1635331726912,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_qMgfSZgKUpC9LuJ0VbjDEobntLlxmHV4WVYl4WnKYk"},
{"content":{"body":"Ah, yes I did.","msgtype":"m.text"},"ts":1635331729765,"senderName":"chipmorningstar","senderId":"@chipmorningstar:matrix.org","id":"$LTSekN2og71IsFBmyCjoaZuc1N_-kkCq4f8vrX23uRo"},
{"content":{"body":"i feel like","msgtype":"m.text"},"ts":1635331736424,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$03k3ez6QtpPz6ZrIZsjQCGF-lhbvTAOa9RJHIKrwqt4"},
{"content":{"body":"regexs have a lot of stuff in them already","msgtype":"m.text"},"ts":1635331741331,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t0mbB5DRU4_pheKL9rctl6eo5ChlY-rrOZ2B8y3u73Q"},
{"content":{"body":"and we are proposing to ~double the number of distinct syntaxes they have","msgtype":"m.text"},"ts":1635331752523,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5lbruxms_ASAEbneel2ThTTXwXM6_jdLpu13D8xxJB0"},
{"content":{"body":"seems like","msgtype":"m.text"},"ts":1635331754095,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wj0eKSFW37_hJzeLKxpRCchgpOq0cDUgjL2-u8IauFA"},
{"content":{"body":"a lot","msgtype":"m.text"},"ts":1635331754809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$06jfZfErNQp9hz_s8-gD7X12r-KkITO5hL1g1CEI8qA"},
{"content":{"body":"yes, i had thought part of the point of splitting it out is so we could reject some piecemeal","msgtype":"m.text"},"ts":1635331774390,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0swqMe3Wv2OynQgmijMC9K9n-fiIC2pCKp5bpeDXuCM"},
{"content":{"body":"When you said \"subgroup\" I thought you were talking about subgroups inside regexps, instead of regexps inside a subgroup.","msgtype":"m.text"},"ts":1635331777006,"senderName":"chipmorningstar","senderId":"@chipmorningstar:matrix.org","id":"$cWXBWnBgJ8euLp5vtxAq1QuMGJzUetf23ihLQKqdoTs"},
{"content":{"body":"i would use all of them probably, but","msgtype":"m.text"},"ts":1635331779346,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mtaYbs48nmJKwKNDA-aCnCwddzg1dXZjMlvYrEmAwmA"},
{"content":{"body":"it's so many","msgtype":"m.text"},"ts":1635331781604,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gDecSBzfFeiTuNeNB2sCHkd25fGwzrMjPQSV9K8utBM"},
{"content":{"body":"is it true that this feature is equivalent to `/condition/.test(str) ? /yes-pattern/.test(str) : /no-pattern/.test(str)`?","format":"org.matrix.custom.html","formatted_body":"is it true that this feature is equivalent to <code>/condition/.test(str) ? /yes-pattern/.test(str) : /no-pattern/.test(str)</code>?","msgtype":"m.text"},"ts":1635331788845,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qLgvAMGJozGU9OAQFTXhU6XovF6TuY6bX2CJ541yQoU"},
{"content":{"body":"TG4","msgtype":"m.text"},"ts":1635331819547,"senderName":"chipmorningstar","senderId":"@chipmorningstar:matrix.org","id":"$F0c3G2f0NX2hlaF5EaXLkoKMzRafPNi7WUH9CiBprwI"},
{"content":{"body":"i would support tg4 for regex","msgtype":"m.text"},"ts":1635331829863,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$zL9wdWCDx13o4u2bcjovrDdXuw-usw-BO_NXj2nBuXo"},
{"content":{"body":"Only for really trivial regexes","msgtype":"m.text"},"ts":1635331840052,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zl6EAx6awNB_582uBnyGOW9pz0bzW1tgukSg2_NIFXo"},
{"content":{"body":"yes please","msgtype":"m.text"},"ts":1635331840135,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yMcGdyMdXxGyjNan-Drv60S50zvlUwRmzBpOZkVBxPw"},
{"content":{"body":"i'd like to be a reviewer on private field destructuring; i didn't realize stage 2 for it was a possibility.","msgtype":"m.text"},"ts":1635331974957,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TWO52g2JudeYbhpHjv-ROhknaw-SYeydGHHQLDnK6tQ"},
{"content":{"body":"good morning Jordan!","msgtype":"m.text"},"ts":1635331988746,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$q3esOFNdK1VyGcBW2_u8zPLaw7xKLuA6mzIWXzxo84U"},
{"content":{"body":"ljharb: add yourself as reviewer in the notes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: add yourself as reviewer in the notes","msgtype":"m.text"},"ts":1635332017275,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QuWDhS4vfLpRPs_PNKv_xUy4AQdbwfWFuhUQo1g9wgE"},
{"content":{"body":"k","msgtype":"m.text"},"ts":1635332021730,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IBiaYbYzFI3Z3uGjrUxc2ANV9aFtDMQx4GEGKXvFIAI"},
{"content":{"body":"did someone say \"ISO 8601 regex\"? https://github.com/tc39/proposal-uniform-interchange-date-parsing#background üôÉ","msgtype":"m.text"},"ts":1635332310790,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$_qy3wHSmCXtZ5lk3eD7Pqc0SbsFLc04ljXeydA7WAEc"},
{"content":{"body":"literally just yesterday I took an extremely long regex and broke it into a sequence of ifs and the code is now much more readable, even though it is also longer","msgtype":"m.text"},"ts":1635332415546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1wFg7uF61TuortlqeAyv-1-coaibJ9Dik8yZwL7wEYM"},
{"content":{"body":"i agree with the abstract notion of meeting users where they are","msgtype":"m.text"},"ts":1635332475083,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wJILt-kFqaUCj2yY4sACFeUViX1A31T3MgDUzYxA6lE"},
{"content":{"body":"but, it seems like if the ultimate goal is something like, better TextMate grammar support in VSCode or something","msgtype":"m.text"},"ts":1635332490710,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Slonnr4hBgYad40jQ92m9MIIHeM_LQP3HFrVBQ243Dw"},
{"content":{"body":"doesn't VSCode have enough adoption to pressure TextMate grammars to express what they need to express without using regexps as a full blown PL?","msgtype":"m.text"},"ts":1635332524893,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iH9ViheZeJInf-vo79W-q12loe7CfpL_bFp98ijUPIM"},
{"content":{"body":"SURELY there exists some code today that you would want to rewrite using this feature (if it's well motivated)","msgtype":"m.text"},"ts":1635332685560,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wtKoMIrEyAtE5p8HhIcWASz4MlYvS6odx3PQrAVL-Y4"},
{"content":{"body":"that can be the example","msgtype":"m.text"},"ts":1635332712652,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YhllPIg_L6bTbluDGHA-a19ZnnZaxz8sxMSFKpaa9Gg"},
{"content":{"body":"A procedural question: Stage-0 proposals that get presented to plenary should get transferred to the TC39 GitHub organization, right? Like this proposal, if it doesn‚Äôt make Stage 1?","msgtype":"m.text"},"ts":1635332844034,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$9kWFqUdO5ASrqXKVdjuxiZyHPSE0AOaYUf7amWJp6us"},
{"content":{"body":"it does seem to help cases where parts of a pattern must currently be duplicated, but it may not be the best way to do so","msgtype":"m.text"},"ts":1635332847402,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$r6x007j2Buo84Bm-s5Bgl3i6UGD6Y2Cq6iV2sH3Lrfs"},
{"content":{"body":"* A procedural question: Stage-0 proposals that get presented to plenary should get transferred to the TC39 GitHub organization, right? Like this proposal, if it doesn‚Äôt make Stage 1?","m.new_content":{"body":"A procedural question: Stage-0 proposals that get presented to plenary should get transferred to the TC39 GitHub organization, right? Like this proposal, if it doesn‚Äôt make Stage 1?","msgtype":"m.text"},"m.relates_to":{"event_id":"$9kWFqUdO5ASrqXKVdjuxiZyHPSE0AOaYUf7amWJp6us","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635332875030,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QzKANJBmfP3Kl8LEh29r-jCzXjjRgH2SindkFJcge4o"},
{"content":{"body":"Richard Gibson: I want to solve that with a better regex builder in the language","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: I want to solve that with a better regex builder in the language","msgtype":"m.text"},"ts":1635332896515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f-bbc9NKbx4nVhoKJazFZnG0SnpuXDi6VWYaQcax4LM"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1635332908250,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$2Rv04Y8HXyOtCDNjpUKqPTCKxkh0Fk5t3BYqtgvkJPs"},
{"content":{"body":"every time I build a regex by naive string mashing and `new RegExp` I feel slightly gross","format":"org.matrix.custom.html","formatted_body":"every time I build a regex by naive string mashing and <code>new RegExp</code> I feel slightly gross","msgtype":"m.text"},"ts":1635332927153,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oxRkFUpkQY-EP54aaxwAl-Zr9CuJnnwbiLKZzA5iFSo"},
{"content":{"body":"most of those times this proposal wouldn't help","msgtype":"m.text"},"ts":1635332939652,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zttbG8X6ZgIbTgPT273Su8-Mj_lEI9RVxiTi7OpYbu4"},
{"content":{"body":"Incidentally, is a CoC Committee update still going to occur sometime this plenary? I wanted to make sure I didn‚Äôt miss that.","msgtype":"m.text"},"ts":1635333158548,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$rZ3RCsyUq5dnh40WcHfG9_QSQkwdw6VJAHjJ-EgEfvs"},
{"content":{"body":"Lookbehinds can be variable length in ES: /(?<!c[de]*f)abc/.exec(\"xcfabcdedefabc\")","msgtype":"m.text"},"ts":1635333176433,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$NeHw3c7S821WFKm2IU-0SmeMpX_ixIzBuY9prJ5OGnc"},
{"content":{"body":"Agenda says it happened but notes say it didn‚Äôt. ","format":"org.matrix.custom.html","formatted_body":"Agenda says it happened but notes say it didn‚Äôt.","msgtype":"m.text"},"ts":1635333183112,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$TQ3MtPgNc82zVqPIsjREsuhhCcTMI-Ij4DxW5rUOhAk"},
{"content":{"body":"I have asked Jory to present a CoC update","msgtype":"m.text"},"ts":1635333186323,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$mhJ5hOIUks5x8W8TB_sl3zzJ7u-cw0w0sXPkvdOujH8"},
{"content":{"body":"if we're process lawyers today, stage 1 entrance criteria includes 'Illustrative examples of usage\" which I don't think was satisfied","msgtype":"m.text"},"ts":1635333198525,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dtt_fTEq-sQeYYU8Oty1k-_0rgFc8d0GARoKcEtU15M"},
{"content":{"body":"> <@waldemarh:matrix.org> Lookbehinds can be variable length in ES: /(?<!c[de]*f)abc/.exec(\"xcfabcdedefabc\")\n\nMy apologies, I am incorrect in that regard. I've spent too much time looking at regex implementations across multiple languages.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NeHw3c7S821WFKm2IU-0SmeMpX_ixIzBuY9prJ5OGnc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>Lookbehinds can be variable length in ES: /(?&lt;!c[de]*f)abc/.exec(&quot;xcfabcdedefabc&quot;)</blockquote></mx-reply>My apologies, I am incorrect in that regard. I've spent too much time looking at regex implementations across multiple languages.","m.relates_to":{"m.in_reply_to":{"event_id":"$NeHw3c7S821WFKm2IU-0SmeMpX_ixIzBuY9prJ5OGnc"}},"msgtype":"m.text"},"ts":1635333219473,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AaifGDgUOc9uy30hqcsUgSNS792R_RsRc0czt1oQDbU"},
{"content":{"body":"> <@michaelficarra:matrix.org> if we're process lawyers today, stage 1 entrance criteria includes 'Illustrative examples of usage\" which I don't think was satisfied\n\nI did provide examples of usage though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dtt_fTEq-sQeYYU8Oty1k-_0rgFc8d0GARoKcEtU15M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>if we&#39;re process lawyers today, stage 1 entrance criteria includes &#39;Illustrative examples of usage&quot; which I don&#39;t think was satisfied</blockquote></mx-reply>I did provide examples of usage though.","m.relates_to":{"m.in_reply_to":{"event_id":"$dtt_fTEq-sQeYYU8Oty1k-_0rgFc8d0GARoKcEtU15M"}},"msgtype":"m.text"},"ts":1635333356307,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s9vtWBpqXMCPqW7w7nE9C3qa6MSNvAQyMGffyvq0w8E"},
{"content":{"body":"I strongly feel that conditionals improve readability in complex patterns, and can improve readability when you have to context switch between RegExp syntax and JS syntax. I'm also not forging net new syntax here, but asking the committee to consider adopting existing syntax that is a well trodden path across multiple heavily used implementations.","msgtype":"m.text"},"ts":1635333482198,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uo6gbfEWY5ylS4elgVnqpDQvCYvtizY_OEWiudj6Yig"},
{"content":{"body":"rbuckton: I just want to see some examples where you compare to how you write it today, because I am having a hard time making that comparison myself, so I can't convince myself the feature is needed","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I just want to see some examples where you compare to how you write it today, because I am having a hard time making that comparison myself, so I can't convince myself the feature is needed","msgtype":"m.text"},"ts":1635333524684,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mi7o45fhDfIaC6SjSyP4FUd7OBe3ZV5DgjrZpkXRbYI"},
{"content":{"body":"rbuckton: I don't think anyone is complaining about the syntax chosen. Being in another regexp implementation isn't motivation, it's guidance on syntax/semantics choices.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't think anyone is complaining about the syntax chosen. Being in another regexp implementation isn't motivation, it's guidance on syntax/semantics choices.","msgtype":"m.text"},"ts":1635333593667,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uwxB60fLQoXcaaW8eNh5heiJ0yaIDbNe3CTFeP2XLBs"},
{"content":{"body":"if a feature like this is well-motivated, it should be easy for you to find code that was written using facilities that are available today that would've been written using your feature and turned out \"better\", using whatever definition of \"better\" you want","msgtype":"m.text"},"ts":1635333724821,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$o0_7Nzi3KTosBJiv0yTViyqEOlSMn84kEAqKFo-TuLc"},
{"content":{"body":"fwiw I have read a lot of Boost and miscellaneous PCRE regexes and I don't know that I have ever seen a conditional expression; \"in a heavily used implementation\" isn't really that informative relative to \"heavily used in an implementation\"","msgtype":"m.text"},"ts":1635333768726,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rVaOwaXxJDdus_IlrnJBhTdokdRwFfMN0M3_10T4ocg"},
{"content":{"body":"\"should be easy\" is not so easy when your search criteria is `(?(?=`, but I understand your meaning.","format":"org.matrix.custom.html","formatted_body":"&quot;should be easy&quot; is not so easy when your search criteria is <code>(?(?=</code>, but I understand your meaning.","msgtype":"m.text"},"ts":1635333945049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q9UuplwLqjj3QbcIkErqAwZBfVdBpiCUUdjnnliQnRI"},
{"content":{"body":"Plenary is starting.... now!","msgtype":"m.text"},"ts":1635336026423,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$x_0uD9H9u4JqCYWDvTvoS7NZVSCMCB8DziZF5Vbv2ls"},
{"content":{"body":"rbuckton: If the TextMate grammar and related cases (all logic *must* be in the regex) did not exist, do you think you'd still be motivated to champion the RegExp conditionals proposal?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: If the TextMate grammar and related cases (all logic <em>must</em> be in the regex) did not exist, do you think you'd still be motivated to champion the RegExp conditionals proposal?","msgtype":"m.text"},"ts":1635336102282,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$Nhls8FnPaY8lGWMpar1Dg7T1hvNcZN2u3Sm0whhICNI"},
{"content":{"body":"Yes, I've used it often enough in .NET. I'll admit, it is a niche feature compared to what we already support, but many of the cases where its used its either:\n- The only way to achieve what you want _in the regex_, vs having to completely break down the regexp.\n- Much easier to read than alternatives.","format":"org.matrix.custom.html","formatted_body":"<p>Yes, I've used it often enough in .NET. I'll admit, it is a niche feature compared to what we already support, but many of the cases where its used its either:</p>\n<ul>\n<li>The only way to achieve what you want <em>in the regex</em>, vs having to completely break down the regexp.</li>\n<li>Much easier to read than alternatives.</li>\n</ul>\n","msgtype":"m.text"},"ts":1635336262196,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LxxavgESedcxxKqrmVHYDpeG9e83qG4k6lNxYn1WoPc"},
{"content":{"body":"maybe you still have access to the .NET examples where you've used it then?","msgtype":"m.text"},"ts":1635336315406,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$6On9otuQ_2NOJi_TSl1tUER33vhsZE1H1OxP4bE-5sk"},
{"content":{"body":"this doesn't seem like a pun to me?","msgtype":"m.text"},"ts":1635336418707,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BKoZQxSTluJzpqKnVLnibRKCd5zCAWwwcCI19bIOKjs"},
{"content":{"body":"nor to me","msgtype":"m.text"},"ts":1635336425276,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x1ZmXCCOhwt8XQGbuZEpw_qz09Hgo6JHETWj7jBchss"},
{"content":{"body":"a pun is when you are using a word in a non-obvious way","msgtype":"m.text"},"ts":1635336426357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$26yccswQkzyGHSDLQcqXIeZzWg44KMWX7pMhasg6EpM"},
{"content":{"body":"Nothing I could locate quickly, I've spent most of my time in JS/TS for the last 6 years.","msgtype":"m.text"},"ts":1635336436236,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JS8gxv63Lq7lXXTw4KoueCdGdkuARMc3OQQi6IfzS6M"},
{"content":{"body":"but \"raw\" and \"cooked\" are antonyms","msgtype":"m.text"},"ts":1635336437719,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-yk9Tfq_tqiX2hl29upiuNrxzYSyY2CmX7y_x8mhG74"},
{"content":{"body":"raw/cooked may be duals in the food preparation space, but I'm not sure String.raw is in any way a \"dual\" of String.cooked","msgtype":"m.text"},"ts":1635336443473,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pPadujKuoCKjHmskXXr0HXM3aXKWfv7y0qrOHuMOOWw"},
{"content":{"body":"Raw isn‚Äôt just a food term. Raw supplies, for example.","msgtype":"m.text"},"ts":1635336466759,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$BsQicljWIGCBkAsM7IyJMf_6En5-_WiXuc_lcbA-BGQ"},
{"content":{"body":"Raw material.","msgtype":"m.text"},"ts":1635336476556,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$PjAvFrGaW8qtRzoROzCv1TSsIygYmDCJFnmHtBp6l24"},
{"content":{"body":"yes, words have multiple meanings","msgtype":"m.text"},"ts":1635336483997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q7Ss3fwArjdmg3lqSeslmtEdh20GRBxU2IGbUJ7W-RY"},
{"content":{"body":"yeah i am not sure about \"cooked\" here","msgtype":"m.text"},"ts":1635336487472,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$p0vNyBpCEsPPpsxjFqgZA-x7AnoGGY42y6CVlSOJKLE"},
{"content":{"body":"i kinda like it","msgtype":"m.text"},"ts":1635336507152,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HkwMqrpVoRPPRsZXa7ne1cd6OjIPV7IOb9U73Qt7UJ4"},
{"content":{"body":"I prefer something like \"processed\". I had no idea what \"cooked\" meant.","msgtype":"m.text"},"ts":1635336511673,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$sD5I6EiC56bbF0yZn--tj_BrGUMjd9A4FHFwebwyzec"},
{"content":{"body":"I'd prefer a name that is describes better what it does (atleast somewhat).","msgtype":"m.text"},"ts":1635336522201,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$f4rv3BeS9jvKRni_TBYgPxnnUvQ76SAO1UDHIoruW0E"},
{"content":{"body":" * I'd prefer a name that is describes better what it does (atleast somewhat).","m.new_content":{"body":"I'd prefer a name that is describes better what it does (atleast somewhat).","msgtype":"m.text"},"m.relates_to":{"event_id":"$f4rv3BeS9jvKRni_TBYgPxnnUvQ76SAO1UDHIoruW0E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635336528937,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$VwhEUkaoOrm-s8ZwG0mPgiFSZvOu65pltrf6OokLyp8"},
{"content":{"body":"Cooked isn‚Äôt necessarily just a food term either.","msgtype":"m.text"},"ts":1635336544086,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YMGxdDzdvqT4SPe-0GeL_ds_G3g1zJxed8EwOj-U-Kc"},
{"content":{"body":"Although its association with cooking is stronger than raw‚Äôs.","msgtype":"m.text"},"ts":1635336553234,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$iIQ2Xm0CIQkHUmtBPUA9R4CTsUwVdeH_lGl-gvOZDU8"},
{"content":{"body":"\"processed\" doesn't mean anything at all to me","msgtype":"m.text"},"ts":1635336570450,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jOac4oOvYWYu2nseAm9DP7pC0g734rkIfnFDKyaRN_o"},
{"content":{"body":"every function processes its inputs","msgtype":"m.text"},"ts":1635336574720,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xEb56OYA3aey_1UNcoqi7AwrETtK9-DQGi0nTLdNoT8"},
{"content":{"body":"i'm fine with `identity` as well","format":"org.matrix.custom.html","formatted_body":"i'm fine with <code>identity</code> as well","msgtype":"m.text"},"ts":1635336605465,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Zwq7sSIeJdBk100LiafADRxP6v17fYIDwAw_pKGKD4A"},
{"content":{"body":"would not prefer \"processed\"","msgtype":"m.text"},"ts":1635336613989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dRQXuFZIwfdFwANjw46BVdE8c9GX6rd783R7Ap6Op6Y"},
{"content":{"body":"baked.","msgtype":"m.text"},"ts":1635336636566,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$YLAXx5fQNy5rrVvLYTCt7afhwK0GumO2H_G59whyxy4"},
{"content":{"body":"to be fair, I initially had to have the relationship between \"cooked\" and \"raw\" explained to me","msgtype":"m.text"},"ts":1635336637009,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DHzELydS7UhXPg7Aa8jgGSYO9G-cGNZ7aCWm3CAEZa0"},
{"content":{"body":"it should be baked","msgtype":"m.text"},"ts":1635336638680,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fNLcihqn9pUB1n0q17Ouy0CuVz3p7qSZEwz_eXDF5uo"},
{"content":{"body":"In the issue tracker I proposed `String.interp` or `String.interpolate` for just basic interpolation","format":"org.matrix.custom.html","formatted_body":"In the issue tracker I proposed <code>String.interp</code> or <code>String.interpolate</code> for just basic interpolation","msgtype":"m.text"},"ts":1635336641412,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cbcjVOZBK1kLjCfMxKhuPuUUfogRPeAzD4HkNITV0lo"},
{"content":{"body":" * In the issue tracker I proposed `String.interp` or `String.interpolate` for just basic interpolation","format":"org.matrix.custom.html","formatted_body":" * In the issue tracker I proposed <code>String.interp</code> or <code>String.interpolate</code> for just basic interpolation","m.new_content":{"body":"In the issue tracker I proposed `String.interp` or `String.interpolate` for just basic interpolation","format":"org.matrix.custom.html","formatted_body":"In the issue tracker I proposed <code>String.interp</code> or <code>String.interpolate</code> for just basic interpolation","msgtype":"m.text"},"m.relates_to":{"event_id":"$cbcjVOZBK1kLjCfMxKhuPuUUfogRPeAzD4HkNITV0lo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635336650240,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p5zET-1Ok_0zVrTgjx21wIAHudTiFktWr6gVtscCYoA"},
{"content":{"body":"Baked also is not necessarily a food term either.","msgtype":"m.text"},"ts":1635336651715,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$6Xc7p3R-0DkLknZi069sKLrhbBXqeEzHTwdsuUUV4Rk"},
{"content":{"body":"Oops, I‚Äôm up.","msgtype":"m.text"},"ts":1635336654810,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$yNDLS7jBMvX5fSJXvZx9_ncunYXzqLMwnbWRNDriHHg"},
{"content":{"body":"you're still ingesting something i guess","msgtype":"m.text"},"ts":1635336672273,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R6NH_LXAf8kmrT_zhyUAKJmWFtc6sV-zN8wPweLDvjI"},
{"content":{"body":"close enough","msgtype":"m.text"},"ts":1635336673230,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XvbRxOxaYcl1wstPfmWwCBJMu0k7VykrcHaQ0syNXFw"},
{"content":{"body":"String.ingested","msgtype":"m.text"},"ts":1635336692329,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VgCzWbn3ar7mBsj99-GtyqxzElhBHTnfVePFMzLVXuE"},
{"content":{"body":"digest might actually work","msgtype":"m.text"},"ts":1635336723825,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$q9nPgx0N51_zP7aexJ104-yGf2oq_n2kNO9oUQ6AwsM"},
{"content":{"body":"oh no that's too overloaded with hash stuff","msgtype":"m.text"},"ts":1635336736935,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$roa6IGcpojLJDA-ZWsgZ4QEzgBHG-cNJjepp1-wpMN8"},
{"content":{"body":"digest makes me think about hashing/signing","msgtype":"m.text"},"ts":1635336743817,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4dHQOI8b__nF0BFua7jepb43FUQElLAmeq3jl_vyo_s"},
{"content":{"body":"what shu said","msgtype":"m.text"},"ts":1635336747326,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qgAl3ux0X-Ebg8dofO3yZf792ufHqx7AhwQHhoCOb40"},
{"content":{"body":"ah, nevermind","msgtype":"m.text"},"ts":1635336753442,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$nr-VwfwJNLUdeSqbW3ciYGoHgnZVyJrDfd9OpCdYusU"},
{"content":{"body":" * digest makes me think about hashing/signing","m.new_content":{"body":"digest makes me think about hashing/signing","msgtype":"m.text"},"m.relates_to":{"event_id":"$4dHQOI8b__nF0BFua7jepb43FUQElLAmeq3jl_vyo_s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635336761384,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GabGYGXSVdHW_9A4xe_DbpVdg_-6BZHwdfTUL1oDEuk"},
{"content":{"body":"> <@rbuckton:matrix.org> In the issue tracker I proposed `String.interp` or `String.interpolate` for just basic interpolation\n\nI like `interpolate`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cbcjVOZBK1kLjCfMxKhuPuUUfogRPeAzD4HkNITV0lo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In the issue tracker I proposed <code>String.interp</code> or <code>String.interpolate</code> for just basic interpolation</blockquote></mx-reply>I like <code>interpolate</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$cbcjVOZBK1kLjCfMxKhuPuUUfogRPeAzD4HkNITV0lo"}},"msgtype":"m.text"},"ts":1635336835327,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$1cMH1RzDGK_bj7cqv7bgs6L261r53Qgf2BS0B40YNDc"},
{"content":{"body":"ga-zem-nid?","msgtype":"m.text"},"ts":1635336840358,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$hPpHZbvh3TLo-Yhu1qHMK8_KfS1bsxqbUa1gl2656as"},
{"content":{"body":"also `process`","format":"org.matrix.custom.html","formatted_body":"also <code>process</code>","msgtype":"m.text"},"ts":1635336843180,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$3i2bWsK_lDhakJfbIPQdq1-RiRyDNn0W248NXkHJTw4"},
{"content":{"body":"nothing about ingesting! üò±","msgtype":"m.text"},"ts":1635336860496,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$NypIGamXencTFEW9AqmMPkFRfnGSH0tgv867tXfKItw"},
{"content":{"body":"\"cooked\" makes sense in reference to the actual specification text: 13.2.8.3 GetTemplateObject ( templateLiteral )\n- Step 5: `Let cookedStrings be TemplateStrings of templateLiteral with argument false.`\n- Step 11.b: `Let cookedValue be cookedStrings[index].`","format":"org.matrix.custom.html","formatted_body":"<p>&quot;cooked&quot; makes sense in reference to the actual specification text: 13.2.8.3 GetTemplateObject ( templateLiteral )</p>\n<ul>\n<li>Step 5: <code>Let cookedStrings be TemplateStrings of templateLiteral with argument false.</code></li>\n<li>Step 11.b: <code>Let cookedValue be cookedStrings[index].</code></li>\n</ul>\n","msgtype":"m.text"},"ts":1635336867182,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rXhO7ME9FJBpTW7HPLM6BL4n5_PVphJK3h9RFVAqJQA"},
{"content":{"body":"If we go with `processed`, we could subtly continue the `raw` metaphor","format":"org.matrix.custom.html","formatted_body":"If we go with <code>processed</code>, we could subtly continue the <code>raw</code> metaphor","msgtype":"m.text"},"ts":1635336889760,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aATBMECk2bsRbDAkzVe2tWdOIU6XSZEIE6OkSyLx7jg"},
{"content":{"body":"the spec text can easily change its terminology to better reflect users' mental models","msgtype":"m.text"},"ts":1635336914421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFCmffytMNoBSnSRfaiQpfV0-EuNuf5Whpt_CUj76m0"},
{"content":{"body":"why are people shipping so much `console.log`?","format":"org.matrix.custom.html","formatted_body":"why are people shipping so much <code>console.log</code>?","msgtype":"m.text"},"ts":1635336929109,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w0zZZLOT9cEoZOWb8PPHLgWXyD94OOuQ7i-HTirGxJY"},
{"content":{"body":"diagnostic logging?","msgtype":"m.text"},"ts":1635336950897,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i9c604iS1IFAyjsAMd4GOoOla4IQz-3aRgJw0FjgdrA"},
{"content":{"body":"I think I only use call when it's bound, to turn a function of n parameters in to a function of n+1, where the first is the this-value: `const blink = Function.prototype.call.bind(String.prototype.blink); blink('DHTML')`","format":"org.matrix.custom.html","formatted_body":"I think I only use call when it's bound, to turn a function of n parameters in to a function of n+1, where the first is the this-value: <code>const blink = Function.prototype.call.bind(String.prototype.blink); blink('DHTML')</code>","msgtype":"m.text"},"ts":1635336954065,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OqbgrzvjKWI_EpTmMfXk31RiRbz7fWkQX4m9BVYD3ws"},
{"content":{"body":"> <@shuyuguo:matrix.org> why are people shipping so much `console.log`?\n\nit's totally fine for anything running in node to use it in production","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w0zZZLOT9cEoZOWb8PPHLgWXyD94OOuQ7i-HTirGxJY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>why are people shipping so much <code>console.log</code>?</blockquote></mx-reply>it's totally fine for anything running in node to use it in production","m.relates_to":{"m.in_reply_to":{"event_id":"$w0zZZLOT9cEoZOWb8PPHLgWXyD94OOuQ7i-HTirGxJY"}},"msgtype":"m.text"},"ts":1635336975009,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ysG9zXig9WqKPR-PI_7lK06CodYjyr6jE7K0QZCO9Ic"},
{"content":{"body":"Michael Ficarra: call-binding is definitely my primary use case - but that's also because it bypasses the need to `.call` later on the call-bound thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: call-binding is definitely my primary use case - but that's also because it bypasses the need to <code>.call</code> later on the call-bound thing","msgtype":"m.text"},"ts":1635337005506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JRIx4mvx226W5nieXI-CEMalGcoiBgg6iLZANN1sFWc"},
{"content":{"body":"I like the thinking here a lot","msgtype":"m.text"},"ts":1635337008984,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$C2g9_6N8ytdm_ze1zYh6ul-3yScs_vVSvhvwdvHZ2g8"},
{"content":{"body":" * Michael Ficarra: call-binding is definitely my primary use case - but that's also because it bypasses the need to `.call` later on the call-bound thing","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: call-binding is definitely my primary use case - but that's also because it bypasses the need to <code>.call</code> later on the call-bound thing","m.new_content":{"body":"Michael Ficarra: call-binding is definitely my primary use case - but that's also because it bypasses the need to `.call` later on the call-bound thing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: call-binding is definitely my primary use case - but that's also because it bypasses the need to <code>.call</code> later on the call-bound thing","msgtype":"m.text"},"m.relates_to":{"event_id":"$JRIx4mvx226W5nieXI-CEMalGcoiBgg6iLZANN1sFWc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337019747,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zEXy8bJwPeUJhUiWNu0hr7as1bHfMZdbU6MmXBdEP5k"},
{"content":{"body":"i find any natural language - PL connection fairly tenuous","msgtype":"m.text"},"ts":1635337021939,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yf5UFrOzvSw-iEen7CUcHVBOBzc91OPY7mZWD9E2rys"},
{"content":{"body":"i do like and appreciate the simplicity","msgtype":"m.text"},"ts":1635337269143,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lafR9a_mw63nIruvw3z7vu163sMu5DtveVnnb20notI"},
{"content":{"body":"how would I define my `blink` function from above using this new feature?","format":"org.matrix.custom.html","formatted_body":"how would I define my <code>blink</code> function from above using this new feature?","msgtype":"m.text"},"ts":1635337271099,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$u24hqE98gNAyvNoVEQMO5_GFqxVSo2Qk3ZiJiDVx_jY"},
{"content":{"body":" * i do like and appreciate the simplicity","m.new_content":{"body":"i do like and appreciate the simplicity","msgtype":"m.text"},"m.relates_to":{"event_id":"$lafR9a_mw63nIruvw3z7vu163sMu5DtveVnnb20notI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337281189,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZPacatSNyFOais_R3gAX67JQsjacd8A87lnLqjbmjak"},
{"content":{"body":"`const { blink } = String.prototype; const callBoundBlink = blink::blink.call;` i think? but you don't need the call-bound one either; you can do `str::blink()` any time","format":"org.matrix.custom.html","formatted_body":"<code>const { blink } = String.prototype; const callBoundBlink = blink::blink.call;</code> i think? but you don't need the call-bound one either; you can do <code>str::blink()</code> any time","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$u24hqE98gNAyvNoVEQMO5_GFqxVSo2Qk3ZiJiDVx_jY"}}},"ts":1635337368986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HQp04jhbg0inCSt_4CKH-nmxErUWo1lTc9j3xeH6Y84"},
{"content":{"body":"> <@michaelficarra:matrix.org> how would I define my `blink` function from above using this new feature?\n\n * `const { blink } = String.prototype; const callBoundBlink = blink::blink.call;` i think? but you don't need the callbound one either; you can do `str::blink()` any time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u24hqE98gNAyvNoVEQMO5_GFqxVSo2Qk3ZiJiDVx_jY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>how would I define my <code>blink</code> function from above using this new feature?</blockquote></mx-reply> * <code>const { blink } = String.prototype; const callBoundBlink = blink::blink.call;</code> i think? but you don't need the callbound one either; you can do <code>str::blink()</code> any time","m.new_content":{"body":"`const { blink } = String.prototype; const callBoundBlink = blink::blink.call;` i think? but you don't need the callbound one either; you can do `str::blink()` any time","format":"org.matrix.custom.html","formatted_body":"<code>const { blink } = String.prototype; const callBoundBlink = blink::blink.call;</code> i think? but you don't need the callbound one either; you can do <code>str::blink()</code> any time","msgtype":"m.text"},"m.relates_to":{"event_id":"$HQp04jhbg0inCSt_4CKH-nmxErUWo1lTc9j3xeH6Y84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337395028,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5HP2sWTwNZw_fOOzIJwe7oL_UJoXvBvauBrTsOHgcx0"},
{"content":{"body":" * `const { blink } = String.prototype; const callBoundBlink = blink::blink.call;` i think? but you don't need the call-bound one either; you can do `str::blink()` any time","format":"org.matrix.custom.html","formatted_body":" * <code>const { blink } = String.prototype; const callBoundBlink = blink::blink.call;</code> i think? but you don't need the call-bound one either; you can do <code>str::blink()</code> any time","m.new_content":{"body":"`const { blink } = String.prototype; const callBoundBlink = blink::blink.call;` i think? but you don't need the call-bound one either; you can do `str::blink()` any time","format":"org.matrix.custom.html","formatted_body":"<code>const { blink } = String.prototype; const callBoundBlink = blink::blink.call;</code> i think? but you don't need the call-bound one either; you can do <code>str::blink()</code> any time","msgtype":"m.text"},"m.relates_to":{"event_id":"$HQp04jhbg0inCSt_4CKH-nmxErUWo1lTc9j3xeH6Y84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337400741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xj_auzIK3DtnVs3pybQR27mUOo_wx28tk7k20xKeIt0"},
{"content":{"body":"You asking for a way to uncurry `this`, which is kind of the opposite of what this does (though you _can_ do it using this syntax and `.call`).","format":"org.matrix.custom.html","formatted_body":"You asking for a way to uncurry <code>this</code>, which is kind of the opposite of what this does (though you <em>can</em> do it using this syntax and <code>.call</code>).","msgtype":"m.text"},"ts":1635337426681,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Dzo2tpB7-dJ0qRyw8trys3G8_5gZ5ttjIKqHhNXZTA4"},
{"content":{"body":"Partial Application would be `String.prototype.blink.call~(?)` (binds Reference to `blink.call`)","format":"org.matrix.custom.html","formatted_body":"Partial Application would be <code>String.prototype.blink.call~(?)</code> (binds Reference to <code>blink.call</code>)","msgtype":"m.text"},"ts":1635337461737,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZVZeEHwn8wAbPameyeBEgZWZSRSA3aWuw4winPDWMQ8"},
{"content":{"body":"`this::smartRound~(params.floatPrecision)` looks bad to me","format":"org.matrix.custom.html","formatted_body":"<code>this::smartRound~(params.floatPrecision)</code> looks bad to me","msgtype":"m.text"},"ts":1635337465070,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Wc6PYZXNHK30AuMyubo0XiO33ruvcdr-LrYnP8gEx1A"},
{"content":{"body":"for all my use cases, the \"uncurry this\" pattern (which i call \"call-binding\") is completely unnecessary with the `::` calling syntax, since its sole purpose is to robustly change the receiver later","format":"org.matrix.custom.html","formatted_body":"for all my use cases, the &quot;uncurry this&quot; pattern (which i call &quot;call-binding&quot;) is completely unnecessary with the <code>::</code> calling syntax, since its sole purpose is to robustly change the receiver later","msgtype":"m.text"},"ts":1635337472074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LZIPY83WWX2X6XmQna7DHeIiU7TNJT_i5on2QyB6sa4"},
{"content":{"body":" * You asking for a way to uncurry `this`, which is kind of the opposite of what this does (though you _can_ do it using this syntax and `.call`).","format":"org.matrix.custom.html","formatted_body":" * You asking for a way to uncurry <code>this</code>, which is kind of the opposite of what this does (though you <em>can</em> do it using this syntax and <code>.call</code>).","m.new_content":{"body":"You asking for a way to uncurry `this`, which is kind of the opposite of what this does (though you _can_ do it using this syntax and `.call`).","format":"org.matrix.custom.html","formatted_body":"You asking for a way to uncurry <code>this</code>, which is kind of the opposite of what this does (though you <em>can</em> do it using this syntax and <code>.call</code>).","msgtype":"m.text"},"m.relates_to":{"event_id":"$Dzo2tpB7-dJ0qRyw8trys3G8_5gZ5ttjIKqHhNXZTA4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337480655,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$By9v8kLE5PbsWRFWhJc_YLT0Yi7cOywy5SzRqbL8aYk"},
{"content":{"body":" * for all my use cases, the \"uncurry this\" pattern (which i call \"call-binding\") is completely unnecessary with the `::` calling syntax, since its sole purpose is to robustly change the receiver later","format":"org.matrix.custom.html","formatted_body":" * for all my use cases, the &quot;uncurry this&quot; pattern (which i call &quot;call-binding&quot;) is completely unnecessary with the <code>::</code> calling syntax, since its sole purpose is to robustly change the receiver later","m.new_content":{"body":"for all my use cases, the \"uncurry this\" pattern (which i call \"call-binding\") is completely unnecessary with the `::` calling syntax, since its sole purpose is to robustly change the receiver later","format":"org.matrix.custom.html","formatted_body":"for all my use cases, the &quot;uncurry this&quot; pattern (which i call &quot;call-binding&quot;) is completely unnecessary with the <code>::</code> calling syntax, since its sole purpose is to robustly change the receiver later","msgtype":"m.text"},"m.relates_to":{"event_id":"$LZIPY83WWX2X6XmQna7DHeIiU7TNJT_i5on2QyB6sa4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337489281,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DGz9-vIH3X5AhSD-j-l_TL9C1zmc_TCcDdSEyyjS6Ek"},
{"content":{"body":"It seems like a large number of cases of `bind` are for partial application. Were those taken out?","format":"org.matrix.custom.html","formatted_body":"It seems like a large number of cases of <code>bind</code> are for partial application. Were those taken out?","msgtype":"m.text"},"ts":1635337514491,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$PaAEKd_TRGLEfsXoUlAmBu-SUJJ0UNCZl8Xzq02lGwc"},
{"content":{"body":"If this doesn't support partial application?","msgtype":"m.text"},"ts":1635337527594,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$XT-sHJHSuhUkGzlmGZQyyXhVMnkdwTQnCz_n3MLZaEQ"},
{"content":{"body":"erights: pipe and `.call` wouldn't let me be robust against `delete Function.prototype.call`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: pipe and <code>.call</code> wouldn't let me be robust against <code>delete Function.prototype.call</code>","msgtype":"m.text"},"ts":1635337530466,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x2rZRKZ1iQOJ8qOGtDbcHntGyI_e4GA_kVcgfRv8Dik"},
{"content":{"body":"we had seen the opposite -- that bind is usually for binding `this`","format":"org.matrix.custom.html","formatted_body":"we had seen the opposite -- that bind is usually for binding <code>this</code>","msgtype":"m.text"},"ts":1635337532645,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$GqYeD6qRm3Uf0GJbZrpRBDZnmQ5dMs8pUHvRoak0gaI"},
{"content":{"body":"its a common pattern for example in jsx","msgtype":"m.text"},"ts":1635337548059,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QlP0NatJM1KODVGNSGHbl4A9pSOU-_mIPwSs5qB_oPM"},
{"content":{"body":"binding this or the partial application?","msgtype":"m.text"},"ts":1635337560928,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$xNQ5Ng1qmS73yBFTWjQess5CmOlCP4pvUVM6-p-N-o0"},
{"content":{"body":"binding this","msgtype":"m.text"},"ts":1635337566088,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Fi2ZUhqgga9D5Jda9mkxakGY_4KMOY_Dyt1qWiGzROE"},
{"content":{"body":"for JSX, I have partial, but that's functional components ... I guess old react is classes","msgtype":"m.text"},"ts":1635337574579,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$1vFDllsonYE_l5PB4YI-APWzfi7WoUgLQvhLtJcMv-g"},
{"content":{"body":"partial application is much less frequent as a use for `bind`","format":"org.matrix.custom.html","formatted_body":"partial application is much less frequent as a use for <code>bind</code>","msgtype":"m.text"},"ts":1635337575207,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ehcuPwvcTHZqdWgTqMmO-ZvnSoZs2OzUqtxcGwpLvBk"},
{"content":{"body":"yulia: JSX isn't shipped to the browser though, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: JSX isn't shipped to the browser though, right?","msgtype":"m.text"},"ts":1635337581959,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JLn7aGNo-Oik2A9oiIpfhH0IOgbAyz4JpfmWZaET6L4"},
{"content":{"body":" * for JSX, I have partial, but that's functional components ... I guess old react is classes","m.new_content":{"body":"for JSX, I have partial, but that's functional components ... I guess old react is classes","msgtype":"m.text"},"m.relates_to":{"event_id":"$1vFDllsonYE_l5PB4YI-APWzfi7WoUgLQvhLtJcMv-g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635337585423,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$d8_ouUPiejcdZ-1q7kSJpVaPtlEyc8pAHUbhbWKsmcM"},
{"content":{"body":"so it can compile to a bind call?","msgtype":"m.text"},"ts":1635337589523,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$k99qnr4m2oiWTK4kNPQjOCcmxOOxofPuHlG23sbz4EE"},
{"content":{"body":"no, but we are sensitive to how people are using the language","msgtype":"m.text"},"ts":1635337596411,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PT2s7FEPH0Uh7RWy-0mrTjFWVyqfB7OtYxAUglWSE1Q"},
{"content":{"body":"and there are other cases of bind outside of react, it was just the immediate example that came to mind","msgtype":"m.text"},"ts":1635337622083,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$IE4eLBdBxe2b6LPViUxi0H9iiydEwPSyVwWXA02B2OQ"},
{"content":{"body":"i think js choi did some great corpus analysis for this","msgtype":"m.text"},"ts":1635337633097,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BdsyM_IPYlyb7y7ERrLIRGmFAR-laJ4TgjwRFx5trtA"},
{"content":{"body":"can someone advance the queue to indicate mark's topic is up?","msgtype":"m.text"},"ts":1635337663777,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NuRmMJngoUrE4YkyaGSkUz8gOEOP6Y_Y5lyKy-_oC9I"},
{"content":{"body":"> <@rbuckton:matrix.org> You asking for a way to uncurry `this`, which is kind of the opposite of what this does (though you _can_ do it using this syntax and `.call`).\n\nI see now, thanks. You're right, it looks to be the opposite.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Dzo2tpB7-dJ0qRyw8trys3G8_5gZ5ttjIKqHhNXZTA4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You asking for a way to uncurry <code>this</code>, which is kind of the opposite of what this does (though you <em>can</em> do it using this syntax and <code>.call</code>).</blockquote></mx-reply>I see now, thanks. You're right, it looks to be the opposite.","m.relates_to":{"m.in_reply_to":{"event_id":"$Dzo2tpB7-dJ0qRyw8trys3G8_5gZ5ttjIKqHhNXZTA4"}},"msgtype":"m.text"},"ts":1635337719561,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xXO9iaHzAMs9bkg87p-ipmIIJrHap6VT2rF7hbechaU"},
{"content":{"body":"> <@yulia:mozilla.org> i think js choi did some great corpus analysis for this\n\ndo you know, is that in the repo? (I'm just a curious student driver lol)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BdsyM_IPYlyb7y7ERrLIRGmFAR-laJ4TgjwRFx5trtA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>i think js choi did some great corpus analysis for this</blockquote></mx-reply>do you know, is that in the repo? (I'm just a curious student driver lol)","m.relates_to":{"m.in_reply_to":{"event_id":"$BdsyM_IPYlyb7y7ERrLIRGmFAR-laJ4TgjwRFx5trtA"}},"msgtype":"m.text"},"ts":1635337726077,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$XmbJ5e3LYQtfWFyHgLRvdQP234tfMhHljn915xAid18"},
{"content":{"body":"I want to explicitly oppose jhd's motivation here","msgtype":"m.text"},"ts":1635337751207,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KZyLXHZ0_OFJhdXmZEYKRUr0wdIgTaveCc-6XfU7tDU"},
{"content":{"body":"bakkot: YOU DO THAT TOO!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: YOU DO THAT TOO!","msgtype":"m.text"},"ts":1635337762715,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pHcckvvQsSTbxJ23UviEW5DZulVBASkwZORD1kA2TPk"},
{"content":{"body":"that is: I think this should be an extremely low-weight factor","msgtype":"m.text"},"ts":1635337771762,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jcqj78MRdXZyKTR4BhAUJE4Y-lU5eXauyDQkRrbDggs"},
{"content":{"body":"Michael Ficarra: yeah, but I know that I'm weird","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: yeah, but I know that I'm weird","msgtype":"m.text"},"ts":1635337777486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LmHxUSxbB4yoMeiVBezWfRCYGIm9IdRIFCORVwNYecU"},
{"content":{"body":"that's fine","msgtype":"m.text"},"ts":1635337779438,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5LHXTIte0hBe4QrLkuJyTX7UwYQ6PgJay17cUg9UFIQ"},
{"content":{"body":"we're super weird","msgtype":"m.text"},"ts":1635337779681,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5le_ej8Be8Sp7InUcn4-3nZOA0NKhMTItmB3yohxBRw"},
{"content":{"body":"> <@sarahghp:matrix.org> do you know, is that in the repo? (I'm just a curious student driver lol)\n\nhttps://github.com/js-choi/proposal-bind-this#bind-and-call-are-very-common","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XmbJ5e3LYQtfWFyHgLRvdQP234tfMhHljn915xAid18?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sarahghp:matrix.org\">@sarahghp:matrix.org</a><br>do you know, is that in the repo? (I'm just a curious student driver lol)</blockquote></mx-reply>https://github.com/js-choi/proposal-bind-this#bind-and-call-are-very-common","m.relates_to":{"m.in_reply_to":{"event_id":"$XmbJ5e3LYQtfWFyHgLRvdQP234tfMhHljn915xAid18"}},"msgtype":"m.text"},"ts":1635337780945,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZwVapBiDgxK4cqlKEo4bdrXfuJcU8uKcpgyLwlzwFZ0"},
{"content":{"body":"bakkot: +1","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: +1","msgtype":"m.text"},"ts":1635337796540,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lWHuiBr8kUCTC4sJ6LCzHoi55KXXPFbNlPcmOF5WFF0"},
{"content":{"body":"basically every module I ever write, I protect against later-run code overriding or deleting built-ins, and so should everyone","msgtype":"m.text"},"ts":1635337872099,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XrTJ66WSZlVfazJ-GxL8U1iJ-cct3StKiKWVRZk5xAg"},
{"content":{"body":"it's reasonable not to expect people to write unergonomic code to achieve that. but if we can provide a way to make robust code easier, how are we not incentivized to do so?","msgtype":"m.text"},"ts":1635337912222,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g0eeqz_6vmNdeiByksAhqWryV_CCdzNibMhcnP6tccA"}
]