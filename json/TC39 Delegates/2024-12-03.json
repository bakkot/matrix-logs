[
{"content":{"body":"Should we do this for ShadowRealms though?","format":"org.matrix.custom.html","formatted_body":"Should we do this for ShadowRealms though?","m.mentions":{"user_ids":["@dminor:mozilla.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Xl6DDv2DRXNL3iIJbWMiTslOk23FI3SXrKsEnXZ93xk"}},"msgtype":"m.text"},"ts":1733244822611,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Z335DhO0rVdVjJdYt-N3Fzb_HzVOh4fkuEHuMXosdeU"},
{"content":{"body":"https://github.com/mozilla/standards-positions/issues/997","m.mentions":{},"msgtype":"m.text"},"ts":1733245970865,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$7Las351sIehGmZLVJPoidU00Mev08o_PBHwcMoUb5J8"},
{"content":{"body":"i thought porffor was an engine, it's a runtime as well?","m.mentions":{},"msgtype":"m.text"},"ts":1733246527676,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_8k4IWQfeTsUdCdrzMrbKoGUhnkH7mwFcWLGzjnKTdU"},
{"content":{"body":"what's the difference between those two to you?","m.mentions":{},"msgtype":"m.text"},"ts":1733246570650,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UCer-XKrQMwGYnk03T6A0LjXglKNZ0BJI155bCE1KV4"},
{"content":{"body":" * what's the difference between those two, to you?","m.mentions":{},"m.new_content":{"body":"what's the difference between those two, to you?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UCer-XKrQMwGYnk03T6A0LjXglKNZ0BJI155bCE1KV4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733246590690,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Orbkm-1R5BzWz3UZ0UmxursH_MPSBHw0VO4y5RmVEkU"},
{"content":{"body":"the difference between Node and V8","m.mentions":{},"msgtype":"m.text"},"ts":1733246593195,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AIFRUN0edxwdk-J3VL0IOsWlXUHOucdCYlt34U28e4s"},
{"content":{"body":"d8 is a runtime tho, no?","m.mentions":{},"msgtype":"m.text"},"ts":1733246614587,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jUhtHwblyBKwgBR9locotfyNhNJfjc031t2RNR82a8c"},
{"content":{"body":"hahahahaha","m.mentions":{},"msgtype":"m.text"},"ts":1733246622164,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3EChLdDa2MaZnRlscrP5JiL07ks3icPfEPJXL1xcQU8"},
{"content":{"body":"no","m.mentions":{},"msgtype":"m.text"},"ts":1733246622715,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c8j3SdbXH2VGH_iTXjljwKZpRbfcgt0DYMDoqat2HS0"},
{"content":{"body":"you could call d8 a test262 runtime","m.mentions":{},"msgtype":"m.text"},"ts":1733246644644,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jU-e7ruihd6KCDSZUBxJ9_KOlftLWGl0LKNeLMT1yK4"},
{"content":{"body":"I think porffor is working on developing into a runtime, yes","m.mentions":{},"msgtype":"m.text"},"ts":1733246645865,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2ljdDcL-G9n_yCxHHP44rhlynD2i_dmLATC-NkwY0JQ"},
{"content":{"body":"canadahonk: ^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canadahonk:matrix.org\">canadahonk</a>: ^","m.mentions":{"user_ids":["@canadahonk:matrix.org"]},"msgtype":"m.text"},"ts":1733246652849,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yxFoOh40ch7wbxUCdU7cP6uACi83u2BolABw3ipfiA0"},
{"content":{"body":"so what's the concrete rubric that node passes but d8 doesn't?","m.mentions":{},"msgtype":"m.text"},"ts":1733246667078,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oGoz3TDLlBLHbfWYKF6nObBLNYbdwPRtShaYYkchvLg"},
{"content":{"body":"(genuinely asking, tbc)","m.mentions":{},"msgtype":"m.text"},"ts":1733246678435,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$970kbNNvTZh3NfOIGUdV_9LaSiPLhPRNpGUeYKfgQSk"},
{"content":{"body":"the intentions of the maintainers?","format":"org.matrix.custom.html","formatted_body":"the intentions of the maintainers?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oGoz3TDLlBLHbfWYKF6nObBLNYbdwPRtShaYYkchvLg"}},"msgtype":"m.text"},"ts":1733246679220,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WSpSfEulnqOElk6_SLzqWQld3O7k3dSId0HT0ASAG7g"},
{"content":{"body":"at the very least, a desire and goal to actually support workloads beyond \"the bare minimum needed to run tests\"","m.mentions":{},"msgtype":"m.text"},"ts":1733246694260,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0hiqL1PFp1ZKWNOejHhx5cULs0EyJdOlEvLhZG9fuzw"},
{"content":{"body":"i mean if that's all it is then that's simple enough","m.mentions":{},"msgtype":"m.text"},"ts":1733246694787,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xTi_b8cmQ6BsWe8fwqlgge5w4sBnEn5ZBXhqqxasF0w"},
{"content":{"body":"in particular, TC55 is for server-type environments, which Node is intended to be, and d8 isn't","m.mentions":{},"msgtype":"m.text"},"ts":1733246720864,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YpW3-2c6aG_HMgPfeOBVj0UpQ1lYUFkqRd21zEgO23A"},
{"content":{"body":"like there is little rhyme or reason for \"features\" that exist in d8, how they work, beyond \"whatever's bare minimum needed to run our tests and the test262 harness\"","m.mentions":{},"msgtype":"m.text"},"ts":1733246733406,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fZGGa2GrAeMq6GC_9EwpiCpKf7AbA1No0r7BRsIJL_I"},
{"content":{"body":"porffor tho makes standalone executables, so is that not a runtime?","m.mentions":{},"msgtype":"m.text"},"ts":1733246738245,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AQPjJIw-0QvDtu-AIfMma0F6x_vEV7XdSq62cfUNeho"},
{"content":{"body":"no, IMO it needs a set of APIs and intention as dan says","m.mentions":{},"msgtype":"m.text"},"ts":1733246759386,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vx3_yCilBHsYK81PgLhXnQaDvMQErvgGABOSfj-nn28"},
{"content":{"body":"otherwise every engine is also a runtime","m.mentions":{},"msgtype":"m.text"},"ts":1733246765076,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A5wh4wHhG-wisM5lPZjWLiJ02O5vaVfK0vSU2LWSw3w"},
{"content":{"body":"and obviously we're not","m.mentions":{},"msgtype":"m.text"},"ts":1733246766922,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zqafSbtTWjsCcm164r13bvk4Rww0ncIk3-luGe_fXzk"},
{"content":{"body":"porffor famously does not ship a runtime","m.mentions":{},"msgtype":"m.text"},"ts":1733246767545,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3Ft6Jtlw_2n5rFrxL60TTrmhcq9fsBAaJz_ivS530Ys"},
{"content":{"body":"unless you reference `globalThis`","format":"org.matrix.custom.html","formatted_body":"unless you reference <code>globalThis</code>","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3Ft6Jtlw_2n5rFrxL60TTrmhcq9fsBAaJz_ivS530Ys"}},"msgtype":"m.text"},"ts":1733246782446,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DfGFapgLPEpnvlCastSIMGIsUlAgAhqSBySNH51KdG4"},
{"content":{"body":"yeah porffor isn't ready yet; this is about goals","m.mentions":{},"msgtype":"m.text"},"ts":1733246793663,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LbmEi_BqOTPZoUZdU8sFH6NNMbeqo4ny-Agslpkmejo"},
{"content":{"body":"Technically Porffor refers to itself as a compiler, rather than an engine.  And the resulting programs are more useful than base ecma262 allows, e.g.  io.\n\nhttps://porffor.dev/","m.mentions":{},"msgtype":"m.text"},"ts":1733246794342,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$mBMNpsHQPQ4MVz6XlCArLVin6eDNVoGxhH-GvmjPGaY"},
{"content":{"body":"oh no I regret not joining the call now","m.mentions":{},"msgtype":"m.text"},"ts":1733246807622,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$pfCEkorzT0o6mMKi3xjB8vj8ipCEhFiMdbXonjxyUvw"},
{"content":{"body":"please come to the GA and vote in favor of chartering TC55, everyone!","m.mentions":{},"msgtype":"m.text"},"ts":1733246831901,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jW0T7SgEfcsmGb9Dcg3jTp_oqo9VMIhuUFlQETMVY4k"},
{"content":{"body":"The definition of \"runtime\" is \"whatever people consider to be a runtime\"","m.mentions":{},"msgtype":"m.text"},"ts":1733246836186,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$x0FspxeU6-KFe6hfrbUzb5REatR0lo9-4Rcano1HEZ8"},
{"content":{"body":"Don't worry canadahonk , it was barely mentioned in plenary.","format":"org.matrix.custom.html","formatted_body":"Don't worry <a href=\"https://matrix.to/#/@canadahonk:matrix.org\">canadahonk</a> , it was barely mentioned in plenary.","m.mentions":{"user_ids":["@canadahonk:matrix.org"]},"msgtype":"m.text"},"ts":1733246846939,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$XP89VzVI7Fc_ulOCV5sNPsK9DhX1FVsyvXIJfm47h-k"},
{"content":{"body":"currently I would call it a compiler and engine","m.mentions":{},"msgtype":"m.text"},"ts":1733246848314,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$ZTy6Rjlg4y0WvrK6yuDrprFZ6OMio5wrWyw953H19HI"},
{"content":{"body":"it is as much a runtime as d8 currently","m.mentions":{},"msgtype":"m.text"},"ts":1733246863318,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$FmHF-jrEgnElaFpwJpWHtET8HmpNph1Mrfaa-s_v0bc"},
{"content":{"body":"(the conversation here in the matrix is the main part)","m.mentions":{},"msgtype":"m.text"},"ts":1733246874958,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$r0PXUd8EcK5uUCZicQHoWTDrKdy1YqgltxQJhBRFN7E"},
{"content":{"body":"ok thanks, that clarifies the meanings for me","m.mentions":{},"msgtype":"m.text"},"ts":1733246903943,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pJSjhM1gZQWix5hvXAnmqr47OtAiXbg-h5AouZOgVAI"},
{"content":{"body":"(and \"runtime\" clearly has a very hand-wavy one)","m.mentions":{},"msgtype":"m.text"},"ts":1733246914940,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qL0vzCBPN8fzAx1Z0wMHisq7YlFOtfYFC4AOvSjX3bk"},
{"content":{"body":"(long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now)","format":"org.matrix.custom.html","formatted_body":"(long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now)","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$FmHF-jrEgnElaFpwJpWHtET8HmpNph1Mrfaa-s_v0bc"}},"msgtype":"m.text"},"ts":1733246975545,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$DzOlwI0_BBuV2P4rKx3vXsADklDD73sRpDRy9PHVVZw"},
{"content":{"body":" * (long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now. there a few apis providing i/o but they are largely proof-of-concept rather than nice for now)","format":"org.matrix.custom.html","formatted_body":" * (long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now. there a few apis providing i/o but they are largely proof-of-concept rather than nice for now)","m.mentions":{},"m.new_content":{"body":"(long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now. there a few apis providing i/o but they are largely proof-of-concept rather than nice for now)","format":"org.matrix.custom.html","formatted_body":"(long-term yeah I'd like it to be more like node in terms of api/io capability but that is far away for now. there a few apis providing i/o but they are largely proof-of-concept rather than nice for now)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DzOlwI0_BBuV2P4rKx3vXsADklDD73sRpDRy9PHVVZw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733247003506,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$3WVDxgAlvB5K1_rktbJS-9hw6UjNB9AT62N1sUs_wjw"},
{"content":{"body":"on this point yeah, it will not include anything engine or runtime unless you use it. eg, if you have no usage of `Map`, in the binary there will be 0 checks for if the type as you know it wasn't used at compile-time","format":"org.matrix.custom.html","formatted_body":"on this point yeah, it will not include anything engine or runtime unless you use it. eg, if you have no usage of <code>Map</code>, in the binary there will be 0 checks for if the type as you know it wasn't used at compile-time","m.mentions":{"user_ids":["@devsnek:matrix.org","@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DfGFapgLPEpnvlCastSIMGIsUlAgAhqSBySNH51KdG4"}},"msgtype":"m.text"},"ts":1733247111915,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$ItBswu_ttCzj9GHuAU4o-vu7Aop5ZQk69Mow9tjsdC0"},
{"content":{"body":"@canadahonk:matrix.org you gonna just implement the wasi APIs?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@canadahonk:matrix.org\">@canadahonk</a> you gonna just implement the wasi APIs?","msgtype":"m.text"},"ts":1733247117851,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$exVAihy_bFF_sPRyp5LF_k7359G44rPpOWQOrfZii74"},
{"content":{"body":"I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally","format":"org.matrix.custom.html","formatted_body":"I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$exVAihy_bFF_sPRyp5LF_k7359G44rPpOWQOrfZii74"}},"msgtype":"m.text"},"ts":1733247155268,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$pIWP1EWiwaTVWNFYiXzCjV1ZL7RszmllO7NoI0Iaa1I"},
{"content":{"body":" * I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally (also to provide stability with my own API since WASI isn't)","format":"org.matrix.custom.html","formatted_body":" * I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally (also to provide stability with my own API since WASI isn't)","m.mentions":{},"m.new_content":{"body":"I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally (also to provide stability with my own API since WASI isn't)","format":"org.matrix.custom.html","formatted_body":"I'd like to have node(/deno/etc)-like wrappers to make them nicer ideally (also to provide stability with my own API since WASI isn't)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pIWP1EWiwaTVWNFYiXzCjV1ZL7RszmllO7NoI0Iaa1I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733247176063,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$wqb-xjvCQQd8oWB2fyeF1fbpz74yihpg87Dkg9E49_g"},
{"content":{"body":"It will be great to have people working on the correspondence between these things!","format":"org.matrix.custom.html","formatted_body":"It will be great to have people working on the correspondence between these things!","m.mentions":{"user_ids":["@canadahonk:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pIWP1EWiwaTVWNFYiXzCjV1ZL7RszmllO7NoI0Iaa1I"}},"msgtype":"m.text"},"ts":1733247176743,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jAlu4lMyBE7naoXNQFIkxMppqar6TTu3Z7o9P9uF79g"},
{"content":{"body":"personally, I would rather the engine just provide the wasi primitives and then I can pull in a library that adapts them to the high-level node/deno/whatever APIs","msgtype":"m.text"},"ts":1733247254559,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$RirSvqeqEjL9ULzEdTkJe4-e9WJykRIDytH6B_61G_g"},
{"content":{"body":"fair enough that makes sense to me too, we'll see :)","m.mentions":{},"msgtype":"m.text"},"ts":1733247278718,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$XzdirNqLHOBwoSQ8fK5wedv7brmGI2WpIvJLQlrFOzc"},
{"content":{"body":"also fun fact, even worst case using `globalThis`, so including 100% of engine, the output Wasm is still only <500kb ;)","format":"org.matrix.custom.html","formatted_body":"also fun fact, even worst case using <code>globalThis</code>, so including 100% of engine, the output Wasm is still only &lt;500kb ;)","m.mentions":{},"m.relates_to":{"event_id":"$ItBswu_ttCzj9GHuAU4o-vu7Aop5ZQk69Mow9tjsdC0","is_falling_back":true,"m.in_reply_to":{"event_id":"$ItBswu_ttCzj9GHuAU4o-vu7Aop5ZQk69Mow9tjsdC0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733247384821,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$adAQeX5a0iqdm9RzD_7svhxB7P00KpGdmp9U3P6t5rE"},
{"content":{"body":" * also fun fact, even worst case using `globalThis`, so including 100% of engine, the output Wasm is still only \\<500kb and native \\<300kb ;)","format":"org.matrix.custom.html","formatted_body":" * also fun fact, even worst case using <code>globalThis</code>, so including 100% of engine, the output Wasm is still only &lt;500kb and native &lt;300kb ;)","m.mentions":{"user_ids":["@devsnek:matrix.org","@softwarechris:matrix.org"]},"m.new_content":{"body":"also fun fact, even worst case using `globalThis`, so including 100% of engine, the output Wasm is still only \\<500kb and native \\<300kb ;)","format":"org.matrix.custom.html","formatted_body":"also fun fact, even worst case using <code>globalThis</code>, so including 100% of engine, the output Wasm is still only &lt;500kb and native &lt;300kb ;)","m.mentions":{"user_ids":["@devsnek:matrix.org","@softwarechris:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$adAQeX5a0iqdm9RzD_7svhxB7P00KpGdmp9U3P6t5rE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733247433206,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$a-gPHwR2xbvMG4vKc3APrIlxvsz_g0LnPhU4HgAhjts"},
{"content":{"body":"that reminds me I need to pester the wasi people about https://github.com/WebAssembly/wasi-clocks/pull/71 again","m.mentions":{},"msgtype":"m.text"},"ts":1733247568718,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M1q-D9pq492HtL6Igo14TAoPXu-gOqD6qts0jAwAnqc"},
{"content":{"body":"wasi v2 seems promising but there's still a bunch of warts and it doesn't seem to be moving as fast as I'd hoped","m.mentions":{},"msgtype":"m.text"},"ts":1733247592755,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8l2ZFjI1jPyszSvuKWvc-kCrL3Z4UKkz05xpcCuUlDU"},
{"content":{"body":"I did not realize that return-override stamping objects with private fields degrades their performance.","m.mentions":{},"msgtype":"m.text"},"ts":1733248153070,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$vj2L1sL_QuBQB-r_aD0C9DEqTpN3xJvFLav5bVBGOJg"},
{"content":{"body":"Note that the current semantics of private fields was heavily based on Mark's strongly stated goal of private fields being consistently analogous to WeakMaps in semantics.","m.mentions":{},"msgtype":"m.text"},"ts":1733248211646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1djQGLhvLz0eYcBEXi8DXKc7doYk0vrTsMZGgT7_PdI"},
{"content":{"body":"all of these things mark is proposing are things where, it would be nice if the language worked like this, but I am not convinced adding a new and less convenient kind of object with the new semantics is worth doing","m.mentions":{},"msgtype":"m.text"},"ts":1733248410430,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$URb4am9ltyXumNa5J0Yqn1fol6qc6kpzWwMuXrbXrOk"},
{"content":{"body":"Did anyone else's audio fall out?","m.mentions":{},"msgtype":"m.text"},"ts":1733248799468,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$sZySvPIwfVcnV4SzWTO_EMhNVQtPKzmqtC9RaEGb2Dk"},
{"content":{"body":"i mean i'd definitely make every object i ever produce non-trapping, because i don't want people to use proxy :-p","m.mentions":{},"msgtype":"m.text"},"ts":1733248816333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tLk_px0PXNn1kAWgOraTTAuP_Em3veKjK2atptBTsq8"},
{"content":{"body":"bakkot: what are your thoughts on changing non-extensible to include no-private-field-stamping? is that an extra bit of complexity in your view?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what are your thoughts on changing non-extensible to include no-private-field-stamping? is that an extra bit of complexity in your view?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1733249809670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cmdA14TAha6mSaNQAf6Hpf6Y9nLlNUQ-ktWPfLU7xpk"},
{"content":{"body":"that would mean sealed and frozen also have that trait, which seems a lot more likely to cause issues","m.mentions":{},"msgtype":"m.text"},"ts":1733249867409,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SUM5Jr70adVxr9QFdn6N1-0JaKMYzxK2LktZtOMroG8"},
{"content":{"body":"that's correct","m.mentions":{},"msgtype":"m.text"},"ts":1733249873916,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OQjCwTzEtg9hAAgqva2Kkly1C6FHu8ZTMkKoresoPB0"},
{"content":{"body":"right, it's all contingent on being web compat","m.mentions":{},"msgtype":"m.text"},"ts":1733249885761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GmDG2MocODuXFC_gKM3LtOt_KpzCPMSkAt1FkMg8q34"},
{"content":{"body":"i don't know of people who are actually doing that","m.mentions":{},"msgtype":"m.text"},"ts":1733249891619,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MO_5v9JlQaSTMJGEni_rMa8OqzqSZBWwFu1ZVgTO-vE"},
{"content":{"body":"private field stamping?","m.mentions":{},"msgtype":"m.text"},"ts":1733249898983,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WC_zbOW4fC4GUVmZDGOu8zsBZ4ZvEzCfromMJyUCkgo"},
{"content":{"body":"on non-extensibles?","m.mentions":{},"msgtype":"m.text"},"ts":1733249906388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HxoQJbAqUOTXOVKQOfuNkQeaSulonGvEz-sojAg4I6o"},
{"content":{"body":"oh true, that's a subset of a subset if anything","m.mentions":{},"msgtype":"m.text"},"ts":1733249917765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ptkCs1nHmfbrUJFOpnHnG5hLD00ZGYVYqFLfkZYCNd8"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1733249924544,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dnaFUjwo3clrKi9S1_B5DgKWS8E-cCa2JKdcujrb02M"},
{"content":{"body":"but like, if that's low enough that it's web compat, what about return override from `class` constructors itself?","format":"org.matrix.custom.html","formatted_body":"but like, if that's low enough that it's web compat, what about return override from <code>class</code> constructors itself?","m.mentions":{},"msgtype":"m.text"},"ts":1733249936076,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NyRYwSMNsgYGob76XCLL1W1UMHwjdxYos_5OHfRcm5A"},
{"content":{"body":"i'm open to that but i think that _does_ break stuff","format":"org.matrix.custom.html","formatted_body":"i'm open to that but i think that <em>does</em> break stuff","m.mentions":{},"msgtype":"m.text"},"ts":1733249952157,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$z4p3bX7wMxS5TafUJv6zQ396y55eHVVl_xrRoos1klU"},
{"content":{"body":"with people subclassing html elements or some crap","m.mentions":{},"msgtype":"m.text"},"ts":1733249956975,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZA-iVMo1YpKBsZTzls0ozchblLSA5teU2toxNHGbhM4"},
{"content":{"body":"gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1733249990792,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i21ftA6hG8M7dETDeQoIzPBAkZgh9jhDew-vMYfcVWE"},
{"content":{"body":"yeah custom elements seems to need a lot of really weird userland code :-/","m.mentions":{},"msgtype":"m.text"},"ts":1733250017069,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pFLeD14cFZuHy3IVvIUbLeVfY_0U8yOIcTsH9Z5FUwo"},
{"content":{"body":"> <@robpalme:matrix.org> I did not realize that return-override stamping objects with private fields degrades their performance.\n\nMy understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it the same perf hit as adding a public symbol. Maybe that's not the case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vj2L1sL_QuBQB-r_aD0C9DEqTpN3xJvFLav5bVBGOJg\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I did not realize that return-override stamping objects with private fields degrades their performance.</blockquote></mx-reply>My understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it the same perf hit as adding a public symbol. Maybe that's not the case","m.relates_to":{"m.in_reply_to":{"event_id":"$vj2L1sL_QuBQB-r_aD0C9DEqTpN3xJvFLav5bVBGOJg"}},"msgtype":"m.text"},"ts":1733250077793,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CxfY0TpYbBU7SLwqYd6HykZ29jhfsVyA1T4I-ODi1Bw"},
{"content":{"body":"> <@robpalme:matrix.org> I did not realize that return-override stamping objects with private fields degrades their performance.\n\n * My understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it is the same perf hit as adding a public symbol. Maybe that's not the case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vj2L1sL_QuBQB-r_aD0C9DEqTpN3xJvFLav5bVBGOJg\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I did not realize that return-override stamping objects with private fields degrades their performance.</blockquote></mx-reply> * My understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it is the same perf hit as adding a public symbol. Maybe that's not the case","m.new_content":{"body":"My understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it is the same perf hit as adding a public symbol. Maybe that's not the case","format":"org.matrix.custom.html","formatted_body":"My understand is that it's another shape change (in v8 at least) as it's adding a hidden symbol prop. I had assumed it is the same perf hit as adding a public symbol. Maybe that's not the case","msgtype":"m.text"},"m.relates_to":{"event_id":"$CxfY0TpYbBU7SLwqYd6HykZ29jhfsVyA1T4I-ODi1Bw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733250095367,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jL0BtD6Q9Wzb1PmRWKChrm1URjAOYx_hkqgK_ckUMBA"},
{"content":{"body":"yeah i don't think it's any worse than adding any other property","m.mentions":{},"msgtype":"m.text"},"ts":1733250132703,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1uU-yfrAkt-E0iRlZvgKIbqm8dxt5X9hS9pTbrcXuKc"},
{"content":{"body":"> <@shuyuguo:matrix.org> bakkot: what are your thoughts on changing non-extensible to include no-private-field-stamping? is that an extra bit of complexity in your view?\n\nI think the whole private-field-stamping thing is something we should simply not tell developers about, so changing how it works does not particularly add complexity","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cmdA14TAha6mSaNQAf6Hpf6Y9nLlNUQ-ktWPfLU7xpk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what are your thoughts on changing non-extensible to include no-private-field-stamping? is that an extra bit of complexity in your view?</blockquote></mx-reply>I think the whole private-field-stamping thing is something we should simply not tell developers about, so changing how it works does not particularly add complexity","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cmdA14TAha6mSaNQAf6Hpf6Y9nLlNUQ-ktWPfLU7xpk"}},"msgtype":"m.text"},"ts":1733250211097,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_WIqWh82mBXxD8vzKFFB5wGOSe0u2RSVOWo8tOpycjQ"},
{"content":{"body":"so I'm fine with that","m.mentions":{},"msgtype":"m.text"},"ts":1733250218055,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bJMkJJGufkDW5Q8_ktEu0zxcsY_q3zUM2dUK5TJQe3w"},
{"content":{"body":"I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.\nlike\nconst [proxy, disableTraps] = Proxy.temporary(target, handler);\n...\ndisableTraps();","format":"org.matrix.custom.html","formatted_body":"I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.<br />like<br />const [proxy, disableTraps] = Proxy.temporary(target, handler);<br />...<br />disableTraps();","msgtype":"m.text"},"ts":1733250276590,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YWGYoGm6kPuWB7Rnru2hsHRgFdscP6XtSYMr4eK8NmE"},
{"content":{"body":"I am really worried that people out there, possibly in libraries, did build WeakMap equivalent widgets that use the return override private field stamping trick, and that it would break if we unilaterally prevented return overrides proxy stamping. It's possible that non extensible objects are currently rare enough that they wouldn't break any deployed code. ","m.mentions":{},"msgtype":"m.text"},"ts":1733250296435,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$W9pqzvPQESomlY_y4nd9Nq4lYjFGmWyj8Fn-p8XGNFo"},
{"content":{"body":"> <@aclaymore:matrix.org> I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.\n> like\n> const [proxy, disableTraps] = Proxy.temporary(target, handler);\n> ...\n> disableTraps();\n\nI would prefer we just tell people to stop using proxies ever, instead of adding new methods which try to make them a little bit more performant","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YWGYoGm6kPuWB7Rnru2hsHRgFdscP6XtSYMr4eK8NmE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.<br />like<br />const [proxy, disableTraps] = Proxy.temporary(target, handler);<br />...<br />disableTraps();</blockquote></mx-reply>I would prefer we just tell people to stop using proxies ever, instead of adding new methods which try to make them a little bit more performant","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YWGYoGm6kPuWB7Rnru2hsHRgFdscP6XtSYMr4eK8NmE"}},"msgtype":"m.text"},"ts":1733250357890,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jPiRRuu5SOTGdcH_PzQBo_DtObZvgY0tZdLg3udLNjw"},
{"content":{"body":"> <@aclaymore:matrix.org> I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.\n> like\n> const [proxy, disableTraps] = Proxy.temporary(target, handler);\n> ...\n> disableTraps();\n\nyou can remove proxy traps after the creation.\n\n```js\nconst trap = { ... }\nconst proxy = new Proxy(obj, trap)\n// after some time\ndelete trap.get\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YWGYoGm6kPuWB7Rnru2hsHRgFdscP6XtSYMr4eK8NmE\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I have been wondering if we could have a way to disable proxy hooks, and if that would allow proxies to get a stable shape for ICs.<br />like<br />const [proxy, disableTraps] = Proxy.temporary(target, handler);<br />...<br />disableTraps();</blockquote></mx-reply><p>you can remove proxy traps after the creation.</p><pre><code class=\"language-js\">const trap = { ... }\nconst proxy = new Proxy(obj, trap)\n// after some time\ndelete trap.get\n</code></pre>","m.relates_to":{"m.in_reply_to":{"event_id":"$YWGYoGm6kPuWB7Rnru2hsHRgFdscP6XtSYMr4eK8NmE"}},"msgtype":"m.text"},"ts":1733250423534,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$13HzroWNLo7XNHSP2NY9C0o2jS4X9K4nzaCVIGxr_WQ"},
{"content":{"body":"yeah that live binding behavior is bonkers to me","m.mentions":{},"msgtype":"m.text"},"ts":1733250452583,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KsNGgaIYAVTtZYAYuoKWjLuVXXaafD5JymmdOWyY1r4"},
{"content":{"body":"i wonder if it'd be web compatible to eagerly cache the traps at proxy creation time","m.mentions":{},"msgtype":"m.text"},"ts":1733250468515,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qfmhiu-hRq3b6Lg1Y9gVOZq97a4irrrGp5lThivk2w4"},
{"content":{"body":"Proxies are an integral part of being able to construct transparent membranes.","format":"org.matrix.custom.html","formatted_body":"Proxies are an integral part of being able to construct transparent membranes.","m.mentions":{"user_ids":["@bakkot:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jPiRRuu5SOTGdcH_PzQBo_DtObZvgY0tZdLg3udLNjw"}},"msgtype":"m.text"},"ts":1733250525915,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ku8kqsmeFodViO97MBVlbJ5Y-ra1jQ5dvxovDuv0Y8k"},
{"content":{"body":"sure but that's a thing that likely only double digits of humans on the planet ever need to think about","m.mentions":{},"msgtype":"m.text"},"ts":1733250553143,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rSt59l9WGEQxGSXhScNKtJidsNBfdPKgjaiJ-enF7yU"},
{"content":{"body":"Yeah. But engines wouldn't know that the trap isn't going to be added back. Even if it has prevent extensions the handler itself could be a proxy with a get trap 🙁","format":"org.matrix.custom.html","formatted_body":"Yeah. But engines wouldn't know that the trap isn't going to be added back. Even if it has prevent extensions the handler itself could be a proxy with a get trap 🙁","m.relates_to":{"event_id":"$13HzroWNLo7XNHSP2NY9C0o2jS4X9K4nzaCVIGxr_WQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$13HzroWNLo7XNHSP2NY9C0o2jS4X9K4nzaCVIGxr_WQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733250557075,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Y8XrmMDNbEjclCkkU7TjcazBZt0l-VRhZieha1NcC-w"},
{"content":{"body":" * sure but that's a thing that likely only double digits of humans on the planet ever need to think about (not that we'd remove proxies, just tell the majority not to use them)","m.mentions":{},"m.new_content":{"body":"sure but that's a thing that likely only double digits of humans on the planet ever need to think about (not that we'd remove proxies, just tell the majority not to use them)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rSt59l9WGEQxGSXhScNKtJidsNBfdPKgjaiJ-enF7yU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733250583813,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6vrPME9OiPSZc8AKOUZL7n0px4cyxnZgtw5d0LqJL_w"},
{"content":{"body":"> <@mhofman:matrix.org> Proxies are an integral part of being able to construct transparent membranes.\n\nI am aware of that and nevertheless strongly stand by my position.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ku8kqsmeFodViO97MBVlbJ5Y-ra1jQ5dvxovDuv0Y8k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Proxies are an integral part of being able to construct transparent membranes.</blockquote></mx-reply>I am aware of that and nevertheless strongly stand by my position.","m.mentions":{"user_ids":["@mhofman:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ku8kqsmeFodViO97MBVlbJ5Y-ra1jQ5dvxovDuv0Y8k"}},"msgtype":"m.text"},"ts":1733250586436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qdm5avIxA64D1b0Uv4BmkAFwu9jhIOi_cSrfFdss-T0"},
{"content":{"body":"Guilty of making the handler a proxy. However the engine does know if the handler is a proxy and could opt out of optimizations in that case","m.mentions":{},"m.relates_to":{"event_id":"$13HzroWNLo7XNHSP2NY9C0o2jS4X9K4nzaCVIGxr_WQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$Y8XrmMDNbEjclCkkU7TjcazBZt0l-VRhZieha1NcC-w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733250604564,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$tvvngaS2gAXDXWpTMyPSjoYFINX9Dbxzyk3hadiMDME"},
{"content":{"body":"> <@ljharb:matrix.org> sure but that's a thing that likely only double digits of humans on the planet ever need to think about\n\nI use proxy to trap `[[Get]]` to provide object that every property is defined and functional based on their name","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rSt59l9WGEQxGSXhScNKtJidsNBfdPKgjaiJ-enF7yU\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure but that&#39;s a thing that likely only double digits of humans on the planet ever need to think about</blockquote></mx-reply>I use proxy to trap <code>[[Get]]</code> to provide object that every property is defined and functional based on their name","m.relates_to":{"m.in_reply_to":{"event_id":"$rSt59l9WGEQxGSXhScNKtJidsNBfdPKgjaiJ-enF7yU"}},"msgtype":"m.text"},"ts":1733250639092,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ksYK45RztpfUuXkAnbVqm31n7sxAa6NZwrtxDD09trM"},
{"content":{"body":"yeah. Maybe the spec already allows engines to optimize for the case I'm interested in. But that doesn't mean it's worth implementing, and even having a dedicated API for it doesn't mean that it has to be implemented in a way that adds a performance win ","format":"org.matrix.custom.html","formatted_body":"yeah. Maybe the spec already allows engines to optimize for the case I'm interested in. But that doesn't mean it's worth implementing, and even having a dedicated API for it doesn't mean that it has to be implemented in a way that adds a performance win ","m.relates_to":{"event_id":"$13HzroWNLo7XNHSP2NY9C0o2jS4X9K4nzaCVIGxr_WQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$tvvngaS2gAXDXWpTMyPSjoYFINX9Dbxzyk3hadiMDME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733250686771,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$dfQJTqmoOQUp20EyWEG88obG6UmewGXQPPFWHeSoAZI"},
{"content":{"body":"i'd be curious to see it, but i still don't think there's even 100 people on the planet that need to be using proxy directly","m.mentions":{},"msgtype":"m.text"},"ts":1733250697388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TAdlU6FjI7A9CFX6NsRu1-NhOGsDD3O7Ig_cllTXZ9I"},
{"content":{"body":"> <@jackworks:matrix.org> I use proxy to trap `[[Get]]` to provide object that every property is defined and functional based on their name\n\nin a library called async-call-rpc to provide good DX","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ksYK45RztpfUuXkAnbVqm31n7sxAa6NZwrtxDD09trM\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I use proxy to trap <code>[[Get]]</code> to provide object that every property is defined and functional based on their name</blockquote></mx-reply>in a library called async-call-rpc to provide good DX","m.relates_to":{"m.in_reply_to":{"event_id":"$ksYK45RztpfUuXkAnbVqm31n7sxAa6NZwrtxDD09trM"}},"msgtype":"m.text"},"ts":1733250698516,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Rx4KkzanISUkk_soufwnN020viQu3HCTcmaL3W7oCIo"},
{"content":{"body":"ah, i have… feelings … about RPC and SOAP and whatnot so i probably wouldn't be able to be objective :-)","m.mentions":{},"msgtype":"m.text"},"ts":1733250733240,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$u3MHPTdE5vai28T1rVVlOPKXx9Gwj5HeY9ZTgF4JihE"},
{"content":{"body":"you can definitely do a lot of cool stuff with proxies, don't get me wrong","m.mentions":{},"msgtype":"m.text"},"ts":1733250767499,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OpHuLD04yGe54VXvi74_GypNBMZG6qACLFBOMowhzVc"},
{"content":{"body":"Immer is quite popular? Thought maybe that doesn't fall under \"using proxies directly\"","format":"org.matrix.custom.html","formatted_body":"Immer is quite popular? Thought maybe that doesn't fall under \"using proxies directly\"","m.relates_to":{"event_id":"$TAdlU6FjI7A9CFX6NsRu1-NhOGsDD3O7Ig_cllTXZ9I","is_falling_back":true,"m.in_reply_to":{"event_id":"$TAdlU6FjI7A9CFX6NsRu1-NhOGsDD3O7Ig_cllTXZ9I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1733250768130,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4my-hzI_imscnHo-0llbiANWHmKBj6Iy2KKemqglAhU"},
{"content":{"body":"also immer.js uses proxy too 😇","msgtype":"m.text"},"ts":1733250772796,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kbMS1TI6viKBHEFqg-jmMikutWS0JDAYg7LP6XckNkE"},
{"content":{"body":"Yeah I have a half dozen use cases of Proxy that are not part of a membrane. I still find Proxy very useful, but we just need a way to be able to better reason about their hooks.","m.mentions":{},"msgtype":"m.text"},"ts":1733250918380,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VoBdgddvVCn4KettQoafqSHIFHf5oUrCEyEvvisUKOg"},
{"content":{"body":"right but that's just 1 maintainer, the users don't count because they don't know about proxy :-)","format":"org.matrix.custom.html","formatted_body":"right but that's just 1 maintainer, the users don't count because they don't know about proxy :-)","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kbMS1TI6viKBHEFqg-jmMikutWS0JDAYg7LP6XckNkE"}},"msgtype":"m.text"},"ts":1733251684966,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QdGOvyzTGi8wzaYSLFeYbhuwDA7CJhgB8LspXNydQP0"},
{"content":{"body":"nicolo-ribaudo I found this presentation very helpful!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> I found this presentation very helpful!","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1733251765500,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yn_DCQWjr_hfr0QR-bjIzqqOpyZ_Brrwt7mPE3w1CLE"},
{"content":{"body":"I have not been following all the various things and it was good to catch up","m.mentions":{},"msgtype":"m.text"},"ts":1733251774413,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eijD9ioKWP5IlskDeDuGFXm7GSFr457QCq-1ZjTKEsw"},
{"content":{"body":"Ok thank you! :)","msgtype":"m.text"},"ts":1733251816144,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nZsx7cmF6vgEzVBQX2o47LO31rFoRO_MClT6oc0y4BI"},
{"content":{"body":"We resume plenary in 1 minute!!!","m.mentions":{},"msgtype":"m.text"},"ts":1733255902876,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0VfsUUMhNRDAbPNbspeWieUVfOC_maw1I8EZVpzCaHU"}
]