[
{"content":{"body":"> <@bakkot:matrix.org> also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a `.then` property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code\n\nNot true, the user may have set the prototype to a proxy which would trap when not finding and own then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_-7s7fqrYPOGNqt-ROz250l_Xz6h3vJgOrApcP66nhw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a <code>.then</code> property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code</blockquote></mx-reply>Not true, the user may have set the prototype to a proxy which would trap when not finding and own then","m.relates_to":{"m.in_reply_to":{"event_id":"$_-7s7fqrYPOGNqt-ROz250l_Xz6h3vJgOrApcP66nhw"}},"msgtype":"m.text"},"ts":1754459601793,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qCInRfH8uabDcu8Vaug8ObOq7H2U5ixbVNRE6KTY7f0"},
{"content":{"body":"* Not true, the user may have set the prototype to a proxy which would trap when not finding an own then","m.new_content":{"body":"> <@bakkot:matrix.org> also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a `.then` property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code\n\nNot true, the user may have set the prototype to a proxy which would trap when not finding an own then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_-7s7fqrYPOGNqt-ROz250l_Xz6h3vJgOrApcP66nhw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a><br />also the \"just\" part of \"just created yourself\" can be dropped if you're willing to have it throw if the object has a <code>.then</code> property that the user put on it, which I think is a perfectly fine restriction; I updated my snippet to do that. as long as you know the object is one you created, even if you've since handed it out to a user (as in the Animation CVE in the repo) then you can rely on it not being a proxy and so the hasOwn check not triggering user code</blockquote></mx-reply>Not true, the user may have set the prototype to a proxy which would trap when not finding an own then","msgtype":"m.text"},"m.relates_to":{"event_id":"$qCInRfH8uabDcu8Vaug8ObOq7H2U5ixbVNRE6KTY7f0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754459686133,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MGSgzTU8A7uc3s4dPcMuDutQr-nCLpDNDfG0uyH1fjM"},
{"content":{"body":"At which step of that code would it trap?","msgtype":"m.text"},"ts":1754459714334,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bpmK6b2zVwKJCQ62pL1x0m6vgsx0q-Fdm8fBKYPL4-s"},
{"content":{"body":"In the animation case, the spec does/did `promiseCapability.resolve(this)`, with `this` being the animation instance that had previously been exposed to userland. Resolve does synchronously look up a `then` property, and knowing that the animation object isn't a proxy (having been brand checked) doesn't mean it can't trap a `x.Get('then')`","msgtype":"m.text"},"ts":1754459931959,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GJh25v8TIuAlcuHbqczZGcyoQCx7VrJClFWC1oXVQXc"},
{"content":{"body":"I don't see why `hasOwn` is relevant in this case","msgtype":"m.text"},"ts":1754459993236,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B3l8Au1LEk3CVxj4hWfb1h3A-lW62gqYEB2JnvIJVjo"},
{"content":{"body":"The idea is that instead of .resolve you would use bakkot's implementation above ","format":"org.matrix.custom.html","formatted_body":"The idea is that instead of .resolve you would use <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a>'s implementation above ","msgtype":"m.text"},"ts":1754460010630,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CmKqP08xfZfJmvadXqo_aHtn2Lp5gWSxZHtNL202mTw"},
{"content":{"body":"> <@bakkot:matrix.org> ```\n> function safePromiseCapability() {\n>   let { promise, resolve, reject } = Promise.withResolvers();\n>   function safeResolve(val) {\n>     if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n>     Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n>     resolve(val);\n>     delete val.then;\n>   }\n>   return { promise, safeResolve, reject };\n> }\n> \n> let evilProto = { get then() { throw 'boom'; } };\n> \n> let { promise, safeResolve } = safePromiseCapability();\n> safeResolve({ __proto__: evilProto, key: 'value' });\n> console.log((await promise).key); // no boom\n> ```\n> \n> turns out we already have the \"safe promise resolve\" capability with no changes to the language\n\nThis one","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br /><pre><code>function safePromiseCapability() {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  function safeResolve(val) {\n    if (Object.hasOwn(val, 'then')) throw new TypeError('you are not supposed to use this with thenables');\n    Object.defineProperty(val, 'then', { configurable: true, value: void 0 });\n    resolve(val);\n    delete val.then;\n  }\n  return { promise, safeResolve, reject };\n}\n\nlet evilProto = { get then() { throw 'boom'; } };\n\nlet { promise, safeResolve } = safePromiseCapability();\nsafeResolve({ __proto__: evilProto, key: 'value' });\nconsole.log((await promise).key); // no boom\n</code></pre>\n<p>turns out we already have the \"safe promise resolve\" capability with no changes to the language</p>\n</blockquote></mx-reply>This one","m.relates_to":{"m.in_reply_to":{"event_id":"$LFgLl2Aq_q2JGOhQ_LbdeWEV5bvufl018fs_UyXo-hY"}},"msgtype":"m.text"},"ts":1754460039548,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$azg97YT0E4gLkCPVBexa5GV5_frnuGitj63FfCLeCJ8"},
{"content":{"body":"But you can't rely on that object being extensible anymore","msgtype":"m.text"},"ts":1754460049560,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dYdeditXHdpgEm0SC7pGH1zHelqEII3O_mKpVEic08s"},
{"content":{"body":"Mh ok","msgtype":"m.text"},"ts":1754460120955,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RZN1g3i9zDDr6s4mT3iljf0gOtn7_1puC4eAOghrxlM"},
{"content":{"body":"Unless throwing on a frozen animation instance is acceptable ?","msgtype":"m.text"},"ts":1754460216454,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cRotBYPdEVQiLmKKwa-sV_GAfIYwlbIoWJsxWK5LFwo"},
{"content":{"body":"yeah seems fine","m.mentions":{},"msgtype":"m.text"},"ts":1754485231957,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0Dz2HefoEg9FjU9Z5gwP5wM6TYVmkE08ZBQ5xbBQuPY"},
{"content":{"body":"options:\n- throw on a non-extensible animation instance. this has probably literally never come up so I doubt anyone will even notice\n- only use this functionality for newborn objects. doesn't solve the Animation CVE but does still address most of them\n- decide that since the above snippet gets us 99% of the way to a \"resolveNonThennable\", and the \"must be extensible\" restriction makes no sense from a user's perspective given that the object is not observably-to-them gaining a new property, we might as well just provide an actual \"resolveNonThennable\" function which works in the non-extensible case as well","format":"org.matrix.custom.html","formatted_body":"<p>options:</p>\n<ul>\n<li>throw on a non-extensible animation instance. this has probably literally never come up so I doubt anyone will even notice</li>\n<li>only use this functionality for newborn objects. doesn't solve the Animation CVE but does still address most of them</li>\n<li>decide that since the above snippet gets us 99% of the way to a \"resolveNonThennable\", and the \"must be extensible\" restriction makes no sense from a user's perspective given that the object is not observably-to-them gaining a new property, we might as well just provide an actual \"resolveNonThennable\" function which works in the non-extensible case as well</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1754485359428,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xXOhGA3hMLOkGsnb5fCZxrntVrRIThYfFuLAgN7gdbc"},
{"content":{"body":"If we're gonna introduce a new resolve function, why can't we simply delay the resolution in those cases by a tick instead of doing things that are weird and / or not 100% compatible.","msgtype":"m.text"},"ts":1754496318958,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$on4cBzS4HEcBLoMSat2hJWzh-Qlzx9hFp2Xbm-IwWic"},
{"content":{"body":"I would prefer not to make users of the web pay a cost, even a small one, just for the sake of avoiding things which are in some sense \"weird\" but which no developer much less user would ever even notice.","msgtype":"m.text"},"ts":1754496763855,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GE688uRocJ0jhW-QHirUZqgY2QLWuoMT1gRTfcyD0hA"},
{"content":{"body":"But unless the developer does something weird there may not be a cost!","msgtype":"m.text"},"ts":1754499987203,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gkoYouqK8UZre2lE-5oE3qIkwb3WJ97Fkf6eIMNaVLI"},
{"content":{"body":"Again my suggestion for a safe resolve spec op is to delay by a tick when it would trigger user code","msgtype":"m.text"},"ts":1754500060496,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aZpliELAMj6_N35dPUEF8uw2IS55fpTOnCIxj-48rug"}
]