[
{"content":{"body":"> <@jridgewell:matrix.org> But `/(?i:(...))\\1/.exec('abcABC')` wouldn't.\n\nThanks for looking into this. I took another look over the spec, and BackreferenceMatcher (https://tc39.es/ecma262/#sec-backreference-matcher) does indeed compare each character using `Canonicalize`. Per the proposal for modifiers, the backreference would be checked using the canonicalization based on the *current* setting for ignoreCase, so this is correct.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F7TRVWIgK7DsltHdMTozXHhwuz_3_aGZypWUyvSPufw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>But <code>/(?i:(...))\\1/.exec('abcABC')</code> wouldn't.</blockquote></mx-reply>Thanks for looking into this. I took another look over the spec, and BackreferenceMatcher (https://tc39.es/ecma262/#sec-backreference-matcher) does indeed compare each character using <code>Canonicalize</code>. Per the proposal for modifiers, the backreference would be checked using the canonicalization based on the <em>current</em> setting for ignoreCase, so this is correct.","m.relates_to":{"m.in_reply_to":{"event_id":"$F7TRVWIgK7DsltHdMTozXHhwuz_3_aGZypWUyvSPufw"}},"msgtype":"m.text"},"ts":1639617689082,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$B849nL9tuFWgPGuv90jAhhw7ui0hjbf5zp-vuXFTB60"},
{"content":{"body":"In addition, `/(...)(?-i:\\1)/i.exec('abcABC')` would also fail to match.","format":"org.matrix.custom.html","formatted_body":"In addition, <code>/(...)(?-i:\\1)/i.exec('abcABC')</code> would also fail to match.","msgtype":"m.text"},"ts":1639617754714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s20X-niiubFzewlLIunzT_FRLD-V1XDurIeFR7Qmb64"},
{"content":{"body":"The proposal specifies this behavior here: https://tc39.es/proposal-regexp-modifiers/#sec-backreference-matcher (step 2.l)","msgtype":"m.text"},"ts":1639617804987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XNZzmi6jmY_rTMl0xubunsFRzq33sITAOrp-69_MaGg"},
{"content":{"body":" * Ie, the backreference controls the case sensitivity, not the match","m.new_content":{"body":"Ie, the backreference controls the case sensitivity, not the match","msgtype":"m.text"},"m.relates_to":{"event_id":"$vbDekeE7A7-L_DKBy0x88APaK9kGUXWCTJvF8MzN6hc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1639618059328,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7dBRQqiyYVC4exrAij7zSLTVgjZ_h7-uRtDyNDz8D3g"},
{"content":{"body":"bakkot: it'd be cool if the log search was in newest-first order; and also if there was a way to search across all of the rooms at once","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it'd be cool if the log search was in newest-first order; and also if there was a way to search across all of the rooms at once","msgtype":"m.text"},"ts":1639688173086,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LiLVoHvGUXYOA6PMN9hwFPVKdPD1IOAFhFSnXPdNGDs"}
]