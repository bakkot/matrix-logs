[
{"content":{"body":"> <@shuyuguo:matrix.org> but numeric literals having Object semantics feels it is unprecedented in all of PL. would be fascinating to see an exception\n\nDon’t C++ custom literals enable exactly this? For my JS custom literals proposal, I assumed it would be Ok to follow that and allow those to return objects or primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ZWN3PJ0_a3sXIfUHxIfuabDIDhXJ7I1zqndsNgrmKBQ\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>but numeric literals having Object semantics feels it is unprecedented in all of PL. would be fascinating to see an exception</blockquote></mx-reply>Don’t C++ custom literals enable exactly this? For my JS custom literals proposal, I assumed it would be Ok to follow that and allow those to return objects or primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZWN3PJ0_a3sXIfUHxIfuabDIDhXJ7I1zqndsNgrmKBQ"}},"msgtype":"m.text"},"ts":1689208741123,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YjWYyznnRoPZJPffA2xw3vL4Lpf8ZOhNklMznPSBMUQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> to be clear i don't mean that we wish to make standards positions _private_, i mean that i don't consider it my job to _publicize_\n\nIt doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240mLtVGNW3n_XlK7bjr3p7K2CHOyPJc8chUiO3NSyEZs\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>to be clear i don't mean that we wish to make standards positions <em>private</em>, i mean that i don't consider it my job to <em>publicize</em></blockquote></mx-reply>It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.","m.relates_to":{"m.in_reply_to":{"event_id":"$0mLtVGNW3n_XlK7bjr3p7K2CHOyPJc8chUiO3NSyEZs"}},"msgtype":"m.text"},"ts":1689209133719,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA"},
{"content":{"body":"> <@michaelficarra:matrix.org> it's so strange to me that IETF would explicitly *not* want to support sub-minute offsets\n\n(catching up) Here's more context around IETF's reasoning, and more generally why restricting offset time zones to minutes seems OK to me:\n\nExisting RFC3339 timestamp strings (which the new IETF spec, aka \"IXDTF\", extends) only support HH:MM in the offset, e.g. `2023-07-12T14:06-07:00`. You can't use `07:00:01` or even `07:00:00` because parsers wouldn't recognize it. JS Date has the same same limit, BTW. \n\nIn the new IETF spec, they didn't want to change anything about the RFC3339 portion of the IXDTF timestamp, only the stuff in brackets after the timestamp is what's new.  Otherwise, existing RFC3339 parsers would break for the before-brackets portion. Of course, that's not necessarily related to what's in brackets. We could have different precision for the in-brackets portion because there's no legacy.\n\nBut with IXDTF, the rule is that the RFC3339 offset must match the offset of the time zone in brackets.  So `2020-01-01T00:00-05:00[America /Los_Angeles]` is considered an error because the offset doesn't match the time zone.\n\nFor named time zones that have sub-minute precision, the new IETF spec handles it by being flexible about what \"match\" means: if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced. \n\nSo `1970-01-01T00:00-00:45[Africa/Monrovia]` is considered valid, even though Liberia's offset in 1970 was -00:44:30. The rounding hack simply tells the receiver not to throw an error in that case; it doesn't change the actual instant that the string represents. The instant described by \"midnight on Jan 1 1970 in Liberia\" is still 44:30 away from UNIX epoch: \n```js\nTemporal.ZonedDateTime.from('1970-01-01T00:00-00:45[Africa/Monrovia]').toInstant();\n// => 1970-01-01T00:44:30Z\n```\n\nTemporal does the same thing in reverse in `ZonedDateTime.p.toString()`: it formats the instant by rounding the offset to the nearest minute.\n\nAnyway, that's how it works for named time zones. But what about offset time zones? \n\nBecause the offset in the RFC3339 portion of the string is constrained to HH:MM, the IETF folks felt that it'd be better to also limit the bracketed time zone to HH:MM too. There's nothing preventing us from extending the format in the future if there's customer demand, using the same rounding hack used for named time zones, so that `1970-01-01T00:00-00:45[-00:44:30]` would also be allowed.\n\nBut it's not clear (to me at least) that this customer demand will ever materialize. Offset time zones were really only added to Temporal and IXDTF for backwards compatibility with Java. It's not clear how much usage of offset time zones there will be in Temporal. Partly this is because all IANA time zones today are on 15-minute boundaries. Sub-minute offsets haven't been official in any country since the 1970s, and even then it was rare. And offset time zones intentionally dispense with the main value of time zones in Temporal: the ability to automatically adjust timestamps for DST and other time zone weirdness.\n\nAlso, there's a storage advantage. If offset time zones are limited to minutes, then a Temporal.TimeZone can fit in a 16-bit union: 12 bits for offset time zones (±24h at minute-precision), 10 bits for the index into ~600 named time zones, and one bit to choose between them. Sub-minute offsets would require 50% more bytes to support a use case with questionable demand.\n\nFinally, any user who really needs an offset time zone with sub-minute precision can create a custom time zone with granularity down to nanoseconds. Which they'd have to do anyways for time zones like TAI which don't have constant offsets (thanks leap seconds!) so you can't use an offset time zone anyways. AFAICT, there has never been a real-world time zone that has had a non-minute-aligned offset whose offset has never changed.  So I'm kinda skeptical that \"offset time zones at sub-minute precision\" are real things.\n\nP.S. - one concern raised was how RFC 5545 (aka iCalendar) supports [second-precision offsets](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.14). But AFAICT, those offsets are never actually used for time zone identifiers. Rather, they're used to define the offsets of named time zones. And Temporal is already permissive with timestamp offset inputs, so we'll accept strings like `1970-01-01T00:00-00:44:30` which AFAICT is what RFC5545 needs. \n\nSummary: restricting to minutes for built-in offset time zones seems like a safe initial bet that we can always extend later if needed. \n\nThanks for coming to my obscure TED talk. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R_dFameuSDHkou1R7GztbuAQURT4A8x4G2FhtgUxf3I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>it's so strange to me that IETF would explicitly <em>not</em> want to support sub-minute offsets</blockquote></mx-reply><p>(catching up) Here's more context around IETF's reasoning, and more generally why restricting offset time zones to minutes seems OK to me:</p>\n<p>Existing RFC3339 timestamp strings (which the new IETF spec, aka \"IXDTF\", extends) only support HH:MM in the offset, e.g. <code>2023-07-12T14:06-07:00</code>. You can't use <code>07:00:01</code> or even <code>07:00:00</code> because parsers wouldn't recognize it. JS Date has the same same limit, BTW.</p>\n<p>In the new IETF spec, they didn't want to change anything about the RFC3339 portion of the IXDTF timestamp, only the stuff in brackets after the timestamp is what's new.  Otherwise, existing RFC3339 parsers would break for the before-brackets portion. Of course, that's not necessarily related to what's in brackets. We could have different precision for the in-brackets portion because there's no legacy.</p>\n<p>But with IXDTF, the rule is that the RFC3339 offset must match the offset of the time zone in brackets.  So <code>2020-01-01T00:00-05:00[America /Los_Angeles]</code> is considered an error because the offset doesn't match the time zone.</p>\n<p>For named time zones that have sub-minute precision, the new IETF spec handles it by being flexible about what \"match\" means: if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced.</p>\n<p>So <code>1970-01-01T00:00-00:45[Africa/Monrovia]</code> is considered valid, even though Liberia's offset in 1970 was -00:44:30. The rounding hack simply tells the receiver not to throw an error in that case; it doesn't change the actual instant that the string represents. The instant described by \"midnight on Jan 1 1970 in Liberia\" is still 44:30 away from UNIX epoch:</p>\n<pre><code class=\"language-js\">Temporal.ZonedDateTime.from('1970-01-01T00:00-00:45[Africa/Monrovia]').toInstant();\n// =&gt; 1970-01-01T00:44:30Z\n</code></pre>\n<p>Temporal does the same thing in reverse in <code>ZonedDateTime.p.toString()</code>: it formats the instant by rounding the offset to the nearest minute.</p>\n<p>Anyway, that's how it works for named time zones. But what about offset time zones?</p>\n<p>Because the offset in the RFC3339 portion of the string is constrained to HH:MM, the IETF folks felt that it'd be better to also limit the bracketed time zone to HH:MM too. There's nothing preventing us from extending the format in the future if there's customer demand, using the same rounding hack used for named time zones, so that <code>1970-01-01T00:00-00:45[-00:44:30]</code> would also be allowed.</p>\n<p>But it's not clear (to me at least) that this customer demand will ever materialize. Offset time zones were really only added to Temporal and IXDTF for backwards compatibility with Java. It's not clear how much usage of offset time zones there will be in Temporal. Partly this is because all IANA time zones today are on 15-minute boundaries. Sub-minute offsets haven't been official in any country since the 1970s, and even then it was rare. And offset time zones intentionally dispense with the main value of time zones in Temporal: the ability to automatically adjust timestamps for DST and other time zone weirdness.</p>\n<p>Also, there's a storage advantage. If offset time zones are limited to minutes, then a Temporal.TimeZone can fit in a 16-bit union: 12 bits for offset time zones (±24h at minute-precision), 10 bits for the index into ~600 named time zones, and one bit to choose between them. Sub-minute offsets would require 50% more bytes to support a use case with questionable demand.</p>\n<p>Finally, any user who really needs an offset time zone with sub-minute precision can create a custom time zone with granularity down to nanoseconds. Which they'd have to do anyways for time zones like TAI which don't have constant offsets (thanks leap seconds!) so you can't use an offset time zone anyways. AFAICT, there has never been a real-world time zone that has had a non-minute-aligned offset whose offset has never changed.  So I'm kinda skeptical that \"offset time zones at sub-minute precision\" are real things.</p>\n<p>P.S. - one concern raised was how RFC 5545 (aka iCalendar) supports <a href=\"https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.14\">second-precision offsets</a>. But AFAICT, those offsets are never actually used for time zone identifiers. Rather, they're used to define the offsets of named time zones. And Temporal is already permissive with timestamp offset inputs, so we'll accept strings like <code>1970-01-01T00:00-00:44:30</code> which AFAICT is what RFC5545 needs.</p>\n<p>Summary: restricting to minutes for built-in offset time zones seems like a safe initial bet that we can always extend later if needed.</p>\n<p>Thanks for coming to my obscure TED talk.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$R_dFameuSDHkou1R7GztbuAQURT4A8x4G2FhtgUxf3I"}},"msgtype":"m.text"},"ts":1689212519180,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$WsoqGnr1hC7eYN8el5vx5cgkBgzwjzY7B5bHEMVA2mE"},
{"content":{"body":"> <@sffc:mozilla.org> It still seems like we should stop returning Saigon and Kiev despite the lack of a Temporal.TimeZone.prototype.equals\n\nThere are two pieces required to fully solve this: \n1. Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!\n2. Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. `new Intl.DateTimeFormat().resolvedOptions().timeZone` and `Intl.supportedValuesOf('timeZone')`.\n\nThese two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.\n\nV8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, shu , and Frank wanted to do this badly enough, I suspect it could get done fast!\n\nThat said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.\n\nMy suggestion:\n* Let's get implementations building & shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.\n* IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?\n\nLet me know how I can help!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$foOPt0Vj5Zb8WWucAI2CmHm_reAgOPd-wNCz57feHBg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>It still seems like we should stop returning Saigon and Kiev despite the lack of a Temporal.TimeZone.prototype.equals</blockquote></mx-reply><p>There are two pieces required to fully solve this:</p>\n<ol>\n<li>Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!</li>\n<li>Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. <code>new Intl.DateTimeFormat().resolvedOptions().timeZone</code> and <code>Intl.supportedValuesOf('timeZone')</code>.</li>\n</ol>\n<p>These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.</p>\n<p>V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> , and Frank wanted to do this badly enough, I suspect it could get done fast!</p>\n<p>That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.</p>\n<p>My suggestion:</p>\n<ul>\n<li>Let's get implementations building &amp; shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.</li>\n<li>IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?</li>\n</ul>\n<p>Let me know how I can help!</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$foOPt0Vj5Zb8WWucAI2CmHm_reAgOPd-wNCz57feHBg"}},"msgtype":"m.text"},"ts":1689215351228,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q"},
{"content":{"body":"> if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced\n\njustingrant I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see _any_ mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of [Temporal InterpretISODateTimeOffset](https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset) step 8.c.i RoundNumberToIncrement(_candidateNanoseconds_, 60e9, \"halfExpand\")?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced</p>\n</blockquote>\n<p><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a> I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see <em>any</em> mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of <a href=\"https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset\">Temporal InterpretISODateTimeOffset</a> step 8.c.i RoundNumberToIncrement(<em>candidateNanoseconds</em>, 60e9, \"halfExpand\")?</p>\n","msgtype":"m.text"},"ts":1689215986529,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$uiKZ8xodJfxOGC6eeGqMzBMjwglTOxa6ZsqdeTGtVa8"},
{"content":{"body":"> <@littledan:matrix.org> It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.\n\nmy suggestion there is you should redirect the people who ask about this back to V8 instead, instead of relaying it on behalf of V8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.</blockquote></mx-reply>my suggestion there is you should redirect the people who ask about this back to V8 instead, instead of relaying it on behalf of V8","m.relates_to":{"m.in_reply_to":{"event_id":"$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA"}},"msgtype":"m.text"},"ts":1689216318120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_pEvE-Xwb46chbKop-sjUa8WHz5f98E38Snyvyyk5-o"},
{"content":{"body":"> <@justingrant:matrix.org> There are two pieces required to fully solve this: \n> 1. Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!\n> 2. Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. `new Intl.DateTimeFormat().resolvedOptions().timeZone` and `Intl.supportedValuesOf('timeZone')`.\n> \n> These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.\n> \n> V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, shu , and Frank wanted to do this badly enough, I suspect it could get done fast!\n> \n> That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.\n> \n> My suggestion:\n> * Let's get implementations building & shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.\n> * IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?\n> \n> Let me know how I can help!\n\nthanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.\n\nfor (2), good to know it's independent. i won't be the one to drive this work, so Frank, who's much closer to the i18n and ICU teams, would be the one for you to convince to do the heavy lifting. frankly i just don't have the domain expertise and don't have a nose for the impact here to make a decision","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@justingrant:matrix.org\">@justingrant:matrix.org</a><br><p>There are two pieces required to fully solve this:</p>\n<ol>\n<li>Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!</li>\n<li>Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. <code>new Intl.DateTimeFormat().resolvedOptions().timeZone</code> and <code>Intl.supportedValuesOf('timeZone')</code>.</li>\n</ol>\n<p>These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.</p>\n<p>V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> , and Frank wanted to do this badly enough, I suspect it could get done fast!</p>\n<p>That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.</p>\n<p>My suggestion:</p>\n<ul>\n<li>Let's get implementations building &amp; shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.</li>\n<li>IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?</li>\n</ul>\n<p>Let me know how I can help!</p>\n</blockquote></mx-reply><p>thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.</p>\n<p>for (2), good to know it's independent. i won't be the one to drive this work, so Frank, who's much closer to the i18n and ICU teams, would be the one for you to convince to do the heavy lifting. frankly i just don't have the domain expertise and don't have a nose for the impact here to make a decision</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q"}},"msgtype":"m.text"},"ts":1689218413111,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nzXOVo3rUM_v3yE7zcuPCidd4R62K6GZTusMN94HR9o"},
{"content":{"body":"do I read the schedule correctly that there's a 60 minute underflow before lunch?","msgtype":"m.text"},"ts":1689220781007,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_T2mBtVrFuPFtXk-_64kHsOwDwO_gbPTcAzK3QiZJGM"},
{"content":{"body":"is there any thought of moving stuff up or is all the other stuff fixed in time?","msgtype":"m.text"},"ts":1689220797531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GPkqSD84IskO5lV-3Dk7JCe_l5D-7BmbHPBNd9LdX2s"},
{"content":{"body":"We're open to ideas on filling the morning schedule. ","format":"org.matrix.custom.html","formatted_body":"We're open to ideas on filling the morning schedule.","msgtype":"m.text"},"ts":1689233304462,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$e5w6fcfVanQch2zXNJhegCshd0D8eXCsjIe0I-gXXfI"},
{"content":{"body":"I ask mainly because I would like to know if I will miss anything if I sleep during the time that is currently dead","msgtype":"m.text"},"ts":1689234754444,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0eE2Kq78egKhxpGavkAInfk6yCCLR806GmqrdvOkvY4"},
{"content":{"body":"that being 2am-4am pacific time","msgtype":"m.text"},"ts":1689234771232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-6usH9MtnoflHRALqkTV5IuCfrwY3VR1Tov7jqzbVvQ"},
{"content":{"body":"i.e. hours that I would very much like to sleep through if I am not going to be missing anything","msgtype":"m.text"},"ts":1689234788282,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YcELoBuVwsuaDDBOih_v6Dxy5UzlRy-FcZSvGV8WExM"},
{"content":{"body":"We will begin by asking for agenda items to fill the time.","msgtype":"m.text"},"ts":1689234833010,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KLvHJyb0UFWhP-Z8Abchj7skrkUyj6yB8WZQ_LaMax0"},
{"content":{"body":"my slides: https://docs.google.com/presentation/d/1MKceo1Pn1PvuMz1WkzGwIpbT5qRNZVZRxY3rgcPJOKI/edit#slide=id.p","msgtype":"m.text"},"ts":1689235394790,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$mdhvvfn-l1cb-5kwRBWLLWwGlpoRoyjfB2zUg0SOhas"},
{"content":{"body":"We are likely to do a review of Stage 2 proposals during the spare time in the morning, and a presentation of research by people here in UiB in the afternoon, but details tbd for each.","msgtype":"m.text"},"ts":1689235675660,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3Rzv1n402GXkm0qy2rC1UfVig3zJ-pleTH6BYC8KL_w"},
{"content":{"body":"We have brought forward Nicolo's Optional Chaining into this morning.  Plus the two additions Dan mentioned.","msgtype":"m.text"},"ts":1689235949399,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$IpfJlOXeVgszWNDEKQisGIBakzX6-wjn_6YgSEW9NTs"}
]