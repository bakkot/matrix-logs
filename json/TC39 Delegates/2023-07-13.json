[
{"content":{"body":"> <@shuyuguo:matrix.org> but numeric literals having Object semantics feels it is unprecedented in all of PL. would be fascinating to see an exception\n\nDon’t C++ custom literals enable exactly this? For my JS custom literals proposal, I assumed it would be Ok to follow that and allow those to return objects or primitives.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ZWN3PJ0_a3sXIfUHxIfuabDIDhXJ7I1zqndsNgrmKBQ\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>but numeric literals having Object semantics feels it is unprecedented in all of PL. would be fascinating to see an exception</blockquote></mx-reply>Don’t C++ custom literals enable exactly this? For my JS custom literals proposal, I assumed it would be Ok to follow that and allow those to return objects or primitives.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZWN3PJ0_a3sXIfUHxIfuabDIDhXJ7I1zqndsNgrmKBQ"}},"msgtype":"m.text"},"ts":1689208741123,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YjWYyznnRoPZJPffA2xw3vL4Lpf8ZOhNklMznPSBMUQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> to be clear i don't mean that we wish to make standards positions _private_, i mean that i don't consider it my job to _publicize_\n\nIt doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240mLtVGNW3n_XlK7bjr3p7K2CHOyPJc8chUiO3NSyEZs\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>to be clear i don't mean that we wish to make standards positions <em>private</em>, i mean that i don't consider it my job to <em>publicize</em></blockquote></mx-reply>It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.","m.relates_to":{"m.in_reply_to":{"event_id":"$0mLtVGNW3n_XlK7bjr3p7K2CHOyPJc8chUiO3NSyEZs"}},"msgtype":"m.text"},"ts":1689209133719,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA"},
{"content":{"body":"> <@michaelficarra:matrix.org> it's so strange to me that IETF would explicitly *not* want to support sub-minute offsets\n\n(catching up) Here's more context around IETF's reasoning, and more generally why restricting offset time zones to minutes seems OK to me:\n\nExisting RFC3339 timestamp strings (which the new IETF spec, aka \"IXDTF\", extends) only support HH:MM in the offset, e.g. `2023-07-12T14:06-07:00`. You can't use `07:00:01` or even `07:00:00` because parsers wouldn't recognize it. JS Date has the same same limit, BTW. \n\nIn the new IETF spec, they didn't want to change anything about the RFC3339 portion of the IXDTF timestamp, only the stuff in brackets after the timestamp is what's new.  Otherwise, existing RFC3339 parsers would break for the before-brackets portion. Of course, that's not necessarily related to what's in brackets. We could have different precision for the in-brackets portion because there's no legacy.\n\nBut with IXDTF, the rule is that the RFC3339 offset must match the offset of the time zone in brackets.  So `2020-01-01T00:00-05:00[America /Los_Angeles]` is considered an error because the offset doesn't match the time zone.\n\nFor named time zones that have sub-minute precision, the new IETF spec handles it by being flexible about what \"match\" means: if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced. \n\nSo `1970-01-01T00:00-00:45[Africa/Monrovia]` is considered valid, even though Liberia's offset in 1970 was -00:44:30. The rounding hack simply tells the receiver not to throw an error in that case; it doesn't change the actual instant that the string represents. The instant described by \"midnight on Jan 1 1970 in Liberia\" is still 44:30 away from UNIX epoch: \n```js\nTemporal.ZonedDateTime.from('1970-01-01T00:00-00:45[Africa/Monrovia]').toInstant();\n// => 1970-01-01T00:44:30Z\n```\n\nTemporal does the same thing in reverse in `ZonedDateTime.p.toString()`: it formats the instant by rounding the offset to the nearest minute.\n\nAnyway, that's how it works for named time zones. But what about offset time zones? \n\nBecause the offset in the RFC3339 portion of the string is constrained to HH:MM, the IETF folks felt that it'd be better to also limit the bracketed time zone to HH:MM too. There's nothing preventing us from extending the format in the future if there's customer demand, using the same rounding hack used for named time zones, so that `1970-01-01T00:00-00:45[-00:44:30]` would also be allowed.\n\nBut it's not clear (to me at least) that this customer demand will ever materialize. Offset time zones were really only added to Temporal and IXDTF for backwards compatibility with Java. It's not clear how much usage of offset time zones there will be in Temporal. Partly this is because all IANA time zones today are on 15-minute boundaries. Sub-minute offsets haven't been official in any country since the 1970s, and even then it was rare. And offset time zones intentionally dispense with the main value of time zones in Temporal: the ability to automatically adjust timestamps for DST and other time zone weirdness.\n\nAlso, there's a storage advantage. If offset time zones are limited to minutes, then a Temporal.TimeZone can fit in a 16-bit union: 12 bits for offset time zones (±24h at minute-precision), 10 bits for the index into ~600 named time zones, and one bit to choose between them. Sub-minute offsets would require 50% more bytes to support a use case with questionable demand.\n\nFinally, any user who really needs an offset time zone with sub-minute precision can create a custom time zone with granularity down to nanoseconds. Which they'd have to do anyways for time zones like TAI which don't have constant offsets (thanks leap seconds!) so you can't use an offset time zone anyways. AFAICT, there has never been a real-world time zone that has had a non-minute-aligned offset whose offset has never changed.  So I'm kinda skeptical that \"offset time zones at sub-minute precision\" are real things.\n\nP.S. - one concern raised was how RFC 5545 (aka iCalendar) supports [second-precision offsets](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.14). But AFAICT, those offsets are never actually used for time zone identifiers. Rather, they're used to define the offsets of named time zones. And Temporal is already permissive with timestamp offset inputs, so we'll accept strings like `1970-01-01T00:00-00:44:30` which AFAICT is what RFC5545 needs. \n\nSummary: restricting to minutes for built-in offset time zones seems like a safe initial bet that we can always extend later if needed. \n\nThanks for coming to my obscure TED talk. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R_dFameuSDHkou1R7GztbuAQURT4A8x4G2FhtgUxf3I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>it's so strange to me that IETF would explicitly <em>not</em> want to support sub-minute offsets</blockquote></mx-reply><p>(catching up) Here's more context around IETF's reasoning, and more generally why restricting offset time zones to minutes seems OK to me:</p>\n<p>Existing RFC3339 timestamp strings (which the new IETF spec, aka \"IXDTF\", extends) only support HH:MM in the offset, e.g. <code>2023-07-12T14:06-07:00</code>. You can't use <code>07:00:01</code> or even <code>07:00:00</code> because parsers wouldn't recognize it. JS Date has the same same limit, BTW.</p>\n<p>In the new IETF spec, they didn't want to change anything about the RFC3339 portion of the IXDTF timestamp, only the stuff in brackets after the timestamp is what's new.  Otherwise, existing RFC3339 parsers would break for the before-brackets portion. Of course, that's not necessarily related to what's in brackets. We could have different precision for the in-brackets portion because there's no legacy.</p>\n<p>But with IXDTF, the rule is that the RFC3339 offset must match the offset of the time zone in brackets.  So <code>2020-01-01T00:00-05:00[America /Los_Angeles]</code> is considered an error because the offset doesn't match the time zone.</p>\n<p>For named time zones that have sub-minute precision, the new IETF spec handles it by being flexible about what \"match\" means: if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced.</p>\n<p>So <code>1970-01-01T00:00-00:45[Africa/Monrovia]</code> is considered valid, even though Liberia's offset in 1970 was -00:44:30. The rounding hack simply tells the receiver not to throw an error in that case; it doesn't change the actual instant that the string represents. The instant described by \"midnight on Jan 1 1970 in Liberia\" is still 44:30 away from UNIX epoch:</p>\n<pre><code class=\"language-js\">Temporal.ZonedDateTime.from('1970-01-01T00:00-00:45[Africa/Monrovia]').toInstant();\n// =&gt; 1970-01-01T00:44:30Z\n</code></pre>\n<p>Temporal does the same thing in reverse in <code>ZonedDateTime.p.toString()</code>: it formats the instant by rounding the offset to the nearest minute.</p>\n<p>Anyway, that's how it works for named time zones. But what about offset time zones?</p>\n<p>Because the offset in the RFC3339 portion of the string is constrained to HH:MM, the IETF folks felt that it'd be better to also limit the bracketed time zone to HH:MM too. There's nothing preventing us from extending the format in the future if there's customer demand, using the same rounding hack used for named time zones, so that <code>1970-01-01T00:00-00:45[-00:44:30]</code> would also be allowed.</p>\n<p>But it's not clear (to me at least) that this customer demand will ever materialize. Offset time zones were really only added to Temporal and IXDTF for backwards compatibility with Java. It's not clear how much usage of offset time zones there will be in Temporal. Partly this is because all IANA time zones today are on 15-minute boundaries. Sub-minute offsets haven't been official in any country since the 1970s, and even then it was rare. And offset time zones intentionally dispense with the main value of time zones in Temporal: the ability to automatically adjust timestamps for DST and other time zone weirdness.</p>\n<p>Also, there's a storage advantage. If offset time zones are limited to minutes, then a Temporal.TimeZone can fit in a 16-bit union: 12 bits for offset time zones (±24h at minute-precision), 10 bits for the index into ~600 named time zones, and one bit to choose between them. Sub-minute offsets would require 50% more bytes to support a use case with questionable demand.</p>\n<p>Finally, any user who really needs an offset time zone with sub-minute precision can create a custom time zone with granularity down to nanoseconds. Which they'd have to do anyways for time zones like TAI which don't have constant offsets (thanks leap seconds!) so you can't use an offset time zone anyways. AFAICT, there has never been a real-world time zone that has had a non-minute-aligned offset whose offset has never changed.  So I'm kinda skeptical that \"offset time zones at sub-minute precision\" are real things.</p>\n<p>P.S. - one concern raised was how RFC 5545 (aka iCalendar) supports <a href=\"https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.14\">second-precision offsets</a>. But AFAICT, those offsets are never actually used for time zone identifiers. Rather, they're used to define the offsets of named time zones. And Temporal is already permissive with timestamp offset inputs, so we'll accept strings like <code>1970-01-01T00:00-00:44:30</code> which AFAICT is what RFC5545 needs.</p>\n<p>Summary: restricting to minutes for built-in offset time zones seems like a safe initial bet that we can always extend later if needed.</p>\n<p>Thanks for coming to my obscure TED talk.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$R_dFameuSDHkou1R7GztbuAQURT4A8x4G2FhtgUxf3I"}},"msgtype":"m.text"},"ts":1689212519180,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$WsoqGnr1hC7eYN8el5vx5cgkBgzwjzY7B5bHEMVA2mE"},
{"content":{"body":"> <@sffc:mozilla.org> It still seems like we should stop returning Saigon and Kiev despite the lack of a Temporal.TimeZone.prototype.equals\n\nThere are two pieces required to fully solve this: \n1. Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!\n2. Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. `new Intl.DateTimeFormat().resolvedOptions().timeZone` and `Intl.supportedValuesOf('timeZone')`.\n\nThese two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.\n\nV8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, shu , and Frank wanted to do this badly enough, I suspect it could get done fast!\n\nThat said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.\n\nMy suggestion:\n* Let's get implementations building & shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.\n* IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?\n\nLet me know how I can help!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$foOPt0Vj5Zb8WWucAI2CmHm_reAgOPd-wNCz57feHBg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>It still seems like we should stop returning Saigon and Kiev despite the lack of a Temporal.TimeZone.prototype.equals</blockquote></mx-reply><p>There are two pieces required to fully solve this:</p>\n<ol>\n<li>Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!</li>\n<li>Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. <code>new Intl.DateTimeFormat().resolvedOptions().timeZone</code> and <code>Intl.supportedValuesOf('timeZone')</code>.</li>\n</ol>\n<p>These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.</p>\n<p>V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> , and Frank wanted to do this badly enough, I suspect it could get done fast!</p>\n<p>That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.</p>\n<p>My suggestion:</p>\n<ul>\n<li>Let's get implementations building &amp; shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.</li>\n<li>IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?</li>\n</ul>\n<p>Let me know how I can help!</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$foOPt0Vj5Zb8WWucAI2CmHm_reAgOPd-wNCz57feHBg"}},"msgtype":"m.text"},"ts":1689215351228,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q"},
{"content":{"body":"> if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced\n\njustingrant I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see _any_ mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of [Temporal InterpretISODateTimeOffset](https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset) step 8.c.i RoundNumberToIncrement(_candidateNanoseconds_, 60e9, \"halfExpand\")?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced</p>\n</blockquote>\n<p><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a> I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see <em>any</em> mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of <a href=\"https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset\">Temporal InterpretISODateTimeOffset</a> step 8.c.i RoundNumberToIncrement(<em>candidateNanoseconds</em>, 60e9, \"halfExpand\")?</p>\n","msgtype":"m.text"},"ts":1689215986529,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$uiKZ8xodJfxOGC6eeGqMzBMjwglTOxa6ZsqdeTGtVa8"},
{"content":{"body":"> <@littledan:matrix.org> It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.\n\nmy suggestion there is you should redirect the people who ask about this back to V8 instead, instead of relaying it on behalf of V8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It doesn’t quite have to be your job to publicize it as such, but if you could give us (proponents of features) direction on what to say to others when they ask us about this, so as to accurately represent your position, that would be helpful. The scope of what you would like JS proposals to avoid has been a little ambiguous even to many committee members leading up to this meeting.</blockquote></mx-reply>my suggestion there is you should redirect the people who ask about this back to V8 instead, instead of relaying it on behalf of V8","m.relates_to":{"m.in_reply_to":{"event_id":"$BYu-1E8gfor6myJBZS4gy6PJEdKK48w9B8YkxmTJXuA"}},"msgtype":"m.text"},"ts":1689216318120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_pEvE-Xwb46chbKop-sjUa8WHz5f98E38Snyvyyk5-o"},
{"content":{"body":"> <@justingrant:matrix.org> There are two pieces required to fully solve this: \n> 1. Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!\n> 2. Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. `new Intl.DateTimeFormat().resolvedOptions().timeZone` and `Intl.supportedValuesOf('timeZone')`.\n> \n> These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.\n> \n> V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, shu , and Frank wanted to do this badly enough, I suspect it could get done fast!\n> \n> That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.\n> \n> My suggestion:\n> * Let's get implementations building & shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.\n> * IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?\n> \n> Let me know how I can help!\n\nthanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.\n\nfor (2), good to know it's independent. i won't be the one to drive this work, so Frank, who's much closer to the i18n and ICU teams, would be the one for you to convince to do the heavy lifting. frankly i just don't have the domain expertise and don't have a nose for the impact here to make a decision","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@justingrant:matrix.org\">@justingrant:matrix.org</a><br><p>There are two pieces required to fully solve this:</p>\n<ol>\n<li>Stop canonicalizing user-inputted IDs to canonical IDs that are sometimes outdated and/or varying across browsers.  By bringing proposal-canonical-tz to Stage 3 and merging it into Temporal, this problem gets solved as soon as Temporal.TimeZone ships in implementations. Yay!</li>\n<li>Stop using outdated canonical IDs. Today this affects all IDs, but after (1) is done this will only affect IDs generated by ECMAScript itself, e.g. <code>new Intl.DateTimeFormat().resolvedOptions().timeZone</code> and <code>Intl.supportedValuesOf('timeZone')</code>.</li>\n</ol>\n<p>These two pieces are independent!  Even though yesterday the committee agreed to hold (1) until Temporal.TimeZone ships, for (2) implementations are already free to return Europe/Kyiv, Asia/Kolkata, and Asia/Ho_Chi_Minh as canonical IDs. Firefox does this today, and Anba has argued (convincingly, IMO) that the FF behavior is more spec-compliant with current 402.</p>\n<p>V8 and JSC don't do this today because they rely on CLDR and ICU which never update renamed IDs.  But nothing stops ICU-using implementations from doing what Firefox does and overriding the ~20 zones in CLDR that use out-of-date names. If an ICU solution will take 2 years, could V8 and JSC in the meantime just add a hard-coded mapping table of 20 IDs?  It's not like renames happen often: less than once per year is the average. If you, <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> , and Frank wanted to do this badly enough, I suspect it could get done fast!</p>\n<p>That said, it's a reasonable argument that doing (1) before (2), or at the same time, would reduce the negative impact to existing code because user-inputted zones wouldn't be affected.</p>\n<p>My suggestion:</p>\n<ul>\n<li>Let's get implementations building &amp; shipping Temporal!  After this plenary's normative changes are merged within a week or two, AFAIK there are no other large changes on the horizon.</li>\n<li>IMO, V8 and JSC should really consider the 20-item hard-coded mapping table to work around CLDR's slow schedule. Could this work be paired with Temporal implementation instead of waiting until later? Could this work start now, and ship in a limited test to gauge the web-compat impact?</li>\n</ul>\n<p>Let me know how I can help!</p>\n</blockquote></mx-reply><p>thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.</p>\n<p>for (2), good to know it's independent. i won't be the one to drive this work, so Frank, who's much closer to the i18n and ICU teams, would be the one for you to convince to do the heavy lifting. frankly i just don't have the domain expertise and don't have a nose for the impact here to make a decision</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$2gaJYIDoh_cZM2BncMPL21AzpfqIkuzyBn4UpuVLh4Q"}},"msgtype":"m.text"},"ts":1689218413111,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nzXOVo3rUM_v3yE7zcuPCidd4R62K6GZTusMN94HR9o"},
{"content":{"body":"do I read the schedule correctly that there's a 60 minute underflow before lunch?","msgtype":"m.text"},"ts":1689220781007,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_T2mBtVrFuPFtXk-_64kHsOwDwO_gbPTcAzK3QiZJGM"},
{"content":{"body":"is there any thought of moving stuff up or is all the other stuff fixed in time?","msgtype":"m.text"},"ts":1689220797531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GPkqSD84IskO5lV-3Dk7JCe_l5D-7BmbHPBNd9LdX2s"},
{"content":{"body":"We're open to ideas on filling the morning schedule. ","format":"org.matrix.custom.html","formatted_body":"We're open to ideas on filling the morning schedule.","msgtype":"m.text"},"ts":1689233304462,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$e5w6fcfVanQch2zXNJhegCshd0D8eXCsjIe0I-gXXfI"},
{"content":{"body":"I ask mainly because I would like to know if I will miss anything if I sleep during the time that is currently dead","msgtype":"m.text"},"ts":1689234754444,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0eE2Kq78egKhxpGavkAInfk6yCCLR806GmqrdvOkvY4"},
{"content":{"body":"that being 2am-4am pacific time","msgtype":"m.text"},"ts":1689234771232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-6usH9MtnoflHRALqkTV5IuCfrwY3VR1Tov7jqzbVvQ"},
{"content":{"body":"i.e. hours that I would very much like to sleep through if I am not going to be missing anything","msgtype":"m.text"},"ts":1689234788282,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YcELoBuVwsuaDDBOih_v6Dxy5UzlRy-FcZSvGV8WExM"},
{"content":{"body":"We will begin by asking for agenda items to fill the time.","msgtype":"m.text"},"ts":1689234833010,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KLvHJyb0UFWhP-Z8Abchj7skrkUyj6yB8WZQ_LaMax0"},
{"content":{"body":"my slides: https://docs.google.com/presentation/d/1MKceo1Pn1PvuMz1WkzGwIpbT5qRNZVZRxY3rgcPJOKI/edit#slide=id.p","msgtype":"m.text"},"ts":1689235394790,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$mdhvvfn-l1cb-5kwRBWLLWwGlpoRoyjfB2zUg0SOhas"},
{"content":{"body":"We are likely to do a review of Stage 2 proposals during the spare time in the morning, and a presentation of research by people here in UiB in the afternoon, but details tbd for each.","msgtype":"m.text"},"ts":1689235675660,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3Rzv1n402GXkm0qy2rC1UfVig3zJ-pleTH6BYC8KL_w"},
{"content":{"body":"We have brought forward Nicolo's Optional Chaining into this morning.  Plus the two additions Dan mentioned.","msgtype":"m.text"},"ts":1689235949399,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$IpfJlOXeVgszWNDEKQisGIBakzX6-wjn_6YgSEW9NTs"},
{"content":{"body":"I have seen this exact complaint about not being able to shrink wasm memory before in one of the wasm issue trackers","msgtype":"m.text"},"ts":1689236223919,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KI61AWsfw5h2qlCktb_hMTgV-kRopqHFtkoS52YQlRA"},
{"content":{"body":"they're aware of a need here","msgtype":"m.text"},"ts":1689236254060,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Gtb8XWtYHPfs6Yoy3QXsJIar3sN5nDLuK4Eo-YS1kHk"},
{"content":{"body":"Isn't this just an issue at the tooling level, when it comes to single-threaded Wasm?","msgtype":"m.text"},"ts":1689236280746,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r944FR8AuiPnC9Z5gm1ZnI6TMFztQePKzUew6e8Kau0"},
{"content":{"body":"https://github.com/WebAssembly/design/issues/1397","msgtype":"m.text"},"ts":1689236283736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BtHIeqR9HulcZn6mhoiALqH3RGa9BLqxk7BBAMIe430"},
{"content":{"body":" * <del>Isn't this just an issue at the tooling level, when it comes to single-threaded Wasm?</del>","format":"org.matrix.custom.html","formatted_body":" * <del>Isn't this just an issue at the tooling level, when it comes to single-threaded Wasm?</del>","m.new_content":{"body":"<del>Isn't this just an issue at the tooling level, when it comes to single-threaded Wasm?</del>","format":"org.matrix.custom.html","formatted_body":"<del>Isn't this just an issue at the tooling level, when it comes to single-threaded Wasm?</del>","msgtype":"m.text"},"m.relates_to":{"event_id":"$r944FR8AuiPnC9Z5gm1ZnI6TMFztQePKzUew6e8Kau0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689236410184,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3aZt-DvmAa6rDqd7DW_Q0GyzcCQnuqKtCCsRl4jJHbI"},
{"content":{"body":"> @shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.\n\nDone! https://github.com/tc39/ecma402/issues/806. Feedback welcome! ","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>@shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.</p>\n</blockquote>\n<p>Done! https://github.com/tc39/ecma402/issues/806. Feedback welcome!</p>\n","msgtype":"m.text"},"ts":1689236853165,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$X9WbLKqFwERPjfU87_KyUF1Z1UXAIYw3F1owVKc97uQ"},
{"content":{"body":" * > @shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.\n\nhttps://github.com/tc39/ecma402/issues/806. Feedback welcome!","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>@shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.</p>\n</blockquote>\n<p>https://github.com/tc39/ecma402/issues/806. Feedback welcome!</p>\n","m.new_content":{"body":"> @shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.\n\nhttps://github.com/tc39/ecma402/issues/806. Feedback welcome!","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>@shu: thanks for the detailed plan, i'd hate for it to get lost in the matrix chat, an issue to capture it would be great.</p>\n</blockquote>\n<p>https://github.com/tc39/ecma402/issues/806. Feedback welcome!</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$X9WbLKqFwERPjfU87_KyUF1Z1UXAIYw3F1owVKc97uQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689236938244,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$IVqGWZK-5UQSYDPHGwaFIX7BNHQMZ2kk-6wTJWaVxe4"},
{"content":{"body":"> <@gibson042:matrix.org> > if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced\n> \n> justingrant I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see _any_ mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of [Temporal InterpretISODateTimeOffset](https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset) step 8.c.i RoundNumberToIncrement(_candidateNanoseconds_, 60e9, \"halfExpand\")?\n\nGood catch. You're right, the rounding is a Temporal solution, not something in the IETF spec. Let's discuss among the Temporal champions whether it's wroth trying to get this into the IETF spec, or whether it's too niche for us to care about pushing it into that spec.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uiKZ8xodJfxOGC6eeGqMzBMjwglTOxa6ZsqdeTGtVa8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><blockquote>\n<p>if the bracketed time zone's offset, when rounded to HH:MM, matches the offset in the RFC3339 portion of the string, then there's no error produced</p>\n</blockquote>\n<p><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a> I was wondering about how this rounding handled midpoint values like -00:44:30 or +00:44:30 (specifically \"ties away from zero\" vs. \"ties toward positive infinity\" vs. \"ties toward even\"), but I don't see <em>any</em> mention of it at https://www.ietf.org/archive/id/draft-ietf-sedate-datetime-extended-08.html or https://github.com/ietf-wg-sedate/draft-ietf-sedate-datetime-extended/blob/main/draft-ietf-sedate-datetime-extended.md . Are you sure you're not thinking of <a href=\"https://tc39.es/proposal-temporal/#sec-temporal-interpretisodatetimeoffset\">Temporal InterpretISODateTimeOffset</a> step 8.c.i RoundNumberToIncrement(<em>candidateNanoseconds</em>, 60e9, \"halfExpand\")?</p>\n</blockquote></mx-reply>Good catch. You're right, the rounding is a Temporal solution, not something in the IETF spec. Let's discuss among the Temporal champions whether it's wroth trying to get this into the IETF spec, or whether it's too niche for us to care about pushing it into that spec.","m.relates_to":{"m.in_reply_to":{"event_id":"$uiKZ8xodJfxOGC6eeGqMzBMjwglTOxa6ZsqdeTGtVa8"}},"msgtype":"m.text"},"ts":1689237213682,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$qpJQO2h52vYNANrEutsYFST6UDreUAns1NkUuEndE-Q"},
{"content":{"body":"Python's `contextlib` has a very tight coupling between decorators and context managers, such as `contextlib.ContextDecorator`: https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator","format":"org.matrix.custom.html","formatted_body":"Python's <code>contextlib</code> has a very tight coupling between decorators and context managers, such as <code>contextlib.ContextDecorator</code>: https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator","msgtype":"m.text"},"ts":1689237999063,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VTGBsaORUVD-5m-UqTHFC-iDYdFmhulE6_sYVJnpisA"},
{"content":{"body":"On the topic of source phase imports, please vote on the keyword (or suggest other keywords): https://github.com/tc39/proposal-source-phase-imports/issues/54","msgtype":"m.text"},"ts":1689238214890,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fnols4pJocZ7hOJfJfxERGwO2p0ocRmLf7rlHv7hCEU"},
{"content":{"body":"And you can discuss here: https://github.com/tc39/proposal-source-phase-imports/issues/53","msgtype":"m.text"},"ts":1689238382196,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$raZJv_4vOi4c0s_ykrSI5L3UwhvdJfrd4uK84DTHR1g"},
{"content":{"body":"the `new` example should be `new a?.()`","format":"org.matrix.custom.html","formatted_body":"the <code>new</code> example should be <code>new a?.()</code>","msgtype":"m.text"},"ts":1689239462661,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ca9NBtNsfTZ1_lEVj1T8JLGA93Mm5_Q6IzTn5j95lvU"},
{"content":{"body":"I thought the example `new a?.b()` should already be legal (but would not be so useful)","format":"org.matrix.custom.html","formatted_body":"I thought the example <code>new a?.b()</code> should already be legal (but would not be so useful)","msgtype":"m.text"},"ts":1689239505644,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MFHtCD2pnY9rHXQ8wA83SeWjdXvTq5ng19-wT4DIn6A"},
{"content":{"body":"Do we have any valid syntax yet that considers the LHS in any way before attempting evaluation of the RHS?","msgtype":"m.text"},"ts":1689239565429,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$-4O6wkig04jFZ6VDCVIPUQLZ1G-eyHrpx9sYq1BuvtA"},
{"content":{"body":"`(a.b) = c` being legal is an accident of history","format":"org.matrix.custom.html","formatted_body":"<code>(a.b) = c</code> being legal is an accident of history","msgtype":"m.text"},"ts":1689239695013,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PuIWxjGOtQcg-tc2Wugpr4kdoVYAD2S_w2LnKeh6FTc"},
{"content":{"body":"```js\na = { b: x };\na = ({ b: x });\n( { b: x } = a );\n( ({ b: x }) = a ); // does not work\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">a = { b: x };\na = ({ b: x });\n( { b: x } = a );\n( ({ b: x }) = a ); // does not work\n</code></pre>\n","msgtype":"m.text"},"ts":1689239705739,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3FlX5TZCFRvuhmOLTu1BSz7rO-Kpm4s5Lp7zGRvDop4"},
{"content":{"body":"we made `([x]) = b` illegal","format":"org.matrix.custom.html","formatted_body":"we made <code>([x]) = b</code> illegal","msgtype":"m.text"},"ts":1689239710106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ea-HlfqPQfLMe1RucK570_tJBJIYs7P3pB7ggeEk1no"},
{"content":{"body":"so we are not consistent in all assignment cases","msgtype":"m.text"},"ts":1689239714833,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T4ZAIJvvXD2XPjVq9zw_vL25MSEzTXXfcWodzSiQIuM"},
{"content":{"body":"You can also treat this as being precedence-related, right?","msgtype":"m.text"},"ts":1689239965616,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$rApz8Ps1NlAgCVj7gRs7NAraHhQ3GMtLRFt22sPP3mg"},
{"content":{"body":"whether `?.` is prioritized over `=`","format":"org.matrix.custom.html","formatted_body":"whether <code>?.</code> is prioritized over <code>=</code>","msgtype":"m.text"},"ts":1689239975710,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OVU-VrDrPTMWahibt9FfpNGc77oNFkPifXzcxmAPtMg"},
{"content":{"body":"not with the example on screen, no","msgtype":"m.text"},"ts":1689239975846,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E5uz9RaPbdLn3BJlk6a1gzv92NKVO-h1Y0ndJgoGpRU"},
{"content":{"body":"Andreu Botella: no?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: no?","msgtype":"m.text"},"ts":1689239977088,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$H1YINzcZ2j-Xhz3puMSDAHZN25SUbv0O_O4gxSU9KzU"},
{"content":{"body":"> <@bakkot:matrix.org> `(a.b) = c` being legal is an accident of history\n\nyeah, it's strange. Much strange that we support `(a.b)=c` but not `(test?a:b)=c` which was supported in some other languages.  ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PuIWxjGOtQcg-tc2Wugpr4kdoVYAD2S_w2LnKeh6FTc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>(a.b) = c</code> being legal is an accident of history</blockquote></mx-reply>yeah, it's strange. Much strange that we support <code>(a.b)=c</code> but not <code>(test?a:b)=c</code> which was supported in some other languages.","m.relates_to":{"m.in_reply_to":{"event_id":"$PuIWxjGOtQcg-tc2Wugpr4kdoVYAD2S_w2LnKeh6FTc"}},"msgtype":"m.text"},"ts":1689239984260,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$C3ofZqoFD2CMIe76Znk5TEUxGSbvCiTCnxHESu9qpFQ"},
{"content":{"body":"Andreu Botella: definitely not","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: definitely not","msgtype":"m.text"},"ts":1689239987898,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jhAQFothKmt1_6RUZmBLaPvb3fhKVEnV1xRuKsiqcn0"},
{"content":{"body":"Its easy enough to say that `(a?.b)` is not a valid simple assignment target","format":"org.matrix.custom.html","formatted_body":"Its easy enough to say that <code>(a?.b)</code> is not a valid simple assignment target","msgtype":"m.text"},"ts":1689240031090,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F7ZFd1pcFEF7de2E0s3en3nfD5ZKd4VaLdsu4aQqfiw"},
{"content":{"body":"HE Shi-Jun: you're right, that is a strange inconsistency","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: you're right, that is a strange inconsistency","msgtype":"m.text"},"ts":1689240053616,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$n5IURVLNTELJFjCiE6mzlCxk_gFwQ3Igo2kHfd-E4MI"},
{"content":{"body":"we could say `a?.b = c` is only legal in statement position","format":"org.matrix.custom.html","formatted_body":"we could say <code>a?.b = c</code> is only legal in statement position","msgtype":"m.text"},"ts":1689240134357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WMS-AOA2LzjN2kcM9VG-WqqO4CqwyUzsoWaIlM_2qp4"},
{"content":{"body":"syntactically `a?.b = c` would likely be an _OptionalChainAssignment_, where the `?.b = c = d = 42` is part of the chain","format":"org.matrix.custom.html","formatted_body":"syntactically <code>a?.b = c</code> would likely be an <em>OptionalChainAssignment</em>, where the <code>?.b = c = d = 42</code> is part of the chain","msgtype":"m.text"},"ts":1689240137555,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oYQlmj7-FAwWGdzDCUG73fq5-PwgtbZ9Pu-vsHGJpXw"},
{"content":{"body":"that would be kind of odd but like","msgtype":"m.text"},"ts":1689240138361,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yj4D4P0ouMMhk8plD97cebeQkYYbK8-uN1ZCTsYh9DE"},
{"content":{"body":"fine","msgtype":"m.text"},"ts":1689240138800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sXGggzSlVJRd54BzlKoEPS344GFVtFi_ZMfopKRL4JE"},
{"content":{"body":"`a = b.x = c?.y = d = e = 42;` this case is interesting, what's the behavior as current draft?","format":"org.matrix.custom.html","formatted_body":"<code>a = b.x = c?.y = d = e = 42;</code> this case is interesting, what's the behavior as current draft?","msgtype":"m.text"},"ts":1689240157499,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$f93UlPYN1PwxdnMD1uZIRI2d5vunErKmIyGHLJug5YM"},
{"content":{"body":"If you translate this example to the \"setter-function\" case, it is consistent:\n```js\na = b.x = c?.setY(d = e = 42);\n```\nwould produce `undefined`","format":"org.matrix.custom.html","formatted_body":"<p>If you translate this example to the \"setter-function\" case, it is consistent:</p>\n<pre><code class=\"language-js\">a = b.x = c?.setY(d = e = 42);\n</code></pre>\n<p>would produce <code>undefined</code></p>\n","msgtype":"m.text"},"ts":1689240198227,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8uS2mYY-ssvSsvknSEA0_yCFOmoLXnh7IetbKc7egFs"},
{"content":{"body":" * If you translate this example to the \"setter-function\" case, it is consistent:\n\n```js\na = b.x = c?.setY(d = e = 42);\n```\n\nwould assign `undefined` to `a` and `b.x`","format":"org.matrix.custom.html","formatted_body":" * <p>If you translate this example to the \"setter-function\" case, it is consistent:</p>\n<pre><code class=\"language-js\">a = b.x = c?.setY(d = e = 42);\n</code></pre>\n<p>would assign <code>undefined</code> to <code>a</code> and <code>b.x</code></p>\n","m.new_content":{"body":"If you translate this example to the \"setter-function\" case, it is consistent:\n\n```js\na = b.x = c?.setY(d = e = 42);\n```\n\nwould assign `undefined` to `a` and `b.x`","format":"org.matrix.custom.html","formatted_body":"<p>If you translate this example to the \"setter-function\" case, it is consistent:</p>\n<pre><code class=\"language-js\">a = b.x = c?.setY(d = e = 42);\n</code></pre>\n<p>would assign <code>undefined</code> to <code>a</code> and <code>b.x</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$8uS2mYY-ssvSsvknSEA0_yCFOmoLXnh7IetbKc7egFs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240255332,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NhZzRp8nX5qbzkKVhKdJDOggjVdAG2mkf6Zt3947w5M"},
{"content":{"body":"so `a` and `b.x` would be `undefined` instead of `42`? 🤔","format":"org.matrix.custom.html","formatted_body":"so <code>a</code> and <code>b.x</code> would be <code>undefined</code> instead of <code>42</code>? 🤔","msgtype":"m.text"},"ts":1689240256928,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$kBbY3dbZ-NeOGBR1OB_jQ_OWliGm0Fhb4cfkgMzBEic"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1689240261690,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tNtquZrlkptxX_SoPhzMTKUMdiiVaXB-89Sri-TTlx0"},
{"content":{"body":"maybe weaker than Statement and only at `,`","format":"org.matrix.custom.html","formatted_body":"maybe weaker than Statement and only at <code>,</code>","msgtype":"m.text"},"ts":1689240294980,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LMKmgXIe6OLM1wramlvM-y197vI91ULxF5hnYtlhAjw"},
{"content":{"body":" * maybe weaker than Statement and allow at `,`","format":"org.matrix.custom.html","formatted_body":" * maybe weaker than Statement and allow at <code>,</code>","m.new_content":{"body":"maybe weaker than Statement and allow at `,`","format":"org.matrix.custom.html","formatted_body":"maybe weaker than Statement and allow at <code>,</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$LMKmgXIe6OLM1wramlvM-y197vI91ULxF5hnYtlhAjw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240309985,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rssOowfncDKsjJGJHNKsRkziNzr9N3qGQkl6PCpj4jM"},
{"content":{"body":" * maybe weaker than Statement and allow at `,`?","format":"org.matrix.custom.html","formatted_body":" * maybe weaker than Statement and allow at <code>,</code>?","m.new_content":{"body":"maybe weaker than Statement and allow at `,`?","format":"org.matrix.custom.html","formatted_body":"maybe weaker than Statement and allow at <code>,</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$LMKmgXIe6OLM1wramlvM-y197vI91ULxF5hnYtlhAjw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240316255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1r3vYUHpZd5nMRMzpylvP2oos3kKsqnKmDD4OP6sNZ4"},
{"content":{"body":"yeah, that also works","msgtype":"m.text"},"ts":1689240322234,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SWKS9wQQROqNGF0AOEkaEvIcw8QynHWsgSUk2d02Ovo"},
{"content":{"body":"really anywhere except the RHS of an assignment expression","msgtype":"m.text"},"ts":1689240334224,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VHppgZF29O91CzSG6NJdYk6HXtHd3b_OnS3E-qaGzSg"},
{"content":{"body":"though, if the goal is to avoid observing the value, you do want \"only in statement position\" probably","msgtype":"m.text"},"ts":1689240367666,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q2tGkcEyqBkdr-Z-Ezaf7cRNfSP__rGozvWWlzJD0pE"},
{"content":{"body":"The goal is to \"accidentally\" observe the value","msgtype":"m.text"},"ts":1689240388097,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GnbruNzTC9crAXxUENZmrZ-M_fBKufgwzkhrjovvWBU"},
{"content":{"body":"It should be feasible to forbid `a = b?.x = c` in the grammar","format":"org.matrix.custom.html","formatted_body":"It should be feasible to forbid <code>a = b?.x = c</code> in the grammar","msgtype":"m.text"},"ts":1689240391974,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$931xNolH5-_pZ6vPEOxA_3KXKd89wE--j_WmhYpo8dw"},
{"content":{"body":"`x = (0, a?.b = c)` assigns what value to `x`? `undefined` or `c`?","format":"org.matrix.custom.html","formatted_body":"<code>x = (0, a?.b = c)</code> assigns what value to <code>x</code>? <code>undefined</code> or <code>c</code>?","msgtype":"m.text"},"ts":1689240399808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_m8kpLbpQ9LzBqTvSJKQpsvKM92ECxCra3q3_sSZX18"},
{"content":{"body":"i.e. something like `a = (b?.c = d)` might still be ok","format":"org.matrix.custom.html","formatted_body":"i.e. something like <code>a = (b?.c = d)</code> might still be ok","msgtype":"m.text"},"ts":1689240403750,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_FNmKJHQpAux2DVEC0Bv6eb-9XQtMIgygeOvikq0E2I"},
{"content":{"body":" * i.e. something like `a = (b?.c = d)` might still be ok, assigning undefined","format":"org.matrix.custom.html","formatted_body":" * i.e. something like <code>a = (b?.c = d)</code> might still be ok, assigning undefined","m.new_content":{"body":"i.e. something like `a = (b?.c = d)` might still be ok, assigning undefined","format":"org.matrix.custom.html","formatted_body":"i.e. something like <code>a = (b?.c = d)</code> might still be ok, assigning undefined","msgtype":"m.text"},"m.relates_to":{"event_id":"$_FNmKJHQpAux2DVEC0Bv6eb-9XQtMIgygeOvikq0E2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240415780,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5rzRGp2Qab07M6co2VHWnqneWXedyafgn7EkoQr35tw"},
{"content":{"body":"Not sure I want `a?.b = c` where `c` is evaluated if `a` is undefined. The point is to avoid the evaluation of `c` if it isn't going to be used, otherwise it is not a valid refactor from `if (a) a.b = c`","format":"org.matrix.custom.html","formatted_body":"Not sure I want <code>a?.b = c</code> where <code>c</code> is evaluated if <code>a</code> is undefined. The point is to avoid the evaluation of <code>c</code> if it isn't going to be used, otherwise it is not a valid refactor from <code>if (a) a.b = c</code>","msgtype":"m.text"},"ts":1689240578458,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TFm5SXQEDf9z1aLgmEZr_2j7mRKtxYZDSYMzTU925g0"},
{"content":{"body":"`a?.b ?= c`?","format":"org.matrix.custom.html","formatted_body":"<code>a?.b ?= c</code>?","msgtype":"m.text"},"ts":1689240614094,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4MwhVD04-8DS9NOleLX3L4_JkkBPrJDp-tDv-Sw8Dh8"},
{"content":{"body":"> <@rbuckton:matrix.org> `a?.b ?= c`?\n\nMaybe? It feels like one ? should correspond to one instance of short-circuiting, but this has two ? to point to the same thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4MwhVD04-8DS9NOleLX3L4_JkkBPrJDp-tDv-Sw8Dh8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><code>a?.b ?= c</code>?</blockquote></mx-reply>Maybe? It feels like one ? should correspond to one instance of short-circuiting, but this has two ? to point to the same thing","m.relates_to":{"m.in_reply_to":{"event_id":"$4MwhVD04-8DS9NOleLX3L4_JkkBPrJDp-tDv-Sw8Dh8"}},"msgtype":"m.text"},"ts":1689240648668,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZAbujpfz5c6CzJya9HrQy2uhNgWtN7W3wG183H98RDA"},
{"content":{"body":"> <@rbuckton:matrix.org> Not sure I want `a?.b = c` where `c` is evaluated if `a` is undefined. The point is to avoid the evaluation of `c` if it isn't going to be used, otherwise it is not a valid refactor from `if (a) a.b = c`\n\nI agree but I also agree with the concern about evaluating the RHS, which makes me not want this proposal (in the current form)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TFm5SXQEDf9z1aLgmEZr_2j7mRKtxYZDSYMzTU925g0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Not sure I want <code>a?.b = c</code> where <code>c</code> is evaluated if <code>a</code> is undefined. The point is to avoid the evaluation of <code>c</code> if it isn't going to be used, otherwise it is not a valid refactor from <code>if (a) a.b = c</code></blockquote></mx-reply>I agree but I also agree with the concern about evaluating the RHS, which makes me not want this proposal (in the current form)","m.relates_to":{"m.in_reply_to":{"event_id":"$TFm5SXQEDf9z1aLgmEZr_2j7mRKtxYZDSYMzTU925g0"}},"msgtype":"m.text"},"ts":1689240659193,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6kY0iuEJhC7HS8MyJTPzEylOfgZjhNBuZ9LsrBEXm0U"},
{"content":{"body":"it feels like ne pas in French--agreement","msgtype":"m.text"},"ts":1689240669443,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0AsWzV1CH4io1EB3AqzXrRs6IrfXz2NH5f-k2QIWBO4"},
{"content":{"body":"ah, c'est vrai","msgtype":"m.text"},"ts":1689240737914,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pgnVd2XUbC4PJydR72DOg_OZRp87DZ1hvC85KUKmuDU"},
{"content":{"body":"(though I admit my french is limited and rusty)","msgtype":"m.text"},"ts":1689240769230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jRpiLdApTbhhmdL0G50I5cmh7ItIdbienEUeVv4J9II"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1689240831372,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7Z4kABZyu-xNaArJRj8ef8dMeZpqx_FHAqsE7hftq78"},
{"content":{"body":"`a?.b` is often intended to be read more like `a  ?  .b` or `if a then a.b`, thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or `if a then a.b = c`.","format":"org.matrix.custom.html","formatted_body":"<code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or <code>if a then a.b</code>, thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or <code>if a then a.b = c</code>.","msgtype":"m.text"},"ts":1689240902741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fD7T-6g3YhaIhDcAzO4NXrND2_8q75o61jYgWAd5FME"},
{"content":{"body":" * `a?.b` is often intended to be read more like `a  ?  .b` or `if a (exists) then a.b`, thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or `if a (exists) then a.b = c`.","format":"org.matrix.custom.html","formatted_body":" * <code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or <code>if a (exists) then a.b</code>, thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or <code>if a (exists) then a.b = c</code>.","m.new_content":{"body":"`a?.b` is often intended to be read more like `a  ?  .b` or `if a (exists) then a.b`, thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or `if a (exists) then a.b = c`.","format":"org.matrix.custom.html","formatted_body":"<code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or <code>if a (exists) then a.b</code>, thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or <code>if a (exists) then a.b = c</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$fD7T-6g3YhaIhDcAzO4NXrND2_8q75o61jYgWAd5FME","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240933293,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4Osbr-t4AkeXVFdoV0IqAFtYyz9HlMVD5fCiw9GnAy0"},
{"content":{"body":" * `a?.b` is often intended to be read more like `a  ?  .b` or \"*if a (exists) then a.b*\", thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or \"*if a (exists) then a.b = c*\".","format":"org.matrix.custom.html","formatted_body":" * <code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or \"<em>if a (exists) then a.b</em>\", thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or \"<em>if a (exists) then a.b = c</em>\".","m.new_content":{"body":"`a?.b` is often intended to be read more like `a  ?  .b` or \"*if a (exists) then a.b*\", thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or \"*if a (exists) then a.b = c*\".","format":"org.matrix.custom.html","formatted_body":"<code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or \"<em>if a (exists) then a.b</em>\", thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or \"<em>if a (exists) then a.b = c</em>\".","msgtype":"m.text"},"m.relates_to":{"event_id":"$fD7T-6g3YhaIhDcAzO4NXrND2_8q75o61jYgWAd5FME","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240959860,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5hw0zY6Mo3bUB63PfE1ddyWHoX_Gh4LfrbtZgIYNZRA"},
{"content":{"body":" * `a?.b` is often intended to be read more like `a  ?  .b` or \"_if a exists then a.b_\", thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or \"_if a exists then a.b = c_\".","format":"org.matrix.custom.html","formatted_body":" * <code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or \"<em>if a exists then a.b</em>\", thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or \"<em>if a exists then a.b = c</em>\".","m.new_content":{"body":"`a?.b` is often intended to be read more like `a  ?  .b` or \"_if a exists then a.b_\", thus `a?.b = c` would be intended to be read as `a  ?  .b = c` or \"_if a exists then a.b = c_\".","format":"org.matrix.custom.html","formatted_body":"<code>a?.b</code> is often intended to be read more like <code>a  ?  .b</code> or \"<em>if a exists then a.b</em>\", thus <code>a?.b = c</code> would be intended to be read as <code>a  ?  .b = c</code> or \"<em>if a exists then a.b = c</em>\".","msgtype":"m.text"},"m.relates_to":{"event_id":"$fD7T-6g3YhaIhDcAzO4NXrND2_8q75o61jYgWAd5FME","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689240975128,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zE0V8dLDOh6MqcRu2fkGe1oxithSR7Wu3dDQ61vOtJU"},
{"content":{"body":"> <@littledan:matrix.org> Maybe? It feels like one ? should correspond to one instance of short-circuiting, but this has two ? to point to the same thing\n\nYeah, I don't like it but it would be a way to clarify what happens to the RHS. It's questionable how this would work with compound assignment or prefix/postfix increment/decrement however.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZAbujpfz5c6CzJya9HrQy2uhNgWtN7W3wG183H98RDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Maybe? It feels like one ? should correspond to one instance of short-circuiting, but this has two ? to point to the same thing</blockquote></mx-reply>Yeah, I don't like it but it would be a way to clarify what happens to the RHS. It's questionable how this would work with compound assignment or prefix/postfix increment/decrement however.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZAbujpfz5c6CzJya9HrQy2uhNgWtN7W3wG183H98RDA"}},"msgtype":"m.text"},"ts":1689241130343,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hgaKvtUzJSKaQq0wrQ0buLr6YGaAamo_GpbxsMpszDk"},
{"content":{"body":"eemeli: I think you need to review what stage 1 means","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: I think you need to review what stage 1 means","msgtype":"m.text"},"ts":1689241224862,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IfiTHQH3AtwApjzqonCNuddJU0fKlMJyu1n3BeO6bHU"},
{"content":{"body":"you are asking nonsensical questions","msgtype":"m.text"},"ts":1689241233684,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bvzSh0vmsCFXwBN2HE9wpwbHNvvFRS9kNW0R_fvLg-M"},
{"content":{"body":"a solution is not accepted to stage 1; a problem space is","msgtype":"m.text"},"ts":1689241255277,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Yil0IftRMRkM03RYFcliU-XzI2Wooz3KMXqJ7sgVgeY"},
{"content":{"body":"I would like us to investigate this at Stage 1 to see if we can find a way to resolve concerns raised by some delegates. I think this would be very valuable to have in some form and is worth pursuing, even if we need to find unique syntax to accommodate concerns.","msgtype":"m.text"},"ts":1689241276575,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nPrH40p5lAcvQwHFnziovt-OWSMymA0LPoRgNAu4iww"},
{"content":{"body":"> <@michaelficarra:matrix.org> a solution is not accepted to stage 1; a problem space is\n\nI think Eemeli's point is that this is not something that needs a solution at all","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Yil0IftRMRkM03RYFcliU-XzI2Wooz3KMXqJ7sgVgeY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>a solution is not accepted to stage 1; a problem space is</blockquote></mx-reply>I think Eemeli's point is that this is not something that needs a solution at all","m.relates_to":{"m.in_reply_to":{"event_id":"$Yil0IftRMRkM03RYFcliU-XzI2Wooz3KMXqJ7sgVgeY"}},"msgtype":"m.text"},"ts":1689241284585,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xGD2GoVgxuG7xkFGvVtyB5KqcrwnisOcHGOzIJAk5_s"},
{"content":{"body":"yes, often when a proposal is \"overcooked\", we end up in this kind of a situation","msgtype":"m.text"},"ts":1689241318368,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3uZ7Y_9VQzZ-DoskRzpotr2BvP05ONpaK_oW1OUWfAA"},
{"content":{"body":"people get too hung up on the specifics of a potential solution","msgtype":"m.text"},"ts":1689241337748,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cQUTEwxCXD11eM8ets_BY-amsnDXalozDvIj4DoG44M"},
{"content":{"body":"(fwiw I think that the MessageFormat proposal had the same problem)","msgtype":"m.text"},"ts":1689241339071,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m3KAg5uzWsAgmaZw3mmYCuma0XH0KqQR4jsQVcqQo00"},
{"content":{"body":"unfortunately, without them, it can be difficult to understand the problem space","msgtype":"m.text"},"ts":1689241362829,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WQfI2m2cXR2r9ou67rWwUFuX8dO-lbqLfiHWeChH1qQ"},
{"content":{"body":"I would say the problem space is \"allowing assignment with similar ergonomics as optional chaining currently allows: avoiding repetition and conditional member references based on whether a part of the LHs is null/undefined\"","msgtype":"m.text"},"ts":1689241422379,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qKDe6sYXCsUa-hVWsBOJnEGWaKE5fJyC5t53JYPQhQw"},
{"content":{"body":" * I would say the problem space is \"allowing assignment with similar ergonomics as optional chaining currently allows: avoiding repetition and handling conditional member references based on whether a part of the LHs is null/undefined\"","m.new_content":{"body":"I would say the problem space is \"allowing assignment with similar ergonomics as optional chaining currently allows: avoiding repetition and handling conditional member references based on whether a part of the LHs is null/undefined\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$qKDe6sYXCsUa-hVWsBOJnEGWaKE5fJyC5t53JYPQhQw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689241438258,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l9FXAltSwxTK1cYyu1INkBp1QjXBfi6TwHDrwnVR6wA"},
{"content":{"body":"Bradford Smith: I do not think it will be hard to specify this","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">Bradford Smith</a>: I do not think it will be hard to specify this","msgtype":"m.text"},"ts":1689241565277,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mBSAcebjTy2eZabP_tRPxlEr3DjxYeNZhS7J_YE8JUI"},
{"content":{"body":"We can at least block `a = b?.c = d` via a static semantics rule, even if not in the grammar.","format":"org.matrix.custom.html","formatted_body":"We can at least block <code>a = b?.c = d</code> via a static semantics rule, even if not in the grammar.","msgtype":"m.text"},"ts":1689241570972,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vXER9zs4PlTsVH1zodbgk5Xw7PMNMpjs2KIN6dJKLXg"},
{"content":{"body":"or to write parsers for it","msgtype":"m.text"},"ts":1689241572842,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SOvTsCIG6Z4CWvgSgYjzMZMi-s9ZQWidVbg_ZP_Grrw"},
{"content":{"body":"We block `const a` via static semantics, so this doesn't seem that bad","format":"org.matrix.custom.html","formatted_body":"We block <code>const a</code> via static semantics, so this doesn't seem that bad","msgtype":"m.text"},"ts":1689241591829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xJA-kvPAprTNIMVFfImQSWSifp-kaaNCht053YXU9RM"},
{"content":{"body":"like I expect this to be about an order of magnitude easier specify and implement than the hideous `async (x)` cover grammar","format":"org.matrix.custom.html","formatted_body":"like I expect this to be about an order of magnitude easier specify and implement than the hideous <code>async (x)</code> cover grammar","msgtype":"m.text"},"ts":1689241638136,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AUIwvPMVkvSRu5za9xD_bbw9iqqyFH6McmnrIFsvdLY"},
{"content":{"body":"which, granted, I wouldn't want any new features of that complexity","msgtype":"m.text"},"ts":1689241651418,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7UEZym7h2HqAQwEOQTci2rokDGut74o5IEc9b3emWoQ"},
{"content":{"body":"but this one doesn't seem bad at all","msgtype":"m.text"},"ts":1689241656108,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k8UoLpOuYprvezr8ZkLtnBtK-lIJe0A5wcm4Bcehzvg"},
{"content":{"body":" * like I expect this to be about an order of magnitude easier to specify and implement than the hideous `async (x)` cover grammar","format":"org.matrix.custom.html","formatted_body":" * like I expect this to be about an order of magnitude easier to specify and implement than the hideous <code>async (x)</code> cover grammar","m.new_content":{"body":"like I expect this to be about an order of magnitude easier to specify and implement than the hideous `async (x)` cover grammar","format":"org.matrix.custom.html","formatted_body":"like I expect this to be about an order of magnitude easier to specify and implement than the hideous <code>async (x)</code> cover grammar","msgtype":"m.text"},"m.relates_to":{"event_id":"$AUIwvPMVkvSRu5za9xD_bbw9iqqyFH6McmnrIFsvdLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689241670564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kse3435R6pcsK4SCPTVZh07zwp7dFllCfVzpju0KPOE"},
{"content":{"body":"arrow functions should've been like `^x => y` or something","format":"org.matrix.custom.html","formatted_body":"arrow functions should've been like <code>^x =&gt; y</code> or something","msgtype":"m.text"},"ts":1689241700172,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_eGXbTUInDzY2oXryKSAT0im8eGNEhJ8y5D_BT0EAi0"},
{"content":{"body":"I know that I should have not written a spec for a stage 0 proposal, but the way it can be specified is nicolo-ribaudo.github.io/proposal-optional-chaining-assignment/","msgtype":"m.text"},"ts":1689241700231,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$G20VWWndCPkselhOsbn62PpfJKEUlOD1CFxrx39FRyI"},
{"content":{"body":"everything would be way easier in that case","msgtype":"m.text"},"ts":1689241706805,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FmgtiJAKVPlAeERcW0RhDF8olZxYM5TG79KfM535suY"},
{"content":{"body":"`λx. y`","format":"org.matrix.custom.html","formatted_body":"<code>λx. y</code>","m.relates_to":{"event_id":"$_eGXbTUInDzY2oXryKSAT0im8eGNEhJ8y5D_BT0EAi0","is_falling_back":true,"m.in_reply_to":{"event_id":"$_eGXbTUInDzY2oXryKSAT0im8eGNEhJ8y5D_BT0EAi0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689241737212,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1Exa07-aDd6Gb8AQOftKmjJBwB9S2u4Qabumwzjy7v0"},
{"content":{"body":"sidebar: is someone breathing directly into one of the microphones?","msgtype":"m.text"},"ts":1689241749647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PrZUnSMeXX5Hb5GZNuADDTes7JXrigXnAcHCtG8t3Dk"},
{"content":{"body":"> <@bakkot:matrix.org> like I expect this to be about an order of magnitude easier to specify and implement than the hideous `async (x)` cover grammar\n\nWe want to allow `a?.b = c` where its on the LHS, but disallow `a = b?.c = d` where its on the LHS and RHS, but not disallow `a = b?.c`. Possible with production parameters maybe, especially if the assignment is part of the _OptionalChain_ production","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AUIwvPMVkvSRu5za9xD_bbw9iqqyFH6McmnrIFsvdLY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like I expect this to be about an order of magnitude easier to specify and implement than the hideous <code>async (x)</code> cover grammar</blockquote></mx-reply>We want to allow <code>a?.b = c</code> where its on the LHS, but disallow <code>a = b?.c = d</code> where its on the LHS and RHS, but not disallow <code>a = b?.c</code>. Possible with production parameters maybe, especially if the assignment is part of the <em>OptionalChain</em> production","m.relates_to":{"m.in_reply_to":{"event_id":"$AUIwvPMVkvSRu5za9xD_bbw9iqqyFH6McmnrIFsvdLY"}},"msgtype":"m.text"},"ts":1689241759247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8d4qnzU03kyQfcNeguAImLhPUYZUPN7wZ2Dn_yfXeHQ"},
{"content":{"body":"> <@bakkot:matrix.org> Bradford Smith: I do not think it will be hard to specify this\n\nWell I expect you're more familiar with the details of the grammar than I.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mBSAcebjTy2eZabP_tRPxlEr3DjxYeNZhS7J_YE8JUI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">Bradford Smith</a>: I do not think it will be hard to specify this</blockquote></mx-reply>Well I expect you're more familiar with the details of the grammar than I.","m.relates_to":{"m.in_reply_to":{"event_id":"$mBSAcebjTy2eZabP_tRPxlEr3DjxYeNZhS7J_YE8JUI"}},"msgtype":"m.text"},"ts":1689241784610,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$d1yDgAyEuhvgg6uP_b6jz-fCL-iSZ0bYQfoMgB4k7YM"},
{"content":{"body":"> <@bakkot:matrix.org> like I expect this to be about an order of magnitude easier to specify and implement than the hideous `async (x)` cover grammar\n\n * We want to allow `a?.b = c` where its on the LHS, but disallow `a = b?.c = d` where its on the LHS and RHS, but not disallow `a = b?.c` where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the _OptionalChain_ production","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AUIwvPMVkvSRu5za9xD_bbw9iqqyFH6McmnrIFsvdLY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like I expect this to be about an order of magnitude easier to specify and implement than the hideous <code>async (x)</code> cover grammar</blockquote></mx-reply> * We want to allow <code>a?.b = c</code> where its on the LHS, but disallow <code>a = b?.c = d</code> where its on the LHS and RHS, but not disallow <code>a = b?.c</code> where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the <em>OptionalChain</em> production","m.new_content":{"body":"We want to allow `a?.b = c` where its on the LHS, but disallow `a = b?.c = d` where its on the LHS and RHS, but not disallow `a = b?.c` where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the _OptionalChain_ production","format":"org.matrix.custom.html","formatted_body":"We want to allow <code>a?.b = c</code> where its on the LHS, but disallow <code>a = b?.c = d</code> where its on the LHS and RHS, but not disallow <code>a = b?.c</code> where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the <em>OptionalChain</em> production","msgtype":"m.text"},"m.relates_to":{"event_id":"$8d4qnzU03kyQfcNeguAImLhPUYZUPN7wZ2Dn_yfXeHQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689241794560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4o4m0nDgZDOOZD3Hv3Qbt3W8IeCa47NpvJN9pTanMJ4"},
{"content":{"body":"> <@bakkot:matrix.org> (fwiw I think that the MessageFormat proposal had the same problem)\n\nAgreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m3KAg5uzWsAgmaZw3mmYCuma0XH0KqQR4jsQVcqQo00?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(fwiw I think that the MessageFormat proposal had the same problem)</blockquote></mx-reply>Agreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.","m.relates_to":{"m.in_reply_to":{"event_id":"$m3KAg5uzWsAgmaZw3mmYCuma0XH0KqQR4jsQVcqQo00"}},"msgtype":"m.text"},"ts":1689241818460,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$LmqD-tugBxXKQgtThQ9DndPgicYYBVwdzbPqdAtq2Sc"},
{"content":{"body":"> <@eemeli:mozilla.org> Agreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.\n\nIt's hard to see these things ahead of time tbf","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LmqD-tugBxXKQgtThQ9DndPgicYYBVwdzbPqdAtq2Sc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>Agreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.</blockquote></mx-reply>It's hard to see these things ahead of time tbf","m.relates_to":{"m.in_reply_to":{"event_id":"$LmqD-tugBxXKQgtThQ9DndPgicYYBVwdzbPqdAtq2Sc"}},"msgtype":"m.text"},"ts":1689241861821,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$mGhbLv3yfY_5_7hP_D9QsPEZCdeMjVWJH-ZDmQiLCuk"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> Well I expect you're more familiar with the details of the grammar than I.\n\nWe do some similar grammar gymnastics with `??`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$d1yDgAyEuhvgg6uP_b6jz-fCL-iSZ0bYQfoMgB4k7YM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>Well I expect you're more familiar with the details of the grammar than I.</blockquote></mx-reply>We do some similar grammar gymnastics with <code>??</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$d1yDgAyEuhvgg6uP_b6jz-fCL-iSZ0bYQfoMgB4k7YM"}},"msgtype":"m.text"},"ts":1689241863436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ueb_7w48P3RZGklRLQCOsA-rC_fwa9SFEjDjpPcouGE"},
{"content":{"body":"> <@eemeli:mozilla.org> Agreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.\n\n * It's hard to foresee these issues ahead of time tbf","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LmqD-tugBxXKQgtThQ9DndPgicYYBVwdzbPqdAtq2Sc?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>Agreed. We really should've explicitly gone for stage-1 for Intl.MessageFormat a couple of years earlier, when the work in its WG started under Unicode.</blockquote></mx-reply> * It's hard to foresee these issues ahead of time tbf","m.new_content":{"body":"It's hard to foresee these issues ahead of time tbf","format":"org.matrix.custom.html","formatted_body":"It's hard to foresee these issues ahead of time tbf","msgtype":"m.text"},"m.relates_to":{"event_id":"$mGhbLv3yfY_5_7hP_D9QsPEZCdeMjVWJH-ZDmQiLCuk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689241876291,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$gRO-Vzj3vp82wxfrc_xNJhM6X1zfrhnbXHAMwWoF1-Q"},
{"content":{"body":"> <@rbuckton:matrix.org> We want to allow `a?.b = c` where its on the LHS, but disallow `a = b?.c = d` where its on the LHS and RHS, but not disallow `a = b?.c` where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the _OptionalChain_ production\n\nproduction parameter works, yes - have a new [IsStatement] flag or whatever, present only on AssignmentExpression, and then Expression sets the flag and no other use of AssignmentExpression sets it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8d4qnzU03kyQfcNeguAImLhPUYZUPN7wZ2Dn_yfXeHQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We want to allow <code>a?.b = c</code> where its on the LHS, but disallow <code>a = b?.c = d</code> where its on the LHS and RHS, but not disallow <code>a = b?.c</code> where its on the RHS only. Possible with production parameters maybe, especially if the assignment is part of the <em>OptionalChain</em> production</blockquote></mx-reply>production parameter works, yes - have a new [IsStatement] flag or whatever, present only on AssignmentExpression, and then Expression sets the flag and no other use of AssignmentExpression sets it","m.relates_to":{"m.in_reply_to":{"event_id":"$8d4qnzU03kyQfcNeguAImLhPUYZUPN7wZ2Dn_yfXeHQ"}},"msgtype":"m.text"},"ts":1689241883028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_tOT-q-QRQkm_USmONy57heXUGDnAAx57KoAPLcMk8E"},
{"content":{"body":"alternatively you can just have an early error with prose","msgtype":"m.text"},"ts":1689241896154,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$frZfjCr9TCOsMXFpYisZGUlpBN_l6gI5qg6ALZJxih8"},
{"content":{"body":"> <@bakkot:matrix.org> alternatively you can just have an early error with prose\n\nYeah, an EE is probably easiest.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$frZfjCr9TCOsMXFpYisZGUlpBN_l6gI5qg6ALZJxih8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>alternatively you can just have an early error with prose</blockquote></mx-reply>Yeah, an EE is probably easiest.","m.relates_to":{"m.in_reply_to":{"event_id":"$frZfjCr9TCOsMXFpYisZGUlpBN_l6gI5qg6ALZJxih8"}},"msgtype":"m.text"},"ts":1689241938275,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VEHFowRwN7avrWZ8r4G9fUzIjgT1PFgkmUgHzo17x3A"},
{"content":{"body":"ryzokuken 🇳🇴 Rob Palmer TCQ is at the previous agenda item","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken 🇳🇴</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> TCQ is at the previous agenda item","msgtype":"m.text"},"ts":1689241966670,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$viCO4oj6JqrVQvKPK2pDkTJ4JUXmoKDGzWj5g9JdOpw"},
{"content":{"body":"oops","msgtype":"m.text"},"ts":1689241977819,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$GijVe7A4FKCQtkYqy5nIlpxMwKqisg6NTp0Zh_OtIpE"},
{"content":{"body":"ptomato (at TC39, limited availability): could you add your item again?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato (at TC39, limited availability)</a>: could you add your item again?","msgtype":"m.text"},"ts":1689241984985,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$faM-9geuzie4sFshHb0MO31wmoYBmEkg5NYoLx6ArN0"},
{"content":{"body":"> <@usharma:igalia.com> ptomato (at TC39, limited availability): could you add your item again?\n\nIt's still there","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$faM-9geuzie4sFshHb0MO31wmoYBmEkg5NYoLx6ArN0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br><a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato (at TC39, limited availability)</a>: could you add your item again?</blockquote></mx-reply>It's still there","m.relates_to":{"m.in_reply_to":{"event_id":"$faM-9geuzie4sFshHb0MO31wmoYBmEkg5NYoLx6ArN0"}},"msgtype":"m.text"},"ts":1689242002806,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$d5CMtamLfd0Txl0jb7nsG3nz0E4H6s1lc3Sn61Wr_Gk"},
{"content":{"body":"Or at least, I see it there","msgtype":"m.text"},"ts":1689242011598,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$p5njHDJf00-FvfVMPLa0E9P54Va1uS1sT-SPsN7jnwo"},
{"content":{"body":"\"how should the committee proceed wrt the pipeline operator\" -> we should not proceed with the pipeline operator","msgtype":"m.text"},"ts":1689242099630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qXORwM1p0Z4fL0HfK_uwLV1okTI1iZjynzHTgpAjv6A"},
{"content":{"body":"personally, I think the pipeline operator may need a full re-justification","msgtype":"m.text"},"ts":1689242113103,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WGB1yWKziTsdQbIHD5NblE7cElgK08D-zk5LDzVjwXY"},
{"content":{"body":"(sorry to be blunt; in my defense it's 3am)","msgtype":"m.text"},"ts":1689242127374,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0MCw9cS2DMZf6067ibsmdeM5JjwJ4Ada1-6RhvHe0W0"},
{"content":{"body":"(reviewed in the context of the language as it is today, not how it was when originally justified)","msgtype":"m.text"},"ts":1689242137039,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$EMa061AtSYSMdvKfaEuBSCnzk4H-Yq1mokFymo0mvDU"},
{"content":{"body":"I think given all that transpired with pipeline, maybe it makes sense to deviate from both semantics and try to come up with something unique that would be a decent compromise?","msgtype":"m.text"},"ts":1689242165999,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$ezaJHYi_p1mGYrMFT6DQWTRngOj9v2jsRPMD0XqkwOc"},
{"content":{"body":"it's odd that test262 seems to strongly rely on `cleanupSome` to test some GC things","format":"org.matrix.custom.html","formatted_body":"it's odd that test262 seems to strongly rely on <code>cleanupSome</code> to test some GC things","msgtype":"m.text"},"ts":1689242173494,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910"},
{"content":{"body":"> <@michaelficarra:matrix.org> personally, I think the pipeline operator may need a full re-justification\n\nI would like to hear how it fits with the protocols proposal, since they both solve 'I want \"methods\" without the bad^TM modifications to its prototype that I do now own'","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WGB1yWKziTsdQbIHD5NblE7cElgK08D-zk5LDzVjwXY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>personally, I think the pipeline operator may need a full re-justification</blockquote></mx-reply>I would like to hear how it fits with the protocols proposal, since they both solve 'I want \"methods\" without the bad^TM modifications to its prototype that I do now own'","m.relates_to":{"m.in_reply_to":{"event_id":"$WGB1yWKziTsdQbIHD5NblE7cElgK08D-zk5LDzVjwXY"}},"msgtype":"m.text"},"ts":1689242200941,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eYdLWx_IGCa32FY3EPzFbSSVMCmVuhO52puTwdbqB9M"},
{"content":{"body":"I like throw expressions","msgtype":"m.text"},"ts":1689242261227,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$yxjgROkMWTbHJS-CqxGj1mrRhff0vekQo4UrL6rE0NA"},
{"content":{"body":"same","m.relates_to":{"event_id":"$eYdLWx_IGCa32FY3EPzFbSSVMCmVuhO52puTwdbqB9M","is_falling_back":true,"m.in_reply_to":{"event_id":"$eYdLWx_IGCa32FY3EPzFbSSVMCmVuhO52puTwdbqB9M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242301804,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fyHy9tGDlk0lvDMpJzv1OGphMVh0ekKh-n8Wu5pWehw"},
{"content":{"body":"I like them even in a world with do expressions","msgtype":"m.text"},"ts":1689242304097,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wzWTAtkmXE7oxcIUkEl1A4bd3U7NTFVz8rOBYrgdxFA"},
{"content":{"body":"I really wish I could get some time to work on protocols again","m.relates_to":{"event_id":"$eYdLWx_IGCa32FY3EPzFbSSVMCmVuhO52puTwdbqB9M","is_falling_back":true,"m.in_reply_to":{"event_id":"$fyHy9tGDlk0lvDMpJzv1OGphMVh0ekKh-n8Wu5pWehw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242311744,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lx8rmyIm0EkkNfjASpLymV-X6xNasD5RWpS7W9-LHh8"},
{"content":{"body":"editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely ore popular in the communit","m.relates_to":{"event_id":"$eYdLWx_IGCa32FY3EPzFbSSVMCmVuhO52puTwdbqB9M","is_falling_back":true,"m.in_reply_to":{"event_id":"$lx8rmyIm0EkkNfjASpLymV-X6xNasD5RWpS7W9-LHh8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242355749,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2VZYYbFWSHgOs3DtKKuNOoNq8kro8Eh5JLPfoYf-LF8"},
{"content":{"body":" * editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely ore popular in the community","format":"org.matrix.custom.html","formatted_body":" * editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely ore popular in the community","m.new_content":{"body":"editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely ore popular in the community","format":"org.matrix.custom.html","formatted_body":"editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely ore popular in the community","msgtype":"m.text"},"m.relates_to":{"event_id":"$2VZYYbFWSHgOs3DtKKuNOoNq8kro8Eh5JLPfoYf-LF8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689242358483,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rGXcHB8OPG07-7Jlx53VrVThlvf4VS1jaHaCSWHzvQk"},
{"content":{"body":" * editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely more popular in the community","format":"org.matrix.custom.html","formatted_body":" * editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely more popular in the community","m.new_content":{"body":"editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely more popular in the community","format":"org.matrix.custom.html","formatted_body":"editor work unfortunately takes up most of my time allocated to TC39, and iterator helpers (and follow-ons) are definitely more popular in the community","msgtype":"m.text"},"m.relates_to":{"event_id":"$2VZYYbFWSHgOs3DtKKuNOoNq8kro8Eh5JLPfoYf-LF8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689242363645,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jY2iPl3ey2LSuHjsJcvb1KhcLnwg5YOmIxCIu-44T9c"},
{"content":{"body":"it seems like if `cleanupSome` is withdrawn, it would have to be added to the test262 infrastructure","format":"org.matrix.custom.html","formatted_body":"it seems like if <code>cleanupSome</code> is withdrawn, it would have to be added to the test262 infrastructure","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242582928,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$rl_gwG7tMJi66wyaH-jo9qWNv3UBe6BRCCL5XpKTHYs"},
{"content":{"body":"The direction that the pipeline operator took has had significant pushback from the community. There's a tremendous amount of interest in the feature, but choice to use Hack-style pipes didn't sit well with some of the major libraries in the FP.","msgtype":"m.text"},"ts":1689242592330,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GLzkl8JGXocnn8XopNDWe8oR_BNSlWFq1mnVfSZeSsc"},
{"content":{"body":"maybe in a simplified way, without taking a callback","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$rl_gwG7tMJi66wyaH-jo9qWNv3UBe6BRCCL5XpKTHYs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242600996,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fHhtxaZbn9ksDHc0mVVoox0NXpUd5Ol0OWpbcLXl3pQ"},
{"content":{"body":" * The direction that the pipeline operator took has had significant pushback from the community. There's a tremendous amount of interest in the feature, but choice to use Hack-style pipes didn't sit well with some of the major libraries in the FP community.","m.new_content":{"body":"The direction that the pipeline operator took has had significant pushback from the community. There's a tremendous amount of interest in the feature, but choice to use Hack-style pipes didn't sit well with some of the major libraries in the FP community.","msgtype":"m.text"},"m.relates_to":{"event_id":"$GLzkl8JGXocnn8XopNDWe8oR_BNSlWFq1mnVfSZeSsc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689242629447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i3g0zC0G-GbE-AemVEeZdKflnQirIVF8NjP4YspreJg"},
{"content":{"body":"Please could you write this (in an appropriate way) in the summary notes for this topic, Ron.","msgtype":"m.text"},"ts":1689242643171,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$UfFf_T1oyGcPquFJNuUYV9GBnwbvsl7kQYrxsmKVNMU"},
{"content":{"body":"i accidentally a word. I've edited the comment","format":"org.matrix.custom.html","formatted_body":"i accidentally a word. I've edited the comment","m.relates_to":{"m.in_reply_to":{"event_id":"$mQs9JtuBwPR8l7EULctHfpxdQV6UM2MNK_oLTfOL3i4"}},"msgtype":"m.text"},"ts":1689242644207,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vd9QUOYKZedeWyckSqUxKL4u0Qksc3wwYRWIvjF84FI"},
{"content":{"body":"re: `do` expressions, I think some proposals like pattern matching are depending on it.","format":"org.matrix.custom.html","formatted_body":"re: <code>do</code> expressions, I think some proposals like pattern matching are depending on it.","msgtype":"m.text"},"ts":1689242672204,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9kViC9h7IEHyk_oukWX3_AqsHXkByZRp-D9XTd9y-lk"},
{"content":{"body":"not to say that they can't work around that.","msgtype":"m.text"},"ts":1689242689219,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gDNrV1_UCuNU0kCBJfv8diG7ODuvuuQ-1poKBlt5_U0"},
{"content":{"body":"yeah, though pattern matching is even more syntax than `do` is","format":"org.matrix.custom.html","formatted_body":"yeah, though pattern matching is even more syntax than <code>do</code> is","msgtype":"m.text"},"ts":1689242690389,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vi2YoRN7IoeULsWL1UF6n4KQXWodcj5Vzx-boarC4iI"},
{"content":{"body":"it is so much syntax","msgtype":"m.text"},"ts":1689242698671,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9tW7YTFVBOzeAEJG9pGyB6FcL0vqXrQotPHBdhy2q5k"},
{"content":{"body":"pattern matching is extremely valuable though, and I think is definitely worth its weight.","msgtype":"m.text"},"ts":1689242720270,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AA4kbGIl-bZMnaM7B-1VtxDJcJRpcIYAFdXrtgB-eYw"},
{"content":{"body":"yeah I'm not saying any of these things shouldn't be pursued, considered in isolation (except maybe pipeline)","msgtype":"m.text"},"ts":1689242739996,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RZhLMXBk2MRg8sR32FJJfeUSoCoAii1r69vB2qvfvFA"},
{"content":{"body":"which implementations have cleanupSome anyway? I don't think it works in most of them, at least not unflagged","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$fHhtxaZbn9ksDHc0mVVoox0NXpUd5Ol0OWpbcLXl3pQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242741428,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$6kupxC0pIchq2y2iCEOcXTYAWbb8Xh6FNL54jRZFpfw"},
{"content":{"body":"just that I think the community would be better served by us focusing on stdlib stuff over syntax, at the margin","msgtype":"m.text"},"ts":1689242755730,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JpDUXBccvOXW0cETOdrFeo-d3hKcLHzg3kracUuIs48"},
{"content":{"body":"it may well be that the test262 infrastructure that uses cleanupSome, was only added for testing cleanupSome","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$6kupxC0pIchq2y2iCEOcXTYAWbb8Xh6FNL54jRZFpfw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242761181,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$JE7dLrEzMHfEKtqRPAGrBg3JH7NBRMLGAz0BgoigMYE"},
{"content":{"body":"https://github.com/tc39/test262/blob/main/test/built-ins/FinalizationRegistry/gc-has-one-chance-to-call-cleanupCallback-for-object.js","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$JE7dLrEzMHfEKtqRPAGrBg3JH7NBRMLGAz0BgoigMYE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242796693,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$iQG-_dgFx4l0jjX5R9LDb0_coHGbrK6Ozsbd5Iff3CU"},
{"content":{"body":"I believe HE Shi-Jun was interested in championing the `function.sent` proposal","format":"org.matrix.custom.html","formatted_body":"I believe <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> was interested in championing the <code>function.sent</code> proposal","msgtype":"m.text"},"ts":1689242819247,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ql2kY10cM7Wlrklwj0SaPnsEuAwPy4LPaEAat2Hf1r4"},
{"content":{"body":"that test doesn't seem to be specifically for `cleanupSome`","format":"org.matrix.custom.html","formatted_body":"that test doesn't seem to be specifically for <code>cleanupSome</code>","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$iQG-_dgFx4l0jjX5R9LDb0_coHGbrK6Ozsbd5Iff3CU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242820329,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6Yn0suHNpEqs2Zd4tk1RYZLAs_8iuU4eHy9LWAlebsg"},
{"content":{"body":"and it uses `asyncGC`, which uses `cleanupSome` internally","format":"org.matrix.custom.html","formatted_body":"and it uses <code>asyncGC</code>, which uses <code>cleanupSome</code> internally","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$6Yn0suHNpEqs2Zd4tk1RYZLAs_8iuU4eHy9LWAlebsg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242836690,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$2PGRSW3wtR_o4KlrOuZjvvghRM06beC8QdQAoNJ_S-k"},
{"content":{"body":"it does kind of claim to be testing `cleanupSome`?","format":"org.matrix.custom.html","formatted_body":"it does kind of claim to be testing <code>cleanupSome</code>?","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$2PGRSW3wtR_o4KlrOuZjvvghRM06beC8QdQAoNJ_S-k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242850527,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0PNGzum8b_jFfFkv1LNkUZ0hPHxTf0WNLi4qaC2qoUo"},
{"content":{"body":"at least, that's what the `info` section has","format":"org.matrix.custom.html","formatted_body":"at least, that's what the <code>info</code> section has","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$0PNGzum8b_jFfFkv1LNkUZ0hPHxTf0WNLi4qaC2qoUo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242856953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4NOzQySc6rfBlTrUfv5w3t_ruB7qJtnig7ODub6cU-s"},
{"content":{"body":"it includes `cleanupSome` in the features it uses, because otherwise test262 and maybe other engines will not pass the right flags","format":"org.matrix.custom.html","formatted_body":"it includes <code>cleanupSome</code> in the features it uses, because otherwise test262 and maybe other engines will not pass the right flags","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$4NOzQySc6rfBlTrUfv5w3t_ruB7qJtnig7ODub6cU-s"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242875926,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$o6YaLogQnHFWINBvK4HdOC3NxaR3mcO7z54jb0TNfCk"},
{"content":{"body":"but I don't think it is testing `cleanupSome`","format":"org.matrix.custom.html","formatted_body":"but I don't think it is testing <code>cleanupSome</code>","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$o6YaLogQnHFWINBvK4HdOC3NxaR3mcO7z54jb0TNfCk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242886865,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1wlAgpyDEty3ojb273urRtoPRW__zOXvimRrv1gIRZk"},
{"content":{"body":"I might be wrong though","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$1wlAgpyDEty3ojb273urRtoPRW__zOXvimRrv1gIRZk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242902202,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ETUkQcfsSzqYvCMjqVcvLCflWdhab8fTCBOoQk3jjNI"},
{"content":{"body":"well that's what I meant by my original question - I suspect that most/all consumers of test262 might just never run this test","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$ETUkQcfsSzqYvCMjqVcvLCflWdhab8fTCBOoQk3jjNI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242913516,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$tt4iysDynUSS41Kg9mzV7UcotxctYs0_OTga5BoHso4"},
{"content":{"body":"anyway, I'll add this to the agenda for the next test262 maintainers meeting. I'm not too familiar with these tests","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$tt4iysDynUSS41Kg9mzV7UcotxctYs0_OTga5BoHso4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242922287,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$x2Yj3a3RrT4hl2PYskFgoUmz8xksilDaXpndhjGAl3k"},
{"content":{"body":"I ran into this because of testing the interaction of `AsyncContext` with the `FinalizationRegistry` callback","format":"org.matrix.custom.html","formatted_body":"I ran into this because of testing the interaction of <code>AsyncContext</code> with the <code>FinalizationRegistry</code> callback","m.relates_to":{"event_id":"$XTNercii_F-25USaDnULUS0otLLqBU5Uepso5zoS910","is_falling_back":true,"m.in_reply_to":{"event_id":"$x2Yj3a3RrT4hl2PYskFgoUmz8xksilDaXpndhjGAl3k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1689242945935,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OTiPnTIRHTyspr3TB0KmREu10BZfudE2uz3ns3ZetVk"},
{"content":{"body":" * I ran into this when testing the interaction of `AsyncContext` with the `FinalizationRegistry` callback, and seeing what other FR tests did","format":"org.matrix.custom.html","formatted_body":" * I ran into this when testing the interaction of <code>AsyncContext</code> with the <code>FinalizationRegistry</code> callback, and seeing what other FR tests did","m.new_content":{"body":"I ran into this when testing the interaction of `AsyncContext` with the `FinalizationRegistry` callback, and seeing what other FR tests did","format":"org.matrix.custom.html","formatted_body":"I ran into this when testing the interaction of <code>AsyncContext</code> with the <code>FinalizationRegistry</code> callback, and seeing what other FR tests did","msgtype":"m.text"},"m.relates_to":{"event_id":"$OTiPnTIRHTyspr3TB0KmREu10BZfudE2uz3ns3ZetVk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689242963952,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6VlvF90pfVCuPws3CL3kwkyztbcEj3XiUGf-oSCMjFY"},
{"content":{"body":" * it includes `cleanupSome` in the features it uses, because otherwise engine262 and maybe other engines will not pass the right flags","format":"org.matrix.custom.html","formatted_body":" * it includes <code>cleanupSome</code> in the features it uses, because otherwise engine262 and maybe other engines will not pass the right flags","m.new_content":{"body":"it includes `cleanupSome` in the features it uses, because otherwise engine262 and maybe other engines will not pass the right flags","format":"org.matrix.custom.html","formatted_body":"it includes <code>cleanupSome</code> in the features it uses, because otherwise engine262 and maybe other engines will not pass the right flags","msgtype":"m.text"},"m.relates_to":{"event_id":"$o6YaLogQnHFWINBvK4HdOC3NxaR3mcO7z54jb0TNfCk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689243044756,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hzzUJv0rQMVKSDyi9MXOPvHx7fVBgA6OE2CWwbft24k"},
{"content":{"body":"rbuckton: re: `throw`; it occurs to me that possibly\n\n```\nThrowExpression: `throw` AssignmentExpression [lookahead ≠ ,]\n```\nmight also work?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: re: <code>throw</code>; it occurs to me that possibly</p>\n<pre><code>ThrowExpression: `throw` AssignmentExpression [lookahead ≠ ,]\n</code></pre>\n<p>might also work?</p>\n","msgtype":"m.text"},"ts":1689243098681,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RdN7MrZ__ivvtSIGIO9--JtsJ_5oQJbDoIEaPWishjE"},
{"content":{"body":"in combination with a `[lookahead ≠ Throw]` restriction in `ExpressionStatement`, to avoid ambiguity","format":"org.matrix.custom.html","formatted_body":"in combination with a <code>[lookahead ≠ Throw]</code> restriction in <code>ExpressionStatement</code>, to avoid ambiguity","msgtype":"m.text"},"ts":1689243156203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dxvPVfEXGtn5sANCfwSmP8fMd_RFxVePKuJODYtQDgg"},
{"content":{"body":"it's a little bit weird, but I think it avoids the `throw a, b` problem","format":"org.matrix.custom.html","formatted_body":"it's a little bit weird, but I think it avoids the <code>throw a, b</code> problem","msgtype":"m.text"},"ts":1689243195865,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WOWBpRyI_iMigHQzXjwT9XStrRNl3N8Oo1nbvdtWffM"},
{"content":{"body":"and lookahead restrictions at the end of productions are precedented in `IfStatement`","format":"org.matrix.custom.html","formatted_body":"and lookahead restrictions at the end of productions are precedented in <code>IfStatement</code>","msgtype":"m.text"},"ts":1689243262374,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-Xh9EFlgOf9f8Mx3y2XcSRH5N-blU6v_eDlAZXHkgIs"},
{"content":{"body":"That could work, and is far simpler than what I was thinking, though it does mean that _ThrowStatement_ and _ThrowExpression_ wouldn't be symmetrical.","format":"org.matrix.custom.html","formatted_body":"That could work, and is far simpler than what I was thinking, though it does mean that <em>ThrowStatement</em> and <em>ThrowExpression</em> wouldn't be symmetrical.","msgtype":"m.text"},"ts":1689243302238,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hHpcjlOq1dSr2qOPyz4_5gAgWPo7-xPVRy5_Ze-zBxs"},
{"content":{"body":"yeah, but you only notice the asymmetry as an author (or implementer), not as a reader","msgtype":"m.text"},"ts":1689243324189,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KigOGs0u388dj3DJ0E0oe3MEpBKFQuZI5x1YuvxU6NQ"},
{"content":{"body":"since as a reader you would simply never encounter `throw a, b` in expression position, so it would not come up","format":"org.matrix.custom.html","formatted_body":"since as a reader you would simply never encounter <code>throw a, b</code> in expression position, so it would not come up","msgtype":"m.text"},"ts":1689243354800,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xB-zGND_YBz0oLfApqVWrw0lRXUxIry39f4cMTj2yEc"},
{"content":{"body":" * in combination with a `[lookahead ≠ throw]` restriction in `ExpressionStatement`, to avoid ambiguity","format":"org.matrix.custom.html","formatted_body":" * in combination with a <code>[lookahead ≠ throw]</code> restriction in <code>ExpressionStatement</code>, to avoid ambiguity","m.new_content":{"body":"in combination with a `[lookahead ≠ throw]` restriction in `ExpressionStatement`, to avoid ambiguity","format":"org.matrix.custom.html","formatted_body":"in combination with a <code>[lookahead ≠ throw]</code> restriction in <code>ExpressionStatement</code>, to avoid ambiguity","msgtype":"m.text"},"m.relates_to":{"event_id":"$dxvPVfEXGtn5sANCfwSmP8fMd_RFxVePKuJODYtQDgg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689243393777,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PAQ8TdeV8CCy-NxI386WRA41aCrVmvpFi9U2YDOOGc0"},
{"content":{"body":"The alternative I had was this:\n```\nExpression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n```\nAnd you could potentially even drop _ThrowStatement_ since it would be fully covered by _ExpressionStatement_ (rather than a lookahead restriction in _ExpressionStatement_.","format":"org.matrix.custom.html","formatted_body":"<p>The alternative I had was this:</p>\n<pre><code>Expression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n</code></pre>\n<p>And you could potentially even drop <em>ThrowStatement</em> since it would be fully covered by <em>ExpressionStatement</em> (rather than a lookahead restriction in <em>ExpressionStatement</em>.</p>\n","msgtype":"m.text"},"ts":1689243419066,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j-uJYLLok21hB2ou15-CMwNuJHwQ5dA2m6H1PY8Ti88"},
{"content":{"body":" * The alternative I had was this:\n\n```\nExpression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n```\n\nAnd you could potentially even drop _ThrowStatement_ since it would be fully covered by _ExpressionStatement_ (rather than a lookahead restriction in _ExpressionStatement_).","format":"org.matrix.custom.html","formatted_body":" * <p>The alternative I had was this:</p>\n<pre><code>Expression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n</code></pre>\n<p>And you could potentially even drop <em>ThrowStatement</em> since it would be fully covered by <em>ExpressionStatement</em> (rather than a lookahead restriction in <em>ExpressionStatement</em>).</p>\n","m.new_content":{"body":"The alternative I had was this:\n\n```\nExpression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n```\n\nAnd you could potentially even drop _ThrowStatement_ since it would be fully covered by _ExpressionStatement_ (rather than a lookahead restriction in _ExpressionStatement_).","format":"org.matrix.custom.html","formatted_body":"<p>The alternative I had was this:</p>\n<pre><code>Expression :\n  ThrowExpression\n  CommaExpression\n\nCommaExpression : // the old Expression production\n  AssignmentExpression\n  CommaExpression `,` AssignmentExpression\n</code></pre>\n<p>And you could potentially even drop <em>ThrowStatement</em> since it would be fully covered by <em>ExpressionStatement</em> (rather than a lookahead restriction in <em>ExpressionStatement</em>).</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$j-uJYLLok21hB2ou15-CMwNuJHwQ5dA2m6H1PY8Ti88","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689243424073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TtvJNdAtMWCwqHlTBDMLZFE0v7ihn7bgNiL8lpUsnso"},
{"content":{"body":"the main place I'd expect you to notice the asymmetry as an author would be like `function f(x = throw new Error('argument is not optional'), y) {]`","format":"org.matrix.custom.html","formatted_body":"the main place I'd expect you to notice the asymmetry as an author would be like <code>function f(x = throw new Error('argument is not optional'), y) {]</code>","msgtype":"m.text"},"ts":1689243449847,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qn58mUARkoeRYe2LB0oKNojrk8PQpe9Hgihf-PVmJ-Q"},
{"content":{"body":"but, that case is one which is hard for readers who are familiar with `ThrowStatement` to read, so I am ok with authors having to deal with asymmetry in that case","format":"org.matrix.custom.html","formatted_body":"but, that case is one which is hard for readers who are familiar with <code>ThrowStatement</code> to read, so I am ok with authors having to deal with asymmetry in that case","msgtype":"m.text"},"ts":1689243486412,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Zjfh6jyNXIjVOmH_g8gNIb3zKFJzwCmdvTlDCZgYmc"},
{"content":{"body":" * the main place I'd expect you to notice the restriction as an author would be like `function f(x = throw new Error('argument is not optional'), y) {]`","format":"org.matrix.custom.html","formatted_body":" * the main place I'd expect you to notice the restriction as an author would be like <code>function f(x = throw new Error('argument is not optional'), y) {]</code>","m.new_content":{"body":"the main place I'd expect you to notice the restriction as an author would be like `function f(x = throw new Error('argument is not optional'), y) {]`","format":"org.matrix.custom.html","formatted_body":"the main place I'd expect you to notice the restriction as an author would be like <code>function f(x = throw new Error('argument is not optional'), y) {]</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Qn58mUARkoeRYe2LB0oKNojrk8PQpe9Hgihf-PVmJ-Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689243492881,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u74wG1mYVaYi80lbhQd-DYG2X5rBMQz3XqNsZ_fmlu0"},
{"content":{"body":" * but, that case is one which is hard for readers who are familiar with `ThrowStatement` to read, so I am ok with authors having to deal with the restriction in that case","format":"org.matrix.custom.html","formatted_body":" * but, that case is one which is hard for readers who are familiar with <code>ThrowStatement</code> to read, so I am ok with authors having to deal with the restriction in that case","m.new_content":{"body":"but, that case is one which is hard for readers who are familiar with `ThrowStatement` to read, so I am ok with authors having to deal with the restriction in that case","format":"org.matrix.custom.html","formatted_body":"but, that case is one which is hard for readers who are familiar with <code>ThrowStatement</code> to read, so I am ok with authors having to deal with the restriction in that case","msgtype":"m.text"},"m.relates_to":{"event_id":"$9Zjfh6jyNXIjVOmH_g8gNIb3zKFJzwCmdvTlDCZgYmc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689243497491,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IUb9oL2gjpEet0ywkWCn2Gaktk8HarKKRThzUausu74"},
{"content":{"body":"With the grammar I mention above, rather than the ambiguity of `throw` in an initializer, you would be forced to write it as `function f(x = (throw new Error(...)), y)` which helps with the ambiguity, with the downside that 99% of the places you'd want to use `throw` requiring parens.","format":"org.matrix.custom.html","formatted_body":"With the grammar I mention above, rather than the ambiguity of <code>throw</code> in an initializer, you would be forced to write it as <code>function f(x = (throw new Error(...)), y)</code> which helps with the ambiguity, with the downside that 99% of the places you'd want to use <code>throw</code> requiring parens.","msgtype":"m.text"},"ts":1689243596202,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hB2FarwYfyjYUQm_6z-Wl0huVl829jg0yVq_a3p4OUE"},
{"content":{"body":"I like your approach though, since I'd venture to guess that the number of `throw` statements that use `,` is vanishingly small.","format":"org.matrix.custom.html","formatted_body":"I like your approach though, since I'd venture to guess that the number of <code>throw</code> statements that use <code>,</code> is vanishingly small.","msgtype":"m.text"},"ts":1689243636546,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-3MlnutLcKZOY8Ivtbo4ZYzfczlCVVU6P1xZ8ZC4hHI"},
{"content":{"body":"pretty small, though probably not vanishingly","msgtype":"m.text"},"ts":1689243678623,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1TdKuXtuBNeuigVlrfwuxha5Ro2MGqNaOqJaRLZNY_4"},
{"content":{"body":"in particular, stuff like\n\n```\nlet obj = {\n  x: condition ? val : throw new Error('condition is not satisfied'),\n  y,\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>in particular, stuff like</p>\n<pre><code>let obj = {\n  x: condition ? val : throw new Error('condition is not satisfied'),\n  y,\n};\n</code></pre>\n","msgtype":"m.text"},"ts":1689243707598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7LPOJHQu0kFHGhwBpGlvDEe7i8Ct1P5GzVNLPZJxnsc"},
{"content":{"body":"so it's still a little annoying","msgtype":"m.text"},"ts":1689243719399,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ncb_s9l8W9fFZ1hfZNSKtegLWdnZz5BjZ5lwPaZVbr0"},
{"content":{"body":"but, no ambiguity.","msgtype":"m.text"},"ts":1689243726819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5QeGhWwobNCj0P3Di3zs_Tk4U7SAfdJECIWHnET_ayU"},
{"content":{"body":"and you fix it with parens and go on with your life","msgtype":"m.text"},"ts":1689243733604,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qsXIUQ2ntMQbFIu1bAvOHQ4G4oki8omPxbkB1ukG8iM"},
{"content":{"body":"> <@bakkot:matrix.org> pretty small, though probably not vanishingly\n\nYeah, minifiers probably do that with `throw` statements today.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1TdKuXtuBNeuigVlrfwuxha5Ro2MGqNaOqJaRLZNY_4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>pretty small, though probably not vanishingly</blockquote></mx-reply>Yeah, minifiers probably do that with <code>throw</code> statements today.","m.relates_to":{"m.in_reply_to":{"event_id":"$1TdKuXtuBNeuigVlrfwuxha5Ro2MGqNaOqJaRLZNY_4"}},"msgtype":"m.text"},"ts":1689243739283,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X4IMS7rjwOBzy9Hz1i-UGz6MjCeHCApHuk3gzq_7L2Y"},
{"content":{"body":"oh, sorry, yes, lots of `throw` statements with `,` because of minifiers","format":"org.matrix.custom.html","formatted_body":"oh, sorry, yes, lots of <code>throw</code> statements with <code>,</code> because of minifiers","msgtype":"m.text"},"ts":1689243760320,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PxLjXlMLmodMs7p28l6xMAMsW8QG2OjtfXv2tQL8Dq4"},
{"content":{"body":"I'm happy with that though. If you *really* wanted to use `,` in your `throw` expression, you could parenthesize.","format":"org.matrix.custom.html","formatted_body":"I'm happy with that though. If you <em>really</em> wanted to use <code>,</code> in your <code>throw</code> expression, you could parenthesize.","msgtype":"m.text"},"ts":1689243772184,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G8vCl0AayLlbQWUQ7M1O3nmtz_vnBq1wssPvJEK68Ys"},
{"content":{"body":"minifiers love commas","msgtype":"m.text"},"ts":1689243773664,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gxVBxq0g9qLoLoTgbTIxrY1nJ6386jWlTzqg62UAArw"},
{"content":{"body":"> <@bakkot:matrix.org> oh, sorry, yes, lots of `throw` statements with `,` because of minifiers\n\nBut probably very few hand-written statements, I would venture to guess.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PxLjXlMLmodMs7p28l6xMAMsW8QG2OjtfXv2tQL8Dq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>oh, sorry, yes, lots of <code>throw</code> statements with <code>,</code> because of minifiers</blockquote></mx-reply>But probably very few hand-written statements, I would venture to guess.","m.relates_to":{"m.in_reply_to":{"event_id":"$PxLjXlMLmodMs7p28l6xMAMsW8QG2OjtfXv2tQL8Dq4"}},"msgtype":"m.text"},"ts":1689243791642,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X_YD_vBg7AL4oJ1WUvnyjL7TAIi65nutnQDRM-Fn_g4"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1689243800309,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G__GLyjIrH-IPN6NFiRT8M7gmljFJV81GlZo2bUU9x8"},
{"content":{"body":"reading the old thread, I have a comment which reads\n\n> Note the comma after the `throw`. How would you propose to forbid it? Would you even want to?\n\nI don't know why it didn't occur to me that you could trivially forbid it with a lookahead...","format":"org.matrix.custom.html","formatted_body":"<p>reading the old thread, I have a comment which reads</p>\n<blockquote>\n<p>Note the comma after the <code>throw</code>. How would you propose to forbid it? Would you even want to?</p>\n</blockquote>\n<p>I don't know why it didn't occur to me that you could trivially forbid it with a lookahead...</p>\n","msgtype":"m.text"},"ts":1689243834268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-VGKqQHVd0RyZnxk7oYvcMe_aahFX6EkHQjJSAurG-A"},
{"content":{"body":"I am happy with ``ThrowExpression : `throw`  AssignmentExpression [lookahead != `,`] ``","format":"org.matrix.custom.html","formatted_body":"I am happy with <code>ThrowExpression : `throw`  AssignmentExpression [lookahead != `,`] </code>","msgtype":"m.text"},"ts":1689243844833,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hqLj-7uQRg6q8KQbbywaIr1SuuJD-HCD0XDeDQImlYc"},
{"content":{"body":"> <@bakkot:matrix.org> reading the old thread, I have a comment which reads\n> \n> > Note the comma after the `throw`. How would you propose to forbid it? Would you even want to?\n> \n> I don't know why it didn't occur to me that you could trivially forbid it with a lookahead...\n\nor me. its only been what, 5 years?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-VGKqQHVd0RyZnxk7oYvcMe_aahFX6EkHQjJSAurG-A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>reading the old thread, I have a comment which reads</p>\n<blockquote>\n<p>Note the comma after the <code>throw</code>. How would you propose to forbid it? Would you even want to?</p>\n</blockquote>\n<p>I don't know why it didn't occur to me that you could trivially forbid it with a lookahead...</p>\n</blockquote></mx-reply>or me. its only been what, 5 years?","m.relates_to":{"m.in_reply_to":{"event_id":"$-VGKqQHVd0RyZnxk7oYvcMe_aahFX6EkHQjJSAurG-A"}},"msgtype":"m.text"},"ts":1689243865481,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MCBKqvbaaLisdODBJ4zivkJsm3-1vQnLASJB3yd8MVM"},
{"content":{"body":"since that comment, almost exactly two years, but for the proposal in general yes","msgtype":"m.text"},"ts":1689243895584,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SLDMz1arf7SyO2wHWqx7iuTpKiWnw_69afQpJI1trAY"},
{"content":{"body":"> <@bakkot:matrix.org> in particular, stuff like\n> \n> ```\n> let obj = {\n>   x: condition ? val : throw new Error('condition is not satisfied'),\n>   y,\n> };\n> ```\n\nI do hope implementations / parsers are able to give a good error message in this case (\"try wrapping the throw expression in parentheses\")","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7LPOJHQu0kFHGhwBpGlvDEe7i8Ct1P5GzVNLPZJxnsc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>in particular, stuff like</p>\n<pre><code>let obj = {\n  x: condition ? val : throw new Error('condition is not satisfied'),\n  y,\n};\n</code></pre>\n</blockquote></mx-reply>I do hope implementations / parsers are able to give a good error message in this case (\"try wrapping the throw expression in parentheses\")","m.relates_to":{"m.in_reply_to":{"event_id":"$7LPOJHQu0kFHGhwBpGlvDEe7i8Ct1P5GzVNLPZJxnsc"}},"msgtype":"m.text"},"ts":1689243978892,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zw-16T8QjcQM8j7K_HfgwdsX8Pjoab7LKTHk-KMzvPQ"},
{"content":{"body":"annoying technical restrictions like this chafe a lot less when you are told immediately how to fix them","msgtype":"m.text"},"ts":1689244014509,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OPnyXdxiKs2AYs4Wmbvt6p3MeNJwNWoy1LyDVuD5B-M"},
{"content":{"body":"seems like it ought to be possible","msgtype":"m.text"},"ts":1689244021054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DVvEtl8S8TfZe_CJJI9U_CDVtEocRlI4pkE5_kgkMvs"},
{"content":{"body":"> <@bakkot:matrix.org> I do hope implementations / parsers are able to give a good error message in this case (\"try wrapping the throw expression in parentheses\")\n\nTypeScript does this for quite a few grammar errors.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zw-16T8QjcQM8j7K_HfgwdsX8Pjoab7LKTHk-KMzvPQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I do hope implementations / parsers are able to give a good error message in this case (\"try wrapping the throw expression in parentheses\")</blockquote></mx-reply>TypeScript does this for quite a few grammar errors.","m.relates_to":{"m.in_reply_to":{"event_id":"$zw-16T8QjcQM8j7K_HfgwdsX8Pjoab7LKTHk-KMzvPQ"}},"msgtype":"m.text"},"ts":1689244032084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KBQowY30Q7-MbHjzZot6SXnD8oqon32_NWUnI4p3p6Q"},
{"content":{"body":"good good","msgtype":"m.text"},"ts":1689244085701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t1fENEAxpkdnT7eONdJrovRtP_ubugpK0l8gZK5RZ8Y"},
{"content":{"body":"I posted your suggestion here: https://github.com/tc39/proposal-throw-expressions/issues/10#issuecomment-1633978974","msgtype":"m.text"},"ts":1689244119069,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WUMaGpc-v4iyYmOyPnne46GmICnZjFDaZOi2Er4-kvw"},
{"content":{"body":"> <@rbuckton:matrix.org> or me. its only been what, 5 years?\n\nDo we care about other restrictions aside from `,`? any infix operator has the same kind of precedence issue, i.e., `throw a = b` as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow _ThrowExpression_ to be a valid assignment target, but other operators like `&&`, `||`, `??`, etc. would have a different precedence. That said, you kind of do want to be able to do `a && throw b || c`, but `throw b || c;` has a different meaning.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MCBKqvbaaLisdODBJ4zivkJsm3-1vQnLASJB3yd8MVM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>or me. its only been what, 5 years?</blockquote></mx-reply>Do we care about other restrictions aside from <code>,</code>? any infix operator has the same kind of precedence issue, i.e., <code>throw a = b</code> as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow <em>ThrowExpression</em> to be a valid assignment target, but other operators like <code>&amp;&amp;</code>, <code>||</code>, <code>??</code>, etc. would have a different precedence. That said, you kind of do want to be able to do <code>a &amp;&amp; throw b || c</code>, but <code>throw b || c;</code> has a different meaning.","m.relates_to":{"m.in_reply_to":{"event_id":"$MCBKqvbaaLisdODBJ4zivkJsm3-1vQnLASJB3yd8MVM"}},"msgtype":"m.text"},"ts":1689244963273,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JqXiPFiiHlZWbzE9gYrbsYug57BWHrK-lUauRSjUnig"},
{"content":{"body":"> <@rbuckton:matrix.org> or me. its only been what, 5 years?\n\n * Do we care about other restrictions aside from `,`? any infix operator has the same kind of precedence issue, i.e., `throw a = b` as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow _ThrowExpression_ to be a valid assignment target, but other operators like `&&`, `||`, `??`, etc. would have a different precedence. That said, you kind of may want to be able to write `a && throw b || c`, but `throw b || c;` has a different meaning.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MCBKqvbaaLisdODBJ4zivkJsm3-1vQnLASJB3yd8MVM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>or me. its only been what, 5 years?</blockquote></mx-reply> * Do we care about other restrictions aside from <code>,</code>? any infix operator has the same kind of precedence issue, i.e., <code>throw a = b</code> as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow <em>ThrowExpression</em> to be a valid assignment target, but other operators like <code>&amp;&amp;</code>, <code>||</code>, <code>??</code>, etc. would have a different precedence. That said, you kind of may want to be able to write <code>a &amp;&amp; throw b || c</code>, but <code>throw b || c;</code> has a different meaning.","m.new_content":{"body":"Do we care about other restrictions aside from `,`? any infix operator has the same kind of precedence issue, i.e., `throw a = b` as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow _ThrowExpression_ to be a valid assignment target, but other operators like `&&`, `||`, `??`, etc. would have a different precedence. That said, you kind of may want to be able to write `a && throw b || c`, but `throw b || c;` has a different meaning.","format":"org.matrix.custom.html","formatted_body":"Do we care about other restrictions aside from <code>,</code>? any infix operator has the same kind of precedence issue, i.e., <code>throw a = b</code> as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow <em>ThrowExpression</em> to be a valid assignment target, but other operators like <code>&amp;&amp;</code>, <code>||</code>, <code>??</code>, etc. would have a different precedence. That said, you kind of may want to be able to write <code>a &amp;&amp; throw b || c</code>, but <code>throw b || c;</code> has a different meaning.","msgtype":"m.text"},"m.relates_to":{"event_id":"$JqXiPFiiHlZWbzE9gYrbsYug57BWHrK-lUauRSjUnig","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689244979019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KRBH_Po67IcCtY1t7p26qhv8vnMTghUa0cgGNkr5z7o"},
{"content":{"body":"Forcing parentheses (i.e., `(throw err)`) does solve all of those precedence concerns, though.","format":"org.matrix.custom.html","formatted_body":"Forcing parentheses (i.e., <code>(throw err)</code>) does solve all of those precedence concerns, though.","msgtype":"m.text"},"ts":1689245119226,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s8eb-tNGnDGvqMkDNDtCnoMFYn2xwE-gx32D0mmD-Kg"},
{"content":{"body":"does it have the same issue? wouldn't `a && throw b || c` parse as `a && (throw b || c)`, like `a && yield b || c` does?","format":"org.matrix.custom.html","formatted_body":"does it have the same issue? wouldn't <code>a &amp;&amp; throw b || c</code> parse as <code>a &amp;&amp; (throw b || c)</code>, like <code>a &amp;&amp; yield b || c</code> does?","msgtype":"m.text"},"ts":1689245253481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JrWwLYm_Bum7W04ML517xFhcUsHU-l28DMJz4pImNJg"},
{"content":{"body":"`throw` is currently specified as a _UnaryExpression_, so it doesn't have the same precedence as `yield`. `a && yield b || c` isn't legal.","format":"org.matrix.custom.html","formatted_body":"<code>throw</code> is currently specified as a <em>UnaryExpression</em>, so it doesn't have the same precedence as <code>yield</code>. <code>a &amp;&amp; yield b || c</code> isn't legal.","msgtype":"m.text"},"ts":1689245321769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aQHys3genCLkeWzsDzfVp80JNXUiUa8jFU_H7HIFlBM"},
{"content":{"body":"_YieldExpression_ is _AssignmentExpression_, so it can't be on the RHS of `&&`.","format":"org.matrix.custom.html","formatted_body":"<em>YieldExpression</em> is <em>AssignmentExpression</em>, so it can't be on the RHS of <code>&amp;&amp;</code>.","msgtype":"m.text"},"ts":1689245347436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PWJ8n0Im08E8kL-3HdqRERsOFCYeePTRSRY2194NSmo"},
{"content":{"body":"ah, right","msgtype":"m.text"},"ts":1689245368826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iSXzI-GWS3mqbrVy9-1EfjbyHQBqkh7nIJpodIwu7bU"},
{"content":{"body":"I forget `yield` is weird","format":"org.matrix.custom.html","formatted_body":"I forget <code>yield</code> is weird","msgtype":"m.text"},"ts":1689245372033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wvGpnzvhEo_2u9wsF2QdlDvLNiPdjMYJDgcRM8APQKM"},
{"content":{"body":"And one of the motivators for `throw` was to use it with `??`, i.e. `const a = b ?? throw new Error()`, so it wouldn't work as `yield` precedence without parens.","format":"org.matrix.custom.html","formatted_body":"And one of the motivators for <code>throw</code> was to use it with <code>??</code>, i.e. <code>const a = b ?? throw new Error()</code>, so it wouldn't work as <code>yield</code> precedence without parens.","msgtype":"m.text"},"ts":1689245434091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K38zk0MVlQ419hPxvANx1fyx8Qnsjrx3S2SebF4_P-8"},
{"content":{"body":"But that's also an alternative to my `CommaExpression` idea. Instead, just make _ThrowExpression_ an _AssignmentExpression_ with the same trailing ``[lookahead != `,`]`` restriction. That would mean you could write `a, throw b`, but not `throw a, b`, which is a bit weird, tbh.","format":"org.matrix.custom.html","formatted_body":"But that's also an alternative to my <code>CommaExpression</code> idea. Instead, just make <em>ThrowExpression</em> an <em>AssignmentExpression</em> with the same trailing <code>[lookahead != `,`]</code> restriction. That would mean you could write <code>a, throw b</code>, but not <code>throw a, b</code>, which is a bit weird, tbh.","msgtype":"m.text"},"ts":1689245533188,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MgBs70w5MZ3-FGg6krcgUJRGCo6sAnEYrvIuDpXYdzc"},
{"content":{"body":"I am not super worried about humans writing comma expressions","msgtype":"m.text"},"ts":1689245587958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$szdgPiTmN6YLoCfC8pG7N9zUPTo0iZlJmq1-9PY65wY"},
{"content":{"body":"they almost exclusively come up when reading minified code, in my experience","msgtype":"m.text"},"ts":1689245608901,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1VdkgQ0lz_IOOQx2b76XiYoilulXAeG1LpsHO0aXFG8"},
{"content":{"body":"occasionally in loop heads but I don't anticipate much use of `throw` there either","format":"org.matrix.custom.html","formatted_body":"occasionally in loop heads but I don't anticipate much use of <code>throw</code> there either","msgtype":"m.text"},"ts":1689245630591,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VqK8-PrH6XAa3vvyw3Bph2ezaLcT2feys9Z_-4EmAps"},
{"content":{"body":"so while I agree that it would be weird that you could write `a, throw b` but not `throw a, b`, my actual concern is preventing you from writing the second thing, and since I don't think anyone would write the first thing the inconsistency doesn't bother me","format":"org.matrix.custom.html","formatted_body":"so while I agree that it would be weird that you could write <code>a, throw b</code> but not <code>throw a, b</code>, my actual concern is preventing you from writing the second thing, and since I don't think anyone would write the first thing the inconsistency doesn't bother me","msgtype":"m.text"},"ts":1689245673487,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0e1g3ARisgowQfU2I02qve7vRK5cPsEhU9UPuExbPpc"},
{"content":{"body":"Do you have a position on the precedence for other infix operators differing between the statement and expression forms, or was `,` your only concern?","format":"org.matrix.custom.html","formatted_body":"Do you have a position on the precedence for other infix operators differing between the statement and expression forms, or was <code>,</code> your only concern?","msgtype":"m.text"},"ts":1689245914003,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$89-Ut30rso1FchGA0ssLWMXCB76tJCgai1Ag7n1uI-I"},
{"content":{"body":"> <@rbuckton:matrix.org> Do we care about other restrictions aside from `,`? any infix operator has the same kind of precedence issue, i.e., `throw a = b` as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow _ThrowExpression_ to be a valid assignment target, but other operators like `&&`, `||`, `??`, etc. would have a different precedence. That said, you kind of may want to be able to write `a && throw b || c`, but `throw b || c;` has a different meaning.\n\n`a && throw b || c` does worry me. I'll have to think more about the tradeoff between that ambiguity and forcing more parens.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JqXiPFiiHlZWbzE9gYrbsYug57BWHrK-lUauRSjUnig?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Do we care about other restrictions aside from <code>,</code>? any infix operator has the same kind of precedence issue, i.e., <code>throw a = b</code> as a statement vs. as an expression. Right now assignment isn't much of an issue in the proposal because the proposal does not allow <em>ThrowExpression</em> to be a valid assignment target, but other operators like <code>&amp;&amp;</code>, <code>||</code>, <code>??</code>, etc. would have a different precedence. That said, you kind of may want to be able to write <code>a &amp;&amp; throw b || c</code>, but <code>throw b || c;</code> has a different meaning.</blockquote></mx-reply><code>a &amp;&amp; throw b || c</code> does worry me. I'll have to think more about the tradeoff between that ambiguity and forcing more parens.","m.relates_to":{"m.in_reply_to":{"event_id":"$JqXiPFiiHlZWbzE9gYrbsYug57BWHrK-lUauRSjUnig"}},"msgtype":"m.text"},"ts":1689246019067,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GOgBPVG5nea6ZbMjHotnde-9vKGNazglGjjUvmGaGLo"},
{"content":{"body":"it is a little less worrying that the `,` case because `throw b || c` isn't really a thing which comes up today, even in minified code, so I am less worried about people misreading it","format":"org.matrix.custom.html","formatted_body":"it is a little less worrying that the <code>,</code> case because <code>throw b || c</code> isn't really a thing which comes up today, even in minified code, so I am less worried about people misreading it","msgtype":"m.text"},"ts":1689246065769,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CDhiIvd0XNMfXX5AXIgG24O_JVoWfA7oe7tR8UK_lH4"},
{"content":{"body":"Would you agree that forcing parens is a working solution, even if only as a fallback?","msgtype":"m.text"},"ts":1689246074411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KHdIDmRHbM4zlcn4AsyhCZlth-qR-6Ei6yVpJ_nBYGs"},
{"content":{"body":"yes, forcing parens solves the ambiguity","msgtype":"m.text"},"ts":1689246090753,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6RwZ24bfcCTDRUNvYYVoIXq6zsEgskS9zeWm_ZKxioA"},
{"content":{"body":"> <@bakkot:matrix.org> it is a little less worrying that the `,` case because `throw b || c` isn't really a thing which comes up today, even in minified code, so I am less worried about people misreading it\n\nBut minifiers, though..","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDhiIvd0XNMfXX5AXIgG24O_JVoWfA7oe7tR8UK_lH4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it is a little less worrying that the <code>,</code> case because <code>throw b || c</code> isn't really a thing which comes up today, even in minified code, so I am less worried about people misreading it</blockquote></mx-reply>But minifiers, though..","m.relates_to":{"m.in_reply_to":{"event_id":"$CDhiIvd0XNMfXX5AXIgG24O_JVoWfA7oe7tR8UK_lH4"}},"msgtype":"m.text"},"ts":1689246095385,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TGLr1nOXJjVP7f8rLgOIvZwhwMcntm9OuUpofA-WmxM"},
{"content":{"body":"even minifiers don't output `throw b || c` in my experience","format":"org.matrix.custom.html","formatted_body":"even minifiers don't output <code>throw b || c</code> in my experience","msgtype":"m.text"},"ts":1689246110183,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eNA-EQ3FkvsiaS7ZJmF3lugBWi8FLlUMVqNiyxITQNE"},
{"content":{"body":"when you hear \"dataflow\", think \"reactivity\"","msgtype":"m.text"},"ts":1689246132013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QuNWl8lY4kuVUboKdjQ6APo4KshKlCc-Dox3Rwj1dVI"},
{"content":{"body":"I expect that they do emit `throw a && b` though, since they often use `&&` as a substitute for `if` ","format":"org.matrix.custom.html","formatted_body":"I expect that they do emit <code>throw a &amp;&amp; b</code> though, since they often use <code>&amp;&amp;</code> as a substitute for <code>if</code>","msgtype":"m.text"},"ts":1689246156942,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JVyrcWyU0FwdgbGu6o3HhW4gqLDz9_qSFbEl4U_koZo"},
{"content":{"body":"littledan: FRP?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: FRP?","msgtype":"m.text"},"ts":1689246162910,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$isczzJGaXXVzeqNzun6vznNa9-zToUZpquYzdNQZgtY"},
{"content":{"body":"> <@rbuckton:matrix.org> I expect that they do emit `throw a && b` though, since they often use `&&` as a substitute for `if`\n\nnot that I can recall seeing. that's equivalent to `if (!a) throw a; throw b;`, but I think that pattern is rare enough to not have been special-cased","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JVyrcWyU0FwdgbGu6o3HhW4gqLDz9_qSFbEl4U_koZo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I expect that they do emit <code>throw a &amp;&amp; b</code> though, since they often use <code>&amp;&amp;</code> as a substitute for <code>if</code></blockquote></mx-reply>not that I can recall seeing. that's equivalent to <code>if (!a) throw a; throw b;</code>, but I think that pattern is rare enough to not have been special-cased","m.relates_to":{"m.in_reply_to":{"event_id":"$JVyrcWyU0FwdgbGu6o3HhW4gqLDz9_qSFbEl4U_koZo"}},"msgtype":"m.text"},"ts":1689246276763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V3E-DF9CxmViFCMHwdCjH857xHegFs_geJdm6Zsdfe8"},
{"content":{"body":"`&&` as a substitute for `if` is mainly useful when the rhs of the `if` is an expression","format":"org.matrix.custom.html","formatted_body":"<code>&amp;&amp;</code> as a substitute for <code>if</code> is mainly useful when the rhs of the <code>if</code> is an expression","msgtype":"m.text"},"ts":1689246298451,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tBmrHoE01Hpm-TQXWSyPb4-bQWAsIMvqPJOgefDT54o"},
{"content":{"body":"looks like `esbuild` does in fact implement that, so it's just that I haven't run into it because it's rare enough","format":"org.matrix.custom.html","formatted_body":"looks like <code>esbuild</code> does in fact implement that, so it's just that I haven't run into it because it's rare enough","msgtype":"m.text"},"ts":1689246401711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k-icP5EQHNmLmUSz4hQH7TUdZ4VYSCr_U6SSSViJiyQ"},
{"content":{"body":"another option, which I am... only kind of serious about, would be\n\n```\n`throw` AssignmentExpression [lookahead ∈ {`)`, `}`, `;`, EOF} ]\n```","format":"org.matrix.custom.html","formatted_body":"<p>another option, which I am... only kind of serious about, would be</p>\n<pre><code>`throw` AssignmentExpression [lookahead ∈ {`)`, `}`, `;`, EOF} ]\n</code></pre>\n","msgtype":"m.text"},"ts":1689246584820,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VKGS6_ii9PCKDw2idOsA0O2XXx4dCejPDkbL2MfbF9o"},
{"content":{"body":"this would be fine if everyone used semis consistently","msgtype":"m.text"},"ts":1689246598893,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NS1b0XVdBrg2g3Stj2MwQbmQPNPmDV9LxQMYnXVsufI"},
{"content":{"body":"Why would you disallow `)`?","format":"org.matrix.custom.html","formatted_body":"Why would you disallow <code>)</code>?","msgtype":"m.text"},"ts":1689246629252,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ii1Om-FCeLKbJqziMNn1qit53RoAm5Bm08zT2jz7MCQ"},
{"content":{"body":"that's an allowlist, not a denylist","msgtype":"m.text"},"ts":1689246638273,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9Ez4kyq2RlzlK4JmyKDKpqE7f8KMzvZnfBKJWs48QtE"},
{"content":{"body":"the grammar sees source post-ASI","msgtype":"m.text"},"ts":1689246640068,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A"},
{"content":{"body":"Ah, sorry. I see.","msgtype":"m.text"},"ts":1689246644713,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A5k98xYDEwDIe5Us6NtMq94_2fXvdcVy_ElzlJuEBiQ"},
{"content":{"body":"> <@michaelficarra:matrix.org> the grammar sees source post-ASI\n\noh, hm. that's a fair point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the grammar sees source post-ASI</blockquote></mx-reply>oh, hm. that's a fair point.","m.relates_to":{"m.in_reply_to":{"event_id":"$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A"}},"msgtype":"m.text"},"ts":1689246667047,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yJ4VLY9eJPZi_3OS7bJbj-hH6_3E7dy9vVOLIpxVfYA"},
{"content":{"body":"> <@michaelficarra:matrix.org> the grammar sees source post-ASI\n\nish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting `;`)\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the grammar sees source post-ASI</blockquote></mx-reply>ish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting <code>;</code>)\"","m.relates_to":{"m.in_reply_to":{"event_id":"$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A"}},"msgtype":"m.text"},"ts":1689246685474,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_7Bj5FBW6TMnA53MRl-0v3ah5aVU6O2qTsT9sYllbus"},
{"content":{"body":"> <@michaelficarra:matrix.org> the grammar sees source post-ASI\n\n * ish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting `;`\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B7QxEN_iyTniQfc2yaVOwLo0vnk8z4TRsK0a82iCk9A?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the grammar sees source post-ASI</blockquote></mx-reply> * ish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting <code>;</code>\"","m.new_content":{"body":"ish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting `;`\"","format":"org.matrix.custom.html","formatted_body":"ish. true for most parsers, but the spec says \"parse it. if parse fails, see if it parses after inserting <code>;</code>\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$_7Bj5FBW6TMnA53MRl-0v3ah5aVU6O2qTsT9sYllbus","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689246694225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-WwL_imNKj1BWYxFIT8UI1lMEiX8QaE2VIiVVrrprk8"},
{"content":{"body":"yes, it would have to be otherwise invalid","msgtype":"m.text"},"ts":1689246713067,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4hvqyGIEGR1xEawOS2Sl6LuPCWtNMQYP1qOlsVla6qs"},
{"content":{"body":"in this case it would be though","msgtype":"m.text"},"ts":1689246725468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0otrjkLwFKblmJbSyEJ_RN3JteGuvkX7hMA7NSNsMvw"},
{"content":{"body":"the grammar has to see source pre-ASI for ASI to work.","msgtype":"m.text"},"ts":1689246726505,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ixwKWkrx2-CMPJ2tZnEpD5bvQiwXjaekagbJPUiJp_A"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1689246740457,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7xB8a1ml_XGztjCJ8nJF4RkjFIWHlkYcIwgugY51jEE"},
{"content":{"body":"`EOF` isn't defined in the spec though.","format":"org.matrix.custom.html","formatted_body":"<code>EOF</code> isn't defined in the spec though.","msgtype":"m.text"},"ts":1689246771675,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uTcYUqRfcyCLUm3Bylp9knECO6OwQeibPgiC8KCb4sQ"},
{"content":{"body":"I thought we had a way to assert on end of input","msgtype":"m.text"},"ts":1689246812891,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-cCxK3thgixQg_TlExQpSHjZIAgs_hFh-lDualk3lA8"},
{"content":{"body":"\"end of input\" is mentioned only once in terms of White Space. We also have something like \"parsed...with no tokens left over\" for cover grammars","msgtype":"m.text"},"ts":1689246969710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HBHbR3NBZT4pMPsvfBwi9aACNC5Uu9mYZF0CDGuVqnQ"},
{"content":{"body":"and \"with no tokens left over\" is mentioned in The Syntactic Grammar as well when discussing the Script and Module goals.","msgtype":"m.text"},"ts":1689247027791,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9QDpFnr717qJJxW-86RFe0b1wT568y426_xqlCy_odg"},
{"content":{"body":"\"end of the input stream\" is mentioned in the rules for ASI","msgtype":"m.text"},"ts":1689247087297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uGI1CkuIq6bzhXdZrZHYZjJ6aOdkMa26YeI1ZwPO-tc"},
{"content":{"body":"the EOF isn't necessary because of the ASI thing","msgtype":"m.text"},"ts":1689247105488,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mhbv1uwhV3iZyvOTN9chGHP7gGqSP3DqJngH30HqTTM"},
{"content":{"body":"strike it from my suggestion","msgtype":"m.text"},"ts":1689247114948,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xaCsKHJ-iMie1V7nNq6YzTCDPHPHqh4OUTGVXHlZ8XI"},
{"content":{"body":"Also, `]` should be allowed as well.","format":"org.matrix.custom.html","formatted_body":"Also, <code>]</code> should be allowed as well.","msgtype":"m.text"},"ts":1689247133541,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bnW9SQ6DHUMr1Fdwdz5s63j3VPlQmd4G4Ko3a0Bd4e4"},
{"content":{"body":"if you had `a ?? throw b` at the end of the program, ASI would add a `;` so it would parse","format":"org.matrix.custom.html","formatted_body":"if you had <code>a ?? throw b</code> at the end of the program, ASI would add a <code>;</code> so it would parse","msgtype":"m.text"},"ts":1689247136415,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XlNioROkzMRkoqQBBuiUEFJRiT_R_VjuHDOFrTlm1H0"},
{"content":{"body":"yup, agreed on `]`","format":"org.matrix.custom.html","formatted_body":"yup, agreed on <code>]</code>","msgtype":"m.text"},"ts":1689247143750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IDnErt2bUEdnyqp_3aGRElar-snLuAgR3b-Hs-cNvEk"},
{"content":{"body":"And maybe `{` for something like `class extends a || throw b {`?","format":"org.matrix.custom.html","formatted_body":"And maybe <code>{</code> for something like <code>class extends a || throw b {</code>?","msgtype":"m.text"},"ts":1689247160757,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4gnqEc82MkTXBzhrpNQt2PPMSlb6cNYwshoqSBBOlXo"},
{"content":{"body":"also should add `:`","format":"org.matrix.custom.html","formatted_body":"also should add <code>:</code>","msgtype":"m.text"},"ts":1689247162539,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bsseZr-KTrcY_P9_pqR3uKYqhXYDh5nrUoZyCaP7IBY"},
{"content":{"body":"for `case`?","format":"org.matrix.custom.html","formatted_body":"for <code>case</code>?","msgtype":"m.text"},"ts":1689247168600,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kO0atOsDg9Awum2nYSX39lMjlzOqiLUzOMmTTTZX-tU"},
{"content":{"body":"for `a ? throw b : c`","format":"org.matrix.custom.html","formatted_body":"for <code>a ? throw b : c</code>","msgtype":"m.text"},"ts":1689247174146,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$36Gd1rFhx8eBvc0uFyJ2Ry2satUKqienG-ByO43cWag"},
{"content":{"body":"might be easier to enumerate operators which should be disallowed instead, really","msgtype":"m.text"},"ts":1689247189170,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cGuCRHpHkxwwl8Icl8YI2jWH61CcmGIqWYBobb8nBsE"},
{"content":{"body":"Ah, yes. but also `case`. There are a lot of tokens to consider and its possible that list would need to change if/when new syntax is added.","format":"org.matrix.custom.html","formatted_body":"Ah, yes. but also <code>case</code>. There are a lot of tokens to consider and its possible that list would need to change if/when new syntax is added.","msgtype":"m.text"},"ts":1689247205893,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nRrdZ_ouAkE7xAGscgn506_gRuuFLVh4I_0ECbt6oo0"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1689247211350,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKti6Qp8kFXhrByfpYYPW8Yos2iC4m4owa7H-ikIijA"},
{"content":{"body":"Yeah, I think its easier to restrict to all of the infix operators, or maybe pull out part of _OtherPunctuators_ in the lexical grammar.","format":"org.matrix.custom.html","formatted_body":"Yeah, I think its easier to restrict to all of the infix operators, or maybe pull out part of <em>OtherPunctuators</em> in the lexical grammar.","msgtype":"m.text"},"ts":1689247321107,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xU_oorXTD7tNWbq82YfmtiDDyXkbxPOM55BkfRQw3gw"},
{"content":{"body":"It helped to write the `using` implementation in engine262 when writing tests as a way to verify both the implementation and the test itself.","format":"org.matrix.custom.html","formatted_body":"It helped to write the <code>using</code> implementation in engine262 when writing tests as a way to verify both the implementation and the test itself.","msgtype":"m.text"},"ts":1689247932766,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8SkjR7UDbGFHD7h_IHelIwM-5YCzyxLB3XT_qc-TmUk"},
{"content":{"body":"Does the current process call for reviewers specifically to review the test262 tests? And if so, are there published guidelines for how to review them?","msgtype":"m.text"},"ts":1689247970519,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$oW0w_DYPl1SDet0h_x4D2K_ZpH2qzSezfT5Nw4riAxM"},
{"content":{"body":"no, reviewers review the spec","msgtype":"m.text"},"ts":1689247984920,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$5Oj-r3NE7Nh1sneYdwHh5fT2anOXvttWLUNl0XTc-Y0"},
{"content":{"body":"test262 tests are reviewed by test262 maintainers","msgtype":"m.text"},"ts":1689247999402,"senderName":"ryzokuken 🇳🇴","senderId":"@usharma:igalia.com","id":"$dY1Unx-bkhCSfqD_PyoFtEpK35t3ZRspG04iE3uvTxM"},
{"content":{"body":"stage 3 reviewers are hereby enthusiastically invited to review the tests, though!","msgtype":"m.text"},"ts":1689248102265,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$HTj-X4vFFkJzCpRIk8hrVKadL-eBI4YviXXsgygBsnA"},
{"content":{"body":"it really helps the maintainers if the real experts on a proposal weigh in","msgtype":"m.text"},"ts":1689248116016,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$lYCLEuTEnXbFcPQ0lAe40VrIPTVxG28wuUP-PeK_j7s"},
{"content":{"body":"Though I'd contributed to test262 in the past, I found it very difficult to get started on the tests for `using` as I found the documentation was somewhat lacking in terms of how to set up the environment, and I had trouble running the tests on Windows and had to use WSL. ","format":"org.matrix.custom.html","formatted_body":"Though I'd contributed to test262 in the past, I found it very difficult to get started on the tests for <code>using</code> as I found the documentation was somewhat lacking in terms of how to set up the environment, and I had trouble running the tests on Windows and had to use WSL.","msgtype":"m.text"},"ts":1689248129656,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$viwsCMexvBsLpxREm5wmCaiRmf6mKcG4uEcGcIHm71E"},
{"content":{"body":"would you like to bring that up in #test262-maintainers:matrix.org and maybe contribute better documentation for that use case?","format":"org.matrix.custom.html","formatted_body":"would you like to bring that up in <a href=\"https://matrix.to/#/#test262-maintainers:matrix.org\">#test262-maintainers:matrix.org</a> and maybe contribute better documentation for that use case?","msgtype":"m.text"},"ts":1689248176501,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$P5ehukKSdpDhoGk787WCFTGyMX1dISjmnt2_tyHMoqQ"},
{"content":{"body":"Plus there is a lot of hunting around to figure out what files you need to add to `includes: []` for some assertions. The experience of working with test262 in an editor like VSCode wasn't great. ","format":"org.matrix.custom.html","formatted_body":"Plus there is a lot of hunting around to figure out what files you need to add to <code>includes: []</code> for some assertions. The experience of working with test262 in an editor like VSCode wasn't great.","msgtype":"m.text"},"ts":1689248211089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T7ft9hy_PRP7nFdKTywmouxDwhNlG-GCHkPpoYcScyM"},
{"content":{"body":"> <@pchimento:igalia.com> would you like to bring that up in #test262-maintainers:matrix.org and maybe contribute better documentation for that use case?\n\nI can bring it up, but it would be hard to document myself if I don't actually have a strong grasp of what needs to be documented.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P5ehukKSdpDhoGk787WCFTGyMX1dISjmnt2_tyHMoqQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>would you like to bring that up in <a href=\"https://matrix.to/#/#test262-maintainers:matrix.org\">#test262-maintainers:matrix.org</a> and maybe contribute better documentation for that use case?</blockquote></mx-reply>I can bring it up, but it would be hard to document myself if I don't actually have a strong grasp of what needs to be documented.","m.relates_to":{"m.in_reply_to":{"event_id":"$P5ehukKSdpDhoGk787WCFTGyMX1dISjmnt2_tyHMoqQ"}},"msgtype":"m.text"},"ts":1689248254171,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VfqNf9FxZgMgAJfTcKQyvMI7p7LGGMKu4TTDzOndBXY"},
{"content":{"body":"this is valuable feedback and I'd love to have a follow up on it","msgtype":"m.text"},"ts":1689248265425,"senderName":"ptomato (at TC39, limited availability)","senderId":"@pchimento:igalia.com","id":"$yZ5iX5CF2O6Qmovq0VKRnoPouVxz0-QWJQLniwEF4EQ"},
{"content":{"body":"I forwarded the messages to the maintainers chat","msgtype":"m.text"},"ts":1689248342599,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8vYDH2vNVRPIwmovENN_oiI0d-93zMWSXb9bwWrU9Ek"},
{"content":{"body":"What msaboff is saying is exactly why I wrote an implementation for engine262 to verify the tests themselves were accurate.","format":"org.matrix.custom.html","formatted_body":"What <a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a> is saying is exactly why I wrote an implementation for engine262 to verify the tests themselves were accurate.","msgtype":"m.text"},"ts":1689248389994,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uUPsBQwt1GTSiR8ecKQ-tV-LTiP8Y8z5NesTg5HRJjU"},
{"content":{"body":"I know michael used polyfills to exercise the iterator helpers tests","msgtype":"m.text"},"ts":1689248428356,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gGSHR7HHyu-osbzf-ZRwINeF5lHdm8_IO2IZsANYpkA"},
{"content":{"body":"I think it's kinda inconsequential whether the reviews happen before or after tests are written, and it'd be fine to shift this later. I'd be uneasy about potentially weakening \"Stage 3\" which is why I like the numbering Michael used.","msgtype":"m.text"},"ts":1689248800264,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7WmjAFo_o07823aSkEGELfRcRkUkrKilZwAgswoOyeM"},
{"content":{"body":"Maybe stage 3 🔴 and 3 🟢?","msgtype":"m.text"},"ts":1689248926314,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$VXx24jJZ4uItmNyR3SC1e1TtKGSBJ87WvbroOU2bvZE"},
{"content":{"body":"Stage 3⁺ and Stage 3₋","msgtype":"m.text"},"ts":1689248956752,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ScwrGL7yLKkCWywR6xKgJZTKVKhk-SK_YzNGnewCnkE"},
{"content":{"body":"3.-0 and 3.+0","msgtype":"m.text"},"ts":1689249157431,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$cmauU7shgKwosC7GOdX-rHl1zrBGcut5sdgZw68vY38"},
{"content":{"body":"littledan: i don't think it is actually, it should happen before tests are written","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: i don't think it is actually, it should happen before tests are written","msgtype":"m.text"},"ts":1689249363757,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b8_G5UidZu02nzRbKM1By4nU-y5DQigFfowHLcJuJqA"},
{"content":{"body":"reviews can trigger non-implementation-motivated normative changes, no?","msgtype":"m.text"},"ts":1689249403622,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sEn62Y9Zs4uW0xsDqb-q2Q61Q94oc4LhcIFr_nC-9i4"},
{"content":{"body":"please advance the queue","msgtype":"m.text"},"ts":1689249627665,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FBVsq_yZdgTx7fRbfpyFAaoQfoZ6vgYVV_fiYziM9FM"},
{"content":{"body":"> <@littledan:matrix.org> I think it's kinda inconsequential whether the reviews happen before or after tests are written, and it'd be fine to shift this later. I'd be uneasy about potentially weakening \"Stage 3\" which is why I like the numbering Michael used.\n\nAdding a stage before stage 3 makes stage 3 stronger, but not doing so doesn't make it weaker","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7WmjAFo_o07823aSkEGELfRcRkUkrKilZwAgswoOyeM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it&#39;s kinda inconsequential whether the reviews happen before or after tests are written, and it&#39;d be fine to shift this later. I&#39;d be uneasy about potentially weakening &quot;Stage 3&quot; which is why I like the numbering Michael used.</blockquote></mx-reply>Adding a stage before stage 3 makes stage 3 stronger, but not doing so doesn't make it weaker","m.relates_to":{"m.in_reply_to":{"event_id":"$7WmjAFo_o07823aSkEGELfRcRkUkrKilZwAgswoOyeM"}},"msgtype":"m.text"},"ts":1689249697346,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TWd7t61QbXvIolHdmq-4pt9Em8LNeYKEFRr8SBTvf1k"},
{"content":{"body":"in my ideal world, implementations would start at stage 2.75, and would write tests, and then champions would do the work of getting those tests into test262 proper, and then get stage 3","msgtype":"m.text"},"ts":1689249726016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RiWxLXFIfieHN9Hl2IuVYDJpkXyK89_bQ03fy0HGwNU"},
{"content":{"body":"not sure why my topic was converted to a reply and pushed up","msgtype":"m.text"},"ts":1689249820997,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m2mhBKcvysaB7j29bsLNKxKdsAlHOHBScjQUcEur718"},
{"content":{"body":"I'd prefer to wait to raise this separate topic","msgtype":"m.text"},"ts":1689249834834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RDYo7YPIoEM-iH4Hm-4aec3koGVDUpSrhy3yflyiHPE"},
{"content":{"body":"We will take the photo on the mezzanine floor at 14:20","msgtype":"m.text"},"ts":1689250355806,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$N8hz5-OajTJYW91dRZHk6vUUy3BWnldn2sjfUOT0JcM"},
{"content":{"body":"Jesse (TC39): Michael Ficarra please let me know if you would indeed like to sacrifice the Decimal continuation for a continuation of the stage/process discussion","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse (TC39)</a>: <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> please let me know if you would indeed like to sacrifice the Decimal continuation for a continuation of the stage/process discussion","msgtype":"m.text"},"ts":1689250846566,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$9GiMt4hZIo067VZdJFnQZj7RfkAVdBHaA_661CGWE0w"},
{"content":{"body":"yes, sacrifice is OK","msgtype":"m.text"},"ts":1689251058263,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$rQzyLzgPOFcyygiiyVYYXBJTfapb1OxalRIjkClNJaY"},
{"content":{"body":"I would accept additional time for the process topic","msgtype":"m.text"},"ts":1689251271319,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$umHL5AzMZP5VJbPNjeCVaAvv9wQuj_8yKXwNOwchFOo"},
{"content":{"body":"what diff between getUint8Clamped and getUint8 ?","msgtype":"m.text"},"ts":1689251397554,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$92QLkQCQCX49xL3neUkRy0Gs3-rSo6pO_jVTpcOqkjI"},
{"content":{"body":"there is no difference","msgtype":"m.text"},"ts":1689251466625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LuJ_xXbwHvoEQ5pIBaGgbCcf_lCnoXeo6Bld__ztiUo"},
{"content":{"body":"they could literally be the same function object","msgtype":"m.text"},"ts":1689251621979,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ApGTuvSv1hgyT0tGgmFuiQLSgkxRKuB8LRoWJaEYLdg"},
{"content":{"body":"this proposal feels like a good reason for us to have introduced the \"someone must explicitly second for it to advance\"","msgtype":"m.text"},"ts":1689251797425,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q9RWHmhDCkcRTa-LXcPMYeCaSkA6NRycnumuAzxIERY"},
{"content":{"body":"> <@michaelficarra:matrix.org> they could literally be the same function object\n\n+1, like for `[][Symbol.iterator] === [].values`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ApGTuvSv1hgyT0tGgmFuiQLSgkxRKuB8LRoWJaEYLdg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>they could literally be the same function object</blockquote></mx-reply>+1, like for <code>[][Symbol.iterator] === [].values</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$ApGTuvSv1hgyT0tGgmFuiQLSgkxRKuB8LRoWJaEYLdg"}},"msgtype":"m.text"},"ts":1689251983713,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$g9eKsVl7UukYLwXO5jYwLHFTvtDaVV7jzYAST7sf1vY"},
{"content":{"body":"what is the .name","msgtype":"m.text"},"ts":1689252005888,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1GUaNMlCiPKMRKgo3OegchzSjpGAPX9yW3aq5RgYm2c"},
{"content":{"body":"I _think_ \"value\"","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> \"value\"","msgtype":"m.text"},"ts":1689252014026,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$lgIPYuqux3unGVk81g8_QyXtD_ucVh4BE5X4Ak-9vA0"},
{"content":{"body":" * I _think_ \"values\"","format":"org.matrix.custom.html","formatted_body":" * I <em>think</em> \"values\"","m.new_content":{"body":"I _think_ \"values\"","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> \"values\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$lgIPYuqux3unGVk81g8_QyXtD_ucVh4BE5X4Ak-9vA0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689252016691,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$z79Hs-0dy5s_u6xW4mXVqBa5oDaTDLJ25p2m51VJiXE"},
{"content":{"body":"`\"getUint8(Clamped)\"","msgtype":"m.text"},"ts":1689252026032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4rNu2jLpXtiXvsJHCmqlrBUngRwThOf6oAAian9EL8E"},
{"content":{"body":" * \\`\"getUint8(Clamped)\"`","format":"org.matrix.custom.html","formatted_body":" * `&quot;getUint8(Clamped)&quot;`","m.new_content":{"body":"\\`\"getUint8(Clamped)\"`","format":"org.matrix.custom.html","formatted_body":"`&quot;getUint8(Clamped)&quot;`","msgtype":"m.text"},"m.relates_to":{"event_id":"$4rNu2jLpXtiXvsJHCmqlrBUngRwThOf6oAAian9EL8E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689252029596,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VFbsRPnJ2tUpaDrczvfnUuGQFRaykPOBFfd_5KeOYAc"},
{"content":{"body":"we only have 1 choice there","msgtype":"m.text"},"ts":1689252038888,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aFqIZatWtIsy3D-F0UC9WXnX-PktQPrrBa7MyLeXXGI"},
{"content":{"body":"oh no i meant for the DataView methods","msgtype":"m.text"},"ts":1689252040013,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NJgntZynjqXNv1vNeck9KU-Tw_oQDqiIvIveuMGu2wU"},
{"content":{"body":"since the non-clamped one already has a name","msgtype":"m.text"},"ts":1689252057593,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bJbBRNVitG8wCHR4VIdWGl1mdhBTx4O-d8aLGGwjM_w"},
{"content":{"body":"boo","msgtype":"m.text"},"ts":1689252064933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r0Kf-7pnTQBzYXhk9JrI_6Eg3DqusksbeH2zA2-Ut3M"},
{"content":{"body":"let's add a directive: \"no coercing\" 😂","msgtype":"m.text"},"ts":1689252371682,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$bxhgkPa1y_3VkgV49byc8MKP1V5ENLXASMnc2lVacZY"},
{"content":{"body":"no need","msgtype":"m.text"},"ts":1689252380139,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sy6YB4pYvKepthLr9cjgMue_jUp88oxEyJLhwN7VgX8"},
{"content":{"body":" * let's add a directive: \"no coercing\" 😂 for the old APIs","m.new_content":{"body":"let's add a directive: \"no coercing\" 😂 for the old APIs","msgtype":"m.text"},"m.relates_to":{"event_id":"$bxhgkPa1y_3VkgV49byc8MKP1V5ENLXASMnc2lVacZY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1689252426036,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$OE3EUi4-RbyTV1ohzv2UnTaglHzX6zRixO35V3YZ8RI"},
{"content":{"body":"omg that padStart one was disgusting","msgtype":"m.text"},"ts":1689252726177,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$t1BSOaJmoI7CDs2v5nqZJBOrx6QmLO4Tr_5Jev0AyI4"},
{"content":{"body":"I'd prefer `'ky'.padStart(5, Number)`!","format":"org.matrix.custom.html","formatted_body":"I'd prefer <code>'ky'.padStart(5, Number)</code>!","msgtype":"m.text"},"ts":1689252790682,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$nybbkGRwT_CsLiSLHj7PF66Haj7KfCzxBMOB9aC1z_I"},
{"content":{"body":"I can see people relying on primitive-to-string conversion","msgtype":"m.text"},"ts":1689253170649,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$51GdQZLPle5N4kci1HUnCiObNAFYHuK45aDJYUNxK2U"},
{"content":{"body":"I know Java devs love it","msgtype":"m.text"},"ts":1689253174684,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$W0UYn8LNsUj0V1GR6RRhSJcg4oCMml4GGYDXAhZiPlQ"},
{"content":{"body":"I never used coercion for params and I would not let someone pass in a review, if there were to use it...","msgtype":"m.text"},"ts":1689253384525,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$PRZBTePDQVi6xodbB2dMHULCacK1mvom4mZKUtkMg0E"}
]