[
{"content":{"body":"> <@ljharb:matrix.org> right, true enough. altho probably not a ton, since having a thenable module is broken in node (i forget if it's broken just in the repl, or just not in the repl)\n\n IIRC a machine learning library uses this to emulate TLA, so they don't need to request the user to wait for the Web Assembly to be loaded","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fQUH-mX2sGnHo0uRtyfGKmypjSRK3UurrIZwxp_UQgw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />right, true enough. altho probably not a ton, since having a thenable module is broken in node (i forget if it's broken just in the repl, or just not in the repl)</blockquote></mx-reply>IIRC a machine learning library uses this to emulate TLA, so they don't need to request the user to wait for the Web Assembly to be loaded","m.relates_to":{"m.in_reply_to":{"event_id":"$fQUH-mX2sGnHo0uRtyfGKmypjSRK3UurrIZwxp_UQgw"}},"msgtype":"m.text"},"ts":1652140956554,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UmS2UBZO9CqWwu1FwczMQ31CsSo-KCibhHZOFTVWAtM"},
{"content":{"body":"> <@rbuckton:matrix.org> Rather than adding a symbol to the module, could we allow a user to add a built-in symbol to a function they export named `then` that would indicate it shouldn't be used for Promise fulfillment? Non-native promises might not understand it, but it would still work for imports. \n\nOh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KKPHWRFcXWWVJGuJDiXggSnssyuN9O3Q6QYeF5k86JE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />Rather than adding a symbol to the module, could we allow a user to add a built-in symbol to a function they export named <code>then</code> that would indicate it shouldn't be used for Promise fulfillment? Non-native promises might not understand it, but it would still work for imports.</blockquote></mx-reply>Oh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun","m.relates_to":{"m.in_reply_to":{"event_id":"$KKPHWRFcXWWVJGuJDiXggSnssyuN9O3Q6QYeF5k86JE"}},"msgtype":"m.text"},"ts":1652141209667,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-X83mtBCIuA1kLAoY8_T5EkY_Cbbi2ke1kuBlnSTTjU"},
{"content":{"body":"> <@jackworks:matrix.org> Oh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun\n\nAny changes will make promises more complex.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-X83mtBCIuA1kLAoY8_T5EkY_Cbbi2ke1kuBlnSTTjU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>Oh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun</blockquote></mx-reply>Any changes will make promises more complex.","m.relates_to":{"m.in_reply_to":{"event_id":"$-X83mtBCIuA1kLAoY8_T5EkY_Cbbi2ke1kuBlnSTTjU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> Oh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun\n\nAny changes will make promises more complex.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-X83mtBCIuA1kLAoY8_T5EkY_Cbbi2ke1kuBlnSTTjU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>Oh this idea is more interesting, but looks like they don't want to make promises more complex to fix this footgun</blockquote></mx-reply>Any changes will make promises more complex.","mimetype":"text/html"}]},"ts":1652141504972,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$H1ypsChNPjlxgJJl_1LGDeBseytLLCiVRaKy5hIQ8dg"},
{"content":{"body":"yeah of course","msgtype":"m.text","org.matrix.msc1767.text":"yeah of course"},"ts":1652142997318,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$JAxLGCJ5HsgmdwENQEDuUpp9poP25bIhZQmjIhBUIDw"},
{"content":{"body":"that's a tradeoff, some prefer fixing footgun and some prefer simplicity","msgtype":"m.text","org.matrix.msc1767.text":"that's a tradeoff, some prefer fixing footgun and some prefer simplicity"},"ts":1652143033365,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$z1tlTqnOSPdopvXmh5vIwWXPY_BjCujggyP9Yv_JLvQ"},
{"content":{"body":"https://wintercg.org/work","msgtype":"m.text","org.matrix.msc1767.text":"https://wintercg.org/work"},"ts":1652143241252,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WZL3fKPvQ1NrfbkyLrJY28fUgf7bCLKrhFzKh-c0Xkc"},
{"content":{"body":"What about:\n\n```\nlet { _then: then } = import(path, {\n  alias: { then: _then }\n});\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>What about:</p>\n<pre><code>let { _then: then } = import(path, {\n  alias: { then: _then }\n});\n</code></pre>","msgtype":"m.text"},"ts":1652166527583,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3DNdVOHUZitkIhFbkv9QHbGaFUuvRel-KXUfbqNZZ7w"},
{"content":{"body":"Reminder: Please fill in the delegate survey to help guide the July plenary that could happen in SF.\n\nhttps://github.com/tc39/Reflector/issues/434","msgtype":"m.text"},"ts":1652171948203,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$d4o9TYSag9T__VVwflERHdgKqoW0q88FJh9Ad5U-CuY"},
{"content":{"body":"does anyone know what the difference between `::` and `:::` in ecmarkup grammar signifies? re. https://github.com/tc39/proposal-temporal/issues/2190","format":"org.matrix.custom.html","formatted_body":"does anyone know what the difference between <code>::</code> and <code>:::</code> in ecmarkup grammar signifies? re. https://github.com/tc39/proposal-temporal/issues/2190","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"does anyone know what the difference between `::` and `:::` in ecmarkup grammar signifies? re. https://github.com/tc39/proposal-temporal/issues/2190","mimetype":"text/plain"},{"body":"does anyone know what the difference between <code>::</code> and <code>:::</code> in ecmarkup grammar signifies? re. https://github.com/tc39/proposal-temporal/issues/2190","mimetype":"text/html"}]},"ts":1652208869342,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$K1mHBnkNZFxHfkrufE6czCVr1tP19bvlesstvcgg1uE"},
{"content":{"body":"`:::` is for the number grammar","format":"org.matrix.custom.html","formatted_body":"<code>:::</code> is for the number grammar","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`:::` is for the number grammar","mimetype":"text/plain"},{"body":"<code>:::</code> is for the number grammar","mimetype":"text/html"}]},"ts":1652209178060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6jQ6AA-u_dncsX1u8q68yzAqEfl_yTYbhvt7mVBJyz8"},
{"content":{"body":" * `:::` is for the grammar used for parsing strings to numbers","format":"org.matrix.custom.html","formatted_body":" * <code>:::</code> is for the grammar used for parsing strings to numbers","m.new_content":{"body":"`:::` is for the grammar used for parsing strings to numbers","format":"org.matrix.custom.html","formatted_body":"<code>:::</code> is for the grammar used for parsing strings to numbers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`:::` is for the grammar used for parsing strings to numbers","mimetype":"text/plain"},{"body":"<code>:::</code> is for the grammar used for parsing strings to numbers","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6jQ6AA-u_dncsX1u8q68yzAqEfl_yTYbhvt7mVBJyz8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `:::` is for the grammar used for parsing strings to numbers","mimetype":"text/plain"},{"body":" * <code>:::</code> is for the grammar used for parsing strings to numbers","mimetype":"text/html"}]},"ts":1652209206272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e36bcN2zbhrVGlgV3NY9qJNQrWU7lGb9j1FbKsMZM7E"},
{"content":{"body":"in like `+'10'`, I mean, not when parsing actual number literals","format":"org.matrix.custom.html","formatted_body":"in like <code>+'10'</code>, I mean, not when parsing actual number literals","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"in like `+'10'`, I mean, not when parsing actual number literals","mimetype":"text/plain"},{"body":"in like <code>+'10'</code>, I mean, not when parsing actual number literals","mimetype":"text/html"}]},"ts":1652209285180,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R1NvlVAPVg6Zhs9gIn8sJn_HYNyQyovcmymakv2H3r0"},
{"content":{"body":"it's never used when actually parsing source text","msgtype":"m.text","org.matrix.msc1767.text":"it's never used when actually parsing source text"},"ts":1652209287504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TFQwNZru5ZPpgf3A2LFJwoAB5F8KGwZMgfPzPflwons"},
{"content":{"body":"vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","format":"org.matrix.custom.html","formatted_body":"vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","mimetype":"text/plain"},{"body":"vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","mimetype":"text/html"}]},"ts":1652209330106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dHstbGeRKvkxyG9uzbHaFC2vfXyJQWfy71E1sa09_tg"},
{"content":{"body":"I see! thanks","msgtype":"m.text","org.matrix.msc1767.text":"I see! thanks"},"ts":1652209353553,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$QZ-Ukk9wc_YfdakYiOKjmNGhX5cvBV2qiAiO3m32WIc"},
{"content":{"body":" * vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","format":"org.matrix.custom.html","formatted_body":" * vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","m.new_content":{"body":"vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","format":"org.matrix.custom.html","formatted_body":"vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","mimetype":"text/plain"},{"body":"vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$dHstbGeRKvkxyG9uzbHaFC2vfXyJQWfy71E1sa09_tg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * vs, `:` is for translating tokens to parse nodes, `::` is for translating code points to tokens (or regexes, I guess)","mimetype":"text/plain"},{"body":" * vs, <code>:</code> is for translating tokens to parse nodes, <code>::</code> is for translating code points to tokens (or regexes, I guess)","mimetype":"text/html"}]},"ts":1652209387280,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7IUHMihGBG2fTgyUemQUtKpccf69emBMYbd4U1iBmY8"}
]