[
{"content":{"body":"I do not love the thing where the agenda is structurally set up so that proposals are higher priority than larger discussions","msgtype":"m.text"},"ts":1695602767460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XLw6qFiqU2fsxERr4hE3blnfBpF44LtTkAW2RJkfCaM"},
{"content":{"body":"seems like it ought to be the other way around","msgtype":"m.text"},"ts":1695602774074,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aj70sNWOPj8uqOtjS1jeGo101EE5IC6_IdBXZb3X8jw"},
{"content":{"body":"well, backlog is highest priority, so you can always get a time slice for discussions, just every two meetings","msgtype":"m.text"},"ts":1695607348327,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3UhJemv7WdU8I9i9MGLBTovIs2H9iLmRvKnUY-cCxS4"},
{"content":{"body":"also if a discussion should block a proposal, it can always be bumped up (on a case by case basis)","msgtype":"m.text"},"ts":1695607390603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$estO7X3QkRxkVybIzbp3K33G3Ga1QGt9lBlxE6Nsm4o"},
{"content":{"body":"historically, we adopted this prioritization back when we were trying to get out of the pattern of spending all day on some very circular philosophical discussions which should not have blocked proposals","msgtype":"m.text"},"ts":1695607567870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Dm7QgbIZS4Xy2WOUvp33vuEA52WqZbgBbY6nN_XT-fw"},
{"content":{"body":" * well, overflow from last meeting is highest priority, so you can always get a time slice for discussions, just every two meetings","m.new_content":{"body":"well, overflow from last meeting is highest priority, so you can always get a time slice for discussions, just every two meetings","msgtype":"m.text"},"m.relates_to":{"event_id":"$3UhJemv7WdU8I9i9MGLBTovIs2H9iLmRvKnUY-cCxS4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695607597177,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qdnZMNFdJVRFvICpf6sOOxi5_CDVWBDu3c-ItdZzklY"},
{"content":{"body":"if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?","msgtype":"m.text"},"ts":1695608676648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hGMucPCjaOG__-m3lhuCwm7e-AAeJFZxoNZyM5AsvV8"},
{"content":{"body":"(personally, when I've put discussions on the agenda in the past, I actually wanted them to be deprioritized generally)","msgtype":"m.text"},"ts":1695608701685,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AaN8i60EOphApglRNt8qRH0-oJx5PX6nIhBqZ5x_Dck"},
{"content":{"body":"> <@rbuckton:matrix.org> I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:\n> \n> ```js\n> a = { ...b }; // spread properties of 'b' \n> ({ ...x } = y); // take the rest of the properties and put them in 'x'\n> ```\n> \n> One of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:\n> \n> ```\n> b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\n> b = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\n> a.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\n> a.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n> ```\n> \n> Which makes me wonder if spread should have been written as `foo...`\n\nThis is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HRkdTR3Lc7L47sTHgUypjR-szL8TfDEDp2-wuroEQwk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I was thinking about the old <code>.{</code> operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:</p>\n<pre><code class=\"language-js\">a = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n</code></pre>\n<p>One of the ideas I had for <code>.{</code> was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread <em>or</em> rest in either operator:</p>\n<pre><code>b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n</code></pre>\n<p>Which makes me wonder if spread should have been written as <code>foo...</code></p>\n</blockquote></mx-reply>This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well","m.relates_to":{"m.in_reply_to":{"event_id":"$HRkdTR3Lc7L47sTHgUypjR-szL8TfDEDp2-wuroEQwk"}},"msgtype":"m.text"},"ts":1695608790768,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YxSUfIxXFS38pJJA6h52Pbp4lMTCLkodrhO1YMHzg48"},
{"content":{"body":"> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well\n\nIt's less that I would propose the more complex bits initially, but that I wanted to explore the syntax fully to make sure it remained consistent.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YxSUfIxXFS38pJJA6h52Pbp4lMTCLkodrhO1YMHzg48?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well</blockquote></mx-reply>It's less that I would propose the more complex bits initially, but that I wanted to explore the syntax fully to make sure it remained consistent.","m.relates_to":{"m.in_reply_to":{"event_id":"$YxSUfIxXFS38pJJA6h52Pbp4lMTCLkodrhO1YMHzg48"}},"msgtype":"m.text"},"ts":1695608854532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m0kYeX0we5rDtI_F5kD_Rwm3mvSuXb4I1y0V2CAbF34"},
{"content":{"body":"> <@littledan:matrix.org> This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well\n\n * It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YxSUfIxXFS38pJJA6h52Pbp4lMTCLkodrhO1YMHzg48?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is definitely interesting, but also makes me a little scared about whether or not people will be able to understand it well</blockquote></mx-reply> * It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.","m.new_content":{"body":"It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.","format":"org.matrix.custom.html","formatted_body":"It's less that I would propose the more complex bits initially (if at all), but that I wanted to explore the syntax fully to make sure it remained consistent.","msgtype":"m.text"},"m.relates_to":{"event_id":"$m0kYeX0we5rDtI_F5kD_Rwm3mvSuXb4I1y0V2CAbF34","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695609352718,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OHem3OifumQap1yJuhyFOdsNleXUObDnXWN2ZFfrxG8"},
{"content":{"body":"Rob and I are about to do an AV test in a few minutes. If you want to help out, DM me and I will respond with a Zoom link","msgtype":"m.text"},"ts":1695618626709,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$E5fvrkjGmCd9Cf6NizjTWKeJX_JY6HPNxGfuCYxmjpE"},
{"content":{"body":"> <@littledan:matrix.org> if there's a particular discussion that we should prioritize, maybe note that in schedule constraints?\n\nwell, concretely, I would like to get to the Stop Coercing Things discussion, since it affects the design of all future proposals","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hGMucPCjaOG__-m3lhuCwm7e-AAeJFZxoNZyM5AsvV8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>if there&#39;s a particular discussion that we should prioritize, maybe note that in schedule constraints?</blockquote></mx-reply>well, concretely, I would like to get to the Stop Coercing Things discussion, since it affects the design of all future proposals","m.relates_to":{"m.in_reply_to":{"event_id":"$hGMucPCjaOG__-m3lhuCwm7e-AAeJFZxoNZyM5AsvV8"}},"msgtype":"m.text"},"ts":1695622296485,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xK1YGv2ZHPbZZlq5z7j913tYqoSHTxCKN3QsB8TBYJc"},
{"content":{"body":"And since we started but did not finish the discussion last meeting","msgtype":"m.text"},"ts":1695622308591,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K3g6l1UqzFlvNjvYNwKAbTSLA3fJ2Yik3sfyFzgi_Eo"},
{"content":{"body":"I'm fine with deprioritizing my various \"withdraw\" topics; they can wait until next meeting","msgtype":"m.text"},"ts":1695622324462,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VLiCp46d62eYLb_c1hSUa9WGXspSpbS42nZcDNqeW6U"},
{"content":{"body":"But I do not have any related schedule constraints","msgtype":"m.text"},"ts":1695622326878,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uxP_wVxhNIF38r98CaFpz819nsNmiiFd21GXTOLkGxI"},
{"content":{"body":"I think \"I want this to happen this meeting rather than a future meeting\" is a constraint you're expressing about the schedule... anyway if you don't think this prioritization is a good fit for one section to document the need, maybe you can document it in a new part of the agenda","msgtype":"m.text"},"ts":1695622578333,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BB5F0R7PKB5Qs0qLrt5WOp_ySoncJ5b3wp_gny-ouBE"},
{"content":{"body":"I want to discuss your topic but ultimately there are going to be a lot of different points of view people have about why their topic should be prioritized; if these are all collected in one place, then it will be easier for the chairs to go and solve as many for as many prioritization inputs as possible.","msgtype":"m.text"},"ts":1695622651622,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-Z7Mpmm4xZ88s5KF-t733rwQQ7-LiAxco4kZEef4fY0"},
{"content":{"body":"bakkot: You can always jump to the higher-priority \"shorter discussions\" section by selecting a 30-minute or less time box","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: You can always jump to the higher-priority \"shorter discussions\" section by selecting a 30-minute or less time box","msgtype":"m.text"},"ts":1695630763366,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uD_L1LzXaB8dtiK3NeltpCbgIS60RG5SZjQzAbyXGRk"},
{"content":{"body":"we designed the agenda like this on purpose and I like it how it is","msgtype":"m.text"},"ts":1695630788416,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GV4IW9RMAui8qAdaqE2hw5iwMl54chJnrXYWQAP-dAY"},
{"content":{"body":"...I'm reading the Temporal docs, and in the `round()` method they say:\n> When there is a tie, round away from zero like ceil for positive durations and like floor for negative durations. This is the default, and matches the behaviour of Math.round().\n\nBut `Math.round()`, uh, doesn't do that. `Math.round(-1.5)` is -1; it ciels on the half values.","format":"org.matrix.custom.html","formatted_body":"<p>...I'm reading the Temporal docs, and in the <code>round()</code> method they say:</p>\n<blockquote>\n<p>When there is a tie, round away from zero like ceil for positive durations and like floor for negative durations. This is the default, and matches the behaviour of Math.round().</p>\n</blockquote>\n<p>But <code>Math.round()</code>, uh, doesn't do that. <code>Math.round(-1.5)</code> is -1; it ciels on the half values.</p>\n","msgtype":"m.text"},"ts":1695670697931,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ssEMIsqsNXRKFssCaOYk4nFJsp1rypYR7N31u4YEkWQ"},
{"content":{"body":"(I was very confused when I read that because I was pretty sure I specified CSS to use ceil semantics on the halves by default, and I did so because that was JS's behavior. And indeed: <https://drafts.csswg.org/css-values/#round-func>)","format":"org.matrix.custom.html","formatted_body":"(I was very confused when I read that because I was pretty sure I specified CSS to use ceil semantics on the halves by default, and I did so because that was JS's behavior. And indeed: <a href=\"https://drafts.csswg.org/css-values/#round-func\">https://drafts.csswg.org/css-values/#round-func</a>)","msgtype":"m.text"},"ts":1695670775332,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$UtVoWNAZ2L2pxJIYM37P-rGAL5GmBmQoVtv6bieg7hk"},
{"content":{"body":"<https://tc39.es/proposal-temporal/docs/duration.html#round> for the Temporal docs reference, scroll down a bit to get to the rounding modes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://tc39.es/proposal-temporal/docs/duration.html#round\">https://tc39.es/proposal-temporal/docs/duration.html#round</a> for the Temporal docs reference, scroll down a bit to get to the rounding modes","msgtype":"m.text"},"ts":1695670814701,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tjp7RIDcUGnjfxTpcnjg2EVopvnBeE-0zm785Aa4yLE"},
{"content":{"body":"waaaaat","msgtype":"m.text"},"ts":1695671074810,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$UmIATpukOMH8--kI7rR2M95Kih7A1TggclCuIuilXXw"},
{"content":{"body":"I think this is mostly wording issue from my understanding. `Math.round(-1.5)` performs \"floor-like\" operation in a sense that it rounds to the nearest \"bottom\" value. It's not taking the sign into account in the explanation here though.","format":"org.matrix.custom.html","formatted_body":"I think this is mostly wording issue from my understanding. <code>Math.round(-1.5)</code> performs \"floor-like\" operation in a sense that it rounds to the nearest \"bottom\" value. It's not taking the sign into account in the explanation here though.","msgtype":"m.text"},"ts":1695671079740,"senderName":"Kamil Ogórek","senderId":"@kamilogorek:matrix.org","id":"$wfwzrFJ-q79793D83T4tDo1UO05Q0CanRYckbyM52Dw"}
]