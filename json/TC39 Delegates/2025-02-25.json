[
{"content":{"body":"I don't get it; do we want to encourage people to silently swallow and ignore errors?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$j_Y4QPyYlAqLHyVfemg16IclWlTQ4SjnPpk83pxVeVQ"}},"msgtype":"m.text"},"ts":1740477298002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DHwXtDIMa5Uvx5g9T_jgZgF5csx7XYFu7ynKCc6drTE"},
{"content":{"body":"I believe the motivation is to avoid using a big try-catch scope to catch errors for multiple statements. Rather, it encourages to handle error for each function call that may throw, comparing to the \"typed\" catch blocks. Such syntax also presents in languages like Swift (https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling/#Converting-Errors-to-Optional-Values). However, Swift has a stronger enforcement that the error can not be easily discarded with this syntax.","m.mentions":{"user_ids":["@littledan:matrix.org","@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DHwXtDIMa5Uvx5g9T_jgZgF5csx7XYFu7ynKCc6drTE"}},"msgtype":"m.text"},"ts":1740480466003,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$cKXK4X1LJsGlLPNA0AAric1g6BpPZlJ2wgy8dAhKJqg"},
{"content":{"body":"yeah I guess this depends whether we're talking about the [error, value] version or the just-return-undefined-in-case-of-error version","m.mentions":{},"msgtype":"m.text"},"ts":1740481268179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q1TsxFflDclcWfdDhzYRZJPP3sx8Rj_UJqbBwcU_YOA"},
{"content":{"body":"> <@tabatkins:matrix.org> Aki: In the CSSWG we make it a requirement that any slideshows be saved as PDF and sent to www-archive@w3.org, then have its location in the minutes. We should probably adopt a similar policy for slides in tc39 since we're *even more* slideshow-dependent here.\n\nWhen our company was acquired and we had to move from GSuite to M365 (don't get me started), they disabled all our accounts and broke all of the links for *years* of my presentations to TC39. I had to escalate to very high levels to get them to turn my account back on temporarily so I could download PDFs and put them in the agendas repo. A policy to just do this at the end of each meeting would be so helpful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24YQHuTND83nbm5xNEcWRkAuRR8DRMJTuIMD1AN6GYUcs\">In reply to</a><a href=\"https://matrix.to/#/%40tabatkins%3Amatrix.org\">@tabatkins:matrix.org</a><br /><a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: In the CSSWG we make it a requirement that any slideshows be saved as PDF and sent to www-archive@w3.org, then have its location in the minutes. We should probably adopt a similar policy for slides in tc39 since we're <em>even more</em> slideshow-dependent here.</blockquote></mx-reply>When our company was acquired and we had to move from GSuite to M365 (don&#39;t get me started), they disabled all our accounts and broke all of the links for <i data-md=\"*\">years</i> of my presentations to TC39. I had to escalate to very high levels to get them to turn my account back on temporarily so I could download PDFs and put them in the agendas repo. A policy to just do this at the end of each meeting would be so helpful.","m.relates_to":{"m.in_reply_to":{"event_id":"$YQHuTND83nbm5xNEcWRkAuRR8DRMJTuIMD1AN6GYUcs"}},"msgtype":"m.text"},"ts":1740499683981,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e55EYU0_YWsLaxUAY-eU1tlhKV5qVZBUIlKscNmRo4U"},
{"content":{"body":"for the `try ...` expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined","format":"org.matrix.custom.html","formatted_body":"for the <code>try ...</code> expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined","m.mentions":{},"msgtype":"m.text"},"ts":1740502545757,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w"},
{"content":{"body":"or maybe that ship has sailed as this isn't a thing that catch blocks support","m.mentions":{},"msgtype":"m.text"},"ts":1740502565503,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3_XGuFSfPZpbliD3Ep_ts6t39QP3UC69u0WmEoHVwu0"},
{"content":{"body":"* or maybe that ship has sailed as this isn't a thing that catch blocks do","m.mentions":{},"m.new_content":{"body":"or maybe that ship has sailed as this isn't a thing that catch blocks do","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3_XGuFSfPZpbliD3Ep_ts6t39QP3UC69u0WmEoHVwu0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740502576465,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$awY2kxJdBKPES_SUmmmbbDwwy5_iivXLcDHeHyyP9z4"},
{"content":{"body":"So, for future reference, Patrick C does gather and download all the slides and throw them in a zip file after every meeting. They are in the Ecma_Documents/TC39/[year] folder of the ecma file server. But I agree it would be really, really nice if everyone just put them with the agenda.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e55EYU0_YWsLaxUAY-eU1tlhKV5qVZBUIlKscNmRo4U"}},"msgtype":"m.text"},"ts":1740502578908,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$UK_pMuGUce8K_sP2xSLqX2s2MZssQ6sszDZtq3qIre4"},
{"content":{"body":"> <@aclaymore:matrix.org> for the `try ...` expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined\n\nOne of the alternatives that the proposal has is three values: a boolean to tell whether it errored, the error, and the return value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br />for the <code>try ...</code> expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined</blockquote></mx-reply>One of the alternatives that the proposal has is three values: a boolean to tell whether it errored, the error, and the return value","m.relates_to":{"m.in_reply_to":{"event_id":"$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w"}},"msgtype":"m.text"},"ts":1740502639555,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$weRXTXJie6kF0J6aX4XfubMb4g1APIFxHUxTmXTxMiQ"},
{"content":{"body":"right, this is an alternative to needing to return 3 args","m.mentions":{},"msgtype":"m.text"},"ts":1740502721779,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$FybEj5eXOnpycuWX9VWsI7S0rAg91AO-4YcbNblr5h8"},
{"content":{"body":"can 'just' check if err is truthy","m.mentions":{},"msgtype":"m.text"},"ts":1740502734095,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0eBQXAhRbf_mRSLVimauLqvDouDosQQIN3EMh-DPYjA"},
{"content":{"body":"throwing falsey values is ?never? a good idea in the first place?","m.mentions":{},"msgtype":"m.text"},"ts":1740502804122,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$JZL0PRczpqbxKY4NBtjUEZeLxMpSEIkNRG6E9m6sqGg"},
{"content":{"body":"I find it rather hard to justify that `[ok, error, value]` is needed just because `error` might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.","format":"org.matrix.custom.html","formatted_body":"I find it rather hard to justify that <code>[ok, error, value]</code> is needed just because <code>error</code> might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.","m.mentions":{},"msgtype":"m.text"},"ts":1740505434185,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs"},
{"content":{"body":"There’s also language precedent in `Promise.allSettled`","format":"org.matrix.custom.html","formatted_body":"There’s also language precedent in <code>Promise.allSettled</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740505685380,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$_RLIGG_K1gjUQS-sqin-DFy4sTok4KEItRJ3dMdqX2g"},
{"content":{"body":"That is, precedent for a taggèd union of `{status, value, reason}`","format":"org.matrix.custom.html","formatted_body":"That is, precedent for a taggèd union of <code>{status, value, reason}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740505750105,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$PmkqsAY78H8IHLf0rOl5XiQG6UvmEuB9Y0fftlnNj2k"}
]