[
{"content":{"body":"I don't get it; do we want to encourage people to silently swallow and ignore errors?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$j_Y4QPyYlAqLHyVfemg16IclWlTQ4SjnPpk83pxVeVQ"}},"msgtype":"m.text"},"ts":1740477298002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DHwXtDIMa5Uvx5g9T_jgZgF5csx7XYFu7ynKCc6drTE"},
{"content":{"body":"I believe the motivation is to avoid using a big try-catch scope to catch errors for multiple statements. Rather, it encourages to handle error for each function call that may throw, comparing to the \"typed\" catch blocks. Such syntax also presents in languages like Swift (https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling/#Converting-Errors-to-Optional-Values). However, Swift has a stronger enforcement that the error can not be easily discarded with this syntax.","m.mentions":{"user_ids":["@littledan:matrix.org","@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DHwXtDIMa5Uvx5g9T_jgZgF5csx7XYFu7ynKCc6drTE"}},"msgtype":"m.text"},"ts":1740480466003,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$cKXK4X1LJsGlLPNA0AAric1g6BpPZlJ2wgy8dAhKJqg"},
{"content":{"body":"yeah I guess this depends whether we're talking about the [error, value] version or the just-return-undefined-in-case-of-error version","m.mentions":{},"msgtype":"m.text"},"ts":1740481268179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q1TsxFflDclcWfdDhzYRZJPP3sx8Rj_UJqbBwcU_YOA"},
{"content":{"body":"> <@tabatkins:matrix.org> Aki: In the CSSWG we make it a requirement that any slideshows be saved as PDF and sent to www-archive@w3.org, then have its location in the minutes. We should probably adopt a similar policy for slides in tc39 since we're *even more* slideshow-dependent here.\n\nWhen our company was acquired and we had to move from GSuite to M365 (don't get me started), they disabled all our accounts and broke all of the links for *years* of my presentations to TC39. I had to escalate to very high levels to get them to turn my account back on temporarily so I could download PDFs and put them in the agendas repo. A policy to just do this at the end of each meeting would be so helpful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24YQHuTND83nbm5xNEcWRkAuRR8DRMJTuIMD1AN6GYUcs\">In reply to</a><a href=\"https://matrix.to/#/%40tabatkins%3Amatrix.org\">@tabatkins:matrix.org</a><br /><a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: In the CSSWG we make it a requirement that any slideshows be saved as PDF and sent to www-archive@w3.org, then have its location in the minutes. We should probably adopt a similar policy for slides in tc39 since we're <em>even more</em> slideshow-dependent here.</blockquote></mx-reply>When our company was acquired and we had to move from GSuite to M365 (don&#39;t get me started), they disabled all our accounts and broke all of the links for <i data-md=\"*\">years</i> of my presentations to TC39. I had to escalate to very high levels to get them to turn my account back on temporarily so I could download PDFs and put them in the agendas repo. A policy to just do this at the end of each meeting would be so helpful.","m.relates_to":{"m.in_reply_to":{"event_id":"$YQHuTND83nbm5xNEcWRkAuRR8DRMJTuIMD1AN6GYUcs"}},"msgtype":"m.text"},"ts":1740499683981,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e55EYU0_YWsLaxUAY-eU1tlhKV5qVZBUIlKscNmRo4U"},
{"content":{"body":"for the `try ...` expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined","format":"org.matrix.custom.html","formatted_body":"for the <code>try ...</code> expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined","m.mentions":{},"msgtype":"m.text"},"ts":1740502545757,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w"},
{"content":{"body":"or maybe that ship has sailed as this isn't a thing that catch blocks support","m.mentions":{},"msgtype":"m.text"},"ts":1740502565503,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3_XGuFSfPZpbliD3Ep_ts6t39QP3UC69u0WmEoHVwu0"},
{"content":{"body":"* or maybe that ship has sailed as this isn't a thing that catch blocks do","m.mentions":{},"m.new_content":{"body":"or maybe that ship has sailed as this isn't a thing that catch blocks do","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3_XGuFSfPZpbliD3Ep_ts6t39QP3UC69u0WmEoHVwu0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740502576465,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$awY2kxJdBKPES_SUmmmbbDwwy5_iivXLcDHeHyyP9z4"},
{"content":{"body":"So, for future reference, Patrick C does gather and download all the slides and throw them in a zip file after every meeting. They are in the Ecma_Documents/TC39/[year] folder of the ecma file server. But I agree it would be really, really nice if everyone just put them with the agenda.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e55EYU0_YWsLaxUAY-eU1tlhKV5qVZBUIlKscNmRo4U"}},"msgtype":"m.text"},"ts":1740502578908,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$UK_pMuGUce8K_sP2xSLqX2s2MZssQ6sszDZtq3qIre4"},
{"content":{"body":"> <@aclaymore:matrix.org> for the `try ...` expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined\n\nOne of the alternatives that the proposal has is three values: a boolean to tell whether it errored, the error, and the return value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br />for the <code>try ...</code> expression. Maybe any non-object exception would get put into a new Error object with the value as the cause? To avoid having to distinguish between code that threw or returned undefined</blockquote></mx-reply>One of the alternatives that the proposal has is three values: a boolean to tell whether it errored, the error, and the return value","m.relates_to":{"m.in_reply_to":{"event_id":"$vVW_5SydJyQiHWvrCQUXcQHdwecl0GtLCSbJjUaoN8w"}},"msgtype":"m.text"},"ts":1740502639555,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$weRXTXJie6kF0J6aX4XfubMb4g1APIFxHUxTmXTxMiQ"},
{"content":{"body":"right, this is an alternative to needing to return 3 args","m.mentions":{},"msgtype":"m.text"},"ts":1740502721779,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$FybEj5eXOnpycuWX9VWsI7S0rAg91AO-4YcbNblr5h8"},
{"content":{"body":"can 'just' check if err is truthy","m.mentions":{},"msgtype":"m.text"},"ts":1740502734095,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0eBQXAhRbf_mRSLVimauLqvDouDosQQIN3EMh-DPYjA"},
{"content":{"body":"throwing falsey values is ?never? a good idea in the first place?","m.mentions":{},"msgtype":"m.text"},"ts":1740502804122,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$JZL0PRczpqbxKY4NBtjUEZeLxMpSEIkNRG6E9m6sqGg"},
{"content":{"body":"I find it rather hard to justify that `[ok, error, value]` is needed just because `error` might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.","format":"org.matrix.custom.html","formatted_body":"I find it rather hard to justify that <code>[ok, error, value]</code> is needed just because <code>error</code> might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.","m.mentions":{},"msgtype":"m.text"},"ts":1740505434185,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs"},
{"content":{"body":"There’s also language precedent in `Promise.allSettled`","format":"org.matrix.custom.html","formatted_body":"There’s also language precedent in <code>Promise.allSettled</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740505685380,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$_RLIGG_K1gjUQS-sqin-DFy4sTok4KEItRJ3dMdqX2g"},
{"content":{"body":"That is, precedent for a taggèd union of `{status, value, reason}`","format":"org.matrix.custom.html","formatted_body":"That is, precedent for a taggèd union of <code>{status, value, reason}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740505750105,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$PmkqsAY78H8IHLf0rOl5XiQG6UvmEuB9Y0fftlnNj2k"},
{"content":{"body":"> <@eemeli:mozilla.org> I find it rather hard to justify that `[ok, error, value]` is needed just because `error` might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.\n\nI disagree. It doesn't matter if it's a bad idea to throw a falsy value, it's *possible* to throw a falsy value so it must be possible to differentiate the result. Otherwise the feature is unreliable in corner cases and developers could make poor assumptions about whether the code actually executed successfully.\n`using` allows for this case as well. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br />I find it rather hard to justify that <code>[ok, error, value]</code> is needed just because <code>error</code> might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.</blockquote></mx-reply>I disagree. It doesn't matter if it's a bad idea to throw a falsy value, it's <em>possible</em> to throw a falsy value so it must be possible to differentiate the result. Otherwise the feature is unreliable in corner cases and developers could make poor assumptions about whether the code actually executed successfully.<br /><code>using</code> allows for this case as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs"}},"msgtype":"m.text"},"ts":1740506652741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tSbrVbrN7HGm1ql1GWtbFWowDIR-3KyJ6w0Q3skf_Q4"},
{"content":{"body":"Given that a try-expression would be constructing a Result, why not fix this the way that Ashley Claymore suggests above? As in, always wrap a non-Error value in an Error with a cause. As a developer, I'd find it much more useful to be able to rely on `result.error` always being either undefined, or an Error.","format":"org.matrix.custom.html","formatted_body":"Given that a try-expression would be constructing a Result, why not fix this the way that <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> suggests above? As in, always wrap a non-Error value in an Error with a cause. As a developer, I'd find it much more useful to be able to rely on <code>result.error</code> always being either undefined, or an Error.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"ts":1740507134950,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$VRFVR0k-smoo0Fhj2-7ZUxBGwfwToNC5ujyGEHKuJG4"},
{"content":{"body":"That seems like wasteful allocation of an extra object, along with collecting a stack trace, if a user writes a `try foo()` in a tight loop and ignores the result ","format":"org.matrix.custom.html","formatted_body":"That seems like wasteful allocation of an extra object, along with collecting a stack trace, if a user writes a <code>try foo()</code> in a tight loop and ignores the result","msgtype":"m.text"},"ts":1740507327247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$frhUb8RWlsPIYr7ojj-mxgmdEz3abq0MW_c6dDyn0T8"},
{"content":{"body":"It's convenient, yes, but may not be performant. ","format":"org.matrix.custom.html","formatted_body":"It's convenient, yes, but may not be performant.","msgtype":"m.text"},"ts":1740507349830,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jp9M8r1QFmtRqylMRpQDZBMcmjD5MOEf0EqOKrJoeVs"},
{"content":{"body":"Warning: in reviewing the notes, I saw an unknown speaker attributed as `ABC`. Note takers, please don't do this. Use `???` or something.","format":"org.matrix.custom.html","formatted_body":"Warning: in reviewing the notes, I saw an unknown speaker attributed as <code data-md=\"`\">ABC</code>. Note takers, please don&#39;t do this. Use <code data-md=\"`\">???</code> or something.","msgtype":"m.text"},"ts":1740507383918,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7ffDzCVx0kNARM_jfpZKc7X_Y9Dc9k-Gv9O5A96BrDo"},
{"content":{"body":"Is an exception-based control flow ever going to be performant in JS? If performance at this level is a concern, shouldn't the user code never be throwing anything in the first place?","m.mentions":{},"msgtype":"m.text"},"ts":1740507471310,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$iagyN25TVlKKa2VGY36niWBxG4xgMZ0hsL6ISLxK9Ys"},
{"content":{"body":"> <@michaelficarra:matrix.org> Warning: in reviewing the notes, I saw an unknown speaker attributed as `ABC`. Note takers, please don't do this. Use `???` or something.\n\nAlso some quotes were misattributed to me and I've corrected them with who I think said them using `KG?:` notation. So if you're searching for quotes attributed to you, you may want to look for that form as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%247ffDzCVx0kNARM_jfpZKc7X_Y9Dc9k-Gv9O5A96BrDo\">In reply to</a><a href=\"https://matrix.to/#/%40michaelficarra%3Amatrix.org\">@michaelficarra:matrix.org</a><br />Warning: in reviewing the notes, I saw an unknown speaker attributed as <code data-md=\"`\">ABC</code>. Note takers, please don&#39;t do this. Use <code data-md=\"`\">???</code> or something.</blockquote></mx-reply>Also some quotes were misattributed to me and I&#39;ve corrected them with who I think said them using <code data-md=\"`\">KG?:</code> notation. So if you&#39;re searching for quotes attributed to you, you may want to look for that form as well.","m.relates_to":{"m.in_reply_to":{"event_id":"$7ffDzCVx0kNARM_jfpZKc7X_Y9Dc9k-Gv9O5A96BrDo"}},"msgtype":"m.text"},"ts":1740507777262,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Gz-r8UJZnJMgJqaHqww3hpzjCPK9Fhex3-7fh-MAItg"},
{"content":{"body":"Having said that, now I'm not actually sure if exceptions are in fact as performant as any other style of code in JS, or if they introduce a penalty. I might be remembering things from 10-20 years ago.","m.mentions":{},"msgtype":"m.text"},"ts":1740508071029,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$6J4rltf1eKoZvoLo9Pk8LPIvOqBWIuFM6sB38eluzOQ"},
{"content":{"body":"* Having said that, now I'm not actually sure if throwing and catching exceptions are in fact as performant as any other style of control flow in JS, or if they introduce a penalty. I might be remembering things from 10-20 years ago.","m.mentions":{},"m.new_content":{"body":"Having said that, now I'm not actually sure if throwing and catching exceptions are in fact as performant as any other style of control flow in JS, or if they introduce a penalty. I might be remembering things from 10-20 years ago.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6J4rltf1eKoZvoLo9Pk8LPIvOqBWIuFM6sB38eluzOQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740508101001,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$-9IEf0EPIrxJcQjhwPj5C4A4vphq94G8NxUAtIzLQ2E"},
{"content":{"body":"eemeli: `try` deopts the surrounding function in V8, but that’s easy to work around. best practice today is to make a tiny function with a `try/catch` and sandwich it between optimizable  frames","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: <code>try</code> deopts the surrounding function in V8, but that’s easy to work around. best practice today is to make a tiny function with a <code>try/catch</code> and sandwich it between optimizable  frames","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1740508174200,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$wfiddnNbN8etQjdgJofOixR7H4Ktx8ZvTZAosM7l17A"},
{"content":{"body":"Interesting. That is basically a verbose version of the proposed expression-try. I wonder if using expression-try, then, could avoid the deopt.","m.mentions":{},"msgtype":"m.text"},"ts":1740508266577,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$J_lEX2G9BZ4vpsJTB3l67K3mjn3W2B2O34LR5H0HnGo"},
{"content":{"body":"that said, javascript and high performance javascript are not similar languages","m.mentions":{},"msgtype":"m.text"},"ts":1740508267768,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$ELTK1h3lE6gZq6rSLuA4KhPxmIr6pnecw5Dnm5W5-2Q"},
{"content":{"body":"While you’re thinking about this, please also think about `try {} catch {} then {}` so folks can continue the lexical context of the `try` block without being subject to the `catch`. It’s very common to do way too much work in the `try`, for the convenience of the lexical bindings there.","format":"org.matrix.custom.html","formatted_body":"While you’re thinking about this, please also think about <code>try {} catch {} then {}</code> so folks can continue the lexical context of the <code>try</code> block without being subject to the <code>catch</code>. It’s very common to do way too much work in the <code>try</code>, for the convenience of the lexical bindings there.","m.mentions":{},"msgtype":"m.text"},"ts":1740508436804,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$GvjkJexQz6G8FQnYuvuFONTXRnchmwbHBifrhIMOK8w"},
{"content":{"body":"Do you mean `try {} catch {} finally {}`?","format":"org.matrix.custom.html","formatted_body":"Do you mean <code>try {} catch {} finally {}</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740508544854,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$9ldJcLiZPHxOFkMs9LvE5GiQ8sJ6HnraRDjdKa5KUV4"},
{"content":{"body":"I do not.","m.mentions":{},"msgtype":"m.text"},"ts":1740508563558,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Ho-wWRb3Q8x0aQt4aLs_BQlNDMUo9ekz3QBVxj-PCN4"},
{"content":{"body":"I’m proposing a block that executes only along the happy path, continuing the lexical bindings of `try`.","format":"org.matrix.custom.html","formatted_body":"I’m proposing a block that executes only along the happy path, continuing the lexical bindings of <code>try</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1740508593543,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$rgBV9WcxHD2lIYHaQz0POtkBczi_hYbB_1LphhPvIoY"},
{"content":{"body":"This is pretty straight-forward to express in terms of promise `then` chains, but much less obvious with `try`.","format":"org.matrix.custom.html","formatted_body":"This is pretty straight-forward to express in terms of promise <code>then</code> chains, but much less obvious with <code>try</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1740508657177,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$CcgaGbBveWYlgrtbQHQKGf0ZQ2wvDdf5BwIrg72Tcq4"},
{"content":{"body":"That seems like a use case that try-expressions are also looking to somewhat solve.","m.mentions":{},"msgtype":"m.text"},"ts":1740508660748,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$OECr3-H1IjBTtNdeZYxspNNWa-G95JUHST-nt3KtRMw"},
{"content":{"body":"Like, `try { } catch {}` is the synchronous analog of `tryback().then(null, catchback)` whereas `try {} catch {} then {}` is analogous to `tryback().then(thenback, catchback)`","format":"org.matrix.custom.html","formatted_body":"Like, <code>try { } catch {}</code> is the synchronous analog of <code>tryback().then(null, catchback)</code> whereas <code>try {} catch {} then {}</code> is analogous to <code>tryback().then(thenback, catchback)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740508956536,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$asom9I3RlJ8Tk7u_3yVmA-FZN8wfRN62ZzFqy7DnY7s"},
{"content":{"body":"I am reasonably sure this hasn't been true for a long time now","m.mentions":{"user_ids":["@kriskowal:aelf.land","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wfiddnNbN8etQjdgJofOixR7H4Ktx8ZvTZAosM7l17A"}},"msgtype":"m.text"},"ts":1740508993763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yF00nHECIWkSOGlSDU0BMLcQsoW22Ya5uxo1Ypjaz48"},
{"content":{"body":"yeah since 2016 https://groups.google.com/g/v8-users/c/maH60gh_a8s","m.mentions":{},"msgtype":"m.text"},"ts":1740509040071,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TOx_4ybCh9jl-9G8VEKpXdbvrXOC9uiypW33dPrNmJA"},
{"content":{"body":"I’m prepared to believe. I last checked five years ago.","m.mentions":{"user_ids":["@bakkot:matrix.org","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yF00nHECIWkSOGlSDU0BMLcQsoW22Ya5uxo1Ypjaz48"}},"msgtype":"m.text"},"ts":1740509043123,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$uPOThsnaNWImdj-nckyTF_mfBJLRyIREnCJuHFlz9w4"},
{"content":{"body":"Evidently on an already old Node.js timeline. Thanks, bakkot ","format":"org.matrix.custom.html","formatted_body":"Evidently on an already old Node.js timeline. Thanks, <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>","m.mentions":{"user_ids":["@bakkot:matrix.org","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uPOThsnaNWImdj-nckyTF_mfBJLRyIREnCJuHFlz9w4"}},"msgtype":"m.text"},"ts":1740509118246,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$bsm_-LnuP3duwWA1nBSz01ZvLhCBFUSSThCZ3lKTJIQ"},
{"content":{"body":"then how can i determine if what was thrown was an error with a cause, or the falsy value?\n\nthere are empirically use cases for throwing non-object values, falsy or not, and we can't be pretending that's not the case in language design.","m.mentions":{"user_ids":["@eemeli:mozilla.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VRFVR0k-smoo0Fhj2-7ZUxBGwfwToNC5ujyGEHKuJG4"}},"msgtype":"m.text"},"ts":1740509453041,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9kcqCl-v4tMdKmh_dGgcr3DyJwuh8h4inCQDEZ3dhII"},
{"content":{"body":"> <@ljharb:matrix.org> then how can i determine if what was thrown was an error with a cause, or the falsy value?\n> \n> there are empirically use cases for throwing non-object values, falsy or not, and we can't be pretending that's not the case in language design.\n\nIt could _always_ wrap, so you can also check .cause to see what was actually thrown","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9kcqCl-v4tMdKmh_dGgcr3DyJwuh8h4inCQDEZ3dhII?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br /><p>then how can i determine if what was thrown was an error with a cause, or the falsy value?</p>\n<p>there are empirically use cases for throwing non-object values, falsy or not, and we can't be pretending that's not the case in language design.</p></blockquote></mx-reply>It could <em>always</em> wrap, so you can also check .cause to see what was actually thrown","m.relates_to":{"m.in_reply_to":{"event_id":"$9kcqCl-v4tMdKmh_dGgcr3DyJwuh8h4inCQDEZ3dhII"}},"msgtype":"m.text"},"ts":1740509766692,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7ebZGpzla0uhPMfTNmMSFuYIj0MPOaHHcsllLW8N8ws"},
{"content":{"body":"lol so you'd get an error with a cause that's an error with a cause, if the latter was thrown?","m.mentions":{},"msgtype":"m.text"},"ts":1740509785785,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zF6aHxri7n58LnzKkPYR6N7UuSv-iP-jObpDJovMQE0"},
{"content":{"body":"what's the value of that","m.mentions":{},"msgtype":"m.text"},"ts":1740509791925,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HSNQniIyqHtaj1OvxqSocAOFFaYd8hJJ3Zi9q5cuexY"},
{"content":{"body":"Why would you need to differentiate errors at this sort of resolution?","m.mentions":{},"msgtype":"m.text"},"ts":1740509824234,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$L2-0ilegYhz_fS9vWWAlpdI4Euj8hn_lAN01lHGEZVI"},
{"content":{"body":"imo things that deal with exceptions should all be consistent; you can throw any value, so you must always be able to catch any value","m.mentions":{},"msgtype":"m.text"},"ts":1740509825349,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D0el3kfp49frzkDN_icTQ51jbLpa1WclnBp3oQVb12g"},
{"content":{"body":"That would still continue to be just as possible as it is today, though.","m.mentions":{},"msgtype":"m.text"},"ts":1740509883293,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$rYvawC7uSM7bLLsgfiHkiuyzltpEpUiNgZWBqg6hm2U"},
{"content":{"body":"exceptions can (and often are) be used as a form of flow control, like promises but synchronous. throwing undefined, null, false, etc is all something i've seen on nonzero occasions","m.mentions":{},"msgtype":"m.text"},"ts":1740509885080,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AaobwbzqOGn-9qLS215yImv3zn6Ycrmjfh3Cs6ros5Q"},
{"content":{"body":"> <@ljharb:matrix.org> what's the value of that\n\nThat it prevents you from accidentally forgetting that thrown values can be falsish, which is very easy to do if you have separate  .error and .ok properties ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HSNQniIyqHtaj1OvxqSocAOFFaYd8hJJ3Zi9q5cuexY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />what's the value of that</blockquote></mx-reply>That it prevents you from accidentally forgetting that thrown values can be falsish, which is very easy to do if you have separate  .error and .ok properties","m.relates_to":{"m.in_reply_to":{"event_id":"$HSNQniIyqHtaj1OvxqSocAOFFaYd8hJJ3Zi9q5cuexY"}},"msgtype":"m.text"},"ts":1740509903997,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k-g1eqwTFM9SUi8Ipp9ZVKJvsQWDPfVMs3HSE6Sb4MI"},
{"content":{"body":"as opposed to accidentally forgetting any other distinguishing things besides falsiness? what if you forget they can be truthy primitives","m.mentions":{},"msgtype":"m.text"},"ts":1740509963686,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$v_GknnXV9XKaoLwWU6RWdpFYwvzqsekOdrE9rEFtuWg"},
{"content":{"body":"they can also be an object with getters that throw when you access them, which you could also forget","m.mentions":{},"msgtype":"m.text"},"ts":1740509984146,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IQ2ubxNdzBQw7fACzMMxwRSN8rwtzae4O2U7MoDYPcA"},
{"content":{"body":"Hence my suggestion above, \"always wrap a non-Error value in an Error with a cause\".","m.mentions":{},"msgtype":"m.text"},"ts":1740510001857,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$NqjHdGo5fxQufP8MShX0kHAqCClGce16BO3rfhLzS5g"},
{"content":{"body":"right. but imo that would be a very confusing inconsistency with the rest of the language","m.mentions":{},"msgtype":"m.text"},"ts":1740510016828,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VhQUhtZFt_7MFXjsTrOsNhFm3DuRecDF5PkxlYsM8uE"},
{"content":{"body":"* right. but imo that would be a very confusing inconsistency with the rest of the language, for very little benefit","m.mentions":{},"m.new_content":{"body":"right. but imo that would be a very confusing inconsistency with the rest of the language, for very little benefit","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VhQUhtZFt_7MFXjsTrOsNhFm3DuRecDF5PkxlYsM8uE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740510020902,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Kha-hpyS7RrsMvxn_F6RoREuxKKk3_KMm88E6HlYxzs"},
{"content":{"body":"all exceptions are of type `unknown` and it doesn't make sense to me to implicitly wrap them in any context","format":"org.matrix.custom.html","formatted_body":"all exceptions are of type <code>unknown</code> and it doesn't make sense to me to implicitly wrap them in any context","m.mentions":{},"msgtype":"m.text"},"ts":1740510025030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OGnHTv-rEAacazMkFV0iZyi4m0NAYdqvN-mCfEf1izU"},
{"content":{"body":"* all exceptions are of type `unknown` and it doesn't make sense to me to implicitly wrap them in any context (since they can't be made to be wrapped in every context)","format":"org.matrix.custom.html","formatted_body":"* all exceptions are of type <code>unknown</code> and it doesn't make sense to me to implicitly wrap them in any context (since they can't be made to be wrapped in every context)","m.mentions":{},"m.new_content":{"body":"all exceptions are of type `unknown` and it doesn't make sense to me to implicitly wrap them in any context (since they can't be made to be wrapped in every context)","format":"org.matrix.custom.html","formatted_body":"all exceptions are of type <code>unknown</code> and it doesn't make sense to me to implicitly wrap them in any context (since they can't be made to be wrapped in every context)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OGnHTv-rEAacazMkFV0iZyi4m0NAYdqvN-mCfEf1izU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740510099996,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t8xUCke2UjzRPUzn-LwcVi_fT1oIe40XWcMSaVxJUqo"},
{"content":{"body":"Then the immediate `result.error` would always be an Error, and if you really case, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","format":"org.matrix.custom.html","formatted_body":"Then the immediate <code>result.error</code> would always be an Error, and if you really case, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","m.mentions":{},"msgtype":"m.text"},"ts":1740510101327,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$TJ1gC1P7UYbZg-W5KLpIwVUN5F7wAehEBUwydLYxI5k"},
{"content":{"body":"* Then the immediate `result.error` would always be an Error, and if you really care, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","format":"org.matrix.custom.html","formatted_body":"* Then the immediate <code>result.error</code> would always be an Error, and if you really care, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","m.mentions":{},"m.new_content":{"body":"Then the immediate `result.error` would always be an Error, and if you really care, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","format":"org.matrix.custom.html","formatted_body":"Then the immediate <code>result.error</code> would always be an Error, and if you really care, you could get the original thrown value in cause, modulo the concern about the thrown error itself having a cause.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TJ1gC1P7UYbZg-W5KLpIwVUN5F7wAehEBUwydLYxI5k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740510119593,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$dfFw8lBd0P_0X6s2u9_pU83xH4PkkCHZn91yF_g43GE"},
{"content":{"body":"\"always be an error\" isn't a universal or objectively correct thing to want","m.mentions":{},"msgtype":"m.text"},"ts":1740510123396,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7i10td2eWjCD5b0lIANHp9f0mDRW4xwxaCOwvLrWrTg"},
{"content":{"body":"* \"always be an error\" isn't a universal or objectively correct thing to want (at least not in JS as it is)","m.mentions":{},"m.new_content":{"body":"\"always be an error\" isn't a universal or objectively correct thing to want (at least not in JS as it is)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7i10td2eWjCD5b0lIANHp9f0mDRW4xwxaCOwvLrWrTg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740510143825,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ynPd1KYn7y-4itavPF2yGOSPihwms4WcyF0m1s_7Odo"},
{"content":{"body":"Why not? I mean, we're calling the property `.error` after all.","format":"org.matrix.custom.html","formatted_body":"Why not? I mean, we're calling the property <code>.error</code> after all.","m.mentions":{},"msgtype":"m.text"},"ts":1740510155144,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Ji8tx9uZ_0BGXw2xmxybiqdvqYrEtXwpjQvQsAy0nkM"},
{"content":{"body":"What if we did the ADT/enum proposal first","msgtype":"m.text"},"ts":1740510168535,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q_cWEcbgsgPvOuRzH7MOwsMHZWU8hRkwoY_zNYmXwAU"},
{"content":{"body":"i mean we could call it `.exception` but the name should be descriptive rather than dictating the semantics","format":"org.matrix.custom.html","formatted_body":"i mean we could call it <code>.exception</code> but the name should be descriptive rather than dictating the semantics","m.mentions":{},"msgtype":"m.text"},"ts":1740510175514,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x-mQoOXZBFzZqda5V0nBb1gsKJB7SjtLcHXuifnX75w"},
{"content":{"body":"colloquially the error is whatever a catch block would catch","m.mentions":{},"msgtype":"m.text"},"ts":1740510187199,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LXRZA3CAWDdHcCWwQRiuxmb4DcLi1ijUSSybcTY2ovM"},
{"content":{"body":"how does that change this?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q_cWEcbgsgPvOuRzH7MOwsMHZWU8hRkwoY_zNYmXwAU"}},"msgtype":"m.text"},"ts":1740510196984,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zhwOIobjkAq5bviLga78oG2ga3Qbw40LYPxarY5FshQ"},
{"content":{"body":"Then we'd have Success(value) and Failure(thrown value)","msgtype":"m.text"},"ts":1740510220782,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$65gS2NeRZF3CQrtYxWWW6mt5fjQ3iYs6GgUG4G_ervA"},
{"content":{"body":"With no need for rewrapping","msgtype":"m.text"},"ts":1740510252018,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vGYAxGp8kfjDXGuosFGJnQFojqV5vQMWfO9Klcxh2hw"},
{"content":{"body":"maybe i'm missing context on which enum proposal you mean, but enums aren't wrappers for values, they're a list of constants?","m.mentions":{},"msgtype":"m.text"},"ts":1740510261295,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P4cIEzoUSRiEoizD4nO8t0n0DN70crib2Z9fXDH9i0U"},
{"content":{"body":"or do you mean like extractors","m.mentions":{},"msgtype":"m.text"},"ts":1740510271559,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-MmY6PXEpkgz_g-ednrK9e4ffjHBbGkeTopJf9Qo6LQ"},
{"content":{"body":"* or do you mean like extractors + pattern matching?","m.mentions":{},"m.new_content":{"body":"or do you mean like extractors + pattern matching?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-MmY6PXEpkgz_g-ednrK9e4ffjHBbGkeTopJf9Qo6LQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740510276836,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZAUm_BgORmVioWbqbZBUiwPP1tcn9naMagW5v2XyDgA"},
{"content":{"body":"> <@ljharb:matrix.org> maybe i'm missing context on which enum proposal you mean, but enums aren't wrappers for values, they're a list of constants?\n\nI vaguely remember some version of it that allowed attaching a payload to the enum values","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P4cIEzoUSRiEoizD4nO8t0n0DN70crib2Z9fXDH9i0U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />maybe i'm missing context on which enum proposal you mean, but enums aren't wrappers for values, they're a list of constants?</blockquote></mx-reply>I vaguely remember some version of it that allowed attaching a payload to the enum values","m.relates_to":{"m.in_reply_to":{"event_id":"$P4cIEzoUSRiEoizD4nO8t0n0DN70crib2Z9fXDH9i0U"}},"msgtype":"m.text"},"ts":1740510284128,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kkU68Ll6TM-jeS81eEggbJlnwFPTfhT56piHae6IcZo"},
{"content":{"body":"i can't conceive of how that would work or make sense, but lmk if you find the link","m.mentions":{},"msgtype":"m.text"},"ts":1740510304305,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CaPoOdC28Wwf-V_hYN-Rg3At8sF15TcDsCpIMAPAfc4"}
]