[
{"content":{"body":"I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:\n```js\na = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n```\nOne of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:\n```\nb = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n```\nWhich makes me wonder if spread should have been mirrored as `foo...`","format":"org.matrix.custom.html","formatted_body":"<p>I was thinking about the old <code>.{</code> operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:</p>\n<pre><code class=\"language-js\">a = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n</code></pre>\n<p>One of the ideas I had for <code>.{</code> was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread <em>or</em> rest in either operator:</p>\n<pre><code>b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n</code></pre>\n<p>Which makes me wonder if spread should have been mirrored as <code>foo...</code></p>\n","msgtype":"m.text"},"ts":1695528471512,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HRkdTR3Lc7L47sTHgUypjR-szL8TfDEDp2-wuroEQwk"},
{"content":{"body":" * I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:\n\n```js\na = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n```\n\nOne of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:\n\n```\nb = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n```\n\nWhich makes me wonder if spread should have been written as `foo...`","format":"org.matrix.custom.html","formatted_body":" * <p>I was thinking about the old <code>.{</code> operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:</p>\n<pre><code class=\"language-js\">a = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n</code></pre>\n<p>One of the ideas I had for <code>.{</code> was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread <em>or</em> rest in either operator:</p>\n<pre><code>b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n</code></pre>\n<p>Which makes me wonder if spread should have been written as <code>foo...</code></p>\n","m.new_content":{"body":"I was thinking about the old `.{` operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:\n\n```js\na = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n```\n\nOne of the ideas I had for `.{` was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread _or_ rest in either operator:\n\n```\nb = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n```\n\nWhich makes me wonder if spread should have been written as `foo...`","format":"org.matrix.custom.html","formatted_body":"<p>I was thinking about the old <code>.{</code> operator recently, in terms of how it could potentially be used for extraction and injection as an RCU (read/copy, update) mechanism in the shared structs proposal (or possibly as a follow on). I started tinkering with various ideas for the syntax, and while I have something fairly consistent in mind, I came across a wart related to spread and rest assignments in destructuring syntax:</p>\n<pre><code class=\"language-js\">a = { ...b }; // spread properties of 'b' \n({ ...x } = y); // take the rest of the properties and put them in 'x'\n</code></pre>\n<p>One of the ideas I had for <code>.{</code> was doing named spread/rest in extraction/injection, in which you would want extraction and injection to be mirrored, and you could either use spread <em>or</em> rest in either operator:</p>\n<pre><code>b = a.{ x, ...y }; // pick 'x' as 'x', and pick up the rest as 'y'\nb = a.{ x, y... }; // pick 'x' as 'x', and spread out 'y'\na.{ x, ...y } = b; // assign 'x' from 'x', and take up the rest as 'y'\na.{ x, y... } = b; // assign 'x' from 'x', and spread out 'y'\n</code></pre>\n<p>Which makes me wonder if spread should have been written as <code>foo...</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$HRkdTR3Lc7L47sTHgUypjR-szL8TfDEDp2-wuroEQwk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695528574327,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z_D62Mq8GoJ_AfJ-rIE8zQUeX-wZHY_IBrIoKSiWFcI"}
]