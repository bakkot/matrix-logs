[
{"content":{"body":"reading through it, it kind of seems like the conclusion of this page is roughly identical (modulo placeholder choice, perhaps) to the JS proposal?","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675210451083,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ef091y7_IDDW9_mumWTC81GW3BnL9KaYsTuNIbq-e6E"},
{"content":{"body":"Huh, I assumed that the range operator| was supposed to subsume pipeline ","format":"org.matrix.custom.html","formatted_body":"Huh, I assumed that the range operator| was supposed to subsume pipeline","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$Ef091y7_IDDW9_mumWTC81GW3BnL9KaYsTuNIbq-e6E"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675215742845,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Cu86GGAziVPUpCNgJxfMNo0152iTiWOtd5c2G3ajHvE"},
{"content":{"body":"> \"Scala is unique in that it only provides _, but that placeholder refers to a different parameter on each use. So _ > _ is a binary predicate that checks if the first parameter is greater than the second. Boost.HOF does the same with its unnamed placeholders [boost.hof.unnamed].\"","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>&quot;Scala is unique in that it only provides _, but that placeholder refers to a different parameter on each use. So _ &gt; _ is a binary predicate that checks if the first parameter is greater than the second. Boost.HOF does the same with its unnamed placeholders [boost.hof.unnamed].&quot;</p>\n</blockquote>","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$Cu86GGAziVPUpCNgJxfMNo0152iTiWOtd5c2G3ajHvE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675225041192,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jeQNxjg_o_dDNyot3wPXETHjQ7TwSJk-62F_QV3n5B8"},
{"content":{"body":"Wild!","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$jeQNxjg_o_dDNyot3wPXETHjQ7TwSJk-62F_QV3n5B8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675225046600,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LOvAguGKgrHAC5-_gdo_buQ8HEuDLSskCN8AGTzhoF8"},
{"content":{"body":"honestly kinda like scala's `_`","format":"org.matrix.custom.html","formatted_body":"honestly kinda like scala's <code>_</code>","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$LOvAguGKgrHAC5-_gdo_buQ8HEuDLSskCN8AGTzhoF8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675225181362,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZIsWNGhpdk7Ay8pkt1EXqmYWWxA7tl9tYh0LPb0QsOk"},
{"content":{"body":"> <@bakkot:matrix.org> honestly kinda like scala's `_`\n\nI mean, PFA would do this with `?`, though doing that with operators required other syntax. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZIsWNGhpdk7Ay8pkt1EXqmYWWxA7tl9tYh0LPb0QsOk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />honestly kinda like scala's <code>_</code></blockquote></mx-reply>I mean, PFA would do this with <code>?</code>, though doing that with operators required other syntax.","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":false,"m.in_reply_to":{"event_id":"$ZIsWNGhpdk7Ay8pkt1EXqmYWWxA7tl9tYh0LPb0QsOk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675225938467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vpeNnBnOZJ_NbMnBAg1jDM6lxPxsrvfohF7wvUNh64A"},
{"content":{"body":"Notes editors: let’s remember to remove the >> and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.","format":"org.matrix.custom.html","formatted_body":"Notes editors: let’s remember to remove the &gt;&gt; and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.","msgtype":"m.text"},"ts":1675228531166,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u3ucSgAy3Z3FvQAeJO-9WjI7fSK1eEbsWkE9kffsyXE"},
{"content":{"body":"scala has something like 18 meanings for `_`, it's very confusing until you've internalized all the relevant contexts","format":"org.matrix.custom.html","formatted_body":"scala has something like 18 meanings for <code>_</code>, it's very confusing until you've internalized all the relevant contexts","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$vpeNnBnOZJ_NbMnBAg1jDM6lxPxsrvfohF7wvUNh64A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675231840115,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L3oTiSu4rALAP2R7RvzD8TH1jBhlp4S5ZMwC5H8-6Xw"},
{"content":{"body":"> <@haxjs:matrix.org> At least wikipedia article also use ID as the abbr for identifier or identity ( https://en.wikipedia.org/wiki/Identifier )\n\nWhat are you talking about? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24IUZeo3uks7n-CRdRBtzml9M_jLyLLPXsNp1vQKUrqIs\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>At least wikipedia article also use ID as the abbr for identifier or identity ( https://en.wikipedia.org/wiki/Identifier )</blockquote></mx-reply>What are you talking about?","m.relates_to":{"m.in_reply_to":{"event_id":"$IUZeo3uks7n-CRdRBtzml9M_jLyLLPXsNp1vQKUrqIs"}},"msgtype":"m.text"},"ts":1675241416351,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$_mdCa_DO4r-s0-UGQ7OAWpL3E2M_ziwmgJ2Bpk0bp1Q"},
{"content":{"body":"So wikipedia is probably not a good source to go for here.","msgtype":"m.text"},"ts":1675241443811,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$UuSxmUmx_TEefZtbyJ9nZbRXxs7WkrhOrXE_eQEOrLU"},
{"content":{"body":"`_ ? _ : _`","format":"org.matrix.custom.html","formatted_body":"<code>_ ? _ : _</code>","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$L3oTiSu4rALAP2R7RvzD8TH1jBhlp4S5ZMwC5H8-6Xw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675243678851,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IlFCJ8IUS24WbWQ0itxZ5fzyzl53DClhUciaWyeMxzE"},
{"content":{"body":"> <@ljharb:matrix.org> at any rate i feel very strongly against \"Id\" but \"identifier\" or \"code\" seem fine to me\n\nljharb: Could you clarify how you feel about \"ID\", an acronym of \"identity document\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x_85lJG5wFEm96lPF7QWcYfd78p3Afn1ZztvchdyMaw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>at any rate i feel very strongly against &quot;Id&quot; but &quot;identifier&quot; or &quot;code&quot; seem fine to me</blockquote></mx-reply><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Could you clarify how you feel about &quot;ID&quot;, an acronym of &quot;identity document&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$x_85lJG5wFEm96lPF7QWcYfd78p3Afn1ZztvchdyMaw"}},"msgtype":"m.text"},"ts":1675249441694,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$CFa02gPNfFRccXtP1Vy5ERoZt8E-EcjneTMod2pbr78"},
{"content":{"body":"This _should_ now be OK for day 1 & 2.","format":"org.matrix.custom.html","formatted_body":"This <em>should</em> now be OK for day 1 &amp; 2.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$u3ucSgAy3Z3FvQAeJO-9WjI7fSK1eEbsWkE9kffsyXE"}}},"ts":1675254759479,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jsoOOJ-Mwppb1UYpugjQkgEJSYlDOGFg744jwXStroY"},
{"content":{"body":"> <@littledan:matrix.org> Notes editors: let’s remember to remove the >> and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.\n\n * This _should_ now be OK for day 1 & 2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u3ucSgAy3Z3FvQAeJO-9WjI7fSK1eEbsWkE9kffsyXE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Notes editors: let’s remember to remove the &gt;&gt; and add a blank line between different speakers (and text that you want to render in different paragraphs in general). I did this for some topics but I think we can also do it on-line as well.</blockquote></mx-reply> * This <em>should</em> now be OK for day 1 &amp; 2.","m.new_content":{"body":"This _should_ now be OK for day 1 & 2.","format":"org.matrix.custom.html","formatted_body":"This <em>should</em> now be OK for day 1 &amp; 2.","msgtype":"m.text"},"m.relates_to":{"event_id":"$jsoOOJ-Mwppb1UYpugjQkgEJSYlDOGFg744jwXStroY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675254764145,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$leDy6bQj7wv2kuNbZxGoUOhyUT5R_jQ-o3MXcA8QKzs"},
{"content":{"body":"I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.","msgtype":"m.text"},"ts":1675254836845,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RODaXNr5rOoT66svQtAiOtnMS06FMDFSiJc749GM70k"},
{"content":{"body":" * I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.","m.new_content":{"body":"I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.","msgtype":"m.text"},"m.relates_to":{"event_id":"$RODaXNr5rOoT66svQtAiOtnMS06FMDFSiJc749GM70k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675254844829,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YRQUqoNxgCpPik8wL0nAFbLsr7oop1HnARjwJb31K5U"},
{"content":{"body":"> <@pipobscure:matrix.org> What are you talking about?\n\ncheck the page history, someone changed ID to Id yesterday. 🫥","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_mdCa_DO4r-s0-UGQ7OAWpL3E2M_ziwmgJ2Bpk0bp1Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@pipobscure:matrix.org\">@pipobscure:matrix.org</a><br>What are you talking about?</blockquote></mx-reply>check the page history, someone changed ID to Id yesterday. 🫥","m.relates_to":{"m.in_reply_to":{"event_id":"$_mdCa_DO4r-s0-UGQ7OAWpL3E2M_ziwmgJ2Bpk0bp1Q"}},"msgtype":"m.text"},"ts":1675259097315,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$tPhY9PQbzpqHi1LblCDNwHdhIGYvCcu91jsXBIAcsKo"},
{"content":{"body":"> <@aclaymore:matrix.org> I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.\n\nGood point, we usually do that and I hadn’t made that fix","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24RODaXNr5rOoT66svQtAiOtnMS06FMDFSiJc749GM70k\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I think we should also keep the practice of starting every paragraph with the acronym, even if it's a continuation of the current speaker. To make it super clear that it is a continuation and not a missing acronym.</blockquote></mx-reply>Good point, we usually do that and I hadn’t made that fix","m.relates_to":{"m.in_reply_to":{"event_id":"$RODaXNr5rOoT66svQtAiOtnMS06FMDFSiJc749GM70k"}},"msgtype":"m.text"},"ts":1675259193645,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$taZWddEvjegQBqW0kOGAmzKi72T5Dpz4A0i6Fznir7M"},
{"content":{"body":"One point to note there, the transcriptionist introduces many unnecessary or unnatural newlines\n\nThis affects the grammar checking a lot, and is very tedious to clean up(and sometimes to even notice)","msgtype":"m.text"},"ts":1675259591497,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$wRtSA5AgCQCJ73-gRDr7LTTZ44-mpRiD1mZjA3mjR4Q"},
{"content":{"body":"yep hopefully that can get sorted at some point. I would say \"surely that is an easy part of the software to change\" but we all know not to assume the ease of making code changes to software :D","msgtype":"m.text"},"ts":1675260043404,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mdQz5csGYWc7mlbvmO0ekZW8Q3Kup7uwEVvxqQGvPgU"},
{"content":{"body":" * yep hopefully that can get sorted at some point. I would say \"surely that is an easy part of the software to change\" but we all know not to assume the ease of making code changes to software :D","m.new_content":{"body":"yep hopefully that can get sorted at some point. I would say \"surely that is an easy part of the software to change\" but we all know not to assume the ease of making code changes to software :D","msgtype":"m.text"},"m.relates_to":{"event_id":"$mdQz5csGYWc7mlbvmO0ekZW8Q3Kup7uwEVvxqQGvPgU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675260052833,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$T57lmux5Gtk0pAc9PuLspKGsOZ_umsqmcU9peFh4Q7I"},
{"content":{"body":"a post-meeting script that replaces newlines where the previous line has text which does not end in punctuation might cover the majority of the occurrences.","msgtype":"m.text"},"ts":1675260132731,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lIP5BS_oTLehN06wkeGosf_qf21a6Miuv9g11fKsPGc"},
{"content":{"body":"Yes, we complained about these new lines to the transcriptionist, and I will also follow up with the company after this meeting to see if there is any possible fix.","msgtype":"m.text"},"ts":1675260184018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$w5gLKP9pI9_PL0Vttpc0-6IyOCMiiH8MrfCDRZl8NAA"},
{"content":{"body":"> <@haxjs:matrix.org> check the page history, someone changed ID to Id yesterday. 🫥\n\nSorry if that wasn’t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. It’s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24tPhY9PQbzpqHi1LblCDNwHdhIGYvCcu91jsXBIAcsKo\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>check the page history, someone changed ID to Id yesterday. 🫥</blockquote></mx-reply>Sorry if that wasn’t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. It’s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.","m.relates_to":{"m.in_reply_to":{"event_id":"$tPhY9PQbzpqHi1LblCDNwHdhIGYvCcu91jsXBIAcsKo"}},"msgtype":"m.text"},"ts":1675260321266,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$FJKt97UgYG7VGEqNH2JY0WIi-VNlKsr1EGhn_CzwFQo"},
{"content":{"body":"Even years of interwebs experience still let me forget that tone doesn’t always translate well. /blush","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$FJKt97UgYG7VGEqNH2JY0WIi-VNlKsr1EGhn_CzwFQo"}}},"ts":1675260413345,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$fBEEA_8j_DL367sx7F8Xv2ip8ET8AvlTFcGWsDs8orI"},
{"content":{"body":"> <@pipobscure:matrix.org> Sorry if that wasn’t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. It’s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.\n\n * Even years of interwebs experience still let me forget that tone doesn’t always translate well. /blush","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24FJKt97UgYG7VGEqNH2JY0WIi-VNlKsr1EGhn_CzwFQo\">In reply to</a> <a href=\"https://matrix.to/#/@pipobscure:matrix.org\">@pipobscure:matrix.org</a><br>Sorry if that wasn’t clear from the tone. That was me in order to point out how unreliable Wikipedia is for topics where there is controversy. It’s ok as a lookup for common knowledge stuff, but wherever there is ongoing discussion wikipedia is useless.</blockquote></mx-reply> * Even years of interwebs experience still let me forget that tone doesn’t always translate well. /blush","m.new_content":{"body":"Even years of interwebs experience still let me forget that tone doesn’t always translate well. /blush","msgtype":"m.text"},"m.relates_to":{"event_id":"$fBEEA_8j_DL367sx7F8Xv2ip8ET8AvlTFcGWsDs8orI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675260432923,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$0XuDgC5RRkUT9TXQYD4SnbEqYjYbWSAFsAW06eDStbo"},
{"content":{"body":"Yeah I am pretty baffled, what does vandalizing Wikipedia have to do with what we are discussing?","msgtype":"m.text"},"ts":1675260698324,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V2Z82dr6hj_A81q1I-fiWY5TOl6ye16iTbDImocK-K4"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I am pretty baffled, what does vandalizing Wikipedia have to do with what we are discussing?\n\nI resent that (vandalizing?). That was an entirely valid edit. Also you do have to explain why the change is an improvement. So…\n\nBut it does go to show that some sources (i.e. wikipedia) can’t really be valid precedent in this argument. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24V2Z82dr6hj_A81q1I-fiWY5TOl6ye16iTbDImocK-K4\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I am pretty baffled, what does vandalizing Wikipedia have to do with what we are discussing?</blockquote></mx-reply><p>I resent that (vandalizing?). That was an entirely valid edit. Also you do have to explain why the change is an improvement. So…</p>\n<p>But it does go to show that some sources (i.e. wikipedia) can’t really be valid precedent in this argument.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$V2Z82dr6hj_A81q1I-fiWY5TOl6ye16iTbDImocK-K4"}},"msgtype":"m.text"},"ts":1675260816650,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$aJxcb0TSz-Sfb6AKhRhSlYO1rRt1opG5ppoAlPSMII0"},
{"content":{"body":"OK, I think we all know Wikipedia can be edited… not sure what that proves","msgtype":"m.text"},"ts":1675260944148,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uCOqxWLE_ATg7Lk7gRi0SA-u6rSG6y8Dk1QWlOhlKzY"},
{"content":{"body":"The bigger point here is, we should be able to collectively bikeshed something and be able to draw a conclusion based on treating all delegates as equal and respecting all the points raised. This is what we are having trouble doing here.","msgtype":"m.text"},"ts":1675260978107,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RB5HXyjUCzp3o5bj7ke_HxIs_-lTm7kf2M1_7D2aEAY"},
{"content":{"body":"I think our unanimity model is getting a little frustrating here because folks feel like threats of blocks are being used in a way that makes other delegates feel like their point will be ignored (which would violate the original goal of our consensus-seeking in the first place). This equality/inclusion/process question is a bigger issue than the actual contents of the arguments (since anything will work technically).","msgtype":"m.text"},"ts":1675261285219,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PUGDwK9AKKgwRzc1IRHufS_Q9YaGIo6wkveu7CiD6bg"},
{"content":{"body":"Luckily we could ensure that doesn't happen. Scala evolves with a very different process","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$IlFCJ8IUS24WbWQ0itxZ5fzyzl53DClhUciaWyeMxzE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675263073055,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$5Y88djUV-OMcoM9gxHQObjJb_rjRXknS8rmc0gGu8QY"},
{"content":{"body":"And values different things","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$5Y88djUV-OMcoM9gxHQObjJb_rjRXknS8rmc0gGu8QY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675263081683,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$-cO1EB4pJoKk56lEZ_9kV7JJ_MBXlKjljdRRUuSQ1VY"},
{"content":{"body":"But as someone who wrote it in some capacity professionally for four years, the _ seems like a more natural  placeholder","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$-cO1EB4pJoKk56lEZ_9kV7JJ_MBXlKjljdRRUuSQ1VY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675263127796,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$_YZhfjt7XakbU_6Z-uOumCwBkBXhhcqEFFDRD1MZ4Bg"},
{"content":{"body":"Compiled languages have it so much easier in many ways...","m.relates_to":{"event_id":"$8o7d7kxS99gAfu4IOy7vmOvinrSSx_Wl76bMgHd0CGw","is_falling_back":true,"m.in_reply_to":{"event_id":"$_YZhfjt7XakbU_6Z-uOumCwBkBXhhcqEFFDRD1MZ4Bg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675263311014,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$hvSuSOSMlc3YQ2coRTRHm65-13JQ0KOD0Iu_ov8a4xw"},
{"content":{"body":"> <@littledan:matrix.org> I think our unanimity model is getting a little frustrating here because folks feel like threats of blocks are being used in a way that makes other delegates feel like their point will be ignored (which would violate the original goal of our consensus-seeking in the first place). This equality/inclusion/process question is a bigger issue than the actual contents of the arguments (since anything will work technically).\n\nI would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PUGDwK9AKKgwRzc1IRHufS_Q9YaGIo6wkveu7CiD6bg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think our unanimity model is getting a little frustrating here because folks feel like threats of blocks are being used in a way that makes other delegates feel like their point will be ignored (which would violate the original goal of our consensus-seeking in the first place). This equality/inclusion/process question is a bigger issue than the actual contents of the arguments (since anything will work technically).</blockquote></mx-reply>I would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.","m.relates_to":{"m.in_reply_to":{"event_id":"$PUGDwK9AKKgwRzc1IRHufS_Q9YaGIo6wkveu7CiD6bg"}},"msgtype":"m.text"},"ts":1675263619678,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$cYx1OZX1TGZJDT9Ahn0v5TaWjRsBvwVbJRML4IjWsdQ"},
{"content":{"body":"I think all other TC's use a true consensus model.","msgtype":"m.text"},"ts":1675263688344,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$V3BqCYVFQGMmyTIXQaW6LZj691U2t1-E1q-Jn7MOzRw"},
{"content":{"body":"It feels like there needs to be a very clear model of what kind of dissent and by how many parties constitutes a breakage of consensus. ","msgtype":"m.text"},"ts":1675264241802,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$MccSUSLnPNBElla7ekS4_iFCT70WxQn__6v1Vb1iihM"},
{"content":{"body":"re: async contexts, I am assuming that the behavior is, whenever a function is scheduled to be run on a subsequent microtask tick or turn of the event loop, the host is required to snapshot the current async context bits and then restore them before running the function?","msgtype":"m.text"},"ts":1675264466633,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wQFcfuAWcHEcKpmdqRJUXWA3-7SITrf4-BhHsV-rhgs"},
{"content":{"body":"If not one, how many? To be honest, I feel the problem is not 100% or 80%.","msgtype":"m.text"},"ts":1675264482457,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$mxnvjQVXztzyrCLVrrZzAI9d5jlie32HhG7cyqT3Orc"},
{"content":{"body":"i.e. this isn't just for literal `async` but also for stuff like `addEventListener`?","format":"org.matrix.custom.html","formatted_body":"i.e. this isn't just for literal <code>async</code> but also for stuff like <code>addEventListener</code>?","msgtype":"m.text"},"ts":1675264483402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hZtq6BU0H59F3_Y_0gVE4KSPOfi--7587n3APGmDdKE"},
{"content":{"body":" * i.e. this isn't just for literal `async` but also for stuff like `addEventListener`?","format":"org.matrix.custom.html","formatted_body":" * i.e. this isn't just for literal <code>async</code> but also for stuff like <code>addEventListener</code>?","m.new_content":{"body":"i.e. this isn't just for literal `async` but also for stuff like `addEventListener`?","format":"org.matrix.custom.html","formatted_body":"i.e. this isn't just for literal <code>async</code> but also for stuff like <code>addEventListener</code>?","msgtype":"m.text"},"m.relates_to":{"event_id":"$hZtq6BU0H59F3_Y_0gVE4KSPOfi--7587n3APGmDdKE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675264488451,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2-fvdRGj8kHJZfi_wpNXCTAt9jEAC93qwSBhSiJIIrY"},
{"content":{"body":"> <@msaboff:matrix.org> I would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.\n\nI agree. The failure mode we have is very unfortunate, and this case highlights it. I think this indicates a need for us to reconsider our process.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cYx1OZX1TGZJDT9Ahn0v5TaWjRsBvwVbJRML4IjWsdQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>I would support the change to a consensus model that doesn't require 100% agreement.  I don't like that one veto stops something.</blockquote></mx-reply>I agree. The failure mode we have is very unfortunate, and this case highlights it. I think this indicates a need for us to reconsider our process.","m.relates_to":{"m.in_reply_to":{"event_id":"$cYx1OZX1TGZJDT9Ahn0v5TaWjRsBvwVbJRML4IjWsdQ"}},"msgtype":"m.text"},"ts":1675264497812,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5HyhHEHe8eVuaDxbCP68JRp4jZaKcfUJSkQHcGhFE30"},
{"content":{"body":"though event listeners are kind of an odd case, because they run _sync_ if you dispatch an event manually, so I'm not totally clear what's supposed to happen there...","format":"org.matrix.custom.html","formatted_body":"though event listeners are kind of an odd case, because they run <em>sync</em> if you dispatch an event manually, so I'm not totally clear what's supposed to happen there...","msgtype":"m.text"},"ts":1675264508650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c1YnrT6RPd_k7MZ9O1HeIY-7V3_DVVRu1X23BlS-XJM"},
{"content":{"body":"> <@bakkot:matrix.org> re: async contexts, I am assuming that the behavior is, whenever a function is scheduled to be run on a subsequent microtask tick or turn of the event loop, the host is required to snapshot the current async context bits and then restore them before running the function?\n\nyes, there will be a responsibility for the host environment to make sure the event-scheduling APIs it introduces (like `setTimeout`) use something similar to `AsyncContext.wrap` for their callbacks","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wQFcfuAWcHEcKpmdqRJUXWA3-7SITrf4-BhHsV-rhgs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: async contexts, I am assuming that the behavior is, whenever a function is scheduled to be run on a subsequent microtask tick or turn of the event loop, the host is required to snapshot the current async context bits and then restore them before running the function?</blockquote></mx-reply>yes, there will be a responsibility for the host environment to make sure the event-scheduling APIs it introduces (like <code>setTimeout</code>) use something similar to <code>AsyncContext.wrap</code> for their callbacks","m.relates_to":{"m.in_reply_to":{"event_id":"$wQFcfuAWcHEcKpmdqRJUXWA3-7SITrf4-BhHsV-rhgs"}},"msgtype":"m.text"},"ts":1675264519066,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$nDhLs7b_5S5c8YVHYop-tKOX2cEbY_JdRB3RSt2m3MM"},
{"content":{"body":"bakkot: that's been my understanding as well","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's been my understanding as well","msgtype":"m.text"},"ts":1675264523864,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HouTgWa8ZGbARvR6dubqUYMsNj-XicN7qxjQ-WHKYzg"},
{"content":{"body":"i'm kind of confused by justin's example saying the propagation point is at the await pause","msgtype":"m.text"},"ts":1675264538642,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gbUBruJrUa4UURPjez2K_jblf030Ag8qTPPgcKKMmTc"},
{"content":{"body":"there is a decent list of proposals that were blocked by a lone objector, including some of the folks discussing changing the process here, fwiw. would we revist all of those if there were a process change?","msgtype":"m.text"},"ts":1675264543902,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CnZ6vLRNIeyby2cfPMra1AP87jGtuAptZqx30V00RLE"},
{"content":{"body":"it can't work if it's _just_ promise reactions","format":"org.matrix.custom.html","formatted_body":"it can't work if it's <em>just</em> promise reactions","msgtype":"m.text"},"ts":1675264549057,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eAETsWSUb1FoDGVp_z86ubRXKRMqieInKemxVcesQNw"},
{"content":{"body":"right, but those are the hardest to polyfill","msgtype":"m.text"},"ts":1675264564382,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$IxEgmJWospCMne5L3G6WEXt3gheXEotafrt55btiO6A"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'm kind of confused by justin's example saying the propagation point is at the await pause\n\nthe await pause is the point where you are scheduling a thing to be run on a subsequent tick, so that seems consistent?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gbUBruJrUa4UURPjez2K_jblf030Ag8qTPPgcKKMmTc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i&#39;m kind of confused by justin&#39;s example saying the propagation point is at the await pause</blockquote></mx-reply>the await pause is the point where you are scheduling a thing to be run on a subsequent tick, so that seems consistent?","m.relates_to":{"m.in_reply_to":{"event_id":"$gbUBruJrUa4UURPjez2K_jblf030Ag8qTPPgcKKMmTc"}},"msgtype":"m.text"},"ts":1675264598221,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M9OwPfGN9jgAq0c4nJ7gABI00B2rsxd2BfrJBJf8Yhs"},
{"content":{"body":"bakkot: that's the second one, i thought there was a handler scheduled earlier","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's the second one, i thought there was a handler scheduled earlier","msgtype":"m.text"},"ts":1675264615580,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fhswmCnqgpGzxlCWTdLgrLf-red69O7I6PLr6NjmOFM"},
{"content":{"body":"i might be mixing slides?","msgtype":"m.text"},"ts":1675264619731,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M6RJ3UgIt95nFb6-sAypNYOW5t5Tcfe6ZCrjPAkjtPk"},
{"content":{"body":"anyway my point is just the host hooks i added for incumbent are only for JS callbacks","msgtype":"m.text"},"ts":1675264642709,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cGuuzhhOsRTCTRsT243hIxL6qU2tRjPHQF4lkm7fpUk"},
{"content":{"body":"this needs host event loop hook-ins as well","msgtype":"m.text"},"ts":1675264651650,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NtvtjP6yZJZmHPClYeZNPfQ3uVsrJu7NiuXqL4cHtfw"},
{"content":{"body":" * there is a decent list of proposals that were blocked by a lone objector, including some of the folks discussing changing the process here, fwiw. would we revist all of those if there were a process change?","m.new_content":{"body":"there is a decent list of proposals that were blocked by a lone objector, including some of the folks discussing changing the process here, fwiw. would we revist all of those if there were a process change?","msgtype":"m.text"},"m.relates_to":{"event_id":"$CnZ6vLRNIeyby2cfPMra1AP87jGtuAptZqx30V00RLE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675264669103,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4TLwFaFpYQIsTYEUgN_y8ipa8LjUVwDUIJ25Tc3pp4c"},
{"content":{"body":" * anyway my point is just the host hooks i added for incumbent are only for JS callbacks","m.new_content":{"body":"anyway my point is just the host hooks i added for incumbent are only for JS callbacks","msgtype":"m.text"},"m.relates_to":{"event_id":"$cGuuzhhOsRTCTRsT243hIxL6qU2tRjPHQF4lkm7fpUk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675264670239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jsYG-BBPq-eBZCt2Uj_zM--hCPE-h-Eu134NKNG1ws4"},
{"content":{"body":"indeed, as this slide is saying","msgtype":"m.text"},"ts":1675264697761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i3dOzw1tJHN0pybQoEGJkE5XBAwrS-Sk4FkJs_W69n4"},
{"content":{"body":"I will ask the question about event listener dispatch I guess","msgtype":"m.text"},"ts":1675264742060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XkFffuJ-smlm5kotKJCgBI3-PsEfLHidSUsAMn04KNw"},
{"content":{"body":"are folks here aware of the V8 methods `v8::Context::{Get,Set}ContinuationPreservedEmbedderData`?","format":"org.matrix.custom.html","formatted_body":"are folks here aware of the V8 methods <code>v8::Context::{Get,Set}ContinuationPreservedEmbedderData</code>?","msgtype":"m.text"},"ts":1675264760285,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$gYe64AyeGk1KQSNwZfYnILlNLjm82phH60YtUXWupFI"},
{"content":{"body":"that's not quite enough","msgtype":"m.text"},"ts":1675264780756,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kbaaX1pM4AjsbWMMsMCyARXIPupzzB9AR4HzbeRsQNc"},
{"content":{"body":"we have that, yes, but you need more muxing","msgtype":"m.text"},"ts":1675264792807,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ADgIsiWHaGDIyVH36phDFP-baAcDwssxXvpIkYPM_uo"},
{"content":{"body":"I know, but I'm trying to gauge context","msgtype":"m.text"},"ts":1675264793084,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$hfVGHR2EyV_zEYGgaKP3BORSjOLid0Uba9VaXFm24OY"},
{"content":{"body":"> <@bakkot:matrix.org> I will ask the question about event listener dispatch I guess\n\ngood to ask. Though presumably all APIs could be wrapped in userland anyway. So technically nothing also stopping hosts doing that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XkFffuJ-smlm5kotKJCgBI3-PsEfLHidSUsAMn04KNw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I will ask the question about event listener dispatch I guess</blockquote></mx-reply>good to ask. Though presumably all APIs could be wrapped in userland anyway. So technically nothing also stopping hosts doing that?","m.relates_to":{"m.in_reply_to":{"event_id":"$XkFffuJ-smlm5kotKJCgBI3-PsEfLHidSUsAMn04KNw"}},"msgtype":"m.text"},"ts":1675264800726,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ncdAgVfLCrLWT02cNqrbzTgd86YQ04790ZnnyTbgtjA"},
{"content":{"body":"Ashley Claymore: the event listener question is less \"how is this implemented\" and more \"what is the thing you want here\" - I'm trying to get at the mental model, not the implementation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: the event listener question is less &quot;how is this implemented&quot; and more &quot;what is the thing you want here&quot; - I'm trying to get at the mental model, not the implementation","msgtype":"m.text"},"ts":1675264869059,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d9WdzMyxH7Y6lkZCxU6Y5Q_wzvK0l8asS_eo9qCYulI"},
{"content":{"body":"I disagree with Justin's example: i think web platform built-ins should do the `wrap` for you. It's more like if you have JS code which queues callbacks, that you want `wrap`.","format":"org.matrix.custom.html","formatted_body":"I disagree with Justin's example: i think web platform built-ins should do the <code>wrap</code> for you. It's more like if you have JS code which queues callbacks, that you want <code>wrap</code>.","msgtype":"m.text"},"ts":1675264898824,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Bu3-usaePQuOpzxfUjFKOsEw-FvtMYVIgHHAlVtTpbI"},
{"content":{"body":"that becomes a lot easier if/once `AsyncWrap` is standardized","format":"org.matrix.custom.html","formatted_body":"that becomes a lot easier if/once <code>AsyncWrap</code> is standardized","msgtype":"m.text"},"ts":1675264927935,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Yx5g-80Uu8ZexYKN4g2-Ly_30MeTCxgJwnBm8yvK6B4"},
{"content":{"body":"> <@bakkot:matrix.org> Ashley Claymore: the event listener question is less \"how is this implemented\" and more \"what is the thing you want here\" - I'm trying to get at the mental model, not the implementation\n\nhttps://github.com/legendecas/proposal-async-context/issues/19 many events are emitted by runtimes asynchronously","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$d9WdzMyxH7Y6lkZCxU6Y5Q_wzvK0l8asS_eo9qCYulI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: the event listener question is less \"how is this implemented\" and more \"what is the thing you want here\" - I'm trying to get at the mental model, not the implementation</blockquote></mx-reply>https://github.com/legendecas/proposal-async-context/issues/19 many events are emitted by runtimes asynchronously","m.relates_to":{"m.in_reply_to":{"event_id":"$d9WdzMyxH7Y6lkZCxU6Y5Q_wzvK0l8asS_eo9qCYulI"}},"msgtype":"m.text"},"ts":1675264935978,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$ErE7XdQD47Pz1HOfmIrwuidQhWuOT8EtAAk7yCW3xqo"},
{"content":{"body":"> <@benjamn:matrix.org> that becomes a lot easier if/once `AsyncWrap` is standardized\n\nYes, obviously the platform can't do anything if we don't add AsyncContext :) I was just nit-picking","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Yx5g-80Uu8ZexYKN4g2-Ly_30MeTCxgJwnBm8yvK6B4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>that becomes a lot easier if/once <code>AsyncWrap</code> is standardized</blockquote></mx-reply>Yes, obviously the platform can't do anything if we don't add AsyncContext :) I was just nit-picking","m.relates_to":{"m.in_reply_to":{"event_id":"$Yx5g-80Uu8ZexYKN4g2-Ly_30MeTCxgJwnBm8yvK6B4"}},"msgtype":"m.text"},"ts":1675264963641,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tvJiCrYO1a8pfDiemwDaqtN_gaz1fE06UPQ-cGRvJes"},
{"content":{"body":"Chengzhong Wu: right, and others are emitted synchronously (e.g. by a manual `dispatchEvent`)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>: right, and others are emitted synchronously (e.g. by a manual <code>dispatchEvent</code>)","msgtype":"m.text"},"ts":1675264973651,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sAfuCE9EuLo4I2p0dNczaBG08eEzbAqu3VXGMH2OgTo"},
{"content":{"body":"so: if you register an event listener while within an async context, and then an event is dispatched async by the browser, presumably you want the listener to see the original context. but what if the event is dispatched sync, by `dispatchEvent`? sync dispatch is basically just a weird sort of function call, so it seems like it's the _current_ context, not the original one?","format":"org.matrix.custom.html","formatted_body":"so: if you register an event listener while within an async context, and then an event is dispatched async by the browser, presumably you want the listener to see the original context. but what if the event is dispatched sync, by <code>dispatchEvent</code>? sync dispatch is basically just a weird sort of function call, so it seems like it's the <em>current</em> context, not the original one?","msgtype":"m.text"},"ts":1675265040526,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ak9u-gYvih7ZYohMBqVGXjrpiWguqzj9c3Nz0M-3orQ"},
{"content":{"body":"not clear to me which context you want there","msgtype":"m.text"},"ts":1675265050550,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1nKWZp_ACXBBay5DYqjvRlDqTgdrm2A6DpKEaU5QHgM"},
{"content":{"body":"Unfortunately the answer might depend on the event","msgtype":"m.text"},"ts":1675265109901,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pkGxzpT4DuSrUSWwm_2qhtM0gmHNLswOcCu2g7bPfG8"},
{"content":{"body":"sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)","msgtype":"m.text"},"ts":1675265110726,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$0KUX-myCJgNmzeClkheMHnJ9C3M5nygjft7z5wI5JVY"},
{"content":{"body":" * sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)","m.new_content":{"body":"sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)","msgtype":"m.text"},"m.relates_to":{"event_id":"$0KUX-myCJgNmzeClkheMHnJ9C3M5nygjft7z5wI5JVY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675265120235,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$d-SetqrA0yT61CD0PwEd3z6_85yGakrPLJCEGIHMiFE"},
{"content":{"body":"and there may be up to three answers for different task types","msgtype":"m.text"},"ts":1675265125656,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nvPZGJAkZWbdX7_kNsLn_OR9B9nPV1G-gBm3hWWixxE"},
{"content":{"body":"this would be part of the DOM/HTML/Node.js integration with AsyncContext","msgtype":"m.text"},"ts":1675265140593,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3BbTR3qIiy66NRYcr8wCzIJF7CJh-cGt5mAkZQ5nsH8"},
{"content":{"body":"Yeah, that's the point of an alternative option `captureAsyncContext` of `addEventListener`","format":"org.matrix.custom.html","formatted_body":"Yeah, that's the point of an alternative option <code>captureAsyncContext</code> of <code>addEventListener</code>","msgtype":"m.text"},"ts":1675265142959,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$jmRR-0HgaJsG2mVebSXS1HdxObTm8mp8FT1T3uwGZbU"},
{"content":{"body":"> <@benjamn:matrix.org> sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)\n\nsorry: the same behavior as what?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0KUX-myCJgNmzeClkheMHnJ9C3M5nygjft7z5wI5JVY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>sync function calls should just inherit the current context, leading to the same behavior? (pls clarify)</blockquote></mx-reply>sorry: the same behavior as what?","m.relates_to":{"m.in_reply_to":{"event_id":"$0KUX-myCJgNmzeClkheMHnJ9C3M5nygjft7z5wI5JVY"}},"msgtype":"m.text"},"ts":1675265147195,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uIEbq3BaHy-UXmIIXmsR16g7cW4-ye2A1ZbJ9-PY7xY"},
{"content":{"body":"> <@legendecas:matrix.org> Yeah, that's the point of an alternative option `captureAsyncContext` of `addEventListener`\n\nwell, there are separate questions about whether we want to give programmatic control, and what the default should be for each event.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jmRR-0HgaJsG2mVebSXS1HdxObTm8mp8FT1T3uwGZbU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>Yeah, that's the point of an alternative option <code>captureAsyncContext</code> of <code>addEventListener</code></blockquote></mx-reply>well, there are separate questions about whether we want to give programmatic control, and what the default should be for each event.","m.relates_to":{"m.in_reply_to":{"event_id":"$jmRR-0HgaJsG2mVebSXS1HdxObTm8mp8FT1T3uwGZbU"}},"msgtype":"m.text"},"ts":1675265171798,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yV3W8F_H5t5Tpzn3oYYYlsbZ6zAjZnNRCrdkTlZLSf4"},
{"content":{"body":"the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async","msgtype":"m.text"},"ts":1675265174579,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$dNObKo6j8d1HnCFZH-DkqYWlAdUp28BqPUZQt8EkmZo"},
{"content":{"body":"> <@benjamn:matrix.org> the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async\n\nthis is definitely sometimes not true. It is really not the right answer for the unhandled rejection event, for example (we are discussing this in an issue)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dNObKo6j8d1HnCFZH-DkqYWlAdUp28BqPUZQt8EkmZo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async</blockquote></mx-reply>this is definitely sometimes not true. It is really not the right answer for the unhandled rejection event, for example (we are discussing this in an issue)","m.relates_to":{"m.in_reply_to":{"event_id":"$dNObKo6j8d1HnCFZH-DkqYWlAdUp28BqPUZQt8EkmZo"}},"msgtype":"m.text"},"ts":1675265200499,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_Lp-XtLaAfDFhIUMpsago46yAJ0J5HsfnBP5jvZp_ok"},
{"content":{"body":"I think we have to look event by event to figure this out","msgtype":"m.text"},"ts":1675265214325,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qb37K7oA3s52gNeA4ldXtPiYgLkUjIMDFdRv7dK1aNM"},
{"content":{"body":"sorry I think we must be talking past each other or about slightly different things","msgtype":"m.text"},"ts":1675265221009,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$0TS3QbVNpCuAJQmsaPaptn8pvX7wKNNrujJZIy8nrqg"},
{"content":{"body":"> <@benjamn:matrix.org> the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async\n\nI guess I don't know what those words mean","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dNObKo6j8d1HnCFZH-DkqYWlAdUp28BqPUZQt8EkmZo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>the event should be dispatched with the context you bound/wrapped, whether that happens synchronously or async</blockquote></mx-reply>I guess I don't know what those words mean","m.relates_to":{"m.in_reply_to":{"event_id":"$dNObKo6j8d1HnCFZH-DkqYWlAdUp28BqPUZQt8EkmZo"}},"msgtype":"m.text"},"ts":1675265225231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uqv6M1kQpFiN3_7KficqGtfTs6wqzx5qwexL8IfokAQ"},
{"content":{"body":"calling a wrapped synchronous function would also let you change a context synchronously","msgtype":"m.text","org.matrix.msc1767.text":"calling a wrapped synchronous function would also let you change a context synchronously"},"ts":1675265453095,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YBPteL48HyIkrliHUnFp4KoMlzf7kkUn9uYJdclz0YA"},
{"content":{"body":"OK I think I understand now","msgtype":"m.text"},"ts":1675265458936,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7BK8JNCqRnu13o5afFtYKcjQTz1x4IgAg8lYMwsFaN8"},
{"content":{"body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_","format":"org.matrix.custom.html","formatted_body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting registered to run by code you don't control</em>","msgtype":"m.text"},"ts":1675265716497,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qFmtvADQK-4P0lswX0jY-VR6RmosaBukkn-JSefgQFk"},
{"content":{"body":"is there any precedent for an API like this?","msgtype":"m.text"},"ts":1675265718689,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$noM9FMeQgf91HMCKH99ZqR4bvhXoY-0MErcows7_G5E"},
{"content":{"body":"it's a stage 2 concern, but I'm very skeptical that this is the right representation","msgtype":"m.text"},"ts":1675265731823,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$c-h3JaOhPHhXAwca9vj3a9Y9QIWERhJTR9VSJE5zhqQ"},
{"content":{"body":" * it's a stage 2 concern, but I'm very skeptical that this is the right representation","m.new_content":{"body":"it's a stage 2 concern, but I'm very skeptical that this is the right representation","msgtype":"m.text"},"m.relates_to":{"event_id":"$c-h3JaOhPHhXAwca9vj3a9Y9QIWERhJTR9VSJE5zhqQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675265747102,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$g1lcJmoFF_qu2LJV4KZr7Hnv4LKN0Di_yP3UII2Az7k"},
{"content":{"body":" * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting scheduled by code you don't control_","format":"org.matrix.custom.html","formatted_body":" * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting scheduled by code you don't control</em>","m.new_content":{"body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting scheduled by code you don't control_","format":"org.matrix.custom.html","formatted_body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting scheduled by code you don't control</em>","msgtype":"m.text"},"m.relates_to":{"event_id":"$qFmtvADQK-4P0lswX0jY-VR6RmosaBukkn-JSefgQFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675265788076,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5xVoxCgIkQE5TWGQkwg_CjZmiRMDoWqTTxkLY67TVMo"},
{"content":{"body":" * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_","format":"org.matrix.custom.html","formatted_body":" * the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting registered to run by code you don't control</em>","m.new_content":{"body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_","format":"org.matrix.custom.html","formatted_body":"the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting registered to run by code you don't control</em>","msgtype":"m.text"},"m.relates_to":{"event_id":"$qFmtvADQK-4P0lswX0jY-VR6RmosaBukkn-JSefgQFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675265823182,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1r3HMRKufpr2HuwCnj3YDsvAZ4hvj6DHv98pYeLw0Vs"},
{"content":{"body":"https://github.com/legendecas/proposal-async-context#prior-arts","msgtype":"m.text"},"ts":1675265922336,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$n3Vpxt6LFALpglkBaOykcNin3EEdJXQMOOho8mAF9Yg"},
{"content":{"body":"These are javascript precedents. C# also implements similar APIs","msgtype":"m.text"},"ts":1675265945436,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$vKg78Zl4oNkGDK3bNVKRQk0SAnkz_16-MuANJkOR-tY"},
{"content":{"body":"Reactivity libraries with dependency tracking like SolidJS also have similar though more domain specific APIs","msgtype":"m.text"},"ts":1675265960894,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lg5fzLDPAWfyjUpOhfeqXpPMf9ZgI5XaKN2qgG4Cfgw"},
{"content":{"body":"https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-7.0","m.relates_to":{"event_id":"$vKg78Zl4oNkGDK3bNVKRQk0SAnkz_16-MuANJkOR-tY","is_falling_back":true,"m.in_reply_to":{"event_id":"$vKg78Zl4oNkGDK3bNVKRQk0SAnkz_16-MuANJkOR-tY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675265986443,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$GbpZ1R0aodqztSHxQuKbhon_FdKmNodpjo2Zv1t-Lus"},
{"content":{"body":"here's the link from Mark from the jitsi chat: https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/src/async-contexts/6-async-context-transpose.js","msgtype":"m.text"},"ts":1675266113843,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bJQg8VKQqKb-QZX6kjuMmFFM0Lk6J0EpI6SPvEVTGv0"},
{"content":{"body":"thanks for the links, Chengzhong Wu and Ashley Claymore ","format":"org.matrix.custom.html","formatted_body":"thanks for the links, <a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a> and <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>","msgtype":"m.text"},"ts":1675266152541,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0-BuxRiudgZgCAVrzVwkYgt5YiK1hK_oxfT_MswEvgs"},
{"content":{"body":"> <@bakkot:matrix.org> the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs _even though your callback is getting registered to run by code you don't control_\n\nthinking about this more, I guess the fix is, if you are passing a context to someone else you manually `.wrap` the function first","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qFmtvADQK-4P0lswX0jY-VR6RmosaBukkn-JSefgQFk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the fact that not all callbacks will necessarily automatically inherit the context in which the callback was added (depending on the API which adds the callback) is a little bit awkward, since the whole point of this is that you want to define a context which is available when your callback runs <em>even though your callback is getting registered to run by code you don't control</em></blockquote></mx-reply>thinking about this more, I guess the fix is, if you are passing a context to someone else you manually <code>.wrap</code> the function first","m.relates_to":{"m.in_reply_to":{"event_id":"$qFmtvADQK-4P0lswX0jY-VR6RmosaBukkn-JSefgQFk"}},"msgtype":"m.text"},"ts":1675266156538,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EudevcJUVdv7Yf4KpTHIm8D8xJ4OXffKLoCWise0cws"},
{"content":{"body":"I have no idea how a JS engine would implement that super fancy context splitting that Shu was alluding to","msgtype":"m.text"},"ts":1675266156782,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vhordIS4VhHKGlLXNaEdwC_ySEE_0XLVQGDdqDhqDtw"},
{"content":{"body":"this is a bit distinct from weak maps/references","msgtype":"m.text"},"ts":1675266169966,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qJ1W9RZznE1fl6aJ3BvzgF2cj2j58gnjRM3wyitkaUs"},
{"content":{"body":"always impressed by all JS engines' optimization ideas","msgtype":"m.text"},"ts":1675266188420,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DH8L9xL4jPrdRc7qcNtQCdhDGbULUkLB7mTc6hiIpt0"},
{"content":{"body":"Someone might be able to get a published paper out of optimizing this :D","msgtype":"m.text"},"ts":1675266272185,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ldEqNRtlehc1us5tUAQv4u_OFgFwhhntf-v2eM6aEEc"},
{"content":{"body":"\"This one weird trick to get zero overhead async contexts\" ","msgtype":"m.text"},"ts":1675266323634,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2yXhQei7DgKH9erkQNDw5uGWC9VteR-nzGpAbYz0Sag"},
{"content":{"body":"v8 has zero overhead async contexts","msgtype":"m.text"},"ts":1675266384578,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1IDEVBncIdbyToZaxFANXj6k4bFGVEu5SNH-tNOukiY"},
{"content":{"body":"thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","format":"org.matrix.custom.html","formatted_body":"thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> (and friends, like <code>using await</code>, of course) - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$EudevcJUVdv7Yf4KpTHIm8D8xJ4OXffKLoCWise0cws"}}},"ts":1675266387742,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$03zvHBeK02w7hboAqk2T32zF7sYut_T6ARq5ikkZrX4"},
{"content":{"body":"the trick is that sometimes you can't get the stack!","msgtype":"m.text"},"ts":1675266390137,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7Pau7RFajL2let5lEiSwDTvXzI1ZsWsLsy5nv-AQ-iI"},
{"content":{"body":"> <@bakkot:matrix.org> thinking about this more, I guess the fix is, if you are passing a context to someone else you manually `.wrap` the function first\n\n * thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EudevcJUVdv7Yf4KpTHIm8D8xJ4OXffKLoCWise0cws?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>thinking about this more, I guess the fix is, if you are passing a context to someone else you manually <code>.wrap</code> the function first</blockquote></mx-reply> * thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","m.new_content":{"body":"thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","format":"org.matrix.custom.html","formatted_body":"thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","msgtype":"m.text"},"m.relates_to":{"event_id":"$03zvHBeK02w7hboAqk2T32zF7sYut_T6ARq5ikkZrX4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675266409486,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s1vZ5wDIwYPDlIFoPmlxmFBBilXdBKJgTDR8iZRZ8cw"},
{"content":{"body":" * thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","format":"org.matrix.custom.html","formatted_body":" * thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> (and friends, like <code>using await</code>, of course) - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","m.new_content":{"body":"thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","format":"org.matrix.custom.html","formatted_body":"thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> (and friends, like <code>using await</code>, of course) - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you","msgtype":"m.text"},"m.relates_to":{"event_id":"$03zvHBeK02w7hboAqk2T32zF7sYut_T6ARq5ikkZrX4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675266450249,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fzlE9nv1XLNExSFNG_ajjsii5RdMSnOqadY1wstq6dc"},
{"content":{"body":"https://github.com/wintercg/proposal-common-minimum-api/blob/main/asynclocalstorage.md","msgtype":"m.text","org.matrix.msc1767.text":"https://github.com/wintercg/proposal-common-minimum-api/blob/main/asynclocalstorage.md"},"ts":1675266461502,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$m9RkpGQD7OpsxpdMZmxdVDHiGRFyRMMy1MZoa5EZ5xE"},
{"content":{"body":"> <@bakkot:matrix.org> thinking about this even more, I am tempted to say that automatic wrapping happens _only_ when you can't do it yourself, i.e. only for syntactic `yield` and `await` (and friends, like `using await`, of course) - in every other case (including manual calls to `.then`) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you\n\nI mostly agree, with the exception of `.then`. The biggest problem with context passing and Promises is that you would need to potentially wrap _every_ `.then` callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$03zvHBeK02w7hboAqk2T32zF7sYut_T6ARq5ikkZrX4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>thinking about this even more, I am tempted to say that automatic wrapping happens <em>only</em> when you can't do it yourself, i.e. only for syntactic <code>yield</code> and <code>await</code> (and friends, like <code>using await</code>, of course) - in every other case (including manual calls to <code>.then</code>) you can just wrap the continuation yourself, and not have to worry about whether the scheduler you're using happens to do wrapping for you</blockquote></mx-reply>I mostly agree, with the exception of <code>.then</code>. The biggest problem with context passing and Promises is that you would need to potentially wrap <em>every</em> <code>.then</code> callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.","m.relates_to":{"m.in_reply_to":{"event_id":"$03zvHBeK02w7hboAqk2T32zF7sYut_T6ARq5ikkZrX4"}},"msgtype":"m.text"},"ts":1675266516527,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rDNwk0gqsCmgBJlfaJ4hM7HgepDE83kKMuGMpCC_7Dk"},
{"content":{"body":"If it works with `await`, it should work with `.then` on native `Promise` implementations.","format":"org.matrix.custom.html","formatted_body":"If it works with <code>await</code>, it should work with <code>.then</code> on native <code>Promise</code> implementations.","msgtype":"m.text"},"ts":1675266537168,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UVrBTTNRCM4WHMrvKBb_X8Je7YWvGMGpLkFrx54znWo"},
{"content":{"body":"> <@rbuckton:matrix.org> I mostly agree, with the exception of `.then`. The biggest problem with context passing and Promises is that you would need to potentially wrap _every_ `.then` callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.\n\nonly if you have a bunch of `.then` calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rDNwk0gqsCmgBJlfaJ4hM7HgepDE83kKMuGMpCC_7Dk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I mostly agree, with the exception of <code>.then</code>. The biggest problem with context passing and Promises is that you would need to potentially wrap <em>every</em> <code>.then</code> callback in the event one of them throws. This is far more arduous than wrapping the single entrypoint of an event handler.</blockquote></mx-reply>only if you have a bunch of <code>.then</code> calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?","m.relates_to":{"m.in_reply_to":{"event_id":"$rDNwk0gqsCmgBJlfaJ4hM7HgepDE83kKMuGMpCC_7Dk"}},"msgtype":"m.text"},"ts":1675266569337,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZLDpAyD3tJJ47C-TF7aZNpbtm1z1y2f6h3KtQ3W8OjU"},
{"content":{"body":"but I am maybe open to it; something to talk about more","msgtype":"m.text"},"ts":1675266582240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DAQR5hTTo4LCjfgZZsOw4NNaoif1ZytP0HnXl2qvsrs"},
{"content":{"body":"I disagree. If you are still using `.then` today when async/await exists, you are likely doing something far more complex than a single `.then` continuation.","format":"org.matrix.custom.html","formatted_body":"I disagree. If you are still using <code>.then</code> today when async/await exists, you are likely doing something far more complex than a single <code>.then</code> continuation.","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$ZLDpAyD3tJJ47C-TF7aZNpbtm1z1y2f6h3KtQ3W8OjU"}}},"ts":1675266611115,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Da8RcwD2VsG96Ndcwg2KJHPT4nn6V8BLzXyxfr-rHGI"},
{"content":{"body":"tons of people do that with fetch - `await fetch(…).then(x => x.json())`","format":"org.matrix.custom.html","formatted_body":"tons of people do that with fetch - <code>await fetch(…).then(x =&gt; x.json())</code>","msgtype":"m.text"},"ts":1675266632286,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tsc3lqIVLr75TlHTXeygruenH989DfL_-Br6wV-duyA"},
{"content":{"body":"it's pretty common","msgtype":"m.text"},"ts":1675266637222,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LRC83z09clcbKpzhJNIY9NOjk4YVGY1pNNLwBLuZEM8"},
{"content":{"body":"> <@bakkot:matrix.org> only if you have a bunch of `.then` calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?\n\n * I disagree. If you are still using `.then` today when async/await exists, you are likely doing something far more complex than a single `.then` continuation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZLDpAyD3tJJ47C-TF7aZNpbtm1z1y2f6h3KtQ3W8OjU?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>only if you have a bunch of <code>.then</code> calls, which isn't so common, and even then if you factor out a helper to do the wrapping it seems not so arduous?</blockquote></mx-reply> * I disagree. If you are still using <code>.then</code> today when async/await exists, you are likely doing something far more complex than a single <code>.then</code> continuation.","m.new_content":{"body":"I disagree. If you are still using `.then` today when async/await exists, you are likely doing something far more complex than a single `.then` continuation.","format":"org.matrix.custom.html","formatted_body":"I disagree. If you are still using <code>.then</code> today when async/await exists, you are likely doing something far more complex than a single <code>.then</code> continuation.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Da8RcwD2VsG96Ndcwg2KJHPT4nn6V8BLzXyxfr-rHGI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675266637482,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IWmeRHZju5Hp5zNkYvA9Zj39aS_pk8UFbPlHPNbM9Hc"},
{"content":{"body":"I am OK with the people doing the `fetch` thing having to refactor their code or do a manual wrap","format":"org.matrix.custom.html","formatted_body":"I am OK with the people doing the <code>fetch</code> thing having to refactor their code or do a manual wrap","msgtype":"m.text"},"ts":1675266661679,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bv5GwQuzq9SaqKw1uPz1mqYjLanzKsai0ydF-CV5z_s"},
{"content":{"body":"but yes sometimes things get more complicated","msgtype":"m.text"},"ts":1675266668065,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cXOk9RY_P-nPiI9ttpfgWaiuwEAnqA_VwQSKhJEDyGw"},
{"content":{"body":"i haven't been following, but it seems pretty important to preserve the sugar-ness of await over promises.","msgtype":"m.text"},"ts":1675266749183,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5bIKcd30FOF2r23v8ncfCOcwseRvz1Yb4-Vx4uGx9GE"},
{"content":{"body":"my main concern with automatically wrapping in `.then` is, the rule \"you have to wrap any callback, whereas syntactic continuations get wrapped for you\" is much easier to learn than \"Promise.then automatically wraps, but [some other subset of schedulers] does not\"","format":"org.matrix.custom.html","formatted_body":"my main concern with automatically wrapping in <code>.then</code> is, the rule &quot;you have to wrap any callback, whereas syntactic continuations get wrapped for you&quot; is much easier to learn than &quot;Promise.then automatically wraps, but [some other subset of schedulers] does not&quot;","msgtype":"m.text"},"ts":1675266755577,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8hcXVDU7Tkvap4x-RPnyZhq27iK_iPAR7jsMNROTQkk"},
{"content":{"body":"> <@ljharb:matrix.org> i haven't been following, but it seems pretty important to preserve the sugar-ness of await over promises.\n\nit's still preserved either way, the sugar just gets a little more complicated","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5bIKcd30FOF2r23v8ncfCOcwseRvz1Yb4-Vx4uGx9GE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i haven&#39;t been following, but it seems pretty important to preserve the sugar-ness of await over promises.</blockquote></mx-reply>it's still preserved either way, the sugar just gets a little more complicated","m.relates_to":{"m.in_reply_to":{"event_id":"$5bIKcd30FOF2r23v8ncfCOcwseRvz1Yb4-Vx4uGx9GE"}},"msgtype":"m.text"},"ts":1675266785097,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tXYItzXT93oaW8gdMpuvI3EBlwjA8e0SHdJxL8BZxjs"},
{"content":{"body":"in the `.json` case, it will probably be fine that it doesn't keep the context, unless `.json` has been patched","format":"org.matrix.custom.html","formatted_body":"in the <code>.json</code> case, it will probably be fine that it doesn't keep the context, unless <code>.json</code> has been patched","msgtype":"m.text"},"ts":1675266790890,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XOZKbchrGXQ811OTrndmqAmH_HfdxXm0TqQkOGFyoAM"},
{"content":{"body":"oohh I think I like that WinterCG proposed API better","msgtype":"m.text"},"ts":1675266799802,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SnVEgiJtduiMqaXgPuAjGiObc6zP2gIua3H9YwFXf0A"},
{"content":{"body":"that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with `class`","format":"org.matrix.custom.html","formatted_body":"that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with <code>class</code>","msgtype":"m.text"},"ts":1675266813066,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mWKdQgdEIa-iH6CHeZgxWLnAzAhtBsAgC2OyzAHiPcg"},
{"content":{"body":"Can someone link to the YouTube playlist?","msgtype":"m.text"},"ts":1675266825857,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Qq1SWaVdNwJrHo_ATDSuAK_lK5FEduHkxrzf-m-ETBM"},
{"content":{"body":"for the minutes","msgtype":"m.text"},"ts":1675266828831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bYkpjZrTZ-ZNA0aWerIThKBl4j1IJRY-S3JorQsPA9M"},
{"content":{"body":" * that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with `class`","format":"org.matrix.custom.html","formatted_body":" * that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with <code>class</code>","m.new_content":{"body":"that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with `class`","format":"org.matrix.custom.html","formatted_body":"that's fine as long as the non-await usage isn't made more complicated - altho i guess it might be in order to use the new functionality without the sugar, as is the case with <code>class</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$mWKdQgdEIa-iH6CHeZgxWLnAzAhtBsAgC2OyzAHiPcg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675266840310,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EviEp6LVueu3VNaeHnyo7ERh950kQgbObYW1JYYXuBY"},
{"content":{"body":"It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.","format":"org.matrix.custom.html","formatted_body":"It will also be difficult to explain why <code>await x; doSomethingWithContext()</code> would work, but <code>x.then(() =&gt; doSomethingWithContext())</code> wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.","msgtype":"m.text"},"ts":1675266850109,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3m-04bBrbsNraTfXNomYLWilm-mcwUIkjr-ZVXV3AIE"},
{"content":{"body":"> <@rbuckton:matrix.org> It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.\n\nthat seems pretty straightforward to explain, for people using async contexts? \"if you pass a callback, you need to wrap it\" is not a hard rule to learn","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3m-04bBrbsNraTfXNomYLWilm-mcwUIkjr-ZVXV3AIE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It will also be difficult to explain why <code>await x; doSomethingWithContext()</code> would work, but <code>x.then(() =&gt; doSomethingWithContext())</code> wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.</blockquote></mx-reply>that seems pretty straightforward to explain, for people using async contexts? &quot;if you pass a callback, you need to wrap it&quot; is not a hard rule to learn","m.relates_to":{"m.in_reply_to":{"event_id":"$3m-04bBrbsNraTfXNomYLWilm-mcwUIkjr-ZVXV3AIE"}},"msgtype":"m.text"},"ts":1675266911405,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0cpcTx9_ao5lhi8gsX9gkdGDK1a9r12NhTmULyz9Zd4"},
{"content":{"body":"and if you're _not_ using an async context in your own function body you don't need to learn anything","format":"org.matrix.custom.html","formatted_body":"and if you're <em>not</em> using an async context in your own function body you don't need to learn anything","msgtype":"m.text"},"ts":1675266931221,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OJQN1oeYY1Cm_Qka0HxQRsaAAdk5MFjKbqURELNPVXA"},
{"content":{"body":"> <@littledan:matrix.org> Can someone link to the YouTube playlist?\n\ndone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Qq1SWaVdNwJrHo_ATDSuAK_lK5FEduHkxrzf-m-ETBM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Can someone link to the YouTube playlist?</blockquote></mx-reply>done","m.relates_to":{"m.in_reply_to":{"event_id":"$Qq1SWaVdNwJrHo_ATDSuAK_lK5FEduHkxrzf-m-ETBM"}},"msgtype":"m.text"},"ts":1675266950239,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6icyBbEq-hxpKWxRhQ8RmtKaDuj3fWhqXE5cRxJ0tEk"},
{"content":{"body":"I appreciate the investigation into performance from v8 and the security review from SES. From our side, we see use cases for this but need to do a more thorough review. No outstanding concerns from us right now","msgtype":"m.text"},"ts":1675266979742,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$pqP8TFY7baOcp_HpbiUXNBGHHG5nXwOlXTHzGgINkrw"},
{"content":{"body":"what is mark talking about?","msgtype":"m.text"},"ts":1675266986008,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LdhA5WREqkcSZGGXxyeIRHhfMjDW8Yng1rcS0FhgELU"},
{"content":{"body":" * I appreciate the investigation into performance from v8 and the security review from SES. From our side, we see use cases for this but need to do a more thorough review. No outstanding concerns from us right now","m.new_content":{"body":"I appreciate the investigation into performance from v8 and the security review from SES. From our side, we see use cases for this but need to do a more thorough review. No outstanding concerns from us right now","msgtype":"m.text"},"m.relates_to":{"event_id":"$pqP8TFY7baOcp_HpbiUXNBGHHG5nXwOlXTHzGgINkrw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675266993725,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$idjDg1UnwmGcOyImZo6BosvrsghRf0moNYrCVXWr_UI"},
{"content":{"body":"is this the AsyncContext spec draft or 262?","msgtype":"m.text"},"ts":1675266996841,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4BlOZY6PmT6jEQlPGujysad6Kw10dbwcGgbxR6uTGdI"},
{"content":{"body":"the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on","format":"org.matrix.custom.html","formatted_body":"the other side of this, it will be difficult to explain why <code>x.then(doSomethingWithContext)</code> would work, but <code>setTimeout(doSomethingWithContext)</code> would not. so that implies <code>setTimeout</code> needs to automatically wrap as well. and then now you have the same problem but with <code>s/setTimeout/setEventListener/</code>, and so on","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$3m-04bBrbsNraTfXNomYLWilm-mcwUIkjr-ZVXV3AIE"}}},"ts":1675267086185,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gOcfmkNkoUuk2ABFEcvSORkXl-HkNKCXa0izFoux078"},
{"content":{"body":"This becomes one more thing to consider when wrapping code in an `AsyncContext`, especially if that code calls into a third-party package that might use `.then`.","format":"org.matrix.custom.html","formatted_body":"This becomes one more thing to consider when wrapping code in an <code>AsyncContext</code>, especially if that code calls into a third-party package that might use <code>.then</code>.","msgtype":"m.text"},"ts":1675267101707,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U6DnnR8fLM_la0yR0yZDWNyE2p955WgEnL9lwyBUYK4"},
{"content":{"body":"> <@rbuckton:matrix.org> It will also be difficult to explain why `await x; doSomethingWithContext()` would work, but `x.then(() => doSomethingWithContext())` wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.\n\n * the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3m-04bBrbsNraTfXNomYLWilm-mcwUIkjr-ZVXV3AIE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It will also be difficult to explain why <code>await x; doSomethingWithContext()</code> would work, but <code>x.then(() =&gt; doSomethingWithContext())</code> wouldn't. Especially when many editors have refactorings for that, which now become potentially unsafe operations.</blockquote></mx-reply> * the other side of this, it will be difficult to explain why <code>x.then(doSomethingWithContext)</code> would work, but <code>setTimeout(doSomethingWithContext)</code> would not. so that implies <code>setTimeout</code> needs to automatically wrap as well. and then now you have the same problem but with <code>s/setTimeout/setEventListener/</code>, and so on","m.new_content":{"body":"the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on","format":"org.matrix.custom.html","formatted_body":"the other side of this, it will be difficult to explain why <code>x.then(doSomethingWithContext)</code> would work, but <code>setTimeout(doSomethingWithContext)</code> would not. so that implies <code>setTimeout</code> needs to automatically wrap as well. and then now you have the same problem but with <code>s/setTimeout/setEventListener/</code>, and so on","msgtype":"m.text"},"m.relates_to":{"event_id":"$gOcfmkNkoUuk2ABFEcvSORkXl-HkNKCXa0izFoux078","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675267102120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WEWtN-ebUPhO5Nevp8kjw04m6BLcvrZF0FURnmfEGtM"},
{"content":{"body":"since this is only stage 1, can we word the proposal (in its repo and the proposals list) in terms that don't lock us into any API decisions? something like \"hooks for associating state with async call stack frames\"?","msgtype":"m.text"},"ts":1675267130229,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QidHEYBT63o77cRsTZftL3DOQ2QP45tdqcBGjq3XT4Q"},
{"content":{"body":"> <@bakkot:matrix.org> the other side of this, it will be difficult to explain why `x.then(doSomethingWithContext)` would work, but `setTimeout(doSomethingWithContext)` would not. so that implies `setTimeout` needs to automatically wrap as well. and then now you have the same problem but with `s/setTimeout/setEventListener/`, and so on\n\nIIRC, `setTimeout`, `setImmediate`, `process.nextTick` were discussed in the slides as other potential places to automatically flow state.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gOcfmkNkoUuk2ABFEcvSORkXl-HkNKCXa0izFoux078?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the other side of this, it will be difficult to explain why <code>x.then(doSomethingWithContext)</code> would work, but <code>setTimeout(doSomethingWithContext)</code> would not. so that implies <code>setTimeout</code> needs to automatically wrap as well. and then now you have the same problem but with <code>s/setTimeout/setEventListener/</code>, and so on</blockquote></mx-reply>IIRC, <code>setTimeout</code>, <code>setImmediate</code>, <code>process.nextTick</code> were discussed in the slides as other potential places to automatically flow state.","m.relates_to":{"m.in_reply_to":{"event_id":"$gOcfmkNkoUuk2ABFEcvSORkXl-HkNKCXa0izFoux078"}},"msgtype":"m.text"},"ts":1675267156195,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lK2C9iHHtM6mvV0fHVkHyS6aXwJxtktMKB176GzDqAM"},
{"content":{"body":"> <@rbuckton:matrix.org> This becomes one more thing to consider when wrapping code in an `AsyncContext`, especially if that code calls into a third-party package that might use `.then`.\n\ndoes it? if you pass a callback to the library you need to wrap it. but you need to _anyway_ because the third-party package might schedule the callback to get called in some way _other than_ `.then`, like event listener dispatch or something.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$U6DnnR8fLM_la0yR0yZDWNyE2p955WgEnL9lwyBUYK4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This becomes one more thing to consider when wrapping code in an <code>AsyncContext</code>, especially if that code calls into a third-party package that might use <code>.then</code>.</blockquote></mx-reply>does it? if you pass a callback to the library you need to wrap it. but you need to <em>anyway</em> because the third-party package might schedule the callback to get called in some way <em>other than</em> <code>.then</code>, like event listener dispatch or something.","m.relates_to":{"m.in_reply_to":{"event_id":"$U6DnnR8fLM_la0yR0yZDWNyE2p955WgEnL9lwyBUYK4"}},"msgtype":"m.text"},"ts":1675267180924,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TLB58YVdUP1EoUhZnH0PZn77aJHmUagZJKEIJL62QAs"},
{"content":{"body":"Justin Ridgewell: ^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: ^","m.relates_to":{"event_id":"$QidHEYBT63o77cRsTZftL3DOQ2QP45tdqcBGjq3XT4Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$QidHEYBT63o77cRsTZftL3DOQ2QP45tdqcBGjq3XT4Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1675267186277,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uWcoN-zAfSmL4ETmFbTLveGaPw20JOb463UvkfM2Qp0"}
]