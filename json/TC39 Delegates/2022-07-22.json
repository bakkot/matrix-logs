[
{"content":{"body":"Oh god, I finally have a real use for `Symbol.species`: to simulate async contexts.","format":"org.matrix.custom.html","formatted_body":"Oh god, I finally have a real use for <code>Symbol.species</code>: to simulate async contexts.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Oh god, I finally have a real use for `Symbol.species`: to simulate async contexts.","mimetype":"text/plain"},{"body":"Oh god, I finally have a real use for <code>Symbol.species</code>: to simulate async contexts.","mimetype":"text/html"}]},"ts":1658449806708,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6scPKQZFQ0t-cYXImW2TyJkQZktn47gvh-4_VtMgrlo"},
{"content":{"body":"Nope, don't need `species` at all, just need to patch `Promise.prototype.then` and you get all the benefits.","format":"org.matrix.custom.html","formatted_body":"Nope, don't need <code>species</code> at all, just need to patch <code>Promise.prototype.then</code> and you get all the benefits.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Nope, don't need `species` at all, just need to patch `Promise.prototype.then` and you get all the benefits.","mimetype":"text/plain"},{"body":"Nope, don't need <code>species</code> at all, just need to patch <code>Promise.prototype.then</code> and you get all the benefits.","mimetype":"text/html"}]},"ts":1658518945396,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pEnkd7PtyV_lTUkjAaCxB1Ji47pjy2BAw43zyVGBwww"},
{"content":{"body":"Justin Ridgewell: even given that `await` on a native promise will bypass `Promise.prototype.then`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: even given that <code>await</code> on a native promise will bypass <code>Promise.prototype.then</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: even given that `await` on a native promise will bypass `Promise.prototype.then`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: even given that <code>await</code> on a native promise will bypass <code>Promise.prototype.then</code>?","mimetype":"text/html"}]},"ts":1658519311601,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zWNKnFvS4muY_OWjoyUth_zS5Oo8hdUubFycjOcB1PM"},
{"content":{"body":"It's not possible to properly hijack `await` with `species` either","format":"org.matrix.custom.html","formatted_body":"It's not possible to properly hijack <code>await</code> with <code>species</code> either","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It's not possible to properly hijack `await` with `species` either","mimetype":"text/plain"},{"body":"It's not possible to properly hijack <code>await</code> with <code>species</code> either","mimetype":"text/html"}]},"ts":1658519359106,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$v-b9You5uqPrfSVZH_yHVHjhKE4hDhkEx0fqlOUMKzc"},
{"content":{"body":"You have to manually restore after the `await` is over.","format":"org.matrix.custom.html","formatted_body":"You have to manually restore after the <code>await</code> is over.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You have to manually restore after the `await` is over.","mimetype":"text/plain"},{"body":"You have to manually restore after the <code>await</code> is over.","mimetype":"text/html"}]},"ts":1658519373099,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9q_HdGcumUmnWguteaVK_09FHxDWwI7eEfw8fv81I_s"},
{"content":{"body":"true, true","msgtype":"m.text","org.matrix.msc1767.text":"true, true"},"ts":1658519373237,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lS1B7evZLGurSU_-MndAxmp_rcWQ2it3uH4y3tcBxus"},
{"content":{"body":"well","msgtype":"m.text","org.matrix.msc1767.text":"well"},"ts":1658519374182,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EQkG1PoWpntLA6FjQNi6ZC8bkQeXvN5o27qiOHCjD2M"},
{"content":{"body":"you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","format":"org.matrix.custom.html","formatted_body":"you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","mimetype":"text/plain"},{"body":"you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","mimetype":"text/html"}]},"ts":1658519413480,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VkcBRdbide3KNfjXMu1SLSACyc1aCO_03gHAQRik44Q"},
{"content":{"body":"please do not do this though","msgtype":"m.text","org.matrix.msc1767.text":"please do not do this though"},"ts":1658519416075,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BvmtKRG1P3R4E4F-GkkbjVBLrQ6TMi5v3j2dmH5ChW8"},
{"content":{"body":"especially given that you're thinking of changing how the fast-path in `await` works","format":"org.matrix.custom.html","formatted_body":"especially given that you're thinking of changing how the fast-path in <code>await</code> works","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"especially given that you're thinking of changing how the fast-path in `await` works","mimetype":"text/plain"},{"body":"especially given that you're thinking of changing how the fast-path in <code>await</code> works","mimetype":"text/html"}]},"ts":1658519430638,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q8dGG0xWTGfHd2P-box5iINedDssO2ItAeocARGZZoM"},
{"content":{"body":" * you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","format":"org.matrix.custom.html","formatted_body":" * you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","m.new_content":{"body":"you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","format":"org.matrix.custom.html","formatted_body":"you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","mimetype":"text/plain"},{"body":"you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$VkcBRdbide3KNfjXMu1SLSACyc1aCO_03gHAQRik44Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * you _could_ replace `Promise.prototype.constructor` with something other than `Promise`, and then `await` would always fall back to the slow path where it calls the actual `.then`","mimetype":"text/plain"},{"body":" * you <em>could</em> replace <code>Promise.prototype.constructor</code> with something other than <code>Promise</code>, and then <code>await</code> would always fall back to the slow path where it calls the actual <code>.then</code>","mimetype":"text/html"}]},"ts":1658519450526,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AZXveCDVdUonmJNtVOhjgc2aFKmV4vfr-HXkXsyZATU"},
{"content":{"body":"I believe the await will still resume 1 tick after settling the patched promise?","msgtype":"m.text","org.matrix.msc1767.text":"I believe the await will still resume 1 tick after settling the patched promise?"},"ts":1658519464973,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YZlQxDgxA31ibUGzJc6w1fV1oSXmEmIA_MY6fQMNsro"},
{"content":{"body":"depends on what your implementation of `.then` does","format":"org.matrix.custom.html","formatted_body":"depends on what your implementation of <code>.then</code> does","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"depends on what your implementation of `.then` does","mimetype":"text/plain"},{"body":"depends on what your implementation of <code>.then</code> does","mimetype":"text/html"}]},"ts":1658519507832,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uq4-ZPUmVd1rfLENkUVqIpmrjrcTV8U-PiKjPg62xJ8"},
{"content":{"body":"it _could_ just call the continuation synchronously, if you wanted","format":"org.matrix.custom.html","formatted_body":"it <em>could</em> just call the continuation synchronously, if you wanted","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it _could_ just call the continuation synchronously, if you wanted","mimetype":"text/plain"},{"body":"it <em>could</em> just call the continuation synchronously, if you wanted","mimetype":"text/html"}]},"ts":1658519515192,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rftN9RXObNZWi5AEP-1Pljnai2HER1L0-ZFkWqkh7s0"},
{"content":{"body":"though, again, don't","msgtype":"m.text","org.matrix.msc1767.text":"though, again, don't"},"ts":1658519517761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8RMwlVv6BqDgLlisOGr-z56JsXek8p7iKNZ2V-eRhrs"},
{"content":{"body":"oh, wait, no, that's a lie","msgtype":"m.text","org.matrix.msc1767.text":"oh, wait, no, that's a lie"},"ts":1658519546886,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IdAFbilS5xb-lV7dnRR6dVoEyqzr4FU0RUurTjnbi3k"},
{"content":{"body":"it will always take at least 1 tick, yes","msgtype":"m.text","org.matrix.msc1767.text":"it will always take at least 1 tick, yes"},"ts":1658519555978,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D3odicf-J-XE7UXq0cBOePNnBVBUGmdHVmyZbSpZfcM"},
{"content":{"body":"Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick.","msgtype":"m.text","org.matrix.msc1767.text":"Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick."},"ts":1658519562154,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xWmjcyfQWPao68tOGe3LFiGQGDhZwVpj2jvJtWS2fq0"},
{"content":{"body":" * Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick.","m.new_content":{"body":"Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick.","msgtype":"m.text","org.matrix.msc1767.text":"Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick."},"m.relates_to":{"event_id":"$xWmjcyfQWPao68tOGe3LFiGQGDhZwVpj2jvJtWS2fq0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Yah, you consume the userland promise into a native, then chain on the native, which must wait 1 tick."},"ts":1658519578211,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$q3YGDF-VRfe_Lx3jqpB1YC2WM8Dlczc4oGbQVtDfi6E"}
]