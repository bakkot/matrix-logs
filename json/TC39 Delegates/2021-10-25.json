[
{"content":{"body":"The sign-in form is now on the Reflector issue.  Please do not post the link here because this is a public channel.","msgtype":"m.text"},"ts":1635144409052,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$mosuC6LNq_FPfBbUmpRSciv5mNPNehnZuZ0uZkp9tiE"},
{"content":{"body":"Please could someone try the form to check it's working.","msgtype":"m.text"},"ts":1635144696157,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4OAny5ZvuTp__39sr2aybslduIvosAXv_HzLFXYfjtM"},
{"content":{"body":"Rob Palmer: just did","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: just did","msgtype":"m.text"},"ts":1635144906263,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7rszQFon6kxf1fq_BTb7lNIae09UI2CSYOtRMQ1U9qA"},
{"content":{"body":"I filled out the form and it works","msgtype":"m.text"},"ts":1635144929590,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$3kTjwcU_GsKsxZb8bXQrq5NwI9R5EwvIhBCn0xY5ACA"},
{"content":{"body":"thanks legendecas!","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@legendecas:matrix.org\">legendecas</a>!","msgtype":"m.text"},"ts":1635144940172,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$HYRnOphd9OJ_BiWnqKOMW-CMeWLCjql80JOlP0WWGYw"},
{"content":{"body":"There are 5 of us in the Jitsi call.  We'll kick off in 8 mins!","msgtype":"m.text"},"ts":1635151943044,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$C5WjCgLQ2NwPtfn8xkb8PUJ0ZIhoj-qmVTPwMnHj-Eg"},
{"content":{"body":"13 people are here - two mins to go!","msgtype":"m.text"},"ts":1635152300922,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$6MKVlUI8ehkPgf9FiHkHIBt-l5NDrmvbO7uWzqU_VbI"},
{"content":{"body":"26 people now - and we are go","msgtype":"m.text"},"ts":1635152626088,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$_ueGxXuJkqDW9bDwN-mNsDcZcmDVS1Q5QocWg1x5b6I"},
{"content":{"body":"what is the password of the meeting?","msgtype":"m.text"},"ts":1635152727224,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eSkyk25hlWyMwf_3-77cp_WPYJhoxQiBanBPqSUfocA"},
{"content":{"body":"use the form on the reflector","msgtype":"m.text"},"ts":1635152738374,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RnmhFMpEb7pyNOR5AqTbElKcXOKLx2-y9maUTxNbYhQ"},
{"content":{"body":"do not post the password here","msgtype":"m.text"},"ts":1635152741927,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$3nhUco3XKv-IxKGdOavyyHrzT0dOIoFOLCKWTpBwWXA"},
{"content":{"body":"oh ok thanks","msgtype":"m.text"},"ts":1635152748204,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LOkk7W7IhwJ6ABWIWuVyOg_nDx6dTb5o0EKDnLgjSLY"},
{"content":{"body":"40 people are here now - good turnout for 2am Pacific Time","msgtype":"m.text"},"ts":1635154225443,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$wWfQnqO2WV8oEITuNV5KmlUbaP78shlXdLVY-64dNkM"},
{"content":{"body":"many folks missing affiliations in the names","msgtype":"m.text"},"ts":1635154291909,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOJOT0zYTA8GK_M3dPgCke2C2RA6TbXnn0shXomF1QA"},
{"content":{"body":"anyone who just shows up as an email address probably has an 8x8 meet account","msgtype":"m.text"},"ts":1635154391685,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$2is3hT8bbfWgvqCftf8U9NonbSlLiWejrk9zdX9B5dc"},
{"content":{"body":"which doesn't support display names????","msgtype":"m.text"},"ts":1635154399078,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$Ux1DB9iRvQqmNrh8sdTO6LuU9FN3p8PuqoeTVOskNdo"},
{"content":{"body":"Several of the people in the 8x8 don't have full names even","msgtype":"m.text"},"ts":1635154419053,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_Xc09ydipjZqS0k2XEXvw2D-xOzAR4OrCg2R0eF_HVc"},
{"content":{"body":"yeah i see that","msgtype":"m.text"},"ts":1635154447076,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$SA9Qd3o1OnJu1hAM-7ob74bKN9YTtVMYJf4YC1tuemU"},
{"content":{"body":"there's literally someone with `test123` on here ðŸ˜…","format":"org.matrix.custom.html","formatted_body":"there's literally someone with <code>test123</code> on here ðŸ˜…","msgtype":"m.text"},"ts":1635154529630,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$mQEY_ZnTImOGZ3L27Nx4fX2PdLWn8x-eAJzNpsSVp5Q"},
{"content":{"body":"Aki: should we give an announcement about that? possible tighten the form so that if the name is not on the form they get booted?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: should we give an announcement about that? possible tighten the form so that if the name is not on the form they get booted?","msgtype":"m.text"},"ts":1635154742826,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$S3BHu-5Epi7vwfYL4J_GRcLKFQfb2ZZTZFh5duDpazc"},
{"content":{"body":"Yup. that's my plan ","msgtype":"m.text"},"ts":1635154760610,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$f82mue93-6YiVhbayO0DwhIa94cFPYX6Tzmz2_xTwYU"},
{"content":{"body":"did we have local-only meetings in 2019?","msgtype":"m.text"},"ts":1635154844106,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$WwlgezjsULuVd__lPovuGghUvNLv-aBrb9zqEt_pDFU"},
{"content":{"body":"we haven't had a local-only meeting inâ€¦Â idek 6 years?","msgtype":"m.text"},"ts":1635155074142,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$Eh1TouhoqAa8PHyoP1rur-Ud7SlilPlzJfAaTjkngv0"},
{"content":{"body":"sounds good, I was just confused because they were mentioned in Istvan's report as \"no longer on the table\" but I thought they had been so for a while","msgtype":"m.text"},"ts":1635155128693,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$hbG0hzSlSmN3fiWtDiHCPYT8wcQZXd1DfXZkUarfGkE"},
{"content":{"body":"SDO = Standards Development Organization â˜º","msgtype":"m.text"},"ts":1635155480893,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$VqBncQqG3Sv1WERCmGCPAM6MSvP-XudPRvDipibgLhE"},
{"content":{"body":"who wants to add SDO (syntax directed operation) to terminology? \nhttps://github.com/tc39/how-we-work/blob/master/terminology.md","msgtype":"m.text"},"ts":1635155551949,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AQWryjkdZ8i78w9gZZ36ONrFe9Fd322kZWOgYOa7N5I"},
{"content":{"body":"we can add both definitions, i thought \"standards development org\" at first","msgtype":"m.text"},"ts":1635155567031,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$rQAnVo5m0PrOc6Yex05uu9c2HffsW473kvWgqdjHkVU"},
{"content":{"body":"Ashley Claymore volunteered","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> volunteered","msgtype":"m.text"},"ts":1635155646336,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ge5tia-MEtXFzsTnpKCuCrvL2qnBacYArjeBY0mFWI4"},
{"content":{"body":"https://github.com/tc39/how-we-work/pull/102/files","msgtype":"m.text"},"ts":1635156091796,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6qjrlPPvoSzSx9U-u1maliJgtl3VFzjukXaYK6GHBmo"},
{"content":{"body":"Should I add 'standards development org' too?","msgtype":"m.text"},"ts":1635156113881,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4vDUb-NQNjOCjpsjrBauT2BQhHfA22jSPrYaLAunpBQ"},
{"content":{"body":"To avoid confusion","msgtype":"m.text"},"ts":1635156116700,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ssJ_mhye_nr43qQdsHu3PjB-n4lqwSirYeHdpZMVfwM"},
{"content":{"body":"yeah, i think we use both in the tc39 context","msgtype":"m.text"},"ts":1635156602126,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_2G-BK5hHmP344CxlAWHjb72W2vl1WbUOy4Q5lPW46M"},
{"content":{"body":"for example \"ecma is an SDO\" for that context","msgtype":"m.text"},"ts":1635156619795,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$UXYfZ2OE2tAiNP63RRmsmEYCUZ1wqMgMFXKJ-Ff0HSM"},
{"content":{"body":"added both :)","msgtype":"m.text"},"ts":1635156827273,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$fdqBnVZ3uQXuHRkIiRFbOH_w3NfwxltNqI_mYjEU_Is"},
{"content":{"body":"We have 5 people with non-compliant Jitsi display names.  Please can these people rename to use their full name and (affiliation/company)\n\nWaldemar, 393939, feng, Hongjian Yang, ZY","msgtype":"m.text"},"ts":1635156889940,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yyaSUM4rN573Uqs35yS-21pRHdv19EQxia7DwlC8o2k"},
{"content":{"body":"waldemar: psst (you're still missing the (Google) part","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: psst (you're still missing the (Google) part","msgtype":"m.text"},"ts":1635157158090,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$NtRpfrzviMMjGV3DxW1oSP6FNT-Eod9FgAtBjUZ_9VQ"},
{"content":{"body":"I just catching up (was out of electricity here) but I'm happy to see the nominations for the Ecma award. Thanks yulia for coordinating this!","format":"org.matrix.custom.html","formatted_body":"I just catching up (was out of electricity here) but I'm happy to see the nominations for the Ecma award. Thanks <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> for coordinating this!","msgtype":"m.text"},"ts":1635157525542,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$bIcbmUFgKPJ20_D65jb_gTL6ArXA8acV52TmLTSSA-I"},
{"content":{"body":"Aki: speaking of scheduling stuff, Michael and I would like to defer the subclassing discussion to a later meeting","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: speaking of scheduling stuff, Michael and I would like to defer the subclassing discussion to a later meeting","msgtype":"m.text"},"ts":1635157833331,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uZkAwq81nx0waPDrOpt89vdpsiemDIPmQAPjWo-ZEC0"},
{"content":{"body":"we've already removed it from the agenda","msgtype":"m.text"},"ts":1635157856634,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pHRB2aLuN7hfElrFxV9CUH6Gxiklzyr0nFd6TwQbCjo"},
{"content":{"body":"no shit! WELL. that changes things.","msgtype":"m.text"},"ts":1635157863065,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$g8u0YT2dCyiib1FnUEwLm0Y0oGBA8i5kFe-XrW5UjF0"},
{"content":{"body":"sorry, we should've given you a heads up","msgtype":"m.text"},"ts":1635157873060,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$m9nnOcCoHkHq60_Gjm2jse9YChaoVA5TSkwSiYW1XkU"},
{"content":{"body":"all good. i'm sure Ron Buckton will appreciate","msgtype":"m.text"},"ts":1635157885844,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$icds98tsFWRgGxIPYjpAIEL9JPGnl-AdihMaqlhy2xo"},
{"content":{"body":"turns out subclassing builtins is a very complicated topic","msgtype":"m.text"},"ts":1635157910495,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UMFoxjzwr-sp66M3aOPelgt4vT8NgOnEq49ksDm3ZlA"},
{"content":{"body":"imagine that","msgtype":"m.text"},"ts":1635157924634,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$_wDwS03fWZ3_hqluelAFkeqwl5KreWE0DeJBn2HCxdk"},
{"content":{"body":" * imagine that","m.new_content":{"body":"imagine that","msgtype":"m.text"},"m.relates_to":{"event_id":"$_wDwS03fWZ3_hqluelAFkeqwl5KreWE0DeJBn2HCxdk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635157926684,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$KfWCKI9VIWgXM4s8N5tk1eqnNQQ67q4Lt5RE29zXRPU"},
{"content":{"body":"can we advance the queue so I can add a reply?","msgtype":"m.text"},"ts":1635158253941,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$f5iRKNP3Kk8ZvDYgvf5MBJ_2ym27G4r2GTWDxxyE8P4"},
{"content":{"body":"done","msgtype":"m.text"},"ts":1635158290896,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$HuWwBdLtA1KfTCnJ82s4GI7cTfaK7GkmorG1rzU-GzQ"},
{"content":{"body":"Jack Works: you're only looking to expose the composition of serialise/deserialise, not either individually, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: you're only looking to expose the composition of serialise/deserialise, not either individually, right?","msgtype":"m.text"},"ts":1635158991102,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cmyDbYkEzLmG0lcq-ADgcooa3QfbhAK3HrLvDOgT-6U"},
{"content":{"body":"> <@michaelficarra:matrix.org> Jack Works: you're only looking to expose the composition of serialise/deserialise, not either individually, right?\n\nI'm looking for a much more powerful serialize/deserialize API in the language that can be integrated with structured clone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cmyDbYkEzLmG0lcq-ADgcooa3QfbhAK3HrLvDOgT-6U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: you're only looking to expose the composition of serialise/deserialise, not either individually, right?</blockquote></mx-reply>I'm looking for a much more powerful serialize/deserialize API in the language that can be integrated with structured clone","m.relates_to":{"m.in_reply_to":{"event_id":"$cmyDbYkEzLmG0lcq-ADgcooa3QfbhAK3HrLvDOgT-6U"}},"msgtype":"m.text"},"ts":1635159192774,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$TbACzSeoMMoBBSjM5q_WmxhB5GskVCxF4_6PWBCALRI"},
{"content":{"body":"but I never presented it to the committe because I didn't make clear about how I should design those APIs","msgtype":"m.text"},"ts":1635159234125,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$2ziWtQp_m9U4uEe02VY4ybWFsiVhhjmMkuh4HBJAXBY"},
{"content":{"body":"Design goals:\n- Format independent (I'm not going to specify a new format to store the serialize result)\n- Configurable (e.g.: Devs can define their own structures that can be stored into indexedDB via structured clone algr)\n- Async (Some data structures requires async access, including CryptoKey)\n- Exportable (a interesting property on CryptoKey)\n- Sendable (is it ok to transfer/clone to another Realm)\n- Transfer (as structured clone, transfered data cannot be accessed later)","format":"org.matrix.custom.html","formatted_body":"<p>Design goals:</p>\n<ul>\n<li>Format independent (I'm not going to specify a new format to store the serialize result)</li>\n<li>Configurable (e.g.: Devs can define their own structures that can be stored into indexedDB via structured clone algr)</li>\n<li>Async (Some data structures requires async access, including CryptoKey)</li>\n<li>Exportable (a interesting property on CryptoKey)</li>\n<li>Sendable (is it ok to transfer/clone to another Realm)</li>\n<li>Transfer (as structured clone, transfered data cannot be accessed later)</li>\n</ul>\n","msgtype":"m.text"},"ts":1635159434530,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3as8nd98MvBA4HJd2Xt8rlmJEww3LEMXgP4EA909nvU"},
{"content":{"body":"so it's going to be an opaque blob?","msgtype":"m.text"},"ts":1635159511764,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e1qU4OC01Lq0raD_WSH-h0IDXPeWP6PVr1yRruoOjWE"},
{"content":{"body":"we are breaking for 62 mins.  returning at 13:00 UK time","msgtype":"m.text"},"ts":1635159524484,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RfvpC4Sp2I2hyBhqZhqJHMXyGsASuOJUoTf6AelGFGM"},
{"content":{"body":"> <@michaelficarra:matrix.org> so it's going to be an opaque blob?\n\nYes, maybe. Host decides how to store them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e1qU4OC01Lq0raD_WSH-h0IDXPeWP6PVr1yRruoOjWE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so it&#39;s going to be an opaque blob?</blockquote></mx-reply>Yes, maybe. Host decides how to store them.","m.relates_to":{"m.in_reply_to":{"event_id":"$e1qU4OC01Lq0raD_WSH-h0IDXPeWP6PVr1yRruoOjWE"}},"msgtype":"m.text"},"ts":1635159536236,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ieHvmk8C8Jmr1vt8yIha9XNSPrhMkPWMIlHZA6Tv7CI"},
{"content":{"body":"My current idea is\n- defining a new kind of intermediate data structure (let's call it `InterMap`) which works like a Map\n- design a set of API to ser/deser from/to `InterMap`\n- let `InterMap` can be structure cloned","format":"org.matrix.custom.html","formatted_body":"<p>My current idea is</p>\n<ul>\n<li>defining a new kind of intermediate data structure (let's call it <code>InterMap</code>) which works like a Map</li>\n<li>design a set of API to ser/deser from/to <code>InterMap</code></li>\n<li>let <code>InterMap</code> can be structure cloned</li>\n</ul>\n","msgtype":"m.text"},"ts":1635159652045,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UXP7gY7kQHlD1B3-87HEgmhoY3u8KpQrbLUYgXZf6a8"},
{"content":{"body":"k, as long as you can't inspect it and rely on it","msgtype":"m.text"},"ts":1635159757598,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Wjp9eJqdqkdx5EY7aT_XpsQk2KQMYmEgtgoZjSko7uc"},
{"content":{"body":"though if you plan to have it able to be stored in IndexedDB, I don't see how you're going to do that","msgtype":"m.text"},"ts":1635159800958,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UxJxtzqKhkxXcPbr8cfF7nXB22qAIgH2C9TnLthWDkQ"},
{"content":{"body":"will it still be opaque in IndexedDB?","msgtype":"m.text"},"ts":1635159812973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_n6zFmapFHkKYL5Lo2y6PrtSpXvMNGjlIyfsGhx46h0"},
{"content":{"body":"> <@michaelficarra:matrix.org> will it still be opaque in IndexedDB?\n\nyes, if you take it out from the indexedDB, you need to use the deserialize API (with the correct options) to extract data from it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_n6zFmapFHkKYL5Lo2y6PrtSpXvMNGjlIyfsGhx46h0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>will it still be opaque in IndexedDB?</blockquote></mx-reply>yes, if you take it out from the indexedDB, you need to use the deserialize API (with the correct options) to extract data from it.","m.relates_to":{"m.in_reply_to":{"event_id":"$_n6zFmapFHkKYL5Lo2y6PrtSpXvMNGjlIyfsGhx46h0"}},"msgtype":"m.text"},"ts":1635160043435,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3R_k_LkLvudeRQvP_kQGyu15VC9YIDZgIEpIMNl6uJ0"},
{"content":{"body":"if `A` and `B` encode and decode the `InterMap` in different way, program will fail\n\ne.g.\n- `app that 1 month ago` vs `app today` (via `indexedDB` or other persistent storage)\n- `website a` and `website b` (via `postMessage` or other communicating API)) ","format":"org.matrix.custom.html","formatted_body":"<p>if <code>A</code> and <code>B</code> encode and decode the <code>InterMap</code> in different way, program will fail</p>\n<p>e.g.</p>\n<ul>\n<li><code>app that 1 month ago</code> vs <code>app today</code> (via <code>indexedDB</code> or other persistent storage)</li>\n<li><code>website a</code> and <code>website b</code> (via <code>postMessage</code> or other communicating API))</li>\n</ul>\n","msgtype":"m.text"},"ts":1635160205457,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aqO6uqms8_6r7454VsmggPRuAGQKIgCuK8vOaMKhe8k"},
{"content":{"body":"We will be starting the meeting in 2 mins","msgtype":"m.text"},"ts":1635163093651,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JTQw_GkZdBwvFtFF-n6V4YGh4nLm-l5zMiqsr9lq8g0"},
{"content":{"body":"date.parse is never going to have agreement among engines I think","msgtype":"m.text"},"ts":1635163789276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$towpvsGm9DeJUfXzmFB3sVkwtqRzrXDWe7KUEHQy95Y"},
{"content":{"body":"exactly yes","msgtype":"m.text"},"ts":1635163797044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_0qiAm0iQ-ljIST94mAZttQu5nohMJ5SLlxbuWpG_ww"},
{"content":{"body":"there was that one person (from Mozilla maybe?) a few years ago who was trying to come up with an intersection semantics but then they left and never came back","msgtype":"m.text"},"ts":1635164034765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$efTduoNYdF0WS10rm7D_n-NKgvrZlgxNcaKKt85OLyc"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635164058932,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aQy93fANcslSESwn9OGzhyJQJ0Ix5nrX5pAOv5vVcjg"},
{"content":{"body":"that convinced me it was a lost cause","msgtype":"m.text"},"ts":1635164071301,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jK9uGPFFRf5Zt_vhioqxKddbyu99xhAWVUasd7zfgZY"},
{"content":{"body":"also a spectacular waste of engineer time","msgtype":"m.text"},"ts":1635164078158,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K0oKdEBA1UOS7-BsmYeV85nYX1O2qS62KUYCu844uI8"},
{"content":{"body":" * also a spectacular waste of engineer time","m.new_content":{"body":"also a spectacular waste of engineer time","msgtype":"m.text"},"m.relates_to":{"event_id":"$K0oKdEBA1UOS7-BsmYeV85nYX1O2qS62KUYCu844uI8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635164084081,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5hsJnX4DOmtvKVSHBp-R_LV0GpoQBDlt2xdw1qvAUnc"},
{"content":{"body":"why is this not an arrow?","msgtype":"m.text"},"ts":1635164352056,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qDcBFHjwH3_5yFyLl8so1cNcyawbqzCcZVHRImIc4Vw"},
{"content":{"body":"just so we can do cool point-free stuff?","msgtype":"m.text"},"ts":1635164451483,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$F9YzhazgoTu2ArWTSU-f91LgfYcLqLPtJjMGxa7-tuM"},
{"content":{"body":"I don't think this counts as point-free, strictly speaking","msgtype":"m.text"},"ts":1635164477559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Bj_8ZKfOQy_5zwjaiR4nwDO3i83p5wuazGU3a5Rt80"},
{"content":{"body":"the `?` is a point","format":"org.matrix.custom.html","formatted_body":"the <code>?</code> is a point","msgtype":"m.text"},"ts":1635164481020,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pjCHJvGoNOFyC0FURt73r_xCasqwO8o7rcC1TnLNiR4"},
{"content":{"body":"The one thing I'd like to say on waste of time is that the number of engineers downstream from the specification is vastly larger and to some extent they also have to deal with engines disagreeing here. (I'm glad HTML parsing got solved eventually as that had similar sentiments attached to it.)","msgtype":"m.text"},"ts":1635164486499,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$3B2HLzGXmMXHcfHiiktSXZi1mnhIg5mXHGSV_LEMTS4"},
{"content":{"body":"is `f~()` (without any `?` or `...`) valid syntax?","format":"org.matrix.custom.html","formatted_body":"is <code>f~()</code> (without any <code>?</code> or <code>...</code>) valid syntax?","msgtype":"m.text"},"ts":1635164531492,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$9HglSKO7FyAxkCx1MXw6sOqoX52OdoFmADsEpqQ5aGI"},
{"content":{"body":"Surma: Count me in for Stage 3 review of Module Blocks. I have direct interest for this feature and I need to get on the specs to make sure it connects well with ShadowRealms.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@surma:matrix.org\">Surma</a>: Count me in for Stage 3 review of Module Blocks. I have direct interest for this feature and I need to get on the specs to make sure it connects well with ShadowRealms.","msgtype":"m.text"},"ts":1635164624098,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$DjXs2mef5fAAMqM8FyzbJ2Mb_ZViiCfM2fPprGCZue4"},
{"content":{"body":"I just can't guarantee I'm gonna be awake for the time you present it :)","msgtype":"m.text"},"ts":1635164722499,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$PRV3sLvfAOTJxA4N6Ngec6-UV-h9MIAOFQKDQZVWkSg"},
{"content":{"body":"Thatâ€™s okay! I also have Guy Bedford volunteering to be a reviewer, and I donâ€™t think theyâ€™re awake ;)","msgtype":"m.text"},"ts":1635164771299,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$j-fcnuniYZ70SG4H43oUmbQGXb_hQf58YBH52kCWBiQ"},
{"content":{"body":"annevk: fair, but in this case we have good agreement on the superior solution, Temporal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: fair, but in this case we have good agreement on the superior solution, Temporal","msgtype":"m.text"},"ts":1635164771888,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nQz3KVOVLjtsA3XA9vZzu0kB6_vnYw7z3caO61xmNx0"},
{"content":{"body":"two placeholder .... oh ","msgtype":"m.text"},"ts":1635164796303,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$qg6kui3MMqeI6iOA9I9fhLdKHPFF-S1fG7YKBilHPEY"},
{"content":{"body":"such that there's no point in salvaging the old thing. i thought people are already shipping usertime libraries today instead of relying on the brokenness of Date.parse","msgtype":"m.text"},"ts":1635164799404,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$332FcS-ix57WUd2qPEMm2yEXtJvhugRwH-HFPo1kEi0"},
{"content":{"body":"shu: I'm not sure it needs salvaging; picking an implementation as winner seems preferable to implementation-defined behavior","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I'm not sure it needs salvaging; picking an implementation as winner seems preferable to implementation-defined behavior","msgtype":"m.text"},"ts":1635164896918,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$AHA_nCqS501mQvJIjPUZeJMp6N-t1agKn5ADnIrqyVM"},
{"content":{"body":"annevk: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","msgtype":"m.text"},"ts":1635164939686,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lPF1uldZEWYNM9nXMprDC7Sj2tkhVmI_BC5zvNWXzKw"},
{"content":{"body":" * annevk: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","m.new_content":{"body":"annevk: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@annevk:mozilla.org\">annevk</a>: people switch on which engine they are running on before calling Date.parse sometimes, so I don't think we can even get away with that","msgtype":"m.text"},"m.relates_to":{"event_id":"$lPF1uldZEWYNM9nXMprDC7Sj2tkhVmI_BC5zvNWXzKw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635164953333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6bVIxoU-X9upfzqb_AL7Do2L_1DyIaHmTMSU3XRv7Qc"},
{"content":{"body":"Sorry, whereâ€™s the queue link posted again?","msgtype":"m.text"},"ts":1635165077372,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$ZDUEYJntf8OeEJ-3PRPXz6vr6OjVovJ6KWqRxkvkJ48"},
{"content":{"body":"reflector","msgtype":"m.text"},"ts":1635165098345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PwGYSRK9qwFUtuAw8UK4o56GffznRSKrKXgQFW5BhKY"},
{"content":{"body":"Iâ€™m checking there, but I donâ€™t see a queue link, sorry. What section is it under?","msgtype":"m.text"},"ts":1635165201072,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$W1KjLHIfvSVHhSmI3QBGYhyKrsfrF5JwzHpqTeckzlQ"},
{"content":{"body":"https://github.com/tc39/Reflector/issues/396 under \"TCQ\"","msgtype":"m.text"},"ts":1635165218552,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ukmjUFLr5PzNT2WxN4ynZbhb03frgyroUvMG7TxX-as"},
{"content":{"body":"(that link will only work for delegates)","msgtype":"m.text"},"ts":1635165224503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sJSzx1TKPwlFVhBmKxakcSv3QFUQ0HDnc0vYIiZF0oI"},
{"content":{"body":"Ah, sorry! I had not realized that was the acronym. ","format":"org.matrix.custom.html","formatted_body":"Ah, sorry! I had not realized that was the acronym.","msgtype":"m.text"},"ts":1635165240995,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$y_ToIhfOi8Yv8aoVtjOvHjz6023DJGxG5jTvJxyll0w"},
{"content":{"body":"legendecas: the downside of `a.b~()` being the only way to bind is that it only allows binding to an object the function is already installed on, not an arbitrary object","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">legendecas</a>: the downside of <code>a.b~()</code> being the only way to bind is that it only allows binding to an object the function is already installed on, not an arbitrary object","msgtype":"m.text"},"ts":1635165494557,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VDY-UaKU5kMS1P-ReJwlFrhLP-xc7DQRCSWudyZ4tQ0"},
{"content":{"body":"I'm glad the to see the TCQ reflecting a lot of my thoughts already. For a big majority, the arrow function seems much easier to read. For constructors it feels lacking motivation and perhaps some weird way to sugar class inheritance.","msgtype":"m.text"},"ts":1635165638304,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$KuPokRxJKdzkCKfzxkay6zgcP3YxEVCIMbjg09fBgWg"},
{"content":{"body":"Michael Ficarra: compose it with comma expressions to first assign `b` to `a`, then delete it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: compose it with comma expressions to first assign <code>b</code> to <code>a</code>, then delete it","msgtype":"m.text"},"ts":1635165660865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MbmazVuqHHxqra7Xua_Ay6XqcGG6b-M5gwXJ8Y83VTg"},
{"content":{"body":"shu: to your question on benefit over arrow functions:  Benedict optimized bind to an inch of its life and ultimately made them faster than arrow functions (I believe).    I wonder if this extra ability to bind arbitrary positions could eliminate the need for arrow functions so much, and therefore lead to possible performance wins.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: to your question on benefit over arrow functions:  Benedict optimized bind to an inch of its life and ultimately made them faster than arrow functions (I believe).    I wonder if this extra ability to bind arbitrary positions could eliminate the need for arrow functions so much, and therefore lead to possible performance wins.","msgtype":"m.text"},"ts":1635165862947,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$k56ceHLqcMPf_LeFsvdQDt3AdBs4kGP8i_HfoTNCtik"},
{"content":{"body":"MM is making the exact point I wanted to make: readers are going to have a harder time with this, for basically no benefit","msgtype":"m.text"},"ts":1635165930973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$umlzybMiuUVV6ilQmVNYQesrg2UEV7TLXDeB2e-mnmw"},
{"content":{"body":"Rob Palmer: i can see it being more optimizable, yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: i can see it being more optimizable, yes","msgtype":"m.text"},"ts":1635165995600,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2jQfE_h_fkQB3JF2lhLClHD_cn9Teb0OK2bPzgauunk"},
{"content":{"body":"I think arrow functions haven't been fully optimized yet if they are still slow. It isn't the syntax that causes this impact here. I wouldn't go with a performance argument for this","msgtype":"m.text"},"ts":1635165995863,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hPv-e8JnF9Fgyic3gpyl1OpFAA7MN7rBuEXmZWNWXW8"},
{"content":{"body":"but that is far, far below other considerations here","msgtype":"m.text"},"ts":1635166012348,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2PiiIgf1_r3IDZtkZ0OMMraP98yj6ZGOw0J_hHU8L1Y"},
{"content":{"body":"> <@shuyuguo:matrix.org> Rob Palmer: i can see it being more optimizable, yes\n\nhuh interesting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2jQfE_h_fkQB3JF2lhLClHD_cn9Teb0OK2bPzgauunk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: i can see it being more optimizable, yes</blockquote></mx-reply>huh interesting","m.relates_to":{"m.in_reply_to":{"event_id":"$2jQfE_h_fkQB3JF2lhLClHD_cn9Teb0OK2bPzgauunk"}},"msgtype":"m.text"},"ts":1635166025367,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ipG_tVQfBN7aCGIAcyp9wUs-huVOiAaVfAWM1MbfpuQ"},
{"content":{"body":"it's easier to analyze, right?","msgtype":"m.text"},"ts":1635166034554,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hMrRK4tKGs5lcQaxaRlXbwRc6RssqtMAZywpNoJNHaM"},
{"content":{"body":"right, i was thinking about a simpler case","msgtype":"m.text"},"ts":1635166051386,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cdqcLQJasiWqzflTEdvRwYg1srFOfczMmPxuGA-6LOE"},
{"content":{"body":"whereas for arrows that do simple forwarding + argument reordering/shuffling, you'd have to pattern match","msgtype":"m.text"},"ts":1635166054262,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$92I-ug9Ns3MEicMw8UvKoXszvjaAPYoQ0rq4Bv4OGno"},
{"content":{"body":"yep yep, i didn't read fully -- sorry","msgtype":"m.text"},"ts":1635166066943,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$x7jlLBxP9UfDNO-K61Bu7bPoLERqdq-o4UJGxCMKwjU"},
{"content":{"body":"creating an arrow function captures more scope (the execution context)","msgtype":"m.text"},"ts":1635166068024,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$SZWGkBxY06oWLwgAUt2-2Gc6wl58RX5gwE3vBnkclf0"},
{"content":{"body":"it doesn't _have_ to","format":"org.matrix.custom.html","formatted_body":"it doesn't <em>have</em> to","msgtype":"m.text"},"ts":1635166080405,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VcIqsb2Jtx9bAl2iqQSoNzwHYx37_lU6e6XKceHO3jM"},
{"content":{"body":"you could analyze more in the frontend if you really cared, i suppose, to pattern match on forwarding patterns","msgtype":"m.text"},"ts":1635166093288,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zUkDdnopcePojEkgUSgUhIell2GgxtEZRPjWdsENjMM"},
{"content":{"body":"but speculative optimizability is not compelling enough for this","msgtype":"m.text"},"ts":1635166145563,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qZPQrkzsb_GGQ8iYaDQ6bkDPsWSTD89_anMXUU9TAvs"},
{"content":{"body":"what are you doing such that you're creating so many forwarding functions?","msgtype":"m.text"},"ts":1635166181396,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HM8nOTka0YrrESD1MKxLVXY9orsVWmxqFRk7mpXjUSY"},
{"content":{"body":"glue. lots of glue.","msgtype":"m.text"},"ts":1635166202853,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$-rtyXoYhs1jG2fAqlsBuAz6vcCbP7wSssh08apWvIrM"},
{"content":{"body":"if the cost of glue is too high","msgtype":"m.text"},"ts":1635166302066,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e07MRW6qjIM3iyP_texBK-t6OoxKTLoHb-TaryHoseo"},
{"content":{"body":"there might be avenues of exploration on a better `bind` here, than syntax","format":"org.matrix.custom.html","formatted_body":"there might be avenues of exploration on a better <code>bind</code> here, than syntax","msgtype":"m.text"},"ts":1635166318546,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9dqxTvzDKcx9BMrY6c2oVhpR4Xb8ZqST1d725vAVUZk"},
{"content":{"body":"+1 to a better bind (but \"better\" would require syntax imo)","msgtype":"m.text"},"ts":1635166337614,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZRbZIGaWG6UWOxHtiDlfSNRXngCnVOY3IFAb6Vfz3cg"},
{"content":{"body":"better would probably require syntax, yes","msgtype":"m.text"},"ts":1635166374329,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gFPhkCEXHF_4oiAiQi-_-7gAfJQyZ2X3YH7Wg5dee2A"},
{"content":{"body":"i meant better only in terms of optimizability, i guess","msgtype":"m.text"},"ts":1635166395268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zcv9lOeoYsa2VRuOmjvtK-JK34FMzcuYFDoPkfQ-QtM"},
{"content":{"body":"unless glue code writers also really care about how their glue code looks","msgtype":"m.text"},"ts":1635166430883,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HyRKf624ko5idp1m0YAn8ryVqbpgfHIwM9LkdZ3pJmc"},
{"content":{"body":"but i'm less sympathetic to that though","msgtype":"m.text"},"ts":1635166436215,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9KBI4r3-aO9a5x2bt8lNaHy-Iik9uhnazRj8zAQ6ewk"},
{"content":{"body":" * but i'm less sympathetic to that though","m.new_content":{"body":"but i'm less sympathetic to that though","msgtype":"m.text"},"m.relates_to":{"event_id":"$9KBI4r3-aO9a5x2bt8lNaHy-Iik9uhnazRj8zAQ6ewk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635166442742,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q48wUbRsKzwAmchptRFbGWBCmkkmaWNg6CTU72TkEnY"},
{"content":{"body":"i would be pretty surprised to see a JS codebase in which the difference in optimizability between arrows and `.bind` had a user-visible effect on performance","format":"org.matrix.custom.html","formatted_body":"i would be pretty surprised to see a JS codebase in which the difference in optimizability between arrows and <code>.bind</code> had a user-visible effect on performance","msgtype":"m.text"},"ts":1635166492229,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cCnJjBeV8FSKMeEE1EBGKdELa1HVOOKDZikGBSZtTcw"},
{"content":{"body":"To add onto Ron mentioning bind-this, PFA syntax and bind-this are orthogonal, would synergize, and have very small overlap. Examples in a moment.","msgtype":"m.text"},"ts":1635166706107,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$YkDc-GHlzrTojLtndZo17FZMdFxMe5vG2mSgv06Fg84"},
{"content":{"body":"`obj.method~()` would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.\n```js\nn.on(\"click\", v.reset.bind(v))\nn.on(\"click\", v::v.reset)\nn.on(\"click\", v.reset~())\n```","format":"org.matrix.custom.html","formatted_body":"<p><code>obj.method~()</code> would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.</p>\n<pre><code class=\"language-js\">n.on(&quot;click&quot;, v.reset.bind(v))\nn.on(&quot;click&quot;, v::v.reset)\nn.on(&quot;click&quot;, v.reset~())\n</code></pre>\n","msgtype":"m.text"},"ts":1635166758900,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$m2UqYKKSoYhxuBEQnl0rSBxV17YSjlu8yWnzUKcpIS0"},
{"content":{"body":" * `obj.method~()` would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.\n```js\nn.on(\"click\", v.reset.bind(v))\nn.on(\"click\", v::v.reset)\nn.on(\"click\", v.reset~())\n```","format":"org.matrix.custom.html","formatted_body":" * <p><code>obj.method~()</code> would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.</p>\n<pre><code class=\"language-js\">n.on(&quot;click&quot;, v.reset.bind(v))\nn.on(&quot;click&quot;, v::v.reset)\nn.on(&quot;click&quot;, v.reset~())\n</code></pre>\n","m.new_content":{"body":"`obj.method~()` would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.\n```js\nn.on(\"click\", v.reset.bind(v))\nn.on(\"click\", v::v.reset)\nn.on(\"click\", v.reset~())\n```","format":"org.matrix.custom.html","formatted_body":"<p><code>obj.method~()</code> would handle method extraction with implicit binding, which bind-this does not address. Iâ€™m talking about when the receiver of the bound function already contains the function that is being bound. Bind-this would require you to repeat the receiver in this case; it does not address method extraction at all.</p>\n<pre><code class=\"language-js\">n.on(&quot;click&quot;, v.reset.bind(v))\nn.on(&quot;click&quot;, v::v.reset)\nn.on(&quot;click&quot;, v.reset~())\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$m2UqYKKSoYhxuBEQnl0rSBxV17YSjlu8yWnzUKcpIS0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635166764657,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gL0mucVgrUPfdCC5QzpqP1AjQVDMvpStHSuwXC5Clzo"},
{"content":{"body":"Of course, PFA syntax does not address changing the receiver of a function call.\n```js\nisPending.call(this._target())\nthis._target()::isPending()\n```","format":"org.matrix.custom.html","formatted_body":"<p>Of course, PFA syntax does not address changing the receiver of a function call.</p>\n<pre><code class=\"language-js\">isPending.call(this._target())\nthis._target()::isPending()\n</code></pre>\n","msgtype":"m.text"},"ts":1635166801320,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FKSb5xCF-IVMG666dx3R1NTFi1c8GtmXtWALr50ogzs"},
{"content":{"body":"PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nx => this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n```","format":"org.matrix.custom.html","formatted_body":"<p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br>From svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nx =&gt; this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n</code></pre>\n","msgtype":"m.text"},"ts":1635166811930,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SIgRzwpeptdK-D5qKMLTSV5tLZ8BdKF19YvXvxdpF0w"},
{"content":{"body":" * PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nthis::smartRound~(params.floatPrecision)\n```","format":"org.matrix.custom.html","formatted_body":" * <p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br>From svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nthis::smartRound~(params.floatPrecision)\n</code></pre>\n","m.new_content":{"body":"PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nthis::smartRound~(params.floatPrecision)\n```","format":"org.matrix.custom.html","formatted_body":"<p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br>From svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nthis::smartRound~(params.floatPrecision)\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$SIgRzwpeptdK-D5qKMLTSV5tLZ8BdKF19YvXvxdpF0w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635166835215,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$uDpfj3VPnD5uWxWvwUkK4IorkQvDIssYC0m9o0PXkbA"},
{"content":{"body":" * PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nx => this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n```","format":"org.matrix.custom.html","formatted_body":" * <p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br>From svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nx =&gt; this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n</code></pre>\n","m.new_content":{"body":"PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nx => this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n```","format":"org.matrix.custom.html","formatted_body":"<p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br>From svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nx =&gt; this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision)\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$SIgRzwpeptdK-D5qKMLTSV5tLZ8BdKF19YvXvxdpF0w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635166895531,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$RPz5aFegNh--U5JEpdY4RyrE8oxAcYgUVmapD1OjAxs"},
{"content":{"body":"gathering my thoughts some more: i can live with pipeline because, while i disagree with its motivations there as well (e.g. naming intermediates is too onerous), i have a sense that there is in fact a large number of folks clamoring for it and really want to type it. syntax catering to popularism is fine by me, active harm excepted. but here, i haven't gotten the sense there is a large number of folks clamoring for it","msgtype":"m.text"},"ts":1635167409147,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$30E0mA4X9-pnHP3mFmaO9xM3NYeQ8M9zxRr6aMYuaiA"},
{"content":{"body":"```js\nclass C {}\nfunction g() { return new C(); }\nconst o2 = g(); // C {}\nconst o3 = new g(); // C {}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">class C {}\nfunction g() { return new C(); }\nconst o2 = g(); // C {}\nconst o3 = new g(); // C {}\n</code></pre>\n","msgtype":"m.text"},"ts":1635167518123,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q3DTzlXWY79TGzHSMvvNvKZKahWd6dR3JhWKLofqo8M"},
{"content":{"body":"> <@shuyuguo:matrix.org> gathering my thoughts some more: i can live with pipeline because, while i disagree with its motivations there as well (e.g. naming intermediates is too onerous), i have a sense that there is in fact a large number of folks clamoring for it and really want to type it. syntax catering to popularism is fine by me, active harm excepted. but here, i haven't gotten the sense there is a large number of folks clamoring for it\n\nI feel like popular syntax has a life span, and pipeline creates a new way to write pretty much anything. So, i feel like it is much more risky than it appears. I really think we should be careful with pipeline. But there is clearly a broader issue here, which multiple proposals touch on, and it doesn't feel like it has been fully expressed yet. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$30E0mA4X9-pnHP3mFmaO9xM3NYeQ8M9zxRr6aMYuaiA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>gathering my thoughts some more: i can live with pipeline because, while i disagree with its motivations there as well (e.g. naming intermediates is too onerous), i have a sense that there is in fact a large number of folks clamoring for it and really want to type it. syntax catering to popularism is fine by me, active harm excepted. but here, i haven&#39;t gotten the sense there is a large number of folks clamoring for it</blockquote></mx-reply>I feel like popular syntax has a life span, and pipeline creates a new way to write pretty much anything. So, i feel like it is much more risky than it appears. I really think we should be careful with pipeline. But there is clearly a broader issue here, which multiple proposals touch on, and it doesn't feel like it has been fully expressed yet.","m.relates_to":{"m.in_reply_to":{"event_id":"$30E0mA4X9-pnHP3mFmaO9xM3NYeQ8M9zxRr6aMYuaiA"}},"msgtype":"m.text"},"ts":1635167575209,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZwXahSbSWCr-n5yb9S5VQSmLaXdN0k653jhuX8TuGnQ"},
{"content":{"body":"bakkot: that's fair, but that's always a problem; I've seen it happen more than once that such cases end up getting overturned due to newer code (perhaps on other websites) relying on the behavior of a single browser. You cannot win with implementation-defined.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: that's fair, but that's always a problem; I've seen it happen more than once that such cases end up getting overturned due to newer code (perhaps on other websites) relying on the behavior of a single browser. You cannot win with implementation-defined.","msgtype":"m.text"},"ts":1635167727528,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$SVhXQeNVGzABRDiyFVYa0xA38F9X4FNuDS5beLS6H7M"},
{"content":{"body":"> <@yulia:mozilla.org> I feel like popular syntax has a life span, and pipeline creates a new way to write pretty much anything. So, i feel like it is much more risky than it appears. I really think we should be careful with pipeline. But there is clearly a broader issue here, which multiple proposals touch on, and it doesn't feel like it has been fully expressed yet.\n\nThe kind of code to which pipeline applies (temp variables to make a transformation tube) is very common. I don't think I've ever come across cases where partial application of a middle argument is necessary.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZwXahSbSWCr-n5yb9S5VQSmLaXdN0k653jhuX8TuGnQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I feel like popular syntax has a life span, and pipeline creates a new way to write pretty much anything. So, i feel like it is much more risky than it appears. I really think we should be careful with pipeline. But there is clearly a broader issue here, which multiple proposals touch on, and it doesn't feel like it has been fully expressed yet.</blockquote></mx-reply>The kind of code to which pipeline applies (temp variables to make a transformation tube) is very common. I don't think I've ever come across cases where partial application of a middle argument is necessary.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZwXahSbSWCr-n5yb9S5VQSmLaXdN0k653jhuX8TuGnQ"}},"msgtype":"m.text"},"ts":1635167864553,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$IJPbvBmNHvm8rTVu8L1C3xC1VUG26u9iLdh6xiGApks"},
{"content":{"body":"rbuckton: g is an example of a function on which you get the same thing whether or not you invoke it with new. But most functions aren't like that:\nfunction F() {};\nconst o2 = F(); // undefined\nconst o3 = new F(); // object","msgtype":"m.text"},"ts":1635167876369,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$8vYKNlWW5j3rOhpdd1utVJSOyYy1Nj50YW55G0h2UQ4"},
{"content":{"body":"> <@rbuckton:matrix.org> ```js\n> class C {}\n> function g() { return new C(); }\n> const o2 = g(); // C {}\n> const o3 = new g(); // C {}\n> ```\n\nThis is not the same as `new new Function()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q3DTzlXWY79TGzHSMvvNvKZKahWd6dR3JhWKLofqo8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><pre><code class=\"language-js\">class C {}\nfunction g() { return new C(); }\nconst o2 = g(); // C {}\nconst o3 = new g(); // C {}\n</code></pre>\n</blockquote></mx-reply>This is not the same as <code>new new Function()</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Q3DTzlXWY79TGzHSMvvNvKZKahWd6dR3JhWKLofqo8M"}},"msgtype":"m.text"},"ts":1635167886093,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pf86LK6XWtAJ5cFw2XOx4J02uZiMI4uV0cyDU08kiSM"},
{"content":{"body":"sarahghp: always good to hear a practitioner's take, thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sarahghp:matrix.org\">sarahghp</a>: always good to hear a practitioner's take, thanks","msgtype":"m.text"},"ts":1635167921933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AAjnj22iK2YzwbVbTZAVQVotBzWlwui4XUz64w7YFzg"},
{"content":{"body":"I know.","msgtype":"m.text"},"ts":1635167926088,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$tYQMohGFMCt991-hGDUJacL80zuj6cXPizLHPO52Pn8"},
{"content":{"body":"* PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nx => this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision, ?)\n```","format":"org.matrix.custom.html","formatted_body":"* <p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br />\nFrom svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nx =&gt; this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision, ?)\n</code></pre>","m.new_content":{"body":"PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use `bind` for.\nFrom svgo@1.2.2:\n```js\nsmartRound.bind(this, params.floatPrecision)\nx => this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision, ?)\n```","format":"org.matrix.custom.html","formatted_body":"<p>PFA syntax and bind-this can also work together, when creating bound functions with multiple partially applied arguments, which people sometimes do use <code>bind</code> for.<br />\nFrom svgo@1.2.2:</p>\n<pre><code class=\"language-js\">smartRound.bind(this, params.floatPrecision)\nx =&gt; this::smartRound(params.floatPrecision, x)\nthis::smartRound~(params.floatPrecision, ?)\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$SIgRzwpeptdK-D5qKMLTSV5tLZ8BdKF19YvXvxdpF0w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635167926709,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$4N_wV_L-wISDiOnfjcfmOVpU_kHkd_TDtB7jIlbodqs"},
{"content":{"body":"That was the point I was addressing though.","msgtype":"m.text"},"ts":1635167972303,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7S6v6-OjdoK5U8lWS1diC8Wd6LSuFGuGTGQrHl2Z_zg"},
{"content":{"body":"We're still talking past each other,.","msgtype":"m.text"},"ts":1635167993697,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$8Ar6RmNoKeiFHov9x0Q8Ld3GVsZZAfWKjB-JbqoMMD0"},
{"content":{"body":"If you wrap new so that it's invoked with a call, it makes no sense to new it again.","msgtype":"m.text"},"ts":1635168027558,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$GUgvhWCqaX4V5b2455F0ximIiDQ0CyG8hAcQ0bSQ1CU"},
{"content":{"body":"We have no concept of a double-new.","msgtype":"m.text"},"ts":1635168056028,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$r4TCT63HP91vpu_um35ocRtxSDFSXemGJF-73HLwBHI"},
{"content":{"body":"const g from the presentation should be only callable, not constructible.","msgtype":"m.text"},"ts":1635168128855,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Rm9pQTqcrFI1pvCRn68MXKnJGE7Vkq5jsORe4hh34Bg"},
{"content":{"body":"My point was that the behavior is analogous to the `function g() { return new C(); }` example, above. Banning `new g()` seems strange to me, but I'm not opposed to that.","format":"org.matrix.custom.html","formatted_body":"My point was that the behavior is analogous to the <code>function g() { return new C(); }</code> example, above. Banning <code>new g()</code> seems strange to me, but I'm not opposed to that.","msgtype":"m.text"},"ts":1635168129397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BqgqdB2MPKUIImVtjcNUa92wS_0pFxxmjH70j0kJW6k"},
{"content":{"body":"waldemar: I believe ljharb preferred the opposite, that a `new C~()` would *require* `new` at each call site.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: I believe <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> preferred the opposite, that a <code>new C~()</code> would <em>require</em> <code>new</code> at each call site.","msgtype":"m.text"},"ts":1635168183936,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JCYTfiE20XitB3myYPvAZZyjQ8k8SKuvtzwrMzBukSY"},
{"content":{"body":"No because that function g does the same thing whether you new it or not. Use a function that does something different on new in the example.","msgtype":"m.text"},"ts":1635168194651,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$x0nxpqqH28ujpfceyMkDYNU-WlW3_FxXCzjeY5zSaCQ"},
{"content":{"body":"bound constructors require `new` at the callsite","format":"org.matrix.custom.html","formatted_body":"bound constructors require <code>new</code> at the callsite","msgtype":"m.text"},"ts":1635168219451,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XtsYXyaYqAE8u0NEO-8Amn5nCtEyRrR_LXw8xY_lgOY"},
{"content":{"body":"so that's the same thing i'd expect here","msgtype":"m.text"},"ts":1635168224788,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MEPD5utFHO7WIDiP_H_H9FU-N06TWGRfe6qwUWb-aQM"},
{"content":{"body":"The approach I went with was to just do what `function g() { return new C(); }` does, in that calling `new g()` isn't valuable but doesn't break anything.","format":"org.matrix.custom.html","formatted_body":"The approach I went with was to just do what <code>function g() { return new C(); }</code> does, in that calling <code>new g()</code> isn't valuable but doesn't break anything.","msgtype":"m.text"},"ts":1635168227464,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V3M3oyhhepUM0tbxOhOd1ul0NWk0tj0smqN-fNQiY2I"},
{"content":{"body":"example code:","msgtype":"m.text"},"ts":1635168284183,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ypJ4HojBvC6iF3wl4Fsaf4yS85ygd1IcOctiFfk50iw"},
{"content":{"body":"```ts\nconst x = module function f(a = expr()) {\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-ts\">const x = module function f(a = expr()) {\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1635168302653,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$EP2a2UeGPoDCpbySDz5Ybc2IF-dHlQ39d_rDJ0dRyTA"},
{"content":{"body":"although we know `expr()` must be evaluated in the new module, it's not clear on the syntax","format":"org.matrix.custom.html","formatted_body":"although we know <code>expr()</code> must be evaluated in the new module, it's not clear on the syntax","msgtype":"m.text"},"ts":1635168328495,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$138sKNiV0AVbXpsjSUwZELa3OblVpsoCQq4pt5tHWIs"},
{"content":{"body":"because it didn't have a good visual separator `{ }`","format":"org.matrix.custom.html","formatted_body":"because it didn't have a good visual separator <code>{ }</code>","msgtype":"m.text"},"ts":1635168361509,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XXH_0xDt4YMjVzhDaA6EVLZS9cLtlPhwQSWuT3xJNXM"},
{"content":{"body":"A partial application of `new C~()` would make the `new` part of the result, regardless as to whether `C` is a class or function:\n```js\nfunction C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>A partial application of <code>new C~()</code> would make the <code>new</code> part of the result, regardless as to whether <code>C</code> is a class or function:</p>\n<pre><code class=\"language-js\">function C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n</code></pre>\n","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$x0nxpqqH28ujpfceyMkDYNU-WlW3_FxXCzjeY5zSaCQ"}}},"ts":1635168392847,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$erfCzSaxcdRrOBbvN30vV7Y68I-WyW7JigjHF0O-vEw"},
{"content":{"body":"> <@waldemarh:matrix.org> No because that function g does the same thing whether you new it or not. Use a function that does something different on new in the example.\n\n * A partial application of `new C~()` would make the `new` part of the result, regardless as to whether `C` is a class or function:\n```js\nfunction C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x0nxpqqH28ujpfceyMkDYNU-WlW3_FxXCzjeY5zSaCQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>No because that function g does the same thing whether you new it or not. Use a function that does something different on new in the example.</blockquote></mx-reply> * <p>A partial application of <code>new C~()</code> would make the <code>new</code> part of the result, regardless as to whether <code>C</code> is a class or function:</p>\n<pre><code class=\"language-js\">function C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n</code></pre>\n","m.new_content":{"body":"A partial application of `new C~()` would make the `new` part of the result, regardless as to whether `C` is a class or function:\n```js\nfunction C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>A partial application of <code>new C~()</code> would make the <code>new</code> part of the result, regardless as to whether <code>C</code> is a class or function:</p>\n<pre><code class=\"language-js\">function C() { }\nfunction g() { return new C(); }\nconst o1 = g(); // C {}\nconst o2 = new g(); // C {}\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$erfCzSaxcdRrOBbvN30vV7Y68I-WyW7JigjHF0O-vEw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635168436051,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XH4ucnrko_q8ZUXlSUwCyCJiK7zmuERnc4ruybY6y4w"},
{"content":{"body":"The difference is between `C~()` and `new C~()`. ","format":"org.matrix.custom.html","formatted_body":"The difference is between <code>C~()</code> and <code>new C~()</code>.","msgtype":"m.text"},"ts":1635168449104,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$B1_7CAFq9D_roYBjvJGAVvp9wjZJd4i69DA5yUUtMK4"}
]