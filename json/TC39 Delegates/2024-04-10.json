[
{"content":{"body":"If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding","m.mentions":{},"msgtype":"m.text"},"ts":1712707263754,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nV8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by joyee :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>V8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by <a href=\"https://matrix.to/#/@qzhang:igalia.com\">joyee</a> :)","m.mentions":{"user_ids":["@waldemarh:matrix.org","@qzhang:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712709626514,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jrqzhr8MDdS5_tXkZ8w8hHMyMtJhPHANUNpucFjMFr4"},
{"content":{"body":"I am not sure what we're supposed to get from Project Valhalla when primitives/value semantics has already been deemed not an option due to implementability issues","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$jbWZ-JIVp1jNFe2_Y0MmT1Qr38MeENTgdrrTG8BUXHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713794096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},
{"content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms that aren't based on classes.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713867105,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},
{"content":{"body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"m.new_content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712713881072,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_Ndd3J0dx-HHnZfkep1EPTOm4DiJSWxBBb30nLohwtI"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nPerformance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712714042864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"},
{"content":{"body":"There's a lot of complexity with class-based immutable things, e.g., we'd need to use initializer list-based constructors, so if there's subclassing it's a totally different instantiation protocol. And if they're value types, it's even more complicated if we want to avoid any kind of global registries like we discussed with shared structs.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714070944,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},
{"content":{"body":"> <@rbuckton:matrix.org> Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.\n\nRight so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.</blockquote></mx-reply>Right so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","m.mentions":{"user_ids":["@rbuckton:matrix.org","@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"}},"msgtype":"m.text"},"ts":1712714148841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SFfqjj_OjIfZffh-aY93N81shhWgoN2jVC7gg9IUZ3o"},
{"content":{"body":"The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.","m.mentions":{},"msgtype":"m.text"},"ts":1712714451335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"},
{"content":{"body":"I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are\n\n- even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are `==` each other is useful\n- they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)","format":"org.matrix.custom.html","formatted_body":"<p>I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are</p>\n<ul>\n<li>even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are <code>==</code> each other is useful</li>\n<li>they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)</li>\n</ul>\n","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714646637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},
{"content":{"body":"The overhead incurred by a `CompositeKey` just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a `Hasher` class instead of a global `Object.hash()`. A given `Hasher` could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like `{ equals(a, b), hash(obj, hasher) }` and you then can write `new Map([], { equaler, hasher })`. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","format":"org.matrix.custom.html","formatted_body":"The overhead incurred by a <code>CompositeKey</code> just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a <code>Hasher</code> class instead of a global <code>Object.hash()</code>. A given <code>Hasher</code> could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like <code>{ equals(a, b), hash(obj, hasher) }</code> and you then can write <code>new Map([], { equaler, hasher })</code>. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","m.mentions":{},"msgtype":"m.text"},"ts":1712715411726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ"},
{"content":{"body":"yes, I agree that having objects which === each other is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716410028,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},
{"content":{"body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716493019,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hX9LfAotBLTa8GEgEcZKOV_KkJL37vXmmTSdWSu3eS8"},
{"content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had classes, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716520038,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716537526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4NyJyc5_smyLau9RZ_yTHRz-A13SXQdVWJ0gg94ILxw"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716550373,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Clhfx8SK8vX0aThYFvDo5CX72oyIhxmCtGxQ6-bawjc"},
{"content":{"body":"> The overhead incurred by a CompositeKey just seems like a non-starter to me.\n\nIf this means one which is interned so that === works, I agree","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The overhead incurred by a CompositeKey just seems like a non-starter to me.</p>\n</blockquote>\n<p>If this means one which is interned so that === works, I agree</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712716606538,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$je5mnJTS3n1KFKrc0nIxgD5sSE7jTl6Lfk0OPcNdbvg"},
{"content":{"body":"> <@rbuckton:matrix.org> The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.\n\nHow do you think we should work through the situation where a bunch of people directly disagree with this judgement?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The &quot;bad thing&quot; case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.</blockquote></mx-reply>How do you think we should work through the situation where a bunch of people directly disagree with this judgement?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"}},"msgtype":"m.text"},"ts":1712716641938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z8r221W3fcNXOar-4EWAtM_pp_vykyZZ-Td8pMOsY24"},
{"content":{"body":"That's why I mentioned alternatives in the preceding message. I'm willing to consider alternatives that support the scenarios I've discussed. I'd entertain an opaque hash if it were feasible to actually support those scenarios in a performant way. A Composite key cannot satisfy those scenarios as it can never be fast in a custom collection, only in native Map/Set. Maybe I'd be less concerned if a `ConcurrentMap` were in the MVP for shared structs, but I know that shared structs *without* concurrent collections is already a hard sell. The problem is that shared structs *without* concurrent collections is nearly unusable for my use cases without the ability to implement a fast efficient custom collection. To support it in the dev trial I essentially had to tag every shared struct with a monotonically increasing identity to use as the hash, and implement a string hashing algorithm just so I could roll my own `ConcurrentMap`. That approach has a lot of overhead I'd rather avoid.","format":"org.matrix.custom.html","formatted_body":"That's why I mentioned alternatives in the preceding message. I'm willing to consider alternatives that support the scenarios I've discussed. I'd entertain an opaque hash if it were feasible to actually support those scenarios in a performant way. A Composite key cannot satisfy those scenarios as it can never be fast in a custom collection, only in native Map/Set. Maybe I'd be less concerned if a <code>ConcurrentMap</code> were in the MVP for shared structs, but I know that shared structs <em>without</em> concurrent collections is already a hard sell. The problem is that shared structs <em>without</em> concurrent collections is nearly unusable for my use cases without the ability to implement a fast efficient custom collection. To support it in the dev trial I essentially had to tag every shared struct with a monotonically increasing identity to use as the hash, and implement a string hashing algorithm just so I could roll my own <code>ConcurrentMap</code>. That approach has a lot of overhead I'd rather avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1712717353090,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n4-tnf_bc8izYgIDpEInjVnKigOVlENlEFG0-g_s538"},
{"content":{"body":"tl;dr, I don't need hash/equals if I know I'll get `ConcurrentMap`, but I know that's a long shot at this point. I'd still lament the overhead of a `CompositeKey`, but my primary use cases would be covered. On the other hand, hash/equals means I'm less concerned about when, if ever, I get `ConcurrentMap` since I could readily implement it in userland.","format":"org.matrix.custom.html","formatted_body":"tl;dr, I don't need hash/equals if I know I'll get <code>ConcurrentMap</code>, but I know that's a long shot at this point. I'd still lament the overhead of a <code>CompositeKey</code>, but my primary use cases would be covered. On the other hand, hash/equals means I'm less concerned about when, if ever, I get <code>ConcurrentMap</code> since I could readily implement it in userland.","m.mentions":{},"msgtype":"m.text"},"ts":1712717622680,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vDeibj0qCx8WdrWeKvYl9HXWa15aubOD_dJGwQrLqO4"},
{"content":{"body":"it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718240639,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},
{"content":{"body":"and being actual `typeof \"object\"` objects rather than a new kind of primitive, and so on","format":"org.matrix.custom.html","formatted_body":"and being actual <code>typeof \"object\"</code> objects rather than a new kind of primitive, and so on","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718305279,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PIJvb1_qQ6tXt84ta5yiMlsYchr7p5yE_zz0TbENlAw"},
{"content":{"body":"https://matrixlogs.bakkot.com/TC39_Delegates/2024-04-09#L294-L290","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$PIJvb1_qQ6tXt84ta5yiMlsYchr7p5yE_zz0TbENlAw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718315176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$llbA8fst8TN9dv0osfY7qDj_WAsfZIh2hJqY1a4AdcQ"},
{"content":{"body":"Could a hashcode be a global symbol for which `Symbol.keyFor()` returned `undefined`? Wouldn't that avoid the concerns about non-determinism?","format":"org.matrix.custom.html","formatted_body":"Could a hashcode be a global symbol for which <code>Symbol.keyFor()</code> returned <code>undefined</code>? Wouldn't that avoid the concerns about non-determinism?","m.mentions":{},"msgtype":"m.text"},"ts":1712729200145,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KIKPKOhaYqubriT2gkWG22V0BiyvxQHj3Wzsw47zZGI"},
{"content":{"body":"Symbols don't help non-determinism.\n\n```\ntypeof hash(\"a\"); // \"symbol\"\n\nif (hash(\"a\") === hash(\"b\")) {\n  print(\"foo\");\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"Symbols don't help non-determinism.<br /><br />```<br />typeof hash(\"a\"); // \"symbol\"<br /><br />if (hash(\"a\") === hash(\"b\")) {<br />  print(\"foo\");<br />}<br />```<br />","msgtype":"m.text"},"ts":1712738581918,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RnbP9GDNepWUzHPShLSsTog31teRRQIU9-_seB1itNw"},
{"content":{"body":"Does the program print foo?","format":"org.matrix.custom.html","formatted_body":"Does the program print foo?","msgtype":"m.text"},"ts":1712738582462,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wysiEBjlpJy5LX3FlLIXwmJB3Q83aMSftUmeReaey1g"},
{"content":{"body":"If the spec says that the symbol hash of every value is different and never equal, then we haven't hashed into a smaller space.\nIf the spec says which values have the same hash then this opens up code to collisions attacks.\nIf the spec says it's random which values have the same hash then it's non-deterministic if the program prints foo.\n\nis my understanding of the problem statement with the  various design constraints put forward from committee.","format":"org.matrix.custom.html","formatted_body":"If the spec says that the symbol hash of every value is different and never equal, then we haven't hashed into a smaller space.<br />If the spec says which values have the same hash then this opens up code to collisions attacks.<br />If the spec says it's random which values have the same hash then it's non-deterministic if the program prints foo.<br /><br />is my understanding of the problem statement with the  various design constraints put forward from committee.","msgtype":"m.text"},"ts":1712738879303,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g5BL-gNKhKOpQE6jTnKQZ2dZXQwSfpgY6KjP9hBPzmE"},
{"content":{"body":"> <@rbuckton:matrix.org> Plus, AFAIK equals/hash is how every implementation implements maps natively, it's just not exposed to user code.\n\nAshley Claymore: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xgGvyBKSJ5vJqJeTktcJpw-ibk9n3l_NnCdEmvIg5UA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Plus, AFAIK equals/hash is how every implementation implements maps natively, it&#39;s just not exposed to user code.</blockquote></mx-reply><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?","m.mentions":{"user_ids":["@rbuckton:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xgGvyBKSJ5vJqJeTktcJpw-ibk9n3l_NnCdEmvIg5UA"}},"msgtype":"m.text"},"ts":1712740482430,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA"},
{"content":{"body":"Hashes can have conflicts — in a Map you store a list of entries per each hash. When looking up values in the map, you:\n1. Compute the has of the key\n2. Get the list corresponding to that hash\n3. Iterate through the list to check if the key is indeed there","format":"org.matrix.custom.html","formatted_body":"<p>Hashes can have conflicts — in a Map you store a list of entries per each hash. When looking up values in the map, you:</p>\n<ol>\n<li>Compute the has of the key</li>\n<li>Get the list corresponding to that hash</li>\n<li>Iterate through the list to check if the key is indeed there</li>\n</ol>","msgtype":"m.text"},"ts":1712740712400,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3WgcSctajYB6X_KrvnmuTScVsIYfcdzqwBWRYaO_o7Q"},
{"content":{"body":"> <@eemeli:mozilla.org> Ashley Claymore: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?\n\nYep. The important part is that this isn't exposed. Apart from trying to measure the execution time. Doing `map.set(\"a\", 1)` I can't tell if there was a hash collision and it had to probe, or the buckets needed to be-resized ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?</blockquote></mx-reply>Yep. The important part is that this isn't exposed. Apart from trying to measure the execution time. Doing `map.set(\"a\", 1)` I can't tell if there was a hash collision and it had to probe, or the buckets needed to be-resized ","m.relates_to":{"m.in_reply_to":{"event_id":"$D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA"}},"msgtype":"m.text"},"ts":1712741205807,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$W1UazixP5XQ3ilGMQ0RSg9aVM-3TcN18S22lgQ4dq0U"},
{"content":{"body":"Ah, got it. So for a \"different and never equal\" sort of hash, `hash()` would need to remember all the values that have passed through it.\n\nA related thought I had that could limit the impact of that would be making the hash (or composite key, not really sure how they'd be very different) linked to the lifetime of an object. Then `hash(foo, \"a\")` and `hash(bar, \"a\")` would never equal if `foo !== bar`, but `hash(obj, { a: 1, b: 2}) === hash(obj, { b: 2, a: 1 })` could work.","format":"org.matrix.custom.html","formatted_body":"<p>Ah, got it. So for a \"different and never equal\" sort of hash, <code>hash()</code> would need to remember all the values that have passed through it.</p>\n<p>A related thought I had that could limit the impact of that would be making the hash (or composite key, not really sure how they'd be very different) linked to the lifetime of an object. Then <code>hash(foo, \"a\")</code> and <code>hash(bar, \"a\")</code> would never equal if <code>foo !== bar</code>, but <code>hash(obj, { a: 1, b: 2}) === hash(obj, { b: 2, a: 1 })</code> could work.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712742788319,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$nwuEvM2YkwyaX5pRF89oYRTVh0nyt07oG1117ESYc4Q"},
{"content":{"body":"That is essentially the CompositeKey / R&T design. That doesn't help Ron's use case of building high performance custom hash maps. To implement custom hash maps the only truely useful hashing function is one where it is possible for values to collide, otherwise the space hasn't been reduced to something that can fit into a small number of indexable buckets","m.mentions":{},"msgtype":"m.text"},"ts":1712750743408,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yNwbPioTEv1koqrHf7g47cxUiA8iBsDLlVjLFtq_U_M"},
{"content":{"body":"this is why Ron desires a hashing function that returns integers","m.mentions":{},"msgtype":"m.text"},"ts":1712750820418,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yoOIGok67qJKz5yAev-CiXMVHlGEr9Pseni1xrUGkZs"},
{"content":{"body":"I would like to think that the object based R&T provide lots of value without needing to expose hashing.\nWhile also not precluding another proposal for exposing hashing function for the use cases when full control and minimal object allocations are desirable.\nFor use cases when R&T can be adopted as the data model of the application, this would be efficient. Using these values as Map/Set keys would require not extra allocation (outside of the map/set's own storage naturally), and the hashing and equality functions would be 100% native with zero need for userland re-entrancy guards.\nHowever Ron is correct that when R&T need to be created as keys because the data model and the keys are not directly compatible then those application will need to allocate more objects to create the keys. This should be more memory efficient than the current solution of flattening values into one long string, but is still an extra allocation that a purely manual hashing+equality interface would avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1712751371364,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ruxFq0MnEjOIbw1usWrMeEhMB52Bkm5bvL34VQ95_fI"},
{"content":{"body":"> <@rbuckton:matrix.org> The overhead incurred by a `CompositeKey` just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a `Hasher` class instead of a global `Object.hash()`. A given `Hasher` could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like `{ equals(a, b), hash(obj, hasher) }` and you then can write `new Map([], { equaler, hasher })`. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.\n\nIn this hasher scenario, I don't really understand why not just use the object as a representative of its own binary hash, and I don't understand what you're proposing for compound values","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The overhead incurred by a <code>CompositeKey</code> just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a <code>Hasher</code> class instead of a global <code>Object.hash()</code>. A given <code>Hasher</code> could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like <code>{ equals(a, b), hash(obj, hasher) }</code> and you then can write <code>new Map([], { equaler, hasher })</code>. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.</blockquote></mx-reply>In this hasher scenario, I don't really understand why not just use the object as a representative of its own binary hash, and I don't understand what you're proposing for compound values","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ"}},"msgtype":"m.text"},"ts":1712751960271,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rKzArYmxxeSflwQnRgmS4wl0n5RG2sgsvFyGWDfhObY"},
{"content":{"body":"> <@bakkot:matrix.org> it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax\n\nWe didn't present the interning idea at that pivotal TC39 meeting because it had already been ruled out for the reasons Ashley presented about the cost of interning, based on previous conversations with implementers (which we maybe should've repeated in committee)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax</blockquote></mx-reply>We didn't present the interning idea at that pivotal TC39 meeting because it had already been ruled out for the reasons Ashley presented about the cost of interning, based on previous conversations with implementers (which we maybe should've repeated in committee)","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":false,"m.in_reply_to":{"event_id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712752085258,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aJAyAxw8M1BmV_Lxx-oGSuD0CWtIEeBS1mO_o6JiOe4"},
{"content":{"body":"shu: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$aJAyAxw8M1BmV_Lxx-oGSuD0CWtIEeBS1mO_o6JiOe4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712752147569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N0C3xXg5InUSjU9BWHz9DOKWKxzICWUb5GjsPrSVT-U"},
{"content":{"body":"I want to compare object equality structurally, not by reference. The most efficient way to do so for custom equality in a hash table is to calculate a hashcode for bucketing, and use an equals method against each element in the bucket. A user-defined hash table cannot use object reference identity as it is not a numeric value, instead it needs an identity hash. ","format":"org.matrix.custom.html","formatted_body":"I want to compare object equality structurally, not by reference. The most efficient way to do so for custom equality in a hash table is to calculate a hashcode for bucketing, and use an equals method against each element in the bucket. A user-defined hash table cannot use object reference identity as it is not a numeric value, instead it needs an identity hash.","msgtype":"m.text"},"ts":1712752250686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aYLjZ8JWbNxSzDIctM04pgS5dPMvnjokRYdfbkcLmUg"},
{"content":{"body":"Can you convert an object identity into a number by having a `WeakMap<object, number>`, and assigning a number to each object?","format":"org.matrix.custom.html","formatted_body":"Can you convert an object identity into a number by having a <code>WeakMap&lt;object, number&gt;</code>, and assigning a number to each object?","m.mentions":{},"msgtype":"m.text"},"ts":1712752354045,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hCZpsUYXhghOONFqP5RKqz5yC-Tt4RXxq5FDHNqQ1NA"},
{"content":{"body":"let's see if we can avoid these weak things where possible... it has a real GC perf cost","m.mentions":{},"msgtype":"m.text"},"ts":1712752589865,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ok2Qo9aimP2hhRfpgo5TRJ2k3dOydunsbHFzPkIyjKs"},
{"content":{"body":"rbuckton: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&T for structural comparison (opt in with a keyBy function). Would that implement what you need?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&amp;T for structural comparison (opt in with a keyBy function). Would that implement what you need?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712752640790,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ"},
{"content":{"body":"That is what is generally done to work around this currently, but it has drawbacks:\n- It's not resilient to version conflicts when multiple versions of the same package are installed.\n- If globally accessible, it must be randomized to avoid becoming a communications channel.\n- It doesn't work across threads for something like shared structs.\n\nIt's also only part of the problem with hashing, the other problem is strings.","format":"org.matrix.custom.html","formatted_body":"<p>That is what is generally done to work around this currently, but it has drawbacks:</p>\n<ul>\n<li>It's not resilient to version conflicts when multiple versions of the same package are installed.</li>\n<li>If globally accessible, it must be randomized to avoid becoming a communications channel.</li>\n<li>It doesn't work across threads for something like shared structs.</li>\n</ul>\n<p>It's also only part of the problem with hashing, the other problem is strings.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712752677079,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc"},
{"content":{"body":"a concurrent map would hash strings well, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712753238707,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KX28PR0UpdSVEHChJxZ3YGFIwmbrkYqVXi6gUJrcWXc"},
{"content":{"body":"> <@rbuckton:matrix.org> That is what is generally done to work around this currently, but it has drawbacks:\n> - It's not resilient to version conflicts when multiple versions of the same package are installed.\n> - If globally accessible, it must be randomized to avoid becoming a communications channel.\n> - It doesn't work across threads for something like shared structs.\n> \n> It's also only part of the problem with hashing, the other problem is strings.\n\nHow can you solve these problems with a custom data structure?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>That is what is generally done to work around this currently, but it has drawbacks:</p>\n<ul>\n<li>It's not resilient to version conflicts when multiple versions of the same package are installed.</li>\n<li>If globally accessible, it must be randomized to avoid becoming a communications channel.</li>\n<li>It doesn't work across threads for something like shared structs.</li>\n</ul>\n<p>It's also only part of the problem with hashing, the other problem is strings.</p>\n</blockquote></mx-reply>How can you solve these problems with a custom data structure?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc"}},"msgtype":"m.text"},"ts":1712753254390,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cm0OMnKzfKoosM2UYC-kosHeqyU1HySqkFqoKQMZ7lE"},
{"content":{"body":"I'm not sure what you mean by \"this is what is done\" -- the concurrent map construct doesn't exist yet","m.mentions":{},"msgtype":"m.text"},"ts":1712753280664,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E"},
{"content":{"body":"> <@littledan:matrix.org> rbuckton: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&T for structural comparison (opt in with a keyBy function). Would that implement what you need?\n\nOne of my goals is performance. Composite keys, or using R&T as keys, is going to have overhead. If I want to use a `Uri` or a `Point` or a `Location` as a key, I would have to convert it to a R&T type or composite key first, which is an allocation for *every* call to `get`/`set`/`has`. This can be 1000s of allocations in a tight loop, and if I don't own `Uri` or `Point` or `Location` I can't just convert those to be R&T types. An `{ equals, hash }` object is a single allocation that is reused for every key.\nAnother of my goals is maturing the language. Custom collection classes can't perform as well as native `Map`/`Set` because developers don't have access to the requisite core capabilities necessary to make that happen. I'm concerned that composite keys either become evolutionary dead end for the language if these building blocks become available, or they become a rationale to never make these building blocks available and thus we never have the flexibility to write efficient custom collections.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&amp;T for structural comparison (opt in with a keyBy function). Would that implement what you need?</blockquote></mx-reply>One of my goals is performance. Composite keys, or using R&amp;T as keys, is going to have overhead. If I want to use a <code>Uri</code> or a <code>Point</code> or a <code>Location</code> as a key, I would have to convert it to a R&amp;T type or composite key first, which is an allocation for <em>every</em> call to <code>get</code>/<code>set</code>/<code>has</code>. This can be 1000s of allocations in a tight loop, and if I don't own <code>Uri</code> or <code>Point</code> or <code>Location</code> I can't just convert those to be R&amp;T types. An <code>{ equals, hash }</code> object is a single allocation that is reused for every key.<br>Another of my goals is maturing the language. Custom collection classes can't perform as well as native <code>Map</code>/<code>Set</code> because developers don't have access to the requisite core capabilities necessary to make that happen. I'm concerned that composite keys either become evolutionary dead end for the language if these building blocks become available, or they become a rationale to never make these building blocks available and thus we never have the flexibility to write efficient custom collections.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ"}},"msgtype":"m.text"},"ts":1712753392354,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IWwomdrBxsKeK-C-WMQ9QvQwTBcyqf4bpqtSVa63lh4"},
{"content":{"body":"> <@littledan:matrix.org> I'm not sure what you mean by \"this is what is done\" -- the concurrent map construct doesn't exist yet\n\nI was responding to nicolo. Also, a concurrent map *does* exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an `Object.hash()` required a significant number of workarounds that I wouldn't want to rely on in a released product.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I&#39;m not sure what you mean by &quot;this is what is done&quot; -- the concurrent map construct doesn&#39;t exist yet</blockquote></mx-reply>I was responding to nicolo. Also, a concurrent map <em>does</em> exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an <code>Object.hash()</code> required a significant number of workarounds that I wouldn't want to rely on in a released product.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E"}},"msgtype":"m.text"},"ts":1712753510436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU"},
{"content":{"body":"Yes, I can see how composite keys or R&T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.","m.mentions":{},"msgtype":"m.text"},"ts":1712753647166,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8b-eDKuqpNGVk1yvCFkeqNOmNyduSOIn5XAGCqOGAHY"},
{"content":{"body":"> <@rbuckton:matrix.org> I was responding to nicolo. Also, a concurrent map *does* exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an `Object.hash()` required a significant number of workarounds that I wouldn't want to rely on in a released product.\n\nah, now I understand why you identify strings as an issue","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I was responding to nicolo. Also, a concurrent map <em>does</em> exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an <code>Object.hash()</code> required a significant number of workarounds that I wouldn't want to rely on in a released product.</blockquote></mx-reply>ah, now I understand why you identify strings as an issue","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU"}},"msgtype":"m.text"},"ts":1712753655547,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cIuznuhvxI-vWNBrEGRa6GUTAIEHhwfZuausXJTurs0"},
{"content":{"body":"And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don't see that being likely.","m.mentions":{},"msgtype":"m.text"},"ts":1712753657014,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow"},
{"content":{"body":"Strings are an issue for multiple reasons.","m.mentions":{},"msgtype":"m.text"},"ts":1712753670178,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iWPPaBjfbzw4s9NVVdJ-Y_Ubk6e1iY9NdxZwLynhZeM"},
{"content":{"body":"> <@rbuckton:matrix.org> And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don't see that being likely.\n\nI can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don&#39;t see that being likely.</blockquote></mx-reply>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow"}},"msgtype":"m.text"},"ts":1712753737206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"},
{"content":{"body":"- Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.\n- Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.</li>\n<li>Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712753759859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM"},
{"content":{"body":"> <@rbuckton:matrix.org> - Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.\n> - Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.\n\nthese sound like issues if you're going to implement your own string hashtable; if this task is offloaded to the VM, it might be easier","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><ul>\n<li>Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.</li>\n<li>Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.</li>\n</ul>\n</blockquote></mx-reply>these sound like issues if you're going to implement your own string hashtable; if this task is offloaded to the VM, it might be easier","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM"}},"msgtype":"m.text"},"ts":1712753809047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fnej9Y1PVZHqKaaNZRVApI5DcgoN6gOyARl3y9n9_1U"},
{"content":{"body":"> <@littledan:matrix.org> I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.\n\nI need more context as to why this is a serious concern. The argument's I've heard for only advancing deterministic APIs do not seem convincing to me. Non-determinism is good for security. Non-determinism is good for performance. Non-determinism is necessary for a large percentage of existing applications. The only rationale I've heard is replay of execution, but there are other technologies for that and it depends on denial of `Math.random()` and `Date.now()` (and `Temporal.Now`, and numerous other sources of randomness). `Object.hash()` could just as easily be denied or made deterministic to serve that case. Determinism for the sake of Determinism does not serve the web platform.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.</blockquote></mx-reply>I need more context as to why this is a serious concern. The argument's I've heard for only advancing deterministic APIs do not seem convincing to me. Non-determinism is good for security. Non-determinism is good for performance. Non-determinism is necessary for a large percentage of existing applications. The only rationale I've heard is replay of execution, but there are other technologies for that and it depends on denial of <code>Math.random()</code> and <code>Date.now()</code> (and <code>Temporal.Now</code>, and numerous other sources of randomness). <code>Object.hash()</code> could just as easily be denied or made deterministic to serve that case. Determinism for the sake of Determinism does not serve the web platform.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"}},"msgtype":"m.text"},"ts":1712754062347,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sh232sizdl7RRLgfgW4P0t6gtkuk2tQHlGWzCiKuo2s"},
{"content":{"body":"We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I'm especially concerned with the interop risks over time. This all is why we're currently taking the middle path of hiding the identity hashcode.","m.mentions":{},"msgtype":"m.text"},"ts":1712754147279,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec"},
{"content":{"body":"userland re-entracy is also a common concern for proposals. If the equals function is written in userland, this puts userland re-entracy right at the heart of the map internal bucket probing loop. I'll leave it to engine implementations to state how much of a concern that is to them.","m.mentions":{},"msgtype":"m.text"},"ts":1712754250611,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cHEk-jSJ-TeFRPcRaL6mXKHqOXHB6MVT3ikY1PCfXRg"},
{"content":{"body":"what do you mean by reentrancy here?","m.mentions":{},"msgtype":"m.text"},"ts":1712754275056,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IE3Hb0o7RYP9L2svWP_wLEPaQQD5yONST_45W6akRdM"},
{"content":{"body":"leaving C++","m.mentions":{},"msgtype":"m.text"},"ts":1712754283421,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NabNYggf7p87L3ByYZHagy26hDiV5AGlO-MRkOQHCn8"},
{"content":{"body":"back to the application's logic","m.mentions":{},"msgtype":"m.text"},"ts":1712754291244,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CT3plBfaryZXFx0aFm2NovHa0Twtpg0X3Be6hN2J0z8"},
{"content":{"body":"which could re-enter the currently executing function","m.mentions":{},"msgtype":"m.text"},"ts":1712754300328,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$J_7WyYLcaWPBnjRbNyRfK-AkUQN7vVs4Pa6zOHsHkm0"},
{"content":{"body":"> <@littledan:matrix.org> We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I'm especially concerned with the interop risks over time. This all is why we're currently taking the middle path of hiding the identity hashcode.\n\nCan you expand on your concerns about interop risks? A hashcode is not a portable value. It is only relevant during the life of the application. That is the case in every language as far as I know.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I&#39;m especially concerned with the interop risks over time. This all is why we&#39;re currently taking the middle path of hiding the identity hashcode.</blockquote></mx-reply>Can you expand on your concerns about interop risks? A hashcode is not a portable value. It is only relevant during the life of the application. That is the case in every language as far as I know.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec"}},"msgtype":"m.text"},"ts":1712754309408,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bxAQIqVjiG681L972Ztndes3lAJsreD3iJ3bC7OE34E"},
{"content":{"body":" * which could re-enter the currently executing function. Invalidating pointers, if this re-entrancy was not taken into account.\ne.g. the buckets being re-sized while walked","m.mentions":{},"m.new_content":{"body":"which could re-enter the currently executing function. Invalidating pointers, if this re-entrancy was not taken into account.\ne.g. the buckets being re-sized while walked","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J_7WyYLcaWPBnjRbNyRfK-AkUQN7vVs4Pa6zOHsHkm0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712754361585,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9rdAKIpgAWtb2fAAHVDwDNHLBXPv9mHbIIk4LRv2elU"},
{"content":{"body":"It's easy to imagine someone depending on string hashcodes having certain properties","m.mentions":{},"msgtype":"m.text"},"ts":1712754402416,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY"},
{"content":{"body":"for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off","m.mentions":{},"msgtype":"m.text"},"ts":1712754441077,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk"},
{"content":{"body":"> <@littledan:matrix.org> I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.\n\nGetting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent `Deque`, Work stealing queue, `ConcurrentMap`, and `ConcurrentBag`/`ConcurrentSet`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.</blockquote></mx-reply>Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent <code>Deque</code>, Work stealing queue, <code>ConcurrentMap</code>, and <code>ConcurrentBag</code>/<code>ConcurrentSet</code>.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"}},"msgtype":"m.text"},"ts":1712754575562,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0"},
{"content":{"body":"> <@rbuckton:matrix.org> Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent `Deque`, Work stealing queue, `ConcurrentMap`, and `ConcurrentBag`/`ConcurrentSet`.\n\nsounds like a good argument that we should have a built-in ConcurrentMap, whether as part of shared structs or a follow-on proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent <code>Deque</code>, Work stealing queue, <code>ConcurrentMap</code>, and <code>ConcurrentBag</code>/<code>ConcurrentSet</code>.</blockquote></mx-reply>sounds like a good argument that we should have a built-in ConcurrentMap, whether as part of shared structs or a follow-on proposal","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0"}},"msgtype":"m.text"},"ts":1712754622241,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VCRr2oN9rcVIGCyrwqE9qqDMCTqbSfCNMDeyjCjPseI"},
{"content":{"body":"> <@littledan:matrix.org> for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off\n\nThere are easier ways to do this that don't depend on `Object.hash()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off</blockquote></mx-reply>There are easier ways to do this that don't depend on <code>Object.hash()</code>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk"}},"msgtype":"m.text"},"ts":1712754640117,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eydiLuSJPvJ5hNEjgz6p7uW4qkMphSYAPXBDdD3_Mmg"},
{"content":{"body":"shu: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1712754651733,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$07YdC2yJ1rBELs4Yv9FvhUaU1CNyG1LMadTq34JXhJE"},
{"content":{"body":"\"this is an uphill battle\" doesn't *necessarily* imply that taking the battle somewhere else will make it easier","format":"org.matrix.custom.html","formatted_body":"\"this is an uphill battle\" doesn't <em>necessarily</em> imply that taking the battle somewhere else will make it easier","m.mentions":{},"msgtype":"m.text"},"ts":1712754669970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk"},
{"content":{"body":"> <@littledan:matrix.org> \"this is an uphill battle\" doesn't *necessarily* imply that taking the battle somewhere else will make it easier\n\nThere's nowhere else to take it, IMO. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>\"this is an uphill battle\" doesn't <em>necessarily</em> imply that taking the battle somewhere else will make it easier</blockquote></mx-reply>There's nowhere else to take it, IMO.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk"}},"msgtype":"m.text"},"ts":1712754702664,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L3oRL4WwIK_htEp1Cbv1g6Q8sHEd4-XiwFVpiMXiJzk"},
{"content":{"body":"> <@littledan:matrix.org> It's easy to imagine someone depending on string hashcodes having certain properties\n\nPretty much every hash generation API in every language include documentation that hash codes are not stable across application restarts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It&#39;s easy to imagine someone depending on string hashcodes having certain properties</blockquote></mx-reply>Pretty much every hash generation API in every language include documentation that hash codes are not stable across application restarts.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY"}},"msgtype":"m.text"},"ts":1712754752535,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qGQTZQCDKq1eDmnmTGLxXUyQW2FuVshYrrD9inMmPGY"},
{"content":{"body":"> <@littledan:matrix.org> Yes, I can see how composite keys or R&T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.\n\nJS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and the easier it becomes for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8b-eDKuqpNGVk1yvCFkeqNOmNyduSOIn5XAGCqOGAHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yes, I can see how composite keys or R&amp;T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.</blockquote></mx-reply>JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and the easier it becomes for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8b-eDKuqpNGVk1yvCFkeqNOmNyduSOIn5XAGCqOGAHY"}},"msgtype":"m.text"},"ts":1712755408899,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70"},
{"content":{"body":"> <@littledan:matrix.org> Yes, I can see how composite keys or R&T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.\n\n * JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and its becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8b-eDKuqpNGVk1yvCFkeqNOmNyduSOIn5XAGCqOGAHY?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yes, I can see how composite keys or R&amp;T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.</blockquote></mx-reply> * JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and its becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","m.mentions":{},"m.new_content":{"body":"JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and its becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","format":"org.matrix.custom.html","formatted_body":"JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and its becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712755434785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SeuNJX_EFYSHKbWzqPWi8M9yZ6nFAEKFcCDb6ouOeGw"},
{"content":{"body":" * JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","format":"org.matrix.custom.html","formatted_body":" * JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","m.mentions":{},"m.new_content":{"body":"JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","format":"org.matrix.custom.html","formatted_body":"JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712755444744,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SK23AOPdJuALMszOOHLsVa0qWESRfBRuqflziGR5FYA"},
{"content":{"body":"* Pretty much every hash generation API in every language includes documentation that hash codes are not stable across application restarts.","m.new_content":{"body":"> <@littledan:matrix.org> It's easy to imagine someone depending on string hashcodes having certain properties\n\nPretty much every hash generation API in every language includes documentation that hash codes are not stable across application restarts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a><br />It's easy to imagine someone depending on string hashcodes having certain properties</blockquote></mx-reply>Pretty much every hash generation API in every language includes documentation that hash codes are not stable across application restarts.","msgtype":"m.text"},"m.relates_to":{"event_id":"$qGQTZQCDKq1eDmnmTGLxXUyQW2FuVshYrrD9inMmPGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712756396817,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JbdfRhQOhD1kmsO7rwPprFEyykpcsgE8jygD4tEGyqk"},
{"content":{"body":"good morning/evening/night delegates! meeting starting in ~10m.","m.mentions":{},"msgtype":"m.text"},"ts":1712757044512,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$5HkysWixfv3NI8oAK5Ar4Djlw4q0wjnklnMgAg03IlQ"},
{"content":{"body":"> <@yulia:mozilla.org> shu: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it\n\nwill take you up on that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$07YdC2yJ1rBELs4Yv9FvhUaU1CNyG1LMadTq34JXhJE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it</blockquote></mx-reply>will take you up on that","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$07YdC2yJ1rBELs4Yv9FvhUaU1CNyG1LMadTq34JXhJE"}},"msgtype":"m.text"},"ts":1712757509228,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Eiu8nBA_nB3Oivoqv5178WLG7w88gYFqHLKkUC33V18"},
{"content":{"body":"> <@littledan:matrix.org> shu: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?\n\nnot at this time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N0C3xXg5InUSjU9BWHz9DOKWKxzICWUb5GjsPrSVT-U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?</blockquote></mx-reply>not at this time","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":false,"m.in_reply_to":{"event_id":"$N0C3xXg5InUSjU9BWHz9DOKWKxzICWUb5GjsPrSVT-U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712757836101,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BzXpY15oBRwrRyg2LgKE7qKRJq_fAQ141CR9ykxceCI"},
{"content":{"body":"I would volunteer for note taking, but I'm getting pinged on non-TC39 things a lot right now.","m.mentions":{},"msgtype":"m.text"},"ts":1712757862971,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$T5hPvZ9NhvFCPdXMGRZoUT2wZ9o-dKniC4_dstC1_Ns"},
{"content":{"body":"> <@aardvark179:matrix.org> I would volunteer for note taking, but I'm getting pinged on non-TC39 things a lot right now.\n\nunderstandable, thanks anyway!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$T5hPvZ9NhvFCPdXMGRZoUT2wZ9o-dKniC4_dstC1_Ns?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>I would volunteer for note taking, but I&#39;m getting pinged on non-TC39 things a lot right now.</blockquote></mx-reply>understandable, thanks anyway!","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$T5hPvZ9NhvFCPdXMGRZoUT2wZ9o-dKniC4_dstC1_Ns"}},"msgtype":"m.text"},"ts":1712757942480,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$icPPMQXagaJhjFMemqQRGdLfdLtYb8qq-x6a3hg9lBw"},
{"content":{"body":"hard agree with USA here","msgtype":"m.text"},"ts":1712759026164,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wVQo-4zBq9JY0Y4pAX4DHHOihUwoOXILrltTZw6ha-I"},
{"content":{"body":"> <@michaelficarra:matrix.org> hard agree with USA here\n\ncould you elaborate?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wVQo-4zBq9JY0Y4pAX4DHHOihUwoOXILrltTZw6ha-I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>hard agree with USA here</blockquote></mx-reply>could you elaborate?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wVQo-4zBq9JY0Y4pAX4DHHOihUwoOXILrltTZw6ha-I"}},"msgtype":"m.text"},"ts":1712759058690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9eb_KBl3rjAcPWxhAPXIrIce27AhXrj9gxdPbvoucrg"},
{"content":{"body":"stage 1 acknowledges that localisation is important for the web and something we should try to address within TC39; that remains the case, regardless of how long it will take or how hard it might be to provide a solution","msgtype":"m.text"},"ts":1712759217813,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3_l3HoGFgym9QSta0b1ty56-TSNhI-byeOVxR6b5ipg"},
{"content":{"body":"> <@michaelficarra:matrix.org> stage 1 acknowledges that localisation is important for the web and something we should try to address within TC39; that remains the case, regardless of how long it will take or how hard it might be to provide a solution\n\nWhere is the point where you're disagreeing with USA?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3_l3HoGFgym9QSta0b1ty56-TSNhI-byeOVxR6b5ipg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>stage 1 acknowledges that localisation is important for the web and something we should try to address within TC39; that remains the case, regardless of how long it will take or how hard it might be to provide a solution</blockquote></mx-reply>Where is the point where you're disagreeing with USA?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3_l3HoGFgym9QSta0b1ty56-TSNhI-byeOVxR6b5ipg"}},"msgtype":"m.text"},"ts":1712759409310,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gTE_Gn4g6VZntt4nm0dqSyzXSUyATCi5hKAsiOBRw9g"},
{"content":{"body":"... nowhere?","msgtype":"m.text"},"ts":1712759427427,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LEq0_qLMYHBJdd79rKG9BbWHgfi8q5Tq5ufvGS9pQbQ"},
{"content":{"body":"oh oops I misread sorry","m.mentions":{},"msgtype":"m.text"},"ts":1712759443151,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RhjitPiMqrEY4X5WWnL-FkcsX27GDjqA5u4ATZEK-oQ"},
{"content":{"body":"somehow turned into hard disagree","m.mentions":{},"msgtype":"m.text"},"ts":1712759462423,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mX9X5AJ_YZie2dEyn8AFU23MpRbGcDiZ9xZpQBnFNj8"},
{"content":{"body":"> <@rbuckton:matrix.org> JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.\n\nHow would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects like in JS?\n\nI actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?\n\nIMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.</blockquote></mx-reply><p>How would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects like in JS?</p>\n<p>I actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?</p>\n<p>IMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70"}},"msgtype":"m.text"},"ts":1712759964546,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2rPsTfazI0Gr51GFdS5V9BStQbGPFMsZepW0SVxqNHw"},
{"content":{"body":"> <@rbuckton:matrix.org> JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.\n\n * How would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects (and possibly strings) like in JS?\n\nI actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?\n\nIMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wIMgxnlITGCcRpG4QBe-kmRtlzahwJSuym6a3ycZy70?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>JS performance is a hot button issue in the ecosystem. The \"why not rewrite in Rust\" crowd is growing louder and louder, especially now that WASM-GC is available, and it's becoming easier and easier for people to move off of JS. I want the JS language to evolve and mature, to continue to be relevant. I don't want to end up with JS just being for hobbyists because the rest of the world has moved on. We mature by adding flexibility, smoothing rough edges, improving performance, improving ergonomics, simplifying common tasks, and adding new capabilities that open the doors for new classes of applications. JS is not a specialized language, it is a general purpose language, and that's its strength.</blockquote></mx-reply> * <p>How would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects (and possibly strings) like in JS?</p>\n<p>I actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?</p>\n<p>IMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.</p>\n","m.mentions":{},"m.new_content":{"body":"How would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects (and possibly strings) like in JS?\n\nI actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?\n\nIMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.","format":"org.matrix.custom.html","formatted_body":"<p>How would a concurrent map actually be implemented in the context of wasm-gc? Isn't there the same kind of problems that you have an opaque identity for your objects (and possibly strings) like in JS?</p>\n<p>I actually still fail to understand what the data model is for your use case, and as such what the solution space might look like. You want structural comparisons for your collection entries, but these values are shared? How can a structural comparison be stable if the data itself can change from under you? Could part of the \"solution\" be to make R/T sharable and valid values inside shared structs?</p>\n<p>IMO, the ability to shim new features is highly preferable, but it rarely needs to be efficient / performant, nor does it need to be ergonomic for the shim implementer. I'd rather have a cohesive language that doesn't expose sharp edges.</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2rPsTfazI0Gr51GFdS5V9BStQbGPFMsZepW0SVxqNHw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712760001774,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$I9flb74NCPNMq4Sl1NhEPVlacpl3bQftFnD8a6TXgBE"},
{"content":{"body":"+1 to finding ways to reduce champion burnout. There's a reason why it was 2022 when I was presented R&T :)","m.mentions":{},"msgtype":"m.text"},"ts":1712760051753,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3k5Z85X6iJ341G9BaQxeQQ3uYbYz-xc8tNlEn_fPC1U"},
{"content":{"body":"it has not reached an impasse","m.mentions":{},"msgtype":"m.text"},"ts":1712760091887,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PelbMFsr3Y63Sa1orreIWQfB64abLIE0eU0GlL8hLFU"},
{"content":{"body":" * +1 to finding ways to reduce champion burnout. There's a reason why it was 2022 when I last presented R&T :)","m.mentions":{},"m.new_content":{"body":"+1 to finding ways to reduce champion burnout. There's a reason why it was 2022 when I last presented R&T :)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3k5Z85X6iJ341G9BaQxeQQ3uYbYz-xc8tNlEn_fPC1U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712760279128,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2OhNnbIkARgvOsmGr9IFCYRY63DZQPqvqtPVYEFXwxA"},
{"content":{"body":"I was scrolling through Twitter and found another case of somebody not realizing that `using` requires a binding even if it's not actually needed: https://twitter.com/nullvoxpopuli/status/1777364717805142411","format":"org.matrix.custom.html","formatted_body":"I was scrolling through Twitter and found another case of somebody not realizing that <code>using</code> requires a binding even if it's not actually needed: https://twitter.com/nullvoxpopuli/status/1777364717805142411","m.mentions":{},"msgtype":"m.text"},"ts":1712760633472,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FiOIuT2RKjp1O3nerq-s-DMEmznjogkJPnaqPfgxRv0"},
{"content":{"body":"Maybe we could allow `using LeftHandSideExpression`","format":"org.matrix.custom.html","formatted_body":"Maybe we could allow <code>using LeftHandSideExpression</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712760679038,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$PU_Eno-C55Hgj_pVXHTe9O7rciOG4gRSaxIUJG_5P3s"},
{"content":{"body":" * Maybe we could allow `using LeftHandSideExpression ;`","format":"org.matrix.custom.html","formatted_body":" * Maybe we could allow <code>using LeftHandSideExpression ;</code>","m.mentions":{},"m.new_content":{"body":"Maybe we could allow `using LeftHandSideExpression ;`","format":"org.matrix.custom.html","formatted_body":"Maybe we could allow <code>using LeftHandSideExpression ;</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PU_Eno-C55Hgj_pVXHTe9O7rciOG4gRSaxIUJG_5P3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712760682947,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cKfQ5CSn6iBwgwhREFAUhmudwtar2ogMwHuFA9KUEr0"},
{"content":{"body":"It would beed a cover grammar, but `using fn()` is much better than `using void = fn()`","format":"org.matrix.custom.html","formatted_body":"It would beed a cover grammar, but <code>using fn()</code> is much better than <code>using void = fn()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712760708623,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JK8YE7UKAcsdwpM1MZX7CDhaSZ4PKUWDTXHJBboX7mc"},
{"content":{"body":"I used \"impasse\", or \"stuck\" in the issue, to indicate that no actions only within TC39 are sufficient for further progress. The impasse may be resolved by actions outside the committee, i.e. industry feedback and/or adoption. But didn't want to get into an argument about semantics.","m.mentions":{},"msgtype":"m.text"},"ts":1712760742545,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$hqGluxICzSOJ_Sw0jAYrkjcoHlb3hO9PafMMZV9uPwg"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> It would beed a cover grammar, but `using fn()` is much better than `using void = fn()`\n\nAnd then `using void =` would be a syntax error like `let void =` and `const void =`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JK8YE7UKAcsdwpM1MZX7CDhaSZ4PKUWDTXHJBboX7mc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>It would beed a cover grammar, but <code>using fn()</code> is much better than <code>using void = fn()</code></blockquote></mx-reply>And then <code>using void =</code> would be a syntax error like <code>let void =</code> and <code>const void =</code>","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$JK8YE7UKAcsdwpM1MZX7CDhaSZ4PKUWDTXHJBboX7mc"}},"msgtype":"m.text"},"ts":1712760762873,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2iy_fg0NL2lQOcnOWjr8A2ngX7dUwPyHGpGw1V4xm-Y"},
{"content":{"body":"@nicolo-ribaudo:matrix.org https://github.com/tc39/proposal-discard-binding/issues/1#issuecomment-2030365690","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo</a> https://github.com/tc39/proposal-discard-binding/issues/1#issuecomment-2030365690","msgtype":"m.text"},"ts":1712760811683,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8IOEef4p9XKlQoaQ0Avub30aAKFKZ6QihgT2TLyG9j4"},
{"content":{"body":"Thank you","m.mentions":{},"msgtype":"m.text"},"ts":1712760912177,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QlTmeiQy39HT7mVv4BK0qnesYdnZLVtjbxiAfUM_IZM"},
{"content":{"body":"I really like allow redeclare `_` ...","format":"org.matrix.custom.html","formatted_body":"I really like allow redeclare <code>_</code> ...","m.mentions":{},"msgtype":"m.text"},"ts":1712761151671,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$35qfN52DORQp6yecgZR2RSMcdYtrR9IaPcxE2yztdAU"},
{"content":{"body":"https://johnnyreilly.com/typescript-eslint-no-unused-vars","m.mentions":{},"msgtype":"m.text"},"ts":1712761545046,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$USYh74Fd3A6h0bXUYXlhB4EaDKP5B03BCSlO9r68edo"},
{"content":{"body":"^^ for reference to what RBN said about eslint config","m.mentions":{},"msgtype":"m.text"},"ts":1712761567877,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Aahg-Ewl3VQEXgjCSSTCmPBTwqAjSVUz-x7GaKd-4tA"},
{"content":{"body":"I think the Risks and Assumptions section in the Java JEP for unnamed variables is interesting:\n> We assume that little if any actively-maintained code uses underscore as a variable name. Developers migrating from Java 7 to Java 22 without having seen the warnings issued in Java 8 or the errors issued since Java 9 could be surprised. They face the risk of dealing with compile-time errors when reading or writing variables named _ and when declaring any other kind of element (class, field, etc.) with the name _.\n\n","format":"org.matrix.custom.html","formatted_body":"<p>I think the Risks and Assumptions section in the Java JEP for unnamed variables is interesting:</p>\n<blockquote>\n<p>We assume that little if any actively-maintained code uses underscore as a variable name. Developers migrating from Java 7 to Java 22 without having seen the warnings issued in Java 8 or the errors issued since Java 9 could be surprised. They face the risk of dealing with compile-time errors when reading or writing variables named _ and when declaring any other kind of element (class, field, etc.) with the name _.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712761628825,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$D5vgjj20MAeioAfpnZD1liGH91_PysfRKlIeJICkvMU"},
{"content":{"body":"This just feels risky to me, maybe it's better to keep this in extractors and pattern matching and explicit resource management, even if it would be nice to have it elsewhere.","m.mentions":{},"msgtype":"m.text"},"ts":1712761645551,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$ThN1QVufrCP0Kt9GAntSOLSYORhJduVYuvZUeN3heHo"},
{"content":{"body":"fwiw eslint supports an ignore prefix _pattern_ for the reason ron just mentioned","format":"org.matrix.custom.html","formatted_body":"fwiw eslint supports an ignore prefix <em>pattern</em> for the reason ron just mentioned","m.mentions":{},"msgtype":"m.text"},"ts":1712761668608,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Bbq4mhiKpPjjX_nDyJ4lc33gQ-yC4m-Uk2OuKUMQz7I"},
{"content":{"body":"> <@dminor:mozilla.org> This just feels risky to me, maybe it's better to keep this in extractors and pattern matching and explicit resource management, even if it would be nice to have it elsewhere.\n\nit seems kinda weird to me to restrict this construct to just pattern matching and explicit resource management, but if we can't have it elsewhere, that's maybe OK","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ThN1QVufrCP0Kt9GAntSOLSYORhJduVYuvZUeN3heHo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>This just feels risky to me, maybe it&#39;s better to keep this in extractors and pattern matching and explicit resource management, even if it would be nice to have it elsewhere.</blockquote></mx-reply>it seems kinda weird to me to restrict this construct to just pattern matching and explicit resource management, but if we can't have it elsewhere, that's maybe OK","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ThN1QVufrCP0Kt9GAntSOLSYORhJduVYuvZUeN3heHo"}},"msgtype":"m.text"},"ts":1712761726837,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n42UwdUySrtZHg2preGnJTyhAsvDkK84vl4YjPdDSrk"},
{"content":{"body":"I agree it would be weird","m.mentions":{},"msgtype":"m.text"},"ts":1712761771970,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$4miSwoQfdXmPaq6_TZb-KiRI13B4P4UX8mxG-ZiSvYc"},
{"content":{"body":"But there's no risk of breaking existing code, and we can have `_` there, right?","format":"org.matrix.custom.html","formatted_body":"But there's no risk of breaking existing code, and we can have <code>_</code> there, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712761797043,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$WlS64RrQZgFC4hOCYcOOu86TfbJbmGPused7ru_skr4"},
{"content":{"body":"i don't understand how any existing variable name can be web compat","m.mentions":{},"msgtype":"m.text"},"ts":1712761856584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WlxAtUsQpwbSacsSpfnIBWaz5GCEh8Ch2hhFME_h_FQ"},
{"content":{"body":"It would be nice to use `_` in pattern matching, given precedent in other languages with pattern matching","format":"org.matrix.custom.html","formatted_body":"It would be nice to use <code>_</code> in pattern matching, given precedent in other languages with pattern matching","m.mentions":{},"msgtype":"m.text"},"ts":1712761869332,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$yGQ_uPf7fhi0JXRgKmF_SJGrwyJiFQZ7J-fbRzIVycs"},
{"content":{"body":"`const _ = a, _ -= b` is illegal everywhere","format":"org.matrix.custom.html","formatted_body":"<code>const _ = a, _ -= b</code> is illegal everywhere","m.mentions":{},"msgtype":"m.text"},"ts":1712761893333,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1oWrGdf5TQrwBqx8UPJ6e5ZR5sas3cd_5U79eDnDgBk"},
{"content":{"body":"> <@shuyuguo:matrix.org> i don't understand how any existing variable name can be web compat\n\nthis is if it's restricted to the new constructs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WlxAtUsQpwbSacsSpfnIBWaz5GCEh8Ch2hhFME_h_FQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i don&#39;t understand how any existing variable name can be web compat</blockquote></mx-reply>this is if it's restricted to the new constructs","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WlxAtUsQpwbSacsSpfnIBWaz5GCEh8Ch2hhFME_h_FQ"}},"msgtype":"m.text"},"ts":1712761899956,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hvRQyMN1mA50HC3eX1HSsUjTYXUr55M0EZRjpOvlGJs"},
{"content":{"body":"> <@shuyuguo:matrix.org> i don't understand how any existing variable name can be web compat\n\nInstead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WlxAtUsQpwbSacsSpfnIBWaz5GCEh8Ch2hhFME_h_FQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i don&#39;t understand how any existing variable name can be web compat</blockquote></mx-reply>Instead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WlxAtUsQpwbSacsSpfnIBWaz5GCEh8Ch2hhFME_h_FQ"}},"msgtype":"m.text"},"ts":1712761900009,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pQlxiSdA6PoFOx5jW4X_VjlNA-FuOm-6j84PtWRXqS0"},
{"content":{"body":" * `const _ = a, _ = b` is illegal everywhere","format":"org.matrix.custom.html","formatted_body":" * <code>const _ = a, _ = b</code> is illegal everywhere","m.mentions":{},"m.new_content":{"body":"`const _ = a, _ = b` is illegal everywhere","format":"org.matrix.custom.html","formatted_body":"<code>const _ = a, _ = b</code> is illegal everywhere","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1oWrGdf5TQrwBqx8UPJ6e5ZR5sas3cd_5U79eDnDgBk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712761902633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c5wMWcgyWoYVxbxCuP0fOs4_m3nvaLl_WnR_U-U-dF8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Instead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"\n\n\"strict mode\" -> I mean let, const, and strict params","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pQlxiSdA6PoFOx5jW4X_VjlNA-FuOm-6j84PtWRXqS0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Instead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"</blockquote></mx-reply>\"strict mode\" -&gt; I mean let, const, and strict params","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pQlxiSdA6PoFOx5jW4X_VjlNA-FuOm-6j84PtWRXqS0"}},"msgtype":"m.text"},"ts":1712761929540,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$snpOZu4QUpcpJGCPQMM9OAKgqdr0h4XksyyFT-8_oIY"},
{"content":{"body":"but `var _ = 1, _ = 2;` is not","format":"org.matrix.custom.html","formatted_body":"but <code>var _ = 1, _ = 2;</code> is not","m.mentions":{},"msgtype":"m.text"},"ts":1712761930613,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$56yf0jCTUZLeSrjLJKmhYIj6awmBJeai91HA43NmdgA"},
{"content":{"body":" * but `var _ = 1, _ = 2;` is not illegal anywhere","format":"org.matrix.custom.html","formatted_body":" * but <code>var _ = 1, _ = 2;</code> is not illegal anywhere","m.mentions":{},"m.new_content":{"body":"but `var _ = 1, _ = 2;` is not illegal anywhere","format":"org.matrix.custom.html","formatted_body":"but <code>var _ = 1, _ = 2;</code> is not illegal anywhere","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$56yf0jCTUZLeSrjLJKmhYIj6awmBJeai91HA43NmdgA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712761935471,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ft4oE72r2q6XpizudwmIB56LLG9eAXArA6LNlXbec24"},
{"content":{"body":"> <@ljharb:matrix.org> but `var _ = 1, _ = 2;` is not illegal anywhere\n\nAnd nobody is proposing changing how it works","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56yf0jCTUZLeSrjLJKmhYIj6awmBJeai91HA43NmdgA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but <code>var _ = 1, _ = 2;</code> is not illegal anywhere</blockquote></mx-reply>And nobody is proposing changing how it works","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$56yf0jCTUZLeSrjLJKmhYIj6awmBJeai91HA43NmdgA"}},"msgtype":"m.text"},"ts":1712761949884,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$VHpD5yjOIARsoJxOhgiBBxtAWYj09fo5VOGkZy8x0uQ"},
{"content":{"body":"I don't like `_` as discard. What's wrong with `void`? Is there any pushback on `void`?","format":"org.matrix.custom.html","formatted_body":"I don't like <code>_</code> as discard. What's wrong with <code>void</code>? Is there any pushback on <code>void</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712761973212,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$hk9uooAAB06hEHcg1iDLBNnCsFc0ch5Xd3isq7lXt4M"},
{"content":{"body":"what about `function f(_, _) {}`, which is legal in sloppy mode?","format":"org.matrix.custom.html","formatted_body":"what about <code>function f(_, _) {}</code>, which is legal in sloppy mode?","m.mentions":{},"msgtype":"m.text"},"ts":1712761981002,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RwO13w_dHU9sp4_EbAL-s9byx0Aq7SkK5HBpvtY9YUw"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Instead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"\n\nsloppy mode so popular though?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pQlxiSdA6PoFOx5jW4X_VjlNA-FuOm-6j84PtWRXqS0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Instead of \"redeclaring a variable is an error in strict mode\" it becomes \"reading a variable that has been redeclared in strict mode is an error\"</blockquote></mx-reply>sloppy mode so popular though?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pQlxiSdA6PoFOx5jW4X_VjlNA-FuOm-6j84PtWRXqS0"}},"msgtype":"m.text"},"ts":1712761986430,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GZiH2Umn09CFbZV2GBRRe4AKU7ln4plYLUnuW93aZdo"},
{"content":{"body":"To me \"void\" sounds an awful lot like \"undefined\".","m.mentions":{},"msgtype":"m.text"},"ts":1712761993598,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$yuKwIjGURRdiSwUMnGQ_cz--7AjizpSifhDSc7oTLuc"},
{"content":{"body":"for C/C++ developers it could be a source of confusion, yes","m.mentions":{},"msgtype":"m.text"},"ts":1712762025745,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TB7EnNwIONI4LIykRDCUt-A7t40QAGpmEy59LuCKoT4"},
{"content":{"body":"and indeed the binding is not defined :-p","m.mentions":{},"msgtype":"m.text"},"ts":1712762027296,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$doFsrfdEptRuNd30mc5bzWm3r9sTd29JZcL3gNLa6xA"},
{"content":{"body":"> <@shuyuguo:matrix.org> sloppy mode so popular though?\n\nThe error cases remain the same, with the difference that the error is moved from declaration position to reference position","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GZiH2Umn09CFbZV2GBRRe4AKU7ln4plYLUnuW93aZdo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>sloppy mode so popular though?</blockquote></mx-reply>The error cases remain the same, with the difference that the error is moved from declaration position to reference position","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GZiH2Umn09CFbZV2GBRRe4AKU7ln4plYLUnuW93aZdo"}},"msgtype":"m.text"},"ts":1712762070672,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GClRuLsrRYzWFcihJwrHWynBsi4efyFN5bonW3pd2GM"},
{"content":{"body":"So what works in strict mode would keep working the same","m.mentions":{},"msgtype":"m.text"},"ts":1712762085685,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UDN2FmQc78OBbFkozOQTYZjC0ccaUONiRLyl8DLbA_4"},
{"content":{"body":"I assume other languages could cope with `_` easier because they didn't have a popular library that was commonly imported as `_`","format":"org.matrix.custom.html","formatted_body":"I assume other languages could cope with <code>_</code> easier because they didn't have a popular library that was commonly imported as <code>_</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712762089267,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I"},
{"content":{"body":" * So what works in any mode would keep working the same","m.mentions":{},"m.new_content":{"body":"So what works in any mode would keep working the same","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UDN2FmQc78OBbFkozOQTYZjC0ccaUONiRLyl8DLbA_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712762096025,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$MjFi_pR191FI3QaMdL10v2MqjgSN86fNV-Qbdg7XLo4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> The error cases remain the same, with the difference that the error is moved from declaration position to reference position\n\ni am still confused what the proposed semantics is for sloppy mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GClRuLsrRYzWFcihJwrHWynBsi4efyFN5bonW3pd2GM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>The error cases remain the same, with the difference that the error is moved from declaration position to reference position</blockquote></mx-reply>i am still confused what the proposed semantics is for sloppy mode","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GClRuLsrRYzWFcihJwrHWynBsi4efyFN5bonW3pd2GM"}},"msgtype":"m.text"},"ts":1712762116881,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tUpe42yPIvp2ugBq1K9Fr8RDYlGaE5AoaosHQi_JHdc"},
{"content":{"body":"@rbuckton:matrix.org Why do we lose assignment patterns with `_`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton</a> Why do we lose assignment patterns with <code data-md=\"`\">_</code>?","msgtype":"m.text"},"ts":1712762138075,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$p_rwS6IYmxEOZyLjF_Qzl-vqOvvwReJAyz8aHqqnPjw"},
{"content":{"body":"> <@aclaymore:matrix.org> I assume other languages could cope with `_` easier because they didn't have a popular library that was commonly imported as `_`\n\nit's on us for not doing modules/namespaces well I guess","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I assume other languages could cope with <code>_</code> easier because they didn't have a popular library that was commonly imported as <code>_</code></blockquote></mx-reply>it's on us for not doing modules/namespaces well I guess","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I"}},"msgtype":"m.text"},"ts":1712762139408,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gqtzJsBrMDSnAB4mU6CM1KHvjMl7TgQaGOaA6ELAwsE"},
{"content":{"body":"> <@aclaymore:matrix.org> I assume other languages could cope with `_` easier because they didn't have a popular library that was commonly imported as `_`\n\n * it's on us for not doing modules/namespaces well at start I guess","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I assume other languages could cope with <code>_</code> easier because they didn't have a popular library that was commonly imported as <code>_</code></blockquote></mx-reply> * it's on us for not doing modules/namespaces well at start I guess","m.mentions":{},"m.new_content":{"body":"it's on us for not doing modules/namespaces well at start I guess","format":"org.matrix.custom.html","formatted_body":"it's on us for not doing modules/namespaces well at start I guess","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gqtzJsBrMDSnAB4mU6CM1KHvjMl7TgQaGOaA6ELAwsE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712762143798,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$_7fOzund71h5qziw6hylstN64_m9Hv6qB4so3pncDzo"},
{"content":{"body":"The simple case is just to allow redeclaring `_`, no other restrictions.","format":"org.matrix.custom.html","formatted_body":"The simple case is just to allow redeclaring <code data-md=\"`\">_</code>, no other restrictions.","msgtype":"m.text"},"ts":1712762152525,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0137tmOKQg2UTNSVfOYhhHefMPfN8G68wOy9FXKdKfY"},
{"content":{"body":"> <@shuyuguo:matrix.org> i am still confused what the proposed semantics is for sloppy mode\n\nvars and function params can be redeclared, but if you redeclare a let/const then it throws when you reference the binding","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tUpe42yPIvp2ugBq1K9Fr8RDYlGaE5AoaosHQi_JHdc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i am still confused what the proposed semantics is for sloppy mode</blockquote></mx-reply>vars and function params can be redeclared, but if you redeclare a let/const then it throws when you reference the binding","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tUpe42yPIvp2ugBq1K9Fr8RDYlGaE5AoaosHQi_JHdc"}},"msgtype":"m.text"},"ts":1712762152603,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$77wufVC888ofa8T6QtHxTwPAvSHzG9noQx8LpZ1q6S8"},
{"content":{"body":"> <@usharma:igalia.com> it's on us for not doing modules/namespaces well at start I guess\n\nHow would that change things?\nPeople do `import _ from \"lodash\"`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gqtzJsBrMDSnAB4mU6CM1KHvjMl7TgQaGOaA6ELAwsE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>it's on us for not doing modules/namespaces well at start I guess</blockquote></mx-reply>How would that change things?<br>People do <code>import _ from \"lodash\"</code>","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gqtzJsBrMDSnAB4mU6CM1KHvjMl7TgQaGOaA6ELAwsE"}},"msgtype":"m.text"},"ts":1712762162946,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$M12BxmxjC-rmOqVS0Nbb3pjd3VOplC8YM1TUCosKEuo"},
{"content":{"body":"I am totally fine restricting this feature to strict mode","m.mentions":{},"msgtype":"m.text"},"ts":1712762170366,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gRkgFw6tZkUZVzvl4d-1WxNxGCcvuIWNfBeg5lI1jjk"},
{"content":{"body":"> <@aclaymore:matrix.org> How would that change things?\n> People do `import _ from \"lodash\"`\n\nRenaming a static import is trivial.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24M12BxmxjC-rmOqVS0Nbb3pjd3VOplC8YM1TUCosKEuo\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br />How would that change things?<br>People do <code>import _ from \"lodash\"</code></blockquote></mx-reply>Renaming a static import is trivial.","m.relates_to":{"m.in_reply_to":{"event_id":"$M12BxmxjC-rmOqVS0Nbb3pjd3VOplC8YM1TUCosKEuo"}},"msgtype":"m.text"},"ts":1712762193391,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BCvsCE7RlIYvHFNKQgw_52jusDg7uyUXNX6P-LQD5rw"},
{"content":{"body":"Sure, but popular?","m.mentions":{},"msgtype":"m.text"},"ts":1712762206538,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4GyTIeP-gXWZ1GYcil2QcvOblMZOwiKZ4TUyaliCEMA"},
{"content":{"body":"plus the `_` name is less necessary with imports","format":"org.matrix.custom.html","formatted_body":"plus the <code>_</code> name is less necessary with imports","m.mentions":{},"msgtype":"m.text"},"ts":1712762221235,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7ISqpGRRAFLHpS6puBOf-nMMXg2pT9bs6iobX8rGMjA"},
{"content":{"body":"but if all you can do is pollute the global namespace, `$` and `_` abound.","format":"org.matrix.custom.html","formatted_body":"but if all you can do is pollute the global namespace, <code>$</code> and <code>_</code> abound.","m.mentions":{},"msgtype":"m.text"},"ts":1712762240959,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$BakvN0x6t2Bk04AzrTKXoYx1ULdLMpLBMzivq2Zumm8"},
{"content":{"body":"They should be using `import { foo, bar } from ‘lodash’` anyways…","format":"org.matrix.custom.html","formatted_body":"They should be using <code data-md=\"`\">import { foo, bar } from ‘lodash’</code> anyways…","msgtype":"m.text"},"ts":1712762242122,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cbYjxw1v0wArKYShd_nj-Yt7vniSpyC6KFUECFQIIb0"},
{"content":{"body":"they should be using `import foo from 'lodash.foo'` anyways, to avoid the CVE noise :-p","format":"org.matrix.custom.html","formatted_body":"they should be using <code>import foo from 'lodash.foo'</code> anyways, to avoid the CVE noise :-p","m.mentions":{},"msgtype":"m.text"},"ts":1712762269377,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RAYAxzsT0Dq3Rf7tbh13HKPzBOXiMrYWigoFwFAaoAI"},
{"content":{"body":"nothing wrong with namespace imports","m.mentions":{},"msgtype":"m.text"},"ts":1712762280080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$im8-RM0pHYPwhPxpIEZIyfrdJTNUvi6PYJoyzJcPPMk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> vars and function params can be redeclared, but if you redeclare a let/const then it throws when you reference the binding\n\nokay well, i don't think this proposal meets the bar thus far for complicated binding handling","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$77wufVC888ofa8T6QtHxTwPAvSHzG9noQx8LpZ1q6S8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>vars and function params can be redeclared, but if you redeclare a let/const then it throws when you reference the binding</blockquote></mx-reply>okay well, i don't think this proposal meets the bar thus far for complicated binding handling","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$77wufVC888ofa8T6QtHxTwPAvSHzG9noQx8LpZ1q6S8"}},"msgtype":"m.text"},"ts":1712762283865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nb9YeY1Q905CWFCn_a1uRFk4GJwQflF_uETjPlq0Rr4"},
{"content":{"body":"> <@bakkot:matrix.org> nothing wrong with namespace imports\n\nin this case i'm complaining about big-bag-o-things packages, not namespace imports","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$im8-RM0pHYPwhPxpIEZIyfrdJTNUvi6PYJoyzJcPPMk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>nothing wrong with namespace imports</blockquote></mx-reply>in this case i'm complaining about big-bag-o-things packages, not namespace imports","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$im8-RM0pHYPwhPxpIEZIyfrdJTNUvi6PYJoyzJcPPMk"}},"msgtype":"m.text"},"ts":1712762325160,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$voxQWm_srGq0jitNfF4Hd58u2d9NX9o5lg2OqcqupIE"},
{"content":{"body":"> <@bakkot:matrix.org> nothing wrong with namespace imports\n\nToo many people mistake it for a mutable object, or use it dynamically in a way the minifier can’t eliminate _everything_ else.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24im8-RM0pHYPwhPxpIEZIyfrdJTNUvi6PYJoyzJcPPMk\">In reply to</a><a href=\"https://matrix.to/#/%40bakkot%3Amatrix.org\">@bakkot:matrix.org</a><br />nothing wrong with namespace imports</blockquote></mx-reply>Too many people mistake it for a mutable object, or use it dynamically in a way the minifier can’t eliminate <i data-md=\"_\">everything</i> else.","m.relates_to":{"m.in_reply_to":{"event_id":"$im8-RM0pHYPwhPxpIEZIyfrdJTNUvi6PYJoyzJcPPMk"}},"msgtype":"m.text"},"ts":1712762334548,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qNk195PpwBfmcdcH05dici_TFaeb6jgV9qY2BN9rIVE"},
{"content":{"body":"well don't do that","m.mentions":{},"msgtype":"m.text"},"ts":1712762368214,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$knKmVPQLgPYLOUaKJ5Xq5lC5PnM0K9H02IuUNzpCniI"},
{"content":{"body":"^ the latter is also a problem with barrel files","m.mentions":{},"msgtype":"m.text"},"ts":1712762370797,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LGdtL-k4gQ2za-06yea9WkFPFrkqatMr8i5BgIgwS68"},
{"content":{"body":"but put the blame where the problem is, not on something else","m.mentions":{},"msgtype":"m.text"},"ts":1712762381744,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z-F3RNEsBE_DOrHK9d725-rAKMcJwQBSgHHIl8fhGPg"},
{"content":{"body":"the-world-if-people-didnt-do-things-they-shouldnt-do.jpg","m.mentions":{},"msgtype":"m.text"},"ts":1712762403985,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-KilEHLSxOCLw38K4P2nLU3AU8FyxV0h2gm5PTIN_40"},
{"content":{"body":"> <@aclaymore:matrix.org> I assume other languages could cope with `_` easier because they didn't have a popular library that was commonly imported as `_`\n\nyou should see the bananas stuff I've heard about in Python","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I assume other languages could cope with <code>_</code> easier because they didn't have a popular library that was commonly imported as <code>_</code></blockquote></mx-reply>you should see the bananas stuff I've heard about in Python","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I"}},"msgtype":"m.text"},"ts":1712762498595,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE"},
{"content":{"body":"yes please! I have done very little Python and am all ears!","m.mentions":{},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","is_falling_back":true,"m.in_reply_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762531737,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$JFxK53geuYGvF4zumlvz18uCEtolAS9cjWXGOQkCcQw"},
{"content":{"body":"https://docs.djangoproject.com/en/5.0/topics/i18n/translation/","m.mentions":{},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","is_falling_back":true,"m.in_reply_to":{"event_id":"$JFxK53geuYGvF4zumlvz18uCEtolAS9cjWXGOQkCcQw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762552803,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$D8cyYQRGb5wzIWE1ygVQXoZWI_EGKc1zXyh2_4Y-75A"},
{"content":{"body":"Okay, it's not really bananas - but they're doing the same thing","m.mentions":{},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","is_falling_back":true,"m.in_reply_to":{"event_id":"$D8cyYQRGb5wzIWE1ygVQXoZWI_EGKc1zXyh2_4Y-75A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762589061,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$dInp_0WTrm15bVirune1QcTurDwussvk3UljiEO4Vaw"},
{"content":{"body":"> <@shuyuguo:matrix.org> okay well, i don't think this proposal meets the bar thus far for complicated binding handling\n\nWe don’t need the “reference the binding” restriction.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Nb9YeY1Q905CWFCn_a1uRFk4GJwQflF_uETjPlq0Rr4\">In reply to</a><a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shuyuguo:matrix.org</a><br />okay well, i don't think this proposal meets the bar thus far for complicated binding handling</blockquote></mx-reply>We don’t need the “reference the binding” restriction.","m.relates_to":{"m.in_reply_to":{"event_id":"$Nb9YeY1Q905CWFCn_a1uRFk4GJwQflF_uETjPlq0Rr4"}},"msgtype":"m.text"},"ts":1712762595924,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$u6ILLhrDAqti3yDwF44SatdkWSYzFGhpU4YZJSWQN-8"},
{"content":{"body":"that would be more palatable","m.mentions":{},"msgtype":"m.text"},"ts":1712762619483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sc0jDub5cebRn4byoyi_29yj-xb8-0imVvVuktpaMPo"},
{"content":{"body":"> <@aclaymore:matrix.org> I assume other languages could cope with `_` easier because they didn't have a popular library that was commonly imported as `_`\n\n * you should see the ~bananas stuff~ similar stuff I've seen in Python","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ah5Iej1pvju34uSEDAhwfO2bZnMbVqB_lMK63RxjR8I?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I assume other languages could cope with <code>_</code> easier because they didn't have a popular library that was commonly imported as <code>_</code></blockquote></mx-reply> * you should see the ~bananas stuff~ similar stuff I've seen in Python","m.mentions":{},"m.new_content":{"body":"you should see the ~bananas stuff~ similar stuff I've seen in Python","format":"org.matrix.custom.html","formatted_body":"you should see the ~bananas stuff~ similar stuff I've seen in Python","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712762629545,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$Fo1MvMHeq5yymI8FuVbxCa_jge8fc26w7Aj9pkYTvFc"},
{"content":{"body":"aliasing `gettext()` to `_()` is a fairly common pattern for programming languages that have an implementation of gettext","format":"org.matrix.custom.html","formatted_body":"aliasing <code>gettext()</code> to <code>_()</code> is a fairly common pattern for programming languages that have an implementation of gettext","m.mentions":{},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","is_falling_back":true,"m.in_reply_to":{"event_id":"$dInp_0WTrm15bVirune1QcTurDwussvk3UljiEO4Vaw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762685983,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$wOGCv1wfFWlTRIZ0rC5OGjMI_1CXdhTjqL8No9eRUHo"},
{"content":{"body":"I'm really interested in extractors effectively providing runtime types: https://github.com/tc39/proposal-extractors/issues/20","m.mentions":{},"msgtype":"m.text"},"ts":1712762700895,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$pN77eBhtjD-v4jDYxOHVjTTW08vuh51LJbKZoJzsXGk"},
{"content":{"body":"because the `xgettext` tool extracts strings inside `_()` out of source files into message files","format":"org.matrix.custom.html","formatted_body":"because the <code>xgettext</code> tool extracts strings inside <code>_()</code> out of source files into message files","m.mentions":{},"m.relates_to":{"event_id":"$3NDNWs6Cb7GilGkQnxqpzzbv-DK_kwg6OFgq-o_PnAE","is_falling_back":true,"m.in_reply_to":{"event_id":"$wOGCv1wfFWlTRIZ0rC5OGjMI_1CXdhTjqL8No9eRUHo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762708060,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$On0rMd7W2TnBmWK8jCCaR8wGIU1gDYdgjD3bTGFesng"},
{"content":{"body":"Justin Ridgewell: you mean bindings to `_` work in a last-write-wins manner and so there's no ambiguity?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: you mean bindings to <code>_</code> work in a last-write-wins manner and so there's no ambiguity?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1712762718203,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$aYBSsBms1vQ_absZSVBJPUt7HMtIqhcTywvrukfbn_c"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1712762732136,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rR5__std5_wI2Gp7FaGmUOWQvvLAY4tZgHuLWWKCiN4"},
{"content":{"body":" * Justin Ridgewell: you mean bindings to `_` work in a last-write-wins manner and so there's no ambiguity error?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: you mean bindings to <code>_</code> work in a last-write-wins manner and so there's no ambiguity error?","m.mentions":{},"m.new_content":{"body":"Justin Ridgewell: you mean bindings to `_` work in a last-write-wins manner and so there's no ambiguity error?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: you mean bindings to <code>_</code> work in a last-write-wins manner and so there's no ambiguity error?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aYBSsBms1vQ_absZSVBJPUt7HMtIqhcTywvrukfbn_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712762732198,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$eIWHw5cmDDW5VYLZxPUnlhBdqFtugpC6_lM2TdjUwMY"},
{"content":{"body":"It’s just a regular binding, but it can be redeclared.","msgtype":"m.text"},"ts":1712762755540,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LdeXZzNz_0IxtaMCHtuNmXdWATAM_etbpMvoPMXRjWI"},
{"content":{"body":"I like rust's thing where a redeclaration introduces a new scope which shadows the previous one","m.mentions":{},"msgtype":"m.text"},"ts":1712762783883,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pl_4Dj_tBHfZci14yvRFqQnqAa0DfrjPf5BJXPkWNlo"},
{"content":{"body":"so closures which capture the old one still work","m.mentions":{},"msgtype":"m.text"},"ts":1712762793004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FXsTAWYWj9fMK2DxC-slScmA1wedNO3cnjPc5b-yfvs"},
{"content":{"body":"at least I assume that's how it works, I haven't actually checked","m.mentions":{},"msgtype":"m.text"},"ts":1712762799962,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1SmDs1EFAaFZWd80nIss_lOD-d5EMUTTVX4VO-xhp5c"},
{"content":{"body":"now that I'm saying this I have no idea why I believe it","m.mentions":{},"msgtype":"m.text"},"ts":1712762807673,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Egzbn2lKt7TOmlxA062qWVQUa7-HUEb7hjD5FBlQKVY"},
{"content":{"body":"With extractors, you can have\n```\nfunction foo(String(s), Number(n)) { ... }\n```\nand be sure of `s` being a string and `n` being a number.","format":"org.matrix.custom.html","formatted_body":"<p>With extractors, you can have</p>\n<pre><code>function foo(String(s), Number(n)) { ... }\n</code></pre>\n<p>and be sure of <code>s</code> being a string and <code>n</code> being a number.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712762818989,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$0Y8oqQiPm6gvxp26LoHYWUX-anUazvOBykWKIc178RQ"},
{"content":{"body":"I think that's right","m.mentions":{},"m.relates_to":{"event_id":"$1SmDs1EFAaFZWd80nIss_lOD-d5EMUTTVX4VO-xhp5c","is_falling_back":true,"m.in_reply_to":{"event_id":"$1SmDs1EFAaFZWd80nIss_lOD-d5EMUTTVX4VO-xhp5c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712762834323,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$w99k-ebBo23o9-jUbMjSMbLhIYG2fcPlAcfWY1zYkMM"},
{"content":{"body":"i think you'd need `String(const s)` etc to make the binding tho?","format":"org.matrix.custom.html","formatted_body":"i think you'd need <code>String(const s)</code> etc to make the binding tho?","m.mentions":{},"msgtype":"m.text"},"ts":1712762869124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NmNlLe8uA-caf-mQGuYy5BQijFqOSoSzrFyu7RafKEE"},
{"content":{"body":"Nope.","m.mentions":{},"msgtype":"m.text"},"ts":1712762874776,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$lKdIVw7LKZry19SQkDKNhM6PeK9fRr8rgQHJk-57z8Y"},
{"content":{"body":"> <@bakkot:matrix.org> so closures which capture the old one still work\n\nThe closure would have to move the value in. I’m not sure it works the way you think.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24FXsTAWYWj9fMK2DxC-slScmA1wedNO3cnjPc5b-yfvs\">In reply to</a><a href=\"https://matrix.to/#/%40bakkot%3Amatrix.org\">@bakkot:matrix.org</a><br />so closures which capture the old one still work</blockquote></mx-reply>The closure would have to move the value in. I’m not sure it works the way you think.","m.relates_to":{"m.in_reply_to":{"event_id":"$FXsTAWYWj9fMK2DxC-slScmA1wedNO3cnjPc5b-yfvs"}},"msgtype":"m.text"},"ts":1712762878864,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rFx_IhOYCGv9WTgu3y9B5DwJvwoLR4SdQl4Y_Eyb8fA"},
{"content":{"body":"@eemeli:mozilla.org what `Symbol.customMatcher` implementation are you thinking of for the built-in constructors?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40eemeli%3Amozilla.org\">@eemeli</a> what <code data-md=\"`\">Symbol.customMatcher</code> implementation are you thinking of for the built-in constructors?","msgtype":"m.text"},"ts":1712762943501,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$szdiYFbIeObfgwAOpme1YAuB1DM_LVo-isNPMIipcV0"},
{"content":{"body":"those are in the pattern matching proposal, fwiw","m.mentions":{},"msgtype":"m.text"},"ts":1712763006606,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ltyfdLdHSBQUD8gpoawYJ3ZIG1Qx4rWGJXQUxe3ZcNM"},
{"content":{"body":" * those are already in the pattern matching proposal, fwiw","m.mentions":{},"m.new_content":{"body":"those are already in the pattern matching proposal, fwiw","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ltyfdLdHSBQUD8gpoawYJ3ZIG1Qx4rWGJXQUxe3ZcNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763012143,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aTqayFwFJ6QcKiELrtd0MQ4gTAbpeLqnM_a32np3LuE"},
{"content":{"body":" * those are already in the pattern matching proposal, fwiw, with brand checking semantics","m.mentions":{},"m.new_content":{"body":"those are already in the pattern matching proposal, fwiw, with brand checking semantics","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ltyfdLdHSBQUD8gpoawYJ3ZIG1Qx4rWGJXQUxe3ZcNM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763028214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gKY9cV4QBWHeAfV2STXLrRmCzd_ip1CGJ43AEEcncpQ"},
{"content":{"body":"... brand checking or typeof?","m.mentions":{},"msgtype":"m.text"},"ts":1712763051041,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iIufsy9PvUyLXKzfap6DtVHJKJBGc70-yDrvzFhTE6I"},
{"content":{"body":"Something like\n```\nclass Number {\n  ...\n  [Symbo.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Something like</p>\n<pre><code>class Number {\n  ...\n  [Symbo.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712763056316,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$6DC2RIo_kbs0beRyeZKXZ8RcGxsl2Eu5DyYGC4GphCo"},
{"content":{"body":" * Something like\n\n```\nclass Number {\n  ...\n  [Symbol.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Something like</p>\n<pre><code>class Number {\n  ...\n  [Symbol.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Something like\n\n```\nclass Number {\n  ...\n  [Symbol.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Something like</p>\n<pre><code>class Number {\n  ...\n  [Symbol.customMatcher](subject) {\n    if (typeof subject === 'number') return [subject];\n    if (subject instanceof Number) return [Number(subject)];\n    return false;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6DC2RIo_kbs0beRyeZKXZ8RcGxsl2Eu5DyYGC4GphCo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763081465,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$7MBEItKpTVEGrDhVdu29syQuU-JTyD9rXSBjPWarpQI"},
{"content":{"body":"I am categorically opposed to accepting boxed primitives here or anywhere","m.mentions":{},"msgtype":"m.text"},"ts":1712763093154,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x1Bg_beLdDac78TFKF-ApQmE_eA_zieuIlxvMfQ4bKM"},
{"content":{"body":"it'd check for the internal slot of a Number instead of instanceof, but otherwise yes","m.mentions":{},"msgtype":"m.text"},"ts":1712763098386,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$00D-dGD4C8sXyY3Z5kTvYYC9k1kS5o_hWZHWPpjwa-s"},
{"content":{"body":"> <@jridgewell:matrix.org> The closure would have to move the value in. I’m not sure it works the way you think.\n\nActually you can’t reference `_` in a closure (I’ve never tried before): https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ab28412522dba608f6964c9a11ce600f","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rFx_IhOYCGv9WTgu3y9B5DwJvwoLR4SdQl4Y_Eyb8fA\">In reply to</a><a href=\"https://matrix.to/#/%40jridgewell%3Amatrix.org\">@jridgewell:matrix.org</a><br />The closure would have to move the value in. I’m not sure it works the way you think.</blockquote></mx-reply>Actually you can’t reference <code data-md=\"`\">_</code> in a closure (I’ve never tried before): https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=ab28412522dba608f6964c9a11ce600f","m.relates_to":{"m.in_reply_to":{"event_id":"$rFx_IhOYCGv9WTgu3y9B5DwJvwoLR4SdQl4Y_Eyb8fA"}},"msgtype":"m.text"},"ts":1712763112609,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-D_W0ymciQF_69jwe4pJgYDV6Ea1ztatjLFuo3b5Y8g"},
{"content":{"body":"> <@bakkot:matrix.org> I am categorically opposed to accepting boxed primitives here or anywhere\n\nit doesn't make any sense to reject boxed primitives if people are going to be referencing the constructor","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x1Bg_beLdDac78TFKF-ApQmE_eA_zieuIlxvMfQ4bKM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I am categorically opposed to accepting boxed primitives here or anywhere</blockquote></mx-reply>it doesn't make any sense to reject boxed primitives if people are going to be referencing the constructor","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x1Bg_beLdDac78TFKF-ApQmE_eA_zieuIlxvMfQ4bKM"}},"msgtype":"m.text"},"ts":1712763138124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6gpewsj6U-36oKJHy-f-gIdzV99s9XjhXkXz9SnSkvc"},
{"content":{"body":"i don't expect it to come up in practice either way tho, tbf","m.mentions":{},"msgtype":"m.text"},"ts":1712763147053,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$A1jvjWQBZW-0lrTLejB_hgBQ6a9wLN-E80Tvz1mFmIQ"},
{"content":{"body":"> <@bakkot:matrix.org> I am categorically opposed to accepting boxed primitives here or anywhere\n\n * it doesn't make any sense to reject boxed primitives if people are going to be referencing the _constructor_","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x1Bg_beLdDac78TFKF-ApQmE_eA_zieuIlxvMfQ4bKM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I am categorically opposed to accepting boxed primitives here or anywhere</blockquote></mx-reply> * it doesn't make any sense to reject boxed primitives if people are going to be referencing the <em>constructor</em>","m.mentions":{},"m.new_content":{"body":"it doesn't make any sense to reject boxed primitives if people are going to be referencing the _constructor_","format":"org.matrix.custom.html","formatted_body":"it doesn't make any sense to reject boxed primitives if people are going to be referencing the <em>constructor</em>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6gpewsj6U-36oKJHy-f-gIdzV99s9XjhXkXz9SnSkvc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763158354,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iD1VKrP3hRJ9WW6DfotR6rcCYP66QMzAeIkH4LQ7fcY"},
{"content":{"body":"sure it does, `Number(foo)` doesn't produce a boxed primitive","format":"org.matrix.custom.html","formatted_body":"sure it does, <code>Number(foo)</code> doesn't produce a boxed primitive","m.mentions":{},"msgtype":"m.text"},"ts":1712763161875,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VAmYN-TtZ9P7vuXK4Y2UOYSKUTmbbVmsC7r0131Ipf4"},
{"content":{"body":"I don't care about boxed primitives tbh.","m.mentions":{},"msgtype":"m.text"},"ts":1712763164217,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$-p_2xhGP1rxyECkOuyFUEmYKGgzGs0T6U-mQJ3IvvnU"},
{"content":{"body":"it's a constructor. `new Number(foo)` does","format":"org.matrix.custom.html","formatted_body":"it's a constructor. <code>new Number(foo)</code> does","m.mentions":{},"msgtype":"m.text"},"ts":1712763175952,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nJWMVzJULMRWcCVGK4BGY57BBIH7EmepXsyOGIZ3EpQ"},
{"content":{"body":"if the extractor used `new` I would agree with you","format":"org.matrix.custom.html","formatted_body":"if the extractor used <code>new</code> I would agree with you","m.mentions":{},"msgtype":"m.text"},"ts":1712763185594,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XwPBdu1eP2tUg31MX48zWaeEntbvtRI2BgtkhMirp9Y"},
{"content":{"body":"but it doesn't","m.mentions":{},"msgtype":"m.text"},"ts":1712763188081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nztaiW1odVqBlurPLtsnfWGQey8U04uBimwdiL5maQA"},
{"content":{"body":"`const new Number(n) = 5`","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">const new Number(n) = 5</code>","msgtype":"m.text"},"ts":1712763195844,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2ueMd8Xw6KXGK4-c4FB6znvZT9rN5lAaBADixRRoNDo"},
{"content":{"body":"so you want the requirement to be `new UserClass()` to match a user class?","format":"org.matrix.custom.html","formatted_body":"so you want the requirement to be <code>new UserClass()</code> to match a user class?","m.mentions":{},"msgtype":"m.text"},"ts":1712763203096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Nxr9RcBz9MpJXOSLJbEWYcnZ_wogfkLyAaBp2gdSNKc"},
{"content":{"body":" * so you want the requirement to be `new UserClass` as a pattern to match a user class?","format":"org.matrix.custom.html","formatted_body":" * so you want the requirement to be <code>new UserClass</code> as a pattern to match a user class?","m.mentions":{},"m.new_content":{"body":"so you want the requirement to be `new UserClass` as a pattern to match a user class?","format":"org.matrix.custom.html","formatted_body":"so you want the requirement to be <code>new UserClass</code> as a pattern to match a user class?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Nxr9RcBz9MpJXOSLJbEWYcnZ_wogfkLyAaBp2gdSNKc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763215333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VoK48IBS1dTsRBNqItwYsMGgxAlchQ7cGoHBumpbSBg"},
{"content":{"body":"`new Number` is not a valid ExtractorMemberExpression.","format":"org.matrix.custom.html","formatted_body":"<code>new Number</code> is not a valid ExtractorMemberExpression.","m.mentions":{},"msgtype":"m.text"},"ts":1712763222655,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$eg3mKavuqvSnXtMliuGu7gL_5OeVJtsfjggXCmTC_Lc"},
{"content":{"body":"@eemeli:mozilla.org sorry I forgot the Kappa","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40eemeli%3Amozilla.org\">@eemeli</a> sorry I forgot the Kappa","msgtype":"m.text"},"ts":1712763250610,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3YMdqMxwAJR9ooIQHhQq6t8kqzyh0yBMNdcQ8hHULU0"},
{"content":{"body":"iow, a pattern of `Number` and a pattern of `UserClass` should work the same - either both require new or neither does","format":"org.matrix.custom.html","formatted_body":"iow, a pattern of <code>Number</code> and a pattern of <code>UserClass</code> should work the same - either both require new or neither does","m.mentions":{},"msgtype":"m.text"},"ts":1712763253495,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KQwC_fSzKXE2WuUygdhuA6-LX6uDBo_CRm6HCg8lmdk"},
{"content":{"body":"I'll go back to TDZ","msgtype":"m.text"},"ts":1712763256329,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yIdJMj8EFvslVQqb1ojBXVLZLHkiABye5MoA1Lsz6mw"},
{"content":{"body":"and i don't see any argument for requiring `new` on non-primitive constructors","format":"org.matrix.custom.html","formatted_body":"and i don't see any argument for requiring <code>new</code> on non-primitive constructors","m.mentions":{},"msgtype":"m.text"},"ts":1712763265593,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MfUgfFDKbMDruPWEWmmvQ7Ed4Vl4XVl0VJFvendhOYQ"},
{"content":{"body":"`UserClass(foo)` should throw or either behave the same as `new UserClass(foo)`, so it's fine for `let UserClass(foo) = bar` to be the extractor pattern","format":"org.matrix.custom.html","formatted_body":"<code>UserClass(foo)</code> should throw or either behave the same as <code>new UserClass(foo)</code>, so it's fine for <code>let UserClass(foo) = bar</code> to be the extractor pattern","m.mentions":{},"msgtype":"m.text"},"ts":1712763290469,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B9c_WNEz9V6bE1586ffbZqJO67AQjuAATAeyrFCLZOg"},
{"content":{"body":"but `Number` doesn't work like that, so we can't use that as precedent for how `Number` should work","format":"org.matrix.custom.html","formatted_body":"but <code>Number</code> doesn't work like that, so we can't use that as precedent for how <code>Number</code> should work","m.mentions":{},"msgtype":"m.text"},"ts":1712763303442,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YyXRcuEvEzfopMTGSWI5vOWA5Iv2d96ICyEvhJp_XAo"},
{"content":{"body":"not if it's an ES5 class","m.mentions":{},"msgtype":"m.text"},"ts":1712763321689,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DyPkGWPYVWx6sMursP_dU_j5Usl8zLlP0WYSQu-q02M"},
{"content":{"body":"and many predicates are constructible (because they're not written as arrows or concise methods)","m.mentions":{},"msgtype":"m.text"},"ts":1712763340625,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CbQju7PhoKS-VFAYLTWJrgilKuxkUUUi5nvXFADxGLw"},
{"content":{"body":" * and many predicates are technically constructible (because they're not written as arrows or concise methods)","m.mentions":{},"m.new_content":{"body":"and many predicates are technically constructible (because they're not written as arrows or concise methods)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CbQju7PhoKS-VFAYLTWJrgilKuxkUUUi5nvXFADxGLw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763354916,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3Qsre2ln8LClx56qh-5It-WInaY7S_m6918RsBsCkDg"},
{"content":{"body":" * and many predicates are technically constructible (because they're not written as arrows or concise methods etc)","m.mentions":{},"m.new_content":{"body":"and many predicates are technically constructible (because they're not written as arrows or concise methods etc)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CbQju7PhoKS-VFAYLTWJrgilKuxkUUUi5nvXFADxGLw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763361426,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XAA_YTMvDoYsb_EWnC-tOsLqarI2oRCc4ct3PxAqfww"},
{"content":{"body":"I don't think \"this is technically constructible\" ought to guide our design of these features","m.mentions":{},"msgtype":"m.text"},"ts":1712763371827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UKRLgz13zZmN7DxHNQlzEhk-NbZNGZgxIOgw5HI4pJ0"},
{"content":{"body":"this applies to user-defined predicates and also to `Number`","format":"org.matrix.custom.html","formatted_body":"this applies to user-defined predicates and also to <code>Number</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712763385786,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qGGkJ9AN7s6ewSNVpG78SPHu5bCZ2TVMDQj3PQlECNQ"},
{"content":{"body":"ok. but we don't actually have a clear thing in JS that divides constructors and functions, so PascalCase is the universal convention that JS devs use for that","m.mentions":{},"msgtype":"m.text"},"ts":1712763389518,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_TqG8liQWgUMba3GJDvDHhTzwMP2zKQfKjytumLph6c"},
{"content":{"body":"so, designing for that universal expectation, Number would (and does) look like a constructor just like UserClass or Set","m.mentions":{},"msgtype":"m.text"},"ts":1712763434488,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kOFbhPXhQGwaEz4hDYvtjCVZabtzVQ_zBQ2-6bEbnrQ"},
{"content":{"body":"users should not regard Number as being constructible and we should not design the feature to suggest that it is","m.mentions":{},"msgtype":"m.text"},"ts":1712763436747,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qnx3RjPxQIMvwco7YMLQWvwOhCsgDGZ7-HOpzNyQLJk"},
{"content":{"body":"it is true that `Number` is technically constructible but I don't care about this fact, and we should not promote it to people's attention, nor make features which support it","format":"org.matrix.custom.html","formatted_body":"it is true that <code>Number</code> is technically constructible but I don't care about this fact, and we should not promote it to people's attention, nor make features which support it","m.mentions":{},"msgtype":"m.text"},"ts":1712763460205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MV68feZKSDqGiFqyvFz4roTBGAu8QwREXiAtEawQLAw"},
{"content":{"body":"i do not believe that it accepting boxed primitives - and unboxing them, ftr - is going to encourage usage of it. i strongly believe the opposite","m.mentions":{},"msgtype":"m.text"},"ts":1712763512848,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vHSWlFuA-6nGConDcRQbVh-A2nhmlmPtCX1S0ETiR-Q"},
{"content":{"body":"> <@jridgewell:matrix.org> Actually you can’t reference `_` in a closure (I’ve never tried before): https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=ab28412522dba608f6964c9a11ce600f\n\nAnyways, the value is _moved_ into the closure when you create it, so it’s not redeclaring a scope: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=0be61d281692f23d745632011a77a86b","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-D_W0ymciQF_69jwe4pJgYDV6Ea1ztatjLFuo3b5Y8g\">In reply to</a><a href=\"https://matrix.to/#/%40jridgewell%3Amatrix.org\">@jridgewell:matrix.org</a><br />Actually you can’t reference <code data-md=\"`\">_</code> in a closure (I’ve never tried before): https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=ab28412522dba608f6964c9a11ce600f</blockquote></mx-reply>Anyways, the value is <i data-md=\"_\">moved</i> into the closure when you create it, so it’s not redeclaring a scope: https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=0be61d281692f23d745632011a77a86b","m.relates_to":{"m.in_reply_to":{"event_id":"$-D_W0ymciQF_69jwe4pJgYDV6Ea1ztatjLFuo3b5Y8g"}},"msgtype":"m.text"},"ts":1712763516177,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ILLHXdBLwNVTKy7siSia8ovtEKWkTqhIoWszK57Ur8s"},
{"content":{"body":"> <@ljharb:matrix.org> i do not believe that it accepting boxed primitives - and unboxing them, ftr - is going to encourage usage of it. i strongly believe the opposite\n\n... say more?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vHSWlFuA-6nGConDcRQbVh-A2nhmlmPtCX1S0ETiR-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i do not believe that it accepting boxed primitives - and unboxing them, ftr - is going to encourage usage of it. i strongly believe the opposite</blockquote></mx-reply>... say more?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vHSWlFuA-6nGConDcRQbVh-A2nhmlmPtCX1S0ETiR-Q"}},"msgtype":"m.text"},"ts":1712763525662,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UFgzX71_wBaVQvNsgaL8b-yOnna7lSJiO6SXALsCjv4"},
{"content":{"body":"certainly no new sites of *producing* a boxed primitive should ever be added","format":"org.matrix.custom.html","formatted_body":"certainly no new sites of <em>producing</em> a boxed primitive should ever be added","m.mentions":{},"msgtype":"m.text"},"ts":1712763539429,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LdMog10WkhcuN_Tt_qA7M9S3__6pVAltITWnjZnOaC0"},
{"content":{"body":"if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n\njust like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array","m.mentions":{},"msgtype":"m.text"},"ts":1712763587956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n84BnurUkMoDTHa1oDnAvxTDbKD4crdj8B8tN-FfWC0"},
{"content":{"body":"I thought V8 optimized array destructuring","m.mentions":{},"msgtype":"m.text"},"ts":1712763592031,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vhjZzriLiKmfqkOp6DsNWTY3ukdlc6p-CXPJAB6AgDM"},
{"content":{"body":" * if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n\njust like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn't throw or fail when you have a boxed primitive. we should just paper over it.","m.mentions":{},"m.new_content":{"body":"if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n\njust like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn't throw or fail when you have a boxed primitive. we should just paper over it.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n84BnurUkMoDTHa1oDnAvxTDbKD4crdj8B8tN-FfWC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763598027,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z7TEYeqA0hGnYcLtynH5Km4mwZmQR5Bc5J2zYc9es1g"},
{"content":{"body":" * if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n\njust like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn't throw or fail when you have a boxed primitive. we should just paper over it and get you into \"normal primitives\" as fast as possible.","m.mentions":{},"m.new_content":{"body":"if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n\njust like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn't throw or fail when you have a boxed primitive. we should just paper over it and get you into \"normal primitives\" as fast as possible.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$n84BnurUkMoDTHa1oDnAvxTDbKD4crdj8B8tN-FfWC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763616406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7kD1OSpVXYSpcln5zx8VvW31S91meiMBcXlCUL_hYN8"},
{"content":{"body":"> <@ljharb:matrix.org> if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.\n> \n> just like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn't throw or fail when you have a boxed primitive. we should just paper over it and get you into \"normal primitives\" as fast as possible.\n\nwe don't throw when we have a sparse array because it would require a special case to do so","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n84BnurUkMoDTHa1oDnAvxTDbKD4crdj8B8tN-FfWC0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if you want to use pattern matching, with the current semantics, even if you do the very unlikely thing of making a boxed primitive, you will as rapidly as possible unbox it.<br/><br/>just like how sparse arrays are terribad, and all new stuff just papers over that by making them dense, and we do NOT throw when you have a sparse array, we shouldn&#39;t throw or fail when you have a boxed primitive. we should just paper over it and get you into &quot;normal primitives&quot; as fast as possible.</blockquote></mx-reply>we don't throw when we have a sparse array because it would require a special case to do so","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n84BnurUkMoDTHa1oDnAvxTDbKD4crdj8B8tN-FfWC0"}},"msgtype":"m.text"},"ts":1712763620394,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bUJ7zCZu4RW6E9-GTY_0QAlsJ9-rBiDdaKLW22JxCQU"},
{"content":{"body":"> <@littledan:matrix.org> I thought V8 optimized array destructuring\n\nI remember they published an article about it several years ago","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vhjZzriLiKmfqkOp6DsNWTY3ukdlc6p-CXPJAB6AgDM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I thought V8 optimized array destructuring</blockquote></mx-reply>I remember they published an article about it several years ago","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vhjZzriLiKmfqkOp6DsNWTY3ukdlc6p-CXPJAB6AgDM"}},"msgtype":"m.text"},"ts":1712763623293,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$rj6JzOaVs57eMK81zW-v-HCZY8ugt3lipCLel2_Ps_o"},
{"content":{"body":"but here you're suggesting we add a special case to _support_ the thing that people should not encounter","format":"org.matrix.custom.html","formatted_body":"but here you're suggesting we add a special case to <em>support</em> the thing that people should not encounter","m.mentions":{},"msgtype":"m.text"},"ts":1712763639111,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PC030Ty_vr-9SClzTxav4OsN3519g8oTkcTXo120E40"},
{"content":{"body":"I want to not do that","m.mentions":{},"msgtype":"m.text"},"ts":1712763643197,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iRkAtExwz1WNNZg7K23JYS7q5R9qW_Ol4IM8TQpvXSI"},
{"content":{"body":"we have to avoid saying \"stage n concern\" because of the ambiguity between this being a thing to resolve before reaching stage n, or only once stage n is reached","m.mentions":{},"msgtype":"m.text"},"ts":1712763645728,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wfw3xqByh4I__jL0hb1FBugSeCQWdUzlmwE8i7NeDmc"},
{"content":{"body":"if user is passing around a boxed primitive, they should expect to get an error, not for the language to accomadate them","m.mentions":{},"msgtype":"m.text"},"ts":1712763669302,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mHmkPmP98wKhTuVvqjP38EfgUfn7vDWtoK4Giy6-o6M"},
{"content":{"body":"p sure the motivation was more \"because that hurts people to no benefit\" as opposed to \"we don't want a special case in the spec/impl\"","m.mentions":{},"msgtype":"m.text"},"ts":1712763677549,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HFL33mUEUpZ58mQlo0r6RqWDKiluwonKXKiakm_JW1o"},
{"content":{"body":" * if user is passing around a boxed primitive, they should expect to get an error, not for the language to accommodate them","m.mentions":{},"m.new_content":{"body":"if user is passing around a boxed primitive, they should expect to get an error, not for the language to accommodate them","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mHmkPmP98wKhTuVvqjP38EfgUfn7vDWtoK4Giy6-o6M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763677555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nA3z7tdUdOzcionEXDJ-MYll8rR7G-W5RBzeAy4KEbw"},
{"content":{"body":"I do not think that's right, but in any case, boxed primitives are more different from primitives than holey arrays are from dense arrays","m.mentions":{},"msgtype":"m.text"},"ts":1712763801590,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ce-LK0j8wMuImNN3XUOLiiKES9XVuFRiCo1Kmv4DYyc"},
{"content":{"body":"> <@littledan:matrix.org> I thought V8 optimized array destructuring\n\nIt’s still not nearly as fast as regular property destrutcuring","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vhjZzriLiKmfqkOp6DsNWTY3ukdlc6p-CXPJAB6AgDM\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />I thought V8 optimized array destructuring</blockquote></mx-reply>It’s still not nearly as fast as regular property destrutcuring","m.relates_to":{"m.in_reply_to":{"event_id":"$vhjZzriLiKmfqkOp6DsNWTY3ukdlc6p-CXPJAB6AgDM"}},"msgtype":"m.text"},"ts":1712763906871,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TxeQmm7D2wHS7Z2DhJAdutDOWYiT2dZX09tZ8Nf88DI"},
{"content":{"body":"boxed primitives exist. if they are used, then providing encouragement and ergonomics for quickly getting them unboxed is good. if they are not used, then accepting them provides no such encouragement.","m.mentions":{},"msgtype":"m.text"},"ts":1712763907739,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LV4taRLCgG9y-2dv6QC6jAMMqa7a7hWZH9UR9BBLXEs"},
{"content":{"body":"> <@haxjs:matrix.org> I remember they published an article about it several years ago\n\nhttps://docs.google.com/document/d/1hWb-lQW4NSG9yRpyyiAA_9Ktytd5lypLnVLhPX9vamE/edit#heading=h.9ss45aibqpw2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rj6JzOaVs57eMK81zW-v-HCZY8ugt3lipCLel2_Ps_o?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I remember they published an article about it several years ago</blockquote></mx-reply>https://docs.google.com/document/d/1hWb-lQW4NSG9yRpyyiAA_9Ktytd5lypLnVLhPX9vamE/edit#heading=h.9ss45aibqpw2","m.mentions":{"user_ids":["@haxjs:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rj6JzOaVs57eMK81zW-v-HCZY8ugt3lipCLel2_Ps_o"}},"msgtype":"m.text"},"ts":1712763938603,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9Ieac55y__cY1IbXlJD0THpi4eOeUIjrMZS1qRJaul8"},
{"content":{"body":"counterpoint: if they are used, _discouraging their use_ is good","format":"org.matrix.custom.html","formatted_body":"counterpoint: if they are used, <em>discouraging their use</em> is good","m.mentions":{},"msgtype":"m.text"},"ts":1712763963143,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ikgDLG8quytOdJafzEmrP1pdd5rUj3L3Agkv57Ka1ls"},
{"content":{"body":"no code should accept them","m.mentions":{},"msgtype":"m.text"},"ts":1712763970245,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UdmrCVWimt-Ui9_CJBYZ5Rdh-kXIdgBV4NHKrchpGZY"},
{"content":{"body":"(unless it accepts other bjects, of course)","m.mentions":{},"msgtype":"m.text"},"ts":1712763980449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J1LWNrhwJ8xQ6oEaL688ArShN1Jh2YW-TPESF9R39JI"},
{"content":{"body":" * (unless it accepts other objects, of course)","m.mentions":{},"m.new_content":{"body":"(unless it accepts other objects, of course)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J1LWNrhwJ8xQ6oEaL688ArShN1Jh2YW-TPESF9R39JI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712763982764,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_fnRHVOxvOG81CK-Xcfs81v21PuJsNeiaMZd40qtIi4"},
{"content":{"body":"I am not looking forward to parsing `foo(bar(baz)) => 0`","format":"org.matrix.custom.html","formatted_body":"I am not looking forward to parsing <code>foo(bar(baz)) =&gt; 0</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712764201268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IgGl_ig-FxIEP-0qSM863V7JxEUFXXWkVslbZXCxY0Y"},
{"content":{"body":"extractors do a good job addressing one of the points that Yulia raised a while ago, about the availability of parallel constructs inside and outside of pattern matching.","m.mentions":{},"msgtype":"m.text"},"ts":1712764226393,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B1_kx5Pf3wPK-hYZiPdHhsNuKakgUuq2BiD00QdXFWI"},
{"content":{"body":" * I am not looking forward to parsing `(bar(baz)) => 0`","format":"org.matrix.custom.html","formatted_body":" * I am not looking forward to parsing <code>(bar(baz)) =&gt; 0</code>","m.mentions":{},"m.new_content":{"body":"I am not looking forward to parsing `(bar(baz)) => 0`","format":"org.matrix.custom.html","formatted_body":"I am not looking forward to parsing <code>(bar(baz)) =&gt; 0</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IgGl_ig-FxIEP-0qSM863V7JxEUFXXWkVslbZXCxY0Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712764235142,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JkmmWwf22XGYokrstikS_Xs_oBnGws8uOdxyiBetEDc"},
{"content":{"body":"but I guess it's not that much worse than `({ bar }) => 0`","format":"org.matrix.custom.html","formatted_body":"but I guess it's not that much worse than <code>({ bar }) =&gt; 0</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712764241583,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cxiEFlyoA0r9LpXUADLnTrelAbGXqmoC60DCw7AT9DY"},
{"content":{"body":"and `async(bar(baz)) => 0` of course","format":"org.matrix.custom.html","formatted_body":"and <code>async(bar(baz)) =&gt; 0</code> of course","m.mentions":{},"msgtype":"m.text"},"ts":1712764267274,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uLo89cMrb1fX_iL1ZaDCEVM1wbS7f2jjGG_0Vf3Vx1c"},
{"content":{"body":"yeah by 2017 we already got up to a certain bar of annoying-to-parse, and my feeling was that extractors didn't really add anything that was so bad... but non-backtracking parsers will have some more complexity in their error tracking with this","m.mentions":{},"msgtype":"m.text"},"ts":1712764326915,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z5ewOmY_EeNgy8p8lsEAZW05u7AAWX8cfdNEGc2BjDY"},
{"content":{"body":" * yeah by 2017 we already got up to a certain bar of annoying-to-parse, and my feeling was that extractors didn't really add anything that was so much more bad... but non-backtracking parsers will have some more complexity in their error tracking with this","m.mentions":{},"m.new_content":{"body":"yeah by 2017 we already got up to a certain bar of annoying-to-parse, and my feeling was that extractors didn't really add anything that was so much more bad... but non-backtracking parsers will have some more complexity in their error tracking with this","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$z5ewOmY_EeNgy8p8lsEAZW05u7AAWX8cfdNEGc2BjDY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712764337478,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$704114J1RWXZaPNQplEXnLT9AeWChrKtOFCKECS2xzI"},
{"content":{"body":"it is not that much worse, it's just adding more complexity to what is already the single most complex-to-parse construct in the language","m.mentions":{},"msgtype":"m.text"},"ts":1712764414181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KyQVNPOz1iMY83JCqdYcpVGWjumnOQ0X21BV_T4yWD4"},
{"content":{"body":"the extractor has to be an identifier or a member access on an extractor, right?","msgtype":"m.text"},"ts":1712764480825,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zOllyg-qotzDalqE3IMORJmRPmfAXOY4ZT9GA7vb7VU"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1712764520970,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mQ0uuSLdOHKjG8Ejsm8OFioIRgM4PKR8TbFCz8IPTGA"},
{"content":{"body":"It can also be e.g. `super`.","format":"org.matrix.custom.html","formatted_body":"It can also be e.g. <code>super</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712764522498,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$3jyp3cMq0iJzOPHC4W5NAdKklKQWeZTB2Cm9B7rcVjc"},
{"content":{"body":"https://tc39.es/proposal-extractors/#prod-ExtractorMemberExpression","m.mentions":{},"msgtype":"m.text"},"ts":1712764524763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0hmrRBJgK1WNx4UnORNKQbJpjUpSCqPuSQLOMaIclME"},
{"content":{"body":"Ah, not `super`, just `super.foo` or `this`.","format":"org.matrix.custom.html","formatted_body":"Ah, not <code>super</code>, just <code>super.foo</code> or <code>this</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712764551140,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$LxIp4dLcAXFecJzJbKpStwgFYmCwv5WMPXjIv-kB7Kg"},
{"content":{"body":"i mean in general i agree with george but i got bad news for him on the understandability of JS wrt user code today","m.mentions":{},"msgtype":"m.text"},"ts":1712764686590,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HLHDHaIFO9_LxpqW48lCyzhlvqjc7lyNEe6p6d9Hv74"},
{"content":{"body":"That's because it's all minified on the web","m.mentions":{},"msgtype":"m.text"},"ts":1712764916854,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YaVSxk-SvXi8hYwGVw9Z8_K9sjh7PHr26ahcLmuUO5w"},
{"content":{"body":"> <@jridgewell:matrix.org> @rbuckton:matrix.org Why do we lose assignment patterns with `_`?\n\nBecause you can already write `[_, _] = ar` today and it has a meaning.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$p_rwS6IYmxEOZyLjF_Qzl-vqOvvwReJAyz8aHqqnPjw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton</a> Why do we lose assignment patterns with <code data-md=\"`\">_</code>?</blockquote></mx-reply>Because you can already write <code>[_, _] = ar</code> today and it has a meaning.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$p_rwS6IYmxEOZyLjF_Qzl-vqOvvwReJAyz8aHqqnPjw"}},"msgtype":"m.text"},"ts":1712765046300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OFP4yPc7In1U8PaWiAnX1TyfvyunZ60ro-Nv_zThjAA"},
{"content":{"body":"Do other engines think that throwing for each failed match seems like it would be way too slow?","m.mentions":{},"msgtype":"m.text"},"ts":1712765063087,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA"},
{"content":{"body":"> <@keith_miller:matrix.org> Do other engines think that throwing for each failed match seems like it would be way too slow?\n\nI think the concern was more around the iteration protocol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Do other engines think that throwing for each failed match seems like it would be way too slow?</blockquote></mx-reply>I think the concern was more around the iteration protocol","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA"}},"msgtype":"m.text"},"ts":1712765074231,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RAwbFCp_qSv8VhOANA0OO8_UW4DTUZe0Ll_JViiEo1A"},
{"content":{"body":"Or did I just misunderstand the proposal?","m.mentions":{},"msgtype":"m.text"},"ts":1712765076727,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$IzSWLyVCER0ArcL6nt6AOXFhALaZOC3_E6LE07dYSvo"},
{"content":{"body":"also engines don't have to actually do the throw","m.mentions":{},"msgtype":"m.text"},"ts":1712765093643,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WE6p5hz1Pe2foSiDSwNc2JIt2F3uM3wgl_Cy8PXnQVo"},
{"content":{"body":"> <@rbuckton:matrix.org> Because you can already write `[_, _] = ar` today and it has a meaning.\n\nBut that’s behaving exactly the way discard bindings should.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24OFP4yPc7In1U8PaWiAnX1TyfvyunZ60ro-Nv_zThjAA\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />Because you can already write <code>[_, _] = ar</code> today and it has a meaning.</blockquote></mx-reply>But that’s behaving exactly the way discard bindings should.","m.relates_to":{"m.in_reply_to":{"event_id":"$OFP4yPc7In1U8PaWiAnX1TyfvyunZ60ro-Nv_zThjAA"}},"msgtype":"m.text"},"ts":1712765149137,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EYyfUIQNfMH4yKttV27a8CV9oXfkqQG8UdSV9-3wSlA"},
{"content":{"body":"You'd need to inline every pattern, IIUC, which doesn't seem plausible in all places (it could be virtual, it could be huge, etc)","m.mentions":{},"msgtype":"m.text"},"ts":1712765156870,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$3lY9XIk1s-gXHMdKDZ6vRub9_y5KoNR3RY21SnZA-w4"},
{"content":{"body":"> <@keith_miller:matrix.org> Do other engines think that throwing for each failed match seems like it would be way too slow?\n\nWhile that's more of a discussion for pattern matching, Refutability is a very important mechanic for pattern matching. If you want irrefutability, you use a `default:` clause.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Do other engines think that throwing for each failed match seems like it would be way too slow?</blockquote></mx-reply>While that's more of a discussion for pattern matching, Refutability is a very important mechanic for pattern matching. If you want irrefutability, you use a <code>default:</code> clause.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA"}},"msgtype":"m.text"},"ts":1712765158063,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_sist4dXFlF3g71mi1CRKRaAU4BH148PIMfeKj_eND0"},
{"content":{"body":"We just need the ability to redeclare.","msgtype":"m.text"},"ts":1712765162746,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$w3v1Qq7xKtSkyaxYh4m3pLv13iNqb2WUDLItzcTtBBQ"},
{"content":{"body":"I agree it's more of a discussion for pattern matching I don't want to get to a place where we have throwing here and have to have a totally different mechanism for pattern matching","m.mentions":{},"msgtype":"m.text"},"ts":1712765230884,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$7XXWrQHws29cvjPCXP6aSPAAvPBTJAkG60LoiSkZ228"},
{"content":{"body":"> <@keith_miller:matrix.org> Do other engines think that throwing for each failed match seems like it would be way too slow?\n\nit would be for a failed `match` not for a failed _clause_, to be clear - the intention for a match construct is that it always matches something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Do other engines think that throwing for each failed match seems like it would be way too slow?</blockquote></mx-reply>it would be for a failed <code>match</code> not for a failed <em>clause</em>, to be clear - the intention for a match construct is that it always matches something","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BGOxd9YapGSBxiZ9jXn26K3ezb6h60BFlUERTfE2EDA"}},"msgtype":"m.text"},"ts":1712765251568,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oLOLhfEbhEy3wix_lSoXrxUSJ6nOjBIbI88YCKaXX1Y"},
{"content":{"body":"> <@jridgewell:matrix.org> We just need the ability to redeclare.\n\nwhich definition would closures capture?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w3v1Qq7xKtSkyaxYh4m3pLv13iNqb2WUDLItzcTtBBQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>We just need the ability to redeclare.</blockquote></mx-reply>which definition would closures capture?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w3v1Qq7xKtSkyaxYh4m3pLv13iNqb2WUDLItzcTtBBQ"}},"msgtype":"m.text"},"ts":1712765258449,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$v3RbRIGpqS8bhyRyv34nwrSU09d3mg0Nwzljtl9R3gk"},
{"content":{"body":"> <@jridgewell:matrix.org> But that’s behaving exactly the way discard bindings should.\n\nRedeclare what? if `_` isn't already declared, `[_, _] = ar` will either throw in strict mode, or introduce a global in non-strict mode. I don't think we can change that. If you want to use `_` as a discard in assignments, you do that by declaring a `var _` somewhere in the same scope.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EYyfUIQNfMH4yKttV27a8CV9oXfkqQG8UdSV9-3wSlA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>But that’s behaving exactly the way discard bindings should.</blockquote></mx-reply>Redeclare what? if <code>_</code> isn't already declared, <code>[_, _] = ar</code> will either throw in strict mode, or introduce a global in non-strict mode. I don't think we can change that. If you want to use <code>_</code> as a discard in assignments, you do that by declaring a <code>var _</code> somewhere in the same scope.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EYyfUIQNfMH4yKttV27a8CV9oXfkqQG8UdSV9-3wSlA"}},"msgtype":"m.text"},"ts":1712765263546,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SdcpN0ZCtvpsDP54-luJWc_6tjZyKBZ7p9EB6jpKamU"},
{"content":{"body":"Or are you talking about binding patterns?","m.mentions":{},"msgtype":"m.text"},"ts":1712765295481,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5wpVryFOas7br_vgoGLEl0HNN9JHyjk8yxymaSAaaJs"},
{"content":{"body":"> <@shuyuguo:matrix.org> i mean in general i agree with george but i got bad news for him on the understandability of JS wrt user code today\n\nIf we're creating a brand new feature, why not aim higher? Especially if the increased power/flexibility is not required for the majority of use-cases ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HLHDHaIFO9_LxpqW48lCyzhlvqjc7lyNEe6p6d9Hv74?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i mean in general i agree with george but i got bad news for him on the understandability of JS wrt user code today</blockquote></mx-reply>If we're creating a brand new feature, why not aim higher? Especially if the increased power/flexibility is not required for the majority of use-cases","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HLHDHaIFO9_LxpqW48lCyzhlvqjc7lyNEe6p6d9Hv74"}},"msgtype":"m.text"},"ts":1712765310368,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$xad0cJ85VVl1pDtgZ-V5bXej2Bb9X9GfQofwOPXAxz8"},
{"content":{"body":"> <@keith_miller:matrix.org> I agree it's more of a discussion for pattern matching I don't want to get to a place where we have throwing here and have to have a totally different mechanism for pattern matching\n\nThis must throw. If `const {} = null` throws or `const [] = 1` throws, so must this.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7XXWrQHws29cvjPCXP6aSPAAvPBTJAkG60LoiSkZ228?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I agree it&#39;s more of a discussion for pattern matching I don&#39;t want to get to a place where we have throwing here and have to have a totally different mechanism for pattern matching</blockquote></mx-reply>This must throw. If <code>const {} = null</code> throws or <code>const [] = 1</code> throws, so must this.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7XXWrQHws29cvjPCXP6aSPAAvPBTJAkG60LoiSkZ228"}},"msgtype":"m.text"},"ts":1712765343804,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Lz4e6dwdPFEBaMkzDxB886Xmg0tOSzlZQsPzUd-t99s"},
{"content":{"body":"`match` must throw if it has no default. Since `match` is syntactic, if a `default:` clause doesn't exist you just synthetically introduce one that throws.","format":"org.matrix.custom.html","formatted_body":"<code>match</code> must throw if it has no default. Since <code>match</code> is syntactic, if a <code>default:</code> clause doesn't exist you just synthetically introduce one that throws.","m.mentions":{},"msgtype":"m.text"},"ts":1712765389327,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wf9PrV-fQ6n4rESkO6ZkHJxn2dwAc8TSo9BRJjpwzsg"},
{"content":{"body":"> <@gkz:matrix.org> If we're creating a brand new feature, why not aim higher? Especially if the increased power/flexibility is not required for the majority of use-cases\n\nyou're reading the wrong conclusion. i, as an engine person, would be very happy with no custom matchers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xad0cJ85VVl1pDtgZ-V5bXej2Bb9X9GfQofwOPXAxz8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gkz:matrix.org\">@gkz:matrix.org</a><br>If we're creating a brand new feature, why not aim higher? Especially if the increased power/flexibility is not required for the majority of use-cases</blockquote></mx-reply>you're reading the wrong conclusion. i, as an engine person, would be very happy with no custom matchers","m.mentions":{"user_ids":["@gkz:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xad0cJ85VVl1pDtgZ-V5bXej2Bb9X9GfQofwOPXAxz8"}},"msgtype":"m.text"},"ts":1712765420977,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KrQ3fdGlWWt74BIL4jGrVg0GyTcLH7D2f5H5ynxqMSs"},
{"content":{"body":"i'm saying that doesn't meaningfully move the needle for the general problem of understanding user code in JS","m.mentions":{},"msgtype":"m.text"},"ts":1712765435854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1hl2HheP_B4AP2Q4EERL-wfpMjg2lVAKihQoNskJF68"},
{"content":{"body":"shu: dminor : What was the performance concern?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a> : What was the performance concern?","m.mentions":{"user_ids":["@shuyuguo:matrix.org","@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1712765502568,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I1kgLJyGBmEGbI6JshZK_h2sjeilm-w_aOOwvIFgrJg"},
{"content":{"body":"the new one?","m.mentions":{},"msgtype":"m.text"},"ts":1712765509596,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_Pys5Ff5TLdsbtSZmP_ZGiflf9RioOgwvC2Q6762WWA"},
{"content":{"body":"my new one is cover grammars incur cost, as you well know","m.mentions":{},"msgtype":"m.text"},"ts":1712765521551,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OpgjZ_nMKfmsjDxyRlC2uXXojmFVz4a9rjG7rdYXxqo"},
{"content":{"body":"and we don't like it","m.mentions":{},"msgtype":"m.text"},"ts":1712765523289,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$toJTkNVR9qXwF1MnDFYzvntgmef5DJs7KHtesIrwn8w"},
{"content":{"body":"nothing deeper than that","m.mentions":{},"msgtype":"m.text"},"ts":1712765525423,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q_3iRH5RvVQLZVrqcveJxQI0rdVJy9HSQ31_FU_qHeA"},
{"content":{"body":"> <@rbuckton:matrix.org> Redeclare what? if `_` isn't already declared, `[_, _] = ar` will either throw in strict mode, or introduce a global in non-strict mode. I don't think we can change that. If you want to use `_` as a discard in assignments, you do that by declaring a `var _` somewhere in the same scope.\n\nOh, I was assuming `_` was already a binding in scope. Why can’t we make sloppy mode continue to function as is, and just not create the binding in strict?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24SdcpN0ZCtvpsDP54-luJWc_6tjZyKBZ7p9EB6jpKamU\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />Redeclare what? if <code>_</code> isn't already declared, <code>[_, _] = ar</code> will either throw in strict mode, or introduce a global in non-strict mode. I don't think we can change that. If you want to use <code>_</code> as a discard in assignments, you do that by declaring a <code>var _</code> somewhere in the same scope.</blockquote></mx-reply>Oh, I was assuming <code data-md=\"`\">_</code> was already a binding in scope. Why can’t we make sloppy mode continue to function as is, and just not create the binding in strict?","m.relates_to":{"m.in_reply_to":{"event_id":"$SdcpN0ZCtvpsDP54-luJWc_6tjZyKBZ7p9EB6jpKamU"}},"msgtype":"m.text"},"ts":1712765605822,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wy6_xHFCcss4v1zOuNS3LRsZ1G-wV4fVX0bYX71vXQ8"},
{"content":{"body":"Regarding the `const InventoryID(customerId) = \"Contoso-12345\"` example, I've regularly described extractors as _unapplication_ (the Scala method is literally called `unapply()`). This dualilty is important for both data types and primitive types:\n\n```js\nconst InventoryID(customerID, Name) = InventoryID(\"12345\", \"Contoso\");\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>Regarding the <code>const InventoryID(customerId) = \"Contoso-12345\"</code> example, I've regularly described extractors as <em>unapplication</em> (the Scala method is literally called <code>unapply()</code>). This dualilty is important for both data types and primitive types:</p>\n<pre><code class=\"language-js\">const InventoryID(customerID, Name) = InventoryID(\"12345\", \"Contoso\");\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712765624556,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2r1vKe3NJ8nO8Xom8BkcD5TBKjXCT2PfY6TJBSi88Mc"},
{"content":{"body":"> <@jridgewell:matrix.org> Oh, I was assuming `_` was already a binding in scope. Why can’t we make sloppy mode continue to function as is, and just not create the binding in strict?\n\nThat would definitely be a violation of ljharb 's concerns. I think we can only use `_` if it would otherwise be syntactically illegal. If you have \n\n```js\nvar _ = require(\"lodash\");\nfunction f() {\n  [_, _] = [1, 2, 3];\n}\n```\n\nThen you're breaking code non-locally.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wy6_xHFCcss4v1zOuNS3LRsZ1G-wV4fVX0bYX71vXQ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Oh, I was assuming <code data-md=\"`\">_</code> was already a binding in scope. Why can’t we make sloppy mode continue to function as is, and just not create the binding in strict?</blockquote></mx-reply><p>That would definitely be a violation of <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> 's concerns. I think we can only use <code>_</code> if it would otherwise be syntactically illegal. If you have</p>\n<pre><code class=\"language-js\">var _ = require(\"lodash\");\nfunction f() {\n  [_, _] = [1, 2, 3];\n}\n</code></pre>\n<p>Then you're breaking code non-locally.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wy6_xHFCcss4v1zOuNS3LRsZ1G-wV4fVX0bYX71vXQ8"}},"msgtype":"m.text"},"ts":1712765714172,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-d4B-Bx9wqUgSXlAiPnil1fhhfp_1Djeb2dl0zT19_o"},
{"content":{"body":"> <@rbuckton:matrix.org> That would definitely be a violation of ljharb 's concerns. I think we can only use `_` if it would otherwise be syntactically illegal. If you have \n> \n> ```js\n> var _ = require(\"lodash\");\n> function f() {\n>   [_, _] = [1, 2, 3];\n> }\n> ```\n> \n> Then you're breaking code non-locally.\n\nWe had that discussion above. Renaming the lodash import is trivial.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-d4B-Bx9wqUgSXlAiPnil1fhhfp_1Djeb2dl0zT19_o\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br /><p>That would definitely be a violation of <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> 's concerns. I think we can only use <code>_</code> if it would otherwise be syntactically illegal. If you have</p>\n<pre><code class=\"language-js\">var _ = require(\"lodash\");\nfunction f() {\n  [_, _] = [1, 2, 3];\n}\n</code></pre>\n<p>Then you're breaking code non-locally.</p>\n</blockquote></mx-reply>We had that discussion above. Renaming the lodash import is trivial.","m.relates_to":{"m.in_reply_to":{"event_id":"$-d4B-Bx9wqUgSXlAiPnil1fhhfp_1Djeb2dl0zT19_o"}},"msgtype":"m.text"},"ts":1712765778073,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HcBxdg47pUxOkvgO8sgG1d4qs83itUkVl7SGfBsBZTs"},
{"content":{"body":"In a 10,000 line file, it's easy to lose sight of the imports at the top of the file.","m.mentions":{},"msgtype":"m.text"},"ts":1712765835167,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$alXdRey917h1CvXFoMD3PlK9C2KnW9f8eEON-mqmjU4"},
{"content":{"body":"oof, if you have a 10k line file you have bigger problems than a binding no longer working","m.mentions":{},"msgtype":"m.text"},"ts":1712765923197,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Nx883U1bXb_15O_e9PofCXCbamPkvVG5bytx83U6aGw"},
{"content":{"body":"> <@rbuckton:matrix.org> Regarding the `const InventoryID(customerId) = \"Contoso-12345\"` example, I've regularly described extractors as _unapplication_ (the Scala method is literally called `unapply()`). This dualilty is important for both data types and primitive types:\n> \n> ```js\n> const InventoryID(customerID, Name) = InventoryID(\"12345\", \"Contoso\");\n> ```\n\nI don't disagree that there are use-cases that would be addressed with this, just that the power required to support them (when these are the minority of use-cases, and other languages e.g. OCaml do fine without supporting this), allows completely arbitrary behavior which means that it will be more difficult to understand and analyze the main use-case, which is matching against some datatype and extracting values from it. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2r1vKe3NJ8nO8Xom8BkcD5TBKjXCT2PfY6TJBSi88Mc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Regarding the <code>const InventoryID(customerId) = \"Contoso-12345\"</code> example, I've regularly described extractors as <em>unapplication</em> (the Scala method is literally called <code>unapply()</code>). This dualilty is important for both data types and primitive types:</p>\n<pre><code class=\"language-js\">const InventoryID(customerID, Name) = InventoryID(\"12345\", \"Contoso\");\n</code></pre>\n</blockquote></mx-reply>I don't disagree that there are use-cases that would be addressed with this, just that the power required to support them (when these are the minority of use-cases, and other languages e.g. OCaml do fine without supporting this), allows completely arbitrary behavior which means that it will be more difficult to understand and analyze the main use-case, which is matching against some datatype and extracting values from it.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2r1vKe3NJ8nO8Xom8BkcD5TBKjXCT2PfY6TJBSi88Mc"}},"msgtype":"m.text"},"ts":1712765962609,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$4nvuuN0djCiRoJsE3Ej4VeXMvB_rwg48LkDPDaeMorU"},
{"content":{"body":"Yeah, yeah. I'd love to refactor checker.ts to something more manageable, but that's still a ways out.","m.mentions":{},"msgtype":"m.text"},"ts":1712765971843,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DPRwsz1L8ERHrKrrEyV1UijRG7QzoFJbYn4E5oZbZHw"},
{"content":{"body":"> <@gkz:matrix.org> I don't disagree that there are use-cases that would be addressed with this, just that the power required to support them (when these are the minority of use-cases, and other languages e.g. OCaml do fine without supporting this), allows completely arbitrary behavior which means that it will be more difficult to understand and analyze the main use-case, which is matching against some datatype and extracting values from it.\n\nDo you mean something more like Python's `__match_args__` approach? I've discussed that with the pattern matching champions and there was fairly strong opposition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4nvuuN0djCiRoJsE3Ej4VeXMvB_rwg48LkDPDaeMorU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gkz:matrix.org\">@gkz:matrix.org</a><br>I don't disagree that there are use-cases that would be addressed with this, just that the power required to support them (when these are the minority of use-cases, and other languages e.g. OCaml do fine without supporting this), allows completely arbitrary behavior which means that it will be more difficult to understand and analyze the main use-case, which is matching against some datatype and extracting values from it.</blockquote></mx-reply>Do you mean something more like Python's <code>__match_args__</code> approach? I've discussed that with the pattern matching champions and there was fairly strong opposition.","m.mentions":{"user_ids":["@gkz:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4nvuuN0djCiRoJsE3Ej4VeXMvB_rwg48LkDPDaeMorU"}},"msgtype":"m.text"},"ts":1712766041304,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ybCtzlzpWdcTgcqWdpPok75rgiSKfNzbc0TAiPswIaI"},
{"content":{"body":"rbuckton: Are there any dynamically typed languages that support extractors?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Are there any dynamically typed languages that support extractors?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712766095512,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Fr_2_4XNl8paenWdTSaWr4m_3aMi5L90Xh854WpmSGo"},
{"content":{"body":"OCaml is a statically typed language, as is Rust. They have type systems to do the work for them. JS does not. It often depends on runtime evaluation of code to do similar things. Extractors is the way it is because it isn't statically typed.","m.mentions":{},"msgtype":"m.text"},"ts":1712766186066,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k8zRW85PjkxYNY_xm2ql9rvL2frC8bJ1Qff0aS3g5SQ"},
{"content":{"body":"Racket, apparently?","m.mentions":{},"msgtype":"m.text"},"ts":1712766221836,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$P9-CfmaqMhjLg6X2j21DyNwLpK2gGfrBRTVlWg1FCSI"},
{"content":{"body":"> <@rbuckton:matrix.org> Do you mean something more like Python's `__match_args__` approach? I've discussed that with the pattern matching champions and there was fairly strong opposition.\n\nI'm not familiar with that feature, but to explain what I mean in loose terms, you could still have a `customMatcher`-like function which can decide which values to return for extraction, but the check of \"is this of this datatype\" (be it instanceof or whatever) would always be run, separating these two concerns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ybCtzlzpWdcTgcqWdpPok75rgiSKfNzbc0TAiPswIaI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Do you mean something more like Python's <code>__match_args__</code> approach? I've discussed that with the pattern matching champions and there was fairly strong opposition.</blockquote></mx-reply>I'm not familiar with that feature, but to explain what I mean in loose terms, you could still have a <code>customMatcher</code>-like function which can decide which values to return for extraction, but the check of \"is this of this datatype\" (be it instanceof or whatever) would always be run, separating these two concerns","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ybCtzlzpWdcTgcqWdpPok75rgiSKfNzbc0TAiPswIaI"}},"msgtype":"m.text"},"ts":1712766240307,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$KQkWVFcJfZeno23cR7oyZTanbFjIu9OX4c6qnwnf4Ok"},
{"content":{"body":"> <@eemeli:mozilla.org> rbuckton: Are there any dynamically typed languages that support extractors?\n\nPython has `__match_args__`, not full extractors. They'd considered them but determined they didn't have use cases. JS has private state, which Python does not, so a `__match_args__` approach is not sufficient. Other Pattern Matching champions have opinions on this as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fr_2_4XNl8paenWdTSaWr4m_3aMi5L90Xh854WpmSGo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Are there any dynamically typed languages that support extractors?</blockquote></mx-reply>Python has <code>__match_args__</code>, not full extractors. They'd considered them but determined they didn't have use cases. JS has private state, which Python does not, so a <code>__match_args__</code> approach is not sufficient. Other Pattern Matching champions have opinions on this as well.","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Fr_2_4XNl8paenWdTSaWr4m_3aMi5L90Xh854WpmSGo"}},"msgtype":"m.text"},"ts":1712766255960,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wVlmESrdZiCb93kMWNRX86b3b9QK1bz86LM-xoyII20"},
{"content":{"body":"Dart recently added a pattern matching feature, and seems to work in this way: https://dart.dev/language/pattern-types#object","m.mentions":{},"msgtype":"m.text"},"ts":1712766289358,"senderName":"gkz","senderId":"@gkz:matrix.org","id":"$IDb8cu3nkwzLM9OImbvZRQQOcJ47la9FjaoiJoEl9rQ"},
{"content":{"body":"> <@gkz:matrix.org> I'm not familiar with that feature, but to explain what I mean in loose terms, you could still have a `customMatcher`-like function which can decide which values to return for extraction, but the check of \"is this of this datatype\" (be it instanceof or whatever) would always be run, separating these two concerns\n\nIn Python, you can do\n```py\nmatch p:\n  case Point(x=0, y=0): ...\n```\nwhere `Point.__match_args__` is `[\"x\", \"y\"]`.\n\nIt checks if `p` is a `Point`, then basically checks if `p[Point.__match_args__[0]] == 0 and p[Point.__match_args__[1]] == 0`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KQkWVFcJfZeno23cR7oyZTanbFjIu9OX4c6qnwnf4Ok?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gkz:matrix.org\">@gkz:matrix.org</a><br>I'm not familiar with that feature, but to explain what I mean in loose terms, you could still have a <code>customMatcher</code>-like function which can decide which values to return for extraction, but the check of \"is this of this datatype\" (be it instanceof or whatever) would always be run, separating these two concerns</blockquote></mx-reply><p>In Python, you can do</p>\n<pre><code class=\"language-py\">match p:\n  case Point(x=0, y=0): ...\n</code></pre>\n<p>where <code>Point.__match_args__</code> is <code>[\"x\", \"y\"]</code>.</p>\n<p>It checks if <code>p</code> is a <code>Point</code>, then basically checks if <code>p[Point.__match_args__[0]] == 0 and p[Point.__match_args__[1]] == 0</code></p>\n","m.mentions":{"user_ids":["@gkz:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KQkWVFcJfZeno23cR7oyZTanbFjIu9OX4c6qnwnf4Ok"}},"msgtype":"m.text"},"ts":1712766435515,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DxZzq1eFG63fFS9NtMMl5N0IhgYu_NEsxEkXJKG_meg"},
{"content":{"body":"There is no opportunity to run user-defined code as part of that validation. It can also only read public properties, but that's fine for Python since it does not have privacy. A `Point[Symbol.matchArgs] = [\"#x\", \"#y\"]` in JS wouldn't be able to read a private `#x` in JS.","format":"org.matrix.custom.html","formatted_body":"There is no opportunity to run user-defined code as part of that validation. It can also only read public properties, but that's fine for Python since it does not have privacy. A <code>Point[Symbol.matchArgs] = [\"#x\", \"#y\"]</code> in JS wouldn't be able to read a private <code>#x</code> in JS.","m.mentions":{},"msgtype":"m.text"},"ts":1712766543019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dcQwqDZ4VO6_5lnbV2ZV2-wuctZtN5Cz25foJev1w2k"}
]