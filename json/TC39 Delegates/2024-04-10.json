[
{"content":{"body":"If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding","m.mentions":{},"msgtype":"m.text"},"ts":1712707263754,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nV8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by joyee :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>V8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by <a href=\"https://matrix.to/#/@qzhang:igalia.com\">joyee</a> :)","m.mentions":{"user_ids":["@waldemarh:matrix.org","@qzhang:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712709626514,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jrqzhr8MDdS5_tXkZ8w8hHMyMtJhPHANUNpucFjMFr4"},
{"content":{"body":"I am not sure what we're supposed to get from Project Valhalla when primitives/value semantics has already been deemed not an option due to implementability issues","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$jbWZ-JIVp1jNFe2_Y0MmT1Qr38MeENTgdrrTG8BUXHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713794096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},
{"content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms that aren't based on classes.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713867105,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},
{"content":{"body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"m.new_content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712713881072,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_Ndd3J0dx-HHnZfkep1EPTOm4DiJSWxBBb30nLohwtI"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nPerformance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712714042864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"},
{"content":{"body":"There's a lot of complexity with class-based immutable things, e.g., we'd need to use initializer list-based constructors, so if there's subclassing it's a totally different instantiation protocol. And if they're value types, it's even more complicated if we want to avoid any kind of global registries like we discussed with shared structs.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714070944,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},
{"content":{"body":"> <@rbuckton:matrix.org> Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.\n\nRight so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.</blockquote></mx-reply>Right so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","m.mentions":{"user_ids":["@rbuckton:matrix.org","@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"}},"msgtype":"m.text"},"ts":1712714148841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SFfqjj_OjIfZffh-aY93N81shhWgoN2jVC7gg9IUZ3o"},
{"content":{"body":"The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.","m.mentions":{},"msgtype":"m.text"},"ts":1712714451335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"},
{"content":{"body":"I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are\n\n- even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are `==` each other is useful\n- they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)","format":"org.matrix.custom.html","formatted_body":"<p>I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are</p>\n<ul>\n<li>even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are <code>==</code> each other is useful</li>\n<li>they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)</li>\n</ul>\n","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714646637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},
{"content":{"body":"The overhead incurred by a `CompositeKey` just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a `Hasher` class instead of a global `Object.hash()`. A given `Hasher` could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like `{ equals(a, b), hash(obj, hasher) }` and you then can write `new Map([], { equaler, hasher })`. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","format":"org.matrix.custom.html","formatted_body":"The overhead incurred by a <code>CompositeKey</code> just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a <code>Hasher</code> class instead of a global <code>Object.hash()</code>. A given <code>Hasher</code> could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like <code>{ equals(a, b), hash(obj, hasher) }</code> and you then can write <code>new Map([], { equaler, hasher })</code>. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","m.mentions":{},"msgtype":"m.text"},"ts":1712715411726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ"},
{"content":{"body":"yes, I agree that having objects which === each other is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716410028,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},
{"content":{"body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716493019,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hX9LfAotBLTa8GEgEcZKOV_KkJL37vXmmTSdWSu3eS8"},
{"content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had classes, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716520038,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716537526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4NyJyc5_smyLau9RZ_yTHRz-A13SXQdVWJ0gg94ILxw"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716550373,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Clhfx8SK8vX0aThYFvDo5CX72oyIhxmCtGxQ6-bawjc"},
{"content":{"body":"> The overhead incurred by a CompositeKey just seems like a non-starter to me.\n\nIf this means one which is interned so that === works, I agree","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The overhead incurred by a CompositeKey just seems like a non-starter to me.</p>\n</blockquote>\n<p>If this means one which is interned so that === works, I agree</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712716606538,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$je5mnJTS3n1KFKrc0nIxgD5sSE7jTl6Lfk0OPcNdbvg"},
{"content":{"body":"> <@rbuckton:matrix.org> The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.\n\nHow do you think we should work through the situation where a bunch of people directly disagree with this judgement?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The &quot;bad thing&quot; case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.</blockquote></mx-reply>How do you think we should work through the situation where a bunch of people directly disagree with this judgement?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"}},"msgtype":"m.text"},"ts":1712716641938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z8r221W3fcNXOar-4EWAtM_pp_vykyZZ-Td8pMOsY24"},
{"content":{"body":"That's why I mentioned alternatives in the preceding message. I'm willing to consider alternatives that support the scenarios I've discussed. I'd entertain an opaque hash if it were feasible to actually support those scenarios in a performant way. A Composite key cannot satisfy those scenarios as it can never be fast in a custom collection, only in native Map/Set. Maybe I'd be less concerned if a `ConcurrentMap` were in the MVP for shared structs, but I know that shared structs *without* concurrent collections is already a hard sell. The problem is that shared structs *without* concurrent collections is nearly unusable for my use cases without the ability to implement a fast efficient custom collection. To support it in the dev trial I essentially had to tag every shared struct with a monotonically increasing identity to use as the hash, and implement a string hashing algorithm just so I could roll my own `ConcurrentMap`. That approach has a lot of overhead I'd rather avoid.","format":"org.matrix.custom.html","formatted_body":"That's why I mentioned alternatives in the preceding message. I'm willing to consider alternatives that support the scenarios I've discussed. I'd entertain an opaque hash if it were feasible to actually support those scenarios in a performant way. A Composite key cannot satisfy those scenarios as it can never be fast in a custom collection, only in native Map/Set. Maybe I'd be less concerned if a <code>ConcurrentMap</code> were in the MVP for shared structs, but I know that shared structs <em>without</em> concurrent collections is already a hard sell. The problem is that shared structs <em>without</em> concurrent collections is nearly unusable for my use cases without the ability to implement a fast efficient custom collection. To support it in the dev trial I essentially had to tag every shared struct with a monotonically increasing identity to use as the hash, and implement a string hashing algorithm just so I could roll my own <code>ConcurrentMap</code>. That approach has a lot of overhead I'd rather avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1712717353090,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n4-tnf_bc8izYgIDpEInjVnKigOVlENlEFG0-g_s538"},
{"content":{"body":"tl;dr, I don't need hash/equals if I know I'll get `ConcurrentMap`, but I know that's a long shot at this point. I'd still lament the overhead of a `CompositeKey`, but my primary use cases would be covered. On the other hand, hash/equals means I'm less concerned about when, if ever, I get `ConcurrentMap` since I could readily implement it in userland.","format":"org.matrix.custom.html","formatted_body":"tl;dr, I don't need hash/equals if I know I'll get <code>ConcurrentMap</code>, but I know that's a long shot at this point. I'd still lament the overhead of a <code>CompositeKey</code>, but my primary use cases would be covered. On the other hand, hash/equals means I'm less concerned about when, if ever, I get <code>ConcurrentMap</code> since I could readily implement it in userland.","m.mentions":{},"msgtype":"m.text"},"ts":1712717622680,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vDeibj0qCx8WdrWeKvYl9HXWa15aubOD_dJGwQrLqO4"},
{"content":{"body":"it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718240639,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},
{"content":{"body":"and being actual `typeof \"object\"` objects rather than a new kind of primitive, and so on","format":"org.matrix.custom.html","formatted_body":"and being actual <code>typeof \"object\"</code> objects rather than a new kind of primitive, and so on","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718305279,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PIJvb1_qQ6tXt84ta5yiMlsYchr7p5yE_zz0TbENlAw"},
{"content":{"body":"https://matrixlogs.bakkot.com/TC39_Delegates/2024-04-09#L294-L290","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$PIJvb1_qQ6tXt84ta5yiMlsYchr7p5yE_zz0TbENlAw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712718315176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$llbA8fst8TN9dv0osfY7qDj_WAsfZIh2hJqY1a4AdcQ"},
{"content":{"body":"Could a hashcode be a global symbol for which `Symbol.keyFor()` returned `undefined`? Wouldn't that avoid the concerns about non-determinism?","format":"org.matrix.custom.html","formatted_body":"Could a hashcode be a global symbol for which <code>Symbol.keyFor()</code> returned <code>undefined</code>? Wouldn't that avoid the concerns about non-determinism?","m.mentions":{},"msgtype":"m.text"},"ts":1712729200145,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KIKPKOhaYqubriT2gkWG22V0BiyvxQHj3Wzsw47zZGI"},
{"content":{"body":"Symbols don't help non-determinism.\n\n```\ntypeof hash(\"a\"); // \"symbol\"\n\nif (hash(\"a\") === hash(\"b\")) {\n  print(\"foo\");\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"Symbols don't help non-determinism.<br /><br />```<br />typeof hash(\"a\"); // \"symbol\"<br /><br />if (hash(\"a\") === hash(\"b\")) {<br />  print(\"foo\");<br />}<br />```<br />","msgtype":"m.text"},"ts":1712738581918,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RnbP9GDNepWUzHPShLSsTog31teRRQIU9-_seB1itNw"},
{"content":{"body":"Does the program print foo?","format":"org.matrix.custom.html","formatted_body":"Does the program print foo?","msgtype":"m.text"},"ts":1712738582462,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wysiEBjlpJy5LX3FlLIXwmJB3Q83aMSftUmeReaey1g"},
{"content":{"body":"If the spec says that the symbol hash of every value is different and never equal, then we haven't hashed into a smaller space.\nIf the spec says which values have the same hash then this opens up code to collisions attacks.\nIf the spec says it's random which values have the same hash then it's non-deterministic if the program prints foo.\n\nis my understanding of the problem statement with the  various design constraints put forward from committee.","format":"org.matrix.custom.html","formatted_body":"If the spec says that the symbol hash of every value is different and never equal, then we haven't hashed into a smaller space.<br />If the spec says which values have the same hash then this opens up code to collisions attacks.<br />If the spec says it's random which values have the same hash then it's non-deterministic if the program prints foo.<br /><br />is my understanding of the problem statement with the  various design constraints put forward from committee.","msgtype":"m.text"},"ts":1712738879303,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$g5BL-gNKhKOpQE6jTnKQZ2dZXQwSfpgY6KjP9hBPzmE"},
{"content":{"body":"> <@rbuckton:matrix.org> Plus, AFAIK equals/hash is how every implementation implements maps natively, it's just not exposed to user code.\n\nAshley Claymore: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xgGvyBKSJ5vJqJeTktcJpw-ibk9n3l_NnCdEmvIg5UA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Plus, AFAIK equals/hash is how every implementation implements maps natively, it&#39;s just not exposed to user code.</blockquote></mx-reply><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?","m.mentions":{"user_ids":["@rbuckton:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xgGvyBKSJ5vJqJeTktcJpw-ibk9n3l_NnCdEmvIg5UA"}},"msgtype":"m.text"},"ts":1712740482430,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA"},
{"content":{"body":"Hashes can have conflicts — in a Map you store a list of entries per each hash. When looking up values in the map, you:\n1. Compute the has of the key\n2. Get the list corresponding to that hash\n3. Iterate through the list to check if the key is indeed there","format":"org.matrix.custom.html","formatted_body":"<p>Hashes can have conflicts — in a Map you store a list of entries per each hash. When looking up values in the map, you:</p>\n<ol>\n<li>Compute the has of the key</li>\n<li>Get the list corresponding to that hash</li>\n<li>Iterate through the list to check if the key is indeed there</li>\n</ol>","msgtype":"m.text"},"ts":1712740712400,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3WgcSctajYB6X_KrvnmuTScVsIYfcdzqwBWRYaO_o7Q"},
{"content":{"body":"> <@eemeli:mozilla.org> Ashley Claymore: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?\n\nYep. The important part is that this isn't exposed. Apart from trying to measure the execution time. Doing `map.set(\"a\", 1)` I can't tell if there was a hash collision and it had to probe, or the buckets needed to be-resized ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I understood from this earlier assertion by Ron that implementations have already found ways to square the circle with respect to \"different and never equal\", but maybe I misunderstood?</blockquote></mx-reply>Yep. The important part is that this isn't exposed. Apart from trying to measure the execution time. Doing `map.set(\"a\", 1)` I can't tell if there was a hash collision and it had to probe, or the buckets needed to be-resized ","m.relates_to":{"m.in_reply_to":{"event_id":"$D_6KG5FP975rTvXjAgnENOgBqXfuOhpdMY3exQagfdA"}},"msgtype":"m.text"},"ts":1712741205807,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$W1UazixP5XQ3ilGMQ0RSg9aVM-3TcN18S22lgQ4dq0U"},
{"content":{"body":"Ah, got it. So for a \"different and never equal\" sort of hash, `hash()` would need to remember all the values that have passed through it.\n\nA related thought I had that could limit the impact of that would be making the hash (or composite key, not really sure how they'd be very different) linked to the lifetime of an object. Then `hash(foo, \"a\")` and `hash(bar, \"a\")` would never equal if `foo !== bar`, but `hash(obj, { a: 1, b: 2}) === hash(obj, { b: 2, a: 1 })` could work.","format":"org.matrix.custom.html","formatted_body":"<p>Ah, got it. So for a \"different and never equal\" sort of hash, <code>hash()</code> would need to remember all the values that have passed through it.</p>\n<p>A related thought I had that could limit the impact of that would be making the hash (or composite key, not really sure how they'd be very different) linked to the lifetime of an object. Then <code>hash(foo, \"a\")</code> and <code>hash(bar, \"a\")</code> would never equal if <code>foo !== bar</code>, but <code>hash(obj, { a: 1, b: 2}) === hash(obj, { b: 2, a: 1 })</code> could work.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712742788319,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$nwuEvM2YkwyaX5pRF89oYRTVh0nyt07oG1117ESYc4Q"},
{"content":{"body":"That is essentially the CompositeKey / R&T design. That doesn't help Ron's use case of building high performance custom hash maps. To implement custom hash maps the only truely useful hashing function is one where it is possible for values to collide, otherwise the space hasn't been reduced to something that can fit into a small number of indexable buckets","m.mentions":{},"msgtype":"m.text"},"ts":1712750743408,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yNwbPioTEv1koqrHf7g47cxUiA8iBsDLlVjLFtq_U_M"},
{"content":{"body":"this is why Ron desires a hashing function that returns integers","m.mentions":{},"msgtype":"m.text"},"ts":1712750820418,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yoOIGok67qJKz5yAev-CiXMVHlGEr9Pseni1xrUGkZs"},
{"content":{"body":"I would like to think that the object based R&T provide lots of value without needing to expose hashing.\nWhile also not precluding another proposal for exposing hashing function for the use cases when full control and minimal object allocations are desirable.\nFor use cases when R&T can be adopted as the data model of the application, this would be efficient. Using these values as Map/Set keys would require not extra allocation (outside of the map/set's own storage naturally), and the hashing and equality functions would be 100% native with zero need for userland re-entrancy guards.\nHowever Ron is correct that when R&T need to be created as keys because the data model and the keys are not directly compatible then those application will need to allocate more objects to create the keys. This should be more memory efficient than the current solution of flattening values into one long string, but is still an extra allocation that a purely manual hashing+equality interface would avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1712751371364,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ruxFq0MnEjOIbw1usWrMeEhMB52Bkm5bvL34VQ95_fI"},
{"content":{"body":"> <@rbuckton:matrix.org> The overhead incurred by a `CompositeKey` just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a `Hasher` class instead of a global `Object.hash()`. A given `Hasher` could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like `{ equals(a, b), hash(obj, hasher) }` and you then can write `new Map([], { equaler, hasher })`. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.\n\nIn this hasher scenario, I don't really understand why not just use the object as a representative of its own binary hash, and I don't understand what you're proposing for compound values","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The overhead incurred by a <code>CompositeKey</code> just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a <code>Hasher</code> class instead of a global <code>Object.hash()</code>. A given <code>Hasher</code> could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like <code>{ equals(a, b), hash(obj, hasher) }</code> and you then can write <code>new Map([], { equaler, hasher })</code>. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.</blockquote></mx-reply>In this hasher scenario, I don't really understand why not just use the object as a representative of its own binary hash, and I don't understand what you're proposing for compound values","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ"}},"msgtype":"m.text"},"ts":1712751960271,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rKzArYmxxeSflwQnRgmS4wl0n5RG2sgsvFyGWDfhObY"},
{"content":{"body":"> <@bakkot:matrix.org> it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax\n\nWe didn't present the interning idea at that pivotal TC39 meeting because it had already been ruled out for the reasons Ashley presented about the cost of interning, based on previous conversations with implementers (which we maybe should've repeated in committee)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it was not clear to me that this feedback applied to interning at construction time, with a constructor function rather than syntax</blockquote></mx-reply>We didn't present the interning idea at that pivotal TC39 meeting because it had already been ruled out for the reasons Ashley presented about the cost of interning, based on previous conversations with implementers (which we maybe should've repeated in committee)","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":false,"m.in_reply_to":{"event_id":"$Mg22hBrhJ-By-LGppkqvm5VHGDrsfAGqC5FDpVoJb34"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712752085258,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aJAyAxw8M1BmV_Lxx-oGSuD0CWtIEeBS1mO_o6JiOe4"},
{"content":{"body":"shu: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Could you clarify whether \"better\" is good enough, when it comes to interning overhead?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$aJAyAxw8M1BmV_Lxx-oGSuD0CWtIEeBS1mO_o6JiOe4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712752147569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N0C3xXg5InUSjU9BWHz9DOKWKxzICWUb5GjsPrSVT-U"},
{"content":{"body":"I want to compare object equality structurally, not by reference. The most efficient way to do so for custom equality in a hash table is to calculate a hashcode for bucketing, and use an equals method against each element in the bucket. A user-defined hash table cannot use object reference identity as it is not a numeric value, instead it needs an identity hash. ","format":"org.matrix.custom.html","formatted_body":"I want to compare object equality structurally, not by reference. The most efficient way to do so for custom equality in a hash table is to calculate a hashcode for bucketing, and use an equals method against each element in the bucket. A user-defined hash table cannot use object reference identity as it is not a numeric value, instead it needs an identity hash.","msgtype":"m.text"},"ts":1712752250686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aYLjZ8JWbNxSzDIctM04pgS5dPMvnjokRYdfbkcLmUg"},
{"content":{"body":"Can you convert an object identity into a number by having a `WeakMap<object, number>`, and assigning a number to each object?","format":"org.matrix.custom.html","formatted_body":"Can you convert an object identity into a number by having a <code>WeakMap&lt;object, number&gt;</code>, and assigning a number to each object?","m.mentions":{},"msgtype":"m.text"},"ts":1712752354045,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hCZpsUYXhghOONFqP5RKqz5yC-Tt4RXxq5FDHNqQ1NA"},
{"content":{"body":"let's see if we can avoid these weak things where possible... it has a real GC perf cost","m.mentions":{},"msgtype":"m.text"},"ts":1712752589865,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ok2Qo9aimP2hhRfpgo5TRJ2k3dOydunsbHFzPkIyjKs"},
{"content":{"body":"rbuckton: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&T for structural comparison (opt in with a keyBy function). Would that implement what you need?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&amp;T for structural comparison (opt in with a keyBy function). Would that implement what you need?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712752640790,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ"},
{"content":{"body":"That is what is generally done to work around this currently, but it has drawbacks:\n- It's not resilient to version conflicts when multiple versions of the same package are installed.\n- If globally accessible, it must be randomized to avoid becoming a communications channel.\n- It doesn't work across threads for something like shared structs.\n\nIt's also only part of the problem with hashing, the other problem is strings.","format":"org.matrix.custom.html","formatted_body":"<p>That is what is generally done to work around this currently, but it has drawbacks:</p>\n<ul>\n<li>It's not resilient to version conflicts when multiple versions of the same package are installed.</li>\n<li>If globally accessible, it must be randomized to avoid becoming a communications channel.</li>\n<li>It doesn't work across threads for something like shared structs.</li>\n</ul>\n<p>It's also only part of the problem with hashing, the other problem is strings.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712752677079,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc"},
{"content":{"body":"a concurrent map would hash strings well, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712753238707,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KX28PR0UpdSVEHChJxZ3YGFIwmbrkYqVXi6gUJrcWXc"},
{"content":{"body":"> <@rbuckton:matrix.org> That is what is generally done to work around this currently, but it has drawbacks:\n> - It's not resilient to version conflicts when multiple versions of the same package are installed.\n> - If globally accessible, it must be randomized to avoid becoming a communications channel.\n> - It doesn't work across threads for something like shared structs.\n> \n> It's also only part of the problem with hashing, the other problem is strings.\n\nHow can you solve these problems with a custom data structure?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>That is what is generally done to work around this currently, but it has drawbacks:</p>\n<ul>\n<li>It's not resilient to version conflicts when multiple versions of the same package are installed.</li>\n<li>If globally accessible, it must be randomized to avoid becoming a communications channel.</li>\n<li>It doesn't work across threads for something like shared structs.</li>\n</ul>\n<p>It's also only part of the problem with hashing, the other problem is strings.</p>\n</blockquote></mx-reply>How can you solve these problems with a custom data structure?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Z-Z9Q8qvz28duH9l1XyMC_RPHcP50kSNAnLHN6jMSXc"}},"msgtype":"m.text"},"ts":1712753254390,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cm0OMnKzfKoosM2UYC-kosHeqyU1HySqkFqoKQMZ7lE"},
{"content":{"body":"I'm not sure what you mean by \"this is what is done\" -- the concurrent map construct doesn't exist yet","m.mentions":{},"msgtype":"m.text"},"ts":1712753280664,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E"},
{"content":{"body":"> <@littledan:matrix.org> rbuckton: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&T for structural comparison (opt in with a keyBy function). Would that implement what you need?\n\nOne of my goals is performance. Composite keys, or using R&T as keys, is going to have overhead. If I want to use a `Uri` or a `Point` or a `Location` as a key, I would have to convert it to a R&T type or composite key first, which is an allocation for *every* call to `get`/`set`/`has`. This can be 1000s of allocations in a tight loop, and if I don't own `Uri` or `Point` or `Location` I can't just convert those to be R&T types. An `{ equals, hash }` object is a single allocation that is reused for every key.\nAnother of my goals is maturing the language. Custom collection classes can't perform as well as native `Map`/`Set` because developers don't have access to the requisite core capabilities necessary to make that happen. I'm concerned that composite keys either become evolutionary dead end for the language if these building blocks become available, or they become a rationale to never make these building blocks available and thus we never have the flexibility to write efficient custom collections.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: If your goal is to have a concurrent map, maybe we should focus on that. That could work both by identity (by default) and converting to a R&amp;T for structural comparison (opt in with a keyBy function). Would that implement what you need?</blockquote></mx-reply>One of my goals is performance. Composite keys, or using R&amp;T as keys, is going to have overhead. If I want to use a <code>Uri</code> or a <code>Point</code> or a <code>Location</code> as a key, I would have to convert it to a R&amp;T type or composite key first, which is an allocation for <em>every</em> call to <code>get</code>/<code>set</code>/<code>has</code>. This can be 1000s of allocations in a tight loop, and if I don't own <code>Uri</code> or <code>Point</code> or <code>Location</code> I can't just convert those to be R&amp;T types. An <code>{ equals, hash }</code> object is a single allocation that is reused for every key.<br>Another of my goals is maturing the language. Custom collection classes can't perform as well as native <code>Map</code>/<code>Set</code> because developers don't have access to the requisite core capabilities necessary to make that happen. I'm concerned that composite keys either become evolutionary dead end for the language if these building blocks become available, or they become a rationale to never make these building blocks available and thus we never have the flexibility to write efficient custom collections.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YVg3yway4CS8CWh6WctPNIHbwTukLXEF92JBiO7XcCQ"}},"msgtype":"m.text"},"ts":1712753392354,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IWwomdrBxsKeK-C-WMQ9QvQwTBcyqf4bpqtSVa63lh4"},
{"content":{"body":"> <@littledan:matrix.org> I'm not sure what you mean by \"this is what is done\" -- the concurrent map construct doesn't exist yet\n\nI was responding to nicolo. Also, a concurrent map *does* exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an `Object.hash()` required a significant number of workarounds that I wouldn't want to rely on in a released product.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I&#39;m not sure what you mean by &quot;this is what is done&quot; -- the concurrent map construct doesn&#39;t exist yet</blockquote></mx-reply>I was responding to nicolo. Also, a concurrent map <em>does</em> exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an <code>Object.hash()</code> required a significant number of workarounds that I wouldn't want to rely on in a released product.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jB2gA2VPkReEhEfMxNVgEa4G-z5og4I8RJaahA3S74E"}},"msgtype":"m.text"},"ts":1712753510436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU"},
{"content":{"body":"Yes, I can see how composite keys or R&T has more runtime cost than a hashcode. That is sometimes the compromise that we make in high-level languages. I guess when domain-specific hacks are possible, they can be included as the keyBy.","m.mentions":{},"msgtype":"m.text"},"ts":1712753647166,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8b-eDKuqpNGVk1yvCFkeqNOmNyduSOIn5XAGCqOGAHY"},
{"content":{"body":"> <@rbuckton:matrix.org> I was responding to nicolo. Also, a concurrent map *does* exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an `Object.hash()` required a significant number of workarounds that I wouldn't want to rely on in a released product.\n\nah, now I understand why you identify strings as an issue","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I was responding to nicolo. Also, a concurrent map <em>does</em> exist. I had to build one for TypeScript as part of experimenting with shared structs. The lack of an <code>Object.hash()</code> required a significant number of workarounds that I wouldn't want to rely on in a released product.</blockquote></mx-reply>ah, now I understand why you identify strings as an issue","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$A8JSC24Zdap37YTFzeGRLsp5OD_KgHBYnt71PimOAYU"}},"msgtype":"m.text"},"ts":1712753655547,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cIuznuhvxI-vWNBrEGRa6GUTAIEHhwfZuausXJTurs0"},
{"content":{"body":"And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don't see that being likely.","m.mentions":{},"msgtype":"m.text"},"ts":1712753657014,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow"},
{"content":{"body":"Strings are an issue for multiple reasons.","m.mentions":{},"msgtype":"m.text"},"ts":1712753670178,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iWPPaBjfbzw4s9NVVdJ-Y_Ubk6e1iY9NdxZwLynhZeM"},
{"content":{"body":"> <@rbuckton:matrix.org> And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don't see that being likely.\n\nI can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>And yes, if concurrent collections were part of the MVP for shared structs then I might be less concerned, but I don&#39;t see that being likely.</blockquote></mx-reply>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sOzQGqvuwTFm1p3SVr8eCRegSsSq0X_yDoxg7HI73ow"}},"msgtype":"m.text"},"ts":1712753737206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"},
{"content":{"body":"- Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.\n- Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.</li>\n<li>Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712753759859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM"},
{"content":{"body":"> <@rbuckton:matrix.org> - Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.\n> - Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.\n\nthese sound like issues if you're going to implement your own string hashtable; if this task is offloaded to the VM, it might be easier","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><ul>\n<li>Implementations need to be able to choose more efficient string hashing algorithms as they become available, and thus requires non-determinism between upgrades.</li>\n<li>Strings are a notorious source for hash collisions, and thus requires non-determinism between app restarts.</li>\n</ul>\n</blockquote></mx-reply>these sound like issues if you're going to implement your own string hashtable; if this task is offloaded to the VM, it might be easier","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$I49XcwuBZezCIqTuJU34KiXdCC7cI1M_AopHh1Oh7wM"}},"msgtype":"m.text"},"ts":1712753809047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fnej9Y1PVZHqKaaNZRVApI5DcgoN6gOyARl3y9n9_1U"},
{"content":{"body":"> <@littledan:matrix.org> I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.\n\nI need more context as to why this is a serious concern. The argument's I've heard for only advancing deterministic APIs do not seem convincing to me. Non-determinism is good for security. Non-determinism is good for performance. Non-determinism is necessary for a large percentage of existing applications. The only rationale I've heard is replay of execution, but there are other technologies for that and it depends on denial of `Math.random()` and `Date.now()` (and `Temporal.Now`, and numerous other sources of randomness). `Object.hash()` could just as easily be denied or made deterministic to serve that case. Determinism for the sake of Determinism does not serve the web platform.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.</blockquote></mx-reply>I need more context as to why this is a serious concern. The argument's I've heard for only advancing deterministic APIs do not seem convincing to me. Non-determinism is good for security. Non-determinism is good for performance. Non-determinism is necessary for a large percentage of existing applications. The only rationale I've heard is replay of execution, but there are other technologies for that and it depends on denial of <code>Math.random()</code> and <code>Date.now()</code> (and <code>Temporal.Now</code>, and numerous other sources of randomness). <code>Object.hash()</code> could just as easily be denied or made deterministic to serve that case. Determinism for the sake of Determinism does not serve the web platform.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"}},"msgtype":"m.text"},"ts":1712754062347,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sh232sizdl7RRLgfgW4P0t6gtkuk2tQHlGWzCiKuo2s"},
{"content":{"body":"We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I'm especially concerned with the interop risks over time. This all is why we're currently taking the middle path of hiding the identity hashcode.","m.mentions":{},"msgtype":"m.text"},"ts":1712754147279,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec"},
{"content":{"body":"userland re-entracy is also a common concern for proposals. If the equals function is written in userland, this puts userland re-entracy right at the heart of the map internal bucket probing loop. I'll leave it to engine implementations to state how much of a concern that is to them.","m.mentions":{},"msgtype":"m.text"},"ts":1712754250611,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cHEk-jSJ-TeFRPcRaL6mXKHqOXHB6MVT3ikY1PCfXRg"},
{"content":{"body":"what do you mean by reentrancy here?","m.mentions":{},"msgtype":"m.text"},"ts":1712754275056,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IE3Hb0o7RYP9L2svWP_wLEPaQQD5yONST_45W6akRdM"},
{"content":{"body":"leaving C++","m.mentions":{},"msgtype":"m.text"},"ts":1712754283421,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NabNYggf7p87L3ByYZHagy26hDiV5AGlO-MRkOQHCn8"},
{"content":{"body":"back to the application's logic","m.mentions":{},"msgtype":"m.text"},"ts":1712754291244,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CT3plBfaryZXFx0aFm2NovHa0Twtpg0X3Be6hN2J0z8"},
{"content":{"body":"which could re-enter the currently executing function","m.mentions":{},"msgtype":"m.text"},"ts":1712754300328,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$J_7WyYLcaWPBnjRbNyRfK-AkUQN7vVs4Pa6zOHsHkm0"},
{"content":{"body":"> <@littledan:matrix.org> We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I'm especially concerned with the interop risks over time. This all is why we're currently taking the middle path of hiding the identity hashcode.\n\nCan you expand on your concerns about interop risks? A hashcode is not a portable value. It is only relevant during the life of the application. That is the case in every language as far as I know.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>We already know that we must not expose a deterministic identity hashcode operation. But we also have serious issues around nondeterminism. I&#39;m especially concerned with the interop risks over time. This all is why we&#39;re currently taking the middle path of hiding the identity hashcode.</blockquote></mx-reply>Can you expand on your concerns about interop risks? A hashcode is not a portable value. It is only relevant during the life of the application. That is the case in every language as far as I know.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Mlki_I4Hgf7kfe4YBStD90ZbCtg5UfK4KFfMOWFQ8Ec"}},"msgtype":"m.text"},"ts":1712754309408,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bxAQIqVjiG681L972Ztndes3lAJsreD3iJ3bC7OE34E"},
{"content":{"body":" * which could re-enter the currently executing function. Invalidating pointers, if this re-entrancy was not taken into account.\ne.g. the buckets being re-sized while walked","m.mentions":{},"m.new_content":{"body":"which could re-enter the currently executing function. Invalidating pointers, if this re-entrancy was not taken into account.\ne.g. the buckets being re-sized while walked","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$J_7WyYLcaWPBnjRbNyRfK-AkUQN7vVs4Pa6zOHsHkm0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712754361585,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9rdAKIpgAWtb2fAAHVDwDNHLBXPv9mHbIIk4LRv2elU"},
{"content":{"body":"It's easy to imagine someone depending on string hashcodes having certain properties","m.mentions":{},"msgtype":"m.text"},"ts":1712754402416,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY"},
{"content":{"body":"for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off","m.mentions":{},"msgtype":"m.text"},"ts":1712754441077,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk"},
{"content":{"body":"> <@littledan:matrix.org> I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.\n\nGetting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent `Deque`, Work stealing queue, `ConcurrentMap`, and `ConcurrentBag`/`ConcurrentSet`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can understand your concern there but in this chat we've identified some serious concerns with exposing identity hashcodes... maybe it would work better to push on ConcurrentMap as a follow-on for shared structs, rather than these lower-level utilities in other parts of the language.</blockquote></mx-reply>Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent <code>Deque</code>, Work stealing queue, <code>ConcurrentMap</code>, and <code>ConcurrentBag</code>/<code>ConcurrentSet</code>.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M5Q9jJiQ78r8WP-TDjrWIMc9qcSHUvA-K_tpl0fI6PI"}},"msgtype":"m.text"},"ts":1712754575562,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0"},
{"content":{"body":"> <@rbuckton:matrix.org> Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent `Deque`, Work stealing queue, `ConcurrentMap`, and `ConcurrentBag`/`ConcurrentSet`.\n\nsounds like a good argument that we should have a built-in ConcurrentMap, whether as part of shared structs or a follow-on proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Getting shared structs through committee is going to be an uphill battle. Concurrent collections are a necessity to make them practically useful in large-scale applications. If the MVP for shared structs suddenly became stage 4 today I still wouldn't be able to use them for TypeScript without having to build my own concurrent <code>Deque</code>, Work stealing queue, <code>ConcurrentMap</code>, and <code>ConcurrentBag</code>/<code>ConcurrentSet</code>.</blockquote></mx-reply>sounds like a good argument that we should have a built-in ConcurrentMap, whether as part of shared structs or a follow-on proposal","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q_P18AiTydkAuzcZtZ7LsC4b8M7vdGsVsjaFBrTPMB0"}},"msgtype":"m.text"},"ts":1712754622241,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VCRr2oN9rcVIGCyrwqE9qqDMCTqbSfCNMDeyjCjPseI"},
{"content":{"body":"> <@littledan:matrix.org> for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off\n\nThere are easier ways to do this that don't depend on `Object.hash()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>for example you could check whether the hashcode has changed as an indicator of whether your JS program has restarted, which feels off</blockquote></mx-reply>There are easier ways to do this that don't depend on <code>Object.hash()</code>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o8PP7vbVj1RKe9i7JYtRyaRWOfM5rOyncmKctbiXxmk"}},"msgtype":"m.text"},"ts":1712754640117,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eydiLuSJPvJ5hNEjgz6p7uW4qkMphSYAPXBDdD3_Mmg"},
{"content":{"body":"shu: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I hear you have concerns re: import defer and it's usability for the web. happy to talk about it","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1712754651733,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$07YdC2yJ1rBELs4Yv9FvhUaU1CNyG1LMadTq34JXhJE"},
{"content":{"body":"\"this is an uphill battle\" doesn't *necessarily* imply that taking the battle somewhere else will make it easier","format":"org.matrix.custom.html","formatted_body":"\"this is an uphill battle\" doesn't <em>necessarily</em> imply that taking the battle somewhere else will make it easier","m.mentions":{},"msgtype":"m.text"},"ts":1712754669970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk"},
{"content":{"body":"> <@littledan:matrix.org> \"this is an uphill battle\" doesn't *necessarily* imply that taking the battle somewhere else will make it easier\n\nThere's nowhere else to take it, IMO. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>\"this is an uphill battle\" doesn't <em>necessarily</em> imply that taking the battle somewhere else will make it easier</blockquote></mx-reply>There's nowhere else to take it, IMO.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ESRlLoLLGr3eK1tQFn-Cw9Y7RQIhtSJVXyuV5rio2kk"}},"msgtype":"m.text"},"ts":1712754702664,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L3oRL4WwIK_htEp1Cbv1g6Q8sHEd4-XiwFVpiMXiJzk"},
{"content":{"body":"> <@littledan:matrix.org> It's easy to imagine someone depending on string hashcodes having certain properties\n\nPretty much every hash generation API in every language include documentation that hash codes are not stable across application restarts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It&#39;s easy to imagine someone depending on string hashcodes having certain properties</blockquote></mx-reply>Pretty much every hash generation API in every language include documentation that hash codes are not stable across application restarts.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f5gqTtdASxmrqBgq1rKZ9Yso3Sy_ktXUi_gj8xlihHY"}},"msgtype":"m.text"},"ts":1712754752535,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qGQTZQCDKq1eDmnmTGLxXUyQW2FuVshYrrD9inMmPGY"}
]