[
{"content":{"body":"If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding","m.mentions":{},"msgtype":"m.text"},"ts":1712707263754,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nV8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by joyee :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>V8 rotates its hash function on boot, but at some point there was a security issue where, if you put some Maps in the startup snapshot (which Chrome doesn't do, but Node.js started doing at some point), it forgot to re-rotate them, causing a DOS risk of this form! Fixed by <a href=\"https://matrix.to/#/@qzhang:igalia.com\">joyee</a> :)","m.mentions":{"user_ids":["@waldemarh:matrix.org","@qzhang:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712709626514,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jrqzhr8MDdS5_tXkZ8w8hHMyMtJhPHANUNpucFjMFr4"},
{"content":{"body":"I am not sure what we're supposed to get from Project Valhalla when primitives/value semantics has already been deemed not an option due to implementability issues","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$jbWZ-JIVp1jNFe2_Y0MmT1Qr38MeENTgdrrTG8BUXHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713794096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},
{"content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms that aren't based on classes.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$ngizBDi74Fk1aCt1n742uIOhPPpszInQKrZSj4kNFik"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712713867105,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},
{"content":{"body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":" * if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"m.new_content":{"body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","format":"org.matrix.custom.html","formatted_body":"if the question is class-based vs object-based immutable things, I think there's a lot of interest among JS developers in having easy-to-use mechanisms for immutable data structures that don't force them to write classes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712713881072,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_Ndd3J0dx-HHnZfkep1EPTOm4DiJSWxBBb30nLohwtI"},
{"content":{"body":"> <@waldemarh:matrix.org> If you care about performance, it's a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding\n\nPerformance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you care about performance, it&#39;s a bad idea to feed external input into a deterministic hash function. That invites attacks such as Hash Flooding: https://en.wikipedia.org/wiki/Collision_attack#Hash_flooding</blockquote></mx-reply>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eSpQxYv3Q1Lqol9Z8Des0HKSKxVm1TfhD_ooVAz9YBg"}},"msgtype":"m.text"},"ts":1712714042864,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"},
{"content":{"body":"There's a lot of complexity with class-based immutable things, e.g., we'd need to use initializer list-based constructors, so if there's subclassing it's a totally different instantiation protocol. And if they're value types, it's even more complicated if we want to avoid any kind of global registries like we discussed with shared structs.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mgbz80i1poFYbtJTILZ1AjPp7uP_uRyb5x9omv_kDHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714070944,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},
{"content":{"body":"> <@rbuckton:matrix.org> Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.\n\nRight so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Performance and/or security. This is one of the reasons why I indicated non-determinism for string hashing between application restarts is a good thing, actually.</blockquote></mx-reply>Right so given that it's simultaneously a good thing and a bad thing, we've so far opted to hide the hashcodes","m.mentions":{"user_ids":["@rbuckton:matrix.org","@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nSm2egsQrnJbyV6fBcNRRhTGgLLjmGrU7PGh2ora_eU"}},"msgtype":"m.text"},"ts":1712714148841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SFfqjj_OjIfZffh-aY93N81shhWgoN2jVC7gg9IUZ3o"},
{"content":{"body":"The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.","m.mentions":{},"msgtype":"m.text"},"ts":1712714451335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"},
{"content":{"body":"I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are\n\n- even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are `==` each other is useful\n- they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)","format":"org.matrix.custom.html","formatted_body":"<p>I don't know that class-based vs object-based is a meaningful distinction in JS, but in any case, the main things I want to take away are</p>\n<ul>\n<li>even in a language with a well-established idiom for .equals/.hash, having the ability to conveniently create objects which are <code>==</code> each other is useful</li>\n<li>they've explored some of the relevant space already, such as having WeakMaps which reject these values (though, this being Java, that behavior is customizable)</li>\n</ul>\n","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$EmbyAWNPuyWSONL_GRN1iEf5_SJnYtjZaT4Kb9CuBo4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712714646637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},
{"content":{"body":"The overhead incurred by a `CompositeKey` just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a `Hasher` class instead of a global `Object.hash()`. A given `Hasher` could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like `{ equals(a, b), hash(obj, hasher) }` and you then can write `new Map([], { equaler, hasher })`. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","format":"org.matrix.custom.html","formatted_body":"The overhead incurred by a <code>CompositeKey</code> just seems like a non-starter to me. Maybe we could find another approach that can overcome these caveats. For example, a <code>Hasher</code> class instead of a global <code>Object.hash()</code>. A given <code>Hasher</code> could just use a monotonically increasing number for each unique object instance it comes across, and maybe is configurable as to how it handles string hashing (e.g., algorithm, randomness, seed values, etc.). Then your equaler looks like <code>{ equals(a, b), hash(obj, hasher) }</code> and you then can write <code>new Map([], { equaler, hasher })</code>. Object hashes could be deterministic without being a global communications channel. String hashing can be deterministic if you want it to be, or not, as best fits your scenario.","m.mentions":{},"msgtype":"m.text"},"ts":1712715411726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bg1W0LLGN4sWaWZB0flLuqsdg6fHWSHcxZ3-dkuRJdQ"},
{"content":{"body":"yes, I agree that having objects which === each other is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$io3RbChnpKUA0pCvpBPlbs3hT77Og17A3akx82gEK1s"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716410028,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},
{"content":{"body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":" * yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","format":"org.matrix.custom.html","formatted_body":"yes, I agree that having values which === each other based on their contents is useful; it's unfortunate that we can't go in that direction per implementer feedback, but I think we can still find many related but different improvements to JavaScript.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716493019,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hX9LfAotBLTa8GEgEcZKOV_KkJL37vXmmTSdWSu3eS8"},
{"content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had classes, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$bkcCk7RnbsXaTkcz6E-RGoOrQexuA5UxHv82G0N8jeQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712716520038,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through the instantiation protocol. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716537526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4NyJyc5_smyLau9RZ_yTHRz-A13SXQdVWJ0gg94ILxw"},
{"content":{"body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":" * Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{},"m.new_content":{"body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how `new` works. But it's also useful to look at other issues in this area which don't relate to those.","format":"org.matrix.custom.html","formatted_body":"Class-based vs object-based is more about syntax and conventions. I think these sorts of features are more likely to have broad adoption with convenient syntax, especially with something related to object/array syntax. If we had class syntax, we'd have to think through how <code>new</code> works. But it's also useful to look at other issues in this area which don't relate to those.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tfmoyUNPd4Mw5nM3HqTlRwNxXwWZLZMI-R4LbqaeDJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712716550373,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Clhfx8SK8vX0aThYFvDo5CX72oyIhxmCtGxQ6-bawjc"},
{"content":{"body":"> The overhead incurred by a CompositeKey just seems like a non-starter to me.\n\nIf this means one which is interned so that === works, I agree","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The overhead incurred by a CompositeKey just seems like a non-starter to me.</p>\n</blockquote>\n<p>If this means one which is interned so that === works, I agree</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712716606538,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$je5mnJTS3n1KFKrc0nIxgD5sSE7jTl6Lfk0OPcNdbvg"},
{"content":{"body":"> <@rbuckton:matrix.org> The \"bad thing\" case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.\n\nHow do you think we should work through the situation where a bunch of people directly disagree with this judgement?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The &quot;bad thing&quot; case (non-determinism being bad) seems so narrowly focused that I have a hard time believing it should apply broadly across the language.</blockquote></mx-reply>How do you think we should work through the situation where a bunch of people directly disagree with this judgement?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VtkUgiF8SycSiJXVyS-Dk6418Zz9w-fepziXsSoY7gg"}},"msgtype":"m.text"},"ts":1712716641938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z8r221W3fcNXOar-4EWAtM_pp_vykyZZ-Td8pMOsY24"}
]