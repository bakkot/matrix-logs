[
{"content":{"body":"> <@devsnek:matrix.org> yeah i don't agree with the prediction \n\nI'd be more inclined to agree if we weren't making it so convenient. If these were just additions to built-in iterators and *maybe* generators, I'd be less concerned. Introducing a global `Iterator` and an adapter like `Iterator.from` feels more like TC39 blessing this as \"the way\", which I'm not comfortable with. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4H0GXXQuUj2K9wkk4kjPyycDZOD8Y6eBlSrAofoPMcE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br />yeah i don't agree with the prediction</blockquote></mx-reply>I'd be more inclined to agree if we weren't making it so convenient. If these were just additions to built-in iterators and <em>maybe</em> generators, I'd be less concerned. Introducing a global <code>Iterator</code> and an adapter like <code>Iterator.from</code> feels more like TC39 blessing this as &quot;the way&quot;, which I'm not comfortable with.","m.relates_to":{"m.in_reply_to":{"event_id":"$4H0GXXQuUj2K9wkk4kjPyycDZOD8Y6eBlSrAofoPMcE"}},"msgtype":"m.text"},"ts":1662422902085,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HVvBw0oL6KhWrmUmcoPp-HrMsT_E9VUv7hfjkx0QELs"},
{"content":{"body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","format":"org.matrix.custom.html","formatted_body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.","msgtype":"m.text"},"ts":1662423189883,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU"},
{"content":{"body":"* Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","m.new_content":{"body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","format":"org.matrix.custom.html","formatted_body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.","msgtype":"m.text"},"m.relates_to":{"event_id":"$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1662423204232,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KYEw75X92R2q6v1nS80su-dJsqURjPajJVTRVHzXJ3U"},
{"content":{"body":"if pipeline moved forward","msgtype":"m.text","org.matrix.msc1767.text":"if pipeline moved forward"},"ts":1662423483817,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BGAb1uueFh38hhg9Jz_b4-1C_KJf0QoZxekoG1U_n7k"},
{"content":{"body":"i wouldn't be wholly against functions","msgtype":"m.text","org.matrix.msc1767.text":"i wouldn't be wholly against functions"},"ts":1662423495836,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NqwdHLCshkujYYMa_w4IyFUDnRuIbxL9UssewDROe_o"},
{"content":{"body":"but without that there's no point even discussing it","msgtype":"m.text","org.matrix.msc1767.text":"but without that there's no point even discussing it"},"ts":1662423507274,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$40_fMRMK5qAQ1vw_Ry6wwATxtG9q6ch1fclwv74FMnM"},
{"content":{"body":"As much as I still prefer F#-style, if pipeline could settle on a topic I'd be happy.","msgtype":"m.text","org.matrix.msc1767.text":"As much as I still prefer F#-style, if pipeline could settle on a topic I'd be happy."},"ts":1662425964343,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0bhwTJVbtefwuHQBX6FTHvpQ3to7X2h60nZpljWyifU"},
{"content":{"body":"> <@devsnek:matrix.org> temporal achieved this by being large and complex\n\nTemporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that `.now()` is detached into its own thing is exceedingly frustrating the times I've used it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>temporal achieved this by being large and complex</blockquote></mx-reply>Temporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that <code>.now()</code> is detached into its own thing is exceedingly frustrating the times I've used it.","m.relates_to":{"m.in_reply_to":{"event_id":"$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> temporal achieved this by being large and complex\n\nTemporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that `.now()` is detached into its own thing is exceedingly frustrating the times I've used it.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>temporal achieved this by being large and complex</blockquote></mx-reply>Temporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that <code>.now()</code> is detached into its own thing is exceedingly frustrating the times I've used it.","mimetype":"text/html"}]},"ts":1662426107850,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xeo14v9gs324sYQp_-JBsgknflAy3GanVNI3pKEyC2g"},
{"content":{"body":"It's like 10 steps forward and 5 steps back","msgtype":"m.text","org.matrix.msc1767.text":"It's like 10 steps forward and 5 steps back"},"ts":1662426125624,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cfRhAYXjGUw-e7gL1fTNCkLEuXaHdX2kmE5xe_Bc9pM"},
{"content":{"body":"Determining whether an `Instant` occurs in the past is painfully verbose:\n```js\nTemporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n```\nBut it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.","format":"org.matrix.custom.html","formatted_body":"<p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on &quot;only one way to do it&quot;, regardless of convenience.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Determining whether an `Instant` occurs in the past is painfully verbose:\n```js\nTemporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n```\nBut it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.","mimetype":"text/plain"},{"body":"<p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on &quot;only one way to do it&quot;, regardless of convenience.</p>\n","mimetype":"text/html"}]},"ts":1662426352203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk"},
{"content":{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"ts":1662426555350,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$I0AnKznjkZwiHZAWGdsn-UjaUKurzadUFTo6H1OUlzM"},
{"content":{"body":" * I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":" * I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","m.new_content":{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$I0AnKznjkZwiHZAWGdsn-UjaUKurzadUFTo6H1OUlzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":" * I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"ts":1662426562262,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$G3XaY6wgJ-RWzo-2AOP932-buUCHjXK45ZO9GTMoaYY"},
{"content":{"body":"> <@rbuckton:matrix.org> Determining whether an `Instant` occurs in the past is painfully verbose:\n> ```js\n> Temporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n> ```\n> But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.\n\nI hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic `isBefore` / `isAfter` method because we had to draw the line somewhere","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.</p>\n</blockquote></mx-reply>I hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic <code>isBefore</code> / <code>isAfter</code> method because we had to draw the line somewhere","m.relates_to":{"m.in_reply_to":{"event_id":"$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Determining whether an `Instant` occurs in the past is painfully verbose:\n> ```js\n> Temporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n> ```\n> But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.\n\nI hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic `isBefore` / `isAfter` method because we had to draw the line somewhere","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.</p>\n</blockquote></mx-reply>I hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic <code>isBefore</code> / <code>isAfter</code> method because we had to draw the line somewhere","mimetype":"text/html"}]},"ts":1662426845561,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$OGUebo5m9QfoNd6YLoPt1DtKshcO8O0Hdq5Hd64W5kY"},
{"content":{"body":"you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6","msgtype":"m.text","org.matrix.msc1767.text":"you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6"},"ts":1662426893819,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$zGWI17dIShki_ZBEIZAclcRHjhrWVn_-BRMtzzBZwgI"},
{"content":{"body":"its interesting that `compare` is not an instance method","format":"org.matrix.custom.html","formatted_body":"its interesting that <code>compare</code> is not an instance method","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"its interesting that `compare` is not an instance method","mimetype":"text/plain"},{"body":"its interesting that <code>compare</code> is not an instance method","mimetype":"text/html"}]},"ts":1662426896874,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$N0gFWeloIIRWiBBDnbemLeREH87-cOkIZvAfKOun2Hk"}
]