[
{"content":{"body":"> <@devsnek:matrix.org> yeah i don't agree with the prediction \n\nI'd be more inclined to agree if we weren't making it so convenient. If these were just additions to built-in iterators and *maybe* generators, I'd be less concerned. Introducing a global `Iterator` and an adapter like `Iterator.from` feels more like TC39 blessing this as \"the way\", which I'm not comfortable with. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4H0GXXQuUj2K9wkk4kjPyycDZOD8Y6eBlSrAofoPMcE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br />yeah i don't agree with the prediction</blockquote></mx-reply>I'd be more inclined to agree if we weren't making it so convenient. If these were just additions to built-in iterators and <em>maybe</em> generators, I'd be less concerned. Introducing a global <code>Iterator</code> and an adapter like <code>Iterator.from</code> feels more like TC39 blessing this as &quot;the way&quot;, which I'm not comfortable with.","m.relates_to":{"m.in_reply_to":{"event_id":"$4H0GXXQuUj2K9wkk4kjPyycDZOD8Y6eBlSrAofoPMcE"}},"msgtype":"m.text"},"ts":1662422902085,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HVvBw0oL6KhWrmUmcoPp-HrMsT_E9VUv7hfjkx0QELs"},
{"content":{"body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","format":"org.matrix.custom.html","formatted_body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.","msgtype":"m.text"},"ts":1662423189883,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU"},
{"content":{"body":"* Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","m.new_content":{"body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough. ","format":"org.matrix.custom.html","formatted_body":"Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.","msgtype":"m.text"},"m.relates_to":{"event_id":"$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1662423204232,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KYEw75X92R2q6v1nS80su-dJsqURjPajJVTRVHzXJ3U"},
{"content":{"body":"if pipeline moved forward","msgtype":"m.text","org.matrix.msc1767.text":"if pipeline moved forward"},"ts":1662423483817,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BGAb1uueFh38hhg9Jz_b4-1C_KJf0QoZxekoG1U_n7k"},
{"content":{"body":"i wouldn't be wholly against functions","msgtype":"m.text","org.matrix.msc1767.text":"i wouldn't be wholly against functions"},"ts":1662423495836,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NqwdHLCshkujYYMa_w4IyFUDnRuIbxL9UssewDROe_o"},
{"content":{"body":"but without that there's no point even discussing it","msgtype":"m.text","org.matrix.msc1767.text":"but without that there's no point even discussing it"},"ts":1662423507274,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$40_fMRMK5qAQ1vw_Ry6wwATxtG9q6ch1fclwv74FMnM"},
{"content":{"body":"As much as I still prefer F#-style, if pipeline could settle on a topic I'd be happy.","msgtype":"m.text","org.matrix.msc1767.text":"As much as I still prefer F#-style, if pipeline could settle on a topic I'd be happy."},"ts":1662425964343,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0bhwTJVbtefwuHQBX6FTHvpQ3to7X2h60nZpljWyifU"},
{"content":{"body":"> <@devsnek:matrix.org> temporal achieved this by being large and complex\n\nTemporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that `.now()` is detached into its own thing is exceedingly frustrating the times I've used it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>temporal achieved this by being large and complex</blockquote></mx-reply>Temporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that <code>.now()</code> is detached into its own thing is exceedingly frustrating the times I've used it.","m.relates_to":{"m.in_reply_to":{"event_id":"$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> temporal achieved this by being large and complex\n\nTemporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that `.now()` is detached into its own thing is exceedingly frustrating the times I've used it.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ImAvl8m-aEFq3q_hVmLfbT5VTbEq8L4Dtd7PrkJZ50w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>temporal achieved this by being large and complex</blockquote></mx-reply>Temporal is amazing for constructing date, time, and tz info. Its API for comparing dates/times is unfortunately ungainly since there's no mechanism for operator overloading, and the fact that <code>.now()</code> is detached into its own thing is exceedingly frustrating the times I've used it.","mimetype":"text/html"}]},"ts":1662426107850,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xeo14v9gs324sYQp_-JBsgknflAy3GanVNI3pKEyC2g"},
{"content":{"body":"It's like 10 steps forward and 5 steps back","msgtype":"m.text","org.matrix.msc1767.text":"It's like 10 steps forward and 5 steps back"},"ts":1662426125624,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cfRhAYXjGUw-e7gL1fTNCkLEuXaHdX2kmE5xe_Bc9pM"},
{"content":{"body":"Determining whether an `Instant` occurs in the past is painfully verbose:\n```js\nTemporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n```\nBut it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.","format":"org.matrix.custom.html","formatted_body":"<p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on &quot;only one way to do it&quot;, regardless of convenience.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Determining whether an `Instant` occurs in the past is painfully verbose:\n```js\nTemporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n```\nBut it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.","mimetype":"text/plain"},{"body":"<p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on &quot;only one way to do it&quot;, regardless of convenience.</p>\n","mimetype":"text/html"}]},"ts":1662426352203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk"},
{"content":{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"ts":1662426555350,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$I0AnKznjkZwiHZAWGdsn-UjaUKurzadUFTo6H1OUlzM"},
{"content":{"body":" * I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":" * I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","m.new_content":{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","format":"org.matrix.custom.html","formatted_body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":"I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$I0AnKznjkZwiHZAWGdsn-UjaUKurzadUFTo6H1OUlzM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I don't like `Temporal.Now` either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/plain"},{"body":" * I don't like <code>Temporal.Now</code> either! but it's always been a hard requirement from the plenary AFAIU","mimetype":"text/html"}]},"ts":1662426562262,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$G3XaY6wgJ-RWzo-2AOP932-buUCHjXK45ZO9GTMoaYY"},
{"content":{"body":"> <@rbuckton:matrix.org> Determining whether an `Instant` occurs in the past is painfully verbose:\n> ```js\n> Temporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n> ```\n> But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.\n\nI hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic `isBefore` / `isAfter` method because we had to draw the line somewhere","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.</p>\n</blockquote></mx-reply>I hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic <code>isBefore</code> / <code>isAfter</code> method because we had to draw the line somewhere","m.relates_to":{"m.in_reply_to":{"event_id":"$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Determining whether an `Instant` occurs in the past is painfully verbose:\n> ```js\n> Temporal.Instant.compare(instant, Temporal.Now.instant()) < 0\n> ```\n> But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.\n\nI hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic `isBefore` / `isAfter` method because we had to draw the line somewhere","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ALpGWpMPa58l8WosDCvIOj40MCnyaWqVRFeX0Zmh4xk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Determining whether an <code>Instant</code> occurs in the past is painfully verbose:</p>\n<pre><code class=\"language-js\">Temporal.Instant.compare(instant, Temporal.Now.instant()) &lt; 0\n</code></pre>\n<p>But it seems like the API design is very focused on \"only one way to do it\", regardless of convenience.</p>\n</blockquote></mx-reply>I hope nothing I've said caused you to get this impression; eliminating multiple ways to achieve the same thing is not something we've spent time on at all! there's no idiomatic <code>isBefore</code> / <code>isAfter</code> method because we had to draw the line somewhere","mimetype":"text/html"}]},"ts":1662426845561,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$OGUebo5m9QfoNd6YLoPt1DtKshcO8O0Hdq5Hd64W5kY"},
{"content":{"body":"you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6","msgtype":"m.text","org.matrix.msc1767.text":"you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6"},"ts":1662426893819,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$zGWI17dIShki_ZBEIZAclcRHjhrWVn_-BRMtzzBZwgI"},
{"content":{"body":"its interesting that `compare` is not an instance method","format":"org.matrix.custom.html","formatted_body":"its interesting that <code>compare</code> is not an instance method","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"its interesting that `compare` is not an instance method","mimetype":"text/plain"},{"body":"its interesting that <code>compare</code> is not an instance method","mimetype":"text/html"}]},"ts":1662426896874,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$N0gFWeloIIRWiBBDnbemLeREH87-cOkIZvAfKOun2Hk"},
{"content":{"body":"I think a more general `compareTo` is better.","format":"org.matrix.custom.html","formatted_body":"I think a more general <code>compareTo</code> is better.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think a more general `compareTo` is better.","mimetype":"text/plain"},{"body":"I think a more general <code>compareTo</code> is better.","mimetype":"text/html"}]},"ts":1662426912543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$da7MLPILfhtAk5hyuDqGCwOVQGx7MiiPaX2pfbQ2olc"},
{"content":{"body":"> <@devsnek:matrix.org> its interesting that `compare` is not an instance method\n\nIts good as a static method for use with `.sort()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N0gFWeloIIRWiBBDnbemLeREH87-cOkIZvAfKOun2Hk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>its interesting that <code>compare</code> is not an instance method</blockquote></mx-reply>Its good as a static method for use with <code>.sort()</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$N0gFWeloIIRWiBBDnbemLeREH87-cOkIZvAfKOun2Hk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> its interesting that `compare` is not an instance method\n\nIts good as a static method for use with `.sort()`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N0gFWeloIIRWiBBDnbemLeREH87-cOkIZvAfKOun2Hk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>its interesting that <code>compare</code> is not an instance method</blockquote></mx-reply>Its good as a static method for use with <code>.sort()</code>","mimetype":"text/html"}]},"ts":1662426923916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$un6QnrmFx6XjUHcNCSrB15WzFYZQvwEp8lGk2sBNdyY"},
{"content":{"body":"but either way i'm fine with this, people who care deeply about temporal apis are already working on this as has been linked 😄","msgtype":"m.text","org.matrix.msc1767.text":"but either way i'm fine with this, people who care deeply about temporal apis are already working on this as has been linked 😄"},"ts":1662426934865,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nEyeGWpn_UZHXIyqNtfOiyHvlKSixtVhHe_oZtaUWu8"},
{"content":{"body":"> <@pchimento:igalia.com> you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6\n\nIIRC I commented on a thread about this in the proposal repo at one point","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zGWI17dIShki_ZBEIZAclcRHjhrWVn_-BRMtzzBZwgI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6</blockquote></mx-reply>IIRC I commented on a thread about this in the proposal repo at one point","m.relates_to":{"m.in_reply_to":{"event_id":"$zGWI17dIShki_ZBEIZAclcRHjhrWVn_-BRMtzzBZwgI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@pchimento:igalia.com> you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6\n\nIIRC I commented on a thread about this in the proposal repo at one point","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zGWI17dIShki_ZBEIZAclcRHjhrWVn_-BRMtzzBZwgI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>you may want to subscribe to https://github.com/js-temporal/proposal-temporal-v2/issues/6</blockquote></mx-reply>IIRC I commented on a thread about this in the proposal repo at one point","mimetype":"text/html"}]},"ts":1662426964939,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qVQ_-MavWFq8DvWmmzwgItTG5BdnPh2qiUFZC8pNGW4"},
{"content":{"body":"> <@rbuckton:matrix.org> Its good as a static method for use with `.sort()`\n\nyeah personally i'd say just write an arrow function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$un6QnrmFx6XjUHcNCSrB15WzFYZQvwEp8lGk2sBNdyY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Its good as a static method for use with <code>.sort()</code></blockquote></mx-reply>yeah personally i'd say just write an arrow function","m.relates_to":{"m.in_reply_to":{"event_id":"$un6QnrmFx6XjUHcNCSrB15WzFYZQvwEp8lGk2sBNdyY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Its good as a static method for use with `.sort()`\n\nyeah personally i'd say just write an arrow function","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$un6QnrmFx6XjUHcNCSrB15WzFYZQvwEp8lGk2sBNdyY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Its good as a static method for use with <code>.sort()</code></blockquote></mx-reply>yeah personally i'd say just write an arrow function","mimetype":"text/html"}]},"ts":1662427024236,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$a8NnjVbUt4wDwFBhXR00xXhyjXwOdkDMPIURacAnCcc"},
{"content":{"body":"but this is the sort of thing","msgtype":"m.text","org.matrix.msc1767.text":"but this is the sort of thing"},"ts":1662427027099,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fHFlVd1ZfIf_cGtPpcJG8njvlK9xAR1eYfODU4izf0E"},
{"content":{"body":"Or maybe it was in matrix. I can't find the issue.","msgtype":"m.text","org.matrix.msc1767.text":"Or maybe it was in matrix. I can't find the issue."},"ts":1662427027859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wBrHPTrdcCdPCccNVgz_SPqw-oTEVzhhcpchQfa7Ynw"},
{"content":{"body":"i much prefer it existing at all","msgtype":"m.text","org.matrix.msc1767.text":"i much prefer it existing at all"},"ts":1662427033052,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nQZgy93Df2BeU1luGFBnDZ9UKDPz7zDW8LvVuq4fVcc"},
{"content":{"body":"to it going back and forth based on my opinion","msgtype":"m.text","org.matrix.msc1767.text":"to it going back and forth based on my opinion"},"ts":1662427039648,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ru9jZZ9_Ec7TWnjh5lwRRgONK3jW8VCHHTkBvtwESss"},
{"content":{"body":"so 🤷","msgtype":"m.text","org.matrix.msc1767.text":"so 🤷"},"ts":1662427043558,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Lxav1qPNNuok8q3ZaJSjeRnmijK2l4n8zpEX7FLf9lc"},
{"content":{"body":"I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","format":"org.matrix.custom.html","formatted_body":"<p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","mimetype":"text/plain"},{"body":"<p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","mimetype":"text/html"}]},"ts":1662427256165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2dhkdF2G9aSXppC3yvccuyCvuwjyQke3NraujaM2T5Y"},
{"content":{"body":" * I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","format":"org.matrix.custom.html","formatted_body":" * <p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","m.new_content":{"body":"I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","format":"org.matrix.custom.html","formatted_body":"<p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","mimetype":"text/plain"},{"body":"<p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$2dhkdF2G9aSXppC3yvccuyCvuwjyQke3NraujaM2T5Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I really want to introduce generic comparison (not operators) at some point, i.e.:\n\n```ts\ninterface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n```\n\nAnd allow you to pass an `Equaler` to a `Map`/`Set` constructor, and add things like a `SortedMap`/`StortedSet` like I put together in `@esfx/equaler`, `@esfx/collections-hashmap`, `@esfx/collections-hashset`, `@esfx/collections-stortedmap`, `@esfx/collections-sortedset` (which I wrote as a test bed to test out the implementation).","mimetype":"text/plain"},{"body":" * <p>I really want to introduce generic comparison (not operators) at some point, i.e.:</p>\n<pre><code class=\"language-ts\">interface Equaler {\n  equals(a, b): boolean;\n  hashCode(x): number;\n}\ninterface Comparer {\n  compareTo(a, b): number;\n}\n</code></pre>\n<p>And allow you to pass an <code>Equaler</code> to a <code>Map</code>/<code>Set</code> constructor, and add things like a <code>SortedMap</code>/<code>StortedSet</code> like I put together in <code>@esfx/equaler</code>, <code>@esfx/collections-hashmap</code>, <code>@esfx/collections-hashset</code>, <code>@esfx/collections-stortedmap</code>, <code>@esfx/collections-sortedset</code> (which I wrote as a test bed to test out the implementation).</p>\n","mimetype":"text/html"}]},"ts":1662427278850,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mPlG-DhHAxkpf0R0p1iRUKIZqUD5abCzcHnIPmNMJSQ"},
{"content":{"body":"I'd love to be able to have a `Map` whose keys are `URL` or `Temporal.Instant` without having to coerce to a string.","format":"org.matrix.custom.html","formatted_body":"I'd love to be able to have a <code>Map</code> whose keys are <code>URL</code> or <code>Temporal.Instant</code> without having to coerce to a string.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'd love to be able to have a `Map` whose keys are `URL` or `Temporal.Instant` without having to coerce to a string.","mimetype":"text/plain"},{"body":"I'd love to be able to have a <code>Map</code> whose keys are <code>URL</code> or <code>Temporal.Instant</code> without having to coerce to a string.","mimetype":"text/html"}]},"ts":1662427310708,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VIsl8IYxRaUGhtnvWeu-M3xLjGJItQ3gRPQy25doy0w"},
{"content":{"body":"I’ve done similar work with only slightly different names.","msgtype":"m.text","org.matrix.msc1767.text":"I’ve done similar work with only slightly different names."},"ts":1662427312384,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FlHeye3L8RbE47gommujp33wVSf6tzDTwqYz5Il8oFU"},
{"content":{"body":"We had a relevant conversation about deep equality at the most recent SES meeting.","msgtype":"m.text","org.matrix.msc1767.text":"We had a relevant conversation about deep equality at the most recent SES meeting."},"ts":1662427351188,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Tx9duI6s3XW_tLa-_ozmxtzWoclCmKS9i7V_Nu48QJ0"},
{"content":{"body":"> <@rbuckton:matrix.org> Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.\n\nThe patching of Array which we occasionally run into is almost entirely pre-ES6 libraries. People are not at all doing that these days, from what I can tell. So I don't really share this concern. Evangelism about not doing that worked, eventually, especially once we started actually adding useful stuff ever.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.</blockquote></mx-reply>The patching of Array which we occasionally run into is almost entirely pre-ES6 libraries. People are not at all doing that these days, from what I can tell. So I don't really share this concern. Evangelism about not doing that worked, eventually, especially once we started actually adding useful stuff ever.","m.relates_to":{"m.in_reply_to":{"event_id":"$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.\n\nThe patching of Array which we occasionally run into is almost entirely pre-ES6 libraries. People are not at all doing that these days, from what I can tell. So I don't really share this concern. Evangelism about not doing that worked, eventually, especially once we started actually adding useful stuff ever.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$agWtzqf-9gNnyF-cwQ5iuaAtqyc_D86wJ5F5jOuoKcU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Augmenting IteratorPrototype and making it easier to reach for just feels like another opportunity for Array.prototype-like patching that we've been dealing with for years, especially if people start feeling like the helpers available aren't comprehensive enough.</blockquote></mx-reply>The patching of Array which we occasionally run into is almost entirely pre-ES6 libraries. People are not at all doing that these days, from what I can tell. So I don't really share this concern. Evangelism about not doing that worked, eventually, especially once we started actually adding useful stuff ever.","mimetype":"text/html"}]},"ts":1662427352399,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qg4aBwapvotd_BAGgwf5vqrGSBqF6anchrCEQygMQYU"},
{"content":{"body":"SES meeting on deep equality, where we differentiate structural deep equality and deep equality protocols https://youtu.be/z_gXDSYKlWI","msgtype":"m.text","org.matrix.msc1767.text":"SES meeting on deep equality, where we differentiate structural deep equality and deep equality protocols https://youtu.be/z_gXDSYKlWI"},"ts":1662427415006,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-V7hS0kIIcctoaH7YmGpcP5qbJKggxIKr4XH1TO0Bgc"},
{"content":{"body":"Equality, hash, and compare protocols are in http://www.collectionsjs.com/","msgtype":"m.text","org.matrix.msc1767.text":"Equality, hash, and compare protocols are in http://www.collectionsjs.com/"},"ts":1662427483638,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$3Ek-q998oOaMB4xiR0mY_oz_Dj9h7U1R4rwuMb7M0Bc"},
{"content":{"body":"(CollectionsJS isn’t a viable project in its current form because I mispredicted some Array shims. Ooops.)","msgtype":"m.text","org.matrix.msc1767.text":"(CollectionsJS isn’t a viable project in its current form because I mispredicted some Array shims. Ooops.)"},"ts":1662427535258,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jPTJhixshNRZJZbgX_LlKut5uxBJUWcnTY5LlzPKjn4"},
{"content":{"body":"`@esfx/equatable` has definitions for equality, comparability, structural equality, and structural comparability.","format":"org.matrix.custom.html","formatted_body":"<code>@esfx/equatable</code> has definitions for equality, comparability, structural equality, and structural comparability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`@esfx/equatable` has definitions for equality, comparability, structural equality, and structural comparability.","mimetype":"text/plain"},{"body":"<code>@esfx/equatable</code> has definitions for equality, comparability, structural equality, and structural comparability.","mimetype":"text/html"}]},"ts":1662427597919,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$618-Uk8ALcoxgfbrKn8zovVDH1sccBPDjre5GY_fEpE"},
{"content":{"body":"Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups.","msgtype":"m.text","org.matrix.msc1767.text":"Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups."},"ts":1662427642987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Dm49m6NEF-E05Y1i4bqVFkIfb7Jf8ThEZ_OHkhYtLfw"},
{"content":{"body":" * Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups.","m.new_content":{"body":"Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups.","msgtype":"m.text","org.matrix.msc1767.text":"Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups."},"m.relates_to":{"event_id":"$Dm49m6NEF-E05Y1i4bqVFkIfb7Jf8ThEZ_OHkhYtLfw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Though my most recent npm publish (today) has a few issues I'm trying to fix. I just switched the hashCode generation to use native code on Node when possible and that's had some hiccups."},"ts":1662427675960,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fVWXgc0x-mu1YaU_LnARSLPtBTIA4ziRP84665yZZ_o"},
{"content":{"body":"Adding protocols to the standard library probably means different Map and Set implementations or a very clever system for overloading their behavior.","msgtype":"m.text","org.matrix.msc1767.text":"Adding protocols to the standard library probably means different Map and Set implementations or a very clever system for overloading their behavior."},"ts":1662427680470,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8idtGVOMyfgsbw0dVWngiZooqaHLUQOMpD9lRjeYihc"},
{"content":{"body":"i really wish we had a `System.hash(v)` api","format":"org.matrix.custom.html","formatted_body":"i really wish we had a <code>System.hash(v)</code> api","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i really wish we had a `System.hash(v)` api","mimetype":"text/plain"},{"body":"i really wish we had a <code>System.hash(v)</code> api","mimetype":"text/html"}]},"ts":1662427770168,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KBmMQ86UBzkgyu2RZOeev1zbdpIB9nesfPN_ZBfKbKk"},
{"content":{"body":"Collections went the cheap route of random numbers and a weak map. It predates intrinsic Map and Set, so there it does some odd stuff. But, not surfacing information divined from pointers is important.","msgtype":"m.text","org.matrix.msc1767.text":"Collections went the cheap route of random numbers and a weak map. It predates intrinsic Map and Set, so there it does some odd stuff. But, not surfacing information divined from pointers is important."},"ts":1662427772363,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bvbYugRwl5n77xe6zJZpW6aQzZyRdJsSw5T9XQhRGMY"},
{"content":{"body":"so we could write our own collections","msgtype":"m.text","org.matrix.msc1767.text":"so we could write our own collections"},"ts":1662427776391,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Uzsx_yDxxr7lgOIek059K2ucUr0pfNbUE8DnZB75Qbc"},
{"content":{"body":"Agreed. `@esfx/equatable` exposes a `rawHash(v)` API which is essentially the same.","format":"org.matrix.custom.html","formatted_body":"Agreed. <code>@esfx/equatable</code> exposes a <code>rawHash(v)</code> API which is essentially the same.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Agreed. `@esfx/equatable` exposes a `rawHash(v)` API which is essentially the same.","mimetype":"text/plain"},{"body":"Agreed. <code>@esfx/equatable</code> exposes a <code>rawHash(v)</code> API which is essentially the same.","mimetype":"text/html"}]},"ts":1662427816110,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l5PNfZcn53ZyYTBtvsOeLXV7G_ypE4ChNOTPZg3v4hI"},
{"content":{"body":"does that hash structurally or based on js identity ","msgtype":"m.text","org.matrix.msc1767.text":"does that hash structurally or based on js identity "},"ts":1662427834325,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$auEKRHGcOlZhIe9kS-fTf9Q2QldiYCc6nBi5UAe1aOE"},
{"content":{"body":"I don't use pointers, I use the same hash identity that V8 uses for objects as keys in a map.","msgtype":"m.text","org.matrix.msc1767.text":"I don't use pointers, I use the same hash identity that V8 uses for objects as keys in a map."},"ts":1662427842224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FSvcWh6l3Gtgf3LYbNfvb0dOAZ5xqKZ1bxlqF8h-Ako"},
{"content":{"body":"JS identity.","msgtype":"m.text","org.matrix.msc1767.text":"JS identity."},"ts":1662427849614,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z46FZfMROA03OVYCW0Pg_7cADhR4gxCNLyps3emnN30"},
{"content":{"body":"oh its a native fn?","msgtype":"m.text","org.matrix.msc1767.text":"oh its a native fn?"},"ts":1662427854665,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YYstl5qxexmY28LwwIWkW_98zYuAmCsUFoek6yZTo6k"},
{"content":{"body":"Yeah, I suspect that’s still a side channel.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I suspect that’s still a side channel."},"ts":1662427862983,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mO-SsekwXC0TWllHNAK85wxwna28jfzGOffw9jT_8rU"},
{"content":{"body":"feel free to `delete System.hash` :P","format":"org.matrix.custom.html","formatted_body":"feel free to <code>delete System.hash</code> :P","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"feel free to `delete System.hash` :P","mimetype":"text/plain"},{"body":"feel free to <code>delete System.hash</code> :P","mimetype":"text/html"}]},"ts":1662427900973,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HbHx-SbXFR-3JBhQJ3iROP8hiNZJgvauXYv551-bsf0"},
{"content":{"body":"> <@devsnek:matrix.org> oh its a native fn?\n\nWhen I can get away with it, yeah. Otherwise its a WeakMap and a random number as a fallback.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YYstl5qxexmY28LwwIWkW_98zYuAmCsUFoek6yZTo6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>oh its a native fn?</blockquote></mx-reply>When I can get away with it, yeah. Otherwise its a WeakMap and a random number as a fallback.","m.relates_to":{"m.in_reply_to":{"event_id":"$YYstl5qxexmY28LwwIWkW_98zYuAmCsUFoek6yZTo6k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> oh its a native fn?\n\nWhen I can get away with it, yeah. Otherwise its a WeakMap and a random number as a fallback.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YYstl5qxexmY28LwwIWkW_98zYuAmCsUFoek6yZTo6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>oh its a native fn?</blockquote></mx-reply>When I can get away with it, yeah. Otherwise its a WeakMap and a random number as a fallback.","mimetype":"text/html"}]},"ts":1662427906954,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SESrZ1P1rYNa8lk2pRqNy2B4h1SxtFKAPPFqGB5b0yg"},
{"content":{"body":"oh nice","msgtype":"m.text","org.matrix.msc1767.text":"oh nice"},"ts":1662427915386,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Fc54fSL13m08fMswGAxgbqfa-kpYTjH0sSvzpWz7d50"},
{"content":{"body":"that's basically how v8 works anyway","msgtype":"m.text","org.matrix.msc1767.text":"that's basically how v8 works anyway"},"ts":1662427919567,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mcUyfYipKhgmEQo1UNsI200nJeT-cu3QoaBUYnOSJ6c"},
{"content":{"body":"well not a weakmap but random numbers yes","msgtype":"m.text","org.matrix.msc1767.text":"well not a weakmap but random numbers yes"},"ts":1662427925430,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_0ANZ5WO3nvsxIx6EKK4y0zkqps8MiefPQ_GGVryimI"},
{"content":{"body":"At least, as soon as I finish wrangling breaking changes in my monorepo","msgtype":"m.text","org.matrix.msc1767.text":"At least, as soon as I finish wrangling breaking changes in my monorepo"},"ts":1662427935268,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EsiQ9IA1vlyMbc-NHKypeQ8DM3dQ8X1KDMm9AoTclkM"},
{"content":{"body":"> <@kriskowal:matrix.org> Yeah, I suspect that’s still a side channel.\n\nthinking about this more i don't think hash is a side channel ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mO-SsekwXC0TWllHNAK85wxwna28jfzGOffw9jT_8rU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Yeah, I suspect that’s still a side channel.</blockquote></mx-reply>thinking about this more i don't think hash is a side channel","m.relates_to":{"m.in_reply_to":{"event_id":"$mO-SsekwXC0TWllHNAK85wxwna28jfzGOffw9jT_8rU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Yeah, I suspect that’s still a side channel.\n\nthinking about this more i don't think hash is a side channel ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mO-SsekwXC0TWllHNAK85wxwna28jfzGOffw9jT_8rU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Yeah, I suspect that’s still a side channel.</blockquote></mx-reply>thinking about this more i don't think hash is a side channel","mimetype":"text/html"}]},"ts":1662428153499,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$B6EojCdA9STVAtEWwwmo7R76DNwjN_ZZZBQ_vvEZ1GU"},
{"content":{"body":"you can't communicate with it","msgtype":"m.text","org.matrix.msc1767.text":"you can't communicate with it"},"ts":1662428188684,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mVdBquqoKL5Uc1FvFoMuEM9BB1l5PbLjj3F20Jc9Dxs"},
{"content":{"body":"as long as it's mixed with an actually random number","msgtype":"m.text","org.matrix.msc1767.text":"as long as it's mixed with an actually random number"},"ts":1662428231461,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9pCr5EI1Ue3yfBVsrSvpQGrHU1cTl1f2MF7Ju-aiYHM"},
{"content":{"body":"i think every js engine that cares about this sort of thing does that anyway","msgtype":"m.text","org.matrix.msc1767.text":"i think every js engine that cares about this sort of thing does that anyway"},"ts":1662428253454,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jCQv8laf-B87oPFkye-Aoz-Zjb3iAQ6046i1AVDl6OQ"},
{"content":{"body":"due to hash collision attacks","msgtype":"m.text","org.matrix.msc1767.text":"due to hash collision attacks"},"ts":1662428256878,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EwROb1whLWhYeTfWXa4MF0WuGqBog1rbp-RuzM6Ol2o"},
{"content":{"body":" * i think every js engine that cares about this sort of thing does that anyway","m.new_content":{"body":"i think every js engine that cares about this sort of thing does that anyway","msgtype":"m.text","org.matrix.msc1767.text":"i think every js engine that cares about this sort of thing does that anyway"},"m.relates_to":{"event_id":"$jCQv8laf-B87oPFkye-Aoz-Zjb3iAQ6046i1AVDl6OQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i think every js engine that cares about this sort of thing does that anyway"},"ts":1662428271016,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aVWrl-sTlVcSxVhYIwJAFEE5kkFsyjIMuywwouyYRhk"},
{"content":{"body":"yeah and because getting the address of an object in memory is one gadget which is used as a step in a lot of exploits","msgtype":"m.text","org.matrix.msc1767.text":"yeah and because getting the address of an object in memory is one gadget which is used as a step in a lot of exploits"},"ts":1662428306122,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FyLkCDf1IvNDw4OCzTnOufLj9X6fFYNglRHyhoKgX3g"},
{"content":{"body":"oh right yeah do not use the address lmao","msgtype":"m.text","org.matrix.msc1767.text":"oh right yeah do not use the address lmao"},"ts":1662428317323,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UigeM6rRLUmuCc2gPreitDIZClDTeXbNKTFXoz4xu5k"},
{"content":{"body":"I suspect none of the major engines would do it but if were were adding something like this we'd need to have a big loud note about including a good random value as a component","msgtype":"m.text","org.matrix.msc1767.text":"I suspect none of the major engines would do it but if were were adding something like this we'd need to have a big loud note about including a good random value as a component"},"ts":1662428343157,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sTInD_kp_OzpPql3H7g_Hg-UkP2F9qhuvksDBMt_o8o"},
{"content":{"body":"i hear 4 is a great random number","msgtype":"m.text","org.matrix.msc1767.text":"i hear 4 is a great random number"},"ts":1662428367054,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WSdJMRym6GxF8Ih6RWSBqOAGXsFlRBX5hzxbD77qAbw"},
{"content":{"body":"and it would be another source of nondeterminism, which... we should figure out a better story about adding those in general","msgtype":"m.text","org.matrix.msc1767.text":"and it would be another source of nondeterminism, which... we should figure out a better story about adding those in general"},"ts":1662428367258,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vyOHRkqr_YhI9p_peOW9JedniwLJeHtmwHHVQjH1qUY"},
{"content":{"body":"hmmmmmmMMMMMM","msgtype":"m.text","org.matrix.msc1767.text":"hmmmmmmMMMMMM"},"ts":1662428487745,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PDVQ5Na6Quom8ObEg-x0yfwvKrAKLWzBYHPJe4j6ev4"},
{"content":{"body":"actually no i'm dumb","msgtype":"m.text","org.matrix.msc1767.text":"actually no i'm dumb"},"ts":1662428496801,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EHdQVqoe-B0lbZIAe2i3gH1KCY9cknl5JgsLbnXcAUc"},
{"content":{"body":"i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul","msgtype":"m.text","org.matrix.msc1767.text":"i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul"},"ts":1662428518533,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZP4LIP4LJZNj8zte6lxjRp2WH6D23na5zm611snp89Y"},
{"content":{"body":" * i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul","m.new_content":{"body":"i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul","msgtype":"m.text","org.matrix.msc1767.text":"i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul"},"m.relates_to":{"event_id":"$ZP4LIP4LJZNj8zte6lxjRp2WH6D23na5zm611snp89Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i was gonna say \"does the hash actually have to be a transparent value\" and then i realized how useless it would be if it was opaque lul"},"ts":1662428545347,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j3564yPgvaSY8LFxCiva-KiBvp8_O8EuNqzusmvpD_s"},
{"content":{"body":"It needs to be a number value (preferably uint32) to bucketize things efficiently.","msgtype":"m.text","org.matrix.msc1767.text":"It needs to be a number value (preferably uint32) to bucketize things efficiently."},"ts":1662428874717,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A1hO0WCsSd2rc81B-Kj-Zf41r172epUNVOueQ9zGKIY"}
]