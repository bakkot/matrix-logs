[
{"content":{"body":"> <@mhofman:matrix.org> shu: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.\n\ncould you rephrase with a concrete code snippet?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.</blockquote></mx-reply>could you rephrase with a concrete code snippet?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84"}},"msgtype":"m.text"},"ts":1695859826237,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oknPFPdrIkiAfvT1sd4QNzL8a_WR8diVXwGYQLEYGEA"},
{"content":{"body":"like, are you talking about the case where there are also no escaped, hoisted function declarations?","m.mentions":{},"msgtype":"m.text"},"ts":1695859847605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"},
{"content":{"body":"but the general answer is that hoisted functions hoist above the lexical binding initialization: https://tc39.es/ecma262/#sec-blockdeclarationinstantiation","m.mentions":{},"msgtype":"m.text"},"ts":1695859926880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TsSIFKIf9lBfF-G5Ltb2VvqdiuSrnri75UARzajYSZQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, are you talking about the case where there are also no escaped, hoisted function declarations?\n\nHow can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />like, are you talking about the case where there are also no escaped, hoisted function declarations?</blockquote></mx-reply>How can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","m.relates_to":{"m.in_reply_to":{"event_id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"}},"msgtype":"m.text"},"ts":1695860018830,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hSthtVvog8DjG_GZevziGYPVoYCv-nIA5LTAgL1M8o4"},
{"content":{"body":"ah, i don't think in that particular configuration it can","m.mentions":{},"msgtype":"m.text"},"ts":1695860082920,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vi2uK3QK53YCHorym9rRq0LSr3kff9VbNtQ_viJoyag"},
{"content":{"body":"Maybe they hoist above, but their utterances cannot be in any code that is executed before the declarations","msgtype":"m.text"},"ts":1695860088730,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_nczcnKT2riwTqjsWyF72Tivh8Rx6VeUaTSuWoWD4Z0"},
{"content":{"body":"to anticipate your next question: currently no engine fully elides all inner accesses even in that configuration, however, i imagine due to two factors","m.mentions":{},"msgtype":"m.text"},"ts":1695860182235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nNwEr75VXQ7UH9WbXoWIA9P9DR-XmF8-OQOAPqoXwmQ"},
{"content":{"body":"1) people don't actually write code like that\n\n2) every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695860253878,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w"},
{"content":{"body":" * 1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695860265164,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nPaz3mDQ3Vg2wvExqWXAJhvCm6I2Mw1FGL6pIu0ijuU"},
{"content":{"body":"we _could_ start doing it if more code were written like that","format":"org.matrix.custom.html","formatted_body":"we <em>could</em> start doing it if more code were written like that","m.mentions":{},"msgtype":"m.text"},"ts":1695860277197,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OKu660vux7SMuw3_lZkKxB18QdaZzrp3Agm-BuNtV_A"},
{"content":{"body":"but that creates a world where optimal performance depends on a tight coupling of what tooling does and what engines do, which is in general brittle, and undesirable for both tools and engines","m.mentions":{},"msgtype":"m.text"},"ts":1695860318068,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x8Cu1YqPAiwmHXxx8WHAe2yro29if0yjFXU0AXqJcDM"},
{"content":{"body":"since when one or the other makes a move for whatever other reason, users might complain","m.mentions":{},"msgtype":"m.text"},"ts":1695860326763,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b4MvBjdP0lwJqA2rkDE3jnwzKiK2OElWOGPFUQK2Jgg"},
{"content":{"body":"to expand more on (1), you can't do this source transform with consts because you can't emit the unutterable `init=` thing","format":"org.matrix.custom.html","formatted_body":"to expand more on (1), you can't do this source transform with consts because you can't emit the unutterable <code>init=</code> thing","m.mentions":{},"msgtype":"m.text"},"ts":1695860430087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PwfjXdsb2gGmSrXUOPhJv8-tcDWnrIhm5GI36j3Taqk"},
{"content":{"body":"My understanding from the transcript was that mark believed these semantics could be optimized by engines with a simple static pass, and you seemed to say there were cases where it couldn't be optimized, that a simply static analista was not possible.","msgtype":"m.text"},"ts":1695860441428,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DFahru8Vr-4fE6wXnUnAJkGhE0B2rwC2Au4mKNyK1Jc"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1695860453343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rPH6V6jLcbiBl7qr4wUb7KBfE4bgciZ18Pu8KSRWAIA"},
{"content":{"body":"it's probably not possible to do in a single pass","m.mentions":{},"msgtype":"m.text"},"ts":1695860464775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iHvgCBRse7g9M-PSX9wthHhV5fro3u6soBEsaeDI6x4"},
{"content":{"body":"and we do not want to do things that require more than a single pass","m.mentions":{},"msgtype":"m.text"},"ts":1695860473231,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NrRu0Pqrnpw3T_WCfw15izumgaC-pQW9oNrwkOQHKxk"},
{"content":{"body":"Then I agree there remains a question whether such an optimization and tight tooling coupling is advisable","msgtype":"m.text"},"ts":1695860482145,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VYr2GWFCpvYCbh8qb2iCuMCuKLNSmK0bP4GUrc9podE"},
{"content":{"body":"since function declarations are hoisted, we won't know if mark's code pattern in fact holds until we reach the end of the block scope and know all the function declaration names","m.mentions":{},"msgtype":"m.text"},"ts":1695860501116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-xMPYqgC6WBYbF0jouGA_2FKMI3OpncBToyWl_veNbw"},
{"content":{"body":"like it's probably still fine to check if the pattern holds, not too expensive","m.mentions":{},"msgtype":"m.text"},"ts":1695860514074,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_ONc0ZZTx349DhPzPrRHWHv7gv9ft6dMThVEe6tInHo"},
{"content":{"body":"Then I'm still confused. Why is the presence of a let declaration as the first statement of a scope not a sufficient indicator to disable tdz checks on that binding","msgtype":"m.text"},"ts":1695860554603,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$V6blmhjOTm779dYIX1kowivqWHUQhtnq7LnDnalEHCs"},
{"content":{"body":"as a property, i agree with you that it is","m.mentions":{},"msgtype":"m.text"},"ts":1695860594835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I2f41k1dyc25pcKogHXDcQK5Yl3378SRA4MrHcxEyU8"},
{"content":{"body":"as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above","m.mentions":{},"msgtype":"m.text"},"ts":1695860618937,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WiUuK8btu8NDmFc-KVgmAiZ_H1pW3ZezwD3XQx1zobA"},
{"content":{"body":"and that it does not apply as easily to consts","m.mentions":{},"msgtype":"m.text"},"ts":1695860623179,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WpXHwi8cHPmIQ311q7t5FN-Rl6YfJTRaoaF22MgPmdY"},
{"content":{"body":" * as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above. but also we just don't do it because we don't see code like that","m.mentions":{},"m.new_content":{"body":"as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above. but also we just don't do it because we don't see code like that","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WiUuK8btu8NDmFc-KVgmAiZ_H1pW3ZezwD3XQx1zobA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695860658119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gUQfOS3Dej1Ei8f8ljdfikWe8v1ZT-CZrhbw2JPngCI"},
{"content":{"body":"any additional analyses is complexity we'd have to maintain forever and ever, so the tradeoff isn't quite there today for this","m.mentions":{},"msgtype":"m.text"},"ts":1695860685036,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sqW_6dcoKUOqsmIxrOVXYK1twQgyoZXHWlMFDuN88WI"},
{"content":{"body":"though it is strange to me to suggest that a solution is for tooling to _compile away the TDZ_","format":"org.matrix.custom.html","formatted_body":"though it is strange to me to suggest that a solution is for tooling to <em>compile away the TDZ</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695860730832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rpGWEa6XizRQIM37dxzhEFPHubC7yuJxyGZ_NzHgRPo"},
{"content":{"body":"if you're okay with users not getting the runtime checks... why fight to keep it in the language?","m.mentions":{},"msgtype":"m.text"},"ts":1695860755917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nLB0rFiysgK_vxzLZV2eWlP3jWDCUxOTgapDRlu9fSA"},
{"content":{"body":"Right this is about the feasibility of optimizing  such let declarations that would be emited by tooling. Whether that's advisable is a separate question","msgtype":"m.text"},"ts":1695860835207,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OpTR0cgADcLrfO1fxmKa1fN0XQcwWL9yXscwQKa5oT0"},
{"content":{"body":"as a general rule of thumb, all things are feasible","m.mentions":{},"msgtype":"m.text"},"ts":1695860852732,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FzYLIfbSQZ6J5Yw3Ro5I-K5NGz5MaOV0JMK-TRL5wKg"},
{"content":{"body":"or rather, all things are possible to implement","m.mentions":{},"msgtype":"m.text"},"ts":1695860862422,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c6yEw2Wr7FFfsWKNqkSPvvJqTnvdQ8iyF4_8I--6ssI"},
{"content":{"body":"most of the time we just don't wanna","m.mentions":{},"msgtype":"m.text"},"ts":1695860869799,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GSH5qatz7GxOYFZ6V3smHNJJ7pYj15nu2byvpTTnXgU"},
{"content":{"body":"I personally believe that there are different authors. Some care about such performance optimizations, but I'm not sure that means the language semantics should change for them. Yet I am sympathetic with their goal and this could be a way to support it.","msgtype":"m.text"},"ts":1695861097052,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rFmmNqx_GXYsLOgjSpjp-lvskaoIxiMOmqnsidM93fI"},
{"content":{"body":"fair enough, if we had accurate demographic info we could settle this more dispassionately","m.mentions":{},"msgtype":"m.text"},"ts":1695861137784,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aW6gmH9Qsj0irUYD0qVv812Nh_iN2YHINoTC_KrMKrA"},
{"content":{"body":"alas","m.mentions":{},"msgtype":"m.text"},"ts":1695861139905,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mBNe__qaZ0UNKg4qC2AmfOXFscmJVzCC_4H_SbLWbUQ"},
{"content":{"body":"like, we _could_ have a `let2` or whatever as waldemar suggested","format":"org.matrix.custom.html","formatted_body":"like, we <em>could</em> have a <code>let2</code> or whatever as waldemar suggested","m.mentions":{},"msgtype":"m.text"},"ts":1695861168196,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LDR_015N_flbL4HuV9Dq2jRQl6K_cVTLHieUpiGgWTQ"},
{"content":{"body":"but personally i feel like that's a worse choice for the language","m.mentions":{},"msgtype":"m.text"},"ts":1695861173584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tHqIj12viBkCGS-xamxvoVHr46qph1hZdSIFycceXHY"},
{"content":{"body":"though putting my personal feelings aside i can certainly live with that outcome","m.mentions":{},"msgtype":"m.text"},"ts":1695861191683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fwmhVLTG-LcgTZbAxXC9jdcKCqfDrjFv_JtJSaCjcSE"},
{"content":{"body":"back to the different authors point: i was hoping to show that the majority either don't care, either via ignorance or via choosing performance over runtime checks","m.mentions":{},"msgtype":"m.text"},"ts":1695861260693,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UnfHKQvSHMwL0R7qR3xMWzyhtisq2VJjPqer6Cuz7oY"},
{"content":{"body":"a nuance here is that most developers don't care about performance either! and there lies our deeper disagreement. i think web users (not authors) are better served by a language that values performance as the default, if the correctness gains are marginal. i think you and others take the other side of that polarity (or think that TDZ runtime checks aren't marginal in value)","m.mentions":{},"msgtype":"m.text"},"ts":1695861371962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wzAoG72oqBTNTLF2z754Sp5xe-6Z8k_i0iPZNDjYe2Q"},
{"content":{"body":"I think that the state of web tooling means that authors don't have to make that choice or understand it, and that the tooling can make it for them","msgtype":"m.text"},"ts":1695861504667,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FS1E3EmWATdugl8hthjVe2a1FhYNhnkcV57xUScvXgQ"},
{"content":{"body":"we're already in that world, people just use `var`s","format":"org.matrix.custom.html","formatted_body":"we're already in that world, people just use <code>var</code>s","m.mentions":{},"msgtype":"m.text"},"ts":1695861639438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HrVvT5SybmMmzE3bBJ3qTCC9xBPtW3GAuBLORUXgHPk"},
{"content":{"body":"And the Web (or node) is not the only JS environment that should be considered when it comes to consider the impact of changing the semantics","msgtype":"m.text"},"ts":1695861652681,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$I95ZHRSXkeEGH_nXU0wbeDpIY2jZCwWFsc4K0mFzGTo"},
{"content":{"body":"i don't think we, as a committee, _should_ be okay with speccing stuff that is transpiled forever","format":"org.matrix.custom.html","formatted_body":"i don't think we, as a committee, <em>should</em> be okay with speccing stuff that is transpiled forever","m.mentions":{},"msgtype":"m.text"},"ts":1695861738255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SAVcBdgGqFr6SoBR7ibSr6UsNluI3zvub9MR4QUSdls"},
{"content":{"body":"that's a crappy value prop for us engines and disincentivizes things in a way i think everyone would dislike","m.mentions":{},"msgtype":"m.text"},"ts":1695861756468,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y-3cZFHP3idayXXH-Ejd2Q4qxip8dtkrlSWAY7B7ZEk"},
{"content":{"body":"Unless we stop all syntax changes for the language, can we really ween the ecosystem off transpilation?","msgtype":"m.text"},"ts":1695861895452,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y-rVkc0NZhm0FBwuAGpNOAyO4cveXORfMTZOHCMdBBA"},
{"content":{"body":"that's not what i said","m.mentions":{},"msgtype":"m.text"},"ts":1695861904545,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dPh0EfGKhXYlkEbgc6Dp8rcvEDJKejQNOsBmAuSv31U"},
{"content":{"body":"what i said was, transpiled _forever_","format":"org.matrix.custom.html","formatted_body":"what i said was, transpiled <em>forever</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695861909590,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GJ2AOat6xab9jxiL9ZOgAp19yFhlSz3V1lPJ5-SVIfQ"},
{"content":{"body":"most syntax features are still incentivized for the long-tail adoption untranspiled","m.mentions":{},"msgtype":"m.text"},"ts":1695861924338,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n5yPoXfAfTX2KabJN012O1oZd4znaiUnTANTFh4zuU8"},
{"content":{"body":"transpilation itself is not going to go away because new features are going to be adopted transpiled for the initial N years","m.mentions":{},"msgtype":"m.text"},"ts":1695861948901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0_pDBYxdXES0RBZ0DJfUuccq6eBg4r9KeOpJeRpuPHc"},
{"content":{"body":"what i'm interested in (and led with in the slides) was the adoption inflection point. if i get a whiff that that inflection _can't_ happen because the incentives are aligned against it, then i want to change that","format":"org.matrix.custom.html","formatted_body":"what i'm interested in (and led with in the slides) was the adoption inflection point. if i get a whiff that that inflection <em>can't</em> happen because the incentives are aligned against it, then i want to change that","m.mentions":{},"msgtype":"m.text"},"ts":1695862111763,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CYPjKXFAXFp7gKkAP4rYnS1TVr9Y9eEWehL8ghLUR24"},
{"content":{"body":"I guess it's a weird case this one. It probably has high adoption in authored code, but low usage in code executed by engines. The question is whether tooling should be able to keep the code as authored or need to keep transpiling it past engine support because of performance concerns. ","msgtype":"m.text"},"ts":1695862928916,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-mbkSgi1SyjgNOCmcmovUGxaLW914vA0l49m8jddhOE"},
{"content":{"body":"* I guess it's a weird case this one. It probably has high adoption in authored code, but low usage in code executed by engines. The question is whether tooling should be able to keep the code as authored or need to keep transpiling it past the point all engines  support it because of performance concerns. ","m.new_content":{"body":"I guess it's a weird case this one. It probably has high adoption in authored code, but low usage in code executed by engines. The question is whether tooling should be able to keep the code as authored or need to keep transpiling it past the point all engines  support it because of performance concerns. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$-mbkSgi1SyjgNOCmcmovUGxaLW914vA0l49m8jddhOE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695862967620,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QfVmJ13OasJSJXdeB60Pd983hZRHtVwi4Wj5nFaAJ-c"},
{"content":{"body":"an interesting annex b change in jsc: https://bugs.webkit.org/show_bug.cgi?id=163209","m.mentions":{},"msgtype":"m.text"},"ts":1695863048172,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2CgGS7RUucsXmWrJVCD3uVVYOrpRCvBGs0WyiS2hDOM"},
{"content":{"body":"Which is why I believe mark suggested a lint fix approach to this problem, which would change the author code literally at the source, but that means adding cognitive load to authors to understand the potential performance trade-offs ","msgtype":"m.text"},"ts":1695863142264,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$K_Z5AsUPJQrKpcl51QF1ARIy8qXoTUAW2YIkpfQWOg8"},
{"content":{"body":"tcq down?","m.mentions":{},"msgtype":"m.text"},"ts":1695863362233,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TQ-WR_geIQSEFP7a8im10N8q7GT5eophbKchVy8BA_o"},
{"content":{"body":"how are we gonna do queue?","m.mentions":{},"msgtype":"m.text"},"ts":1695863448953,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOLR5wpGkVkCje9cU-2_i9krGbsL7708g8tQDpnu5VY"},
{"content":{"body":"> <@ljharb:matrix.org> an interesting annex b change in jsc: https://bugs.webkit.org/show_bug.cgi?id=163209\n\nUgh annex B...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2CgGS7RUucsXmWrJVCD3uVVYOrpRCvBGs0WyiS2hDOM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />an interesting annex b change in jsc: https://bugs.webkit.org/show_bug.cgi?id=163209</blockquote></mx-reply>Ugh annex B...","m.relates_to":{"m.in_reply_to":{"event_id":"$2CgGS7RUucsXmWrJVCD3uVVYOrpRCvBGs0WyiS2hDOM"}},"msgtype":"m.text"},"ts":1695863454734,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cOlhTZKXpDsbAiahWlZGV0ZSBJ4bbSKJ51Ctpg2WRMU"},
{"content":{"body":"I assume Rob is going to post the spreadsheet soon","msgtype":"m.text"},"ts":1695863494442,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jo4nmJgHYppnAGx4Knac-bZomx8z-Ox6sRVwlc7htV0"},
{"content":{"body":"we have a backup:  https://docs.google.com/spreadsheets/d/1Us6MFx3WB6E8K5jJ7m1j5jEa9OUOuwgx60RXwzfI7JE/edit#gid=0","msgtype":"m.text"},"ts":1695863498949,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$qUIb9x3cZ2JCPvx6ah2Jvh33lWVvzROQ1RLRPKNoTMA"},
{"content":{"body":"👏annex b👏is👏praxis👏","m.mentions":{},"msgtype":"m.text"},"ts":1695863508993,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1LRsJI8RBgM0ltUQhpBPLgpMIfZyM1CtacVpVRW9HTc"},
{"content":{"body":"I reached out to Brian to see if he knows what's going on with TCQ, he said he'll see if he can find out what's wrong.","m.mentions":{},"msgtype":"m.text"},"ts":1695863733276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BDq7ctTBXM-vH5OIVw0FGZ8_vQXe3a6rbghBeobKi9o"},
{"content":{"body":"> <@rbuckton:matrix.org> I reached out to Brian to see if he knows what's going on with TCQ, he said he'll see if he can find out what's wrong.\n\nI was seeing ws failures in console, not sure if that's helpful but let him know if you still have that comms channel open","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BDq7ctTBXM-vH5OIVw0FGZ8_vQXe3a6rbghBeobKi9o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I reached out to Brian to see if he knows what&#39;s going on with TCQ, he said he&#39;ll see if he can find out what&#39;s wrong.</blockquote></mx-reply>I was seeing ws failures in console, not sure if that's helpful but let him know if you still have that comms channel open","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BDq7ctTBXM-vH5OIVw0FGZ8_vQXe3a6rbghBeobKi9o"}},"msgtype":"m.text"},"ts":1695863802122,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1PPqVqyeU0FrBWqqqFQ-mKiDBYK-MdLi2grQ77FTki0"},
{"content":{"body":"There is a \"OK with or without streaming\" on the queue without name, please add it","msgtype":"m.text"},"ts":1695863841245,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TqzW-oyyy80I0haoouHv7RBYO760PvJWvIvo5vy17qc"},
{"content":{"body":"```\napp.build.js:6 WebSocket connection to 'wss://tcq.app/socket.io/?id=MypE&EIO=3&transport=websocket' failed: WebSocket is closed before the connection is established.\nr.doClose @ app.build.js:6\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>app.build.js:6 WebSocket connection to 'wss://tcq.app/socket.io/?id=MypE&amp;EIO=3&amp;transport=websocket' failed: WebSocket is closed before the connection is established.\nr.doClose @ app.build.js:6\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695863844301,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Yes1YIyr1D4lLpP958F89ptiLHIcmEUvDp8gljkEPgo"},
{"content":{"body":"and 504.0 GatewayTimeout reloading","m.mentions":{},"msgtype":"m.text"},"ts":1695863885654,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$mn4IByD0mUjsiCom7r2NoiMDfkMjWucJiRdbi_yfKQk"},
{"content":{"body":"eventually renders \":( Application Error\n\nIf you are the application administrator, you can access the diagnostic resources.\"","msgtype":"m.text"},"ts":1695863896281,"senderName":"Andrew Paprocki","senderId":"@apaprocki:matrix.org","id":"$d1vSu1c00NyiJ6Q8MZNTUzQ-ymeq6u-XOTcuj--xwjQ"},
{"content":{"body":"if anyone wants to help DDoS TCQ, that seemed to help yesterday 😅","m.mentions":{},"msgtype":"m.text"},"ts":1695863953521,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3VY-LIyZS2b1gfYUyz6GLQTQrFNN6xPfhXfU8xkWA04"},
{"content":{"body":"`Nmap` for fun and profit","format":"org.matrix.custom.html","formatted_body":"<code>Nmap</code> for fun and profit","m.mentions":{},"msgtype":"m.text"},"ts":1695863964395,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$de5o4NRPx1x5cSsVCin39VsHh-f-cOSNJV9bwxSKicI"},
{"content":{"body":"The TCQ app service is down.","m.mentions":{},"msgtype":"m.text"},"ts":1695863977141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RrELxeC69NlV7JVSn593rmR1jDZaDY5HvMYQTm0KAX0"},
{"content":{"body":"it's back!","m.mentions":{},"msgtype":"m.text"},"ts":1695864031290,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Dd6X2StknFk1nB9Heq8ogV5y8yZBAnB4rPIgKbk2lgQ"},
{"content":{"body":"killing my DoS","m.mentions":{},"msgtype":"m.text"},"ts":1695864042521,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HiJnzg762fkl-35A4xZJ4gaOfqh1LJNFittUYOoe-HM"},
{"content":{"body":"it is indeed back","m.mentions":{},"msgtype":"m.text"},"ts":1695864055308,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YhMy-ocGX2phdn5KypOLUUapcUzzlMrvFeH0DIUyBZA"},
{"content":{"body":"disambiguate: DeDoS vs. DDos","msgtype":"m.text"},"ts":1695864070879,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$Q9CMSARDILmAgsYws8Rw8Apq0rR0F0qlMYVpAx7dM5s"},
{"content":{"body":"Disk Operating System","m.mentions":{},"msgtype":"m.text"},"ts":1695864120765,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$IyAJIf2n27c4G7uIy7T6Rdike7BCcmBPCvDBJ3Cp5W0"},
{"content":{"body":"TCQ is not back","m.mentions":{},"msgtype":"m.text"},"ts":1695864271364,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rQyTCWQrv96vaPM7VDdptHhGjOfgfEOt9VkZTK3qFYU"},
{"content":{"body":"TCQ is so over","m.mentions":{},"msgtype":"m.text"},"ts":1695864283775,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FZIkxcXzgXqabp-wstTT0SzWa2HpGxoDqVrwjeY6NzI"},
{"content":{"body":"Everyone DDoS'd it","m.mentions":{},"msgtype":"m.text"},"ts":1695864301592,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PUV9L0pcBQqxvXkCKIJxNPUP_VzQKuSGqELZ2jclxHM"},
{"content":{"body":"^For the chairs in case they accidentaly reload and loose it","msgtype":"m.text"},"ts":1695864328893,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sU_HgzyNa7RrqH4E69h5oaPwNhbgYJYnVA1wJuEMQsU"},
{"content":{"body":"surely in this case it's a CDOS","m.mentions":{},"msgtype":"m.text"},"ts":1695864340753,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$m8N8LYmJ8SUBpL3JLZd_cqKGK5IUCT5IVeeDzhpj4G4"},
{"content":{"body":"why did we stop using the spreadsheet?!","m.mentions":{},"msgtype":"m.text"},"ts":1695864362190,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GNlypWyNsU8OflKJ04QdQ8XZT7TGqW0cildc4ONnSf4"},
{"content":{"body":"Because it was working again 🤷","msgtype":"m.text"},"ts":1695864380096,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0_P4Bfe8tpqFC42jw4lvjdHMZ1Jy2_wcZA7QNKM02sw"},
{"content":{"body":"Still looking into the issue.","m.mentions":{},"msgtype":"m.text"},"ts":1695864382771,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_RRN_cYcf8fr_TjJavEm8dL4BJuiSQQEPDqcaEMIb5k"},
{"content":{"body":"TCQ comes back for one full second and we assume it's all roses?","m.mentions":{},"msgtype":"m.text"},"ts":1695864392845,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y_PO5kA3gJZaaAMJpjhthF9t0-UoEOhZFR7arnKWGwo"},
{"content":{"body":"we've been doing that throughout the entire meeting... sadly.","m.mentions":{},"msgtype":"m.text"},"ts":1695864411404,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$k6pmTBWysYpgbYDQ4_0Xd4SvG1whd0gZx1JF8xvl4ss"},
{"content":{"body":"> <@michaelficarra:matrix.org> TCQ comes back for one full second and we assume it's all roses?\n\nall too human","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Y_PO5kA3gJZaaAMJpjhthF9t0-UoEOhZFR7arnKWGwo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>TCQ comes back for one full second and we assume it&#39;s all roses?</blockquote></mx-reply>all too human","m.relates_to":{"m.in_reply_to":{"event_id":"$Y_PO5kA3gJZaaAMJpjhthF9t0-UoEOhZFR7arnKWGwo"}},"msgtype":"m.text"},"ts":1695864471162,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$FPMlOwk5fPX2CTbSfhZ9pQ9Ia9JpOWdwxaE1z6OQXXI"},
{"content":{"body":"historically it was alright for a while, then craps out, wash, rinse, repeat","m.mentions":{},"msgtype":"m.text"},"ts":1695864477242,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$8I44SE58GlGLdmjeql13eGrLUqD4C-AqXHeWRyZd9FQ"},
{"content":{"body":"how is usefulness of streaming supposed to imply that single-shot is not useful?","m.mentions":{},"msgtype":"m.text"},"ts":1695864482968,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$i0TB7bRFLH4805BIzBZPhy0A0eyyb63Y9ngAStVuDl8"},
{"content":{"body":"I don't understand the philosophical argument, I kinda think we *should* be prioritizing the most useful things, and not trying to design the 100% universal thing, sometimes","format":"org.matrix.custom.html","formatted_body":"I don't understand the philosophical argument, I kinda think we <em>should</em> be prioritizing the most useful things, and not trying to design the 100% universal thing, sometimes","msgtype":"m.text"},"ts":1695864519674,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q58q1VepiLETeTak1YJBFcBTa4gLMmIh1WZNHtfu2JM"},
{"content":{"body":"and we definitely *do* chop up proposals at times","format":"org.matrix.custom.html","formatted_body":"and we definitely <em>do</em> chop up proposals at times","m.mentions":{},"msgtype":"m.text"},"ts":1695864566880,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8CmlbBaGtu_ZS6MtSKQiZcJKnTuNq8zuYalsWnPs9GQ"},
{"content":{"body":"littledan: especially when the former does not block us from doing the latter later","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: especially when the former does not block us from doing the latter later","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1695864567000,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tjMGtsxZfniHbe7eGZd3TSLF7TTWvzBQ9R02z0MGx5U"},
{"content":{"body":"+1 to Luca","m.mentions":{},"msgtype":"m.text"},"ts":1695864693697,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IXhmFKazT8mqT29SClnVnDXx6Rabgw4jOHbWql2w-ss"},
{"content":{"body":"Another +1 if he mentions usabilty","m.mentions":{},"msgtype":"m.text"},"ts":1695864709908,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fBM-j-gjzvINrFW460J3oRLindCBuNEIHA1rE6T8Qbg"},
{"content":{"body":"If the concern is the inability to use native Base64 support in a memory constrained environment, I'm not 100% sure the solution is to spend more of that memory on a 3rd-party library or wrapper to do that for you.","m.mentions":{},"msgtype":"m.text"},"ts":1695864781660,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NKP9tecn4_LYUqOA9Lrfqp_D-19Pes0PhG5RI8_LrA4"},
{"content":{"body":"well, I guess on Moddable that could be ROM, but most embedded JS has this stuff in RAM...","msgtype":"m.text"},"ts":1695864802975,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gTK0JaeCbz8z0DPtUuM03YBffcH7OAZAPF_wk5qDYvc"},
{"content":{"body":"> <@rbuckton:matrix.org> If the concern is the inability to use native Base64 support in a memory constrained environment, I'm not 100% sure the solution is to spend more of that memory on a 3rd-party library or wrapper to do that for you.\n\nI would assume the web would provide a web stream","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NKP9tecn4_LYUqOA9Lrfqp_D-19Pes0PhG5RI8_LrA4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If the concern is the inability to use native Base64 support in a memory constrained environment, I&#39;m not 100% sure the solution is to spend more of that memory on a 3rd-party library or wrapper to do that for you.</blockquote></mx-reply>I would assume the web would provide a web stream","m.relates_to":{"m.in_reply_to":{"event_id":"$NKP9tecn4_LYUqOA9Lrfqp_D-19Pes0PhG5RI8_LrA4"}},"msgtype":"m.text"},"ts":1695864807065,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2uOeqd8fQ542bVwpCRHTQZyxNXQr1SfA-Np_mB1HZlQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I would assume the web would provide a web stream\n\nI'm not talking about the web platform, though. I'm talking about embedded.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2uOeqd8fQ542bVwpCRHTQZyxNXQr1SfA-Np_mB1HZlQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I would assume the web would provide a web stream</blockquote></mx-reply>I'm not talking about the web platform, though. I'm talking about embedded.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2uOeqd8fQ542bVwpCRHTQZyxNXQr1SfA-Np_mB1HZlQ"}},"msgtype":"m.text"},"ts":1695864853787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zv-17GXAcr01OhoqGQLA3sggDm9tKWgiwyfP6VWd5mI"},
{"content":{"body":"Embedded can also provide their own implementation. It's better to have two different streaming primitives in different platform (XS and browsers) rather than two in the same platform (browsers)","msgtype":"m.text"},"ts":1695864898345,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$E0NWcpWDdIsiQ6-DuQEO2MzaYVpTAQ_5y3xM6alWqpE"},
{"content":{"body":"I'm kinda worried about this objection in a more fundamental way--I want TC39 to be a place where we can develop these kinds of useful standard library functions.","msgtype":"m.text"},"ts":1695864906099,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sbYuhPCIK59arjGi9rtYuTQ1JKFuKerTRcnxcz_9dTo"},
{"content":{"body":"TC39 streams ?","m.mentions":{},"msgtype":"m.text"},"ts":1695864946804,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LxDwfUqk6OQmMC167C4C169o6OeqkB2uqrT7oX_2EG0"},
{"content":{"body":"littledan: I think it's vaguely possible we could get web streams in TC39 someday, but I don't think we should block the one-shot version of this proposal on that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I think it's vaguely possible we could get web streams in TC39 someday, but I don't think we should block the one-shot version of this proposal on that","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1695864947457,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iS42boJg0Oh63szNnQbABNXUGkxtTGmG_8zxf1soDco"},
{"content":{"body":"Do we want to design a sync streaming API in 262?","m.mentions":{},"msgtype":"m.text"},"ts":1695864955545,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y8JZs9XtX1VaQf_4wURmsw821KvLlNnVPlcpSanJ2JQ"},
{"content":{"body":" * Do we want to design a general-purpose sync streaming API in 262?","m.mentions":{},"m.new_content":{"body":"Do we want to design a general-purpose sync streaming API in 262?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$y8JZs9XtX1VaQf_4wURmsw821KvLlNnVPlcpSanJ2JQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695864966189,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$T9SCu5LcNLF3qP-2IM5GxbD0mWkuFCTLE-rwLPy81sE"},
{"content":{"body":"> <@bakkot:matrix.org> littledan: I think it's vaguely possible we could get web streams in TC39 someday, but I don't think we should block the one-shot version of this proposal on that\n\nAgreed. I'm surprised at the length of argumentation here when there is such strong support and it's such a small API. This is what makes me worried.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iS42boJg0Oh63szNnQbABNXUGkxtTGmG_8zxf1soDco?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I think it's vaguely possible we could get web streams in TC39 someday, but I don't think we should block the one-shot version of this proposal on that</blockquote></mx-reply>Agreed. I'm surprised at the length of argumentation here when there is such strong support and it's such a small API. This is what makes me worried.","m.relates_to":{"m.in_reply_to":{"event_id":"$iS42boJg0Oh63szNnQbABNXUGkxtTGmG_8zxf1soDco"}},"msgtype":"m.text"},"ts":1695865005396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JVdOpmH0RXUiVW5iD9bd51K0w-HxnFUEtd78cnaT-ko"},
{"content":{"body":"> <@jridgewell:matrix.org> Do we want to design a general-purpose sync streaming API in 262?\n\nAre iterators streaming, or they have different properties?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y8JZs9XtX1VaQf_4wURmsw821KvLlNnVPlcpSanJ2JQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Do we want to design a general-purpose sync streaming API in 262?</blockquote></mx-reply>Are iterators streaming, or they have different properties?","m.relates_to":{"m.in_reply_to":{"event_id":"$y8JZs9XtX1VaQf_4wURmsw821KvLlNnVPlcpSanJ2JQ"}},"msgtype":"m.text"},"ts":1695865019404,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AvfkY5cjAfdudDrF1BvrKBH0J01qCIpkM0lMb6yO7w8"},
{"content":{"body":"I'd _like_ to see a streaming API at some point. I haven't been partial to the actual API design choice, since it involves creating numerous nursery objects to pass arguments in and pull arguments out, so it's not efficient for memory and/or cpu constrained environments.","format":"org.matrix.custom.html","formatted_body":"I'd <em>like</em> to see a streaming API at some point. I haven't been partial to the actual API design choice, since it involves creating numerous nursery objects to pass arguments in and pull arguments out, so it's not efficient for memory and/or cpu constrained environments.","m.mentions":{},"msgtype":"m.text"},"ts":1695865026778,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TW4hmmp7HJmYSIHhNsXqLMwGXW62XFhy0YQ1n9sgCx0"},
{"content":{"body":"how would the options get passed in without changing the code?","msgtype":"m.text"},"ts":1695865062548,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vjNGMR544WZBq4fXb0ojY0RJUZiweK0eNDHM1v1DnDk"},
{"content":{"body":"Good point. `bytesToBase64(bytesIterator: Iterator<Uint8Array>): Iterator<string>`","format":"org.matrix.custom.html","formatted_body":"Good point. <code>bytesToBase64(bytesIterator: Iterator&lt;Uint8Array&gt;): Iterator&lt;string&gt;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695865107394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tBBfi-UoAbjdCTjeOBgWnAemQ_hLcBfm0-SQ2VUxP8A"},
{"content":{"body":"Brian said TCQ will be back up again soon, but folks will have to log in again since he needs to clear out the sessions as part of trying to resolve the issue.","m.mentions":{},"msgtype":"m.text"},"ts":1695865136153,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fGXAfC7gOEIJct187dTr1yxC6PhWJV18l3nxEKGTX6M"},
{"content":{"body":"OK if he will take Jordan's word on it, does that mean it's OK for this to proceed?","msgtype":"m.text"},"ts":1695865156632,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jOK8x8Nx8tOOWbgaPRcPn_1VfsCzp__HoO9AmOd1p2o"},
{"content":{"body":"> <@rbuckton:matrix.org> Brian said TCQ will be back up again soon, but folks will have to log in again since he needs to clear out the sessions as part of trying to resolve the issue.\n\nLet's use the spreadsheet until the end of this presentation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fGXAfC7gOEIJct187dTr1yxC6PhWJV18l3nxEKGTX6M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Brian said TCQ will be back up again soon, but folks will have to log in again since he needs to clear out the sessions as part of trying to resolve the issue.</blockquote></mx-reply>Let's use the spreadsheet until the end of this presentation","m.relates_to":{"m.in_reply_to":{"event_id":"$fGXAfC7gOEIJct187dTr1yxC6PhWJV18l3nxEKGTX6M"}},"msgtype":"m.text"},"ts":1695865166599,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QxFAhYd09RGEOYOmmgTdVP5-fhNbgMWJZN4xHdUwfzo"},
{"content":{"body":"I'd much rather have a standard solution that *doesn't* depend on non-browser runtimes implementing more of the DOM so that their users can write portable code.","format":"org.matrix.custom.html","formatted_body":"I'd much rather have a standard solution that <em>doesn't</em> depend on non-browser runtimes implementing more of the DOM so that their users can write portable code.","m.mentions":{},"msgtype":"m.text"},"ts":1695865449207,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fjLpkn1X5ioLXRJo6GyspbYIKElD1-Dri315z2NwsuI"}
]