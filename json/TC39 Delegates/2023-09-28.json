[
{"content":{"body":"> <@mhofman:matrix.org> shu: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.\n\ncould you rephrase with a concrete code snippet?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.</blockquote></mx-reply>could you rephrase with a concrete code snippet?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84"}},"msgtype":"m.text"},"ts":1695859826237,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oknPFPdrIkiAfvT1sd4QNzL8a_WR8diVXwGYQLEYGEA"},
{"content":{"body":"like, are you talking about the case where there are also no escaped, hoisted function declarations?","m.mentions":{},"msgtype":"m.text"},"ts":1695859847605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"},
{"content":{"body":"but the general answer is that hoisted functions hoist above the lexical binding initialization: https://tc39.es/ecma262/#sec-blockdeclarationinstantiation","m.mentions":{},"msgtype":"m.text"},"ts":1695859926880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TsSIFKIf9lBfF-G5Ltb2VvqdiuSrnri75UARzajYSZQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, are you talking about the case where there are also no escaped, hoisted function declarations?\n\nHow can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />like, are you talking about the case where there are also no escaped, hoisted function declarations?</blockquote></mx-reply>How can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","m.relates_to":{"m.in_reply_to":{"event_id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"}},"msgtype":"m.text"},"ts":1695860018830,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hSthtVvog8DjG_GZevziGYPVoYCv-nIA5LTAgL1M8o4"},
{"content":{"body":"ah, i don't think in that particular configuration it can","m.mentions":{},"msgtype":"m.text"},"ts":1695860082920,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vi2uK3QK53YCHorym9rRq0LSr3kff9VbNtQ_viJoyag"},
{"content":{"body":"Maybe they hoist above, but their utterances cannot be in any code that is executed before the declarations","msgtype":"m.text"},"ts":1695860088730,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_nczcnKT2riwTqjsWyF72Tivh8Rx6VeUaTSuWoWD4Z0"},
{"content":{"body":"to anticipate your next question: currently no engine fully elides all inner accesses even in that configuration, however, i imagine due to two factors","m.mentions":{},"msgtype":"m.text"},"ts":1695860182235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nNwEr75VXQ7UH9WbXoWIA9P9DR-XmF8-OQOAPqoXwmQ"},
{"content":{"body":"1) people don't actually write code like that\n\n2) every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695860253878,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w"},
{"content":{"body":" * 1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695860265164,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nPaz3mDQ3Vg2wvExqWXAJhvCm6I2Mw1FGL6pIu0ijuU"},
{"content":{"body":"we _could_ start doing it if more code were written like that","format":"org.matrix.custom.html","formatted_body":"we <em>could</em> start doing it if more code were written like that","m.mentions":{},"msgtype":"m.text"},"ts":1695860277197,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OKu660vux7SMuw3_lZkKxB18QdaZzrp3Agm-BuNtV_A"},
{"content":{"body":"but that creates a world where optimal performance depends on a tight coupling of what tooling does and what engines do, which is in general brittle, and undesirable for both tools and engines","m.mentions":{},"msgtype":"m.text"},"ts":1695860318068,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x8Cu1YqPAiwmHXxx8WHAe2yro29if0yjFXU0AXqJcDM"},
{"content":{"body":"since when one or the other makes a move for whatever other reason, users might complain","m.mentions":{},"msgtype":"m.text"},"ts":1695860326763,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b4MvBjdP0lwJqA2rkDE3jnwzKiK2OElWOGPFUQK2Jgg"},
{"content":{"body":"to expand more on (1), you can't do this source transform with consts because you can't emit the unutterable `init=` thing","format":"org.matrix.custom.html","formatted_body":"to expand more on (1), you can't do this source transform with consts because you can't emit the unutterable <code>init=</code> thing","m.mentions":{},"msgtype":"m.text"},"ts":1695860430087,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PwfjXdsb2gGmSrXUOPhJv8-tcDWnrIhm5GI36j3Taqk"},
{"content":{"body":"My understanding from the transcript was that mark believed these semantics could be optimized by engines with a simple static pass, and you seemed to say there were cases where it couldn't be optimized, that a simply static analista was not possible.","msgtype":"m.text"},"ts":1695860441428,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DFahru8Vr-4fE6wXnUnAJkGhE0B2rwC2Au4mKNyK1Jc"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1695860453343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rPH6V6jLcbiBl7qr4wUb7KBfE4bgciZ18Pu8KSRWAIA"},
{"content":{"body":"it's probably not possible to do in a single pass","m.mentions":{},"msgtype":"m.text"},"ts":1695860464775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iHvgCBRse7g9M-PSX9wthHhV5fro3u6soBEsaeDI6x4"},
{"content":{"body":"and we do not want to do things that require more than a single pass","m.mentions":{},"msgtype":"m.text"},"ts":1695860473231,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NrRu0Pqrnpw3T_WCfw15izumgaC-pQW9oNrwkOQHKxk"},
{"content":{"body":"Then I agree there remains a question whether such an optimization and tight tooling coupling is advisable","msgtype":"m.text"},"ts":1695860482145,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VYr2GWFCpvYCbh8qb2iCuMCuKLNSmK0bP4GUrc9podE"},
{"content":{"body":"since function declarations are hoisted, we won't know if mark's code pattern in fact holds until we reach the end of the block scope and know all the function declaration names","m.mentions":{},"msgtype":"m.text"},"ts":1695860501116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-xMPYqgC6WBYbF0jouGA_2FKMI3OpncBToyWl_veNbw"},
{"content":{"body":"like it's probably still fine to check if the pattern holds, not too expensive","m.mentions":{},"msgtype":"m.text"},"ts":1695860514074,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_ONc0ZZTx349DhPzPrRHWHv7gv9ft6dMThVEe6tInHo"},
{"content":{"body":"Then I'm still confused. Why is the presence of a let declaration as the first statement of a scope not a sufficient indicator to disable tdz checks on that binding","msgtype":"m.text"},"ts":1695860554603,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$V6blmhjOTm779dYIX1kowivqWHUQhtnq7LnDnalEHCs"},
{"content":{"body":"as a property, i agree with you that it is","m.mentions":{},"msgtype":"m.text"},"ts":1695860594835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I2f41k1dyc25pcKogHXDcQK5Yl3378SRA4MrHcxEyU8"},
{"content":{"body":"as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above","m.mentions":{},"msgtype":"m.text"},"ts":1695860618937,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WiUuK8btu8NDmFc-KVgmAiZ_H1pW3ZezwD3XQx1zobA"},
{"content":{"body":"and that it does not apply as easily to consts","m.mentions":{},"msgtype":"m.text"},"ts":1695860623179,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WpXHwi8cHPmIQ311q7t5FN-Rl6YfJTRaoaF22MgPmdY"},
{"content":{"body":" * as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above. but also we just don't do it because we don't see code like that","m.mentions":{},"m.new_content":{"body":"as a practical matter of implementing the elision, it is not trivial because of lazy compiling as i've described above. but also we just don't do it because we don't see code like that","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WiUuK8btu8NDmFc-KVgmAiZ_H1pW3ZezwD3XQx1zobA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695860658119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gUQfOS3Dej1Ei8f8ljdfikWe8v1ZT-CZrhbw2JPngCI"},
{"content":{"body":"any additional analyses is complexity we'd have to maintain forever and ever, so the tradeoff isn't quite there today for this","m.mentions":{},"msgtype":"m.text"},"ts":1695860685036,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sqW_6dcoKUOqsmIxrOVXYK1twQgyoZXHWlMFDuN88WI"},
{"content":{"body":"though it is strange to me to suggest that a solution is for tooling to _compile away the TDZ_","format":"org.matrix.custom.html","formatted_body":"though it is strange to me to suggest that a solution is for tooling to <em>compile away the TDZ</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695860730832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rpGWEa6XizRQIM37dxzhEFPHubC7yuJxyGZ_NzHgRPo"},
{"content":{"body":"if you're okay with users not getting the runtime checks... why fight to keep it in the language?","m.mentions":{},"msgtype":"m.text"},"ts":1695860755917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nLB0rFiysgK_vxzLZV2eWlP3jWDCUxOTgapDRlu9fSA"},
{"content":{"body":"Right this is about the feasibility of optimizing  such let declarations that would be emited by tooling. Whether that's advisable is a separate question","msgtype":"m.text"},"ts":1695860835207,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OpTR0cgADcLrfO1fxmKa1fN0XQcwWL9yXscwQKa5oT0"},
{"content":{"body":"as a general rule of thumb, all things are feasible","m.mentions":{},"msgtype":"m.text"},"ts":1695860852732,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FzYLIfbSQZ6J5Yw3Ro5I-K5NGz5MaOV0JMK-TRL5wKg"},
{"content":{"body":"or rather, all things are possible to implement","m.mentions":{},"msgtype":"m.text"},"ts":1695860862422,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c6yEw2Wr7FFfsWKNqkSPvvJqTnvdQ8iyF4_8I--6ssI"},
{"content":{"body":"most of the time we just don't wanna","m.mentions":{},"msgtype":"m.text"},"ts":1695860869799,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GSH5qatz7GxOYFZ6V3smHNJJ7pYj15nu2byvpTTnXgU"},
{"content":{"body":"I personally believe that there are different authors. Some care about such performance optimizations, but I'm not sure that means the language semantics should change for them. Yet I am sympathetic with their goal and this could be a way to support it.","msgtype":"m.text"},"ts":1695861097052,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rFmmNqx_GXYsLOgjSpjp-lvskaoIxiMOmqnsidM93fI"},
{"content":{"body":"fair enough, if we had accurate demographic info we could settle this more dispassionately","m.mentions":{},"msgtype":"m.text"},"ts":1695861137784,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aW6gmH9Qsj0irUYD0qVv812Nh_iN2YHINoTC_KrMKrA"},
{"content":{"body":"alas","m.mentions":{},"msgtype":"m.text"},"ts":1695861139905,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mBNe__qaZ0UNKg4qC2AmfOXFscmJVzCC_4H_SbLWbUQ"},
{"content":{"body":"like, we _could_ have a `let2` or whatever as waldemar suggested","format":"org.matrix.custom.html","formatted_body":"like, we <em>could</em> have a <code>let2</code> or whatever as waldemar suggested","m.mentions":{},"msgtype":"m.text"},"ts":1695861168196,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LDR_015N_flbL4HuV9Dq2jRQl6K_cVTLHieUpiGgWTQ"},
{"content":{"body":"but personally i feel like that's a worse choice for the language","m.mentions":{},"msgtype":"m.text"},"ts":1695861173584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tHqIj12viBkCGS-xamxvoVHr46qph1hZdSIFycceXHY"},
{"content":{"body":"though putting my personal feelings aside i can certainly live with that outcome","m.mentions":{},"msgtype":"m.text"},"ts":1695861191683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fwmhVLTG-LcgTZbAxXC9jdcKCqfDrjFv_JtJSaCjcSE"},
{"content":{"body":"back to the different authors point: i was hoping to show that the majority either don't care, either via ignorance or via choosing performance over runtime checks","m.mentions":{},"msgtype":"m.text"},"ts":1695861260693,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UnfHKQvSHMwL0R7qR3xMWzyhtisq2VJjPqer6Cuz7oY"},
{"content":{"body":"a nuance here is that most developers don't care about performance either! and there lies our deeper disagreement. i think web users (not authors) are better served by a language that values performance as the default, if the correctness gains are marginal. i think you and others take the other side of that polarity (or think that TDZ runtime checks aren't marginal in value)","m.mentions":{},"msgtype":"m.text"},"ts":1695861371962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wzAoG72oqBTNTLF2z754Sp5xe-6Z8k_i0iPZNDjYe2Q"},
{"content":{"body":"I think that the state of web tooling means that authors don't have to make that choice or understand it, and that the tooling can make it for them","msgtype":"m.text"},"ts":1695861504667,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FS1E3EmWATdugl8hthjVe2a1FhYNhnkcV57xUScvXgQ"},
{"content":{"body":"we're already in that world, people just use `var`s","format":"org.matrix.custom.html","formatted_body":"we're already in that world, people just use <code>var</code>s","m.mentions":{},"msgtype":"m.text"},"ts":1695861639438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HrVvT5SybmMmzE3bBJ3qTCC9xBPtW3GAuBLORUXgHPk"},
{"content":{"body":"And the Web (or node) is not the only JS environment that should be considered when it comes to consider the impact of changing the semantics","msgtype":"m.text"},"ts":1695861652681,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$I95ZHRSXkeEGH_nXU0wbeDpIY2jZCwWFsc4K0mFzGTo"},
{"content":{"body":"i don't think we, as a committee, _should_ be okay with speccing stuff that is transpiled forever","format":"org.matrix.custom.html","formatted_body":"i don't think we, as a committee, <em>should</em> be okay with speccing stuff that is transpiled forever","m.mentions":{},"msgtype":"m.text"},"ts":1695861738255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SAVcBdgGqFr6SoBR7ibSr6UsNluI3zvub9MR4QUSdls"},
{"content":{"body":"that's a crappy value prop for us engines and disincentivizes things in a way i think everyone would dislike","m.mentions":{},"msgtype":"m.text"},"ts":1695861756468,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y-3cZFHP3idayXXH-Ejd2Q4qxip8dtkrlSWAY7B7ZEk"},
{"content":{"body":"Unless we stop all syntax changes for the language, can we really ween the ecosystem off transpilation?","msgtype":"m.text"},"ts":1695861895452,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$y-rVkc0NZhm0FBwuAGpNOAyO4cveXORfMTZOHCMdBBA"},
{"content":{"body":"that's not what i said","m.mentions":{},"msgtype":"m.text"},"ts":1695861904545,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dPh0EfGKhXYlkEbgc6Dp8rcvEDJKejQNOsBmAuSv31U"},
{"content":{"body":"what i said was, transpiled _forever_","format":"org.matrix.custom.html","formatted_body":"what i said was, transpiled <em>forever</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695861909590,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GJ2AOat6xab9jxiL9ZOgAp19yFhlSz3V1lPJ5-SVIfQ"},
{"content":{"body":"most syntax features are still incentivized for the long-tail adoption untranspiled","m.mentions":{},"msgtype":"m.text"},"ts":1695861924338,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n5yPoXfAfTX2KabJN012O1oZd4znaiUnTANTFh4zuU8"},
{"content":{"body":"transpilation itself is not going to go away because new features are going to be adopted transpiled for the initial N years","m.mentions":{},"msgtype":"m.text"},"ts":1695861948901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0_pDBYxdXES0RBZ0DJfUuccq6eBg4r9KeOpJeRpuPHc"},
{"content":{"body":"what i'm interested in (and led with in the slides) was the adoption inflection point. if i get a whiff that that inflection _can't_ happen because the incentives are aligned against it, then i want to change that","format":"org.matrix.custom.html","formatted_body":"what i'm interested in (and led with in the slides) was the adoption inflection point. if i get a whiff that that inflection <em>can't</em> happen because the incentives are aligned against it, then i want to change that","m.mentions":{},"msgtype":"m.text"},"ts":1695862111763,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CYPjKXFAXFp7gKkAP4rYnS1TVr9Y9eEWehL8ghLUR24"}
]