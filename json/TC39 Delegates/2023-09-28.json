[
{"content":{"body":"> <@mhofman:matrix.org> shu: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.\n\ncould you rephrase with a concrete code snippet?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.</blockquote></mx-reply>could you rephrase with a concrete code snippet?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84"}},"msgtype":"m.text"},"ts":1695859826237,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oknPFPdrIkiAfvT1sd4QNzL8a_WR8diVXwGYQLEYGEA"},
{"content":{"body":"like, are you talking about the case where there are also no escaped, hoisted function declarations?","m.mentions":{},"msgtype":"m.text"},"ts":1695859847605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"},
{"content":{"body":"but the general answer is that hoisted functions hoist above the lexical binding initialization: https://tc39.es/ecma262/#sec-blockdeclarationinstantiation","m.mentions":{},"msgtype":"m.text"},"ts":1695859926880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TsSIFKIf9lBfF-G5Ltb2VvqdiuSrnri75UARzajYSZQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, are you talking about the case where there are also no escaped, hoisted function declarations?\n\nHow can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />like, are you talking about the case where there are also no escaped, hoisted function declarations?</blockquote></mx-reply>How can an escaped hoisted function execute before a let declaration that appears as first statement in the scope is my question","m.relates_to":{"m.in_reply_to":{"event_id":"$XOl8pZgL1esla2kzTrpBtVsMd1f9Vgrz-mfSwMry4x4"}},"msgtype":"m.text"},"ts":1695860018830,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hSthtVvog8DjG_GZevziGYPVoYCv-nIA5LTAgL1M8o4"},
{"content":{"body":"ah, i don't think in that particular configuration it can","m.mentions":{},"msgtype":"m.text"},"ts":1695860082920,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vi2uK3QK53YCHorym9rRq0LSr3kff9VbNtQ_viJoyag"},
{"content":{"body":"Maybe they hoist above, but their utterances cannot be in any code that is executed before the declarations","msgtype":"m.text"},"ts":1695860088730,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_nczcnKT2riwTqjsWyF72Tivh8Rx6VeUaTSuWoWD4Z0"},
{"content":{"body":"to anticipate your next question: currently no engine fully elides all inner accesses even in that configuration, however, i imagine due to two factors","m.mentions":{},"msgtype":"m.text"},"ts":1695860182235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nNwEr75VXQ7UH9WbXoWIA9P9DR-XmF8-OQOAPqoXwmQ"},
{"content":{"body":"1) people don't actually write code like that\n\n2) every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost for this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695860253878,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w"},
{"content":{"body":" * 1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"1. people don't actually write code like that\n2. every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>people don't actually write code like that</li>\n<li>every engine lazy compiles. the dominance information is available when compiling the outer function that contains the inner functions, but we need that information when compiling the inner functions, which occurs lazily when those functions are called. this means that we need to plumb that parse-time information and save it until those inner functions are compiled. nobody AFAIK incurs the memory cost and the complexity for plumbing this</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Bv0Gc2PTaFgM28q2kIWZGNgiHdlwHUOSymGXTxPv4_w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695860265164,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nPaz3mDQ3Vg2wvExqWXAJhvCm6I2Mw1FGL6pIu0ijuU"},
{"content":{"body":"we _could_ start doing it if more code were written like that","format":"org.matrix.custom.html","formatted_body":"we <em>could</em> start doing it if more code were written like that","m.mentions":{},"msgtype":"m.text"},"ts":1695860277197,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OKu660vux7SMuw3_lZkKxB18QdaZzrp3Agm-BuNtV_A"},
{"content":{"body":"but that creates a world where optimal performance depends on a tight coupling of what tooling does and what engines do, which is in general brittle, and undesirable for both tools and engines","m.mentions":{},"msgtype":"m.text"},"ts":1695860318068,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x8Cu1YqPAiwmHXxx8WHAe2yro29if0yjFXU0AXqJcDM"},
{"content":{"body":"since when one or the other makes a move for whatever other reason, users might complain","m.mentions":{},"msgtype":"m.text"},"ts":1695860326763,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b4MvBjdP0lwJqA2rkDE3jnwzKiK2OElWOGPFUQK2Jgg"}
]