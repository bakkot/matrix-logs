[
{"content":{"body":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated","msgtype":"m.text","org.matrix.msc1767.text":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated"},"ts":1669771733108,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$T_vam6c9mIWQTdZPoi35MEbRp-SGRoD_RWq8Yh4W4Dg"},
{"content":{"body":"(or maybe we're beyond that now?)","msgtype":"m.text","org.matrix.msc1767.text":"(or maybe we're beyond that now?)"},"ts":1669772033567,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$3shYSHhX5M9_Mff2CxQmT-5tl2n9kPZxUq8ZB6rQBYw"},
{"content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772473690,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y"},
{"content":{"body":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","m.new_content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"m.relates_to":{"event_id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772653774,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VBdZ-eTMIVVQBPNl9CrdjzpENHWGp6Fem65czbqiXTQ"},
{"content":{"body":"good morning, all","msgtype":"m.text","org.matrix.msc1767.text":"good morning, all"},"ts":1669797377430,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$hTtqQJG8ENI7IhLFl4nn2nNgFj8cd3yJxVWFkJL1AdI"},
{"content":{"body":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints","msgtype":"m.text","org.matrix.msc1767.text":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints"},"ts":1669797426572,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$AtTj1PrtnzIe2KuHab2-s8phqmPUsl4Jp7ksHcOQjv0"},
{"content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797861672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0"},
{"content":{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","m.new_content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797896591,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$GEuZjlLIn_lPfM9Az2rZAyTtoOKfam-L2EMF9OnK9Zc"},
{"content":{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/html"}]},"ts":1669798035075,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$CrJrxWMx_GgfZHKHM6Nswuu8bFV7QySySj3xKeV-01o"},
{"content":{"body":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up."},"ts":1669798139097,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JAF6LQlE8CWwL22inlaetg9ayll-_klo5a1RaOqtvww"},
{"content":{"body":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes.","msgtype":"m.text","org.matrix.msc1767.text":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes."},"ts":1669798359672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0B5xcpqA5_IxLLYSm1tO-69NBuFEq8gzdoVuXquiU0o"},
{"content":{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/html"}]},"ts":1669798371453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JnTGUYwfAD6MrIppogzvNYxJhqZxuhEunT5Jh9ypdLg"},
{"content":{"body":"Thanks bakkot I have tagged it as such.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks bakkot I have tagged it as such.","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","mimetype":"text/html"}]},"ts":1669798955682,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xiuu_K3GV3WLomBrW-NiQJsri9oYocnGV1CBqqz0beM"},
{"content":{"body":"oooohhh I like this history slide a lot","msgtype":"m.text","org.matrix.msc1767.text":"oooohhh I like this history slide a lot"},"ts":1669799059413,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"},
{"content":{"body":"definitely going to steal that for my proposal slides from now on","msgtype":"m.text","org.matrix.msc1767.text":"definitely going to steal that for my proposal slides from now on"},"ts":1669799081947,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_IbFqTR0RP-wDpTrP28GU2OEJxZItRe8uHWW56B0Sd8"},
{"content":{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","m.relates_to":{"m.in_reply_to":{"event_id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","mimetype":"text/html"}]},"ts":1669799108897,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$qWhI6zMgxFsegtoB9fyHufM7aJbDEA87HfevRIFBeEk"},
{"content":{"body":"if you can fit it all on one slide, I'll be impressed","msgtype":"m.text","org.matrix.msc1767.text":"if you can fit it all on one slide, I'll be impressed"},"ts":1669799150284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZZKqY4MqbGPOlV9DhQeOwZsY_sogED2jTrB1j1eHTuY"},
{"content":{"body":"It would be surprising if Node and Deno really continue to not support this when Chrome does ","format":"org.matrix.custom.html","formatted_body":"It would be surprising if Node and Deno really continue to not support this when Chrome does","msgtype":"m.text"},"ts":1669799200702,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"},
{"content":{"body":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc.","msgtype":"m.text","org.matrix.msc1767.text":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc."},"ts":1669799467481,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JC6YcZwxH0TdWY_jEiLlzB_wJRE6MGjSvYc4vIvPclE"},
{"content":{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","format":"org.matrix.custom.html","formatted_body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","mimetype":"text/plain"},{"body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","mimetype":"text/html"}]},"ts":1669799495552,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yW9Q_D7fyK59a083qn051T-rrrgWtyMVBWs8yL2jPoM"},
{"content":{"body":"(I deleted Michael Ficarra's comment accidentally)","msgtype":"m.text","org.matrix.msc1767.text":"(I deleted Michael Ficarra's comment accidentally)"},"ts":1669799517615,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"},
{"content":{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","m.relates_to":{"m.in_reply_to":{"event_id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/html"}]},"ts":1669799642912,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$lsHUsnXWlaCc1JUswYx_eb1CZ3O9sseqKjikm6S2Dcs"},
{"content":{"body":"Rob Palmer: that was Saboff, not me","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: that was Saboff, not me","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","mimetype":"text/html"}]},"ts":1669799719546,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vts7nqqSA_OExOkljk8cBM-u_1QMOiUd6kcbCs_6GYo"},
{"content":{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","mimetype":"text/html"}]},"ts":1669799735437,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7kB62UOo-IFrUPAmpMEPLu-F58leHwY_XbFTTt9EmYM"},
{"content":{"body":"oohhh I see","msgtype":"m.text","org.matrix.msc1767.text":"oohhh I see"},"ts":1669799760884,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$juJDAmWu82UmvowEoiJmvYzvB1eU57SliWOOp-I-gak"},
{"content":{"body":"too early","msgtype":"m.text","org.matrix.msc1767.text":"too early"},"ts":1669799775973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$poNVsnZ3xwg7lcqdnQisf1JOkW7Wlnzc_KhnDFw_cLI"},
{"content":{"body":"for the notes, who is speaking other than frank?","msgtype":"m.text","org.matrix.msc1767.text":"for the notes, who is speaking other than frank?"},"ts":1669800290158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-b__KvFmRfpmtb-8Annsd0iDt41qGhqj9kyqK_zaqQ8"},
{"content":{"body":"MAH","msgtype":"m.text","org.matrix.msc1767.text":"MAH"},"ts":1669800299995,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$A-Nqn4a6wOyB5QrW5wyep0au0kT-NYZZdGvJRHgPzmU"},
{"content":{"body":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?","msgtype":"m.text","org.matrix.msc1767.text":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?"},"ts":1669800460229,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$8HkMX9tQnowAqeJX5LSxDGQIce9G3LwzDA7lINW877g"},
{"content":{"body":"like... ideally every single `Intl` constructor should take a record options bag ","format":"org.matrix.custom.html","formatted_body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like... ideally every single `Intl` constructor should take a record options bag ","mimetype":"text/plain"},{"body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","mimetype":"text/html"}]},"ts":1669800489438,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kXQCjHN2zb8mE0qdbWUgQ0vAhkSFFxGbrmwQLTwyNLY"},
{"content":{"body":"The problem is how long we need to wait for r&t 😂","msgtype":"m.text","org.matrix.msc1767.text":"The problem is how long we need to wait for r&t 😂"},"ts":1669800797239,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$txgMpsG2G2Mkgn9mjpmXvh95erap0S0g7_cFGazl5zk"},
{"content":{"body":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is"},"ts":1669800805949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t9M_7SFVTGzmrZ_Nlgy2FcVUu8uGu9F87BG2Bs2LXtI"},
{"content":{"body":"everything else is already objects","msgtype":"m.text","org.matrix.msc1767.text":"everything else is already objects"},"ts":1669800811659,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SUWP6KbeZHi4p-8pz48b39JrYG-5ujZW9k7CL5_OTkc"},
{"content":{"body":"So we add r&t but our APIs do not use it, only userland use it?","msgtype":"m.text","org.matrix.msc1767.text":"So we add r&t but our APIs do not use it, only userland use it?"},"ts":1669800864358,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$MiTzQQvRr-kY_Y9UdUyOuW6xPXIeCco757MGPADKSes"},
{"content":{"body":"i'm not even convinced that the different identity thing is that big a problem","msgtype":"m.text","org.matrix.msc1767.text":"i'm not even convinced that the different identity thing is that big a problem"},"ts":1669800867195,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dItkHI8ujCx_fLbrsyVO4q8FToTKrnXkllRlpei9JYk"},
{"content":{"body":"caching is good for this, function is good for this","msgtype":"m.text","org.matrix.msc1767.text":"caching is good for this, function is good for this"},"ts":1669800883339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xGtFbmEHCbWPnG2h0BSrgA5nLQzJdI9FyBBO709dq3Q"},
{"content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800896303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac"},
{"content":{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","m.new_content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800900344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r3OWA3vaBMJza4qMpF2pJ4092yzJ_2d04KLkg3Wstts"},
{"content":{"body":"wait temporal has non-symmetric equality","msgtype":"m.text","org.matrix.msc1767.text":"wait temporal has non-symmetric equality"},"ts":1669802756250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iq23gceot6owFs2Rg_ui3HYGyJW-lmkVEVrK-RCqHis"},
{"content":{"body":"I had not realized that","msgtype":"m.text","org.matrix.msc1767.text":"I had not realized that"},"ts":1669802758679,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uwQOPKS_XHouH9eEnhjhwcaVcoVPR_I_4m_UJ4HToGw"},
{"content":{"body":"seems... not great?","msgtype":"m.text","org.matrix.msc1767.text":"seems... not great?"},"ts":1669802766272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YrOdKvb-8RCOBOSxTx9hSmIO29lh8Y7MxRm7LrYjGNA"},
{"content":{"body":"really?","msgtype":"m.text","org.matrix.msc1767.text":"really?"},"ts":1669802845653,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8aIePWsZ8fFvlawP3S5q5UyvoRbT4KVsj1plnQv1EFA"},
{"content":{"body":"how can it not be symmetric...?","msgtype":"m.text","org.matrix.msc1767.text":"how can it not be symmetric...?"},"ts":1669802852103,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E9nWMRYrLTMOVqjAdeSKYMju2eyFsfPpoQ6OqQBMK6I"},
{"content":{"body":"that was the claim made in this presentation","msgtype":"m.text","org.matrix.msc1767.text":"that was the claim made in this presentation"},"ts":1669802856840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y12NEWBpIWbfg4nRWm1UPrqSbo3NXlDI8auFtozlJKs"},
{"content":{"body":"not literal `===` equality but equality methods","format":"org.matrix.custom.html","formatted_body":"not literal <code>===</code> equality but equality methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"not literal `===` equality but equality methods","mimetype":"text/plain"},{"body":"not literal <code>===</code> equality but equality methods","mimetype":"text/html"}]},"ts":1669802866946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"},
{"content":{"body":"Or as etymologists would call it, anametric equality.","msgtype":"m.text","org.matrix.msc1767.text":"Or as etymologists would call it, anametric equality."},"ts":1669802928736,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xrFErVsLy8eJlGY4yTbQC8V6mSsCS9SVkpaqR3OrN3I"},
{"content":{"body":"page 16 of the notes for the transcript where this was mentioned","msgtype":"m.text","org.matrix.msc1767.text":"page 16 of the notes for the transcript where this was mentioned"},"ts":1669802961922,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$GSFm4Li4aUwmflqCQF3L-BwRjhpGyDRi7hHRadpYuXE"},
{"content":{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","format":"org.matrix.custom.html","formatted_body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","mimetype":"text/plain"},{"body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","mimetype":"text/html"}]},"ts":1669803203549,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$t0AToB5UesYaHRVcjsD-yP9jKT9mURGNP75VpMfJzuY"},
{"content":{"body":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part","msgtype":"m.text","org.matrix.msc1767.text":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part"},"ts":1669803291120,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$W8YwuJZGeF4KMuAyg_0M9GtM8H2_2zz5wPcBKGV2xY8"},
{"content":{"body":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant","msgtype":"m.text","org.matrix.msc1767.text":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant"},"ts":1669803318238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_GAyHqEjVkMmwrbOs_ZPobdmtIFphn48eQD6s5NctfU"},
{"content":{"body":"like what is the concrete thing that those objections refer to?","msgtype":"m.text","org.matrix.msc1767.text":"like what is the concrete thing that those objections refer to?"},"ts":1669803337456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6pOhQwXgKexDIa8wgYQQeOPHkUryrF-sFHOnga3UMsg"},
{"content":{"body":"i have thoughts but my brain","msgtype":"m.text","org.matrix.msc1767.text":"i have thoughts but my brain"},"ts":1669803387483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w5SXvVhQ_AgqS6MO4VaDCQzLGC3NrTiKAW3r5IPErE8"},
{"content":{"body":"so slow","msgtype":"m.text","org.matrix.msc1767.text":"so slow"},"ts":1669803388914,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E39d5a9GquiHl4wxuPJUfl7ykrM3VTcN0aFWnQN5Bso"},
{"content":{"body":"does not bode well for tomorrow","msgtype":"m.text","org.matrix.msc1767.text":"does not bode well for tomorrow"},"ts":1669803396120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hari5iwoHeti7_5-cZowYAUJrsyhjlJySznLV1Om0Ew"},
{"content":{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","m.relates_to":{"m.in_reply_to":{"event_id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","mimetype":"text/html"}]},"ts":1669804213172,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$_H1X1rZPPSSzaL0PsgFTVmySoW59Q9q0kq68KxRgQWo"},
{"content":{"body":"it's the `compare` methods","format":"org.matrix.custom.html","formatted_body":"it's the <code>compare</code> methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's the `compare` methods","mimetype":"text/plain"},{"body":"it's the <code>compare</code> methods","mimetype":"text/html"}]},"ts":1669804219913,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$uoNs5sE8R7jwN9aqeO7e0T8qbBUvMiCUJaRQb6MGOKw"},
{"content":{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","format":"org.matrix.custom.html","formatted_body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/plain"},{"body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/html"}]},"ts":1669804254412,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rG_4RlCsOAtQnmSp7u5S7YqdZV9npnS8EROehdFo9pQ"},
{"content":{"body":"but if the receiver is the superset, it won't work","msgtype":"m.text","org.matrix.msc1767.text":"but if the receiver is the superset, it won't work"},"ts":1669804265709,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$vemR4Zn8fKWpJBL4SxQfUMULkCRopN5m5I-Ov9116QM"},
{"content":{"body":"(because it will lack certain properties)","msgtype":"m.text","org.matrix.msc1767.text":"(because it will lack certain properties)"},"ts":1669804281275,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$zWW4lStLmIEPABJv3l9YPGy2c39RAnZhaZQwmQrqpMU"},
{"content":{"body":"actually, nvm me, the `compare` methods are static","format":"org.matrix.custom.html","formatted_body":"actually, nvm me, the <code>compare</code> methods are static","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"actually, nvm me, the `compare` methods are static","mimetype":"text/plain"},{"body":"actually, nvm me, the <code>compare</code> methods are static","mimetype":"text/html"}]},"ts":1669804317003,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$fjiOHv1S1fp-DqWWp6ZuU6wDAuB-KVCz7Jw5a1xph3M"},
{"content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804345537,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM"},
{"content":{"body":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","m.new_content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"m.relates_to":{"event_id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804356761,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TsJZL-jy55bWcV6F4klEZjMF43Sn7wYVgRir0StMpn8"},
{"content":{"body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we don’t argue against the goal of immutability ","format":"org.matrix.custom.html","formatted_body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we don’t argue against the goal of immutability","msgtype":"m.text"},"ts":1669804536309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-ndaGFGsbwk3tWAp5s3GrVrYdKUcBL8jKSO-nKSJKAY"},
{"content":{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","mimetype":"text/html"}]},"ts":1669804670567,"senderName":"jasew","senderId":"@jasew:matrix.org","id":"$zo6Za8OdzuZEY2BjB-uQtBv5v0syV7kC1Nu-LaB1NGI"},
{"content":{"body":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs","msgtype":"m.text","org.matrix.msc1767.text":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs"},"ts":1669804903017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"},
{"content":{"body":"IIRC, equality has always been a top-level goal?","msgtype":"m.text","org.matrix.msc1767.text":"IIRC, equality has always been a top-level goal?"},"ts":1669804952572,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"},
{"content":{"body":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted.","msgtype":"m.text","org.matrix.msc1767.text":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted."},"ts":1669805046426,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ZwPCjC5DM8rgIho6twJ0NE_8UUBGGMgjvzs20EjhB78"},
{"content":{"body":"> <@rbuckton:matrix.org> IIRC, equality has always been a top-level goal?\n\nYes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />IIRC, equality has always been a top-level goal?</blockquote></mx-reply>Yes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer","m.relates_to":{"m.in_reply_to":{"event_id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"}},"msgtype":"m.text"},"ts":1669805058844,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CiCvM5kkX2XoW53iGRoEkEDSj6F8_6CaGccQw-sfVPs"},
{"content":{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","m.relates_to":{"m.in_reply_to":{"event_id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","mimetype":"text/html"}]},"ts":1669805064747,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6d1nxG-Y2F7HzCWQkGnEz-o6pdHZGTHamwlWgG7zshY"},
{"content":{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","format":"org.matrix.custom.html","formatted_body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","mimetype":"text/plain"},{"body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","mimetype":"text/html"}]},"ts":1669805112494,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7YJvFsyL4_k44VMwduSAgWynebqEjsjrO_dj0PRG82U"},
{"content":{"body":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality","msgtype":"m.text","org.matrix.msc1767.text":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality"},"ts":1669805239837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"},
{"content":{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","format":"org.matrix.custom.html","formatted_body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/plain"},{"body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/html"}]},"ts":1669805246306,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$deJyQH-NxQQ95Fh-9B3hIk6G462QTjpgLV_e3efPsUI"},
{"content":{"body":"there was even a proposal for that","msgtype":"m.text","org.matrix.msc1767.text":"there was even a proposal for that"},"ts":1669805247819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aoqsr9Yd1ZgSZJKJk_CEG8lgkfHpHAE79kw0HpqYSEM"},
{"content":{"body":"rekey + compositekey","msgtype":"m.text","org.matrix.msc1767.text":"rekey + compositekey"},"ts":1669805276617,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$r2BmRdv9n6JfP2RNfXXofzNhV22AXec9YIYnwGzmWOk"},
{"content":{"body":"and we might want that even in a world with R&T given that sometimes you want to key off of objects","msgtype":"m.text","org.matrix.msc1767.text":"and we might want that even in a world with R&T given that sometimes you want to key off of objects"},"ts":1669805289011,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tCEc4OMWCEoKW9e1YixOYXLTNbaBjZgk4XOtlZtwlzM"},
{"content":{"body":"i don't see a realistic path in doing value types with operator overloading","msgtype":"m.text","org.matrix.msc1767.text":"i don't see a realistic path in doing value types with operator overloading"},"ts":1669805298039,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$htppgkM4M-4Fxsf3UIEg_BUG27ieayA5JrdgF_GwP3I"},
{"content":{"body":"though I guess symbols as weakmap keys make that less necessary","msgtype":"m.text","org.matrix.msc1767.text":"though I guess symbols as weakmap keys make that less necessary"},"ts":1669805301685,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM"},
{"content":{"body":"(for performance)","msgtype":"m.text","org.matrix.msc1767.text":"(for performance)"},"ts":1669805304651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lxTlGPBfpzjTtQu3SiGSgv3AbKlXZq2wGOA-AWpB-iw"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","m.relates_to":{"m.in_reply_to":{"event_id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/html"}]},"ts":1669805402152,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","m.new_content":{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"ts":1669805412787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oPO7hWS7LXBa6qBtl-BJSLFqdRm2sRxmcTVvnziVwKE"},
{"content":{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","format":"org.matrix.custom.html","formatted_body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","mimetype":"text/plain"},{"body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","mimetype":"text/html"}]},"ts":1669805453155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4kOS-TuZYrpte4qyM9xDw67tQmVa-iKRfmj0EMbTGf0"},
{"content":{"body":"I think when we drop equality, the argument for value types is weaker","msgtype":"m.text","org.matrix.msc1767.text":"I think when we drop equality, the argument for value types is weaker"},"ts":1669805462559,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"},
{"content":{"body":"I am very interested in multi-key maps... ","msgtype":"m.text","org.matrix.msc1767.text":"I am very interested in multi-key maps... "},"ts":1669805489748,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nAren't they just not value types if we drop equality?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>Aren't they just not value types if we drop equality?","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805501746,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$001RbYT1azmiEh19aGlz9VQkO6WOkQc5zKbcVolN_oM"},
{"content":{"body":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs","msgtype":"m.text","org.matrix.msc1767.text":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs"},"ts":1669805536608,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ORxztHL9W2PdtVXa5rAcf03G8MEDu7Qn-dSGMAF-uSg"},
{"content":{"body":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?"},"ts":1669805538463,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$u69FQv-xd1LgNb8Ouk5yOcu4N6wIww8pFvEztaTuOwM"},
{"content":{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","m.relates_to":{"m.in_reply_to":{"event_id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/html"}]},"ts":1669805542261,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM"},
{"content":{"body":"Without === there is little value add; as in just use immutable.js and be done with it. ","format":"org.matrix.custom.html","formatted_body":"Without === there is little value add; as in just use immutable.js and be done with it.","msgtype":"m.text"},"ts":1669805559400,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"},
{"content":{"body":"Operator overloading here is not user defined","msgtype":"m.text","org.matrix.msc1767.text":"Operator overloading here is not user defined"},"ts":1669805560464,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nIt wouldn’t be value types without equality, if by value types we are referencing TC39’s historical investigations ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>It wouldn’t be value types without equality, if by value types we are referencing TC39’s historical investigations","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805584018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MbhOGpWrgYksdK_TEYuIihkUkYGYsTlYujVrvrbZPjY"},
{"content":{"body":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type","msgtype":"m.text","org.matrix.msc1767.text":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type"},"ts":1669805616023,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$AoQ9TtqpBxtow2UhN4ijKs_AsHP3zdIkjcjmP1ERazE"},
{"content":{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","m.relates_to":{"m.in_reply_to":{"event_id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","mimetype":"text/html"}]},"ts":1669805643942,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE"},
{"content":{"body":"> <@pipobscure:matrix.org> Without === there is little value add; as in just use immutable.js and be done with it. \n\nI disagree. It would be valuable, just less so.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g\">In reply to</a> <a href=\"https://matrix.to/#/@pipobscure:matrix.org\">@pipobscure:matrix.org</a><br>Without === there is little value add; as in just use immutable.js and be done with it.</blockquote></mx-reply>I disagree. It would be valuable, just less so.","m.relates_to":{"m.in_reply_to":{"event_id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"}},"msgtype":"m.text"},"ts":1669805700416,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XYDn3wLIx08d7Tk-E7bCJGExRf-8e3zYg4y97iL9YOI"},
{"content":{"body":"> <@haxjs:matrix.org> but === already be overloaded by different primitive types and objects?\n\nI guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>but === already be overloaded by different primitive types and objects?</blockquote></mx-reply>I guess it depends on how you see R&amp;T. If you say &quot;R&amp;T are like objects&quot;, then giving them a different equality feels different from how other primitives have their own equality","m.relates_to":{"m.in_reply_to":{"event_id":"$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> but === already be overloaded by different primitive types and objects?\n\nI guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>but === already be overloaded by different primitive types and objects?</blockquote></mx-reply>I guess it depends on how you see R&amp;T. If you say &quot;R&amp;T are like objects&quot;, then giving them a different equality feels different from how other primitives have their own equality","mimetype":"text/html"}]},"ts":1669805717560,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM"},
{"content":{"body":"i still think we should explore making Array.prototype and Object.prototype reject numeric properties","msgtype":"m.text","org.matrix.msc1767.text":"i still think we should explore making Array.prototype and Object.prototype reject numeric properties"},"ts":1669805845440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H9NHIpaJpZVzCwEe4BPSpmcXngdlWYbpTOoOUgFJCaQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality\n\nAre we talking about user problems or impl complexcity?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I guess it depends on how you see R&amp;T. If you say \"R&amp;T are like objects\", then giving them a different equality feels different from how other primitives have their own equality</blockquote></mx-reply>Are we talking about user problems or impl complexcity?","m.relates_to":{"m.in_reply_to":{"event_id":"$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> I guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality\n\nAre we talking about user problems or impl complexcity?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I guess it depends on how you see R&amp;T. If you say \"R&amp;T are like objects\", then giving them a different equality feels different from how other primitives have their own equality</blockquote></mx-reply>Are we talking about user problems or impl complexcity?","mimetype":"text/html"}]},"ts":1669805848313,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$7Yii4HC4mgo0T3WZaToeN9otxSdZaZTloWYT4od1fwM"},
{"content":{"body":"Implementation complexity ","msgtype":"m.text"},"ts":1669805869771,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OSHOMmq2KB2Bpw9U_rh7bQUakoKI9NVwvdwPE7kAkiw"},
{"content":{"body":"so I don't fully understand that, i just feel R&T is just another primitive and their equal operation.","msgtype":"m.text","org.matrix.msc1767.text":"so I don't fully understand that, i just feel R&T is just another primitive and their equal operation."},"ts":1669805932618,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ad9QD7bMwhjKQOlFGKk-ue-uHbhoWjbbDN_LO2-b5Ww"},
{"content":{"body":"shu: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","mimetype":"text/html"}]},"ts":1669805976470,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WiTVuqBvMyVaTuH4QOHbNK7hX7ceZb3O6hOKFG55-IE"},
{"content":{"body":"sorry, \"Action Item\"","msgtype":"m.text","org.matrix.msc1767.text":"sorry, \"Action Item\""},"ts":1669806015650,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S2eoWjZqEZkcMrb0r9y9KfkL4tOsnTfaNDFKBkYDCEY"},
{"content":{"body":"Anyway, we have many use cases of deep equality, so without that we just throw the heavy tasks to developers.","msgtype":"m.text","org.matrix.msc1767.text":"Anyway, we have many use cases of deep equality, so without that we just throw the heavy tasks to developers."},"ts":1669806017730,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$m-a-SZRK8QZ8bKNdh3YuHgY_C3lkDlB5tdKqQr2HXDE"},
{"content":{"body":"I wonder if we'd benefit from some design principles, perhaps as invariants.","msgtype":"m.text","org.matrix.msc1767.text":"I wonder if we'd benefit from some design principles, perhaps as invariants."},"ts":1669806460470,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TP3vNvF45yUzbQgdNolvRDH3fGWb_gyLyOnL17wBVIs"},
{"content":{"body":"Something like https://www.w3.org/TR/html-design-principles/#priority-of-constituencies","msgtype":"m.text","org.matrix.msc1767.text":"Something like https://www.w3.org/TR/html-design-principles/#priority-of-constituencies"},"ts":1669806463703,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$lZkTOyV8hVSyPcnEzXNV-Y9h2IbydrS7UdgyG_Qry4s"},
{"content":{"body":"it's unclear what the priority is here","msgtype":"m.text","org.matrix.msc1767.text":"it's unclear what the priority is here"},"ts":1669806473528,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$dfWB1lWiW9_o9ptJg63TTFIVFgwGwptALQpA1-FYjuE"},
{"content":{"body":"rbuckton: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","mimetype":"text/html"}]},"ts":1669806481660,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$hkZS1incaiVxTb8rEFugjd5fv2R63hTNOzhJ_Bq749A"},
{"content":{"body":"The real problem is who can represent developers.","msgtype":"m.text","org.matrix.msc1767.text":"The real problem is who can represent developers."},"ts":1669806494321,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo"},
{"content":{"body":"that's a problem indeed","msgtype":"m.text","org.matrix.msc1767.text":"that's a problem indeed"},"ts":1669806506280,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NcBe-yCcCw8y69if3-s1i1YwyPae086QRV1K_m6AqeE"},
{"content":{"body":"we resume at the top of the hour 1pm local time, which is in 52mins","msgtype":"m.text","org.matrix.msc1767.text":"we resume at the top of the hour 1pm local time, which is in 52mins"},"ts":1669806507175,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$5S7FvhGUS9fyxIAKYcaKlDMXOOmCrBrJFAD1hcP7gKk"},
{"content":{"body":"but even in the presence of a representative, do we care?","msgtype":"m.text","org.matrix.msc1767.text":"but even in the presence of a representative, do we care?"},"ts":1669806517918,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$m5vwu9acuLudAfrlfoJ7FlX9y4zVs7ez0gnQ8xKpMPQ"},
{"content":{"body":"littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the &quot;dynamic comparison in Map/Set&quot; thing for awhile, and started working on a draft of a proposal awhile ago.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago. ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the &quot;dynamic comparison in Map/Set&quot; thing for awhile, and started working on a draft of a proposal awhile ago.","mimetype":"text/html"}]},"ts":1669806540436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs"},
{"content":{"body":"> <@haxjs:matrix.org> The real problem is who can represent developers.\n\nWe have many delegates that are JavaScript developers and not just standard/engine engineers ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br />The real problem is who can represent developers.</blockquote></mx-reply>We have many delegates that are JavaScript developers and not just standard/engine engineers","m.relates_to":{"m.in_reply_to":{"event_id":"$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo"}},"msgtype":"m.text"},"ts":1669806549319,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4"},
{"content":{"body":"> <@rbuckton:matrix.org> littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.\n\nhttps://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.</blockquote></mx-reply>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","m.relates_to":{"m.in_reply_to":{"event_id":"$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.\n\nhttps://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.</blockquote></mx-reply>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","mimetype":"text/html"}]},"ts":1669806589230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> We have many delegates that are JavaScript developers and not just standard/engine engineers\n\nyeah, but who can say \" I represent the majority of developers\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We have many delegates that are JavaScript developers and not just standard/engine engineers</blockquote></mx-reply>yeah, but who can say &quot; I represent the majority of developers&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> We have many delegates that are JavaScript developers and not just standard/engine engineers\n\nyeah, but who can say \" I represent the majority of developers\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We have many delegates that are JavaScript developers and not just standard/engine engineers</blockquote></mx-reply>yeah, but who can say &quot; I represent the majority of developers&quot;?","mimetype":"text/html"}]},"ts":1669806600540,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$YRLJxmrUtUQQELSPd6kM3y4XWNQ09mD0b9h3cLQPf7Q"},
{"content":{"body":"I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.","msgtype":"m.text","org.matrix.msc1767.text":"I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is."},"ts":1669806603157,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"},
{"content":{"body":"Plus something like `Equaler` would have value in other APIs like `.includes` and `.groupByToMap`","format":"org.matrix.custom.html","formatted_body":"Plus something like <code>Equaler</code> would have value in other APIs like <code>.includes</code> and <code>.groupByToMap</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Plus something like `Equaler` would have value in other APIs like `.includes` and `.groupByToMap`","mimetype":"text/plain"},{"body":"Plus something like <code>Equaler</code> would have value in other APIs like <code>.includes</code> and <code>.groupByToMap</code>","mimetype":"text/html"}]},"ts":1669806727447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FbZhFpDN1VqxOtLJVgRagjLeGMjeuYBI4tq16c3pRg4"},
{"content":{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nMe too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.</blockquote></mx-reply>Me too","m.relates_to":{"m.in_reply_to":{"event_id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"}},"msgtype":"m.text"},"ts":1669807660169,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MfPa5t1pfXDk9v2mdXg2CceGp0c2wGteexH2y8z0Slg"},
{"content":{"body":"> <@rbuckton:matrix.org> https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)\n\nThanks for sharing this!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)</blockquote></mx-reply>Thanks for sharing this!","m.relates_to":{"m.in_reply_to":{"event_id":"$POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY"}},"msgtype":"m.text"},"ts":1669807678727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s"},
{"content":{"body":"> <@littledan:matrix.org> Thanks for sharing this!\n\nI also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Thanks for sharing this!</blockquote></mx-reply>I also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","m.relates_to":{"m.in_reply_to":{"event_id":"$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Thanks for sharing this!\n\nI also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Thanks for sharing this!</blockquote></mx-reply>I also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","mimetype":"text/html"}]},"ts":1669807747495,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9mna5bRabZkB8hGRy0-xL8IFAJZ5cK2Vd7k5D1HpywU"},
{"content":{"body":"I was cryptic in my \"i don't have much time\" -- I'm not dying but ill be taking a break in march. We have some great folks from mozilla taking over though","msgtype":"m.text","org.matrix.msc1767.text":"I was cryptic in my \"i don't have much time\" -- I'm not dying but ill be taking a break in march. We have some great folks from mozilla taking over though"},"ts":1669809326149,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OxAXhUl6W9Vv-C2Mnk2lVc5kzGm0ab80y7s6iBtDBtY"},
{"content":{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nI don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don&#39;t quite understand what alternative Yulia has in mind, and I&#39;d like to know what it is.</blockquote></mx-reply>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","m.relates_to":{"m.in_reply_to":{"event_id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nI don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don&#39;t quite understand what alternative Yulia has in mind, and I&#39;d like to know what it is.</blockquote></mx-reply>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","mimetype":"text/html"}]},"ts":1669809410570,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0"},
{"content":{"body":"> <@yulia:mozilla.org> I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded\n\nI think the goals have been shared lots of times; I honestly don’t know what kind of answer would work better for you.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded</blockquote></mx-reply>I think the goals have been shared lots of times; I honestly don’t know what kind of answer would work better for you.","m.relates_to":{"m.in_reply_to":{"event_id":"$mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0"}},"msgtype":"m.text"},"ts":1669809486468,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EShYZZHn0idq5gjitdpgO3xxaxHjQKwlSsMkg197PqE"},
{"content":{"body":"The presentation had a slide shown twice with three high-level goals, and went into detail about how they are related","msgtype":"m.text"},"ts":1669809521505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5MEsvzg9m3jvhYubh8WkzUKvkTuWrivmmNCWrSjrS2k"},
{"content":{"body":"We are restarting plenary in 1 minute.","msgtype":"m.text","org.matrix.msc1767.text":"We are restarting plenary in 1 minute."},"ts":1669809540236,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$GdUDUWQFBFGKFtRJT58gRGlATN76_m6BEEjQl0A5cRY"},
{"content":{"body":"Ashley Claymore shared with me an sketch of building on top of shared structs, could you also share it with yulia if you didn't already?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> shared with me an sketch of building on top of shared structs, could you also share it with <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> if you didn't already?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore shared with me an sketch of building on top of shared structs, could you also share it with yulia if you didn't already?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> shared with me an sketch of building on top of shared structs, could you also share it with <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> if you didn't already?","mimetype":"text/html"}]},"ts":1669809558644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LcVtZfOCDas1vGqk3qUasi6scdSDUBMFUQjy0tG7Ch4"},
{"content":{"body":"Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754","msgtype":"m.text"},"ts":1669809612959,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk"},
{"content":{"body":"> <@littledan:matrix.org> Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754\n\nI believe this matches what something around “shared structs” would be","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%246BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754</blockquote></mx-reply>I believe this matches what something around “shared structs” would be","m.relates_to":{"m.in_reply_to":{"event_id":"$6BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk"}},"msgtype":"m.text"},"ts":1669809642179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f54xWr_Yxbg5cnsnDDI2PIPG-zJXGWYg9BKz_g9v2ss"},
{"content":{"body":"I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking","msgtype":"m.text","org.matrix.msc1767.text":"I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking"},"ts":1669809684707,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs"},
{"content":{"body":"(There aren’t all that many observable properties that you derive from trying to align with shared structs. Seems like typeof, ===, not sure what else)","msgtype":"m.text"},"ts":1669809688334,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HMEuK4y7BFqTC2JqQifdY3fh7bnBb0qmW5PD8Lnc7XI"},
{"content":{"body":"its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise","msgtype":"m.text","org.matrix.msc1767.text":"its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise"},"ts":1669809705275,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs"},
{"content":{"body":"Thanks to Ashley and Linus and Andreu for note taking!","msgtype":"m.text","org.matrix.msc1767.text":"Thanks to Ashley and Linus and Andreu for note taking!"},"ts":1669809717623,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0sn8_nONL6V9TeqLyaro5pF_LMmp9vop-IAJdR1MgMc"},
{"content":{"body":"> <@yulia:mozilla.org> I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking\n\nI mean, it is Ok to disagree with the goals but I think they were stated. This was actually the focus of the presentation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking</blockquote></mx-reply>I mean, it is Ok to disagree with the goals but I think they were stated. This was actually the focus of the presentation.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs"}},"msgtype":"m.text"},"ts":1669809778033,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZK7pmoe5PPgR75mEtqFAQOOfmLup6bmghw2CP3ntVnI"},
{"content":{"body":"right and what I said was that the goals that are being addressed are broader issues within the language. they are not limited to just value types","msgtype":"m.text","org.matrix.msc1767.text":"right and what I said was that the goals that are being addressed are broader issues within the language. they are not limited to just value types"},"ts":1669809822625,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8yIwdTs2bY4URC7cxKDghgrIuFHLAU9F2i8HVLs60e8"},
{"content":{"body":"> <@yulia:mozilla.org> its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise\n\nImplementer feedback is definitely good. I think it is worth thinking about R&T as objects as well. If you have ideas about details of an alternative, it will be great to discuss them offline. I can see lots of options, as I went into in the gist linked above.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise</blockquote></mx-reply>Implementer feedback is definitely good. I think it is worth thinking about R&amp;T as objects as well. If you have ideas about details of an alternative, it will be great to discuss them offline. I can see lots of options, as I went into in the gist linked above.","m.relates_to":{"m.in_reply_to":{"event_id":"$xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs"}},"msgtype":"m.text"},"ts":1669809865017,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5bRDaPbNGBnviH1yfMhwEkO5-lE4b52dJIEn6u5Qbyw"},
{"content":{"body":"yes, thank you for doing that, and i was sort of referencing it because I know this isn't the ideal version of the proposal as you see it. I just think it should be seriously considered","msgtype":"m.text","org.matrix.msc1767.text":"yes, thank you for doing that, and i was sort of referencing it because I know this isn't the ideal version of the proposal as you see it. I just think it should be seriously considered"},"ts":1669809910156,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1ByzZWFZ0eyIl2IU0wYvhB88QTAu0q_HLFjAMPjos6Y"},
{"content":{"body":"for now, id like to focus on the module layer zero proposal and we can come back to this, but i think we are pretty much on the same page in terms of where things are right now","msgtype":"m.text","org.matrix.msc1767.text":"for now, id like to focus on the module layer zero proposal and we can come back to this, but i think we are pretty much on the same page in terms of where things are right now"},"ts":1669809934991,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oXA7cRI-dBEkSMxm517RNvG4ZIwDIYS55H9XsIBuj_w"},
{"content":{"body":"Maybe next time we discuss R&T we should go over various options in more detail to discuss pros and cons ","format":"org.matrix.custom.html","formatted_body":"Maybe next time we discuss R&amp;T we should go over various options in more detail to discuss pros and cons","msgtype":"m.text"},"ts":1669809944325,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NG5Axfpo8cCiPOQgInzIZItOcD1nXwIyLA5ZuhwVkSE"},
{"content":{"body":"In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings","msgtype":"m.text","org.matrix.msc1767.text":"In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings"},"ts":1669809993534,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg"},
{"content":{"body":"just to clarify, in case it seemed like i was asking for something new","msgtype":"m.text","org.matrix.msc1767.text":"just to clarify, in case it seemed like i was asking for something new"},"ts":1669810011731,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cQ8VWE_nJCcQJy7SdIb3GnkmvwE7pXPI2aw_Y0pA_Bo"},
{"content":{"body":"> <@yulia:mozilla.org> In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings\n\nYes, I really appreciate that you shared that with everyone ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings</blockquote></mx-reply>Yes, I really appreciate that you shared that with everyone","m.relates_to":{"m.in_reply_to":{"event_id":"$x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg"}},"msgtype":"m.text"},"ts":1669810043362,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c-I8W-d0FYYT6I7NHHDI67DfklJyHalp7ze61X7gglw"},
{"content":{"body":"what does \"kicker\" mean here?","msgtype":"m.text","org.matrix.msc1767.text":"what does \"kicker\" mean here?"},"ts":1669810780255,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI"},
{"content":{"body":"> <@bakkot:matrix.org> though I guess symbols as weakmap keys make that less necessary\n\nNot really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though I guess symbols as weakmap keys make that less necessary</blockquote></mx-reply>Not really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","m.relates_to":{"m.in_reply_to":{"event_id":"$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> though I guess symbols as weakmap keys make that less necessary\n\nNot really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though I guess symbols as weakmap keys make that less necessary</blockquote></mx-reply>Not really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","mimetype":"text/html"}]},"ts":1669810866366,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sOBOo9VTMidY0Xg8tPLzr8jC2q842-GahwOVaMemMr8"},
{"content":{"body":"> <@yulia:mozilla.org> what does \"kicker\" mean here?\n\nSomething that starts the loading/linking/evaluating process","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>what does &quot;kicker&quot; mean here?</blockquote></mx-reply>Something that starts the loading/linking/evaluating process","m.relates_to":{"m.in_reply_to":{"event_id":"$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> what does \"kicker\" mean here?\n\nSomething that starts the loading/linking/evaluating process","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>what does &quot;kicker&quot; mean here?</blockquote></mx-reply>Something that starts the loading/linking/evaluating process","mimetype":"text/html"}]},"ts":1669810979781,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UWxzmfnnUCnLZlTLTy7WCYeSN-2gJTJPXEkIQdAl73Y"},
{"content":{"body":"thanks","msgtype":"m.text","org.matrix.msc1767.text":"thanks"},"ts":1669810995994,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VeSwC6kcncZEdh6eUMQ48iq7qhMnHDcw87q8JC2IjlQ"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.\n\nTo clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.</blockquote></mx-reply>To clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","m.relates_to":{"m.in_reply_to":{"event_id":"$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.\n\nTo clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.</blockquote></mx-reply>To clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","mimetype":"text/html"}]},"ts":1669811020471,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$akBP-nlCFtnhDa-HP1E2hbYSXqMiMG5QiMUPZ8sJM4k"},
{"content":{"body":"As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n```\nconst src = ...\nnew Module(src).source === new Module(src).source // ???\n```","format":"org.matrix.custom.html","formatted_body":"<p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n```\nconst src = ...\nnew Module(src).source === new Module(src).source // ???\n```","mimetype":"text/plain"},{"body":"<p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n","mimetype":"text/html"}]},"ts":1669811151277,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec"},
{"content":{"body":"module source is no more of a new form of eval than importing a data URI which you can do today","msgtype":"m.text","org.matrix.msc1767.text":"module source is no more of a new form of eval than importing a data URI which you can do today"},"ts":1669811166470,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aHuFNs766swBjDQ8B7Skwjf1Ps8tU9W0IkOYGRFYYQI"},
{"content":{"body":"> <@eemeli:mozilla.org> As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n> ```\n> const src = ...\n> new Module(src).source === new Module(src).source // ???\n> ```\n\nI would expect yes, it should be `new Module(src).source === src`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n</blockquote></mx-reply>I would expect yes, it should be <code>new Module(src).source === src</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@eemeli:mozilla.org> As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n> ```\n> const src = ...\n> new Module(src).source === new Module(src).source // ???\n> ```\n\nI would expect yes, it should be `new Module(src).source === src`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n</blockquote></mx-reply>I would expect yes, it should be <code>new Module(src).source === src</code>","mimetype":"text/html"}]},"ts":1669811217948,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3zk2zDHn1iSwpTbubme93Pf0Zh-j3xad8CaplFZ37x0"},
{"content":{"body":"Kris Kowal: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","mimetype":"text/html"}]},"ts":1669811302441,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Tj1LdZhxFfN4WQL4WFvjjsFxy8DA4KWaVrqLpewoiZo"},
{"content":{"body":"shu: Yes, the import hook is shallow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Yes, the import hook is shallow","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: Yes, the import hook is shallow","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Yes, the import hook is shallow","mimetype":"text/html"}]},"ts":1669811315845,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$qyfdt7_lmsmQhUcoizY4QWuglw8v2IpGV1_lFJjW_Lg"},
{"content":{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided `Equaler`. The gist from 4 years ago is a little weaker in that regard, and so is the `@esfx/equatable` implementation I mentioned earlier. \"rekey\" assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","format":"org.matrix.custom.html","formatted_body":"Equality semantics aren't necessarily controlled by the target key, but by the provided <code>Equaler</code>. The gist from 4 years ago is a little weaker in that regard, and so is the <code>@esfx/equatable</code> implementation I mentioned earlier. &quot;rekey&quot; assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided `Equaler`. The gist from 4 years ago is a little weaker in that regard, and so is the `@esfx/equatable` implementation I mentioned earlier. \"rekey\" assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","mimetype":"text/plain"},{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided <code>Equaler</code>. The gist from 4 years ago is a little weaker in that regard, and so is the <code>@esfx/equatable</code> implementation I mentioned earlier. &quot;rekey&quot; assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","mimetype":"text/html"}]},"ts":1669811334105,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zbpJBzP8nQcM7Ib9bTpFI93uHW8ZeIOviOd0mhztc7Q"},
{"content":{"body":"Luca Casonato: okay, just to make sure i understand","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: okay, just to make sure i understand","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: okay, just to make sure i understand","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: okay, just to make sure i understand","mimetype":"text/html"}]},"ts":1669811337838,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4hywYD92GMk8is8tByh4H0aYto6U-ZpBKm0HpCbleZs"},
{"content":{"body":"The `Equaler` approach also mirrors what many implementations are already doing internally.","format":"org.matrix.custom.html","formatted_body":"The <code>Equaler</code> approach also mirrors what many implementations are already doing internally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `Equaler` approach also mirrors what many implementations are already doing internally.","mimetype":"text/plain"},{"body":"The <code>Equaler</code> approach also mirrors what many implementations are already doing internally.","mimetype":"text/html"}]},"ts":1669811356594,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I"},
{"content":{"body":"Luca Casonato: to have it be deep, the importhook itself needs to return `Module` instances that are themselves passed the import hook","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: to have it be deep, the importhook itself needs to return <code>Module</code> instances that are themselves passed the import hook","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: to have it be deep, the importhook itself needs to return `Module` instances that are themselves passed the import hook","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: to have it be deep, the importhook itself needs to return <code>Module</code> instances that are themselves passed the import hook","mimetype":"text/html"}]},"ts":1669811359957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CACWz-5sitYBZWkELJgCyrC4inSuiMvaCpT9CcHaj3U"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1669811367060,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$o4D9WBm3gBntVUyFICYOGrn1v-qUyb8V-RP_ZCrVvs8"},
{"content":{"body":"bakkot: it's not a new kind of eval, import is the evaluator here","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's not a new kind of eval, import is the evaluator here","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: it's not a new kind of eval, import is the evaluator here","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's not a new kind of eval, import is the evaluator here","mimetype":"text/html"}]},"ts":1669811409369,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LNojxE-SeY35iMwyr8FwQzguEAL894J6v4pjnszB720"},
{"content":{"body":"it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string","msgtype":"m.text","org.matrix.msc1767.text":"it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string"},"ts":1669811512468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY"},
{"content":{"body":"Can we try giving 1 minute each for the replies to this topic?","msgtype":"m.text","org.matrix.msc1767.text":"Can we try giving 1 minute each for the replies to this topic?"},"ts":1669811519136,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5nRnWOJQfBDBN6WfC-5Nw-2FvryV4wgrCSnjFk5fp40"},
{"content":{"body":"bakkot: data URIs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: data URIs","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: data URIs","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: data URIs","mimetype":"text/html"}]},"ts":1669811551805,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-pDwxd7Omq1HNL3hhwdE-l46oWhaE6i3EfjN40newQ4"},
{"content":{"body":"and blob urls","msgtype":"m.text","org.matrix.msc1767.text":"and blob urls"},"ts":1669811561151,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$DtLoNClZdtuz8piYtpSzm6fwAAeZVe8uj3mbHCaQsGY"},
{"content":{"body":"those aren't in 262 and have different CSP rules than eval does","msgtype":"m.text","org.matrix.msc1767.text":"those aren't in 262 and have different CSP rules than eval does"},"ts":1669811571904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rm7wFogO-XrJGoc2efxktltw_wynyFpXqGTHQsKnbB4"},
{"content":{"body":"> <@bakkot:matrix.org> it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string\n\n\"dynamic eval\" or \"dynamic import\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it&#39;s a new kind of eval, you can&#39;t use dynamic eval to evaluate an arbitrary string</blockquote></mx-reply>&quot;dynamic eval&quot; or &quot;dynamic import&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string\n\n\"dynamic eval\" or \"dynamic import\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it&#39;s a new kind of eval, you can&#39;t use dynamic eval to evaluate an arbitrary string</blockquote></mx-reply>&quot;dynamic eval&quot; or &quot;dynamic import&quot;?","mimetype":"text/html"}]},"ts":1669811597091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FAfPoaL_46fRACtnrAnsFUTb3RZBz1gR7fWhAmuA6iE"},
{"content":{"body":"and also just because it's possible to use something obscure to accomplish a thing does not mean that we should be providing a first class way of doing it","msgtype":"m.text","org.matrix.msc1767.text":"and also just because it's possible to use something obscure to accomplish a thing does not mean that we should be providing a first class way of doing it"},"ts":1669811604949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dX9dYtyg84pMwCuNcBTt-q5w1RJ_HgIiQvy9uJKNwHc"},
{"content":{"body":"imo Module is the same as Function and friends","msgtype":"m.text","org.matrix.msc1767.text":"imo Module is the same as Function and friends"},"ts":1669811767534,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WgiuUiXUtDPi8lDAPC66aBh-Afb6JZfrIvX9BMwOi8Y"},
{"content":{"body":"bakkot: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","mimetype":"text/html"}]},"ts":1669811769362,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$nBR9u5_K97FIULu2w8kYB0k8kqtBffxeFil3o8N0mTc"},
{"content":{"body":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","msgtype":"m.text","org.matrix.msc1767.text":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"ts":1669811788538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_o962XnfBHDGZ1o31dt2bpnKdLpu9AtYvBQmvxnS9-E"},
{"content":{"body":" * it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","m.new_content":{"body":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","msgtype":"m.text","org.matrix.msc1767.text":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"m.relates_to":{"event_id":"$_o962XnfBHDGZ1o31dt2bpnKdLpu9AtYvBQmvxnS9-E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"ts":1669811793717,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-isIIWq4xWxGc6Po4geDYAKlVTWQoBdlOwVI5Pv6EYg"},
{"content":{"body":"Luca Casonato: I don't know what \"dynamic instantiation\" means if not \"from arbitrary text\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I don't know what &quot;dynamic instantiation&quot; means if not &quot;from arbitrary text&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: I don't know what \"dynamic instantiation\" means if not \"from arbitrary text\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I don't know what &quot;dynamic instantiation&quot; means if not &quot;from arbitrary text&quot;","mimetype":"text/html"}]},"ts":1669811805371,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Id3IzHeff9V0CznzxNUug_jO25NXzr2xaCy1wr34JFw"},
{"content":{"body":"but it's the \"arbitrary text\" I have a problem with, yes","msgtype":"m.text","org.matrix.msc1767.text":"but it's the \"arbitrary text\" I have a problem with, yes"},"ts":1669811814632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Oi_4Ud3AULrdZepOkmetr2cMu6Hg9fQqCW9kT0wvbGk"},
{"content":{"body":"nobody objected to AsyncFunction etc taking a string, why would Module not?","msgtype":"m.text","org.matrix.msc1767.text":"nobody objected to AsyncFunction etc taking a string, why would Module not?"},"ts":1669811816114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mNksEFz1GtKYmPXAWKTcDU2u13Isx7Jyikkmf8e96ZU"},
{"content":{"body":"Function already existed, AsyncFunction is not that different from it","msgtype":"m.text","org.matrix.msc1767.text":"Function already existed, AsyncFunction is not that different from it"},"ts":1669811832557,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oTeLdpMbKZcZLbhaufHxwmMxykxz_loYvFlTkWErras"},
{"content":{"body":"import reflection: `import module foo from \"./foo.js\"; await import(foo)`","format":"org.matrix.custom.html","formatted_body":"import reflection: <code>import module foo from &quot;./foo.js&quot;; await import(foo)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"import reflection: `import module foo from \"./foo.js\"; await import(foo)`","mimetype":"text/plain"},{"body":"import reflection: <code>import module foo from &quot;./foo.js&quot;; await import(foo)</code>","mimetype":"text/html"}]},"ts":1669811834409,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Zjt8uzDjdDxEvN34ZInWQKcaTmy0M7wI4MaP3EWRd3E"},
{"content":{"body":"Module is quite different","msgtype":"m.text","org.matrix.msc1767.text":"Module is quite different"},"ts":1669811836759,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-OQC6pARRC4NucgMy0Vxs_Qq97rnOEnmydD0F4nCyqQ"},
{"content":{"body":"Luca Casonato: totally fine with that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: totally fine with that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: totally fine with that","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: totally fine with that","mimetype":"text/html"}]},"ts":1669811850492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bOdw5LAl3UEjd6W1aAm-Bx2DTBD8FWUTqnBQ7uuzDvA"},
{"content":{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"ts":1669811870851,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc"},
{"content":{"body":" * as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":" * as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","m.new_content":{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":" * as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"ts":1669811876108,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HR2SaetvNTXZMKp-KgoKNHC7gZsoophh38EPYvSVa9k"},
{"content":{"body":"everyone knows `eval` is evil","format":"org.matrix.custom.html","formatted_body":"everyone knows <code>eval</code> is evil","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"everyone knows `eval` is evil","mimetype":"text/plain"},{"body":"everyone knows <code>eval</code> is evil","mimetype":"text/html"}]},"ts":1669811899121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L5TfX_z2AR5cE6VveodsqiHFnodlzRc-czvUVBF3cRA"},
{"content":{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"ts":1669811911435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N4PTyCxPbc_I2RnbCvOyBYn1D2cyCj2kjBR041Q3JJE"},
{"content":{"body":"> <@ljharb:matrix.org> as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?\n\nAs Kris said, this is about making eval deniable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?</blockquote></mx-reply>As Kris said, this is about making eval deniable","m.relates_to":{"m.in_reply_to":{"event_id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc"}},"msgtype":"m.text"},"ts":1669811918195,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-QQhh2krO9wlJJ9zFqViJDpBjeGEz9reYXuxQc01SiI"},
{"content":{"body":" * \"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":" * &quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","m.new_content":{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$N4PTyCxPbc_I2RnbCvOyBYn1D2cyCj2kjBR041Q3JJE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * \"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":" * &quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"ts":1669811918519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s1j0NE8ynDHdnpnSsPgIVUAznxSgA-m6e_SBKEkDYZI"},
{"content":{"body":"Not just through CSP but by deleting the property","msgtype":"m.text"},"ts":1669811934510,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$odoQCLNGids_3rVdV96ihMvqQHNv1iMaFa9ZVzuLUyk"},
{"content":{"body":"oh sure in this case i meant \"via ModuleSource\"","msgtype":"m.text","org.matrix.msc1767.text":"oh sure in this case i meant \"via ModuleSource\""},"ts":1669811935636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AYmZ8UaknNUBf9fCvZyVpPdz-BicNKhROw_8S9Hia94"},
{"content":{"body":"(i don't think it's clear that deniability is a sufficient motivation to create an entire class, but that's a separate discussion)","msgtype":"m.text","org.matrix.msc1767.text":"(i don't think it's clear that deniability is a sufficient motivation to create an entire class, but that's a separate discussion)"},"ts":1669811970261,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BQDOGiBzIPpWHDObpyTr3sG5s9FiSwJlFUQ8t8pVdaQ"},
{"content":{"body":"I share bakkot’s concern generically and was persuaded by the eval injection risk","msgtype":"m.text"},"ts":1669811998281,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$69Eom4vWpsRNKA2Dp6xdDEHKUMfF_rzVg6jnSl-ujMI"}
]