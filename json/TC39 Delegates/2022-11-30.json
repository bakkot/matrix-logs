[
{"content":{"body":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated","msgtype":"m.text","org.matrix.msc1767.text":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated"},"ts":1669771733108,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$T_vam6c9mIWQTdZPoi35MEbRp-SGRoD_RWq8Yh4W4Dg"},
{"content":{"body":"(or maybe we're beyond that now?)","msgtype":"m.text","org.matrix.msc1767.text":"(or maybe we're beyond that now?)"},"ts":1669772033567,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$3shYSHhX5M9_Mff2CxQmT-5tl2n9kPZxUq8ZB6rQBYw"},
{"content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772473690,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y"},
{"content":{"body":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","m.new_content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"m.relates_to":{"event_id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish ðŸ˜†\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772653774,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VBdZ-eTMIVVQBPNl9CrdjzpENHWGp6Fem65czbqiXTQ"},
{"content":{"body":"good morning, all","msgtype":"m.text","org.matrix.msc1767.text":"good morning, all"},"ts":1669797377430,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$hTtqQJG8ENI7IhLFl4nn2nNgFj8cd3yJxVWFkJL1AdI"},
{"content":{"body":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints","msgtype":"m.text","org.matrix.msc1767.text":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints"},"ts":1669797426572,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$AtTj1PrtnzIe2KuHab2-s8phqmPUsl4Jp7ksHcOQjv0"},
{"content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797861672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0"},
{"content":{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","m.new_content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797896591,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$GEuZjlLIn_lPfM9Az2rZAyTtoOKfam-L2EMF9OnK9Zc"},
{"content":{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/html"}]},"ts":1669798035075,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$CrJrxWMx_GgfZHKHM6Nswuu8bFV7QySySj3xKeV-01o"},
{"content":{"body":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up."},"ts":1669798139097,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JAF6LQlE8CWwL22inlaetg9ayll-_klo5a1RaOqtvww"},
{"content":{"body":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes.","msgtype":"m.text","org.matrix.msc1767.text":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes."},"ts":1669798359672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0B5xcpqA5_IxLLYSm1tO-69NBuFEq8gzdoVuXquiU0o"},
{"content":{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/html"}]},"ts":1669798371453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JnTGUYwfAD6MrIppogzvNYxJhqZxuhEunT5Jh9ypdLg"},
{"content":{"body":"Thanks bakkot I have tagged it as such.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks bakkot I have tagged it as such.","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","mimetype":"text/html"}]},"ts":1669798955682,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xiuu_K3GV3WLomBrW-NiQJsri9oYocnGV1CBqqz0beM"},
{"content":{"body":"oooohhh I like this history slide a lot","msgtype":"m.text","org.matrix.msc1767.text":"oooohhh I like this history slide a lot"},"ts":1669799059413,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"},
{"content":{"body":"definitely going to steal that for my proposal slides from now on","msgtype":"m.text","org.matrix.msc1767.text":"definitely going to steal that for my proposal slides from now on"},"ts":1669799081947,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_IbFqTR0RP-wDpTrP28GU2OEJxZItRe8uHWW56B0Sd8"},
{"content":{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","m.relates_to":{"m.in_reply_to":{"event_id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","mimetype":"text/html"}]},"ts":1669799108897,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$qWhI6zMgxFsegtoB9fyHufM7aJbDEA87HfevRIFBeEk"},
{"content":{"body":"if you can fit it all on one slide, I'll be impressed","msgtype":"m.text","org.matrix.msc1767.text":"if you can fit it all on one slide, I'll be impressed"},"ts":1669799150284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZZKqY4MqbGPOlV9DhQeOwZsY_sogED2jTrB1j1eHTuY"},
{"content":{"body":"It would be surprising if Node and Deno really continue to not support this when Chrome does ","format":"org.matrix.custom.html","formatted_body":"It would be surprising if Node and Deno really continue to not support this when Chrome does","msgtype":"m.text"},"ts":1669799200702,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"},
{"content":{"body":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc.","msgtype":"m.text","org.matrix.msc1767.text":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc."},"ts":1669799467481,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JC6YcZwxH0TdWY_jEiLlzB_wJRE6MGjSvYc4vIvPclE"},
{"content":{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","format":"org.matrix.custom.html","formatted_body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","mimetype":"text/plain"},{"body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","mimetype":"text/html"}]},"ts":1669799495552,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yW9Q_D7fyK59a083qn051T-rrrgWtyMVBWs8yL2jPoM"},
{"content":{"body":"(I deleted Michael Ficarra's comment accidentally)","msgtype":"m.text","org.matrix.msc1767.text":"(I deleted Michael Ficarra's comment accidentally)"},"ts":1669799517615,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"},
{"content":{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","m.relates_to":{"m.in_reply_to":{"event_id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/html"}]},"ts":1669799642912,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$lsHUsnXWlaCc1JUswYx_eb1CZ3O9sseqKjikm6S2Dcs"},
{"content":{"body":"Rob Palmer: that was Saboff, not me","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: that was Saboff, not me","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","mimetype":"text/html"}]},"ts":1669799719546,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vts7nqqSA_OExOkljk8cBM-u_1QMOiUd6kcbCs_6GYo"},
{"content":{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","mimetype":"text/html"}]},"ts":1669799735437,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7kB62UOo-IFrUPAmpMEPLu-F58leHwY_XbFTTt9EmYM"},
{"content":{"body":"oohhh I see","msgtype":"m.text","org.matrix.msc1767.text":"oohhh I see"},"ts":1669799760884,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$juJDAmWu82UmvowEoiJmvYzvB1eU57SliWOOp-I-gak"},
{"content":{"body":"too early","msgtype":"m.text","org.matrix.msc1767.text":"too early"},"ts":1669799775973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$poNVsnZ3xwg7lcqdnQisf1JOkW7Wlnzc_KhnDFw_cLI"},
{"content":{"body":"for the notes, who is speaking other than frank?","msgtype":"m.text","org.matrix.msc1767.text":"for the notes, who is speaking other than frank?"},"ts":1669800290158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-b__KvFmRfpmtb-8Annsd0iDt41qGhqj9kyqK_zaqQ8"},
{"content":{"body":"MAH","msgtype":"m.text","org.matrix.msc1767.text":"MAH"},"ts":1669800299995,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$A-Nqn4a6wOyB5QrW5wyep0au0kT-NYZZdGvJRHgPzmU"},
{"content":{"body":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?","msgtype":"m.text","org.matrix.msc1767.text":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?"},"ts":1669800460229,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$8HkMX9tQnowAqeJX5LSxDGQIce9G3LwzDA7lINW877g"},
{"content":{"body":"like... ideally every single `Intl` constructor should take a record options bag ","format":"org.matrix.custom.html","formatted_body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like... ideally every single `Intl` constructor should take a record options bag ","mimetype":"text/plain"},{"body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","mimetype":"text/html"}]},"ts":1669800489438,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kXQCjHN2zb8mE0qdbWUgQ0vAhkSFFxGbrmwQLTwyNLY"},
{"content":{"body":"The problem is how long we need to wait for r&t ðŸ˜‚","msgtype":"m.text","org.matrix.msc1767.text":"The problem is how long we need to wait for r&t ðŸ˜‚"},"ts":1669800797239,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$txgMpsG2G2Mkgn9mjpmXvh95erap0S0g7_cFGazl5zk"},
{"content":{"body":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is"},"ts":1669800805949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t9M_7SFVTGzmrZ_Nlgy2FcVUu8uGu9F87BG2Bs2LXtI"},
{"content":{"body":"everything else is already objects","msgtype":"m.text","org.matrix.msc1767.text":"everything else is already objects"},"ts":1669800811659,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SUWP6KbeZHi4p-8pz48b39JrYG-5ujZW9k7CL5_OTkc"},
{"content":{"body":"So we add r&t but our APIs do not use it, only userland use it?","msgtype":"m.text","org.matrix.msc1767.text":"So we add r&t but our APIs do not use it, only userland use it?"},"ts":1669800864358,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$MiTzQQvRr-kY_Y9UdUyOuW6xPXIeCco757MGPADKSes"},
{"content":{"body":"i'm not even convinced that the different identity thing is that big a problem","msgtype":"m.text","org.matrix.msc1767.text":"i'm not even convinced that the different identity thing is that big a problem"},"ts":1669800867195,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dItkHI8ujCx_fLbrsyVO4q8FToTKrnXkllRlpei9JYk"},
{"content":{"body":"caching is good for this, function is good for this","msgtype":"m.text","org.matrix.msc1767.text":"caching is good for this, function is good for this"},"ts":1669800883339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xGtFbmEHCbWPnG2h0BSrgA5nLQzJdI9FyBBO709dq3Q"},
{"content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800896303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac"},
{"content":{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","m.new_content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800900344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r3OWA3vaBMJza4qMpF2pJ4092yzJ_2d04KLkg3Wstts"},
{"content":{"body":"wait temporal has non-symmetric equality","msgtype":"m.text","org.matrix.msc1767.text":"wait temporal has non-symmetric equality"},"ts":1669802756250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iq23gceot6owFs2Rg_ui3HYGyJW-lmkVEVrK-RCqHis"},
{"content":{"body":"I had not realized that","msgtype":"m.text","org.matrix.msc1767.text":"I had not realized that"},"ts":1669802758679,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uwQOPKS_XHouH9eEnhjhwcaVcoVPR_I_4m_UJ4HToGw"},
{"content":{"body":"seems... not great?","msgtype":"m.text","org.matrix.msc1767.text":"seems... not great?"},"ts":1669802766272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YrOdKvb-8RCOBOSxTx9hSmIO29lh8Y7MxRm7LrYjGNA"},
{"content":{"body":"really?","msgtype":"m.text","org.matrix.msc1767.text":"really?"},"ts":1669802845653,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8aIePWsZ8fFvlawP3S5q5UyvoRbT4KVsj1plnQv1EFA"},
{"content":{"body":"how can it not be symmetric...?","msgtype":"m.text","org.matrix.msc1767.text":"how can it not be symmetric...?"},"ts":1669802852103,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E9nWMRYrLTMOVqjAdeSKYMju2eyFsfPpoQ6OqQBMK6I"},
{"content":{"body":"that was the claim made in this presentation","msgtype":"m.text","org.matrix.msc1767.text":"that was the claim made in this presentation"},"ts":1669802856840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y12NEWBpIWbfg4nRWm1UPrqSbo3NXlDI8auFtozlJKs"},
{"content":{"body":"not literal `===` equality but equality methods","format":"org.matrix.custom.html","formatted_body":"not literal <code>===</code> equality but equality methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"not literal `===` equality but equality methods","mimetype":"text/plain"},{"body":"not literal <code>===</code> equality but equality methods","mimetype":"text/html"}]},"ts":1669802866946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"},
{"content":{"body":"Or as etymologists would call it, anametric equality.","msgtype":"m.text","org.matrix.msc1767.text":"Or as etymologists would call it, anametric equality."},"ts":1669802928736,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xrFErVsLy8eJlGY4yTbQC8V6mSsCS9SVkpaqR3OrN3I"},
{"content":{"body":"page 16 of the notes for the transcript where this was mentioned","msgtype":"m.text","org.matrix.msc1767.text":"page 16 of the notes for the transcript where this was mentioned"},"ts":1669802961922,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$GSFm4Li4aUwmflqCQF3L-BwRjhpGyDRi7hHRadpYuXE"},
{"content":{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","format":"org.matrix.custom.html","formatted_body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","mimetype":"text/plain"},{"body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","mimetype":"text/html"}]},"ts":1669803203549,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$t0AToB5UesYaHRVcjsD-yP9jKT9mURGNP75VpMfJzuY"},
{"content":{"body":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part","msgtype":"m.text","org.matrix.msc1767.text":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part"},"ts":1669803291120,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$W8YwuJZGeF4KMuAyg_0M9GtM8H2_2zz5wPcBKGV2xY8"},
{"content":{"body":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant","msgtype":"m.text","org.matrix.msc1767.text":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant"},"ts":1669803318238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_GAyHqEjVkMmwrbOs_ZPobdmtIFphn48eQD6s5NctfU"},
{"content":{"body":"like what is the concrete thing that those objections refer to?","msgtype":"m.text","org.matrix.msc1767.text":"like what is the concrete thing that those objections refer to?"},"ts":1669803337456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6pOhQwXgKexDIa8wgYQQeOPHkUryrF-sFHOnga3UMsg"},
{"content":{"body":"i have thoughts but my brain","msgtype":"m.text","org.matrix.msc1767.text":"i have thoughts but my brain"},"ts":1669803387483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w5SXvVhQ_AgqS6MO4VaDCQzLGC3NrTiKAW3r5IPErE8"},
{"content":{"body":"so slow","msgtype":"m.text","org.matrix.msc1767.text":"so slow"},"ts":1669803388914,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E39d5a9GquiHl4wxuPJUfl7ykrM3VTcN0aFWnQN5Bso"},
{"content":{"body":"does not bode well for tomorrow","msgtype":"m.text","org.matrix.msc1767.text":"does not bode well for tomorrow"},"ts":1669803396120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hari5iwoHeti7_5-cZowYAUJrsyhjlJySznLV1Om0Ew"},
{"content":{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","m.relates_to":{"m.in_reply_to":{"event_id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","mimetype":"text/html"}]},"ts":1669804213172,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$_H1X1rZPPSSzaL0PsgFTVmySoW59Q9q0kq68KxRgQWo"},
{"content":{"body":"it's the `compare` methods","format":"org.matrix.custom.html","formatted_body":"it's the <code>compare</code> methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's the `compare` methods","mimetype":"text/plain"},{"body":"it's the <code>compare</code> methods","mimetype":"text/html"}]},"ts":1669804219913,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$uoNs5sE8R7jwN9aqeO7e0T8qbBUvMiCUJaRQb6MGOKw"},
{"content":{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","format":"org.matrix.custom.html","formatted_body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/plain"},{"body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/html"}]},"ts":1669804254412,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rG_4RlCsOAtQnmSp7u5S7YqdZV9npnS8EROehdFo9pQ"},
{"content":{"body":"but if the receiver is the superset, it won't work","msgtype":"m.text","org.matrix.msc1767.text":"but if the receiver is the superset, it won't work"},"ts":1669804265709,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$vemR4Zn8fKWpJBL4SxQfUMULkCRopN5m5I-Ov9116QM"},
{"content":{"body":"(because it will lack certain properties)","msgtype":"m.text","org.matrix.msc1767.text":"(because it will lack certain properties)"},"ts":1669804281275,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$zWW4lStLmIEPABJv3l9YPGy2c39RAnZhaZQwmQrqpMU"},
{"content":{"body":"actually, nvm me, the `compare` methods are static","format":"org.matrix.custom.html","formatted_body":"actually, nvm me, the <code>compare</code> methods are static","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"actually, nvm me, the `compare` methods are static","mimetype":"text/plain"},{"body":"actually, nvm me, the <code>compare</code> methods are static","mimetype":"text/html"}]},"ts":1669804317003,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$fjiOHv1S1fp-DqWWp6ZuU6wDAuB-KVCz7Jw5a1xph3M"},
{"content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804345537,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM"},
{"content":{"body":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","m.new_content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"m.relates_to":{"event_id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804356761,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TsJZL-jy55bWcV6F4klEZjMF43Sn7wYVgRir0StMpn8"},
{"content":{"body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we donâ€™t argue against the goal of immutability ","format":"org.matrix.custom.html","formatted_body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we donâ€™t argue against the goal of immutability","msgtype":"m.text"},"ts":1669804536309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-ndaGFGsbwk3tWAp5s3GrVrYdKUcBL8jKSO-nKSJKAY"},
{"content":{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","mimetype":"text/html"}]},"ts":1669804670567,"senderName":"jasew","senderId":"@jasew:matrix.org","id":"$zo6Za8OdzuZEY2BjB-uQtBv5v0syV7kC1Nu-LaB1NGI"},
{"content":{"body":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs","msgtype":"m.text","org.matrix.msc1767.text":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs"},"ts":1669804903017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"},
{"content":{"body":"IIRC, equality has always been a top-level goal?","msgtype":"m.text","org.matrix.msc1767.text":"IIRC, equality has always been a top-level goal?"},"ts":1669804952572,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"},
{"content":{"body":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted.","msgtype":"m.text","org.matrix.msc1767.text":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted."},"ts":1669805046426,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ZwPCjC5DM8rgIho6twJ0NE_8UUBGGMgjvzs20EjhB78"},
{"content":{"body":"> <@rbuckton:matrix.org> IIRC, equality has always been a top-level goal?\n\nYes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />IIRC, equality has always been a top-level goal?</blockquote></mx-reply>Yes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer","m.relates_to":{"m.in_reply_to":{"event_id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"}},"msgtype":"m.text"},"ts":1669805058844,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CiCvM5kkX2XoW53iGRoEkEDSj6F8_6CaGccQw-sfVPs"},
{"content":{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","m.relates_to":{"m.in_reply_to":{"event_id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","mimetype":"text/html"}]},"ts":1669805064747,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6d1nxG-Y2F7HzCWQkGnEz-o6pdHZGTHamwlWgG7zshY"},
{"content":{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","format":"org.matrix.custom.html","formatted_body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","mimetype":"text/plain"},{"body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","mimetype":"text/html"}]},"ts":1669805112494,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7YJvFsyL4_k44VMwduSAgWynebqEjsjrO_dj0PRG82U"},
{"content":{"body":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality","msgtype":"m.text","org.matrix.msc1767.text":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality"},"ts":1669805239837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"},
{"content":{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","format":"org.matrix.custom.html","formatted_body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/plain"},{"body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/html"}]},"ts":1669805246306,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$deJyQH-NxQQ95Fh-9B3hIk6G462QTjpgLV_e3efPsUI"},
{"content":{"body":"there was even a proposal for that","msgtype":"m.text","org.matrix.msc1767.text":"there was even a proposal for that"},"ts":1669805247819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aoqsr9Yd1ZgSZJKJk_CEG8lgkfHpHAE79kw0HpqYSEM"},
{"content":{"body":"rekey + compositekey","msgtype":"m.text","org.matrix.msc1767.text":"rekey + compositekey"},"ts":1669805276617,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$r2BmRdv9n6JfP2RNfXXofzNhV22AXec9YIYnwGzmWOk"},
{"content":{"body":"and we might want that even in a world with R&T given that sometimes you want to key off of objects","msgtype":"m.text","org.matrix.msc1767.text":"and we might want that even in a world with R&T given that sometimes you want to key off of objects"},"ts":1669805289011,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tCEc4OMWCEoKW9e1YixOYXLTNbaBjZgk4XOtlZtwlzM"},
{"content":{"body":"i don't see a realistic path in doing value types with operator overloading","msgtype":"m.text","org.matrix.msc1767.text":"i don't see a realistic path in doing value types with operator overloading"},"ts":1669805298039,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$htppgkM4M-4Fxsf3UIEg_BUG27ieayA5JrdgF_GwP3I"},
{"content":{"body":"though I guess symbols as weakmap keys make that less necessary","msgtype":"m.text","org.matrix.msc1767.text":"though I guess symbols as weakmap keys make that less necessary"},"ts":1669805301685,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM"},
{"content":{"body":"(for performance)","msgtype":"m.text","org.matrix.msc1767.text":"(for performance)"},"ts":1669805304651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lxTlGPBfpzjTtQu3SiGSgv3AbKlXZq2wGOA-AWpB-iw"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","m.relates_to":{"m.in_reply_to":{"event_id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/html"}]},"ts":1669805402152,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","m.new_content":{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"ts":1669805412787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oPO7hWS7LXBa6qBtl-BJSLFqdRm2sRxmcTVvnziVwKE"},
{"content":{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","format":"org.matrix.custom.html","formatted_body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","mimetype":"text/plain"},{"body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","mimetype":"text/html"}]},"ts":1669805453155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4kOS-TuZYrpte4qyM9xDw67tQmVa-iKRfmj0EMbTGf0"},
{"content":{"body":"I think when we drop equality, the argument for value types is weaker","msgtype":"m.text","org.matrix.msc1767.text":"I think when we drop equality, the argument for value types is weaker"},"ts":1669805462559,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"},
{"content":{"body":"I am very interested in multi-key maps... ","msgtype":"m.text","org.matrix.msc1767.text":"I am very interested in multi-key maps... "},"ts":1669805489748,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nAren't they just not value types if we drop equality?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>Aren't they just not value types if we drop equality?","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805501746,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$001RbYT1azmiEh19aGlz9VQkO6WOkQc5zKbcVolN_oM"},
{"content":{"body":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs","msgtype":"m.text","org.matrix.msc1767.text":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs"},"ts":1669805536608,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ORxztHL9W2PdtVXa5rAcf03G8MEDu7Qn-dSGMAF-uSg"},
{"content":{"body":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?"},"ts":1669805538463,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$u69FQv-xd1LgNb8Ouk5yOcu4N6wIww8pFvEztaTuOwM"},
{"content":{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","m.relates_to":{"m.in_reply_to":{"event_id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/html"}]},"ts":1669805542261,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM"},
{"content":{"body":"Without === there is little value add; as in just use immutable.js and be done with it. ","format":"org.matrix.custom.html","formatted_body":"Without === there is little value add; as in just use immutable.js and be done with it.","msgtype":"m.text"},"ts":1669805559400,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"},
{"content":{"body":"Operator overloading here is not user defined","msgtype":"m.text","org.matrix.msc1767.text":"Operator overloading here is not user defined"},"ts":1669805560464,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nIt wouldnâ€™t be value types without equality, if by value types we are referencing TC39â€™s historical investigations ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>It wouldnâ€™t be value types without equality, if by value types we are referencing TC39â€™s historical investigations","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805584018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MbhOGpWrgYksdK_TEYuIihkUkYGYsTlYujVrvrbZPjY"},
{"content":{"body":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type","msgtype":"m.text","org.matrix.msc1767.text":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type"},"ts":1669805616023,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$AoQ9TtqpBxtow2UhN4ijKs_AsHP3zdIkjcjmP1ERazE"},
{"content":{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","m.relates_to":{"m.in_reply_to":{"event_id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","mimetype":"text/html"}]},"ts":1669805643942,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE"},
{"content":{"body":"> <@pipobscure:matrix.org> Without === there is little value add; as in just use immutable.js and be done with it. \n\nI disagree. It would be valuable, just less so.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g\">In reply to</a> <a href=\"https://matrix.to/#/@pipobscure:matrix.org\">@pipobscure:matrix.org</a><br>Without === there is little value add; as in just use immutable.js and be done with it.</blockquote></mx-reply>I disagree. It would be valuable, just less so.","m.relates_to":{"m.in_reply_to":{"event_id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"}},"msgtype":"m.text"},"ts":1669805700416,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XYDn3wLIx08d7Tk-E7bCJGExRf-8e3zYg4y97iL9YOI"}
]