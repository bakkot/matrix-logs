[
{"content":{"body":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated","msgtype":"m.text","org.matrix.msc1767.text":"hmm, I will likely be absent during the R&T timeblock; here's hoping discussion about toString doesn't get too heated"},"ts":1669771733108,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$T_vam6c9mIWQTdZPoi35MEbRp-SGRoD_RWq8Yh4W4Dg"},
{"content":{"body":"(or maybe we're beyond that now?)","msgtype":"m.text","org.matrix.msc1767.text":"(or maybe we're beyond that now?)"},"ts":1669772033567,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$3shYSHhX5M9_Mff2CxQmT-5tl2n9kPZxUq8ZB6rQBYw"},
{"content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772473690,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y"},
{"content":{"body":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","m.new_content":{"body":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg","msgtype":"m.text","org.matrix.msc1767.text":"also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"m.relates_to":{"event_id":"$mh5TzIc_VS1vQL0BvKKT7_nbO3s9quPMgM7X0Hcm02Y","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * also, anytime folks are looking for a JSC logo for slides: we do have a mascot called Squirrelfish 😆\nhttps://webkit.org/wp-content/themes/webkit/images/squirrelfish-lives.svg"},"ts":1669772653774,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VBdZ-eTMIVVQBPNl9CrdjzpENHWGp6Fem65czbqiXTQ"},
{"content":{"body":"good morning, all","msgtype":"m.text","org.matrix.msc1767.text":"good morning, all"},"ts":1669797377430,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$hTtqQJG8ENI7IhLFl4nn2nNgFj8cd3yJxVWFkJL1AdI"},
{"content":{"body":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints","msgtype":"m.text","org.matrix.msc1767.text":"Thanks to Luca we've made some minor schedule adjustments to better accommodate folks' time constraints"},"ts":1669797426572,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$AtTj1PrtnzIe2KuHab2-s8phqmPUsl4Jp7ksHcOQjv0"},
{"content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797861672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0"},
{"content":{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","m.new_content":{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","format":"org.matrix.custom.html","formatted_body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":"This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$eKQeF2bWxjCNYV279Ph2E0xJIzgT2j3PSpRSzbo3jx0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * This means we have _**Record & Tuple**_ in the first morning session today, and have pushed out _**Intl.DurationFormat**_ & _**LibJS**_ to tomorrow.  This makes way for Guy's topics (_**Import Reflection, Defer Eval**_) at the end of today.","mimetype":"text/plain"},{"body":" * This means we have <em><strong>Record &amp; Tuple</strong></em> in the first morning session today, and have pushed out <em><strong>Intl.DurationFormat</strong></em> &amp; <em><strong>LibJS</strong></em> to tomorrow.  This makes way for Guy's topics (<em><strong>Import Reflection, Defer Eval</strong></em>) at the end of today.","mimetype":"text/html"}]},"ts":1669797896591,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$GEuZjlLIn_lPfM9Az2rZAyTtoOKfam-L2EMF9OnK9Zc"},
{"content":{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: I've come to realize my time constraint no longer holds.  I'm still in the overflow section, but if a slot opens up, please ignore my posted constraint.","mimetype":"text/html"}]},"ts":1669798035075,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$CrJrxWMx_GgfZHKHM6Nswuu8bFV7QySySj3xKeV-01o"},
{"content":{"body":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for the update.  We will strive to bring overflow items in, as and when extra time frees up."},"ts":1669798139097,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JAF6LQlE8CWwL22inlaetg9ayll-_klo5a1RaOqtvww"},
{"content":{"body":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes.","msgtype":"m.text","org.matrix.msc1767.text":"The Google Meet room is up.  Please join us.  We will begin in 7 minutes."},"ts":1669798359672,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0B5xcpqA5_IxLLYSm1tO-69NBuFEq8gzdoVuXquiU0o"},
{"content":{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> and other chairs: for my item (Set methods) I want to have the option of using the full 45 minute time box if it's needed, but I'm hoping that it ends up being uncontroversial, in which case it might be as short as 10 minutes","mimetype":"text/html"}]},"ts":1669798371453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JnTGUYwfAD6MrIppogzvNYxJhqZxuhEunT5Jh9ypdLg"},
{"content":{"body":"Thanks bakkot I have tagged it as such.","format":"org.matrix.custom.html","formatted_body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Thanks bakkot I have tagged it as such.","mimetype":"text/plain"},{"body":"Thanks <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> I have tagged it as such.","mimetype":"text/html"}]},"ts":1669798955682,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$xiuu_K3GV3WLomBrW-NiQJsri9oYocnGV1CBqqz0beM"},
{"content":{"body":"oooohhh I like this history slide a lot","msgtype":"m.text","org.matrix.msc1767.text":"oooohhh I like this history slide a lot"},"ts":1669799059413,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"},
{"content":{"body":"definitely going to steal that for my proposal slides from now on","msgtype":"m.text","org.matrix.msc1767.text":"definitely going to steal that for my proposal slides from now on"},"ts":1669799081947,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_IbFqTR0RP-wDpTrP28GU2OEJxZItRe8uHWW56B0Sd8"},
{"content":{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","m.relates_to":{"m.in_reply_to":{"event_id":"$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> oooohhh I like this history slide a lot\n\nIf you like history slides I've got some good news for you!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QdCFJ5W4sxsnXX3uTPbLN-NwxModrx41wdiG6Yn3xu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>oooohhh I like this history slide a lot</blockquote></mx-reply>If you like history slides I've got some good news for you!","mimetype":"text/html"}]},"ts":1669799108897,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$qWhI6zMgxFsegtoB9fyHufM7aJbDEA87HfevRIFBeEk"},
{"content":{"body":"if you can fit it all on one slide, I'll be impressed","msgtype":"m.text","org.matrix.msc1767.text":"if you can fit it all on one slide, I'll be impressed"},"ts":1669799150284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZZKqY4MqbGPOlV9DhQeOwZsY_sogED2jTrB1j1eHTuY"},
{"content":{"body":"It would be surprising if Node and Deno really continue to not support this when Chrome does ","format":"org.matrix.custom.html","formatted_body":"It would be surprising if Node and Deno really continue to not support this when Chrome does","msgtype":"m.text"},"ts":1669799200702,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"},
{"content":{"body":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc.","msgtype":"m.text","org.matrix.msc1767.text":"Hey all, as Michael says, please ensure your attendance is logged in the Notes doc."},"ts":1669799467481,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JC6YcZwxH0TdWY_jEiLlzB_wJRE6MGjSvYc4vIvPclE"},
{"content":{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","format":"org.matrix.custom.html","formatted_body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(I deleted the URL because we link everything from [the main Reflector post](https://github.com/tc39/Reflector/issues/446))","mimetype":"text/plain"},{"body":"(I deleted the URL because we link everything from <a href=\"https://github.com/tc39/Reflector/issues/446\">the main Reflector post</a>)","mimetype":"text/html"}]},"ts":1669799495552,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yW9Q_D7fyK59a083qn051T-rrrgWtyMVBWs8yL2jPoM"},
{"content":{"body":"(I deleted Michael Ficarra's comment accidentally)","msgtype":"m.text","org.matrix.msc1767.text":"(I deleted Michael Ficarra's comment accidentally)"},"ts":1669799517615,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"},
{"content":{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","m.relates_to":{"m.in_reply_to":{"event_id":"$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> It would be surprising if Node and Deno really continue to not support this when Chrome does\n\nDeno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzTEF5MVmseRKPbi9Oky7L5oPXeCGwdmVRf1LfatgjQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It would be surprising if Node and Deno really continue to not support this when Chrome does</blockquote></mx-reply>Deno does support it - I think the BCD data that MDN uses has not been updated yet. I'll get it updated.","mimetype":"text/html"}]},"ts":1669799642912,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$lsHUsnXWlaCc1JUswYx_eb1CZ3O9sseqKjikm6S2Dcs"},
{"content":{"body":"Rob Palmer: that was Saboff, not me","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer: that was Saboff, not me","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: that was Saboff, not me","mimetype":"text/html"}]},"ts":1669799719546,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vts7nqqSA_OExOkljk8cBM-u_1QMOiUd6kcbCs_6GYo"},
{"content":{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","m.relates_to":{"m.in_reply_to":{"event_id":"$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@robpalme:matrix.org> (I deleted Michael Ficarra's comment accidentally)\n\n^","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$56C05_O8Us8MNK2XDZZnKPuRSDLbI5IklyuRNPioZc0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>(I deleted Michael Ficarra&#39;s comment accidentally)</blockquote></mx-reply>^","mimetype":"text/html"}]},"ts":1669799735437,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$7kB62UOo-IFrUPAmpMEPLu-F58leHwY_XbFTTt9EmYM"},
{"content":{"body":"oohhh I see","msgtype":"m.text","org.matrix.msc1767.text":"oohhh I see"},"ts":1669799760884,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$juJDAmWu82UmvowEoiJmvYzvB1eU57SliWOOp-I-gak"},
{"content":{"body":"too early","msgtype":"m.text","org.matrix.msc1767.text":"too early"},"ts":1669799775973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$poNVsnZ3xwg7lcqdnQisf1JOkW7Wlnzc_KhnDFw_cLI"},
{"content":{"body":"for the notes, who is speaking other than frank?","msgtype":"m.text","org.matrix.msc1767.text":"for the notes, who is speaking other than frank?"},"ts":1669800290158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-b__KvFmRfpmtb-8Annsd0iDt41qGhqj9kyqK_zaqQ8"},
{"content":{"body":"MAH","msgtype":"m.text","org.matrix.msc1767.text":"MAH"},"ts":1669800299995,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$A-Nqn4a6wOyB5QrW5wyep0au0kT-NYZZdGvJRHgPzmU"},
{"content":{"body":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?","msgtype":"m.text","org.matrix.msc1767.text":"given how many ongoing API proposals could benefit from R&T, shouldn't we be really prioritizing it?"},"ts":1669800460229,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$8HkMX9tQnowAqeJX5LSxDGQIce9G3LwzDA7lINW877g"},
{"content":{"body":"like... ideally every single `Intl` constructor should take a record options bag ","format":"org.matrix.custom.html","formatted_body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like... ideally every single `Intl` constructor should take a record options bag ","mimetype":"text/plain"},{"body":"like... ideally every single <code>Intl</code> constructor should take a record options bag","mimetype":"text/html"}]},"ts":1669800489438,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kXQCjHN2zb8mE0qdbWUgQ0vAhkSFFxGbrmwQLTwyNLY"},
{"content":{"body":"The problem is how long we need to wait for r&t 😂","msgtype":"m.text","org.matrix.msc1767.text":"The problem is how long we need to wait for r&t 😂"},"ts":1669800797239,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$txgMpsG2G2Mkgn9mjpmXvh95erap0S0g7_cFGazl5zk"},
{"content":{"body":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is","msgtype":"m.text","org.matrix.msc1767.text":"I don't think we should start making APIs return records and tuples even when their result is immutable, as convenient as it is"},"ts":1669800805949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t9M_7SFVTGzmrZ_Nlgy2FcVUu8uGu9F87BG2Bs2LXtI"},
{"content":{"body":"everything else is already objects","msgtype":"m.text","org.matrix.msc1767.text":"everything else is already objects"},"ts":1669800811659,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SUWP6KbeZHi4p-8pz48b39JrYG-5ujZW9k7CL5_OTkc"},
{"content":{"body":"So we add r&t but our APIs do not use it, only userland use it?","msgtype":"m.text","org.matrix.msc1767.text":"So we add r&t but our APIs do not use it, only userland use it?"},"ts":1669800864358,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$MiTzQQvRr-kY_Y9UdUyOuW6xPXIeCco757MGPADKSes"},
{"content":{"body":"i'm not even convinced that the different identity thing is that big a problem","msgtype":"m.text","org.matrix.msc1767.text":"i'm not even convinced that the different identity thing is that big a problem"},"ts":1669800867195,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dItkHI8ujCx_fLbrsyVO4q8FToTKrnXkllRlpei9JYk"},
{"content":{"body":"caching is good for this, function is good for this","msgtype":"m.text","org.matrix.msc1767.text":"caching is good for this, function is good for this"},"ts":1669800883339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xGtFbmEHCbWPnG2h0BSrgA5nLQzJdI9FyBBO709dq3Q"},
{"content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800896303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac"},
{"content":{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","m.new_content":{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$kTMUojuu9lHNOAqEwLmifa8BiVhKRv-UL9rIL8QBlac","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > so we add r&t but our APIs do not use it, only userland use it?\n\nyeah basically","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>so we add r&amp;t but our APIs do not use it, only userland use it?</p>\n</blockquote>\n<p>yeah basically</p>\n","mimetype":"text/html"}]},"ts":1669800900344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r3OWA3vaBMJza4qMpF2pJ4092yzJ_2d04KLkg3Wstts"},
{"content":{"body":"wait temporal has non-symmetric equality","msgtype":"m.text","org.matrix.msc1767.text":"wait temporal has non-symmetric equality"},"ts":1669802756250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iq23gceot6owFs2Rg_ui3HYGyJW-lmkVEVrK-RCqHis"},
{"content":{"body":"I had not realized that","msgtype":"m.text","org.matrix.msc1767.text":"I had not realized that"},"ts":1669802758679,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uwQOPKS_XHouH9eEnhjhwcaVcoVPR_I_4m_UJ4HToGw"},
{"content":{"body":"seems... not great?","msgtype":"m.text","org.matrix.msc1767.text":"seems... not great?"},"ts":1669802766272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YrOdKvb-8RCOBOSxTx9hSmIO29lh8Y7MxRm7LrYjGNA"},
{"content":{"body":"really?","msgtype":"m.text","org.matrix.msc1767.text":"really?"},"ts":1669802845653,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8aIePWsZ8fFvlawP3S5q5UyvoRbT4KVsj1plnQv1EFA"},
{"content":{"body":"how can it not be symmetric...?","msgtype":"m.text","org.matrix.msc1767.text":"how can it not be symmetric...?"},"ts":1669802852103,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E9nWMRYrLTMOVqjAdeSKYMju2eyFsfPpoQ6OqQBMK6I"},
{"content":{"body":"that was the claim made in this presentation","msgtype":"m.text","org.matrix.msc1767.text":"that was the claim made in this presentation"},"ts":1669802856840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y12NEWBpIWbfg4nRWm1UPrqSbo3NXlDI8auFtozlJKs"},
{"content":{"body":"not literal `===` equality but equality methods","format":"org.matrix.custom.html","formatted_body":"not literal <code>===</code> equality but equality methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"not literal `===` equality but equality methods","mimetype":"text/plain"},{"body":"not literal <code>===</code> equality but equality methods","mimetype":"text/html"}]},"ts":1669802866946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"},
{"content":{"body":"Or as etymologists would call it, anametric equality.","msgtype":"m.text","org.matrix.msc1767.text":"Or as etymologists would call it, anametric equality."},"ts":1669802928736,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xrFErVsLy8eJlGY4yTbQC8V6mSsCS9SVkpaqR3OrN3I"},
{"content":{"body":"page 16 of the notes for the transcript where this was mentioned","msgtype":"m.text","org.matrix.msc1767.text":"page 16 of the notes for the transcript where this was mentioned"},"ts":1669802961922,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$GSFm4Li4aUwmflqCQF3L-BwRjhpGyDRi7hHRadpYuXE"},
{"content":{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","format":"org.matrix.custom.html","formatted_body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"could we take a short break before getting into the queue Rob Palmer ryzokuken ","mimetype":"text/plain"},{"body":"could we take a short break before getting into the queue <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","mimetype":"text/html"}]},"ts":1669803203549,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$t0AToB5UesYaHRVcjsD-yP9jKT9mURGNP75VpMfJzuY"},
{"content":{"body":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part","msgtype":"m.text","org.matrix.msc1767.text":"yes, we'll do a 10 min intermission as soon as Ashley finishes the presentation part"},"ts":1669803291120,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$W8YwuJZGeF4KMuAyg_0M9GtM8H2_2zz5wPcBKGV2xY8"},
{"content":{"body":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant","msgtype":"m.text","org.matrix.msc1767.text":"\"ecosystem challenges\" and \"subtlety\" are way too hand-wavey for me to understand what is meant"},"ts":1669803318238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_GAyHqEjVkMmwrbOs_ZPobdmtIFphn48eQD6s5NctfU"},
{"content":{"body":"like what is the concrete thing that those objections refer to?","msgtype":"m.text","org.matrix.msc1767.text":"like what is the concrete thing that those objections refer to?"},"ts":1669803337456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6pOhQwXgKexDIa8wgYQQeOPHkUryrF-sFHOnga3UMsg"},
{"content":{"body":"i have thoughts but my brain","msgtype":"m.text","org.matrix.msc1767.text":"i have thoughts but my brain"},"ts":1669803387483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w5SXvVhQ_AgqS6MO4VaDCQzLGC3NrTiKAW3r5IPErE8"},
{"content":{"body":"so slow","msgtype":"m.text","org.matrix.msc1767.text":"so slow"},"ts":1669803388914,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E39d5a9GquiHl4wxuPJUfl7ykrM3VTcN0aFWnQN5Bso"},
{"content":{"body":"does not bode well for tomorrow","msgtype":"m.text","org.matrix.msc1767.text":"does not bode well for tomorrow"},"ts":1669803396120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hari5iwoHeti7_5-cZowYAUJrsyhjlJySznLV1Om0Ew"},
{"content":{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","m.relates_to":{"m.in_reply_to":{"event_id":"$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> not literal `===` equality but equality methods\n\nthis","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZvgfmKHFlfFky0L4CBIs6RplMd_GmF_p1J7I6pw3rdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>not literal <code>===</code> equality but equality methods</blockquote></mx-reply>this","mimetype":"text/html"}]},"ts":1669804213172,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$_H1X1rZPPSSzaL0PsgFTVmySoW59Q9q0kq68KxRgQWo"},
{"content":{"body":"it's the `compare` methods","format":"org.matrix.custom.html","formatted_body":"it's the <code>compare</code> methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it's the `compare` methods","mimetype":"text/plain"},{"body":"it's the <code>compare</code> methods","mimetype":"text/html"}]},"ts":1669804219913,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$uoNs5sE8R7jwN9aqeO7e0T8qbBUvMiCUJaRQb6MGOKw"},
{"content":{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","format":"org.matrix.custom.html","formatted_body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"basically, since `compare` accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/plain"},{"body":"basically, since <code>compare</code> accepts plain objects, any superset temporal instances could work as long as they're the argument","mimetype":"text/html"}]},"ts":1669804254412,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rG_4RlCsOAtQnmSp7u5S7YqdZV9npnS8EROehdFo9pQ"},
{"content":{"body":"but if the receiver is the superset, it won't work","msgtype":"m.text","org.matrix.msc1767.text":"but if the receiver is the superset, it won't work"},"ts":1669804265709,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$vemR4Zn8fKWpJBL4SxQfUMULkCRopN5m5I-Ov9116QM"},
{"content":{"body":"(because it will lack certain properties)","msgtype":"m.text","org.matrix.msc1767.text":"(because it will lack certain properties)"},"ts":1669804281275,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$zWW4lStLmIEPABJv3l9YPGy2c39RAnZhaZQwmQrqpMU"},
{"content":{"body":"actually, nvm me, the `compare` methods are static","format":"org.matrix.custom.html","formatted_body":"actually, nvm me, the <code>compare</code> methods are static","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"actually, nvm me, the `compare` methods are static","mimetype":"text/plain"},{"body":"actually, nvm me, the <code>compare</code> methods are static","mimetype":"text/html"}]},"ts":1669804317003,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$fjiOHv1S1fp-DqWWp6ZuU6wDAuB-KVCz7Jw5a1xph3M"},
{"content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804345537,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM"},
{"content":{"body":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","m.new_content":{"body":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work","msgtype":"m.text","org.matrix.msc1767.text":"so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"m.relates_to":{"event_id":"$LLXT8cRCS0jnNESIrBTEIS6NFlrKqRkSHVQ5nsZ5ISM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * so basically as long as the arguments are of types which are supersets of the type whose compare function is called, it will work"},"ts":1669804356761,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TsJZL-jy55bWcV6F4klEZjMF43Sn7wYVgRir0StMpn8"},
{"content":{"body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we don’t argue against the goal of immutability ","format":"org.matrix.custom.html","formatted_body":"Note, in Romance languages, discuss means argue against, so I think Patrick meant we don’t argue against the goal of immutability","msgtype":"m.text"},"ts":1669804536309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-ndaGFGsbwk3tWAp5s3GrVrYdKUcBL8jKSO-nKSJKAY"},
{"content":{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: we struggle to hear yulia on this side of the room","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: we struggle to hear yulia on this side of the room","mimetype":"text/html"}]},"ts":1669804670567,"senderName":"jasew","senderId":"@jasew:matrix.org","id":"$zo6Za8OdzuZEY2BjB-uQtBv5v0syV7kC1Nu-LaB1NGI"},
{"content":{"body":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs","msgtype":"m.text","org.matrix.msc1767.text":"I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs"},"ts":1669804903017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"},
{"content":{"body":"IIRC, equality has always been a top-level goal?","msgtype":"m.text","org.matrix.msc1767.text":"IIRC, equality has always been a top-level goal?"},"ts":1669804952572,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"},
{"content":{"body":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted.","msgtype":"m.text","org.matrix.msc1767.text":"another quick reminder, I've settled on a better workflow to admit people into the call ASAP but please feel free to ping me here if you're waiting to be allowed in since Meet doesn't notify me about people waiting to be admitted."},"ts":1669805046426,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ZwPCjC5DM8rgIho6twJ0NE_8UUBGGMgjvzs20EjhB78"},
{"content":{"body":"> <@rbuckton:matrix.org> IIRC, equality has always been a top-level goal?\n\nYes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />IIRC, equality has always been a top-level goal?</blockquote></mx-reply>Yes, but different champions have been highlighting different goals more so depending on who you asked to it might not have been the first answer","m.relates_to":{"m.in_reply_to":{"event_id":"$Bz-R-s5wQL65J80xlm8V6rpuKDDEoQMvShWPu-bUpqY"}},"msgtype":"m.text"},"ts":1669805058844,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CiCvM5kkX2XoW53iGRoEkEDSj6F8_6CaGccQw-sfVPs"},
{"content":{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","m.relates_to":{"m.in_reply_to":{"event_id":"$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I've long been in favor of the introduction of user-defined value types, and it was one of my goals for structs\n\nAs part of this, I had considered `#[]` and `#{}` as essentially being to value types the equivalent of `[]` and `{}` to reference types, though with the added property of immutability.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42yYZDcYiDui6WAASPvVyEh0yYdl1wKPZvEvsy7SvY8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve long been in favor of the introduction of user-defined value types, and it was one of my goals for structs</blockquote></mx-reply>As part of this, I had considered <code>#[]</code> and <code>#{}</code> as essentially being to value types the equivalent of <code>[]</code> and <code>{}</code> to reference types, though with the added property of immutability.","mimetype":"text/html"}]},"ts":1669805064747,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6d1nxG-Y2F7HzCWQkGnEz-o6pdHZGTHamwlWgG7zshY"},
{"content":{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","format":"org.matrix.custom.html","formatted_body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If `struct` had come before R&T, I would have pushed more for R&T to be designed in terms of structs.","mimetype":"text/plain"},{"body":"If <code>struct</code> had come before R&amp;T, I would have pushed more for R&amp;T to be designed in terms of structs.","mimetype":"text/html"}]},"ts":1669805112494,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7YJvFsyL4_k44VMwduSAgWynebqEjsjrO_dj0PRG82U"},
{"content":{"body":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality","msgtype":"m.text","org.matrix.msc1767.text":"fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality"},"ts":1669805239837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"},
{"content":{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","format":"org.matrix.custom.html","formatted_body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What I _wanted_ was `struct` + value types + operator overloading, with flexibility in `struct` to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/plain"},{"body":"What I <em>wanted</em> was <code>struct</code> + value types + operator overloading, with flexibility in <code>struct</code> to support mutability/immutability and shareability/transferability/copiability.","mimetype":"text/html"}]},"ts":1669805246306,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$deJyQH-NxQQ95Fh-9B3hIk6G462QTjpgLV_e3efPsUI"},
{"content":{"body":"there was even a proposal for that","msgtype":"m.text","org.matrix.msc1767.text":"there was even a proposal for that"},"ts":1669805247819,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Aoqsr9Yd1ZgSZJKJk_CEG8lgkfHpHAE79kw0HpqYSEM"},
{"content":{"body":"rekey + compositekey","msgtype":"m.text","org.matrix.msc1767.text":"rekey + compositekey"},"ts":1669805276617,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$r2BmRdv9n6JfP2RNfXXofzNhV22AXec9YIYnwGzmWOk"},
{"content":{"body":"and we might want that even in a world with R&T given that sometimes you want to key off of objects","msgtype":"m.text","org.matrix.msc1767.text":"and we might want that even in a world with R&T given that sometimes you want to key off of objects"},"ts":1669805289011,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tCEc4OMWCEoKW9e1YixOYXLTNbaBjZgk4XOtlZtwlzM"},
{"content":{"body":"i don't see a realistic path in doing value types with operator overloading","msgtype":"m.text","org.matrix.msc1767.text":"i don't see a realistic path in doing value types with operator overloading"},"ts":1669805298039,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$htppgkM4M-4Fxsf3UIEg_BUG27ieayA5JrdgF_GwP3I"},
{"content":{"body":"though I guess symbols as weakmap keys make that less necessary","msgtype":"m.text","org.matrix.msc1767.text":"though I guess symbols as weakmap keys make that less necessary"},"ts":1669805301685,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM"},
{"content":{"body":"(for performance)","msgtype":"m.text","org.matrix.msc1767.text":"(for performance)"},"ts":1669805304651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lxTlGPBfpzjTtQu3SiGSgv3AbKlXZq2wGOA-AWpB-iw"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","m.relates_to":{"m.in_reply_to":{"event_id":"$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\nI've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there&#39;s probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply>I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition.","mimetype":"text/html"}]},"ts":1669805402152,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","m.new_content":{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","format":"org.matrix.custom.html","formatted_body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$GrCeD5ros1tQ7aOm19qVnJ4TEb0dgktzKmYqVRhyIAQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality\n\n * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MIn2MGv25Cr5XvHucIGgjTCH-xMvMJPGpbDXRKtjqtg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I think there's probably a way to get maps and sets which support multiple keys without going full user-defined equality</blockquote></mx-reply> * I've been considering proposing customizable equality/hashing for Map/Set and built-in support for hash code/identity hash acquisition for several years now.","mimetype":"text/html"}]},"ts":1669805412787,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oPO7hWS7LXBa6qBtl-BJSLFqdRm2sRxmcTVvnziVwKE"},
{"content":{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","format":"org.matrix.custom.html","formatted_body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm less interested in multi-key maps, and more interested in creating a `Map<URL, ...>` or `Map<Point, ...>`, etc.","mimetype":"text/plain"},{"body":"I'm less interested in multi-key maps, and more interested in creating a <code>Map&lt;URL, ...&gt;</code> or <code>Map&lt;Point, ...&gt;</code>, etc.","mimetype":"text/html"}]},"ts":1669805453155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4kOS-TuZYrpte4qyM9xDw67tQmVa-iKRfmj0EMbTGf0"},
{"content":{"body":"I think when we drop equality, the argument for value types is weaker","msgtype":"m.text","org.matrix.msc1767.text":"I think when we drop equality, the argument for value types is weaker"},"ts":1669805462559,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"},
{"content":{"body":"I am very interested in multi-key maps... ","msgtype":"m.text","org.matrix.msc1767.text":"I am very interested in multi-key maps... "},"ts":1669805489748,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nAren't they just not value types if we drop equality?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>Aren't they just not value types if we drop equality?","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805501746,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$001RbYT1azmiEh19aGlz9VQkO6WOkQc5zKbcVolN_oM"},
{"content":{"body":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs","msgtype":"m.text","org.matrix.msc1767.text":"there is also the realms behavior that benefits, but that can be solved in a way similar to shared structs"},"ts":1669805536608,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ORxztHL9W2PdtVXa5rAcf03G8MEDu7Qn-dSGMAF-uSg"},
{"content":{"body":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand op overloading argument, I remember op overloading proposal do not allow overload === ?"},"ts":1669805538463,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$u69FQv-xd1LgNb8Ouk5yOcu4N6wIww8pFvEztaTuOwM"},
{"content":{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","m.relates_to":{"m.in_reply_to":{"event_id":"$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@alex.vincent:matrix.org> I am very interested in multi-key maps...\n\nI'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2hCVduP5KUwW8-zyHvetfYs9eqQ09wKIDWP2LolK0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@alex.vincent:matrix.org\">@alex.vincent:matrix.org</a><br>I am very interested in multi-key maps... </blockquote></mx-reply>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.","mimetype":"text/html"}]},"ts":1669805542261,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM"},
{"content":{"body":"Without === there is little value add; as in just use immutable.js and be done with it. ","format":"org.matrix.custom.html","formatted_body":"Without === there is little value add; as in just use immutable.js and be done with it.","msgtype":"m.text"},"ts":1669805559400,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"},
{"content":{"body":"Operator overloading here is not user defined","msgtype":"m.text","org.matrix.msc1767.text":"Operator overloading here is not user defined"},"ts":1669805560464,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"},
{"content":{"body":"> <@yulia:mozilla.org> I think when we drop equality, the argument for value types is weaker\n\nIt wouldn’t be value types without equality, if by value types we are referencing TC39’s historical investigations ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I think when we drop equality, the argument for value types is weaker</blockquote></mx-reply>It wouldn’t be value types without equality, if by value types we are referencing TC39’s historical investigations","m.relates_to":{"m.in_reply_to":{"event_id":"$QWXcalxmyp7rj9YVwbeMibmDMz_CEIX6h7RNtMQ3CPg"}},"msgtype":"m.text"},"ts":1669805584018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MbhOGpWrgYksdK_TEYuIihkUkYGYsTlYujVrvrbZPjY"},
{"content":{"body":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type","msgtype":"m.text","org.matrix.msc1767.text":"That's not really operator overloading then, right? It's just (in theory, regardless of implementation) value types with a === that makes sense for the type"},"ts":1669805616023,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$AoQ9TtqpBxtow2UhN4ijKs_AsHP3zdIkjcjmP1ERazE"},
{"content":{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","m.relates_to":{"m.in_reply_to":{"event_id":"$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> Operator overloading here is not user defined\n\nbut === already be overloaded by different primitive types and objects?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BMLZ0yrk8aWWQseIk7UNimqfcGg2JnsCfur5FVj7jbs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>Operator overloading here is not user defined</blockquote></mx-reply>but === already be overloaded by different primitive types and objects?","mimetype":"text/html"}]},"ts":1669805643942,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE"},
{"content":{"body":"> <@pipobscure:matrix.org> Without === there is little value add; as in just use immutable.js and be done with it. \n\nI disagree. It would be valuable, just less so.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g\">In reply to</a> <a href=\"https://matrix.to/#/@pipobscure:matrix.org\">@pipobscure:matrix.org</a><br>Without === there is little value add; as in just use immutable.js and be done with it.</blockquote></mx-reply>I disagree. It would be valuable, just less so.","m.relates_to":{"m.in_reply_to":{"event_id":"$AH52z-nUaI3tuuVudvErH8dbGmvsrUC_KJWGXO6iF0g"}},"msgtype":"m.text"},"ts":1669805700416,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XYDn3wLIx08d7Tk-E7bCJGExRf-8e3zYg4y97iL9YOI"},
{"content":{"body":"> <@haxjs:matrix.org> but === already be overloaded by different primitive types and objects?\n\nI guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>but === already be overloaded by different primitive types and objects?</blockquote></mx-reply>I guess it depends on how you see R&amp;T. If you say &quot;R&amp;T are like objects&quot;, then giving them a different equality feels different from how other primitives have their own equality","m.relates_to":{"m.in_reply_to":{"event_id":"$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> but === already be overloaded by different primitive types and objects?\n\nI guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW5smbjqEP0E9EpwQ7LyMT9kKebiu2DQmAQMKHDsSeE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>but === already be overloaded by different primitive types and objects?</blockquote></mx-reply>I guess it depends on how you see R&amp;T. If you say &quot;R&amp;T are like objects&quot;, then giving them a different equality feels different from how other primitives have their own equality","mimetype":"text/html"}]},"ts":1669805717560,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM"},
{"content":{"body":"i still think we should explore making Array.prototype and Object.prototype reject numeric properties","msgtype":"m.text","org.matrix.msc1767.text":"i still think we should explore making Array.prototype and Object.prototype reject numeric properties"},"ts":1669805845440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H9NHIpaJpZVzCwEe4BPSpmcXngdlWYbpTOoOUgFJCaQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality\n\nAre we talking about user problems or impl complexcity?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I guess it depends on how you see R&amp;T. If you say \"R&amp;T are like objects\", then giving them a different equality feels different from how other primitives have their own equality</blockquote></mx-reply>Are we talking about user problems or impl complexcity?","m.relates_to":{"m.in_reply_to":{"event_id":"$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> I guess it depends on how you see R&T. If you say \"R&T are like objects\", then giving them a different equality feels different from how other primitives have their own equality\n\nAre we talking about user problems or impl complexcity?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RldlAFRDM0HRqvQyDTFyHi1Ni7TaJn0lx2BrzOOE7YM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I guess it depends on how you see R&amp;T. If you say \"R&amp;T are like objects\", then giving them a different equality feels different from how other primitives have their own equality</blockquote></mx-reply>Are we talking about user problems or impl complexcity?","mimetype":"text/html"}]},"ts":1669805848313,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$7Yii4HC4mgo0T3WZaToeN9otxSdZaZTloWYT4od1fwM"},
{"content":{"body":"Implementation complexity ","msgtype":"m.text"},"ts":1669805869771,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OSHOMmq2KB2Bpw9U_rh7bQUakoKI9NVwvdwPE7kAkiw"},
{"content":{"body":"so I don't fully understand that, i just feel R&T is just another primitive and their equal operation.","msgtype":"m.text","org.matrix.msc1767.text":"so I don't fully understand that, i just feel R&T is just another primitive and their equal operation."},"ts":1669805932618,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ad9QD7bMwhjKQOlFGKk-ue-uHbhoWjbbDN_LO2-b5Ww"},
{"content":{"body":"shu: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: What does AI mean? I assume you are not proposing we should let artificial intelligence design the proposal","mimetype":"text/html"}]},"ts":1669805976470,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WiTVuqBvMyVaTuH4QOHbNK7hX7ceZb3O6hOKFG55-IE"},
{"content":{"body":"sorry, \"Action Item\"","msgtype":"m.text","org.matrix.msc1767.text":"sorry, \"Action Item\""},"ts":1669806015650,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S2eoWjZqEZkcMrb0r9y9KfkL4tOsnTfaNDFKBkYDCEY"},
{"content":{"body":"Anyway, we have many use cases of deep equality, so without that we just throw the heavy tasks to developers.","msgtype":"m.text","org.matrix.msc1767.text":"Anyway, we have many use cases of deep equality, so without that we just throw the heavy tasks to developers."},"ts":1669806017730,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$m-a-SZRK8QZ8bKNdh3YuHgY_C3lkDlB5tdKqQr2HXDE"},
{"content":{"body":"I wonder if we'd benefit from some design principles, perhaps as invariants.","msgtype":"m.text","org.matrix.msc1767.text":"I wonder if we'd benefit from some design principles, perhaps as invariants."},"ts":1669806460470,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TP3vNvF45yUzbQgdNolvRDH3fGWb_gyLyOnL17wBVIs"},
{"content":{"body":"Something like https://www.w3.org/TR/html-design-principles/#priority-of-constituencies","msgtype":"m.text","org.matrix.msc1767.text":"Something like https://www.w3.org/TR/html-design-principles/#priority-of-constituencies"},"ts":1669806463703,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$lZkTOyV8hVSyPcnEzXNV-Y9h2IbydrS7UdgyG_Qry4s"},
{"content":{"body":"it's unclear what the priority is here","msgtype":"m.text","org.matrix.msc1767.text":"it's unclear what the priority is here"},"ts":1669806473528,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$dfWB1lWiW9_o9ptJg63TTFIVFgwGwptALQpA1-FYjuE"},
{"content":{"body":"rbuckton: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: ok - I wasn't offering a critique, just a statement of my interest in multi-key maps. 😄","mimetype":"text/html"}]},"ts":1669806481660,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$hkZS1incaiVxTb8rEFugjd5fv2R63hTNOzhJ_Bq749A"},
{"content":{"body":"The real problem is who can represent developers.","msgtype":"m.text","org.matrix.msc1767.text":"The real problem is who can represent developers."},"ts":1669806494321,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo"},
{"content":{"body":"that's a problem indeed","msgtype":"m.text","org.matrix.msc1767.text":"that's a problem indeed"},"ts":1669806506280,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NcBe-yCcCw8y69if3-s1i1YwyPae086QRV1K_m6AqeE"},
{"content":{"body":"we resume at the top of the hour 1pm local time, which is in 52mins","msgtype":"m.text","org.matrix.msc1767.text":"we resume at the top of the hour 1pm local time, which is in 52mins"},"ts":1669806507175,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$5S7FvhGUS9fyxIAKYcaKlDMXOOmCrBrJFAD1hcP7gKk"},
{"content":{"body":"but even in the presence of a representative, do we care?","msgtype":"m.text","org.matrix.msc1767.text":"but even in the presence of a representative, do we care?"},"ts":1669806517918,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$m5vwu9acuLudAfrlfoJ7FlX9y4zVs7ez0gnQ8xKpMPQ"},
{"content":{"body":"littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the &quot;dynamic comparison in Map/Set&quot; thing for awhile, and started working on a draft of a proposal awhile ago.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago. ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the &quot;dynamic comparison in Map/Set&quot; thing for awhile, and started working on a draft of a proposal awhile ago.","mimetype":"text/html"}]},"ts":1669806540436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs"},
{"content":{"body":"> <@haxjs:matrix.org> The real problem is who can represent developers.\n\nWe have many delegates that are JavaScript developers and not just standard/engine engineers ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br />The real problem is who can represent developers.</blockquote></mx-reply>We have many delegates that are JavaScript developers and not just standard/engine engineers","m.relates_to":{"m.in_reply_to":{"event_id":"$-5fOncMZ3rYX-HAHBorGyW7fJD1bReWQhQK7VsfJvyo"}},"msgtype":"m.text"},"ts":1669806549319,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4"},
{"content":{"body":"> <@rbuckton:matrix.org> littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.\n\nhttps://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.</blockquote></mx-reply>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","m.relates_to":{"m.in_reply_to":{"event_id":"$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> littledan: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.\n\nhttps://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fdyE1wSNWTcVpg3vGvFrXm10ork0CiCRCvEZTks0hEs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I've been thinking about the \"dynamic comparison in Map/Set\" thing for awhile, and started working on a draft of a proposal awhile ago.</blockquote></mx-reply>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)","mimetype":"text/html"}]},"ts":1669806589230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> We have many delegates that are JavaScript developers and not just standard/engine engineers\n\nyeah, but who can say \" I represent the majority of developers\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We have many delegates that are JavaScript developers and not just standard/engine engineers</blockquote></mx-reply>yeah, but who can say &quot; I represent the majority of developers&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> We have many delegates that are JavaScript developers and not just standard/engine engineers\n\nyeah, but who can say \" I represent the majority of developers\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rok7oTKcnWRufYrBy5idR1fNQPhBa6Vsh-tblvIKVq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We have many delegates that are JavaScript developers and not just standard/engine engineers</blockquote></mx-reply>yeah, but who can say &quot; I represent the majority of developers&quot;?","mimetype":"text/html"}]},"ts":1669806600540,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$YRLJxmrUtUQQELSPd6kM3y4XWNQ09mD0b9h3cLQPf7Q"},
{"content":{"body":"I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.","msgtype":"m.text","org.matrix.msc1767.text":"I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is."},"ts":1669806603157,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"},
{"content":{"body":"Plus something like `Equaler` would have value in other APIs like `.includes` and `.groupByToMap`","format":"org.matrix.custom.html","formatted_body":"Plus something like <code>Equaler</code> would have value in other APIs like <code>.includes</code> and <code>.groupByToMap</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Plus something like `Equaler` would have value in other APIs like `.includes` and `.groupByToMap`","mimetype":"text/plain"},{"body":"Plus something like <code>Equaler</code> would have value in other APIs like <code>.includes</code> and <code>.groupByToMap</code>","mimetype":"text/html"}]},"ts":1669806727447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FbZhFpDN1VqxOtLJVgRagjLeGMjeuYBI4tq16c3pRg4"},
{"content":{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nMe too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.</blockquote></mx-reply>Me too","m.relates_to":{"m.in_reply_to":{"event_id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"}},"msgtype":"m.text"},"ts":1669807660169,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MfPa5t1pfXDk9v2mdXg2CceGp0c2wGteexH2y8z0Slg"},
{"content":{"body":"> <@rbuckton:matrix.org> https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)\n\nThanks for sharing this!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>https://gist.github.com/rbuckton/f8c2ac278b796324a06410e59c56eb10 (4 years old at this point)</blockquote></mx-reply>Thanks for sharing this!","m.relates_to":{"m.in_reply_to":{"event_id":"$POi-NAVLe7lWAUXkTA72wKyjQwkw0rTENDZMHefWKUY"}},"msgtype":"m.text"},"ts":1669807678727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s"},
{"content":{"body":"> <@littledan:matrix.org> Thanks for sharing this!\n\nI also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Thanks for sharing this!</blockquote></mx-reply>I also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","m.relates_to":{"m.in_reply_to":{"event_id":"$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Thanks for sharing this!\n\nI also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$I0gfCdrTNAvX7L4tdULGrfF3BMasGZIQn1eNHJYol-s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Thanks for sharing this!</blockquote></mx-reply>I also have https://esfx.js.org/esfx/api/equatable.html?tabs=ts as an example implementation that I'm heavily using in a few projects, along with https://esfx.js.org/esfx/api/collections-hashmap.html?tabs=ts","mimetype":"text/html"}]},"ts":1669807747495,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9mna5bRabZkB8hGRy0-xL8IFAJZ5cK2Vd7k5D1HpywU"},
{"content":{"body":"I was cryptic in my \"i don't have much time\" -- I'm not dying but ill be taking a break in march. We have some great folks from mozilla taking over though","msgtype":"m.text","org.matrix.msc1767.text":"I was cryptic in my \"i don't have much time\" -- I'm not dying but ill be taking a break in march. We have some great folks from mozilla taking over though"},"ts":1669809326149,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OxAXhUl6W9Vv-C2Mnk2lVc5kzGm0ab80y7s6iBtDBtY"},
{"content":{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nI don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don&#39;t quite understand what alternative Yulia has in mind, and I&#39;d like to know what it is.</blockquote></mx-reply>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","m.relates_to":{"m.in_reply_to":{"event_id":"$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> I don't quite understand what alternative Yulia has in mind, and I'd like to know what it is.\n\nI don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cEW7XUd9hd5xwQfPT7g9RyZwWSqowku0ebgTmQfh3-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I don&#39;t quite understand what alternative Yulia has in mind, and I&#39;d like to know what it is.</blockquote></mx-reply>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded","mimetype":"text/html"}]},"ts":1669809410570,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0"},
{"content":{"body":"> <@yulia:mozilla.org> I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded\n\nI think the goals have been shared lots of times; I honestly don’t know what kind of answer would work better for you.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I don't have 100% a full solution, I would like to see an investigation of building this on top of shared structs or a clear problem statement. so far it is usually a compound description of the constraints that lead us to a primitive, but many of them are issues i see more broadly in the language and i think would be beneficial if expanded</blockquote></mx-reply>I think the goals have been shared lots of times; I honestly don’t know what kind of answer would work better for you.","m.relates_to":{"m.in_reply_to":{"event_id":"$mX7ZAivFhV_nBvwxWvmESJoNwIqPQgYUJ5ke00wjTy0"}},"msgtype":"m.text"},"ts":1669809486468,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EShYZZHn0idq5gjitdpgO3xxaxHjQKwlSsMkg197PqE"},
{"content":{"body":"The presentation had a slide shown twice with three high-level goals, and went into detail about how they are related","msgtype":"m.text"},"ts":1669809521505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5MEsvzg9m3jvhYubh8WkzUKvkTuWrivmmNCWrSjrS2k"},
{"content":{"body":"We are restarting plenary in 1 minute.","msgtype":"m.text","org.matrix.msc1767.text":"We are restarting plenary in 1 minute."},"ts":1669809540236,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$GdUDUWQFBFGKFtRJT58gRGlATN76_m6BEEjQl0A5cRY"},
{"content":{"body":"Ashley Claymore shared with me an sketch of building on top of shared structs, could you also share it with yulia if you didn't already?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> shared with me an sketch of building on top of shared structs, could you also share it with <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> if you didn't already?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore shared with me an sketch of building on top of shared structs, could you also share it with yulia if you didn't already?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> shared with me an sketch of building on top of shared structs, could you also share it with <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> if you didn't already?","mimetype":"text/html"}]},"ts":1669809558644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LcVtZfOCDas1vGqk3qUasi6scdSDUBMFUQjy0tG7Ch4"},
{"content":{"body":"Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754","msgtype":"m.text"},"ts":1669809612959,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk"},
{"content":{"body":"> <@littledan:matrix.org> Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754\n\nI believe this matches what something around “shared structs” would be","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%246BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Fwiw here is another gist around an alternative, trying to draw out how there really is a spectrum of options https://gist.github.com/littledan/4b9c797f3e70d3531fcf32decc6e9754</blockquote></mx-reply>I believe this matches what something around “shared structs” would be","m.relates_to":{"m.in_reply_to":{"event_id":"$6BB-H-AS267uzvHkqTJrCoc2p1pvvIe7P7NvNcM5HQk"}},"msgtype":"m.text"},"ts":1669809642179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f54xWr_Yxbg5cnsnDDI2PIPG-zJXGWYg9BKz_g9v2ss"},
{"content":{"body":"I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking","msgtype":"m.text","org.matrix.msc1767.text":"I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking"},"ts":1669809684707,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs"},
{"content":{"body":"(There aren’t all that many observable properties that you derive from trying to align with shared structs. Seems like typeof, ===, not sure what else)","msgtype":"m.text"},"ts":1669809688334,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HMEuK4y7BFqTC2JqQifdY3fh7bnBb0qmW5PD8Lnc7XI"},
{"content":{"body":"its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise","msgtype":"m.text","org.matrix.msc1767.text":"its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise"},"ts":1669809705275,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs"},
{"content":{"body":"Thanks to Ashley and Linus and Andreu for note taking!","msgtype":"m.text","org.matrix.msc1767.text":"Thanks to Ashley and Linus and Andreu for note taking!"},"ts":1669809717623,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0sn8_nONL6V9TeqLyaro5pF_LMmp9vop-IAJdR1MgMc"},
{"content":{"body":"> <@yulia:mozilla.org> I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking\n\nI mean, it is Ok to disagree with the goals but I think they were stated. This was actually the focus of the presentation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>I think i outlined a couple of things that might work? and also the conditions that would resolve our concerns. I am not sure what you are asking</blockquote></mx-reply>I mean, it is Ok to disagree with the goals but I think they were stated. This was actually the focus of the presentation.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZCjdU6sgliFDXV7f_UZ6zUVZOoQAvHttZHHvGZCuPYs"}},"msgtype":"m.text"},"ts":1669809778033,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZK7pmoe5PPgR75mEtqFAQOOfmLup6bmghw2CP3ntVnI"},
{"content":{"body":"right and what I said was that the goals that are being addressed are broader issues within the language. they are not limited to just value types","msgtype":"m.text","org.matrix.msc1767.text":"right and what I said was that the goals that are being addressed are broader issues within the language. they are not limited to just value types"},"ts":1669809822625,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8yIwdTs2bY4URC7cxKDghgrIuFHLAU9F2i8HVLs60e8"},
{"content":{"body":"> <@yulia:mozilla.org> its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise\n\nImplementer feedback is definitely good. I think it is worth thinking about R&T as objects as well. If you have ideas about details of an alternative, it will be great to discuss them offline. I can see lots of options, as I went into in the gist linked above.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>its another thing if you don't like the solution, I still consider them valid and the implementer concerns are significant. I wouldn't bring this up otherwise</blockquote></mx-reply>Implementer feedback is definitely good. I think it is worth thinking about R&amp;T as objects as well. If you have ideas about details of an alternative, it will be great to discuss them offline. I can see lots of options, as I went into in the gist linked above.","m.relates_to":{"m.in_reply_to":{"event_id":"$xT_ctJFbtF4Fdr6gS9bKqFQRJLoF2rUzjrSYbvZiXSs"}},"msgtype":"m.text"},"ts":1669809865017,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5bRDaPbNGBnviH1yfMhwEkO5-lE4b52dJIEn6u5Qbyw"},
{"content":{"body":"yes, thank you for doing that, and i was sort of referencing it because I know this isn't the ideal version of the proposal as you see it. I just think it should be seriously considered","msgtype":"m.text","org.matrix.msc1767.text":"yes, thank you for doing that, and i was sort of referencing it because I know this isn't the ideal version of the proposal as you see it. I just think it should be seriously considered"},"ts":1669809910156,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1ByzZWFZ0eyIl2IU0wYvhB88QTAu0q_HLFjAMPjos6Y"},
{"content":{"body":"for now, id like to focus on the module layer zero proposal and we can come back to this, but i think we are pretty much on the same page in terms of where things are right now","msgtype":"m.text","org.matrix.msc1767.text":"for now, id like to focus on the module layer zero proposal and we can come back to this, but i think we are pretty much on the same page in terms of where things are right now"},"ts":1669809934991,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oXA7cRI-dBEkSMxm517RNvG4ZIwDIYS55H9XsIBuj_w"},
{"content":{"body":"Maybe next time we discuss R&T we should go over various options in more detail to discuss pros and cons ","format":"org.matrix.custom.html","formatted_body":"Maybe next time we discuss R&amp;T we should go over various options in more detail to discuss pros and cons","msgtype":"m.text"},"ts":1669809944325,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NG5Axfpo8cCiPOQgInzIZItOcD1nXwIyLA5ZuhwVkSE"},
{"content":{"body":"In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings","msgtype":"m.text","org.matrix.msc1767.text":"In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings"},"ts":1669809993534,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg"},
{"content":{"body":"just to clarify, in case it seemed like i was asking for something new","msgtype":"m.text","org.matrix.msc1767.text":"just to clarify, in case it seemed like i was asking for something new"},"ts":1669810011731,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cQ8VWE_nJCcQJy7SdIb3GnkmvwE7pXPI2aw_Y0pA_Bo"},
{"content":{"body":"> <@yulia:mozilla.org> In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings\n\nYes, I really appreciate that you shared that with everyone ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>In part the goal today was to also bring the concerns we have already discussed among champions and implementers to the broader committee, so we are sort of going over ground a second time -- what I am saying now is not substantially different from our prior meetings</blockquote></mx-reply>Yes, I really appreciate that you shared that with everyone","m.relates_to":{"m.in_reply_to":{"event_id":"$x7ezjXtl8GX6yefDZ0NRepxsAhD_2SmF8CCaQSVvmmg"}},"msgtype":"m.text"},"ts":1669810043362,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c-I8W-d0FYYT6I7NHHDI67DfklJyHalp7ze61X7gglw"},
{"content":{"body":"what does \"kicker\" mean here?","msgtype":"m.text","org.matrix.msc1767.text":"what does \"kicker\" mean here?"},"ts":1669810780255,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI"},
{"content":{"body":"> <@bakkot:matrix.org> though I guess symbols as weakmap keys make that less necessary\n\nNot really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though I guess symbols as weakmap keys make that less necessary</blockquote></mx-reply>Not really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","m.relates_to":{"m.in_reply_to":{"event_id":"$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> though I guess symbols as weakmap keys make that less necessary\n\nNot really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rcam4XSlIDSKFXEvwrkX85FfygqM3OSO9uXiUQyEvtM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though I guess symbols as weakmap keys make that less necessary</blockquote></mx-reply>Not really, being able to create a composite key from multiple unique symbols is still extremely valuable. But it does go into the ephemeron complexities that Shu mentioned earlier","mimetype":"text/html"}]},"ts":1669810866366,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sOBOo9VTMidY0Xg8tPLzr8jC2q842-GahwOVaMemMr8"},
{"content":{"body":"> <@yulia:mozilla.org> what does \"kicker\" mean here?\n\nSomething that starts the loading/linking/evaluating process","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>what does &quot;kicker&quot; mean here?</blockquote></mx-reply>Something that starts the loading/linking/evaluating process","m.relates_to":{"m.in_reply_to":{"event_id":"$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@yulia:mozilla.org> what does \"kicker\" mean here?\n\nSomething that starts the loading/linking/evaluating process","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8ASp_McYlvVdqd3Qw9Vl3zqHeR8N_boVdYYKFSk1VVI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>what does &quot;kicker&quot; mean here?</blockquote></mx-reply>Something that starts the loading/linking/evaluating process","mimetype":"text/html"}]},"ts":1669810979781,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$UWxzmfnnUCnLZlTLTy7WCYeSN-2gJTJPXEkIQdAl73Y"},
{"content":{"body":"thanks","msgtype":"m.text","org.matrix.msc1767.text":"thanks"},"ts":1669810995994,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VeSwC6kcncZEdh6eUMQ48iq7qhMnHDcw87q8JC2IjlQ"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.\n\nTo clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.</blockquote></mx-reply>To clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","m.relates_to":{"m.in_reply_to":{"event_id":"$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.\n\nTo clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1l3g6DjIBrZbTfIVT-UXsWd0esfgSm7EhuQTNIldEvM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm not saying I have no interest, but overriding equality/hash for Map/Set is a much higher priority to me.</blockquote></mx-reply>To clarify, how is this different than a rekey/identity configuration for the Map/Set? I don't think there is a safe way to make the equality semantics controlled by the target key, unless the key is born immutable.","mimetype":"text/html"}]},"ts":1669811020471,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$akBP-nlCFtnhDa-HP1E2hbYSXqMiMG5QiMUPZ8sJM4k"},
{"content":{"body":"As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n```\nconst src = ...\nnew Module(src).source === new Module(src).source // ???\n```","format":"org.matrix.custom.html","formatted_body":"<p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n```\nconst src = ...\nnew Module(src).source === new Module(src).source // ???\n```","mimetype":"text/plain"},{"body":"<p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n","mimetype":"text/html"}]},"ts":1669811151277,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec"},
{"content":{"body":"module source is no more of a new form of eval than importing a data URI which you can do today","msgtype":"m.text","org.matrix.msc1767.text":"module source is no more of a new form of eval than importing a data URI which you can do today"},"ts":1669811166470,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aHuFNs766swBjDQ8B7Skwjf1Ps8tU9W0IkOYGRFYYQI"},
{"content":{"body":"> <@eemeli:mozilla.org> As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n> ```\n> const src = ...\n> new Module(src).source === new Module(src).source // ???\n> ```\n\nI would expect yes, it should be `new Module(src).source === src`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n</blockquote></mx-reply>I would expect yes, it should be <code>new Module(src).source === src</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@eemeli:mozilla.org> As discussed earlier today re `Intl.Locale`, I wonder if this is true?\n> ```\n> const src = ...\n> new Module(src).source === new Module(src).source // ???\n> ```\n\nI would expect yes, it should be `new Module(src).source === src`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5G0_7iY6Y5IfTJaLCt_JU65npeS0PwxaShwdeo1cpec?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><p>As discussed earlier today re <code>Intl.Locale</code>, I wonder if this is true?</p>\n<pre><code>const src = ...\nnew Module(src).source === new Module(src).source // ???\n</code></pre>\n</blockquote></mx-reply>I would expect yes, it should be <code>new Module(src).source === src</code>","mimetype":"text/html"}]},"ts":1669811217948,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3zk2zDHn1iSwpTbubme93Pf0Zh-j3xad8CaplFZ37x0"},
{"content":{"body":"Kris Kowal: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: re the queue, can you help me understand the use cases for having ModuleSource instead of just passing a string to Module?","mimetype":"text/html"}]},"ts":1669811302441,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Tj1LdZhxFfN4WQL4WFvjjsFxy8DA4KWaVrqLpewoiZo"},
{"content":{"body":"shu: Yes, the import hook is shallow","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Yes, the import hook is shallow","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: Yes, the import hook is shallow","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Yes, the import hook is shallow","mimetype":"text/html"}]},"ts":1669811315845,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$qyfdt7_lmsmQhUcoizY4QWuglw8v2IpGV1_lFJjW_Lg"},
{"content":{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided `Equaler`. The gist from 4 years ago is a little weaker in that regard, and so is the `@esfx/equatable` implementation I mentioned earlier. \"rekey\" assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","format":"org.matrix.custom.html","formatted_body":"Equality semantics aren't necessarily controlled by the target key, but by the provided <code>Equaler</code>. The gist from 4 years ago is a little weaker in that regard, and so is the <code>@esfx/equatable</code> implementation I mentioned earlier. &quot;rekey&quot; assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided `Equaler`. The gist from 4 years ago is a little weaker in that regard, and so is the `@esfx/equatable` implementation I mentioned earlier. \"rekey\" assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","mimetype":"text/plain"},{"body":"Equality semantics aren't necessarily controlled by the target key, but by the provided <code>Equaler</code>. The gist from 4 years ago is a little weaker in that regard, and so is the <code>@esfx/equatable</code> implementation I mentioned earlier. &quot;rekey&quot; assumes you can convert the key into something with an equivalent identity but that can significantly increase the complexity of user code (i.e., needing to introduce a WeakMap/FinalizationRegistry and roll your own identity generation). Equality and hashing is often easier and generally only involves math and a built-in mechanism to acquire an identity hash for objects.","mimetype":"text/html"}]},"ts":1669811334105,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zbpJBzP8nQcM7Ib9bTpFI93uHW8ZeIOviOd0mhztc7Q"},
{"content":{"body":"Luca Casonato: okay, just to make sure i understand","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: okay, just to make sure i understand","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: okay, just to make sure i understand","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: okay, just to make sure i understand","mimetype":"text/html"}]},"ts":1669811337838,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4hywYD92GMk8is8tByh4H0aYto6U-ZpBKm0HpCbleZs"},
{"content":{"body":"The `Equaler` approach also mirrors what many implementations are already doing internally.","format":"org.matrix.custom.html","formatted_body":"The <code>Equaler</code> approach also mirrors what many implementations are already doing internally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `Equaler` approach also mirrors what many implementations are already doing internally.","mimetype":"text/plain"},{"body":"The <code>Equaler</code> approach also mirrors what many implementations are already doing internally.","mimetype":"text/html"}]},"ts":1669811356594,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I"},
{"content":{"body":"Luca Casonato: to have it be deep, the importhook itself needs to return `Module` instances that are themselves passed the import hook","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: to have it be deep, the importhook itself needs to return <code>Module</code> instances that are themselves passed the import hook","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: to have it be deep, the importhook itself needs to return `Module` instances that are themselves passed the import hook","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: to have it be deep, the importhook itself needs to return <code>Module</code> instances that are themselves passed the import hook","mimetype":"text/html"}]},"ts":1669811359957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CACWz-5sitYBZWkELJgCyrC4inSuiMvaCpT9CcHaj3U"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1669811367060,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$o4D9WBm3gBntVUyFICYOGrn1v-qUyb8V-RP_ZCrVvs8"},
{"content":{"body":"bakkot: it's not a new kind of eval, import is the evaluator here","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's not a new kind of eval, import is the evaluator here","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: it's not a new kind of eval, import is the evaluator here","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: it's not a new kind of eval, import is the evaluator here","mimetype":"text/html"}]},"ts":1669811409369,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LNojxE-SeY35iMwyr8FwQzguEAL894J6v4pjnszB720"},
{"content":{"body":"it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string","msgtype":"m.text","org.matrix.msc1767.text":"it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string"},"ts":1669811512468,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY"},
{"content":{"body":"Can we try giving 1 minute each for the replies to this topic?","msgtype":"m.text","org.matrix.msc1767.text":"Can we try giving 1 minute each for the replies to this topic?"},"ts":1669811519136,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5nRnWOJQfBDBN6WfC-5Nw-2FvryV4wgrCSnjFk5fp40"},
{"content":{"body":"bakkot: data URIs","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: data URIs","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: data URIs","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: data URIs","mimetype":"text/html"}]},"ts":1669811551805,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-pDwxd7Omq1HNL3hhwdE-l46oWhaE6i3EfjN40newQ4"},
{"content":{"body":"and blob urls","msgtype":"m.text","org.matrix.msc1767.text":"and blob urls"},"ts":1669811561151,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$DtLoNClZdtuz8piYtpSzm6fwAAeZVe8uj3mbHCaQsGY"},
{"content":{"body":"those aren't in 262 and have different CSP rules than eval does","msgtype":"m.text","org.matrix.msc1767.text":"those aren't in 262 and have different CSP rules than eval does"},"ts":1669811571904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rm7wFogO-XrJGoc2efxktltw_wynyFpXqGTHQsKnbB4"},
{"content":{"body":"> <@bakkot:matrix.org> it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string\n\n\"dynamic eval\" or \"dynamic import\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it&#39;s a new kind of eval, you can&#39;t use dynamic eval to evaluate an arbitrary string</blockquote></mx-reply>&quot;dynamic eval&quot; or &quot;dynamic import&quot;?","m.relates_to":{"m.in_reply_to":{"event_id":"$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> it's a new kind of eval, you can't use dynamic eval to evaluate an arbitrary string\n\n\"dynamic eval\" or \"dynamic import\"?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1EJy3IpTjwlff91gqhANqKiUnXrwTRj6e4_RLmiDsrY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it&#39;s a new kind of eval, you can&#39;t use dynamic eval to evaluate an arbitrary string</blockquote></mx-reply>&quot;dynamic eval&quot; or &quot;dynamic import&quot;?","mimetype":"text/html"}]},"ts":1669811597091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FAfPoaL_46fRACtnrAnsFUTb3RZBz1gR7fWhAmuA6iE"},
{"content":{"body":"and also just because it's possible to use something obscure to accomplish a thing does not mean that we should be providing a first class way of doing it","msgtype":"m.text","org.matrix.msc1767.text":"and also just because it's possible to use something obscure to accomplish a thing does not mean that we should be providing a first class way of doing it"},"ts":1669811604949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dX9dYtyg84pMwCuNcBTt-q5w1RJ_HgIiQvy9uJKNwHc"},
{"content":{"body":"imo Module is the same as Function and friends","msgtype":"m.text","org.matrix.msc1767.text":"imo Module is the same as Function and friends"},"ts":1669811767534,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WgiuUiXUtDPi8lDAPC66aBh-Afb6JZfrIvX9BMwOi8Y"},
{"content":{"body":"bakkot: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Are you opposed to dynamic instantiation of module instances in general, or only from arbitrary text?","mimetype":"text/html"}]},"ts":1669811769362,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$nBR9u5_K97FIULu2w8kYB0k8kqtBffxeFil3o8N0mTc"},
{"content":{"body":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","msgtype":"m.text","org.matrix.msc1767.text":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"ts":1669811788538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_o962XnfBHDGZ1o31dt2bpnKdLpu9AtYvBQmvxnS9-E"},
{"content":{"body":" * it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","m.new_content":{"body":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source","msgtype":"m.text","org.matrix.msc1767.text":"it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"m.relates_to":{"event_id":"$_o962XnfBHDGZ1o31dt2bpnKdLpu9AtYvBQmvxnS9-E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's a constructor to create invokeable code you can pass around. so far, all of those take a string of source"},"ts":1669811793717,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-isIIWq4xWxGc6Po4geDYAKlVTWQoBdlOwVI5Pv6EYg"},
{"content":{"body":"Luca Casonato: I don't know what \"dynamic instantiation\" means if not \"from arbitrary text\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I don't know what &quot;dynamic instantiation&quot; means if not &quot;from arbitrary text&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: I don't know what \"dynamic instantiation\" means if not \"from arbitrary text\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I don't know what &quot;dynamic instantiation&quot; means if not &quot;from arbitrary text&quot;","mimetype":"text/html"}]},"ts":1669811805371,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Id3IzHeff9V0CznzxNUug_jO25NXzr2xaCy1wr34JFw"},
{"content":{"body":"but it's the \"arbitrary text\" I have a problem with, yes","msgtype":"m.text","org.matrix.msc1767.text":"but it's the \"arbitrary text\" I have a problem with, yes"},"ts":1669811814632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Oi_4Ud3AULrdZepOkmetr2cMu6Hg9fQqCW9kT0wvbGk"},
{"content":{"body":"nobody objected to AsyncFunction etc taking a string, why would Module not?","msgtype":"m.text","org.matrix.msc1767.text":"nobody objected to AsyncFunction etc taking a string, why would Module not?"},"ts":1669811816114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mNksEFz1GtKYmPXAWKTcDU2u13Isx7Jyikkmf8e96ZU"},
{"content":{"body":"Function already existed, AsyncFunction is not that different from it","msgtype":"m.text","org.matrix.msc1767.text":"Function already existed, AsyncFunction is not that different from it"},"ts":1669811832557,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oTeLdpMbKZcZLbhaufHxwmMxykxz_loYvFlTkWErras"},
{"content":{"body":"import reflection: `import module foo from \"./foo.js\"; await import(foo)`","format":"org.matrix.custom.html","formatted_body":"import reflection: <code>import module foo from &quot;./foo.js&quot;; await import(foo)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"import reflection: `import module foo from \"./foo.js\"; await import(foo)`","mimetype":"text/plain"},{"body":"import reflection: <code>import module foo from &quot;./foo.js&quot;; await import(foo)</code>","mimetype":"text/html"}]},"ts":1669811834409,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Zjt8uzDjdDxEvN34ZInWQKcaTmy0M7wI4MaP3EWRd3E"},
{"content":{"body":"Module is quite different","msgtype":"m.text","org.matrix.msc1767.text":"Module is quite different"},"ts":1669811836759,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-OQC6pARRC4NucgMy0Vxs_Qq97rnOEnmydD0F4nCyqQ"},
{"content":{"body":"Luca Casonato: totally fine with that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: totally fine with that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: totally fine with that","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: totally fine with that","mimetype":"text/html"}]},"ts":1669811850492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bOdw5LAl3UEjd6W1aAm-Bx2DTBD8FWUTqnBQ7uuzDvA"},
{"content":{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"ts":1669811870851,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc"},
{"content":{"body":" * as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":" * as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","m.new_content":{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","format":"org.matrix.custom.html","formatted_body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":"as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?","mimetype":"text/plain"},{"body":" * as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?","mimetype":"text/html"}]},"ts":1669811876108,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HR2SaetvNTXZMKp-KgoKNHC7gZsoophh38EPYvSVa9k"},
{"content":{"body":"everyone knows `eval` is evil","format":"org.matrix.custom.html","formatted_body":"everyone knows <code>eval</code> is evil","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"everyone knows `eval` is evil","mimetype":"text/plain"},{"body":"everyone knows <code>eval</code> is evil","mimetype":"text/html"}]},"ts":1669811899121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L5TfX_z2AR5cE6VveodsqiHFnodlzRc-czvUVBF3cRA"},
{"content":{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"ts":1669811911435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N4PTyCxPbc_I2RnbCvOyBYn1D2cyCj2kjBR041Q3JJE"},
{"content":{"body":"> <@ljharb:matrix.org> as dan said on the queue, i can ```eval(`module { ${source} }`)``` anyways, how is that different from passing `source` in directly?\n\nAs Kris said, this is about making eval deniable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>as dan said on the queue, i can <code>eval(`module { ${source} }`)</code> anyways, how is that different from passing <code>source</code> in directly?</blockquote></mx-reply>As Kris said, this is about making eval deniable","m.relates_to":{"m.in_reply_to":{"event_id":"$0K_46X16Qo2uuCL6wFeWU4mR4iS82QPOAIS1dZhGGpc"}},"msgtype":"m.text"},"ts":1669811918195,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-QQhh2krO9wlJJ9zFqViJDpBjeGEz9reYXuxQc01SiI"},
{"content":{"body":" * \"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":" * &quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","m.new_content":{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","format":"org.matrix.custom.html","formatted_body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":"&quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$N4PTyCxPbc_I2RnbCvOyBYn1D2cyCj2kjBR041Q3JJE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * \"I can already do this by using `eval`\" is not a reason to add a feature","mimetype":"text/plain"},{"body":" * &quot;I can already do this by using <code>eval</code>&quot; is not a reason to add a feature","mimetype":"text/html"}]},"ts":1669811918519,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s1j0NE8ynDHdnpnSsPgIVUAznxSgA-m6e_SBKEkDYZI"},
{"content":{"body":"Not just through CSP but by deleting the property","msgtype":"m.text"},"ts":1669811934510,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$odoQCLNGids_3rVdV96ihMvqQHNv1iMaFa9ZVzuLUyk"},
{"content":{"body":"oh sure in this case i meant \"via ModuleSource\"","msgtype":"m.text","org.matrix.msc1767.text":"oh sure in this case i meant \"via ModuleSource\""},"ts":1669811935636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AYmZ8UaknNUBf9fCvZyVpPdz-BicNKhROw_8S9Hia94"},
{"content":{"body":"(i don't think it's clear that deniability is a sufficient motivation to create an entire class, but that's a separate discussion)","msgtype":"m.text","org.matrix.msc1767.text":"(i don't think it's clear that deniability is a sufficient motivation to create an entire class, but that's a separate discussion)"},"ts":1669811970261,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BQDOGiBzIPpWHDObpyTr3sG5s9FiSwJlFUQ8t8pVdaQ"},
{"content":{"body":"I share bakkot’s concern generically and was persuaded by the eval injection risk","msgtype":"m.text"},"ts":1669811998281,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$69Eom4vWpsRNKA2Dp6xdDEHKUMfF_rzVg6jnSl-ujMI"},
{"content":{"body":"bakkot: are you ok with:\n\n```\nimport module foo from \"./foo.js\";\nconst newMod = new Module(foo.source);\nawait import(newMod);\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: are you ok with:</p>\n<pre><code>import module foo from &quot;./foo.js&quot;;\nconst newMod = new Module(foo.source);\nawait import(newMod);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: are you ok with:\n\n```\nimport module foo from \"./foo.js\";\nconst newMod = new Module(foo.source);\nawait import(newMod);\n```","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: are you ok with:</p>\n<pre><code>import module foo from &quot;./foo.js&quot;;\nconst newMod = new Module(foo.source);\nawait import(newMod);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1669812009497,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$812A9zkDwYusrBoyM0fw7z8K5W-4_A8U3CB3imfE2Ek"},
{"content":{"body":"Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","format":"org.matrix.custom.html","formatted_body":"Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","mimetype":"text/plain"},{"body":"Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$-QQhh2krO9wlJJ9zFqViJDpBjeGEz9reYXuxQc01SiI"}}},"ts":1669812019085,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Vi1aacLZnNz1hKpN-Ae0wDoOgNXe0i4bTS6ri4bn0AY"},
{"content":{"body":"Luca Casonato: assuming `foo.source` is opaque, yes, I think so","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: assuming <code>foo.source</code> is opaque, yes, I think so","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: assuming `foo.source` is opaque, yes, I think so","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: assuming <code>foo.source</code> is opaque, yes, I think so","mimetype":"text/html"}]},"ts":1669812031015,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bDOwgPH1imvfB_pTQb-8YNidX5m9j84gGhXF62IoP3w"},
{"content":{"body":"> <@littledan:matrix.org> As Kris said, this is about making eval deniable\n\n * Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-QQhh2krO9wlJJ9zFqViJDpBjeGEz9reYXuxQc01SiI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>As Kris said, this is about making eval deniable</blockquote></mx-reply> * Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","m.new_content":{"body":"Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","format":"org.matrix.custom.html","formatted_body":"Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","mimetype":"text/plain"},{"body":"Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Vi1aacLZnNz1hKpN-Ae0wDoOgNXe0i4bTS6ri4bn0AY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> As Kris said, this is about making eval deniable\n\n * Though you will now also need to deny `ModuleSource`, since `await import(new Module(new ModuleSource(code)))` is just indirect eval.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-QQhh2krO9wlJJ9zFqViJDpBjeGEz9reYXuxQc01SiI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>As Kris said, this is about making eval deniable</blockquote></mx-reply> * Though you will now also need to deny <code>ModuleSource</code>, since <code>await import(new Module(new ModuleSource(code)))</code> is just indirect eval.","mimetype":"text/html"}]},"ts":1669812035760,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UaoAYhSCY1JzwsVwJdDtzcJbPpcByqKk7aTkEEiLyvI"},
{"content":{"body":"> <@bakkot:matrix.org> Luca Casonato: assuming `foo.source` is opaque, yes, I think so\n\nYes, `foo.source` is a `ModuleSource` instance. There is no access to the module source text.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bDOwgPH1imvfB_pTQb-8YNidX5m9j84gGhXF62IoP3w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: assuming <code>foo.source</code> is opaque, yes, I think so</blockquote></mx-reply>Yes, <code>foo.source</code> is a <code>ModuleSource</code> instance. There is no access to the module source text.","m.relates_to":{"m.in_reply_to":{"event_id":"$bDOwgPH1imvfB_pTQb-8YNidX5m9j84gGhXF62IoP3w"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> Luca Casonato: assuming `foo.source` is opaque, yes, I think so\n\nYes, `foo.source` is a `ModuleSource` instance. There is no access to the module source text.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bDOwgPH1imvfB_pTQb-8YNidX5m9j84gGhXF62IoP3w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: assuming <code>foo.source</code> is opaque, yes, I think so</blockquote></mx-reply>Yes, <code>foo.source</code> is a <code>ModuleSource</code> instance. There is no access to the module source text.","mimetype":"text/html"}]},"ts":1669812102614,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$TxA0IGrqZ5bcK8C7-K0ccgLBW0k6e4lWEhT8YChKIwE"},
{"content":{"body":"though, I should say, I also don't understand the need for that","msgtype":"m.text","org.matrix.msc1767.text":"though, I should say, I also don't understand the need for that"},"ts":1669812127914,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q4N5RTpUGOsEOHEJQ4y4v5i_-EuPtEbrY8Y7xbPgGXo"},
{"content":{"body":"> <@bakkot:matrix.org> though, I should say, I also don't understand the need for that\n\nThis lets you relink dependencies (eg for testing) which is interesting ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Q4N5RTpUGOsEOHEJQ4y4v5i_-EuPtEbrY8Y7xbPgGXo\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though, I should say, I also don't understand the need for that</blockquote></mx-reply>This lets you relink dependencies (eg for testing) which is interesting","m.relates_to":{"m.in_reply_to":{"event_id":"$Q4N5RTpUGOsEOHEJQ4y4v5i_-EuPtEbrY8Y7xbPgGXo"}},"msgtype":"m.text"},"ts":1669812174949,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TAM91gYQpd02kiG-s15NwzkZYIuIiOY6z_YljKEAdlc"},
{"content":{"body":"yeah, the testing case is interesting, but not compelling to me on its own","msgtype":"m.text","org.matrix.msc1767.text":"yeah, the testing case is interesting, but not compelling to me on its own"},"ts":1669812198203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8L4rtAM6TcXIPrp3zCeAkuZZRxAOlOYrST8G2cndOnE"},
{"content":{"body":"I am very reluctant to add features which are only motivated by testing","msgtype":"m.text","org.matrix.msc1767.text":"I am very reluctant to add features which are only motivated by testing"},"ts":1669812217269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oM4aLNZFHoZxOMDZj79fKEz6XStKNO7buV8cER1BUXg"},
{"content":{"body":"what about feature-detection? like \"is TLA supported\"","msgtype":"m.text","org.matrix.msc1767.text":"what about feature-detection? like \"is TLA supported\""},"ts":1669812241068,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo"},
{"content":{"body":"im sort of swayed by hot reloading as a use case, in particular having no-reload updates","msgtype":"m.text","org.matrix.msc1767.text":"im sort of swayed by hot reloading as a use case, in particular having no-reload updates"},"ts":1669812256206,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oP2AgSMZr6Wu0RdkUxfXXLPRpjdKx3BTYfa6N3haJ8Q"},
{"content":{"body":"I find the testing case compelling, but there are potential issues there as well. If you can't remove modules from the module cache, re-importing the same module with different dependencies in a test runner will just continuously grow the module cache until you OOM.","msgtype":"m.text","org.matrix.msc1767.text":"I find the testing case compelling, but there are potential issues there as well. If you can't remove modules from the module cache, re-importing the same module with different dependencies in a test runner will just continuously grow the module cache until you OOM."},"ts":1669812274317,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kmAd40qV2yKqIBDHnTfy0Ov41BxouZupuyeA_WsEHF0"},
{"content":{"body":"so, similar to erlang behavior for swapping out running code is something i sometimes wistfully think about. ","msgtype":"m.text","org.matrix.msc1767.text":"so, similar to erlang behavior for swapping out running code is something i sometimes wistfully think about. "},"ts":1669812277732,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fc7v10YpBtfpryzJDDdLQzM2K3Q-hniEH3FJaqcWzfA"},
{"content":{"body":"> <@ljharb:matrix.org> what about feature-detection? like \"is TLA supported\"\n\n`new ModuleSource` would synchronously throw on syntax errors","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about feature-detection? like &quot;is TLA supported&quot;</blockquote></mx-reply><code>new ModuleSource</code> would synchronously throw on syntax errors","m.relates_to":{"m.in_reply_to":{"event_id":"$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> what about feature-detection? like \"is TLA supported\"\n\n`new ModuleSource` would synchronously throw on syntax errors","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about feature-detection? like &quot;is TLA supported&quot;</blockquote></mx-reply><code>new ModuleSource</code> would synchronously throw on syntax errors","mimetype":"text/html"}]},"ts":1669812278401,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$a_B-YMCIGw5NcbU9OQukwBWbOaQoQ4Pd6Yoe6a-RuGo"},
{"content":{"body":"I get the sense that this first proposal is including ModuleSource in order to use it esp. for the introspection stuff that's coming in a later proposal. Could we not have a first proposal that has the source as a string and leaves out `module.source`, and then a follow-on proposal that modifies this proposal before it reaches stage-4 with the ModuleSource features that are in it now?","format":"org.matrix.custom.html","formatted_body":"I get the sense that this first proposal is including ModuleSource in order to use it esp. for the introspection stuff that's coming in a later proposal. Could we not have a first proposal that has the source as a string and leaves out <code>module.source</code>, and then a follow-on proposal that modifies this proposal before it reaches stage-4 with the ModuleSource features that are in it now?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I get the sense that this first proposal is including ModuleSource in order to use it esp. for the introspection stuff that's coming in a later proposal. Could we not have a first proposal that has the source as a string and leaves out `module.source`, and then a follow-on proposal that modifies this proposal before it reaches stage-4 with the ModuleSource features that are in it now?","mimetype":"text/plain"},{"body":"I get the sense that this first proposal is including ModuleSource in order to use it esp. for the introspection stuff that's coming in a later proposal. Could we not have a first proposal that has the source as a string and leaves out <code>module.source</code>, and then a follow-on proposal that modifies this proposal before it reaches stage-4 with the ModuleSource features that are in it now?","mimetype":"text/html"}]},"ts":1669812280098,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Ebcs4kNujVKuoHzdLJcBvq26PYPbnvEHDbotH60-suY"},
{"content":{"body":"Right but engines can guarantee the stability of this, where delegating to the program, I don't see how it can","m.relates_to":{"event_id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I","is_falling_back":true,"m.in_reply_to":{"event_id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"Right but engines can guarantee the stability of this, where delegating to the program, I don't see how it can"},"ts":1669812286231,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$H03hZ34ehP9pqdt-Yy66K5drEZKpDuvGXYcnyQob0SM"},
{"content":{"body":"right, but how could i detect it if i can't make a module from a string","format":"org.matrix.custom.html","formatted_body":"right, but how could i detect it if i can't make a module from a string","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"right, but how could i detect it if i can't make a module from a string","mimetype":"text/plain"},{"body":"right, but how could i detect it if i can't make a module from a string","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$a_B-YMCIGw5NcbU9OQukwBWbOaQoQ4Pd6Yoe6a-RuGo"}}},"ts":1669812337935,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gZDnJPlORAvCJZ22fLLW9D-pJxr-D1_kZ0bCq4Eibtc"},
{"content":{"body":"> <@mhofman:matrix.org> Right but engines can guarantee the stability of this, where delegating to the program, I don't see how it can\n\nHow important is that stability when you are opting into the behavior by providing a custom equaler?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H03hZ34ehP9pqdt-Yy66K5drEZKpDuvGXYcnyQob0SM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right but engines can guarantee the stability of this, where delegating to the program, I don&#39;t see how it can</blockquote></mx-reply>How important is that stability when you are opting into the behavior by providing a custom equaler?","m.relates_to":{"event_id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I","m.in_reply_to":{"event_id":"$H03hZ34ehP9pqdt-Yy66K5drEZKpDuvGXYcnyQob0SM"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> Right but engines can guarantee the stability of this, where delegating to the program, I don't see how it can\n\nHow important is that stability when you are opting into the behavior by providing a custom equaler?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H03hZ34ehP9pqdt-Yy66K5drEZKpDuvGXYcnyQob0SM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Right but engines can guarantee the stability of this, where delegating to the program, I don&#39;t see how it can</blockquote></mx-reply>How important is that stability when you are opting into the behavior by providing a custom equaler?","mimetype":"text/html"}]},"ts":1669812344552,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_wc_f1Lfof8vF0BH90-UDxo1DSkNdwEdd7nVOltrLjQ"},
{"content":{"body":"> <@lucacasonato:matrix.org> `new ModuleSource` would synchronously throw on syntax errors\n\n * right, but how could i detect it if i can't make a module from a string","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$a_B-YMCIGw5NcbU9OQukwBWbOaQoQ4Pd6Yoe6a-RuGo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br><code>new ModuleSource</code> would synchronously throw on syntax errors</blockquote></mx-reply> * right, but how could i detect it if i can't make a module from a string","m.new_content":{"body":"right, but how could i detect it if i can't make a module from a string","format":"org.matrix.custom.html","formatted_body":"right, but how could i detect it if i can't make a module from a string","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"right, but how could i detect it if i can't make a module from a string","mimetype":"text/plain"},{"body":"right, but how could i detect it if i can't make a module from a string","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$gZDnJPlORAvCJZ22fLLW9D-pJxr-D1_kZ0bCq4Eibtc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> `new ModuleSource` would synchronously throw on syntax errors\n\n * right, but how could i detect it if i can't make a module from a string","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$a_B-YMCIGw5NcbU9OQukwBWbOaQoQ4Pd6Yoe6a-RuGo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br><code>new ModuleSource</code> would synchronously throw on syntax errors</blockquote></mx-reply> * right, but how could i detect it if i can't make a module from a string","mimetype":"text/html"}]},"ts":1669812344562,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e0RpehVwLvKg-pjC7bgnwjUUSOdSxQ02MQEiY_vJqfE"},
{"content":{"body":"> <@ljharb:matrix.org> right, but how could i detect it if i can't make a module from a string\n\nyeah, exactly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gZDnJPlORAvCJZ22fLLW9D-pJxr-D1_kZ0bCq4Eibtc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>right, but how could i detect it if i can't make a module from a string</blockquote></mx-reply>yeah, exactly","m.relates_to":{"m.in_reply_to":{"event_id":"$gZDnJPlORAvCJZ22fLLW9D-pJxr-D1_kZ0bCq4Eibtc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> right, but how could i detect it if i can't make a module from a string\n\nyeah, exactly","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gZDnJPlORAvCJZ22fLLW9D-pJxr-D1_kZ0bCq4Eibtc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>right, but how could i detect it if i can't make a module from a string</blockquote></mx-reply>yeah, exactly","mimetype":"text/html"}]},"ts":1669812348869,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$1xQc1hMwVQb35fqbZy6cuWkGMvMWrCR0eK2FyWlj8-0"},
{"content":{"body":"cc bakkot in case this is possibly interesting","msgtype":"m.text","org.matrix.msc1767.text":"cc bakkot in case this is possibly interesting"},"ts":1669812351781,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$n_UC5_fPLr_wf1RLNvW_9unjz5PcqjIsqbj8HIiA3sw"},
{"content":{"body":"> <@ljharb:matrix.org> what about feature-detection? like \"is TLA supported\"\n\nI don't see offhand why that would be important enough but am open to being convinced","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about feature-detection? like &quot;is TLA supported&quot;</blockquote></mx-reply>I don't see offhand why that would be important enough but am open to being convinced","m.relates_to":{"m.in_reply_to":{"event_id":"$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> what about feature-detection? like \"is TLA supported\"\n\nI don't see offhand why that would be important enough but am open to being convinced","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LRL33t6MhuDitEvVAoh32oqytBwCI_SxwF86nAF4Mjo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about feature-detection? like &quot;is TLA supported&quot;</blockquote></mx-reply>I don't see offhand why that would be important enough but am open to being convinced","mimetype":"text/html"}]},"ts":1669812357669,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hUdn2C6e_RlKDkaJ5RBt-nGvJI_fK6HW2Prdq8nbf50"},
{"content":{"body":"Kris Kowal: thanks the developer - production split is a helpful framing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: thanks the developer - production split is a helpful framing","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: thanks the developer - production split is a helpful framing","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: thanks the developer - production split is a helpful framing","mimetype":"text/html"}]},"ts":1669812396978,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c3B_dlo3HhSOj3r68Na5VqR1WZUpnnioMMlSJ-B-I5Y"},
{"content":{"body":"eg i want to know if it's worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don't want to even bother making the network request if it lacks it","msgtype":"m.text","org.matrix.msc1767.text":"eg i want to know if it's worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don't want to even bother making the network request if it lacks it"},"ts":1669812406564,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_ENDr9W5dYCjmNembL8uWZ3aPvx_xlgZo1vVarjGRbk"},
{"content":{"body":"I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.\n\nA `new Module` could also take, for example, a `WebAssembly.Module`","format":"org.matrix.custom.html","formatted_body":"<p>I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.</p>\n<p>A <code>new Module</code> could also take, for example, a <code>WebAssembly.Module</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.\n\nA `new Module` could also take, for example, a `WebAssembly.Module`","mimetype":"text/plain"},{"body":"<p>I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.</p>\n<p>A <code>new Module</code> could also take, for example, a <code>WebAssembly.Module</code></p>\n","mimetype":"text/html"}]},"ts":1669812412137,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SGnv8lqNX4vIq4-s2zJjeAjJlCWx7xTk3P1-DsAIjnE"},
{"content":{"body":"let me think on that, but sounds like a starting point to how to think about getting ahead of performance footguns and how to message it","msgtype":"m.text","org.matrix.msc1767.text":"let me think on that, but sounds like a starting point to how to think about getting ahead of performance footguns and how to message it"},"ts":1669812427256,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MeCdAFtBRLwMXMKKQ6gPJ88iZElgkJSUXDfl1PKrLzY"},
{"content":{"body":"Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","format":"org.matrix.custom.html","formatted_body":"Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","mimetype":"text/plain"},{"body":"Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$SGnv8lqNX4vIq4-s2zJjeAjJlCWx7xTk3P1-DsAIjnE"}}},"ts":1669812442997,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE"},
{"content":{"body":"ljharb well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?","mimetype":"text/html"}]},"ts":1669812461317,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8px-ubJiQyhNlXa4P2-n-KQd32YOTHYBAeoSXAtDe4E"},
{"content":{"body":" * Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SGnv8lqNX4vIq4-s2zJjeAjJlCWx7xTk3P1-DsAIjnE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.</p>\n<p>A <code>new Module</code> could also take, for example, a <code>WebAssembly.Module</code></p>\n</blockquote></mx-reply> * Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","m.new_content":{"body":"Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","format":"org.matrix.custom.html","formatted_body":"Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","mimetype":"text/plain"},{"body":"Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SGnv8lqNX4vIq4-s2zJjeAjJlCWx7xTk3P1-DsAIjnE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>I had in on the queue but didn't get to it, but ModuleSource is to JavaScript what WebAssembly.Module is to WASM.</p>\n<p>A <code>new Module</code> could also take, for example, a <code>WebAssembly.Module</code></p>\n</blockquote></mx-reply> * Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless","mimetype":"text/html"}]},"ts":1669812480868,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YRk-NUL476SSzmEkC80SI3O1X4AUVRxATxLtVfBmBrc"},
{"content":{"body":"> <@ljharb:matrix.org> eg i want to know if it's worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don't want to even bother making the network request if it lacks it\n\nWould you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_ENDr9W5dYCjmNembL8uWZ3aPvx_xlgZo1vVarjGRbk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>eg i want to know if it&#39;s worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don&#39;t want to even bother making the network request if it lacks it</blockquote></mx-reply>Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?","m.relates_to":{"m.in_reply_to":{"event_id":"$_ENDr9W5dYCjmNembL8uWZ3aPvx_xlgZo1vVarjGRbk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> eg i want to know if it's worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don't want to even bother making the network request if it lacks it\n\nWould you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_ENDr9W5dYCjmNembL8uWZ3aPvx_xlgZo1vVarjGRbk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>eg i want to know if it&#39;s worth trying to import a module that i know requires TLA support, and i support envs that lack it, and i don&#39;t want to even bother making the network request if it lacks it</blockquote></mx-reply>Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?","mimetype":"text/html"}]},"ts":1669812481318,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_A6XP4kZNx1h08t9bS5hjXlX2_i7Unw7XZVIuZEslx0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless\n\nIt is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless</blockquote></mx-reply>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless\n\nIt is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless</blockquote></mx-reply>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code>","mimetype":"text/html"}]},"ts":1669812538176,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$EUfPVg_RT8i4-70p2odzssH7N9s7DevRX9fY7tuKqMk"},
{"content":{"body":"> <@rbuckton:matrix.org> Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?\n\ni'd know that the code i'm importing has TLA, of course - but i don't know what *the env* supports","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_A6XP4kZNx1h08t9bS5hjXlX2_i7Unw7XZVIuZEslx0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?</blockquote></mx-reply>i'd know that the code i'm importing has TLA, of course - but i don't know what <em>the env</em> supports","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$_A6XP4kZNx1h08t9bS5hjXlX2_i7Unw7XZVIuZEslx0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?\n\ni'd know that the code i'm importing has TLA, of course - but i don't know what *the env* supports","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_A6XP4kZNx1h08t9bS5hjXlX2_i7Unw7XZVIuZEslx0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Would you not generally know this up front, given that its usually unsafe to eval code you don't control anyways?</blockquote></mx-reply>i'd know that the code i'm importing has TLA, of course - but i don't know what <em>the env</em> supports","mimetype":"text/html"}]},"ts":1669812572946,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aI1HRwgIwdJaVw7Ycwh_mwaGu6yMPBb7u7ZoC4Z-RwQ"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?\n\nha, true, so yes, swap TLA for \"any future module-only syntax we add\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8px-ubJiQyhNlXa4P2-n-KQd32YOTHYBAeoSXAtDe4E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?</blockquote></mx-reply>ha, true, so yes, swap TLA for &quot;any future module-only syntax we add&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$8px-ubJiQyhNlXa4P2-n-KQd32YOTHYBAeoSXAtDe4E"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> ljharb well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?\n\nha, true, so yes, swap TLA for \"any future module-only syntax we add\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8px-ubJiQyhNlXa4P2-n-KQd32YOTHYBAeoSXAtDe4E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> well, nothing is going to have ModuleSource but not TLA, so presumably you're imagining some other syntax?</blockquote></mx-reply>ha, true, so yes, swap TLA for &quot;any future module-only syntax we add&quot;","mimetype":"text/html"}]},"ts":1669812594793,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tGezeIdWvgfzBsfYk_NMR8b3ZVA8elbDkK4UQXvX45E"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless\n\n * It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`\n\nSee also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless</blockquote></mx-reply> * <p>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code></p>\n<p>See also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md</p>\n","m.new_content":{"body":"It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`\n\nSee also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md","format":"org.matrix.custom.html","formatted_body":"<p>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code></p>\n<p>See also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`\n\nSee also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md","mimetype":"text/plain"},{"body":"<p>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code></p>\n<p>See also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$EUfPVg_RT8i4-70p2odzssH7N9s7DevRX9fY7tuKqMk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@nicolo-ribaudo:matrix.org> Because `WebAssembly.Module` is the representation of the wasm source, and it is stateless\n\n * It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie `ModuleSource#imports` and `ModuleSource#exports`\n\nSee also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oay14VsirQsBhNqju8chgtNq6nzljeVxEHPBa0mEHNE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Because <code>WebAssembly.Module</code> is the representation of the wasm source, and it is stateless</blockquote></mx-reply> * <p>It is the compiled module source, that you can also use to get the list of imported specifiers, and list of exported binding identifiers. ModuleSource could provide the same for JS modules. Ie <code>ModuleSource#imports</code> and <code>ModuleSource#exports</code></p>\n<p>See also https://github.com/tc39/proposal-compartments/blob/master/1-static-analysis.md</p>\n","mimetype":"text/html"}]},"ts":1669812622002,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$TRsuLKKewBLn-4DpcAQPIqid_N5L1CAAXXX87u-WJto"},
{"content":{"body":"(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)","msgtype":"m.text","org.matrix.msc1767.text":"(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)"},"ts":1669812625071,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AXYe5sr0qqSSokxpaSsINl6aLRLTl12S0ILPd4zjx8A"},
{"content":{"body":" * (altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)","m.new_content":{"body":"(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)","msgtype":"m.text","org.matrix.msc1767.text":"(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)"},"m.relates_to":{"event_id":"$AXYe5sr0qqSSokxpaSsINl6aLRLTl12S0ILPd4zjx8A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * (altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)"},"ts":1669812640562,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3p1YwRs5uCh0JvM7Sfo0FNeHyLv807GsvgnTICH3ev0"},
{"content":{"body":"> <@ljharb:matrix.org> (altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)\n\ndo browsers have a synchronous way to do this? I thought not","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AXYe5sr0qqSSokxpaSsINl6aLRLTl12S0ILPd4zjx8A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)</blockquote></mx-reply>do browsers have a synchronous way to do this? I thought not","m.relates_to":{"m.in_reply_to":{"event_id":"$AXYe5sr0qqSSokxpaSsINl6aLRLTl12S0ILPd4zjx8A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> (altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)\n\ndo browsers have a synchronous way to do this? I thought not","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AXYe5sr0qqSSokxpaSsINl6aLRLTl12S0ILPd4zjx8A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(altho ModuleSource can probably be polyfilled since every engine has a way to create ESM from a string, despite it not being in 262)</blockquote></mx-reply>do browsers have a synchronous way to do this? I thought not","mimetype":"text/html"}]},"ts":1669812650861,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$0ZWbDXpawvQMG7BqXnILQwovuDzUiEA0pOTb-jpROHs"},
{"content":{"body":"oh true, no, only async","msgtype":"m.text","org.matrix.msc1767.text":"oh true, no, only async"},"ts":1669812667054,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JO8eB2qsNSXMQefvPH65owW14Tyu4vL7wv0KjeyfKWc"},
{"content":{"body":"> <@lucacasonato:matrix.org> do browsers have a synchronous way to do this? I thought not\n\nYou replace the `ModuleSource` global with `ModuleSource`+`Babel`, generating an object that `toString`s to a data url?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0ZWbDXpawvQMG7BqXnILQwovuDzUiEA0pOTb-jpROHs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>do browsers have a synchronous way to do this? I thought not</blockquote></mx-reply>You replace the <code>ModuleSource</code> global with <code>ModuleSource</code>+<code>Babel</code>, generating an object that <code>toString</code>s to a data url?","m.relates_to":{"m.in_reply_to":{"event_id":"$0ZWbDXpawvQMG7BqXnILQwovuDzUiEA0pOTb-jpROHs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> do browsers have a synchronous way to do this? I thought not\n\nYou replace the `ModuleSource` global with `ModuleSource`+`Babel`, generating an object that `toString`s to a data url?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0ZWbDXpawvQMG7BqXnILQwovuDzUiEA0pOTb-jpROHs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>do browsers have a synchronous way to do this? I thought not</blockquote></mx-reply>You replace the <code>ModuleSource</code> global with <code>ModuleSource</code>+<code>Babel</code>, generating an object that <code>toString</code>s to a data url?","mimetype":"text/html"}]},"ts":1669812689827,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rXxBaUKyTdEvBP5rbIOdsoq99KEYIZ36xTSwvW1v8Gc"},
{"content":{"body":"> <@ljharb:matrix.org> i'd know that the code i'm importing has TLA, of course - but i don't know what *the env* supports\n\nThis still seems more like an infrastructure issue. If you know what the code you're going to send needs, you can feature test the env early, before you send any code across the wire.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aI1HRwgIwdJaVw7Ycwh_mwaGu6yMPBb7u7ZoC4Z-RwQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd know that the code i'm importing has TLA, of course - but i don't know what <em>the env</em> supports</blockquote></mx-reply>This still seems more like an infrastructure issue. If you know what the code you're going to send needs, you can feature test the env early, before you send any code across the wire.","m.relates_to":{"m.in_reply_to":{"event_id":"$aI1HRwgIwdJaVw7Ycwh_mwaGu6yMPBb7u7ZoC4Z-RwQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i'd know that the code i'm importing has TLA, of course - but i don't know what *the env* supports\n\nThis still seems more like an infrastructure issue. If you know what the code you're going to send needs, you can feature test the env early, before you send any code across the wire.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aI1HRwgIwdJaVw7Ycwh_mwaGu6yMPBb7u7ZoC4Z-RwQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd know that the code i'm importing has TLA, of course - but i don't know what <em>the env</em> supports</blockquote></mx-reply>This still seems more like an infrastructure issue. If you know what the code you're going to send needs, you can feature test the env early, before you send any code across the wire.","mimetype":"text/html"}]},"ts":1669812693182,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$P4gWvPP00Ki3Y5UGdm5OSFQaDBogALa20r9lAK8Hw8M"},
{"content":{"body":"rbuckton: exactly. how can i feature-test the env without the ability to make a module from a string?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: exactly. how can i feature-test the env without the ability to make a module from a string?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: exactly. how can i feature-test the env without the ability to make a module from a string?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: exactly. how can i feature-test the env without the ability to make a module from a string?","mimetype":"text/html"}]},"ts":1669812713113,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z-7Up6R1Sue0zBzMErBHscjs6o1z91zzAO7IYJbQXCo"},
{"content":{"body":"`package.json: { \"engines\": { \"node\": \"^19\" } }`?","format":"org.matrix.custom.html","formatted_body":"<code>package.json: { &quot;engines&quot;: { &quot;node&quot;: &quot;^19&quot; } }</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`package.json: { \"engines\": { \"node\": \"^19\" } }`?","mimetype":"text/plain"},{"body":"<code>package.json: { &quot;engines&quot;: { &quot;node&quot;: &quot;^19&quot; } }</code>?","mimetype":"text/html"}]},"ts":1669812743099,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kaz882h4cWYXnUghwcXsffNmeCvxbDcZyLn4WzBvGIU"},
{"content":{"body":"that covers node, but not browsers or node-like things","msgtype":"m.text","org.matrix.msc1767.text":"that covers node, but not browsers or node-like things"},"ts":1669812759252,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-gNR7xk0m1T1uY_teqn8nLatYKp9g2DmLknpJrobrw4"},
{"content":{"body":"That's very specific to a single env","msgtype":"m.text","org.matrix.msc1767.text":"That's very specific to a single env"},"ts":1669812761993,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2TFJQXe7u4Sle4ev2ot1DhcyGrkMxipiAG8hI7uMGew"},
{"content":{"body":"Not even to an env, but to package managers","msgtype":"m.text","org.matrix.msc1767.text":"Not even to an env, but to package managers"},"ts":1669812777831,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FfEhgZ6ZmfU63sX-9_BWW41Z7SpPMYbGMX_cv0s38KY"},
{"content":{"body":"and there could also be a fallback, so i wouldn't need to artificially restrict compat","msgtype":"m.text","org.matrix.msc1767.text":"and there could also be a fallback, so i wouldn't need to artificially restrict compat"},"ts":1669812779506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$01NGFO94GyzIRDZRELRe0U4GrAeRuxr6hGXYzNQG1wc"},
{"content":{"body":"bakkot: \"D denting\" -> \"dedenting\" replacement would be nice","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: &quot;D denting&quot; -&gt; &quot;dedenting&quot; replacement would be nice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: \"D denting\" -> \"dedenting\" replacement would be nice","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: &quot;D denting&quot; -&gt; &quot;dedenting&quot; replacement would be nice","mimetype":"text/html"}]},"ts":1669812792753,"senderName":"linusg","senderId":"@linusgroh:matrix.org","id":"$uxCHY0JW9ChGIyMkxrh5lgbapfIYJZDrR0XCMpJL3yM"},
{"content":{"body":"done","msgtype":"m.text","org.matrix.msc1767.text":"done"},"ts":1669812810790,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WPGuG0Y8f1Ja0HiokMlD-Rn9MS6cvwXzY_-5Ac8-_oQ"},
{"content":{"body":"True, but you're not just sending code to a random environment. I assume there's *some* setup/handshake between you and the remote. That's when I'd perform feature testing or inform the client what the remote supports. ","format":"org.matrix.custom.html","formatted_body":"True, but you're not just sending code to a random environment. I assume there's <em>some</em> setup/handshake between you and the remote. That's when I'd perform feature testing or inform the client what the remote supports.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"True, but you're not just sending code to a random environment. I assume there's *some* setup/handshake between you and the remote. That's when I'd perform feature testing or inform the client what the remote supports. ","mimetype":"text/plain"},{"body":"True, but you're not just sending code to a random environment. I assume there's <em>some</em> setup/handshake between you and the remote. That's when I'd perform feature testing or inform the client what the remote supports.","mimetype":"text/html"}]},"ts":1669812843389,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K4-VlUEr8BSW8lwzvz0z1siMg5QVvMGvJGcfl8tMECM"},
{"content":{"body":"And even if there isn't, if you have ensured the minimum level of support for sending a module over the wire, you can send one that performs the necessary feature tests in advance (i.e., send a `module { some new syntax }` over the wire during handshake and see if that fails)","format":"org.matrix.custom.html","formatted_body":"And even if there isn't, if you have ensured the minimum level of support for sending a module over the wire, you can send one that performs the necessary feature tests in advance (i.e., send a <code>module { some new syntax }</code> over the wire during handshake and see if that fails)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And even if there isn't, if you have ensured the minimum level of support for sending a module over the wire, you can send one that performs the necessary feature tests in advance (i.e., send a `module { some new syntax }` over the wire during handshake and see if that fails)","mimetype":"text/plain"},{"body":"And even if there isn't, if you have ensured the minimum level of support for sending a module over the wire, you can send one that performs the necessary feature tests in advance (i.e., send a <code>module { some new syntax }</code> over the wire during handshake and see if that fails)","mimetype":"text/html"}]},"ts":1669812929504,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uP_-yDdQ0-EVQFdfW8Ta2iKjdiTuRgDk-HgCKnM5d1A"},
{"content":{"body":"I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves.","m.relates_to":{"event_id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I","is_falling_back":true,"m.in_reply_to":{"event_id":"$_wc_f1Lfof8vF0BH90-UDxo1DSkNdwEdd7nVOltrLjQ"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves."},"ts":1669812956514,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y4AC2OceNIkwWGlog1hq9zG6NrAdh2sBj4KLqfwLH9Q"},
{"content":{"body":"> <@mhofman:matrix.org> I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves.\n\nThis came up in a discussion over the complexity of introducing a value type with unique `===` semantics. The question would be whether implementers would find the necessary changes to handle runtime comparisons would be a less complex alternative.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Y4AC2OceNIkwWGlog1hq9zG6NrAdh2sBj4KLqfwLH9Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves.</blockquote></mx-reply>This came up in a discussion over the complexity of introducing a value type with unique <code>===</code> semantics. The question would be whether implementers would find the necessary changes to handle runtime comparisons would be a less complex alternative.","m.relates_to":{"event_id":"$LlrDwGhGL3zfkGyi3gtWuYTTlt1BswC_3QF__pyeD6I","m.in_reply_to":{"event_id":"$Y4AC2OceNIkwWGlog1hq9zG6NrAdh2sBj4KLqfwLH9Q"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@mhofman:matrix.org> I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves.\n\nThis came up in a discussion over the complexity of introducing a value type with unique `===` semantics. The question would be whether implementers would find the necessary changes to handle runtime comparisons would be a less complex alternative.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Y4AC2OceNIkwWGlog1hq9zG6NrAdh2sBj4KLqfwLH9Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I assumed implementations would care as it would allow user code to execute in the middle of internal Map/Set implementations. This is also a problem for the Map user if the equality somehow further delegates to the objects themselves.</blockquote></mx-reply>This came up in a discussion over the complexity of introducing a value type with unique <code>===</code> semantics. The question would be whether implementers would find the necessary changes to handle runtime comparisons would be a less complex alternative.","mimetype":"text/html"}]},"ts":1669813109060,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZdiDTFlj9JS69UfAMyz50yQcZc1G49YKaU9oKNnPqcE"},
{"content":{"body":"I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere.","msgtype":"m.text","org.matrix.msc1767.text":"I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere."},"ts":1669813183813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xExNjKNMG5erlOTJv5YfmeMBAkFIxtu5_w9OFx69ZYs"},
{"content":{"body":"yes i agree, but i'm saying that you can not perform that feature testing in the first place without this capability","msgtype":"m.text","org.matrix.msc1767.text":"yes i agree, but i'm saying that you can not perform that feature testing in the first place without this capability"},"ts":1669813191597,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$42zorkkkmWLZYZoQyVxza22NJngtoVvkbcbAECAK0uE"},
{"content":{"body":" * I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere.","m.new_content":{"body":"I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere.","msgtype":"m.text","org.matrix.msc1767.text":"I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere."},"m.relates_to":{"event_id":"$xExNjKNMG5erlOTJv5YfmeMBAkFIxtu5_w9OFx69ZYs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I agree it would add complexity, and the justification for that added complexity would be to avoid worse complexity elsewhere."},"ts":1669813193508,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bz08c1XklZSZUx4idpc8W6Ca-KCA1_tWVm3aubB2Wvs"},
{"content":{"body":"at any time","msgtype":"m.text","org.matrix.msc1767.text":"at any time"},"ts":1669813195269,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eH3MY5Q1wdywEx8BpcqXs_lf-XUAAEgbPdr1r_uPuf4"},
{"content":{"body":"(@bakkot Regarding new paths to eval, to restate @littledan from the queue, `eval('module {}')` is equivalent but worse, because injection.)","format":"org.matrix.custom.html","formatted_body":"(@bakkot Regarding new paths to eval, to restate @littledan from the queue, <code>eval('module {}')</code> is equivalent but worse, because injection.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(@bakkot Regarding new paths to eval, to restate @littledan from the queue, `eval('module {}')` is equivalent but worse, because injection.)","mimetype":"text/plain"},{"body":"(@bakkot Regarding new paths to eval, to restate @littledan from the queue, <code>eval('module {}')</code> is equivalent but worse, because injection.)","mimetype":"text/html"}]},"ts":1669813200947,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8mkW908mLz-r9QIpDG0OR8aYPjZBW_hl9z7K7U2Ph48"},
{"content":{"body":"Kris Kowal right but people know not to use eval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> right but people know not to use eval","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal right but people know not to use eval","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> right but people know not to use eval","mimetype":"text/html"}]},"ts":1669813245667,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wotDgwcygGX0YqsMqVe-2dvNru1zE2dDDh72Ufz08wg"},
{"content":{"body":"we shouldn't be encouraging them to do equivalent things","msgtype":"m.text","org.matrix.msc1767.text":"we shouldn't be encouraging them to do equivalent things"},"ts":1669813250781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pdozG2YLQQY11OFwWyyWFCtq7GaYwz2nQxiVT3It5cE"},
{"content":{"body":"> <@ljharb:matrix.org> yes i agree, but i'm saying that you can not perform that feature testing in the first place without this capability\n\nIf you have `module {}`, then you can. You don't *need* `ModuleSource(text)` or source-text access to define those feature tests. To be clear, I'm not opposed to `ModuleSource(text)`, I just don't find this to be a compelling example.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42zorkkkmWLZYZoQyVxza22NJngtoVvkbcbAECAK0uE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes i agree, but i&#39;m saying that you can not perform that feature testing in the first place without this capability</blockquote></mx-reply>If you have <code>module {}</code>, then you can. You don't <em>need</em> <code>ModuleSource(text)</code> or source-text access to define those feature tests. To be clear, I'm not opposed to <code>ModuleSource(text)</code>, I just don't find this to be a compelling example.","m.relates_to":{"m.in_reply_to":{"event_id":"$42zorkkkmWLZYZoQyVxza22NJngtoVvkbcbAECAK0uE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> yes i agree, but i'm saying that you can not perform that feature testing in the first place without this capability\n\nIf you have `module {}`, then you can. You don't *need* `ModuleSource(text)` or source-text access to define those feature tests. To be clear, I'm not opposed to `ModuleSource(text)`, I just don't find this to be a compelling example.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$42zorkkkmWLZYZoQyVxza22NJngtoVvkbcbAECAK0uE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>yes i agree, but i&#39;m saying that you can not perform that feature testing in the first place without this capability</blockquote></mx-reply>If you have <code>module {}</code>, then you can. You don't <em>need</em> <code>ModuleSource(text)</code> or source-text access to define those feature tests. To be clear, I'm not opposed to <code>ModuleSource(text)</code>, I just don't find this to be a compelling example.","mimetype":"text/html"}]},"ts":1669813357268,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xU7oYSzEnHbIL82znKlFIGsSBPHIUmkwclzt1NKpDlU"},
{"content":{"body":"In fact, in a discussion with my team it was asked why JS should even have `module {}` if it could just have \n```\njavascript` /*module body*/ `\n```\nThough I fully see the CSP concerns as being a major reason for a syntactic alternative.","format":"org.matrix.custom.html","formatted_body":"<p>In fact, in a discussion with my team it was asked why JS should even have <code>module {}</code> if it could just have</p>\n<pre><code>javascript` /*module body*/ `\n</code></pre>\n<p>Though I fully see the CSP concerns as being a major reason for a syntactic alternative.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In fact, in a discussion with my team it was asked why JS should even have `module {}` if it could just have \n```\njavascript` /*module body*/ `\n```\nThough I fully see the CSP concerns as being a major reason for a syntactic alternative.","mimetype":"text/plain"},{"body":"<p>In fact, in a discussion with my team it was asked why JS should even have <code>module {}</code> if it could just have</p>\n<pre><code>javascript` /*module body*/ `\n</code></pre>\n<p>Though I fully see the CSP concerns as being a major reason for a syntactic alternative.</p>\n","mimetype":"text/html"}]},"ts":1669813459550,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$is0l2tH9Y8rmHVgzPRH1HI5sN2doe5_B0uUQyHvWGAQ"},
{"content":{"body":"> <@bakkot:matrix.org> we shouldn't be encouraging them to do equivalent things\n\nMy point is not that we should encourage such things, but that we cannot prevent them by eliding ModuleSource from the language. We _can_ prevent ModuleSource from being useful in places where it shouldn’t be useful using CSP, but having ModuleSource is necessary to parse-and-not-execute safely and accurately.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pdozG2YLQQY11OFwWyyWFCtq7GaYwz2nQxiVT3It5cE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>we shouldn&#39;t be encouraging them to do equivalent things</blockquote></mx-reply>My point is not that we should encourage such things, but that we cannot prevent them by eliding ModuleSource from the language. We <em>can</em> prevent ModuleSource from being useful in places where it shouldn’t be useful using CSP, but having ModuleSource is necessary to parse-and-not-execute safely and accurately.","m.relates_to":{"m.in_reply_to":{"event_id":"$pdozG2YLQQY11OFwWyyWFCtq7GaYwz2nQxiVT3It5cE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> we shouldn't be encouraging them to do equivalent things\n\nMy point is not that we should encourage such things, but that we cannot prevent them by eliding ModuleSource from the language. We _can_ prevent ModuleSource from being useful in places where it shouldn’t be useful using CSP, but having ModuleSource is necessary to parse-and-not-execute safely and accurately.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pdozG2YLQQY11OFwWyyWFCtq7GaYwz2nQxiVT3It5cE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>we shouldn&#39;t be encouraging them to do equivalent things</blockquote></mx-reply>My point is not that we should encourage such things, but that we cannot prevent them by eliding ModuleSource from the language. We <em>can</em> prevent ModuleSource from being useful in places where it shouldn’t be useful using CSP, but having ModuleSource is necessary to parse-and-not-execute safely and accurately.","mimetype":"text/html"}]},"ts":1669813695507,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PeWedwiBIssYVREIeUAcuGvL5pdWZySAYBqaTvz6G34"},
{"content":{"body":"hm, could you do isSubsetOf with a `WeakSet` that has a `size` own data property set to `Infinity`?","format":"org.matrix.custom.html","formatted_body":"hm, could you do isSubsetOf with a <code>WeakSet</code> that has a <code>size</code> own data property set to <code>Infinity</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"hm, could you do isSubsetOf with a `WeakSet` that has a `size` own data property set to `Infinity`?","mimetype":"text/plain"},{"body":"hm, could you do isSubsetOf with a <code>WeakSet</code> that has a <code>size</code> own data property set to <code>Infinity</code>?","mimetype":"text/html"}]},"ts":1669814060022,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$obRskuKm0OElCUhUoHmwLCzzxc4pxeX2gqndzwfu7dE"},
{"content":{"body":"Regarding the feature detection, I fail to see how this is a problem specific to the modules proposals, or that the module proposals should solve. This is a broader ecosystem issue. Every new syntax we add has the same problem, and it's impossible to for a publisher to feature test what syntax the target environment might support. This is the case for servers sending modules to web clients, but also for library authors not knowing anything about the environment of the consumers.\n\nIMO, this is not something the language can solve, but that needs some kind of holistic approach. One thing I've been pondering is whether authors could somehow document which syntax features their code is using, and have better ways to know which syntax is supported by target environments, so that tooling (servers, transpilers, etc.) could do impedance matching.","msgtype":"m.text","org.matrix.msc1767.text":"Regarding the feature detection, I fail to see how this is a problem specific to the modules proposals, or that the module proposals should solve. This is a broader ecosystem issue. Every new syntax we add has the same problem, and it's impossible to for a publisher to feature test what syntax the target environment might support. This is the case for servers sending modules to web clients, but also for library authors not knowing anything about the environment of the consumers.\n\nIMO, this is not something the language can solve, but that needs some kind of holistic approach. One thing I've been pondering is whether authors could somehow document which syntax features their code is using, and have better ways to know which syntax is supported by target environments, so that tooling (servers, transpilers, etc.) could do impedance matching."},"ts":1669814814928,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ"},
{"content":{"body":"We resume 14:40 (11mins time)","msgtype":"m.text","org.matrix.msc1767.text":"We resume 14:40 (11mins time)"},"ts":1669814905104,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1e9XzsMk-z7JuMJxSH3lPyFhZrdF1aPPzGQqDoDwHFQ"},
{"content":{"body":"Hopefully back in 10 min, dogs need a walk.","msgtype":"m.text","org.matrix.msc1767.text":"Hopefully back in 10 min, dogs need a walk."},"ts":1669814923316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hUzBXgs-VhJu1_b1lg-u_bmni9nzNiR5idNIARkjojY"},
{"content":{"body":"🎉 So excited this got stage 3. Lovely proposal","msgtype":"m.text","org.matrix.msc1767.text":"🎉 So excited this got stage 3. Lovely proposal"},"ts":1669814933080,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$oOLpgWoTt_S3mKJ89dK9VLCJbH3McM89Npc7QISeME4"},
{"content":{"body":"the difference is that modules, like functions, are first-class values that have stored code that can be executed","m.relates_to":{"event_id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"the difference is that modules, like functions, are first-class values that have stored code that can be executed"},"ts":1669815028659,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wv8dGsnkR5uOxE9yLxvA1eHuf9IEaU109aoYvglyvtE"},
{"content":{"body":"Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/html"}]},"ts":1669815080956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LghaGH-Fxp2OSFKttyQoAvX4ugN6jLyNe9Yje0shUbU"},
{"content":{"body":" * Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","m.new_content":{"body":"Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$LghaGH-Fxp2OSFKttyQoAvX4ugN6jLyNe9Yje0shUbU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Rob Palmer:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>:  If possible, I'd love to come back to String.dedent later in the meeting.","mimetype":"text/html"}]},"ts":1669815094237,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QMxhT8U77D6gFl-iermhFuM96HCdWorXEC_zUDnhFn0"},
{"content":{"body":"Justin Ridgewell: any reason why the caching issue can't be worked out on the issue tracker or in an incubator call? does it still need the whole committee's attention?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: any reason why the caching issue can't be worked out on the issue tracker or in an incubator call? does it still need the whole committee's attention?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: any reason why the caching issue can't be worked out on the issue tracker or in an incubator call? does it still need the whole committee's attention?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: any reason why the caching issue can't be worked out on the issue tracker or in an incubator call? does it still need the whole committee's attention?","mimetype":"text/html"}]},"ts":1669815290912,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5Sv4mYPcMch9wcAHZCkQnWUdF--43PrCQCKgjA17CZQ"},
{"content":{"body":"Because I'd like to get Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"Because I'd like to get Stage 3"},"ts":1669815329971,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$t6drlm5fFUQGiq6ihwe8iM8gYp1OrEJNoXiMaVfL3aw"},
{"content":{"body":"oh, has the naming issue been worked out already?","msgtype":"m.text","org.matrix.msc1767.text":"oh, has the naming issue been worked out already?"},"ts":1669815344020,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$i56OwJwDEn5BlDx0ieK5nyEUximFqbUyZaA0gv6IgxI"},
{"content":{"body":"If we can agree on the caching behavior in issue tracker, I'd like to finalize it and ask for advancement.","msgtype":"m.text","org.matrix.msc1767.text":"If we can agree on the caching behavior in issue tracker, I'd like to finalize it and ask for advancement."},"ts":1669815363639,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$gfn5yxKbPPPL7QLLXWzczchnM1c4zUcQWrRO-Tt3IH4"},
{"content":{"body":"Naming issue?","msgtype":"m.text","org.matrix.msc1767.text":"Naming issue?"},"ts":1669815368904,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jZjN40qCRCBGLxh65tdtn6vPd-_6MdBSNRswAq_9dRE"},
{"content":{"body":"> hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","mimetype":"text/plain"},{"body":"<blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","mimetype":"text/html"}]},"ts":1669815419403,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PCAYM-jC8fMKS0yisJ1xig_num1poK1z2ZnStfNUCPE"},
{"content":{"body":" * > hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","m.new_content":{"body":"> hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","mimetype":"text/plain"},{"body":"<blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$PCAYM-jC8fMKS0yisJ1xig_num1poK1z2ZnStfNUCPE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * > hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?\n\nyes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: `let fakeSet = arr => ({ size: arr.length, keys: () => arr.values(), has: () => { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))`","mimetype":"text/plain"},{"body":" * <blockquote>\n<p>hm, could you do isSubsetOf with a WeakSet that has a size own data property set to Infinity?</p>\n</blockquote>\n<p>yes, and more generally you can make fake wrappers which will let you pretend to be a set for a lot of cases. like, to union with array: <code>let fakeSet = arr =&gt; ({ size: arr.length, keys: () =&gt; arr.values(), has: () =&gt; { throw 'not reached' } }); let result = foo.union(fakeSet([0, 1, 2]))</code></p>\n","mimetype":"text/html"}]},"ts":1669815453547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JM6A0JTdqsjkUQo4jDXC8DnSnEX5dFPqixiNE0Ooizg"},
{"content":{"body":"Justin Ridgewell: oops, I was mixing dedent and groupBy together, sorry","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: oops, I was mixing dedent and groupBy together, sorry","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: oops, I was mixing dedent and groupBy together, sorry","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: oops, I was mixing dedent and groupBy together, sorry","mimetype":"text/html"}]},"ts":1669815492690,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lb4VOmasVOLPRd4HbspTKuYBpfUdWXUxx7pYOB3dKZU"},
{"content":{"body":"wow it's amazing how dumb I am when tired","msgtype":"m.text","org.matrix.msc1767.text":"wow it's amazing how dumb I am when tired"},"ts":1669815519815,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$FEV5aorAl9zNBFyd0EaRcRONmt2p1lV_0-6Cez3mnOo"},
{"content":{"body":"can't wait to give the iterator helpers presentation on day 3 right after waking up :-)","msgtype":"m.text","org.matrix.msc1767.text":"can't wait to give the iterator helpers presentation on day 3 right after waking up :-)"},"ts":1669815540227,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$m4EOQWsLtja_ER-ztoBoPN2IS0QVo4rmfl9VrwU-fbY"},
{"content":{"body":"Lol, my ability to explain talk during the presentation isn't great either. Too sleepy","msgtype":"m.text","org.matrix.msc1767.text":"Lol, my ability to explain talk during the presentation isn't great either. Too sleepy"},"ts":1669815568471,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WUfV4zv0Dk52MRyGL2_Yfp-2KOMxuXRqFBGO40dcke8"},
{"content":{"body":"i'm no longer sleepy","msgtype":"m.text","org.matrix.msc1767.text":"i'm no longer sleepy"},"ts":1669815605097,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ns7RZL9l-5VPRPdO5y536qcmAIbHJ3bGttRi0IQT9qU"},
{"content":{"body":"i'm at the my head feels detached state","msgtype":"m.text","org.matrix.msc1767.text":"i'm at the my head feels detached state"},"ts":1669815614761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-FnJfXSeSXEwKWgIslRxNd4C_2oRCPthZVxYmVdiDzM"},
{"content":{"body":"same + toddler woke up, ready for another energy-filled day","msgtype":"m.text","org.matrix.msc1767.text":"same + toddler woke up, ready for another energy-filled day"},"ts":1669815680277,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zHfl28N24E15XEXae2h9kArc6icHIhv1673uuqme7iY"},
{"content":{"body":"that was fast :-)","msgtype":"m.text","org.matrix.msc1767.text":"that was fast :-)"},"ts":1669815889312,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$eOXjTr_K_8LFHjUrJwDes5mHhvFKJlhQIGtQAS-0g4A"},
{"content":{"body":"not as fast as the inner loop of an optimized IsWellFormed optimization","msgtype":"m.text","org.matrix.msc1767.text":"not as fast as the inner loop of an optimized IsWellFormed optimization"},"ts":1669816445904,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$10DmWZHWrm267S92yohpi3Sw4MWnq0suc-5GQCjJWcg"},
{"content":{"body":"shu: you better hope so","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: you better hope so","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: you better hope so","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: you better hope so","mimetype":"text/html"}]},"ts":1669816497461,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hRKeZ4uTfPajAyOwFQnFtC_ge5BpWqtWKANLZ7LX-Pw"},
{"content":{"body":"I want constant time, make it happen","msgtype":"m.text","org.matrix.msc1767.text":"I want constant time, make it happen"},"ts":1669816519727,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4wo0Jj43GNuQ19tX5ilt4LODKxXCkMKFK84_sIwJaf8"},
{"content":{"body":"I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.","format":"org.matrix.custom.html","formatted_body":"I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.","mimetype":"text/plain"},{"body":"I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.","mimetype":"text/html"}]},"ts":1669816531767,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA"},
{"content":{"body":"> <@michaelficarra:matrix.org> I want constant time, make it happen\n\nsee TDZ... #define JSCHAR_IS_JUST_CHAR IsWellFormed=>return true;","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4wo0Jj43GNuQ19tX5ilt4LODKxXCkMKFK84_sIwJaf8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I want constant time, make it happen</blockquote></mx-reply>see TDZ... #define JSCHAR_IS_JUST_CHAR IsWellFormed=&gt;return true;","m.relates_to":{"m.in_reply_to":{"event_id":"$4wo0Jj43GNuQ19tX5ilt4LODKxXCkMKFK84_sIwJaf8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> I want constant time, make it happen\n\nsee TDZ... #define JSCHAR_IS_JUST_CHAR IsWellFormed=>return true;","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4wo0Jj43GNuQ19tX5ilt4LODKxXCkMKFK84_sIwJaf8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I want constant time, make it happen</blockquote></mx-reply>see TDZ... #define JSCHAR_IS_JUST_CHAR IsWellFormed=&gt;return true;","mimetype":"text/html"}]},"ts":1669816565594,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$hwq1lhFXn1-zqqCmuQI0jCNnWoq8htnxQUGP4kSpvsM"},
{"content":{"body":"apaprocki: not a joke, we should be able to make it constant time (amortized)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@apaprocki:matrix.org\">apaprocki</a>: not a joke, we should be able to make it constant time (amortized)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"apaprocki: not a joke, we should be able to make it constant time (amortized)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@apaprocki:matrix.org\">apaprocki</a>: not a joke, we should be able to make it constant time (amortized)","mimetype":"text/html"}]},"ts":1669816596244,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UzCZkD5ALyHgT3NF66y0F30ghKSCAy6sMVOaPiMi_Hs"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nPerhaps it's confusing because it is still using the import keyword","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>Perhaps it's confusing because it is still using the import keyword","m.relates_to":{"m.in_reply_to":{"event_id":"$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nPerhaps it's confusing because it is still using the import keyword","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>Perhaps it's confusing because it is still using the import keyword","mimetype":"text/html"}]},"ts":1669816601282,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$n2jWfnQCLz_vb4BL-J70mPqUC8UR1SWCUCegnHTkJJk"},
{"content":{"body":"FWIW, TS also used a similar syntax for _type imports_ :`import type {...}`","format":"org.matrix.custom.html","formatted_body":"FWIW, TS also used a similar syntax for <em>type imports</em> :<code>import type {...}</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"FWIW, TS also used a similar syntax for _type imports_ :`import type {...}`","mimetype":"text/plain"},{"body":"FWIW, TS also used a similar syntax for <em>type imports</em> :<code>import type {...}</code>","mimetype":"text/html"}]},"ts":1669816601441,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$N9lx4_oVa5mIoaMLSVkybrWxE9FwKRFPyOv2TZEdrPw"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nthat's the same complaint i have about `reflect: 'module'`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>that's the same complaint i have about <code>reflect: 'module'</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nthat's the same complaint i have about `reflect: 'module'`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>that's the same complaint i have about <code>reflect: 'module'</code>","mimetype":"text/html"}]},"ts":1669816603129,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r5aMEiKqZNzo8Sy1Q8TallKjdLR_98Eotv4DVGMWUg0"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nI am encouraging a return to the consideration of `import moduleSource from './example' with { reflect: true }` to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>I am encouraging a return to the consideration of <code>import moduleSource from './example' with { reflect: true }</code> to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.","m.relates_to":{"m.in_reply_to":{"event_id":"$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> I'm finding the fact `module` importing a `ModuleSource` and not a `Module` slightly confusing from the perspective that the keyword isn't quite aligned to the type.\n\nI am encouraging a return to the consideration of `import moduleSource from './example' with { reflect: true }` to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$est1H7R5B4LOnvImoFpFC5jaHymO77HrKMyLh_B3OvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm finding the fact <code>module</code> importing a <code>ModuleSource</code> and not a <code>Module</code> slightly confusing from the perspective that the keyword isn't quite aligned to the type.</blockquote></mx-reply>I am encouraging a return to the consideration of <code>import moduleSource from './example' with { reflect: true }</code> to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.","mimetype":"text/html"}]},"ts":1669816650057,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$UyeRS10NwXzfxwCWePe77IkIGCHzRDWaY5tgai66TPg"},
{"content":{"body":"exactly, this is already a problem for `Function` and `eval`, so why would `Module` be subject to different requirements","format":"org.matrix.custom.html","formatted_body":"exactly, this is already a problem for <code>Function</code> and <code>eval</code>, so why would <code>Module</code> be subject to different requirements","m.relates_to":{"event_id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$Wv8dGsnkR5uOxE9yLxvA1eHuf9IEaU109aoYvglyvtE"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"exactly, this is already a problem for `Function` and `eval`, so why would `Module` be subject to different requirements","mimetype":"text/plain"},{"body":"exactly, this is already a problem for <code>Function</code> and <code>eval</code>, so why would <code>Module</code> be subject to different requirements","mimetype":"text/html"}]},"ts":1669816673891,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7eas0DB1eWLWhGlpJdCQWlZlFb925BBbDv-m32PNxVE"},
{"content":{"body":"that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","format":"org.matrix.custom.html","formatted_body":"that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/plain"},{"body":"that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/html"}]},"ts":1669816684693,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qmA3FYkec94Ol4kRCPOQTpFPKe0TL6JYuhyVS48Jkt0"},
{"content":{"body":" * that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","format":"org.matrix.custom.html","formatted_body":" * that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","m.new_content":{"body":"that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","format":"org.matrix.custom.html","formatted_body":"that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/plain"},{"body":"that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$qmA3FYkec94Ol4kRCPOQTpFPKe0TL6JYuhyVS48Jkt0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * that seems like it would allow `with` to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/plain"},{"body":" * that seems like it would allow <code>with</code> to be expanded in unforseeable ways in the future, which sounds like a downside to me","mimetype":"text/html"}]},"ts":1669816691039,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R_WJrmnqBNCXS5JpmTHbEreIAaV2_HM_LxjByh7IssE"},
{"content":{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","format":"org.matrix.custom.html","formatted_body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/plain"},{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/html"}],"m.relates_to":{"event_id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$7eas0DB1eWLWhGlpJdCQWlZlFb925BBbDv-m32PNxVE"},"rel_type":"m.thread"}},"ts":1669816711370,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ETJXxKs9AP1HhvaIBH5o0PvLQQrtKRQovTZDQXmaLWo"},
{"content":{"body":" * i agree it should have the same requirements as Function - which includes that it takes a string of source code","format":"org.matrix.custom.html","formatted_body":" * i agree it should have the same requirements as Function - which includes that it takes a string of source code","m.new_content":{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","format":"org.matrix.custom.html","formatted_body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/plain"},{"body":"i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ETJXxKs9AP1HhvaIBH5o0PvLQQrtKRQovTZDQXmaLWo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/plain"},{"body":" * i agree it should have the same requirements as Function - which includes that it takes a string of source code","mimetype":"text/html"}]},"ts":1669816716588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IwB3TLSJxG9B1BY36nhTB64jF4YSxn3lMc7DGSe9c2U"},
{"content":{"body":"> <@kriskowal:matrix.org> I am encouraging a return to the consideration of `import moduleSource from './example' with { reflect: true }` to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.\n\nIt's more that it seems like renaming `ModuleSource->Module` and `Module->somethingelse` would be clearer. Especially since the `ModuleSource` equivalent in WASM is `WebAssembly.Module`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UyeRS10NwXzfxwCWePe77IkIGCHzRDWaY5tgai66TPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I am encouraging a return to the consideration of <code>import moduleSource from './example' with { reflect: true }</code> to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.</blockquote></mx-reply>It's more that it seems like renaming <code>ModuleSource-&gt;Module</code> and <code>Module-&gt;somethingelse</code> would be clearer. Especially since the <code>ModuleSource</code> equivalent in WASM is <code>WebAssembly.Module</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$UyeRS10NwXzfxwCWePe77IkIGCHzRDWaY5tgai66TPg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I am encouraging a return to the consideration of `import moduleSource from './example' with { reflect: true }` to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.\n\nIt's more that it seems like renaming `ModuleSource->Module` and `Module->somethingelse` would be clearer. Especially since the `ModuleSource` equivalent in WASM is `WebAssembly.Module`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UyeRS10NwXzfxwCWePe77IkIGCHzRDWaY5tgai66TPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I am encouraging a return to the consideration of <code>import moduleSource from './example' with { reflect: true }</code> to mirror the proposed dynamic import. This is consistent with a need to confine dynamic import and washes back from that.</blockquote></mx-reply>It's more that it seems like renaming <code>ModuleSource-&gt;Module</code> and <code>Module-&gt;somethingelse</code> would be clearer. Especially since the <code>ModuleSource</code> equivalent in WASM is <code>WebAssembly.Module</code>.","mimetype":"text/html"}]},"ts":1669816717519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tE9UXnTctzeAa2DGYH9uZ3U7_qO_hLXfAWcIDSahyCI"},
{"content":{"body":"I’d previously encouraged `import module` to mirror `import.module` for static vs dynamic variants, but I have retracted that.","format":"org.matrix.custom.html","formatted_body":"I’d previously encouraged <code>import module</code> to mirror <code>import.module</code> for static vs dynamic variants, but I have retracted that.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I’d previously encouraged `import module` to mirror `import.module` for static vs dynamic variants, but I have retracted that.","mimetype":"text/plain"},{"body":"I’d previously encouraged <code>import module</code> to mirror <code>import.module</code> for static vs dynamic variants, but I have retracted that.","mimetype":"text/html"}]},"ts":1669816720271,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$D7BaiDOZEDMZZlXZAJYvlyFz855_no6jHq7vnbnioMY"},
{"content":{"body":"I’d be excited to entertain ideas for somethingelse.","msgtype":"m.text","org.matrix.msc1767.text":"I’d be excited to entertain ideas for somethingelse."},"ts":1669816749277,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RPHp72zYhFMS64twlM3aIjNBDY9iRREWmV3PH_hMMAw"},
{"content":{"body":"I have none.","msgtype":"m.text","org.matrix.msc1767.text":"I have none."},"ts":1669816760331,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tdQBLCNELPDA9o-Hi6AIp2k44UD5zIpBuVXbElBWqzY"},
{"content":{"body":"I thought we had settled that a level of indirection through ModuleSource was not a meaningful difference.","m.relates_to":{"event_id":"$clIH-grjj-fdcPjZ6jTiq1gfy9_QbocdKgNVj6LlPaQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$ETJXxKs9AP1HhvaIBH5o0PvLQQrtKRQovTZDQXmaLWo"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"I thought we had settled that a level of indirection through ModuleSource was not a meaningful difference."},"ts":1669816770324,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KgTo2rBCs1ztSLRALZ0hl3I9tFlyBdmBzpqwdZcZyEg"},
{"content":{"body":"it is surprising to me that `import module` does not actually evaluate the module, so I am also supportive of `import moduleSource` or something","format":"org.matrix.custom.html","formatted_body":"it is surprising to me that <code>import module</code> does not actually evaluate the module, so I am also supportive of <code>import moduleSource</code> or something","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it is surprising to me that `import module` does not actually evaluate the module, so I am also supportive of `import moduleSource` or something","mimetype":"text/plain"},{"body":"it is surprising to me that <code>import module</code> does not actually evaluate the module, so I am also supportive of <code>import moduleSource</code> or something","mimetype":"text/html"}]},"ts":1669816774956,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v8sHQ1Yv89p51_yw7c9ozN1wz-od4SDp__Fm23qX5pQ"},
{"content":{"body":"Though, it’s a constrained problem… `module {} instanceof Module` makes much sense.","format":"org.matrix.custom.html","formatted_body":"Though, it’s a constrained problem… <code>module {} instanceof Module</code> makes much sense.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though, it’s a constrained problem… `module {} instanceof Module` makes much sense.","mimetype":"text/plain"},{"body":"Though, it’s a constrained problem… <code>module {} instanceof Module</code> makes much sense.","mimetype":"text/html"}]},"ts":1669816788605,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$sSbsbOyM_IFhxxpfaLfLllQCQfGozPSsQ8Lt6JKwZ2Q"},
{"content":{"body":"like I think of the regular `import` statement as importing a module","format":"org.matrix.custom.html","formatted_body":"like I think of the regular <code>import</code> statement as importing a module","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"like I think of the regular `import` statement as importing a module","mimetype":"text/plain"},{"body":"like I think of the regular <code>import</code> statement as importing a module","mimetype":"text/html"}]},"ts":1669816798834,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$noQM55owWhMzDhun0XR1KwUMRhdb288kQ8K0PATzMkA"},
{"content":{"body":"my preference would be something like `with`","format":"org.matrix.custom.html","formatted_body":"my preference would be something like <code>with</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"my preference would be something like `with`","mimetype":"text/plain"},{"body":"my preference would be something like <code>with</code>","mimetype":"text/html"}]},"ts":1669816804414,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6W8TJGkW7vV766xCnpF5cIs-4A61k8cM1JPBeImbJtM"},
{"content":{"body":"so \"import module\" is confusing","msgtype":"m.text","org.matrix.msc1767.text":"so \"import module\" is confusing"},"ts":1669816805646,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UvyOk9qsCUmwxzXgvFSVqHW3uidC6G40EUmfQ6nrn8Q"},
{"content":{"body":"I agree.","msgtype":"m.text","org.matrix.msc1767.text":"I agree."},"ts":1669816817149,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LYKcrJk0SMPdKK-P4EHp7xtLPFwZBWvct82WW4vNhk8"},
{"content":{"body":"And suggest that `import moduleSource from 'example' with { reflect: true }` should address that concern.","format":"org.matrix.custom.html","formatted_body":"And suggest that <code>import moduleSource from 'example' with { reflect: true }</code> should address that concern.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And suggest that `import moduleSource from 'example' with { reflect: true }` should address that concern.","mimetype":"text/plain"},{"body":"And suggest that <code>import moduleSource from 'example' with { reflect: true }</code> should address that concern.","mimetype":"text/html"}]},"ts":1669816836595,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rMgUtheLMc6JacWZ0-d5zFgWWiVIKmZ9Vv3txdK4wlU"},
{"content":{"body":"> <@bakkot:matrix.org> like I think of the regular `import` statement as importing a module\n\nThat’s very reasonable, though it doesn’t provide any reflection of that module.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$noQM55owWhMzDhun0XR1KwUMRhdb288kQ8K0PATzMkA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like I think of the regular <code>import</code> statement as importing a module</blockquote></mx-reply>That’s very reasonable, though it doesn’t provide any reflection of that module.","m.relates_to":{"m.in_reply_to":{"event_id":"$noQM55owWhMzDhun0XR1KwUMRhdb288kQ8K0PATzMkA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> like I think of the regular `import` statement as importing a module\n\nThat’s very reasonable, though it doesn’t provide any reflection of that module.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$noQM55owWhMzDhun0XR1KwUMRhdb288kQ8K0PATzMkA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like I think of the regular <code>import</code> statement as importing a module</blockquote></mx-reply>That’s very reasonable, though it doesn’t provide any reflection of that module.","mimetype":"text/html"}]},"ts":1669816879016,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QhaJ8TGFdLi2QN4eD2v4qM7TpW_jy8LOUKuH1ceQPdU"},
{"content":{"body":"I tend to also agree, because there is a certain overlap in naming; `import` is about _importing_ modules...","format":"org.matrix.custom.html","formatted_body":"I tend to also agree, because there is a certain overlap in naming; <code>import</code> is about <em>importing</em> modules...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I tend to also agree, because there is a certain overlap in naming; `import` is about _importing_ modules...","mimetype":"text/plain"},{"body":"I tend to also agree, because there is a certain overlap in naming; <code>import</code> is about <em>importing</em> modules...","mimetype":"text/html"}]},"ts":1669816884503,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$FkSCz_vplzGdUHKRyB1C4i32bYHdGRKyFsYA-NlfQ4Y"},
{"content":{"body":"I feel like that also works well with dynamic import","msgtype":"m.text","org.matrix.msc1767.text":"I feel like that also works well with dynamic import"},"ts":1669816888307,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PiKOK30-qCwcZw7PP9si3raiMITjer55qrbo6qe7Vmo"},
{"content":{"body":"> <@kriskowal:matrix.org> That’s very reasonable, though it doesn’t provide any reflection of that module.\n\nwell, the `import * as` form does, arguably","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QhaJ8TGFdLi2QN4eD2v4qM7TpW_jy8LOUKuH1ceQPdU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>That’s very reasonable, though it doesn’t provide any reflection of that module.</blockquote></mx-reply>well, the <code>import * as</code> form does, arguably","m.relates_to":{"m.in_reply_to":{"event_id":"$QhaJ8TGFdLi2QN4eD2v4qM7TpW_jy8LOUKuH1ceQPdU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> That’s very reasonable, though it doesn’t provide any reflection of that module.\n\nwell, the `import * as` form does, arguably","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QhaJ8TGFdLi2QN4eD2v4qM7TpW_jy8LOUKuH1ceQPdU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>That’s very reasonable, though it doesn’t provide any reflection of that module.</blockquote></mx-reply>well, the <code>import * as</code> form does, arguably","mimetype":"text/html"}]},"ts":1669816908831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yUWAB4uec--5j6PVLZJbLg1OZpyOifn6fSEjDf7GoDc"},
{"content":{"body":"but yes","msgtype":"m.text","org.matrix.msc1767.text":"but yes"},"ts":1669816913274,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s0fkJcvJGNqiRNN-ATLgN2agVDwahlp7zPk3NSC0AmM"},
{"content":{"body":"Right, I agree and also suggest `const moduleSource = await import('example', { reflect: true})` to pair.","format":"org.matrix.custom.html","formatted_body":"Right, I agree and also suggest <code>const moduleSource = await import('example', { reflect: true})</code> to pair.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Right, I agree and also suggest `const moduleSource = await import('example', { reflect: true})` to pair.","mimetype":"text/plain"},{"body":"Right, I agree and also suggest <code>const moduleSource = await import('example', { reflect: true})</code> to pair.","mimetype":"text/html"}]},"ts":1669816921836,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$AQXxtlZCTAQUtSQZBZU6xvDyB20xl2dqV5XL7I0gzYw"},
{"content":{"body":"i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?","msgtype":"m.text","org.matrix.msc1767.text":"i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?"},"ts":1669816934753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wBjYioM8TkcjRMuUByUuDrQI9w5iXTFFxcYNVRQG3iI"},
{"content":{"body":"Note `(module {}).source instanceof ModuleSource` intentionally reads correctly.","format":"org.matrix.custom.html","formatted_body":"Note <code>(module {}).source instanceof ModuleSource</code> intentionally reads correctly.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Note `(module {}).source instanceof ModuleSource` intentionally reads correctly.","mimetype":"text/plain"},{"body":"Note <code>(module {}).source instanceof ModuleSource</code> intentionally reads correctly.","mimetype":"text/html"}]},"ts":1669816969564,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pqsaumhhwNR5yiaE_nkzGexeE7pgYyZ1eVRWuifl3ho"},
{"content":{"body":" * i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?","m.new_content":{"body":"i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?","msgtype":"m.text","org.matrix.msc1767.text":"i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?"},"m.relates_to":{"event_id":"$wBjYioM8TkcjRMuUByUuDrQI9w5iXTFFxcYNVRQG3iI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?"},"ts":1669816975156,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uqzvLYcOhX0OfPtSCKnqNZr3kLcJZ5DLf5tR-edE3-E"},
{"content":{"body":"> <@ljharb:matrix.org> i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?\n\n`with { phase: 'linked' }` would be a reasonable extension.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wBjYioM8TkcjRMuUByUuDrQI9w5iXTFFxcYNVRQG3iI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i really don&#39;t like the &quot;with&quot; object, or any object form. are there long term, concrete, viable plans to add something else to the object?</blockquote></mx-reply><code>with { phase: 'linked' }</code> would be a reasonable extension.","m.relates_to":{"m.in_reply_to":{"event_id":"$wBjYioM8TkcjRMuUByUuDrQI9w5iXTFFxcYNVRQG3iI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> i really don't like the \"with\" object, or any object form. are there long term, concrete, viable plans to add something else to the object?\n\n`with { phase: 'linked' }` would be a reasonable extension.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wBjYioM8TkcjRMuUByUuDrQI9w5iXTFFxcYNVRQG3iI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i really don&#39;t like the &quot;with&quot; object, or any object form. are there long term, concrete, viable plans to add something else to the object?</blockquote></mx-reply><code>with { phase: 'linked' }</code> would be a reasonable extension.","mimetype":"text/html"}]},"ts":1669817004277,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$danh6rNvr3Gd4xmMW-M29EBFH45vwJecdLX2Q1n9TD8"},
{"content":{"body":"`with { lazy: true } ` would also be a path","format":"org.matrix.custom.html","formatted_body":"<code>with { lazy: true } </code> would also be a path","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`with { lazy: true } ` would also be a path","mimetype":"text/plain"},{"body":"<code>with { lazy: true } </code> would also be a path","mimetype":"text/html"}]},"ts":1669817027142,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$CNxve59U0YfbISr8UvTUX8lehYjky5FrwzMep5ziBoE"},
{"content":{"body":"rather than adding arbitrary new syntax","msgtype":"m.text","org.matrix.msc1767.text":"rather than adding arbitrary new syntax"},"ts":1669817031481,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$tO9Xh7T1gdfvKxboH9fx0QgaIfqSKSd49nraiTpCzZU"},
{"content":{"body":"i'd love to understand more about how those proposals would work","msgtype":"m.text","org.matrix.msc1767.text":"i'd love to understand more about how those proposals would work"},"ts":1669817062741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MVcC3ANMJGUw2gjYE9l_U8Tit3qUp8oVNgH_IB7NKX4"},
{"content":{"body":"`with` also pairs well with dynamic import options bag, as opposed to variadic args.","format":"org.matrix.custom.html","formatted_body":"<code>with</code> also pairs well with dynamic import options bag, as opposed to variadic args.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`with` also pairs well with dynamic import options bag, as opposed to variadic args.","mimetype":"text/plain"},{"body":"<code>with</code> also pairs well with dynamic import options bag, as opposed to variadic args.","mimetype":"text/html"}]},"ts":1669817063943,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dTtDnmrle9SMxUCnyu8hFtA3sch1osD2IBhbPWUS1RQ"},
{"content":{"body":"sure, but dynamic import can accept a similar-but-different form in its options bad","msgtype":"m.text","org.matrix.msc1767.text":"sure, but dynamic import can accept a similar-but-different form in its options bad"},"ts":1669817085235,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9EcCo_LzPMcPrVlGkBXhuSjBO-woq8URpFHHd5U8j6U"},
{"content":{"body":"Yulia will be talking about lazy in this meeting.","msgtype":"m.text","org.matrix.msc1767.text":"Yulia will be talking about lazy in this meeting."},"ts":1669817090056,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$47Ch9fsZvutNVUbrJuGhspGHgmZAAYDHfWxrCw1x04Y"},
{"content":{"body":"`import module` and `{ module: true }` is perfectly sensible","format":"org.matrix.custom.html","formatted_body":"<code>import module</code> and <code>{ module: true }</code> is perfectly sensible","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import module` and `{ module: true }` is perfectly sensible","mimetype":"text/plain"},{"body":"<code>import module</code> and <code>{ module: true }</code> is perfectly sensible","mimetype":"text/html"}]},"ts":1669817093738,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6twSLWCZKLKbBcaKzUMiiZ4Pnn5UWDjx1fcV2WIqOUo"},
{"content":{"body":"if i'm awake for that, that's great, but timezones make that hard","m.relates_to":{"event_id":"$47Ch9fsZvutNVUbrJuGhspGHgmZAAYDHfWxrCw1x04Y","is_falling_back":true,"m.in_reply_to":{"event_id":"$47Ch9fsZvutNVUbrJuGhspGHgmZAAYDHfWxrCw1x04Y"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"if i'm awake for that, that's great, but timezones make that hard"},"ts":1669817108065,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z9CJxeOnhKmtM6GhDA4V06BrFV2XWX66J04XG2c55Fk"},
{"content":{"body":" * sure, but dynamic import can accept a similar-but-different form in its options bag","m.new_content":{"body":"sure, but dynamic import can accept a similar-but-different form in its options bag","msgtype":"m.text","org.matrix.msc1767.text":"sure, but dynamic import can accept a similar-but-different form in its options bag"},"m.relates_to":{"event_id":"$9EcCo_LzPMcPrVlGkBXhuSjBO-woq8URpFHHd5U8j6U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * sure, but dynamic import can accept a similar-but-different form in its options bag"},"ts":1669817117947,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6u76262TSDVvzg0Vuu7taWDQhb7XwGda-EEguvLI34A"},
{"content":{"body":"okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?","msgtype":"m.text","org.matrix.msc1767.text":"okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?"},"ts":1669817292532,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M"},
{"content":{"body":"This is a strawman: As for `phase: 'linked'`, the goal state of `import` is implicitly is _executed_ whereas with `import module` (by whatever syntax) has a goal state of _shallowly_ loaded. `phase` would provide an avenue for targetting an intermediate phase, like `linked`, which would ensure the transitive dependencies have loaded (or loading this module will fail). This is useful for communicating to bundlers and runtimes different performance profiles for application startup, like code splitting.","format":"org.matrix.custom.html","formatted_body":"This is a strawman: As for <code>phase: 'linked'</code>, the goal state of <code>import</code> is implicitly is <em>executed</em> whereas with <code>import module</code> (by whatever syntax) has a goal state of <em>shallowly</em> loaded. <code>phase</code> would provide an avenue for targetting an intermediate phase, like <code>linked</code>, which would ensure the transitive dependencies have loaded (or loading this module will fail). This is useful for communicating to bundlers and runtimes different performance profiles for application startup, like code splitting.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"This is a strawman: As for `phase: 'linked'`, the goal state of `import` is implicitly is _executed_ whereas with `import module` (by whatever syntax) has a goal state of _shallowly_ loaded. `phase` would provide an avenue for targetting an intermediate phase, like `linked`, which would ensure the transitive dependencies have loaded (or loading this module will fail). This is useful for communicating to bundlers and runtimes different performance profiles for application startup, like code splitting.","mimetype":"text/plain"},{"body":"This is a strawman: As for <code>phase: 'linked'</code>, the goal state of <code>import</code> is implicitly is <em>executed</em> whereas with <code>import module</code> (by whatever syntax) has a goal state of <em>shallowly</em> loaded. <code>phase</code> would provide an avenue for targetting an intermediate phase, like <code>linked</code>, which would ensure the transitive dependencies have loaded (or loading this module will fail). This is useful for communicating to bundlers and runtimes different performance profiles for application startup, like code splitting.","mimetype":"text/html"}]},"ts":1669817296163,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dJh3hquAEL4tenzO1gfbge1qrjBgQvU8j48oQVDZpao"},
{"content":{"body":"> <@michaelficarra:matrix.org> okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?\n\nCorrect.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>okay I think I finally understand why this doesn&#39;t solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?</blockquote></mx-reply>Correct.","m.relates_to":{"m.in_reply_to":{"event_id":"$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?\n\nCorrect.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>okay I think I finally understand why this doesn&#39;t solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?</blockquote></mx-reply>Correct.","mimetype":"text/html"}]},"ts":1669817308658,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rNfzqd7qRjrwCrtHLyKc5BMTYPTFukdb680wFcgLTco"},
{"content":{"body":"> <@michaelficarra:matrix.org> okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?\n\nyes thats right","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>okay I think I finally understand why this doesn&#39;t solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?</blockquote></mx-reply>yes thats right","m.relates_to":{"m.in_reply_to":{"event_id":"$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> okay I think I finally understand why this doesn't solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?\n\nyes thats right","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiX0fEoh08rzXOzc8S4kvVBFnKWWbX6IPLzLiZWgY_M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>okay I think I finally understand why this doesn&#39;t solve deferred evaluation: the deferred eval use case still wants to load the whole module graph eagerly, right? just not start evaluating?</blockquote></mx-reply>yes thats right","mimetype":"text/html"}]},"ts":1669817322014,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$gkuW_meHCcPbYUSOMQP3kuQCfIJIpI6T0JIXiYnVyvA"},
{"content":{"body":"thanks 🙂","msgtype":"m.text","org.matrix.msc1767.text":"thanks 🙂"},"ts":1669817385322,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2LdRZq1VdfYQwjOVPlCsIJzFFx46RTJit3roRhSLyjM"},
{"content":{"body":"Maybe `ModuleInstance`&`ModuleSource`, and the syntax could be `import instance` or `import source`","format":"org.matrix.custom.html","formatted_body":"Maybe <code>ModuleInstance</code>&amp;<code>ModuleSource</code>, and the syntax could be <code>import instance</code> or <code>import source</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Maybe `ModuleInstance`&`ModuleSource`, and the syntax could be `import instance` or `import source`","mimetype":"text/plain"},{"body":"Maybe <code>ModuleInstance</code>&amp;<code>ModuleSource</code>, and the syntax could be <code>import instance</code> or <code>import source</code>","mimetype":"text/html"}]},"ts":1669817525283,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$INGILvvPrtOXLZa28PS5ubhTHp1T3QOtvYsNhni9S-0"},
{"content":{"body":"yulia: Exactly. I also see this confusion.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: Exactly. I also see this confusion.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: Exactly. I also see this confusion.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: Exactly. I also see this confusion.","mimetype":"text/html"}]},"ts":1669817527272,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$VoHtbIWt_FxvspWNvS0AtW1GuSzI8zCMeGLpQWVtt4I"},
{"content":{"body":"import source may work if we go in that direction, and it may be the closest to what is happening now","msgtype":"m.text","org.matrix.msc1767.text":"import source may work if we go in that direction, and it may be the closest to what is happening now"},"ts":1669817551479,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZI_LXdRIwoir-XzVUgctT-3kLqD1vo3bvNPSf_OWDqY"},
{"content":{"body":"instance is also an overloaded term as developers may think that this gets around module singleton-ness","msgtype":"m.text","org.matrix.msc1767.text":"instance is also an overloaded term as developers may think that this gets around module singleton-ness"},"ts":1669817571391,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$eKLCP9LMyi705SDrjEYmF3I4508l0TMTZfN3bNPC1YY"},
{"content":{"body":"isn't `import instance` just `import`?","format":"org.matrix.custom.html","formatted_body":"isn't <code>import instance</code> just <code>import</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"isn't `import instance` just `import`?","mimetype":"text/plain"},{"body":"isn't <code>import instance</code> just <code>import</code>?","mimetype":"text/html"}]},"ts":1669817573625,"senderName":"Robert Pamely","senderId":"@rpamely:matrix.org","id":"$jjtRebAHGx3WWJGmZivLafbHfzSWADinpyvcUVPCiuI"},
{"content":{"body":"^ also that confusion is likely","msgtype":"m.text","org.matrix.msc1767.text":"^ also that confusion is likely"},"ts":1669817582865,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$KyaKCMBFqvH6ncPE6ROOXjhbUvV8tieIf3NNmIO5jSk"},
{"content":{"body":"`import instance` would give you a `ModuleInstance` object","format":"org.matrix.custom.html","formatted_body":"<code>import instance</code> would give you a <code>ModuleInstance</code> object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import instance` would give you a `ModuleInstance` object","mimetype":"text/plain"},{"body":"<code>import instance</code> would give you a <code>ModuleInstance</code> object","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$jjtRebAHGx3WWJGmZivLafbHfzSWADinpyvcUVPCiuI"}}},"ts":1669817588324,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rjgrYdiSIJNAk5-eREOJD_Sl6frrctiMczNKEXdRJsA"},
{"content":{"body":"> <@rpamely:matrix.org> isn't `import instance` just `import`?\n\n * `import instance` would give you a `ModuleInstance` object","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jjtRebAHGx3WWJGmZivLafbHfzSWADinpyvcUVPCiuI?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rpamely:matrix.org\">@rpamely:matrix.org</a><br>isn't <code>import instance</code> just <code>import</code>?</blockquote></mx-reply> * <code>import instance</code> would give you a <code>ModuleInstance</code> object","m.new_content":{"body":"`import instance` would give you a `ModuleInstance` object","format":"org.matrix.custom.html","formatted_body":"<code>import instance</code> would give you a <code>ModuleInstance</code> object","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import instance` would give you a `ModuleInstance` object","mimetype":"text/plain"},{"body":"<code>import instance</code> would give you a <code>ModuleInstance</code> object","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rjgrYdiSIJNAk5-eREOJD_Sl6frrctiMczNKEXdRJsA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rpamely:matrix.org> isn't `import instance` just `import`?\n\n * `import instance` would give you a `ModuleInstance` object","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jjtRebAHGx3WWJGmZivLafbHfzSWADinpyvcUVPCiuI?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rpamely:matrix.org\">@rpamely:matrix.org</a><br>isn't <code>import instance</code> just <code>import</code>?</blockquote></mx-reply> * <code>import instance</code> would give you a <code>ModuleInstance</code> object","mimetype":"text/html"}]},"ts":1669817593237,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ldaYi9bIImwvjM2X53QirKXSC1h23LDW4K8XHyLUKmo"},
{"content":{"body":"I think I like `import source`.","format":"org.matrix.custom.html","formatted_body":"I think I like <code>import source</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think I like `import source`.","mimetype":"text/plain"},{"body":"I think I like <code>import source</code>.","mimetype":"text/html"}]},"ts":1669817593652,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$inFWGGcKq0flHxY3X4FvXlOBpDeUE-6akQgnUAi-sRg"},
{"content":{"body":"`import` is like \"import instance and extract bindings\", maybe?","format":"org.matrix.custom.html","formatted_body":"<code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import` is like \"import instance and extract bindings\", maybe?","mimetype":"text/plain"},{"body":"<code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","mimetype":"text/html"}]},"ts":1669817716411,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d4GvxPmxmrzoxpsvLsyhS5r5kCpkYG0cxsKGQ70OY-4"},
{"content":{"body":" * `import` is like \"import instance and extract bindings\", maybe?","format":"org.matrix.custom.html","formatted_body":" * <code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","m.new_content":{"body":"`import` is like \"import instance and extract bindings\", maybe?","format":"org.matrix.custom.html","formatted_body":"<code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import` is like \"import instance and extract bindings\", maybe?","mimetype":"text/plain"},{"body":"<code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$d4GvxPmxmrzoxpsvLsyhS5r5kCpkYG0cxsKGQ70OY-4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `import` is like \"import instance and extract bindings\", maybe?","mimetype":"text/plain"},{"body":" * <code>import</code> is like &quot;import instance and extract bindings&quot;, maybe?","mimetype":"text/html"}]},"ts":1669817753752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AqTSNp7FoiGIuYRZv19rphMduO5FDZMnmNHa5sGAmxg"},
{"content":{"body":"import is import and execute a module -- instance, in this case, means something different and can still be executed","msgtype":"m.text","org.matrix.msc1767.text":"import is import and execute a module -- instance, in this case, means something different and can still be executed"},"ts":1669817767505,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QNzxNJZHGbKLO6J6zsviHhSfOWEv1vhciKLpWNGO7bU"},
{"content":{"body":" * import is import and execute a module -- instance, in this case, means something different and can still be executed","m.new_content":{"body":"import is import and execute a module -- instance, in this case, means something different and can still be executed","msgtype":"m.text","org.matrix.msc1767.text":"import is import and execute a module -- instance, in this case, means something different and can still be executed"},"m.relates_to":{"event_id":"$QNzxNJZHGbKLO6J6zsviHhSfOWEv1vhciKLpWNGO7bU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * import is import and execute a module -- instance, in this case, means something different and can still be executed"},"ts":1669817774231,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wsY0sUtIlzMeRTS_9pjo9qqk0UQffuv5K-_5V_FsPMQ"},
{"content":{"body":"thats why you can `await import` it","format":"org.matrix.custom.html","formatted_body":"thats why you can <code>await import</code> it","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"thats why you can `await import` it","mimetype":"text/plain"},{"body":"thats why you can <code>await import</code> it","mimetype":"text/html"}]},"ts":1669817793099,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$NgvTlD4O1AXa4xni2SnuKl1-3uIzAIPXYwR5cYWgPG0"},
{"content":{"body":"its more like module record maybe is what i shoud say?","msgtype":"m.text","org.matrix.msc1767.text":"its more like module record maybe is what i shoud say?"},"ts":1669817809006,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ubdSu84kHCtwxMJWeOdf9Nt-xR3PnnVIkmT7bbWRCak"},
{"content":{"body":"Yes an instance is exactly a module record, just exposed to JS as an object","msgtype":"m.text","org.matrix.msc1767.text":"Yes an instance is exactly a module record, just exposed to JS as an object"},"ts":1669817830732,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DOFYOMDmvlFJPTLJW6l4E9_VhPzk1LJfqVkAPTEqi-c"},
{"content":{"body":"Has this topic been discussed with bundlers on the TC39 Tools call?","msgtype":"m.text","org.matrix.msc1767.text":"Has this topic been discussed with bundlers on the TC39 Tools call?"},"ts":1669817859284,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$3BncoH0nNkk8-sg1_FCGNGehC2-BxINPkDraENZFzCg"},
{"content":{"body":"I don't see why we'd need more than two statements here; something like `import` + `import source` would also allow for an instance to be constructed from the latter.","format":"org.matrix.custom.html","formatted_body":"I don't see why we'd need more than two statements here; something like <code>import</code> + <code>import source</code> would also allow for an instance to be constructed from the latter.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't see why we'd need more than two statements here; something like `import` + `import source` would also allow for an instance to be constructed from the latter.","mimetype":"text/plain"},{"body":"I don't see why we'd need more than two statements here; something like <code>import</code> + <code>import source</code> would also allow for an instance to be constructed from the latter.","mimetype":"text/html"}]},"ts":1669817862675,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$RKvgwEdJuImPoozDkfZrbI2UhRJpZqh1t_iP6cJKias"},
{"content":{"body":"nicolo-ribaudo: wait, doesn't omitting the handler get you what's equivalent to the host?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: wait, doesn't omitting the handler get you what's equivalent to the host?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: wait, doesn't omitting the handler get you what's equivalent to the host?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: wait, doesn't omitting the handler get you what's equivalent to the host?","mimetype":"text/html"}]},"ts":1669817991681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uEygmhqVm2dIr9CEI6HEFU3LMp_LnminmKZ9KcoKf4Y"},
{"content":{"body":"> <@shuyuguo:matrix.org> nicolo-ribaudo: wait, doesn't omitting the handler get you what's equivalent to the host?\n\nYes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uEygmhqVm2dIr9CEI6HEFU3LMp_LnminmKZ9KcoKf4Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: wait, doesn't omitting the handler get you what's equivalent to the host?</blockquote></mx-reply>Yes.","m.relates_to":{"m.in_reply_to":{"event_id":"$uEygmhqVm2dIr9CEI6HEFU3LMp_LnminmKZ9KcoKf4Y"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> nicolo-ribaudo: wait, doesn't omitting the handler get you what's equivalent to the host?\n\nYes.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uEygmhqVm2dIr9CEI6HEFU3LMp_LnminmKZ9KcoKf4Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: wait, doesn't omitting the handler get you what's equivalent to the host?</blockquote></mx-reply>Yes.","mimetype":"text/html"}]},"ts":1669818005510,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qQu-kDZ80yg82ao58RekNrXBgaZVGwZSxsKjsByK2DY"},
{"content":{"body":"In this sense, import reflection simply defers the phases past load.","msgtype":"m.text","org.matrix.msc1767.text":"In this sense, import reflection simply defers the phases past load."},"ts":1669818028488,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pcVUildizta0kPVMeUCpalDvpfP9JKcSFeaeTVxfIwo"},
{"content":{"body":"Yes *but* `Module` instances don't have the [[HostDefined]] slot provided by the host","format":"org.matrix.custom.html","formatted_body":"Yes <em>but</em> <code>Module</code> instances don't have the [[HostDefined]] slot provided by the host","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes *but* `Module` instances don't have the [[HostDefined]] slot provided by the host","mimetype":"text/plain"},{"body":"Yes <em>but</em> <code>Module</code> instances don't have the [[HostDefined]] slot provided by the host","mimetype":"text/html"}]},"ts":1669818033291,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$NTGRIQM9YkTqHiKxMOl7Xcjsdtl5lZdAaJHnBfRUKqo"},
{"content":{"body":"which `Module` instances?","format":"org.matrix.custom.html","formatted_body":"which <code>Module</code> instances?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"which `Module` instances?","mimetype":"text/plain"},{"body":"which <code>Module</code> instances?","mimetype":"text/html"}]},"ts":1669818052260,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hrN0-kP7WPeXPmUvidnqnm63wGSp3FWckSrAGhO13xo"},
{"content":{"body":"Created by `new Module`","format":"org.matrix.custom.html","formatted_body":"Created by <code>new Module</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Created by `new Module`","mimetype":"text/plain"},{"body":"Created by <code>new Module</code>","mimetype":"text/html"}]},"ts":1669818068050,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fN3qTSc6jqTlDQUoDwdrqDsQ5dXzkJZGffFl1eEY6rM"},
{"content":{"body":"gotcha, but `import module` returning module instances can have [[HostDefined]]","format":"org.matrix.custom.html","formatted_body":"gotcha, but <code>import module</code> returning module instances can have [[HostDefined]]","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"gotcha, but `import module` returning module instances can have [[HostDefined]]","mimetype":"text/plain"},{"body":"gotcha, but <code>import module</code> returning module instances can have [[HostDefined]]","mimetype":"text/html"}]},"ts":1669818081184,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qYAtqHdBUhwDBNb8-LMfV7tcRJmI-3F7NtjDL-Y1KoQ"},
{"content":{"body":"`import reflect foo from \"./foo.js\"; foo instanceof Module; // true`","format":"org.matrix.custom.html","formatted_body":"<code>import reflect foo from &quot;./foo.js&quot;; foo instanceof Module; // true</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import reflect foo from \"./foo.js\"; foo instanceof Module; // true`","mimetype":"text/plain"},{"body":"<code>import reflect foo from &quot;./foo.js&quot;; foo instanceof Module; // true</code>","mimetype":"text/html"}]},"ts":1669818087929,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$-xVVH5jRIE9tx0tPyLiaTwvrrbSemI-CGlpf_j4BaRY"},
{"content":{"body":"`ModuleSource` lacks the referrer URL, which is stored in the [[HostDefined]] slot of Module Records","format":"org.matrix.custom.html","formatted_body":"<code>ModuleSource</code> lacks the referrer URL, which is stored in the [[HostDefined]] slot of Module Records","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`ModuleSource` lacks the referrer URL, which is stored in the [[HostDefined]] slot of Module Records","mimetype":"text/plain"},{"body":"<code>ModuleSource</code> lacks the referrer URL, which is stored in the [[HostDefined]] slot of Module Records","mimetype":"text/html"}]},"ts":1669818088888,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dG8L7fU2MJ6ETaTn80woIj5U-JcvVeXZFRBLTW2qJVc"},
{"content":{"body":"chairs, the queue isn't advanced properly","msgtype":"m.text","org.matrix.msc1767.text":"chairs, the queue isn't advanced properly"},"ts":1669818091328,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Vc_wZeXFF5aW3qU_I74TKZTJr12BPlYbm95Rf9xZeiY"},
{"content":{"body":"[[HostDefined]] belongs to `Module` and not `ModuleSource`, because it contains data specific to that instantiation","format":"org.matrix.custom.html","formatted_body":"[[HostDefined]] belongs to <code>Module</code> and not <code>ModuleSource</code>, because it contains data specific to that instantiation","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"[[HostDefined]] belongs to `Module` and not `ModuleSource`, because it contains data specific to that instantiation","mimetype":"text/plain"},{"body":"[[HostDefined]] belongs to <code>Module</code> and not <code>ModuleSource</code>, because it contains data specific to that instantiation","mimetype":"text/html"}]},"ts":1669818108334,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6WTPdUgOZGl1QMjw2pUZ1c981eb2wO946QFwvd3Prx0"},
{"content":{"body":"So if `import *keyword*` returns a `Module` object, it has all the data necessary to resolve the dependencies when later imported. If it returns a `ModuleSource`, `new Module(thatThing)` doesn't have the necessary data","format":"org.matrix.custom.html","formatted_body":"So if <code>import *keyword*</code> returns a <code>Module</code> object, it has all the data necessary to resolve the dependencies when later imported. If it returns a <code>ModuleSource</code>, <code>new Module(thatThing)</code> doesn't have the necessary data","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So if `import *keyword*` returns a `Module` object, it has all the data necessary to resolve the dependencies when later imported. If it returns a `ModuleSource`, `new Module(thatThing)` doesn't have the necessary data","mimetype":"text/plain"},{"body":"So if <code>import *keyword*</code> returns a <code>Module</code> object, it has all the data necessary to resolve the dependencies when later imported. If it returns a <code>ModuleSource</code>, <code>new Module(thatThing)</code> doesn't have the necessary data","mimetype":"text/html"}]},"ts":1669818166448,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ai1-qnZ_8beD1xVXNl3X7Y1kneiyfxVuYFUbqltTBBU"},
{"content":{"body":"Kris Kowal: why isn't it the case that a `new Module` that have the host default handler get the [[HostDefined]] slot?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: why isn't it the case that a <code>new Module</code> that have the host default handler get the [[HostDefined]] slot?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: why isn't it the case that a `new Module` that have the host default handler get the [[HostDefined]] slot?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: why isn't it the case that a <code>new Module</code> that have the host default handler get the [[HostDefined]] slot?","mimetype":"text/html"}]},"ts":1669818185215,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0CV-qO4ZfxWVjkdxHNA40wxpGljpNPFk3V3TbkJKqMY"},
{"content":{"body":"i.e. the base URL, + maybe what HTML calls \"fetch options\"","msgtype":"m.text","org.matrix.msc1767.text":"i.e. the base URL, + maybe what HTML calls \"fetch options\""},"ts":1669818188765,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jVlLFSqDGVFKh03BAGfTNoz_Pzb_BeBooEVzVBSxU8U"},
{"content":{"body":"> <@shuyuguo:matrix.org> Kris Kowal: why isn't it the case that a `new Module` that have the host default handler get the [[HostDefined]] slot?\n\nEven if we had that, the host wouldn't know which base URL to put in that slot","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0CV-qO4ZfxWVjkdxHNA40wxpGljpNPFk3V3TbkJKqMY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: why isn't it the case that a <code>new Module</code> that have the host default handler get the [[HostDefined]] slot?</blockquote></mx-reply>Even if we had that, the host wouldn't know which base URL to put in that slot","m.relates_to":{"m.in_reply_to":{"event_id":"$0CV-qO4ZfxWVjkdxHNA40wxpGljpNPFk3V3TbkJKqMY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> Kris Kowal: why isn't it the case that a `new Module` that have the host default handler get the [[HostDefined]] slot?\n\nEven if we had that, the host wouldn't know which base URL to put in that slot","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0CV-qO4ZfxWVjkdxHNA40wxpGljpNPFk3V3TbkJKqMY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: why isn't it the case that a <code>new Module</code> that have the host default handler get the [[HostDefined]] slot?</blockquote></mx-reply>Even if we had that, the host wouldn't know which base URL to put in that slot","mimetype":"text/html"}]},"ts":1669818205718,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$MoQ7562s9a3pqvpramuUb3KUu3Q0a8yRml9szdt6rL8"},
{"content":{"body":"so is the queue now for the previous topic?","msgtype":"m.text","org.matrix.msc1767.text":"so is the queue now for the previous topic?"},"ts":1669818209892,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XChYR2dU0ii5mJ7RJv0N1JLTt30YkH0QjRbknDlB8F0"},
{"content":{"body":"Nicolò of course is the authority on the proposed spec text, but the intent is that the `Module` carries host-defined import behavior and `ModuleSource` carries host-defined origin information and those are separate concerns. The latter would prevent `import` in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.","format":"org.matrix.custom.html","formatted_body":"Nicolò of course is the authority on the proposed spec text, but the intent is that the <code>Module</code> carries host-defined import behavior and <code>ModuleSource</code> carries host-defined origin information and those are separate concerns. The latter would prevent <code>import</code> in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Nicolò of course is the authority on the proposed spec text, but the intent is that the `Module` carries host-defined import behavior and `ModuleSource` carries host-defined origin information and those are separate concerns. The latter would prevent `import` in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.","mimetype":"text/plain"},{"body":"Nicolò of course is the authority on the proposed spec text, but the intent is that the <code>Module</code> carries host-defined import behavior and <code>ModuleSource</code> carries host-defined origin information and those are separate concerns. The latter would prevent <code>import</code> in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.","mimetype":"text/html"}]},"ts":1669818218313,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0KZmW4m-zUL0foemdUh2dLlLjRpCCZqxQuHHjIRtUWc"},
{"content":{"body":"oh sorry, i thought you wrote that spec","msgtype":"m.text","org.matrix.msc1767.text":"oh sorry, i thought you wrote that spec"},"ts":1669818229177,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rrZHnawy0xvIS5CqIQnU55R5vYqwPPsUAb6P_-lN2M0"},
{"content":{"body":"hm i see","msgtype":"m.text","org.matrix.msc1767.text":"hm i see"},"ts":1669818236364,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UaB_t4GZgGfCJknl_fCatqp4vHU9oh4B9XMHfejnfxw"},
{"content":{"body":"okay that seems like a good argument for returning Module instance","msgtype":"m.text","org.matrix.msc1767.text":"okay that seems like a good argument for returning Module instance"},"ts":1669818245312,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4rZFLzpG4kOciWYyaESoDWMoDAsKZ--tsjZMMArSjEk"},
{"content":{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","format":"org.matrix.custom.html","formatted_body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/plain"},{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$rrZHnawy0xvIS5CqIQnU55R5vYqwPPsUAb6P_-lN2M0"}}},"ts":1669818256685,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Lzpsd2WFppPzZxaHajD2jf1-Ga1RiBGkRa63P6iL8VQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> oh sorry, i thought you wrote that spec\n\n * Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rrZHnawy0xvIS5CqIQnU55R5vYqwPPsUAb6P_-lN2M0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>oh sorry, i thought you wrote that spec</blockquote></mx-reply> * Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","m.new_content":{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","format":"org.matrix.custom.html","formatted_body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/plain"},{"body":"Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Lzpsd2WFppPzZxaHajD2jf1-Ga1RiBGkRa63P6iL8VQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> oh sorry, i thought you wrote that spec\n\n * Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rrZHnawy0xvIS5CqIQnU55R5vYqwPPsUAb6P_-lN2M0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>oh sorry, i thought you wrote that spec</blockquote></mx-reply> * Caridy wrote it, I then PRed to rebase it on top of the refactor changing much of the loading logic","mimetype":"text/html"}]},"ts":1669818263168,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$c46MAGVOo8i1ZRaKvwWFvv0Q3-WOZ3wJ9Fx2ldoSrhU"},
{"content":{"body":"but i think my brainpower has degraded from small child to golden retriever","msgtype":"m.text","org.matrix.msc1767.text":"but i think my brainpower has degraded from small child to golden retriever"},"ts":1669818264288,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fo0cBWrIlIKju1atflo3XNb63-9zpfLPOjJxxS9VDZs"},
{"content":{"body":"is this the last item","msgtype":"m.text","org.matrix.msc1767.text":"is this the last item"},"ts":1669818271523,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oBDDdB1tbF82lFLx_Ju41sHTjw7lHoA-b36tXB7T5S0"},
{"content":{"body":"we might bring something forward","msgtype":"m.text","org.matrix.msc1767.text":"we might bring something forward"},"ts":1669818292971,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Dig2uPwhw9ERX_AwL-OkhYpeYnH_Dy21ajLRJJ04jEs"},
{"content":{"body":"something delicious and entertaining","msgtype":"m.text","org.matrix.msc1767.text":"something delicious and entertaining"},"ts":1669818354961,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eU5xgHHLoPztU7eWtjp9jbpod7mzsxP62um2yRBw0jk"},
{"content":{"body":"I admit to being ready with my presentation if called upon.","msgtype":"m.text","org.matrix.msc1767.text":"I admit to being ready with my presentation if called upon."},"ts":1669818412666,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$GEGK5tdpWje4xJ71sNZF2jn4uAFYnSFw6F4Vyi01MZE"},
{"content":{"body":"> <@shuyuguo:matrix.org> is this the last item\n\nProbably we'll also have \"An introduction to the LibJS JavaScript engine\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oBDDdB1tbF82lFLx_Ju41sHTjw7lHoA-b36tXB7T5S0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is this the last item</blockquote></mx-reply>Probably we'll also have &quot;An introduction to the LibJS JavaScript engine&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$oBDDdB1tbF82lFLx_Ju41sHTjw7lHoA-b36tXB7T5S0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> is this the last item\n\nProbably we'll also have \"An introduction to the LibJS JavaScript engine\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oBDDdB1tbF82lFLx_Ju41sHTjw7lHoA-b36tXB7T5S0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is this the last item</blockquote></mx-reply>Probably we'll also have &quot;An introduction to the LibJS JavaScript engine&quot;","mimetype":"text/html"}]},"ts":1669818427659,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cBOqrdpoFP4ud2MD3v0_qCJ-7VDkKDav3kI51NMRT4M"},
{"content":{"body":"> <@kriskowal:matrix.org> Nicolò of course is the authority on the proposed spec text, but the intent is that the `Module` carries host-defined import behavior and `ModuleSource` carries host-defined origin information and those are separate concerns. The latter would prevent `import` in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.\n\nRight, I didn’t explain this clearly but to be able to use ModuleSource we would need it to be accompanied by all sorts of other meta information ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240KZmW4m-zUL0foemdUh2dLlLjRpCCZqxQuHHjIRtUWc\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Nicolò of course is the authority on the proposed spec text, but the intent is that the <code>Module</code> carries host-defined import behavior and <code>ModuleSource</code> carries host-defined origin information and those are separate concerns. The latter would prevent <code>import</code> in a no-unsafe-eval for a ModuleSource constructed from text. The former defines link behavior.</blockquote></mx-reply>Right, I didn’t explain this clearly but to be able to use ModuleSource we would need it to be accompanied by all sorts of other meta information","m.relates_to":{"m.in_reply_to":{"event_id":"$0KZmW4m-zUL0foemdUh2dLlLjRpCCZqxQuHHjIRtUWc"}},"msgtype":"m.text"},"ts":1669818672655,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$urM31HS2zJi6b7ZeyDs7iiuU2plPE4pYjzK14d7y4EQ"},
{"content":{"body":"I think this is what Guy was imagining, and that it would live in WebAssembly.Module","msgtype":"m.text"},"ts":1669818704682,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$37G67u2x3GgBmKeAFT9nhhlFKvS0BzTP5alg8BBOF3g"},
{"content":{"body":"(We may still want to propagate some of that information there)","msgtype":"m.text"},"ts":1669818726612,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d-28Nb0wDT7DxNDP8Jnxd_EA4Q5miUJ5eedQtRzNdkQ"},
{"content":{"body":"I with we had \"TC39 meeting: modules edition\" :P","msgtype":"m.text","org.matrix.msc1767.text":"I with we had \"TC39 meeting: modules edition\" :P"},"ts":1669818761507,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$tsyQP4w421-4M3fO45eiQ4eykHti6Hi1Movt1a9jzBE"},
{"content":{"body":"Like Shark Week","msgtype":"m.text","org.matrix.msc1767.text":"Like Shark Week"},"ts":1669818792972,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zds69YEwBgbYlzw24etawwlVijz4MtNeWpLVQmpyUys"},
{"content":{"body":"live every week like modules week","msgtype":"m.text","org.matrix.msc1767.text":"live every week like modules week"},"ts":1669819463157,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$s06qBnGRuhDDgUYbpKomy3ei8m3wLRczeZs-9A5AjA0"},
{"content":{"body":"if we have a few more days this intense, I'll need a glucose drip","msgtype":"m.text","org.matrix.msc1767.text":"if we have a few more days this intense, I'll need a glucose drip"},"ts":1669819680764,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$SAXIsLovVxF5KqPcrcnugxfFJNZ-kuyLIO197dTOC6w"},
{"content":{"body":"are any of the other engines using bleeding-edge C++?","msgtype":"m.text","org.matrix.msc1767.text":"are any of the other engines using bleeding-edge C++?"},"ts":1669819726101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CBk2J6ahwP5yeZm25tAQw8WI2hHsS29WdPFwVTB2mNU"},
{"content":{"body":"I haven't been paying attention to the C++ world much in the last... uh, decade or so, I guess","msgtype":"m.text","org.matrix.msc1767.text":"I haven't been paying attention to the C++ world much in the last... uh, decade or so, I guess"},"ts":1669819739638,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2BLHggBqaF_O-XwGng_V3YKnIsxlk1OrCOGuWBMLEZU"},
{"content":{"body":"i think we technically have c++20?","msgtype":"m.text","org.matrix.msc1767.text":"i think we technically have c++20?"},"ts":1669819760162,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8xkLIg9vbCnfawHvLwhE2ZsGrqr_atemkx-f6YX6_Yo"},
{"content":{"body":"whether we use it fully or not is another question","msgtype":"m.text","org.matrix.msc1767.text":"whether we use it fully or not is another question"},"ts":1669819768529,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$C-CUSww5mEFLbtApvvYaIYLk4bk8XvXgfTHparVr664"},
{"content":{"body":"mfbt has a lot of newish stuff used by sm","msgtype":"m.text","org.matrix.msc1767.text":"mfbt has a lot of newish stuff used by sm"},"ts":1669819769528,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$kx-a0qtkrILYr9moL0Op-DS_mqL3UrCSpHiz4ceUuFA"},
{"content":{"body":"I'm not certain if \"full C++20\" is a reasonable state at the moment? but I think WK is \"17 with a small selection of 20 things\"","msgtype":"m.text","org.matrix.msc1767.text":"I'm not certain if \"full C++20\" is a reasonable state at the moment? but I think WK is \"17 with a small selection of 20 things\""},"ts":1669820096152,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$W3pCfUHFmNTn-CvMjIUwOmk4TgNu4y8SUjvSYZJ4OVI"},
{"content":{"body":"i don't even know how to read bleeding edge C++","msgtype":"m.text","org.matrix.msc1767.text":"i don't even know how to read bleeding edge C++"},"ts":1669820167472,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9UbvuY9MVOTFNd57dR1hw0N3a2jeqEe_BHtF2FxgHxA"},
{"content":{"body":"there's so many useful things in 20","msgtype":"m.text","org.matrix.msc1767.text":"there's so many useful things in 20"},"ts":1669820193700,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$Qoi4EapKCgCykzhItwG3SWL171kas5exHL7kmLS90Ms"},
{"content":{"body":"we add lots of the useful library bits in our stl so we get them even in +03 ","msgtype":"m.text","org.matrix.msc1767.text":"we add lots of the useful library bits in our stl so we get them even in +03 "},"ts":1669820255603,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$kNQK94BOThfkTxD3iuaTZT4UwxbWMTD2rqt0fJRnREk"},
{"content":{"body":"\"signed integers are 2's complement\"","msgtype":"m.text","org.matrix.msc1767.text":"\"signed integers are 2's complement\""},"ts":1669820263678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pk66DQvNEJcbU9vppHX_oyHwVSGs7vezfp2cqPeh71w"},
{"content":{"body":"for real","msgtype":"m.text","org.matrix.msc1767.text":"for real"},"ts":1669820266814,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UjDSY-bqVevdO3L_48BopU4N50cyGT2NBByLI8YYpKo"},
{"content":{"body":"ostringstream::view() ftw","msgtype":"m.text","org.matrix.msc1767.text":"ostringstream::view() ftw"},"ts":1669820277185,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$yg3fttipp6LJ-_bv9PsxXOrE1hxxve5tTOThV3XokmQ"}
]