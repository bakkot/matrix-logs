[
{"content":{"body":"ðŸ¤”","msgtype":"m.text","org.matrix.msc1767.text":"ðŸ¤”"},"ts":1649320839544,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-aWGpGQSkBFCly6wpT5Baat82Kn5vUuZRY7mZHBoRmw"},
{"content":{"body":"take use of `AbortSignal` into the language without bring `EventTarget` into the language. How do you think this","format":"org.matrix.custom.html","formatted_body":"take use of <code>AbortSignal</code> into the language without bring <code>EventTarget</code> into the language. How do you think this","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"take use of `AbortSignal` into the language without bring `EventTarget` into the language. How do you think this","mimetype":"text/plain"},{"body":"take use of <code>AbortSignal</code> into the language without bring <code>EventTarget</code> into the language. How do you think this","mimetype":"text/html"}]},"ts":1649320867018,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MItc3bvEH3hY1J3uqoPGdFmfBHOKdqXg-fP1I9CZ4OM"},
{"content":{"body":"FYI, it happens at https://github.com/ajvincent/proposal-mass-proxy-revocation/pull/12","msgtype":"m.text","org.matrix.msc1767.text":"FYI, it happens at https://github.com/ajvincent/proposal-mass-proxy-revocation/pull/12"},"ts":1649320880562,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ZMp17KaiL2PFqWPOTXyxqliNHl8c0aL7BnZzQBLTgeA"},
{"content":{"body":"Jack Works: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting","mimetype":"text/html"}]},"ts":1649330325445,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$TOquv9usvbWWKMlDMyxbBaXueMuRvBu6glLWJGyZ3Ls"},
{"content":{"body":"Jack Works: also a slot containing a slot seems dubious","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: also a slot containing a slot seems dubious","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: also a slot containing a slot seems dubious","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: also a slot containing a slot seems dubious","mimetype":"text/html"}]},"ts":1649330389101,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$7MvZOwC_L2UL4NPbBkO6a5w_zL0McaqgNb_7uV-UWH4"},
{"content":{"body":"> <@annevk:mozilla.org> Jack Works: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting\n\nDOM contract uses async callback which we want to avoid","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TOquv9usvbWWKMlDMyxbBaXueMuRvBu6glLWJGyZ3Ls?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br /><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: why not use the contract from DOM? As in you hand the abort signal some set of steps to run upon aborting</blockquote></mx-reply>DOM contract uses async callback which we want to avoid","m.relates_to":{"m.in_reply_to":{"event_id":"$TOquv9usvbWWKMlDMyxbBaXueMuRvBu6glLWJGyZ3Ls"}},"msgtype":"m.text"},"ts":1649331903891,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qsuqmoCYUc3WAZw2dII_Ehs6o_mlOORoPSjaWBtv2yE"},
{"content":{"body":"And it's more dubious if we write ? Get(signal, \"addEventListener\")","msgtype":"m.text"},"ts":1649332144478,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eXqNQoqcLDF35wcUS9rKH1X_u_ZQC9fqJhHXB9yfFLU"},
{"content":{"body":"Jack Works: that would be dubious, but there's a non-script-exposed mechanism which is what I was referring to","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: that would be dubious, but there's a non-script-exposed mechanism which is what I was referring to","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: that would be dubious, but there's a non-script-exposed mechanism which is what I was referring to","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: that would be dubious, but there's a non-script-exposed mechanism which is what I was referring to","mimetype":"text/html"}]},"ts":1649333169687,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$DdSDQRq1scKWHDpxKkQzij48Q2h8cKOyNOsx8pSBuGc"},
{"content":{"body":"And if you want this to be useful beyond this API you'd need some kind of callback-style thing I'd think, not everything can lazily check whether the signal is aborted","msgtype":"m.text","org.matrix.msc1767.text":"And if you want this to be useful beyond this API you'd need some kind of callback-style thing I'd think, not everything can lazily check whether the signal is aborted"},"ts":1649333246279,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$XlU5ZBQkrxHX1jZi6LEjIrxBOJsw2GNoCZutuled3rk"},
{"content":{"body":"Yeah I agree. Since it will be much harder to design a general signal (with callback) I think it's somehow ok since we don't have anywhere else that requires a signal","msgtype":"m.text"},"ts":1649334842660,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5zRXCPmw1oL4iu74AgL5OBgg-YJWdRVtJM6XlFEyEIQ"},
{"content":{"body":"I've wanted to push cancellation forward, but I keep getting the same response from Domenic and he seems to have no interest in discussing the point further. ","format":"org.matrix.custom.html","formatted_body":"I've wanted to push cancellation forward, but I keep getting the same response from Domenic and he seems to have no interest in discussing the point further.","msgtype":"m.text"},"ts":1649340267841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cl83nuspd2bKblEx5-waCrD5g5dCx-R3Sdu12vW7TNo"},
{"content":{"body":"There are multiple issues with AbortController that make it not ideal for inclusion in ECMA-262","msgtype":"m.text"},"ts":1649340446450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mcO9bDhKcIL1x2PcFSkGz_ApsLgtFaqkP42mjTzMcwA"},
{"content":{"body":"> <@jackworks:matrix.org> Yeah I agree. Since it will be much harder to design a general signal (with callback) I think it's somehow ok since we don't have anywhere else that requires a signal\n\nThere are other places where it would be useful","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5zRXCPmw1oL4iu74AgL5OBgg-YJWdRVtJM6XlFEyEIQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br />Yeah I agree. Since it will be much harder to design a general signal (with callback) I think it's somehow ok since we don't have anywhere else that requires a signal</blockquote></mx-reply>There are other places where it would be useful","m.relates_to":{"m.in_reply_to":{"event_id":"$5zRXCPmw1oL4iu74AgL5OBgg-YJWdRVtJM6XlFEyEIQ"}},"msgtype":"m.text"},"ts":1649340495390,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5S-W_8NxcEn7a6KRaj_Ppq1YdDw4CI_fhCUJiIcNicU"},
{"content":{"body":"I think Domenic gave a reasonable way forward that Jack Works seems to be pursuing? You make the signal host-supplied and define a compatible not-script-visible contract with it.","format":"org.matrix.custom.html","formatted_body":"I think Domenic gave a reasonable way forward that <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> seems to be pursuing? You make the signal host-supplied and define a compatible not-script-visible contract with it.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think Domenic gave a reasonable way forward that Jack Works seems to be pursuing? You make the signal host-supplied and define a compatible not-script-visible contract with it.","mimetype":"text/plain"},{"body":"I think Domenic gave a reasonable way forward that <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> seems to be pursuing? You make the signal host-supplied and define a compatible not-script-visible contract with it.","mimetype":"text/html"}]},"ts":1649346730154,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$EKETSWJE8v4ZSRosHF1-AeaEP2hWwu6F6dLxZe8IS0w"},
{"content":{"body":"Wasn't part of Jack Works concern that AbortSignal is an async callback? IIRC, AbortSignal also uses EventTarget for abort registration, which holds onto the callback even after the signal is aborted, which can prevent GC","format":"org.matrix.custom.html","formatted_body":"Wasn't part of <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> concern that AbortSignal is an async callback? IIRC, AbortSignal also uses EventTarget for abort registration, which holds onto the callback even after the signal is aborted, which can prevent GC","msgtype":"m.text"},"ts":1649346913165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dRtDYszfXm96axE05RPX8g2U2K706JGj0cAWqV9Bvo8"},
{"content":{"body":"You can add a callback to an AbortSignal but you can also lazily check whether it's aborted. I think Jack Works said that for their thing the latter is sufficient.","format":"org.matrix.custom.html","formatted_body":"You can add a callback to an AbortSignal but you can also lazily check whether it's aborted. I think <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> said that for their thing the latter is sufficient.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You can add a callback to an AbortSignal but you can also lazily check whether it's aborted. I think Jack Works said that for their thing the latter is sufficient.","mimetype":"text/plain"},{"body":"You can add a callback to an AbortSignal but you can also lazily check whether it's aborted. I think <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> said that for their thing the latter is sufficient.","mimetype":"text/html"}]},"ts":1649346988267,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$VGULCQbXtd0k4FukKPQYS_Q2YnWquZCdfzCHr4JRYYQ"},
{"content":{"body":"The callback is a spec-concept btw, it's not exposed. Any event listeners would be user code.","msgtype":"m.text","org.matrix.msc1767.text":"The callback is a spec-concept btw, it's not exposed. Any event listeners would be user code."},"ts":1649347017209,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Lj34Dt9hKKKi3a872fwdNLZ970eNK2D7jyA9djL2VcI"},
{"content":{"body":"I was able to make a version of `@esfx/async-canceltoken` that works with the DOM but uses my proposed cancellation API, so I may end up going with Domenic's suggestion despite my reservations","format":"org.matrix.custom.html","formatted_body":"I was able to make a version of <code>@esfx/async-canceltoken</code> that works with the DOM but uses my proposed cancellation API, so I may end up going with Domenic's suggestion despite my reservations","msgtype":"m.text"},"ts":1649347049668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kyJ-XLu6Ysz7ag56mVSxdgT-OjdyHHhcWt0Mwh1xiaU"},
{"content":{"body":"But I find it very unfortunate we can't have an actual cancellation primitive in the core language because of this","msgtype":"m.text"},"ts":1649347093425,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CC3zTKxgHclEl_48Q7bdWiwz2Ch3LQj5JubCEMZTvTk"},
{"content":{"body":"(my \"compatible\" CancelToken just creates an AbortSignal and repoints the prototype so that it has the correct internal slots the DOM expects)","msgtype":"m.text"},"ts":1649347192841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1ZezKIwlCzZ-WGDsH7IzhOSY865dcJEInawDgTLGc7I"},
{"content":{"body":"It doesn't seem inconceivable for JS to embrace EventTarget one day, but I personally don't get super excited about artificial boundaries imposed by standards bodies ðŸ™‚ ","msgtype":"m.text","org.matrix.msc1767.text":"It doesn't seem inconceivable for JS to embrace EventTarget one day, but I personally don't get super excited about artificial boundaries imposed by standards bodies ðŸ™‚ "},"ts":1649347214374,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$zT0U9sYSvnOmxYGyv_yRQ-hJ8YRjyuAgKcKbAp84glk"},
{"content":{"body":"And, honestly, that might be an alternative to a host hook as well... ","format":"org.matrix.custom.html","formatted_body":"And, honestly, that might be an alternative to a host hook as well...","msgtype":"m.text"},"ts":1649347230387,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tYvvtfa5anXLAkfcsLsYeQQ0K3gQ6jY2TanKfiTcxgg"},
{"content":{"body":"It's not just EventTarget, it's the exceptions that are thrown as well. I had the same issue looking into bringing a portion of the Web crypto api to TC39 ","format":"org.matrix.custom.html","formatted_body":"It's not just EventTarget, it's the exceptions that are thrown as well. I had the same issue looking into bringing a portion of the Web crypto api to TC39","msgtype":"m.text"},"ts":1649347309262,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hqtwiI8E5ILJEQXN2DbUcb-Xo6RACsYeKV3XUavB6vU"},
{"content":{"body":"I'd like to bring a slew of async coordination primitive proposals to committee as well, but they need a cancellation primitive to be useful. ","format":"org.matrix.custom.html","formatted_body":"I'd like to bring a slew of async coordination primitive proposals to committee as well, but they need a cancellation primitive to be useful.","msgtype":"m.text"},"ts":1649347429084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q-eMl2z7nvC5tJiZDOYnilu65uVcW9iN69B5cOfAFBs"},
{"content":{"body":"About 70% of `@esfx/*` are prototypes and proofs-of-concept for existing and future proposals ","format":"org.matrix.custom.html","formatted_body":"About 70% of <code>@esfx/*</code> are prototypes and proofs-of-concept for existing and future proposals","msgtype":"m.text"},"ts":1649347540648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XC4AgknAVXTgAG6M9Jpkam5djZJyG6zp9qSw8GK8ax0"},
{"content":{"body":"> <@rbuckton:matrix.org> There are multiple issues with AbortController that make it not ideal for inclusion in ECMA-262\n\nYes. I cannot bring it into the language, but the massive proxy revocation needs a \"revoke controller\". The author of this proposal wants to add a synchronous revoke controller that is only used for Proxy revocation, but I don't want to have many different styles of controllers in the language meanwhile in the Host.\n\nThis is my answer, I didn't add it, but borrow it from the host","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mcO9bDhKcIL1x2PcFSkGz_ApsLgtFaqkP42mjTzMcwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />There are multiple issues with AbortController that make it not ideal for inclusion in ECMA-262</blockquote></mx-reply><p>Yes. I cannot bring it into the language, but the massive proxy revocation needs a &quot;revoke controller&quot;. The author of this proposal wants to add a synchronous revoke controller that is only used for Proxy revocation, but I don't want to have many different styles of controllers in the language meanwhile in the Host.</p>\n<p>This is my answer, I didn't add it, but borrow it from the host</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$mcO9bDhKcIL1x2PcFSkGz_ApsLgtFaqkP42mjTzMcwA"}},"msgtype":"m.text"},"ts":1649349288673,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UEg6odUfGMmm4HhakPVafNBrxi7KWyjhKFyO2YSYe0k"},
{"content":{"body":"> <@annevk:mozilla.org> The callback is a spec-concept btw, it's not exposed. Any event listeners would be user code.\n\nYes. In our case it is enough. Once aborted, the engine can revoke and GC all proxies.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Lj34Dt9hKKKi3a872fwdNLZ970eNK2D7jyA9djL2VcI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br />The callback is a spec-concept btw, it's not exposed. Any event listeners would be user code.</blockquote></mx-reply>Yes. In our case it is enough. Once aborted, the engine can revoke and GC all proxies.","m.relates_to":{"m.in_reply_to":{"event_id":"$Lj34Dt9hKKKi3a872fwdNLZ970eNK2D7jyA9djL2VcI"}},"msgtype":"m.text"},"ts":1649349535915,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7hdfizGVsWlLWryTS1C-Do5hpLmzNnMtoD9RLsitmKE"},
{"content":{"body":"> <@annevk:mozilla.org> It doesn't seem inconceivable for JS to embrace EventTarget one day, but I personally don't get super excited about artificial boundaries imposed by standards bodies ðŸ™‚ \n\nI heard EventTarget is heavily connected to the whole DOM stuff... ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zT0U9sYSvnOmxYGyv_yRQ-hJ8YRjyuAgKcKbAp84glk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@annevk:mozilla.org\">@annevk:mozilla.org</a><br />It doesn't seem inconceivable for JS to embrace EventTarget one day, but I personally don't get super excited about artificial boundaries imposed by standards bodies ðŸ™‚</blockquote></mx-reply>I heard EventTarget is heavily connected to the whole DOM stuff...","m.relates_to":{"m.in_reply_to":{"event_id":"$zT0U9sYSvnOmxYGyv_yRQ-hJ8YRjyuAgKcKbAp84glk"}},"msgtype":"m.text"},"ts":1649349626427,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vlTi4512fwMYV_fSGI48-HJLm0xHuzuNWMjp1SBr0tA"},
{"content":{"body":"> <@rbuckton:matrix.org> It's not just EventTarget, it's the exceptions that are thrown as well. I had the same issue looking into bringing a portion of the Web crypto api to TC39 \n\nYeah, DOMException right? ðŸ˜‚ Maybe \"throw a host defined error\" ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hqtwiI8E5ILJEQXN2DbUcb-Xo6RACsYeKV3XUavB6vU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />It's not just EventTarget, it's the exceptions that are thrown as well. I had the same issue looking into bringing a portion of the Web crypto api to TC39</blockquote></mx-reply>Yeah, DOMException right? ðŸ˜‚ Maybe &quot;throw a host defined error&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$hqtwiI8E5ILJEQXN2DbUcb-Xo6RACsYeKV3XUavB6vU"}},"msgtype":"m.text"},"ts":1649349704722,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$WWHfgUBnCLb_b6AcGRyxmjyAoom3zilXh8kVP96n5p8"},
{"content":{"body":"(https://dom.spec.whatwg.org/#interface-eventtarget isn't really, though some stuff could be abstracted more I suppose.)","msgtype":"m.text","org.matrix.msc1767.text":"(https://dom.spec.whatwg.org/#interface-eventtarget isn't really, though some stuff could be abstracted more I suppose.)"},"ts":1649349976559,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$SYB3DYWH9eaubY72Bk9KJvHm8EHEqUPDMztInVYhZ7k"},
{"content":{"body":"But fair point about DOMException, I wish they had used TypeError for everything, but alas, Java was important to the W3C back in the day.","msgtype":"m.text","org.matrix.msc1767.text":"But fair point about DOMException, I wish they had used TypeError for everything, but alas, Java was important to the W3C back in the day."},"ts":1649350033474,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$ybuywff5kxdsiH508kC350ISIeTGUSVPZ8LRvuq7aJg"},
{"content":{"body":"> <@jackworks:matrix.org> I heard EventTarget is heavily connected to the whole DOM stuff...\n\nIt's pretty easy to implement in a DOM-less environment. We do it in Deno, and Node does it too. There is just no bubbling then.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vlTi4512fwMYV_fSGI48-HJLm0xHuzuNWMjp1SBr0tA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I heard EventTarget is heavily connected to the whole DOM stuff...</blockquote></mx-reply>It's pretty easy to implement in a DOM-less environment. We do it in Deno, and Node does it too. There is just no bubbling then.","m.relates_to":{"m.in_reply_to":{"event_id":"$vlTi4512fwMYV_fSGI48-HJLm0xHuzuNWMjp1SBr0tA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> I heard EventTarget is heavily connected to the whole DOM stuff...\n\nIt's pretty easy to implement in a DOM-less environment. We do it in Deno, and Node does it too. There is just no bubbling then.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vlTi4512fwMYV_fSGI48-HJLm0xHuzuNWMjp1SBr0tA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I heard EventTarget is heavily connected to the whole DOM stuff...</blockquote></mx-reply>It's pretty easy to implement in a DOM-less environment. We do it in Deno, and Node does it too. There is just no bubbling then.","mimetype":"text/html"}]},"ts":1649350034302,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$oHH6arqaJNcurLhPcR9XSfgt7dlkmb1L1PDva9UBmLg"},
{"content":{"body":"And bubbling is somewhat abstracted, just not userland-exposed atm","msgtype":"m.text","org.matrix.msc1767.text":"And bubbling is somewhat abstracted, just not userland-exposed atm"},"ts":1649351085813,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$Ogk-OmOtWPtQZ3IXomzroDskFlQ6pDJIH_bxgmyx_-0"},
{"content":{"body":"rbuckton: FWIW, I tend to agree with Domenic that we don't want competing primitives. I see where you're coming from, but JS does not exist in a vacuum. We've had similar arguments about TextEncoder/TextDecoder and they'll undoubtedly resurface from time-to-time. In practice Deno and Node.js have demonstrated that these APIs can be adopted by other non-browser hosts.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: FWIW, I tend to agree with Domenic that we don't want competing primitives. I see where you're coming from, but JS does not exist in a vacuum. We've had similar arguments about TextEncoder/TextDecoder and they'll undoubtedly resurface from time-to-time. In practice Deno and Node.js have demonstrated that these APIs can be adopted by other non-browser hosts.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: FWIW, I tend to agree with Domenic that we don't want competing primitives. I see where you're coming from, but JS does not exist in a vacuum. We've had similar arguments about TextEncoder/TextDecoder and they'll undoubtedly resurface from time-to-time. In practice Deno and Node.js have demonstrated that these APIs can be adopted by other non-browser hosts.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: FWIW, I tend to agree with Domenic that we don't want competing primitives. I see where you're coming from, but JS does not exist in a vacuum. We've had similar arguments about TextEncoder/TextDecoder and they'll undoubtedly resurface from time-to-time. In practice Deno and Node.js have demonstrated that these APIs can be adopted by other non-browser hosts.","mimetype":"text/html"}]},"ts":1649352001768,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$pzhy6MbAaqUA4IefJg-b4iBjJVQAOsEhNAwhxD3L5FQ"},
{"content":{"body":"Its unfortunate that AbortSignal couldn't have been written as a primitive that *didn't* leverage EventTarget, because it uses almost none of the EventTarget capabilities, and those that it does use are problematic (re: the GC issue)","format":"org.matrix.custom.html","formatted_body":"Its unfortunate that AbortSignal couldn't have been written as a primitive that <em>didn't</em> leverage EventTarget, because it uses almost none of the EventTarget capabilities, and those that it does use are problematic (re: the GC issue)","msgtype":"m.text"},"ts":1649352418120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BqZIoms7Zj8bAqiGX0MydWCBNuJuGsiXfplbBO8wc7k"},
{"content":{"body":"Before `Promise` was adopted into ECMA-262 it was originally proposed as `Future` for DOM, and `Future` didn't leverage EventTarget (likely due to the prevalence of Promise/A+ libraries), but at least there was precedent for a non-EventTarget-based callback mechanism","format":"org.matrix.custom.html","formatted_body":"Before <code>Promise</code> was adopted into ECMA-262 it was originally proposed as <code>Future</code> for DOM, and <code>Future</code> didn't leverage EventTarget (likely due to the prevalence of Promise/A+ libraries), but at least there was precedent for a non-EventTarget-based callback mechanism","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Before `Promise` was adopted into ECMA-262 it was originally proposed as `Future` for DOM, and `Future` didn't leverage EventTarget (likely due to the prevalence of Promise/A+ libraries), but at least there was precedent for a non-EventTarget-based callback mechanism","mimetype":"text/plain"},{"body":"Before <code>Promise</code> was adopted into ECMA-262 it was originally proposed as <code>Future</code> for DOM, and <code>Future</code> didn't leverage EventTarget (likely due to the prevalence of Promise/A+ libraries), but at least there was precedent for a non-EventTarget-based callback mechanism","mimetype":"text/html"}]},"ts":1649352534911,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9A2QyyKPPQJjFZaN6SNijsexSX3kCoffM41G-Az5eME"},
{"content":{"body":"Yeah, I remember Alex made an attempt to bypass TC39.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I remember Alex made an attempt to bypass TC39."},"ts":1649352583157,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$X1YK402lnx1Zo6AbHf2yf7I9MNqZ7LZIQu7V6bJzGwE"},
{"content":{"body":"I know that our boss at Agoric, Dean Tribble had some experience with something like an abort primitive in Microsoftâ€™s Midori. His opinion in general is that there should be a primitive for a cancellation token, since it affords certain optimization oportunities.","msgtype":"m.text","org.matrix.msc1767.text":"I know that our boss at Agoric, Dean Tribble had some experience with something like an abort primitive in Microsoftâ€™s Midori. His opinion in general is that there should be a primitive for a cancellation token, since it affords certain optimization oportunities."},"ts":1649352643983,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5k0weJv0jU01ARql7FlElpAoyLI5P1RZTuo8s9--p-g"},
{"content":{"body":"I understand there was frustration at the slow pace of TC39 wrt cancellation (I dealt with it myself when I took up the banner for a cancellation proposal), but I do think we could have resolved it back in 2017/2018.","msgtype":"m.text","org.matrix.msc1767.text":"I understand there was frustration at the slow pace of TC39 wrt cancellation (I dealt with it myself when I took up the banner for a cancellation proposal), but I do think we could have resolved it back in 2017/2018."},"ts":1649352659689,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rSrKz6saZLm19N7aOKpntmUNxcPqYZ9f2GI-esJ7f5g"},
{"content":{"body":"Same. I tried to pave a cow path for cancellation in Q, but it proved to be a bad design. Weâ€™re in a better place with AbortController than we would have been getting cancellation into promises.","msgtype":"m.text","org.matrix.msc1767.text":"Same. I tried to pave a cow path for cancellation in Q, but it proved to be a bad design. Weâ€™re in a better place with AbortController than we would have been getting cancellation into promises."},"ts":1649352701389,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SjFPR0OpWIN29_YpKErGbe928ljr-Yoxq2nsawAtTtM"},
{"content":{"body":"The cancellation proposal explainer has a number of quotes from Dean about cancellation.","msgtype":"m.text","org.matrix.msc1767.text":"The cancellation proposal explainer has a number of quotes from Dean about cancellation."},"ts":1649352717764,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5-FonpDRhlkf232sQblmGzU5o_MmbQg87UkTtTOCfIU"},
{"content":{"body":"I was opposed to cancelable promises from the get-go, hence https://github.com/tc39/proposal-cancellation.","msgtype":"m.text","org.matrix.msc1767.text":"I was opposed to cancelable promises from the get-go, hence https://github.com/tc39/proposal-cancellation."},"ts":1649352760633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YKWmU0D9FkcCVd3vYed6p2yRnJVM0MGaCKieacBtzlI"},
{"content":{"body":"The two things that held up cancellation were: a) WHATWG pushing hard on AbortController while I was trying to get CancelToken through committee, and b) Yehuda wanting some kind of syntax and automatic flow-through ","msgtype":"m.text","org.matrix.msc1767.text":"The two things that held up cancellation were: a) WHATWG pushing hard on AbortController while I was trying to get CancelToken through committee, and b) Yehuda wanting some kind of syntax and automatic flow-through "},"ts":1649352862624,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VdngeXvM_wUprWerHKM7jguksKVkhjj-vUhvJB--rCU"},
{"content":{"body":"As was Mark. I had to learn the hard way as usual, in order to know how to articulate why it was a bad idea: promises broadcast to multiple consumers, so no individual producer should be in a position to interfere with all of the consumers.","msgtype":"m.text","org.matrix.msc1767.text":"As was Mark. I had to learn the hard way as usual, in order to know how to articulate why it was a bad idea: promises broadcast to multiple consumers, so no individual producer should be in a position to interfere with all of the consumers."},"ts":1649352872173,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rlj2JsizOJ2YWe-fBb2d8Tb3yqqzY8nyX9S620QQp1o"},
{"content":{"body":"And the caller of the async operation should control when something can be canceled, not the consumers of the result. If you need the consumer to have that responsibility, you let them pass on the token explicitly (which is also why I was opposed to automatic flow-through)","msgtype":"m.text","org.matrix.msc1767.text":"And the caller of the async operation should control when something can be canceled, not the consumers of the result. If you need the consumer to have that responsibility, you let them pass on the token explicitly (which is also why I was opposed to automatic flow-through)"},"ts":1649352940337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$acbVFGIKePcEsfasTnYBkTiomP8Rt7xE5oDTQHzgdW8"},
{"content":{"body":"Yeah, weâ€™re on the same page.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, weâ€™re on the same page."},"ts":1649352970245,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_2AsFkfDGmmxgkzjnzdLSyw4Bhal394cB-FyMMr2UO8"},
{"content":{"body":"I also naively believed all this could be done by passing a promise-to-throw as a cancel token, but Deanâ€™s pretty adamant about being able to synchronously test the token. Weâ€™re all adamantly opposed to synchronous notification.","msgtype":"m.text","org.matrix.msc1767.text":"I also naively believed all this could be done by passing a promise-to-throw as a cancel token, but Deanâ€™s pretty adamant about being able to synchronously test the token. Weâ€™re all adamantly opposed to synchronous notification."},"ts":1649353019548,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rg_oxEf2jBEkJA466fYLvyAPy9ha8fDS5KIyadPc5ss"},
{"content":{"body":"And alsoâ€¦opportunities to optimize if itâ€™s special.","msgtype":"m.text","org.matrix.msc1767.text":"And alsoâ€¦opportunities to optimize if itâ€™s special."},"ts":1649353042296,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$w_0hYvGVerOYgY7d9yJZnlP5f7qlmelJBzwQaCxLDko"},
{"content":{"body":"This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing.","msgtype":"m.text","org.matrix.msc1767.text":"This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing."},"ts":1649353080880,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WKX3urW8j6VMr3NWrhVOd97JZxfriU4MUrRqAGfi9sw"},
{"content":{"body":"I would be fine with AbortSignal (and a host hook) if it didn't hold onto the registered callback after the signal was canceled (the GC issue). I know you can pass something like `{ once: true }` to `addEventListener`, but that should be the default behavior for an event that can fire at most once (aside from user's manually dispatching the event)\n","format":"org.matrix.custom.html","formatted_body":"I would be fine with AbortSignal (and a host hook) if it didn't hold onto the registered callback after the signal was canceled (the GC issue). I know you can pass something like <code>{ once: true }</code> to <code>addEventListener</code>, but that should be the default behavior for an event that can fire at most once (aside from user's manually dispatching the event)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would be fine with AbortSignal (and a host hook) if it didn't hold onto the registered callback after the signal was canceled (the GC issue). I know you can pass something like `{ once: true }` to `addEventListener`, but that should be the default behavior for an event that can fire at most once (aside from user's manually dispatching the event)\n","mimetype":"text/plain"},{"body":"I would be fine with AbortSignal (and a host hook) if it didn't hold onto the registered callback after the signal was canceled (the GC issue). I know you can pass something like <code>{ once: true }</code> to <code>addEventListener</code>, but that should be the default behavior for an event that can fire at most once (aside from user's manually dispatching the event)","mimetype":"text/html"}]},"ts":1649353111996,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D1N4GPaluVZrmPAOEGl3oMIdV87ciaJ9AzbjezC7UTw"},
{"content":{"body":"> <@kriskowal:matrix.org> This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing.\n\nThat's also how the topic came up here :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WKX3urW8j6VMr3NWrhVOd97JZxfriU4MUrRqAGfi9sw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing.</blockquote></mx-reply>That's also how the topic came up here :)","m.relates_to":{"m.in_reply_to":{"event_id":"$WKX3urW8j6VMr3NWrhVOd97JZxfriU4MUrRqAGfi9sw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing.\n\nThat's also how the topic came up here :)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WKX3urW8j6VMr3NWrhVOd97JZxfriU4MUrRqAGfi9sw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>This topic came up at recent SES meetings regarding bulk proxy revocation, by the by. Bradley and Alex have a proposal brewing.</blockquote></mx-reply>That's also how the topic came up here :)","mimetype":"text/html"}]},"ts":1649353126751,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xW9wp5czZ6zASwBOziFj0tCmjEtiRdcQ8bRcD2Dg7HM"},
{"content":{"body":"AbortController and AbortSignal are getting close to the API I proposed for CancelToken/Source back in 2018, but AbortSignal still feels way to heavy to me due to `EventTarget`.","format":"org.matrix.custom.html","formatted_body":"AbortController and AbortSignal are getting close to the API I proposed for CancelToken/Source back in 2018, but AbortSignal still feels way to heavy to me due to <code>EventTarget</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"AbortController and AbortSignal are getting close to the API I proposed for CancelToken/Source back in 2018, but AbortSignal still feels way to heavy to me due to `EventTarget`.","mimetype":"text/plain"},{"body":"AbortController and AbortSignal are getting close to the API I proposed for CancelToken/Source back in 2018, but AbortSignal still feels way to heavy to me due to <code>EventTarget</code>.","mimetype":"text/html"}]},"ts":1649353228993,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bDKNDZ5CTiSjttPUgP7_PzE9e37kMCYinVpE6dARPRg"},
{"content":{"body":"Agreed.","msgtype":"m.text","org.matrix.msc1767.text":"Agreed."},"ts":1649353267188,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WNOJ3PAo5fKKwdAs34JXVlc6mK9QtMz0undbF_4-SNQ"},
{"content":{"body":"I may just end up proposing the host hook approach for cancellation. If we ever decide an actual primitive is worthwhile (despite the duplication between 262 and DOM), we can always change it.","msgtype":"m.text","org.matrix.msc1767.text":"I may just end up proposing the host hook approach for cancellation. If we ever decide an actual primitive is worthwhile (despite the duplication between 262 and DOM), we can always change it."},"ts":1649353433070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qAEO_fKFXxvEN5n7dReASubBuUgKrmdEE7Sq2wmW-lE"},
{"content":{"body":"My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype","msgtype":"m.text","org.matrix.msc1767.text":"My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype"},"ts":1649353639326,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qr_RX-Z7TXb9-OXU07o54BJAY3tMXK_y_JEu3BeiuPQ"},
{"content":{"body":" * My current approach to \"compatibility\" for CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype","m.new_content":{"body":"My current approach to \"compatibility\" for CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype","msgtype":"m.text","org.matrix.msc1767.text":"My current approach to \"compatibility\" for CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype"},"m.relates_to":{"event_id":"$Qr_RX-Z7TXb9-OXU07o54BJAY3tMXK_y_JEu3BeiuPQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * My current approach to \"compatibility\" for CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype"},"ts":1649353643811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GOb67uu_FSRi4BKtVrgJrwSlqKxSPnaXPdxrjyivH1o"},
{"content":{"body":" * My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype","m.new_content":{"body":"My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype","msgtype":"m.text","org.matrix.msc1767.text":"My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype"},"m.relates_to":{"event_id":"$Qr_RX-Z7TXb9-OXU07o54BJAY3tMXK_y_JEu3BeiuPQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * My current approach to \"compatibility\" for my own CancelToken (using an AbortSignal but changing its prototype) works with that approach in the DOM and NodeJS, since both use instance-specific state rather than calling methods on the prototype"},"ts":1649353653615,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SBLZ6380qBb7yPYI13Ec6VCZhW087-YooMPbOl8NSTA"},
{"content":{"body":"And can coÃ«xist under different names in every options bag that accepts either. Yeah, itâ€™s a good approach.","msgtype":"m.text","org.matrix.msc1767.text":"And can coÃ«xist under different names in every options bag that accepts either. Yeah, itâ€™s a good approach."},"ts":1649353681593,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JfOWMJRaJpnHRn7EmR3FhZYje2tVONnc4283RafIO3c"},
{"content":{"body":"I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?","msgtype":"m.text","org.matrix.msc1767.text":"I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?"},"ts":1649353740675,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$l6VbOWAjjA-k3XLcI1g_WBYPDOiVy5X-F5iJ_VycU0k"},
{"content":{"body":"I do wonder if it makes sense to define a Host hooks for the whole thing, or move some of the logic into ECMA-262 with a host hook for allocating the prototype chain. That would allow us to internally spec and use cancellation without relying on a host hook","msgtype":"m.text","org.matrix.msc1767.text":"I do wonder if it makes sense to define a Host hooks for the whole thing, or move some of the logic into ECMA-262 with a host hook for allocating the prototype chain. That would allow us to internally spec and use cancellation without relying on a host hook"},"ts":1649353855231,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$euUKPvkPyWDcB2l3wX2vVvVvTTCATdae4SmIxAzGO00"},
{"content":{"body":"> <@kriskowal:matrix.org> I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?\n\nI'd have to look at the proposal, but it sounds likely. I consider cancellation a \"primitive\" for a reason. It's not directly tied to async execution/promises, but is a general purpose mechanism for canceling things.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l6VbOWAjjA-k3XLcI1g_WBYPDOiVy5X-F5iJ_VycU0k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?</blockquote></mx-reply>I'd have to look at the proposal, but it sounds likely. I consider cancellation a &quot;primitive&quot; for a reason. It's not directly tied to async execution/promises, but is a general purpose mechanism for canceling things.","m.relates_to":{"m.in_reply_to":{"event_id":"$l6VbOWAjjA-k3XLcI1g_WBYPDOiVy5X-F5iJ_VycU0k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?\n\nI'd have to look at the proposal, but it sounds likely. I consider cancellation a \"primitive\" for a reason. It's not directly tied to async execution/promises, but is a general purpose mechanism for canceling things.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l6VbOWAjjA-k3XLcI1g_WBYPDOiVy5X-F5iJ_VycU0k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I did not take the time to scroll up. Is there a possibility that cancel token and bulk revocation token are the same thing?</blockquote></mx-reply>I'd have to look at the proposal, but it sounds likely. I consider cancellation a &quot;primitive&quot; for a reason. It's not directly tied to async execution/promises, but is a general purpose mechanism for canceling things.","mimetype":"text/html"}]},"ts":1649353921468,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Jx0hK-6U-UDHi33KJeFsDH4WB0zlDvarBEYOH-jlx_0"},
{"content":{"body":"I think the issue with using AbortSignal for proxy revocation is the async callback nature of EventTarget. When you revoke a proxy you want it revoked immediately. Yes, a proxy can check if the AbortSignal has been aborted when the proxy is used, but that still introduces GC issues.","msgtype":"m.text","org.matrix.msc1767.text":"I think the issue with using AbortSignal for proxy revocation is the async callback nature of EventTarget. When you revoke a proxy you want it revoked immediately. Yes, a proxy can check if the AbortSignal has been aborted when the proxy is used, but that still introduces GC issues."},"ts":1649354004293,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$70l5bDVohYJcJnCXqyAb0TeE4lFoAAz9_3ATNdkDYhE"},
{"content":{"body":"Ideally, when you would use `abort` for bulk revocation, not only should everything be revoked immediately but you should be able to clean up references to targets and proxy handlers so they can be garbage collected.","format":"org.matrix.custom.html","formatted_body":"Ideally, when you would use <code>abort</code> for bulk revocation, not only should everything be revoked immediately but you should be able to clean up references to targets and proxy handlers so they can be garbage collected.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ideally, when you would use `abort` for bulk revocation, not only should everything be revoked immediately but you should be able to clean up references to targets and proxy handlers so they can be garbage collected.","mimetype":"text/plain"},{"body":"Ideally, when you would use <code>abort</code> for bulk revocation, not only should everything be revoked immediately but you should be able to clean up references to targets and proxy handlers so they can be garbage collected.","mimetype":"text/html"}]},"ts":1649354058887,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZN5Ptxj3zslveHa2rMxq9h3XbrSEsGZZ7sQb7Nl9JOU"},
{"content":{"body":"You could do both, but if EventTarget callbacks are async, there's a delay in that cleanup.","msgtype":"m.text","org.matrix.msc1767.text":"You could do both, but if EventTarget callbacks are async, there's a delay in that cleanup."},"ts":1649354102795,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kE7dOTLIZRGaXSMu0_X06QUJXlgog1-lSbk9l1PunEI"},
{"content":{"body":"Agreed. I think weâ€™re aligned and would support your proposal.","msgtype":"m.text","org.matrix.msc1767.text":"Agreed. I think weâ€™re aligned and would support your proposal."},"ts":1649354114095,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XKXGzroiBG3pxd0BaNi_Hpe7037lavyeaCbnkNtls-Y"},
{"content":{"body":"Something could be spec'd internally that could support both sync abort and deferred callbacks, with host hooks for things the DOM needs","msgtype":"m.text","org.matrix.msc1767.text":"Something could be spec'd internally that could support both sync abort and deferred callbacks, with host hooks for things the DOM needs"},"ts":1649354163999,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jEmEx-xlvzkFukuhUF9rSW81k_YU61zu_C2rQb0MJm4"},
{"content":{"body":"It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include 'no'","msgtype":"m.text","org.matrix.msc1767.text":"It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include 'no'"},"ts":1649354196338,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DlvjvOI3VbFNef9MClgaq_KmKpesTp7sozPaMp3Apas"},
{"content":{"body":"So maybe user code can't have synchronous notification of cancellation, but spec operations could.","msgtype":"m.text","org.matrix.msc1767.text":"So maybe user code can't have synchronous notification of cancellation, but spec operations could."},"ts":1649354232937,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cnV22N4ssPBiYPO3gT1uYtCmCC0-5SaznurgmPVN1Bs"},
{"content":{"body":"> <@kriskowal:matrix.org> It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include 'no'\n\nIs there something specific I should be looking at for these topics?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DlvjvOI3VbFNef9MClgaq_KmKpesTp7sozPaMp3Apas?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include &#39;no&#39;</blockquote></mx-reply>Is there something specific I should be looking at for these topics?","m.relates_to":{"m.in_reply_to":{"event_id":"$DlvjvOI3VbFNef9MClgaq_KmKpesTp7sozPaMp3Apas"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include 'no'\n\nIs there something specific I should be looking at for these topics?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DlvjvOI3VbFNef9MClgaq_KmKpesTp7sozPaMp3Apas?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It might also be worth scanning ahead for how deadline, timeout, and distributed context propagation might work with your primitive. Valid answers include &#39;no&#39;</blockquote></mx-reply>Is there something specific I should be looking at for these topics?","mimetype":"text/html"}]},"ts":1649354264120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jO9ut_L6OclsmfhZtjYvRoJRPVVFg1GiT0IzzdlBrmM"},
{"content":{"body":"But derivation of child contexts and propagation of cancelation to children but not to parents would be a useful primitive. Also being able to walk the parent chain.","msgtype":"m.text","org.matrix.msc1767.text":"But derivation of child contexts and propagation of cancelation to children but not to parents would be a useful primitive. Also being able to walk the parent chain."},"ts":1649354277076,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pvoyIzlxitqJPjhhEOabfFsDO4SSGd-RqqDCx6QevfY"},
{"content":{"body":"Yeah, Go has a `context` package that it uses for cancelation propagation and all these other things.","format":"org.matrix.custom.html","formatted_body":"Yeah, Go has a <code>context</code> package that it uses for cancelation propagation and all these other things.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, Go has a `context` package that it uses for cancelation propagation and all these other things.","mimetype":"text/plain"},{"body":"Yeah, Go has a <code>context</code> package that it uses for cancelation propagation and all these other things.","mimetype":"text/html"}]},"ts":1649354301549,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Qt7k3nei1UpHtglv5SJAn_Oy2NUBXyItNuWn-IuEmvA"},
{"content":{"body":"I'm not sure about walking the parent chain, unless its only walking the parent signals (and not the sources/controllers)","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure about walking the parent chain, unless its only walking the parent signals (and not the sources/controllers)"},"ts":1649354309956,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XIyOk6rgXGYa_ajB3FeDQm6qx4Ct31nOUtW1bYpDlTA"},
{"content":{"body":"The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers.","msgtype":"m.text","org.matrix.msc1767.text":"The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers."},"ts":1649354317858,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gzzKTS7b7MsSB9wlIJ0syCnpsIQ-jR8aVQtgKsUz_qI"},
{"content":{"body":"Yes, just the signals.","msgtype":"m.text","org.matrix.msc1767.text":"Yes, just the signals."},"ts":1649354334012,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-ZV3nm1ftacGvMlaUFqRSTpKg0FDK86nYwS_DRdDBeE"},
{"content":{"body":"https://pkg.go.dev/context","msgtype":"m.text","org.matrix.msc1767.text":"https://pkg.go.dev/context"},"ts":1649354347463,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LUxLa2XdYmEwrQ5qUcu_7HynTbKoplH0ycuQ7gBxhGk"},
{"content":{"body":"> <@kriskowal:matrix.org> The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers.\n\nCan you expand on this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gzzKTS7b7MsSB9wlIJ0syCnpsIQ-jR8aVQtgKsUz_qI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers.</blockquote></mx-reply>Can you expand on this?","m.relates_to":{"m.in_reply_to":{"event_id":"$gzzKTS7b7MsSB9wlIJ0syCnpsIQ-jR8aVQtgKsUz_qI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers.\n\nCan you expand on this?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gzzKTS7b7MsSB9wlIJ0syCnpsIQ-jR8aVQtgKsUz_qI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>The one thing weâ€™d want to do differently for sure would keeping the prototype powerless wrt timers.</blockquote></mx-reply>Can you expand on this?","mimetype":"text/html"}]},"ts":1649354376153,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b2f4GglaeVinVZIDtUgf1acfIRoVtx9iXBgLC1VzYDo"},
{"content":{"body":"Yeah, suppose we had `token`, we would not want `const {cancel, token: childToken} = token.withTimeout(100)` because that would mean `Token.prototype.withTimeout` would provide a timing side-channel thatâ€™s hard to scour in a `lockdown()`. We already do this kind of work for `Date.now` and `Math.random`, but not growing that burden is ideal. For this reason, thereâ€™s no reasonable way to get `Intl` into a lockdown environment. The API has to be different almost entirely so the prototype canâ€™t be shared. Something like `Token.withTimeout(token, ms)` is better for this purpose.","format":"org.matrix.custom.html","formatted_body":"Yeah, suppose we had <code>token</code>, we would not want <code>const {cancel, token: childToken} = token.withTimeout(100)</code> because that would mean <code>Token.prototype.withTimeout</code> would provide a timing side-channel thatâ€™s hard to scour in a <code>lockdown()</code>. We already do this kind of work for <code>Date.now</code> and <code>Math.random</code>, but not growing that burden is ideal. For this reason, thereâ€™s no reasonable way to get <code>Intl</code> into a lockdown environment. The API has to be different almost entirely so the prototype canâ€™t be shared. Something like <code>Token.withTimeout(token, ms)</code> is better for this purpose.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, suppose we had `token`, we would not want `const {cancel, token: childToken} = token.withTimeout(100)` because that would mean `Token.prototype.withTimeout` would provide a timing side-channel thatâ€™s hard to scour in a `lockdown()`. We already do this kind of work for `Date.now` and `Math.random`, but not growing that burden is ideal. For this reason, thereâ€™s no reasonable way to get `Intl` into a lockdown environment. The API has to be different almost entirely so the prototype canâ€™t be shared. Something like `Token.withTimeout(token, ms)` is better for this purpose.","mimetype":"text/plain"},{"body":"Yeah, suppose we had <code>token</code>, we would not want <code>const {cancel, token: childToken} = token.withTimeout(100)</code> because that would mean <code>Token.prototype.withTimeout</code> would provide a timing side-channel thatâ€™s hard to scour in a <code>lockdown()</code>. We already do this kind of work for <code>Date.now</code> and <code>Math.random</code>, but not growing that burden is ideal. For this reason, thereâ€™s no reasonable way to get <code>Intl</code> into a lockdown environment. The API has to be different almost entirely so the prototype canâ€™t be shared. Something like <code>Token.withTimeout(token, ms)</code> is better for this purpose.","mimetype":"text/html"}]},"ts":1649354518349,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$390y2AvkiiF0DWzcnd-QgVzSPpNMvoo7JCRrA-lz0iQ"},
{"content":{"body":"Pardon, `const childToken = token.withTimeout(ms)` and `const {cancel, childToken} = token.spawn()` is a more coherent strawman.","format":"org.matrix.custom.html","formatted_body":"Pardon, <code>const childToken = token.withTimeout(ms)</code> and <code>const {cancel, childToken} = token.spawn()</code> is a more coherent strawman.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pardon, `const childToken = token.withTimeout(ms)` and `const {cancel, childToken} = token.spawn()` is a more coherent strawman.","mimetype":"text/plain"},{"body":"Pardon, <code>const childToken = token.withTimeout(ms)</code> and <code>const {cancel, childToken} = token.spawn()</code> is a more coherent strawman.","mimetype":"text/html"}]},"ts":1649354566815,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7ZU3hJIx3GXPVECQvSKcc_6Vg9japJu-xS4_ybQR9uE"},
{"content":{"body":"In any case, `withTimeout` is trivial to implement in userspace in terms of `token`, as long as you have something like `token.spawn()` to create a child that gets synchronously cancelled when its parent is cancelled.","format":"org.matrix.custom.html","formatted_body":"In any case, <code>withTimeout</code> is trivial to implement in userspace in terms of <code>token</code>, as long as you have something like <code>token.spawn()</code> to create a child that gets synchronously cancelled when its parent is cancelled.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In any case, `withTimeout` is trivial to implement in userspace in terms of `token`, as long as you have something like `token.spawn()` to create a child that gets synchronously cancelled when its parent is cancelled.","mimetype":"text/plain"},{"body":"In any case, <code>withTimeout</code> is trivial to implement in userspace in terms of <code>token</code>, as long as you have something like <code>token.spawn()</code> to create a child that gets synchronously cancelled when its parent is cancelled.","mimetype":"text/html"}]},"ts":1649354677330,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GHGb5jVm1QegB-Dg36_lzAx9O_GqGX5_c-H2UR_E1zM"},
{"content":{"body":"Tragically, what you end up with is a subset of a Promise implementation, but that particular subset is good because it can be sync where Promise cannot ðŸ˜…","msgtype":"m.text","org.matrix.msc1767.text":"Tragically, what you end up with is a subset of a Promise implementation, but that particular subset is good because it can be sync where Promise cannot ðŸ˜…"},"ts":1649354757527,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ir1idwTEKbKphVkGnhfrrFlQGPhjnaczaGXBmuam2uk"},
{"content":{"body":"The way I do it in `@esfx/async-canceltoken` would be something like:\n\n```js\nconst timeoutToken = CancelToken.timeout(ms);\nconst childToken = CancelToken.race([token, timeoutToken]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>The way I do it in <code>@esfx/async-canceltoken</code> would be something like:</p>\n<pre><code class=\"language-js\">const timeoutToken = CancelToken.timeout(ms);\nconst childToken = CancelToken.race([token, timeoutToken]);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The way I do it in `@esfx/async-canceltoken` would be something like:\n\n```js\nconst timeoutToken = CancelToken.timeout(ms);\nconst childToken = CancelToken.race([token, timeoutToken]);\n```","mimetype":"text/plain"},{"body":"<p>The way I do it in <code>@esfx/async-canceltoken</code> would be something like:</p>\n<pre><code class=\"language-js\">const timeoutToken = CancelToken.timeout(ms);\nconst childToken = CancelToken.race([token, timeoutToken]);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1649354760605,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xa9ms7blfFemQmJENlrbnaxQRKa4SIgvJG5chxhrqHo"},
{"content":{"body":"Or just\n```js\nconst childToken = CancelToken.race([token, CancelToken.timeout(ms)]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Or just</p>\n<pre><code class=\"language-js\">const childToken = CancelToken.race([token, CancelToken.timeout(ms)]);\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or just\n```js\nconst childToken = CancelToken.race([token, CancelToken.timeout(ms)]);\n```","mimetype":"text/plain"},{"body":"<p>Or just</p>\n<pre><code class=\"language-js\">const childToken = CancelToken.race([token, CancelToken.timeout(ms)]);\n</code></pre>\n","mimetype":"text/html"}]},"ts":1649354812061,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kho_Hq5rt3ooQrWQGRnB_cg-gY01jBf8L192HS7XzkA"},
{"content":{"body":"No new source is created in this case.","msgtype":"m.text","org.matrix.msc1767.text":"No new source is created in this case."},"ts":1649354839147,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5PgVjzYgQVfNuGloHLgvSgZGVAAnIgMZ0zEkrpIqUiA"},
{"content":{"body":"Yeah, likewise, itâ€™s analogous to `Promise.race([Promise.delay(ms, context), context])`, where `Promise.delay` is also cancellable.","format":"org.matrix.custom.html","formatted_body":"Yeah, likewise, itâ€™s analogous to <code>Promise.race([Promise.delay(ms, context), context])</code>, where <code>Promise.delay</code> is also cancellable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, likewise, itâ€™s analogous to `Promise.race([Promise.delay(ms, context), context])`, where `Promise.delay` is also cancellable.","mimetype":"text/plain"},{"body":"Yeah, likewise, itâ€™s analogous to <code>Promise.race([Promise.delay(ms, context), context])</code>, where <code>Promise.delay</code> is also cancellable.","mimetype":"text/html"}]},"ts":1649354848235,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tiAIRauv_sUH9N7D-lKxmim68dEk_JLDMUXw4bqwqXw"},
{"content":{"body":"(see `@esfx/async-delay`, same idea)","format":"org.matrix.custom.html","formatted_body":"(see <code>@esfx/async-delay</code>, same idea)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(see `@esfx/async-delay`, same idea)","mimetype":"text/plain"},{"body":"(see <code>@esfx/async-delay</code>, same idea)","mimetype":"text/html"}]},"ts":1649354870557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D4gNLKs21nX1SJuegJk-4evlky3n05ITErrkM_G-m0w"},
{"content":{"body":"Iâ€™d suggest `CancelToken.timeout(ms, token)` to cancel the timeout if the parent gets cancelled faster.","format":"org.matrix.custom.html","formatted_body":"Iâ€™d suggest <code>CancelToken.timeout(ms, token)</code> to cancel the timeout if the parent gets cancelled faster.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Iâ€™d suggest `CancelToken.timeout(ms, token)` to cancel the timeout if the parent gets cancelled faster.","mimetype":"text/plain"},{"body":"Iâ€™d suggest <code>CancelToken.timeout(ms, token)</code> to cancel the timeout if the parent gets cancelled faster.","mimetype":"text/html"}]},"ts":1649354948739,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WL8Qj1RXJIlgEzHusUv0W3jTGvsRA4DXf5w3Neqw64U"},
{"content":{"body":"Though I really need to rename `@esfx/async-canceltoken` to just `@esfx/canceltoken` (since, like I said, cancellation isn't solely for async operations)","format":"org.matrix.custom.html","formatted_body":"Though I really need to rename <code>@esfx/async-canceltoken</code> to just <code>@esfx/canceltoken</code> (since, like I said, cancellation isn't solely for async operations)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though I really need to rename `@esfx/async-canceltoken` to just `@esfx/canceltoken` (since, like I said, cancellation isn't solely for async operations)","mimetype":"text/plain"},{"body":"Though I really need to rename <code>@esfx/async-canceltoken</code> to just <code>@esfx/canceltoken</code> (since, like I said, cancellation isn't solely for async operations)","mimetype":"text/html"}]},"ts":1649354953885,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q6ptXWNb7FeA30V_-46vQgm1j6CLL75l9SMLul4_I8g"},
{"content":{"body":"> <@kriskowal:matrix.org> Iâ€™d suggest `CancelToken.timeout(ms, token)` to cancel the timeout if the parent gets cancelled faster.\n\nThat's fair, esp. since one of my biggest concerns has been GC and cleanup. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WL8Qj1RXJIlgEzHusUv0W3jTGvsRA4DXf5w3Neqw64U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Iâ€™d suggest <code>CancelToken.timeout(ms, token)</code> to cancel the timeout if the parent gets cancelled faster.</blockquote></mx-reply>That's fair, esp. since one of my biggest concerns has been GC and cleanup.","m.relates_to":{"m.in_reply_to":{"event_id":"$WL8Qj1RXJIlgEzHusUv0W3jTGvsRA4DXf5w3Neqw64U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Iâ€™d suggest `CancelToken.timeout(ms, token)` to cancel the timeout if the parent gets cancelled faster.\n\nThat's fair, esp. since one of my biggest concerns has been GC and cleanup. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WL8Qj1RXJIlgEzHusUv0W3jTGvsRA4DXf5w3Neqw64U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Iâ€™d suggest <code>CancelToken.timeout(ms, token)</code> to cancel the timeout if the parent gets cancelled faster.</blockquote></mx-reply>That's fair, esp. since one of my biggest concerns has been GC and cleanup.","mimetype":"text/html"}]},"ts":1649355002529,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PZ_LDCb_3lMR13ZGyj2gDJhKJ1xMp0A-BQvEJ2YPsx4"},
{"content":{"body":"I also have a `.close()` (nee. `Symbol.dispose`) method on a cancellation source so you can indicate a token can never be canceled (and thus also clean up callbacks that will never be invoked).","format":"org.matrix.custom.html","formatted_body":"I also have a <code>.close()</code> (nee. <code>Symbol.dispose</code>) method on a cancellation source so you can indicate a token can never be canceled (and thus also clean up callbacks that will never be invoked).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also have a `.close()` (nee. `Symbol.dispose`) method on a cancellation source so you can indicate a token can never be canceled (and thus also clean up callbacks that will never be invoked).","mimetype":"text/plain"},{"body":"I also have a <code>.close()</code> (nee. <code>Symbol.dispose</code>) method on a cancellation source so you can indicate a token can never be canceled (and thus also clean up callbacks that will never be invoked).","mimetype":"text/html"}]},"ts":1649355052844,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C0R-y2yPpJ_OoluxHqNVNWoHf0i7dQkwctkvRoO9hro"},
{"content":{"body":"Kris Kowal: I've started on a rough sketch of a host-hook version of cancellation: https://gist.github.com/rbuckton/0ad3ba02baff1f45a0fd0729c9bcb76a","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I've started on a rough sketch of a host-hook version of cancellation: https://gist.github.com/rbuckton/0ad3ba02baff1f45a0fd0729c9bcb76a","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: I've started on a rough sketch of a host-hook version of cancellation: https://gist.github.com/rbuckton/0ad3ba02baff1f45a0fd0729c9bcb76a","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I've started on a rough sketch of a host-hook version of cancellation: https://gist.github.com/rbuckton/0ad3ba02baff1f45a0fd0729c9bcb76a","mimetype":"text/html"}]},"ts":1649369368064,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HcfvL1dM2MSOaCR81ZwNsggh5PHgNcHrGD1yu8VzU_I"}
]