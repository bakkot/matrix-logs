[
{"content":{"body":"yulia: Ashley Claymore Rob Palmer this is what I was referring to https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> this is what I was referring to https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html","m.mentions":{"user_ids":["@yulia:mozilla.org","@aclaymore:matrix.org","@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1728522053948,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$75fo_rXJPS-8--5hF-hHG3isBwVFBb1J6Fi2rpbcw4k"},
{"content":{"body":"heck, added 2022. nice","m.mentions":{},"msgtype":"m.text"},"ts":1728522189400,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Vn0tLSzjtG0Qdx7Yw5U_yRSQy9P5dH6unr4W3xJGMGQ"},
{"content":{"body":" * heck, added 2023. nice","m.mentions":{},"m.new_content":{"body":"heck, added 2023. nice","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Vn0tLSzjtG0Qdx7Yw5U_yRSQy9P5dH6unr4W3xJGMGQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728522205970,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yoe1fPGXMjM1ce0EzwI5fYzsETHL4VexzDwGI8Hgykc"},
{"content":{"body":" * heck, added 2022. nice","m.mentions":{},"m.new_content":{"body":"heck, added 2022. nice","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Vn0tLSzjtG0Qdx7Yw5U_yRSQy9P5dH6unr4W3xJGMGQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728522240744,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$z9rU1G3uOPcDaIHydFkgvyOm7cWo2vtAUfJgnG5X4jc"},
{"content":{"body":"Add your name, etc to today's notes.","m.mentions":{},"msgtype":"m.text"},"ts":1728522375387,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$uo4RB2wskaPSMHqorzIpj-TYefxXi7MEHpLe0GF6r78"},
{"content":{"body":"I really like Mark’s thing of recording and posting his presentations. It’d be great if we can make this an option for presenters all the time, and post the presentations to a TC39 YouTube channel, for presenters who want it.","msgtype":"m.text"},"ts":1728522652572,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WUbyrhPvwiU2LXhi1FT4O8dnmN93LmWsQFGtJBdBDwE"},
{"content":{"body":"would that make it harder to remove sections from the notes, since the video would also need to be edited?","m.mentions":{},"msgtype":"m.text"},"ts":1728522724746,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$HZRyu83_xSRoWRAe-G-LfOQMzK_9uZOZbQMfrKok1pQ"},
{"content":{"body":"yes, but we only very rarely do that, and mostly for entire items rather than small parts of a presentation","m.mentions":{},"msgtype":"m.text"},"ts":1728522751479,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U-fJccEHjan1fuuYmkFTZUylYkGUIjcdrUNhB3ShrQ0"},
{"content":{"body":"Strings will deoptimize pretty quickly once you store non-utf8 bytes","msgtype":"m.text"},"ts":1728522779780,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aiEC-eKSDQ2f77I44BVCXX5mX09eXsaWr444pPNPkPo"},
{"content":{"body":"And assembling them byte by byte is not very fast","msgtype":"m.text"},"ts":1728522794706,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6mci4MMQcRfnJb3spYHHHPlGISLiDQTISNWINqIDhC4"},
{"content":{"body":"> <@jridgewell:matrix.org> Strings will deoptimize pretty quickly once you store non-utf8 bytes\n\nIn typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiEC-eKSDQ2f77I44BVCXX5mX09eXsaWr444pPNPkPo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Strings will deoptimize pretty quickly once you store non-utf8 bytes</blockquote></mx-reply>In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aiEC-eKSDQ2f77I44BVCXX5mX09eXsaWr444pPNPkPo"}},"msgtype":"m.text"},"ts":1728522839875,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$Ox_g76seSGZZOTu0AS43X8j8CWhXG2S7_HhllB9ece0"},
{"content":{"body":"used strings personally before and it is not nice","m.mentions":{},"msgtype":"m.text"},"ts":1728522841277,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$9liYNgXjDME6n888vsA84fLVe2D-OtUQgZnmNAOts8Y"},
{"content":{"body":" * used strings personally before and it is not nice. works but :/","m.mentions":{},"m.new_content":{"body":"used strings personally before and it is not nice. works but :/","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9liYNgXjDME6n888vsA84fLVe2D-OtUQgZnmNAOts8Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728522854284,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$Tsz9CaZmP4di6P6FQTTXiq5Zps57SgGGY4E2qzKcd7M"},
{"content":{"body":"> <@jridgewell:matrix.org> Strings will deoptimize pretty quickly once you store non-utf8 bytes\n\n * In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aiEC-eKSDQ2f77I44BVCXX5mX09eXsaWr444pPNPkPo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Strings will deoptimize pretty quickly once you store non-utf8 bytes</blockquote></mx-reply> * In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8","m.mentions":{},"m.new_content":{"body":"In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8","format":"org.matrix.custom.html","formatted_body":"In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ox_g76seSGZZOTu0AS43X8j8CWhXG2S7_HhllB9ece0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728522862124,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$o9UPnO5EVHGSV2UqJLlNtuMwHGaRd8uT-oNWAoB8qRA"},
{"content":{"body":"> <@abotella:igalia.com> In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8\n\nIs V8’s one-byte string Latin1? When I wrote the UTF-8 parser, it would create 2 byte strings once you went over 0x80","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Ox_g76seSGZZOTu0AS43X8j8CWhXG2S7_HhllB9ece0\">In reply to</a><a href=\"https://matrix.to/#/%40abotella%3Aigalia.com\">@abotella:igalia.com</a><br />In typical implementations, I don't think that's true, since all engines have Latin-1 and UTF-16 representations, but not UTF-8</blockquote></mx-reply>Is V8’s one-byte string Latin1? When I wrote the UTF-8 parser, it would create 2 byte strings once you went over 0x80","m.relates_to":{"m.in_reply_to":{"event_id":"$Ox_g76seSGZZOTu0AS43X8j8CWhXG2S7_HhllB9ece0"}},"msgtype":"m.text"},"ts":1728522944958,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kSBVLYDD7M741ysVyRK2v2jaW7B6iWIkGbjlA8J0NjM"},
{"content":{"body":"> <@littledan:matrix.org> I really like Mark’s thing of recording and posting his presentations. It’d be great if we can make this an option for presenters all the time, and post the presentations to a TC39 YouTube channel, for presenters who want it.\n\ncc Aki ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WUbyrhPvwiU2LXhi1FT4O8dnmN93LmWsQFGtJBdBDwE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I really like Mark’s thing of recording and posting his presentations. It’d be great if we can make this an option for presenters all the time, and post the presentations to a TC39 YouTube channel, for presenters who want it.</blockquote></mx-reply>cc <a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>","m.mentions":{"user_ids":["@littledan:matrix.org","@akirose:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WUbyrhPvwiU2LXhi1FT4O8dnmN93LmWsQFGtJBdBDwE"}},"msgtype":"m.text"},"ts":1728522969627,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$fJ2rUyvONyr1av3iQMGVt8f8mYhla3stgPDZvGvnfg4"},
{"content":{"body":"Also you can't build a real TypedArray with a string backing, so might as well shim it with a mutable array buffer copy","m.mentions":{},"msgtype":"m.text"},"ts":1728522971603,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$419kGkSPcyqCOacJnXWLfDWIYrerRC8MwlRjO50QtHk"},
{"content":{"body":"> <@jridgewell:matrix.org> Is V8’s one-byte string Latin1? When I wrote the UTF-8 parser, it would create 2 byte strings once you went over 0x80\n\nhuh, that was not my understanding","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kSBVLYDD7M741ysVyRK2v2jaW7B6iWIkGbjlA8J0NjM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Is V8’s one-byte string Latin1? When I wrote the UTF-8 parser, it would create 2 byte strings once you went over 0x80</blockquote></mx-reply>huh, that was not my understanding","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kSBVLYDD7M741ysVyRK2v2jaW7B6iWIkGbjlA8J0NjM"}},"msgtype":"m.text"},"ts":1728522972251,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$DNLaf5ItWm63kdNGMSokUCL7znTk5_jM_WyLlTNlUOQ"},
{"content":{"body":"a Latin-1 string representation is identical to a byte array, where the Unicode character values would just be the byte values","m.mentions":{},"msgtype":"m.text"},"ts":1728523025331,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$fURv9BSBSpMp8i_aHbmHQAS_viU7XXKPa-LAbm7GwKc"},
{"content":{"body":"v8 has two types of strings, one-byte (latin1) and two-byte (not quite utf-16 but ucs... something... maybe ucs-2)","m.mentions":{},"msgtype":"m.text"},"ts":1728523174878,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$mSbg_24rappXTrTq4vK8xjgJ-lX-m5RkYl_lbcp-orU"},
{"content":{"body":"and interestingly, it also has an utf-8 parser which is used during streaming compilation, it can do stuff like pause between characters if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 parser but our own","m.mentions":{},"msgtype":"m.text"},"ts":1728523243089,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE"},
{"content":{"body":" * and interestingly, it also has an utf-8 parser which is used during streaming parsing, it can do stuff like pause between characters if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 parser but our own","m.mentions":{},"m.new_content":{"body":"and interestingly, it also has an utf-8 parser which is used during streaming parsing, it can do stuff like pause between characters if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 parser but our own","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728523257341,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$6Qe9NryQRW9ioM9JXtWYZ7aqqgzd_TWF6Z__5Nnt0ew"},
{"content":{"body":" * and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause between characters if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 decoder but our own","m.mentions":{},"m.new_content":{"body":"and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause between characters if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 decoder but our own","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728523272166,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$vAhkxEvUetmU6lua85mWkhCJ5fOsCzIKdEHQ0fpTcvY"},
{"content":{"body":" * and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause mid-character if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 decoder but our own","m.mentions":{},"m.new_content":{"body":"and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause mid-character if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 decoder but our own","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728523331850,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$ltq5iW46cN3KOXY2xa2GMHSWTg6LiVZiTV-tdccpTpI"},
{"content":{"body":"> <@marjakh:matrix.org> v8 has two types of strings, one-byte (latin1) and two-byte (not quite utf-16 but ucs... something... maybe ucs-2)\n\nI don't know if WTF-16 is the right term for that (https://simonsapin.github.io/wtf-8/#ill-formed-utf-16)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mSbg_24rappXTrTq4vK8xjgJ-lX-m5RkYl_lbcp-orU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@marjakh:matrix.org\">@marjakh:matrix.org</a><br>v8 has two types of strings, one-byte (latin1) and two-byte (not quite utf-16 but ucs... something... maybe ucs-2)</blockquote></mx-reply>I don't know if WTF-16 is the right term for that (https://simonsapin.github.io/wtf-8/#ill-formed-utf-16)","m.mentions":{"user_ids":["@marjakh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mSbg_24rappXTrTq4vK8xjgJ-lX-m5RkYl_lbcp-orU"}},"msgtype":"m.text"},"ts":1728523359363,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$h5TSe95KbRkZrVBqjrbbWCS2yyTpflmdJ7ghnWKhvdU"},
{"content":{"body":"please add your name to the attendees list of today's notes doc","m.mentions":{},"msgtype":"m.text"},"ts":1728523592031,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$JZWsZL3CdLqLxYRIW6ehzrsG4p9CxZsZVI52mIancu4"},
{"content":{"body":"> <@abotella:igalia.com> I don't know if WTF-16 is the right term for that (https://simonsapin.github.io/wtf-8/#ill-formed-utf-16)\n\nyeah, pretty much","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h5TSe95KbRkZrVBqjrbbWCS2yyTpflmdJ7ghnWKhvdU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I don't know if WTF-16 is the right term for that (https://simonsapin.github.io/wtf-8/#ill-formed-utf-16)</blockquote></mx-reply>yeah, pretty much","m.mentions":{"user_ids":["@abotella:igalia.com","@marjakh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$h5TSe95KbRkZrVBqjrbbWCS2yyTpflmdJ7ghnWKhvdU"}},"msgtype":"m.text"},"ts":1728523597291,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$rskXzv44Rt6N2dtWkv4PrDiarYc-iIyJ2VqCAf5bNqk"},
{"content":{"body":"> <@abotella:igalia.com> a Latin-1 string representation is identical to a byte array, where the Unicode character values would just be the byte values\n\nVerified, you are correct. If you stay below 0xff, you’ll keep `ONE_BYTE_STRING` representation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24fURv9BSBSpMp8i_aHbmHQAS_viU7XXKPa-LAbm7GwKc\">In reply to</a><a href=\"https://matrix.to/#/%40abotella%3Aigalia.com\">@abotella:igalia.com</a><br />a Latin-1 string representation is identical to a byte array, where the Unicode character values would just be the byte values</blockquote></mx-reply>Verified, you are correct. If you stay below 0xff, you’ll keep <code data-md=\"`\">ONE_BYTE_STRING</code> representation.","m.relates_to":{"m.in_reply_to":{"event_id":"$fURv9BSBSpMp8i_aHbmHQAS_viU7XXKPa-LAbm7GwKc"}},"msgtype":"m.text"},"ts":1728523705185,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oLYdZ_1aMp5vQOCG1FDIj1bARgA2TdflO5niRD2DOOI"},
{"content":{"body":"> <@marjakh:matrix.org> and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause mid-character if we need to wait for more data from the network. so in that case we don't use chromium's utf-8 decoder but our own\n\nI wrote that!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE\">In reply to</a><a href=\"https://matrix.to/#/%40marjakh%3Amatrix.org\">@marjakh:matrix.org</a><br />and interestingly, it also has an utf-8 decoder which is used during streaming parsing, it can do stuff like pause mid-character if we need to wait for more data from the network. so in that case we don&#39;t use chromium&#39;s utf-8 decoder but our own</blockquote></mx-reply>I wrote that!","m.relates_to":{"m.in_reply_to":{"event_id":"$FGKVvfKycQUn_Bdimn_xiufgBdOkldMeP28DYvPuLHE"}},"msgtype":"m.text"},"ts":1728523720878,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kTTRFPi_DYaZ3mGFNTzaBAeg0FnzwhKr_m4eWYPc4yM"},
{"content":{"body":"if you do it in the next 10 seconds i don't have to redact the logs","m.mentions":{},"msgtype":"m.text"},"ts":1728523770758,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1GusUaChVoKAEBvbd_NFH5AcXcSIPKTGM3NJkac_OF8"},
{"content":{"body":"yay","m.mentions":{},"msgtype":"m.text"},"ts":1728523779503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ag8tw3FUCxw_KMTSOybGvv-fH8EPL8-oFpZh6C-LsGc"},
{"content":{"body":"Justin Ridgewell: no, not that one. maybe there is another one you wrote :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: no, not that one. maybe there is another one you wrote :)","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1728523779971,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$gj5EmiPxSJqgp8qOxtQs8xssi4DnnFnagnKmL186EfI"},
{"content":{"body":"🙇‍♂️","m.mentions":{},"msgtype":"m.text"},"ts":1728523786706,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$2Di8gZjWK8xkVglFi7FbAZ3g_coCJALZzjIFgaxaFoA"},
{"content":{"body":"too many utf-8 decoders","m.mentions":{},"msgtype":"m.text"},"ts":1728523795075,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$e3cvvCwZ0FY5zXcNie3luLkGIBAKX5RYHbLjuj-2Rcs"},
{"content":{"body":"sorry 🙈","m.mentions":{},"msgtype":"m.text"},"ts":1728523802534,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$DORwxKiXYd5iqLnNRtn6Zi9uKXE-3G4b9BlWK1XDMcs"},
{"content":{"body":"shows `canadahonk` to the shamecube","format":"org.matrix.custom.html","formatted_body":"shows <code>canadahonk</code> to the shamecube","m.mentions":{},"msgtype":"m.emote"},"ts":1728523808627,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$WbrPaFjBJJ0sLQ40ERqGJcsEBS92tMKnfGwBDs8_uxU"},
{"content":{"body":"we need regular reminders that this is a public channel","msgtype":"m.text"},"ts":1728523824998,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bqU5d-Rm79qR_E0psczD90CsZTPiQZuc52GdmRpYrA4"},
{"content":{"body":"> <@marjakh:matrix.org> Justin Ridgewell: no, not that one. maybe there is another one you wrote :)\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/third_party/utf8-decoder/;l=1;bpv=1;bpt=0 ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24gj5EmiPxSJqgp8qOxtQs8xssi4DnnFnagnKmL186EfI\">In reply to</a><a href=\"https://matrix.to/#/%40marjakh%3Amatrix.org\">@marjakh:matrix.org</a><br /><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: no, not that one. maybe there is another one you wrote :)</blockquote></mx-reply>https://source.chromium.org/chromium/chromium/src/+/main:v8/src/third_party/utf8-decoder/;l=1;bpv=1;bpt=0 ?","m.relates_to":{"m.in_reply_to":{"event_id":"$gj5EmiPxSJqgp8qOxtQs8xssi4DnnFnagnKmL186EfI"}},"msgtype":"m.text"},"ts":1728523846287,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bET7CVP3fhilcLUEZrgXHKgkTWcm_gthcExFY5T_31A"},
{"content":{"body":"2017-12-11, nice","m.mentions":{},"msgtype":"m.text"},"ts":1728523932332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1S-cpfKrATF_hLrlaUe_FNDYBTNt-YnwBsg-FGNwSyE"},
{"content":{"body":"Justin Ridgewell: nope, this one: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/parsing/scanner-character-streams.cc;l=507  .. and... i wrote it :D","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: nope, this one: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/parsing/scanner-character-streams.cc;l=507  .. and... i wrote it :D","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1728523939166,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$moQcSyM2zHgE-PxGJzBlnehOtpEucxFKcDaaRQ3ZnD4"},
{"content":{"body":"we can unify these if your version can also pause mid-character to wait for more data","m.mentions":{},"msgtype":"m.text"},"ts":1728523962849,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$D0mKYOj6ebwzeYluGhn_L9ZURlFMPedb1nOyNfbBPK0"},
{"content":{"body":"bakkot: the notes link made it to the archive 😭😭😭","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the notes link made it to the archive 😭😭😭","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1728523977493,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$kDxcjfYjDmGjyFzSUetU8s_KzUnCU_NZDXN_3D6910E"},
{"content":{"body":"sadness","m.mentions":{},"msgtype":"m.text"},"ts":1728524011075,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AtywWJotW5dakebopy841nZyK08DJkW0SMlSmMkvd5A"},
{"content":{"body":"> <@marjakh:matrix.org> we can unify these if your version can also pause mid-character to wait for more data\n\nThat’s just a small wrapper around my code: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/parsing/scanner-character-streams.cc;l=622-623;drc=a9777d919551975bd1208221a8ba8c012c03bc56","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24D0mKYOj6ebwzeYluGhn_L9ZURlFMPedb1nOyNfbBPK0\">In reply to</a><a href=\"https://matrix.to/#/%40marjakh%3Amatrix.org\">@marjakh:matrix.org</a><br />we can unify these if your version can also pause mid-character to wait for more data</blockquote></mx-reply>That’s just a small wrapper around my code: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/parsing/scanner-character-streams.cc;l=622-623;drc=a9777d919551975bd1208221a8ba8c012c03bc56","m.relates_to":{"m.in_reply_to":{"event_id":"$D0mKYOj6ebwzeYluGhn_L9ZURlFMPedb1nOyNfbBPK0"}},"msgtype":"m.text"},"ts":1728524109302,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZZwz4x6Vs6VczyYsBYB3GOaTxW_m7Mq9FTfsrBR5X44"},
{"content":{"body":"based on very quick googling it seems that the difference between UCS-2 and UTF-16 is more than treating the ill-formed strings but my knowledge level is getting very shaky here","m.mentions":{},"msgtype":"m.text"},"ts":1728524109665,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$gyQQ12wyLnBPamrK3S3O-glPvuNPmldhEBc_tjGrt2k"},
{"content":{"body":"ahh it has been rewritten since, okay that's good, i think 2 utf-8 decoders are enough for chromium","m.mentions":{},"msgtype":"m.text"},"ts":1728524142534,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$gAaKbpBNgmoxIjft1Ihdw1Xut-W_dvKxKbQuPGfY0p0"},
{"content":{"body":"UCS-2 allows lone surrogates, UTF-16 doesn't","msgtype":"m.text"},"ts":1728524158097,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Dhe9YkNIIrccLwcyHAAG_Wa5WENsCpUh1vaQo6pOFsw"},
{"content":{"body":"They’re the same otherwise","msgtype":"m.text"},"ts":1728524163921,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WYrtEiLNKZ1NLI6lDlnUZ-ev6hoEIuzkTGaQB27fZ00"},
{"content":{"body":"google says \"UCS-2 is fixed width, UTF-16 is variable width with a minimum of two bytes and a maximum of four bytes.\" << what about this part? no idea what v8 does here","m.mentions":{},"msgtype":"m.text"},"ts":1728524297588,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$VrqZxO8I89hnjM1xa3mUKCXDFN2PxAw_Ea1j9P_Rqo4"},
{"content":{"body":"A related interesting API proposal https://gist.github.com/domenic/a9343fa787ba54b4ba3a60882c49cc32?permalink_comment_id=4394695#gistcomment-4394695","msgtype":"m.text"},"ts":1728524304925,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6kBvrsAN0Hozc1z5cRUmYr0gojiO63LpPG_gTDHIIp8"},
{"content":{"body":"Can anyone dialled in share the TCQ on Teams?","m.mentions":{},"msgtype":"m.text"},"ts":1728524335936,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$IEYX18LOKrasM5HReug8D_7PO3v1TYEmbJ1wYsZIuIg"},
{"content":{"body":"It was up for a second","m.mentions":{},"msgtype":"m.text"},"ts":1728524360233,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$D1fHVF7xa0uBMxYhCYLwi4ArmUDDYzV47TRIgOdKCjw"},
{"content":{"body":"IMO it’s more parsimonious to have a separate method","msgtype":"m.text"},"ts":1728524381088,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BKl1HSoNPkZckkdcxBrFx4rR1O1YYRgm87Hro8cR98o"},
{"content":{"body":"> <@marjakh:matrix.org> google says \"UCS-2 is fixed width, UTF-16 is variable width with a minimum of two bytes and a maximum of four bytes.\" << what about this part? no idea what v8 does here\n\nThat’s if you want to combine surrogates into a single UTF char (u32). The streams themselves are the same.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24VrqZxO8I89hnjM1xa3mUKCXDFN2PxAw_Ea1j9P_Rqo4\">In reply to</a><a href=\"https://matrix.to/#/%40marjakh%3Amatrix.org\">@marjakh:matrix.org</a><br />google says &quot;UCS-2 is fixed width, UTF-16 is variable width with a minimum of two bytes and a maximum of four bytes.&quot; &lt;&lt; what about this part? no idea what v8 does here</blockquote></mx-reply>That’s if you want to combine surrogates into a single UTF char (u32). The streams themselves are the same.","m.relates_to":{"m.in_reply_to":{"event_id":"$VrqZxO8I89hnjM1xa3mUKCXDFN2PxAw_Ea1j9P_Rqo4"}},"msgtype":"m.text"},"ts":1728524406955,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uk0HPN7HpC5Rik_UKpHk0bKCj074ONK9juJ5uY-PrGA"},
{"content":{"body":"I think the meaning of ucs2 has changed over time. It was designed in the days when all code points fit in 16 bits. Since then, it has been redefined to mean, potentially ill-formed utf16","msgtype":"m.text"},"ts":1728524473061,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n8eyGqQ18K2mMEoXG3rIfvN1hm1k6Y5h36c6YDpjRJI"},
{"content":{"body":"Yah, baseically that ^","msgtype":"m.text"},"ts":1728524519912,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VsAvNFaHZ-D-oTHShfAdUKLDWieZYCCpJ-tw3qWweOI"},
{"content":{"body":"* Yah, basically that ^","m.new_content":{"body":"Yah, basically that ^","msgtype":"m.text"},"m.relates_to":{"event_id":"$VsAvNFaHZ-D-oTHShfAdUKLDWieZYCCpJ-tw3qWweOI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728524530356,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9b6t_UlW1oKFtG1Eh_KIInxK6A1QVQBCbGtuPY6aTYc"},
{"content":{"body":"JS generally does not check for well-formed-ness so you could (informally) say it works in the ucs2 encoding rather than utf16","msgtype":"m.text"},"ts":1728524532369,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Uopf62tsZCMfi2-Oyd3rwnREGQYAgJliDYvdcRnWcOo"},
{"content":{"body":"oh, and wtf-16 says it's the name kinda corresponding to that evolved usage of ucs-2. yess, not confusing at all. okay.","m.mentions":{},"msgtype":"m.text"},"ts":1728524771503,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$1tSZJeWrhpxyaoZ2JQq52zdNC4VSqFJF7oiU8cp2zlI"},
{"content":{"body":"ok how did we end up here? what does \"Strings will deoptimize pretty quickly once you store non-utf8 bytes\" mean? one thing that's not great about onebyte vs twobyte is that if you have one non-onebyte character in your string, the whole string has to be stored as a twobyte and it's slightly unnecessary overhead.","m.mentions":{},"msgtype":"m.text"},"ts":1728525009967,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$mGY5c_jqBslVdPn01Wb4HbDKUERaQMrnaNvqM_9QYvk"},
{"content":{"body":"(but i don't see a way around it in the current world unless we add utf-8 strings and... i don't think anyone wants to... strings are incredibly complex as is)","m.mentions":{},"msgtype":"m.text"},"ts":1728525056863,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$QqcV2mD0SKXvp5OK6jm2QFcA1HLT3IGrI6clCA1h45Y"},
{"content":{"body":"@marjakh:matrix.org ropes of mixed 1-byte and 2-byte sections","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@marjakh:matrix.org\">@Marja Hölttä</a> ropes of mixed 1-byte and 2-byte sections","msgtype":"m.text"},"ts":1728525178744,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4k0WbbryKD1KrP-kdNVFEYec-AhPVKvschDTqUFYW08"},
{"content":{"body":"true, could also do that!","m.mentions":{},"msgtype":"m.text"},"ts":1728525221836,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$TlRxnRJ8plEPhVp08XhqkEt-ffIXoUt8-Q2wseqRbEM"},
{"content":{"body":"No I wasn’t talking about volatile read-only views on an underlying changing ArrayBuffee","msgtype":"m.text"},"ts":1728525233338,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lHojWRrXIJBD3b1FHIhzyO9ZUcMhVMhEdJpDyDO4Hvs"},
{"content":{"body":"> <@marjakh:matrix.org> ok how did we end up here? what does \"Strings will deoptimize pretty quickly once you store non-utf8 bytes\" mean? one thing that's not great about onebyte vs twobyte is that if you have one non-onebyte character in your string, the whole string has to be stored as a twobyte and it's slightly unnecessary overhead.\n\nI mistakenly though that `String.fromCharCode(0x80)` returned a 2-byte string representation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mGY5c_jqBslVdPn01Wb4HbDKUERaQMrnaNvqM_9QYvk\">In reply to</a><a href=\"https://matrix.to/#/%40marjakh%3Amatrix.org\">@marjakh:matrix.org</a><br />ok how did we end up here? what does &quot;Strings will deoptimize pretty quickly once you store non-utf8 bytes&quot; mean? one thing that&#39;s not great about onebyte vs twobyte is that if you have one non-onebyte character in your string, the whole string has to be stored as a twobyte and it&#39;s slightly unnecessary overhead.</blockquote></mx-reply>I mistakenly though that <code data-md=\"`\">String.fromCharCode(0x80)</code> returned a 2-byte string representation","m.relates_to":{"m.in_reply_to":{"event_id":"$mGY5c_jqBslVdPn01Wb4HbDKUERaQMrnaNvqM_9QYvk"}},"msgtype":"m.text"},"ts":1728525235251,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UpgTKATrP_wvQ8Y8QZaKmVlvhFmc79Hcm5BauBNb2I4"},
{"content":{"body":"* No I wasn’t talking about volatile read-only views on an underlying changing ArrayBuffer","m.new_content":{"body":"No I wasn’t talking about volatile read-only views on an underlying changing ArrayBuffer","msgtype":"m.text"},"m.relates_to":{"event_id":"$lHojWRrXIJBD3b1FHIhzyO9ZUcMhVMhEdJpDyDO4Hvs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728525239996,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7ToE4IgCHuSUgU0CLSLL4YxQXa5IkONikMk5BAjA6Ms"},
{"content":{"body":"`0x80` being an illegal UTF-8 lead byte","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">0x80</code> being an illegal UTF-8 lead byte","msgtype":"m.text"},"ts":1728525259377,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Vpd9vPt3gbi_DPzf8PNx67KBO477wbdYC3HIKsBv3zw"},
{"content":{"body":"You can construct strings in memory that holds any byte sequence, you just can’t transfer that string over the wire","msgtype":"m.text"},"ts":1728525301194,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$k2zwd-plk7HpO7sA7GgVt7LVG7Dl5OaVfN7wMJQVhlA"},
{"content":{"body":"A UTF-8 parser on the other end will replace bad byte sequences with the Replacement Char","msgtype":"m.text"},"ts":1728525347574,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XZ1meH2DutCgUGv7khQ85TsrapUG9ZxISOJ5CgnZiN0"},
{"content":{"body":"I am also OK keeping the rw lock stuff outside of this proposal but I think it could make it more usable for certain cases, which could allow some more zero copy in practice. Not needed for the motivating embedded case though.","msgtype":"m.text"},"ts":1728525391453,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zSpH2wt9ErBWbR5k-RUi9uML_32k5wM4-Ghe-OjfXYk"},
{"content":{"body":"> <@marjakh:matrix.org> (but i don't see a way around it in the current world unless we add utf-8 strings and... i don't think anyone wants to... strings are incredibly complex as is)\n\nSome hosts work with UTF-8 strings and would benefit from not having to convert when making them into JS string primitives. Whether that is offset by the cost of adding UTF-8 strings to the engine is a different question though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QqcV2mD0SKXvp5OK6jm2QFcA1HLT3IGrI6clCA1h45Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@marjakh:matrix.org\">@marjakh:matrix.org</a><br>(but i don&#39;t see a way around it in the current world unless we add utf-8 strings and... i don&#39;t think anyone wants to... strings are incredibly complex as is)</blockquote></mx-reply>Some hosts work with UTF-8 strings and would benefit from not having to convert when making them into JS string primitives. Whether that is offset by the cost of adding UTF-8 strings to the engine is a different question though","m.mentions":{"user_ids":["@marjakh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QqcV2mD0SKXvp5OK6jm2QFcA1HLT3IGrI6clCA1h45Y"}},"msgtype":"m.text"},"ts":1728525435490,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$M_eETHcQ6rDF2h8FTUjL3kMRXXUiwxH2BSbP1ZoKbfw"},
{"content":{"body":"I am very happy that the wasm memory control stuff is getting attention ","format":"org.matrix.custom.html","formatted_body":"I am very happy that the wasm memory control stuff is getting attention","msgtype":"m.text"},"ts":1728525542088,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$st3GGPbVY2KduCwSmuchHr1ijZkMNqCUoeTR5-_mG6w"},
{"content":{"body":"I took a quick look, and it looks like it's basically trying to specify a full MMU ?","m.mentions":{},"msgtype":"m.text"},"ts":1728525635850,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SnCJA2uyJeozU6698NKV47NXzt9SbelhWzxYQVMWZro"},
{"content":{"body":"it's a pretty open question but in the limit, yeah, systems people are gonna want full control","m.mentions":{},"msgtype":"m.text"},"ts":1728525662804,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gJkkKa6tzhFH0G5zpRDhK2gRdrPn5c8vSqlN7yKVnCA"},
{"content":{"body":"i haven't heard anything _too_ concrete yet","format":"org.matrix.custom.html","formatted_body":"i haven't heard anything <em>too</em> concrete yet","m.mentions":{},"msgtype":"m.text"},"ts":1728525670034,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GFNBdNhrTVu4O0cm7M0nB8nyTFxvu0NQrtP1TfQVEoI"},
{"content":{"body":"yeah i think they are still exploring quite a bit.","m.mentions":{},"msgtype":"m.text"},"ts":1728525714669,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yaOiMEKoTt-M0bDe_vRdjSVfQzQw1Bjaztz6Irf4efs"},
{"content":{"body":"I hope we get memory protection for the first page so I can get a segfault in Wasm for derefencing a null pointer","msgtype":"m.text"},"ts":1728525783558,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mpRYNsOH4yIYAir9TQBFUCYi1A94Hj6HjzzMKut3ko8"},
{"content":{"body":"* I hope we get the capability to set up memory protection for the first page so I can get a segfault in Wasm for derefencing a null pointer","m.new_content":{"body":"I hope we get the capability to set up memory protection for the first page so I can get a segfault in Wasm for derefencing a null pointer","msgtype":"m.text"},"m.relates_to":{"event_id":"$mpRYNsOH4yIYAir9TQBFUCYi1A94Hj6HjzzMKut3ko8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728525814342,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ieRGlLse9X28547YsRharrqsFQ_COmjWYoMbvBAz3WY"},
{"content":{"body":"As a... Unix user, I want my programs to SIGSEV, so th\n\nbus error","m.mentions":{},"msgtype":"m.text"},"ts":1728525885718,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UlUArGIOjqJjGt0M5WFph0HCxyjDbAqFxotMrCkZBpU"},
{"content":{"body":"It would be really interesting to hear a presentation about how various approaches to polyfills work, since it seems to drive a lot of our designs","msgtype":"m.text"},"ts":1728526270446,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FtC1IqzO8NwA7h0TaI-NIWBDnq8VUz2pbskhbAIgbn0"},
{"content":{"body":"In general it’s good to find reasons which could be motivating for others, but it also is interesting to learn what the proponents are motivated by.","msgtype":"m.text"},"ts":1728526507446,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0QxZ-VgYz1JLfqwjBB8Tin8zEh08yYuMrED5kTpav9g"},
{"content":{"body":"Isn't the clamping just `value & 256`?","format":"org.matrix.custom.html","formatted_body":"Isn't the clamping just <code>value &amp; 256</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1728526769453,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$nH4D_Z06Ws7JHs45_KR63soZM4Sr-DU2HbyWs20F7XI"},
{"content":{"body":"yeah i am confused","m.mentions":{},"msgtype":"m.text"},"ts":1728526775878,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WzqkpmjPu2w26YtOcnRzLmcfqdO4npEqBHyHbj9ej4Q"},
{"content":{"body":"Or is there some other part that's not quite that?","m.mentions":{},"msgtype":"m.text"},"ts":1728526779273,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$sAbYJW8YeAwYC96akPKNSuAIl-avjlJG5pg5Fooxoks"},
{"content":{"body":"> <@keith_miller:matrix.org> Isn't the clamping just `value & 256`?\n\n`value & 255`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24nH4D_Z06Ws7JHs45_KR63soZM4Sr-DU2HbyWs20F7XI\">In reply to</a><a href=\"https://matrix.to/#/%40keith_miller%3Amatrix.org\">@keith_miller:matrix.org</a><br />Isn't the clamping just <code>value &amp; 256</code>?</blockquote></mx-reply><code data-md=\"`\">value &amp; 255</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$nH4D_Z06Ws7JHs45_KR63soZM4Sr-DU2HbyWs20F7XI"}},"msgtype":"m.text"},"ts":1728526827303,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$01rVLu3PgXY7O8jfQEAeTFAwu8FZ0pm_t4Svr7a996U"},
{"content":{"body":"Err sorry","m.mentions":{},"msgtype":"m.text"},"ts":1728526834044,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$nFA8OnrfggYlULkIx0jTnklASe_Qp5aAIItxJygquag"},
{"content":{"body":"Yeah","m.mentions":{},"msgtype":"m.text"},"ts":1728526835788,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CmYGKflgFT9IkH_7UpjMukialG8lIF-E6FF6FwHF8MI"},
{"content":{"body":"or `value % 256`","format":"org.matrix.custom.html","formatted_body":"or <code>value % 256</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728526857425,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$jishOgiuh0uAn_Z0ENYzTdbaz5wjGdFo7b9j9uJ3hV0"},
{"content":{"body":"That’s how normal uint8arrays work; I thought clamped was different ","format":"org.matrix.custom.html","formatted_body":"That’s how normal uint8arrays work; I thought clamped was different","msgtype":"m.text"},"ts":1728526874158,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$npa2PjfKLqHWKNAvAEsqktJrT-NiplWquEVwQzrhLWw"},
{"content":{"body":"What if we added a Math.clamp method? I think that would be a broadly useful utility.","msgtype":"m.text"},"ts":1728526901709,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c3S4keLdMe0Hp9XmSZcFVIGY_h8tDIjaIjP7ecxdg3c"},
{"content":{"body":"^CSS did, not us","msgtype":"m.text"},"ts":1728526916946,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hZ_UcPmDVI25xvDAWJ8quWX_AqD2cnPgWh2mbtfF7Ic"},
{"content":{"body":"right but what are we solving exactly rn?","m.mentions":{},"msgtype":"m.text"},"ts":1728526919800,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$GWMcrzR0Z-Z9iZBtv7xdEPp4RyAsRCEdT1JV7dyoY3w"},
{"content":{"body":"so the spec logic is https://tc39.es/ecma262/#sec-touint8clamp","m.mentions":{},"msgtype":"m.text"},"ts":1728526922698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LXe3IQ08YqNGydLRqmWHyg5T-owZRq9Exaw3DtjlinE"},
{"content":{"body":"if all those steps are just `value & 255` then an editorial cleanup would certainly have helped :-)","format":"org.matrix.custom.html","formatted_body":"if all those steps are just <code>value &amp; 255</code> then an editorial cleanup would certainly have helped :-)","m.mentions":{},"msgtype":"m.text"},"ts":1728526944465,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QYfXPecG2iuhpqSu8b6fvFB2P35Q-40B2xSP0-kaHG4"},
{"content":{"body":"wait, why isn't that algorithm steps?","m.mentions":{},"msgtype":"m.text"},"ts":1728526945986,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xzTPyMKb2weLBucZRNdF61Dq5ZuG0W8Ty-Bgb_gKBvY"},
{"content":{"body":"you said it wans't described in algo steps","m.mentions":{},"msgtype":"m.text"},"ts":1728526952438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UuO_8VQyPslmnOShbGmOuXNN1AS4GPblKfqjL-3IUeg"},
{"content":{"body":"Is that clamping or does that allow overflow/underflow?","m.mentions":{},"msgtype":"m.text"},"ts":1728526960956,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cQYwt_4SLx6uQTgB1T_tNw-0LRV9zixM_r6wxfNijG4"},
{"content":{"body":"> <@ljharb:matrix.org> if all those steps are just `value & 255` then an editorial cleanup would certainly have helped :-)\n\nNo, it won’t round","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QYfXPecG2iuhpqSu8b6fvFB2P35Q-40B2xSP0-kaHG4\">In reply to</a><a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb:matrix.org</a><br />if all those steps are just <code>value &amp; 255</code> then an editorial cleanup would certainly have helped :-)</blockquote></mx-reply>No, it won’t round","m.relates_to":{"m.in_reply_to":{"event_id":"$QYfXPecG2iuhpqSu8b6fvFB2P35Q-40B2xSP0-kaHG4"}},"msgtype":"m.text"},"ts":1728526961536,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pDdAn1UNGdlUVWZm0I1lOInA9L0Q1eprDT_uRGP--L4"},
{"content":{"body":"yes, my mistake, it is algorithm steps","m.mentions":{},"msgtype":"m.text"},"ts":1728526964705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7XGFcrXhah8Pj7PkJ0VXiYzReOe1p0bCasK5OT9kMYM"},
{"content":{"body":"> <@yulia:mozilla.org> right but what are we solving exactly rn?\n\nIs this asking about Math.clamp? That is just saving a couple lines of code, making everyday things slightly nicer. Also fine by me to not do.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GWMcrzR0Z-Z9iZBtv7xdEPp4RyAsRCEdT1JV7dyoY3w\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>right but what are we solving exactly rn?</blockquote></mx-reply>Is this asking about Math.clamp? That is just saving a couple lines of code, making everyday things slightly nicer. Also fine by me to not do.","m.relates_to":{"m.in_reply_to":{"event_id":"$GWMcrzR0Z-Z9iZBtv7xdEPp4RyAsRCEdT1JV7dyoY3w"}},"msgtype":"m.text"},"ts":1728526978204,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0CIXzEQtmDWzBeUNmkRYIIm5q_80Zh5uJUFwTCZtAJE"},
{"content":{"body":"FYI we also didn't get a summary for the previous topic","msgtype":"m.text"},"ts":1728527024071,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0v6l2iHFeYV9VPEXi5VOaZFV8B_owMGNpHnNv7zdqfQ"},
{"content":{"body":"is math.clamp more general than the dataview methods? i'm not opposed to it, would be good to see which everyday things are being improved","m.mentions":{},"msgtype":"m.text"},"ts":1728527043616,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OIIGtPKDlVoIUkONEQXJmFW8LiIslpi0Sbe7k1EgCIE"},
{"content":{"body":"i think the spec has a oneliner note using modulo","m.mentions":{},"msgtype":"m.text"},"ts":1728527062673,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$O0XuWjkDJIugMkByn5IXS_5UJ9ng_Aqwto526nTtUNw"},
{"content":{"body":"Wait sorry it's not `value & 255` lol I'm too tired it's ```if (number > 255) return 255; if (number < 0) return 0; return number;```","format":"org.matrix.custom.html","formatted_body":"Wait sorry it's not <code>value &amp; 255</code> lol I'm too tired it's <code>if (number &gt; 255) return 255; if (number &lt; 0) return 0; return number;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728527064318,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$TCVCtx0Hr9il-0pftkqOX9ZbI3Z71fl-iIBxU3K5zpk"},
{"content":{"body":"wait taking a step back","m.mentions":{},"msgtype":"m.text"},"ts":1728527067674,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$20QCFjNVh4pInkJmwHvaywB3Om3XwQILpQegFxlVjZ0"},
{"content":{"body":"https://tc39.es/ecma262/#clamping","m.mentions":{},"msgtype":"m.text"},"ts":1728527068139,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$kMr7fJF4Y0HapdJLCWgo3DEyuylK6SN0m3--nJmnh-c"},
{"content":{"body":"why did we add uint8clamp TAs to begin with?","m.mentions":{},"msgtype":"m.text"},"ts":1728527083860,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Wb2FQb6iQJhhM4BL011M1SGmFHAVmOSiOPuUuAPqaks"},
{"content":{"body":"something textures?","m.mentions":{},"msgtype":"m.text"},"ts":1728527087783,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VuEIngqMU1XMIx2G91Kb1_seaIOIQKtdlVbSQn_S5VU"},
{"content":{"body":"I think for textures or something yeah","m.mentions":{},"msgtype":"m.text"},"ts":1728527095727,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Atai_XR-oXzuFIJsfQyGOUsSI8d55W29QhnjbSTZ9t8"},
{"content":{"body":" * I think for textures/colors or something yeah","m.mentions":{},"m.new_content":{"body":"I think for textures/colors or something yeah","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Atai_XR-oXzuFIJsfQyGOUsSI8d55W29QhnjbSTZ9t8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728527105370,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$RmJR-rjSVgrxejF-Ex7g5jDFsw1InugNBFDO0Eoh0j0"},
{"content":{"body":"> <@keith_miller:matrix.org> Wait sorry it's not `value & 255` lol I'm too tired it's ```if (number > 255) return 255; if (number < 0) return 0; return number;```\n\nAhh, I forgot about negaties. But you’re missing the rounding, too.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24TCVCtx0Hr9il-0pftkqOX9ZbI3Z71fl-iIBxU3K5zpk\">In reply to</a><a href=\"https://matrix.to/#/%40keith_miller%3Amatrix.org\">@keith_miller:matrix.org</a><br />Wait sorry it's not <code>value &amp; 255</code> lol I'm too tired it's <code>if (number &gt; 255) return 255; if (number &lt; 0) return 0; return number;</code></blockquote></mx-reply>Ahh, I forgot about negaties. But you’re missing the rounding, too.","m.relates_to":{"m.in_reply_to":{"event_id":"$TCVCtx0Hr9il-0pftkqOX9ZbI3Z71fl-iIBxU3K5zpk"}},"msgtype":"m.text"},"ts":1728527134407,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Jzxmb8VGQHF-lus1vrw976odT7nvmxsTQacrdtN8N1Q"},
{"content":{"body":"> <@yulia:mozilla.org> is math.clamp more general than the dataview methods? i'm not opposed to it, would be good to see which everyday things are being improved\n\nwritten it at least a few times for webapps in the past","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OIIGtPKDlVoIUkONEQXJmFW8LiIslpi0Sbe7k1EgCIE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>is math.clamp more general than the dataview methods? i&#39;m not opposed to it, would be good to see which everyday things are being improved</blockquote></mx-reply>written it at least a few times for webapps in the past","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OIIGtPKDlVoIUkONEQXJmFW8LiIslpi0Sbe7k1EgCIE"}},"msgtype":"m.text"},"ts":1728527139496,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$oTaBemA8GjcYjvd5EsI0AcnC_b6-HfodWaT2O8GYFhk"},
{"content":{"body":"> <@yulia:mozilla.org> is math.clamp more general than the dataview methods? i'm not opposed to it, would be good to see which everyday things are being improved\n\nYeah it doesn’t really have to do with data views, it’s just like you give a min and max and return one of those if you are out of bounds","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24OIIGtPKDlVoIUkONEQXJmFW8LiIslpi0Sbe7k1EgCIE\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>is math.clamp more general than the dataview methods? i'm not opposed to it, would be good to see which everyday things are being improved</blockquote></mx-reply>Yeah it doesn’t really have to do with data views, it’s just like you give a min and max and return one of those if you are out of bounds","m.relates_to":{"m.in_reply_to":{"event_id":"$OIIGtPKDlVoIUkONEQXJmFW8LiIslpi0Sbe7k1EgCIE"}},"msgtype":"m.text"},"ts":1728527142559,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OmA4iWWGU7A010V6igx2Kq1Ts91Xp1wBJ20rqHqSS-M"},
{"content":{"body":"sure, that sounds fine","m.mentions":{},"msgtype":"m.text"},"ts":1728527163588,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$cdOlS54IXDptyCKUiVJkhWClPWN9aaGK2uyelJoY3BY"},
{"content":{"body":"> <@canadahonk:matrix.org> written it at least a few times for webapps in the past\n\nwhat was it for?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oTaBemA8GjcYjvd5EsI0AcnC_b6-HfodWaT2O8GYFhk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@canadahonk:matrix.org\">@canadahonk:matrix.org</a><br>written it at least a few times for webapps in the past</blockquote></mx-reply>what was it for?","m.mentions":{"user_ids":["@canadahonk:matrix.org","@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oTaBemA8GjcYjvd5EsI0AcnC_b6-HfodWaT2O8GYFhk"}},"msgtype":"m.text"},"ts":1728527177527,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wKs7cY74HGWfvNHCAlqQGPHSvbDa26I9m15tg3jBIA4"},
{"content":{"body":"yulia: I have code that could make use of consistent names for data view methods for the purpose of dynamic dispatch, were it to be rewritten to use dynamic dispatch: https://github.com/esfx/esfx/blob/main/packages/struct-type/src/internal/numbers.ts#L122-L133 one data point may not necessarily be compelling, however.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: I have code that could make use of consistent names for data view methods for the purpose of dynamic dispatch, were it to be rewritten to use dynamic dispatch: https://github.com/esfx/esfx/blob/main/packages/struct-type/src/internal/numbers.ts#L122-L133 one data point may not necessarily be compelling, however.","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"msgtype":"m.text"},"ts":1728527200797,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eRcKxbdXvXUf-uzv3DMYCV9n5VsDe58rXbV9nYy37Rg"},
{"content":{"body":"here's my summary:\n> - In order to advance, champion needs to provide use cases that are actually solved by the proposal; polyfilling is not solved by it.\n> - Current proposal is get + set; based on future presented use cases, other alternatives may include “just set”, or “just a clamp helper”\n\nlmk if i'm missing anything","format":"org.matrix.custom.html","formatted_body":"<p>here's my summary:</p>\n<blockquote>\n<ul>\n<li>In order to advance, champion needs to provide use cases that are actually solved by the proposal; polyfilling is not solved by it.</li>\n<li>Current proposal is get + set; based on future presented use cases, other alternatives may include “just set”, or “just a clamp helper”</li>\n</ul>\n</blockquote>\n<p>lmk if i'm missing anything</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728527217663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AFA13YWX6rlqMexvzEW_ADmNDrV-LCNMCmQCVR5eVw4"},
{"content":{"body":"there is a ~new math.clamp proposal that lacks a champion btw","m.mentions":{},"msgtype":"m.text"},"ts":1728527233103,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$nhFrH00IVzWlqz8Y-mEFIdkjpCl5cO8fLVw3hwqA36U"},
{"content":{"body":"> <@littledan:matrix.org> Yeah it doesn’t really have to do with data views, it’s just like you give a min and max and return one of those if you are out of bounds\n\nMath.clamp is nice but wouldn't give me the rounding i need","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OmA4iWWGU7A010V6igx2Kq1Ts91Xp1wBJ20rqHqSS-M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah it doesn’t really have to do with data views, it’s just like you give a min and max and return one of those if you are out of bounds</blockquote></mx-reply>Math.clamp is nice but wouldn't give me the rounding i need","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OmA4iWWGU7A010V6igx2Kq1Ts91Xp1wBJ20rqHqSS-M"}},"msgtype":"m.text"},"ts":1728527247333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LvUWrq9wl_RW4VrbKvmIStsdjJD2csj62zqQGUBPgLc"},
{"content":{"body":"> <@canadahonk:matrix.org> there is a ~new math.clamp proposal that lacks a champion btw\n\nhttps://github.com/Richienb/proposal-math-clamp which I may if no one else wants :^)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nhFrH00IVzWlqz8Y-mEFIdkjpCl5cO8fLVw3hwqA36U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@canadahonk:matrix.org\">@canadahonk:matrix.org</a><br>there is a ~new math.clamp proposal that lacks a champion btw</blockquote></mx-reply>https://github.com/Richienb/proposal-math-clamp which I may if no one else wants :^)","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$nhFrH00IVzWlqz8Y-mEFIdkjpCl5cO8fLVw3hwqA36U"}},"msgtype":"m.text"},"ts":1728527269535,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$ruMw7BqZD1eHdEljL5K64eZfQOu_r65m5fVSiOP20jo"},
{"content":{"body":"if you had math.clamp you could use math.floor with it, no?","m.mentions":{},"msgtype":"m.text"},"ts":1728527285311,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Y6cFLbKuZBw-_bqL2WDZEjRIdGM3s9TSB6FNqq75Nck"},
{"content":{"body":"> <@canadahonk:matrix.org> https://github.com/Richienb/proposal-math-clamp which I may if no one else wants :^)\n\ndiscourse thread: https://es.discourse.group/t/math-clamp-strawman/1059","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ruMw7BqZD1eHdEljL5K64eZfQOu_r65m5fVSiOP20jo\">In reply to</a><a href=\"https://matrix.to/#/%40canadahonk%3Amatrix.org\">@canadahonk:matrix.org</a><br />https://github.com/Richienb/proposal-math-clamp which I may if no one else wants :^)</blockquote></mx-reply>discourse thread: https://es.discourse.group/t/math-clamp-strawman/1059","m.relates_to":{"m.in_reply_to":{"event_id":"$ruMw7BqZD1eHdEljL5K64eZfQOu_r65m5fVSiOP20jo"}},"msgtype":"m.text"},"ts":1728527338625,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6iTuHMZXHLFkaMUywiJABT2RCvktSzFfOM_U2YZjWPA"},
{"content":{"body":"and ceil if negative, sure. Math.clamp helps me compose the logic for sure.","m.mentions":{},"msgtype":"m.text"},"ts":1728527344195,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1KYH2EiFa3XL91tdhhRCiOHRwmM8Qtc_qrtBcLL5mN4"},
{"content":{"body":"`Number.setFPUControlWord` so we can change the rounding mode to round half to even","format":"org.matrix.custom.html","formatted_body":"<code>Number.setFPUControlWord</code> so we can change the rounding mode to round half to even","m.mentions":{},"msgtype":"m.text"},"ts":1728527344253,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$APagnc8FLuBBZKBit5AKEbA5oHGexj0NvSJunQqaiCA"},
{"content":{"body":"Is `Math.clamp` sufficiently more powerful than `Math.min(Math.max(x, upper), lower)`?","format":"org.matrix.custom.html","formatted_body":"Is <code>Math.clamp</code> sufficiently more powerful than <code>Math.min(Math.max(x, upper), lower)</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1728527517926,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zabPN2jqdLuahrk4o1CO79MbB5O9Z_MF3G2ELENWh0Q"},
{"content":{"body":" * Is `Math.clamp` sufficiently more powerful than `Math.min(Math.max(x, lower), upper)`?","format":"org.matrix.custom.html","formatted_body":" * Is <code>Math.clamp</code> sufficiently more powerful than <code>Math.min(Math.max(x, lower), upper)</code>?","m.mentions":{},"m.new_content":{"body":"Is `Math.clamp` sufficiently more powerful than `Math.min(Math.max(x, lower), upper)`?","format":"org.matrix.custom.html","formatted_body":"Is <code>Math.clamp</code> sufficiently more powerful than <code>Math.min(Math.max(x, lower), upper)</code>?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zabPN2jqdLuahrk4o1CO79MbB5O9Z_MF3G2ELENWh0Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728527547508,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_p438tk_8FUpI0jibJcGic9OrVQBWuhgWGcbGkFTaPU"},
{"content":{"body":"It's sufficiently easier to get right the first time","m.mentions":{},"msgtype":"m.text"},"ts":1728527556691,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F-HSwl_XymHHOQbnARLBpZhI5rVaUPdgE6kh9ul_P8Q"},
{"content":{"body":"also something something performance probably better?","m.mentions":{},"msgtype":"m.text"},"ts":1728527590796,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$ns4efFOSIIfo3asW5BMO9TuNSq6PcVnP2I-Si5hblbQ"},
{"content":{"body":"Ehh, I think I'd screw up the argument order too though","m.mentions":{},"msgtype":"m.text"},"ts":1728527607198,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$brsolutfyEZmwqb-7B6Hpgu2MxeQZRlUoMnccn76B5o"},
{"content":{"body":"On 8 hours of sleep over 3 days","m.mentions":{},"msgtype":"m.text"},"ts":1728527617365,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MGwJRQ5RKuOE_2KaXZf6FXQyK--1UrYVJL1qPc_0-Vk"},
{"content":{"body":"Performance is probably the same","m.mentions":{},"msgtype":"m.text"},"ts":1728527626738,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$TVqMojcRjWem3nm5xktPQiQlPg3HD7FUuP_CjPbpu0k"},
{"content":{"body":"2 func calls vs 1?","m.mentions":{},"msgtype":"m.text"},"ts":1728527636244,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$67RtXH7zezgWLyfxF3hrlmIvdSymBMPQfCjuyGEGl7Y"},
{"content":{"body":"It would be inlined and optimized in most JIT engines anyway","m.mentions":{},"msgtype":"m.text"},"ts":1728527652326,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$4O7W8dxeWdzRbojMiVSth6kfB-ceR_1il525MBR5C6I"},
{"content":{"body":"I imagine signature help in an IDE is more reliable for something that reads `Math.clamp(value: number, min: number, max: number)` then trying to figure out the correct order for `Math.min(x: number, y: number)` and `Math.max(x: number, y: number)`.","format":"org.matrix.custom.html","formatted_body":"I imagine signature help in an IDE is more reliable for something that reads <code>Math.clamp(value: number, min: number, max: number)</code> then trying to figure out the correct order for <code>Math.min(x: number, y: number)</code> and <code>Math.max(x: number, y: number)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1728527721005,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0ym_FIUmDxpSw8AVxSOIRQeu1fnzbijk7FHxasp9UDc"},
{"content":{"body":"Yeah I don’t think this is a thing to decide on perf but rather developer mental model ","format":"org.matrix.custom.html","formatted_body":"Yeah I don’t think this is a thing to decide on perf but rather developer mental model","msgtype":"m.text"},"ts":1728527727219,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RNJOdBlNQJj8pmKO99RX0HbR-RraSsO3H3sPsDldarA"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I don’t think this is a thing to decide on perf but rather developer mental model\n\nagree, but I mean it definitely wouldn't be a downside at least","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RNJOdBlNQJj8pmKO99RX0HbR-RraSsO3H3sPsDldarA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I don’t think this is a thing to decide on perf but rather developer mental model</blockquote></mx-reply>agree, but I mean it definitely wouldn't be a downside at least","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RNJOdBlNQJj8pmKO99RX0HbR-RraSsO3H3sPsDldarA"}},"msgtype":"m.text"},"ts":1728527750562,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$wNHVBooNKwet1NaNIq7Zw2i5TxS5iRbQCZgSwCEYFng"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I don’t think this is a thing to decide on perf but rather developer mental model\n\n * agree, but I mean it definitely wouldn't be a downside at least, only possible benefit (afaik)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RNJOdBlNQJj8pmKO99RX0HbR-RraSsO3H3sPsDldarA?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I don’t think this is a thing to decide on perf but rather developer mental model</blockquote></mx-reply> * agree, but I mean it definitely wouldn't be a downside at least, only possible benefit (afaik)","m.mentions":{},"m.new_content":{"body":"agree, but I mean it definitely wouldn't be a downside at least, only possible benefit (afaik)","format":"org.matrix.custom.html","formatted_body":"agree, but I mean it definitely wouldn't be a downside at least, only possible benefit (afaik)","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wNHVBooNKwet1NaNIq7Zw2i5TxS5iRbQCZgSwCEYFng","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728527767814,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$yy4BCR-D2tV3YnqqhCP_nw8eEYyrrXvkom8H3zqlZMg"},
{"content":{"body":"clamp seems nice, especially combining it with round/floor","m.mentions":{},"msgtype":"m.text"},"ts":1728527879938,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$lPSgudibeYC27Q_I2WsuCe8SgFR5k2c-4hg7lAW0AdM"},
{"content":{"body":"liquid volume remains solidly imperial for cooking","m.mentions":{},"msgtype":"m.text"},"ts":1728528716985,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1cdHK6KhmttdlOUxZpZMTcUMbt-w2-Hs2wHaV9DRweg"},
{"content":{"body":" * liquid volume remains solidly imperial for cooking, in the US","m.mentions":{},"m.new_content":{"body":"liquid volume remains solidly imperial for cooking, in the US","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1cdHK6KhmttdlOUxZpZMTcUMbt-w2-Hs2wHaV9DRweg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728528722839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6LBXmFH-7Jdq7v5MpBlpP1o-8F9iS3qLBHeN9r47lIU"},
{"content":{"body":"also gasoline","m.mentions":{},"msgtype":"m.text"},"ts":1728528731235,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eDiEyOGhoE1SgfdeSCgwlb829Mx9nbAo1nmd3DLSxlM"},
{"content":{"body":"> <@ljharb:matrix.org> liquid volume remains solidly imperial for cooking, in the US\n\nunless you are baking","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1cdHK6KhmttdlOUxZpZMTcUMbt-w2-Hs2wHaV9DRweg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>liquid volume remains solidly imperial for cooking, in the US</blockquote></mx-reply>unless you are baking","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1cdHK6KhmttdlOUxZpZMTcUMbt-w2-Hs2wHaV9DRweg"}},"msgtype":"m.text"},"ts":1728528732103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4GPAb9FNqh_RguiiwJs_DGSDsjsY2k4HqHABNN1Hdoo"},
{"content":{"body":" * also gasoline and milk","m.mentions":{},"m.new_content":{"body":"also gasoline and milk","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eDiEyOGhoE1SgfdeSCgwlb829Mx9nbAo1nmd3DLSxlM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728528736378,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8QNsxD3gI1BkOXECfPEa5xrgIip7LwDtMfOuPAsW0PQ"},
{"content":{"body":"hm, maybe i don't bake with the newest recipes, but i still see them all in imperial","m.mentions":{},"msgtype":"m.text"},"ts":1728528759096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MVbNiAHDTQoRj9ijtCj9YYZr5d-MTepEgQHDEc9gKe4"},
{"content":{"body":"> <@ljharb:matrix.org> also gasoline and milk\n\nOr buying soda","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eDiEyOGhoE1SgfdeSCgwlb829Mx9nbAo1nmd3DLSxlM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>also gasoline and milk</blockquote></mx-reply>Or buying soda","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eDiEyOGhoE1SgfdeSCgwlb829Mx9nbAo1nmd3DLSxlM"}},"msgtype":"m.text"},"ts":1728528760757,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S32Ytp2_KmF_KHvNVngtyR8acDHpnUg2d6SThLpl85E"},
{"content":{"body":"wait what","m.mentions":{},"msgtype":"m.text"},"ts":1728528771854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lvWFNs6DI7dl04FStMexVgQUneRweIrVXKldyQnuxFo"},
{"content":{"body":"liter is an imperial unit?","m.mentions":{},"msgtype":"m.text"},"ts":1728528776301,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w8iiLs9gI-2yIQIdMXbCMMr1EYc7vUb9GTBvTgXOu5k"},
{"content":{"body":"soda is non-imperial","m.mentions":{},"msgtype":"m.text"},"ts":1728528786682,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a_VUWYPR-5rGx1GLL_lgbdY6zwez3ngYp_nYG9adb4U"},
{"content":{"body":"gas/milk is imperial","m.mentions":{},"msgtype":"m.text"},"ts":1728528792376,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hc3yKlV3wG5QWPXSqo0UKdVKGpP0iA-r8wBGUGAm9JQ"},
{"content":{"body":"No, I'm saying soda is not imperial","m.mentions":{},"msgtype":"m.text"},"ts":1728528793015,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y6XkyUQY0zWs2DZM-1cpdItyYggosrogpikasfnZTXI"},
{"content":{"body":"oh i got it reversed","m.mentions":{},"msgtype":"m.text"},"ts":1728528794366,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jVkOWM8DDtiAOxdgRMYayk0uG75P_BQ7W9rYMyevT5s"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1728528797425,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d7bQLLEaPUH5mNFoEqgN1ZxpJtCKHvB0JaisOf_CNpU"},
{"content":{"body":" * No, I'm saying soda is not generally measured in imperial units","m.mentions":{},"m.new_content":{"body":"No, I'm saying soda is not generally measured in imperial units","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$y6XkyUQY0zWs2DZM-1cpdItyYggosrogpikasfnZTXI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728528799952,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2ZGxLOWW1kmmkxiU0JgtdLjLPFWVm339BWOjI3Dsxp0"},
{"content":{"body":"you don't use volume in baking","m.mentions":{},"msgtype":"m.text"},"ts":1728528802076,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$imtuhrkZCxmZv4mPc42r52d2a-yl1YEEZ8pBJVfQPRs"},
{"content":{"body":"what a plot twist that soda is an unamerican drink","m.mentions":{},"msgtype":"m.text"},"ts":1728528818091,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$e67fApWKX7BHmt--BDwqXHONiEexZ_Gab-_5qx2LNgo"},
{"content":{"body":"like a teaspoon of oil or something?","m.mentions":{},"msgtype":"m.text"},"ts":1728528826963,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T6uoezUhYJfK7MiobYPPWaXVPDElgUqW7OScHb8Ag7I"},
{"content":{"body":"a cup of water, etc","m.mentions":{},"msgtype":"m.text"},"ts":1728528853768,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ottt2Cpj6EY2bYZojIpvJhB6A82D1QamtWpf_WyJgfI"},
{"content":{"body":"> <@softwarechris:matrix.org> you don't use volume in baking\n\nI suppose it's by weight if you're using a kitchen scale for measuring","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$imtuhrkZCxmZv4mPc42r52d2a-yl1YEEZ8pBJVfQPRs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>you don&#39;t use volume in baking</blockquote></mx-reply>I suppose it's by weight if you're using a kitchen scale for measuring","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$imtuhrkZCxmZv4mPc42r52d2a-yl1YEEZ8pBJVfQPRs"}},"msgtype":"m.text"},"ts":1728528854274,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hZceTEJ4XQngXRXO1Wh7HixUDm3zoheZfY27Spr3JF4"},
{"content":{"body":"I think the british baking show has rubbed off on americans and now they all use metric units when baking","msgtype":"m.text"},"ts":1728528862701,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ABo0OP5C7_vtqw-QzeTp3DBE_GP_5ljKnbYYB0GH_9U"},
{"content":{"body":"it's always by weight if you're doing it right...  but it does help that 1ml === 1g","m.mentions":{},"msgtype":"m.text"},"ts":1728528879032,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$jJKfiOmJLT0jjzD6Un0_kslMRr57QjrJtOdCwLYQzwg"},
{"content":{"body":"maybe yall are doing fancier baking than me, but ive not yet heard americans using metric for baking","m.mentions":{},"msgtype":"m.text"},"ts":1728528888373,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-8IFlGU7EWGje6VgctqWJ-GXh_YzJXsoEf1jPhkID14"},
{"content":{"body":"for water","m.mentions":{},"msgtype":"m.text"},"ts":1728528888377,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ddIM9X_VSaovUU6ipcMkvabGeCTtBWxB8mtsoXtL7HA"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1728528892925,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$J08979cspbaj442xSFzpLlo785sH88UEFhyERz29npo"},
{"content":{"body":"I'm finding myself using metric more and more as I venture deeper and deeper into the 3D printing world","m.mentions":{},"msgtype":"m.text"},"ts":1728528947213,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v24r1uk4ZcP0o-s3PCOFII6DOFgBFv-4WfWwa2PpRTw"},
{"content":{"body":"if you see a baking recipe and it's giving volume measurements, throw it in the trash","m.mentions":{},"msgtype":"m.text"},"ts":1728528947692,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$uKuazHdxmCszFKBUIxtFD8vi_pqOL75-ya4Y7UBWhYQ"},
{"content":{"body":"nervously glances at literally every cake box in safeway","m.mentions":{},"msgtype":"m.emote"},"ts":1728529032676,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uATaRrDrCTU-lUTj6uRv1KN6Q6xcN_yJle36i8Tcl2A"},
{"content":{"body":" * nervously glances at literally every cake mix box in safeway","m.mentions":{},"m.new_content":{"body":"nervously glances at literally every cake mix box in safeway","m.mentions":{},"msgtype":"m.emote"},"m.relates_to":{"event_id":"$uATaRrDrCTU-lUTj6uRv1KN6Q6xcN_yJle36i8Tcl2A","rel_type":"m.replace"},"msgtype":"m.emote"},"ts":1728529040429,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6XQviC6dP0y2Fzx3byGXORgQ8mVE81jxpiIDgPuL1bM"},
{"content":{"body":"cake mix?!  `/scoff`","format":"org.matrix.custom.html","formatted_body":"cake mix?!  <code>/scoff</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728529069618,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$t4VDIiTi5DPeKa2TXL77ePCi4s7dBDieVwfSUOTaUN8"},
{"content":{"body":"A BOX?!","msgtype":"m.text"},"ts":1728529074563,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IUwDn3rtJrE6lFzxpTz3qiycpW1dwO5Nv38EOGtpm1k"},
{"content":{"body":"jesus","msgtype":"m.text"},"ts":1728529079725,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kOTnobVmBp6bmKNU-yqP91Q2zVozZg4y0FOZHLBpXP0"},
{"content":{"body":"what, you want your cake box in a paper bag?","m.mentions":{},"msgtype":"m.text"},"ts":1728529089023,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_V3iNyPDDnuf1prh8K41cTl83WLtpTONKBSN31Wk3jQ"},
{"content":{"body":" * what, you want your cake mix in a paper bag?","m.mentions":{},"m.new_content":{"body":"what, you want your cake mix in a paper bag?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_V3iNyPDDnuf1prh8K41cTl83WLtpTONKBSN31Wk3jQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728529094707,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o3kJLzE-L5bVz5cGgVYPM7TMknLWcsY4bymfneu35wQ"},
{"content":{"body":"unserious cake mixers itc","m.mentions":{},"msgtype":"m.text"},"ts":1728529122270,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$q4b5KDQqiWNThUn6TR8NEFqPw1VO93FLxz3sPzY1IFg"},
{"content":{"body":"wait what else would cake mix come in but a bo","m.mentions":{},"msgtype":"m.text"},"ts":1728529241047,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hubJaBRXGU42EL1Ny9qAMs_lagoKLKx5jYk1UTvGb1A"},
{"content":{"body":" * wait what else would cake mix come in but a box","m.mentions":{},"m.new_content":{"body":"wait what else would cake mix come in but a box","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hubJaBRXGU42EL1Ny9qAMs_lagoKLKx5jYk1UTvGb1A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728529242016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B3IhWnFY508KdoxG6lRNpWuHnmhsuYNuvhw0IgUMe7Q"},
{"content":{"body":"50# sacks","m.mentions":{},"msgtype":"m.text"},"ts":1728529268682,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$5yEKGxyFFYPCbZD21ruZNbn0U-pyuxlf3qKBZIR9x-c"},
{"content":{"body":"i mean it's bagged inside the box ofc, like cereal","m.mentions":{},"msgtype":"m.text"},"ts":1728529269254,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hAClwdnu6V8Bp3CHlrHJ52_crUsUNTLLdZS9RBtkrnE"},
{"content":{"body":"usage=\"cake-mix\"","m.mentions":{},"msgtype":"m.text"},"ts":1728529283342,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$UJ5R3GPj9K8H9-sXzoCe78Jil4ictVXfX_25GK4iKZs"},
{"content":{"body":"> <@ljharb:matrix.org> wait what else would cake mix come in but a box\n\na cake mix tureen, what else","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hubJaBRXGU42EL1Ny9qAMs_lagoKLKx5jYk1UTvGb1A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>wait what else would cake mix come in but a box</blockquote></mx-reply>a cake mix tureen, what else","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hubJaBRXGU42EL1Ny9qAMs_lagoKLKx5jYk1UTvGb1A"}},"msgtype":"m.text"},"ts":1728529285375,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$QyOJfK-FuGypFEDf9LUeGNJYjPACm4qFo7DTDgsyY7s"},
{"content":{"body":" * `usage=\"cake-mix\"`","format":"org.matrix.custom.html","formatted_body":" * <code>usage=\"cake-mix\"</code>","m.mentions":{},"m.new_content":{"body":"`usage=\"cake-mix\"`","format":"org.matrix.custom.html","formatted_body":"<code>usage=\"cake-mix\"</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UJ5R3GPj9K8H9-sXzoCe78Jil4ictVXfX_25GK4iKZs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728529287890,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$n9GFKeH6Oicst5yDpkrpunO28MDxfLBeGSlGRBxikpg"},
{"content":{"body":"aluminum cans","m.mentions":{},"msgtype":"m.text"},"ts":1728529288211,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$NnMKB4hCm2HR-1IL6RRCvZnjrJLWprTAjOdLFS4WypA"},
{"content":{"body":"it wouldn't be cake mix and it wouldn't be in a box, it would be raw ingredients","msgtype":"m.text"},"ts":1728529298552,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NQJHPGySEp_1o1M1O3bDQIKFEaZox7WlPUp3YkBpsbw"},
{"content":{"body":"the rawest","m.mentions":{},"msgtype":"m.text"},"ts":1728529316316,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Ru-5l6W-EMFC0AHFkYx3_94CcTnWFQImOuy8B73c3No"},
{"content":{"body":"ok, calm down, you baking elitists","m.mentions":{},"msgtype":"m.text"},"ts":1728529318439,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wjtwt0FbMiZDvV5aGON-V6fkQxDh4hQCREs9h6Zx_6I"},
{"content":{"body":"if you're not milling your own flour are you really a baker?","m.mentions":{},"msgtype":"m.text"},"ts":1728529329687,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$v54JSCKBV2Q4IqPbNOpnH2HnnmwKi70QDLRLCLUQxJI"},
{"content":{"body":"that would be a miller","m.mentions":{},"msgtype":"m.text"},"ts":1728529341981,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$DK7VsZWm5Zm1ncTuPDSoFhG-QPXh6jRTR8E1nDD0H9M"},
{"content":{"body":"https://abcnews.go.com/Lifestyle/man-spends-months-1500-make-sandwich-scratch/story?id=33802231","m.mentions":{},"msgtype":"m.text"},"ts":1728529385415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_DudE49jsXGpX-RDbWPRAS2S4nE48I9qrt8Rr2OBfHU"},
{"content":{"body":"…molar, müller, mollino, etc","m.mentions":{},"msgtype":"m.text"},"ts":1728529390386,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$5vsI-P-wdu8GZYvPXBrUl_96jCX4Zn6cWtGBC7duDS0"},
{"content":{"body":"> <@ljharb:matrix.org> https://abcnews.go.com/Lifestyle/man-spends-months-1500-make-sandwich-scratch/story?id=33802231\n\nto bake a cake from scratch one must first create the universe","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_DudE49jsXGpX-RDbWPRAS2S4nE48I9qrt8Rr2OBfHU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>https://abcnews.go.com/Lifestyle/man-spends-months-1500-make-sandwich-scratch/story?id=33802231</blockquote></mx-reply>to bake a cake from scratch one must first create the universe","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_DudE49jsXGpX-RDbWPRAS2S4nE48I9qrt8Rr2OBfHU"}},"msgtype":"m.text"},"ts":1728529438905,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$S1Qj5K_XrCJR3gc6Za3yC7adBQoTPMo4b4kVVMK3iOs"},
{"content":{"body":"looking for folks to help with the notes starting in 20 mins","m.mentions":{},"msgtype":"m.text"},"ts":1728531556948,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KhYK1jHyWNAISHtHMHgVn5W72WoxPFJVn238GOINEUc"},
{"content":{"body":"👀","m.mentions":{},"msgtype":"m.text"},"ts":1728532713391,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$DrCg8NE5NnWEPBa_Ad5qszkoe1Lu0a72nE4kr8TIW1k"},
{"content":{"body":"+1","m.mentions":{},"msgtype":"m.text"},"ts":1728532750178,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$BBRzmfzTUWgIepz3AvnnZv94nXX0MxMGYKXoopWEWX0"},
{"content":{"body":"do we need consensus for stage 0?","m.mentions":{},"msgtype":"m.text"},"ts":1728532906246,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$TEjDwX59Pyn7ZiC5rXKya6tJ2bSTo9_rInA2UlObx28"},
{"content":{"body":"could someone on the team's call copy the link to the slides? I'm assuming if I join I won't be able to see previous chat history","m.mentions":{},"msgtype":"m.text"},"ts":1728532915259,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LSKMCj9rnPrVHZ7YvM_Xj5idb2c1rNCvOhBtkFuBlcE"},
{"content":{"body":"https://docs.google.com/presentation/d/1yakKCsS3pR0T7eJcaJD2ZUzK6xG6FcoFnrmngkJUcEo/edit#slide=id.g2fa19dd416b_0_181","m.mentions":{},"msgtype":"m.text"},"ts":1728532960485,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zTjNPdz6FfVveGfyLqWQOBoH-ahiV2Iad9XWKA2zbhU"},
{"content":{"body":"ta","m.mentions":{},"msgtype":"m.text"},"ts":1728533040119,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZyPeBkTjVujhZ6RU09z5vVLTyH8jpCyhXxby8Rh2a3o"},
{"content":{"body":"We regret to inform that the `Observable` topic has been withdrawn due to availability issues.","format":"org.matrix.custom.html","formatted_body":"We regret to inform that the <code>Observable</code> topic has been withdrawn due to availability issues.","m.mentions":{},"msgtype":"m.text"},"ts":1728533091238,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$e4_uqD2zAQs7LdF_fslYpoAgQQG_I4uuhPd7n7vhOe4"},
{"content":{"body":"\"30m stage 0 update\" is a pretty wild concept","m.mentions":{},"msgtype":"m.text"},"ts":1728533856297,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$kCw40sCjoqMNGtMNorp0EBR4wAEuxPYjU1y11J3U8m4"},
{"content":{"body":"if we're getting an item more than once at committee then it's really not stage 0, it's stage 1","m.mentions":{},"msgtype":"m.text"},"ts":1728533902905,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AiUXiuNMN__H_l6dzP68xB6s6wd1Y4R44jmIlvkrtmM"},
{"content":{"body":"because we're spending time exploring the problem","m.mentions":{},"msgtype":"m.text"},"ts":1728533909159,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9HSMjVV-g8-Efc4yRa6QVU7GCcH8JIZof0cT6g7b4Q4"},
{"content":{"body":"that is also how I feel","m.mentions":{},"msgtype":"m.text"},"ts":1728533946324,"senderName":"Ross Kirsling","senderId":"@rkirsling:matrix.org","id":"$UfqWGA0ObMDDXswlZHZJkQAwx5l3rWP4wgZVCUn4lUc"},
{"content":{"body":"> delegates HATE it.. circumvent the process with this one neat trick!","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>delegates HATE it.. circumvent the process with this one neat trick!</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728533969638,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$R48q9LxAXMmW7j237xUGgjSgEsi0TNuadPG3Qlp1nIk"},
{"content":{"body":"What if the module exports `then`?","format":"org.matrix.custom.html","formatted_body":"What if the module exports <code>then</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1728535402472,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$kOACg3EDxyjwukt-K3rD43piuPnQCLKexmW-ehamAd8"},
{"content":{"body":"that's coming up","m.mentions":{},"msgtype":"m.text"},"ts":1728535417020,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$maqZIBq3AoB_lV7J5O9CaokizTEWzVNbs5EUIgQGOg0"},
{"content":{"body":"> <@waldemarh:matrix.org> What if the module exports `then`?\n\ndynamic import will call `then` 😭","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kOACg3EDxyjwukt-K3rD43piuPnQCLKexmW-ehamAd8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>What if the module exports <code>then</code>?</blockquote></mx-reply>dynamic import will call <code>then</code> 😭","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kOACg3EDxyjwukt-K3rD43piuPnQCLKexmW-ehamAd8"}},"msgtype":"m.text"},"ts":1728535494849,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$XHd37WEwxaO4Di3NUcYQh_jH4gIhbEAYhJAEXKx-L_Y"},
{"content":{"body":"I always think it's a mistake.","m.mentions":{},"msgtype":"m.text"},"ts":1728535516968,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$e6OLJwbTfgjWpzxsubCR7VyxqtiT358-KMa00znPBso"},
{"content":{"body":"Yeah. That seems a bit troublesome…","m.mentions":{},"msgtype":"m.text"},"ts":1728535525063,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$2v-PAYe9lt8m1QtkMSSakR9AVjNsi_e9z5DRCqFLHec"},
{"content":{"body":"So I really hope we can fix it (not sure why Symbol.unthenable was rejected...)","m.mentions":{},"msgtype":"m.text"},"ts":1728535621638,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$Jk4qzYMP5GmMKBJQcih0d41Zllls3yPrHUssLNFZgbw"},
{"content":{"body":"web compat, people were already relying on thenable modules in production","m.mentions":{},"msgtype":"m.text"},"ts":1728535714001,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4"},
{"content":{"body":"> <@ljharb:matrix.org> web compat, people were already relying on thenable modules in production\n\nreally? 😩","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>web compat, people were already relying on thenable modules in production</blockquote></mx-reply>really? 😩","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4"}},"msgtype":"m.text"},"ts":1728535743796,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$RuM9kUeOrGX6yP5S83oKWUbv1U8Hug0bzNKYTQPAtB4"},
{"content":{"body":"> <@ljharb:matrix.org> web compat, people were already relying on thenable modules in production\n\nreally weird... Is it just for fun?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>web compat, people were already relying on thenable modules in production</blockquote></mx-reply>really weird... Is it just for fun?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4"}},"msgtype":"m.text"},"ts":1728535781589,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$KDLVtYHvKP5C2WcbqCRYvxFyJYICoDXgXOB_l5zDRFc"},
{"content":{"body":"Is it a real production or just toy project?","m.mentions":{},"msgtype":"m.text"},"ts":1728535824499,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$ZcqLqpZuWl4wsXWojLFs1P12PpoFTb1ukqQrRHfh0JU"},
{"content":{"body":"i'm not sure we ever dug into it, we just heard claims that they were i think","m.mentions":{},"msgtype":"m.text"},"ts":1728535848559,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4ZTwnRAGi6DsHDUOb9QyMc-JyKgSoQZLqgvmv08KuhU"},
{"content":{"body":"would it be hard to feature detect that?","m.mentions":{},"msgtype":"m.text"},"ts":1728535887764,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$ldmO72Nhyv1YW4Vkxb_iU28qtGvBpHrUkwLeFrTIcGY"},
{"content":{"body":"well, I meant, hard to know how much it's used","m.mentions":{},"msgtype":"m.text"},"ts":1728535906560,"senderName":"Andreu Botella (at TC39, 🕐 JST)","senderId":"@abotella:igalia.com","id":"$3e7nkfWdQcA5B11it2Ca4OmPSAFpBGwH5yRo4Xlv7bM"},
{"content":{"body":"I really think relying on the such bad semantics (static import and dynamic import give u different things) in production is very very weird...","m.mentions":{},"msgtype":"m.text"},"ts":1728535939872,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$Clbzxqkd8li0m0o2jpoIkWd9oNdnlw-x4iDo9rWRHmk"},
{"content":{"body":"are there any known demands for import.defer?","m.mentions":{},"msgtype":"m.text"},"ts":1728536088409,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$wnzY5Gly85O0vG9VgxBwPWy4_NCCLX-g8ctPLYDa3YE"},
{"content":{"body":"@nicolo-ribaudo:matrix.org we can hear you typing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo</a> we can hear you typing","msgtype":"m.text"},"ts":1728536254069,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$gHfrEhPhQ6TBJ6NXBNqcajSzONV3gXdCRzsGiKtV5Hc"},
{"content":{"body":"> <@haxjs:matrix.org> Is it a real production or just toy project?\n\nProduction. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZcqLqpZuWl4wsXWojLFs1P12PpoFTb1ukqQrRHfh0JU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br />Is it a real production or just toy project?</blockquote></mx-reply>Production.","m.relates_to":{"m.in_reply_to":{"event_id":"$ZcqLqpZuWl4wsXWojLFs1P12PpoFTb1ukqQrRHfh0JU"}},"msgtype":"m.text"},"ts":1728536420280,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TaxIOZePIwXOaCahxcdDWpzuyNs6biawhNJ-5pOJOE0"},
{"content":{"body":"I'm not on the call now, what is the problem with lazy evaluating on export access?","msgtype":"m.text"},"ts":1728536466860,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m8be9mfzd_3Pz0FiZezMahRDv-EzAXY1k_OTyD1tfIY"},
{"content":{"body":"thenables","m.mentions":{},"msgtype":"m.text"},"ts":1728536483326,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Buuwi7JdLKTa5KnmHDcTRyluitNglHV7OwzbQDfLaoM"},
{"content":{"body":"Specifically the promise resolution of the dynamic import triggers the evaluation","msgtype":"m.text"},"ts":1728536586665,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Dh-jWRqwCH7JB0frHndTpysHam4Y-AgGrsnGHfCJTcI"},
{"content":{"body":"I understand that. But it just means that only thenable modules wouldn't be lazy evaluated. More precisely the promise logic doing get then would trigger evaluation","msgtype":"m.text"},"ts":1728536664207,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qgdPAsgIjOy5R1l64kveuFM7le652wJd6IB8cBt4_gk"},
{"content":{"body":"* I understand that. But it just means that only thenable modules wouldn't be lazy evaluated. More precisely the promise logic doing get then would trigger their evaluation","m.new_content":{"body":"I understand that. But it just means that only thenable modules wouldn't be lazy evaluated. More precisely the promise logic doing get then would trigger their evaluation","msgtype":"m.text"},"m.relates_to":{"event_id":"$qgdPAsgIjOy5R1l64kveuFM7le652wJd6IB8cBt4_gk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728536684658,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$__7JLET46np0nBpIgnoVDB-wCIqLVItJeB4eq7PT6Yg"},
{"content":{"body":"It wouldn't affect any other kind of modules","msgtype":"m.text"},"ts":1728536708871,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KEFc2joJodUvTlenf2YkpHDwFf3zli6NHZ23-AvVQ-Y"},
{"content":{"body":"any property access triggers evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1728536733052,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JfDAnowdvyrQqbFG6IDgDTBCbdBKwUjayFpbMVvT-EI"},
{"content":{"body":"and you have to access `.then`","format":"org.matrix.custom.html","formatted_body":"and you have to access <code>.then</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728536737914,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-gzXrp14Ie1-9sUco7u1ndXszCsiSbLur3Dm-qBI4a0"},
{"content":{"body":"Right so what's the problem to trigger evaluation of thenable modules","msgtype":"m.text"},"ts":1728536778065,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8QGrMEjNY-waOltoNiP-xZJ6n61bKxeIiCz3s8iGclw"},
{"content":{"body":"it triggers all modules","m.mentions":{},"msgtype":"m.text"},"ts":1728536793258,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$24MSl1QrBSmYi4dWv5kervWW9vumh2RQMT9bnS3yv5w"},
{"content":{"body":"`Promise.resolve(foo)` accesses `foo.then`","format":"org.matrix.custom.html","formatted_body":"<code>Promise.resolve(foo)</code> accesses <code>foo.then</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728536796603,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dxQui6STLXJlnJtayeoFWAlZp7y4Jt64HlLl3HJvTIc"},
{"content":{"body":"regardless of whether `foo` has a `.then`","format":"org.matrix.custom.html","formatted_body":"regardless of whether <code>foo</code> has a <code>.then</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728536803888,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pkQSgOm9tNnEixxjcdCHsEhQ6jwq5hWm4Gxh7UK7k0k"},
{"content":{"body":"I'm just saying if the module is non thenable, it wouldn't trigger evaluation. All good","msgtype":"m.text"},"ts":1728536817756,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_YI5Mh9ZU61D_QuYZxMC3clVdhGA2gJEnxMczK_wLDU"},
{"content":{"body":"any property access triggers evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1728536834578,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B0bJlHe7hSVm_e78iO4IdEX-RHHPfJDL9CnSNdaO1y8"},
{"content":{"body":"the property does not have to exist to trigger evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1728536843334,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PceGPtjs47YFLWgU44za88-PIqGRV0WLbZNNy5dJi4E"},
{"content":{"body":"and sticking the module namespace object into a promise triggers access of `.then`","format":"org.matrix.custom.html","formatted_body":"and sticking the module namespace object into a promise triggers access of <code>.then</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728536860099,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$92Olu5qqcacZTIzwHKgsdzOVumuQY0_EdKJgqyjOb9o"},
{"content":{"body":"and dynamic import sticks the module namespace object into a promise","m.mentions":{},"msgtype":"m.text"},"ts":1728536872052,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4xBNlzbLwwHLXrUn_5knn48Wfgn7cYbNuQd-bA2NGok"},
{"content":{"body":"But that's what I'm asking. Why can't we defer evaluation to access of a known export","msgtype":"m.text"},"ts":1728536878968,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BksRCt1PL5MwhjqhAOPkfFmAMm6RSOibYrC_3fciH4c"},
{"content":{"body":"when would you trigger the evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1728536936794,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pjuTXhBk7LauvEupdz284cz9TgA3U_BIYyEmCGFJPUQ"},
{"content":{"body":"You don't need to evaluate to know what is exported ","msgtype":"m.text"},"ts":1728536942672,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eAAS7ycSM9VXWFT731QIZhFNKkrJmUt3rMewGCBE4DI"},
{"content":{"body":"Promise.resolve accesses .then, it doesn't ask if it has a .then","m.mentions":{},"msgtype":"m.text"},"ts":1728536964444,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UbdhNEEyaQX_hqilqM_6APT-pxyIrs-AHQx_6SD7IPk"},
{"content":{"body":"When you do get then or any prop access for known exports ","msgtype":"m.text"},"ts":1728536973876,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LGU1rjofrnioRJS_N2mnkl8MVLqkgxtwWn048o5uSmE"},
{"content":{"body":"which Promise.resolve does, it gets .then","m.mentions":{},"msgtype":"m.text"},"ts":1728536993260,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mcbWG7hSOmUIfNE2PQM4sjHEFmqp7hVE4KiWxz_dNBI"},
{"content":{"body":"what is happening","m.mentions":{},"msgtype":"m.text"},"ts":1728537000199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5isCO8m8fzomg-_6cJbIqloUEW_93FrnigqkeKdzRIk"},
{"content":{"body":"i think what mathieu is suggesting is that we _change_ promise resolution so that _for a deferred namespace object_, it doesn't access `.then` unless that's an export of the module?","format":"org.matrix.custom.html","formatted_body":"i think what mathieu is suggesting is that we <em>change</em> promise resolution so that <em>for a deferred namespace object</em>, it doesn't access <code>.then</code> unless that's an export of the module?","m.mentions":{},"msgtype":"m.text"},"ts":1728537058157,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yrrVNUvdfNOWOIbqgxTmIxMfvebLRD6-cIIOKtt4iWM"},
{"content":{"body":"I see stuff dropping off the queue, but we have time to continue discussion","m.mentions":{},"msgtype":"m.text"},"ts":1728537080859,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$fY7EJZ7wEpL0JJjusjLaWWA1gRRqFzqOOFR4fF8G9nw"},
{"content":{"body":"where do you put this, inside step 9 of https://tc39.es/ecma262/#sec-promise-resolve-functions?","m.mentions":{},"msgtype":"m.text"},"ts":1728537082568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mCueRGxvyr87dVNsk3rgvJpfX7QPSUaOBx_szzK4cJo"},
{"content":{"body":"I assumed the idea was that you","m.mentions":{},"msgtype":"m.text"},"ts":1728537093773,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks"},
{"content":{"body":" * I assumed the idea was that you'd know the names before triggering evaluation","m.mentions":{},"m.new_content":{"body":"I assumed the idea was that you'd know the names before triggering evaluation","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728537102688,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QUr27P_ywIG6J_1LNI7gpgSNUi-Q89MK5kItIUIgrww"},
{"content":{"body":"I don't know if that's true","m.mentions":{},"msgtype":"m.text"},"ts":1728537108602,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L8Ab5N6_ky7k8F1snJkLxHMtYg8xuYn9uI0_v6ndIt0"},
{"content":{"body":"> <@shuyuguo:matrix.org> where do you put this, inside step 9 of https://tc39.es/ecma262/#sec-promise-resolve-functions?\n\nthat seems like a reasonable place","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mCueRGxvyr87dVNsk3rgvJpfX7QPSUaOBx_szzK4cJo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>where do you put this, inside step 9 of https://tc39.es/ecma262/#sec-promise-resolve-functions?</blockquote></mx-reply>that seems like a reasonable place","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mCueRGxvyr87dVNsk3rgvJpfX7QPSUaOBx_szzK4cJo"}},"msgtype":"m.text"},"ts":1728537123576,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g5Gg3HCTNUZdbhLQaKTZb2U36Mo6PR4kJH-jGibNpeU"},
{"content":{"body":"seems wacky","m.mentions":{},"msgtype":"m.text"},"ts":1728537139057,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ytXi6fOBBz4O-iTYFokciIAOc6xg4c7fUNTDoHmBzeA"},
{"content":{"body":"anything that touches thenable modules is wacky","m.mentions":{},"msgtype":"m.text"},"ts":1728537164350,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XFzGCB4LKAHnjF5EDAsQYnJ_tXyDUtU4j-GiLss50Gg"},
{"content":{"body":" * anything that touches thenable modules is indeed wacky","m.mentions":{},"m.new_content":{"body":"anything that touches thenable modules is indeed wacky","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XFzGCB4LKAHnjF5EDAsQYnJ_tXyDUtU4j-GiLss50Gg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728537168487,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fiRSje9CqvfVwXOOzbYjgWLYsPw-6iln7J0uhoTps-A"},
{"content":{"body":"> <@bakkot:matrix.org> I don't know if that's true\n\nthe official spec knows. But userland bundlers may not know","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L8Ab5N6_ky7k8F1snJkLxHMtYg8xuYn9uI0_v6ndIt0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I don&#39;t know if that&#39;s true</blockquote></mx-reply>the official spec knows. But userland bundlers may not know","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$L8Ab5N6_ky7k8F1snJkLxHMtYg8xuYn9uI0_v6ndIt0"}},"msgtype":"m.text"},"ts":1728537183512,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$GeD3dM4wAeZddbAV_rpO4KldgCRsQLmQzBbN3L4cw90"},
{"content":{"body":"> <@ljharb:matrix.org> web compat, people were already relying on thenable modules in production\n\nAlso expense/complexity of adding another property access to this hot path of promise resolution ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>web compat, people were already relying on thenable modules in production</blockquote></mx-reply>Also expense/complexity of adding another property access to this hot path of promise resolution","m.relates_to":{"m.in_reply_to":{"event_id":"$HpgYGUTriY0FlLkCXANgJniDcx-vZw5SxrWQ3E3FrS4"}},"msgtype":"m.text"},"ts":1728537262713,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C0Foj-rHmrFSeSbIj22K3sbcM4kQoNTAVZjEzNX0bJI"},
{"content":{"body":"About the use cases for import.defer: we had an internal meeting in Bloomberg before TC39, and we couldn’t come up with a real use case. The case Ashley raised doesn’t occur in our infrastructure—it is very hypothetical. Personally I think removing the dynamic import.defer feature and not doing this namespace censorship is the right tradeoff for avoiding complexity","msgtype":"m.text"},"ts":1728537384772,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b95oKxZPh948eypq3JMYQnduOrjBUKK7ZcEaq37hAVY"},
{"content":{"body":"i feel like you can get what you want with dynamic import + static defer inside the dynamically imported graph","m.mentions":{},"msgtype":"m.text"},"ts":1728537426695,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jnBbLi79kNg0lVLM13rlDmSgPt1hj2Uvz6rR4USPpF0"},
{"content":{"body":"but let me check internally as well, we might have a use case. at the moment i can't think of anything","m.mentions":{},"msgtype":"m.text"},"ts":1728537442836,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$kBW0caavhixv9gsUlhD0nwLFYx6Eqk-UgDnzwKasC3o"},
{"content":{"body":"i guess you could maybe get it with `import()` of a data URI that does a static deferred import and re-export?","format":"org.matrix.custom.html","formatted_body":"i guess you could maybe get it with <code>import()</code> of a data URI that does a static deferred import and re-export?","m.mentions":{},"msgtype":"m.text"},"ts":1728537463020,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LToMLpPs0FwTjN9Tuf8T7c6jG2Q1N31jRj1fkYiHR0M"},
{"content":{"body":"yeah exactly","m.mentions":{},"msgtype":"m.text"},"ts":1728537470970,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$SVVTcaTZKkMEgI--E4kQlrfx6Ck6GRC7XgFsW-l9XYs"},
{"content":{"body":" Sorry afk, will formulate more clearly soon","msgtype":"m.text"},"ts":1728537494847,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QXLl8YmxPpbEixNJKRiyctf8GsnSuH6FM-ErknI8iFo"},
{"content":{"body":"because `import.defer` is fundamentally different from the static import defer: static import defer is always a module graph edge. In the case of import.defer we are deferring the module root","format":"org.matrix.custom.html","formatted_body":"because <code>import.defer</code> is fundamentally different from the static import defer: static import defer is always a module graph edge. In the case of import.defer we are deferring the module root","m.mentions":{},"msgtype":"m.text"},"ts":1728537510730,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$v08var8bX3z1YpJMwQsSw0OhjXA7vXEuzEGnRFNmV7I"},
{"content":{"body":"I want to see a future where WASM module instantiation is handled transparently in the ESM universe. WASM source imports are a step in the right direction, but I want to see instantiation handled via import defer at some point. And dynamic loading of WASM sources is definitely a use case.","m.mentions":{},"msgtype":"m.text"},"ts":1728537695225,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$oTviYYaKt6_rTUmt4iIh8D3uFLvf37zFQ3c8aFYv2Sc"},
{"content":{"body":"> <@sffc:mozilla.org> I want to see a future where WASM module instantiation is handled transparently in the ESM universe. WASM source imports are a step in the right direction, but I want to see instantiation handled via import defer at some point. And dynamic loading of WASM sources is definitely a use case.\n\nImport source + import() covers some of these cases though ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24oTviYYaKt6_rTUmt4iIh8D3uFLvf37zFQ3c8aFYv2Sc\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>I want to see a future where WASM module instantiation is handled transparently in the ESM universe. WASM source imports are a step in the right direction, but I want to see instantiation handled via import defer at some point. And dynamic loading of WASM sources is definitely a use case.</blockquote></mx-reply>Import source + import() covers some of these cases though","m.relates_to":{"m.in_reply_to":{"event_id":"$oTviYYaKt6_rTUmt4iIh8D3uFLvf37zFQ3c8aFYv2Sc"}},"msgtype":"m.text"},"ts":1728537877320,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$w_TJQmAKhW2HjtftBgMorvDYtFYnGw75fHGfd6Aaadw"},
{"content":{"body":"The problem is the function coloring…","msgtype":"m.text"},"ts":1728537892274,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C62rPBNCNr2GUtl0estELf8014d0K-P_kNgGWewHJF4"},
{"content":{"body":"> <@bakkot:matrix.org> I assumed the idea was that you'd know the names before triggering evaluation\n\nThere are two possible implementations of this proposal:\n- one (trivial) is that you follow the spec to the word, and eagerly pre-load and pre-parse the module and its dependencies. In this case, you always have access to the list of export names before evaluation.\n- the other one is that you only collect some minimal metadata (does it have a dep with TLA? does it have syntax errors?) about modules before executing the app, and then skip loading/parsing entirely. You obviously cannot do this if you need to fetch files from the network, but that's often not the case (Node.js, the various edge runtimes, browser caches). This is the approach that gives the most benefits.\n\nWith the second approach you _can_ get the list of exports in this pre-execution phase, but it's more metadata you have to maintain.\n\nBundlers are very similar to to the second case, except that they currently need _no metadata_: the way to bundle deferred modules is to wrap them in a function, and thus:\n- you already are protected against syntax errors\n- there is no TLA, because that's handled by injecting the async module outside of the deferred function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I assumed the idea was that you&#39;d know the names before triggering evaluation</blockquote></mx-reply><p>There are two possible implementations of this proposal:</p>\n<ul>\n<li>one (trivial) is that you follow the spec to the word, and eagerly pre-load and pre-parse the module and its dependencies. In this case, you always have access to the list of export names before evaluation.</li>\n<li>the other one is that you only collect some minimal metadata (does it have a dep with TLA? does it have syntax errors?) about modules before executing the app, and then skip loading/parsing entirely. You obviously cannot do this if you need to fetch files from the network, but that's often not the case (Node.js, the various edge runtimes, browser caches). This is the approach that gives the most benefits.</li>\n</ul>\n<p>With the second approach you <em>can</em> get the list of exports in this pre-execution phase, but it's more metadata you have to maintain.</p>\n<p>Bundlers are very similar to to the second case, except that they currently need <em>no metadata</em>: the way to bundle deferred modules is to wrap them in a function, and thus:</p>\n<ul>\n<li>you already are protected against syntax errors</li>\n<li>there is no TLA, because that's handled by injecting the async module outside of the deferred function</li>\n</ul>\n","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks"}},"msgtype":"m.text"},"ts":1728538200509,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QMI55eFzZz1pL6pQ6m5NuQgfl-60aHCE6AyNGRTyUKM"},
{"content":{"body":"> <@littledan:matrix.org> Import source + import() covers some of these cases though\n\nWell, also `const wasm = import.source(...)` + `WebAssembly.instantiate(wasm)` covers it in a sync way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w_TJQmAKhW2HjtftBgMorvDYtFYnGw75fHGfd6Aaadw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Import source + import() covers some of these cases though</blockquote></mx-reply>Well, also <code>const wasm = import.source(...)</code> + <code>WebAssembly.instantiate(wasm)</code> covers it in a sync way","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w_TJQmAKhW2HjtftBgMorvDYtFYnGw75fHGfd6Aaadw"}},"msgtype":"m.text"},"ts":1728538257875,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$z5x43nZ34d19RCrwETml87d0LhfDi7vHW4bxSOJzSTk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Well, also `const wasm = import.source(...)` + `WebAssembly.instantiate(wasm)` covers it in a sync way\n\nKinda, but then you don’t get the native imports","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24z5x43nZ34d19RCrwETml87d0LhfDi7vHW4bxSOJzSTk\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Well, also <code>const wasm = import.source(...)</code> + <code>WebAssembly.instantiate(wasm)</code> covers it in a sync way</blockquote></mx-reply>Kinda, but then you don’t get the native imports","m.relates_to":{"m.in_reply_to":{"event_id":"$z5x43nZ34d19RCrwETml87d0LhfDi7vHW4bxSOJzSTk"}},"msgtype":"m.text"},"ts":1728538291060,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZfCi3niesDsvU1PkQI2YLIsako7aOgCfNK3yaqP-D-o"},
{"content":{"body":"Oh true -- it only covers the many of the cases but not all of them","m.mentions":{},"msgtype":"m.text"},"ts":1728538335453,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GNCAIouRNyvPAWWKC6WbR7vK-KAf8H6oPs8gbxpTc0s"},
{"content":{"body":"> <@michaelficarra:matrix.org> It was briefly mentioned.\n\nAh, found it in the automated transcript.\n\n> Our next meeting coming up is a remote meeting on mountain time. So that's Albuquerque, our notional virtual venue. We are also working on the schedule for next year and hope to publish that very soon, as soon as we've got confirmations from the potential hosts.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MQ3uKBxDmq8b_HuTsIMwSP5UrBUT9krPAM9_6KeaPMI\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>It was briefly mentioned.</blockquote></mx-reply><p>Ah, found it in the automated transcript.</p>\n<blockquote>\n<p>Our next meeting coming up is a remote meeting on mountain time. So that's Albuquerque, our notional virtual venue. We are also working on the schedule for next year and hope to publish that very soon, as soon as we've got confirmations from the potential hosts.</p>\n</blockquote>","m.relates_to":{"m.in_reply_to":{"event_id":"$MQ3uKBxDmq8b_HuTsIMwSP5UrBUT9krPAM9_6KeaPMI"}},"msgtype":"m.text"},"ts":1728538516248,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$iODFjDMDEvUt5Z60OWzlqCwkyPcubgqwDyVte7C6sbY"},
{"content":{"body":"> <@sffc:mozilla.org> I want to see a future where WASM module instantiation is handled transparently in the ESM universe. WASM source imports are a step in the right direction, but I want to see instantiation handled via import defer at some point. And dynamic loading of WASM sources is definitely a use case.\n\nI agree with this goal about Wasm/ESM integration, and now understand the case better where this feature will be useful, but then I  wonder who will be sophisticated enough to do this import.defer() idiom in order to split up compilation vs instantiation cost (and what policy should even be used)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24oTviYYaKt6_rTUmt4iIh8D3uFLvf37zFQ3c8aFYv2Sc\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>I want to see a future where WASM module instantiation is handled transparently in the ESM universe. WASM source imports are a step in the right direction, but I want to see instantiation handled via import defer at some point. And dynamic loading of WASM sources is definitely a use case.</blockquote></mx-reply>I agree with this goal about Wasm/ESM integration, and now understand the case better where this feature will be useful, but then I  wonder who will be sophisticated enough to do this import.defer() idiom in order to split up compilation vs instantiation cost (and what policy should even be used)","m.relates_to":{"m.in_reply_to":{"event_id":"$oTviYYaKt6_rTUmt4iIh8D3uFLvf37zFQ3c8aFYv2Sc"}},"msgtype":"m.text"},"ts":1728538538227,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JxsuKZw8Z92trN-I4QlAffzEx_4iIBEGHduyaIr63Lw"},
{"content":{"body":"> <@bakkot:matrix.org> I assumed the idea was that you'd know the names before triggering evaluation\n\nThis exactly. My understanding is that all exported names of a module are known without evaluating the module. That means technically we could model this as an object with known props and the first access (get, gOPD) on one of these props would trigger the evaluation of the module. That way the import.defer of a non thenable module does not trigger the evaluation of the module. But if the module is thenable, then of course the regular promise logic will trigger evaluation when it does a get of then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />I assumed the idea was that you'd know the names before triggering evaluation</blockquote></mx-reply>This exactly. My understanding is that all exported names of a module are known without evaluating the module. That means technically we could model this as an object with known props and the first access (get, gOPD) on one of these props would trigger the evaluation of the module. That way the import.defer of a non thenable module does not trigger the evaluation of the module. But if the module is thenable, then of course the regular promise logic will trigger evaluation when it does a get of then","m.relates_to":{"m.in_reply_to":{"event_id":"$MjchgjLda3zHTAXT4NoCmCjcPlDg4hdTGnshCGPoaks"}},"msgtype":"m.text"},"ts":1728538928560,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_skXMwJDHD-zu5ZAbiuOOjgSfMRdJZ1jtlHU9irU6Y0"},
{"content":{"body":"> <@littledan:matrix.org> The problem is the function coloring…\n\ncan you elaborate? not familiar with the wasm usecase so well, so i don't know how import.defer solves this better than import source + import()","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C62rPBNCNr2GUtl0estELf8014d0K-P_kNgGWewHJF4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The problem is the function coloring…</blockquote></mx-reply>can you elaborate? not familiar with the wasm usecase so well, so i don't know how import.defer solves this better than import source + import()","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$C62rPBNCNr2GUtl0estELf8014d0K-P_kNgGWewHJF4"}},"msgtype":"m.text"},"ts":1728539047263,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QNijzQ5n9bigERXts2pR0QzLD18g693KQGZgeJqGaRY"},
{"content":{"body":"are any slides intended to be shared right now?","m.mentions":{},"msgtype":"m.text"},"ts":1728539065685,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$KR9P8-IkhAm4Oe_XcRptytnzErfR2tRd2Ljk4jXoKYA"},
{"content":{"body":"because thats a good point, import.source and then import later is possibly another solution?","m.mentions":{},"msgtype":"m.text"},"ts":1728539066740,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZWDATKwIdeoE6yc2klqd4X39UpXlZ9l1UJpKDSuiPFg"},
{"content":{"body":"i don't really see the priority on making evaluation-phase wasm ESM integration work well","m.mentions":{},"msgtype":"m.text"},"ts":1728539128255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qi4_ZAdTWpyQef_JYsrD6cipEm8ErNv82Axl4-IH5mQ"},
{"content":{"body":"you gotta do something to pass in the imports","m.mentions":{},"msgtype":"m.text"},"ts":1728539137821,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9COavlENnSXJeu4BRnnDfQrgZf9FnPRG1YomhWAKWh4"},
{"content":{"body":"it seems like it's just composed import.source then an instantiate","m.mentions":{},"msgtype":"m.text"},"ts":1728539149289,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t3pfFSOujvQUNR4IfZegmpVXn8kbmgENP5ia-97shC0"},
{"content":{"body":"the hard problems about actually making wasm modules participate in the module graph is solved by import.source","m.mentions":{},"msgtype":"m.text"},"ts":1728539164026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nk-ie2ucyqGl1qArUECZMIdnJk5LsGjmKJ6-2Y6o3HI"},
{"content":{"body":"> <@mhofman:matrix.org> This exactly. My understanding is that all exported names of a module are known without evaluating the module. That means technically we could model this as an object with known props and the first access (get, gOPD) on one of these props would trigger the evaluation of the module. That way the import.defer of a non thenable module does not trigger the evaluation of the module. But if the module is thenable, then of course the regular promise logic will trigger evaluation when it does a get of then\n\nin a pure ESM  spec world yes. But ecosystem tooling has to deal with less concrete situations. Not relying on knowing the keys is a big help for tooling that emulates ESM","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_skXMwJDHD-zu5ZAbiuOOjgSfMRdJZ1jtlHU9irU6Y0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>This exactly. My understanding is that all exported names of a module are known without evaluating the module. That means technically we could model this as an object with known props and the first access (get, gOPD) on one of these props would trigger the evaluation of the module. That way the import.defer of a non thenable module does not trigger the evaluation of the module. But if the module is thenable, then of course the regular promise logic will trigger evaluation when it does a get of then</blockquote></mx-reply>in a pure ESM  spec world yes. But ecosystem tooling has to deal with less concrete situations. Not relying on knowing the keys is a big help for tooling that emulates ESM","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_skXMwJDHD-zu5ZAbiuOOjgSfMRdJZ1jtlHU9irU6Y0"}},"msgtype":"m.text"},"ts":1728539207488,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$wN-52J1qZ1USWtq-N24wKr0lnrKOS1v7rJgHE8Q-QTQ"},
{"content":{"body":"dropping `import.defer` looks like it has more of a win","format":"org.matrix.custom.html","formatted_body":"dropping <code>import.defer</code> looks like it has more of a win","m.mentions":{},"msgtype":"m.text"},"ts":1728539286608,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_4X66WjHLse8NFUvdPId7Qgm2zaGPYB86abhvAXHPXs"},
{"content":{"body":"I thought that static analyzability of module exports was one of the main point of ESM? Are you saying you want to import.defer other module types where export names are not known ahead of time?","msgtype":"m.text"},"ts":1728539298337,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7n1Nk6mlrzqfV3qp0a_J7qZFBPTgb4mZAPnWik5B_iM"},
{"content":{"body":"Tools like Babel will transform ESM to CommonJS one module at a time, without that global info","m.mentions":{},"msgtype":"m.text"},"ts":1728539375798,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$bychEbLAEe3D8bk-Dsm3Kv8WPDCItLMipSf6_SF8994"},
{"content":{"body":"it's doable, but adds complexity to tooling. Dropping `import.defer` is a solution that reduces complexity instead of moving it.","format":"org.matrix.custom.html","formatted_body":"it's doable, but adds complexity to tooling. Dropping <code>import.defer</code> is a solution that reduces complexity instead of moving it.","m.mentions":{},"msgtype":"m.text"},"ts":1728539453727,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$TAVynouLect6Np8bXv1C5gButCYOHTsbqAQ9oQl0c_I"},
{"content":{"body":"`bigint` could never have been JSSugar due to operator overloading. Neither could decimal as a primitive.","format":"org.matrix.custom.html","formatted_body":"<code>bigint</code> could never have been JSSugar due to operator overloading. Neither could decimal as a primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1728543005349,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YDoimHat92FQJDhlzod3q03tFoPqsOx7mP9uqFVmVDg"},
{"content":{"body":"Unless we introduce escaped operators like \"a \\+ b\" that desugars to a.add(b) :)","msgtype":"m.text"},"ts":1728543059253,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J2PFAq7faKuKmJ3GCYH9fvIhZACJ2imzuoF62sQ8kaw"},
{"content":{"body":"not operator overloading, it's AO impacting. new primitives change the core AOs of the language","m.mentions":{},"msgtype":"m.text"},"ts":1728543112395,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$OtDjzONGuJc1wslJ2dPre1i8G85mVECj_MwlBW_0e-c"},
{"content":{"body":" * beyond operator overloading, it's AO impacting. new primitives change the core AOs of the language","m.mentions":{},"m.new_content":{"body":"beyond operator overloading, it's AO impacting. new primitives change the core AOs of the language","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OtDjzONGuJc1wslJ2dPre1i8G85mVECj_MwlBW_0e-c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543122065,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Ksiod9y6FuALDqdnzZASojV1BFuSmbELH3Du353VdzE"},
{"content":{"body":"absent type-driven stuff, you can be like ocaml and have +.","m.mentions":{},"msgtype":"m.text"},"ts":1728543155755,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yYIrZIGPzrmYL0nYfkZ4LvbPgsbOJ1ub0VQ9jV7VeZ4"},
{"content":{"body":"I was discussing with Yulia last night that you could `import + from ‘js:operators’`, and have that perform the `left + right` -> `left.add(right)` change","format":"org.matrix.custom.html","formatted_body":"I was discussing with Yulia last night that you could <code data-md=\"`\">import + from ‘js:operators’</code>, and have that perform the <code data-md=\"`\">left + right</code> -&gt; <code data-md=\"`\">left.add(right)</code> change","msgtype":"m.text"},"ts":1728543250620,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fwdUd_UmuA0BnJY1ofiuHS-DlOUhlm83Tx5cqNawqNk"},
{"content":{"body":"👀 what happened in shibuya should stay in shibuya (for now)","m.mentions":{},"msgtype":"m.text"},"ts":1728543291562,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BkwzfAJydkmla1yCWRB4zXGCSu5sM_bVUGriVf6r6SA"},
{"content":{"body":"or in TDZ","m.mentions":{},"msgtype":"m.text"},"ts":1728543298067,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$PHn8keRTbg9p9QdkmKvFd9smpAhJ7Qodch_MULApyNU"},
{"content":{"body":"Requires coordination from the “core”, but we could then add new number types pretty easily","msgtype":"m.text"},"ts":1728543298787,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$N1Vq-UF9NC8DegF3DJbUM59NQrp_a6VhoTSGHDa_Eus"},
{"content":{"body":"until we have something more concrete at least. context: this needs a lot more thought before we consider it as a serious proposal","m.mentions":{},"msgtype":"m.text"},"ts":1728543324592,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jTiu15ctK0i1jo70AX3AiIinFSfU007MAxeA2aps13o"},
{"content":{"body":"> <@jridgewell:matrix.org> I was discussing with Yulia last night that you could `import + from ‘js:operators’`, and have that perform the `left + right` -> `left.add(right)` change\n\nhow is this going to be different from https://github.com/tc39/proposal-operator-overloading","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fwdUd_UmuA0BnJY1ofiuHS-DlOUhlm83Tx5cqNawqNk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I was discussing with Yulia last night that you could <code data-md=\"`\">import + from ‘js:operators’</code>, and have that perform the <code data-md=\"`\">left + right</code> -&gt; <code data-md=\"`\">left.add(right)</code> change</blockquote></mx-reply>how is this going to be different from https://github.com/tc39/proposal-operator-overloading","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fwdUd_UmuA0BnJY1ofiuHS-DlOUhlm83Tx5cqNawqNk"}},"msgtype":"m.text"},"ts":1728543352122,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$PGGQlbrMkTknDlNjKwBNLaPjdbrnGU2wlOhJaR9-8Yk"},
{"content":{"body":"also i had. lot of drinks","m.mentions":{},"msgtype":"m.text"},"ts":1728543355580,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Kz085_CTCYqUftxWcS1z86rV4znZgSHetqgttNjWz7k"},
{"content":{"body":"> <@legendecas:matrix.org> how is this going to be different from https://github.com/tc39/proposal-operator-overloading\n\nIt wouldn’t be checked per operand types. Import `+`, and now all `+` are `left.add(right)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24PGGQlbrMkTknDlNjKwBNLaPjdbrnGU2wlOhJaR9-8Yk\">In reply to</a><a href=\"https://matrix.to/#/%40legendecas%3Amatrix.org\">@legendecas:matrix.org</a><br />how is this going to be different from https://github.com/tc39/proposal-operator-overloading</blockquote></mx-reply>It wouldn’t be checked per operand types. Import <code data-md=\"`\">+</code>, and now all <code data-md=\"`\">+</code> are <code data-md=\"`\">left.add(right)</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$PGGQlbrMkTknDlNjKwBNLaPjdbrnGU2wlOhJaR9-8Yk"}},"msgtype":"m.text"},"ts":1728543414725,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uUb2WaSSTQHrGmHqB_m-XC44pFWYPRcA6KjnY8TQ3-g"},
{"content":{"body":"but yea ast rewriting, ill talk about it when my thing comes up","m.mentions":{},"msgtype":"m.text"},"ts":1728543418073,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$lCYvrOVHxihlqeRG136eWnRBhlcy1sZAg8HHJSeeG0E"},
{"content":{"body":"* It wouldn’t be checked per operand types. Import `+`, and now all `+` in the file are `left.add(right)`","format":"org.matrix.custom.html","formatted_body":"It wouldn’t be checked per operand types. Import <code data-md=\"`\">+</code>, and now all <code data-md=\"`\">+</code> in the file are <code data-md=\"`\">left.add(right)</code>","m.new_content":{"body":"It wouldn’t be checked per operand types. Import `+`, and now all `+` in the file are `left.add(right)`","format":"org.matrix.custom.html","formatted_body":"It wouldn’t be checked per operand types. Import <code data-md=\"`\">+</code>, and now all <code data-md=\"`\">+</code> in the file are <code data-md=\"`\">left.add(right)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$uUb2WaSSTQHrGmHqB_m-XC44pFWYPRcA6KjnY8TQ3-g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543424741,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zr-fatuLDYULkNFwsTsAa4ggRHgv-Ws8ozdyHYOSBws"},
{"content":{"body":"> <@yulia:mozilla.org> but yea ast rewriting, ill talk about it when my thing comes up\n\nA clear strategy to build hype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lCYvrOVHxihlqeRG136eWnRBhlcy1sZAg8HHJSeeG0E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />but yea ast rewriting, ill talk about it when my thing comes up</blockquote></mx-reply>A clear strategy to build hype","m.relates_to":{"m.in_reply_to":{"event_id":"$lCYvrOVHxihlqeRG136eWnRBhlcy1sZAg8HHJSeeG0E"}},"msgtype":"m.text"},"ts":1728543489872,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$VEYSJQnbbgcqgmJzIBApi0ORi7ZDD4ZjwZWsf-EqxWA"},
{"content":{"body":"if you haven't read rewriting the technical interview you really should, but thats a digression","m.mentions":{},"msgtype":"m.text"},"ts":1728543523846,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$q4MlLTSfGUcarXHZYJwRZQ9VCUjLwhxZ-umAzABR_P0"},
{"content":{"body":"what I am trying to say is I want to date JSSugar before marrying.  thank you Ashley for helping to clarify my intent there","m.mentions":{},"msgtype":"m.text"},"ts":1728543534590,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1QOQmp9_kiw38UrRN12ArvlEYCoyV2qussVknAxuEDg"},
{"content":{"body":"Chris de Almeida: chris you've been dating for years","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: chris you've been dating for years","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"ts":1728543549927,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fCtohBxJxabhS4o9T_FFct1SiqfnDemHYTCLLQDC7Gs"},
{"content":{"body":" * Chris de Almeida: you've been dating for years","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: you've been dating for years","m.mentions":{},"m.new_content":{"body":"Chris de Almeida: you've been dating for years","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: you've been dating for years","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fCtohBxJxabhS4o9T_FFct1SiqfnDemHYTCLLQDC7Gs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543555461,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$7vKxeX3eCCwEgmMYBga-QXAtmYBUsNdtVC8_R9UT2_4"},
{"content":{"body":"> <@yulia:mozilla.org> if you haven't read rewriting the technical interview you really should, but thats a digression\n\nall time favorite","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$q4MlLTSfGUcarXHZYJwRZQ9VCUjLwhxZ-umAzABR_P0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>if you haven&#39;t read rewriting the technical interview you really should, but thats a digression</blockquote></mx-reply>all time favorite","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$q4MlLTSfGUcarXHZYJwRZQ9VCUjLwhxZ-umAzABR_P0"}},"msgtype":"m.text"},"ts":1728543576514,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$NMJO2sZkykOIlFg3ucAt9YVPVMnDVRdDBNieqJPkh9I"},
{"content":{"body":"but surely there is _some_ delta from our current process that we could PoC","format":"org.matrix.custom.html","formatted_body":"but surely there is <em>some</em> delta from our current process that we could PoC","m.mentions":{},"msgtype":"m.text"},"ts":1728543578944,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KuYDQouh90tcODw7bTcfCj79oez08wKmBi3gNWln9f4"},
{"content":{"body":"for example maybe a proposal that would involve a split, or _could_ involve a split","format":"org.matrix.custom.html","formatted_body":"for example maybe a proposal that would involve a split, or <em>could</em> involve a split","m.mentions":{},"msgtype":"m.text"},"ts":1728543651241,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$DTZVk8Rdm4M9maggmax4BKIO-HCiY7eCrNE78mJ37Ac"},
{"content":{"body":"but if the response is that it's already so close to what we do, per what Shu was saying, then that's fine","m.mentions":{},"msgtype":"m.text"},"ts":1728543678865,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1WeKmjHpAOrNbRABxERm6eRfOWXHGswNyJK7P9_SahQ"},
{"content":{"body":"concretely I could see the following: new syntax gets the following restrictions\n\n1) it has to be expressible as a rewritten ast\n2) it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is)","format":"org.matrix.custom.html","formatted_body":"<p>concretely I could see the following: new syntax gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is)</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728543698559,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EKL1t9ay0ny02YQlGH2J05Y80ns5JgFkLXWAfPxPOpI"},
{"content":{"body":" * concretely I could see the following: new syntax gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)","format":"org.matrix.custom.html","formatted_body":" * <p>concretely I could see the following: new syntax gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"concretely I could see the following: new syntax gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)","format":"org.matrix.custom.html","formatted_body":"<p>concretely I could see the following: new syntax gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EKL1t9ay0ny02YQlGH2J05Y80ns5JgFkLXWAfPxPOpI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543713526,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OomkGy7Y2vv-_qQJonsHmcP-M9gC5gOsN6cPT7g81WE"},
{"content":{"body":" * concretely I could see the following: new syntax gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)\n\nAnd, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers","format":"org.matrix.custom.html","formatted_body":" * <p>concretely I could see the following: new syntax gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n<p>And, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers</p>\n","m.mentions":{},"m.new_content":{"body":"concretely I could see the following: new syntax gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)\n\nAnd, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers","format":"org.matrix.custom.html","formatted_body":"<p>concretely I could see the following: new syntax gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n<p>And, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EKL1t9ay0ny02YQlGH2J05Y80ns5JgFkLXWAfPxPOpI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543732767,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ZpzZiRQl76A7qa-zaSTpHPxuuzNdsqEp0HUT2P7N8k8"},
{"content":{"body":" * concretely I could see the following: new syntax for JSSugar gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)\n\nAnd, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers","format":"org.matrix.custom.html","formatted_body":" * <p>concretely I could see the following: new syntax for JSSugar gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n<p>And, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers</p>\n","m.mentions":{},"m.new_content":{"body":"concretely I could see the following: new syntax for JSSugar gets the following restrictions\n\n1. it has to be expressible as a rewritten ast\n2. it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)\n\nAnd, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers","format":"org.matrix.custom.html","formatted_body":"<p>concretely I could see the following: new syntax for JSSugar gets the following restrictions</p>\n<ol>\n<li>it has to be expressible as a rewritten ast</li>\n<li>it cannot present a simplified interface to what is a costly set of operations (with some rubrick determining where the line is, ie the expansion can not be greater than x)</li>\n</ol>\n<p>And, with this, we say that new syntax has a wait time of at least 3 years before landing in browsers</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EKL1t9ay0ny02YQlGH2J05Y80ns5JgFkLXWAfPxPOpI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728543761417,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EQW9-wBbBffYFCofqBD_eMv9CFgfaciUVOWp0jd5gVc"},
{"content":{"body":"couldn't we say that right now, for syntax stage 2.7 features that they need 3 years (as usable transpilations) before being eligible for stage 3?","m.mentions":{},"msgtype":"m.text"},"ts":1728544131415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bTuxwQVOyhPTqUioqBHROS2zrf8DU0huRNs4SWPpfHM"},
{"content":{"body":" * couldn't we say that right now, for syntax stage 2.7 features that they need 3 years (as usable transpilations) before being eligible for stage 3? (ie, without any sugar/core/js0 stuff)","m.mentions":{},"m.new_content":{"body":"couldn't we say that right now, for syntax stage 2.7 features that they need 3 years (as usable transpilations) before being eligible for stage 3? (ie, without any sugar/core/js0 stuff)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bTuxwQVOyhPTqUioqBHROS2zrf8DU0huRNs4SWPpfHM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728544146250,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-HQTFn2dPJIejvMx3tylVSh-SqKdFizxM5IoZyaHKGA"},
{"content":{"body":"no, because then people might not ever adopt it at scale and we never get a meaningful signal","m.mentions":{},"msgtype":"m.text"},"ts":1728544172791,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qPo7omULdgrP0glafGt0H4H3eYMyTlTTZcrvc_ovQ7A"},
{"content":{"body":"it's not baking time with committee that's needed","m.mentions":{},"msgtype":"m.text"},"ts":1728544181979,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vexq8Bs7wo0bzSa_4Z5QL0Q22PU-VBRk9x4N2_RoqZU"},
{"content":{"body":"it's baking time with the world","m.mentions":{},"msgtype":"m.text"},"ts":1728544184688,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t9W1a2NhU56CoZzIGUBfeXVcMQJgMpMpmBkE3GBcKYs"},
{"content":{"body":"yeah it should be considered finished","m.mentions":{},"msgtype":"m.text"},"ts":1728544186474,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AaFrEdt0DnB4aY-HKP3YDpe5QAopomhot1ok8y3dMvQ"},
{"content":{"body":"Someone is attributuing @justingrant:matrix.org's comments on JS0 to me in the notes","format":"org.matrix.custom.html","formatted_body":"Someone is attributuing <a href=\"https://matrix.to/#/@justingrant:matrix.org\">@justingrant</a>&#39;s comments on JS0 to me in the notes","msgtype":"m.text"},"ts":1728544279362,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$j7VVHCRi_IYY4dq8a3IRF55ArHeD88XpKYSn0i5Un6k"},
{"content":{"body":"Please use JGT for Justin Grant","msgtype":"m.text"},"ts":1728544305159,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$71GfiZfVzEehDrHDG0jqVTz9KdXF3rvVhmZs46kPsxc"},
{"content":{"body":"Does JSSugar open doors for a \"blessed\" type system? Or rather, would type annotations likely become a JSSugar feature?","m.mentions":{},"msgtype":"m.text"},"ts":1728544379830,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$t-K4bWd46eTYdQyKa8p_qfGIZ_8LgJEUI-2Vy_n9Bjs"},
{"content":{"body":"> <@jridgewell:matrix.org> Someone is attributuing @justingrant:matrix.org's comments on JS0 to me in the notes\n\nMaybe because I forgot to add myself (JGT) to the attendees list in the notes?  I'll fix that now. Want me to fix up the notes too?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$j7VVHCRi_IYY4dq8a3IRF55ArHeD88XpKYSn0i5Un6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Someone is attributuing <a href=\"https://matrix.to/#/@justingrant:matrix.org\">@justingrant</a>'s comments on JS0 to me in the notes</blockquote></mx-reply>Maybe because I forgot to add myself (JGT) to the attendees list in the notes?  I'll fix that now. Want me to fix up the notes too?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$j7VVHCRi_IYY4dq8a3IRF55ArHeD88XpKYSn0i5Un6k"}},"msgtype":"m.text"},"ts":1728544402356,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$OcF5exxkGLnlpyRUMzhE6C1V4bunRbypX3zyUb96WEA"},
{"content":{"body":"> <@justingrant:matrix.org> Maybe because I forgot to add myself (JGT) to the attendees list in the notes?  I'll fix that now. Want me to fix up the notes too?\n\nAlready did","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24OcF5exxkGLnlpyRUMzhE6C1V4bunRbypX3zyUb96WEA\">In reply to</a><a href=\"https://matrix.to/#/%40justingrant%3Amatrix.org\">@justingrant:matrix.org</a><br />Maybe because I forgot to add myself (JGT) to the attendees list in the notes?  I'll fix that now. Want me to fix up the notes too?</blockquote></mx-reply>Already did","m.relates_to":{"m.in_reply_to":{"event_id":"$OcF5exxkGLnlpyRUMzhE6C1V4bunRbypX3zyUb96WEA"}},"msgtype":"m.text"},"ts":1728544428094,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uejazemwjA1Kf9wpEOh5nmQJpIbJW1YPiyli4VksYS4"},
{"content":{"body":"Also curious if sugar files would get their own file extension?","m.mentions":{},"msgtype":"m.text"},"ts":1728544461232,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI"},
{"content":{"body":"Like how would I know an npm package is sugar or is able to be run directly?","m.mentions":{},"msgtype":"m.text"},"ts":1728544476254,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$wDyHbWeh9ppgnYJaK2nQyHIwE8uQQ8u4TzwtZZ_f1Ss"},
{"content":{"body":"> <@jkup:matrix.org> Does JSSugar open doors for a \"blessed\" type system? Or rather, would type annotations likely become a JSSugar feature?\n\nI don’t think types as comments is a necessary feature if we still have to have a compiler","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24t-K4bWd46eTYdQyKa8p_qfGIZ_8LgJEUI-2Vy_n9Bjs\">In reply to</a><a href=\"https://matrix.to/#/%40jkup%3Amatrix.org\">@jkup:matrix.org</a><br />Does JSSugar open doors for a &quot;blessed&quot; type system? Or rather, would type annotations likely become a JSSugar feature?</blockquote></mx-reply>I don’t think types as comments is a necessary feature if we still have to have a compiler","m.relates_to":{"m.in_reply_to":{"event_id":"$t-K4bWd46eTYdQyKa8p_qfGIZ_8LgJEUI-2Vy_n9Bjs"}},"msgtype":"m.text"},"ts":1728544484489,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2n14rIHLBkYwgJOboSZAze293a1mS9PmgRyawEpwcWk"},
{"content":{"body":"`index.js🍭`","format":"org.matrix.custom.html","formatted_body":"<code>index.js🍭</code>","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544507640,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NzD4on2MPU6-JeCquED8j39DslUXJYIY_BqHJ2IEIGw"},
{"content":{"body":"ok well i was worried but now i'm excited","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$NzD4on2MPU6-JeCquED8j39DslUXJYIY_BqHJ2IEIGw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544517803,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$QgimwZdnigWUEeNi1wwagH9rOCdnzj4cql8VquIvAEg"},
{"content":{"body":"something something `package.json`","format":"org.matrix.custom.html","formatted_body":"something something <code>package.json</code>","m.mentions":{},"m.relates_to":{"event_id":"$wDyHbWeh9ppgnYJaK2nQyHIwE8uQQ8u4TzwtZZ_f1Ss","is_falling_back":true,"m.in_reply_to":{"event_id":"$wDyHbWeh9ppgnYJaK2nQyHIwE8uQQ8u4TzwtZZ_f1Ss"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544530658,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2oI4SZxQ9OxrnBn6EfytbytaY-szPK10SEd4bLh2x9Q"},
{"content":{"body":"> <@jkup:matrix.org> Does JSSugar open doors for a \"blessed\" type system? Or rather, would type annotations likely become a JSSugar feature?\n\nyes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$t-K4bWd46eTYdQyKa8p_qfGIZ_8LgJEUI-2Vy_n9Bjs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jkup:matrix.org\">@jkup:matrix.org</a><br>Does JSSugar open doors for a &quot;blessed&quot; type system? Or rather, would type annotations likely become a JSSugar feature?</blockquote></mx-reply>yes","m.mentions":{"user_ids":["@jkup:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$t-K4bWd46eTYdQyKa8p_qfGIZ_8LgJEUI-2Vy_n9Bjs"}},"msgtype":"m.text"},"ts":1728544545157,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p05c2Mbl4WEh-vVZQst75nTjhHVcgJcDsVEY172ir9k"},
{"content":{"body":"{\"sugar\": \"yesplease\"}","m.mentions":{},"m.relates_to":{"event_id":"$wDyHbWeh9ppgnYJaK2nQyHIwE8uQQ8u4TzwtZZ_f1Ss","is_falling_back":true,"m.in_reply_to":{"event_id":"$2oI4SZxQ9OxrnBn6EfytbytaY-szPK10SEd4bLh2x9Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544551969,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$TJQP0KufuYpIFCSI6HcgHCothdeOvCw50mic1QK6XyE"},
{"content":{"body":"good luck designing, getting consensus, and getting people to adopt given TS :)","m.mentions":{},"msgtype":"m.text"},"ts":1728544563471,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n6oDgPFLT3_EaCELQxJWsiE7smgJpgNoXAd47ogLI1k"},
{"content":{"body":"yes they would need one, theyre a different parse goal.","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$QgimwZdnigWUEeNi1wwagH9rOCdnzj4cql8VquIvAEg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544565231,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fBFRKWolLRVyTVoPMp5nZ7h0k7XA8WMqev9S3m7wrsI"},
{"content":{"body":"I'm not sure that's true.  Of the two motivations for Type Annotations, it doesn't really change the need for coordination.","m.mentions":{},"msgtype":"m.text"},"ts":1728544566855,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$uT_igZcR7mh0UeUIrnDBjwpy-9vgTyHlZGjL3ljtsJ8"},
{"content":{"body":"which file systems allow emoji in file names?","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$fBFRKWolLRVyTVoPMp5nZ7h0k7XA8WMqev9S3m7wrsI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544573836,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CV7ynaQfXC-XD52-Tip1lDMopgXn3Lf7_ASBu34dnV8"},
{"content":{"body":"DOS?","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$CV7ynaQfXC-XD52-Tip1lDMopgXn3Lf7_ASBu34dnV8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544583615,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mErMrXRpUTUrNICuoECAbH5cfKSSrsEMQ1Ov_MfsZRA"},
{"content":{"body":" * (replying to Justin)\n\nI'm not sure that's true.  Of the two motivations for Type Annotations, it doesn't really change the need for coordination.","m.mentions":{},"m.new_content":{"body":"(replying to Justin)\n\nI'm not sure that's true.  Of the two motivations for Type Annotations, it doesn't really change the need for coordination.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uT_igZcR7mh0UeUIrnDBjwpy-9vgTyHlZGjL3ljtsJ8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728544615338,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Cj4lCHvMphQqBWQRwticwCI0AqqHZoBumRD-eS9xkHs"},
{"content":{"body":"> <@aclaymore:matrix.org> which file systems allow emoji in file names?\n\numm most?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24CV7ynaQfXC-XD52-Tip1lDMopgXn3Lf7_ASBu34dnV8\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br />which file systems allow emoji in file names?</blockquote></mx-reply>umm most?","m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":false,"m.in_reply_to":{"event_id":"$CV7ynaQfXC-XD52-Tip1lDMopgXn3Lf7_ASBu34dnV8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544615515,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uaiwyfPO7bsMQ5b-2LLOXfQh_OsoqRPBQyUf-N3JkAY"},
{"content":{"body":"> <@aclaymore:matrix.org> DOS?\n\nthis is not a file system 🤦‍♂️","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mErMrXRpUTUrNICuoECAbH5cfKSSrsEMQ1Ov_MfsZRA\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br />DOS?</blockquote></mx-reply>this is not a file system 🤦‍♂️","m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":false,"m.in_reply_to":{"event_id":"$mErMrXRpUTUrNICuoECAbH5cfKSSrsEMQ1Ov_MfsZRA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544656653,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Oj18Ifu4TpHRDyb99vi7vwkHFsWnBwBMTXSIeV8jjXk"},
{"content":{"body":"Rbuckton: Were those stats for current decorators or a previous version?","msgtype":"m.text"},"ts":1728544718317,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n72AWRlyPkvaV-Vav3UIwdMiilRVD337RFYt8qDhWoY"},
{"content":{"body":"I meant FATTTTT :((((","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Oj18Ifu4TpHRDyb99vi7vwkHFsWnBwBMTXSIeV8jjXk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544731307,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Oe3bZkQG8hkRwqbohM2WacoT5l8zkxxWp1-v4mQPUGE"},
{"content":{"body":"comparing current to experimental","m.mentions":{},"msgtype":"m.text"},"ts":1728544736329,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ly89cv0iCpffdc2trRAt9AvLOvU4MhlRYv_iX89WLl4"},
{"content":{"body":"https://github.com/microsoft/TypeScript/issues/55688","m.mentions":{},"msgtype":"m.text"},"ts":1728544742625,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$06PuaEVnl-sh5PU-7n1BGc_RraB3l4pSYn8RQoDrgUY"},
{"content":{"body":"I think I agree with ljharb that it should get an extension... but then I go back to my other question. I'm not sure how to tell people \"This is sugar\" or \"This is JS0\". ","format":"org.matrix.custom.html","formatted_body":"I think I agree with <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> that it should get an extension... but then I go back to my other question. I'm not sure how to tell people \"This is sugar\" or \"This is JS0\".","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Oe3bZkQG8hkRwqbohM2WacoT5l8zkxxWp1-v4mQPUGE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544790441,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$f7K4WX0d-R5-JozsOn_7wZQiCLW27QzuL7eLzObjgE8"},
{"content":{"body":"> <@aclaymore:matrix.org> I meant FATTTTT :((((\n\nFAT16? FAT32? WHICH IS IT?!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Oe3bZkQG8hkRwqbohM2WacoT5l8zkxxWp1-v4mQPUGE\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br />I meant FATTTTT :((((</blockquote></mx-reply>FAT16? FAT32? WHICH IS IT?!","m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":false,"m.in_reply_to":{"event_id":"$Oe3bZkQG8hkRwqbohM2WacoT5l8zkxxWp1-v4mQPUGE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544811642,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XCisHihucwBTaCWk-EXQvzb_YUvL6mFFL0wc9LKcgKc"},
{"content":{"body":"Unless we just really try to push for \"Only publish JS0\"","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$f7K4WX0d-R5-JozsOn_7wZQiCLW27QzuL7eLzObjgE8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544812254,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$Ju09GY54x3ceDSSwGCeJSKEA_7cADHTY5dUTJLld6SM"},
{"content":{"body":"the file extension tells them, just like `.js` and `.mjs` do (should) now","format":"org.matrix.custom.html","formatted_body":"the file extension tells them, just like <code>.js</code> and <code>.mjs</code> do (should) now","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Ju09GY54x3ceDSSwGCeJSKEA_7cADHTY5dUTJLld6SM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544814614,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E6KQX-j3sl34mfhXeNaCeq3fNfKIWqTDhOvEit-unGo"},
{"content":{"body":"but yeah \"only publish js0\" is what everyone would do","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$E6KQX-j3sl34mfhXeNaCeq3fNfKIWqTDhOvEit-unGo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544821087,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BvoewEwEnOQjqhybcuYds3Ss40LqfUFN8GIQiHMAMBA"},
{"content":{"body":"we should have a new file extension for each spec version","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$BvoewEwEnOQjqhybcuYds3Ss40LqfUFN8GIQiHMAMBA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544857078,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pGA8OphhJBldn4pxr2kIw-dVxX2Oor37lmXZgX-cQBg"},
{"content":{"body":"as each is a different parse goal","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$pGA8OphhJBldn4pxr2kIw-dVxX2Oor37lmXZgX-cQBg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544863094,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PoHb-wwTUbCIV8ZtZQzoXRxxNsDD5tACfExSnTeNJ9o"},
{"content":{"body":"`index.es2021`","format":"org.matrix.custom.html","formatted_body":"<code>index.es2021</code>","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$PoHb-wwTUbCIV8ZtZQzoXRxxNsDD5tACfExSnTeNJ9o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544877927,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$h7t3sDzepPkiKgZKaiYdpE09JPIccelqmK-oMVfhWFA"},
{"content":{"body":"when I refactor my code and it no longer has newer syntax I rename it to `index.es2017`","format":"org.matrix.custom.html","formatted_body":"when I refactor my code and it no longer has newer syntax I rename it to <code>index.es2017</code>","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$h7t3sDzepPkiKgZKaiYdpE09JPIccelqmK-oMVfhWFA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544918878,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uhhzYx2oCKPzjUNwd50ufBbrXQy42Wc94yCrqW9Sdgo"},
{"content":{"body":"just picturing your PR reviews","m.mentions":{},"m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":true,"m.in_reply_to":{"event_id":"$uhhzYx2oCKPzjUNwd50ufBbrXQy42Wc94yCrqW9Sdgo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544931988,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$1MB_KtcfenlAkYlv1DDISHPQomgTI2Y7idvc4YEq_rw"},
{"content":{"body":"> <@aclaymore:matrix.org> `index.es2021`\n\nRIP 1JS, this is ∞JS now","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24h7t3sDzepPkiKgZKaiYdpE09JPIccelqmK-oMVfhWFA\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br /><code>index.es2021</code></blockquote></mx-reply>RIP 1JS, this is ∞JS now","m.relates_to":{"event_id":"$WYAE4PQBt_XC1uGGbFi9qHw7O7N_zK_Nyq-3psmcrsI","is_falling_back":false,"m.in_reply_to":{"event_id":"$h7t3sDzepPkiKgZKaiYdpE09JPIccelqmK-oMVfhWFA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728544933713,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xreSWoO9i9J5FvDGVAI8EVpfMA_lQqpDtkU3QlcLvG4"},
{"content":{"body":"I can see healthy discussions where engines ask \"Can this go in JSSugar?\" and then tooling authors come back and say \"This would result in way too much bundle bloat\"","m.mentions":{},"msgtype":"m.text"},"ts":1728545045800,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$N6lJU0RRK-pg56PwlqSj-86v3alWFpsMIvkkP75emo4"},
{"content":{"body":"restricting things to ast transform would reduce complexity. right now you have free reign in what you can do, and that can introduce new bytecode operations etc. if its an AST transform, it is quite literally sugar as it can be rewritten","m.mentions":{},"msgtype":"m.text"},"ts":1728545128150,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iYlnXmmlsU3Ase1GxUO5HiihiuR_cZxLgskKEJZ9yAA"},
{"content":{"body":"would that as a constraint remove the need for jssugar?","m.mentions":{},"msgtype":"m.text"},"ts":1728545181430,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1Rz8h2GTJ_hFNMb_gIB13xMdHxMcyNfrNMoHAgfruMg"},
{"content":{"body":"So again, mozilla isn't strictly supporting JSSugar as the solution here, we are co-signers of the problem","m.mentions":{},"msgtype":"m.text"},"ts":1728545227090,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oYq3CEyHtDy7VizejVq_nA75PgpGEq_WDD_AzXItstg"},
{"content":{"body":"but if something is a pure ast transform than that only touches the tokenizer and the parser. it is simpler than a full engine implementation","m.mentions":{},"msgtype":"m.text"},"ts":1728545247904,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$XO3fq1ZHuY19XSlAwW0Q-Pb84hlXB3yTJcPmsm6EXko"},
{"content":{"body":"i'm hearing the tooling authors here loudly say \"it's also bad for us\"","m.mentions":{},"msgtype":"m.text"},"ts":1728545271473,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KcRxrnoYcIUX0CwCkKKkeqHgNsXuhVqnvztXSy45p78"},
{"content":{"body":"i want to reiterate the implication from that isn't \"engines need to do it\"","m.mentions":{},"msgtype":"m.text"},"ts":1728545283423,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZD4wM_GEvinJ9mqhvwULOAvFaFlJ0XO_cRqmhf62Wfw"},
{"content":{"body":"the implication from that is we are designing features wrong (for performance)","m.mentions":{},"msgtype":"m.text"},"ts":1728545289412,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uaVtGckBtY0hxhHcnkPr7ZI2EztOs6o1xa_XilUKv-8"},
{"content":{"body":"I don't want to say yes, but certain proposals currently in the pipeline that are not AST transforms (introducing custom behavior) would be significantly simpler if they were; for example explicit resource management","m.mentions":{},"msgtype":"m.text"},"ts":1728545299504,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dCNGzAwKfEhuYBTzG99IDh6QcBjsAquhZEfW92MS_UE"},
{"content":{"body":"rbuckton: do y'all collect analytics on targets?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: do y'all collect analytics on targets?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728545472802,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$Qj1S_T7FItJpDtmh6lWohuYE9WDolC0OmHWLuaQPQSQ"},
{"content":{"body":"I'd have to get back to you on that","m.mentions":{},"msgtype":"m.text"},"ts":1728545506311,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sWq8ptGOlvx5ljmn7opmgwNyYm19gylGt82XxScXwFc"},
{"content":{"body":"Have we nailed down the details for which features have which cost? Seems like we should study this more and see what is possible to change, though the response to Shu’s tdz effort was disappointing ","format":"org.matrix.custom.html","formatted_body":"Have we nailed down the details for which features have which cost? Seems like we should study this more and see what is possible to change, though the response to Shu’s tdz effort was disappointing","msgtype":"m.text"},"ts":1728545592909,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AejuM0sNoZKvW8-9gTTQ4Fyon1W7-mHzjQmKrOn91Xs"},
{"content":{"body":"Side note:  Do we know which old features are slow?  I only know of the TDZ issue.  We run most of our production code using very modern untranspiled ES2023/ES2024.  Performance has not been problematic, and in obviously is much faster than if we downlevelled private field usage or async usage.","m.mentions":{},"msgtype":"m.text"},"ts":1728545615255,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$8RaimvoNMP1AN0h36-2kMzzlCcDMS4UPa05DzYrPymI"},
{"content":{"body":"classes and TDZ are the most prominent ones","m.mentions":{},"msgtype":"m.text"},"ts":1728545628417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iQbYcPsl7cOKe8VHbIy1FmGWv8gBPBsbPY8erLKPrpE"},
{"content":{"body":" * Side note:  Do we know which old features are slow?  I only know of the TDZ issue.  We run most of our production code using very modern untranspiled ES2023/ES2024.  Performance has not been problematic, and is obviously is much faster than if we downlevelled private field usage or async usage.","m.mentions":{},"m.new_content":{"body":"Side note:  Do we know which old features are slow?  I only know of the TDZ issue.  We run most of our production code using very modern untranspiled ES2023/ES2024.  Performance has not been problematic, and is obviously is much faster than if we downlevelled private field usage or async usage.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8RaimvoNMP1AN0h36-2kMzzlCcDMS4UPa05DzYrPymI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728545635465,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Lf_0dIkbtIO6V_bUlfMhGn3DuPiER68HvCIAG6wr1-s"},
{"content":{"body":"> <@shuyuguo:matrix.org> classes and TDZ are the most prominent ones\n\nHow much slower are classes these days, after those optimizations you mentioned?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24iQbYcPsl7cOKe8VHbIy1FmGWv8gBPBsbPY8erLKPrpE\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>classes and TDZ are the most prominent ones</blockquote></mx-reply>How much slower are classes these days, after those optimizations you mentioned?","m.relates_to":{"m.in_reply_to":{"event_id":"$iQbYcPsl7cOKe8VHbIy1FmGWv8gBPBsbPY8erLKPrpE"}},"msgtype":"m.text"},"ts":1728545659528,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qH_N4hcl4LTlDGGd47ZT6utg-rmTbdHlxIIyhoWi-0U"},
{"content":{"body":"Profiling classes is my hobby.  I have not seen any lingering issues.","m.mentions":{},"msgtype":"m.text"},"ts":1728545661038,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$omc1DANcPU7CsSqqPyQ-TWJ0TNVdUCu7hc85wdr2zhI"},
{"content":{"body":"> <@robpalme:matrix.org> Profiling classes is my hobby.  I have not seen any lingering issues.\n\nEven for private fields?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24omc1DANcPU7CsSqqPyQ-TWJ0TNVdUCu7hc85wdr2zhI\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Profiling classes is my hobby.  I have not seen any lingering issues.</blockquote></mx-reply>Even for private fields?","m.relates_to":{"m.in_reply_to":{"event_id":"$omc1DANcPU7CsSqqPyQ-TWJ0TNVdUCu7hc85wdr2zhI"}},"msgtype":"m.text"},"ts":1728545679727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rGbXXCSgW0qQUsYy7apR93duc0Ivc1e5_Z6-l72xa1s"},
{"content":{"body":"> <@littledan:matrix.org> How much slower are classes these days, after those optimizations you mentioned?\n\ngotta ask a more specific question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qH_N4hcl4LTlDGGd47ZT6utg-rmTbdHlxIIyhoWi-0U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>How much slower are classes these days, after those optimizations you mentioned?</blockquote></mx-reply>gotta ask a more specific question","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qH_N4hcl4LTlDGGd47ZT6utg-rmTbdHlxIIyhoWi-0U"}},"msgtype":"m.text"},"ts":1728545680735,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KCX5S1ekKe0umEI8etFiGl0LZrtLX8LOhWbEt8qLc-E"},
{"content":{"body":"> <@shuyuguo:matrix.org> gotta ask a more specific question\n\nDo you have any evidence to share that classes are slow?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24KCX5S1ekKe0umEI8etFiGl0LZrtLX8LOhWbEt8qLc-E\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>gotta ask a more specific question</blockquote></mx-reply>Do you have any evidence to share that classes are slow?","m.relates_to":{"m.in_reply_to":{"event_id":"$KCX5S1ekKe0umEI8etFiGl0LZrtLX8LOhWbEt8qLc-E"}},"msgtype":"m.text"},"ts":1728545698136,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YD1YdlUUeIooUb1S5yAMCtlh8FJrNSWlahIRHR3Ybl0"},
{"content":{"body":"when i was looking into it, i noticed that one thing classes can't do is omitting super ctors. some tools, when they notice the super ctor doesn't do anything interesting, just omit it when doing old-style classes. or they inline the super ctor workload into the subclass ctor and then omit it.","m.mentions":{},"msgtype":"m.text"},"ts":1728545730920,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$A7K5pDho82hfnELnOlPXJBXKiu07afQr3Z9JBe2z5GM"},
{"content":{"body":"i optimized it a bit in v8, omitting trivial ctors, but it's still not as good as the oldschool version iirc.","m.mentions":{},"msgtype":"m.text"},"ts":1728545786960,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$QZmIiPl1E5iv4Hm_p2W6SqfvGdjfRnv7urxpJcqEEMU"},
{"content":{"body":"So potentially it's for deeper class hierarchies where the issues become more measurable?","m.mentions":{},"msgtype":"m.text"},"ts":1728545812853,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$K3FhOtP2l8c34EYb0UvyJVzhbf4CDnoyXJDCuxcmCLQ"},
{"content":{"body":"In principle, implementers could also implement AST transforms in the runtime.","m.mentions":{},"msgtype":"m.text"},"ts":1728545847611,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fl8ac8WJ4cLOcovrY971kqFd1qg8fVD-Z_pluDj6fmU"},
{"content":{"body":"before i optimized it, the problem was pretty visible even for shallow class hiearchies (since 1 call is so much more than 0 calls)","m.mentions":{},"msgtype":"m.text"},"ts":1728545852995,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$XTAfUzzLOnfki3pIv_3j1GQ-p2uPMZSNyO4AmDpqGc0"},
{"content":{"body":"```\nclass NewSkol { field =1 }\nvs\nfunction OldSkol() { this.field = 1 }\n```\n\nI assume these are very close in performance these days? Assuming `Object.prototype` hasn't been patched","format":"org.matrix.custom.html","formatted_body":"<pre><code>class NewSkol { field =1 }\nvs\nfunction OldSkol() { this.field = 1 }\n</code></pre>\n<p>I assume these are very close in performance these days? Assuming <code>Object.prototype</code> hasn't been patched</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728545900579,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU"},
{"content":{"body":" * ```\nclass NewSkol { field = 1 }\nvs\nfunction OldSkol() { this.field = 1 }\n```\n\nI assume these are very close in performance these days? Assuming `Object.prototype` hasn't been patched","format":"org.matrix.custom.html","formatted_body":" * <pre><code>class NewSkol { field = 1 }\nvs\nfunction OldSkol() { this.field = 1 }\n</code></pre>\n<p>I assume these are very close in performance these days? Assuming <code>Object.prototype</code> hasn't been patched</p>\n","m.mentions":{},"m.new_content":{"body":"```\nclass NewSkol { field = 1 }\nvs\nfunction OldSkol() { this.field = 1 }\n```\n\nI assume these are very close in performance these days? Assuming `Object.prototype` hasn't been patched","format":"org.matrix.custom.html","formatted_body":"<pre><code>class NewSkol { field = 1 }\nvs\nfunction OldSkol() { this.field = 1 }\n</code></pre>\n<p>I assume these are very close in performance these days? Assuming <code>Object.prototype</code> hasn't been patched</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728545918201,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BFse577uKMTsqWPmG_Hor40PJ3vgpC-pY17JD00OEdE"},
{"content":{"body":" * I don't want to say yes (to not derail the conversation, as we still have more to figure out here), but certain proposals currently in the pipeline that are not AST transforms (introducing custom behavior) would be significantly simpler if they were; for example explicit resource management","m.mentions":{},"m.new_content":{"body":"I don't want to say yes (to not derail the conversation, as we still have more to figure out here), but certain proposals currently in the pipeline that are not AST transforms (introducing custom behavior) would be significantly simpler if they were; for example explicit resource management","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dCNGzAwKfEhuYBTzG99IDh6QcBjsAquhZEfW92MS_UE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728545953717,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_WOEujYiITZv3c5r3MTbuQx8SoxVTL0dGIbvxWzmt_k"},
{"content":{"body":">  call is so much more than 0 calls\n\nGood point!!","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>call is so much more than 0 calls</p>\n</blockquote>\n<p>Good point!!</p>\n","m.mentions":{},"m.relates_to":{"event_id":"$XTAfUzzLOnfki3pIv_3j1GQ-p2uPMZSNyO4AmDpqGc0","is_falling_back":true,"m.in_reply_to":{"event_id":"$XTAfUzzLOnfki3pIv_3j1GQ-p2uPMZSNyO4AmDpqGc0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728545992303,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PiUH1rGb6Mf-GkOtYfW5GUVymmusv2nydK95KDHauKQ"},
{"content":{"body":"yeah this is a side bar that we've been discussing. But if it expands to a massive subtree that would potentially be a problem. We should go through the full exercise of JSSugar first before we start talking about this part","m.mentions":{},"m.relates_to":{"event_id":"$fl8ac8WJ4cLOcovrY971kqFd1qg8fVD-Z_pluDj6fmU","is_falling_back":true,"m.in_reply_to":{"event_id":"$fl8ac8WJ4cLOcovrY971kqFd1qg8fVD-Z_pluDj6fmU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546024066,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$AFl00ODfw3p_Pi2Q9bwV6BLHMtSTKnGYTZJEk9uXZs4"},
{"content":{"body":"perhaps i was being too coy","m.mentions":{},"msgtype":"m.text"},"ts":1728546035791,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aaIEzjRtc-KNhIeVBJ1-dlUu9UVyeqfFu9LwJn_PeS0"},
{"content":{"body":"> <@aclaymore:matrix.org> ```\n> class NewSkol { field = 1 }\n> vs\n> function OldSkol() { this.field = 1 }\n> ```\n> \n> I assume these are very close in performance these days? Assuming `Object.prototype` hasn't been patched\n\nAt least class is faster than `function OldSkol() { return {field: 1} }` ? (I'm not sure)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><pre><code>class NewSkol { field = 1 }\nvs\nfunction OldSkol() { this.field = 1 }\n</code></pre>\n<p>I assume these are very close in performance these days? Assuming <code>Object.prototype</code> hasn't been patched</p>\n</blockquote></mx-reply>At least class is faster than <code>function OldSkol() { return {field: 1} }</code> ? (I'm not sure)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU"}},"msgtype":"m.text"},"ts":1728546038088,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$bZq1_0MoYboaAZzaipL19bNygGoJM_cU47V9NEZ8Iq8"},
{"content":{"body":"i was referring to TS, littledan ","format":"org.matrix.custom.html","formatted_body":"i was referring to TS, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1728546044246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$L7tG5hoOFlS86QlmswDkXLEte7JcW3IiMW34cfK_2-k"},
{"content":{"body":"I mean, this is also about _how_ we are defining syntax right now","format":"org.matrix.custom.html","formatted_body":"I mean, this is also about <em>how</em> we are defining syntax right now","m.mentions":{},"msgtype":"m.text"},"ts":1728546086883,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Wqusl627v-K97QAyO8c-mHt7koi3LZF-o5Z5eVjpCvQ"},
{"content":{"body":"i don't have the current numbers but i can look into it","m.mentions":{},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","is_falling_back":true,"m.in_reply_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546147715,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$frb4tbQdy2Z1Dc6DuHw_7YISd6FtBXG2aVwW1gKgQss"},
{"content":{"body":"probably that case should be on par","m.mentions":{},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","is_falling_back":true,"m.in_reply_to":{"event_id":"$frb4tbQdy2Z1Dc6DuHw_7YISd6FtBXG2aVwW1gKgQss"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546193775,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$COJm6VudKKl8gzntQbJAB9pXS3rUSSs852MujOdtX_w"},
{"content":{"body":"at least it would be less surprising","m.mentions":{},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","is_falling_back":true,"m.in_reply_to":{"event_id":"$COJm6VudKKl8gzntQbJAB9pXS3rUSSs852MujOdtX_w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546201400,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$zRAdS0BCTKYcGbTgACe9HhqB4w3IQI9kMdFTlVz9uD4"},
{"content":{"body":"another class topics: private fields vs just normal fields","m.mentions":{},"msgtype":"m.text"},"ts":1728546249222,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$uAD_EEBxk9Sz2v8e8etQ7syuy6jZbsuaB8djFYx1pQM"},
{"content":{"body":" * another class topic: private fields vs just normal fields","m.mentions":{},"m.new_content":{"body":"another class topic: private fields vs just normal fields","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uAD_EEBxk9Sz2v8e8etQ7syuy6jZbsuaB8djFYx1pQM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728546254245,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$VnXAm6LdHiZMqLNlfmpiB6uFlZgor1cYMW9LVm21Ib4"},
{"content":{"body":"idk the exact overhead but i assume it's non-zero","m.mentions":{},"msgtype":"m.text"},"ts":1728546263061,"senderName":"Marja Hölttä","senderId":"@marjakh:matrix.org","id":"$-mQ8vdDuXhJwjwhnxy6Cpxj5XNRsQbmzvWugYcLYRbo"},
{"content":{"body":"Maybe the `define` vs the `set` still holds it back a little. I _think_ some tools might convert the class into:\n\n```\nclass NewSkol { \n  constructor() {\n    this.field = 1\n  }\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>Maybe the <code>define</code> vs the <code>set</code> still holds it back a little. I <em>think</em> some tools might convert the class into:</p>\n<pre><code>class NewSkol { \n  constructor() {\n    this.field = 1\n  }\n}\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","is_falling_back":true,"m.in_reply_to":{"event_id":"$zRAdS0BCTKYcGbTgACe9HhqB4w3IQI9kMdFTlVz9uD4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546299741,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HxKi0icJkvDfLtCNbaVbIEIB6j_-51pvZf6yp4C1Sj4"},
{"content":{"body":"If a goal of JSSugar is for runtimes to look at desugared syntax to determine whether it is something to optimize, is there a reason runtimes aren't already doing this?","m.mentions":{},"msgtype":"m.text"},"ts":1728546308942,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TKpBFodAAW8LZrm3diJG_nkKhYcP8GMzKltU3ccALCM"},
{"content":{"body":"I think that _used_ to be faster, in the past","format":"org.matrix.custom.html","formatted_body":"I think that <em>used</em> to be faster, in the past","m.mentions":{},"m.relates_to":{"event_id":"$Tmr4X2gUoHMXM7HPWFyHNgROfFbKZe_LawQuJNUHAGU","is_falling_back":true,"m.in_reply_to":{"event_id":"$HxKi0icJkvDfLtCNbaVbIEIB6j_-51pvZf6yp4C1Sj4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728546325016,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$IRBIYcrCACOcPinr7_BcrdvUYLyIm-J_uJerlFvLIRQ"},
{"content":{"body":"wait, where was that a goal","m.mentions":{},"msgtype":"m.text"},"ts":1728546332678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3wloItTjSWrH-oHKcJU8YZ_AFguqx2qI3Vlf3uynQSg"},
{"content":{"body":"(and we are already doing this, we try to see patterns that common frameworks and other popular libs use)","m.mentions":{},"msgtype":"m.text"},"ts":1728546351004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$It-p9GAGMKpgqc1XQX_g78StKBd9ETldyNUaXulqsVo"},
{"content":{"body":"Maybe not a goal, but you just made that statement two minutes ago","m.mentions":{},"msgtype":"m.text"},"ts":1728546351295,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CX5dMU1XHFXOcRmknOsPjq6_l-lZ8EixmAypu3CjO8k"},
{"content":{"body":"i don't remember making that formulation","m.mentions":{},"msgtype":"m.text"},"ts":1728546358745,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3DGmoQ8hjz-TTuRoFjwHmcIEgkxrobw1CS1r5a7wuV8"},
{"content":{"body":"but in any case, we do do this","m.mentions":{},"msgtype":"m.text"},"ts":1728546362039,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kg8Nq8jFZIMuGviAzP3mcPmhPfQTjVmjQXn2fLMHr9g"},
{"content":{"body":"we are doing this by default for all features, so anything that compiles down to current JS _is_ being targeted","format":"org.matrix.custom.html","formatted_body":"we are doing this by default for all features, so anything that compiles down to current JS <em>is</em> being targeted","m.mentions":{},"msgtype":"m.text"},"ts":1728546369001,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Eb8s_U8_19WFbYdiqcvqRZdcR70C9UltRXqyOndZSpg"},
{"content":{"body":"because again, JS0 = current js","m.mentions":{},"msgtype":"m.text"},"ts":1728546377389,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$jG5GqLRe9W8eesaNQbeVuDs_U9HuC8gAjym7pAaNVtM"},
{"content":{"body":"I recall one of places where classes were slow for no apparent benefit was empty constructors invoke the iterator protocol on `arguments` to forward them so you can't elide the call without a lot of optimizations. But maybe I'm misremembering that?","format":"org.matrix.custom.html","formatted_body":"I recall one of places where classes were slow for no apparent benefit was empty constructors invoke the iterator protocol on <code>arguments</code> to forward them so you can't elide the call without a lot of optimizations. But maybe I'm misremembering that?","m.mentions":{},"msgtype":"m.text"},"ts":1728546635393,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MdHJFG6tfpZMtGHWWIWordZgn3ShaiNWYMeMF3OKvOI"},
{"content":{"body":"We fixed that","msgtype":"m.text"},"ts":1728546655693,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6V5TSsXxzeVX8r6-nbvI027pDrg2vPoDKHo-wPhCiM8"},
{"content":{"body":"i think we managed to fix that for default iterators","m.mentions":{},"msgtype":"m.text"},"ts":1728546660276,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RYhoLf4HJQBKme3dw9OjLo4wYaC5VLdxCYyPKit7wYM"},
{"content":{"body":"the point marja was talking about is the `this` TDZ basically","format":"org.matrix.custom.html","formatted_body":"the point marja was talking about is the <code>this</code> TDZ basically","m.mentions":{},"msgtype":"m.text"},"ts":1728546670466,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ysh_Rc7f3uJI8_T5n6kgdsYeS_qWttsxwG3CeRIoykw"},
{"content":{"body":"`super()` _must_ be there","format":"org.matrix.custom.html","formatted_body":"<code>super()</code> <em>must</em> be there","m.mentions":{},"msgtype":"m.text"},"ts":1728546674788,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YCOAVG_xgh4YNNVzeHgcRX2gPXQ-XGhhwCMZI9QPTAM"},
{"content":{"body":"this is not true for ES5-style classes, so Closure can just straight up elide it","m.mentions":{},"msgtype":"m.text"},"ts":1728546686466,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TjYCtelxzbrUj1FjUPH3WLKN-BLdZkWdVEdRxA3bikg"},
{"content":{"body":"Ah right ok","m.mentions":{},"msgtype":"m.text"},"ts":1728546695341,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$iUkbedXlSeGg0TfXpRZ2W9zdxKllooDiouGNse9Ddhg"},
{"content":{"body":" * i think we managed to fix that for default constructor","m.mentions":{},"m.new_content":{"body":"i think we managed to fix that for default constructor","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RYhoLf4HJQBKme3dw9OjLo4wYaC5VLdxCYyPKit7wYM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728546707877,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IEbV3avMdr_DJfr9ylJRxJczeML5DXK5kvXgyRXdPW0"},
{"content":{"body":"> <@robpalme:matrix.org> Side note:  Do we know which old features are slow?  I only know of the TDZ issue.  We run most of our production code using very modern untranspiled ES2023/ES2024.  Performance has not been problematic, and is obviously is much faster than if we downlevelled private field usage or async usage.\n\nwhile this is true, we're also huge TS -> ES5 users","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8RaimvoNMP1AN0h36-2kMzzlCcDMS4UPa05DzYrPymI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Side note:  Do we know which old features are slow?  I only know of the TDZ issue.  We run most of our production code using very modern untranspiled ES2023/ES2024.  Performance has not been problematic, and is obviously is much faster than if we downlevelled private field usage or async usage.</blockquote></mx-reply>while this is true, we're also huge TS -&gt; ES5 users","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8RaimvoNMP1AN0h36-2kMzzlCcDMS4UPa05DzYrPymI"}},"msgtype":"m.text"},"ts":1728546726577,"senderName":"Andrew Paprocki","senderId":"@apaprocki:matrix.org","id":"$8DWxCW3qpkgfcH5wSjKaRFL-R-zsqL66vtFXY-QiYJU"},
{"content":{"body":"we didn't fix that if you typed `super(...arguments)` in _your_ constructor though","format":"org.matrix.custom.html","formatted_body":"we didn't fix that if you typed <code>super(...arguments)</code> in <em>your</em> constructor though","m.mentions":{},"msgtype":"m.text"},"ts":1728546727121,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t1XZWFHxtoXwJNqoBDZrN8I5jgoTranv1FSK4_oWOD0"},
{"content":{"body":"no `this` before `super()` is important to maintain expectations about superclass state. The fact you can run *any* statements before `super()` is perhaps a failing of the class syntax. ","format":"org.matrix.custom.html","formatted_body":"no <code>this</code> before <code>super()</code> is important to maintain expectations about superclass state. The fact you can run <em>any</em> statements before <code>super()</code> is perhaps a failing of the class syntax.","m.mentions":{},"msgtype":"m.text"},"ts":1728546786674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IFh2bt7M0tKZaOdeN3ojw8HE9N1fnFnQwsabHJ7GlcM"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1728546795103,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mvjAvlcZyP86gwY_wg_8Nl0j7ldOCztrpUqyttrayKQ"},
{"content":{"body":"and we've chatted about this before, but we should have designed it to be more static so the elision optiimzation can still apply","m.mentions":{},"msgtype":"m.text"},"ts":1728546806644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8spQcaeEIcYTFQnm82WAvKSo782Jyl9y5RTPdDj5SVc"},
{"content":{"body":"while maintaining that guardrail","m.mentions":{},"msgtype":"m.text"},"ts":1728546810512,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qR2jhr6louGip3oHlF2cwpRtI6KNt4oIBoDXL2CJhlI"},
{"content":{"body":"not the dynamic thing we have for ES6 classes","m.mentions":{},"msgtype":"m.text"},"ts":1728546815676,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gibxq9LVyIkcDNyzNEyWKHvStCu9Nwct-HK5l6c5fkY"},
{"content":{"body":"> <@shuyuguo:matrix.org> and we've chatted about this before, but we should have designed it to be more static so the elision optiimzation can still apply\n\nisn't this an example where features should be designed w/ engine optimization up front?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8spQcaeEIcYTFQnm82WAvKSo782Jyl9y5RTPdDj5SVc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and we&#39;ve chatted about this before, but we should have designed it to be more static so the elision optiimzation can still apply</blockquote></mx-reply>isn't this an example where features should be designed w/ engine optimization up front?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8spQcaeEIcYTFQnm82WAvKSo782Jyl9y5RTPdDj5SVc"}},"msgtype":"m.text"},"ts":1728546840129,"senderName":"Andrew Paprocki","senderId":"@apaprocki:matrix.org","id":"$ngAYHOByCska6I9C5CIXZcxkO1NABhlDXsdRfiZ-w3w"},
{"content":{"body":"no, the `super()` can't be elided thing is actually directly shown by a transpiler optimization that can no longer apply to ES6 classes that used to apply to ES5 classes","format":"org.matrix.custom.html","formatted_body":"no, the <code>super()</code> can't be elided thing is actually directly shown by a transpiler optimization that can no longer apply to ES6 classes that used to apply to ES5 classes","m.mentions":{},"msgtype":"m.text"},"ts":1728546882539,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hT2wLCUITsL8t8VD5pBl9tt1Rn1DzweE_F4f82rgVfU"},
{"content":{"body":"The fact you can forget to invoke the superclass constructor in an ES5-style class is a huge footgun, even if it is more performant.","m.mentions":{},"msgtype":"m.text"},"ts":1728546904077,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9K6ObZRKEqQ3A8Dm6CxzZRWY8z3TjuaYfQcIUTjkRPM"},
{"content":{"body":"`!super()` :P","format":"org.matrix.custom.html","formatted_body":"<code>!super()</code> :P","m.mentions":{},"msgtype":"m.text"},"ts":1728546958724,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Posjfv0L6jpwsXiBcxZlhiChJtYKMYz-fYFMCCi4Pmk"},
{"content":{"body":"> <@shuyuguo:matrix.org> no, the `super()` can't be elided thing is actually directly shown by a transpiler optimization that can no longer apply to ES6 classes that used to apply to ES5 classes\n\nThe optimization being in the textual representation of having to write `constructor() { super(); ... }`, not in the possibility that the runtime might be able to optimize away a `super()` as the first statement?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hT2wLCUITsL8t8VD5pBl9tt1Rn1DzweE_F4f82rgVfU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>no, the <code>super()</code> can't be elided thing is actually directly shown by a transpiler optimization that can no longer apply to ES6 classes that used to apply to ES5 classes</blockquote></mx-reply>The optimization being in the textual representation of having to write <code>constructor() { super(); ... }</code>, not in the possibility that the runtime might be able to optimize away a <code>super()</code> as the first statement?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hT2wLCUITsL8t8VD5pBl9tt1Rn1DzweE_F4f82rgVfU"}},"msgtype":"m.text"},"ts":1728546961239,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oUWfmXcxvm3b8ngLK01eVodgwmsJU59KYQzsaqXptLo"},
{"content":{"body":"IMO, we should have had something like `constructor() : super() { }` akin to C++ or C#","format":"org.matrix.custom.html","formatted_body":"IMO, we should have had something like <code>constructor() : super() { }</code> akin to C++ or C#","m.mentions":{},"msgtype":"m.text"},"ts":1728547023655,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HkxNnLmMd66mXbp5az2HVaVMRY3En0D9JANdy8x0L9c"},
{"content":{"body":"Where the absence of `: super()` implies you're invoking the superclass constructor with no arguments.","format":"org.matrix.custom.html","formatted_body":"Where the absence of <code>: super()</code> implies you're invoking the superclass constructor with no arguments.","m.mentions":{},"msgtype":"m.text"},"ts":1728547063394,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4IIi0kupAoCgBHTPIF63ZsvYKZ3ZS3TNzTknaL_dAIU"},
{"content":{"body":"early prototypes of TypeScript experimented with a class syntax like `class C(a, b) { }` prior to the actual class syntax being standardized, which combined the constructor with the class name. C# actually has that now too.","format":"org.matrix.custom.html","formatted_body":"early prototypes of TypeScript experimented with a class syntax like <code>class C(a, b) { }</code> prior to the actual class syntax being standardized, which combined the constructor with the class name. C# actually has that now too.","m.mentions":{},"msgtype":"m.text"},"ts":1728547316586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ts-iDkCPPNaAdWcTYB7BBOG-g5tqbNnFXgJmg96oj2Y"},
{"content":{"body":"Omitting `this` checks after `super()` is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.\n\nI'd be curious to see though if a Babel-transpiled subclass constructor is indeed slower than the same code running natively.","format":"org.matrix.custom.html","formatted_body":"<p>Omitting <code>this</code> checks after <code>super()</code> is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.</p>\n<p>I'd be curious to see though if a Babel-transpiled subclass constructor is indeed slower than the same code running natively.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728547346048,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kuVtnPlAWxMeDCBYcOgSvIKZhUmAZjnJUL07aD624Ps"},
{"content":{"body":"Not comparing with \"how would people write the class if it was ES5\"","m.mentions":{},"msgtype":"m.text"},"ts":1728547354834,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9bTYDxzmA31Lgckt67cT2kqHychJIMfmsjSxhlnIIOA"},
{"content":{"body":"But with what Babel actually emits","m.mentions":{},"msgtype":"m.text"},"ts":1728547362648,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ySXBP1wL8ZdFQduJURJrGFQoUPIrcmLWJyTshjwkxSc"},
{"content":{"body":"In C# you can now write \n```cs\nclass Sub(int x, int y) : Super(x, y)\n{\n  public X { get; set; } = x;\n  public Y { get; set; } = y;\n}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>In C# you can now write</p>\n<pre><code class=\"language-cs\">class Sub(int x, int y) : Super(x, y)\n{\n  public X { get; set; } = x;\n  public Y { get; set; } = y;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728547372222,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$96cMv07JJ-6510QBgyYJtc6FzMc6Z8Ax3h7uTGVAlMc"},
{"content":{"body":" * Omitting `this` checks after `super()` is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.\n\nI'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.","format":"org.matrix.custom.html","formatted_body":" * <p>Omitting <code>this</code> checks after <code>super()</code> is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.</p>\n<p>I'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.</p>\n","m.mentions":{},"m.new_content":{"body":"Omitting `this` checks after `super()` is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.\n\nI'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.","format":"org.matrix.custom.html","formatted_body":"<p>Omitting <code>this</code> checks after <code>super()</code> is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.</p>\n<p>I'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kuVtnPlAWxMeDCBYcOgSvIKZhUmAZjnJUL07aD624Ps","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728547419051,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vRGb9HOKbAtfFsvNemBeR6RL4cMTEKZ1MaLctYCrcac"},
{"content":{"body":"which is akin to writing\n```cs\nclass Sub : Super {\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>which is akin to writing</p>\n<pre><code class=\"language-cs\">class Sub : Super {\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728547453512,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZbTDQWBzhRZ-ETq18_C63_BbIVMo-GS2exeWsSKXnIw"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Omitting `this` checks after `super()` is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.\n> \n> I'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.\n\nAlthough probably it's complex because we do it on an AST and not on a linear bytecode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kuVtnPlAWxMeDCBYcOgSvIKZhUmAZjnJUL07aD624Ps?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>Omitting <code>this</code> checks after <code>super()</code> is probably one of the most complex optimizations we have to do in Babel due to the performance cost, and indeed there I'd expect engines to not be able to do it on-the-fly.</p>\n<p>I'd be curious to see though if a Babel-transpiled subclass constructor is indeed faster than the same code running natively.</p>\n</blockquote></mx-reply>Although probably it's complex because we do it on an AST and not on a linear bytecode","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$kuVtnPlAWxMeDCBYcOgSvIKZhUmAZjnJUL07aD624Ps"}},"msgtype":"m.text"},"ts":1728547473712,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0dTmBKertqASOE_ivK9rSyq990r34-Gmuk7eh0YQgIM"},
{"content":{"body":"We could always introduce slight alternatives to the `class` syntax that would make `super()` invocation implied, such as `class C(a, b) extends Super() {}`","format":"org.matrix.custom.html","formatted_body":"We could always introduce slight alternatives to the <code>class</code> syntax that would make <code>super()</code> invocation implied, such as <code>class C(a, b) extends Super() {}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728547548137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Whx6XGPoEFQjw4XSFKZlhUEgdjc-Dlmppc5yQD6XF0Y"},
{"content":{"body":" * We could always introduce slight alternatives to the `class` syntax that would make `super()` invocation implied, such as `class Sub(a, b) extends Super() {}`","format":"org.matrix.custom.html","formatted_body":" * We could always introduce slight alternatives to the <code>class</code> syntax that would make <code>super()</code> invocation implied, such as <code>class Sub(a, b) extends Super() {}</code>","m.mentions":{},"m.new_content":{"body":"We could always introduce slight alternatives to the `class` syntax that would make `super()` invocation implied, such as `class Sub(a, b) extends Super() {}`","format":"org.matrix.custom.html","formatted_body":"We could always introduce slight alternatives to the <code>class</code> syntax that would make <code>super()</code> invocation implied, such as <code>class Sub(a, b) extends Super() {}</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Whx6XGPoEFQjw4XSFKZlhUEgdjc-Dlmppc5yQD6XF0Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728547562776,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3O3es5N4W-sZSbr7GLQvkZNaqv8lkHdy5c2xc-4WcC0"},
{"content":{"body":" * which is akin to writing\n\n```cs\nclass Sub : Super\n{\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>which is akin to writing</p>\n<pre><code class=\"language-cs\">class Sub : Super\n{\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"which is akin to writing\n\n```cs\nclass Sub : Super\n{\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>which is akin to writing</p>\n<pre><code class=\"language-cs\">class Sub : Super\n{\n  public X { get; set; }\n  public Y { get; set; }\n\n  public Sub(int x, int y) : Super(x, y) {\n    X = x;\n    Y = y;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZbTDQWBzhRZ-ETq18_C63_BbIVMo-GS2exeWsSKXnIw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728547838918,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W1EBNgIncu4RSrturR0f4rhgybpqqHv-P175r-bsC0o"},
{"content":{"body":"(I'm not advocating for that specific syntax, just that its conceivable that we could do something of that nature)","m.mentions":{},"msgtype":"m.text"},"ts":1728548009403,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jyuVzgAL6Vs12n6GeAnCzckMfNlRIV_1s-vXiM58R1I"},
{"content":{"body":"> <@marjakh:matrix.org> when i was looking into it, i noticed that one thing classes can't do is omitting super ctors. some tools, when they notice the super ctor doesn't do anything interesting, just omit it when doing old-style classes. or they inline the super ctor workload into the subclass ctor and then omit it.\n\nInlining the superclass ctor in an ES6 class wouldn't be sound since you can change it in JS via `Object.setPrototypeOf`. IMO, one of many problems with `class` design is that it was allowed to be too dynamic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A7K5pDho82hfnELnOlPXJBXKiu07afQr3Z9JBe2z5GM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@marjakh:matrix.org\">@marjakh:matrix.org</a><br>when i was looking into it, i noticed that one thing classes can&#39;t do is omitting super ctors. some tools, when they notice the super ctor doesn&#39;t do anything interesting, just omit it when doing old-style classes. or they inline the super ctor workload into the subclass ctor and then omit it.</blockquote></mx-reply>Inlining the superclass ctor in an ES6 class wouldn't be sound since you can change it in JS via <code>Object.setPrototypeOf</code>. IMO, one of many problems with <code>class</code> design is that it was allowed to be too dynamic.","m.mentions":{"user_ids":["@marjakh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$A7K5pDho82hfnELnOlPXJBXKiu07afQr3Z9JBe2z5GM"}},"msgtype":"m.text"},"ts":1728548583890,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Krsonh9qEnRWiDIge11GGtDQdthILKACuIVbvY4wjI0"},
{"content":{"body":"> <@rbuckton:matrix.org> early prototypes of TypeScript experimented with a class syntax like `class C(a, b) { }` prior to the actual class syntax being standardized, which combined the constructor with the class name. C# actually has that now too.\n\nI like it. Why ES6 finally choose current style? Can we add back that syntax in the future?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ts-iDkCPPNaAdWcTYB7BBOG-g5tqbNnFXgJmg96oj2Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>early prototypes of TypeScript experimented with a class syntax like <code>class C(a, b) { }</code> prior to the actual class syntax being standardized, which combined the constructor with the class name. C# actually has that now too.</blockquote></mx-reply>I like it. Why ES6 finally choose current style? Can we add back that syntax in the future?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ts-iDkCPPNaAdWcTYB7BBOG-g5tqbNnFXgJmg96oj2Y"}},"msgtype":"m.text"},"ts":1728549811365,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$24xpWf7_t8Lva_j07OqNSZOK1lEpN4NRHHSaUHKIsu4"},
{"content":{"body":"Could structs just be \"class V2\"? Is there any good reason to use classes if we get structs? (assuming that they'll support private state)","msgtype":"m.text"},"ts":1728549887698,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$icX6sBqOiCxt3IefW2RKZZ8brbc6-VEQuPeVYb2_LXA"},
{"content":{"body":"Yeah, it seems current struct proposal is very like class V2 (though `shared struct` look like a very different thing)","format":"org.matrix.custom.html","formatted_body":"Yeah, it seems current struct proposal is very like class V2 (though <code>shared struct</code> look like a very different thing)","m.mentions":{},"msgtype":"m.text"},"ts":1728550026449,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$q-EE6-C2b1aTIduMeVpmF_yiM0kvj-LEQJgqPgZbPg0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Could structs just be \"class V2\"? Is there any good reason to use classes if we get structs? (assuming that they'll support private state)\n\nwhat's the concrete thing you're thinking of? a different keyword than `struct`? or the messaging?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$icX6sBqOiCxt3IefW2RKZZ8brbc6-VEQuPeVYb2_LXA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Could structs just be &quot;class V2&quot;? Is there any good reason to use classes if we get structs? (assuming that they&#39;ll support private state)</blockquote></mx-reply>what's the concrete thing you're thinking of? a different keyword than <code>struct</code>? or the messaging?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$icX6sBqOiCxt3IefW2RKZZ8brbc6-VEQuPeVYb2_LXA"}},"msgtype":"m.text"},"ts":1728550459290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hUndgIrdTABaq4NDr3R6Rd2tEOxgULo7c4zPLD9eaAs"},
{"content":{"body":"i feel like the only compelling reason to use classes is expandos?","m.mentions":{},"msgtype":"m.text"},"ts":1728550491899,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kr6WMnYodvc8Q9pZXwAw-aIFLlQPLJZgrCiiwkrcKO4"},
{"content":{"body":"mixins maybe","m.mentions":{},"msgtype":"m.text"},"ts":1728550508987,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zMf3Po7_ppN4liTwxhR5VZhXNF9ptgqb9RCbBBO_5Ao"},
{"content":{"body":"> <@shuyuguo:matrix.org> what's the concrete thing you're thinking of? a different keyword than `struct`? or the messaging?\n\nOnly messaging. \"It's fine to not further optimize classes, because people should migrate to structs anyway\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hUndgIrdTABaq4NDr3R6Rd2tEOxgULo7c4zPLD9eaAs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />what's the concrete thing you're thinking of? a different keyword than <code>struct</code>? or the messaging?</blockquote></mx-reply>Only messaging. &quot;It's fine to not further optimize classes, because people should migrate to structs anyway&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$hUndgIrdTABaq4NDr3R6Rd2tEOxgULo7c4zPLD9eaAs"}},"msgtype":"m.text"},"ts":1728550707686,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ti4y_p91J3nlAqu-wCXVrsyCSdWbm-tIwlIjsCJIjjc"},
{"content":{"body":"And like, lint rules saying \"use a struct here\"","msgtype":"m.text"},"ts":1728550724936,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4KC-sxKw5bR7J28GhPlBbwfe9mayWlDfL4PYzuTqkv4"},
{"content":{"body":"Similarly to how the ecosystem migrated (at least, for hand-authored code) from var to let","msgtype":"m.text"},"ts":1728550747323,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-Ug1lQIl9J63j9qZevaYHfjC1ugjEEz2Bw1KbruL5T0"},
{"content":{"body":"> <@rbuckton:matrix.org> We could always introduce slight alternatives to the `class` syntax that would make `super()` invocation implied, such as `class C(a, b) extends Super() {}`\n\nThis is difficult to square with `this`: should references to an and b be spelled as `this.a` or just `a`? If bare, does it follow lexical scoping semantics or `this` semantics?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Whx6XGPoEFQjw4XSFKZlhUEgdjc-Dlmppc5yQD6XF0Y\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We could always introduce slight alternatives to the <code>class</code> syntax that would make <code>super()</code> invocation implied, such as <code>class C(a, b) extends Super() {}</code></blockquote></mx-reply>This is difficult to square with <code>this</code>: should references to an and b be spelled as <code>this.a</code> or just <code>a</code>? If bare, does it follow lexical scoping semantics or <code>this</code> semantics?","m.relates_to":{"m.in_reply_to":{"event_id":"$Whx6XGPoEFQjw4XSFKZlhUEgdjc-Dlmppc5yQD6XF0Y"}},"msgtype":"m.text"},"ts":1728552557844,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vFFgPv7B33fuX7YZmv8cGetPHaHW-A_JY6e7Ofikgc4"},
{"content":{"body":"It would certainly bare an interesting analogy to Swift, where structs are preferred over classes (but the semantics are completely different!)","msgtype":"m.text"},"ts":1728552607684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7w09FM1Xevf8WGJrgVwluZbZvR64-a23fMV_g91D55s"},
{"content":{"body":"> <@littledan:matrix.org> This is difficult to square with `this`: should references to an and b be spelled as `this.a` or just `a`? If bare, does it follow lexical scoping semantics or `this` semantics?\n\nAlso there is a question about how it interacts with super, as well as destructuring","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vFFgPv7B33fuX7YZmv8cGetPHaHW-A_JY6e7Ofikgc4\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is difficult to square with <code>this</code>: should references to an and b be spelled as <code>this.a</code> or just <code>a</code>? If bare, does it follow lexical scoping semantics or <code>this</code> semantics?</blockquote></mx-reply>Also there is a question about how it interacts with super, as well as destructuring","m.relates_to":{"m.in_reply_to":{"event_id":"$vFFgPv7B33fuX7YZmv8cGetPHaHW-A_JY6e7Ofikgc4"}},"msgtype":"m.text"},"ts":1728552672981,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$31VyTAzPm_7XdjIwU3ejxnoLqyfS6g-hrRJFQgWZwEs"},
{"content":{"body":"rbuckton: the \"superclass\" can also change in ES5; the tools were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the \"superclass\" can also change in ES5; the tools were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728559995893,"senderName":"Marja Hölttä (not here, use marja@google.com)","senderId":"@marjakh:matrix.org","id":"$f_qeCxVIg7fNNoYogdq0cjnzMcW_k-A8PoD4R_fKtjo"},
{"content":{"body":" * rbuckton: the \"superclass\" can also change in ES5; the tools which were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the \"superclass\" can also change in ES5; the tools which were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","m.mentions":{},"m.new_content":{"body":"rbuckton: the \"superclass\" can also change in ES5; the tools which were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the \"superclass\" can also change in ES5; the tools which were inlining the ctors were also assuming that the superclass won't change, because the program they're optimizing is well-behaved like that","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f_qeCxVIg7fNNoYogdq0cjnzMcW_k-A8PoD4R_fKtjo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728560004500,"senderName":"Marja Hölttä (not here, use marja@google.com)","senderId":"@marjakh:matrix.org","id":"$6I9dpI1ExcirCcIFxI5zqOsH2N2ZaPHRKDnzROzLsY4"},
{"content":{"body":"(they also straight up didn't inline in the ES6 version which is their problem, not our problem)","m.mentions":{},"msgtype":"m.text"},"ts":1728560048966,"senderName":"Marja Hölttä (not here, use marja@google.com)","senderId":"@marjakh:matrix.org","id":"$LrB3ri-xML8W6gQv1K6r3g6cXrUuGkEM9EovUnAyNhc"},
{"content":{"body":"but definitely, one problem was that the tools were making these assumptions and optimizing based on that, but as an engine we need to be prepared for everything being maximally dynamic, and weird things happening","m.mentions":{},"msgtype":"m.text"},"ts":1728560231906,"senderName":"Marja Hölttä (not here, use marja@google.com)","senderId":"@marjakh:matrix.org","id":"$CoJMUaIxtqWtTRoB45xDn2B1JLkw7xKAzKFOMMalm-o"},
{"content":{"body":"> <@rbuckton:matrix.org> IMO, we should have had something like `constructor() : super() { }` akin to C++ or C#\n\nThis would have been great. It’s also the only way I could see us doing sound immutable fields.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24HkxNnLmMd66mXbp5az2HVaVMRY3En0D9JANdy8x0L9c\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>IMO, we should have had something like <code>constructor() : super() { }</code> akin to C++ or C#</blockquote></mx-reply>This would have been great. It’s also the only way I could see us doing sound immutable fields.","m.relates_to":{"m.in_reply_to":{"event_id":"$HkxNnLmMd66mXbp5az2HVaVMRY3En0D9JANdy8x0L9c"}},"msgtype":"m.text"},"ts":1728560242340,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zWcTghzVlUzTmqMLqw7KVrWLJAhDj6G0uNxjy_Wsxl4"},
{"content":{"body":"> <@marjakh:matrix.org> idk the exact overhead but i assume it's non-zero\n\nWe have been trying to identify any real slowdowns and don’t see one in V8. If anyone is experiencing a slowdown of private compared to public in V8, I would love to hear from you; maybe we could sponsor work to do the appropriate optimization.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-mQ8vdDuXhJwjwhnxy6Cpxj5XNRsQbmzvWugYcLYRbo\">In reply to</a> <a href=\"https://matrix.to/#/@marjakh:matrix.org\">@marjakh:matrix.org</a><br>idk the exact overhead but i assume it's non-zero</blockquote></mx-reply>We have been trying to identify any real slowdowns and don’t see one in V8. If anyone is experiencing a slowdown of private compared to public in V8, I would love to hear from you; maybe we could sponsor work to do the appropriate optimization.","m.relates_to":{"m.in_reply_to":{"event_id":"$-mQ8vdDuXhJwjwhnxy6Cpxj5XNRsQbmzvWugYcLYRbo"}},"msgtype":"m.text"},"ts":1728560417117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GTqdv8_uJqfP1Rr6JGoALngAG1a6kkeiSjWJc-b7OX0"},
{"content":{"body":"> <@shuyuguo:matrix.org> i was referring to TS, littledan \n\nWhat was this about? Sorry I wasn’t checking in real time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24L7tG5hoOFlS86QlmswDkXLEte7JcW3IiMW34cfK_2-k\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i was referring to TS, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a></blockquote></mx-reply>What was this about? Sorry I wasn’t checking in real time","m.relates_to":{"m.in_reply_to":{"event_id":"$L7tG5hoOFlS86QlmswDkXLEte7JcW3IiMW34cfK_2-k"}},"msgtype":"m.text"},"ts":1728560535804,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$McLCvRUAL3ZWcEPqQ66xivRXQac-1DYsP-2_epPOe5s"},
{"content":{"body":"> <@yulia:mozilla.org> restricting things to ast transform would reduce complexity. right now you have free reign in what you can do, and that can introduce new bytecode operations etc. if its an AST transform, it is quite literally sugar as it can be rewritten\n\nYes, I agree that this would be a good design to follow where possible. And this is a great illustration of how, with slightly different mechanics, the needs of transpilers match the needs of interpreters. So we should work through both of those.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24iYlnXmmlsU3Ase1GxUO5HiihiuR_cZxLgskKEJZ9yAA\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>restricting things to ast transform would reduce complexity. right now you have free reign in what you can do, and that can introduce new bytecode operations etc. if its an AST transform, it is quite literally sugar as it can be rewritten</blockquote></mx-reply>Yes, I agree that this would be a good design to follow where possible. And this is a great illustration of how, with slightly different mechanics, the needs of transpilers match the needs of interpreters. So we should work through both of those.","m.relates_to":{"m.in_reply_to":{"event_id":"$iYlnXmmlsU3Ase1GxUO5HiihiuR_cZxLgskKEJZ9yAA"}},"msgtype":"m.text"},"ts":1728560719529,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lmn9SBOM-Bq-_NuqZpxutvz-SatOmYWdy2fNVuKQZPk"},
{"content":{"body":"> <@shuyuguo:matrix.org> good luck designing, getting consensus, and getting people to adopt given TS :)\n\nTS is pretty good; I don’t see a pressing reason to develop and bless something else (though more experimentation is always good!)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24n6oDgPFLT3_EaCELQxJWsiE7smgJpgNoXAd47ogLI1k\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>good luck designing, getting consensus, and getting people to adopt given TS :)</blockquote></mx-reply>TS is pretty good; I don’t see a pressing reason to develop and bless something else (though more experimentation is always good!)","m.relates_to":{"m.in_reply_to":{"event_id":"$n6oDgPFLT3_EaCELQxJWsiE7smgJpgNoXAd47ogLI1k"}},"msgtype":"m.text"},"ts":1728560836751,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5LRoFKAHEB9xhlH5USoDxYFw9O_t_8YfSMGqelnC9sU"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's baking time with the world\n\nWho do we expect to do this work? That is the question. I don’t see an easy answer. Tools have been pretty clear that most of them don’t want to ship features widely before they are baked. Same constraint as browsers! For the same reason: because it’s a lot of work to maintain these things if you set it up such that people can really use them in production.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24t9W1a2NhU56CoZzIGUBfeXVcMQJgMpMpmBkE3GBcKYs\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it's baking time with the world</blockquote></mx-reply>Who do we expect to do this work? That is the question. I don’t see an easy answer. Tools have been pretty clear that most of them don’t want to ship features widely before they are baked. Same constraint as browsers! For the same reason: because it’s a lot of work to maintain these things if you set it up such that people can really use them in production.","m.relates_to":{"m.in_reply_to":{"event_id":"$t9W1a2NhU56CoZzIGUBfeXVcMQJgMpMpmBkE3GBcKYs"}},"msgtype":"m.text"},"ts":1728560997790,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uR1IjnUElqkV03cLeQQAIaicklHA6cLbtY9oOcDoX1k"},
{"content":{"body":"> <@yulia:mozilla.org> can you elaborate? not familiar with the wasm usecase so well, so i don't know how import.defer solves this better than import source + import()\n\nImport.defer() would let you have a promise for the initial load+compile, and then synchronously instantiate on first access. Import.source + import() makes the latter async. This is all assuming you want native ESM imports, which Shu is assuming you don’t. I share Ron’s view (which I think the WasmCG adopted…) that we should build towards this world even if we aren’t there yet.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QNijzQ5n9bigERXts2pR0QzLD18g693KQGZgeJqGaRY\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>can you elaborate? not familiar with the wasm usecase so well, so i don't know how import.defer solves this better than import source + import()</blockquote></mx-reply>Import.defer() would let you have a promise for the initial load+compile, and then synchronously instantiate on first access. Import.source + import() makes the latter async. This is all assuming you want native ESM imports, which Shu is assuming you don’t. I share Ron’s view (which I think the WasmCG adopted…) that we should build towards this world even if we aren’t there yet.","m.relates_to":{"m.in_reply_to":{"event_id":"$QNijzQ5n9bigERXts2pR0QzLD18g693KQGZgeJqGaRY"}},"msgtype":"m.text"},"ts":1728561204793,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$65cDtDx9OKyo3ZLIMmWE8_nDhu4uNKrs4z2WsE-Rdj0"},
{"content":{"body":"Why would we expect the cost to be different in JSSugar vs this expansion?","m.relates_to":{"event_id":"$fl8ac8WJ4cLOcovrY971kqFd1qg8fVD-Z_pluDj6fmU","is_falling_back":true,"m.in_reply_to":{"event_id":"$AFl00ODfw3p_Pi2Q9bwV6BLHMtSTKnGYTZJEk9uXZs4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728561317742,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eAE74vInFFZf3C8MwT3-SiN49tMKjfZ_ju5BKLAJ52U"},
{"content":{"body":"But the custom code for extractors is much more direct than that of destructuring iterators","m.relates_to":{"event_id":"$joaK_LnbR-MVDwlzO9kgtTZoM17p8jLcOURtfBjRmtE","is_falling_back":true,"m.in_reply_to":{"event_id":"$KBQDkTEolkxBiqPERVMy5TepFtEAAKo1QIElkapQk9M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728561426593,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9EAEeympEbhY0cEl8Q6zYAz6-_7SgDVbuIoOhHd3-ao"},
{"content":{"body":"Splitting the proposal in two and shipping the browser part means we make less progress on the “let it bake before shipping” front.","m.relates_to":{"event_id":"$pop3fE4EiVFhLDvC5ssAqVzGtwzxFfnXRfiHDYWxLC8","is_falling_back":true,"m.in_reply_to":{"event_id":"$tMIpVbi4YCojIDR-lysTsb593qBoia0tW26cg-JpxEk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728561494179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hzkNMKgzkWqpK5XIzh1vHvwi0gCWvX0dKdGbtWN4f98"},
{"content":{"body":"Yes I like your 14 day goal, let’s see if we can change policy here.","m.relates_to":{"event_id":"$9fq0_115Pa-ITSsl2tssiuhtZIU0c202GD_uDaUTSUw","is_falling_back":true,"m.in_reply_to":{"event_id":"$FiBSwI4HbLwfI0vBZDfvO18HPuH6p6N8fYuegGFDkkI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728561549763,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qHMglq0RrGLtJh_CcY7SvaCKogcCMtIHgh5TKm_ZOOU"},
{"content":{"body":"So, how should we understand how bad this is? Is the length of the bytecode sufficient reason that we shouldn’t add such a feature to JSSugar even?","m.relates_to":{"event_id":"$qVOSxNbcyQ7EKba8myTB0FsfkYXi0WUOr34cAf4DOhE","is_falling_back":true,"m.in_reply_to":{"event_id":"$rFXBFFhB0zxhkn7oqY67xG4AacktmDcGTg8OBx_8NK8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728561704206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dYCbVejSz_Gkt9Vj-2QSN4_5qBDMGjZrjRmBE555Ajo"}
]