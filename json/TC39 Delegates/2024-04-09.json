[
{"content":{"body":"good morning/evening/night everyone!","m.mentions":{},"msgtype":"m.text"},"ts":1712670752959,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gJFuR8CblhGP9IHpgjJ52i8I5iCYIv7C0LSvg4SWbzc"},
{"content":{"body":"meeting starts in ~7","m.mentions":{},"msgtype":"m.text"},"ts":1712670756888,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$d5ySoqjRgQd0TjZsCI095TkBTzsX_pjHzcK7qUk7haQ"},
{"content":{"body":"I have trouble understanding the motivation for this null change, but also it doesn't seem harmful","m.mentions":{},"msgtype":"m.text"},"ts":1712672959744,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GEIWuzqE0_rYiZNNKHX6hdYDy6YUOBx-7Wb4broivwI"},
{"content":{"body":"(or rather, I have trouble understanding the motivation for the null skipping in the first place)","m.mentions":{},"msgtype":"m.text"},"ts":1712672995863,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$07nwBD-1kn90B97wCZyPPj04aMZMOYjK6pVSdHocGjs"},
{"content":{"body":"Random fact: Babel accidentally ignores `null`s while guaranteeing at least one `await` -- we have a PR open to match the behavior of the current (pre-this-change) proposal","format":"org.matrix.custom.html","formatted_body":"Random fact: Babel accidentally ignores <code>null</code>s while guaranteeing at least one <code>await</code> -- we have a PR open to match the behavior of the current (pre-this-change) proposal","m.mentions":{},"msgtype":"m.text"},"ts":1712673039976,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cDKuy9Lkq_KVdZBuIcLN9IISQ4SGH6HyhiNjB0LwOf0"},
{"content":{"body":"It seems this PR try to avoid nulls introducing extra awaits, am I understanding this correctly?","m.mentions":{},"msgtype":"m.text"},"ts":1712673307570,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$F0iRyTVgqlWUUEql_7scUGlCd-qxMeVsLD0BxV_xiU4"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1712673317535,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8hDxDiwpx6zfzwW3JsWdOYVVtdjfFkbPx07r8ghyQHo"},
{"content":{"body":"this is a small thing, but i'd be interested in people's thoughts on banning `using` inside base switch cases: https://github.com/tc39/proposal-explicit-resource-management/issues/215#issuecomment-2040486653","format":"org.matrix.custom.html","formatted_body":"this is a small thing, but i'd be interested in people's thoughts on banning <code>using</code> inside base switch cases: https://github.com/tc39/proposal-explicit-resource-management/issues/215#issuecomment-2040486653","m.mentions":{},"msgtype":"m.text"},"ts":1712673471235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2hZUJclHo1J4CX_oTxWLabHp-wphUp3IfThZs7wkv9Y"},
{"content":{"body":"Babel's `using` support in `switch` is currently completely broken","format":"org.matrix.custom.html","formatted_body":"Babel's <code>using</code> support in <code>switch</code> is currently completely broken","m.mentions":{},"msgtype":"m.text"},"ts":1712673563609,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$96WNUpGqyCyBd0BI0ecP0pzCFXyzPqrbIIolmR-QjO8"},
{"content":{"body":"Because everything in `switch` is incredibly annoying to compile","format":"org.matrix.custom.html","formatted_body":"Because everything in <code>switch</code> is incredibly annoying to compile","m.mentions":{},"msgtype":"m.text"},"ts":1712673582017,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wshfUjtzRylTcdGaUUpV_Q2OMioIWCi8KqoqdiF2DCw"},
{"content":{"body":"i wanna ban it but recognize that'll break symmetry with let/const","m.mentions":{},"msgtype":"m.text"},"ts":1712673597272,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6BDpV9UqN8qftIDQaFhzwY8Cy2luCykDVuYQwv3_o8I"},
{"content":{"body":"Is it for implementation reasons?","m.mentions":{},"msgtype":"m.text"},"ts":1712673652756,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vz2eKzbV0BquIGqieqZLBpo-sjBXvM5HkFyGSDOzwvU"},
{"content":{"body":"it's laid out in the comment -- saves some codegen complexity","m.mentions":{},"msgtype":"m.text"},"ts":1712673714326,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0aKipYnxYSCq26C6RiJBUUU2hGCUQ_qV2JBUsP2wcoE"},
{"content":{"body":"we can unroll the dispose loop in all cases except switch cases","m.mentions":{},"msgtype":"m.text"},"ts":1712673756729,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LBUlGwFqYDTC3_XaOqrBqWh17C8IJEIGQE9BfgA-c1Y"},
{"content":{"body":"I'm trying to think of any usecase for `using` in switch, but I cannot think of any where I would want `using`'s scope to fall through multiple cases","format":"org.matrix.custom.html","formatted_body":"I'm trying to think of any usecase for <code>using</code> in switch, but I cannot think of any where I would want <code>using</code>'s scope to fall through multiple cases","m.mentions":{},"msgtype":"m.text"},"ts":1712673865497,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk"},
{"content":{"body":"(Babel doesn't unroll the loop anymore, so for us it wouldn't actually be difficult to fix `using` in `switch`)","format":"org.matrix.custom.html","formatted_body":"(Babel doesn't unroll the loop anymore, so for us it wouldn't actually be difficult to fix <code>using</code> in <code>switch</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1712673960809,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9uWsPswz-7Ks-AuHPpj5RgL9JAy2_nDD2NWZmqvkNcM"},
{"content":{"body":"we don't unroll currently, but would like to","m.mentions":{},"msgtype":"m.text"},"ts":1712673999248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vf-NX_6PrM4ET8CR9teyplkKhrVw2jsbElI7MTJqltc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I'm trying to think of any usecase for `using` in switch, but I cannot think of any where I would want `using`'s scope to fall through multiple cases\n\nThe most relevant case I can see would be something like manual loop unrolling, where you skip over the `using` for a chunk of operations when it isn't needed, such as if a lock was needed for a 16k chunk of data that isn't needed for a smaller chunk of data. The point of manual loop unrolling is to avoid a bunch of comparisons and branches based on a single condition such as input size, so a smaller chunk of data skips over the `using` (and avoids the extraneous `null`/`undefined` check), while a larger chunk of data enforces the `using` and holds the lock until the current iteration of the loop ends.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I'm trying to think of any usecase for <code>using</code> in switch, but I cannot think of any where I would want <code>using</code>'s scope to fall through multiple cases</blockquote></mx-reply>The most relevant case I can see would be something like manual loop unrolling, where you skip over the <code>using</code> for a chunk of operations when it isn't needed, such as if a lock was needed for a 16k chunk of data that isn't needed for a smaller chunk of data. The point of manual loop unrolling is to avoid a bunch of comparisons and branches based on a single condition such as input size, so a smaller chunk of data skips over the <code>using</code> (and avoids the extraneous <code>null</code>/<code>undefined</code> check), while a larger chunk of data enforces the <code>using</code> and holds the lock until the current iteration of the loop ends.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk"}},"msgtype":"m.text"},"ts":1712674226532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-YFRLP2nyabnRvQD9Rz3eOSqmdpS6PVFsaHeCzlEi8Y"},
{"content":{"body":"Oh I see, like for transpiling generators","m.mentions":{},"msgtype":"m.text"},"ts":1712674372530,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ycjma4pHs53xLHKtmc95CeEeKV3IU2u35jWPnYnk3co"},
{"content":{"body":"(in a world where generators are transpiled and `using` is not I guess)","format":"org.matrix.custom.html","formatted_body":"(in a world where generators are transpiled and <code>using</code> is not I guess)","m.mentions":{},"msgtype":"m.text"},"ts":1712674393016,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5sIXnxOdkuPk8cUYEtabP8wDGArqIEecRmgMoJwzNvw"},
{"content":{"body":"```js\nfor (let start = 0; start < len; start += 8) {\n    switch (start % 8) {\n        case 0:\n          // full chunk, perform lock\n          using lck = new UniqueLock(mut);\n          readByte();\n        case 1: readByte();\n        case 2: readByte();\n        case 3: readByte();\n        case 4: readByte();\n        case 5: readByte();\n        case 6: readByte();\n        case 7: readByte();\n    } // lock released if taken\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">for (let start = 0; start &lt; len; start += 8) {\n    switch (start % 8) {\n        case 0:\n          // full chunk, perform lock\n          using lck = new UniqueLock(mut);\n          readByte();\n        case 1: readByte();\n        case 2: readByte();\n        case 3: readByte();\n        case 4: readByte();\n        case 5: readByte();\n        case 6: readByte();\n        case 7: readByte();\n    } // lock released if taken\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712674431282,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gXhn1EmUm4DTemB2ppLc298n8J14LGrIBxMilh28_iY"},
{"content":{"body":"not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cutting down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":"not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cutting down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"msgtype":"m.text"},"ts":1712674600590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iM5v5VmLAj3YGNPiM4iHUlDrpjrsQ8ICHzbuMvL9uHM"},
{"content":{"body":" * not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":" * not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"m.new_content":{"body":"not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":"not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iM5v5VmLAj3YGNPiM4iHUlDrpjrsQ8ICHzbuMvL9uHM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712674711396,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zzZHanOZUA0qrBFw5-wogMsfhWB-I9IlTmUAh4UGAm0"},
{"content":{"body":"If we could get to Ashley's point, he can explain why TLA running eagerly is useful within Bloomberg","m.mentions":{},"msgtype":"m.text"},"ts":1712676318882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$71TxqFpQ2t16udUsoCxtzsOrBL7WWybrMknnXE2yEdg"},
{"content":{"body":"tla already can break expectations...","m.mentions":{},"msgtype":"m.text"},"ts":1712676400529,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_mFfUzmSQsOKfFfaoY2YNk-6S-3rUIphPPVq4Tk0RUI"},
{"content":{"body":"certainly a TLA being added anywhere in your graph is a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1712676550363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eoRkb5wWNgWHY2GPyOuHY5FfXDt0Eyr0_ZmuLE-8gWs"},
{"content":{"body":"The thing is: in practice, you really shouldn't use JSON or CSS modules either, due to the lack of built-in bundling. The limited utility of built-in modules is not at all limited to this feature","m.mentions":{},"msgtype":"m.text"},"ts":1712676560562,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9P522MpDpIBMdGVZzfrzKc-IQEWUEtJRZqiHPYfwryY"},
{"content":{"body":"this strongly suggests to me that we need a path to standardize bundler-only syntax","m.mentions":{},"msgtype":"m.text"},"ts":1712676586958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw"},
{"content":{"body":"until then, we'll be talking about features that are mostly useful for bundlers and non-web environments","m.mentions":{},"msgtype":"m.text"},"ts":1712676588867,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QlWCEh5iLYzxb7nXoQEn86WyITLqMgGafezDJ-Btiz8"},
{"content":{"body":" * certainly a TLA being added anywhere in your graph (that's not an entrpoint) is a breaking change","m.mentions":{},"m.new_content":{"body":"certainly a TLA being added anywhere in your graph (that's not an entrpoint) is a breaking change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eoRkb5wWNgWHY2GPyOuHY5FfXDt0Eyr0_ZmuLE-8gWs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712676595338,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sqUL0qA9lW19O3SztvLAPaOk-pdPC-u1Ds-_4B0tz7U"},
{"content":{"body":"> <@bakkot:matrix.org> this strongly suggests to me that we need a path to standardize bundler-only syntax\n\nI disagree; I think we should fix the issues to allow native modules to be usable in browsers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>this strongly suggests to me that we need a path to standardize bundler-only syntax</blockquote></mx-reply>I disagree; I think we should fix the issues to allow native modules to be usable in browsers","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw"}},"msgtype":"m.text"},"ts":1712676613856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0"},
{"content":{"body":"i disagree with that disagree","m.mentions":{},"msgtype":"m.text"},"ts":1712676627596,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6dRSUqueZBCRIvmfvD1HWHT5vBv8Oxjvu1um6bZ-B4o"},
{"content":{"body":"doesn't seem a good use of resources tbh","m.mentions":{},"msgtype":"m.text"},"ts":1712676632747,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O6i74uJDzVbfMHTSDuzeKsmACLtOPVjz7qqDvoRk1uw"},
{"content":{"body":"> <@littledan:matrix.org> I disagree; I think we should fix the issues to allow native modules to be usable in browsers\n\nThat is also good! And then, after that, standardizing things like this everywhere instead of bundler-only. But not before that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I disagree; I think we should fix the issues to allow native modules to be usable in browsers</blockquote></mx-reply>That is also good! And then, after that, standardizing things like this everywhere instead of bundler-only. But not before that.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0"}},"msgtype":"m.text"},"ts":1712676666008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2FpAxstVSxEeAPNXPmLl97VHmLmOyAVuWkwxsjGr85A"},
{"content":{"body":"these are all arguments against ES6 modules in the first place","m.mentions":{},"msgtype":"m.text"},"ts":1712676673688,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Gf9eclSCpJfuocYjWP23aoxo65LmHY3UcBZzxqGh4hU"},
{"content":{"body":"*cough*","format":"org.matrix.custom.html","formatted_body":"<em>cough</em>","m.mentions":{},"msgtype":"m.text"},"ts":1712676682335,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OUwSpUAESpp91fdZINthh8cSgcW1smL3P7A1NNv36Gk"},
{"content":{"body":"I mean, yes.","m.mentions":{},"msgtype":"m.text"},"ts":1712676691248,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kpKfrpyNictOkR-xQ7HbaX2K2wmg7ZQYf--LT9UFZrA"},
{"content":{"body":"But that ship has sailed.","m.mentions":{},"msgtype":"m.text"},"ts":1712676696224,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-wvYNmpUP_vAw8eLDlHmZcM4dtATGd65MQLjLwQX6i0"},
{"content":{"body":"you're soooo close","m.mentions":{},"msgtype":"m.text"},"ts":1712676705035,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OOfiLQA-a6T_jmTPIq55ZHNAwSOi_LtXEpDwHOvUxCw"},
{"content":{"body":"bundler-related, but could `import defer` potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?","format":"org.matrix.custom.html","formatted_body":"bundler-related, but could <code>import defer</code> potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?","m.mentions":{},"msgtype":"m.text"},"ts":1712676713368,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I"},
{"content":{"body":"In Jack's \"assert sync\" proposal I suggest we can also add \"use async\" directive which might help to make TLA explicit. Maybe it also help this issue.","m.mentions":{},"msgtype":"m.text"},"ts":1712676723172,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$2J1-alpQ7McKRuyul2dANddkXE7ILfZ0ZXRMpSlj6ko"},
{"content":{"body":"well, yeah, so this would be good input to the module harmony group, if we don't like modules features anymore...","m.mentions":{},"msgtype":"m.text"},"ts":1712676736253,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw"},
{"content":{"body":"I think standardizing ES6 modules as bundler-only syntax would have been better than the current world","m.mentions":{},"msgtype":"m.text"},"ts":1712676739410,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6BUa45NqcMhHhr_4x-MV-tpu_5CNTsmpzPynNgHbFLQ"},
{"content":{"body":"or is that not an option because fetch is async","m.mentions":{},"msgtype":"m.text"},"ts":1712676753030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3wDYil0ySGCUbpx7pY7YmWVAIrhoBh8qbe-cOvKJVfk"},
{"content":{"body":"> <@littledan:matrix.org> well, yeah, so this would be good input to the module harmony group, if we don't like modules features anymore...\n\n`import source` is useful on the web!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, yeah, so this would be good input to the module harmony group, if we don&#39;t like modules features anymore...</blockquote></mx-reply><code>import source</code> is useful on the web!","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw"}},"msgtype":"m.text"},"ts":1712676808283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OMTaB0dd1fYdhRbzDZ9HsmLK54_bfNTi0i1xCHkU7ds"},
{"content":{"body":"so it's not \"module features\" in general, just those specific ones which aren't useful on the web","m.mentions":{},"msgtype":"m.text"},"ts":1712676825613,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$inc9qMlMoqEyCpZd3SxwFHOSJ4aaBXVrUyD_i6X85B0"},
{"content":{"body":"/me Taking over Chair responsibilities for a bit","msgtype":"m.text"},"ts":1712676851898,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Mk_kONBlWuWxBj7rl0yYF1D9wYC3nrtcwtYxF7wzEOg"},
{"content":{"body":"(possibly \"[...] aren't useful on the web _yet_\")","format":"org.matrix.custom.html","formatted_body":"(possibly \"[...] aren't useful on the web <em>yet</em>\")","m.mentions":{},"msgtype":"m.text"},"ts":1712676852251,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yzeJ4T9RXl9fLHnOltSKPeZ09OWZLwN3L0cZ9ScaEp4"},
{"content":{"body":"I think the Matrix results show that it's useful on the web *in practice*","format":"org.matrix.custom.html","formatted_body":"I think the Matrix results show that it's useful on the web <em>in practice</em>","m.mentions":{},"msgtype":"m.text"},"ts":1712676869614,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$H-h5IswQbRQchPYeHZkLsJ3pZ94s-vpeUI0rwZUpeUk"},
{"content":{"body":"It's a good thing that bundlers are aligned to TC39 and browsers in their syntax and semantics. It will be good for us to preserve that.","m.mentions":{},"msgtype":"m.text"},"ts":1712676893125,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WZBdu7tRE8428lplzTVAJ4SXnp_qmdMeh056KGK-U0M"},
{"content":{"body":"> <@rbuckton:matrix.org> bundler-related, but could `import defer` potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?\n\nyep. That's what we do at Bloomberg. We find the TLA at build time. And add a simplified module graph of which imports have TLA deps to our equivalent of 'package.json'","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>bundler-related, but could <code>import defer</code> potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?</blockquote></mx-reply>yep. That's what we do at Bloomberg. We find the TLA at build time. And add a simplified module graph of which imports have TLA deps to our equivalent of 'package.json'","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I"}},"msgtype":"m.text"},"ts":1712676907286,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$d-JTQB-9Ce-tktzgaJxF6C-zYKdgjwO6ECVk-DS9iuc"},
{"content":{"body":"IIUC the Matrix results show that it's useful on the web to have bundler-level syntax for this, but not that it's useful to have in browsers, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712676909814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2D8753OtdtVsh7bh4nM1fnm0N1gvy1H-By8x15gDT0o"},
{"content":{"body":"we've made tons of progress by actually building things into JS; the code splitting situation was a mess before import(), and it resulted in code splitting not occurring.","m.mentions":{},"msgtype":"m.text"},"ts":1712676922291,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WVILxyxshl-pjBGlK_mqKirIfpQCYSpXImtADC9aQ3M"},
{"content":{"body":"I am not proposing \"give up on this\"; I am proposing \"have a path to standardize bundler-level syntax that isn't actually in browsers\"","m.mentions":{},"msgtype":"m.text"},"ts":1712676930794,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NimOpvoFbLB5Rg8Rod_w6rOgbdj3cylZj2qkapDu4Dw"},
{"content":{"body":"TC39 is the JavaScript standards committee--our role is to find this common syntax","m.mentions":{},"msgtype":"m.text"},"ts":1712676940746,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k7-6lw41cp5qrtzwlX1J8sokUiYeOas5EKE00JXoqb0"},
{"content":{"body":"once we find common syntax, it's OK if some implementations fall behind and don't implement everything, but it'd be a big cost to split the language in two","m.mentions":{},"msgtype":"m.text"},"ts":1712676987193,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q3M5ccKZ0s2IpI8R-v5LvVPRuS852KhFtePkWhDWoMw"},
{"content":{"body":"my response is the thing Shu is saying out loud right now","m.mentions":{},"msgtype":"m.text"},"ts":1712676993100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1hXnjxF4CfaK9xAwMS6AAUw_D8Q4FgNc9tpEy4wOUdU"},
{"content":{"body":"we should have this as an actual agenda item; that'd make it easier to discuss","m.mentions":{},"msgtype":"m.text"},"ts":1712677014555,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zng6mqTnv9LaNzx9PKcL1kGfgkvhVx3C7SzrEzwdOvk"},
{"content":{"body":"IMO Stage 3 serves this purpose of \"it's in tools and not necessarily in browsers\". Maybe we just want to leave things in Stage 3 for longer.","m.mentions":{},"msgtype":"m.text"},"ts":1712677145549,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kyvo4m-W-C3-rtnmk5fx9eYc9mIbnGbXDOl7EMKkMx0"},
{"content":{"body":"fwiw eslint refuses to implement features prior to stage 4, though that's maybe a them problem","m.mentions":{},"msgtype":"m.text"},"ts":1712677176712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0"},
{"content":{"body":"stage 3 is when it gets shipped in browsers tho","m.mentions":{},"msgtype":"m.text"},"ts":1712677267294,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U"},
{"content":{"body":" * stage 3 is when it gets shipped in (most) browsers tho","m.mentions":{},"m.new_content":{"body":"stage 3 is when it gets shipped in (most) browsers tho","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677270342,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0f1bjzMnEkJ0YFQ-dHtCFU4KzgImT0XBXOAVMqGPeXQ"},
{"content":{"body":"John-David Dalton: why is it disingenuous? this is arguably _better_ handled by tools. tools have a different view (they can see the whole app) and optimization opportunities than a VM","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@johndaviddalton:matrix.org\">John-David Dalton</a>: why is it disingenuous? this is arguably <em>better</em> handled by tools. tools have a different view (they can see the whole app) and optimization opportunities than a VM","m.mentions":{"user_ids":["@johndaviddalton:matrix.org"]},"msgtype":"m.text"},"ts":1712677368786,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GSM0JKy3xYXnMEx1wdQ84-ujTBOCdCY6ey_OkFQwJLc"},
{"content":{"body":"we designed a super static module system. it is not surprising to me that it has been leveraged to success with ahead-of-time tooling","m.mentions":{},"msgtype":"m.text"},"ts":1712677394638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CS9FR_UkrdBrY_TcOCOJJozO_7hM4cKQZU-JL9baMEc"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw eslint refuses to implement features prior to stage 4, though that's maybe a them problem\n\nwell, there's babel-eslint","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw eslint refuses to implement features prior to stage 4, though that&#39;s maybe a them problem</blockquote></mx-reply>well, there's babel-eslint","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0"}},"msgtype":"m.text"},"ts":1712677450049,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0sMgkfToSzFialgx5vTlLBEJ4vRX-BmAeO3J19BJULo"},
{"content":{"body":"(`@babel/eslint-parser` as of babel 7)","format":"org.matrix.custom.html","formatted_body":"(<code>@babel/eslint-parser</code> as of babel 7)","m.mentions":{},"msgtype":"m.text"},"ts":1712677583828,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ivILtKJFOYKXUfGtSJJovb44MHLHhS1P4d6L8cKlqe4"},
{"content":{"body":"> <@ljharb:matrix.org> stage 3 is when it gets shipped in (most) browsers tho\n\nIMO browsers *should* ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>stage 3 is when it gets shipped in (most) browsers tho</blockquote></mx-reply>IMO browsers <em>should</em> ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U"}},"msgtype":"m.text"},"ts":1712677623198,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dyun70cErmcjvhSvMUjeEptqXENvi2tHHrWCjL_kpe0"},
{"content":{"body":"> <@ljharb:matrix.org> stage 3 is when it gets shipped in (most) browsers tho\n\n * I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>stage 3 is when it gets shipped in (most) browsers tho</blockquote></mx-reply> * I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{},"m.new_content":{"body":"I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dyun70cErmcjvhSvMUjeEptqXENvi2tHHrWCjL_kpe0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677642696,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ix5BVk32WLQLUKLPeB8Ads_5tRiXb0EbmlnWDqRdYqo"},
{"content":{"body":"3 is a pretty clear signal, that's the big purpose of 2.7. i agree it wouldn't require holding back 2.7","m.mentions":{},"msgtype":"m.text"},"ts":1712677653695,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$No9tNtoSZRC6fCsyIwy4vONhjI-KfKsagTQj9s6yrok"},
{"content":{"body":"so is this feature going to encourage the dreaded \"barrel\" module pattern?","msgtype":"m.text"},"ts":1712677703429,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"},
{"content":{"body":"> <@michaelficarra:matrix.org> so is this feature going to encourage the dreaded \"barrel\" module pattern?\n\nit's about optimizing the feature--no encouragement is needed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so is this feature going to encourage the dreaded &quot;barrel&quot; module pattern?</blockquote></mx-reply>it's about optimizing the feature--no encouragement is needed","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"}},"msgtype":"m.text"},"ts":1712677716398,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo"},
{"content":{"body":"While that's technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don't want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.","m.mentions":{},"msgtype":"m.text"},"ts":1712677724114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE"},
{"content":{"body":"agree","m.mentions":{},"msgtype":"m.text"},"ts":1712677744020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EBAdkBHequnnq-sgBfkhGi-hdV80BYaR1WYhiAHNGg4"},
{"content":{"body":"the two design spaces are honestly different","m.mentions":{},"msgtype":"m.text"},"ts":1712677749469,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HT50Tp1qWRB1Rqti1xeQhG0_s-WfVDswbMAO24k5oi8"},
{"content":{"body":"the constraints are different","m.mentions":{},"msgtype":"m.text"},"ts":1712677754285,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CZClTpEwQuHofjTOPwrzP_ecKoKjyYwjxF_1m5pmf08"},
{"content":{"body":"> <@michaelficarra:matrix.org> so is this feature going to encourage the dreaded \"barrel\" module pattern?\n\noof, i hadn't thought about that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so is this feature going to encourage the dreaded &quot;barrel&quot; module pattern?</blockquote></mx-reply>oof, i hadn't thought about that.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"}},"msgtype":"m.text"},"ts":1712677757420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bsJLErGFwJ-58ZBAUljglKetk-HIXActc3k7UFAfR5E"},
{"content":{"body":"> <@bakkot:matrix.org> While that's technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don't want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.\n\nah OK well I'm happy to get browser commitments like that; I don't want to discourage that. I haven't thought this through enough.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>While that&#39;s technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don&#39;t want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.</blockquote></mx-reply>ah OK well I'm happy to get browser commitments like that; I don't want to discourage that. I haven't thought this through enough.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE"}},"msgtype":"m.text"},"ts":1712677769454,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CxM9vbFWghDv5A5Qm_gw2PJWGuLl6lWf6an4GVreXU"},
{"content":{"body":"> <@littledan:matrix.org> it's about optimizing the feature--no encouragement is needed\n\nwell it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />it's about optimizing the feature--no encouragement is needed</blockquote></mx-reply>well it doesn&#39;t provide any benefit to those not using the pattern, so it seems like encouragement to use it","m.relates_to":{"m.in_reply_to":{"event_id":"$mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo"}},"msgtype":"m.text"},"ts":1712677794372,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo"},
{"content":{"body":"littledan: i have been thinking about for most of this year, i'll give you something more thought out soon","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: i have been thinking about for most of this year, i'll give you something more thought out soon","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1712677806567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MwGjI--nt2ep9340N7mnRkjEORFmjLhXbBooTA4UHA4"},
{"content":{"body":"> <@michaelficarra:matrix.org> well it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it\n\nI think you're overthinking it... there's a lot of existing usages of this pattern, and it's slow, and it is hard to migrate away from (a lot of effort has gone into this migration)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>well it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it</blockquote></mx-reply>I think you're overthinking it... there's a lot of existing usages of this pattern, and it's slow, and it is hard to migrate away from (a lot of effort has gone into this migration)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo"}},"msgtype":"m.text"},"ts":1712677865282,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$epwTbyKh2CX26o_OBcuZcVnmIPwMn70W5gODBTszlZ0"},
{"content":{"body":"it's not about newly incentivizing usage","m.mentions":{},"msgtype":"m.text"},"ts":1712677880789,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ErpsEKBXr8Y27U4iQ2wL1_qdXMnfRF-Lr5koSdQHBek"},
{"content":{"body":"so someone who wants to get similar tree-shakeability can just dump this pattern?","msgtype":"m.text"},"ts":1712677914139,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k"},
{"content":{"body":"> <@michaelficarra:matrix.org> so someone who wants to get similar tree-shakeability can just dump this pattern?\n\nsure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this pattern in your dependency tree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so someone who wants to get similar tree-shakeability can just dump this pattern?</blockquote></mx-reply>sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this pattern in your dependency tree","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k"}},"msgtype":"m.text"},"ts":1712677944635,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jGNauoRZPncesEiWilyu4lqTLmATLBv79XIv4xwF-HI"},
{"content":{"body":"> <@michaelficarra:matrix.org> so someone who wants to get similar tree-shakeability can just dump this pattern?\n\n * sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so someone who wants to get similar tree-shakeability can just dump this pattern?</blockquote></mx-reply> * sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","m.mentions":{},"m.new_content":{"body":"sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","format":"org.matrix.custom.html","formatted_body":"sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jGNauoRZPncesEiWilyu4lqTLmATLBv79XIv4xwF-HI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677964025,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PdUI1AUMLdoC_NeNX1_XbpPBY9ysO_B_bzBtkrWMXDI"},
{"content":{"body":"there's a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw","m.mentions":{},"msgtype":"m.text"},"ts":1712677979639,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY"},
{"content":{"body":"(coinbase's RN app's binary size dropped 71% when we banned barrel exports)","m.mentions":{},"msgtype":"m.text"},"ts":1712677998876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OyT8s2zYReI_tvZK1dXwHf5EhNaGU4qXr4zH2hYURrY"},
{"content":{"body":" * (coinbase's RN app's binary size dropped 71% when we/they banned barrel exports back in 2021)","m.mentions":{},"m.new_content":{"body":"(coinbase's RN app's binary size dropped 71% when we/they banned barrel exports back in 2021)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OyT8s2zYReI_tvZK1dXwHf5EhNaGU4qXr4zH2hYURrY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678020499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MAW8-hfQgb50UkNrkn33-DsJfMLjP-nRuSpruG-N_88"},
{"content":{"body":"> <@ljharb:matrix.org> there's a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw\n\nyes, they're doing good work; I think those two groups (the ecosystem effort and this proposal) should be understood to be supporting each other","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>there&#39;s a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw</blockquote></mx-reply>yes, they're doing good work; I think those two groups (the ecosystem effort and this proposal) should be understood to be supporting each other","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY"}},"msgtype":"m.text"},"ts":1712678032538,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6m5VOtm9tk7NHBK7nnq_qOSJnb5_td4illZppI-4esA"},
{"content":{"body":"even with import defer, barrel exports will still result in a larger app than \"just import what you need directly\", no?","m.mentions":{},"msgtype":"m.text"},"ts":1712678082621,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o3tvUNPiarvyM0CuYbFHzltO-ts2Qz7HzU8IabmtQ1E"},
{"content":{"body":"I don't think \"this feature is not useful in browsers\" is a new category of objection?","m.mentions":{},"msgtype":"m.text"},"ts":1712678093357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RHzHyUehCv90c3cTfgcy0WGviDc5dEwteK3HoH_ns1M"},
{"content":{"body":"that's like... the main objection","m.mentions":{},"msgtype":"m.text"},"ts":1712678097161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I"},
{"content":{"body":"can someone remind me why people ever did that in the first place?","msgtype":"m.text"},"ts":1712678103284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA"},
{"content":{"body":"i don't know why people tend to like \"god objects\"","m.mentions":{},"msgtype":"m.text"},"ts":1712678123889,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M"},
{"content":{"body":" * i don't know why people tend to like \"god objects\", deep imports is The Way","m.mentions":{},"m.new_content":{"body":"i don't know why people tend to like \"god objects\", deep imports is The Way","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678144526,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6anb0Bd_LUs9weE5KaHAi0H3yIJb4OVifiGLnElmlRY"},
{"content":{"body":" * i don't know why people tend to like \"god objects\", deep imports is The Way. but they do tend to like them.","m.mentions":{},"m.new_content":{"body":"i don't know why people tend to like \"god objects\", deep imports is The Way. but they do tend to like them.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678153557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jhUCNTXYGT24Px4MWB_J1_IjRkx9j8azNTr5Wn5YGac"},
{"content":{"body":"maybe the pattern was copied from python modules and `__init__.py`?","format":"org.matrix.custom.html","formatted_body":"maybe the pattern was copied from python modules and <code>__init__.py</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712678162865,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$b4AofASjzIxDyg0wiTcKCV8yL2rQsD1GKLqnfF-Ffv0"},
{"content":{"body":"> <@michaelficarra:matrix.org> can someone remind me why people ever did that in the first place?\n\nI always understood it to be a response to named exports being a thing, making use of that syntactic space, whereas require returning a single function was more natural","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>can someone remind me why people ever did that in the first place?</blockquote></mx-reply>I always understood it to be a response to named exports being a thing, making use of that syntactic space, whereas require returning a single function was more natural","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA"}},"msgtype":"m.text"},"ts":1712678168294,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Nalk3JEPlNkfv3V2FDu1kukklKZJl2plbzICTSNYATY"},
{"content":{"body":"i've seen people have a visceral preference for one `import` keyword that has N identifiers, instead of N `import` keywords","format":"org.matrix.custom.html","formatted_body":"i've seen people have a visceral preference for one <code>import</code> keyword that has N identifiers, instead of N <code>import</code> keywords","m.mentions":{},"msgtype":"m.text"},"ts":1712678176208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lDqebJSFlc-ftiByyPNto437msQpvHXxll_aX3OdsPE"},
{"content":{"body":"> <@bakkot:matrix.org> that's like... the main objection\n\nyeah i feel like most of our concerns that have caused feature compromises and redesigns boil down to this. sometimes it's couched in more specific terms, like \"performance footgun\" etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that&#39;s like... the main objection</blockquote></mx-reply>yeah i feel like most of our concerns that have caused feature compromises and redesigns boil down to this. sometimes it's couched in more specific terms, like \"performance footgun\" etc","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I"}},"msgtype":"m.text"},"ts":1712678204865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2lH3N4Mu0VDYuLfnEruNQWxdYqzM0k0NbsCiZTB3IEw"},
{"content":{"body":"I'm finding it very hard to find sympathy for these people...","msgtype":"m.text"},"ts":1712678219201,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc"},
{"content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports","m.mentions":{},"msgtype":"m.text"},"ts":1712678220961,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE"},
{"content":{"body":" * also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason)","m.mentions":{},"m.new_content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678226477,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z2iHIRKkP7aNrKKdTEgrzf839tRPYB4L-iaQ93QQd80"},
{"content":{"body":" * also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason) which drove increased usage of named exports","m.mentions":{},"m.new_content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason) which drove increased usage of named exports","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678235173,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$opCnGfh0HdDBwPlRenjuuqrYM_pbWK8Tt0trSYJetWI"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'm finding it very hard to find sympathy for these people...\n\nwhy does it matter whose fault this is? it's currently a performance issue, and this is a solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I&#39;m finding it very hard to find sympathy for these people...</blockquote></mx-reply>why does it matter whose fault this is? it's currently a performance issue, and this is a solution.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc"}},"msgtype":"m.text"},"ts":1712678246804,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QrTbRFI5m4xCik94Kil7x9lhYwdRN3dsa7U7na6Dpww"},
{"content":{"body":"but is \"don't use barrel files\" perhaps a better solution?","m.mentions":{},"msgtype":"m.text"},"ts":1712678281118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-6h1qI6tQWzwjHb8exCgMkb6L6Gckg-2oMIK6r2NSYc"},
{"content":{"body":" * but is \"don't use barrel files\" perhaps a better solution? (genuine question)","m.mentions":{},"m.new_content":{"body":"but is \"don't use barrel files\" perhaps a better solution? (genuine question)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-6h1qI6tQWzwjHb8exCgMkb6L6Gckg-2oMIK6r2NSYc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678288095,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mNEbWIpEpX9I4fW5WLdT3ze5-SwJ06OWG1Taq-vl6wQ"},
{"content":{"body":"Barrels are so convenient, and so awful for performance (both browsers and bundlers)","msgtype":"m.text"},"ts":1712678333606,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA"},
{"content":{"body":"I dunno, there's a lot of recommendations about performance that people aren't taking up...","m.mentions":{},"msgtype":"m.text"},"ts":1712678336043,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xw09WNjxRO7ThZXrf8CV8vImnU3gP4933Kn6hWW8WcE"},
{"content":{"body":"@guybedford:matrix.org Your mic is echoing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40guybedford%3Amatrix.org\">@guybedford</a> Your mic is echoing","msgtype":"m.text"},"ts":1712678364498,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Wgjbz0vemgjE9nsY4iCCoee2Nx_HcVyLf7kanAXUSN0"},
{"content":{"body":"but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free","m.mentions":{},"msgtype":"m.text"},"ts":1712678387003,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"},
{"content":{"body":"sorry guybedford bad timing","format":"org.matrix.custom.html","formatted_body":"sorry <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> bad timing","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1712678399606,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$-88KpEaVYzwhWqA36Trig96Zvu45uTBpMkfAK0Gl8UQ"},
{"content":{"body":"Timebox!","msgtype":"m.text"},"ts":1712678406237,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IhgzEVCqhXtu0pg9jebqKlvEFzzhTKhUdKXdVR2Yv2A"},
{"content":{"body":"and if the people in question were willing to do work to get performance they already can already do so, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712678409827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OgP8oKyg8EZsBQdWCy1cpKIqqVzGLEV44ko1EwYs-BQ"},
{"content":{"body":"@nicolo-ribaudo:matrix.org your async feedback from me is that, for now, I'm unconvinced by the motivation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo</a> your async feedback from me is that, for now, I&#39;m unconvinced by the motivation","msgtype":"m.text"},"ts":1712678473988,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fNaO0HlMWmKTZrY2mZBcQnuWhktLg2SL89z1lp7jBm4"},
{"content":{"body":"> <@jridgewell:matrix.org> Barrels are so convenient, and so awful for performance (both browsers and bundlers)\n\nconvenience often makes for better paving than good intentions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Barrels are so convenient, and so awful for performance (both browsers and bundlers)</blockquote></mx-reply>convenience often makes for better paving than good intentions","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA"}},"msgtype":"m.text"},"ts":1712678490332,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pOFBqyWH4rD1SgZtobFUk9Y2tQGMzWVJR7HV959AnEU"},
{"content":{"body":"> <@bakkot:matrix.org> but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free\n\nThe uptake is a \"semver-minor\" change--it doesn't require that importers update","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but wouldn&#39;t this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn&#39;t just give you performance for free</blockquote></mx-reply>The uptake is a \"semver-minor\" change--it doesn't require that importers update","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"}},"msgtype":"m.text"},"ts":1712678508748,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B2NMcJeNEoOnLJ4s2_KQ3jyJ8yTGm2yJHHlOc5L94Fs"},
{"content":{"body":"> <@jridgewell:matrix.org> Barrels are so convenient, and so awful for performance (both browsers and bundlers)\n\n * convenience often makes for better road-paving than good intentions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Barrels are so convenient, and so awful for performance (both browsers and bundlers)</blockquote></mx-reply> * convenience often makes for better road-paving than good intentions","m.mentions":{},"m.new_content":{"body":"convenience often makes for better road-paving than good intentions","format":"org.matrix.custom.html","formatted_body":"convenience often makes for better road-paving than good intentions","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pOFBqyWH4rD1SgZtobFUk9Y2tQGMzWVJR7HV959AnEU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678529563,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y2ViRmx8U4ibeMdeYxLtIMQBXE-WD2kWCteNyI0MPG0"},
{"content":{"body":"so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to `import defer` to avoid the education problem?","format":"org.matrix.custom.html","formatted_body":"so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to <code>import defer</code> to avoid the education problem?","m.mentions":{},"msgtype":"m.text"},"ts":1712678584365,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8"},
{"content":{"body":"education's super hard so maybe that's the right tradeoff to make, tbf","m.mentions":{},"msgtype":"m.text"},"ts":1712678621791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GJYEMEhopzkny7dO-CMNbFT63G9ONuefW2oQSQ00lN4"},
{"content":{"body":"> <@bakkot:matrix.org> but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free\n\nIt moves the changes from the consumers to the library itself","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but wouldn&#39;t this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn&#39;t just give you performance for free</blockquote></mx-reply>It moves the changes from the consumers to the library itself","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"}},"msgtype":"m.text"},"ts":1712679002762,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W2cFJCnZJOddIuNQ-il82P63s82zgfPXpcTDUI6QSj4"},
{"content":{"body":"So 1 instead of N","m.mentions":{},"msgtype":"m.text"},"ts":1712679008224,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AugGXYPf1dfK6Fft5Sgx2pNwSZSaVmK6JTskzocph9o"},
{"content":{"body":"> <@ljharb:matrix.org> so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to `import defer` to avoid the education problem?\n\nThere is currently a choice to make between convenience and performance, and the goal here is to not make them exclusive","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to <code>import defer</code> to avoid the education problem?</blockquote></mx-reply>There is currently a choice to make between convenience and performance, and the goal here is to not make them exclusive","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8"}},"msgtype":"m.text"},"ts":1712679047173,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-PRh4LRmkaga7emVlGXIy3vQ0WuqkrsqZtULQmlihOk"},
{"content":{"body":"does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place?","format":"org.matrix.custom.html","formatted_body":"does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place?","m.mentions":{},"msgtype":"m.text"},"ts":1712680987539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs"},
{"content":{"body":" * does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","format":"org.matrix.custom.html","formatted_body":" * does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","m.mentions":{},"m.new_content":{"body":"does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","format":"org.matrix.custom.html","formatted_body":"does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681011739,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PWnAJmTKhhcWktcGaLCTNZ6FtT9kuODHrS1dQWqWsmA"},
{"content":{"body":"in a language without so many hidden effects all over the place, it would be","msgtype":"m.text"},"ts":1712681165602,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8V08tVTXAU68b-XLnLfDW5lJMGV8uAuMbTPRwrHYC9A"},
{"content":{"body":"> <@ljharb:matrix.org> does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.\n\nSorry no, it's `export defer`/`export optional` that helps with barrel files","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.</blockquote></mx-reply>Sorry no, it's <code>export defer</code>/<code>export optional</code> that helps with barrel files","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs"}},"msgtype":"m.text"},"ts":1712681365896,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rzKTPePHNs7p60wKMMAHyp1zlx3FBVysoolqoWZjUNk"},
{"content":{"body":"And `export defer` would have the same result as using deep imports","format":"org.matrix.custom.html","formatted_body":"And <code>export defer</code> would have the same result as using deep imports","m.mentions":{},"msgtype":"m.text"},"ts":1712681390264,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aDInC4Zma2KvKoSa1Sm1MWqBTCmLqk6oPBJ8b8W2F9o"},
{"content":{"body":"ok, so that's a compelling argument in favor of that one","msgtype":"m.text"},"ts":1712681402350,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZXNkgpCLwI_gAYQWUTB-8_3jI4CR9eBGx4_Jsgg2TQ4"},
{"content":{"body":"so `import defer` would be to lessen the downside of importing a barrel file that did not use `export defer`?","format":"org.matrix.custom.html","formatted_body":"so <code>import defer</code> would be to lessen the downside of importing a barrel file that did not use <code>export defer</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712681494893,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0"},
{"content":{"body":"And the boundary is still at the `export defer` level, so if you do\n```js\n// main.js\nimport { x } from \"library;\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library;\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712681524637,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE"},
{"content":{"body":" * And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":" * <p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"m.new_content":{"body":"And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681529264,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6Gare2sBR0omQYXi8_WPaCmGD1-KuOiYf4W7esV1yL8"},
{"content":{"body":" * And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load/run the code for `const y = 2` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":" * <p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load/run the code for <code>const y = 2</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"m.new_content":{"body":"And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load/run the code for `const y = 2` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load/run the code for <code>const y = 2</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681559112,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kdPj-3-OLndx4sfVZCFuFeEM4aDY44gZT8aKYdqobhY"},
{"content":{"body":"Exactly like deep imports","m.mentions":{},"msgtype":"m.text"},"ts":1712681575016,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$v8DNOz8bjuerX3NdHR8CwonhhG5LpUk8sja3VNNFxww"},
{"content":{"body":"> <@ljharb:matrix.org> so `import defer` would be to lessen the downside of importing a barrel file that did not use `export defer`?\n\n`import defer` is not really related to barrel file","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so <code>import defer</code> would be to lessen the downside of importing a barrel file that did not use <code>export defer</code>?</blockquote></mx-reply><code>import defer</code> is not really related to barrel file","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0"}},"msgtype":"m.text"},"ts":1712681594206,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0eItVWsD34OjIEmyDNMo5pKwSyaqkthxApo9-GHMZ-I"},
{"content":{"body":"It's in general for \"big modules subgraphs\"","m.mentions":{},"msgtype":"m.text"},"ts":1712681608915,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wZzD803LLdU8ExFxFIUVsgzsclC5KV4J1d7fK0F3yjg"},
{"content":{"body":"Even if you have a file with a single export but many dependencies, `import defer` is useful there","format":"org.matrix.custom.html","formatted_body":"Even if you have a file with a single export but many dependencies, <code>import defer</code> is useful there","m.mentions":{},"msgtype":"m.text"},"ts":1712681620275,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jmhhkkE24was34ngvjKHPLaUtB9I-ttDbbfXQ4kPibM"},
{"content":{"body":"One thing that's important to understand is, the barrel file stuff doesn't relate to the motivation for `import defer`--they solve for totally unrelated issues, just both about loading less code","format":"org.matrix.custom.html","formatted_body":"One thing that's important to understand is, the barrel file stuff doesn't relate to the motivation for <code>import defer</code>--they solve for totally unrelated issues, just both about loading less code","m.mentions":{},"msgtype":"m.text"},"ts":1712681640084,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SGkfKWZIzmL92D43z2heEJcKlW_-c-DyQ7d-dPbQbW8"},
{"content":{"body":"Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.","m.mentions":{},"msgtype":"m.text"},"ts":1712682886864,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q9jGEc0t_N3oCkMCVvuQz2Z7YDMkUH1wcyRgfiKyIjM"},
{"content":{"body":"I agree with Kevin that this isn't especially confusing","msgtype":"m.text"},"ts":1712682998985,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mb_Hv4K8w9tPm91dhgzok9zHj8ScI4fpncD92rtH8yc"},
{"content":{"body":" * <del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","format":"org.matrix.custom.html","formatted_body":" * <del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","m.mentions":{},"m.new_content":{"body":"<del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","format":"org.matrix.custom.html","formatted_body":"<del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Q9jGEc0t_N3oCkMCVvuQz2Z7YDMkUH1wcyRgfiKyIjM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683077970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rVEblExXVliNhaCgHk7tY8a1sMhEVkzhoBtoudHE5qc"},
{"content":{"body":"is there maybe justification to have this produce its own iterator subclass that can have optimised helpers implemented on it?","msgtype":"m.text"},"ts":1712683086226,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4wy4L73RjHXPF9RuMmmvFesw64U0YchiZAQX-G5E4Hw"},
{"content":{"body":"like `.drop(1e300)` could be implemented very efficiently for this special iterator","format":"org.matrix.custom.html","formatted_body":"like <code data-md=\"`\">.drop(1e300)</code> could be implemented very efficiently for this special iterator","msgtype":"m.text"},"ts":1712683113888,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lNC1YqwRbHNHGHDsYMxTpB7oRqAcVljc_KhGPxt30PM"},
{"content":{"body":"I think `drop` and `take` are the only things which could have better implementations and I don't think it's worth doing just for those","format":"org.matrix.custom.html","formatted_body":"I think <code>drop</code> and <code>take</code> are the only things which could have better implementations and I don't think it's worth doing just for those","m.mentions":{},"msgtype":"m.text"},"ts":1712683147346,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uY-xA-ptgIbQkUZ-6yZqEBBEY_TNbCa8y-TIxrGy7RU"},
{"content":{"body":"and engines could do this optimization anyway","m.mentions":{},"msgtype":"m.text"},"ts":1712683178502,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AAA_RMMFxvWTwPP41jlWZ_YMNk9--uU3WizRmv0ijrc"},
{"content":{"body":"The original proposal includes `BigInt.range()`, don't remember why it is added in first place","format":"org.matrix.custom.html","formatted_body":"The original proposal includes <code>BigInt.range()</code>, don't remember why it is added in first place","m.mentions":{},"msgtype":"m.text"},"ts":1712683216703,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$DR2Q4zXTOhZ18dq-XA_S2sDRKB-_uNe3llfrxNE91N0"},
{"content":{"body":"I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.","format":"org.matrix.custom.html","formatted_body":"I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.","m.mentions":{},"msgtype":"m.text"},"ts":1712683225275,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\nseems a valid use case :P","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>seems a valid use case :P","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683270762,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$0eJDAblxcLh77RGAs9vOunYy_9QrBLDZZT8SX-pO2yg"},
{"content":{"body":"to waldemar's point, yes, there are some editorial bugs, but nothing that's not fixable","msgtype":"m.text"},"ts":1712683271214,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ED1Ij2aeWgQwd6nGqbneMgyVIL3cMjo59Tkitl1mNZI"},
{"content":{"body":"it hasn't passed editorial review yet","msgtype":"m.text"},"ts":1712683281391,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$71VDXLi2FvNfgX5tR4Wv-G8RwFiqc1ivakb_APTw3so"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\noh yeah?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>oh yeah?","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683295623,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wamyGQRqBFYDf5ZnjNMj0xXbJyd-vDL9NdEIm201oNg"},
{"content":{"body":"like, give me monotonic ids starting with <large number> or something?","m.mentions":{},"msgtype":"m.text"},"ts":1712683316277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I"},
{"content":{"body":"i have no bigint range use cases, but \"works for one kind of numeric primitive and not the others\" seems like a big problem","m.mentions":{},"msgtype":"m.text"},"ts":1712683339093,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, give me monotonic ids starting with <large number> or something?\n\nyes, something like that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like, give me monotonic ids starting with &lt;large number&gt; or something?</blockquote></mx-reply>yes, something like that","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I"}},"msgtype":"m.text"},"ts":1712683375359,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$VfxOjRXbZ0RLvWSIqHLHceTFpmxqxha1gcNmQH5P4rI"},
{"content":{"body":"Are bigints still massively slower than numbers?","msgtype":"m.text"},"ts":1712683408592,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c"},
{"content":{"body":"I'd prefer it work for bigint just so I'm not having to coerce using `BigInt()` when I need to do math with other bigints.","format":"org.matrix.custom.html","formatted_body":"I'd prefer it work for bigint just so I'm not having to coerce using <code>BigInt()</code> when I need to do math with other bigints.","m.mentions":{},"msgtype":"m.text"},"ts":1712683411141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sAZyTdIHJ1pe3YDEFbU5IuqrtxkJgSLsRFLZg2gnUsY"},
{"content":{"body":"> <@ljharb:matrix.org> i have no bigint range use cases, but \"works for one kind of numeric primitive and not the others\" seems like a big problem\n\nwhy is that a big problem?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i have no bigint range use cases, but &quot;works for one kind of numeric primitive and not the others&quot; seems like a big problem</blockquote></mx-reply>why is that a big problem?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso"}},"msgtype":"m.text"},"ts":1712683411609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HHaixvtJhqNGxB9OIG1Uqi2BgIkvjs2QQVM-Kar89l8"},
{"content":{"body":"> <@jridgewell:matrix.org> Are bigints still massively slower than numbers?\n\nhaha yes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Are bigints still massively slower than numbers?</blockquote></mx-reply>haha yes","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c"}},"msgtype":"m.text"},"ts":1712683416139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V2MezzezA6QanmX3dPmHrNgWxXi1oDH29I2nuqkC3zc"},
{"content":{"body":"Mathieu Hofman: can you add yourself to the notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: can you add yourself to the notes?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1712683431728,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$bZmzny1Zp7T9a1oT6t0RE05qdsR8hkZuwwteb0v5IFM"},
{"content":{"body":"it's an inconsistency. one of those warts we'd inevitably have to make a \"fill in the table\" proposal for in a few years.","m.mentions":{},"msgtype":"m.text"},"ts":1712683437368,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk"},
{"content":{"body":"Timestamps in microseconds as a use case?","msgtype":"m.text"},"ts":1712683439128,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI"},
{"content":{"body":"it's fine if we want to wait for that, but is there a reason why it's beneficial to defer it?","m.mentions":{},"msgtype":"m.text"},"ts":1712683466548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ACQ6CdYz8mXg4eHBfUypA2mpKOD4bY0--m5KKSLwpNs"},
{"content":{"body":"> <@ljharb:matrix.org> it's an inconsistency. one of those warts we'd inevitably have to make a \"fill in the table\" proposal for in a few years.\n\nnot everyone shares that goal though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it&#39;s an inconsistency. one of those warts we&#39;d inevitably have to make a &quot;fill in the table&quot; proposal for in a few years.</blockquote></mx-reply>not everyone shares that goal though","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk"}},"msgtype":"m.text"},"ts":1712683468683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M1x6CSZom0qXWUst48KCdBittPPUlIPwxL1zSYzCWQ4"},
{"content":{"body":"that is true of most of the goals we all have :-)","m.mentions":{},"msgtype":"m.text"},"ts":1712683493581,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cNTwxiCi4OFpirk-iKHTLX_7Zn_nheljSEi4gYY5J-o"},
{"content":{"body":"right, which is why i pushed back on \"seems like a big problem\"","m.mentions":{},"msgtype":"m.text"},"ts":1712683509283,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s3amtzg8ogxp_0n25oFT0EXi417Uv640IDhyUuefHsM"},
{"content":{"body":"it's not that inconsistent - the Math methods do not and never will take Numbers","m.mentions":{},"msgtype":"m.text"},"ts":1712683519072,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0imADxQO4sM-3sryMj_p0i4DRYMilAUis-vM-rDmQyE"},
{"content":{"body":" * it's not that inconsistent - the Math methods do not and never will take BigInts","m.mentions":{},"m.new_content":{"body":"it's not that inconsistent - the Math methods do not and never will take BigInts","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0imADxQO4sM-3sryMj_p0i4DRYMilAUis-vM-rDmQyE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683523971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h_Dau6XkM-cVT0LhbPzsUYONLSgzbBr9USMEPzSUeQA"},
{"content":{"body":"in any case i was given a concrete use case i found plausible","m.mentions":{},"msgtype":"m.text"},"ts":1712683535052,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V8QvOHAxAePLy2Qw22Z9ythsREUNfaBQiw9WaYEAbIo"},
{"content":{"body":"in fact I don't think we have _anything_ that takes only Number of BigInt?","format":"org.matrix.custom.html","formatted_body":"in fact I don't think we have <em>anything</em> that takes only Number of BigInt?","m.mentions":{},"msgtype":"m.text"},"ts":1712683538744,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kCFc46ZRi_ZlpZV2BO_h3OtY4DIlFPTUWxFZsxFSPmE"},
{"content":{"body":"so i'm happy with bigints being accepted here","m.mentions":{},"msgtype":"m.text"},"ts":1712683539682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0QKw4YmC07u5B3tdW7LrQoq9F31XYZnZTBkloVc0N2I"},
{"content":{"body":"but yeah I also prefer accepting BigInt here","m.mentions":{},"msgtype":"m.text"},"ts":1712683553572,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uLWei4JxDEObJK1NnVGJp8g8ffShAY81qDyvN-0QFEA"},
{"content":{"body":"> <@eemeli:mozilla.org> Timestamps in microseconds as a use case?\n\nI think the idea was to introduce Temporal.Instant ranges for this use case in the future","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>Timestamps in microseconds as a use case?</blockquote></mx-reply>I think the idea was to introduce Temporal.Instant ranges for this use case in the future","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI"}},"msgtype":"m.text"},"ts":1712683573522,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc"},
{"content":{"body":"> <@pchimento:igalia.com> I think the idea was to introduce Temporal.Instant ranges for this use case in the future\n\nMaybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I think the idea was to introduce Temporal.Instant ranges for this use case in the future</blockquote></mx-reply>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway","m.mentions":{"user_ids":["@pchimento:igalia.com","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc"}},"msgtype":"m.text"},"ts":1712683690892,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8"},
{"content":{"body":"> <@pchimento:igalia.com> I think the idea was to introduce Temporal.Instant ranges for this use case in the future\n\n * Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I think the idea was to introduce Temporal.Instant ranges for this use case in the future</blockquote></mx-reply> * Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?","m.mentions":{},"m.new_content":{"body":"Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?","format":"org.matrix.custom.html","formatted_body":"Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?","m.mentions":{"user_ids":["@pchimento:igalia.com","@eemeli:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683695922,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$klczD-uAXFSBSECJTlL-cfuSKeWy5KwjFc5gionHwuY"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\ncan you explain this use case more? I think unique id should be something like crypto.getRandomUUID()","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>can you explain this use case more? I think unique id should be something like crypto.getRandomUUID()","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683721761,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FwIaNQBVRgKR_j1PmH_9f30-DQ7ERuPL-xp-hH6uoVI"},
{"content":{"body":"might not need to be unique","m.mentions":{},"msgtype":"m.text"},"ts":1712683757689,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VYM1aB08gyvy0z367hQyZrJPvsW0P96wmOka3ujJLNA"},
{"content":{"body":"also autoincrementing is fine sometimes, not everything has the german tank problem","m.mentions":{},"msgtype":"m.text"},"ts":1712683776590,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OOlprLQszh3Q7tfXQec383eKPafjGEtBP7xApSb8hr8"},
{"content":{"body":"Python bans floats in range() right?","m.mentions":{},"msgtype":"m.text"},"ts":1712683800346,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$j9Hf_xL8P-Kc7riBX8lX4NW0kzXlwAa39Snv5ohv6wM"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1712683846389,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LOlfSsP1l9kT6lUuAhEqqwT6QoJ7voUlerKNEO2ac5c"},
{"content":{"body":"python's popular computing library has `numpy.arange()` which does suffer from unexpected iterations due to floating point errors, and `numpy.linspace()` which does not","format":"org.matrix.custom.html","formatted_body":"python's popular computing library has <code>numpy.arange()</code> which does suffer from unexpected iterations due to floating point errors, and <code>numpy.linspace()</code> which does not","m.mentions":{},"msgtype":"m.text"},"ts":1712683960106,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$hmrQd1htKOuD4pgkTMYAMhBfzzyqQgnvoV_vTFgS4wM"},
{"content":{"body":"...decimal.","m.mentions":{},"msgtype":"m.text"},"ts":1712683988960,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$6mrgp9Hg4ZENpJBxuwOdAEDo36JYGZD7_D2g1njw-_I"},
{"content":{"body":"I do like linspace ","m.mentions":{},"msgtype":"m.text"},"ts":1712684038185,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rbxBFvB84Azsyt4sXyy712UziVti2TmVwS0ktRirpho"},
{"content":{"body":"the options object does leave room for it","m.mentions":{},"msgtype":"m.text"},"ts":1712684053086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw"},
{"content":{"body":"You can just use a range of integers and .map for what Matthew is proposing, right?","msgtype":"m.text"},"ts":1712684097125,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA"},
{"content":{"body":"FWIW it would be nice to have extra time to iron out all the editorial issues as well","msgtype":"m.text"},"ts":1712684102238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WkX7FZrF-4i5JIByvN18mFBqwkmx5W2B1y2-jEc5iZY"},
{"content":{"body":"then we can have a really solid 2.7 advancement","msgtype":"m.text"},"ts":1712684109610,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AKxrPtwrafNLMc23nIcR7TL1od9jhyLxXbfKVkLMLeg"},
{"content":{"body":"I'll definitely +1 this feature either with or without fractional values.","m.mentions":{},"msgtype":"m.text"},"ts":1712684183494,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$H__yRdb-TcfKxcyq9zLrFhf_n7V0S4RIm-5pmDvGnV0"},
{"content":{"body":"same though I do prefer accepting fractional values","m.mentions":{},"msgtype":"m.text"},"ts":1712684199158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yGkl99gojJ9MdiQGcaG-Q24CJovvGxyOncvm6SaDGPI"},
{"content":{"body":"but if left out it's not the end of the world","m.mentions":{},"msgtype":"m.text"},"ts":1712684212090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hl-hmGPSwS1J09MbO5QgkkW4jUFiKukGY58eKyxwY-U"},
{"content":{"body":"> <@bakkot:matrix.org> the options object does leave room for it\n\nI think linspace should be a separate method?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the options object does leave room for it</blockquote></mx-reply>I think linspace should be a separate method?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw"}},"msgtype":"m.text"},"ts":1712684461148,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$Nku5ARkjkhXCbIlCFOImSsoCwsprakM21YfPJjMWU0k"},
{"content":{"body":"even 2-4x slower must still be faster than `.reduce((a, b) => a + b, -0)`","format":"org.matrix.custom.html","formatted_body":"even 2-4x slower must still be faster than <code data-md=\"`\">.reduce((a, b) =&gt; a + b, -0)</code>","msgtype":"m.text"},"ts":1712684490943,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bcq_hTI0ErZj_iKrrwo0L41rDn1REIY2-Efx36tPcMg"},
{"content":{"body":"As the original author of range floating issue, I prefer not accepting franctional values , and change the name from`Iterator.range` to `Iterator.integers` which make it even more clear to developers 😉 ","format":"org.matrix.custom.html","formatted_body":"As the original author of range floating issue, I prefer not accepting franctional values , and change the name from<code>Iterator.range</code> to <code>Iterator.integers</code> which make it even more clear to developers 😉","m.mentions":{},"msgtype":"m.text"},"ts":1712684638486,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$2dXO6kZl9DX9Zv_i9K01kyroRIJGtoLyKiOfm4Yfjfk"},
{"content":{"body":"`intRange`","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">intRange</code>","msgtype":"m.text"},"ts":1712684678306,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iWfOz0WgCnwQjNAhu439FDK6PIxQFtSvsDPJjgrlhRM"},
{"content":{"body":"Do people also need `ProductExact()` ?","format":"org.matrix.custom.html","formatted_body":"Do people also need <code>ProductExact()</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1712684794236,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$DbDoQmYJyalc5nOZ5QSzeaaTKoNJHnFA5QBqpvgpXrM"},
{"content":{"body":"I can't understand the difference in precision/exactitude between precise and exact in this case... can anyone else?","m.mentions":{},"msgtype":"m.text"},"ts":1712684811683,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k"},
{"content":{"body":"I think \"precise\" applies to all numbers. So `0.1 + 0.2` has a precise value, it's just not exactly `0.3`.","format":"org.matrix.custom.html","formatted_body":"I think \"precise\" applies to all numbers. So <code>0.1 + 0.2</code> has a precise value, it's just not exactly <code>0.3</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712684862675,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU"},
{"content":{"body":"kinda, i guess there is a notion of \"low precision\" vs \"high precision\" that's more commonly used than \"low exactitude\" vs \"high exactitude\"","m.mentions":{},"msgtype":"m.text"},"ts":1712684865962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM"},
{"content":{"body":"but in this particular case i don't really understand","m.mentions":{},"msgtype":"m.text"},"ts":1712684876832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R-8Zn0AqUQ2Gg3A624vJg06xhiDvIqncZIwyKAZXnjc"},
{"content":{"body":"\"Accurate\" would be more... accurate.","m.mentions":{},"msgtype":"m.text"},"ts":1712684879640,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$xUOyB7YDZ1kMCb-_jAIARIQKZrZ9_L3nNflY45dpmc8"},
{"content":{"body":"> <@littledan:matrix.org> I can't understand the difference in precision/exactitude between precise and exact in this case... can anyone else?\n\nIt just avoid some loss and more close to exact number?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can&#39;t understand the difference in precision/exactitude between precise and exact in this case... can anyone else?</blockquote></mx-reply>It just avoid some loss and more close to exact number?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k"}},"msgtype":"m.text"},"ts":1712684901363,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$V-injLjVPWk9xr7WUWjHO96XGhY7ga0RyxpiA9s6k58"},
{"content":{"body":"> <@eemeli:mozilla.org> I think \"precise\" applies to all numbers. So `0.1 + 0.2` has a precise value, it's just not exactly `0.3`.\n\nhuh? but we're starting with Numbers, not those funny things that we don't have a representation of in JS","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>I think \"precise\" applies to all numbers. So <code>0.1 + 0.2</code> has a precise value, it's just not exactly <code>0.3</code>.</blockquote></mx-reply>huh? but we're starting with Numbers, not those funny things that we don't have a representation of in JS","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU"}},"msgtype":"m.text"},"ts":1712684903882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$so3TEUfBBKlUGTgoTH3CS24PCVbDhGNz2_Q4_wPRcAE"},
{"content":{"body":"> <@shuyuguo:matrix.org> kinda, i guess there is a notion of \"low precision\" vs \"high precision\" that's more commonly used than \"low exactitude\" vs \"high exactitude\"\n\nOK but it's not like we have a precision arg here... it's just supposed to get the right answer","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>kinda, i guess there is a notion of &quot;low precision&quot; vs &quot;high precision&quot; that&#39;s more commonly used than &quot;low exactitude&quot; vs &quot;high exactitude&quot;</blockquote></mx-reply>OK but it's not like we have a precision arg here... it's just supposed to get the right answer","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM"}},"msgtype":"m.text"},"ts":1712684944788,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7sgsdsbanx8_c3exYMwyxF0Qum0hVjgpBL2Yx0VX_KE"},
{"content":{"body":"right?","m.mentions":{},"msgtype":"m.text"},"ts":1712684952294,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7ZwBMjnhcntJo4bhQt6rQp53ZtG9sfMeYtKyFIg1ADI"},
{"content":{"body":"right, in this particular case i don't understand the difference","m.mentions":{},"msgtype":"m.text"},"ts":1712684962826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R87_tWnZ6U8yH8T_TY6LX6tS8D2B9SLFf2RKOvY9SEI"},
{"content":{"body":"if it were up to me i'd name it sumSlow","m.mentions":{},"msgtype":"m.text"},"ts":1712684981299,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg"},
{"content":{"body":"like i would totally believe that if kevin's slides said \"this is named sumPrecise, but it may give the wrong impression\", someone will then say \"sumExact is better\"","m.mentions":{},"msgtype":"m.text"},"ts":1712685013140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LBarNReFG8sn4hrZcjmaActvV2IwYoErjAl-ocRMQeE"},
{"content":{"body":"To be clear, I'm fine with sumExact as a least worst option.","m.mentions":{},"msgtype":"m.text"},"ts":1712685015934,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$EFi0UhzfFJ8TUmSqC7to7HEo0orQd17ya4KUlCXrsT0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?\n\nYes, next follow on might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?</blockquote></mx-reply>Yes, next follow on might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@pchimento:igalia.com","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8"}},"msgtype":"m.text"},"ts":1712685053161,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5aHsSj0LFTh3DY-1SNtQpKkCtFIOW01QmaM3XX9Fa_c"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?\n\n * Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?</blockquote></mx-reply> * Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{},"m.new_content":{"body":"Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@pchimento:igalia.com","@eemeli:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5aHsSj0LFTh3DY-1SNtQpKkCtFIOW01QmaM3XX9Fa_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712685061101,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Z8Kr6dOBYxCCgzzp5id-OzEvxMAVeazVAuZ-cWaW7w0"},
{"content":{"body":"Doesn't temporal use `from` ?","format":"org.matrix.custom.html","formatted_body":"Doesn't temporal use <code>from</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1712685061197,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GobWZ8jGXFGHu4vglDP92bTU92DAeXMmXIcjFpZ-vTM"},
{"content":{"body":"what name are we considering?","m.mentions":{},"msgtype":"m.text"},"ts":1712685072861,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dIarbor4lBc9cM_LBCJq4cbxMHeyIvl30whBSyhNODU"},
{"content":{"body":"So, I guess we should go with `Math.sumPreciseFrom()`?","format":"org.matrix.custom.html","formatted_body":"So, I guess we should go with <code>Math.sumPreciseFrom()</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712685136817,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$kyhydROu0zydi7QWQsdSxECSypTALIEet8OdS5MNuw4"},
{"content":{"body":"or not...","m.mentions":{},"msgtype":"m.text"},"ts":1712685153603,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$ac3Sgr3peUwCyLxHals3SrGA7C_WPgkyBFCeFY8UxAE"},
{"content":{"body":"it sounds like we are not doing `From` based on everyone else doesn't like it","format":"org.matrix.custom.html","formatted_body":"it sounds like we are not doing <code>From</code> based on everyone else doesn't like it","m.mentions":{},"msgtype":"m.text"},"ts":1712685157067,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wTFlOYEfFaO7Hb2Hcsj6anyGDjsKXLFVV4VpaiaPu3k"},
{"content":{"body":"so `sumExact` or `sumPrecise`","format":"org.matrix.custom.html","formatted_body":"so <code>sumExact</code> or <code>sumPrecise</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712685161303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FCE4R2-SV21Jy-shBCVEs7dgfGugVdwR2AVz8SgiXgw"},
{"content":{"body":"> <@shuyuguo:matrix.org> if it were up to me i'd name it sumSlow\n\nAs I understand, it is not necessarily slow.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if it were up to me i&#39;d name it sumSlow</blockquote></mx-reply>As I understand, it is not necessarily slow.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg"}},"msgtype":"m.text"},"ts":1712685269625,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$8FEUhzH4GxqBmUzho87JG22FrB2jIxc9jbSEyrgraMk"},
{"content":{"body":"dminor: can you clarify your last point in the notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: can you clarify your last point in the notes?","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1712685282708,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$_JvXZyqNXNqLFiuZY45wh5btFC1CcHPz_d67LKa9SOI"},
{"content":{"body":"yeah it is?","m.mentions":{},"msgtype":"m.text"},"ts":1712685283245,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c4rbKpcEbapVhPLhS6b4ZW61s2EhWF8j8Bo5CyKtLQA"},
{"content":{"body":"it's necessarily slow_er_","m.mentions":{},"msgtype":"m.text"},"ts":1712685288756,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw"},
{"content":{"body":"I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection","format":"org.matrix.custom.html","formatted_body":"I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection","m.mentions":{},"msgtype":"m.text"},"ts":1712685290160,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4"},
{"content":{"body":"Temporal uses `from` in many places and those functions do not take iterables, so I disagree with the Michael Ficarra 's statement that \"everything named from takes an iterable\"","format":"org.matrix.custom.html","formatted_body":"Temporal uses <code>from</code> in many places and those functions do not take iterables, so I disagree with the <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> 's statement that \"everything named from takes an iterable\"","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1712685323762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XXBoGgdzgWTwFHUO9rHOL-IZxhJpJaNxhPE_DtUdIpo"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> You can just use a range of integers and .map for what Matthew is proposing, right?\n\nIt's not ergonomic at all: `range(start * stepDivider, end * stepDivider, stepMultipler) | map(x => x / stepDivider)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>You can just use a range of integers and .map for what Matthew is proposing, right?</blockquote></mx-reply>It's not ergonomic at all: <code>range(start * stepDivider, end * stepDivider, stepMultipler) | map(x =&gt; x / stepDivider)</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA"}},"msgtype":"m.text"},"ts":1712685363724,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XzaHrdVebrHVbdKQqb2A8uWgOA2bEzOe0vTupiAdQD4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection\n\nAgreed. \"Foo.from\" does imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection</blockquote></mx-reply>Agreed. \"Foo.from\" does imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4"}},"msgtype":"m.text"},"ts":1712685380889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eP7M5Yr4EdaEclbwE70FlXOvzXHpPRQPYncwGl_i74M"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection\n\n * Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection</blockquote></mx-reply> * Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{},"m.new_content":{"body":"Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eP7M5Yr4EdaEclbwE70FlXOvzXHpPRQPYncwGl_i74M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712685388104,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xoW3BluQz69hbaakt_HI-GcchdGiG1wcWBsDXeLhPA0"},
{"content":{"body":"I'm having trouble understanding why we're bothering with an optimization for an error case","m.mentions":{},"msgtype":"m.text"},"ts":1712685462897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ERf4dvM6ka5gYCaY9qKHMZpD2ZGwGRskALQfG2enQg0"},
{"content":{"body":"I don't think arithmetic commutativity comes into play when we're talking about throwing, which is inherently not arithmetic","msgtype":"m.text"},"ts":1712685466107,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$s423aliccLDm8e6mBPCNz_bhlYGEu5dVoD0TK2t1Gls"},
{"content":{"body":"@littledan:matrix.org an iterable of Number producing a NaN is not an error case?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> an iterable of Number producing a NaN is not an error case?","msgtype":"m.text"},"ts":1712685490356,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$q_8zK-xoA_JKR-vgZ8arYwHuFE8Oxw0BB_dJ--699nA"},
{"content":{"body":"I think NaN is kinda usually for error cases?","m.mentions":{},"msgtype":"m.text"},"ts":1712685525358,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M9RQLVIYcyUr1ChREdki4pbfuqu79XYLzbwvrdOcphk"},
{"content":{"body":"I get that it's within the domain of Numbers but.... when was the last time you wanted NaN to come up for you?","m.mentions":{},"msgtype":"m.text"},"ts":1712685545953,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$adiIKcijWMQvNLeUUFUlV1vKsMA-DewKqYbxJE8ZnBA"},
{"content":{"body":"at the business logic layer, maybe, but at this data processing layer, no","msgtype":"m.text"},"ts":1712685548733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g"},
{"content":{"body":"I have to drop, Eemeli and Matthew Gaudet will represent SpiderMonkey for the rest of the day.","m.mentions":{},"msgtype":"m.text"},"ts":1712685578109,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$W62wH6TllFdM02nm4CbJhljev3kJ8agOY8ckwzel4EI"},
{"content":{"body":"> <@michaelficarra:matrix.org> at the business logic layer, maybe, but at this data processing layer, no\n\nobviously we need a well-defined answer, but is this going to provide a meaningful speedup meaningfully often?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>at the business logic layer, maybe, but at this data processing layer, no</blockquote></mx-reply>obviously we need a well-defined answer, but is this going to provide a meaningful speedup meaningfully often?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g"}},"msgtype":"m.text"},"ts":1712685618622,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9Xl9yJphI_Y9aKrJ-GBkU1vudZYsyc__l4eQ9qyeMS8"},
{"content":{"body":"yes, iterators can yield very many values","msgtype":"m.text"},"ts":1712685638045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$krqY3-jceYd_S8dImT4yWS2yfiBy8u05M4Gs9c3Dli8"},
{"content":{"body":"a multi-hours' batch could be short-circuited immediately after starting instead of waiting until the end","msgtype":"m.text"},"ts":1712685664621,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YNYXPjDEf0MgFEjYIGNPwwnOCgjFerN3XWqhv25axrU"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's necessarily slow_er_\n\nAs https://en.wikipedia.org/wiki/Pairwise_summation \"Pairwise summation is the default summation algorithm in NumPy[8] and the Julia technical-computing language,[9] where in both cases it was found to have comparable speed to naive summation\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it&#39;s necessarily slow_er_</blockquote></mx-reply>As https://en.wikipedia.org/wiki/Pairwise_summation \"Pairwise summation is the default summation algorithm in NumPy[8] and the Julia technical-computing language,[9] where in both cases it was found to have comparable speed to naive summation\"","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw"}},"msgtype":"m.text"},"ts":1712685796007,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$1EZUIcqxXwFAi1g321Aq8lbmTql8z1xfIkuAOrniG5s"},
{"content":{"body":"eemeli: can you add yourself to the notes doc?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: can you add yourself to the notes doc?","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1712685862688,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$hBcZHE1oi2mJQFFAgJpC0DRSU51qn7qFhNrOqH11FHY"},
{"content":{"body":"I had to miss the presentation, but why is empty list `-0`? (no opinion, just curious)","format":"org.matrix.custom.html","formatted_body":"I had to miss the presentation, but why is empty list <code data-md=\"`\">-0</code>? (no opinion, just curious)","msgtype":"m.text"},"ts":1712686191346,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$o77hdzB43975Kz7OZ1fBYW_egExbT3Mv8EEuYNUR0r0"},
{"content":{"body":"it is the identity of floating point addition","m.mentions":{},"msgtype":"m.text"},"ts":1712686211098,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qB4iyW5vEblBFjhGzG_Voi-oZzqNLH4BxuZhEkIOsek"},
{"content":{"body":"@jridgewell:matrix.org `Object.is(-0 + -0, -0)`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40jridgewell%3Amatrix.org\">@Justin Ridgewell</a> <code data-md=\"`\">Object.is(-0 + -0, -0)</code>","msgtype":"m.text"},"ts":1712686236658,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$07bGZCv-5VgsavAUJYlrfq-JqWbnIeDkebhHAcC0XK8"},
{"content":{"body":"(while +0 + -0 = +0)","m.mentions":{},"msgtype":"m.text"},"ts":1712686258835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yWP6yp7vg5vZQp64f5iN_EB3gmkoXitaj-Mpgva8UDw"},
{"content":{"body":"Why is `-0` the starting point?","format":"org.matrix.custom.html","formatted_body":"Why is <code data-md=\"`\">-0</code> the starting point?","msgtype":"m.text"},"ts":1712686280612,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DmUyAJQt4YG5UDw1spdpxl9S7bDcqCK27pw9a2HhP_U"},
{"content":{"body":"If I’m interpreting those correctly....","msgtype":"m.text"},"ts":1712686292340,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0WDoM7D3Q9K1FvhJswu1Q8q6l5CWcfu2gNq648b1kcE"},
{"content":{"body":"what does starting point mean?","m.mentions":{},"msgtype":"m.text"},"ts":1712686292664,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DGxzyyxvJlkpT_Y32cYDb8-fXu4VKPkv8cVL7tbu5zI"},
{"content":{"body":"`let sum = -0; for (const i of array) sum += i`","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">let sum = -0; for (const i of array) sum += i</code>","msgtype":"m.text"},"ts":1712686317197,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bQkmpYLF-IumIJ4jB9-o6h929ECXU1V8ZbT2_-Y1YnQ"},
{"content":{"body":"so that when `array` is `[-0]` you get the correct answer","format":"org.matrix.custom.html","formatted_body":"so that when <code data-md=\"`\">array</code> is <code data-md=\"`\">[-0]</code> you get the correct answer","msgtype":"m.text"},"ts":1712686342686,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cVTJh1AaIK-DGQSGGLdcyeO6xBu-ol1RfGogittLk4A"},
{"content":{"body":"The equality question feels very like the question of `==` on value types in Java.","format":"org.matrix.custom.html","formatted_body":"The equality question feels very like the question of <code>==</code> on value types in Java.","m.mentions":{},"msgtype":"m.text"},"ts":1712686666171,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$_yLyVS_e-IhdFnythZI6QejjxO9pZ1aJ3lwodFDIis8"},
{"content":{"body":"the slides will reference project Valhalla IIRC","m.mentions":{},"msgtype":"m.text"},"ts":1712686772485,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc"},
{"content":{"body":"value types being the ones with lowercase names?","msgtype":"m.text"},"ts":1712686778459,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rRgG5N5CRlEoec3EadA5glBtsauzVayadGJVlmDIAmI"},
{"content":{"body":"(i.e. value objects for java)","m.mentions":{},"msgtype":"m.text"},"ts":1712686783209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BhEy8N1YIjPDd3I90YQu5UwzLL2Pad9-VcOag2urajE"},
{"content":{"body":"https://openjdk.org/projects/valhalla/","m.mentions":{},"msgtype":"m.text"},"ts":1712686799459,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aQD_x_bq6BBuT0DrRJbP6hq44NqVSWcCezX4seshKvI"},
{"content":{"body":"this presentation is so well structured 😍","msgtype":"m.text"},"ts":1712687062706,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R4iaOptsSGSZ1fKF_WWx-a3G2snbND3oIGgWSH_T3-M"},
{"content":{"body":"I really like the composite object approach though I would not call them \"CompositeKey\"","m.mentions":{},"msgtype":"m.text"},"ts":1712687158649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FDtdxvwDo-49O8WtrVWkZZ04wEBNdNDUHBerhRaCF4o"},
{"content":{"body":"I linked a few userland implementations here: https://github.com/tc39/proposal-record-tuple/issues/387#issuecomment-2033531920 though I am sure there are others","m.mentions":{},"msgtype":"m.text"},"ts":1712687262113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aCYH2vbTXjPbJjkGQBsTRYZEJ9HGBFpglMwJehMl0_Y"},
{"content":{"body":"Composite keys don't seem like a solution to case-insensitive Maps. I still strongly favor equals/hash.","m.mentions":{},"msgtype":"m.text"},"ts":1712687342219,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L7UMrIzQ9lIEVI1hLCcg_6NWoSdqLHkWUUOO9ykFdtw"},
{"content":{"body":"I think they solve a different problem - equals/hash doesn't let me write `groupBy` with the result of my comparator being a composite key (without doing a bunch of work)","format":"org.matrix.custom.html","formatted_body":"I think they solve a different problem - equals/hash doesn't let me write <code>groupBy</code> with the result of my comparator being a composite key (without doing a bunch of work)","m.mentions":{},"msgtype":"m.text"},"ts":1712687396465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G8NTW-SrmK2zC3h_Fw3GnEnC4ZiwgqHrBc3eZHWJ5KU"},
{"content":{"body":"but uniqBy without CompositeKey would cover that use case, no?","m.mentions":{},"msgtype":"m.text"},"ts":1712687397684,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ko7aTLggMheqP3bxAHYxrSXdE40bZ2C3z3tq__KfyYc"}
]