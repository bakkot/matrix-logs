[
{"content":{"body":"good morning/evening/night everyone!","m.mentions":{},"msgtype":"m.text"},"ts":1712670752959,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gJFuR8CblhGP9IHpgjJ52i8I5iCYIv7C0LSvg4SWbzc"},
{"content":{"body":"meeting starts in ~7","m.mentions":{},"msgtype":"m.text"},"ts":1712670756888,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$d5ySoqjRgQd0TjZsCI095TkBTzsX_pjHzcK7qUk7haQ"},
{"content":{"body":"I have trouble understanding the motivation for this null change, but also it doesn't seem harmful","m.mentions":{},"msgtype":"m.text"},"ts":1712672959744,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GEIWuzqE0_rYiZNNKHX6hdYDy6YUOBx-7Wb4broivwI"},
{"content":{"body":"(or rather, I have trouble understanding the motivation for the null skipping in the first place)","m.mentions":{},"msgtype":"m.text"},"ts":1712672995863,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$07nwBD-1kn90B97wCZyPPj04aMZMOYjK6pVSdHocGjs"},
{"content":{"body":"Random fact: Babel accidentally ignores `null`s while guaranteeing at least one `await` -- we have a PR open to match the behavior of the current (pre-this-change) proposal","format":"org.matrix.custom.html","formatted_body":"Random fact: Babel accidentally ignores <code>null</code>s while guaranteeing at least one <code>await</code> -- we have a PR open to match the behavior of the current (pre-this-change) proposal","m.mentions":{},"msgtype":"m.text"},"ts":1712673039976,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cDKuy9Lkq_KVdZBuIcLN9IISQ4SGH6HyhiNjB0LwOf0"},
{"content":{"body":"It seems this PR try to avoid nulls introducing extra awaits, am I understanding this correctly?","m.mentions":{},"msgtype":"m.text"},"ts":1712673307570,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$F0iRyTVgqlWUUEql_7scUGlCd-qxMeVsLD0BxV_xiU4"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1712673317535,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8hDxDiwpx6zfzwW3JsWdOYVVtdjfFkbPx07r8ghyQHo"},
{"content":{"body":"this is a small thing, but i'd be interested in people's thoughts on banning `using` inside base switch cases: https://github.com/tc39/proposal-explicit-resource-management/issues/215#issuecomment-2040486653","format":"org.matrix.custom.html","formatted_body":"this is a small thing, but i'd be interested in people's thoughts on banning <code>using</code> inside base switch cases: https://github.com/tc39/proposal-explicit-resource-management/issues/215#issuecomment-2040486653","m.mentions":{},"msgtype":"m.text"},"ts":1712673471235,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2hZUJclHo1J4CX_oTxWLabHp-wphUp3IfThZs7wkv9Y"},
{"content":{"body":"Babel's `using` support in `switch` is currently completely broken","format":"org.matrix.custom.html","formatted_body":"Babel's <code>using</code> support in <code>switch</code> is currently completely broken","m.mentions":{},"msgtype":"m.text"},"ts":1712673563609,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$96WNUpGqyCyBd0BI0ecP0pzCFXyzPqrbIIolmR-QjO8"},
{"content":{"body":"Because everything in `switch` is incredibly annoying to compile","format":"org.matrix.custom.html","formatted_body":"Because everything in <code>switch</code> is incredibly annoying to compile","m.mentions":{},"msgtype":"m.text"},"ts":1712673582017,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wshfUjtzRylTcdGaUUpV_Q2OMioIWCi8KqoqdiF2DCw"},
{"content":{"body":"i wanna ban it but recognize that'll break symmetry with let/const","m.mentions":{},"msgtype":"m.text"},"ts":1712673597272,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6BDpV9UqN8qftIDQaFhzwY8Cy2luCykDVuYQwv3_o8I"},
{"content":{"body":"Is it for implementation reasons?","m.mentions":{},"msgtype":"m.text"},"ts":1712673652756,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vz2eKzbV0BquIGqieqZLBpo-sjBXvM5HkFyGSDOzwvU"},
{"content":{"body":"it's laid out in the comment -- saves some codegen complexity","m.mentions":{},"msgtype":"m.text"},"ts":1712673714326,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0aKipYnxYSCq26C6RiJBUUU2hGCUQ_qV2JBUsP2wcoE"},
{"content":{"body":"we can unroll the dispose loop in all cases except switch cases","m.mentions":{},"msgtype":"m.text"},"ts":1712673756729,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LBUlGwFqYDTC3_XaOqrBqWh17C8IJEIGQE9BfgA-c1Y"},
{"content":{"body":"I'm trying to think of any usecase for `using` in switch, but I cannot think of any where I would want `using`'s scope to fall through multiple cases","format":"org.matrix.custom.html","formatted_body":"I'm trying to think of any usecase for <code>using</code> in switch, but I cannot think of any where I would want <code>using</code>'s scope to fall through multiple cases","m.mentions":{},"msgtype":"m.text"},"ts":1712673865497,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk"},
{"content":{"body":"(Babel doesn't unroll the loop anymore, so for us it wouldn't actually be difficult to fix `using` in `switch`)","format":"org.matrix.custom.html","formatted_body":"(Babel doesn't unroll the loop anymore, so for us it wouldn't actually be difficult to fix <code>using</code> in <code>switch</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1712673960809,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9uWsPswz-7Ks-AuHPpj5RgL9JAy2_nDD2NWZmqvkNcM"},
{"content":{"body":"we don't unroll currently, but would like to","m.mentions":{},"msgtype":"m.text"},"ts":1712673999248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vf-NX_6PrM4ET8CR9teyplkKhrVw2jsbElI7MTJqltc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I'm trying to think of any usecase for `using` in switch, but I cannot think of any where I would want `using`'s scope to fall through multiple cases\n\nThe most relevant case I can see would be something like manual loop unrolling, where you skip over the `using` for a chunk of operations when it isn't needed, such as if a lock was needed for a 16k chunk of data that isn't needed for a smaller chunk of data. The point of manual loop unrolling is to avoid a bunch of comparisons and branches based on a single condition such as input size, so a smaller chunk of data skips over the `using` (and avoids the extraneous `null`/`undefined` check), while a larger chunk of data enforces the `using` and holds the lock until the current iteration of the loop ends.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I'm trying to think of any usecase for <code>using</code> in switch, but I cannot think of any where I would want <code>using</code>'s scope to fall through multiple cases</blockquote></mx-reply>The most relevant case I can see would be something like manual loop unrolling, where you skip over the <code>using</code> for a chunk of operations when it isn't needed, such as if a lock was needed for a 16k chunk of data that isn't needed for a smaller chunk of data. The point of manual loop unrolling is to avoid a bunch of comparisons and branches based on a single condition such as input size, so a smaller chunk of data skips over the <code>using</code> (and avoids the extraneous <code>null</code>/<code>undefined</code> check), while a larger chunk of data enforces the <code>using</code> and holds the lock until the current iteration of the loop ends.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eyi8x4dojkt4G9wKfwznREIXHBzKsl4MKYhVeYQ98hk"}},"msgtype":"m.text"},"ts":1712674226532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-YFRLP2nyabnRvQD9Rz3eOSqmdpS6PVFsaHeCzlEi8Y"},
{"content":{"body":"Oh I see, like for transpiling generators","m.mentions":{},"msgtype":"m.text"},"ts":1712674372530,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ycjma4pHs53xLHKtmc95CeEeKV3IU2u35jWPnYnk3co"},
{"content":{"body":"(in a world where generators are transpiled and `using` is not I guess)","format":"org.matrix.custom.html","formatted_body":"(in a world where generators are transpiled and <code>using</code> is not I guess)","m.mentions":{},"msgtype":"m.text"},"ts":1712674393016,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5sIXnxOdkuPk8cUYEtabP8wDGArqIEecRmgMoJwzNvw"},
{"content":{"body":"```js\nfor (let start = 0; start < len; start += 8) {\n    switch (start % 8) {\n        case 0:\n          // full chunk, perform lock\n          using lck = new UniqueLock(mut);\n          readByte();\n        case 1: readByte();\n        case 2: readByte();\n        case 3: readByte();\n        case 4: readByte();\n        case 5: readByte();\n        case 6: readByte();\n        case 7: readByte();\n    } // lock released if taken\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">for (let start = 0; start &lt; len; start += 8) {\n    switch (start % 8) {\n        case 0:\n          // full chunk, perform lock\n          using lck = new UniqueLock(mut);\n          readByte();\n        case 1: readByte();\n        case 2: readByte();\n        case 3: readByte();\n        case 4: readByte();\n        case 5: readByte();\n        case 6: readByte();\n        case 7: readByte();\n    } // lock released if taken\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712674431282,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gXhn1EmUm4DTemB2ppLc298n8J14LGrIBxMilh28_iY"},
{"content":{"body":"not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cutting down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":"not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cutting down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"msgtype":"m.text"},"ts":1712674600590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iM5v5VmLAj3YGNPiM4iHUlDrpjrsQ8ICHzbuMvL9uHM"},
{"content":{"body":" * not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":" * not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"m.new_content":{"body":"not for transpiling generators, no. that would be using a `switch` as a finite state machine, but an FSM would result in the `using` terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the `for` to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","format":"org.matrix.custom.html","formatted_body":"not for transpiling generators, no. that would be using a <code>switch</code> as a finite state machine, but an FSM would result in the <code>using</code> terminating early. Loop unrolling in this case is to handle chunks of data without continuously spinning and checking in the <code>for</code> to process one element at a time and cut down the number of comparisons/branching from n to 1/n for a given chunk size of n.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iM5v5VmLAj3YGNPiM4iHUlDrpjrsQ8ICHzbuMvL9uHM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712674711396,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zzZHanOZUA0qrBFw5-wogMsfhWB-I9IlTmUAh4UGAm0"},
{"content":{"body":"If we could get to Ashley's point, he can explain why TLA running eagerly is useful within Bloomberg","m.mentions":{},"msgtype":"m.text"},"ts":1712676318882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$71TxqFpQ2t16udUsoCxtzsOrBL7WWybrMknnXE2yEdg"},
{"content":{"body":"tla already can break expectations...","m.mentions":{},"msgtype":"m.text"},"ts":1712676400529,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_mFfUzmSQsOKfFfaoY2YNk-6S-3rUIphPPVq4Tk0RUI"},
{"content":{"body":"certainly a TLA being added anywhere in your graph is a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1712676550363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eoRkb5wWNgWHY2GPyOuHY5FfXDt0Eyr0_ZmuLE-8gWs"},
{"content":{"body":"The thing is: in practice, you really shouldn't use JSON or CSS modules either, due to the lack of built-in bundling. The limited utility of built-in modules is not at all limited to this feature","m.mentions":{},"msgtype":"m.text"},"ts":1712676560562,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9P522MpDpIBMdGVZzfrzKc-IQEWUEtJRZqiHPYfwryY"},
{"content":{"body":"this strongly suggests to me that we need a path to standardize bundler-only syntax","m.mentions":{},"msgtype":"m.text"},"ts":1712676586958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw"},
{"content":{"body":"until then, we'll be talking about features that are mostly useful for bundlers and non-web environments","m.mentions":{},"msgtype":"m.text"},"ts":1712676588867,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QlWCEh5iLYzxb7nXoQEn86WyITLqMgGafezDJ-Btiz8"},
{"content":{"body":" * certainly a TLA being added anywhere in your graph (that's not an entrpoint) is a breaking change","m.mentions":{},"m.new_content":{"body":"certainly a TLA being added anywhere in your graph (that's not an entrpoint) is a breaking change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eoRkb5wWNgWHY2GPyOuHY5FfXDt0Eyr0_ZmuLE-8gWs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712676595338,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sqUL0qA9lW19O3SztvLAPaOk-pdPC-u1Ds-_4B0tz7U"},
{"content":{"body":"> <@bakkot:matrix.org> this strongly suggests to me that we need a path to standardize bundler-only syntax\n\nI disagree; I think we should fix the issues to allow native modules to be usable in browsers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>this strongly suggests to me that we need a path to standardize bundler-only syntax</blockquote></mx-reply>I disagree; I think we should fix the issues to allow native modules to be usable in browsers","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zmx-bIZ5WDf9KLlH77p1RXSCTMlHZFoMY6zwHevcnzw"}},"msgtype":"m.text"},"ts":1712676613856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0"},
{"content":{"body":"i disagree with that disagree","m.mentions":{},"msgtype":"m.text"},"ts":1712676627596,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6dRSUqueZBCRIvmfvD1HWHT5vBv8Oxjvu1um6bZ-B4o"},
{"content":{"body":"doesn't seem a good use of resources tbh","m.mentions":{},"msgtype":"m.text"},"ts":1712676632747,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O6i74uJDzVbfMHTSDuzeKsmACLtOPVjz7qqDvoRk1uw"},
{"content":{"body":"> <@littledan:matrix.org> I disagree; I think we should fix the issues to allow native modules to be usable in browsers\n\nThat is also good! And then, after that, standardizing things like this everywhere instead of bundler-only. But not before that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I disagree; I think we should fix the issues to allow native modules to be usable in browsers</blockquote></mx-reply>That is also good! And then, after that, standardizing things like this everywhere instead of bundler-only. But not before that.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$u1eZCyGVoJoiYpdgf8FaNHA_wMJS5XxVRADBumMCiW0"}},"msgtype":"m.text"},"ts":1712676666008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2FpAxstVSxEeAPNXPmLl97VHmLmOyAVuWkwxsjGr85A"},
{"content":{"body":"these are all arguments against ES6 modules in the first place","m.mentions":{},"msgtype":"m.text"},"ts":1712676673688,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Gf9eclSCpJfuocYjWP23aoxo65LmHY3UcBZzxqGh4hU"},
{"content":{"body":"*cough*","format":"org.matrix.custom.html","formatted_body":"<em>cough</em>","m.mentions":{},"msgtype":"m.text"},"ts":1712676682335,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OUwSpUAESpp91fdZINthh8cSgcW1smL3P7A1NNv36Gk"},
{"content":{"body":"I mean, yes.","m.mentions":{},"msgtype":"m.text"},"ts":1712676691248,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kpKfrpyNictOkR-xQ7HbaX2K2wmg7ZQYf--LT9UFZrA"},
{"content":{"body":"But that ship has sailed.","m.mentions":{},"msgtype":"m.text"},"ts":1712676696224,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-wvYNmpUP_vAw8eLDlHmZcM4dtATGd65MQLjLwQX6i0"},
{"content":{"body":"you're soooo close","m.mentions":{},"msgtype":"m.text"},"ts":1712676705035,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OOfiLQA-a6T_jmTPIq55ZHNAwSOi_LtXEpDwHOvUxCw"},
{"content":{"body":"bundler-related, but could `import defer` potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?","format":"org.matrix.custom.html","formatted_body":"bundler-related, but could <code>import defer</code> potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?","m.mentions":{},"msgtype":"m.text"},"ts":1712676713368,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I"},
{"content":{"body":"In Jack's \"assert sync\" proposal I suggest we can also add \"use async\" directive which might help to make TLA explicit. Maybe it also help this issue.","m.mentions":{},"msgtype":"m.text"},"ts":1712676723172,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$2J1-alpQ7McKRuyul2dANddkXE7ILfZ0ZXRMpSlj6ko"},
{"content":{"body":"well, yeah, so this would be good input to the module harmony group, if we don't like modules features anymore...","m.mentions":{},"msgtype":"m.text"},"ts":1712676736253,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw"},
{"content":{"body":"I think standardizing ES6 modules as bundler-only syntax would have been better than the current world","m.mentions":{},"msgtype":"m.text"},"ts":1712676739410,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6BUa45NqcMhHhr_4x-MV-tpu_5CNTsmpzPynNgHbFLQ"},
{"content":{"body":"or is that not an option because fetch is async","m.mentions":{},"msgtype":"m.text"},"ts":1712676753030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3wDYil0ySGCUbpx7pY7YmWVAIrhoBh8qbe-cOvKJVfk"},
{"content":{"body":"> <@littledan:matrix.org> well, yeah, so this would be good input to the module harmony group, if we don't like modules features anymore...\n\n`import source` is useful on the web!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, yeah, so this would be good input to the module harmony group, if we don&#39;t like modules features anymore...</blockquote></mx-reply><code>import source</code> is useful on the web!","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ibBHU6wfKd8e_dTPiq1EK30KX6cNc6gfBctvNpH6Xgw"}},"msgtype":"m.text"},"ts":1712676808283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OMTaB0dd1fYdhRbzDZ9HsmLK54_bfNTi0i1xCHkU7ds"},
{"content":{"body":"so it's not \"module features\" in general, just those specific ones which aren't useful on the web","m.mentions":{},"msgtype":"m.text"},"ts":1712676825613,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$inc9qMlMoqEyCpZd3SxwFHOSJ4aaBXVrUyD_i6X85B0"},
{"content":{"body":"/me Taking over Chair responsibilities for a bit","msgtype":"m.text"},"ts":1712676851898,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Mk_kONBlWuWxBj7rl0yYF1D9wYC3nrtcwtYxF7wzEOg"},
{"content":{"body":"(possibly \"[...] aren't useful on the web _yet_\")","format":"org.matrix.custom.html","formatted_body":"(possibly \"[...] aren't useful on the web <em>yet</em>\")","m.mentions":{},"msgtype":"m.text"},"ts":1712676852251,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yzeJ4T9RXl9fLHnOltSKPeZ09OWZLwN3L0cZ9ScaEp4"},
{"content":{"body":"I think the Matrix results show that it's useful on the web *in practice*","format":"org.matrix.custom.html","formatted_body":"I think the Matrix results show that it's useful on the web <em>in practice</em>","m.mentions":{},"msgtype":"m.text"},"ts":1712676869614,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$H-h5IswQbRQchPYeHZkLsJ3pZ94s-vpeUI0rwZUpeUk"},
{"content":{"body":"It's a good thing that bundlers are aligned to TC39 and browsers in their syntax and semantics. It will be good for us to preserve that.","m.mentions":{},"msgtype":"m.text"},"ts":1712676893125,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WZBdu7tRE8428lplzTVAJ4SXnp_qmdMeh056KGK-U0M"},
{"content":{"body":"> <@rbuckton:matrix.org> bundler-related, but could `import defer` potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?\n\nyep. That's what we do at Bloomberg. We find the TLA at build time. And add a simplified module graph of which imports have TLA deps to our equivalent of 'package.json'","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>bundler-related, but could <code>import defer</code> potentially avoid fetch and parse as well if we could serialize the import graph on the server side ahead of time?</blockquote></mx-reply>yep. That's what we do at Bloomberg. We find the TLA at build time. And add a simplified module graph of which imports have TLA deps to our equivalent of 'package.json'","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6YsFO9L1jgDMO0-seDS12H9vcU36t3OHhyBhS_QCI3I"}},"msgtype":"m.text"},"ts":1712676907286,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$d-JTQB-9Ce-tktzgaJxF6C-zYKdgjwO6ECVk-DS9iuc"},
{"content":{"body":"IIUC the Matrix results show that it's useful on the web to have bundler-level syntax for this, but not that it's useful to have in browsers, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712676909814,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2D8753OtdtVsh7bh4nM1fnm0N1gvy1H-By8x15gDT0o"},
{"content":{"body":"we've made tons of progress by actually building things into JS; the code splitting situation was a mess before import(), and it resulted in code splitting not occurring.","m.mentions":{},"msgtype":"m.text"},"ts":1712676922291,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WVILxyxshl-pjBGlK_mqKirIfpQCYSpXImtADC9aQ3M"},
{"content":{"body":"I am not proposing \"give up on this\"; I am proposing \"have a path to standardize bundler-level syntax that isn't actually in browsers\"","m.mentions":{},"msgtype":"m.text"},"ts":1712676930794,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NimOpvoFbLB5Rg8Rod_w6rOgbdj3cylZj2qkapDu4Dw"},
{"content":{"body":"TC39 is the JavaScript standards committee--our role is to find this common syntax","m.mentions":{},"msgtype":"m.text"},"ts":1712676940746,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k7-6lw41cp5qrtzwlX1J8sokUiYeOas5EKE00JXoqb0"},
{"content":{"body":"once we find common syntax, it's OK if some implementations fall behind and don't implement everything, but it'd be a big cost to split the language in two","m.mentions":{},"msgtype":"m.text"},"ts":1712676987193,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q3M5ccKZ0s2IpI8R-v5LvVPRuS852KhFtePkWhDWoMw"},
{"content":{"body":"my response is the thing Shu is saying out loud right now","m.mentions":{},"msgtype":"m.text"},"ts":1712676993100,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1hXnjxF4CfaK9xAwMS6AAUw_D8Q4FgNc9tpEy4wOUdU"},
{"content":{"body":"we should have this as an actual agenda item; that'd make it easier to discuss","m.mentions":{},"msgtype":"m.text"},"ts":1712677014555,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zng6mqTnv9LaNzx9PKcL1kGfgkvhVx3C7SzrEzwdOvk"},
{"content":{"body":"IMO Stage 3 serves this purpose of \"it's in tools and not necessarily in browsers\". Maybe we just want to leave things in Stage 3 for longer.","m.mentions":{},"msgtype":"m.text"},"ts":1712677145549,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kyvo4m-W-C3-rtnmk5fx9eYc9mIbnGbXDOl7EMKkMx0"},
{"content":{"body":"fwiw eslint refuses to implement features prior to stage 4, though that's maybe a them problem","m.mentions":{},"msgtype":"m.text"},"ts":1712677176712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0"},
{"content":{"body":"stage 3 is when it gets shipped in browsers tho","m.mentions":{},"msgtype":"m.text"},"ts":1712677267294,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U"},
{"content":{"body":" * stage 3 is when it gets shipped in (most) browsers tho","m.mentions":{},"m.new_content":{"body":"stage 3 is when it gets shipped in (most) browsers tho","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677270342,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0f1bjzMnEkJ0YFQ-dHtCFU4KzgImT0XBXOAVMqGPeXQ"},
{"content":{"body":"John-David Dalton: why is it disingenuous? this is arguably _better_ handled by tools. tools have a different view (they can see the whole app) and optimization opportunities than a VM","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@johndaviddalton:matrix.org\">John-David Dalton</a>: why is it disingenuous? this is arguably <em>better</em> handled by tools. tools have a different view (they can see the whole app) and optimization opportunities than a VM","m.mentions":{"user_ids":["@johndaviddalton:matrix.org"]},"msgtype":"m.text"},"ts":1712677368786,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GSM0JKy3xYXnMEx1wdQ84-ujTBOCdCY6ey_OkFQwJLc"},
{"content":{"body":"we designed a super static module system. it is not surprising to me that it has been leveraged to success with ahead-of-time tooling","m.mentions":{},"msgtype":"m.text"},"ts":1712677394638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CS9FR_UkrdBrY_TcOCOJJozO_7hM4cKQZU-JL9baMEc"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw eslint refuses to implement features prior to stage 4, though that's maybe a them problem\n\nwell, there's babel-eslint","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw eslint refuses to implement features prior to stage 4, though that&#39;s maybe a them problem</blockquote></mx-reply>well, there's babel-eslint","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$X6K2WzavJ12Mpy-qvEIlEH11BczF2afWwa5vfqYBnJ0"}},"msgtype":"m.text"},"ts":1712677450049,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0sMgkfToSzFialgx5vTlLBEJ4vRX-BmAeO3J19BJULo"},
{"content":{"body":"(`@babel/eslint-parser` as of babel 7)","format":"org.matrix.custom.html","formatted_body":"(<code>@babel/eslint-parser</code> as of babel 7)","m.mentions":{},"msgtype":"m.text"},"ts":1712677583828,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ivILtKJFOYKXUfGtSJJovb44MHLHhS1P4d6L8cKlqe4"},
{"content":{"body":"> <@ljharb:matrix.org> stage 3 is when it gets shipped in (most) browsers tho\n\nIMO browsers *should* ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>stage 3 is when it gets shipped in (most) browsers tho</blockquote></mx-reply>IMO browsers <em>should</em> ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U"}},"msgtype":"m.text"},"ts":1712677623198,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dyun70cErmcjvhSvMUjeEptqXENvi2tHHrWCjL_kpe0"},
{"content":{"body":"> <@ljharb:matrix.org> stage 3 is when it gets shipped in (most) browsers tho\n\n * I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0k5_d9chP3BO0vSazmYFB4lKyGvGDB56E8oUUHOvy9U?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>stage 3 is when it gets shipped in (most) browsers tho</blockquote></mx-reply> * I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{},"m.new_content":{"body":"I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","format":"org.matrix.custom.html","formatted_body":"I'd be happiest if browsers ship features like this at that point, but if they want to leave some features out of browsers for now (but we still assess that the feature is solid enough for Stage 3), maybe they can just let them sit in that bucket. Doesn't require holding back 2.7 or 3.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dyun70cErmcjvhSvMUjeEptqXENvi2tHHrWCjL_kpe0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677642696,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ix5BVk32WLQLUKLPeB8Ads_5tRiXb0EbmlnWDqRdYqo"},
{"content":{"body":"3 is a pretty clear signal, that's the big purpose of 2.7. i agree it wouldn't require holding back 2.7","m.mentions":{},"msgtype":"m.text"},"ts":1712677653695,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$No9tNtoSZRC6fCsyIwy4vONhjI-KfKsagTQj9s6yrok"},
{"content":{"body":"so is this feature going to encourage the dreaded \"barrel\" module pattern?","msgtype":"m.text"},"ts":1712677703429,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"},
{"content":{"body":"> <@michaelficarra:matrix.org> so is this feature going to encourage the dreaded \"barrel\" module pattern?\n\nit's about optimizing the feature--no encouragement is needed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so is this feature going to encourage the dreaded &quot;barrel&quot; module pattern?</blockquote></mx-reply>it's about optimizing the feature--no encouragement is needed","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"}},"msgtype":"m.text"},"ts":1712677716398,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo"},
{"content":{"body":"While that's technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don't want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.","m.mentions":{},"msgtype":"m.text"},"ts":1712677724114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE"},
{"content":{"body":"agree","m.mentions":{},"msgtype":"m.text"},"ts":1712677744020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EBAdkBHequnnq-sgBfkhGi-hdV80BYaR1WYhiAHNGg4"},
{"content":{"body":"the two design spaces are honestly different","m.mentions":{},"msgtype":"m.text"},"ts":1712677749469,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HT50Tp1qWRB1Rqti1xeQhG0_s-WfVDswbMAO24k5oi8"},
{"content":{"body":"the constraints are different","m.mentions":{},"msgtype":"m.text"},"ts":1712677754285,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CZClTpEwQuHofjTOPwrzP_ecKoKjyYwjxF_1m5pmf08"},
{"content":{"body":"> <@michaelficarra:matrix.org> so is this feature going to encourage the dreaded \"barrel\" module pattern?\n\noof, i hadn't thought about that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so is this feature going to encourage the dreaded &quot;barrel&quot; module pattern?</blockquote></mx-reply>oof, i hadn't thought about that.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rd_1ayzQ-P4dSGZvXr8hA-na3uYJ4o-6iihu9VUD9AA"}},"msgtype":"m.text"},"ts":1712677757420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bsJLErGFwJ-58ZBAUljglKetk-HIXActc3k7UFAfR5E"},
{"content":{"body":"> <@bakkot:matrix.org> While that's technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don't want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.\n\nah OK well I'm happy to get browser commitments like that; I don't want to discourage that. I haven't thought this through enough.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>While that&#39;s technically true, I would be happier revising our process if we want to do that - I would prefer that stage 2.7/3 be taken as a commitment from browsers to implement a feature at some point. I don&#39;t want to get to a point where browsers allow features to reach 2.7 that they intend to never implement.</blockquote></mx-reply>ah OK well I'm happy to get browser commitments like that; I don't want to discourage that. I haven't thought this through enough.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BxEuHTiAfQOPOGKCmv1RY9icM0MJnQpXtrcLwjmT5BE"}},"msgtype":"m.text"},"ts":1712677769454,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CxM9vbFWghDv5A5Qm_gw2PJWGuLl6lWf6an4GVreXU"},
{"content":{"body":"> <@littledan:matrix.org> it's about optimizing the feature--no encouragement is needed\n\nwell it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />it's about optimizing the feature--no encouragement is needed</blockquote></mx-reply>well it doesn&#39;t provide any benefit to those not using the pattern, so it seems like encouragement to use it","m.relates_to":{"m.in_reply_to":{"event_id":"$mZiw-_55qy_vtnH7Jo1BOEhS0ESVEugTG1Mwj7hQtOo"}},"msgtype":"m.text"},"ts":1712677794372,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo"},
{"content":{"body":"littledan: i have been thinking about for most of this year, i'll give you something more thought out soon","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: i have been thinking about for most of this year, i'll give you something more thought out soon","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1712677806567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MwGjI--nt2ep9340N7mnRkjEORFmjLhXbBooTA4UHA4"},
{"content":{"body":"> <@michaelficarra:matrix.org> well it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it\n\nI think you're overthinking it... there's a lot of existing usages of this pattern, and it's slow, and it is hard to migrate away from (a lot of effort has gone into this migration)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>well it doesn't provide any benefit to those not using the pattern, so it seems like encouragement to use it</blockquote></mx-reply>I think you're overthinking it... there's a lot of existing usages of this pattern, and it's slow, and it is hard to migrate away from (a lot of effort has gone into this migration)","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0ZpSuZiXUR9QQquflOAXesi6FrUwgMxDleYAaIAuSCo"}},"msgtype":"m.text"},"ts":1712677865282,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$epwTbyKh2CX26o_OBcuZcVnmIPwMn70W5gODBTszlZ0"},
{"content":{"body":"it's not about newly incentivizing usage","m.mentions":{},"msgtype":"m.text"},"ts":1712677880789,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ErpsEKBXr8Y27U4iQ2wL1_qdXMnfRF-Lr5koSdQHBek"},
{"content":{"body":"so someone who wants to get similar tree-shakeability can just dump this pattern?","msgtype":"m.text"},"ts":1712677914139,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k"},
{"content":{"body":"> <@michaelficarra:matrix.org> so someone who wants to get similar tree-shakeability can just dump this pattern?\n\nsure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this pattern in your dependency tree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so someone who wants to get similar tree-shakeability can just dump this pattern?</blockquote></mx-reply>sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this pattern in your dependency tree","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k"}},"msgtype":"m.text"},"ts":1712677944635,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jGNauoRZPncesEiWilyu4lqTLmATLBv79XIv4xwF-HI"},
{"content":{"body":"> <@michaelficarra:matrix.org> so someone who wants to get similar tree-shakeability can just dump this pattern?\n\n * sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jety45d5o5OVSYkk-o9gZ7bwzYnpqb_lkb0hGnl-u8k?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so someone who wants to get similar tree-shakeability can just dump this pattern?</blockquote></mx-reply> * sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","m.mentions":{},"m.new_content":{"body":"sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","format":"org.matrix.custom.html","formatted_body":"sure, if you can get all your dependencies to dump this pattern, then you'll have no reason to use this feature in your dependency tree","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jGNauoRZPncesEiWilyu4lqTLmATLBv79XIv4xwF-HI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712677964025,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PdUI1AUMLdoC_NeNX1_XbpPBY9ysO_B_bzBtkrWMXDI"},
{"content":{"body":"there's a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw","m.mentions":{},"msgtype":"m.text"},"ts":1712677979639,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY"},
{"content":{"body":"(coinbase's RN app's binary size dropped 71% when we banned barrel exports)","m.mentions":{},"msgtype":"m.text"},"ts":1712677998876,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OyT8s2zYReI_tvZK1dXwHf5EhNaGU4qXr4zH2hYURrY"},
{"content":{"body":" * (coinbase's RN app's binary size dropped 71% when we/they banned barrel exports back in 2021)","m.mentions":{},"m.new_content":{"body":"(coinbase's RN app's binary size dropped 71% when we/they banned barrel exports back in 2021)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OyT8s2zYReI_tvZK1dXwHf5EhNaGU4qXr4zH2hYURrY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678020499,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MAW8-hfQgb50UkNrkn33-DsJfMLjP-nRuSpruG-N_88"},
{"content":{"body":"> <@ljharb:matrix.org> there's a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw\n\nyes, they're doing good work; I think those two groups (the ecosystem effort and this proposal) should be understood to be supporting each other","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>there&#39;s a growing group of vocal folks in the ecosystem telling people to get rid of barrel modules, fwiw</blockquote></mx-reply>yes, they're doing good work; I think those two groups (the ecosystem effort and this proposal) should be understood to be supporting each other","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lVpmHhycQFzWYI6EEwx8-8zbWnellw4gkYqY57uEoIY"}},"msgtype":"m.text"},"ts":1712678032538,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6m5VOtm9tk7NHBK7nnq_qOSJnb5_td4illZppI-4esA"},
{"content":{"body":"even with import defer, barrel exports will still result in a larger app than \"just import what you need directly\", no?","m.mentions":{},"msgtype":"m.text"},"ts":1712678082621,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o3tvUNPiarvyM0CuYbFHzltO-ts2Qz7HzU8IabmtQ1E"},
{"content":{"body":"I don't think \"this feature is not useful in browsers\" is a new category of objection?","m.mentions":{},"msgtype":"m.text"},"ts":1712678093357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RHzHyUehCv90c3cTfgcy0WGviDc5dEwteK3HoH_ns1M"},
{"content":{"body":"that's like... the main objection","m.mentions":{},"msgtype":"m.text"},"ts":1712678097161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I"},
{"content":{"body":"can someone remind me why people ever did that in the first place?","msgtype":"m.text"},"ts":1712678103284,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA"},
{"content":{"body":"i don't know why people tend to like \"god objects\"","m.mentions":{},"msgtype":"m.text"},"ts":1712678123889,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M"},
{"content":{"body":" * i don't know why people tend to like \"god objects\", deep imports is The Way","m.mentions":{},"m.new_content":{"body":"i don't know why people tend to like \"god objects\", deep imports is The Way","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678144526,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6anb0Bd_LUs9weE5KaHAi0H3yIJb4OVifiGLnElmlRY"},
{"content":{"body":" * i don't know why people tend to like \"god objects\", deep imports is The Way. but they do tend to like them.","m.mentions":{},"m.new_content":{"body":"i don't know why people tend to like \"god objects\", deep imports is The Way. but they do tend to like them.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3-w3R9HTHCzF1gZRjvoUsfagCQQN1fnUHcPq4fdi_9M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678153557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jhUCNTXYGT24Px4MWB_J1_IjRkx9j8azNTr5Wn5YGac"},
{"content":{"body":"maybe the pattern was copied from python modules and `__init__.py`?","format":"org.matrix.custom.html","formatted_body":"maybe the pattern was copied from python modules and <code>__init__.py</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712678162865,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$b4AofASjzIxDyg0wiTcKCV8yL2rQsD1GKLqnfF-Ffv0"},
{"content":{"body":"> <@michaelficarra:matrix.org> can someone remind me why people ever did that in the first place?\n\nI always understood it to be a response to named exports being a thing, making use of that syntactic space, whereas require returning a single function was more natural","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>can someone remind me why people ever did that in the first place?</blockquote></mx-reply>I always understood it to be a response to named exports being a thing, making use of that syntactic space, whereas require returning a single function was more natural","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J3j6B4m0y7MNiYq_DewIR2KXa8nBd-cBhTUynmRpevA"}},"msgtype":"m.text"},"ts":1712678168294,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Nalk3JEPlNkfv3V2FDu1kukklKZJl2plbzICTSNYATY"},
{"content":{"body":"i've seen people have a visceral preference for one `import` keyword that has N identifiers, instead of N `import` keywords","format":"org.matrix.custom.html","formatted_body":"i've seen people have a visceral preference for one <code>import</code> keyword that has N identifiers, instead of N <code>import</code> keywords","m.mentions":{},"msgtype":"m.text"},"ts":1712678176208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lDqebJSFlc-ftiByyPNto437msQpvHXxll_aX3OdsPE"},
{"content":{"body":"> <@bakkot:matrix.org> that's like... the main objection\n\nyeah i feel like most of our concerns that have caused feature compromises and redesigns boil down to this. sometimes it's couched in more specific terms, like \"performance footgun\" etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that&#39;s like... the main objection</blockquote></mx-reply>yeah i feel like most of our concerns that have caused feature compromises and redesigns boil down to this. sometimes it's couched in more specific terms, like \"performance footgun\" etc","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$g6ckMaPwTgYUu-fhkCKeq2e1fz9lAKbu2CxGcLPaf5I"}},"msgtype":"m.text"},"ts":1712678204865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2lH3N4Mu0VDYuLfnEruNQWxdYqzM0k0NbsCiZTB3IEw"},
{"content":{"body":"I'm finding it very hard to find sympathy for these people...","msgtype":"m.text"},"ts":1712678219201,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc"},
{"content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports","m.mentions":{},"msgtype":"m.text"},"ts":1712678220961,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE"},
{"content":{"body":" * also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason)","m.mentions":{},"m.new_content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678226477,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z2iHIRKkP7aNrKKdTEgrzf839tRPYB4L-iaQ93QQd80"},
{"content":{"body":" * also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason) which drove increased usage of named exports","m.mentions":{},"m.new_content":{"body":"also i think that a number of major IDEs implemented auto-refactoring features for named exports but ignored default exports (for no technical reason) which drove increased usage of named exports","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DFEc1qexY_OCFvIakFRnKE-H2h8xfsDcGY66UbXl6VE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678235173,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$opCnGfh0HdDBwPlRenjuuqrYM_pbWK8Tt0trSYJetWI"},
{"content":{"body":"> <@michaelficarra:matrix.org> I'm finding it very hard to find sympathy for these people...\n\nwhy does it matter whose fault this is? it's currently a performance issue, and this is a solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I&#39;m finding it very hard to find sympathy for these people...</blockquote></mx-reply>why does it matter whose fault this is? it's currently a performance issue, and this is a solution.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MSSRvJwog8PFpWuzUq6nKRf13CrnVv_4XjmCzjEVWmc"}},"msgtype":"m.text"},"ts":1712678246804,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QrTbRFI5m4xCik94Kil7x9lhYwdRN3dsa7U7na6Dpww"},
{"content":{"body":"but is \"don't use barrel files\" perhaps a better solution?","m.mentions":{},"msgtype":"m.text"},"ts":1712678281118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-6h1qI6tQWzwjHb8exCgMkb6L6Gckg-2oMIK6r2NSYc"},
{"content":{"body":" * but is \"don't use barrel files\" perhaps a better solution? (genuine question)","m.mentions":{},"m.new_content":{"body":"but is \"don't use barrel files\" perhaps a better solution? (genuine question)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-6h1qI6tQWzwjHb8exCgMkb6L6Gckg-2oMIK6r2NSYc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678288095,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mNEbWIpEpX9I4fW5WLdT3ze5-SwJ06OWG1Taq-vl6wQ"},
{"content":{"body":"Barrels are so convenient, and so awful for performance (both browsers and bundlers)","msgtype":"m.text"},"ts":1712678333606,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA"},
{"content":{"body":"I dunno, there's a lot of recommendations about performance that people aren't taking up...","m.mentions":{},"msgtype":"m.text"},"ts":1712678336043,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xw09WNjxRO7ThZXrf8CV8vImnU3gP4933Kn6hWW8WcE"},
{"content":{"body":"@guybedford:matrix.org Your mic is echoing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40guybedford%3Amatrix.org\">@guybedford</a> Your mic is echoing","msgtype":"m.text"},"ts":1712678364498,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Wgjbz0vemgjE9nsY4iCCoee2Nx_HcVyLf7kanAXUSN0"},
{"content":{"body":"but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free","m.mentions":{},"msgtype":"m.text"},"ts":1712678387003,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"},
{"content":{"body":"sorry guybedford bad timing","format":"org.matrix.custom.html","formatted_body":"sorry <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> bad timing","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1712678399606,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$-88KpEaVYzwhWqA36Trig96Zvu45uTBpMkfAK0Gl8UQ"},
{"content":{"body":"Timebox!","msgtype":"m.text"},"ts":1712678406237,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IhgzEVCqhXtu0pg9jebqKlvEFzzhTKhUdKXdVR2Yv2A"},
{"content":{"body":"and if the people in question were willing to do work to get performance they already can already do so, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712678409827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OgP8oKyg8EZsBQdWCy1cpKIqqVzGLEV44ko1EwYs-BQ"},
{"content":{"body":"@nicolo-ribaudo:matrix.org your async feedback from me is that, for now, I'm unconvinced by the motivation","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40nicolo-ribaudo%3Amatrix.org\">@nicolo-ribaudo</a> your async feedback from me is that, for now, I&#39;m unconvinced by the motivation","msgtype":"m.text"},"ts":1712678473988,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fNaO0HlMWmKTZrY2mZBcQnuWhktLg2SL89z1lp7jBm4"},
{"content":{"body":"> <@jridgewell:matrix.org> Barrels are so convenient, and so awful for performance (both browsers and bundlers)\n\nconvenience often makes for better paving than good intentions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Barrels are so convenient, and so awful for performance (both browsers and bundlers)</blockquote></mx-reply>convenience often makes for better paving than good intentions","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA"}},"msgtype":"m.text"},"ts":1712678490332,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pOFBqyWH4rD1SgZtobFUk9Y2tQGMzWVJR7HV959AnEU"},
{"content":{"body":"> <@bakkot:matrix.org> but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free\n\nThe uptake is a \"semver-minor\" change--it doesn't require that importers update","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but wouldn&#39;t this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn&#39;t just give you performance for free</blockquote></mx-reply>The uptake is a \"semver-minor\" change--it doesn't require that importers update","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"}},"msgtype":"m.text"},"ts":1712678508748,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B2NMcJeNEoOnLJ4s2_KQ3jyJ8yTGm2yJHHlOc5L94Fs"},
{"content":{"body":"> <@jridgewell:matrix.org> Barrels are so convenient, and so awful for performance (both browsers and bundlers)\n\n * convenience often makes for better road-paving than good intentions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$II_WPzo8HClqVZDLDgC59MiRgv2dhfuInBavMhiSBZA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Barrels are so convenient, and so awful for performance (both browsers and bundlers)</blockquote></mx-reply> * convenience often makes for better road-paving than good intentions","m.mentions":{},"m.new_content":{"body":"convenience often makes for better road-paving than good intentions","format":"org.matrix.custom.html","formatted_body":"convenience often makes for better road-paving than good intentions","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pOFBqyWH4rD1SgZtobFUk9Y2tQGMzWVJR7HV959AnEU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712678529563,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y2ViRmx8U4ibeMdeYxLtIMQBXE-WD2kWCteNyI0MPG0"},
{"content":{"body":"so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to `import defer` to avoid the education problem?","format":"org.matrix.custom.html","formatted_body":"so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to <code>import defer</code> to avoid the education problem?","m.mentions":{},"msgtype":"m.text"},"ts":1712678584365,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8"},
{"content":{"body":"education's super hard so maybe that's the right tradeoff to make, tbf","m.mentions":{},"msgtype":"m.text"},"ts":1712678621791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GJYEMEhopzkny7dO-CMNbFT63G9ONuefW2oQSQ00lN4"},
{"content":{"body":"> <@bakkot:matrix.org> but wouldn't this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn't just give you performance for free\n\nIt moves the changes from the consumers to the library itself","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but wouldn&#39;t this be a recommendation for performance in exactly the same way? it requires work to adopt; it doesn&#39;t just give you performance for free</blockquote></mx-reply>It moves the changes from the consumers to the library itself","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$78Yil0iLlBanweINR3IFkK0IYMhl9Lak0Me_mm2afuw"}},"msgtype":"m.text"},"ts":1712679002762,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W2cFJCnZJOddIuNQ-il82P63s82zgfPXpcTDUI6QSj4"},
{"content":{"body":"So 1 instead of N","m.mentions":{},"msgtype":"m.text"},"ts":1712679008224,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AugGXYPf1dfK6Fft5Sgx2pNwSZSaVmK6JTskzocph9o"},
{"content":{"body":"> <@ljharb:matrix.org> so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to `import defer` to avoid the education problem?\n\nThere is currently a choice to make between convenience and performance, and the goal here is to not make them exclusive","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so importers keep thinking they're doing a fine thing, when they're doing a horrible thing, and the entire ecosystem has to move to <code>import defer</code> to avoid the education problem?</blockquote></mx-reply>There is currently a choice to make between convenience and performance, and the goal here is to not make them exclusive","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nP2SN5HHFzMfl76jAT0u0wWA-HMvBazxUG1dRXcQoU8"}},"msgtype":"m.text"},"ts":1712679047173,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-PRh4LRmkaga7emVlGXIy3vQ0WuqkrsqZtULQmlihOk"},
{"content":{"body":"does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place?","format":"org.matrix.custom.html","formatted_body":"does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place?","m.mentions":{},"msgtype":"m.text"},"ts":1712680987539,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs"},
{"content":{"body":" * does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","format":"org.matrix.custom.html","formatted_body":" * does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","m.mentions":{},"m.new_content":{"body":"does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","format":"org.matrix.custom.html","formatted_body":"does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681011739,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PWnAJmTKhhcWktcGaLCTNZ6FtT9kuODHrS1dQWqWsmA"},
{"content":{"body":"in a language without so many hidden effects all over the place, it would be","msgtype":"m.text"},"ts":1712681165602,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8V08tVTXAU68b-XLnLfDW5lJMGV8uAuMbTPRwrHYC9A"},
{"content":{"body":"> <@ljharb:matrix.org> does using `import defer` on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.\n\nSorry no, it's `export defer`/`export optional` that helps with barrel files","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>does using <code>import defer</code> on a barrel file with a bundler that supports it give the ~same results as using deep imports in the first place? because treeshaking so far still doesn't fully achieve \"only importing what you need in the first place\" afaik.</blockquote></mx-reply>Sorry no, it's <code>export defer</code>/<code>export optional</code> that helps with barrel files","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Knd_CdfsWGRnqvdf0KA8BZVr4-KNdJJE4xxT1gMpyvs"}},"msgtype":"m.text"},"ts":1712681365896,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rzKTPePHNs7p60wKMMAHyp1zlx3FBVysoolqoWZjUNk"},
{"content":{"body":"And `export defer` would have the same result as using deep imports","format":"org.matrix.custom.html","formatted_body":"And <code>export defer</code> would have the same result as using deep imports","m.mentions":{},"msgtype":"m.text"},"ts":1712681390264,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aDInC4Zma2KvKoSa1Sm1MWqBTCmLqk6oPBJ8b8W2F9o"},
{"content":{"body":"ok, so that's a compelling argument in favor of that one","msgtype":"m.text"},"ts":1712681402350,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZXNkgpCLwI_gAYQWUTB-8_3jI4CR9eBGx4_Jsgg2TQ4"},
{"content":{"body":"so `import defer` would be to lessen the downside of importing a barrel file that did not use `export defer`?","format":"org.matrix.custom.html","formatted_body":"so <code>import defer</code> would be to lessen the downside of importing a barrel file that did not use <code>export defer</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712681494893,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0"},
{"content":{"body":"And the boundary is still at the `export defer` level, so if you do\n```js\n// main.js\nimport { x } from \"library;\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library;\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712681524637,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE"},
{"content":{"body":" * And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":" * <p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"m.new_content":{"body":"And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load `y` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load <code>y</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681529264,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6Gare2sBR0omQYXi8_WPaCmGD1-KuOiYf4W7esV1yL8"},
{"content":{"body":" * And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load/run the code for `const y = 2` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":" * <p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load/run the code for <code>const y = 2</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"m.new_content":{"body":"And the boundary is still at the `export defer` level, so if you do\n\n```js\n// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n```\n\nit will also load/run the code for `const y = 2` (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules","format":"org.matrix.custom.html","formatted_body":"<p>And the boundary is still at the <code>export defer</code> level, so if you do</p>\n<pre><code class=\"language-js\">// main.js\nimport { x } from \"library\";\n\n// library\nexport defer { x, y } from \"./x-and-y\";\nexport defer { z } from \"./z\";\n\n// library/x-and-y\nexport const x = 1;\nexport const y = 2;\n</code></pre>\n<p>it will also load/run the code for <code>const y = 2</code> (so it's not complete dead code elimination), but gives the building block to remove code if you put unrelated code in separate modules</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GzSFJ8uAABnm8vCkbE5U7e6OC-GjMEQRJ3LZhRHPOLE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712681559112,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kdPj-3-OLndx4sfVZCFuFeEM4aDY44gZT8aKYdqobhY"},
{"content":{"body":"Exactly like deep imports","m.mentions":{},"msgtype":"m.text"},"ts":1712681575016,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$v8DNOz8bjuerX3NdHR8CwonhhG5LpUk8sja3VNNFxww"},
{"content":{"body":"> <@ljharb:matrix.org> so `import defer` would be to lessen the downside of importing a barrel file that did not use `export defer`?\n\n`import defer` is not really related to barrel file","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so <code>import defer</code> would be to lessen the downside of importing a barrel file that did not use <code>export defer</code>?</blockquote></mx-reply><code>import defer</code> is not really related to barrel file","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RFfZGcgvsQ8_RAz-SCZOYKb4RnI__hNd6oa0KRytRD0"}},"msgtype":"m.text"},"ts":1712681594206,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0eItVWsD34OjIEmyDNMo5pKwSyaqkthxApo9-GHMZ-I"},
{"content":{"body":"It's in general for \"big modules subgraphs\"","m.mentions":{},"msgtype":"m.text"},"ts":1712681608915,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wZzD803LLdU8ExFxFIUVsgzsclC5KV4J1d7fK0F3yjg"},
{"content":{"body":"Even if you have a file with a single export but many dependencies, `import defer` is useful there","format":"org.matrix.custom.html","formatted_body":"Even if you have a file with a single export but many dependencies, <code>import defer</code> is useful there","m.mentions":{},"msgtype":"m.text"},"ts":1712681620275,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jmhhkkE24was34ngvjKHPLaUtB9I-ttDbbfXQ4kPibM"},
{"content":{"body":"One thing that's important to understand is, the barrel file stuff doesn't relate to the motivation for `import defer`--they solve for totally unrelated issues, just both about loading less code","format":"org.matrix.custom.html","formatted_body":"One thing that's important to understand is, the barrel file stuff doesn't relate to the motivation for <code>import defer</code>--they solve for totally unrelated issues, just both about loading less code","m.mentions":{},"msgtype":"m.text"},"ts":1712681640084,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SGkfKWZIzmL92D43z2heEJcKlW_-c-DyQ7d-dPbQbW8"},
{"content":{"body":"Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.","m.mentions":{},"msgtype":"m.text"},"ts":1712682886864,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q9jGEc0t_N3oCkMCVvuQz2Z7YDMkUH1wcyRgfiKyIjM"},
{"content":{"body":"I agree with Kevin that this isn't especially confusing","msgtype":"m.text"},"ts":1712682998985,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mb_Hv4K8w9tPm91dhgzok9zHj8ScI4fpncD92rtH8yc"},
{"content":{"body":" * <del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","format":"org.matrix.custom.html","formatted_body":" * <del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","m.mentions":{},"m.new_content":{"body":"<del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","format":"org.matrix.custom.html","formatted_body":"<del>Agree with the various arguments for minimalism here, we just don't have any reason to go into this fractional stuff or BigInts, and IsSafeInteger is a good test.</del> I don't have a strong opinion about any of this and am just happy for range to happen","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Q9jGEc0t_N3oCkMCVvuQz2Z7YDMkUH1wcyRgfiKyIjM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683077970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rVEblExXVliNhaCgHk7tY8a1sMhEVkzhoBtoudHE5qc"},
{"content":{"body":"is there maybe justification to have this produce its own iterator subclass that can have optimised helpers implemented on it?","msgtype":"m.text"},"ts":1712683086226,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4wy4L73RjHXPF9RuMmmvFesw64U0YchiZAQX-G5E4Hw"},
{"content":{"body":"like `.drop(1e300)` could be implemented very efficiently for this special iterator","format":"org.matrix.custom.html","formatted_body":"like <code data-md=\"`\">.drop(1e300)</code> could be implemented very efficiently for this special iterator","msgtype":"m.text"},"ts":1712683113888,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lNC1YqwRbHNHGHDsYMxTpB7oRqAcVljc_KhGPxt30PM"},
{"content":{"body":"I think `drop` and `take` are the only things which could have better implementations and I don't think it's worth doing just for those","format":"org.matrix.custom.html","formatted_body":"I think <code>drop</code> and <code>take</code> are the only things which could have better implementations and I don't think it's worth doing just for those","m.mentions":{},"msgtype":"m.text"},"ts":1712683147346,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uY-xA-ptgIbQkUZ-6yZqEBBEY_TNbCa8y-TIxrGy7RU"},
{"content":{"body":"and engines could do this optimization anyway","m.mentions":{},"msgtype":"m.text"},"ts":1712683178502,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AAA_RMMFxvWTwPP41jlWZ_YMNk9--uU3WizRmv0ijrc"},
{"content":{"body":"The original proposal includes `BigInt.range()`, don't remember why it is added in first place","format":"org.matrix.custom.html","formatted_body":"The original proposal includes <code>BigInt.range()</code>, don't remember why it is added in first place","m.mentions":{},"msgtype":"m.text"},"ts":1712683216703,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$DR2Q4zXTOhZ18dq-XA_S2sDRKB-_uNe3llfrxNE91N0"},
{"content":{"body":"I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.","format":"org.matrix.custom.html","formatted_body":"I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.","m.mentions":{},"msgtype":"m.text"},"ts":1712683225275,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\nseems a valid use case :P","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>seems a valid use case :P","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683270762,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$0eJDAblxcLh77RGAs9vOunYy_9QrBLDZZT8SX-pO2yg"},
{"content":{"body":"to waldemar's point, yes, there are some editorial bugs, but nothing that's not fixable","msgtype":"m.text"},"ts":1712683271214,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ED1Ij2aeWgQwd6nGqbneMgyVIL3cMjo59Tkitl1mNZI"},
{"content":{"body":"it hasn't passed editorial review yet","msgtype":"m.text"},"ts":1712683281391,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$71VDXLi2FvNfgX5tR4Wv-G8RwFiqc1ivakb_APTw3so"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\noh yeah?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>oh yeah?","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683295623,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wamyGQRqBFYDf5ZnjNMj0xXbJyd-vDL9NdEIm201oNg"},
{"content":{"body":"like, give me monotonic ids starting with <large number> or something?","m.mentions":{},"msgtype":"m.text"},"ts":1712683316277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I"},
{"content":{"body":"i have no bigint range use cases, but \"works for one kind of numeric primitive and not the others\" seems like a big problem","m.mentions":{},"msgtype":"m.text"},"ts":1712683339093,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, give me monotonic ids starting with <large number> or something?\n\nyes, something like that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like, give me monotonic ids starting with &lt;large number&gt; or something?</blockquote></mx-reply>yes, something like that","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iM0F8YLsZogSySAWHxa5tiTlQUR73iQn2iQWXLa2Z9I"}},"msgtype":"m.text"},"ts":1712683375359,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$VfxOjRXbZ0RLvWSIqHLHceTFpmxqxha1gcNmQH5P4rI"},
{"content":{"body":"Are bigints still massively slower than numbers?","msgtype":"m.text"},"ts":1712683408592,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c"},
{"content":{"body":"I'd prefer it work for bigint just so I'm not having to coerce using `BigInt()` when I need to do math with other bigints.","format":"org.matrix.custom.html","formatted_body":"I'd prefer it work for bigint just so I'm not having to coerce using <code>BigInt()</code> when I need to do math with other bigints.","m.mentions":{},"msgtype":"m.text"},"ts":1712683411141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sAZyTdIHJ1pe3YDEFbU5IuqrtxkJgSLsRFLZg2gnUsY"},
{"content":{"body":"> <@ljharb:matrix.org> i have no bigint range use cases, but \"works for one kind of numeric primitive and not the others\" seems like a big problem\n\nwhy is that a big problem?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i have no bigint range use cases, but &quot;works for one kind of numeric primitive and not the others&quot; seems like a big problem</blockquote></mx-reply>why is that a big problem?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KkSmltig0vQDpQwDltlhKK24KIEcr0RqSFjexyWmeso"}},"msgtype":"m.text"},"ts":1712683411609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HHaixvtJhqNGxB9OIG1Uqi2BgIkvjs2QQVM-Kar89l8"},
{"content":{"body":"> <@jridgewell:matrix.org> Are bigints still massively slower than numbers?\n\nhaha yes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Are bigints still massively slower than numbers?</blockquote></mx-reply>haha yes","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8keaJAs_EvUOppAoeNf_d2IvdvqRoXhwsgnE5wLrV_c"}},"msgtype":"m.text"},"ts":1712683416139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V2MezzezA6QanmX3dPmHrNgWxXi1oDH29I2nuqkC3zc"},
{"content":{"body":"Mathieu Hofman: can you add yourself to the notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: can you add yourself to the notes?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1712683431728,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$bZmzny1Zp7T9a1oT6t0RE05qdsR8hkZuwwteb0v5IFM"},
{"content":{"body":"it's an inconsistency. one of those warts we'd inevitably have to make a \"fill in the table\" proposal for in a few years.","m.mentions":{},"msgtype":"m.text"},"ts":1712683437368,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk"},
{"content":{"body":"Timestamps in microseconds as a use case?","msgtype":"m.text"},"ts":1712683439128,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI"},
{"content":{"body":"it's fine if we want to wait for that, but is there a reason why it's beneficial to defer it?","m.mentions":{},"msgtype":"m.text"},"ts":1712683466548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ACQ6CdYz8mXg4eHBfUypA2mpKOD4bY0--m5KKSLwpNs"},
{"content":{"body":"> <@ljharb:matrix.org> it's an inconsistency. one of those warts we'd inevitably have to make a \"fill in the table\" proposal for in a few years.\n\nnot everyone shares that goal though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it&#39;s an inconsistency. one of those warts we&#39;d inevitably have to make a &quot;fill in the table&quot; proposal for in a few years.</blockquote></mx-reply>not everyone shares that goal though","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fr2eO6O4E0e9UXx659rv0W7Jlu0xvxFrsPIvNv_ntvk"}},"msgtype":"m.text"},"ts":1712683468683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M1x6CSZom0qXWUst48KCdBittPPUlIPwxL1zSYzCWQ4"},
{"content":{"body":"that is true of most of the goals we all have :-)","m.mentions":{},"msgtype":"m.text"},"ts":1712683493581,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cNTwxiCi4OFpirk-iKHTLX_7Zn_nheljSEi4gYY5J-o"},
{"content":{"body":"right, which is why i pushed back on \"seems like a big problem\"","m.mentions":{},"msgtype":"m.text"},"ts":1712683509283,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s3amtzg8ogxp_0n25oFT0EXi417Uv640IDhyUuefHsM"},
{"content":{"body":"it's not that inconsistent - the Math methods do not and never will take Numbers","m.mentions":{},"msgtype":"m.text"},"ts":1712683519072,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0imADxQO4sM-3sryMj_p0i4DRYMilAUis-vM-rDmQyE"},
{"content":{"body":" * it's not that inconsistent - the Math methods do not and never will take BigInts","m.mentions":{},"m.new_content":{"body":"it's not that inconsistent - the Math methods do not and never will take BigInts","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0imADxQO4sM-3sryMj_p0i4DRYMilAUis-vM-rDmQyE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683523971,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h_Dau6XkM-cVT0LhbPzsUYONLSgzbBr9USMEPzSUeQA"},
{"content":{"body":"in any case i was given a concrete use case i found plausible","m.mentions":{},"msgtype":"m.text"},"ts":1712683535052,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$V8QvOHAxAePLy2Qw22Z9ythsREUNfaBQiw9WaYEAbIo"},
{"content":{"body":"in fact I don't think we have _anything_ that takes only Number of BigInt?","format":"org.matrix.custom.html","formatted_body":"in fact I don't think we have <em>anything</em> that takes only Number of BigInt?","m.mentions":{},"msgtype":"m.text"},"ts":1712683538744,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kCFc46ZRi_ZlpZV2BO_h3OtY4DIlFPTUWxFZsxFSPmE"},
{"content":{"body":"so i'm happy with bigints being accepted here","m.mentions":{},"msgtype":"m.text"},"ts":1712683539682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0QKw4YmC07u5B3tdW7LrQoq9F31XYZnZTBkloVc0N2I"},
{"content":{"body":"but yeah I also prefer accepting BigInt here","m.mentions":{},"msgtype":"m.text"},"ts":1712683553572,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uLWei4JxDEObJK1NnVGJp8g8ffShAY81qDyvN-0QFEA"},
{"content":{"body":"> <@eemeli:mozilla.org> Timestamps in microseconds as a use case?\n\nI think the idea was to introduce Temporal.Instant ranges for this use case in the future","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>Timestamps in microseconds as a use case?</blockquote></mx-reply>I think the idea was to introduce Temporal.Instant ranges for this use case in the future","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wZOcrFo8idK7qghoSgsm_WWhRmkpeiroZsnLePnCArI"}},"msgtype":"m.text"},"ts":1712683573522,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc"},
{"content":{"body":"> <@pchimento:igalia.com> I think the idea was to introduce Temporal.Instant ranges for this use case in the future\n\nMaybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I think the idea was to introduce Temporal.Instant ranges for this use case in the future</blockquote></mx-reply>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway","m.mentions":{"user_ids":["@pchimento:igalia.com","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc"}},"msgtype":"m.text"},"ts":1712683690892,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8"},
{"content":{"body":"> <@pchimento:igalia.com> I think the idea was to introduce Temporal.Instant ranges for this use case in the future\n\n * Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-rhktymx10cKxR1Qz7afbaldMr661Y0OlXHhcV79uc?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I think the idea was to introduce Temporal.Instant ranges for this use case in the future</blockquote></mx-reply> * Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?","m.mentions":{},"m.new_content":{"body":"Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?","format":"org.matrix.custom.html","formatted_body":"Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?","m.mentions":{"user_ids":["@pchimento:igalia.com","@eemeli:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712683695922,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$klczD-uAXFSBSECJTlL-cfuSKeWy5KwjFc5gionHwuY"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> I might expect to be able to use `Iterator.range()` to generate unique identifiers, in which case possibly a BigInt type is desirable.\n\ncan you explain this use case more? I think unique id should be something like crypto.getRandomUUID()","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>I might expect to be able to use <code>Iterator.range()</code> to generate unique identifiers, in which case possibly a BigInt type is desirable.</blockquote></mx-reply>can you explain this use case more? I think unique id should be something like crypto.getRandomUUID()","m.mentions":{"user_ids":["@bradfordcsmith:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VhCw8c5mVLLI9V0406HbQY2giQJAFnKGZqmKyYsei6M"}},"msgtype":"m.text"},"ts":1712683721761,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FwIaNQBVRgKR_j1PmH_9f30-DQ7ERuPL-xp-hH6uoVI"},
{"content":{"body":"might not need to be unique","m.mentions":{},"msgtype":"m.text"},"ts":1712683757689,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VYM1aB08gyvy0z367hQyZrJPvsW0P96wmOka3ujJLNA"},
{"content":{"body":"also autoincrementing is fine sometimes, not everything has the german tank problem","m.mentions":{},"msgtype":"m.text"},"ts":1712683776590,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OOlprLQszh3Q7tfXQec383eKPafjGEtBP7xApSb8hr8"},
{"content":{"body":"Python bans floats in range() right?","m.mentions":{},"msgtype":"m.text"},"ts":1712683800346,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$j9Hf_xL8P-Kc7riBX8lX4NW0kzXlwAa39Snv5ohv6wM"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1712683846389,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$LOlfSsP1l9kT6lUuAhEqqwT6QoJ7voUlerKNEO2ac5c"},
{"content":{"body":"python's popular computing library has `numpy.arange()` which does suffer from unexpected iterations due to floating point errors, and `numpy.linspace()` which does not","format":"org.matrix.custom.html","formatted_body":"python's popular computing library has <code>numpy.arange()</code> which does suffer from unexpected iterations due to floating point errors, and <code>numpy.linspace()</code> which does not","m.mentions":{},"msgtype":"m.text"},"ts":1712683960106,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$hmrQd1htKOuD4pgkTMYAMhBfzzyqQgnvoV_vTFgS4wM"},
{"content":{"body":"...decimal.","m.mentions":{},"msgtype":"m.text"},"ts":1712683988960,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$6mrgp9Hg4ZENpJBxuwOdAEDo36JYGZD7_D2g1njw-_I"},
{"content":{"body":"I do like linspace ","m.mentions":{},"msgtype":"m.text"},"ts":1712684038185,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rbxBFvB84Azsyt4sXyy712UziVti2TmVwS0ktRirpho"},
{"content":{"body":"the options object does leave room for it","m.mentions":{},"msgtype":"m.text"},"ts":1712684053086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw"},
{"content":{"body":"You can just use a range of integers and .map for what Matthew is proposing, right?","msgtype":"m.text"},"ts":1712684097125,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA"},
{"content":{"body":"FWIW it would be nice to have extra time to iron out all the editorial issues as well","msgtype":"m.text"},"ts":1712684102238,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WkX7FZrF-4i5JIByvN18mFBqwkmx5W2B1y2-jEc5iZY"},
{"content":{"body":"then we can have a really solid 2.7 advancement","msgtype":"m.text"},"ts":1712684109610,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AKxrPtwrafNLMc23nIcR7TL1od9jhyLxXbfKVkLMLeg"},
{"content":{"body":"I'll definitely +1 this feature either with or without fractional values.","m.mentions":{},"msgtype":"m.text"},"ts":1712684183494,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$H__yRdb-TcfKxcyq9zLrFhf_n7V0S4RIm-5pmDvGnV0"},
{"content":{"body":"same though I do prefer accepting fractional values","m.mentions":{},"msgtype":"m.text"},"ts":1712684199158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yGkl99gojJ9MdiQGcaG-Q24CJovvGxyOncvm6SaDGPI"},
{"content":{"body":"but if left out it's not the end of the world","m.mentions":{},"msgtype":"m.text"},"ts":1712684212090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hl-hmGPSwS1J09MbO5QgkkW4jUFiKukGY58eKyxwY-U"},
{"content":{"body":"> <@bakkot:matrix.org> the options object does leave room for it\n\nI think linspace should be a separate method?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the options object does leave room for it</blockquote></mx-reply>I think linspace should be a separate method?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$orXQ_COD2Iy4diZvMWtYCLkmusIUJFlQjQKH-yr1GAw"}},"msgtype":"m.text"},"ts":1712684461148,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$Nku5ARkjkhXCbIlCFOImSsoCwsprakM21YfPJjMWU0k"},
{"content":{"body":"even 2-4x slower must still be faster than `.reduce((a, b) => a + b, -0)`","format":"org.matrix.custom.html","formatted_body":"even 2-4x slower must still be faster than <code data-md=\"`\">.reduce((a, b) =&gt; a + b, -0)</code>","msgtype":"m.text"},"ts":1712684490943,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bcq_hTI0ErZj_iKrrwo0L41rDn1REIY2-Efx36tPcMg"},
{"content":{"body":"As the original author of range floating issue, I prefer not accepting franctional values , and change the name from`Iterator.range` to `Iterator.integers` which make it even more clear to developers 😉 ","format":"org.matrix.custom.html","formatted_body":"As the original author of range floating issue, I prefer not accepting franctional values , and change the name from<code>Iterator.range</code> to <code>Iterator.integers</code> which make it even more clear to developers 😉","m.mentions":{},"msgtype":"m.text"},"ts":1712684638486,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$2dXO6kZl9DX9Zv_i9K01kyroRIJGtoLyKiOfm4Yfjfk"},
{"content":{"body":"`intRange`","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">intRange</code>","msgtype":"m.text"},"ts":1712684678306,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iWfOz0WgCnwQjNAhu439FDK6PIxQFtSvsDPJjgrlhRM"},
{"content":{"body":"Do people also need `ProductExact()` ?","format":"org.matrix.custom.html","formatted_body":"Do people also need <code>ProductExact()</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1712684794236,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$DbDoQmYJyalc5nOZ5QSzeaaTKoNJHnFA5QBqpvgpXrM"},
{"content":{"body":"I can't understand the difference in precision/exactitude between precise and exact in this case... can anyone else?","m.mentions":{},"msgtype":"m.text"},"ts":1712684811683,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k"},
{"content":{"body":"I think \"precise\" applies to all numbers. So `0.1 + 0.2` has a precise value, it's just not exactly `0.3`.","format":"org.matrix.custom.html","formatted_body":"I think \"precise\" applies to all numbers. So <code>0.1 + 0.2</code> has a precise value, it's just not exactly <code>0.3</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712684862675,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU"},
{"content":{"body":"kinda, i guess there is a notion of \"low precision\" vs \"high precision\" that's more commonly used than \"low exactitude\" vs \"high exactitude\"","m.mentions":{},"msgtype":"m.text"},"ts":1712684865962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM"},
{"content":{"body":"but in this particular case i don't really understand","m.mentions":{},"msgtype":"m.text"},"ts":1712684876832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R-8Zn0AqUQ2Gg3A624vJg06xhiDvIqncZIwyKAZXnjc"},
{"content":{"body":"\"Accurate\" would be more... accurate.","m.mentions":{},"msgtype":"m.text"},"ts":1712684879640,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$xUOyB7YDZ1kMCb-_jAIARIQKZrZ9_L3nNflY45dpmc8"},
{"content":{"body":"> <@littledan:matrix.org> I can't understand the difference in precision/exactitude between precise and exact in this case... can anyone else?\n\nIt just avoid some loss and more close to exact number?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I can&#39;t understand the difference in precision/exactitude between precise and exact in this case... can anyone else?</blockquote></mx-reply>It just avoid some loss and more close to exact number?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rfpi5gaY4bjblBRoXD2wfosPTZfh4GI9g7wFlM1sA9k"}},"msgtype":"m.text"},"ts":1712684901363,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$V-injLjVPWk9xr7WUWjHO96XGhY7ga0RyxpiA9s6k58"},
{"content":{"body":"> <@eemeli:mozilla.org> I think \"precise\" applies to all numbers. So `0.1 + 0.2` has a precise value, it's just not exactly `0.3`.\n\nhuh? but we're starting with Numbers, not those funny things that we don't have a representation of in JS","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>I think \"precise\" applies to all numbers. So <code>0.1 + 0.2</code> has a precise value, it's just not exactly <code>0.3</code>.</blockquote></mx-reply>huh? but we're starting with Numbers, not those funny things that we don't have a representation of in JS","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MA4NbRZZvsH-ulpgAgek_mLwowOQz9qbf9nJN7V1BxU"}},"msgtype":"m.text"},"ts":1712684903882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$so3TEUfBBKlUGTgoTH3CS24PCVbDhGNz2_Q4_wPRcAE"},
{"content":{"body":"> <@shuyuguo:matrix.org> kinda, i guess there is a notion of \"low precision\" vs \"high precision\" that's more commonly used than \"low exactitude\" vs \"high exactitude\"\n\nOK but it's not like we have a precision arg here... it's just supposed to get the right answer","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>kinda, i guess there is a notion of &quot;low precision&quot; vs &quot;high precision&quot; that&#39;s more commonly used than &quot;low exactitude&quot; vs &quot;high exactitude&quot;</blockquote></mx-reply>OK but it's not like we have a precision arg here... it's just supposed to get the right answer","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9UY7dygukhmd4O2oCGVUiOicG8f641Pwf0TLFwdW2ZM"}},"msgtype":"m.text"},"ts":1712684944788,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7sgsdsbanx8_c3exYMwyxF0Qum0hVjgpBL2Yx0VX_KE"},
{"content":{"body":"right?","m.mentions":{},"msgtype":"m.text"},"ts":1712684952294,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7ZwBMjnhcntJo4bhQt6rQp53ZtG9sfMeYtKyFIg1ADI"},
{"content":{"body":"right, in this particular case i don't understand the difference","m.mentions":{},"msgtype":"m.text"},"ts":1712684962826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R87_tWnZ6U8yH8T_TY6LX6tS8D2B9SLFf2RKOvY9SEI"},
{"content":{"body":"if it were up to me i'd name it sumSlow","m.mentions":{},"msgtype":"m.text"},"ts":1712684981299,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg"},
{"content":{"body":"like i would totally believe that if kevin's slides said \"this is named sumPrecise, but it may give the wrong impression\", someone will then say \"sumExact is better\"","m.mentions":{},"msgtype":"m.text"},"ts":1712685013140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LBarNReFG8sn4hrZcjmaActvV2IwYoErjAl-ocRMQeE"},
{"content":{"body":"To be clear, I'm fine with sumExact as a least worst option.","m.mentions":{},"msgtype":"m.text"},"ts":1712685015934,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$EFi0UhzfFJ8TUmSqC7to7HEo0orQd17ya4KUlCXrsT0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?\n\nYes, next follow on might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?</blockquote></mx-reply>Yes, next follow on might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@pchimento:igalia.com","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8"}},"msgtype":"m.text"},"ts":1712685053161,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5aHsSj0LFTh3DY-1SNtQpKkCtFIOW01QmaM3XX9Fa_c"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Maybe `Iterator.range(instant1, instant2, duration)` if `range` is overloaded anyway?\n\n * Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$17kxhtg22qSxu7I7u0eiNYeQuVkQAqxCva_y8dqfhb8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Maybe <code>Iterator.range(instant1, instant2, duration)</code> if <code>range</code> is overloaded anyway?</blockquote></mx-reply> * Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{},"m.new_content":{"body":"Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: `yield* a[Symbol.rangeTo](b, options)`, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","format":"org.matrix.custom.html","formatted_body":"Yes, next follow on proposal might be adding a new Symbol.rangeTo, and then range(a, b, options) where a is an object will do the following: <code>yield* a[Symbol.rangeTo](b, options)</code>, then you can add it on Temporal, Decimal (they're not primitive now) and your own class.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@pchimento:igalia.com","@eemeli:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5aHsSj0LFTh3DY-1SNtQpKkCtFIOW01QmaM3XX9Fa_c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712685061101,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Z8Kr6dOBYxCCgzzp5id-OzEvxMAVeazVAuZ-cWaW7w0"},
{"content":{"body":"Doesn't temporal use `from` ?","format":"org.matrix.custom.html","formatted_body":"Doesn't temporal use <code>from</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1712685061197,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GobWZ8jGXFGHu4vglDP92bTU92DAeXMmXIcjFpZ-vTM"},
{"content":{"body":"what name are we considering?","m.mentions":{},"msgtype":"m.text"},"ts":1712685072861,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dIarbor4lBc9cM_LBCJq4cbxMHeyIvl30whBSyhNODU"},
{"content":{"body":"So, I guess we should go with `Math.sumPreciseFrom()`?","format":"org.matrix.custom.html","formatted_body":"So, I guess we should go with <code>Math.sumPreciseFrom()</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712685136817,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$kyhydROu0zydi7QWQsdSxECSypTALIEet8OdS5MNuw4"},
{"content":{"body":"or not...","m.mentions":{},"msgtype":"m.text"},"ts":1712685153603,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$ac3Sgr3peUwCyLxHals3SrGA7C_WPgkyBFCeFY8UxAE"},
{"content":{"body":"it sounds like we are not doing `From` based on everyone else doesn't like it","format":"org.matrix.custom.html","formatted_body":"it sounds like we are not doing <code>From</code> based on everyone else doesn't like it","m.mentions":{},"msgtype":"m.text"},"ts":1712685157067,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wTFlOYEfFaO7Hb2Hcsj6anyGDjsKXLFVV4VpaiaPu3k"},
{"content":{"body":"so `sumExact` or `sumPrecise`","format":"org.matrix.custom.html","formatted_body":"so <code>sumExact</code> or <code>sumPrecise</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712685161303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FCE4R2-SV21Jy-shBCVEs7dgfGugVdwR2AVz8SgiXgw"},
{"content":{"body":"> <@shuyuguo:matrix.org> if it were up to me i'd name it sumSlow\n\nAs I understand, it is not necessarily slow.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if it were up to me i&#39;d name it sumSlow</blockquote></mx-reply>As I understand, it is not necessarily slow.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ty1d0KJC478JaSViJ2YV9RHjVeMCJtmzLJOuOafysmg"}},"msgtype":"m.text"},"ts":1712685269625,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$8FEUhzH4GxqBmUzho87JG22FrB2jIxc9jbSEyrgraMk"},
{"content":{"body":"dminor: can you clarify your last point in the notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: can you clarify your last point in the notes?","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1712685282708,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$_JvXZyqNXNqLFiuZY45wh5btFC1CcHPz_d67LKa9SOI"},
{"content":{"body":"yeah it is?","m.mentions":{},"msgtype":"m.text"},"ts":1712685283245,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c4rbKpcEbapVhPLhS6b4ZW61s2EhWF8j8Bo5CyKtLQA"},
{"content":{"body":"it's necessarily slow_er_","m.mentions":{},"msgtype":"m.text"},"ts":1712685288756,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw"},
{"content":{"body":"I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection","format":"org.matrix.custom.html","formatted_body":"I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection","m.mentions":{},"msgtype":"m.text"},"ts":1712685290160,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4"},
{"content":{"body":"Temporal uses `from` in many places and those functions do not take iterables, so I disagree with the Michael Ficarra 's statement that \"everything named from takes an iterable\"","format":"org.matrix.custom.html","formatted_body":"Temporal uses <code>from</code> in many places and those functions do not take iterables, so I disagree with the <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> 's statement that \"everything named from takes an iterable\"","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1712685323762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XXBoGgdzgWTwFHUO9rHOL-IZxhJpJaNxhPE_DtUdIpo"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> You can just use a range of integers and .map for what Matthew is proposing, right?\n\nIt's not ergonomic at all: `range(start * stepDivider, end * stepDivider, stepMultipler) | map(x => x / stepDivider)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>You can just use a range of integers and .map for what Matthew is proposing, right?</blockquote></mx-reply>It's not ergonomic at all: <code>range(start * stepDivider, end * stepDivider, stepMultipler) | map(x =&gt; x / stepDivider)</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TGaCUcuNClu6DywSzPie49y9bmQjt7ueGSLEnW_akyA"}},"msgtype":"m.text"},"ts":1712685363724,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XzaHrdVebrHVbdKQqb2A8uWgOA2bEzOe0vTupiAdQD4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection\n\nAgreed. \"Foo.from\" does imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection</blockquote></mx-reply>Agreed. \"Foo.from\" does imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4"}},"msgtype":"m.text"},"ts":1712685380889,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eP7M5Yr4EdaEclbwE70FlXOvzXHpPRQPYncwGl_i74M"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I was going to say that I dislike `From` because it currently means \"I'm creating something of this type from these other values\". `Iterator.from` creates an iterator, `Array.from` an array, `Object.fromEntries` an object. If we wanted this to contain from it should be on number (`Number.fromSum`), but also Number is not a collection\n\n * Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1o5KjHwC2qiJmY-8B_zabw7dPPXR15TQCRoTDYk1Vl4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I was going to say that I dislike <code>From</code> because it currently means \"I'm creating something of this type from these other values\". <code>Iterator.from</code> creates an iterator, <code>Array.from</code> an array, <code>Object.fromEntries</code> an object. If we wanted this to contain from it should be on number (<code>Number.fromSum</code>), but also Number is not a collection</blockquote></mx-reply> * Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{},"m.new_content":{"body":"Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a `Foo` from these inputs\"","format":"org.matrix.custom.html","formatted_body":"Agreed. \"Foo.from\" does not imply \"takes an iterable\", it imples \"make a <code>Foo</code> from these inputs\"","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$eP7M5Yr4EdaEclbwE70FlXOvzXHpPRQPYncwGl_i74M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712685388104,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xoW3BluQz69hbaakt_HI-GcchdGiG1wcWBsDXeLhPA0"},
{"content":{"body":"I'm having trouble understanding why we're bothering with an optimization for an error case","m.mentions":{},"msgtype":"m.text"},"ts":1712685462897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ERf4dvM6ka5gYCaY9qKHMZpD2ZGwGRskALQfG2enQg0"},
{"content":{"body":"I don't think arithmetic commutativity comes into play when we're talking about throwing, which is inherently not arithmetic","msgtype":"m.text"},"ts":1712685466107,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$s423aliccLDm8e6mBPCNz_bhlYGEu5dVoD0TK2t1Gls"},
{"content":{"body":"@littledan:matrix.org an iterable of Number producing a NaN is not an error case?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan</a> an iterable of Number producing a NaN is not an error case?","msgtype":"m.text"},"ts":1712685490356,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$q_8zK-xoA_JKR-vgZ8arYwHuFE8Oxw0BB_dJ--699nA"},
{"content":{"body":"I think NaN is kinda usually for error cases?","m.mentions":{},"msgtype":"m.text"},"ts":1712685525358,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M9RQLVIYcyUr1ChREdki4pbfuqu79XYLzbwvrdOcphk"},
{"content":{"body":"I get that it's within the domain of Numbers but.... when was the last time you wanted NaN to come up for you?","m.mentions":{},"msgtype":"m.text"},"ts":1712685545953,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$adiIKcijWMQvNLeUUFUlV1vKsMA-DewKqYbxJE8ZnBA"},
{"content":{"body":"at the business logic layer, maybe, but at this data processing layer, no","msgtype":"m.text"},"ts":1712685548733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g"},
{"content":{"body":"I have to drop, Eemeli and Matthew Gaudet will represent SpiderMonkey for the rest of the day.","m.mentions":{},"msgtype":"m.text"},"ts":1712685578109,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$W62wH6TllFdM02nm4CbJhljev3kJ8agOY8ckwzel4EI"},
{"content":{"body":"> <@michaelficarra:matrix.org> at the business logic layer, maybe, but at this data processing layer, no\n\nobviously we need a well-defined answer, but is this going to provide a meaningful speedup meaningfully often?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>at the business logic layer, maybe, but at this data processing layer, no</blockquote></mx-reply>obviously we need a well-defined answer, but is this going to provide a meaningful speedup meaningfully often?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PJHod5l5weMLyjElI4A6klHWHrKWHYYBzC9NBrqgq-g"}},"msgtype":"m.text"},"ts":1712685618622,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9Xl9yJphI_Y9aKrJ-GBkU1vudZYsyc__l4eQ9qyeMS8"},
{"content":{"body":"yes, iterators can yield very many values","msgtype":"m.text"},"ts":1712685638045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$krqY3-jceYd_S8dImT4yWS2yfiBy8u05M4Gs9c3Dli8"},
{"content":{"body":"a multi-hours' batch could be short-circuited immediately after starting instead of waiting until the end","msgtype":"m.text"},"ts":1712685664621,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YNYXPjDEf0MgFEjYIGNPwwnOCgjFerN3XWqhv25axrU"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's necessarily slow_er_\n\nAs https://en.wikipedia.org/wiki/Pairwise_summation \"Pairwise summation is the default summation algorithm in NumPy[8] and the Julia technical-computing language,[9] where in both cases it was found to have comparable speed to naive summation\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it&#39;s necessarily slow_er_</blockquote></mx-reply>As https://en.wikipedia.org/wiki/Pairwise_summation \"Pairwise summation is the default summation algorithm in NumPy[8] and the Julia technical-computing language,[9] where in both cases it was found to have comparable speed to naive summation\"","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m-ZIJwSBLd1vgpdFcKlWB3oPhg7p6zgggwQLW8yQhzw"}},"msgtype":"m.text"},"ts":1712685796007,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$1EZUIcqxXwFAi1g321Aq8lbmTql8z1xfIkuAOrniG5s"},
{"content":{"body":"eemeli: can you add yourself to the notes doc?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: can you add yourself to the notes doc?","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1712685862688,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$hBcZHE1oi2mJQFFAgJpC0DRSU51qn7qFhNrOqH11FHY"},
{"content":{"body":"I had to miss the presentation, but why is empty list `-0`? (no opinion, just curious)","format":"org.matrix.custom.html","formatted_body":"I had to miss the presentation, but why is empty list <code data-md=\"`\">-0</code>? (no opinion, just curious)","msgtype":"m.text"},"ts":1712686191346,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$o77hdzB43975Kz7OZ1fBYW_egExbT3Mv8EEuYNUR0r0"},
{"content":{"body":"it is the identity of floating point addition","m.mentions":{},"msgtype":"m.text"},"ts":1712686211098,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qB4iyW5vEblBFjhGzG_Voi-oZzqNLH4BxuZhEkIOsek"},
{"content":{"body":"@jridgewell:matrix.org `Object.is(-0 + -0, -0)`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40jridgewell%3Amatrix.org\">@Justin Ridgewell</a> <code data-md=\"`\">Object.is(-0 + -0, -0)</code>","msgtype":"m.text"},"ts":1712686236658,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$07bGZCv-5VgsavAUJYlrfq-JqWbnIeDkebhHAcC0XK8"},
{"content":{"body":"(while +0 + -0 = +0)","m.mentions":{},"msgtype":"m.text"},"ts":1712686258835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yWP6yp7vg5vZQp64f5iN_EB3gmkoXitaj-Mpgva8UDw"},
{"content":{"body":"Why is `-0` the starting point?","format":"org.matrix.custom.html","formatted_body":"Why is <code data-md=\"`\">-0</code> the starting point?","msgtype":"m.text"},"ts":1712686280612,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DmUyAJQt4YG5UDw1spdpxl9S7bDcqCK27pw9a2HhP_U"},
{"content":{"body":"If I’m interpreting those correctly....","msgtype":"m.text"},"ts":1712686292340,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0WDoM7D3Q9K1FvhJswu1Q8q6l5CWcfu2gNq648b1kcE"},
{"content":{"body":"what does starting point mean?","m.mentions":{},"msgtype":"m.text"},"ts":1712686292664,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DGxzyyxvJlkpT_Y32cYDb8-fXu4VKPkv8cVL7tbu5zI"},
{"content":{"body":"`let sum = -0; for (const i of array) sum += i`","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">let sum = -0; for (const i of array) sum += i</code>","msgtype":"m.text"},"ts":1712686317197,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bQkmpYLF-IumIJ4jB9-o6h929ECXU1V8ZbT2_-Y1YnQ"},
{"content":{"body":"so that when `array` is `[-0]` you get the correct answer","format":"org.matrix.custom.html","formatted_body":"so that when <code data-md=\"`\">array</code> is <code data-md=\"`\">[-0]</code> you get the correct answer","msgtype":"m.text"},"ts":1712686342686,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cVTJh1AaIK-DGQSGGLdcyeO6xBu-ol1RfGogittLk4A"},
{"content":{"body":"The equality question feels very like the question of `==` on value types in Java.","format":"org.matrix.custom.html","formatted_body":"The equality question feels very like the question of <code>==</code> on value types in Java.","m.mentions":{},"msgtype":"m.text"},"ts":1712686666171,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$_yLyVS_e-IhdFnythZI6QejjxO9pZ1aJ3lwodFDIis8"},
{"content":{"body":"the slides will reference project Valhalla IIRC","m.mentions":{},"msgtype":"m.text"},"ts":1712686772485,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc"},
{"content":{"body":"value types being the ones with lowercase names?","msgtype":"m.text"},"ts":1712686778459,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rRgG5N5CRlEoec3EadA5glBtsauzVayadGJVlmDIAmI"},
{"content":{"body":"(i.e. value objects for java)","m.mentions":{},"msgtype":"m.text"},"ts":1712686783209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BhEy8N1YIjPDd3I90YQu5UwzLL2Pad9-VcOag2urajE"},
{"content":{"body":"https://openjdk.org/projects/valhalla/","m.mentions":{},"msgtype":"m.text"},"ts":1712686799459,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aQD_x_bq6BBuT0DrRJbP6hq44NqVSWcCezX4seshKvI"},
{"content":{"body":"this presentation is so well structured 😍","msgtype":"m.text"},"ts":1712687062706,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R4iaOptsSGSZ1fKF_WWx-a3G2snbND3oIGgWSH_T3-M"},
{"content":{"body":"I really like the composite object approach though I would not call them \"CompositeKey\"","m.mentions":{},"msgtype":"m.text"},"ts":1712687158649,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FDtdxvwDo-49O8WtrVWkZZ04wEBNdNDUHBerhRaCF4o"},
{"content":{"body":"I linked a few userland implementations here: https://github.com/tc39/proposal-record-tuple/issues/387#issuecomment-2033531920 though I am sure there are others","m.mentions":{},"msgtype":"m.text"},"ts":1712687262113,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aCYH2vbTXjPbJjkGQBsTRYZEJ9HGBFpglMwJehMl0_Y"},
{"content":{"body":"Composite keys don't seem like a solution to case-insensitive Maps. I still strongly favor equals/hash.","m.mentions":{},"msgtype":"m.text"},"ts":1712687342219,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L7UMrIzQ9lIEVI1hLCcg_6NWoSdqLHkWUUOO9ykFdtw"},
{"content":{"body":"I think they solve a different problem - equals/hash doesn't let me write `groupBy` with the result of my comparator being a composite key (without doing a bunch of work)","format":"org.matrix.custom.html","formatted_body":"I think they solve a different problem - equals/hash doesn't let me write <code>groupBy</code> with the result of my comparator being a composite key (without doing a bunch of work)","m.mentions":{},"msgtype":"m.text"},"ts":1712687396465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G8NTW-SrmK2zC3h_Fw3GnEnC4ZiwgqHrBc3eZHWJ5KU"},
{"content":{"body":"but uniqBy without CompositeKey would cover that use case, no?","m.mentions":{},"msgtype":"m.text"},"ts":1712687397684,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$ko7aTLggMheqP3bxAHYxrSXdE40bZ2C3z3tq__KfyYc"},
{"content":{"body":"i.e., `new Map([], { comparer: caseInsensitiveStringComparer }`","format":"org.matrix.custom.html","formatted_body":"i.e., <code>new Map([], { comparer: caseInsensitiveStringComparer }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712687411763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v5D1M8lW2IdLBoXyQHhTNPZQEZjSM57LVqPnP3nNpY4"},
{"content":{"body":"@rbuckton:matrix.org it works fine, Unicode has case folding for tht","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton</a> it works fine, Unicode has case folding for tht","msgtype":"m.text"},"ts":1712687428924,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y-pWzdJA9P-xNxjiN8Bf535I3NHj_B6HaHNq-wfk-zc"},
{"content":{"body":"> <@bakkot:matrix.org> I think they solve a different problem - equals/hash doesn't let me write `groupBy` with the result of my comparator being a composite key (without doing a bunch of work)\n\nWouldn't you just do groupBy over anything you want?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$G8NTW-SrmK2zC3h_Fw3GnEnC4ZiwgqHrBc3eZHWJ5KU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I think they solve a different problem - equals/hash doesn't let me write <code>groupBy</code> with the result of my comparator being a composite key (without doing a bunch of work)</blockquote></mx-reply>Wouldn't you just do groupBy over anything you want?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G8NTW-SrmK2zC3h_Fw3GnEnC4ZiwgqHrBc3eZHWJ5KU"}},"msgtype":"m.text"},"ts":1712687451739,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ej5rGsfyDMhfLL1UhzNR7kTKy9-6qY3rsFre_HX1azA"},
{"content":{"body":"> <@michaelficarra:matrix.org> @rbuckton:matrix.org it works fine, Unicode has case folding for tht\n\nIt's an extra allocation, likely thrown away, for any given key comparison. equals/hash is defined once and reused","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Y-pWzdJA9P-xNxjiN8Bf535I3NHj_B6HaHNq-wfk-zc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton</a> it works fine, Unicode has case folding for tht</blockquote></mx-reply>It's an extra allocation, likely thrown away, for any given key comparison. equals/hash is defined once and reused","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Y-pWzdJA9P-xNxjiN8Bf535I3NHj_B6HaHNq-wfk-zc"}},"msgtype":"m.text"},"ts":1712687506331,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vxYbmaKOnx77wCAdnU5UHn2G2ZrKjhuilK4WoR6E6gw"},
{"content":{"body":"I don't know what that means? I am asking about, for example, I have a list of { name, employer, city } objects, and I want to collect them by `{ employer, city }`. with composite key that's just `Map.groupBy(vals, x => Tuple(x.employer, x.city))`. with equals/hash there's a bunch more ceremony ","format":"org.matrix.custom.html","formatted_body":"I don't know what that means? I am asking about, for example, I have a list of { name, employer, city } objects, and I want to collect them by <code>{ employer, city }</code>. with composite key that's just <code>Map.groupBy(vals, x =&gt; Tuple(x.employer, x.city))</code>. with equals/hash there's a bunch more ceremony","m.mentions":{},"msgtype":"m.text"},"ts":1712687550079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7HlSefgBsIJ4UevN2kg1LwsuEFeC8knZQrBfBl-b4NI"},
{"content":{"body":"I have already written a `groupBy` that uses `equals`/hash`, and an equaler that already does tuple structural equality. ","format":"org.matrix.custom.html","formatted_body":"I have already written a <code>groupBy</code> that uses <code>equals</code>/hash`, and an equaler that already does tuple structural equality.","m.mentions":{},"msgtype":"m.text"},"ts":1712687628586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I0P1hAui81XTwyiiV7TZDcwnTiO4jLrBG9ioaShlS6c"},
{"content":{"body":"That library also supports `[Equatable.equals](obj)` and `[Equatable.hash]()` that can be used if an equaler is not provided, so a given composite key just builds on top of that.","format":"org.matrix.custom.html","formatted_body":"That library also supports <code>[Equatable.equals](obj)</code> and <code>[Equatable.hash]()</code> that can be used if an equaler is not provided, so a given composite key just builds on top of that.","m.mentions":{},"msgtype":"m.text"},"ts":1712687697949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TRcQGBEt9njqxeNKQCBXTlrBfmsYkRG0R4FCjis0ryc"},
{"content":{"body":"sure, it can certainly be done, there's just a bunch more ceremony","m.mentions":{},"msgtype":"m.text"},"ts":1712687754406,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LkfIasb6q3ta75sN1u5F23bx3VKZ6lQm1ZZ983N40v0"},
{"content":{"body":"It is far more flexible, IMO. ","m.mentions":{},"msgtype":"m.text"},"ts":1712687771494,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DJkTtmL93tqKqhfUxAEIeUcJiJncAxqwpdhT_2fnzIU"},
{"content":{"body":"it's just different","m.mentions":{},"msgtype":"m.text"},"ts":1712687795816,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5NprbSkbCFSDzwOfTfcMi8F8RWUG4yRf23YQdMp28lw"},
{"content":{"body":"it solves different problems","m.mentions":{},"msgtype":"m.text"},"ts":1712687799911,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B_Altn-qeXCD_dDI9hXprRaYdaHkGtsvu1K0t6fO8iQ"},
{"content":{"body":"Having to turn everything into a `CompositeKey` seems like a lot more ceremony to me.","format":"org.matrix.custom.html","formatted_body":"Having to turn everything into a <code>CompositeKey</code> seems like a lot more ceremony to me.","m.mentions":{},"msgtype":"m.text"},"ts":1712687810888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xfPOnQn9IbxivIIcPc5eyWfML7H3j7AtwuqkHFasti4"},
{"content":{"body":"Map.p.getImprecise, anyone?","msgtype":"m.text"},"ts":1712687821391,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$WHRo2tBA5tAGBtN4d7GJDdnJsdKgrbAdZkGQpRfiPPc"},
{"content":{"body":"`CompositeKey` can be built on equals/hash, the other is not true.","format":"org.matrix.custom.html","formatted_body":"<code>CompositeKey</code> can be built on equals/hash, the other is not true.","m.mentions":{},"msgtype":"m.text"},"ts":1712687826158,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PNwfQBfulsPh3Tx5ghOQokqgYsmCp9kfKWsZQZE1Dwk"},
{"content":{"body":"`Map.groupBy(vals, x => Tuple(x.employer, x.city))` is very close to zero ceremony","format":"org.matrix.custom.html","formatted_body":"<code>Map.groupBy(vals, x =&gt; Tuple(x.employer, x.city))</code> is very close to zero ceremony","m.mentions":{},"msgtype":"m.text"},"ts":1712687863443,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JPROrn7Vnp9kXW-qIRO2DPKK33CPUx5fiL48zHBYbhg"},
{"content":{"body":"that's exactly how I think about the problem","m.mentions":{},"msgtype":"m.text"},"ts":1712687867700,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7ThCY-gE-VXuQhU_1pPRWbc5VCScLH9Tf_jjfHv4azo"},
{"content":{"body":"Plus, AFAIK equals/hash is how every implementation implements maps natively, it's just not exposed to user code.","m.mentions":{},"msgtype":"m.text"},"ts":1712687882084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xgGvyBKSJ5vJqJeTktcJpw-ibk9n3l_NnCdEmvIg5UA"},
{"content":{"body":"For that case, maybe. What about `map.set(key, value)` though? You have to write `map.set(new CompositeKey(foo.a, foo.b), value)` or `map.get(new CompositeKey(foo.a, foo.b))`. With equals/hash, you can set it up once and just do `map.set(foo, value)` or `map.get(foo)`.","format":"org.matrix.custom.html","formatted_body":"For that case, maybe. What about <code>map.set(key, value)</code> though? You have to write <code>map.set(new CompositeKey(foo.a, foo.b), value)</code> or <code>map.get(new CompositeKey(foo.a, foo.b))</code>. With equals/hash, you can set it up once and just do <code>map.set(foo, value)</code> or <code>map.get(foo)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712688025551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O6bQ_BvhNbOQXFI49Mb7H0ui56snHp8olQQKl2TFl0k"},
{"content":{"body":"but if my map is not keyed by `foo`, I don't want it to behave that way?","format":"org.matrix.custom.html","formatted_body":"but if my map is not keyed by <code>foo</code>, I don't want it to behave that way?","m.mentions":{},"msgtype":"m.text"},"ts":1712688054638,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BhjoqBGrWvTvke1h8x5J7x_9j05xEi-Y2hSAQ2Af1IY"},
{"content":{"body":"I want to use a composite key for that case","m.mentions":{},"msgtype":"m.text"},"ts":1712688061683,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L6WRIzV0gMuCaTrQ58koGfLGqUaJbN5fTWzg6EDYxOg"},
{"content":{"body":"with a Map constructor hook, you could set it up once too","m.mentions":{},"msgtype":"m.text"},"ts":1712688062171,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vEVtivm39EYoKzBnjBDfrLNjce4wwMH5ugk6GDyINLY"},
{"content":{"body":" * with a Map constructor hook, you could set it up once too with composite keys","m.mentions":{},"m.new_content":{"body":"with a Map constructor hook, you could set it up once too with composite keys","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$vEVtivm39EYoKzBnjBDfrLNjce4wwMH5ugk6GDyINLY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712688076022,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VlPCp3waILCvz1z6aPZ3gT76U_xJhWMA3FWx1NbsP6E"},
{"content":{"body":"You can use a composite key for that case, I'd like to *not* have to use composite key for all of the other cases.","format":"org.matrix.custom.html","formatted_body":"You can use a composite key for that case, I'd like to <em>not</em> have to use composite key for all of the other cases.","m.mentions":{},"msgtype":"m.text"},"ts":1712688079943,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gRzXRZKmar1czFCHMDWGV0Kn3aKb99EMhtMJIBAXH8Y"},
{"content":{"body":"> <@rbuckton:matrix.org> It is far more flexible, IMO.\n\nit's a lot more risk prone","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DJkTtmL93tqKqhfUxAEIeUcJiJncAxqwpdhT_2fnzIU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It is far more flexible, IMO. </blockquote></mx-reply>it's a lot more risk prone","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DJkTtmL93tqKqhfUxAEIeUcJiJncAxqwpdhT_2fnzIU"}},"msgtype":"m.text"},"ts":1712688091916,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CMMp1XeGiIK5Bj3hQGD2qJwINRUZetELrhHjXstnPcw"},
{"content":{"body":"> <@ljharb:matrix.org> with a Map constructor hook, you could set it up once too with composite keys\n\nThe same is true for equals/hash.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vEVtivm39EYoKzBnjBDfrLNjce4wwMH5ugk6GDyINLY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>with a Map constructor hook, you could set it up once too with composite keys</blockquote></mx-reply>The same is true for equals/hash.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vEVtivm39EYoKzBnjBDfrLNjce4wwMH5ugk6GDyINLY"}},"msgtype":"m.text"},"ts":1712688095103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EeKu4RdkS5B7g_ztMpYOvtFHF4hx_axtAGiNcg_P4Pc"},
{"content":{"body":"right. which is why it's not an argument in favor of either one.","m.mentions":{},"msgtype":"m.text"},"ts":1712688118424,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w3JhKdgou1ESu1nvUUtbkWs_GeqDIJ-aw_75TEkixWQ"},
{"content":{"body":"> <@mhofman:matrix.org> it's a lot more risk prone\n\nIt's far more efficient. If I want to write a custom collection that employs a hashtable, I'd rather have it easier to compute a hash.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CMMp1XeGiIK5Bj3hQGD2qJwINRUZetELrhHjXstnPcw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>it's a lot more risk prone</blockquote></mx-reply>It's far more efficient. If I want to write a custom collection that employs a hashtable, I'd rather have it easier to compute a hash.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CMMp1XeGiIK5Bj3hQGD2qJwINRUZetELrhHjXstnPcw"}},"msgtype":"m.text"},"ts":1712688132066,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AZsvfyelniZ6EUIDWw9zbxQ6Y9Z04FXWabUt0p14KBA"},
{"content":{"body":"For the set comparator, it seems like a prototype method `[Symbol.setCompare]` would work, and if Record/Tuple implement that function, then R&T Set/Map semantics should just work","format":"org.matrix.custom.html","formatted_body":"For the set comparator, it seems like a prototype method <code>[Symbol.setCompare]</code> would work, and if Record/Tuple implement that function, then R&amp;T Set/Map semantics should just work","m.mentions":{},"msgtype":"m.text"},"ts":1712688182144,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$F5HK-2pkZl_OqAxAFKRuqr2nsFmiHvJVvKXYGzO487U"},
{"content":{"body":"> <@rbuckton:matrix.org> You can use a composite key for that case, I'd like to *not* have to use composite key for all of the other cases.\n\nright that's what I mean by \"they are different\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gRzXRZKmar1czFCHMDWGV0Kn3aKb99EMhtMJIBAXH8Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You can use a composite key for that case, I'd like to <em>not</em> have to use composite key for all of the other cases.</blockquote></mx-reply>right that's what I mean by \"they are different\"","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gRzXRZKmar1czFCHMDWGV0Kn3aKb99EMhtMJIBAXH8Y"}},"msgtype":"m.text"},"ts":1712688189175,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QR7Wf_mW8EcJdDXWv_YUvXZ0gkVJ6SJjGCTaB1yS-po"},
{"content":{"body":"JS is a high level language, I don't want low level concept like computing hashes exposed to programmer, especially if they can cause erroneous executions if mishandled","m.mentions":{},"msgtype":"m.text"},"ts":1712688194994,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LMGH-v0QMN2PYIiDl72Hkj4LLBvBrrSgLhzNogUoUXI"},
{"content":{"body":"I'm not saying that we should have composite keys _instead of_ hash/equals, just that they solve different problems","format":"org.matrix.custom.html","formatted_body":"I'm not saying that we should have composite keys <em>instead of</em> hash/equals, just that they solve different problems","m.mentions":{},"msgtype":"m.text"},"ts":1712688205984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jp95g3vSmB5xvNJfZbrTp4Swapr83i5PdrQP6EP4ZFQ"},
{"content":{"body":"(I am _separately_ somewhat skeptical of hash/equals because of the concerns about inconsistency, especially since that seems like it might be a bug farm in engines themselves and not just programs. but that concern is unrelated to this.)","format":"org.matrix.custom.html","formatted_body":"(I am <em>separately</em> somewhat skeptical of hash/equals because of the concerns about inconsistency, especially since that seems like it might be a bug farm in engines themselves and not just programs. but that concern is unrelated to this.)","m.mentions":{},"msgtype":"m.text"},"ts":1712688330646,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EcjyJoaKMZ1TIiKaohU4VAyiBsKelvU7kfViHogdEuE"},
{"content":{"body":"> <@sffc:mozilla.org> For the set comparator, it seems like a prototype method `[Symbol.setCompare]` would work, and if Record/Tuple implement that function, then R&T Set/Map semantics should just work\n\nThat means the collection correctness is dependent on the stable behavior of its values. I want to use a collection that is resilient against misbehaving values","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F5HK-2pkZl_OqAxAFKRuqr2nsFmiHvJVvKXYGzO487U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>For the set comparator, it seems like a prototype method <code>[Symbol.setCompare]</code> would work, and if Record/Tuple implement that function, then R&amp;T Set/Map semantics should just work</blockquote></mx-reply>That means the collection correctness is dependent on the stable behavior of its values. I want to use a collection that is resilient against misbehaving values","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$F5HK-2pkZl_OqAxAFKRuqr2nsFmiHvJVvKXYGzO487U"}},"msgtype":"m.text"},"ts":1712688602058,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sBTYUSAZInMxnvz69KioZsoMvo4xce49i6_0EjQV1kA"},
{"content":{"body":"> <@sffc:mozilla.org> For the set comparator, it seems like a prototype method `[Symbol.setCompare]` would work, and if Record/Tuple implement that function, then R&T Set/Map semantics should just work\n\n * That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$F5HK-2pkZl_OqAxAFKRuqr2nsFmiHvJVvKXYGzO487U?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">@sffc:mozilla.org</a><br>For the set comparator, it seems like a prototype method <code>[Symbol.setCompare]</code> would work, and if Record/Tuple implement that function, then R&amp;T Set/Map semantics should just work</blockquote></mx-reply> * That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values","m.mentions":{},"m.new_content":{"body":"That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values","format":"org.matrix.custom.html","formatted_body":"That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sBTYUSAZInMxnvz69KioZsoMvo4xce49i6_0EjQV1kA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712688628218,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UHZu1My7EubeUOKtS87Zqf76-unTc-XF4S2uMXwlZoE"},
{"content":{"body":"+1 on pretty much everything rbuckton said.","format":"org.matrix.custom.html","formatted_body":"+1 on pretty much everything <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> said.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712688903753,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$nDirFyDw7nFg3sMSwpng8EKiGo9PCeTMWHdh0OXyTng"},
{"content":{"body":"> <@mhofman:matrix.org> That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values\n\nIf you do not trust the stability of your keys, then you could use a `CompositeKey` and pay the overhead for every get/set. If you do trust the stability of your keys, equals/hash lets you avoid that overhead.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sBTYUSAZInMxnvz69KioZsoMvo4xce49i6_0EjQV1kA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>That means the collection correctness is dependent on the stable behavior of its values. I want the ability to create a collection that is resilient against misbehaving values</blockquote></mx-reply>If you do not trust the stability of your keys, then you could use a <code>CompositeKey</code> and pay the overhead for every get/set. If you do trust the stability of your keys, equals/hash lets you avoid that overhead.","m.mentions":{"user_ids":["@mhofman:matrix.org","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sBTYUSAZInMxnvz69KioZsoMvo4xce49i6_0EjQV1kA"}},"msgtype":"m.text"},"ts":1712689096417,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KagNxALTGSrEpXcq91-UD74VBr9Xu_Um6ng0Eoa76N4"},
{"content":{"body":"I have a strong preference for fast, efficient JS. `CompositeKey` overhead does not seem fast/efficient.","format":"org.matrix.custom.html","formatted_body":"I have a strong preference for fast, efficient JS. <code>CompositeKey</code> overhead does not seem fast/efficient.","m.mentions":{},"msgtype":"m.text"},"ts":1712689245527,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XykOD8x-jJar2-nZKQbge8Ws-w27qjPMsLhHzCtDGeU"},
{"content":{"body":"> <@rbuckton:matrix.org> If you do not trust the stability of your keys, then you could use a `CompositeKey` and pay the overhead for every get/set. If you do trust the stability of your keys, equals/hash lets you avoid that overhead.\n\nNot if the only way is for the collection to ask the value. My answer was to sffc who was proposing that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KagNxALTGSrEpXcq91-UD74VBr9Xu_Um6ng0Eoa76N4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If you do not trust the stability of your keys, then you could use a <code>CompositeKey</code> and pay the overhead for every get/set. If you do trust the stability of your keys, equals/hash lets you avoid that overhead.</blockquote></mx-reply>Not if the only way is for the collection to ask the value. My answer was to <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a> who was proposing that","m.mentions":{"user_ids":["@rbuckton:matrix.org","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KagNxALTGSrEpXcq91-UD74VBr9Xu_Um6ng0Eoa76N4"}},"msgtype":"m.text"},"ts":1712689279339,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XF9TIlCbYt7A2crkD1Ue9EKaPVduqA76jQMoRJvoT7w"},
{"content":{"body":"equals/hash does not preclude `CompositeKey`, but rather is the building block a `CompositeKey` could be built on. It's also the building block using a `Uri` as a key could be built on too.","format":"org.matrix.custom.html","formatted_body":"equals/hash does not preclude <code>CompositeKey</code>, but rather is the building block a <code>CompositeKey</code> could be built on. It's also the building block using a <code>Uri</code> as a key could be built on too.","m.mentions":{},"msgtype":"m.text"},"ts":1712689311193,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hT9VjsoSV03DhIdbpgMf-aclq26Bskz2L8bGTaymUV4"},
{"content":{"body":"It's not something you could build `CompositeKey` on because `CompositeKey` has `===` equality","format":"org.matrix.custom.html","formatted_body":"It's not something you could build <code>CompositeKey</code> on because <code>CompositeKey</code> has <code>===</code> equality","m.mentions":{},"msgtype":"m.text"},"ts":1712689357781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EohQlJiHUNqTv8U1u_xr1LMvTGO6j9PMawizbGxIKXA"},
{"content":{"body":"and `===` will never invoke a userland `equals`","format":"org.matrix.custom.html","formatted_body":"and <code>===</code> will never invoke a userland <code>equals</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712689366586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qsApH_ujifEpq_ObGT2k-sHS9PmsGbETcX_uXWHktn4"},
{"content":{"body":"i missed that there was a configuration of the new direction that has new objects that have special ===?","m.mentions":{},"msgtype":"m.text"},"ts":1712689402843,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D8yLhngOY5qlZ4RlFY5yQTEZsdfMV8m46pYg75KRIc4"},
{"content":{"body":"If we could have `CompositeKey` have `===` equality, why would we not have R&T have `===` equality?","format":"org.matrix.custom.html","formatted_body":"If we could have <code>CompositeKey</code> have <code>===</code> equality, why would we not have R&amp;T have <code>===</code> equality?","m.mentions":{},"msgtype":"m.text"},"ts":1712689408265,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_d4__DxRyBsfEIkSaigXNU-RBOmiUJkbUJXgIqAjzwI"},
{"content":{"body":"that isn't any more acceptable than the R&T's overloading of ===","m.mentions":{},"msgtype":"m.text"},"ts":1712689411558,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tobqjEeRnzVrVIpb0JAMunUg2Q58w0AlucCd5KpZa-k"},
{"content":{"body":"> <@shuyuguo:matrix.org> i missed that there was a configuration of the new direction that has new objects that have special ===?\n\nthe CompositeKey thing he presented, with interning, which is already being done in userland","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$D8yLhngOY5qlZ4RlFY5yQTEZsdfMV8m46pYg75KRIc4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i missed that there was a configuration of the new direction that has new objects that have special ===?</blockquote></mx-reply>the CompositeKey thing he presented, with interning, which is already being done in userland","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D8yLhngOY5qlZ4RlFY5yQTEZsdfMV8m46pYg75KRIc4"}},"msgtype":"m.text"},"ts":1712689431610,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bei7MyTAaCkuRHlqGEBa7cuMb6_QHdmzW4zogG1dt9M"},
{"content":{"body":"can we change indexOf just for these new objects?","m.mentions":{},"msgtype":"m.text"},"ts":1712689433983,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VsIidUauakytiI4LOxRIVzS9Ri8N_FaVQJn7GXedxHs"},
{"content":{"body":"it was not one ACE advocated for","m.mentions":{},"msgtype":"m.text"},"ts":1712689440738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xVrOBlwl_CgfB0ti9WucxhZlQtsoy1H-jnqB_ff6QE0"},
{"content":{"body":"> <@bakkot:matrix.org> the CompositeKey thing he presented, with interning, which is already being done in userland\n\ntools compile away === or something?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bei7MyTAaCkuRHlqGEBa7cuMb6_QHdmzW4zogG1dt9M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the CompositeKey thing he presented, with interning, which is already being done in userland</blockquote></mx-reply>tools compile away === or something?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Bei7MyTAaCkuRHlqGEBa7cuMb6_QHdmzW4zogG1dt9M"}},"msgtype":"m.text"},"ts":1712689460417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KJlyufmA3nHhBPqY7xLrOh1TN-iEoz9Of6a1VUo2zDk"},
{"content":{"body":"no I mean they do interning","m.mentions":{},"msgtype":"m.text"},"ts":1712689474001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4FTqMABU46pmA8S0h10gAmNIi7tVDu0zKK8VQsoohs4"},
{"content":{"body":"> <@littledan:matrix.org> can we change indexOf just for these new objects?\n\nI assumed 'no', but never asked","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VsIidUauakytiI4LOxRIVzS9Ri8N_FaVQJn7GXedxHs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>can we change indexOf just for these new objects?</blockquote></mx-reply>I assumed 'no', but never asked","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VsIidUauakytiI4LOxRIVzS9Ri8N_FaVQJn7GXedxHs"}},"msgtype":"m.text"},"ts":1712689503311,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$8t4yOs8yAPx4H-ZS7Vt_QLsA5F4Htmv14YXWB4g8EXk"},
{"content":{"body":"> <@bakkot:matrix.org> no I mean they do interning\n\noh by \"===\" you mean they do interning?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4FTqMABU46pmA8S0h10gAmNIi7tVDu0zKK8VQsoohs4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>no I mean they do interning</blockquote></mx-reply>oh by \"===\" you mean they do interning?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4FTqMABU46pmA8S0h10gAmNIi7tVDu0zKK8VQsoohs4"}},"msgtype":"m.text"},"ts":1712689516687,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c18xM44_sMqPSU-8BLIpFbXt6Yr90Sgxv0nAa8aR-9g"},
{"content":{"body":"i see, ok","m.mentions":{},"msgtype":"m.text"},"ts":1712689540285,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Fz22RYJKOTKcVMOVC-54tptlbPdjcHBRCNVv2-ybuws"},
{"content":{"body":"https://github.com/benjamn/immutable-tuple/blob/485b32326349cb0329c749090cebf43f8359fa12/src/tuple.js#L12-L19","m.mentions":{},"msgtype":"m.text"},"ts":1712689543547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FgcJkKllPuuEERV0HO33rvv_vfrCB3MO4op4UR3ZFL8"},
{"content":{"body":"Isn't the discussion around `CompositeKey` predicated on R&T *not* having `===` equality? I have concerns about the GC overhead associated with `CompositeKey` using something like weakmaps/maps as either `CompositeKey(\"a\")` leaks forever, or it requires a FinalizationRegistry and the GC overhead for tracking/collection the object.","format":"org.matrix.custom.html","formatted_body":"Isn't the discussion around <code>CompositeKey</code> predicated on R&amp;T <em>not</em> having <code>===</code> equality? I have concerns about the GC overhead associated with <code>CompositeKey</code> using something like weakmaps/maps as either <code>CompositeKey(\"a\")</code> leaks forever, or it requires a FinalizationRegistry and the GC overhead for tracking/collection the object.","m.mentions":{},"msgtype":"m.text"},"ts":1712689561997,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0AT3_j87sBTez9LcZ-o2a_Xqyy01JHchKsWd6d7K13A"},
{"content":{"body":"> <@rbuckton:matrix.org> Isn't the discussion around `CompositeKey` predicated on R&T *not* having `===` equality? I have concerns about the GC overhead associated with `CompositeKey` using something like weakmaps/maps as either `CompositeKey(\"a\")` leaks forever, or it requires a FinalizationRegistry and the GC overhead for tracking/collection the object.\n\nyes, it's all predicated on === not being supported for R&T","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0AT3_j87sBTez9LcZ-o2a_Xqyy01JHchKsWd6d7K13A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Isn't the discussion around <code>CompositeKey</code> predicated on R&amp;T <em>not</em> having <code>===</code> equality? I have concerns about the GC overhead associated with <code>CompositeKey</code> using something like weakmaps/maps as either <code>CompositeKey(\"a\")</code> leaks forever, or it requires a FinalizationRegistry and the GC overhead for tracking/collection the object.</blockquote></mx-reply>yes, it's all predicated on === not being supported for R&amp;T","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0AT3_j87sBTez9LcZ-o2a_Xqyy01JHchKsWd6d7K13A"}},"msgtype":"m.text"},"ts":1712689582422,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F79gi71NRaEZUAwWOBsMQPbH0A-2nzcTxXXcaPQL_RQ"},
{"content":{"body":"rbuckton: that was also my confusion. the resolution is that CompositeKeys have interning semantics built in, they return deduplicated objects such that === just works like object ===, because it's literally deduplicated","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: that was also my confusion. the resolution is that CompositeKeys have interning semantics built in, they return deduplicated objects such that === just works like object ===, because it's literally deduplicated","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712689591243,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SFDH8v0s3xL1VsxdujBrhC_BxlHARbYWFpkyYKAj4qk"},
{"content":{"body":"or you forbid having a `CompositeKey` that doesn't contain an object, which is what userland does","format":"org.matrix.custom.html","formatted_body":"or you forbid having a <code>CompositeKey</code> that doesn't contain an object, which is what userland does","m.mentions":{},"msgtype":"m.text"},"ts":1712689599950,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2zJodzOvHLNxZwDlky2cHDyHkV2ZTUnYU-dL8Tiw6u8"},
{"content":{"body":"Interning semantics will have GC overhead","m.mentions":{},"msgtype":"m.text"},"ts":1712689610347,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$keUvTe0tzraWoFLoMBTNfgEOKaC4aiuJDC90YyNFEiY"},
{"content":{"body":"yes indeedy","m.mentions":{},"msgtype":"m.text"},"ts":1712689615760,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f6VFqmocrQwJ5eXqpv0QTDhKZsb0fcmDl4vgIvtgR5k"},
{"content":{"body":"but it's like, deterministic overhead that's always there, instead of non-deterministic overhead that engines have to tune for and hope they get it right for the largest swath of the code that runs","m.mentions":{},"msgtype":"m.text"},"ts":1712689655555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ph1dIrDqC08FutsIPY7HwJZ657VPl8rvU9ytQdS5Bxk"},
{"content":{"body":"> <@bakkot:matrix.org> or you forbid having a `CompositeKey` that doesn't contain an object, which is what userland does\n\n`CompsiteKey(obj, \"a\")` works, but `CompositeKey(\"a\", \"b\")` does not? That seems like a very unstable design. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2zJodzOvHLNxZwDlky2cHDyHkV2ZTUnYU-dL8Tiw6u8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>or you forbid having a <code>CompositeKey</code> that doesn't contain an object, which is what userland does</blockquote></mx-reply><code>CompsiteKey(obj, \"a\")</code> works, but <code>CompositeKey(\"a\", \"b\")</code> does not? That seems like a very unstable design.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2zJodzOvHLNxZwDlky2cHDyHkV2ZTUnYU-dL8Tiw6u8"}},"msgtype":"m.text"},"ts":1712689655943,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZfgzPQ4JntMpsGKdnNltBSOHoCuwzApo9NDDTp6VFkw"},
{"content":{"body":"which is a better place to be in, but... definitely still overhead, yes","m.mentions":{},"msgtype":"m.text"},"ts":1712689665699,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nz303BG0-jStSYgllhVcKP3X4elp3_1i7-_pS6hnk2g"},
{"content":{"body":"I dropped it after presenting the slides to some other people, they felt it complicated the question I was asking","m.mentions":{},"m.relates_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc","is_falling_back":true,"m.in_reply_to":{"event_id":"$EJdRzZ-hWUSy1gmiXeEqq39C12CrL04y6FHFARpLTNc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712689674973,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jbWZ-JIVp1jNFe2_Y0MmT1Qr38MeENTgdrrTG8BUXHU"},
{"content":{"body":"I believe that is NOT was was presented. `#[1] !== #[1] `","format":"org.matrix.custom.html","formatted_body":"I believe that is NOT was was presented. <code>#[1] !== #[1] </code>","m.mentions":{},"msgtype":"m.text"},"ts":1712689684220,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aSvua0QAqhb88kR04LQcOFPorbONBrb4S56nYJ-xi3A"},
{"content":{"body":"I'm concerned about the overhead of 1000s of `map.get(CompositeKey(a, b))` in a loop.","format":"org.matrix.custom.html","formatted_body":"I'm concerned about the overhead of 1000s of <code>map.get(CompositeKey(a, b))</code> in a loop.","m.mentions":{},"msgtype":"m.text"},"ts":1712689702786,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QbcZc5xFYsKiTmWPplVAvCqcpC9jLl5VbWaaD18d-yo"},
{"content":{"body":"I kinda like the idea of being able to do something like \n```\nnew Map([], { compare: 'duck' })\n```\nand have that \"just work\".","msgtype":"m.text"},"ts":1712689714530,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$yokkOft8rFQY1SA7sBv20SwvUgd5IV1CQdjTQBuGXhs"},
{"content":{"body":"but when used in collections, the equality used is the one supporting R&T equality","m.mentions":{},"msgtype":"m.text"},"ts":1712689714675,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1zC0caT5SoY1G5H-8Li28EPDQsgZ5fA7OfTOLm7rUZY"},
{"content":{"body":"> <@mhofman:matrix.org> I believe that is NOT was was presented. `#[1] !== #[1] `\n\nCompositeKey was presented, it's just not what was proposed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aSvua0QAqhb88kR04LQcOFPorbONBrb4S56nYJ-xi3A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I believe that is NOT was was presented. <code>#[1] !== #[1] </code></blockquote></mx-reply>CompositeKey was presented, it's just not what was proposed","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aSvua0QAqhb88kR04LQcOFPorbONBrb4S56nYJ-xi3A"}},"msgtype":"m.text"},"ts":1712689714758,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SiGPXdxks9GchpSk326B-6Vkhzn4UGeegZQCe6SOy00"},
{"content":{"body":"> <@eemeli:mozilla.org> I kinda like the idea of being able to do something like \n> ```\n> new Map([], { compare: 'duck' })\n> ```\n> and have that \"just work\".\n\n`@esfx/collections-hashmap` and `@esfx/equatable` does this. You can do, say:\n\n```js\nimport { HashMap } from \"@esfx/collections-hashmap\";\nimport { Uri } from \"./uri.js\";\n\nconst map = new HashMap(undefined, { equaler: Uri.equaler });\n```\n\nwhere `Uri.equaler` is just an object with `{ equals(a, b), hash(obj) }`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yokkOft8rFQY1SA7sBv20SwvUgd5IV1CQdjTQBuGXhs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>I kinda like the idea of being able to do something like <br/>```<br/>new Map([], { compare: &#39;duck&#39; })<br/>```<br/>and have that &quot;just work&quot;.</blockquote></mx-reply><p><code>@esfx/collections-hashmap</code> and <code>@esfx/equatable</code> does this. You can do, say:</p>\n<pre><code class=\"language-js\">import { HashMap } from \"@esfx/collections-hashmap\";\nimport { Uri } from \"./uri.js\";\n\nconst map = new HashMap(undefined, { equaler: Uri.equaler });\n</code></pre>\n<p>where <code>Uri.equaler</code> is just an object with <code>{ equals(a, b), hash(obj) }</code>.</p>\n","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yokkOft8rFQY1SA7sBv20SwvUgd5IV1CQdjTQBuGXhs"}},"msgtype":"m.text"},"ts":1712689849833,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vn-T_HfJT2cGC7ZZ_O2EXBBBBLynJik5Ym55sK8icdE"},
{"content":{"body":"I'm confused about the discussion about `CompositeKey` here as it's not what was proposed, but presented as background / historical context. A R/T would, unlike CompositeKey, not have `===` equality.","format":"org.matrix.custom.html","formatted_body":"I'm confused about the discussion about <code>CompositeKey</code> here as it's not what was proposed, but presented as background / historical context. A R/T would, unlike CompositeKey, not have <code>===</code> equality.","m.mentions":{},"msgtype":"m.text"},"ts":1712689895237,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LGVhzrE6w3dbY1xBHv-yfOKbGyy0q5T4cizrEDMxnG8"},
{"content":{"body":"I was under the impression these were discussed as possible directions to consider, with historical context as to prior discussions within TC39.","m.mentions":{},"msgtype":"m.text"},"ts":1712689994203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zdUxahpzWnxCdPLUPGyzurd84k_WX7h-Zhwd6VwEwjA"},
{"content":{"body":"rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism when added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism when added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712690078912,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pN9u-Jjb_r2MaAQ7r9KHA2vLfaAj7tFB5fTqWaXmPv4"},
{"content":{"body":"I should have been more clear. I was trying to say `Key(v1, v2) === Key(v1, v2)` is good in that it doesn't introduce a new form of equality. But from what I have heard from engines re R&T and from my own research it seems difficult to make them perform well at scale, the whole app has contention on one global interning table that requires GC hooks to clean up the unused keys.\n","format":"org.matrix.custom.html","formatted_body":"I should have been more clear. I was trying to say <code>Key(v1, v2) === Key(v1, v2)</code> is good in that it doesn't introduce a new form of equality. But from what I have heard from engines re R&amp;T and from my own research it seems difficult to make them perform well at scale, the whole app has contention on one global interning table that requires GC hooks to clean up the unused keys.","m.mentions":{},"msgtype":"m.text"},"ts":1712690085185,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$w3IO6SbkbblmhAB_jRLfjHNkiKcdUuxpIJjrJRJQ6JM"},
{"content":{"body":" * rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{},"m.new_content":{"body":"rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pN9u-Jjb_r2MaAQ7r9KHA2vLfaAj7tFB5fTqWaXmPv4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712690101056,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-HRvv6DNx4qBjhrS8UL9KfeHb6XS6wuWUnMx6NYzC9s"},
{"content":{"body":" * rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the prohgram at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the prohgram at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{},"m.new_content":{"body":"rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the prohgram at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the prohgram at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pN9u-Jjb_r2MaAQ7r9KHA2vLfaAj7tFB5fTqWaXmPv4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712690116519,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$tC8y8BVf-nEqyMU1SwGTwsOtkrjEEOQ8OBUEe9lHsJk"},
{"content":{"body":" * rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the program at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the program at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{},"m.new_content":{"body":"rbuckton: I don't want to build R&T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the program at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't want to build R&amp;T on top of a equals / hash mechanism IF there is any way that values can influence the hashing mechanism or any part of the program at the time they're added to a collection I created. I am fine if the collection defers to a construction time provided config.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pN9u-Jjb_r2MaAQ7r9KHA2vLfaAj7tFB5fTqWaXmPv4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712690168346,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3m22Jscs59dkliS1hYSXWVdCBnW25W8CogQBrVDbfMo"},
{"content":{"body":"The upside of equals/hash is that it is a known quantity. Numerous languages and runtimes use this, thus the caveats are known. ","m.mentions":{},"msgtype":"m.text"},"ts":1712690183327,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IfJep-Eg3GeYo6EaUSyIphOvXZoeUmk2HnDaYBYpQIc"},
{"content":{"body":"A `CompositeKey` based on equals/hash doesn't require complex GC semantics.","format":"org.matrix.custom.html","formatted_body":"A <code>CompositeKey</code> based on equals/hash doesn't require complex GC semantics.","m.mentions":{},"msgtype":"m.text"},"ts":1712690201141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K7AVtKlSpYLPRU8XD64a53Q_I6khYpZIonoS-eUVKFA"},
{"content":{"body":"If you have a native `CompositeKey` with equals/hash, you just make the \"default equaler\" behavior used by a `Map` have a specific case for `CompositeKey` vs `===`. But then you can make that \"default equaler\" an actual object from which to build other equalers from.","format":"org.matrix.custom.html","formatted_body":"If you have a native <code>CompositeKey</code> with equals/hash, you just make the \"default equaler\" behavior used by a <code>Map</code> have a specific case for <code>CompositeKey</code> vs <code>===</code>. But then you can make that \"default equaler\" an actual object from which to build other equalers from.","m.mentions":{},"msgtype":"m.text"},"ts":1712690341375,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pxmLcGFmfybm5zNDzU3Dx6S9jjFGSYSf-0MIgeKIJNo"},
{"content":{"body":"To be more clear:\n`new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming Records.prototype[Symbol.hashCode]`","format":"org.matrix.custom.html","formatted_body":"To be more clear:<br><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming Records.prototype[Symbol.hashCode]`","m.mentions":{},"msgtype":"m.text"},"ts":1712690344017,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$V-1Znj_c5KN4i3w0ZQ-zByqGp0YFjAwOQriS463mZV0"},
{"content":{"body":" * To be more clear:\n`new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming looking up a `Records.prototype\\[Symbol.hashCode\\]\\`","format":"org.matrix.custom.html","formatted_body":" * To be more clear:<br><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming looking up a <code>Records.prototype\\[Symbol.hashCode\\]\\</code>","m.mentions":{},"m.new_content":{"body":"To be more clear:\n`new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming looking up a `Records.prototype\\[Symbol.hashCode\\]\\`","format":"org.matrix.custom.html","formatted_body":"To be more clear:<br><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming looking up a <code>Records.prototype\\[Symbol.hashCode\\]\\</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$V-1Znj_c5KN4i3w0ZQ-zByqGp0YFjAwOQriS463mZV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712690406801,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FHFVH0ymR7d7b-UWff6UB-qZ3nToJM5YmN9glINHIcA"},
{"content":{"body":" * To be more clear:\n`new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming looking up a `Records.prototype[Symbol.hashCode]`","format":"org.matrix.custom.html","formatted_body":" * To be more clear:<br><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming looking up a <code>Records.prototype[Symbol.hashCode]</code>","m.mentions":{},"m.new_content":{"body":"To be more clear:\n`new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming looking up a `Records.prototype[Symbol.hashCode]`","format":"org.matrix.custom.html","formatted_body":"To be more clear:<br><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming looking up a <code>Records.prototype[Symbol.hashCode]</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$V-1Znj_c5KN4i3w0ZQ-zByqGp0YFjAwOQriS463mZV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712690415587,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$e1YBrSEgJbacMKGzOrCeMF31eJF6Li6ZGECU1ODb12U"},
{"content":{"body":"In other plenary sessions it has come up that the language should be as close to fully deterministic as we can. e.g. not exposing a browser-sniffing API. `Object.hash` feels like it would need to be fully deterministic across engines to meet these goals.\nPerhaps I have mis-read committee comments with this goal.","format":"org.matrix.custom.html","formatted_body":"In other plenary sessions it has come up that the language should be as close to fully deterministic as we can. e.g. not exposing a browser-sniffing API. <code>Object.hash</code> feels like it would need to be fully deterministic across engines to meet these goals.<br>Perhaps I have mis-read committee comments with this goal.","m.mentions":{},"msgtype":"m.text"},"ts":1712690506991,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$o8m8hvVRJv-I1srW4GJb3re63y0Xm-SZTAbW_g9V3ds"},
{"content":{"body":"> <@mhofman:matrix.org> To be more clear:\n> `new Map([], {compare: Record.equals})` is fine, and so is `new Map([], {compare: customHashCodeThing}`, but not `new Map([], compareWithHashCode: true)` which would be assuming looking up a `Records.prototype[Symbol.hashCode]`\n\nI've experimented with something like `[Symbol.hashCode]`. In well written applications its perfectly fine and would serve most users well. If you don't trust your inputs, you could opt-out with a custom equaler that doesn't call an `@@hashCode`. That said, I'm more interested in a general purpose `{ equals, hash }` mechanism for `Map`/`Set` and various other methods that do equality checks, than i am with instance-overrideable hash codes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V-1Znj_c5KN4i3w0ZQ-zByqGp0YFjAwOQriS463mZV0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>To be more clear:<br /><code>new Map([], {compare: Record.equals})</code> is fine, and so is <code>new Map([], {compare: customHashCodeThing}</code>, but not <code>new Map([], compareWithHashCode: true)</code> which would be assuming looking up a <code>Records.prototype[Symbol.hashCode]</code></blockquote></mx-reply>I've experimented with something like <code>[Symbol.hashCode]</code>. In well written applications its perfectly fine and would serve most users well. If you don't trust your inputs, you could opt-out with a custom equaler that doesn't call an <code>@@hashCode</code>. That said, I'm more interested in a general purpose <code>{ equals, hash }</code> mechanism for <code>Map</code>/<code>Set</code> and various other methods that do equality checks, than i am with instance-overrideable hash codes.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$V-1Znj_c5KN4i3w0ZQ-zByqGp0YFjAwOQriS463mZV0"}},"msgtype":"m.text"},"ts":1712690576661,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LrAvQkUNFCCl-MIXkK7_3vYPV_ctPbMu4RHf9_jM3IM"},
{"content":{"body":"I also wonder if even string hashing is not as easy to standardize in 262 due to the spec being in wtf-16 and runtimes potentially using different encodings?","m.mentions":{},"msgtype":"m.text"},"ts":1712690592520,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9BPlO8cygKJb9EmaAESI4o_KkVu1_7lNxbYM0-7nRKc"},
{"content":{"body":"We don't automatically need to expose the result of the internal hashing. We could have special values for `compare`","format":"org.matrix.custom.html","formatted_body":"We don't automatically need to expose the result of the internal hashing. We could have special values for <code>compare</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712691170075,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$f_nvmwMsmJ0fseiHgQmFZedgTlNiozYGzSLlko-Hj0Q"},
{"content":{"body":"> <@aclaymore:matrix.org> In other plenary sessions it has come up that the language should be as close to fully deterministic as we can. e.g. not exposing a browser-sniffing API. `Object.hash` feels like it would need to be fully deterministic across engines to meet these goals.\n> Perhaps I have mis-read committee comments with this goal.\n\n`Object.hash()` *shouldn't* be fully deterministic, at least not for strings. String hash code generators benefit from randomness as it evens out clumping due to collisions over the course of various app restarts. An implementation would also want to be able to swap from one hash algorithm to another from version to version as hash algorithms improve.\n\nIn .NET, you can control whether to use a randomized string hashing algorithm via configuration: https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8m8hvVRJv-I1srW4GJb3re63y0Xm-SZTAbW_g9V3ds?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>In other plenary sessions it has come up that the language should be as close to fully deterministic as we can. e.g. not exposing a browser-sniffing API. <code>Object.hash</code> feels like it would need to be fully deterministic across engines to meet these goals.<br />Perhaps I have mis-read committee comments with this goal.</blockquote></mx-reply><p><code>Object.hash()</code> <em>shouldn't</em> be fully deterministic, at least not for strings. String hash code generators benefit from randomness as it evens out clumping due to collisions over the course of various app restarts. An implementation would also want to be able to swap from one hash algorithm to another from version to version as hash algorithms improve.</p>\n<p>In .NET, you can control whether to use a randomized string hashing algorithm via configuration: https://learn.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.</p>\n","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o8m8hvVRJv-I1srW4GJb3re63y0Xm-SZTAbW_g9V3ds"}},"msgtype":"m.text"},"ts":1712691230673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wVZeOWxvgonrAUvbv3lNwZR_y97R07vH2VBT0yt3ZX0"},
{"content":{"body":"> <@mhofman:matrix.org> We don't automatically need to expose the result of the internal hashing. We could have special values for `compare`\n\nI considered describing it as an opaque value, but you need to be able to do math on it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f_nvmwMsmJ0fseiHgQmFZedgTlNiozYGzSLlko-Hj0Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>We don't automatically need to expose the result of the internal hashing. We could have special values for <code>compare</code></blockquote></mx-reply>I considered describing it as an opaque value, but you need to be able to do math on it.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f_nvmwMsmJ0fseiHgQmFZedgTlNiozYGzSLlko-Hj0Q"}},"msgtype":"m.text"},"ts":1712691260207,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1Wwvi4GdVjfGtPF1LG6YQntSIAuyIHd94I5Q2ZEsZAo"},
{"content":{"body":"To follow up on Ashley Claymore 's comment, I would be opposed to any new APIs to expose non determinism to the program. It's fine for these things to remain internal to the engine, but I don't want them to be observable","format":"org.matrix.custom.html","formatted_body":"To follow up on <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a> 's comment, I would be opposed to any new APIs to expose non determinism to the program. It's fine for these things to remain internal to the engine, but I don't want them to be observable","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"ts":1712691316223,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Cb82uESZXF2l-D7OASE9lnpileMdj901c6NNk88faZk"},
{"content":{"body":"Or should I say, the new API would have to be extremely well motivated, like FR/WeakRef, but I don't think hashcode would clear that line","m.mentions":{},"msgtype":"m.text"},"ts":1712691466581,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fXsMvWDgF_uNIurWE9Txp_t-Og-tZqL9XAav3E9vIiQ"},
{"content":{"body":"For example\n```js\nclass Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a && #x in b && a.#x == b.#x && a.#y == b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc << 7) | (hc >>> 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example</p>\n<pre><code class=\"language-js\">class Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a &amp;&amp; #x in b &amp;&amp; a.#x == b.#x &amp;&amp; a.#y == b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc &lt;&lt; 7) | (hc &gt;&gt;&gt; 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712691492317,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6XW1IdNluxMdasBqTEugl9tNFmKZ3KIlZ5z_ZgyGNhw"},
{"content":{"body":" * Or should I say, the new API would have to be extremely well motivated and fairly self contained, like FR/WeakRef, but I don't think hashcode would clear that line","m.mentions":{},"m.new_content":{"body":"Or should I say, the new API would have to be extremely well motivated and fairly self contained, like FR/WeakRef, but I don't think hashcode would clear that line","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fXsMvWDgF_uNIurWE9Txp_t-Og-tZqL9XAav3E9vIiQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712691496030,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NtjbGaMKKuqAVXYwA5IQHfXSjQx13YtxP2h4gR7DI_k"},
{"content":{"body":" * For example\n\n```js\nclass Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a && #x in b && a.#x === b.#x && a.#y === b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc << 7) | (hc >>> 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>For example</p>\n<pre><code class=\"language-js\">class Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a &amp;&amp; #x in b &amp;&amp; a.#x === b.#x &amp;&amp; a.#y === b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc &lt;&lt; 7) | (hc &gt;&gt;&gt; 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"For example\n\n```js\nclass Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a && #x in b && a.#x === b.#x && a.#y === b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc << 7) | (hc >>> 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>For example</p>\n<pre><code class=\"language-js\">class Point {\n  #x;\n  #y;\n  constructor(x, y) {\n    this.#x = x;\n    this.#y = y;\n  }\n  get x() { return this.#x; }\n  get y() { return this.#y; }\n  static equaler = {\n    equals(a, b) {\n      return #x in a &amp;&amp; #x in b &amp;&amp; a.#x === b.#x &amp;&amp; a.#y === b.#y;\n    },\n    hash(obj) {\n      let hc = Object.hash(obj.#x);\n      hc = ((hc &lt;&lt; 7) | (hc &gt;&gt;&gt; 25)) ^ Object.hash(obj.#y);\n      return hc;\n    }\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6XW1IdNluxMdasBqTEugl9tNFmKZ3KIlZ5z_ZgyGNhw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712691511572,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-tshq_aXjWTppdHn2GcpNzUNxj40nk1TSdbkka4T8NY"},
{"content":{"body":"I honestly don't understand why `hashLike(obj) { return #[obj.#x, obj.#y] }` is not an acceptable approach`. Engines are definitely capable of optimizing this","format":"org.matrix.custom.html","formatted_body":"I honestly don't understand why <code>hashLike(obj) { return #[obj.#x, obj.#y] }</code> is not an acceptable approach`. Engines are definitely capable of optimizing this","m.mentions":{},"msgtype":"m.text"},"ts":1712691602241,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lbmClenAD8RoSLiPwQvJISO7bsLtSUifeDxS2Eht4KQ"},
{"content":{"body":" * I honestly don't understand why `hashLike(obj) { return #[obj.#x, obj.#y]; }` is not an acceptable approach. Engines are definitely capable of optimizing this","format":"org.matrix.custom.html","formatted_body":" * I honestly don't understand why <code>hashLike(obj) { return #[obj.#x, obj.#y]; }</code> is not an acceptable approach. Engines are definitely capable of optimizing this","m.mentions":{},"m.new_content":{"body":"I honestly don't understand why `hashLike(obj) { return #[obj.#x, obj.#y]; }` is not an acceptable approach. Engines are definitely capable of optimizing this","format":"org.matrix.custom.html","formatted_body":"I honestly don't understand why <code>hashLike(obj) { return #[obj.#x, obj.#y]; }</code> is not an acceptable approach. Engines are definitely capable of optimizing this","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lbmClenAD8RoSLiPwQvJISO7bsLtSUifeDxS2Eht4KQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712691624427,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ULKjXlfQT9n27ULKP4nCNWGqfSDM1weiRPn7TnYqDxw"},
{"content":{"body":" * I honestly don't understand why `hashLike(obj) { return #[Point, obj.#x, obj.#y]; }` is not an acceptable approach. Engines are definitely capable of optimizing this","format":"org.matrix.custom.html","formatted_body":" * I honestly don't understand why <code>hashLike(obj) { return #[Point, obj.#x, obj.#y]; }</code> is not an acceptable approach. Engines are definitely capable of optimizing this","m.mentions":{},"m.new_content":{"body":"I honestly don't understand why `hashLike(obj) { return #[Point, obj.#x, obj.#y]; }` is not an acceptable approach. Engines are definitely capable of optimizing this","format":"org.matrix.custom.html","formatted_body":"I honestly don't understand why <code>hashLike(obj) { return #[Point, obj.#x, obj.#y]; }</code> is not an acceptable approach. Engines are definitely capable of optimizing this","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lbmClenAD8RoSLiPwQvJISO7bsLtSUifeDxS2Eht4KQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712691655573,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eh8CwhEmNa-lTmI9afSpy5TRb9uBJc4a4RdF_HBeltY"},
{"content":{"body":"Capable does not mean willing or likely to do so.","m.mentions":{},"msgtype":"m.text"},"ts":1712691712424,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ke4iAoSlJ1TO8W_LI6UqzJ1fOhDhFkE9DdnzF52r_Bs"},
{"content":{"body":"And that still doesn't let me write a hashtable. I need something I can use as a numeric index with good avalanche properties. Maybe 95% of users don't need this, but its a headache for the small percent that do for good reason.","m.mentions":{},"msgtype":"m.text"},"ts":1712691800808,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_PvcXcEYNOIB2hqbBkbU2KKGVcamXSPtJlXk0wliKj0"},
{"content":{"body":" * And that still doesn't let me write a hashtable. I need something I can use as a numeric index with good avalanche properties. Maybe 95% of users don't need this, but its a headache for the small percent that do need it for a good reason.","m.mentions":{},"m.new_content":{"body":"And that still doesn't let me write a hashtable. I need something I can use as a numeric index with good avalanche properties. Maybe 95% of users don't need this, but its a headache for the small percent that do need it for a good reason.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_PvcXcEYNOIB2hqbBkbU2KKGVcamXSPtJlXk0wliKj0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712691813007,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xlcvuD3_hPljLk1Ly3NvxbJGp5TIONo9ICe7tGgq3qs"},
{"content":{"body":"For example, I had to do quite a bit to workaround this limitation when experimenting with the shared structs dev trial. I had a very strong need for a concurrent Map, which required implementing a hash table. It would have been far easier if I could actually generate a hash for a string or an object: https://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/concurrentMap.ts\n\nYes, maybe we would want to add a `ConcurrentMap` after we add shared structs, but that's certainly not going to be in the MVP. ","format":"org.matrix.custom.html","formatted_body":"<p>For example, I had to do quite a bit to workaround this limitation when experimenting with the shared structs dev trial. I had a very strong need for a concurrent Map, which required implementing a hash table. It would have been far easier if I could actually generate a hash for a string or an object: https://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/concurrentMap.ts</p>\n<p>Yes, maybe we would want to add a <code>ConcurrentMap</code> after we add shared structs, but that's certainly not going to be in the MVP.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712692082971,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NGZkdQgej3tQ01-qWy3kwi-jNfBx0O885gYwOmHLElo"},
{"content":{"body":"generating a non-deterministic value from a basic value like and object or a string feels like a non starter for me. I'd claim it's not needed by 99.9999% of JS authors","m.mentions":{},"msgtype":"m.text"},"ts":1712692551531,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$6OXb7VMQZq7Z2XsYrERjUdK9qrL7CzqhvA0TMLZeO48"},
{"content":{"body":"Hash bucket lookup is approximately O(1), while a user-built collection relying on manually comparing tuples is O(n), and if you can't compare tuples using `===`, it's O(n*m) where `m` is the number of keys in the tuple. ","format":"org.matrix.custom.html","formatted_body":"Hash bucket lookup is approximately O(1), while a user-built collection relying on manually comparing tuples is O(n), and if you can't compare tuples using <code>===</code>, it's O(n*m) where <code>m</code> is the number of keys in the tuple.","m.mentions":{},"msgtype":"m.text"},"ts":1712692584171,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pw-cEli7WGcKXm93WRqSE-XUVrSdX__qAEWFn0vbNrQ"},
{"content":{"body":"> <@mhofman:matrix.org> generating a non-deterministic value from a basic value like and object or a string feels like a non starter for me. I'd claim it's not needed by 99.9999% of JS authors\n\nThen call the method `Object.nondeterministicHash(obj)` or `Object.randomHash(obj)` or document the non-deterministic nature on MDN. If you were an implementer that built internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? `Object.hash()` must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6OXb7VMQZq7Z2XsYrERjUdK9qrL7CzqhvA0TMLZeO48?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>generating a non-deterministic value from a basic value like and object or a string feels like a non starter for me. I&#39;d claim it&#39;s not needed by 99.9999% of JS authors</blockquote></mx-reply>Then call the method <code>Object.nondeterministicHash(obj)</code> or <code>Object.randomHash(obj)</code> or document the non-deterministic nature on MDN. If you were an implementer that built internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? <code>Object.hash()</code> must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6OXb7VMQZq7Z2XsYrERjUdK9qrL7CzqhvA0TMLZeO48"}},"msgtype":"m.text"},"ts":1712692909975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pfgsOrsR_iG7A1YgzmH-hmgTDx5OYuLOTy0bqUki-ws"},
{"content":{"body":"> <@mhofman:matrix.org> generating a non-deterministic value from a basic value like and object or a string feels like a non starter for me. I'd claim it's not needed by 99.9999% of JS authors\n\n * Then call the method `Object.nondeterministicHash(obj)` or `Object.randomHash(obj)` or document the non-deterministic nature on MDN. If you were an implementer that internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? `Object.hash()` must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6OXb7VMQZq7Z2XsYrERjUdK9qrL7CzqhvA0TMLZeO48?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>generating a non-deterministic value from a basic value like and object or a string feels like a non starter for me. I'd claim it's not needed by 99.9999% of JS authors</blockquote></mx-reply> * Then call the method <code>Object.nondeterministicHash(obj)</code> or <code>Object.randomHash(obj)</code> or document the non-deterministic nature on MDN. If you were an implementer that internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? <code>Object.hash()</code> must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","m.mentions":{},"m.new_content":{"body":"Then call the method `Object.nondeterministicHash(obj)` or `Object.randomHash(obj)` or document the non-deterministic nature on MDN. If you were an implementer that internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? `Object.hash()` must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","format":"org.matrix.custom.html","formatted_body":"Then call the method <code>Object.nondeterministicHash(obj)</code> or <code>Object.randomHash(obj)</code> or document the non-deterministic nature on MDN. If you were an implementer that internally used murmur3 for string hashing and found you could speed up all applications by a significant percentage by switching to xxhash64, wouldn't you do so? <code>Object.hash()</code> must be explicitly \"non-deterministic\" from the get-go just so anyone consuming it could reap the same benefits if a better hash algorithm comes along.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pfgsOrsR_iG7A1YgzmH-hmgTDx5OYuLOTy0bqUki-ws","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712692925810,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wHZeI4ql6IAXJ9UxGN1mCYO_ls5Lo9UtrjjSjISrhK8"},
{"content":{"body":"Case in point, even if you're using the non-random string hash algorithm in .NET, `Object.GetHashCode()` is still considered to be non-deterministic as upgrading the version can change the hash algorithm to one that is more efficient.","format":"org.matrix.custom.html","formatted_body":"Case in point, even if you're using the non-random string hash algorithm in .NET, <code>Object.GetHashCode()</code> is still considered to be non-deterministic as upgrading the version can change the hash algorithm to one that is more efficient.","m.mentions":{},"msgtype":"m.text"},"ts":1712693000984,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4C-QdkhPkQHYODHT7encFnEwRWuODSUA2w294LItK70"},
{"content":{"body":"I just don't think there is sufficient motivation to expose this in the language","m.mentions":{},"msgtype":"m.text"},"ts":1712693007652,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WeKUePALSmL6YtfBeWoT3gpgE0m5DZcaEQjgGsK1QGQ"},
{"content":{"body":"I'd argue that the number of times we've discussed mechanisms for customizing equality indicates it *is* sufficient motivation. The main reason I want custom equality for Map/Set at all is related to performance. You can use them as-is as long as you're willing to sacrifice performance and memory at the cost of the overhead introduced by alternatives. I want custom `Map` equality so that I *don't* have to `.toString()` every Uri I use as a key in a `map.get()`. Forcing custom collections to operate at O(n) while native collections can have O(1) because they can cheat and do the hashtable lookup is not the answer when your algorithms are performance-critical.","format":"org.matrix.custom.html","formatted_body":"I'd argue that the number of times we've discussed mechanisms for customizing equality indicates it <em>is</em> sufficient motivation. The main reason I want custom equality for Map/Set at all is related to performance. You can use them as-is as long as you're willing to sacrifice performance and memory at the cost of the overhead introduced by alternatives. I want custom <code>Map</code> equality so that I <em>don't</em> have to <code>.toString()</code> every Uri I use as a key in a <code>map.get()</code>. Forcing custom collections to operate at O(n) while native collections can have O(1) because they can cheat and do the hashtable lookup is not the answer when your algorithms are performance-critical.","m.mentions":{},"msgtype":"m.text"},"ts":1712693362821,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3M0sPAycLPRJup9H7gx5jktJjmKAI1lLkLKCjVaDGr0"},
{"content":{"body":"I'm not saying that `Object.hash()` must return a number, but that you could conceivably do all the things you would need to do to implement a hash table for an alternative to be a reasonable compromise. For example, let's say we had an API like this:\n\n```ts\ninterface Equaler<T> {\n  equals(a: T, b: T): boolean;\n  hash(a: T): opaque;\n}\n```\nwhere `hash` returns an opaque value. I'd need, at a minimum, something like this as well:\n```ts\ndeclare const defaultEqualer: Equaler<unknown>;\ndeclare function combineHash(a: opaque, b: opaque): opaque;\ninterface HashArray<T> {\n  length: number;\n  [hash: opaque]: T;\n  ...\n}\ninterface SharedHashArray<T> {\n  length: number;\n  [hash: opaque]: T;\n  ...\n}\n```\n\nto have any possibility of achieving similar perf to it being a number.","format":"org.matrix.custom.html","formatted_body":"<p>I'm not saying that <code>Object.hash()</code> must return a number, but that you could conceivably do all the things you would need to do to implement a hash table for an alternative to be a reasonable compromise. For example, let's say we had an API like this:</p>\n<pre><code class=\"language-ts\">interface Equaler&lt;T&gt; {\n  equals(a: T, b: T): boolean;\n  hash(a: T): opaque;\n}\n</code></pre>\n<p>where <code>hash</code> returns an opaque value. I'd need, at a minimum, something like this as well:</p>\n<pre><code class=\"language-ts\">declare const defaultEqualer: Equaler&lt;unknown&gt;;\ndeclare function combineHash(a: opaque, b: opaque): opaque;\ninterface HashArray&lt;T&gt; {\n  length: number;\n  [hash: opaque]: T;\n  ...\n}\ninterface SharedHashArray&lt;T&gt; {\n  length: number;\n  [hash: opaque]: T;\n  ...\n}\n</code></pre>\n<p>to have any possibility of achieving similar perf to it being a number.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712693920627,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1T3jaGEqnn8xn__MHX00bV_c7NH93wPKOMynMnBfGAQ"},
{"content":{"body":"You can customize equality using the `hashLike` approach I suggested above. It is also optimizable by engines.","format":"org.matrix.custom.html","formatted_body":"You can customize equality using the <code>hashLike</code> approach I suggested above. It is also optimizable by engines.","m.mentions":{},"msgtype":"m.text"},"ts":1712693927429,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CygHWCuAWtcM39iiNFuXlgAIjrX9rEMTUB2n8G2eCw0"},
{"content":{"body":"The combine hash is exactly what creating a R/T with your components does","m.mentions":{},"msgtype":"m.text"},"ts":1712693986383,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jUnbvvH9FeYMaf7_vVHAH82RsKmx7qSHS24O7SfU6nM"},
{"content":{"body":"But not for a custom collection. As I said, native `Map`/`Set` could cheat and unwrap a composite key to do a hashtable lookup for O(1), but a custom collection would be O(n) at best.","format":"org.matrix.custom.html","formatted_body":"But not for a custom collection. As I said, native <code>Map</code>/<code>Set</code> could cheat and unwrap a composite key to do a hashtable lookup for O(1), but a custom collection would be O(n) at best.","m.mentions":{},"msgtype":"m.text"},"ts":1712694013774,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a-vRl4VI98quidpYpqep_9sPAJVxOa9tSSTfFf3T8oE"},
{"content":{"body":"I think a design that ignores custom collections is too short sighted. ","m.mentions":{},"msgtype":"m.text"},"ts":1712694087155,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9JqR4IARl7wkCTUG5Vtif1q82nYuscFLZUqmuCvb18s"},
{"content":{"body":"Sorry I don't understand how your opaque hash is any different than a R/T","m.mentions":{},"msgtype":"m.text"},"ts":1712694129308,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QXr7HQ9697l2PLtAcTQ6VDpiUGD-K8E4ZHdwogHaoEs"},
{"content":{"body":"The opaque hash is just a number you can't actually see in to.","m.mentions":{},"msgtype":"m.text"},"ts":1712694159343,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VZdW6fsTNtgKh0Z-XSwkOEVeDggvephkvYrLMZXNUAQ"},
{"content":{"body":" * The opaque hash is just a number you can't actually see into.","m.mentions":{},"m.new_content":{"body":"The opaque hash is just a number you can't actually see into.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VZdW6fsTNtgKh0Z-XSwkOEVeDggvephkvYrLMZXNUAQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712694175324,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iIrRrll6aMoXj57WlLA60xPkrH9SohCYEnhn6WNw6rw"},
{"content":{"body":"The only reason it would be opaque is so that users can't depend on the actual value.","m.mentions":{},"msgtype":"m.text"},"ts":1712694201962,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ETzJ1AYbs7YA-Yf60faDHcsVQWRb0vKexOewbz-t9Js"},
{"content":{"body":"If it were a tuple, you couldn't use it as an index into an array of hash buckets.","m.mentions":{},"msgtype":"m.text"},"ts":1712694220428,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3dbIQf88Cnmvrcz6yPzQp6MqEka562upW-Q-pcmUTvA"},
{"content":{"body":"If it were a number, or an opaque value that's actually just a number, then you conceivably could.","m.mentions":{},"msgtype":"m.text"},"ts":1712694243324,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iMdwApJZJArcEXRwRfyuxa-HG-Z2GJIMU9iIsuPr2I0"},
{"content":{"body":"Numbers are just far easier to reason over since we already have `Array` and shared structs would have `SharedArray`.","format":"org.matrix.custom.html","formatted_body":"Numbers are just far easier to reason over since we already have <code>Array</code> and shared structs would have <code>SharedArray</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712694273110,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZCX1KFicBOCA-S8CKKYi5-oRSaYIW09aOKuY5DKUDZo"},
{"content":{"body":"To use a hash code efficiently, I need to be able to compare it using `===`, shift it using `<<` and `>>>`, and combine it using `^`. All of these operations are extremely fast using 32-bit integers.","format":"org.matrix.custom.html","formatted_body":"To use a hash code efficiently, I need to be able to compare it using <code>===</code>, shift it using <code>&lt;&lt;</code> and <code>&gt;&gt;&gt;</code>, and combine it using <code>^</code>. All of these operations are extremely fast using 32-bit integers.","m.mentions":{},"msgtype":"m.text"},"ts":1712694342475,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2WUMP7D2kINq3l4n1G3mYlu5L2HzThOjll40O8Brvfs"},
{"content":{"body":" * To use a hash code efficiently, I need to be able to compare it using `===`, shift it using `<<` and `>>>`, combine it using `^`, and use it as the index into an array. All of these operations are extremely fast using 32-bit integers.","format":"org.matrix.custom.html","formatted_body":" * To use a hash code efficiently, I need to be able to compare it using <code>===</code>, shift it using <code>&lt;&lt;</code> and <code>&gt;&gt;&gt;</code>, combine it using <code>^</code>, and use it as the index into an array. All of these operations are extremely fast using 32-bit integers.","m.mentions":{},"m.new_content":{"body":"To use a hash code efficiently, I need to be able to compare it using `===`, shift it using `<<` and `>>>`, combine it using `^`, and use it as the index into an array. All of these operations are extremely fast using 32-bit integers.","format":"org.matrix.custom.html","formatted_body":"To use a hash code efficiently, I need to be able to compare it using <code>===</code>, shift it using <code>&lt;&lt;</code> and <code>&gt;&gt;&gt;</code>, combine it using <code>^</code>, and use it as the index into an array. All of these operations are extremely fast using 32-bit integers.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2WUMP7D2kINq3l4n1G3mYlu5L2HzThOjll40O8Brvfs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712694359563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RhVibciSWTnSf8YLIXMt4aDX2Owy3ob_oEF0HeEx_u4"},
{"content":{"body":"`#[a, b, c]` has no avalanche properties I can use to ensure proper distribution in a hashtable, and cannot be used as an index, so comparing keys using `#[a, b, c]` in a custom collection is at least O(n*3), since I must compare the elements of every key in the map to the elements in the provided key. It's terribly inefficient.","format":"org.matrix.custom.html","formatted_body":"<code>#[a, b, c]</code> has no avalanche properties I can use to ensure proper distribution in a hashtable, and cannot be used as an index, so comparing keys using <code>#[a, b, c]</code> in a custom collection is at least O(n*3), since I must compare the elements of every key in the map to the elements in the provided key. It's terribly inefficient.","m.mentions":{},"msgtype":"m.text"},"ts":1712694496323,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4iUt6LykCqG0Rwu6HjVgTFrubsDA5mttilL2vb5-Jxk"},
{"content":{"body":"> <@rbuckton:matrix.org> If it were a tuple, you couldn't use it as an index into an array of hash buckets.\n\nYou could use it as a key in a Map, how is it different?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3dbIQf88Cnmvrcz6yPzQp6MqEka562upW-Q-pcmUTvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If it were a tuple, you couldn&#39;t use it as an index into an array of hash buckets.</blockquote></mx-reply>You could use it as a key in a Map, how is it different?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3dbIQf88Cnmvrcz6yPzQp6MqEka562upW-Q-pcmUTvA"}},"msgtype":"m.text"},"ts":1712694763378,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0yHP_6gWCflqJCWilhoX79_ryLzIgeBdeD5SLh4LzXE"},
{"content":{"body":"not across threads","m.mentions":{},"msgtype":"m.text"},"ts":1712694780991,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$85J45J4gqdvd3ZkS88rStUxrjuXSRvAf0I6W3qh1K18"},
{"content":{"body":"if the \"opaque\" number value is actually observable by the program, even indirectly, it defeats the purpose of being opaque","m.mentions":{},"msgtype":"m.text"},"ts":1712694809336,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vnWo4-gLKCZkqiws7mN7LRL5qf33Qf_U2uF0_RdaniY"},
{"content":{"body":"And that assumes that all JS devs will only ever need `Map` and `Set`, and that there are no other collection classes JS does not implement that will ever be needed.","format":"org.matrix.custom.html","formatted_body":"And that assumes that all JS devs will only ever need <code>Map</code> and <code>Set</code>, and that there are no other collection classes JS does not implement that will ever be needed.","m.mentions":{},"msgtype":"m.text"},"ts":1712694869428,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UG4E_nAlBlcxoSIWJhXtz_e04blDUfTo8vljHtxDXeA"},
{"content":{"body":"when you said opaque, I had assumed actually opaque, like a unique symbol","m.mentions":{},"msgtype":"m.text"},"ts":1712694887291,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hNReo_e7pQJeLn1fXUIqwVzGw6YBlEk85I1FLi-3nxI"},
{"content":{"body":"anything else is not opaque by my definition","m.mentions":{},"msgtype":"m.text"},"ts":1712694905532,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BmDpVf68BLVxOg_kQ3ICepdhAtgOvZmxWnXmjcRq4PQ"},
{"content":{"body":"I don't need it to be opaque. I'm saying the only way an opaque value would work for me is if it could have the same properties I would need from an integer hash code.","m.mentions":{},"msgtype":"m.text"},"ts":1712694939396,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I1CtVdbg-KigtKaGWNoVau_6I0uyfqrvJDfD32Z4Nzs"},
{"content":{"body":" * when you said opaque, I had assumed actually opaque, like a unique symbol, or empty object","m.mentions":{},"m.new_content":{"body":"when you said opaque, I had assumed actually opaque, like a unique symbol, or empty object","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hNReo_e7pQJeLn1fXUIqwVzGw6YBlEk85I1FLi-3nxI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712694941782,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nPT1P0peK43qGEx6wxHFJOPG_E1QQOUnBsQB0d2a-1I"},
{"content":{"body":"The problem is that if it's not a 32-bit integer, it becomes a boxed value in most implementations, and those are going to be slower.","m.mentions":{},"msgtype":"m.text"},"ts":1712694998780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HSchR5mVLCKWCtV9hOF-sPO022KY0bso0nm3WRzYF_c"},
{"content":{"body":"Let me summarize my thoughts:\n- Any mechanism to customize equality for `Map` and `Set` should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.\n- Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n*m) lookup time.\n- Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.\n- Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.\n- Composite keys require an allocation that is likely to be repeated for every call to `map.get`. Engines *could* optimize, but likely won't do so immediately, if ever.\n- A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.\n","format":"org.matrix.custom.html","formatted_body":"<p>Let me summarize my thoughts:</p>\n<ul>\n<li>Any mechanism to customize equality for <code>Map</code> and <code>Set</code> should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.</li>\n<li>Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n*m) lookup time.</li>\n<li>Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.</li>\n<li>Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.</li>\n<li>Composite keys require an allocation that is likely to be repeated for every call to <code>map.get</code>. Engines <em>could</em> optimize, but likely won't do so immediately, if ever.</li>\n<li>A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712695749555,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5V1R-3J0OiLqjN0k50MBJdi9SIgjS8Whpr1TZY7oYq4"},
{"content":{"body":" * Let me summarize my thoughts:\n\n- Any mechanism to customize equality for `Map` and `Set` should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.\n- Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n\\*m) lookup time.\n- Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.\n- Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.\n- Composite keys require an allocation that is likely to be repeated for every call to `map.get`. Engines _could_ optimize, but likely won't do so immediately, if ever.\n- A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.\n- Equals/hash can use 32-bit integers, `<<`, `>>>` and `^`, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)","format":"org.matrix.custom.html","formatted_body":" * <p>Let me summarize my thoughts:</p>\n<ul>\n<li>Any mechanism to customize equality for <code>Map</code> and <code>Set</code> should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.</li>\n<li>Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n*m) lookup time.</li>\n<li>Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.</li>\n<li>Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.</li>\n<li>Composite keys require an allocation that is likely to be repeated for every call to <code>map.get</code>. Engines <em>could</em> optimize, but likely won't do so immediately, if ever.</li>\n<li>A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.</li>\n<li>Equals/hash can use 32-bit integers, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code> and <code>^</code>, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)</li>\n</ul>\n","m.mentions":{},"m.new_content":{"body":"Let me summarize my thoughts:\n\n- Any mechanism to customize equality for `Map` and `Set` should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.\n- Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n\\*m) lookup time.\n- Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.\n- Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.\n- Composite keys require an allocation that is likely to be repeated for every call to `map.get`. Engines _could_ optimize, but likely won't do so immediately, if ever.\n- A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.\n- Equals/hash can use 32-bit integers, `<<`, `>>>` and `^`, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)","format":"org.matrix.custom.html","formatted_body":"<p>Let me summarize my thoughts:</p>\n<ul>\n<li>Any mechanism to customize equality for <code>Map</code> and <code>Set</code> should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.</li>\n<li>Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n*m) lookup time.</li>\n<li>Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.</li>\n<li>Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.</li>\n<li>Composite keys require an allocation that is likely to be repeated for every call to <code>map.get</code>. Engines <em>could</em> optimize, but likely won't do so immediately, if ever.</li>\n<li>A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.</li>\n<li>Equals/hash can use 32-bit integers, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code> and <code>^</code>, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5V1R-3J0OiLqjN0k50MBJdi9SIgjS8Whpr1TZY7oYq4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712695871114,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QA7a5HSin0oJs4aXyCIv6os4cWrsgzAmpaAY_dOuMqY"},
{"content":{"body":"I'm saying that any value that is a source of observable non determinism does not seem sufficiently motivated for a \"keying\" mechanism when there are alternatives that cover most of the use cases except performance, which can be optimized, or shared memory, which is a hypothetical future, and could have its own collections API. JS is a high level language that does not expose low level / internal details of its objects or memory layout. exposing hash code would change that","m.mentions":{},"msgtype":"m.text"},"ts":1712695957428,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2_--EStCRbUmYykbZMjn9aNh4bd6JYz6tNMgq0DfZH0"},
{"content":{"body":"> Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.\nThe idea with R&T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.<br>The idea with R&amp;T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712696088532,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$-gVMLL94ZTf_OHlJKqm8ZMLP7z5Zr5pE1lvxBuwjHx4"},
{"content":{"body":" * > Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.\n\nThe idea with R&T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.</p>\n</blockquote>\n<p>The idea with R&amp;T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases</p>\n","m.mentions":{},"m.new_content":{"body":"> Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.\n\nThe idea with R&T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.</p>\n</blockquote>\n<p>The idea with R&amp;T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-gVMLL94ZTf_OHlJKqm8ZMLP7z5Zr5pE1lvxBuwjHx4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712696097037,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$B8mlym5Q7a1tnK9lTlgEnVC4-E5T6zyq_5n8zkfY4ao"},
{"content":{"body":"As I've discovered while discussing array iterator performance, \"can be optimized\" isn't a useful metric. Implementations won't optimize unless they have very good reason to. Array destructuring has been around for ~9 years and still isn't optimized.","m.mentions":{},"msgtype":"m.text"},"ts":1712696177493,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g5rXKZVRw0KdvtffxlBMeOjiupTIcgEGgPBk5q6mhvQ"},
{"content":{"body":"> <@aclaymore:matrix.org> > Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.\n> \n> The idea with R&T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases\n\n@bakkot's example in matrix earlier shows this to not be true. The keys are often a subset of the data structure, and will very likely be generated on the fly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-gVMLL94ZTf_OHlJKqm8ZMLP7z5Zr5pE1lvxBuwjHx4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br><blockquote>\n<p>Composite keys require an allocation that is likely to be repeated for every call to map.get. Engines could optimize, but likely won't do so immediately, if ever.</p>\n</blockquote>\n<p>The idea with R&amp;T is that, being objects and arrays. In many cases they are the data structure, so there is no extra allocation for these cases</p>\n</blockquote></mx-reply>@bakkot's example in matrix earlier shows this to not be true. The keys are often a subset of the data structure, and will very likely be generated on the fly.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-gVMLL94ZTf_OHlJKqm8ZMLP7z5Zr5pE1lvxBuwjHx4"}},"msgtype":"m.text"},"ts":1712696353053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uUREyIrnzz8sXHsU79DK_gAdYe6Y-Ggy3tN0TG2moaA"},
{"content":{"body":"If the data model of the application is already using R&T. Inserting these into a map could be the fastest case. Because all the hashing and equality operations are entirely native, with zero entry into userland minimizing guards and allowing JIT.","m.mentions":{},"msgtype":"m.text"},"ts":1712696357855,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$zQQMbqAaqdHBDolY3F_lqGkUPV2g1dyt48uVzqnL_VE"},
{"content":{"body":">  The keys are often a subset of the data structure\nIf this really is common, then apps could keep those parts of the data structure seperate","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The keys are often a subset of the data structure<br>If this really is common, then apps could keep those parts of the data structure seperate</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712696392082,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$VBHw-71Fs7KbiN7RypIEBZpxrvGH82ri6ak0ucR-YSU"},
{"content":{"body":" * > The keys are often a subset of the data structure\n\nIf this really is common, then apps could keep those parts of the data structure seperatee","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>The keys are often a subset of the data structure</p>\n</blockquote>\n<p>If this really is common, then apps could keep those parts of the data structure seperatee</p>\n","m.mentions":{},"m.new_content":{"body":"> The keys are often a subset of the data structure\n\nIf this really is common, then apps could keep those parts of the data structure seperatee","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The keys are often a subset of the data structure</p>\n</blockquote>\n<p>If this really is common, then apps could keep those parts of the data structure seperatee</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VBHw-71Fs7KbiN7RypIEBZpxrvGH82ri6ak0ucR-YSU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712696396813,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$w5hRLmnBNcnvRk6eJDgPAM745EIwCNyXObDLJaeKsNw"},
{"content":{"body":" * > The keys are often a subset of the data structure\n\nIf this really is common, then apps could keep those parts of the data structure seperate","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>The keys are often a subset of the data structure</p>\n</blockquote>\n<p>If this really is common, then apps could keep those parts of the data structure seperate</p>\n","m.mentions":{},"m.new_content":{"body":"> The keys are often a subset of the data structure\n\nIf this really is common, then apps could keep those parts of the data structure seperate","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The keys are often a subset of the data structure</p>\n</blockquote>\n<p>If this really is common, then apps could keep those parts of the data structure seperate</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VBHw-71Fs7KbiN7RypIEBZpxrvGH82ri6ak0ucR-YSU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712696401528,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$fwBWzW181uO5yeYYtsnlRSwKoJl370atyr-tYTHqIjw"},
{"content":{"body":"> <@aclaymore:matrix.org> If the data model of the application is already using R&T. Inserting these into a map could be the fastest case. Because all the hashing and equality operations are entirely native, with zero entry into userland minimizing guards and allowing JIT.\n\nYou're only proving my point. `Map` and `Set` can only have O(1) performance for a tuple as a composite key if they use equals/hash internally. Custom collections cannot do the same.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zQQMbqAaqdHBDolY3F_lqGkUPV2g1dyt48uVzqnL_VE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>If the data model of the application is already using R&amp;T. Inserting these into a map could be the fastest case. Because all the hashing and equality operations are entirely native, with zero entry into userland minimizing guards and allowing JIT.</blockquote></mx-reply>You're only proving my point. <code>Map</code> and <code>Set</code> can only have O(1) performance for a tuple as a composite key if they use equals/hash internally. Custom collections cannot do the same.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zQQMbqAaqdHBDolY3F_lqGkUPV2g1dyt48uVzqnL_VE"}},"msgtype":"m.text"},"ts":1712696410433,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a-TEMMKSDzBHGUHu7h-Uez0dVqmg8_i7R6QzJwx3fkU"},
{"content":{"body":"Custom collections can use Map/Set internally","m.mentions":{},"msgtype":"m.text"},"ts":1712696436340,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uQYmd5lyY3nOJRiESEkzzMwGhZspB13bJ7oRQLPKKwo"},
{"content":{"body":" * Custom collections can use Map/Set internally for the vast majority of custom use cases","m.mentions":{},"m.new_content":{"body":"Custom collections can use Map/Set internally for the vast majority of custom use cases","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uQYmd5lyY3nOJRiESEkzzMwGhZspB13bJ7oRQLPKKwo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712696457804,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RXxiRQuyg99p9kKjgJW4_jXe_CxnY4feyV-TExVEn74"},
{"content":{"body":"Yes. I said earlier. The implementations must use hash + equals at some layer. I 100% agree that the pattern is efficent","m.mentions":{},"msgtype":"m.text"},"ts":1712696458993,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XMK96tRq85sDlgHaCy-1syIil53ne56dlXTFQvgo1vE"},
{"content":{"body":"custom collections aren't an ephemeral thing, there is production code that uses them. The perf hit is likely the only reason they aren't used more.","m.mentions":{},"msgtype":"m.text"},"ts":1712696461993,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gBsEEC98d7Lhd7uPWvhSXrv0-PGABzYhuapgIwPulH8"},
{"content":{"body":"The custom collections I've needed were wrappers around Maps","m.mentions":{},"msgtype":"m.text"},"ts":1712696498881,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$juSSVfc2hmykrfSzRT0i5d5qv-Gq4ci8IO1W9jIJwrE"},
{"content":{"body":"I'd be interested in hearing about other cases. I'm familiar with the ConcurrentMap one.","m.mentions":{},"msgtype":"m.text"},"ts":1712696516511,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hiySbxZzbVC0khFIzz0eu4whAfmYSCSZFe2ZA82Z6gw"},
{"content":{"body":"> <@aclaymore:matrix.org> The custom collections I've needed were wrappers around Maps\n\nThis is often the case, but these are often still inefficient. You often have to do some type of conversion for every `get`/`set`, which can result in unnecessary allocations. You could build a custom map that does case insensitive string comparisons on keys by passing them through a case folding algorithm, but that's terribly inefficient. For a case insensitive comparison, you might use case folding on the string to compare, but then you're also producing another string in memory. If you want to preserve the input key as written, you have to store both the original key and value as the map entry, resulting in another allocation and duplication, plus the need to wrap `keys()`, `values()`, etc. This is all unnecessary overhead.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$juSSVfc2hmykrfSzRT0i5d5qv-Gq4ci8IO1W9jIJwrE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>The custom collections I&#39;ve needed were wrappers around Maps</blockquote></mx-reply>This is often the case, but these are often still inefficient. You often have to do some type of conversion for every <code>get</code>/<code>set</code>, which can result in unnecessary allocations. You could build a custom map that does case insensitive string comparisons on keys by passing them through a case folding algorithm, but that's terribly inefficient. For a case insensitive comparison, you might use case folding on the string to compare, but then you're also producing another string in memory. If you want to preserve the input key as written, you have to store both the original key and value as the map entry, resulting in another allocation and duplication, plus the need to wrap <code>keys()</code>, <code>values()</code>, etc. This is all unnecessary overhead.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$juSSVfc2hmykrfSzRT0i5d5qv-Gq4ci8IO1W9jIJwrE"}},"msgtype":"m.text"},"ts":1712696878577,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OdWltm0r9QVCzPjsEQE1_iQ-B01cxnnOo0oq1syXEuM"},
{"content":{"body":"Gotcha. That matches my understanding. It's not that lots of custom collections can't be built, but they will need to do more allocations.","m.mentions":{},"msgtype":"m.text"},"ts":1712696987851,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$zA9txfd2QmPeWo_2_w5ELrUmADFS0itYHWDFDw6BG0Q"},
{"content":{"body":"> <@aclaymore:matrix.org> Gotcha. That matches my understanding. It's not that lots of custom collections can't be built, but they will need to do more allocations.\n\nMap/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects and up requiring O(n)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zA9txfd2QmPeWo_2_w5ELrUmADFS0itYHWDFDw6BG0Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Gotcha. That matches my understanding. It&#39;s not that lots of custom collections can&#39;t be built, but they will need to do more allocations.</blockquote></mx-reply>Map/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects and up requiring O(n)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zA9txfd2QmPeWo_2_w5ELrUmADFS0itYHWDFDw6BG0Q"}},"msgtype":"m.text"},"ts":1712697108467,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5wUSlGu_7vkGH5UCOpH3GlQaAjRtx1rCrrQcfd0ufq8"},
{"content":{"body":"Even if you are using weakmap/map registries to ensure a composite key has the same identity, that's *still* O(n) if you're writing `map.get(CompositeKey(a, b))`. You're just paying the O(n) cost walking the registry.","format":"org.matrix.custom.html","formatted_body":"Even if you are using weakmap/map registries to ensure a composite key has the same identity, that's <em>still</em> O(n) if you're writing <code>map.get(CompositeKey(a, b))</code>. You're just paying the O(n) cost walking the registry.","m.mentions":{},"msgtype":"m.text"},"ts":1712697171128,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x2By-LBPCi4pFuiTFbYTmu026hcIgOM989tIupLTFCc"},
{"content":{"body":"i.e., for n steps, you're doing an O(1) operation for each step.","m.mentions":{},"msgtype":"m.text"},"ts":1712697214450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BUi_cgXJ40EObwrqrikbysqs1rIIqUbCSmeW__6ZEvI"},
{"content":{"body":"what is n here?","m.mentions":{},"msgtype":"m.text"},"ts":1712697224773,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YtyngsjSGp5Wc7IU4HkY3AjeP7LXVX-m17vu6g5Dpz8"},
{"content":{"body":"n is the number of elements in the composite key.","m.mentions":{},"msgtype":"m.text"},"ts":1712697232855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HcmD63WKbkHcah4kzZss0OMl2Ns2pOhS-pkj7ljprVg"},
{"content":{"body":"ok. I thought you were referring to collection size and got confused","m.mentions":{},"msgtype":"m.text"},"ts":1712697252420,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Oh2VsbSo_RjhKdIS6dfXC00u710BnWbBdxMYw5EmvS0"},
{"content":{"body":"https://docs.google.com/presentation/d/1JfChmW8tQ2_mrFDynosNqa1tjJ2j-qX6WoKm8vc_tkY/edit#slide=id.g2c6eebea946_0_40","m.mentions":{},"msgtype":"m.text"},"ts":1712697257041,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t1pax8lpg9piMZdbUlcXAkCjh9p_5b9SDZDt04sE6Ak"},
{"content":{"body":"Sorry, I should have said m instead of n for that case.","m.mentions":{},"msgtype":"m.text"},"ts":1712697278673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wkXmVJMN10NVjXtB-TAWBmHYqrfm7SYj_3-lkoILWW4"},
{"content":{"body":"> <@aclaymore:matrix.org> Gotcha. That matches my understanding. It's not that lots of custom collections can't be built, but they will need to do more allocations.\n\n * Map/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects end up requiring O(n)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zA9txfd2QmPeWo_2_w5ELrUmADFS0itYHWDFDw6BG0Q?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>Gotcha. That matches my understanding. It's not that lots of custom collections can't be built, but they will need to do more allocations.</blockquote></mx-reply> * Map/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects end up requiring O(n)","m.mentions":{},"m.new_content":{"body":"Map/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects end up requiring O(n)","format":"org.matrix.custom.html","formatted_body":"Map/Set wrappers can be built with allocation overhead, but only if their keys are easily translated to something that works as an existing key. Complex objects end up requiring O(n)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5wUSlGu_7vkGH5UCOpH3GlQaAjRtx1rCrrQcfd0ufq8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712697356824,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H11A5n8fZaAn0Uk0-ibsGOgjztq0C92Ct2UHaGuvsoI"},
{"content":{"body":"> <@rbuckton:matrix.org> Let me summarize my thoughts:\n> \n> - Any mechanism to customize equality for `Map` and `Set` should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.\n> - Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n\\*m) lookup time.\n> - Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.\n> - Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.\n> - Composite keys require an allocation that is likely to be repeated for every call to `map.get`. Engines _could_ optimize, but likely won't do so immediately, if ever.\n> - A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.\n> - Equals/hash can use 32-bit integers, `<<`, `>>>` and `^`, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)\n\nwe actually added Map and Set as built-ins without having a way that what they do could be done in a custom collection. Of course it would be nice to support efficient maps defined in JS if possible given all of the other goals and constraints, but I don't see why it makes sense to say that no advances should be made for Map and Set without managing to support this other goal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5V1R-3J0OiLqjN0k50MBJdi9SIgjS8Whpr1TZY7oYq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>Let me summarize my thoughts:</p>\n<ul>\n<li>Any mechanism to customize equality for <code>Map</code> and <code>Set</code> should be done in a way that could be leveraged by a custom collection. Anything less is too short sighted.</li>\n<li>Using a composite key/tuple will not give me the performance characteristics I would need in a custom collection, as it would result in O(n*m) lookup time.</li>\n<li>Equals/hash can be employed by a hashtable in a custom collection for O(1) lookup time.</li>\n<li>Using a composite key/tuple would not be compatible with custom collections under shared memory multithreading, which are likely to be necessary since concurrent/synchronized collections are not part of the shared structs MVP.</li>\n<li>Composite keys require an allocation that is likely to be repeated for every call to <code>map.get</code>. Engines <em>could</em> optimize, but likely won't do so immediately, if ever.</li>\n<li>A composite key mechanism can be implemented on top of equals/hash such that a WeakMap/Map-based registry is unnecessary. equals/hash cannot be implemented on top of a composite key.</li>\n<li>Equals/hash can use 32-bit integers, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code> and <code>^</code>, which are all already fast and optimized. Opaque values require boxing, making them slow (see bigint performance as an example)</li>\n</ul>\n</blockquote></mx-reply>we actually added Map and Set as built-ins without having a way that what they do could be done in a custom collection. Of course it would be nice to support efficient maps defined in JS if possible given all of the other goals and constraints, but I don't see why it makes sense to say that no advances should be made for Map and Set without managing to support this other goal.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5V1R-3J0OiLqjN0k50MBJdi9SIgjS8Whpr1TZY7oYq4"}},"msgtype":"m.text"},"ts":1712697457348,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8hJtJ34D2B22mfltGSI30M1AIavpVHd7FXqb6RzXZlY"},
{"content":{"body":"the composite-ness of composite keys or R&T doesn't actually depend on any new built-in thing, but identity hashcodes continue to not be exposed","m.mentions":{},"msgtype":"m.text"},"ts":1712697520207,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iFKY1Sc4XX4CTbeidzRdBAM6ccpWl4fcgq4nxHKuBPc"},
{"content":{"body":"> <@littledan:matrix.org> we actually added Map and Set as built-ins without having a way that what they do could be done in a custom collection. Of course it would be nice to support efficient maps defined in JS if possible given all of the other goals and constraints, but I don't see why it makes sense to say that no advances should be made for Map and Set without managing to support this other goal.\n\nWe did, and this has continued to come up regularly since. I'm not opposed to things that make `Map` and `Set` more efficient. I'm concerned with choosing an API design that caters to native maps and sets that could never be efficiently implemented in a custom collection. We either end up never improving the story for custom collections, or end up with two independent mechanisms for customizing equality.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8hJtJ34D2B22mfltGSI30M1AIavpVHd7FXqb6RzXZlY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>we actually added Map and Set as built-ins without having a way that what they do could be done in a custom collection. Of course it would be nice to support efficient maps defined in JS if possible given all of the other goals and constraints, but I don't see why it makes sense to say that no advances should be made for Map and Set without managing to support this other goal.</blockquote></mx-reply>We did, and this has continued to come up regularly since. I'm not opposed to things that make <code>Map</code> and <code>Set</code> more efficient. I'm concerned with choosing an API design that caters to native maps and sets that could never be efficiently implemented in a custom collection. We either end up never improving the story for custom collections, or end up with two independent mechanisms for customizing equality.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8hJtJ34D2B22mfltGSI30M1AIavpVHd7FXqb6RzXZlY"}},"msgtype":"m.text"},"ts":1712697659554,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PoVQsjUK3xZm9GIN2BD_l5MdpNNbGk2GrYQLUbGziFk"},
{"content":{"body":"A composite key that uses a weakmap registry just to ensure reference identity for equivalent keys is entirely unnecessary with hash/equals. If we were to then implement hash/equals to improve the custom collection story, then composite keys become an evolutionary dead end for the language.","m.mentions":{},"msgtype":"m.text"},"ts":1712697769391,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j2BZgJ8YGGKE6yzYyeRF62YgbXZIvENmXfUEDX6gQSA"},
{"content":{"body":"Is anyone defending CompositeKey?","m.mentions":{},"msgtype":"m.text"},"ts":1712697820314,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_kEdetI4RUi9A4F7-qMHliD8_dsuO6Gf1eENpHFKA2g"},
{"content":{"body":"Object-based R&T seems like a cleaner mechanism and doesn't do anything which should make things harder for custom collections, I think","m.mentions":{},"msgtype":"m.text"},"ts":1712697840251,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$afk3gIkgVX_gdXXKGrwhKQwHBAUjtlO1LG3KENQqUKU"},
{"content":{"body":"I'm not sure what distinction between CompositeKey and object-based R&T you're drawing","m.mentions":{},"msgtype":"m.text"},"ts":1712697865664,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$03kKsBJ-94t6ld4iEw3ULpS4y98eM_KQkK606SrCl0Y"},
{"content":{"body":"How is object-based R&T not a composite key?","m.mentions":{},"msgtype":"m.text"},"ts":1712697869103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MsBidVHPqYOcv4S-LXCwgwTmUENkTe4sv4Jv-Qf5Xsw"},
{"content":{"body":"The distinction I would make would be between a WeakMap-registry based composite key, or a Map/Set privileged CompositeKey.","m.mentions":{},"msgtype":"m.text"},"ts":1712697905210,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xkWUVdNKWfCcLEyIRZT7iL37hino3oVfV5Kqgerf3nk"},
{"content":{"body":"A Map/Set-privileged CompositeKey has a way forward to equals/hash, but then why not have equals/hash instead (or at the same time).","m.mentions":{},"msgtype":"m.text"},"ts":1712698075096,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jZeX6efb9lXwIX4TUUX3h7ylGpSlabER1s9VV8slDSE"},
{"content":{"body":"> <@bakkot:matrix.org> I'm not sure what distinction between CompositeKey and object-based R&T you're drawing\n\nwell, the basic version of R&T that we were discussing is, there isn't support for being keys in WeakMap, so the whole registry thing just goes away","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$03kKsBJ-94t6ld4iEw3ULpS4y98eM_KQkK606SrCl0Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I&#39;m not sure what distinction between CompositeKey and object-based R&amp;T you&#39;re drawing</blockquote></mx-reply>well, the basic version of R&amp;T that we were discussing is, there isn't support for being keys in WeakMap, so the whole registry thing just goes away","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$03kKsBJ-94t6ld4iEw3ULpS4y98eM_KQkK606SrCl0Y"}},"msgtype":"m.text"},"ts":1712698188437,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-D8HXlR8mSlyQ9MbjBlYqncQw8TXPZfjhC6CBnS071g"},
{"content":{"body":"and there's no support for ===","m.mentions":{},"msgtype":"m.text"},"ts":1712698201835,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iLxcrzY5Vhaeq2ycRTRp9g4DC16FwEjVFUAA-Nv_D3w"},
{"content":{"body":"I guess the registry was more for ===; WeakMap doesn't actually need it","m.mentions":{},"msgtype":"m.text"},"ts":1712698218493,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RQV-LE516_os50XG8wuGDU22Zlh9o_UV1frH3SuNdcA"},
{"content":{"body":"so I guess you're calling this Map/Set privileged? But I don't see what Map/Set are doing that other collections couldn't also do","m.mentions":{},"msgtype":"m.text"},"ts":1712698269816,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uR76UWp3E1Fne3zgW1_Q0Hpj9vO7fNMHLNyjtRD3Kr0"},
{"content":{"body":"> <@rbuckton:matrix.org> A Map/Set-privileged CompositeKey has a way forward to equals/hash, but then why not have equals/hash instead (or at the same time).\n\nThis is something I have trouble understanding. Even if we do want to generalize to hash, the question of \"why not instead\" was answered--you want a nice default mechanism for the normal case, as other languages tend to have","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jZeX6efb9lXwIX4TUUX3h7ylGpSlabER1s9VV8slDSE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>A Map/Set-privileged CompositeKey has a way forward to equals/hash, but then why not have equals/hash instead (or at the same time).</blockquote></mx-reply>This is something I have trouble understanding. Even if we do want to generalize to hash, the question of \"why not instead\" was answered--you want a nice default mechanism for the normal case, as other languages tend to have","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jZeX6efb9lXwIX4TUUX3h7ylGpSlabER1s9VV8slDSE"}},"msgtype":"m.text"},"ts":1712698338237,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d0Gf1dekDqqRZ-y2I-Zc7vZT1t1QnskCioCCdiGNxTI"},
{"content":{"body":"I'd also like more details from the folks that are concerned about non-determinism as to why that should matter. It would be guaranteed to be deterministic so long as the app/browser is executing. Assuming no string-random-hash algorithm at the outset, the only thing that would change the hash result would probably be upgrading the browser as a newer runtime could choose a more efficient algorithm.","m.mentions":{},"msgtype":"m.text"},"ts":1712698338888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nGsWEl21Nh7HBDau6IyceB9Hcx9FAxccv9AsrE2LcQc"},
{"content":{"body":"my preferred approach is to allow composite objects (i.e. interned objects, that give you `===`) as keys in WeakMaps iff they contain at least one thing which could itself be in a WeakMap, and to introduce a `canBeWeaklyHeld` predicate so that's easier to determine.","format":"org.matrix.custom.html","formatted_body":"my preferred approach is to allow composite objects (i.e. interned objects, that give you <code>===</code>) as keys in WeakMaps iff they contain at least one thing which could itself be in a WeakMap, and to introduce a <code>canBeWeaklyHeld</code> predicate so that's easier to determine.","m.mentions":{},"msgtype":"m.text"},"ts":1712698366987,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_x-AyfBYUK6msf4Mc0uqfyILiQUj6ltGy8zcARtDvr0"},
{"content":{"body":"why not at the same time was also answered: because there is not consensus to expose hashcodes, due to interop risk","m.mentions":{},"msgtype":"m.text"},"ts":1712698374591,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PqPar6UEtVIdqLIiylh1YHClRKqtaSSTkBaaP0LuKFk"},
{"content":{"body":"so I guess you want more details... what do you mean by details?","m.mentions":{},"msgtype":"m.text"},"ts":1712698412907,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MOen5ldWjlqrDO9Cu0E_UVW0YT5NF0xl7n3U2h26lhQ"},
{"content":{"body":"> <@littledan:matrix.org> so I guess you're calling this Map/Set privileged? But I don't see what Map/Set are doing that other collections couldn't also do\n\nNo, Map/Set privileged would mean a Map would treat a CompositeKey as a special value and essentially do equals/hash natively. Without runtime support for equals/hash, a custom collection cannot do the same.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uR76UWp3E1Fne3zgW1_Q0Hpj9vO7fNMHLNyjtRD3Kr0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>so I guess you&#39;re calling this Map/Set privileged? But I don&#39;t see what Map/Set are doing that other collections couldn&#39;t also do</blockquote></mx-reply>No, Map/Set privileged would mean a Map would treat a CompositeKey as a special value and essentially do equals/hash natively. Without runtime support for equals/hash, a custom collection cannot do the same.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uR76UWp3E1Fne3zgW1_Q0Hpj9vO7fNMHLNyjtRD3Kr0"}},"msgtype":"m.text"},"ts":1712698429191,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xyZZ3LSfqzE_-tq7jak-m-lc04UTkGWEvP5t5B8u-VM"},
{"content":{"body":"> if you're writing `map.get(CompositeKey(a, b))`. You're just paying the O(n) cost walking the registry.\n\nI do not understand. How is it `O(n)` if there is a Map that supports a native composite keying ?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>if you're writing <code>map.get(CompositeKey(a, b))</code>. You're just paying the O(n) cost walking the registry.</p>\n</blockquote>\n<p>I do not understand. How is it <code>O(n)</code> if there is a Map that supports a native composite keying ?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712698441340,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dKfjPvHsNHPxnHlyb7fbYlDe4xO8VUp4b7pElAXorq4"},
{"content":{"body":"> <@littledan:matrix.org> This is something I have trouble understanding. Even if we do want to generalize to hash, the question of \"why not instead\" was answered--you want a nice default mechanism for the normal case, as other languages tend to have\n\nOther languages tend to have equal/hash, with a few built-in equalers you can readily reference. I would certainly want those as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$d0Gf1dekDqqRZ-y2I-Zc7vZT1t1QnskCioCCdiGNxTI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is something I have trouble understanding. Even if we do want to generalize to hash, the question of \"why not instead\" was answered--you want a nice default mechanism for the normal case, as other languages tend to have</blockquote></mx-reply>Other languages tend to have equal/hash, with a few built-in equalers you can readily reference. I would certainly want those as well.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$d0Gf1dekDqqRZ-y2I-Zc7vZT1t1QnskCioCCdiGNxTI"}},"msgtype":"m.text"},"ts":1712698476176,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$toZYyip9UhO6mmFpgbN2w42fjg3Cm_vfqDgQAz1LT3Q"},
{"content":{"body":"> <@rbuckton:matrix.org> No, Map/Set privileged would mean a Map would treat a CompositeKey as a special value and essentially do equals/hash natively. Without runtime support for equals/hash, a custom collection cannot do the same.\n\nhmm, what kind of custom collection are you imagining? I guess I'm not picturing it properly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xyZZ3LSfqzE_-tq7jak-m-lc04UTkGWEvP5t5B8u-VM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, Map/Set privileged would mean a Map would treat a CompositeKey as a special value and essentially do equals/hash natively. Without runtime support for equals/hash, a custom collection cannot do the same.</blockquote></mx-reply>hmm, what kind of custom collection are you imagining? I guess I'm not picturing it properly","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xyZZ3LSfqzE_-tq7jak-m-lc04UTkGWEvP5t5B8u-VM"}},"msgtype":"m.text"},"ts":1712698481505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pRFHnDzGCRjRCWU0Dm95Em57hVvq81ILRfTGAg_mzfc"},
{"content":{"body":"> <@mhofman:matrix.org> > if you're writing `map.get(CompositeKey(a, b))`. You're just paying the O(n) cost walking the registry.\n> \n> I do not understand. How is it `O(n)` if there is a Map that supports a native composite keying ?\n\nThat was in reference to the WeakMap registry mechanism on https://docs.google.com/presentation/d/1JfChmW8tQ2_mrFDynosNqa1tjJ2j-qX6WoKm8vc_tkY/edit#slide=id.g2c6eebea946_0_40","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dKfjPvHsNHPxnHlyb7fbYlDe4xO8VUp4b7pElAXorq4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><blockquote>\n<p>if you're writing <code>map.get(CompositeKey(a, b))</code>. You're just paying the O(n) cost walking the registry.</p>\n</blockquote>\n<p>I do not understand. How is it <code>O(n)</code> if there is a Map that supports a native composite keying ?</p>\n</blockquote></mx-reply>That was in reference to the WeakMap registry mechanism on https://docs.google.com/presentation/d/1JfChmW8tQ2_mrFDynosNqa1tjJ2j-qX6WoKm8vc_tkY/edit#slide=id.g2c6eebea946_0_40","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dKfjPvHsNHPxnHlyb7fbYlDe4xO8VUp4b7pElAXorq4"}},"msgtype":"m.text"},"ts":1712698512407,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GZybE9MdZeVctZTAktuUeptzdCQkgChxbNVlm0Z1B-c"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd also like more details from the folks that are concerned about non-determinism as to why that should matter. It would be guaranteed to be deterministic so long as the app/browser is executing. Assuming no string-random-hash algorithm at the outset, the only thing that would change the hash result would probably be upgrading the browser as a newer runtime could choose a more efficient algorithm.\n\nI want a language where I can deterministically reproduce execution. If you exclude I/O (which encompasses Date.now and Math.random), we currently have that language","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nGsWEl21Nh7HBDau6IyceB9Hcx9FAxccv9AsrE2LcQc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;d also like more details from the folks that are concerned about non-determinism as to why that should matter. It would be guaranteed to be deterministic so long as the app/browser is executing. Assuming no string-random-hash algorithm at the outset, the only thing that would change the hash result would probably be upgrading the browser as a newer runtime could choose a more efficient algorithm.</blockquote></mx-reply>I want a language where I can deterministically reproduce execution. If you exclude I/O (which encompasses Date.now and Math.random), we currently have that language","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nGsWEl21Nh7HBDau6IyceB9Hcx9FAxccv9AsrE2LcQc"}},"msgtype":"m.text"},"ts":1712698828160,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nzWuHkxww1NjRJCuGpQMnDcJITeJylAgQ5CiicHXyaE"},
{"content":{"body":"> <@littledan:matrix.org> hmm, what kind of custom collection are you imagining? I guess I'm not picturing it properly\n\nhttps://github.com/esfx/esfx/blob/main/packages/collections-hashmap/src/index.ts, though its essentially just a `Map` that takes an `{ equaler }` option, as I'm suggesting.\nhttps://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/concurrentMap.ts, which is a lock-free concurrent map that cannot use `Map` as a backing store.\nhttps://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/sharedMap.ts, which is a coarse-grained synchronized map.\nto name a few. In other languages you're likely to see custom collections where specific semantics for get/set are necessary, such as with observable collections in .NET.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pRFHnDzGCRjRCWU0Dm95Em57hVvq81ILRfTGAg_mzfc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>hmm, what kind of custom collection are you imagining? I guess I'm not picturing it properly</blockquote></mx-reply>https://github.com/esfx/esfx/blob/main/packages/collections-hashmap/src/index.ts, though its essentially just a <code>Map</code> that takes an <code>{ equaler }</code> option, as I'm suggesting.<br>https://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/concurrentMap.ts, which is a lock-free concurrent map that cannot use <code>Map</code> as a backing store.<br>https://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/sharedMap.ts, which is a coarse-grained synchronized map.<br>to name a few. In other languages you're likely to see custom collections where specific semantics for get/set are necessary, such as with observable collections in .NET.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pRFHnDzGCRjRCWU0Dm95Em57hVvq81ILRfTGAg_mzfc"}},"msgtype":"m.text"},"ts":1712698889085,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hR2HsMpAns7AxENA8mBFZLsrVB8JfyQhvWXzQbwamqY"},
{"content":{"body":"> <@mhofman:matrix.org> I want a language where I can deterministically reproduce execution. If you exclude I/O (which encompasses Date.now and Math.random), we currently have that language\n\nBut for what purpose is this important? Is it for testing? If you're going to exclude `Date.now` and `Math.random`, why would you not exclude `Object.hash`? Could an implementation not have a `--hash-algorithm=...` flag to ensure a stable hash algorithm for tests?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nzWuHkxww1NjRJCuGpQMnDcJITeJylAgQ5CiicHXyaE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I want a language where I can deterministically reproduce execution. If you exclude I/O (which encompasses Date.now and Math.random), we currently have that language</blockquote></mx-reply>But for what purpose is this important? Is it for testing? If you're going to exclude <code>Date.now</code> and <code>Math.random</code>, why would you not exclude <code>Object.hash</code>? Could an implementation not have a <code>--hash-algorithm=...</code> flag to ensure a stable hash algorithm for tests?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nzWuHkxww1NjRJCuGpQMnDcJITeJylAgQ5CiicHXyaE"}},"msgtype":"m.text"},"ts":1712699063678,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hFBClIGJUcFO-RP-HMxa69Bm9tRk3kU5Vs_5Eil9Wa4"},
{"content":{"body":"If it's for security, wouldn't a randomized Object.hash be preferred over a deterministic one?","m.mentions":{},"msgtype":"m.text"},"ts":1712699125011,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fX8p4OWMDxRhxQeFfrZ3zIVUAWpgTEwlmqCphn0ixGs"},
{"content":{"body":"Are there any \"implementation defined\" behaviors you also have to discount? `Object.hash` would essentially be implementation defined.","format":"org.matrix.custom.html","formatted_body":"Are there any \"implementation defined\" behaviors you also have to discount? <code>Object.hash</code> would essentially be implementation defined.","m.mentions":{},"msgtype":"m.text"},"ts":1712699182153,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yy4iTCqWMVZCSgvN4c3EsdpXnpkmOdMC1C2sNfyFrQo"},
{"content":{"body":"> <@rbuckton:matrix.org> But for what purpose is this important? Is it for testing? If you're going to exclude `Date.now` and `Math.random`, why would you not exclude `Object.hash`? Could an implementation not have a `--hash-algorithm=...` flag to ensure a stable hash algorithm for tests?\n\nWe actually use this determinism for replay of program execution, sometimes across engines. Yes we could remove, but then it increases the difference with what programs may expect being in the language.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hFBClIGJUcFO-RP-HMxa69Bm9tRk3kU5Vs_5Eil9Wa4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But for what purpose is this important? Is it for testing? If you're going to exclude <code>Date.now</code> and <code>Math.random</code>, why would you not exclude <code>Object.hash</code>? Could an implementation not have a <code>--hash-algorithm=...</code> flag to ensure a stable hash algorithm for tests?</blockquote></mx-reply>We actually use this determinism for replay of program execution, sometimes across engines. Yes we could remove, but then it increases the difference with what programs may expect being in the language.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hFBClIGJUcFO-RP-HMxa69Bm9tRk3kU5Vs_5Eil9Wa4"}},"msgtype":"m.text"},"ts":1712699296078,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LcYG4AmRAI5ZehP_T5TnF-QzBrnzVwAc23OZqxp_l-M"},
{"content":{"body":"There's also the possibility we could define hashing as `Object.hash(obj, algorithm?)` where you can optionally specify `\"stable\"` or `\"fast\"`.","format":"org.matrix.custom.html","formatted_body":"There's also the possibility we could define hashing as <code>Object.hash(obj, algorithm?)</code> where you can optionally specify <code>\"stable\"</code> or <code>\"fast\"</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712699317197,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UG24ekn05BS7D1h8x7JKWTpbraQ-xo5z_k7163SNfd4"},
{"content":{"body":" * There's also the possibility we could define hashing as `Object.hash(obj, algorithm?)` where you can optionally specify `\"stable\"` or `\"fast\"` (or similar).","format":"org.matrix.custom.html","formatted_body":" * There's also the possibility we could define hashing as <code>Object.hash(obj, algorithm?)</code> where you can optionally specify <code>\"stable\"</code> or <code>\"fast\"</code> (or similar).","m.mentions":{},"m.new_content":{"body":"There's also the possibility we could define hashing as `Object.hash(obj, algorithm?)` where you can optionally specify `\"stable\"` or `\"fast\"` (or similar).","format":"org.matrix.custom.html","formatted_body":"There's also the possibility we could define hashing as <code>Object.hash(obj, algorithm?)</code> where you can optionally specify <code>\"stable\"</code> or <code>\"fast\"</code> (or similar).","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UG24ekn05BS7D1h8x7JKWTpbraQ-xo5z_k7163SNfd4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712699355376,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$22bCn-bIiRExAZbiDyYFJIbSnaH7EB6Mi43Xk_uph0M"}
]