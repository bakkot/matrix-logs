[
{"content":{"body":"Hello all.  Plenary meeting begins in just under two hours.\n\nFor those attending in person in Seattle, please arrive from 09:20 where you will be met in the F5 lobby.  Breakfast will be served on the same floor as the meeting room from 09:30.","msgtype":"m.text"},"ts":1679411665580,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4CiidZgk434e7_odYMs57aZrv0RziF39hAEg-ec2v3A"},
{"content":{"body":"i still don't see a zoom link","msgtype":"m.text"},"ts":1679412808750,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y6THygKzD0T2h5VuatsF9JkBIskfWv40hb8sPsi03y0"},
{"content":{"body":"The entry-form containing the zoom link will be posted in the next 30 mins and I will notify here.","msgtype":"m.text"},"ts":1679413389339,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eOaCO0aU1SabATBbS91r-UpRBLD34QblrG_blejoqos"},
{"content":{"body":"why we're always changing the meeting software ðŸ¤”","msgtype":"m.text"},"ts":1679415652868,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$yetD-z_QzPoFVciOKinlPARgCIOGK8_32rkbN0b759U"},
{"content":{"body":"The entry form is now available on the Reflector:  https://github.com/tc39/Reflector/issues/461","msgtype":"m.text"},"ts":1679415679509,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$gOW5L7GCS5k1SIdahZmUx-Dh_Qo1TXH0g9n7p_NTb88"},
{"content":{"body":"Jack Works: This is due to host room setup.  The room has been built to work with Zoom, e.g. the AV is connected to an inaccessible Zoom server.  We did try to get Google Meet running with no success.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: This is due to host room setup.  The room has been built to work with Zoom, e.g. the AV is connected to an inaccessible Zoom server.  We did try to get Google Meet running with no success.","msgtype":"m.text"},"ts":1679415761770,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RF4XxgzMmNCUNdgz0u4WbYO0OzzxrXQFxY6kI06fSfQ"},
{"content":{"body":"We begin in 5 minutes! ","msgtype":"m.text"},"ts":1679417726947,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$gvqY1buutOlUot56bsLnFU5mQqZJ0PISJAsuY0O6NsE"},
{"content":{"body":"This is our room for the week. ","format":"org.matrix.custom.html","formatted_body":"This is our room for the week.","msgtype":"m.text"},"ts":1679417772048,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$LkvrBCOhoKD_no54M5NqLc6j1Vpa8faGRJByOwHtluc"},
{"content":{"body":"looks great!","msgtype":"m.text"},"ts":1679417983211,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$cJ-V-t_IDIm-_3CuZ9jUsjQK9MW7G3N3WluUkWY3uT8"},
{"content":{"body":"Customer Engagement Center","msgtype":"m.text"},"ts":1679418141178,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GPMzCXu7Nc9K9tADCdtOBikl2KUCexfShEI5H0PsZlg"},
{"content":{"body":"looks really fancy","msgtype":"m.text"},"ts":1679418281900,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hupXPmP-_gX1zleqkQ4dFsyeOZiCQSyTIhukkDQ8dpI"},
{"content":{"body":"(im not present in any form today)","msgtype":"m.text"},"ts":1679418290899,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$toOeHJ01V7ss1Ir6U8afmtWRoEb2b95hAPhmsxJgm-g"},
{"content":{"body":"Wish I was there","msgtype":"m.text"},"ts":1679418595474,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$MeFG2WQ4bK6MrDnbn0CfK8VkVf0hltd80eU_B1gDqSk"},
{"content":{"body":"@bakkot You should probably advertise somehow that you are recording for the late arrivals.","msgtype":"m.text"},"ts":1679418895648,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$zvFqgEjxDB9g4h8eo9jXv9ePvK69L6k0v_QKRKb5C40"},
{"content":{"body":"msaboff: I'll say it again in my editor update","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: I'll say it again in my editor update","msgtype":"m.text"},"ts":1679419541212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9EyptGgvCZmScZncM5lFb_hpeqDC_oHgstQvoDz3esE"},
{"content":{"body":"dminor: not sure i understand that point. that sounds like mozilla-internal meeting wrangling","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: not sure i understand that point. that sounds like mozilla-internal meeting wrangling","msgtype":"m.text"},"ts":1679422154210,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YBLaURE4xJuJ26XUjq1Rsu_8lIJ08Lb1gm6fzZ29UiE"},
{"content":{"body":"I think the point they tried to make was that what Shane's mentioning now","msgtype":"m.text"},"ts":1679422184985,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$lWgb7X58ruA6RbczFEzQO9EDDITTjKBil_YAGBGuYeQ"},
{"content":{"body":"TG2 is run very differently","msgtype":"m.text"},"ts":1679422190817,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NBaoYerXcgPdT2ra8nwnNDmXC8f6pVgam8LRnJpPTBo"},
{"content":{"body":"for one, the agenda isn't set up clearly ahead of time","msgtype":"m.text"},"ts":1679422203712,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$G8kQ9LjEC7BVu5wT3kWUTANG2YSo_xrj-PIdafGvWqc"},
{"content":{"body":"we don't use TCQ but do use a simpler Google Meet queue","msgtype":"m.text"},"ts":1679422240706,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$DwtViOb7QXz-q7XHhFyWXlAaenC_7fSSUj2x1EZur0Q"},
{"content":{"body":"ah i misunderstood then, it was about how TG2 is run, not mozilla?","msgtype":"m.text"},"ts":1679422242196,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tDO-WFfDww-ZSiIQEzXe4s-1b5RC_xdB9iL53zry9Xk"},
{"content":{"body":"well, a bit of both I thought","msgtype":"m.text"},"ts":1679422267994,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ySCl9-cB-S9T0RoacabvsiwJMTrxPoV0EIZ4P52Z1ZE"},
{"content":{"body":"because of how TG2 is run, Mozilla cannot have structured internal discussions about the agenda a week ahead","msgtype":"m.text"},"ts":1679422292299,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$K4cPl_BY7YQ0AKayfDveRy3WRcC6EdGwdLxRXmSAVPA"},
{"content":{"body":"(IIUC, dminor will probably correct me)","format":"org.matrix.custom.html","formatted_body":"(IIUC, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a> will probably correct me)","msgtype":"m.text"},"ts":1679422302907,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ErnTBQ4rVfFz39X9G0Og2Yczt5yjI4JFETk1rGgRAqw"},
{"content":{"body":"Basically, it would be difficult for us to review proposals properly in advance given the way that TG2 is currently run, so we'd prefer to continue to do advancement in the main committee meetings","msgtype":"m.text"},"ts":1679422303303,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$Fd401WsmTu2WHdTBx7zeCwPNL9dg_BeHhmIpBfL4Qzc"},
{"content":{"body":"dminor: okay, thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: okay, thanks","msgtype":"m.text"},"ts":1679422328307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9VJkfGpV-DN3MI_J2wYRWsa-0WYzKzKX-58X_yR9yLo"},
{"content":{"body":"Async: Please share the link to the slides on test262 funding so we can reference them from the notes.","msgtype":"m.text"},"ts":1679422528133,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NNHptmt958uAxaKCXTSLnDbnzH019y3lA8e7sKnHDhw"},
{"content":{"body":"https://ptomato.name/talks/tc39-2023-03/","msgtype":"m.text"},"ts":1679423123256,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$G2TD3BcdM1fYFxfVitX4sQvfRxXzDG9g9zdDZOPUJsc"},
{"content":{"body":"agenda and notes updated","msgtype":"m.text"},"ts":1679423127795,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$x1VI5EsK31g37RWz2neK3EkDi5p11ItkZTeOj_Hw3W8"},
{"content":{"body":"To meet Justin Grant's schedule constraint, we are suggesting Temporal will be at 13:00 (first thing after lunch)","msgtype":"m.text"},"ts":1679423334614,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KN8W7-3DWfkSna0bXW7eL1i_Amk0L7yljSTf4ByvVs0"},
{"content":{"body":"wow jordan sounds great","msgtype":"m.text"},"ts":1679423493736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BCShPRVsuu0ubxcvcQwgCqKTh08UqKOuMrM6zKgjFSw"},
{"content":{"body":"kudos to these room mics","msgtype":"m.text"},"ts":1679423497004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j3i9iLj5QGOJcpiSYim8vxQ-PV9tDyzD_EkzC_Ur35w"},
{"content":{"body":"Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC \"dues\" could work if rolled up into the yearly fee.","msgtype":"m.text"},"ts":1679423503224,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc"},
{"content":{"body":"A lot of pain in companies contracting out work if they can't do it themselves is the burden of that internal process... ","msgtype":"m.text"},"ts":1679423540825,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$VImFaLXoJrZFULXKX5B9Qq_1Scb5tgWyHw0WneR5J9s"},
{"content":{"body":"it definitely seems like the primary purpose of member dues is so Ecma, not individual members, can fund shared needs.","msgtype":"m.text"},"ts":1679423736486,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YS9OGwbX_Le3S3YA8MNJUdUZmENie882glfmkSLyT1A"},
{"content":{"body":"not sure how renaming to limit/skip solve the problem ...","msgtype":"m.text"},"ts":1679425142634,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g"},
{"content":{"body":"do all of the iterator helpers currently close the underlying iterator?","msgtype":"m.text"},"ts":1679425210701,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$bLrkDhCyXSplHaaNswnv2MdpQKCFPJlygw8DlefiLsA"},
{"content":{"body":"> <@haxjs:matrix.org> not sure how renaming to limit/skip solve the problem ...\n\nI don't think it does, especially given the rather common meaning of `take` across the ecosystem as well as other languages.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>not sure how renaming to limit/skip solve the problem ...</blockquote></mx-reply>I don't think it does, especially given the rather common meaning of <code>take</code> across the ecosystem as well as other languages.","m.relates_to":{"m.in_reply_to":{"event_id":"$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g"}},"msgtype":"m.text"},"ts":1679425236477,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VFQoIzF_Hz44hbOpahxGtBFi-bZ9awsublWf-w1QnDM"},
{"content":{"body":"> <@apaprocki:matrix.org> Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC \"dues\" could work if rolled up into the yearly fee.\n\nEcma folks have told me that there have been shared costs historically, and that members handle their own financial things when it comes up","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br>Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC &quot;dues&quot; could work if rolled up into the yearly fee.</blockquote></mx-reply>Ecma folks have told me that there have been shared costs historically, and that members handle their own financial things when it comes up","m.relates_to":{"m.in_reply_to":{"event_id":"$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc"}},"msgtype":"m.text"},"ts":1679425273781,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7jOrJcr3eRRJFenDRPgeIrP6rl0p6EzeZvzmYAVFKdk"},
{"content":{"body":"It's rather trivial to write a wrapper for an iterator that doesn't forward `return`","format":"org.matrix.custom.html","formatted_body":"It's rather trivial to write a wrapper for an iterator that doesn't forward <code>return</code>","msgtype":"m.text"},"ts":1679425275674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XR1XaS-y1dKt8IcHOY5GpgCtV5HwJWuDzPrZlTzTs5s"},
{"content":{"body":"(and they consider this best practice in general)","msgtype":"m.text"},"ts":1679425281874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nq2Nr1FpDPniOkzud8b9EgDi0H-W0lCEs9ICr28tLfg"},
{"content":{"body":"We will return in one hour.  If any of the remote attendees have feedback on AV etc please say it here.","msgtype":"m.text"},"ts":1679425295695,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yyuwZ0eOkJW_rnZhcsrhtCCDSgMtfwf4l3w0DRheCx4"},
{"content":{"body":"I find \"limit\" less understandable than \"take\". If it helps avoid misunderstanding, I would expect that's only because one has to read the docs to understand what it does at all.","msgtype":"m.text"},"ts":1679425317028,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$4oaePQ6eVAHmYTtr4QpB-tpBYv2y0idkX4V8n5mPGMQ"},
{"content":{"body":"imo \"limit\" conveys very clearly that the iterator is closed, i guess because it sounds like SQL limit, and obviously SQL queries are not stateful; whereas \"take\" is much more ambiguous. but i guess this is a minority view!","msgtype":"m.text"},"ts":1679425806956,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$XlOZi1l9Mo2l-hRf65tjkMx0BMnnwz5wDsEFbP-4_EU"},
{"content":{"body":"Are there actually any iterator helpers in the proposal that do *not* close the underlying iterator?","format":"org.matrix.custom.html","formatted_body":"Are there actually any iterator helpers in the proposal that do <em>not</em> close the underlying iterator?","msgtype":"m.text"},"ts":1679428600878,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$CBiSvxaQcEYoNNsP7zSKmZkpnSPAueuVsHsXJA72aV0"},
{"content":{"body":"They all either iterate everything (thus closing the underlying), or close when they early exit","msgtype":"m.text"},"ts":1679428700647,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3SaGUN59hiq02tsEIb5s01gLu59__j85NbE8zrxnY5o"},
{"content":{"body":"`take` is special in that `take` ends _before_ exhausting the underlying iterator","format":"org.matrix.custom.html","formatted_body":"<code>take</code> is special in that <code>take</code> ends <em>before</em> exhausting the underlying iterator","msgtype":"m.text"},"ts":1679428706161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o"},
{"content":{"body":"My general expectation is that if I pass an iterator off to any other code, I should assume it is exhausted and not touch it again myself.","msgtype":"m.text"},"ts":1679428713685,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$oz7qBoZk6tR7UGjQ15BDKKX07by6lQW6PKG5jj4o_2Q"},
{"content":{"body":"whereas if you `map` or something the expectation is that it either you are exhausting it, which will naturally close the underlying iterator, or closing the `map` helper explicitly","format":"org.matrix.custom.html","formatted_body":"whereas if you <code>map</code> or something the expectation is that it either you are exhausting it, which will naturally close the underlying iterator, or closing the <code>map</code> helper explicitly","msgtype":"m.text"},"ts":1679428760898,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CdcyhI_b1PCm5jeYc-w3a5zEIDG017WQlGjU3oNNaT8"},
{"content":{"body":"> <@bakkot:matrix.org> `take` is special in that `take` ends _before_ exhausting the underlying iterator\n\nSo does `some`, `every`, and `find`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>take</code> is special in that <code>take</code> ends <em>before</em> exhausting the underlying iterator</blockquote></mx-reply>So does <code>some</code>, <code>every</code>, and <code>find</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o"}},"msgtype":"m.text"},"ts":1679428803787,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lhJcEM97p2mjGP9mGpxMSVXKmyo8JH10vrP8WTOQZNs"},
{"content":{"body":"Justin Ridgewell: those don't produce new iterators though","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: those don't produce new iterators though","msgtype":"m.text"},"ts":1679428833166,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jn_th_aAVKJS6HYKM1XwjQTn-uKbiFuLb4DnHFUUt9s"},
{"content":{"body":"Caveat being that `some`, `every`, and `find` return scalar results","format":"org.matrix.custom.html","formatted_body":"Caveat being that <code>some</code>, <code>every</code>, and <code>find</code> return scalar results","msgtype":"m.text"},"ts":1679428837297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JrTXeVwelqbzC16XaSjOtYZwnrCLNY7VC3lI98-siyA"},
{"content":{"body":"they are as it were \"consumers\" rather than \"transfomers\"","msgtype":"m.text"},"ts":1679428842904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wq1iPT5LY-Pma59h_cf528w1wy8NZ0kwY2MPtApKHk8"},
{"content":{"body":"Though `take` ending before exhausting the iterator is a misconception. The fact it calls `return` is more of an optimization than a meaningful difference when it comes to sequence operators.","format":"org.matrix.custom.html","formatted_body":"Though <code>take</code> ending before exhausting the iterator is a misconception. The fact it calls <code>return</code> is more of an optimization than a meaningful difference when it comes to sequence operators.","msgtype":"m.text"},"ts":1679428918247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$axhOROn-CQR_KymOTJYD0N_tVBYhQ8D_yXSUOThtENA"},
{"content":{"body":"by \"an optimization\", do you mean relative to the option of manually exhausting the underlying by calling `.next` repeatedly, or something else?","format":"org.matrix.custom.html","formatted_body":"by &quot;an optimization&quot;, do you mean relative to the option of manually exhausting the underlying by calling <code>.next</code> repeatedly, or something else?","msgtype":"m.text"},"ts":1679428976562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpXMfRbPEjmN8h4Bf1nZy8CNQqbly4dBO7RmcGNnkwg"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1679428989091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DKOcA9k4Uqz7pvJmFtMfbBq31orUWvXFuFDcWMb4Gbo"},
{"content":{"body":"If JS had no `.return` and the only way to close an iterator were to exhaust it, I would expect `take` to exhaust the iterator.","format":"org.matrix.custom.html","formatted_body":"If JS had no <code>.return</code> and the only way to close an iterator were to exhaust it, I would expect <code>take</code> to exhaust the iterator.","msgtype":"m.text"},"ts":1679429021995,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t6CPgva04bgqgR0zUJDnjOJ7k1k_wIjLVNaG6wgvDZQ"},
{"content":{"body":"So its good that `return` exists, as it allows us to short-circuit such an expensive operation.","format":"org.matrix.custom.html","formatted_body":"So its good that <code>return</code> exists, as it allows us to short-circuit such an expensive operation.","msgtype":"m.text"},"ts":1679429054735,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UPMdledS_VBNgl-28eUptvvIKHd_IPOxUOh9bJJ0Hko"},
{"content":{"body":"But I'm pretty sure that in every example of prior art in the ecosystem, where `take` is used it means \"take X items and exhaust/close the underlying iterator\"","format":"org.matrix.custom.html","formatted_body":"But I'm pretty sure that in every example of prior art in the ecosystem, where <code>take</code> is used it means &quot;take X items and exhaust/close the underlying iterator&quot;","msgtype":"m.text"},"ts":1679429110505,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$phVH4JjeACMvRB17UVAOQSrIeHsT1aW6W3G8LNxj19I"},
{"content":{"body":"If the iterator were a database, I would expect `take` to close the connection when completed. ","format":"org.matrix.custom.html","formatted_body":"If the iterator were a database, I would expect <code>take</code> to close the connection when completed.","msgtype":"m.text"},"ts":1679429135432,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zjidxff-uZCUGxeEQPFwJt18AW4eITgSnyF23to90Hc"},
{"content":{"body":" * If the iterator were backed by a database, I would expect `take` to close the connection when completed.","format":"org.matrix.custom.html","formatted_body":" * If the iterator were backed by a database, I would expect <code>take</code> to close the connection when completed.","m.new_content":{"body":"If the iterator were backed by a database, I would expect `take` to close the connection when completed.","format":"org.matrix.custom.html","formatted_body":"If the iterator were backed by a database, I would expect <code>take</code> to close the connection when completed.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Zjidxff-uZCUGxeEQPFwJt18AW4eITgSnyF23to90Hc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429142070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tqUFjV1Vq6C5ewYwp2dvEdJg6NSXvkyBZzVwEthaXSM"},
{"content":{"body":"The alternative is resource starvation, which is a bad failure state.","msgtype":"m.text"},"ts":1679429155389,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j9pLdhNclCJMRDTiZwMmnK0tQ-S0TRWhfo54D5eVp70"},
{"content":{"body":"If you want \"consume X and not close\", that operation is normally named something like `read` (at least, where IO is concerned)","format":"org.matrix.custom.html","formatted_body":"If you want &quot;consume X and not close&quot;, that operation is normally named something like <code>read</code> (at least, where IO is concerned)","msgtype":"m.text"},"ts":1679429201972,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m2sEEGrvdB6IOb98YxtLz1ZutthIPhtaHFFNOt3NreM"},
{"content":{"body":"erights: i finished the iterator helpers \"close the underlying iterator\" change before lunch, and it passes all the proposed test262 tests as well as my own","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: i finished the iterator helpers &quot;close the underlying iterator&quot; change before lunch, and it passes all the proposed test262 tests as well as my own","msgtype":"m.text"},"ts":1679429450479,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BbYMTALybo1gC3yG_QxQkWAiqFjcPjHBZXqOlPxmCu8"},
{"content":{"body":"We are bringing forward  Async Explicit Resource Management to happen this afternoon.  TCQ and draft schedule are updated accordinlgly.","msgtype":"m.text"},"ts":1679429604852,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4sAxfFyyEf7Q2Wu-TLw7OU6s0NKrIXt-OdqEq6N7c8s"},
{"content":{"body":"rbuckton: isn't your claim about taking more uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more uncommon directly contradicting by the issue that prompted this discussion?","msgtype":"m.text"},"ts":1679429738745,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc"},
{"content":{"body":" * rbuckton: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","m.new_content":{"body":"rbuckton: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","msgtype":"m.text"},"m.relates_to":{"event_id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429747087,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$h_FmMnO_xegrQLm5_KXjtiqvv6I5KjwKd1Xon3bn8sE"},
{"content":{"body":" * rbuckton: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","m.new_content":{"body":"rbuckton: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","msgtype":"m.text"},"m.relates_to":{"event_id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429754997,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$QeLOsREEl-HN8CQpN_VDtCXjs8SXQ4VmBOKU3Dj-C34"},
{"content":{"body":"My impression is that the use case in that issue was a misuse of the API. Perhaps `take` may seem confusing in a vacuum, but not with adequate context","format":"org.matrix.custom.html","formatted_body":"My impression is that the use case in that issue was a misuse of the API. Perhaps <code>take</code> may seem confusing in a vacuum, but not with adequate context","msgtype":"m.text"},"ts":1679429814435,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M8ajqD0FSsB_XuZ_tDZeDtFaoRXCYxlU2d61_L8D_vA"},
{"content":{"body":"Why is it \"Speaker's summary of key points\" rather than \"summary of key points\" in the notes?","msgtype":"m.text"},"ts":1679429958829,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc"},
{"content":{"body":"Didn't get to it due to time, but there is precedence for a `preventClose`/`preventReturn` option on the web: `preventClose` on `ReadableStream.prototype.pipeTo` and `ReadableStream.prototype.pipeThrough`. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.","format":"org.matrix.custom.html","formatted_body":"Didn't get to it due to time, but there is precedence for a <code>preventClose</code>/<code>preventReturn</code> option on the web: <code>preventClose</code> on <code>ReadableStream.prototype.pipeTo</code> and <code>ReadableStream.prototype.pipeThrough</code>. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.","msgtype":"m.text"},"ts":1679429965606,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$viLr-tUJQirVXPbJbFAbtUFjq1FFSjqZVSWJ3YEHmcM"},
{"content":{"body":"> <@littledan:matrix.org> Why is it \"Speaker's summary of key points\" rather than \"summary of key points\" in the notes?\n\nI haven't really been seeing speakers fill this in; I think note-takers and the committee could fill it in as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Why is it &quot;Speaker&#39;s summary of key points&quot; rather than &quot;summary of key points&quot; in the notes?</blockquote></mx-reply>I haven't really been seeing speakers fill this in; I think note-takers and the committee could fill it in as well","m.relates_to":{"m.in_reply_to":{"event_id":"$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc"}},"msgtype":"m.text"},"ts":1679429972976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZtUGB4T9r1ctptxCxMEP-BxUraGbqrb7nmri9vYc2Ns"},
{"content":{"body":"It can be written by anyone so please change the title if you like.  The key is that the presenter ought to be at least approving the summary so that we have some kind of responsibility when distributing the load of writing these summaries.","msgtype":"m.text"},"ts":1679430085270,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Ogk45qHqaIhih0KfOQR45xaWI3YXZ6UMGenTV4Phmio"},
{"content":{"body":"The confusion is a consequence of choosing to build an API that is dependent on `Iterator` vs the notion of an iterable. As I understood it as the proposal was advancing, basing this on `iterator` meant we were in the realm of \"one shot\" or \"single use\" iterators, and that any kind of reusable iteration would rely on arrow functions. IIRC, all of the helper methods are exhaustive, either through repeated calls to `.next` or through the use of `.return`. I don't believe `.take` should be substantially different in this regard. I would much rather have an \"opt-out\" mechanism to avoid closing an iterator than breaking from the norm here.","format":"org.matrix.custom.html","formatted_body":"The confusion is a consequence of choosing to build an API that is dependent on <code>Iterator</code> vs the notion of an iterable. As I understood it as the proposal was advancing, basing this on <code>iterator</code> meant we were in the realm of &quot;one shot&quot; or &quot;single use&quot; iterators, and that any kind of reusable iteration would rely on arrow functions. IIRC, all of the helper methods are exhaustive, either through repeated calls to <code>.next</code> or through the use of <code>.return</code>. I don't believe <code>.take</code> should be substantially different in this regard. I would much rather have an &quot;opt-out&quot; mechanism to avoid closing an iterator than breaking from the norm here.","msgtype":"m.text"},"ts":1679430109589,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AIQNKw3z9E8Mm6R3ZdsicNmZn4wtphzetNucXldw8AU"},
{"content":{"body":"Definitely agreed that `take` not exhausting is not an option","format":"org.matrix.custom.html","formatted_body":"Definitely agreed that <code>take</code> not exhausting is not an option","msgtype":"m.text"},"ts":1679430259903,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y9gCOSD12eUbKJQH5x4aqFd4dWCwlcfqTBMgsZH3IUk"},
{"content":{"body":"the question was just whether a different name could lead people to correctly intuit the semantics","msgtype":"m.text"},"ts":1679430272268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sHAIN3RGSE4tZJ7aPAbTHuvAqKj8HzpLWhgalWgyWHc"},
{"content":{"body":"my intuition is no, unless the name is literally, like `takeAndThenClose`","format":"org.matrix.custom.html","formatted_body":"my intuition is no, unless the name is literally, like <code>takeAndThenClose</code>","msgtype":"m.text"},"ts":1679430311716,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZXNHmtSHM1KRbN6qIYGLNDBsxraCbQn6QD_36uZNtNI"},
{"content":{"body":"The alternative, `.limit`, only really makes sense for numeric arguments. It becomes much less clear if you later adopt something like `.limitWhile` (vs. `.takeWhile`). ","format":"org.matrix.custom.html","formatted_body":"The alternative, <code>.limit</code>, only really makes sense for numeric arguments. It becomes much less clear if you later adopt something like <code>.limitWhile</code> (vs. <code>.takeWhile</code>).","msgtype":"m.text"},"ts":1679430763097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D6yXJXjcwBs8FntSKQroixSJhdiGYqxBmQKFqvDniEk"},
{"content":{"body":"fun fact, Java has both `limit` and `takeWhile`","format":"org.matrix.custom.html","formatted_body":"fun fact, Java has both <code>limit</code> and <code>takeWhile</code>","msgtype":"m.text"},"ts":1679430836964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BupOU0DZKUumbh_q3tZkGYAHaraYF1VtYAuWK7EST_g"},
{"content":{"body":"(and no `take`)","format":"org.matrix.custom.html","formatted_body":"(and no <code>take</code>)","msgtype":"m.text"},"ts":1679430841171,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mgdfv-Q9O2oh9XLgqu6Ral-rP-lx1o79g_doMFZAbAw"},
{"content":{"body":"64+32 Abseil: https://github.com/abseil/abseil-cpp/blob/master/absl/time/duration.cc#L15-L50","msgtype":"m.text"},"ts":1679430987529,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$ywqndE43mvPdtsiJL-yFRQENXPl2tf86tKhPpaQHeLs"},
{"content":{"body":"> <@lucacasonato:matrix.org> Didn't get to it due to time, but there is precedence for a `preventClose`/`preventReturn` option on the web: `preventClose` on `ReadableStream.prototype.pipeTo` and `ReadableStream.prototype.pipeThrough`. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.\n\nI know that NodeJS has that concept, i.e.`stream.pipeline(streams, { end: true })` https://nodejs.org/dist/latest-v19.x/docs/api/stream.html#streampipelinestreams-options","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$viLr-tUJQirVXPbJbFAbtUFjq1FFSjqZVSWJ3YEHmcM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Didn't get to it due to time, but there is precedence for a <code>preventClose</code>/<code>preventReturn</code> option on the web: <code>preventClose</code> on <code>ReadableStream.prototype.pipeTo</code> and <code>ReadableStream.prototype.pipeThrough</code>. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.</blockquote></mx-reply>I know that NodeJS has that concept, i.e.<code>stream.pipeline(streams, { end: true })</code> https://nodejs.org/dist/latest-v19.x/docs/api/stream.html#streampipelinestreams-options","m.relates_to":{"m.in_reply_to":{"event_id":"$viLr-tUJQirVXPbJbFAbtUFjq1FFSjqZVSWJ3YEHmcM"}},"msgtype":"m.text"},"ts":1679431063324,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p_lMpeA3-0KSWlhfR-MKlYXnPRqQmS7HxEBr4qUMn1U"},
{"content":{"body":"and `readable.pipe(dest, { end: true })`. I'm not sure about the DOM APIs offhand","format":"org.matrix.custom.html","formatted_body":"and <code>readable.pipe(dest, { end: true })</code>. I'm not sure about the DOM APIs offhand","msgtype":"m.text"},"ts":1679431109202,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_DaTge0ZIz4RbO3bhkxOIq5kJKsZ67iGSw_aEUSho5Y"},
{"content":{"body":"for DOM it'd be `readable.pipeTo(writable,  { preventClose: true })`","format":"org.matrix.custom.html","formatted_body":"for DOM it'd be <code>readable.pipeTo(writable,  { preventClose: true })</code>","msgtype":"m.text"},"ts":1679431157292,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$zywy8vit5P4W3n2tw1axnyIOil4ZzRSqqfvvXa33b9Y"},
{"content":{"body":"Yeah, I misread your comment as a question, sorry.","msgtype":"m.text"},"ts":1679431187175,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CJYcH_Kwzw9rF_dhQNt801jk973zseqmLDXWpQ6HfTM"},
{"content":{"body":"waldemar: the core confusion from me is why do you trust multiple implementations to be correct and interoperable here, if you don't trust the spec to be correct (because it's so tricky to get correct)?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: the core confusion from me is why do you trust multiple implementations to be correct and interoperable here, if you don't trust the spec to be correct (because it's so tricky to get correct)?","msgtype":"m.text"},"ts":1679431777810,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BPRBkQe96JBRtTCQM7HcMYOtpWvKrDzqxSHYsBQGl9I"},
{"content":{"body":"like my goal isn't _just_ a correct document, it's correct interopable implementations","format":"org.matrix.custom.html","formatted_body":"like my goal isn't <em>just</em> a correct document, it's correct interopable implementations","msgtype":"m.text"},"ts":1679431791898,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r7U_9fRbjlpNH6bm7zCnzaV99DV3PcvX1xjuR4vnK_k"},
{"content":{"body":"shu: It sounds like you're trying to fit the spec around one possible (and pretty problematic) implementation. The spec should be implementation-agnostic about internal details.","msgtype":"m.text"},"ts":1679431932744,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$yGtAqGTloLhQCnVnNX6Or8Dk9EUGhP9xtQosf_9pc9A"},
{"content":{"body":"in this case my understanding is that the bounds the champions are working to put in place are precisely so that it _is_ implementable with that technique","format":"org.matrix.custom.html","formatted_body":"in this case my understanding is that the bounds the champions are working to put in place are precisely so that it <em>is</em> implementable with that technique","msgtype":"m.text"},"ts":1679431985309,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BNMb2q7P4C7Y-GwkhOpxtfEEvMftfFBkE_oTHj8G0dU"},
{"content":{"body":"I'm also more interested in the ns vs Âµs question.","msgtype":"m.text"},"ts":1679431987106,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$iE40dDiu8wNyQwVKMxnbzxoV3ZWTT0FiMFZXSWaGgw4"},
{"content":{"body":"(also why is the 64+32 impl problematic?)","msgtype":"m.text"},"ts":1679431995568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2zqN8zlK04HMYjKAA7h1UwCIAjGMyqfdJFOQcnETfWA"},
{"content":{"body":"> <@waldemarh:matrix.org> I'm also more interested in the ns vs Âµs question.\n\nI know that ptomato framed this as \"for future discussion\" but I don't see any arguments to switch to microseconds at this point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iE40dDiu8wNyQwVKMxnbzxoV3ZWTT0FiMFZXSWaGgw4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>I&#39;m also more interested in the ns vs Âµs question.</blockquote></mx-reply>I know that ptomato framed this as &quot;for future discussion&quot; but I don't see any arguments to switch to microseconds at this point.","m.relates_to":{"m.in_reply_to":{"event_id":"$iE40dDiu8wNyQwVKMxnbzxoV3ZWTT0FiMFZXSWaGgw4"}},"msgtype":"m.text"},"ts":1679432066790,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AxAikKG-ifz5p9DEWxOThiNlerlrZu4-pS3onzyg3bs"},
{"content":{"body":"Elementary math: 64+32 can implement integral counts of subseconds. This is obvious.","msgtype":"m.text"},"ts":1679432077744,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$kJyKDfbeGXcYXbj6Qt_Sex06EQ6c4wOVwqUREGhJMao"},
{"content":{"body":"well, V8's position is still pro microseconds, but we won't block the proposal on it if implementation complexities and bad performance cliffs are addressed","msgtype":"m.text"},"ts":1679432120924,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7xFOLTwleZteEluEBxeIwSItlr7r2texgfuDIPXDP6M"},
{"content":{"body":"Not obvious: spec that explicitly manages two integers implements integral counts of subseconds. It's easy to get carries and overflows wrong, and you can't tell without examining the entire spec.","msgtype":"m.text"},"ts":1679432127356,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$1OWFwIFNn4njlXdfTn85ttDr0J8dr8X_Us7-ZtVm-Fg"},
{"content":{"body":"i agree with you","msgtype":"m.text"},"ts":1679432155814,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ckfmacPtCgQkr3TecoNSQqXxkdtvQxaIpSWUrmgk4eM"},
{"content":{"body":"what i don't get is, why do you think that trickiness is best left for implementations to all figure out via implication?","msgtype":"m.text"},"ts":1679432173093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AgwQeqOGLilz2WHGlnP7hLF8LmYpoTCzCi2MUwjqXzo"},
{"content":{"body":"If you just want Âµs, then you can store durations in flat 64-bit integers and get a much more efficient implementation with a range of >500,000 years.","msgtype":"m.text"},"ts":1679432184591,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Xh-DZhc6kSqN1jfg0LB-cCiE9M7-D7CvLrrmDyEFGqA"},
{"content":{"body":"indeed! *i* just want us","format":"org.matrix.custom.html","formatted_body":"indeed! <em>i</em> just want us","msgtype":"m.text"},"ts":1679432206855,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rKPrx3QicmjiXFcYircfcLxzlP7SbEZnl_W9Jp7tNWs"},
{"content":{"body":"but v8 has not been able to convince the champion group","msgtype":"m.text"},"ts":1679432216920,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lfQeke9LHXB6tvaX00bf6Mk04_TL3dQ8qG6w_qiSg58"},
{"content":{"body":"> <@waldemarh:matrix.org> If you just want Âµs, then you can store durations in flat 64-bit integers and get a much more efficient implementation with a range of >500,000 years.\n\nDo we have any information that this difference in performance will be signficant? there's so much other stuff going on anyway","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xh-DZhc6kSqN1jfg0LB-cCiE9M7-D7CvLrrmDyEFGqA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>If you just want Âµs, then you can store durations in flat 64-bit integers and get a much more efficient implementation with a range of &gt;500,000 years.</blockquote></mx-reply>Do we have any information that this difference in performance will be signficant? there's so much other stuff going on anyway","m.relates_to":{"m.in_reply_to":{"event_id":"$Xh-DZhc6kSqN1jfg0LB-cCiE9M7-D7CvLrrmDyEFGqA"}},"msgtype":"m.text"},"ts":1679432258077,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VJMpJSnb8FVOSQ95LCN9qm5jxNWYbMVJB952ls_F9u0"},
{"content":{"body":"it's a nuanced conversation that's hard to tease apart","msgtype":"m.text"},"ts":1679432285253,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QQ0RJ57HkfiQ4lyJ2R8UvITn3paY0I0-CXHIDSBK-0Y"},
{"content":{"body":"it's not just absolute performance, it's the complexity around supporting optimized paths also","msgtype":"m.text"},"ts":1679432306047,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QFzWeZ5wK04zb9KGN3fRtmV39El92bPOyJ8ZjkgxxaI"},
{"content":{"body":"it's philosophical objection","msgtype":"m.text"},"ts":1679432309671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cSRYvuXW265YYKcq8sBYUb_KLqpavuegmuXtihV0IeA"},
{"content":{"body":"Whether a difference in performance is significant depends on who is writing the benchmark â˜º","msgtype":"m.text"},"ts":1679432331766,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$EGURGDi_-G9lzn7HTKMhaG2XGWN6hOVJRAv67KrgMPs"},
{"content":{"body":"apaprocki has given examples of other systems that support ns that temporal might want to interface with, which i don't really get at all","msgtype":"m.text"},"ts":1679432349649,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CISpejFqnXlMEKxQf83YjK-OPY1GHKzJ9R1zEfC75Dk"},
{"content":{"body":"ns are common enough nowadays that it seems it would be limiting use cases unnecessarily by limiting to Âµs, e.g. node embeds v8 and would hopefully like to represent filesystem times without losing precision ","msgtype":"m.text"},"ts":1679432361573,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$bjLBYhuJcQv1o4XqFsoMYkbwj0XblvXZp2iHEl0tZPk"},
{"content":{"body":"those other systems don't have ns as part of a date-time arithmetic library, they're raw ns counts","msgtype":"m.text"},"ts":1679432365919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rkzOUDxB4znbeUBnu1vVT1x4R0sMXfaosl86scE9PJg"},
{"content":{"body":"they're int64s","msgtype":"m.text"},"ts":1679432371145,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E8LWWV_el6V3XDZoqg4txmHL_hVg4ZJowvFQIFD3iOk"},
{"content":{"body":"what i'm saying is it doesn't follow \"ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library\" ","msgtype":"m.text"},"ts":1679432397154,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc"},
{"content":{"body":"you still can just put the raw ns count into a BigInt","msgtype":"m.text"},"ts":1679432408297,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yz5DxLQdIbeNfkiSHPipBUgJ3pybjkSOf-pIYDblYT4"},
{"content":{"body":"V8 position is:\n\n- ideal: us precision, simple bounded arithmetic + storage follows straightforwardly\n- can live with: ns precision, with 64+32 being a tried-and-proven implementation technique from e.g. abseil that we can use\n- cannot live with: ns precision, bigint math required","format":"org.matrix.custom.html","formatted_body":"<p>V8 position is:</p>\n<ul>\n<li>ideal: us precision, simple bounded arithmetic + storage follows straightforwardly</li>\n<li>can live with: ns precision, with 64+32 being a tried-and-proven implementation technique from e.g. abseil that we can use</li>\n<li>cannot live with: ns precision, bigint math required</li>\n</ul>\n","msgtype":"m.text"},"ts":1679432554445,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hdKG8tvtBKqGNuso-Dr-vmJrdK-Rl2GEhRffuF5E33Y"},
{"content":{"body":"> <@shuyuguo:matrix.org> what i'm saying is it doesn't follow \"ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library\"\n\nwell, take filesystem times.. certainly those are displayed on screens as formatted date times and not counts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what i&#39;m saying is it doesn&#39;t follow &quot;ns are common enough -&gt; ns need ot be supported in a fully featured date-time arithmetic library&quot; </blockquote></mx-reply>well, take filesystem times.. certainly those are displayed on screens as formatted date times and not counts","m.relates_to":{"m.in_reply_to":{"event_id":"$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc"}},"msgtype":"m.text"},"ts":1679432567123,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$WCqC-ToKhrelJFJWVOX_xKgN6wIwW0dBejZKnuGuS-s"},
{"content":{"body":"great, it's fine to format them","msgtype":"m.text"},"ts":1679432579803,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d4Vlh-1pM6PlK3b-SC2eTYLxho_otXNQ0Ipvw2b0nq4"},
{"content":{"body":"you need to do full arithmetic to ns precision?","msgtype":"m.text"},"ts":1679432592989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Fg3oDRg7nPt064eCrNkwDJW_lA0fJHETH1OFVvP7V-o"},
{"content":{"body":"how is that useful?","msgtype":"m.text"},"ts":1679432598717,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$v2AUkmtB4owtPA_DTUCRogDzMf4o24dAB8DuO6dQMXQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> you need to do full arithmetic to ns precision?\n\nI haven't found this as a hard requirement for us when I talked to the relevant groups (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fg3oDRg7nPt064eCrNkwDJW_lA0fJHETH1OFVvP7V-o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you need to do full arithmetic to ns precision?</blockquote></mx-reply>I haven't found this as a hard requirement for us when I talked to the relevant groups (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","m.relates_to":{"m.in_reply_to":{"event_id":"$Fg3oDRg7nPt064eCrNkwDJW_lA0fJHETH1OFVvP7V-o"}},"msgtype":"m.text"},"ts":1679432785107,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wR5M-EL5OAYPQ2KD4OS6wDSytiScIx5MDUL3ODi6SZc"},
{"content":{"body":"> <@shuyuguo:matrix.org> you need to do full arithmetic to ns precision?\n\n * I haven't found this as a hard requirement for us when I talked to the relevant groups inside of Bloomberg (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fg3oDRg7nPt064eCrNkwDJW_lA0fJHETH1OFVvP7V-o?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you need to do full arithmetic to ns precision?</blockquote></mx-reply> * I haven't found this as a hard requirement for us when I talked to the relevant groups inside of Bloomberg (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","m.new_content":{"body":"I haven't found this as a hard requirement for us when I talked to the relevant groups inside of Bloomberg (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","format":"org.matrix.custom.html","formatted_body":"I haven't found this as a hard requirement for us when I talked to the relevant groups inside of Bloomberg (except for certain algorithms like PTP which we probably wouldn't end up porting to JS)","msgtype":"m.text"},"m.relates_to":{"event_id":"$wR5M-EL5OAYPQ2KD4OS6wDSytiScIx5MDUL3ODi6SZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679432795169,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$S4qA-1sm3NeKlOFVwtW3lMlinbN2sxV7h7EKVbPRPk0"},
{"content":{"body":"there are certain feeds of information where the individual events are represented in ns precision and series of events could be displayed as offsets from an initial event (in essence, durations from an arbitrary epoch rather than UTC epoch)","msgtype":"m.text"},"ts":1679432931733,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$adh434AM2wtgaPryGm7CV1aaSq-Xvntg8aSmjmUA-ME"},
{"content":{"body":"> <@shuyuguo:matrix.org> what i'm saying is it doesn't follow \"ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library\"\n\nI think using ns would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what i&#39;m saying is it doesn&#39;t follow &quot;ns are common enough -&gt; ns need ot be supported in a fully featured date-time arithmetic library&quot; </blockquote></mx-reply>I think using ns would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","m.relates_to":{"m.in_reply_to":{"event_id":"$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc"}},"msgtype":"m.text"},"ts":1679433000699,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2KURm7sjyxUnvNyax5f33wYUviLTAxcFbSwskePFAfk"},
{"content":{"body":"(and a later evolution here would be really bad, given compat/interop risks)","msgtype":"m.text"},"ts":1679433054630,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ubtBBjQBOtCu5PVX9vn71MB5wUbKTMiPN3BgexFAPRI"},
{"content":{"body":"> <@shuyuguo:matrix.org> what i'm saying is it doesn't follow \"ns are common enough -> ns need ot be supported in a fully featured date-time arithmetic library\"\n\n * I think using us would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y0wnGz5yipewKrLSIfLeJaCYBptX4oXYe9De-BOQBgc?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what i'm saying is it doesn't follow \"ns are common enough -&gt; ns need ot be supported in a fully featured date-time arithmetic library\" </blockquote></mx-reply> * I think using us would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","m.new_content":{"body":"I think using us would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","format":"org.matrix.custom.html","formatted_body":"I think using us would create somewhat of a risk, that Temporal might become obsolete (which is a surprising choice given how much else we decided to be super future-proof for). It's sort of clear that we don't really need to go more precise than ns.","msgtype":"m.text"},"m.relates_to":{"event_id":"$2KURm7sjyxUnvNyax5f33wYUviLTAxcFbSwskePFAfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679433145663,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eHbj1cfNAJUoFHB7Vc5GQrinJGs81ZAOPKnxgE_FFG8"},
{"content":{"body":"yes (edited)","msgtype":"m.text"},"ts":1679433149713,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ojN8ltoCbh0xedtrurv6Q1x7SlYiY56cxD6WakM1V5k"},
{"content":{"body":"Good news everyone: The transcriptionist might be available for tomorrow!","msgtype":"m.text"},"ts":1679433343565,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4yHtDkA69IKa9dk3CWYLKU7j3Sj-9sKrupIxEAMLGj0"},
{"content":{"body":"(they got back to me by email)","msgtype":"m.text"},"ts":1679433352285,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OnfZWJyI07QszWu0JwOIJ-da9hlG5atxsYL9u2Tv7wM"},
{"content":{"body":"this isn't worth bringing up, but `await` is not reserved in strict mode, only in module code and async functions","format":"org.matrix.custom.html","formatted_body":"this isn't worth bringing up, but <code>await</code> is not reserved in strict mode, only in module code and async functions","msgtype":"m.text"},"ts":1679434080963,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jGe0Beq4SHw7aDqtF4g7PT8LqOYTVVqPDPmMCu6kfyc"},
{"content":{"body":"very very few people are aware of syntax being dependent on the start symbol","msgtype":"m.text"},"ts":1679434122649,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1d9eI6BVuctLT4hQ7H-Sg0jFhZHXd5qqrt0gHa4nF_Y"},
{"content":{"body":"bakkot: perhaps we should have `Set.prototype.sort` if the sort order is important?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: perhaps we should have <code>Set.prototype.sort</code> if the sort order is important?","msgtype":"m.text"},"ts":1679434176312,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N7gzmq-L_crofD8jdNpOPUWw8zYXHqJjP-9DxIKMfXk"},
{"content":{"body":"if you're going to explicitly manage the sort order, put it in an explicitly ordered container","msgtype":"m.text"},"ts":1679434206717,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2SXytjcUQibqFWFGRVmi6ESQQe7Xq9pH-7ZyY9zPs8E"},
{"content":{"body":"the problem is that when I care about the order it's because I care about insertion order specifically","msgtype":"m.text"},"ts":1679434208011,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JAZehUp2KI514qP4m1FU9rjI8bILYCmlScJ3nvulYaM"},
{"content":{"body":"and you can't sort it into \"insertion order\"","msgtype":"m.text"},"ts":1679434215760,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Xk33aGQ4jNZbwyhoRTaPJMApd3p6UGGWMsBYj1LEM8k"},
{"content":{"body":"ah true, hm","msgtype":"m.text"},"ts":1679434351826,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vU96RN_gR5sWYANbPAbcxHtqIkgzvefhKjxe6MQ8_B0"},
{"content":{"body":"I know we don't have much else to go on, but I feel like we're taking these poll results way too seriously","msgtype":"m.text"},"ts":1679434505259,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AODAoDmuaJwdUetlwJuENur5q9GdhXIczc_VghpGxo0"},
{"content":{"body":"right now we're just hearing what they are","msgtype":"m.text"},"ts":1679434524998,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Cb3Hc6Owr-g0btNuBmPOmyhJT4uxjLr86RzmayGRKu0"},
{"content":{"body":"no one has expressed anything about what to do with them","msgtype":"m.text"},"ts":1679434538876,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MkATUgYPKJTkDnnC9Mf5l3uHB7oGFwyu5L00sO0rnf4"},
{"content":{"body":"for await has always felt like an awkward piece of syntax to me, though","msgtype":"m.text"},"ts":1679434889362,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4-07sdSTTmOfVBvoqCsZOWOFXf6t8j72XHkuonw-kq4"},
{"content":{"body":"like I don't know if we should be using it to guide future syntax choices","msgtype":"m.text"},"ts":1679434915097,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rOSaAoxr_TGva2WdEo4rVXsvZWCQQcg7u5NRv5OWPx4"},
{"content":{"body":"tbf if we're just picking something because we have to pick something, \"difficulty of parsing\" is a fine reason to choose - I just wouldn't want \"difficulty of parsing\" to prevent us from picking a thing we do all think is best","msgtype":"m.text"},"ts":1679435044128,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ePERI-TtUB07qG4x2Y6l7gy6PxyLE8QNsIjd-3eHeO4"},
{"content":{"body":"> <@michaelficarra:matrix.org> for await has always felt like an awkward piece of syntax to me, though\n\nhuh? it seems intuitive to me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4-07sdSTTmOfVBvoqCsZOWOFXf6t8j72XHkuonw-kq4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>for await has always felt like an awkward piece of syntax to me, though</blockquote></mx-reply>huh? it seems intuitive to me","m.relates_to":{"m.in_reply_to":{"event_id":"$4-07sdSTTmOfVBvoqCsZOWOFXf6t8j72XHkuonw-kq4"}},"msgtype":"m.text"},"ts":1679435086829,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7Jf212cUnNzO8UfHBGUCsESnjHBdPxWkIDx-8FhfHhU"},
{"content":{"body":"as a code reader, I kind of want a syntactic note on the block that it may await at the end, not just on individual statements in the block","msgtype":"m.text"},"ts":1679435208421,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$3-WxUD9grUNGY9S5yFakeEi5FDIAXB-6q7o3zLwkI1A"},
{"content":{"body":"like `async` on a function","format":"org.matrix.custom.html","formatted_body":"like <code>async</code> on a function","msgtype":"m.text"},"ts":1679435217596,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$XCqODrI9ICJK1RueMYyp0rzzazudV9Tl2Ln-4KE5bOk"},
{"content":{"body":"justin, is this just syntax shock?  I fully have the same initial reaction as you.  I just recall many times when my initial reaction is later overcome once it goes into the language and you get used to it","msgtype":"m.text"},"ts":1679435313530,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$6P1xx3rOc9gaaNq35L_N05Bw-pc60GULqXdVA12jeZU"},
{"content":{"body":"that's not much of an argument though, because you can make that about literally syntax we choose?","msgtype":"m.text"},"ts":1679435350295,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xo1EvvqixPh9RBmz6CXxotTxl9IaWqn5ho3HvVnlK1Y"},
{"content":{"body":"could be?","msgtype":"m.text"},"ts":1679435350331,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$BnurqBNiHv18CwjZg-Q6gnhNe3YlwAS0ZQzaCHLTsLU"},
{"content":{"body":"\"you'll get used to it\"","msgtype":"m.text"},"ts":1679435354119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$U_MAy0l0v4QyB2ZV2jd_2TwEhhJmseFEs--PcLUQ9yc"},
{"content":{"body":" * that's not much of an argument though, because you can make that about literally any syntax we choose?","m.new_content":{"body":"that's not much of an argument though, because you can make that about literally any syntax we choose?","msgtype":"m.text"},"m.relates_to":{"event_id":"$Xo1EvvqixPh9RBmz6CXxotTxl9IaWqn5ho3HvVnlK1Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679435362426,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GckeEvqIPJ8TPLD6SBGyIJPKbhk42xU5tS0XEAXcjjE"},
{"content":{"body":"That could be the JS motto.","msgtype":"m.text"},"ts":1679435366480,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KdIBiBUyd9up6P4ETzlx_IjKiRTVW-bS1zWMvn40vJI"},
{"content":{"body":"justinfagnani: yeah the original design was more like python's `with` or java's `try-with-resources`, which has that ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@justinfagnani:matrix.org\">justinfagnani</a>: yeah the original design was more like python's <code>with</code> or java's <code>try-with-resources</code>, which has that","msgtype":"m.text"},"ts":1679435412880,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RDYY54Z9yToVAFlbMscfkjPunbZMxuGSlslznosvyqM"},
{"content":{"body":"but we ultimately decided not that","msgtype":"m.text"},"ts":1679435421966,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uHAS_YgFB3sQ8uk7kp_HEKniMxfbLPw3CgO9KVrrnhk"},
{"content":{"body":"Would something like:\n```\nasync {\n   await using x = y;\n   foo();\n}\n```\nmake it more clear that the block may yield at the end?","format":"org.matrix.custom.html","formatted_body":"<p>Would something like:</p>\n<pre><code>async {\n   await using x = y;\n   foo();\n}\n</code></pre>\n<p>make it more clear that the block may yield at the end?</p>\n","msgtype":"m.text"},"ts":1679435429099,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$y9jU0EPmR3zgb_uMpskDNfHxE-IRGnv5QKFO-NOSQDI"},
{"content":{"body":"bakkot: ok","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: ok","msgtype":"m.text"},"ts":1679435433891,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$iEq68Tln0WkcgknUuxaaMmsFkVLFAuQXRbo6Y4jFJjk"},
{"content":{"body":"FYI, Mark is not active on Matrix","m.relates_to":{"event_id":"$BbYMTALybo1gC3yG_QxQkWAiqFjcPjHBZXqOlPxmCu8","is_falling_back":true,"m.in_reply_to":{"event_id":"$BbYMTALybo1gC3yG_QxQkWAiqFjcPjHBZXqOlPxmCu8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679435437837,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ezhyz0k6nvST3VWnh1ho2ssjpdwDoLm8sOOxwoQLssQ"},
{"content":{"body":"> <@justinfagnani:matrix.org> Would something like:\n> ```\n> async {\n>    await using x = y;\n>    foo();\n> }\n> ```\n> make it more clear that the block may yield at the end?\n\nThis was something we discussed in depth and resolved in the last meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$y9jU0EPmR3zgb_uMpskDNfHxE-IRGnv5QKFO-NOSQDI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@justinfagnani:matrix.org\">@justinfagnani:matrix.org</a><br><p>Would something like:</p>\n<pre><code>async {\n   await using x = y;\n   foo();\n}\n</code></pre>\n<p>make it more clear that the block may yield at the end?</p>\n</blockquote></mx-reply>This was something we discussed in depth and resolved in the last meeting","m.relates_to":{"m.in_reply_to":{"event_id":"$y9jU0EPmR3zgb_uMpskDNfHxE-IRGnv5QKFO-NOSQDI"}},"msgtype":"m.text"},"ts":1679435446510,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oHW-ucI94_BHPQiIu--8FtFFFHUMH87pxozlKQdgQT8"},
{"content":{"body":"ok, thanks","msgtype":"m.text"},"ts":1679435455721,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$IVnNUn3LVTGki8Fm-rVuCjqCLmBYralc2RO62wdrUdI"}
]