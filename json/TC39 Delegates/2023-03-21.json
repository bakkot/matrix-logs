[
{"content":{"body":"Hello all.  Plenary meeting begins in just under two hours.\n\nFor those attending in person in Seattle, please arrive from 09:20 where you will be met in the F5 lobby.  Breakfast will be served on the same floor as the meeting room from 09:30.","msgtype":"m.text"},"ts":1679411665580,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4CiidZgk434e7_odYMs57aZrv0RziF39hAEg-ec2v3A"},
{"content":{"body":"i still don't see a zoom link","msgtype":"m.text"},"ts":1679412808750,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y6THygKzD0T2h5VuatsF9JkBIskfWv40hb8sPsi03y0"},
{"content":{"body":"The entry-form containing the zoom link will be posted in the next 30 mins and I will notify here.","msgtype":"m.text"},"ts":1679413389339,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$eOaCO0aU1SabATBbS91r-UpRBLD34QblrG_blejoqos"},
{"content":{"body":"why we're always changing the meeting software ðŸ¤”","msgtype":"m.text"},"ts":1679415652868,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$yetD-z_QzPoFVciOKinlPARgCIOGK8_32rkbN0b759U"},
{"content":{"body":"The entry form is now available on the Reflector:  https://github.com/tc39/Reflector/issues/461","msgtype":"m.text"},"ts":1679415679509,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$gOW5L7GCS5k1SIdahZmUx-Dh_Qo1TXH0g9n7p_NTb88"},
{"content":{"body":"Jack Works: This is due to host room setup.  The room has been built to work with Zoom, e.g. the AV is connected to an inaccessible Zoom server.  We did try to get Google Meet running with no success.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: This is due to host room setup.  The room has been built to work with Zoom, e.g. the AV is connected to an inaccessible Zoom server.  We did try to get Google Meet running with no success.","msgtype":"m.text"},"ts":1679415761770,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RF4XxgzMmNCUNdgz0u4WbYO0OzzxrXQFxY6kI06fSfQ"},
{"content":{"body":"We begin in 5 minutes! ","msgtype":"m.text"},"ts":1679417726947,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$gvqY1buutOlUot56bsLnFU5mQqZJ0PISJAsuY0O6NsE"},
{"content":{"body":"This is our room for the week. ","format":"org.matrix.custom.html","formatted_body":"This is our room for the week.","msgtype":"m.text"},"ts":1679417772048,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$LkvrBCOhoKD_no54M5NqLc6j1Vpa8faGRJByOwHtluc"},
{"content":{"body":"looks great!","msgtype":"m.text"},"ts":1679417983211,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$cJ-V-t_IDIm-_3CuZ9jUsjQK9MW7G3N3WluUkWY3uT8"},
{"content":{"body":"Customer Engagement Center","msgtype":"m.text"},"ts":1679418141178,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GPMzCXu7Nc9K9tADCdtOBikl2KUCexfShEI5H0PsZlg"},
{"content":{"body":"looks really fancy","msgtype":"m.text"},"ts":1679418281900,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hupXPmP-_gX1zleqkQ4dFsyeOZiCQSyTIhukkDQ8dpI"},
{"content":{"body":"(im not present in any form today)","msgtype":"m.text"},"ts":1679418290899,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$toOeHJ01V7ss1Ir6U8afmtWRoEb2b95hAPhmsxJgm-g"},
{"content":{"body":"Wish I was there","msgtype":"m.text"},"ts":1679418595474,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$MeFG2WQ4bK6MrDnbn0CfK8VkVf0hltd80eU_B1gDqSk"},
{"content":{"body":"@bakkot You should probably advertise somehow that you are recording for the late arrivals.","msgtype":"m.text"},"ts":1679418895648,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$zvFqgEjxDB9g4h8eo9jXv9ePvK69L6k0v_QKRKb5C40"},
{"content":{"body":"msaboff: I'll say it again in my editor update","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: I'll say it again in my editor update","msgtype":"m.text"},"ts":1679419541212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9EyptGgvCZmScZncM5lFb_hpeqDC_oHgstQvoDz3esE"},
{"content":{"body":"dminor: not sure i understand that point. that sounds like mozilla-internal meeting wrangling","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: not sure i understand that point. that sounds like mozilla-internal meeting wrangling","msgtype":"m.text"},"ts":1679422154210,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YBLaURE4xJuJ26XUjq1Rsu_8lIJ08Lb1gm6fzZ29UiE"},
{"content":{"body":"I think the point they tried to make was that what Shane's mentioning now","msgtype":"m.text"},"ts":1679422184985,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$lWgb7X58ruA6RbczFEzQO9EDDITTjKBil_YAGBGuYeQ"},
{"content":{"body":"TG2 is run very differently","msgtype":"m.text"},"ts":1679422190817,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NBaoYerXcgPdT2ra8nwnNDmXC8f6pVgam8LRnJpPTBo"},
{"content":{"body":"for one, the agenda isn't set up clearly ahead of time","msgtype":"m.text"},"ts":1679422203712,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$G8kQ9LjEC7BVu5wT3kWUTANG2YSo_xrj-PIdafGvWqc"},
{"content":{"body":"we don't use TCQ but do use a simpler Google Meet queue","msgtype":"m.text"},"ts":1679422240706,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$DwtViOb7QXz-q7XHhFyWXlAaenC_7fSSUj2x1EZur0Q"},
{"content":{"body":"ah i misunderstood then, it was about how TG2 is run, not mozilla?","msgtype":"m.text"},"ts":1679422242196,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tDO-WFfDww-ZSiIQEzXe4s-1b5RC_xdB9iL53zry9Xk"},
{"content":{"body":"well, a bit of both I thought","msgtype":"m.text"},"ts":1679422267994,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ySCl9-cB-S9T0RoacabvsiwJMTrxPoV0EIZ4P52Z1ZE"},
{"content":{"body":"because of how TG2 is run, Mozilla cannot have structured internal discussions about the agenda a week ahead","msgtype":"m.text"},"ts":1679422292299,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$K4cPl_BY7YQ0AKayfDveRy3WRcC6EdGwdLxRXmSAVPA"},
{"content":{"body":"(IIUC, dminor will probably correct me)","format":"org.matrix.custom.html","formatted_body":"(IIUC, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a> will probably correct me)","msgtype":"m.text"},"ts":1679422302907,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ErnTBQ4rVfFz39X9G0Og2Yczt5yjI4JFETk1rGgRAqw"},
{"content":{"body":"Basically, it would be difficult for us to review proposals properly in advance given the way that TG2 is currently run, so we'd prefer to continue to do advancement in the main committee meetings","msgtype":"m.text"},"ts":1679422303303,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$Fd401WsmTu2WHdTBx7zeCwPNL9dg_BeHhmIpBfL4Qzc"},
{"content":{"body":"dminor: okay, thanks","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: okay, thanks","msgtype":"m.text"},"ts":1679422328307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9VJkfGpV-DN3MI_J2wYRWsa-0WYzKzKX-58X_yR9yLo"},
{"content":{"body":"Async: Please share the link to the slides on test262 funding so we can reference them from the notes.","msgtype":"m.text"},"ts":1679422528133,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NNHptmt958uAxaKCXTSLnDbnzH019y3lA8e7sKnHDhw"},
{"content":{"body":"https://ptomato.name/talks/tc39-2023-03/","msgtype":"m.text"},"ts":1679423123256,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$G2TD3BcdM1fYFxfVitX4sQvfRxXzDG9g9zdDZOPUJsc"},
{"content":{"body":"agenda and notes updated","msgtype":"m.text"},"ts":1679423127795,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$x1VI5EsK31g37RWz2neK3EkDi5p11ItkZTeOj_Hw3W8"},
{"content":{"body":"To meet Justin Grant's schedule constraint, we are suggesting Temporal will be at 13:00 (first thing after lunch)","msgtype":"m.text"},"ts":1679423334614,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KN8W7-3DWfkSna0bXW7eL1i_Amk0L7yljSTf4ByvVs0"},
{"content":{"body":"wow jordan sounds great","msgtype":"m.text"},"ts":1679423493736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BCShPRVsuu0ubxcvcQwgCqKTh08UqKOuMrM6zKgjFSw"},
{"content":{"body":"kudos to these room mics","msgtype":"m.text"},"ts":1679423497004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j3i9iLj5QGOJcpiSYim8vxQ-PV9tDyzD_EkzC_Ur35w"},
{"content":{"body":"Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC \"dues\" could work if rolled up into the yearly fee.","msgtype":"m.text"},"ts":1679423503224,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc"},
{"content":{"body":"A lot of pain in companies contracting out work if they can't do it themselves is the burden of that internal process... ","msgtype":"m.text"},"ts":1679423540825,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$VImFaLXoJrZFULXKX5B9Qq_1Scb5tgWyHw0WneR5J9s"},
{"content":{"body":"it definitely seems like the primary purpose of member dues is so Ecma, not individual members, can fund shared needs.","msgtype":"m.text"},"ts":1679423736486,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YS9OGwbX_Le3S3YA8MNJUdUZmENie882glfmkSLyT1A"},
{"content":{"body":"not sure how renaming to limit/skip solve the problem ...","msgtype":"m.text"},"ts":1679425142634,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g"},
{"content":{"body":"do all of the iterator helpers currently close the underlying iterator?","msgtype":"m.text"},"ts":1679425210701,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$bLrkDhCyXSplHaaNswnv2MdpQKCFPJlygw8DlefiLsA"},
{"content":{"body":"> <@haxjs:matrix.org> not sure how renaming to limit/skip solve the problem ...\n\nI don't think it does, especially given the rather common meaning of `take` across the ecosystem as well as other languages.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>not sure how renaming to limit/skip solve the problem ...</blockquote></mx-reply>I don't think it does, especially given the rather common meaning of <code>take</code> across the ecosystem as well as other languages.","m.relates_to":{"m.in_reply_to":{"event_id":"$kO3rGXuSqNNhQY-2aAdmZetgGbrXvUPCDc6vHgL3r-g"}},"msgtype":"m.text"},"ts":1679425236477,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VFQoIzF_Hz44hbOpahxGtBFi-bZ9awsublWf-w1QnDM"},
{"content":{"body":"> <@apaprocki:matrix.org> Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC \"dues\" could work if rolled up into the yearly fee.\n\nEcma folks have told me that there have been shared costs historically, and that members handle their own financial things when it comes up","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br>Do any other Ecma TCs have shared costs between member companies that attend? Curious if something like specific TC &quot;dues&quot; could work if rolled up into the yearly fee.</blockquote></mx-reply>Ecma folks have told me that there have been shared costs historically, and that members handle their own financial things when it comes up","m.relates_to":{"m.in_reply_to":{"event_id":"$zeMUAUzA5eQ1gjTrydgGQcowFhpm9RGjhsarfWCKhPc"}},"msgtype":"m.text"},"ts":1679425273781,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7jOrJcr3eRRJFenDRPgeIrP6rl0p6EzeZvzmYAVFKdk"},
{"content":{"body":"It's rather trivial to write a wrapper for an iterator that doesn't forward `return`","format":"org.matrix.custom.html","formatted_body":"It's rather trivial to write a wrapper for an iterator that doesn't forward <code>return</code>","msgtype":"m.text"},"ts":1679425275674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XR1XaS-y1dKt8IcHOY5GpgCtV5HwJWuDzPrZlTzTs5s"},
{"content":{"body":"(and they consider this best practice in general)","msgtype":"m.text"},"ts":1679425281874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nq2Nr1FpDPniOkzud8b9EgDi0H-W0lCEs9ICr28tLfg"},
{"content":{"body":"We will return in one hour.  If any of the remote attendees have feedback on AV etc please say it here.","msgtype":"m.text"},"ts":1679425295695,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$yyuwZ0eOkJW_rnZhcsrhtCCDSgMtfwf4l3w0DRheCx4"},
{"content":{"body":"I find \"limit\" less understandable than \"take\". If it helps avoid misunderstanding, I would expect that's only because one has to read the docs to understand what it does at all.","msgtype":"m.text"},"ts":1679425317028,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$4oaePQ6eVAHmYTtr4QpB-tpBYv2y0idkX4V8n5mPGMQ"},
{"content":{"body":"imo \"limit\" conveys very clearly that the iterator is closed, i guess because it sounds like SQL limit, and obviously SQL queries are not stateful; whereas \"take\" is much more ambiguous. but i guess this is a minority view!","msgtype":"m.text"},"ts":1679425806956,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$XlOZi1l9Mo2l-hRf65tjkMx0BMnnwz5wDsEFbP-4_EU"},
{"content":{"body":"Are there actually any iterator helpers in the proposal that do *not* close the underlying iterator?","format":"org.matrix.custom.html","formatted_body":"Are there actually any iterator helpers in the proposal that do <em>not</em> close the underlying iterator?","msgtype":"m.text"},"ts":1679428600878,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$CBiSvxaQcEYoNNsP7zSKmZkpnSPAueuVsHsXJA72aV0"},
{"content":{"body":"They all either iterate everything (thus closing the underlying), or close when they early exit","msgtype":"m.text"},"ts":1679428700647,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3SaGUN59hiq02tsEIb5s01gLu59__j85NbE8zrxnY5o"},
{"content":{"body":"`take` is special in that `take` ends _before_ exhausting the underlying iterator","format":"org.matrix.custom.html","formatted_body":"<code>take</code> is special in that <code>take</code> ends <em>before</em> exhausting the underlying iterator","msgtype":"m.text"},"ts":1679428706161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o"},
{"content":{"body":"My general expectation is that if I pass an iterator off to any other code, I should assume it is exhausted and not touch it again myself.","msgtype":"m.text"},"ts":1679428713685,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$oz7qBoZk6tR7UGjQ15BDKKX07by6lQW6PKG5jj4o_2Q"},
{"content":{"body":"whereas if you `map` or something the expectation is that it either you are exhausting it, which will naturally close the underlying iterator, or closing the `map` helper explicitly","format":"org.matrix.custom.html","formatted_body":"whereas if you <code>map</code> or something the expectation is that it either you are exhausting it, which will naturally close the underlying iterator, or closing the <code>map</code> helper explicitly","msgtype":"m.text"},"ts":1679428760898,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CdcyhI_b1PCm5jeYc-w3a5zEIDG017WQlGjU3oNNaT8"},
{"content":{"body":"> <@bakkot:matrix.org> `take` is special in that `take` ends _before_ exhausting the underlying iterator\n\nSo does `some`, `every`, and `find`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>take</code> is special in that <code>take</code> ends <em>before</em> exhausting the underlying iterator</blockquote></mx-reply>So does <code>some</code>, <code>every</code>, and <code>find</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$6hYquWeBzckEHNDojdOm0rMpC7Ox8FCnbM2xQZUg18o"}},"msgtype":"m.text"},"ts":1679428803787,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lhJcEM97p2mjGP9mGpxMSVXKmyo8JH10vrP8WTOQZNs"},
{"content":{"body":"Justin Ridgewell: those don't produce new iterators though","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: those don't produce new iterators though","msgtype":"m.text"},"ts":1679428833166,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jn_th_aAVKJS6HYKM1XwjQTn-uKbiFuLb4DnHFUUt9s"},
{"content":{"body":"Caveat being that `some`, `every`, and `find` return scalar results","format":"org.matrix.custom.html","formatted_body":"Caveat being that <code>some</code>, <code>every</code>, and <code>find</code> return scalar results","msgtype":"m.text"},"ts":1679428837297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JrTXeVwelqbzC16XaSjOtYZwnrCLNY7VC3lI98-siyA"},
{"content":{"body":"they are as it were \"consumers\" rather than \"transfomers\"","msgtype":"m.text"},"ts":1679428842904,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wq1iPT5LY-Pma59h_cf528w1wy8NZ0kwY2MPtApKHk8"},
{"content":{"body":"Though `take` ending before exhausting the iterator is a misconception. The fact it calls `return` is more of an optimization than a meaningful difference when it comes to sequence operators.","format":"org.matrix.custom.html","formatted_body":"Though <code>take</code> ending before exhausting the iterator is a misconception. The fact it calls <code>return</code> is more of an optimization than a meaningful difference when it comes to sequence operators.","msgtype":"m.text"},"ts":1679428918247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$axhOROn-CQR_KymOTJYD0N_tVBYhQ8D_yXSUOThtENA"},
{"content":{"body":"by \"an optimization\", do you mean relative to the option of manually exhausting the underlying by calling `.next` repeatedly, or something else?","format":"org.matrix.custom.html","formatted_body":"by &quot;an optimization&quot;, do you mean relative to the option of manually exhausting the underlying by calling <code>.next</code> repeatedly, or something else?","msgtype":"m.text"},"ts":1679428976562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpXMfRbPEjmN8h4Bf1nZy8CNQqbly4dBO7RmcGNnkwg"},
{"content":{"body":"Yes.","msgtype":"m.text"},"ts":1679428989091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DKOcA9k4Uqz7pvJmFtMfbBq31orUWvXFuFDcWMb4Gbo"},
{"content":{"body":"If JS had no `.return` and the only way to close an iterator were to exhaust it, I would expect `take` to exhaust the iterator.","format":"org.matrix.custom.html","formatted_body":"If JS had no <code>.return</code> and the only way to close an iterator were to exhaust it, I would expect <code>take</code> to exhaust the iterator.","msgtype":"m.text"},"ts":1679429021995,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t6CPgva04bgqgR0zUJDnjOJ7k1k_wIjLVNaG6wgvDZQ"},
{"content":{"body":"So its good that `return` exists, as it allows us to short-circuit such an expensive operation.","format":"org.matrix.custom.html","formatted_body":"So its good that <code>return</code> exists, as it allows us to short-circuit such an expensive operation.","msgtype":"m.text"},"ts":1679429054735,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UPMdledS_VBNgl-28eUptvvIKHd_IPOxUOh9bJJ0Hko"},
{"content":{"body":"But I'm pretty sure that in every example of prior art in the ecosystem, where `take` is used it means \"take X items and exhaust/close the underlying iterator\"","format":"org.matrix.custom.html","formatted_body":"But I'm pretty sure that in every example of prior art in the ecosystem, where <code>take</code> is used it means &quot;take X items and exhaust/close the underlying iterator&quot;","msgtype":"m.text"},"ts":1679429110505,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$phVH4JjeACMvRB17UVAOQSrIeHsT1aW6W3G8LNxj19I"},
{"content":{"body":"If the iterator were a database, I would expect `take` to close the connection when completed. ","format":"org.matrix.custom.html","formatted_body":"If the iterator were a database, I would expect <code>take</code> to close the connection when completed.","msgtype":"m.text"},"ts":1679429135432,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zjidxff-uZCUGxeEQPFwJt18AW4eITgSnyF23to90Hc"},
{"content":{"body":" * If the iterator were backed by a database, I would expect `take` to close the connection when completed.","format":"org.matrix.custom.html","formatted_body":" * If the iterator were backed by a database, I would expect <code>take</code> to close the connection when completed.","m.new_content":{"body":"If the iterator were backed by a database, I would expect `take` to close the connection when completed.","format":"org.matrix.custom.html","formatted_body":"If the iterator were backed by a database, I would expect <code>take</code> to close the connection when completed.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Zjidxff-uZCUGxeEQPFwJt18AW4eITgSnyF23to90Hc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429142070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tqUFjV1Vq6C5ewYwp2dvEdJg6NSXvkyBZzVwEthaXSM"},
{"content":{"body":"The alternative is resource starvation, which is a bad failure state.","msgtype":"m.text"},"ts":1679429155389,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j9pLdhNclCJMRDTiZwMmnK0tQ-S0TRWhfo54D5eVp70"},
{"content":{"body":"If you want \"consume X and not close\", that operation is normally named something like `read` (at least, where IO is concerned)","format":"org.matrix.custom.html","formatted_body":"If you want &quot;consume X and not close&quot;, that operation is normally named something like <code>read</code> (at least, where IO is concerned)","msgtype":"m.text"},"ts":1679429201972,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m2sEEGrvdB6IOb98YxtLz1ZutthIPhtaHFFNOt3NreM"},
{"content":{"body":"erights: i finished the iterator helpers \"close the underlying iterator\" change before lunch, and it passes all the proposed test262 tests as well as my own","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: i finished the iterator helpers &quot;close the underlying iterator&quot; change before lunch, and it passes all the proposed test262 tests as well as my own","msgtype":"m.text"},"ts":1679429450479,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BbYMTALybo1gC3yG_QxQkWAiqFjcPjHBZXqOlPxmCu8"},
{"content":{"body":"We are bringing forward  Async Explicit Resource Management to happen this afternoon.  TCQ and draft schedule are updated accordinlgly.","msgtype":"m.text"},"ts":1679429604852,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$4sAxfFyyEf7Q2Wu-TLw7OU6s0NKrIXt-OdqEq6N7c8s"},
{"content":{"body":"rbuckton: isn't your claim about taking more uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more uncommon directly contradicting by the issue that prompted this discussion?","msgtype":"m.text"},"ts":1679429738745,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc"},
{"content":{"body":" * rbuckton: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","m.new_content":{"body":"rbuckton: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicting by the issue that prompted this discussion?","msgtype":"m.text"},"m.relates_to":{"event_id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429747087,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$h_FmMnO_xegrQLm5_KXjtiqvv6I5KjwKd1Xon3bn8sE"},
{"content":{"body":" * rbuckton: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","m.new_content":{"body":"rbuckton: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: isn't your claim about taking more being uncommon directly contradicted by the issue that prompted this discussion?","msgtype":"m.text"},"m.relates_to":{"event_id":"$xljw9TnXMMtpNdBh1J5S1bqwccsRZIfpK812HIokZZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679429754997,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$QeLOsREEl-HN8CQpN_VDtCXjs8SXQ4VmBOKU3Dj-C34"},
{"content":{"body":"My impression is that the use case in that issue was a misuse of the API. Perhaps `take` may seem confusing in a vacuum, but not with adequate context","format":"org.matrix.custom.html","formatted_body":"My impression is that the use case in that issue was a misuse of the API. Perhaps <code>take</code> may seem confusing in a vacuum, but not with adequate context","msgtype":"m.text"},"ts":1679429814435,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M8ajqD0FSsB_XuZ_tDZeDtFaoRXCYxlU2d61_L8D_vA"},
{"content":{"body":"Why is it \"Speaker's summary of key points\" rather than \"summary of key points\" in the notes?","msgtype":"m.text"},"ts":1679429958829,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc"},
{"content":{"body":"Didn't get to it due to time, but there is precedence for a `preventClose`/`preventReturn` option on the web: `preventClose` on `ReadableStream.prototype.pipeTo` and `ReadableStream.prototype.pipeThrough`. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.","format":"org.matrix.custom.html","formatted_body":"Didn't get to it due to time, but there is precedence for a <code>preventClose</code>/<code>preventReturn</code> option on the web: <code>preventClose</code> on <code>ReadableStream.prototype.pipeTo</code> and <code>ReadableStream.prototype.pipeThrough</code>. I am not necessarily in favour of adding that - but if we did, people may already be familiar with the opt out behaviour.","msgtype":"m.text"},"ts":1679429965606,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$viLr-tUJQirVXPbJbFAbtUFjq1FFSjqZVSWJ3YEHmcM"},
{"content":{"body":"> <@littledan:matrix.org> Why is it \"Speaker's summary of key points\" rather than \"summary of key points\" in the notes?\n\nI haven't really been seeing speakers fill this in; I think note-takers and the committee could fill it in as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Why is it &quot;Speaker&#39;s summary of key points&quot; rather than &quot;summary of key points&quot; in the notes?</blockquote></mx-reply>I haven't really been seeing speakers fill this in; I think note-takers and the committee could fill it in as well","m.relates_to":{"m.in_reply_to":{"event_id":"$h_kKGsew9mFnz2sVdL28H8p5XxO_OhIdBnDLXRM30fc"}},"msgtype":"m.text"},"ts":1679429972976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZtUGB4T9r1ctptxCxMEP-BxUraGbqrb7nmri9vYc2Ns"},
{"content":{"body":"It can be written by anyone so please change the title if you like.  The key is that the presenter ought to be at least approving the summary so that we have some kind of responsibility when distributing the load of writing these summaries.","msgtype":"m.text"},"ts":1679430085270,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Ogk45qHqaIhih0KfOQR45xaWI3YXZ6UMGenTV4Phmio"},
{"content":{"body":"The confusion is a consequence of choosing to build an API that is dependent on `Iterator` vs the notion of an iterable. As I understood it as the proposal was advancing, basing this on `iterator` meant we were in the realm of \"one shot\" or \"single use\" iterators, and that any kind of reusable iteration would rely on arrow functions. IIRC, all of the helper methods are exhaustive, either through repeated calls to `.next` or through the use of `.return`. I don't believe `.take` should be substantially different in this regard. I would much rather have an \"opt-out\" mechanism to avoid closing an iterator than breaking from the norm here.","format":"org.matrix.custom.html","formatted_body":"The confusion is a consequence of choosing to build an API that is dependent on <code>Iterator</code> vs the notion of an iterable. As I understood it as the proposal was advancing, basing this on <code>iterator</code> meant we were in the realm of &quot;one shot&quot; or &quot;single use&quot; iterators, and that any kind of reusable iteration would rely on arrow functions. IIRC, all of the helper methods are exhaustive, either through repeated calls to <code>.next</code> or through the use of <code>.return</code>. I don't believe <code>.take</code> should be substantially different in this regard. I would much rather have an &quot;opt-out&quot; mechanism to avoid closing an iterator than breaking from the norm here.","msgtype":"m.text"},"ts":1679430109589,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AIQNKw3z9E8Mm6R3ZdsicNmZn4wtphzetNucXldw8AU"},
{"content":{"body":"Definitely agreed that `take` not exhausting is not an option","format":"org.matrix.custom.html","formatted_body":"Definitely agreed that <code>take</code> not exhausting is not an option","msgtype":"m.text"},"ts":1679430259903,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y9gCOSD12eUbKJQH5x4aqFd4dWCwlcfqTBMgsZH3IUk"},
{"content":{"body":"the question was just whether a different name could lead people to correctly intuit the semantics","msgtype":"m.text"},"ts":1679430272268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sHAIN3RGSE4tZJ7aPAbTHuvAqKj8HzpLWhgalWgyWHc"}
]