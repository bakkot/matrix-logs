[
{"content":{"body":"yes, it would be good to call out all the entry points","msgtype":"m.text"},"ts":1632182492031,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IklMVtNsPtNra644c8JfeMzBnUOBuyDCyrTS25TVraU"},
{"content":{"body":"lack of tighter integration of entry points is what led to our having a \"dead\" (i.e. no upstream specs were using it) Jobs machinery for so long","msgtype":"m.text"},"ts":1632182528117,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9MSqqjggY6eVkOaAtqfXMPN5OmUeVz9B4-9xhXRux4A"},
{"content":{"body":"FYI: I'm looking for feedback on a proposed changed to the explicit resource management proposal: https://github.com/tc39/proposal-explicit-resource-management/issues/65. The feedback from that issue will help me prepare for bringing this proposal back to committee at an upcoming meeting. Any input would be appreciated.","msgtype":"m.text"},"ts":1632184737296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MnZWV3pRR9YxSwLctevT5tFbIwVeuZ0CGQVyuRh0yKU"},
{"content":{"body":"> <@ljharb:matrix.org> presumably we could just pick one, but i'm guessing the challenge is ensuring that the one we pick matches the intention of people relying on those meanings?\n\nSince the current meaning is both, why can't we keep `isExtensible` as-is, add new `isMutablePrototype` and `preventPrototypeMutation` traps, and add an invariant that `[[IsMutablePrototype]]` must return `false` if `[[IsExtensible]]` returns false? Then since the proxy exotic functions currently enforces the invariants on the target, the proxy traps would have to respect the invariants. Is there something I'm missing?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QrLLtWXxpUNzDhNRn1CLf_32JMIxJZQXFGLS7AdVCRE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>presumably we could just pick one, but i'm guessing the challenge is ensuring that the one we pick matches the intention of people relying on those meanings?</blockquote></mx-reply>Since the current meaning is both, why can't we keep <code>isExtensible</code> as-is, add new <code>isMutablePrototype</code> and <code>preventPrototypeMutation</code> traps, and add an invariant that <code>[[IsMutablePrototype]]</code> must return <code>false</code> if <code>[[IsExtensible]]</code> returns false? Then since the proxy exotic functions currently enforces the invariants on the target, the proxy traps would have to respect the invariants. Is there something I'm missing?","m.relates_to":{"m.in_reply_to":{"event_id":"$QrLLtWXxpUNzDhNRn1CLf_32JMIxJZQXFGLS7AdVCRE"}},"msgtype":"m.text"},"ts":1632186795478,"senderName":"mhofman","senderId":"@mhofman:matrix.org","id":"$dCWnbGKYAuLtvq8zwI16oDG77mwD1i6gvffIxtfiQRs"},
{"content":{"body":"that kind of matches what i'd assume we'd do","msgtype":"m.text"},"ts":1632188223471,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OS0PVFy9ITLKIq545hpV0dcVkdTi3DRP9aHxgzrH79U"}
]