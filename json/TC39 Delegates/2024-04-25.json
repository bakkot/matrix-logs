[
{"content":{"body":"right","msgtype":"m.text"},"ts":1714006219963,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yO4w8xmS64sgM8gRO4lYcCAu0lZoY_aVVTob0yw8wpk"},
{"content":{"body":"I feel like that status doesn't really warrant a separate term but yeah","msgtype":"m.text"},"ts":1714006244301,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$p3f_xPSifOPlw8H3Mc9j4xwiDciuoFAlL3l5WTJ9QnA"},
{"content":{"body":"I am seeing both stories represented in this chat (“stage 0 is not an actual thing that makes sense to think about criteria for” vs “stage 0 is when we have a real potential proposal, eg with a champion lined up”). There isn’t an agreed-on answer, even if your own interpretation seems obviously correct to you. I think we should make a shared decision on which interpretation we all take. A third option is to discourage the use of the term.","msgtype":"m.text"},"ts":1714014180068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mf84QrrSAJjPf41qRM6qRRW31UdT4fbITvU75CAPRAY"},
{"content":{"body":"This is just a random one of several process points we have where there are multiple interpretations going around among long-time delegates. “Can IEs block” has long been another. I mean this in a neutral way: different understandings simply do exist; I am not advocating for one or the other position.","msgtype":"m.text"},"ts":1714014369649,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JrDEy3CIEFiDhuh6r1NZxc399mGNmVLjdM_0Yo2ddBU"},
{"content":{"body":"that's true about \"ship at stage 3\", too. but the way things have mostly always been done in practice is usually the thing we should clear up misunderstandings about.","m.mentions":{},"msgtype":"m.text"},"ts":1714014718285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h-w8x91NdJobJICPXsNXfbzb4VlTjnt3d-cdzli4O5s"},
{"content":{"body":"Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus some intangible confidence is when things ship; I hope we can move more towards building up that confidence so it’s there right when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","msgtype":"m.text"},"ts":1714015021583,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GVYGr4nxNy1PUEL-o9lDtmCBFBPUYSMJCBtrmbcPVlQ"},
{"content":{"body":"* Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus (in certain complicated cases) some intangible confidence is when things ship; I hope we can move more towards more consistently having that confidence when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","m.new_content":{"body":"Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus (in certain complicated cases) some intangible confidence is when things ship; I hope we can move more towards more consistently having that confidence when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","msgtype":"m.text"},"m.relates_to":{"event_id":"$GVYGr4nxNy1PUEL-o9lDtmCBFBPUYSMJCBtrmbcPVlQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714015291759,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$krstfvVv9K2kjKu628D1IoL0K1Ft0F60TIRmnGd3SZM"},
{"content":{"body":"indeed, \"what thing actually mean\" is often more complex than can be easily explained, or than is documented. but it's empirically deriveable, for all the things you've mentioned - there's only one current correct understanding. we can and should improve documentation when there's confusion, and we always can discuss changing what things mean if we think there's a better way.","m.mentions":{},"msgtype":"m.text"},"ts":1714015351731,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y2ZybaN8VbdwooIZLJPW0Pkk7Z1xFBq-ieOci_I4s00"},
{"content":{"body":"I think these are exercises in consensus-building, not uncovering and documenting the real truth.","msgtype":"m.text"},"ts":1714015396603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jkDlLK4jTfBTejTAeduY8rC5I9gs3jR1CxNe3wDVG7k"},
{"content":{"body":"both are part of it","m.mentions":{},"msgtype":"m.text"},"ts":1714015404896,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fAr94x4mFu4QJ43Who173Sv2MBVCykYsstG6-d5D7hg"},
{"content":{"body":"the meaning of a thing doesn't change just because someone comes up with a different understanding of it, unless that different understanding becomes what the committee empirically follows.","m.mentions":{},"msgtype":"m.text"},"ts":1714015430631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jFs88rEzdK9_7t9U9efCmdlIDeBpaMCymGIW1dL03Qw"},
{"content":{"body":"Often both precedent and historically intended meanings are ambiguous. We can work through this by gradually building consensus on what *should* be our way of working.","format":"org.matrix.custom.html","formatted_body":"Often both precedent and historically intended meanings are ambiguous. We can work through this by gradually building consensus on what <em>should</em> be our way of working.","msgtype":"m.text"},"ts":1714015595769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZrrKZsK3yPpRUupzdA2IEUkpfwMkOZfFk3wpQJmo2YI"},
{"content":{"body":"i agree. but imo we can't build that consensus unless misunderstandings about how we *have* been working get cleared up.","format":"org.matrix.custom.html","formatted_body":"i agree. but imo we can't build that consensus unless misunderstandings about how we <em>have</em> been working get cleared up.","m.mentions":{},"msgtype":"m.text"},"ts":1714015632378,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nAdAuooVwHXyVPh3hiI9JUpcZKuBE3XA0UslXZX6KRg"},
{"content":{"body":"Sure but making strong assertions on one side or the other doesn’t necessarily clarify things","msgtype":"m.text"},"ts":1714015673167,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$t04xHq5Wr_p4uKWS41Qv6yMtSMRyDaTl9sDP-WTlHJU"},
{"content":{"body":"for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around that","m.mentions":{},"msgtype":"m.text"},"ts":1714015676528,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VHHeo9_Rra2Yars0qNDfmUa_cN30s1nnmpGWsXBx9T0"},
{"content":{"body":" * for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around changing that","m.mentions":{},"m.new_content":{"body":"for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around changing that","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VHHeo9_Rra2Yars0qNDfmUa_cN30s1nnmpGWsXBx9T0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714015725880,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YUnUcRP1Lc4x1TF09Iz6neSzxJloJvcTPM9YS_tcnMc"},
{"content":{"body":"When blocks occur, it can sometimes be ambiguous what is going on, eg what the rationale is, who did the block, or whether the champion just voluntarily decided to withdraw the proposal from consideration for advancement. I am glad we are working more on clarifying note-taking in this area.","msgtype":"m.text"},"ts":1714015763678,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tYUAwkKtNueSMpHKJ_82TkqV_RzhmrbtUuUefNhSkdk"},
{"content":{"body":"A lot of times the committee carefully works at the intersection of many people‘s interpretations of process","msgtype":"m.text"},"ts":1714015821900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4ikcr82lT3rT9-k-z193sYXWnQVjxkKFj1uKdT9mUE0"},
{"content":{"body":"indeed. and that becomes much more complex when new and different understandings materialize, which is why correcting those is beneficial.","msgtype":"m.text"},"ts":1714015850146,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rFgcgOhPPEzxZ1bkKVi4OdB9wXeC2EmJwjqYH-vBkgU"},
{"content":{"body":"epistemology is hard","m.mentions":{},"msgtype":"m.text"},"ts":1714058819785,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AdB6O7-GsuOiekvJ31FOEvTHyMC4sXF6XXQN6hamc9s"},
{"content":{"body":"a lot of good points have been made. I think it's important to proceed a bit cautiously, at the risk of overcorrecting with solutions to non-problems.  in other words, I am a lot more interested in solving for things like \"what should delegates/IEs do when creating a proposal repo\" and not as much in more abstract things like \"what is the meaning of stage 0\"","m.mentions":{},"msgtype":"m.text"},"ts":1714059193381,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$hgxVA2R9W5W61yFwJgRs_N9iGUig3UoAccJPM3ap3jg"},
{"content":{"body":"I should have worded the last bit better.  it's important to have a shared understanding of what stage 0 means. further qualifying what is or is not stage 0 based on some criteria is only useful as far as it is practically relevant","m.mentions":{},"msgtype":"m.text"},"ts":1714059541645,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Y0RhPEQZTFrE4v9MWsLnqwwqR8aywvPojjl94i2N8qM"},
{"content":{"body":"for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably _any_ entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?","format":"org.matrix.custom.html","formatted_body":"for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably <em>any</em> entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?","m.mentions":{},"msgtype":"m.text"},"ts":1714060407035,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI"},
{"content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return that rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return that rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"ts":1714067558436,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE"},
{"content":{"body":"Given there's been a lot of debate about the performance of the iterator protocol on a bunch of recent proposals I'm trying to brainstorm solutions.","m.mentions":{},"msgtype":"m.text"},"ts":1714067643413,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_3nrALkrXdSc8belGNRcVEXp7N6JUx5LQ3i3cJTpL4w"},
{"content":{"body":" * What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":" * What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"m.new_content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067721570,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MWKYFDzCA_vlf2YTKi5AliM76jTdhOCSanzAek5LCeA"},
{"content":{"body":" * What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) from `next` rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":" * What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) from <code>next</code> rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"m.new_content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) from `next` rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) from <code>next</code> rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067781643,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zpH2F98g9kkyP7FMPUdncQw4W2C3-EMrqyK0pDaABgg"},
{"content":{"body":"are you saying as a new protocol?","m.mentions":{},"msgtype":"m.text"},"ts":1714067857973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wJZtiv7npgFjFdZkXw0ER9dXoilHHF0oqCemSNj9l7k"},
{"content":{"body":"No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\n let iterationCount = 0;\n\n const rangeIterator = {\n   // It's recommended that iterators attach their value and done properties to the\n   // iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n   // as a performance optimization.\n   value: start,\n   done: false,\n   next() {\n     if (nextIndex < end) {\n       this.value += step;\n       iterationCount++;\n       return this;\n     }\n\n     this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n     this.done = true;\n     return this;\n   },\n };\n return rangeIterator;\n}``` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<pre><code> this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n</code></pre>\n<p>},<br>};<br>return rangeIterator;<br>}``` Stolen from MDN's example and refactored</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1714067926654,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4"},
{"content":{"body":"ooh","m.mentions":{},"msgtype":"m.text"},"ts":1714067944067,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qvtYvS349lhVtmc8y6Eb-uqmJbHZ1TX-oAPK6xr5ENc"},
{"content":{"body":" * No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\n this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\n this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067961782,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$-1YpCbshCKfPbzx39BJ7BdT1usWR0YeUCmDRV7Km6og"},
{"content":{"body":" * No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n```","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n```","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067971018,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JdHHRmYnwxfRLqOpa8oq3cHre0Qb-1g6i5ZNkOW5E6M"},
{"content":{"body":"that certainly has a _higher_ chance of being compatible but i still don't know how we find out other than \"ship and see\"","format":"org.matrix.custom.html","formatted_body":"that certainly has a <em>higher</em> chance of being compatible but i still don't know how we find out other than \"ship and see\"","m.mentions":{},"msgtype":"m.text"},"ts":1714067974794,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nb1Gcyb8Hpc4BXjEs0kjLnxedsIi9U2qje4m2OtLoNE"},
{"content":{"body":" * No, as in you'd do \n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do</p>\n<pre><code>function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\&lt; end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do \n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do</p>\n<pre><code>function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\&lt; end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067989997,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$vZbBy7up89I0nqp-srfZjxswJKtdZWXvgncPbMMD-60"},
{"content":{"body":"Yeah, fair enough","m.mentions":{},"msgtype":"m.text"},"ts":1714068013973,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$9UwiIGW1noIxQsAaN2ef33PqiNKQF9acVAEnSSzYlFs"},
{"content":{"body":"otherwise i mean, yeah, i like it for the obvious reasons","m.mentions":{},"msgtype":"m.text"},"ts":1714068017253,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AoF5Jlan0TCZZA_A7yYjo-OPc2HT1ETK2CO2gqx5bsc"},
{"content":{"body":"It also seems like we should recommend having `done`/`value` as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial","format":"org.matrix.custom.html","formatted_body":"It also seems like we should recommend having <code>done</code>/<code>value</code> as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial","m.mentions":{},"msgtype":"m.text"},"ts":1714068082863,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds"},
{"content":{"body":"I would make it a seperate object and re-use it","m.mentions":{},"msgtype":"m.text"},"ts":1714068125390,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yHFDTU4B1LaM1BrYLTxvIm9Cx8vwC36PV6pV-W_LzCw"},
{"content":{"body":"That's fine too although I guess slightly less efficient. But might be more likely compatible.","m.mentions":{},"msgtype":"m.text"},"ts":1714068197411,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MKD-2h30WCKogXLiFv7V8WQmw9fmZvexuMBEo2ewMOc"},
{"content":{"body":"I suppose it also better avoids the `done`/`value` blowout problem","format":"org.matrix.custom.html","formatted_body":"I suppose it also better avoids the <code>done</code>/<code>value</code> blowout problem","m.mentions":{},"msgtype":"m.text"},"ts":1714068232485,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$yZGeR8ZlJxCd9ydvLxYE-97patxWwSDEfHXx6rx0xGQ"},
{"content":{"body":"In practice I don't think people are implementing iterators themselves much, rather than using generators","m.mentions":{},"msgtype":"m.text"},"ts":1714068269612,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h1XCd25udfqf5QW3QVWtrJMAXqYcSY8hHOvgqibbnbI"},
{"content":{"body":"Yeah, probably. I suppose this same concept could be applied to generators. I have less of an idea on whether we can change that behavior...","m.mentions":{},"msgtype":"m.text"},"ts":1714068327269,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$sL_dckpREsMQvJtY6YAsi0krZHHi-oJUwRl7OSqCIb0"},
{"content":{"body":"> <@keith_miller:matrix.org> It also seems like we should recommend having `done`/`value` as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial\n\nV8 has a lot of complexity for fast-path checks for the shape of the iterator result object","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>It also seems like we should recommend having <code>done</code>/<code>value</code> as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial</blockquote></mx-reply>V8 has a lot of complexity for fast-path checks for the shape of the iterator result object","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds"}},"msgtype":"m.text"},"ts":1714068330679,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YojXrKtIZ-HCvi_C6JnvRea0AT2Ch5LVoOoslIBL1CE"},
{"content":{"body":"(we have a canonical map that's the same as if you wrote an object literal `{value, done}` and check against that)","format":"org.matrix.custom.html","formatted_body":"(we have a canonical map that's the same as if you wrote an object literal <code>{value, done}</code> and check against that)","m.mentions":{},"msgtype":"m.text"},"ts":1714068372967,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$99WSIPvZwEgsQBdCTN6gnYCRoQsQfymrUr6dZxcSTRI"},
{"content":{"body":"Gotcha, I think we treat them the same as any other IC","m.mentions":{},"msgtype":"m.text"},"ts":1714068407682,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$4xYQgEF1U7t7RKdlDyaR93vtFBcmYeeOEZ_JFLQPZZA"},
{"content":{"body":"oh in user code we treat them the same as any other IC","m.mentions":{},"msgtype":"m.text"},"ts":1714068444772,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nB8RGrkBSWFop9ChOvM8Bh6s9X757k0kFEdxo9LT8Ug"},
{"content":{"body":"but in our built-ins we have all these checks","m.mentions":{},"msgtype":"m.text"},"ts":1714068451452,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ULuzDdvrWa7aVD25vA2BuwCxGe5h7klQIkYV8IpPFFc"},
{"content":{"body":"Ah ok","m.mentions":{},"msgtype":"m.text"},"ts":1714068466303,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$dLax-pNDX61wsrPztPg_ogDlV_kv6uyTazyypx-c4Ho"},
{"content":{"body":"It would be pretty weird, conceptually, for generators and built-in iterators to re-use their result object for each yielded value.... but I would be kind of surprised if it actually breaks anything? Holding onto the `{ done, value }` pair is a very strange thing to do","format":"org.matrix.custom.html","formatted_body":"It would be pretty weird, conceptually, for generators and built-in iterators to re-use their result object for each yielded value.... but I would be kind of surprised if it actually breaks anything? Holding onto the <code>{ done, value }</code> pair is a very strange thing to do","m.mentions":{},"msgtype":"m.text"},"ts":1714069115936,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jdYUmgwQ9rDyzeRjUrM7cDP0_gELqi3Gs5mHTBcq1SI"}
]