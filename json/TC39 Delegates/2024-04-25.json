[
{"content":{"body":"right","msgtype":"m.text"},"ts":1714006219963,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yO4w8xmS64sgM8gRO4lYcCAu0lZoY_aVVTob0yw8wpk"},
{"content":{"body":"I feel like that status doesn't really warrant a separate term but yeah","msgtype":"m.text"},"ts":1714006244301,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$p3f_xPSifOPlw8H3Mc9j4xwiDciuoFAlL3l5WTJ9QnA"},
{"content":{"body":"I am seeing both stories represented in this chat (“stage 0 is not an actual thing that makes sense to think about criteria for” vs “stage 0 is when we have a real potential proposal, eg with a champion lined up”). There isn’t an agreed-on answer, even if your own interpretation seems obviously correct to you. I think we should make a shared decision on which interpretation we all take. A third option is to discourage the use of the term.","msgtype":"m.text"},"ts":1714014180068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mf84QrrSAJjPf41qRM6qRRW31UdT4fbITvU75CAPRAY"},
{"content":{"body":"This is just a random one of several process points we have where there are multiple interpretations going around among long-time delegates. “Can IEs block” has long been another. I mean this in a neutral way: different understandings simply do exist; I am not advocating for one or the other position.","msgtype":"m.text"},"ts":1714014369649,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JrDEy3CIEFiDhuh6r1NZxc399mGNmVLjdM_0Yo2ddBU"},
{"content":{"body":"that's true about \"ship at stage 3\", too. but the way things have mostly always been done in practice is usually the thing we should clear up misunderstandings about.","m.mentions":{},"msgtype":"m.text"},"ts":1714014718285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h-w8x91NdJobJICPXsNXfbzb4VlTjnt3d-cdzli4O5s"},
{"content":{"body":"Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus some intangible confidence is when things ship; I hope we can move more towards building up that confidence so it’s there right when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","msgtype":"m.text"},"ts":1714015021583,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GVYGr4nxNy1PUEL-o9lDtmCBFBPUYSMJCBtrmbcPVlQ"},
{"content":{"body":"* Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus (in certain complicated cases) some intangible confidence is when things ship; I hope we can move more towards more consistently having that confidence when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","m.new_content":{"body":"Right it was complicated and slow to build consensus around that, and the result is not 100% unambiguous even now. I think the currently reality is slightly more like, Stage 3 plus (in certain complicated cases) some intangible confidence is when things ship; I hope we can move more towards more consistently having that confidence when something becomes Stage 3, and the recent 2.7 addition helps towards that goal.","msgtype":"m.text"},"m.relates_to":{"event_id":"$GVYGr4nxNy1PUEL-o9lDtmCBFBPUYSMJCBtrmbcPVlQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714015291759,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$krstfvVv9K2kjKu628D1IoL0K1Ft0F60TIRmnGd3SZM"},
{"content":{"body":"indeed, \"what thing actually mean\" is often more complex than can be easily explained, or than is documented. but it's empirically deriveable, for all the things you've mentioned - there's only one current correct understanding. we can and should improve documentation when there's confusion, and we always can discuss changing what things mean if we think there's a better way.","m.mentions":{},"msgtype":"m.text"},"ts":1714015351731,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Y2ZybaN8VbdwooIZLJPW0Pkk7Z1xFBq-ieOci_I4s00"},
{"content":{"body":"I think these are exercises in consensus-building, not uncovering and documenting the real truth.","msgtype":"m.text"},"ts":1714015396603,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jkDlLK4jTfBTejTAeduY8rC5I9gs3jR1CxNe3wDVG7k"},
{"content":{"body":"both are part of it","m.mentions":{},"msgtype":"m.text"},"ts":1714015404896,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fAr94x4mFu4QJ43Who173Sv2MBVCykYsstG6-d5D7hg"},
{"content":{"body":"the meaning of a thing doesn't change just because someone comes up with a different understanding of it, unless that different understanding becomes what the committee empirically follows.","m.mentions":{},"msgtype":"m.text"},"ts":1714015430631,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jFs88rEzdK9_7t9U9efCmdlIDeBpaMCymGIW1dL03Qw"},
{"content":{"body":"Often both precedent and historically intended meanings are ambiguous. We can work through this by gradually building consensus on what *should* be our way of working.","format":"org.matrix.custom.html","formatted_body":"Often both precedent and historically intended meanings are ambiguous. We can work through this by gradually building consensus on what <em>should</em> be our way of working.","msgtype":"m.text"},"ts":1714015595769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZrrKZsK3yPpRUupzdA2IEUkpfwMkOZfFk3wpQJmo2YI"},
{"content":{"body":"i agree. but imo we can't build that consensus unless misunderstandings about how we *have* been working get cleared up.","format":"org.matrix.custom.html","formatted_body":"i agree. but imo we can't build that consensus unless misunderstandings about how we <em>have</em> been working get cleared up.","m.mentions":{},"msgtype":"m.text"},"ts":1714015632378,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nAdAuooVwHXyVPh3hiI9JUpcZKuBE3XA0UslXZX6KRg"},
{"content":{"body":"Sure but making strong assertions on one side or the other doesn’t necessarily clarify things","msgtype":"m.text"},"ts":1714015673167,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$t04xHq5Wr_p4uKWS41Qv6yMtSMRyDaTl9sDP-WTlHJU"},
{"content":{"body":"for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around that","m.mentions":{},"msgtype":"m.text"},"ts":1714015676528,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VHHeo9_Rra2Yars0qNDfmUa_cN30s1nnmpGWsXBx9T0"},
{"content":{"body":" * for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around changing that","m.mentions":{},"m.new_content":{"body":"for example, IEs empirically have blocked, ∴ they can block. if someone thinks they shouldn't be able to block, let's build consensus around changing that","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VHHeo9_Rra2Yars0qNDfmUa_cN30s1nnmpGWsXBx9T0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714015725880,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YUnUcRP1Lc4x1TF09Iz6neSzxJloJvcTPM9YS_tcnMc"},
{"content":{"body":"When blocks occur, it can sometimes be ambiguous what is going on, eg what the rationale is, who did the block, or whether the champion just voluntarily decided to withdraw the proposal from consideration for advancement. I am glad we are working more on clarifying note-taking in this area.","msgtype":"m.text"},"ts":1714015763678,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tYUAwkKtNueSMpHKJ_82TkqV_RzhmrbtUuUefNhSkdk"},
{"content":{"body":"A lot of times the committee carefully works at the intersection of many people‘s interpretations of process","msgtype":"m.text"},"ts":1714015821900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4ikcr82lT3rT9-k-z193sYXWnQVjxkKFj1uKdT9mUE0"},
{"content":{"body":"indeed. and that becomes much more complex when new and different understandings materialize, which is why correcting those is beneficial.","msgtype":"m.text"},"ts":1714015850146,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rFgcgOhPPEzxZ1bkKVi4OdB9wXeC2EmJwjqYH-vBkgU"},
{"content":{"body":"epistemology is hard","m.mentions":{},"msgtype":"m.text"},"ts":1714058819785,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AdB6O7-GsuOiekvJ31FOEvTHyMC4sXF6XXQN6hamc9s"},
{"content":{"body":"a lot of good points have been made. I think it's important to proceed a bit cautiously, at the risk of overcorrecting with solutions to non-problems.  in other words, I am a lot more interested in solving for things like \"what should delegates/IEs do when creating a proposal repo\" and not as much in more abstract things like \"what is the meaning of stage 0\"","m.mentions":{},"msgtype":"m.text"},"ts":1714059193381,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$hgxVA2R9W5W61yFwJgRs_N9iGUig3UoAccJPM3ap3jg"},
{"content":{"body":"I should have worded the last bit better.  it's important to have a shared understanding of what stage 0 means. further qualifying what is or is not stage 0 based on some criteria is only useful as far as it is practically relevant","m.mentions":{},"msgtype":"m.text"},"ts":1714059541645,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Y0RhPEQZTFrE4v9MWsLnqwwqR8aywvPojjl94i2N8qM"},
{"content":{"body":"for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably _any_ entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?","format":"org.matrix.custom.html","formatted_body":"for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably <em>any</em> entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?","m.mentions":{},"msgtype":"m.text"},"ts":1714060407035,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI"},
{"content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return that rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return that rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"ts":1714067558436,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE"},
{"content":{"body":"Given there's been a lot of debate about the performance of the iterator protocol on a bunch of recent proposals I'm trying to brainstorm solutions.","m.mentions":{},"msgtype":"m.text"},"ts":1714067643413,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_3nrALkrXdSc8belGNRcVEXp7N6JUx5LQ3i3cJTpL4w"},
{"content":{"body":" * What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":" * What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"m.new_content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067721570,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MWKYFDzCA_vlf2YTKi5AliM76jTdhOCSanzAek5LCeA"},
{"content":{"body":" * What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) from `next` rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":" * What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) from <code>next</code> rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"m.new_content":{"body":"What do folks think about recommending web authors put the `value`/`done` properties on the iterator object directly and return `this` (aka the iterator itself) from `next` rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","format":"org.matrix.custom.html","formatted_body":"What do folks think about recommending web authors put the <code>value</code>/<code>done</code> properties on the iterator object directly and return <code>this</code> (aka the iterator itself) from <code>next</code> rather than return a fresh object each iteration loop? This, I think, should improve the performance of their iterators as they're not allocating fresh objects all the time. Is this a compatibility breaking change we should look into for built-in iterators too?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7wEu2WCOaPzBLic5iO4pWjYJunXTLpvBr2CIYadEurE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067781643,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zpH2F98g9kkyP7FMPUdncQw4W2C3-EMrqyK0pDaABgg"},
{"content":{"body":"are you saying as a new protocol?","m.mentions":{},"msgtype":"m.text"},"ts":1714067857973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wJZtiv7npgFjFdZkXw0ER9dXoilHHF0oqCemSNj9l7k"},
{"content":{"body":"No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\n let iterationCount = 0;\n\n const rangeIterator = {\n   // It's recommended that iterators attach their value and done properties to the\n   // iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n   // as a performance optimization.\n   value: start,\n   done: false,\n   next() {\n     if (nextIndex < end) {\n       this.value += step;\n       iterationCount++;\n       return this;\n     }\n\n     this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n     this.done = true;\n     return this;\n   },\n };\n return rangeIterator;\n}``` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<pre><code> this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n</code></pre>\n<p>},<br>};<br>return rangeIterator;<br>}``` Stolen from MDN's example and refactored</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1714067926654,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4"},
{"content":{"body":"ooh","m.mentions":{},"msgtype":"m.text"},"ts":1714067944067,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qvtYvS349lhVtmc8y6Eb-uqmJbHZ1TX-oAPK6xr5ENc"},
{"content":{"body":" * No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\n this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\n this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\n this.done = true;\n return this;\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do ```function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067961782,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$-1YpCbshCKfPbzx39BJ7BdT1usWR0YeUCmDRV7Km6og"},
{"content":{"body":" * No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n```","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n```\n\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n```","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do function makeRangeIterator(start = 0, end = Infinity, step = 1) {<br>let iterationCount = 0;</p>\n<p>const rangeIterator = {<br>// It's recommended that iterators attach their value and done properties to the<br>// iterator itself rather than return a new object every time (e.g. via <code>return { value: ..., done: ... }</code>)<br>// as a performance optimization.<br>value: start,<br>done: false,<br>next() {<br>if (nextIndex &lt; end) {<br>this.value += step;<br>iterationCount++;<br>return this;<br>}</p>\n<p>this.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here<br>this.done = true;<br>return this;</p>\n<pre><code>\n},\n};\nreturn rangeIterator;\n}\\`\\`\\` Stolen from MDN's example and refactored\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067971018,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JdHHRmYnwxfRLqOpa8oq3cHre0Qb-1g6i5ZNkOW5E6M"},
{"content":{"body":"that certainly has a _higher_ chance of being compatible but i still don't know how we find out other than \"ship and see\"","format":"org.matrix.custom.html","formatted_body":"that certainly has a <em>higher</em> chance of being compatible but i still don't know how we find out other than \"ship and see\"","m.mentions":{},"msgtype":"m.text"},"ts":1714067974794,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nb1Gcyb8Hpc4BXjEs0kjLnxedsIi9U2qje4m2OtLoNE"},
{"content":{"body":" * No, as in you'd do \n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>No, as in you'd do</p>\n<pre><code>function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\&lt; end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"No, as in you'd do \n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\< end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>No, as in you'd do</p>\n<pre><code>function makeRangeIterator(start = 0, end = Infinity, step = 1) {\nlet iterationCount = 0;\n\nconst rangeIterator = {\n// It's recommended that iterators attach their value and done properties to the\n// iterator itself rather than return a new object every time (e.g. via `return { value: ..., done: ... }`)\n// as a performance optimization.\nvalue: start,\ndone: false,\nnext() {\nif (nextIndex \\&lt; end) {\nthis.value += step;\niterationCount++;\nreturn this;\n}\n\nthis.value = iterationCount; // Nit: This isn’t read so I don’t know why it’s here\nthis.done = true;\nreturn this;\n\n},\n};\nreturn rangeIterator;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PeLJCHzcVnHRs1t5Dosj6l6UlEIdRlVOU9QonpbiE_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714067989997,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$vZbBy7up89I0nqp-srfZjxswJKtdZWXvgncPbMMD-60"},
{"content":{"body":"Yeah, fair enough","m.mentions":{},"msgtype":"m.text"},"ts":1714068013973,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$9UwiIGW1noIxQsAaN2ef33PqiNKQF9acVAEnSSzYlFs"},
{"content":{"body":"otherwise i mean, yeah, i like it for the obvious reasons","m.mentions":{},"msgtype":"m.text"},"ts":1714068017253,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AoF5Jlan0TCZZA_A7yYjo-OPc2HT1ETK2CO2gqx5bsc"},
{"content":{"body":"It also seems like we should recommend having `done`/`value` as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial","format":"org.matrix.custom.html","formatted_body":"It also seems like we should recommend having <code>done</code>/<code>value</code> as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial","m.mentions":{},"msgtype":"m.text"},"ts":1714068082863,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds"},
{"content":{"body":"I would make it a seperate object and re-use it","m.mentions":{},"msgtype":"m.text"},"ts":1714068125390,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yHFDTU4B1LaM1BrYLTxvIm9Cx8vwC36PV6pV-W_LzCw"},
{"content":{"body":"That's fine too although I guess slightly less efficient. But might be more likely compatible.","m.mentions":{},"msgtype":"m.text"},"ts":1714068197411,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$MKD-2h30WCKogXLiFv7V8WQmw9fmZvexuMBEo2ewMOc"},
{"content":{"body":"I suppose it also better avoids the `done`/`value` blowout problem","format":"org.matrix.custom.html","formatted_body":"I suppose it also better avoids the <code>done</code>/<code>value</code> blowout problem","m.mentions":{},"msgtype":"m.text"},"ts":1714068232485,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$yZGeR8ZlJxCd9ydvLxYE-97patxWwSDEfHXx6rx0xGQ"},
{"content":{"body":"In practice I don't think people are implementing iterators themselves much, rather than using generators","m.mentions":{},"msgtype":"m.text"},"ts":1714068269612,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h1XCd25udfqf5QW3QVWtrJMAXqYcSY8hHOvgqibbnbI"},
{"content":{"body":"Yeah, probably. I suppose this same concept could be applied to generators. I have less of an idea on whether we can change that behavior...","m.mentions":{},"msgtype":"m.text"},"ts":1714068327269,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$sL_dckpREsMQvJtY6YAsi0krZHHi-oJUwRl7OSqCIb0"},
{"content":{"body":"> <@keith_miller:matrix.org> It also seems like we should recommend having `done`/`value` as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial\n\nV8 has a lot of complexity for fast-path checks for the shape of the iterator result object","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>It also seems like we should recommend having <code>done</code>/<code>value</code> as the first two properties on your iterator so they don't blow out your ICs. But I don't know if engines all have the same behavior there so that's a bit more controversial</blockquote></mx-reply>V8 has a lot of complexity for fast-path checks for the shape of the iterator result object","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CDILrb-O2JzFCGmLWh6vQzLhSBS4nywTxon7nuCAEds"}},"msgtype":"m.text"},"ts":1714068330679,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YojXrKtIZ-HCvi_C6JnvRea0AT2Ch5LVoOoslIBL1CE"},
{"content":{"body":"(we have a canonical map that's the same as if you wrote an object literal `{value, done}` and check against that)","format":"org.matrix.custom.html","formatted_body":"(we have a canonical map that's the same as if you wrote an object literal <code>{value, done}</code> and check against that)","m.mentions":{},"msgtype":"m.text"},"ts":1714068372967,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$99WSIPvZwEgsQBdCTN6gnYCRoQsQfymrUr6dZxcSTRI"},
{"content":{"body":"Gotcha, I think we treat them the same as any other IC","m.mentions":{},"msgtype":"m.text"},"ts":1714068407682,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$4xYQgEF1U7t7RKdlDyaR93vtFBcmYeeOEZ_JFLQPZZA"},
{"content":{"body":"oh in user code we treat them the same as any other IC","m.mentions":{},"msgtype":"m.text"},"ts":1714068444772,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nB8RGrkBSWFop9ChOvM8Bh6s9X757k0kFEdxo9LT8Ug"},
{"content":{"body":"but in our built-ins we have all these checks","m.mentions":{},"msgtype":"m.text"},"ts":1714068451452,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ULuzDdvrWa7aVD25vA2BuwCxGe5h7klQIkYV8IpPFFc"},
{"content":{"body":"Ah ok","m.mentions":{},"msgtype":"m.text"},"ts":1714068466303,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$dLax-pNDX61wsrPztPg_ogDlV_kv6uyTazyypx-c4Ho"},
{"content":{"body":"It would be pretty weird, conceptually, for generators and built-in iterators to re-use their result object for each yielded value.... but I would be kind of surprised if it actually breaks anything? Holding onto the `{ done, value }` pair is a very strange thing to do","format":"org.matrix.custom.html","formatted_body":"It would be pretty weird, conceptually, for generators and built-in iterators to re-use their result object for each yielded value.... but I would be kind of surprised if it actually breaks anything? Holding onto the <code>{ done, value }</code> pair is a very strange thing to do","m.mentions":{},"msgtype":"m.text"},"ts":1714069115936,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jdYUmgwQ9rDyzeRjUrM7cDP0_gELqi3Gs5mHTBcq1SI"},
{"content":{"body":"That's kinda why I was thinking that the iterator would return itself and have own `done`/`value` because it feels conceptually less weird but I'll take either solution.","format":"org.matrix.custom.html","formatted_body":"That's kinda why I was thinking that the iterator would return itself and have own <code>done</code>/<code>value</code> because it feels conceptually less weird but I'll take either solution.","m.mentions":{},"msgtype":"m.text"},"ts":1714069709619,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$rxEZ1Gpecd_YiCmkiAp7b1iMSfR23fdN3SQw9W6m1uk"},
{"content":{"body":"> <@softwarechris:matrix.org> a lot of good points have been made. I think it's important to proceed a bit cautiously, at the risk of overcorrecting with solutions to non-problems.  in other words, I am a lot more interested in solving for things like \"what should delegates/IEs do when creating a proposal repo\" and not as much in more abstract things like \"what is the meaning of stage 0\"\n\nI agree completely; that's the question from Tab that started all of this! I think I focused on less important things above, got off on a tangent.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hgxVA2R9W5W61yFwJgRs_N9iGUig3UoAccJPM3ap3jg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>a lot of good points have been made. I think it&#39;s important to proceed a bit cautiously, at the risk of overcorrecting with solutions to non-problems.  in other words, I am a lot more interested in solving for things like &quot;what should delegates/IEs do when creating a proposal repo&quot; and not as much in more abstract things like &quot;what is the meaning of stage 0&quot;</blockquote></mx-reply>I agree completely; that's the question from Tab that started all of this! I think I focused on less important things above, got off on a tangent.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hgxVA2R9W5W61yFwJgRs_N9iGUig3UoAccJPM3ap3jg"}},"msgtype":"m.text"},"ts":1714070412891,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kAoSysnQ4XYPadoXHxrn8ha_22r7RdsmkX5hvaIPELs"},
{"content":{"body":"> <@softwarechris:matrix.org> for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably _any_ entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?\n\nthis is a good question to ask people who believe that the status quo already contains what you're describing as far as the entrance criteria. It'd be nice to disambiguate this stuff, but yes definitely less important than practical how-to advice.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably <em>any</em> entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?</blockquote></mx-reply>this is a good question to ask people who believe that the status quo already contains what you're describing as far as the entrance criteria. It'd be nice to disambiguate this stuff, but yes definitely less important than practical how-to advice.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI"}},"msgtype":"m.text"},"ts":1714070485717,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yuVaHgIjfEGTYkBYW2pbgBqPGBGXapwzggrBClNCDrc"},
{"content":{"body":"> <@littledan:matrix.org> I agree completely; that's the question from Tab that started all of this! I think I focused on less important things above, got off on a tangent.\n\nin particular, if our answer is, \"you can do whatever you want!\" for things where we really should be suggesting something concrete, thereby setting people up for some future criticism, we're giving suboptimal advice.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kAoSysnQ4XYPadoXHxrn8ha_22r7RdsmkX5hvaIPELs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I agree completely; that's the question from Tab that started all of this! I think I focused on less important things above, got off on a tangent.</blockquote></mx-reply>in particular, if our answer is, \"you can do whatever you want!\" for things where we really should be suggesting something concrete, thereby setting people up for some future criticism, we're giving suboptimal advice.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kAoSysnQ4XYPadoXHxrn8ha_22r7RdsmkX5hvaIPELs"}},"msgtype":"m.text"},"ts":1714070566847,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A4DoJwKmNuU_mJzRQxKcy_maAxfgxXl3B7aU_KI7XLA"},
{"content":{"body":"you're absolutely right; we should set those expectations","m.mentions":{},"msgtype":"m.text"},"ts":1714071048180,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$eS83n4qFpKn841_FDzJ7VNb4PqWpXY2vQRbmKpl_dww"},
{"content":{"body":"sometimes we've set them already and short-term memories get the best of us..  like I'm realizing and thinking to myself \"why are we talking about champions at stage 0\" when a champion is a clear entrance criterion for stage 1 and is well-documented","m.mentions":{},"msgtype":"m.text"},"ts":1714071091357,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KH_AWzLzfeP2TnY-GeIHI9ZRvVMG1Pauv5DiYxEZ71g"},
{"content":{"body":"multiple people said above they believed it was self-evident that there is that requirement. While this issue isn't very important, it might be a nice easy one to start with as we untangle differing beliefs about what our process is.","m.mentions":{},"msgtype":"m.text"},"ts":1714071161289,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PT43DmZJkhxKRgnESMIU0DyDCLKZZ5HB5O2RLEFCShc"},
{"content":{"body":"certainly.  in matters where we have a Source of Truth™️, we can reference that when people have conflicting views.  that should resolve.  if people want to change what the process/guidance is, that's ok too, but that should at least clear up what the current state is","m.mentions":{},"msgtype":"m.text"},"ts":1714071282757,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$x6XPTMzvrJ3UvM6mXyGXIsY7Vk1_Pvjr1MWmuO_Pa8w"},
{"content":{"body":"man, this language","m.mentions":{},"msgtype":"m.text"},"ts":1714076804111,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XJh4xu0EhoK3dvhIW2u4wKxzfulmNr_JDkbhstI7arc"},
{"content":{"body":"%TypedArray%.from(array) on JS arrays caches the entire input array ahead of time because it treats it as an iterable\n\n%TypedArray%.set(array) on JS arrays does not cache the input array ahead of time because it treats it as an array-like","m.mentions":{},"msgtype":"m.text"},"ts":1714076875639,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0MyN4X4KBbbcl4KZ9MK-1UU8QOURLNx3gAk6XY316oQ"},
{"content":{"body":"> <@softwarechris:matrix.org> for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably _any_ entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?\n\nRight, I don't think we need anything additional stage-wise. I think it's perfectly fine to treat all early proposals as 0, regardless of their quality/championship/etc. I just ran into the \"when does the proposal get put into the `tc39` repo\" question, which was unclear and is a little inconsistent currently.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>for example, if we added entrance criteria for stage 0, such as \"there must be a champion\", how is this valuable or materially different than the status quo?  a champion is needed for the proposal to progress to stage 1 (and beyond) anyway. so adding this (or probably <em>any</em> entrance criteria) to stage 0 doesn't help anything, and it introduces a new problem: what to call non-stage 0 proposals. you effectively introduce a new stage, and to what end?</blockquote></mx-reply>Right, I don't think we need anything additional stage-wise. I think it's perfectly fine to treat all early proposals as 0, regardless of their quality/championship/etc. I just ran into the \"when does the proposal get put into the <code>tc39</code> repo\" question, which was unclear and is a little inconsistent currently.","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fW40dKMl-J2obNAeCrHW7U68y8GetmphG82X04IOokI"}},"msgtype":"m.text"},"ts":1714077807881,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DVjDMZc2rBD6b8-_i9Vixme_2pXJEa37alUUgkn3WwU"},
{"content":{"body":"I think a rule of \"it's definitely moved when the proposal is stage 1; it *can* be moved, at the champion's discretion, when a stage 0 proposal is intended for presentation at a meeting\" sounds reasoanble and appears to match consensus?","format":"org.matrix.custom.html","formatted_body":"I think a rule of \"it's definitely moved when the proposal is stage 1; it <em>can</em> be moved, at the champion's discretion, when a stage 0 proposal is intended for presentation at a meeting\" sounds reasoanble and appears to match consensus?","m.mentions":{},"msgtype":"m.text"},"ts":1714077858078,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yF1j6I1KJDzQoZTiotOL-NM0CHZ9SkOV9Kyu6Zo7Q0w"},
{"content":{"body":"Tho also the criteria listed in <https://github.com/tc39/proposals/blob/main/stage-0-proposals.md> are stricter than \"any idea you write down\".","format":"org.matrix.custom.html","formatted_body":"Tho also the criteria listed in <a href=\"https://github.com/tc39/proposals/blob/main/stage-0-proposals.md\">https://github.com/tc39/proposals/blob/main/stage-0-proposals.md</a> are stricter than \"any idea you write down\".","m.mentions":{},"msgtype":"m.text"},"ts":1714077888539,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Dv4nborrW4-LLpoWjQTwpxZQk2hcL1KF1e3zTQ4c8D0"},
{"content":{"body":"> <@tabatkins:matrix.org> Tho also the criteria listed in <https://github.com/tc39/proposals/blob/main/stage-0-proposals.md> are stricter than \"any idea you write down\".\n\nmy understanding is those criteria are required to be listed on that md, but that should be made clear, for all the reasons above","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Dv4nborrW4-LLpoWjQTwpxZQk2hcL1KF1e3zTQ4c8D0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Tho also the criteria listed in <a href=\"https://github.com/tc39/proposals/blob/main/stage-0-proposals.md\">https://github.com/tc39/proposals/blob/main/stage-0-proposals.md</a> are stricter than \"any idea you write down\".</blockquote></mx-reply>my understanding is those criteria are required to be listed on that md, but that should be made clear, for all the reasons above","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Dv4nborrW4-LLpoWjQTwpxZQk2hcL1KF1e3zTQ4c8D0"}},"msgtype":"m.text"},"ts":1714077959748,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$axzCpB5DIT_5X-KqKxMMF81iN0C-7GwSDOsPiqE1jJ0"},
{"content":{"body":"Ah, that sounds reasonable, I can PR some wording","m.mentions":{},"msgtype":"m.text"},"ts":1714078020208,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$mVcnYltcZBZYvNrP-Y1OZ2bIkBONBFg6mmu8ffZm4QY"},
{"content":{"body":"> <@tabatkins:matrix.org> I think a rule of \"it's definitely moved when the proposal is stage 1; it *can* be moved, at the champion's discretion, when a stage 0 proposal is intended for presentation at a meeting\" sounds reasoanble and appears to match consensus?\n\nIMO we should adopt the simpler version, “the tc39 org includes just Stage 1+ things” and adopt the interpretation “stage 0 isn’t really a thing, just some silly turn of phrase with no meaning in committee”.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24yF1j6I1KJDzQoZTiotOL-NM0CHZ9SkOV9Kyu6Zo7Q0w\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I think a rule of \"it's definitely moved when the proposal is stage 1; it <em>can</em> be moved, at the champion's discretion, when a stage 0 proposal is intended for presentation at a meeting\" sounds reasoanble and appears to match consensus?</blockquote></mx-reply>IMO we should adopt the simpler version, “the tc39 org includes just Stage 1+ things” and adopt the interpretation “stage 0 isn’t really a thing, just some silly turn of phrase with no meaning in committee”.","m.relates_to":{"m.in_reply_to":{"event_id":"$yF1j6I1KJDzQoZTiotOL-NM0CHZ9SkOV9Kyu6Zo7Q0w"}},"msgtype":"m.text"},"ts":1714079680332,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X2uKFWc99oVno5-hqFKuqrA4D05JyDr82x3X0xMQ8nA"},
{"content":{"body":"This would also be fine with me (but we do have some Stage 0s in the org currently, so they'd have to eitehr be ejected or grandfathered)","m.mentions":{},"msgtype":"m.text"},"ts":1714079710656,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2WIFW7yxLjf6S39g94rjgdYigMYrsFfdLyx64vbbx58"},
{"content":{"body":"> <@tabatkins:matrix.org> This would also be fine with me (but we do have some Stage 0s in the org currently, so they'd have to eitehr be ejected or grandfathered)\n\nAgreed (and I would vote eject after the champions have some time to propose for stage 1)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%242WIFW7yxLjf6S39g94rjgdYigMYrsFfdLyx64vbbx58\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>This would also be fine with me (but we do have some Stage 0s in the org currently, so they'd have to eitehr be ejected or grandfathered)</blockquote></mx-reply>Agreed (and I would vote eject after the champions have some time to propose for stage 1)","m.relates_to":{"m.in_reply_to":{"event_id":"$2WIFW7yxLjf6S39g94rjgdYigMYrsFfdLyx64vbbx58"}},"msgtype":"m.text"},"ts":1714079732691,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sunoglGRTaOyk-4gcSP8eUcGijrlfM_2-88VJLOFA6Y"},
{"content":{"body":"i'm pretty sure disallowing stage 0's in the org would not be inline with ecma's archival desires","m.mentions":{},"msgtype":"m.text"},"ts":1714079735478,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MKfPJGu6hqTAyZs3Q1T-TmlKnlSmLOM_36YKS5p_cRE"},
{"content":{"body":"if anything i'd think they'd want all stage 0's to be in the org","m.mentions":{},"msgtype":"m.text"},"ts":1714079754886,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R5ISbPyRPwb87KlxzV1BQlm0NwDDB4QSczTVfHdx-cM"},
{"content":{"body":"Well, not *all*, random people propose \"stage 0\" things as well.","format":"org.matrix.custom.html","formatted_body":"Well, not <em>all</em>, random people propose \"stage 0\" things as well.","m.mentions":{},"msgtype":"m.text"},"ts":1714079774483,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$1Xot_ELdMJMwyJ5HtuZlLibaB5YWGbLcGpZOjmvXYfQ"},
{"content":{"body":"Before ever getting a champion.","m.mentions":{},"msgtype":"m.text"},"ts":1714079781005,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0qhp14GcPsvmwm1egyBXKTITGasINaSnu66EDuGnhgA"},
{"content":{"body":"> <@ljharb:matrix.org> i'm pretty sure disallowing stage 0's in the org would not be inline with ecma's archival desires\n\nCould you elaborate on this? Aki is working on improving our archival stuff so collecting all requirements will be useful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MKfPJGu6hqTAyZs3Q1T-TmlKnlSmLOM_36YKS5p_cRE\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'm pretty sure disallowing stage 0's in the org would not be inline with ecma's archival desires</blockquote></mx-reply>Could you elaborate on this? Aki is working on improving our archival stuff so collecting all requirements will be useful.","m.relates_to":{"m.in_reply_to":{"event_id":"$MKfPJGu6hqTAyZs3Q1T-TmlKnlSmLOM_36YKS5p_cRE"}},"msgtype":"m.text"},"ts":1714079782768,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4_KAwwBD5gYBZimwC4lJ9NshbzomYS9etLpppfIbA2I"},
{"content":{"body":"> <@tabatkins:matrix.org> Well, not *all*, random people propose \"stage 0\" things as well.\n\nSure, random people *say* they are proposing things, but is it really at stage 0? OTOH did they establish precedent? More epistemology.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%241Xot_ELdMJMwyJ5HtuZlLibaB5YWGbLcGpZOjmvXYfQ\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Well, not <em>all</em>, random people propose \"stage 0\" things as well.</blockquote></mx-reply>Sure, random people <em>say</em> they are proposing things, but is it really at stage 0? OTOH did they establish precedent? More epistemology.","m.relates_to":{"m.in_reply_to":{"event_id":"$1Xot_ELdMJMwyJ5HtuZlLibaB5YWGbLcGpZOjmvXYfQ"}},"msgtype":"m.text"},"ts":1714079866952,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wnc-lqoRnUOfGCkjhowQZbCIjZQML-QmOAF99ZGxtmE"},
{"content":{"body":"> <@littledan:matrix.org> Could you elaborate on this? Aki is working on improving our archival stuff so collecting all requirements will be useful.\n\nat the point the committee discusses a proposal, that discussion and the proposal are subject to archiving.  having that proposal outside of the org makes that messy, and subject to additional risk of tampering","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4_KAwwBD5gYBZimwC4lJ9NshbzomYS9etLpppfIbA2I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Could you elaborate on this? Aki is working on improving our archival stuff so collecting all requirements will be useful.</blockquote></mx-reply>at the point the committee discusses a proposal, that discussion and the proposal are subject to archiving.  having that proposal outside of the org makes that messy, and subject to additional risk of tampering","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4_KAwwBD5gYBZimwC4lJ9NshbzomYS9etLpppfIbA2I"}},"msgtype":"m.text"},"ts":1714080025619,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$gtzvEWySKmGUVYDmRb3gM7069gaete8LKEl54tKVohE"},
{"content":{"body":"having it in the org isn't a panacea, but it goes a long way","m.mentions":{},"msgtype":"m.text"},"ts":1714080048686,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$qhoBeyFjoLdAObBcUHNGA07swM4YTMxIZpN3Ac3wcJw"},
{"content":{"body":"Interesting, I don’t think we have been consistent about transferring all presented proposals, have we been?","msgtype":"m.text"},"ts":1714080125905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SAHJp0CrTTfZZ0Y8iAzjbMNRt4uRjCfw0ynaUucYRf0"},
{"content":{"body":"No, I don't think so - the list of Stage 0 proposals, at least, only has one presented Stage 0 in the org; the rest are still in personal repos.","m.mentions":{},"msgtype":"m.text"},"ts":1714080164811,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$inB78_iN4OGqBOMZ6H8ExEEaqLIrwAwQKNQFo-kzORo"},
{"content":{"body":"What if we add all presented repos to a list to be archived?","msgtype":"m.text"},"ts":1714080318989,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ri3_EP8PZ6cZipDW1HWRq8oXjP0SSadu4Wrcp32sISo"},
{"content":{"body":"Which sort of tampering are we concerned about?","msgtype":"m.text"},"ts":1714080327467,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FPJAMi_uAzgHEne7oFCfxX60wti5fRGSE-AapKjXc8U"},
{"content":{"body":"someone can delete their github account, for example","m.mentions":{},"msgtype":"m.text"},"ts":1714080380419,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$c690G2v_lGvzdbELzCZVawvzzFvrOHpjtBsNYHfX4eQ"},
{"content":{"body":"or a repo","m.mentions":{},"msgtype":"m.text"},"ts":1714080382280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SgFA_gERuzLHu5A06c9Z-cFR_lSLuy21G0MLtn3_RFE"},
{"content":{"body":"Right, this is the point of archiving ","format":"org.matrix.custom.html","formatted_body":"Right, this is the point of archiving","msgtype":"m.text"},"ts":1714080407557,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JB_Pa_51M_FTgsLFih0RY_YlGXpHlTYoDJhImvKYA7s"},
{"content":{"body":"I don’t know if we have a functional archival system at the moment, but if we did, what would we want it to do?","msgtype":"m.text"},"ts":1714080463694,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TSb5uuJuZxbTLMp29WsckweBtHEllwin02hGnPIDO4E"},
{"content":{"body":"we certainly haven't transferred everything that's been presented and not gotten stage 1, but that'd be a good thing to do.","m.mentions":{},"msgtype":"m.text"},"ts":1714080467465,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qLmlIdBOyENEQVuIBfdyWBmlg0KTKrrw7k5vWfRMfpo"},
{"content":{"body":"clone all the repos, back up all the issue and PR and wiki content, i suppose? like a \"web archive\" of it all","m.mentions":{},"msgtype":"m.text"},"ts":1714080490462,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E62VzlJVRiNJKCKLDBiEHTqdgYgeq8or4j2oeHdl3LE"},
{"content":{"body":"Are there reasons in addition to archival why we should do this transfer?","msgtype":"m.text"},"ts":1714080493534,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3ZObh2CKb14PqOPnQ6SlV34Wl9vFjsd2ce73RD-Hxto"},
{"content":{"body":"it's better for history and research and whatnot.","m.mentions":{},"msgtype":"m.text"},"ts":1714080505147,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K65cAZC1W8BtSsBqWXTIQtx2kYl3azXJO1kxFmX72ZE"},
{"content":{"body":"but that's why it's been ad hoc, because it's depended on the circumstances.","m.mentions":{},"msgtype":"m.text"},"ts":1714080524136,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MW9GB4cvFCoG2YhHLVQo_qdrYDF-NbwSADtYLhE5Lm0"},
{"content":{"body":"(which has been fine so far)","m.mentions":{},"msgtype":"m.text"},"ts":1714080530831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4G7fDhkRMS3HjReJYI04-eVIu-lIv18DQI20H-Vlbr4"},
{"content":{"body":"> <@ljharb:matrix.org> clone all the repos, back up all the issue and PR and wiki content, i suppose? like a \"web archive\" of it all\n\nYeah let’s think about what functionality we want from the archive. I like your idea because it would be accessible from the web rather than just a mysterious Ecma server","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24E62VzlJVRiNJKCKLDBiEHTqdgYgeq8or4j2oeHdl3LE\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>clone all the repos, back up all the issue and PR and wiki content, i suppose? like a \"web archive\" of it all</blockquote></mx-reply>Yeah let’s think about what functionality we want from the archive. I like your idea because it would be accessible from the web rather than just a mysterious Ecma server","m.relates_to":{"m.in_reply_to":{"event_id":"$E62VzlJVRiNJKCKLDBiEHTqdgYgeq8or4j2oeHdl3LE"}},"msgtype":"m.text"},"ts":1714080535769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zFZrQUBIeAeX7bpyVE83BHNzEbSu1ofO66G7i3-NM90"},
{"content":{"body":"either way, \"one person asked a question that generated discussion\" isn't necessarily sufficient reason to do a bunch of work documenting something :-)","m.mentions":{},"msgtype":"m.text"},"ts":1714080557056,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wGQauB5xRXZkaZRj9jcvaAhYtjWqaERMDZRwqfleetI"},
{"content":{"body":" * either way, \"one person asked a question that generated discussion\" isn't necessarily sufficient reason to do a bunch of work documenting something :-) (but it's fine if we want to do that)","m.mentions":{},"m.new_content":{"body":"either way, \"one person asked a question that generated discussion\" isn't necessarily sufficient reason to do a bunch of work documenting something :-) (but it's fine if we want to do that)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wGQauB5xRXZkaZRj9jcvaAhYtjWqaERMDZRwqfleetI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714080564382,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dIHnuAkI1LEP9wGgsJF5EYkUUry1walZekByroU33Gs"}
]