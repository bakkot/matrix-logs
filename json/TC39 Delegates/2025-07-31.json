[
{"content":{"body":"Thanks! I updated the readme and transferred it to the org: https://github.com/tc39-transfer/proposal-import-bytes","m.mentions":{},"msgtype":"m.text"},"ts":1753920774999,"senderName":"styfle","senderId":"@styfle:matrix.org","id":"$oAnGY4uaWlRWo0cuUEeLv7fVoAaeB-YsMaAEfeQnhp0"},
{"content":{"body":"queue needs to be advanced I think","m.mentions":{},"msgtype":"m.text"},"ts":1753981605296,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-IQBE16-4Qi4gglGhTbjE4wT4UKf61MtcKfOT9NI6ds"},
{"content":{"body":"reminder: add your slides links to the notes","m.mentions":{},"msgtype":"m.text"},"ts":1753981607910,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UL8iglhxJJDbkVKPC5wDs1SpojrbbZ9cXfPZlrf2sqo"},
{"content":{"body":"Does anybody have the link to share here?","m.mentions":{},"msgtype":"m.text"},"ts":1753981805718,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k8h9GUx3iIHTPoO1txemOReTto9_tEmGs5q5Gq772IU"},
{"content":{"body":"Also, I still see the queue at the notetakers item","m.mentions":{},"msgtype":"m.text"},"ts":1753981907025,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JGyGa157aMQm0ZHa9kFSl_7MKFjK7G457T56ewwMWxM"},
{"content":{"body":"I advanced the queue","m.mentions":{},"msgtype":"m.text"},"ts":1753981989467,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NEpWqLgHvmBOGUIqpBvjWZvM975I2vYhz0ZyQBeVizw"},
{"content":{"body":"if this gets stage 2, don't let us forget to assign reviewers  😇","m.mentions":{},"msgtype":"m.text"},"ts":1753982459183,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$m0P6YVVb6pbQfK0VFF8YVQMeoXLkE_CpVUXSljsYoRA"},
{"content":{"body":"kevin, those don't cover symbols, only strings (re tcq)","m.mentions":{},"msgtype":"m.text"},"ts":1753982714892,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2aWZ1xjhnnnTJPcYTK2w29fq9HoDbLli145bmCr-oGk"},
{"content":{"body":"but if you mean the weird API design part, yes, and it's gross","m.mentions":{},"msgtype":"m.text"},"ts":1753982775424,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k-LnuGuJw9Lo9saV3qK0skqks9HuRxBh22r1atG5acY"},
{"content":{"body":"Are there use cases for having just the number of symbols?","m.mentions":{},"msgtype":"m.text"},"ts":1753983017069,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3VPtaRTmm0a33u3ggW2zxf9lQNbXLjWrPFA6ZZzRno8"},
{"content":{"body":"I like the -Length functions design","m.mentions":{},"msgtype":"m.text"},"ts":1753983103431,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UYObMOo_mfrFD0BG6fisPONKqErZC1iUUtPvRDykPjQ"},
{"content":{"body":"The readme has a ton of links, last time I asked to write for the various links which option they are supporting, but it has not been done, so it's difficult to actually navigate through them","m.mentions":{},"msgtype":"m.text"},"ts":1753983108759,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fHs1X2WvNnVwxoX4Oh5p8e2nPWvsAEKY91AH9cinunA"},
{"content":{"body":"I like -Length and has- as a mnemonic pattern.","m.mentions":{},"msgtype":"m.text"},"ts":1753983162204,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$8mrTmMs90jRQ0H1khKp2DHAfKNewyygXrbzfxhl487s"},
{"content":{"body":"I really struggle to imagine use cases other than for:\n- count all properties\n- count all enumerable properties\n\nmaybe with the matrix of \"include all properties, or just string properties\"","format":"org.matrix.custom.html","formatted_body":"<p>I really struggle to imagine use cases other than for:</p>\n<ul>\n<li>count all properties</li>\n<li>count all enumerable properties</li>\n</ul>\n<p>maybe with the matrix of \"include all properties, or just string properties\"</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1753983174310,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$nVu-O4c8or37m88Qkys1ar6A2-Lt6bK7cze3GaZI0jk"},
{"content":{"body":"MarkM wrote a summary of property enumeration for our own edification at Agoric/Endo and I captured them for posterity here https://kriskowal.com/enumerating-properties/","m.mentions":{},"msgtype":"m.text"},"ts":1753983248377,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$T6EtCjvxvwJfewxOisIQHJwf5QQ_eNblM2oa1FOh3Ic"},
{"content":{"body":"steal time from the other presentations?","m.mentions":{},"msgtype":"m.text"},"ts":1753983421871,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ayXoWU9y58RqlGks-myY4LN8NQK2NhGQ_Ek73W43-V4"},
{"content":{"body":"@erights Mark Miller (Agoric) MM: fwiw it does whatever you'd expect it to do on proxies, via the internal methods, just like the existing methods","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">@erights Mark Miller (Agoric) MM</a>: fwiw it does whatever you'd expect it to do on proxies, via the internal methods, just like the existing methods","m.mentions":{"user_ids":["@erights:matrix.org"]},"msgtype":"m.text"},"ts":1753983452569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oLs1UfiOE2VdTVegD0Fowi-h61m7MmepF7sHQnVHLYA"},
{"content":{"body":"Ruben: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, almost all of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bridgear:matrix.org\">Ruben</a>: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, almost all of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","m.mentions":{"user_ids":["@bridgear:matrix.org"]},"msgtype":"m.text"},"ts":1753983505827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ighQ67iCAoY1UyxbGMK1NyhrKx67M67sOWi0bZsZUsk"},
{"content":{"body":"I don't think \"whatever you'd expect\" is coherent, because property keys are reported by one trap while property attributes are reported by another, so the two can disagree","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oLs1UfiOE2VdTVegD0Fowi-h61m7MmepF7sHQnVHLYA"}},"msgtype":"m.text"},"ts":1753983518417,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$uGbNa7HBl4hW6q7bTTYqRqVtavJEFbqzHQdgJLxCqS4"},
{"content":{"body":"* Ruben: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, many of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","format":"org.matrix.custom.html","formatted_body":"* <a href=\"https://matrix.to/#/@bridgear:matrix.org\">Ruben</a>: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, many of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","m.mentions":{},"m.new_content":{"body":"Ruben: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, many of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bridgear:matrix.org\">Ruben</a>: assuming you mean https://github.com/tc39/proposal-object-property-count/issues/2#issuecomment-2784901702, many of those examples are devtools or otherwise not super relevant (like babel's object spread helper)","m.mentions":{"user_ids":["@bridgear:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ighQ67iCAoY1UyxbGMK1NyhrKx67M67sOWi0bZsZUsk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753983537807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_f2nupgzRWYjkN08i6Xa7GY9bxjBj6wFH6HjsQuIYgU"},
{"content":{"body":"i mean, in terms of impact - babel's object spread helper alone is probably more beneficial to the web than many of the proposals we've advanced in the last couple years","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ighQ67iCAoY1UyxbGMK1NyhrKx67M67sOWi0bZsZUsk"}},"msgtype":"m.text"},"ts":1753983543255,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KC_WnhlOdTWNPCJv7rhiAhtORoX4Mi5jUbVAWwXO1-o"},
{"content":{"body":"* i mean, in terms of impact - babel's object spread helper alone being made faster is probably more beneficial to the web than many of the proposals we've advanced in the last couple years","m.mentions":{},"m.new_content":{"body":"i mean, in terms of impact - babel's object spread helper alone being made faster is probably more beneficial to the web than many of the proposals we've advanced in the last couple years","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KC_WnhlOdTWNPCJv7rhiAhtORoX4Mi5jUbVAWwXO1-o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753983574542,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r6tviPa9a1SxIrgDZ276DCgXYZmXt21Ot7nAu3SELAw"},
{"content":{"body":"the spread operator isn't doing a count, to be clear","m.mentions":{},"msgtype":"m.text"},"ts":1753983586137,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KIJT4qQsmDFFFahXy18Mik7H0505PKtQiGMfEDFdEkg"},
{"content":{"body":"ah, ok fair. the current spec did make a choice, iirc it's calling \"ownpropertykeys\"","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uGbNa7HBl4hW6q7bTTYqRqVtavJEFbqzHQdgJLxCqS4"}},"msgtype":"m.text"},"ts":1753983587800,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jE_dAFdJTj55RngJmLT8xt828OZRFJxWwxwikbJNn1A"},
{"content":{"body":"it's actually spreading enumerable symbols","m.mentions":{},"msgtype":"m.text"},"ts":1753983591946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BILrm7gOoq2bEzRUNeawYsXGCa54ndXSMGyfh3-nbBI"},
{"content":{"body":"ah k","m.mentions":{},"msgtype":"m.text"},"ts":1753983594645,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jA-PLoQzWVLTGeucdFUa44autN2jAw2JwFuDjNk2_S0"},
{"content":{"body":"so it isn't relevant to this proposal","m.mentions":{},"msgtype":"m.text"},"ts":1753983596694,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hS0bh34BuVqevZV2T5s4CteL1N1TzifpJTXDfUiuwos"},
{"content":{"body":"right, but that doesn't expose enumerability","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jE_dAFdJTj55RngJmLT8xt828OZRFJxWwxwikbJNn1A"}},"msgtype":"m.text"},"ts":1753983670928,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$OztF4OZduqgnCRdg9udkZ5bFUFGp5qOwpMRRiLpD49E"},
{"content":{"body":"it has to get the property descriptor for each key as well, yep","m.mentions":{},"msgtype":"m.text"},"ts":1753983709478,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DnjibenPlv6_meSCJb5iFydSjbiQLC8vGVRoajgpgWc"},
{"content":{"body":"same approach as https://tc39.es/ecma262/#sec-object.getownpropertydescriptors, iirc","m.mentions":{},"msgtype":"m.text"},"ts":1753983755726,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N0eqkvbbs5GSlkiFG7LK5LmXI1wt10hcz0IVLKGE5Q8"},
{"content":{"body":"I still like my \"just add fooLength versions of all the foo methods\" suggestion, which answers this trivially","m.mentions":{},"msgtype":"m.text"},"ts":1753983772262,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K2B6zPZPHnBt6afwVKV3Yd4762rV5SdkqarGEgmdMKs"},
{"content":{"body":"so the question basically comes down to: what happens when `getOwnPropertyDescriptor` reports nonexistence of a key that was returned from `ownKeys`?","format":"org.matrix.custom.html","formatted_body":"so the question basically comes down to: what happens when <code>getOwnPropertyDescriptor</code> reports nonexistence of a key that was returned from <code>ownKeys</code>?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DnjibenPlv6_meSCJb5iFydSjbiQLC8vGVRoajgpgWc"}},"msgtype":"m.text"},"ts":1753983779465,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$C12bUyND9L77PO2ol_z8LqYoAMZVA8N18D0i9nnTrYs"},
{"content":{"body":"the same thing that Object.getOwnPropertyDescriptors does - it skips it","m.mentions":{},"msgtype":"m.text"},"ts":1753983805875,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$j7-Siffn6KavKdxbCMY9DuqRK--iSyxW0v0X7sCGMPY"},
{"content":{"body":"What happens is you know you've found a proxy ","format":"org.matrix.custom.html","formatted_body":"What happens is you know you've found a proxy","msgtype":"m.text"},"ts":1753983820772,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$keqTm8UC7NWz6kaPzUs2HRWelTU7TjfpLB3D2nnMMpM"},
{"content":{"body":"|             | **enmumerable** | **non-enumerable** | **all** |\n| ----------- | --------------- | ------------------ | ------- |\n| **strings** | ✔️              |                    | ✔️      |\n| **symbols** | ?               |                    |\n| **all**     | ✔️              |                    | ✔️      |\n\nFyi here the checkmark is for where I'm convinced that there may be a use case (the question mark is where I'm very little convinced but more than zero). I'd like to see examples showing that the usage of the rest is so widespread that it makes more sense to design an API to explicitly support it rather than just do the difference of the other two things in the same row/column.\n","format":"org.matrix.custom.html","formatted_body":"<p>|             | <strong>enmumerable</strong> | <strong>non-enumerable</strong> | <strong>all</strong> |<br>| ----------- | --------------- | ------------------ | ------- |<br>| <strong>strings</strong> | ✔️              |                    | ✔️      |<br>| <strong>symbols</strong> | ?               |                    |<br>| <strong>all</strong>     | ✔️              |                    | ✔️      |</p>\n<p>Fyi here the checkmark is for where I'm convinced that there may be a use case (the question mark is where I'm very little convinced but more than zero). I'd like to see examples showing that the usage of the rest is so widespread that it makes more sense to design an API to explicitly support it rather than just do the difference of the other two things in the same row/column.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1753983844301,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZQZAxD9DR7SUDL3yUlNtpxpYkW4LrhBcPIqvLbRQ1Nk"},
{"content":{"body":"(tbh i'm not sure why it's important what happens with a misbehaving proxy as long as it accounts for it)","m.mentions":{},"msgtype":"m.text"},"ts":1753983847375,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OK6f15Z99FRAUTN9ljiJobpAN5hM2cpVnrpFMhVp45s"},
{"content":{"body":"Come on matrix","m.mentions":{},"msgtype":"m.text"},"ts":1753983855510,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$H_TF5mB6IpF4nDT7ucRj3a5MvrgrkoSt3vhYNWABcTQ"},
{"content":{"body":"Because a 3x3 matrix with only the corners filled in is just a complete 2x2 matrix","m.mentions":{},"msgtype":"m.text"},"ts":1753983875407,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ne338AtbSR09e67YxD5hRLWKJgmWSZNIvtfZEFsK3jQ"},
{"content":{"body":"i often need all symbols","m.mentions":{},"msgtype":"m.text"},"ts":1753983878377,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$np00WJZDZUC9qh-MtQmejBZPWk07segdFDT-UK8QeZk"},
{"content":{"body":"Can you show me one code example?","m.mentions":{},"msgtype":"m.text"},"ts":1753983890355,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xxN6boe6y-fMn3vOL0FgUeFd3XEFXRruNef_bq1NyxM"},
{"content":{"body":"I have ever needed all symbols but I don't think I've ever need the _number_ of all symbols","format":"org.matrix.custom.html","formatted_body":"I have ever needed all symbols but I don't think I've ever need the <em>number</em> of all symbols","m.mentions":{},"msgtype":"m.text"},"ts":1753983916063,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fR5l5vdY-K2AQHkOrVEG7dmB0ZhdHP21cc0TnPFdAIE"},
{"content":{"body":"true, the code example i was about to provide isn't getting the count, let me look more","m.mentions":{},"msgtype":"m.text"},"ts":1753983958993,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5ZjvMeSPceJhHT7FGsX-Gln5SqArAC4jfBkuzoR7Gac"},
{"content":{"body":"k well i can't actually find a case where i need the count of symbols and not the actual symbols themselves","m.mentions":{},"msgtype":"m.text"},"ts":1753984413148,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qGjcXen5dpRK2uU8M92R-rBLOpM0qSeOnj9iGscGy6k"},
{"content":{"body":"although if getting the count was much faster than getting the symbols themselves, i'd probably change a bunch of places to check the count first - that's a lot of \"if\"s tho","m.mentions":{},"msgtype":"m.text"},"ts":1753984441815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GyRjyrGCsBt7MEo7Y-14U5N7Q4Fg72qVwecrA9mcTUY"},
{"content":{"body":"`arr.toSliced()` will give you a dense array even if the original had holes","format":"org.matrix.custom.html","formatted_body":"<code>arr.toSliced()</code> will give you a dense array even if the original had holes","msgtype":"m.text"},"ts":1753984626128,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_SMqxpbLtet5XEGJIZl8jnh0-RZBacFm4G1X-AZtmj4"},
{"content":{"body":"oh no, not that one that my brain llm made up ","format":"org.matrix.custom.html","formatted_body":"oh no, not that one that my brain llm made up","msgtype":"m.text"},"ts":1753984659650,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HL_lVVtrGZnktX2sFiGtTSDN8PORoak6RAFQjakyH2k"},
{"content":{"body":"The other ones ","format":"org.matrix.custom.html","formatted_body":"The other ones","msgtype":"m.text"},"ts":1753984662311,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BMGnxd_iL4XxTN3mT3b9KACVBvbv1piK5EQryislY_U"},
{"content":{"body":"- Reflect.ownKeysLength\n- Object.keysLength\n- Object.getOwnPropertyNamesLength\n- Object.getOwnPropertySymbolsLength\n\ndoesn't give you (string + symbol) x (enumerable) though I guess I would be open to a proposal for a new way to get _values_ for (string + symbol) x (enumerable), and then also have the `fooLength` version of that","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Reflect.ownKeysLength</li>\n<li>Object.keysLength</li>\n<li>Object.getOwnPropertyNamesLength</li>\n<li>Object.getOwnPropertySymbolsLength</li>\n</ul>\n<p>doesn't give you (string + symbol) x (enumerable) though I guess I would be open to a proposal for a new way to get <em>values</em> for (string + symbol) x (enumerable), and then also have the <code>fooLength</code> version of that</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1753984727995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$d1pPvbeGaL9Uq8rrG1BgRoyHsBZpVBHkkENz-YpNSEY"},
{"content":{"body":"that method doesn't exist, but `arr.toSpliced()` does","format":"org.matrix.custom.html","formatted_body":"that method doesn't exist, but <code>arr.toSpliced()</code> does","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_SMqxpbLtet5XEGJIZl8jnh0-RZBacFm4G1X-AZtmj4"}},"msgtype":"m.text"},"ts":1753984807689,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$AZMZ7-t3iPRRnsgoZR0jZLyBHr24A7fPWBTWe83Gddw"},
{"content":{"body":"`.slice()`","format":"org.matrix.custom.html","formatted_body":"<code>.slice()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1753984828349,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4lTYDv8oKq_pHGs93VClrTIrSI9OazBXQgXQl9ago4o"},
{"content":{"body":"nope, `.slice()` preserves holes","format":"org.matrix.custom.html","formatted_body":"nope, <code>.slice()</code> preserves holes","m.mentions":{},"msgtype":"m.text"},"ts":1753984841708,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$h1cCOr4aZsdHo9mevMkwIZ1vmq-KnYYYI1bIKxf6rrE"},
{"content":{"body":"oh oof, ok","m.mentions":{},"msgtype":"m.text"},"ts":1753984849903,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cDS4AG_n9KRRBB-rCchWy8HZVBwHLmtJiFgVfuTBGqE"},
{"content":{"body":"`.flatMap(x => [x])` :-p","format":"org.matrix.custom.html","formatted_body":"<code>.flatMap(x =&gt; [x])</code> :-p","m.mentions":{},"msgtype":"m.text"},"ts":1753984869388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9KxdM3mmNtkSk4JyeUgTzxj5-gfhlDFe_mIXxcpwMAE"},
{"content":{"body":"so like, `Reflect.ownEnumerableKeys`?","format":"org.matrix.custom.html","formatted_body":"so like, <code>Reflect.ownEnumerableKeys</code>?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$d1pPvbeGaL9Uq8rrG1BgRoyHsBZpVBHkkENz-YpNSEY"}},"msgtype":"m.text"},"ts":1753984899112,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Zt6xNaQoKuHXWruHx_8L3CX4BNUg2giXCxUzG7476Rk"},
{"content":{"body":"yeah sure","m.mentions":{},"msgtype":"m.text"},"ts":1753984911943,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RlZ4i9DvBRjxkCNo-YdJiZyb6R9YPc-L1OYmCc0ZuzI"},
{"content":{"body":"seeing those written out, I would prefer \"count\" rather than \"length\"","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$d1pPvbeGaL9Uq8rrG1BgRoyHsBZpVBHkkENz-YpNSEY"}},"msgtype":"m.text"},"ts":1753984982837,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$CWgcXSfSjyUF38DUIM0hPnReqmSKjb8OBdp-Ocf0jww"},
{"content":{"body":"`[...array]` kills holes right","format":"org.matrix.custom.html","formatted_body":"<code>[...array]</code> kills holes right","m.mentions":{},"msgtype":"m.text"},"ts":1753984987327,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OHyAnkkGlKgjPvSdStqgms2ygKzp4RBNrzK9EBikMlw"},
{"content":{"body":"and ensures you have a real array","m.mentions":{},"msgtype":"m.text"},"ts":1753984991835,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8y9TxoIOPuqOszpIqJZ9z51uc77pHqaNhkP0pJxmNKM"},
{"content":{"body":"all in one glorious expression","m.mentions":{},"msgtype":"m.text"},"ts":1753984999999,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mPVxQI-8yMs_EtgLWVovpC0KlkOatOzsXjC5Dgsf4cU"},
{"content":{"body":"Yes, though holes are removed rather than replaced with `undefined`, so indices to elements change.","format":"org.matrix.custom.html","formatted_body":"Yes, though holes are removed rather than replaced with <code>undefined</code>, so indices to elements change.","m.mentions":{},"msgtype":"m.text"},"ts":1753985044819,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rtWMAuOrfTSVWwrtYgG8V4N7MQzhfOikU3YHVId7rqE"},
{"content":{"body":"nicolo-ribaudo: your topic is still in the queue","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: your topic is still in the queue","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1753985054746,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Hd5wiPiUE4dkwGNHw38W-ipYNFJa5U6_G6p904BIaas"},
{"content":{"body":"(next)","m.mentions":{},"msgtype":"m.text"},"ts":1753985057630,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$lwrtBW5Yfa7hIEm2IM2QyxCcdT7BaaAtUVz7roCNf6Y"},
{"content":{"body":"looks like they are replaced with undefined","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rtWMAuOrfTSVWwrtYgG8V4N7MQzhfOikU3YHVId7rqE"}},"msgtype":"m.text"},"ts":1753985089428,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QGW9UtA28_vzq7JGQdfprY6SWORXUhUbWlafx9YQTBM"},
{"content":{"body":"a glorious one that uses the much slower iterator protocol :-(","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mPVxQI-8yMs_EtgLWVovpC0KlkOatOzsXjC5Dgsf4cU"}},"msgtype":"m.text"},"ts":1753985109176,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1FPR0Qf2XXVGEmsvrrqD2Jt8A_7eqKhJ03cJHGx8hDo"},
{"content":{"body":"`Array.from()` might work tho","format":"org.matrix.custom.html","formatted_body":"<code>Array.from()</code> might work tho","m.mentions":{},"msgtype":"m.text"},"ts":1753985119709,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wMwU7FbvJTsc_GwH_goX3VyS3MEexGpgDW2meEI5VEI"},
{"content":{"body":"Array.from does it too","m.mentions":{},"msgtype":"m.text"},"ts":1753985137550,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QP8y-lp7ewKtQLOa0Y3ECgnVCHbLylDtPN9XzSxr0r4"},
{"content":{"body":"both are probably better optimization targets than isSparse branches","m.mentions":{},"msgtype":"m.text"},"ts":1753985147014,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-yPt_7Vymr_b-qniOK_xdZcTRL9jNCEOh0DWLJKVMoQ"},
{"content":{"body":"+1 on Nicolo's comment","m.mentions":{},"msgtype":"m.text"},"ts":1753985154651,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$RskJ8fYzKluwWBV0C_ujtOoZlJ4qZsgwzsFffqEvJCY"},
{"content":{"body":"`.toSpliced()` does not use Symbol.iterator","format":"org.matrix.custom.html","formatted_body":"<code>.toSpliced()</code> does not use Symbol.iterator","m.mentions":{},"msgtype":"m.text"},"ts":1753985169228,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$tM8X0sbZ5iVDDkprARtaxdIlBfSwBbOSk-DIsrHvgpA"},
{"content":{"body":"the problem tho isn't \"we don't want sparse arrays\", it's \"to accurately describe this object we need to know if it's sparse\", so densification doesn't help","m.mentions":{},"msgtype":"m.text"},"ts":1753985192360,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zmsyIphXwcfs0H_0qF6gM7ytLAyRgQSwAPyKoTonV2o"},
{"content":{"body":"My topic: we can solve this with the previous property count proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1753985224062,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FLjxf3r9c2BKduM667-8HvIx8nHOzwXPra-2klr6gbI"},
{"content":{"body":"We don't need a sparse check that depends on internal engine details","m.mentions":{},"msgtype":"m.text"},"ts":1753985237309,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LeEBcudeOlszBPpB6aitl5mXh3MkmOjJ8eeW2lUz5XQ"},
{"content":{"body":"Wouldn;t `[1, , 3, foo: 4]` look like it's dense","format":"org.matrix.custom.html","formatted_body":"Wouldn;t <code>[1, , 3, foo: 4]</code> look like it's dense","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FLjxf3r9c2BKduM667-8HvIx8nHOzwXPra-2klr6gbI"}},"msgtype":"m.text"},"ts":1753985248594,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XhlAyAhoxWQqAvJVACfVSFVZWB7iGi9bkgXDUfyU3uM"},
{"content":{"body":"A dense array has `Object.keys(arr).length === arr.length`","format":"org.matrix.custom.html","formatted_body":"A dense array has <code>Object.keys(arr).length === arr.length</code>","m.mentions":{},"msgtype":"m.text"},"ts":1753985255753,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aq8KcXqzqygHKE90OI0-5n-Zje3yS8vsgPblIGI_QfI"},
{"content":{"body":"only if there's an \"index\" filter","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FLjxf3r9c2BKduM667-8HvIx8nHOzwXPra-2klr6gbI"}},"msgtype":"m.text"},"ts":1753985256918,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$5a6k5BBXDpAg6SEfX0_346exkTi0wujAa0cu5LEQ82o"},
{"content":{"body":"No","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XhlAyAhoxWQqAvJVACfVSFVZWB7iGi9bkgXDUfyU3uM"}},"msgtype":"m.text"},"ts":1753985261673,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mRKxm_nbuW1z7z1_WilINMSVaQo2JADq9B0qfYOOqCU"},
{"content":{"body":"Yes","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5a6k5BBXDpAg6SEfX0_346exkTi0wujAa0cu5LEQ82o"}},"msgtype":"m.text"},"ts":1753985270341,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lHHl7_NLbTToB3dYSUYsmvSrMSAiJbnJyKkwJD-LxMY"},
{"content":{"body":"It has three properties and a length of three","m.mentions":{},"msgtype":"m.text"},"ts":1753985272633,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1LEbVdX5QN2YbMVcmx8HoJJrbMtSaaeWyaq_QM-hD7E"},
{"content":{"body":"Oh ok","m.mentions":{},"msgtype":"m.text"},"ts":1753985276306,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9tTohLhuXORqkOay_VID4cDiC58tJrU9snCNM7CO2Vk"},
{"content":{"body":"It has 2 index properties","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1LEbVdX5QN2YbMVcmx8HoJJrbMtSaaeWyaq_QM-hD7E"}},"msgtype":"m.text"},"ts":1753985288509,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Xu2PK_KM5UpPO2FCk9cFlPpkRvSotgQZbHr5OYzBC7s"},
{"content":{"body":"Well, `Object.keys(arr).length === arr.length` returns true on that","format":"org.matrix.custom.html","formatted_body":"Well, <code>Object.keys(arr).length === arr.length</code> returns true on that","m.mentions":{},"msgtype":"m.text"},"ts":1753985304153,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hfDx4gW-K2_c2gTEbg1v6E9trb-OcNtVHnsaheH0fYo"},
{"content":{"body":"That's why we need the property count proposal","m.mentions":{},"msgtype":"m.text"},"ts":1753985336817,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yTsmZXVXGv8BJG7RG29e1oNrt2uyip7R18bjT5uaLxA"},
{"content":{"body":"I was giving a really basic case","m.mentions":{},"msgtype":"m.text"},"ts":1753985342342,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qTGUWzqk2pduhXy75TNDGbfC3n_ifvjdiLN6y2ne-VE"},
{"content":{"body":"But we can build on the previous proposal for \"sparse\" checks","m.mentions":{},"msgtype":"m.text"},"ts":1753985353212,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6nIK-p6T_FKa_7d0ym1EMLaJmt-M794UI41bYhUlexc"},
{"content":{"body":"My point about time-of-check vs time-of-use still stands though","m.mentions":{},"msgtype":"m.text"},"ts":1753985375725,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9ZvUcJVghLwvg_Oz0ynclacCaXiBr5Fr-mL1u9qUrKA"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1753985383294,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$M2VWvHPR_qvAI08XdSnlV8vzVX59FY_T3kRZBrETyoM"},
{"content":{"body":"Even if you check like that","m.mentions":{},"msgtype":"m.text"},"ts":1753985383501,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$tzrZpLurzCG2XP2rNLyCwnWUZeGO3ZIjTiaT748HbUA"},
{"content":{"body":"{0: 0, 1: 0,  3: 0, 17: 0, length: 4} would have a length of 4 and four index-named properties","m.mentions":{},"msgtype":"m.text"},"ts":1753985393286,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$lnkA4jO-7RdUKQzwiM_2FcyJOOwgCsYpS2to6kEgIV8"},
{"content":{"body":"but it'd not be Array.isArray. almost all these use cases are inside a context where that's already been checked","m.mentions":{},"msgtype":"m.text"},"ts":1753985465320,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q-qI5yOnPpud3BeLYDqTYRwPqSXMP_H2HhL4sjUyTug"},
{"content":{"body":"I though the proposal only worked on Arrays","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lnkA4jO-7RdUKQzwiM_2FcyJOOwgCsYpS2to6kEgIV8"}},"msgtype":"m.text"},"ts":1753985480712,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ALSuXe7JqYktS5ZRx3PKNM4NObvVhD2RuvTe7SD163I"},
{"content":{"body":"* I thought the proposal only worked on Arrays","m.mentions":{},"m.new_content":{"body":"I thought the proposal only worked on Arrays","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ALSuXe7JqYktS5ZRx3PKNM4NObvVhD2RuvTe7SD163I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753985493772,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dh5idYtsAKCulfddLDcPv5CJhgB35peDr4obr9s23LQ"},
{"content":{"body":"That's still being debated.","m.mentions":{},"msgtype":"m.text"},"ts":1753985596503,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$SbYQT49bcLN7jbdm_kJlwu2UrbmY11wxWaELzXoo2eM"},
{"content":{"body":"I continue to wish JS had syntax and semantics for custom indexers, much like how TypedArrays are handled. This proposal brings that back to mind.","m.mentions":{},"msgtype":"m.text"},"ts":1753985596947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U3c6xy3axsKBCe_xXlj9QnjfjEzHI71P2WmDV1hTWlQ"},
{"content":{"body":"we are going to go over time most likely.  please indicate your preference:\n\n🦆 - continue the meeting into the lunch break, and conclude plenary\n🐓 - break for lunch, and return after to continue meeting ,then conclude","m.mentions":{},"msgtype":"m.text"},"ts":1753985637912,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$L8x1B2nZ6wZFQVxnW6_ZaSQSGRfmmgGkygH0JcI_PZU"},
{"content":{"body":"Wouldn't any handling of array-like (specifically excluding arrays here) have to be linear?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SbYQT49bcLN7jbdm_kJlwu2UrbmY11wxWaELzXoo2eM"}},"msgtype":"m.text"},"ts":1753985643829,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EMWH5u7uVwjCZntSPByW8_mXQc5kzMPhsWXfWDMQHtA"},
{"content":{"body":"We could just implement in userland, there's no benefit of a native API","m.mentions":{},"msgtype":"m.text"},"ts":1753985668698,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bzrLc9_JwycvUGYalbTEeOZjcAewN-GOQiNlaPOwelI"},
{"content":{"body":"Yes, it would be linear. But, given today's comments, a lot of cases on Arrays would also be linear.","m.mentions":{},"msgtype":"m.text"},"ts":1753985700554,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$1YFZfy0nGUUoiB2u2dJFgasXrnGZZb-XHgp5asDhJl8"},
{"content":{"body":"Not if we use property count, since the length is 🪄","m.mentions":{},"msgtype":"m.text"},"ts":1753985737387,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$w2XjVmyfN725E37juCHuxzeOTBjFNonxdQ8FjvM3TlQ"},
{"content":{"body":"Index keys are stored in a special array (in V8), and length is always guaranteed to be the max index's value +1.","m.mentions":{},"msgtype":"m.text"},"ts":1753985795704,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XWNAS0WTH7iM0X0mPMGqiItShKPf1FKfPjvDerZ-YAU"},
{"content":{"body":"So the check could be constant for arrays specifically","m.mentions":{},"msgtype":"m.text"},"ts":1753985808759,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PtiieqyTgV23MadnbXBlxls3oMipSxZtFv7_o8nAC1E"},
{"content":{"body":"So you're saying that it is possible to implement Array.isSparse in O(1) time?","m.mentions":{},"msgtype":"m.text"},"ts":1753985865013,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$32-WI5A4-8CeQM6uKa-e8kVo0qmfq4pGErVP0BZU70M"},
{"content":{"body":"In V8 at least, without depending on the element's kind internal stucture.","m.mentions":{},"msgtype":"m.text"},"ts":1753985891497,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vo6raLuwU_H4jY7T4eGnYwLR7fKW2HubEV2gaJ8lzvc"},
{"content":{"body":"Don't know about the other engines, but they had to implement special ordering rules for Object.keys(), so they may have index keys stored separately.","m.mentions":{},"msgtype":"m.text"},"ts":1753985924389,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rzEAvmIKl66HaEszkWgtUFteUyCiLqL6KJ_vNwcS83A"},
{"content":{"body":"Only `Object.keys` and `Object.propertyCount`, passing as the second parameter a bitflag to do all the filtering 🧠","format":"org.matrix.custom.html","formatted_body":"Only <code>Object.keys</code> and <code>Object.propertyCount</code>, passing as the second parameter a bitflag to do all the filtering 🧠","m.mentions":{},"msgtype":"m.text"},"ts":1753986135522,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AfqfH6QaDQL0ylyE0RHeTUIUnZacwzwL9HKV11rN9bI"},
{"content":{"body":"now you're thinking like a 1990s DOM API 😎","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AfqfH6QaDQL0ylyE0RHeTUIUnZacwzwL9HKV11rN9bI"}},"msgtype":"m.text"},"ts":1753986182808,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$GY4KSqmDWTA6yvd2EiwcL8ZPc505o_tl_aRYQDbxojc"},
{"content":{"body":"proposal: add a one true Object.getPropertyNames which accepts this options bag: https://docs.rs/v8/latest/v8/struct.GetPropertyNamesArgs.html","m.mentions":{},"msgtype":"m.text"},"ts":1753986332987,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5_eEzdYG2aSGhT5yjZyR3J6RtkV2p6buKGVxoRnmcH0"},
{"content":{"body":"no. it's O(1) to skip indices (which might or might not have holes)","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$32-WI5A4-8CeQM6uKa-e8kVo0qmfq4pGErVP0BZU70M"}},"msgtype":"m.text"},"ts":1753986575084,"senderName":"Olivier Flückiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$vyQ5-NY5Z7hYvogI-whOyLMdJo1yijw0HiI9pA7MWtY"},
{"content":{"body":"Rather than using `'all'` to fight defaults, why not have these APIs always include everything by default and use the presence and value of `enumerable` et al to control behavior, much like `defineProperty` (which ignores missing attributes as long as the property already exists).","format":"org.matrix.custom.html","formatted_body":"Rather than using <code>'all'</code> to fight defaults, why not have these APIs always include everything by default and use the presence and value of <code>enumerable</code> et al to control behavior, much like <code>defineProperty</code> (which ignores missing attributes as long as the property already exists).","m.mentions":{},"msgtype":"m.text"},"ts":1753986588065,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AUukGuDpyt-5eWmfeRxNn2a41l4tFJLUxj5I-dVbGlE"},
{"content":{"body":"This response seems like a negative of a negative? I'm not sure how to understand it.","m.mentions":{"user_ids":["@olivf.o1o.ch:immer.chat"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vyQ5-NY5Z7hYvogI-whOyLMdJo1yijw0HiI9pA7MWtY"}},"msgtype":"m.text"},"ts":1753986688561,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QJwi00_OGEnIv6GeHUjwRNAjSnpY1cqQ6H1ZVyNwvrI"},
{"content":{"body":"for this API and `propertyCount`, have it be `propertyCount(target)` to count all properties, and use `propertyCount(target, { enumerable: true })` to count only enumerable keys. Much like how `getOwnPropertyKeys` gets all own keys","format":"org.matrix.custom.html","formatted_body":"for this API and <code>propertyCount</code>, have it be <code>propertyCount(target)</code> to count all properties, and use <code>propertyCount(target, { enumerable: true })</code> to count only enumerable keys. Much like how <code>getOwnPropertyKeys</code> gets all own keys","m.mentions":{},"msgtype":"m.text"},"ts":1753986702654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aGy8uuHB1a1oHhRJtaTa8HdXqQEzlNC4wAVzUFrFmLw"},
{"content":{"body":"We can give you the max index. but not tell you how many elements up to that index exist in the array.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QJwi00_OGEnIv6GeHUjwRNAjSnpY1cqQ6H1ZVyNwvrI"}},"msgtype":"m.text"},"ts":1753986785831,"senderName":"Olivier Flückiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$HWFTrOSqxh_hE4V2ak93DlDvXPkMlQLxsvJKCUL9kAY"},
{"content":{"body":"+1, maybe calling it `enumerableOnly`","format":"org.matrix.custom.html","formatted_body":"+1, maybe calling it <code>enumerableOnly</code>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aGy8uuHB1a1oHhRJtaTa8HdXqQEzlNC4wAVzUFrFmLw"}},"msgtype":"m.text"},"ts":1753986797130,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$57SdeTFw-3-vH3sF8sQtS-oES8WTVhrkQt6W9_IqyWA"},
{"content":{"body":"It should be the count of the index keys array, right?","m.mentions":{"user_ids":["@olivf.o1o.ch:immer.chat"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HWFTrOSqxh_hE4V2ak93DlDvXPkMlQLxsvJKCUL9kAY"}},"msgtype":"m.text"},"ts":1753986811221,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VPvSBuITAHc8GdASbutZPO6GUm7qlPHbsfoNiqpUnGs"},
{"content":{"body":"which is implicitly defined by not being a hole in the array backing store...","m.mentions":{},"msgtype":"m.text"},"ts":1753986832058,"senderName":"Olivier Flückiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$ImPRyC_XTiSZz40DrqIXKCyyAVCfv7GBM37JZ8e5ozg"},
{"content":{"body":"has anyone ever enumerated a sufficiently large typed array to observe this","m.mentions":{},"msgtype":"m.text"},"ts":1753986884095,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ocv57VEgtHyc1BVqwFDN4tFwI8R_uEPx4XPtdsZgXao"},
{"content":{"body":"Does a the hole have an entry in the index keys arrays?","m.mentions":{"user_ids":["@olivf.o1o.ch:immer.chat"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ImPRyC_XTiSZz40DrqIXKCyyAVCfv7GBM37JZ8e5ozg"}},"msgtype":"m.text"},"ts":1753986892820,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$T031nI30VjOoMYpZFsy4ZrNFGmaRm0RwcHp3WE3tj3U"},
{"content":{"body":"we don't separately store keys for arrays","m.mentions":{},"msgtype":"m.text"},"ts":1753986920783,"senderName":"Olivier Flückiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$9N_c4wZZwTp8fxLY_nK_47Qx7T7eSlm-IZjYT07-dDg"},
{"content":{"body":"I don't think the thing Richard said is true","m.mentions":{},"msgtype":"m.text"},"ts":1753986946632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ji5tcZHlMRm6UPAhWK324hO4bt6UPMeZDxUcos52wMw"},
{"content":{"body":"Richard Gibson: https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-typedarray-ownpropertykeys","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-typedarray-ownpropertykeys","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"msgtype":"m.text"},"ts":1753986959546,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G6LkNDYchuTLNoc-xUPe1UrQUjjyAgd-eiY7ZmUFJk0"},
{"content":{"body":"exotic objects are allowed to have different key enumeration order than the default array-index-first behavior that ordinary objects have","m.mentions":{},"msgtype":"m.text"},"ts":1753987017483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VMx6A02t9cqJsohUGp0ZUlLsi_JkadqxV5WPkWSP1xQ"},
{"content":{"body":"i agree with you; TAs already cover that","m.mentions":{},"msgtype":"m.text"},"ts":1753987029967,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xDQ58LKgLodCnQdTxXiBYOzmuFuntXNzLew_WAA6d_8"},
{"content":{"body":"ack, I accept the correction","m.mentions":{},"msgtype":"m.text"},"ts":1753987060456,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$IN-RQ0C3SEuLWytgkeu8uPSstuEg5ziepJDJt3I5FxI"},
{"content":{"body":"I'm a fan of just mirroring the attribute names, in the event we ever care about also supporting `configurable` or `writable`","format":"org.matrix.custom.html","formatted_body":"I'm a fan of just mirroring the attribute names, in the event we ever care about also supporting <code>configurable</code> or <code>writable</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$57SdeTFw-3-vH3sF8sQtS-oES8WTVhrkQt6W9_IqyWA"}},"msgtype":"m.text"},"ts":1753987119267,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fm0onyd-cLf0hRB6N4tTANdbVgOqA-JOMC7wIVviR2Q"},
{"content":{"body":"if it's called `enumerable` tho then it can't cover \"all\"","format":"org.matrix.custom.html","formatted_body":"if it's called <code>enumerable</code> tho then it can't cover \"all\"","m.mentions":{},"msgtype":"m.text"},"ts":1753987152497,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xoVSSsH_wHxtBx7PRxEdeY1ScPnZur3AZSuhZclIOKw"},
{"content":{"body":"only true and false","m.mentions":{},"msgtype":"m.text"},"ts":1753987159758,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bOyASuuGzS85Bvmbly5SqQTLINYUsEkOw8-k3ExSISE"},
{"content":{"body":"The reason I suggested that is that `enumerable: true` could either be \"include enumerable keys\" or \"include _only_ enumerable  keys\"","format":"org.matrix.custom.html","formatted_body":"The reason I suggested that is that <code>enumerable: true</code> could either be \"include enumerable keys\" or \"include <em>only</em> enumerable  keys\"","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fm0onyd-cLf0hRB6N4tTANdbVgOqA-JOMC7wIVviR2Q"}},"msgtype":"m.text"},"ts":1753987163622,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4zuRw1MLNQ7iqmZyDPs9jD3pSvw9BSES1Br2gIOZ_3o"},
{"content":{"body":"It can cover it by being missing or `undefined`, just like how `defineProperty` handles it for existing properties.","format":"org.matrix.custom.html","formatted_body":"It can cover it by being missing or <code>undefined</code>, just like how <code>defineProperty</code> handles it for existing properties.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xoVSSsH_wHxtBx7PRxEdeY1ScPnZur3AZSuhZclIOKw"}},"msgtype":"m.text"},"ts":1753987183009,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dzokx-cPAMWIo3aba3PPZz-yvLnmx19a_WT2htauz6o"},
{"content":{"body":"true, but it's very awkward to have a three-state boolean, and in this case the default would be `true`, and boolean option should always default to `false` when absent","format":"org.matrix.custom.html","formatted_body":"true, but it's very awkward to have a three-state boolean, and in this case the default would be <code>true</code>, and boolean option should always default to <code>false</code> when absent","m.mentions":{},"msgtype":"m.text"},"ts":1753987224235,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iefzzfvq1IKxyRi1g2feEwa3Q_k6--TswEpMltLJBKk"},
{"content":{"body":"i.e.:\n- `propertyCount(target, {})` count all properties. \n- `propertyCount(target, { enumerable: true })` count only enumerable properties\n- `propertyCount(target, { enumerable: false })` count only non-enumerable properties\n","format":"org.matrix.custom.html","formatted_body":"<p>i.e.:</p>\n<ul>\n<li><code>propertyCount(target, {})</code> count all properties.</li>\n<li><code>propertyCount(target, { enumerable: true })</code> count only enumerable properties</li>\n<li><code>propertyCount(target, { enumerable: false })</code> count only non-enumerable properties</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1753987251481,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UBnhngM7uGYkke4IE_wNyws6oqZSu3tZDbr-NoADV1o"},
{"content":{"body":"also if we added \"writable\" how would it work with accessor properties","m.mentions":{},"msgtype":"m.text"},"ts":1753987256496,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IvmjDLwyVPx_oPzGIywdw2gWUx9kflFqSI1DAKyhryg"},
{"content":{"body":"* also if we added \"writable\" how would it work with accessor properties, i don't think we can ever add that one","m.mentions":{},"m.new_content":{"body":"also if we added \"writable\" how would it work with accessor properties, i don't think we can ever add that one","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IvmjDLwyVPx_oPzGIywdw2gWUx9kflFqSI1DAKyhryg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987266286,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AImv_ITd1WBuu3YvXkj4DddDY4ZNJU5VBVOUfxcSJTM"},
{"content":{"body":"* also if we added \"writable\" how would it work with accessor properties, i don't think we could ever add that one","m.mentions":{},"m.new_content":{"body":"also if we added \"writable\" how would it work with accessor properties, i don't think we could ever add that one","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IvmjDLwyVPx_oPzGIywdw2gWUx9kflFqSI1DAKyhryg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987273074,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CYDeGOvG2IrO1mZm9HN1WMTF-AqvoBBZtI7KOEp9krE"},
{"content":{"body":"Named String and Symbol properties are mixed in JSC's Structures","m.mentions":{},"msgtype":"m.text"},"ts":1753987286368,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$80mmPpuOOCKv31VGuUNzVoiu7kok3LUf20Vmqe8I19Y"},
{"content":{"body":"That said, it's easy enough to skip over the symbols and we already have that functionality","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$80mmPpuOOCKv31VGuUNzVoiu7kok3LUf20Vmqe8I19Y"}},"msgtype":"m.text"},"ts":1753987310130,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$uRbqgG1fDo7l78xjAdMzX3N7sbv297dTKreO8vZUXHM"},
{"content":{"body":"whether a setter is present?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IvmjDLwyVPx_oPzGIywdw2gWUx9kflFqSI1DAKyhryg"}},"msgtype":"m.text"},"ts":1753987312054,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-Od0thMDd5q1ZPtsBUZXACmxF45TgRok3aHx7b9rfcg"},
{"content":{"body":"If we ever wanted anything that detailed, we could use `propertyCount(t, { writable: true }) + propertyCount(t, { set: true })`","format":"org.matrix.custom.html","formatted_body":"If we ever wanted anything that detailed, we could use <code>propertyCount(t, { writable: true }) + propertyCount(t, { set: true })</code>","m.mentions":{},"msgtype":"m.text"},"ts":1753987317612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3bCKtdWEOCzFvzGlgcvY5msq7bErzwIqYG27Aex9cJE"},
{"content":{"body":"`Object.getOwnEnumerablePropertySymbols`, can we go home now?","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">Object.getOwnEnumerablePropertySymbols</code>, can we go home now?","m.mentions":{},"msgtype":"m.text"},"ts":1753987321841,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$90ozgRJGSPzNqaLSxs_LlTS3ldG0E_JPE3wPg5iYTEo"},
{"content":{"body":"lol but i mean, if you say \"true\" or \"false\" then you're skipping all accessor properties?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-Od0thMDd5q1ZPtsBUZXACmxF45TgRok3aHx7b9rfcg"}},"msgtype":"m.text"},"ts":1753987334137,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KqKgkfWsklwt--sMW0eQ_oUmepWSHLY1AamS9UHVyfw"},
{"content":{"body":"so the mirroring is broken because the type of `set` no longer matches","format":"org.matrix.custom.html","formatted_body":"so the mirroring is broken because the type of <code>set</code> no longer matches","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3bCKtdWEOCzFvzGlgcvY5msq7bErzwIqYG27Aex9cJE"}},"msgtype":"m.text"},"ts":1753987352460,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$imV7OABANfylaJVhQS7cD8kugHJxCCMi4l2dTTUR6TQ"},
{"content":{"body":"I have to leave now, but I'm +1 on this proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"I have to leave now, but I'm +1 on this proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"ts":1753987360215,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$BslioYo_9KLWRbCHRxBzyOmHiZd18HLS6Cd6yHRwyGY"},
{"content":{"body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{},"m.new_content":{"body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BslioYo_9KLWRbCHRxBzyOmHiZd18HLS6Cd6yHRwyGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987367110,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fUtMLuU-inaLPa7kgVcNrxoolobcwkkd8-3ElHjrqJI"},
{"content":{"body":"What is doable in O(1)? Getting the total number of properties? Getting the number of indexed properties? Nonindexed properties?","m.mentions":{"user_ids":["@olivf.o1o.ch:immer.chat"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vyQ5-NY5Z7hYvogI-whOyLMdJo1yijw0HiI9pA7MWtY"}},"msgtype":"m.text"},"ts":1753987392732,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$v_q_v19LcsvKQ7u3tmfbnW5Xn7GAoCG9vfALuORbuYQ"},
{"content":{"body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the other two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the other two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{},"m.new_content":{"body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the other two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the other two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BslioYo_9KLWRbCHRxBzyOmHiZd18HLS6Cd6yHRwyGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987394351,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3kgv16xkz6UxJ55WUtBt12v_vb3lzfM9emi6RXfnACA"},
{"content":{"body":"Object.symbols, surely","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$90ozgRJGSPzNqaLSxs_LlTS3ldG0E_JPE3wPg5iYTEo"}},"msgtype":"m.text"},"ts":1753987402345,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7uQ4OrfgSvTNiCrMf5CEu3K5sqwlzZUGi666PqkIuEo"},
{"content":{"body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"* I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{},"m.new_content":{"body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc ryzokuken as both Igalian and chair :P)","format":"org.matrix.custom.html","formatted_body":"I have to leave now, but I'm +1 on this array indexes proposal going to stage 1, and -1 on the first two advancing. For the first one until the use cases for the various combinations are clarified with actual examples, then it'll turn into +1 at a future meeting. For the one about isSparse I'm not convinced that it's what actually is needed to get a fast path. (cc <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> as both Igalian and chair :P)","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BslioYo_9KLWRbCHRxBzyOmHiZd18HLS6Cd6yHRwyGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987403377,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4_9F2sserwUwtIFQ_jffZAl2kEmo9xTZaPP7j2E0J9Y"},
{"content":{"body":"My concern with having a bunch of methods on `Object` over the property bag is that it is inflexible without the number of similar property names on `Object` ballooning out of control. I wouldn't look forward to scrolling through the autocomplete list for that case. An options bag keeps the API rational and flexible.","format":"org.matrix.custom.html","formatted_body":"My concern with having a bunch of methods on <code>Object</code> over the property bag is that it is inflexible without the number of similar property names on <code>Object</code> ballooning out of control. I wouldn't look forward to scrolling through the autocomplete list for that case. An options bag keeps the API rational and flexible.","m.mentions":{},"msgtype":"m.text"},"ts":1753987452729,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oKwK5PrAWEDD86vXPKPnX_uKRRjYdVJ4KwlbOz-qnEk"},
{"content":{"body":"and, as i argued earlier, more discoverable","m.mentions":{},"msgtype":"m.text"},"ts":1753987474620,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gDKQV6OA2kx4WdPjFBVSoeIMfPKuAC5C3PNUVWFNHiQ"},
{"content":{"body":"we already have almost the whole matrix","m.mentions":{},"msgtype":"m.text"},"ts":1753987477181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SCQ53obxyC_ifQ1Il4CtpkYF8AkPLpugtUH9u4ow8n0"},
{"content":{"body":"WFM","format":"org.matrix.custom.html","formatted_body":"WFM","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7uQ4OrfgSvTNiCrMf5CEu3K5sqwlzZUGi666PqkIuEo"}},"msgtype":"m.text"},"ts":1753987480027,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$veQqgZWICeeHt1gyoP2WVXLc6hYb8jqQia65GROV-Hs"},
{"content":{"body":"we have Object.keys, Reflect.ownKeys, Object.getOwnPropertyNames, Object.getOwnPropertySymbols","m.mentions":{},"msgtype":"m.text"},"ts":1753987494685,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oPULx-gO619-0-oibkrkBdLVYWTktQgNTttYrr2ZSKk"},
{"content":{"body":"these are all their own method","m.mentions":{},"msgtype":"m.text"},"ts":1753987497697,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KuhgRX8x5kl52akB_GMtYpXwlDqJI2ZUF_CI0VeyZ5Y"},
{"content":{"body":"Probably number of nonindexed properties (but I would have to think about it) and if the array happens to have a particular internal shape, then the number of indexed propoerties.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v_q_v19LcsvKQ7u3tmfbnW5Xn7GAoCG9vfALuORbuYQ"}},"msgtype":"m.text"},"ts":1753987499169,"senderName":"Olivier Flückiger","senderId":"@olivf.o1o.ch:immer.chat","id":"$vrkfp9WU6gdAdcidNZee0lV3xugp8Bcabot_ouXfCXc"},
{"content":{"body":"`Object.symbols`, but don't forget `Object.symbolValues` and `Object.symbolEntries`","format":"org.matrix.custom.html","formatted_body":"<code>Object.symbols</code>, but don't forget <code>Object.symbolValues</code> and <code>Object.symbolEntries</code>","m.mentions":{},"msgtype":"m.text"},"ts":1753987502664,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QdHD30vlKHV3F_HwYpF0idREE6uHIYVPbMWbXbRJaIc"},
{"content":{"body":"Its still similar enough, IMO.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$imV7OABANfylaJVhQS7cD8kugHJxCCMi4l2dTTUR6TQ"}},"msgtype":"m.text"},"ts":1753987507959,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TJI85cnVFCxmQPJsxzDNnV22go5FRskchg2HN7jmP94"},
{"content":{"body":"any new thing in this matrix should also be its own method","m.mentions":{},"msgtype":"m.text"},"ts":1753987523058,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c0L4l1acZ5E2PiC2OXi-uIQJIIrNaVZbyTGyICzO4GY"},
{"content":{"body":"and if we add `Object.symbols()` then what about a `.symbols()` iterator method on Set/Map/Array?","format":"org.matrix.custom.html","formatted_body":"and if we add <code>Object.symbols()</code> then what about a <code>.symbols()</code> iterator method on Set/Map/Array?","m.mentions":{},"msgtype":"m.text"},"ts":1753987536967,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N2r8DNgreUiPKtlgh_C8REOfnXUkGVej6Y_KnbB5Cm0"},
{"content":{"body":"`entries` is not an item in this matrix; there's only one of it","format":"org.matrix.custom.html","formatted_body":"<code>entries</code> is not an item in this matrix; there's only one of it","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QdHD30vlKHV3F_HwYpF0idREE6uHIYVPbMWbXbRJaIc"}},"msgtype":"m.text"},"ts":1753987539422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$veeNCef3qtSN_eR3iNkCSLC4suv-0jeC5dVmCAQecdY"},
{"content":{"body":"And they could just be one method with options that allows for future extensibility without adding even more methods to `Object`.","format":"org.matrix.custom.html","formatted_body":"And they could just be one method with options that allows for future extensibility without adding even more methods to <code>Object</code>.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oPULx-gO619-0-oibkrkBdLVYWTktQgNTttYrr2ZSKk"}},"msgtype":"m.text"},"ts":1753987550589,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6EFG0XI1OeAQJYgz1sJTE9qVOAo_oy_WUlcV54Jrt7g"},
{"content":{"body":"why would we want that?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$N2r8DNgreUiPKtlgh_C8REOfnXUkGVej6Y_KnbB5Cm0"}},"msgtype":"m.text"},"ts":1753987553620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UcmSQSG8XJKdqGJIaqz9FfkLGN7Cx5qbXihGpmjWElE"},
{"content":{"body":"lol i'm just saying that we have a LOT of keys/values/entries parallels","m.mentions":{},"msgtype":"m.text"},"ts":1753987557640,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NgpsVdhzBsTlzfaLS4NnFf9wtihAZCT3_0HLY_9ghLA"},
{"content":{"body":"but they all already exist","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6EFG0XI1OeAQJYgz1sJTE9qVOAo_oy_WUlcV54Jrt7g"}},"msgtype":"m.text"},"ts":1753987561020,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HUt5BQsWXWt_RWLGiWFQgPw5NTJ7B5zgv9vR7e1AHmY"},
{"content":{"body":"javascript i have seen your future https://gc.gy/d452a7e4-49d7-4b50-be21-ce3f6cdc0fb4.png","m.mentions":{},"msgtype":"m.text"},"ts":1753987567702,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WNZq6gFh92vtp6H8MC55asG8mk6cjhmn_5sNGmXCK8I"},
{"content":{"body":"if your argument for method over option bag is \"filling in the matrix\", then we have a much larger matrix to fill in","m.mentions":{},"msgtype":"m.text"},"ts":1753987570740,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$R7Ufa2GQeV8BvIRXFTE3-cUMowybl9pWuTjTB7rtCfY"},
{"content":{"body":"no my argument is _if_ we are filling in part of the matrix _then_ it must be in keeping with the rest of the existing matrix","format":"org.matrix.custom.html","formatted_body":"no my argument is <em>if</em> we are filling in part of the matrix <em>then</em> it must be in keeping with the rest of the existing matrix","m.mentions":{},"msgtype":"m.text"},"ts":1753987590402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eiYgQ5et0xJ3N5QKX2liJlq6rLpA0ydIBv6lkmVioq8"},
{"content":{"body":"you failed to predict when we add a new kind of property key in 2028","format":"org.matrix.custom.html","formatted_body":"you failed to predict when we add a new kind of property key in 2028","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WNZq6gFh92vtp6H8MC55asG8mk6cjhmn_5sNGmXCK8I"}},"msgtype":"m.text"},"ts":1753987605681,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$p6kTQP5V8G6-M1OKNGXxMgoze7JithZ4iITbUO56eCw"},
{"content":{"body":"and the matrix includes keys/values/entries on Object/Set/Map/Array.","m.mentions":{},"msgtype":"m.text"},"ts":1753987614538,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V7CpI5ts1b4sCQDNh_bbZeyFu2S0AIN0MkNfSWU42PA"},
{"content":{"body":"getOwnDecimalkeys","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$p6kTQP5V8G6-M1OKNGXxMgoze7JithZ4iITbUO56eCw"}},"msgtype":"m.text"},"ts":1753987619957,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TTnB-b8ylD8nKd8sZSncjnyEjjer4S2-L-v012g0iC0"},
{"content":{"body":"* getOwnPropertyDecimals","m.mentions":{},"m.new_content":{"body":"getOwnPropertyDecimals","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TTnB-b8ylD8nKd8sZSncjnyEjjer4S2-L-v012g0iC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987626782,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9jhJ8I0LGycXN2vR_xbaF3QWwFaX-oZvOdRAeh-jixc"},
{"content":{"body":"that is a matrix but is not the one we are talking about, no","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$V7CpI5ts1b4sCQDNh_bbZeyFu2S0AIN0MkNfSWU42PA"}},"msgtype":"m.text"},"ts":1753987628210,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tgF_jYNuvE3nYI0Pb_3Pwloa_FwG-VE60dMTispBL7Q"},
{"content":{"body":"That approach doesn't scale to a larger number of permutations. ","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HUt5BQsWXWt_RWLGiWFQgPw5NTJ7B5zgv9vR7e1AHmY"}},"msgtype":"m.text"},"ts":1753987631275,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tfqmdm-ABGl2tOQhJTfVV_dzZl3Y41XZhgdeBmuWqmE"},
{"content":{"body":"it is just not relevant at all","m.mentions":{},"msgtype":"m.text"},"ts":1753987631949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_jYMYyflSsGUm5GO4H-NH2eLMFm5IIud3_zalEvGIAg"},
{"content":{"body":"there's no more permutations","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tfqmdm-ABGl2tOQhJTfVV_dzZl3Y41XZhgdeBmuWqmE"}},"msgtype":"m.text"},"ts":1753987642343,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JOJgWtAjUMBcxkCO_wf71vVBBXRlf_hXZw_qPruDLpE"},
{"content":{"body":"if we start doing configurable vs not or whatever, we can do that as options bags","m.mentions":{},"msgtype":"m.text"},"ts":1753987651790,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OZXfw9XIg_2t9eFqs9jQL0grl1H4Pl9iQnpKUojkPfs"},
{"content":{"body":"The fact that `keys` vs `getOwnPropertyNames` differentiates by enumerability is definitely non-obvious to a new developer.","format":"org.matrix.custom.html","formatted_body":"The fact that <code>keys</code> vs <code>getOwnPropertyNames</code> differentiates by enumerability is definitely non-obvious to a new developer.","m.mentions":{},"msgtype":"m.text"},"ts":1753987804099,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CksIYd3fQZOtm-RwM8HIy7kCmHsxS0ERNB_MKt1j7gU"},
{"content":{"body":"I agree but it is how it works","m.mentions":{},"msgtype":"m.text"},"ts":1753987816809,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DuNf7BQ4N5kAP3x7CEWX1MYg1yLGuBnyWtA0pMZhrsE"},
{"content":{"body":"we can't say \"the existing way is not sufficiently obvious so we're going to add a new way\"","m.mentions":{},"msgtype":"m.text"},"ts":1753987831567,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tmJSjOcfTqD3jgtUzQSZqnJ5WJprywLNvirdDDyrEEc"},
{"content":{"body":"* we can't say \"the existing methods names are not sufficiently obvious so we're going to add a new way\"","m.mentions":{},"m.new_content":{"body":"we can't say \"the existing methods names are not sufficiently obvious so we're going to add a new way\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tmJSjOcfTqD3jgtUzQSZqnJ5WJprywLNvirdDDyrEEc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753987839436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1LlkRMY8u68q0o1dN0imGPP7OFtg1z7FW5LbQpgP1ls"},
{"content":{"body":"why can't we?","m.mentions":{},"msgtype":"m.text"},"ts":1753987845272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vDvlke2wXldDhpQxibVof0kKFpn0gPU4p19op4NxFV8"},
{"content":{"body":"i would personally not put filling out matrixes over like how we have learned to design better apis from the last 25 years","m.mentions":{},"msgtype":"m.text"},"ts":1753987854924,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IHKBow-27reeEP67sB-optlB_GD005_g_TwQwa-XjYs"},
{"content":{"body":"for generic property key enumeration, I think the current (incomplete) matrix is {string, symbol, both} × {enumerable, ignore-enumerability}","m.mentions":{},"msgtype":"m.text"},"ts":1753987858455,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$OzuZjr6TyofhvoXlSv9wHHR9NctgX_2MtBK6ubQ9owc"},
{"content":{"body":"that is _a_ matrix but { string, symbol } x { enumerable, all } is another matrix, which has three entries, and this is the fourth entry in that matrix","format":"org.matrix.custom.html","formatted_body":"that is <em>a</em> matrix but { string, symbol } x { enumerable, all } is another matrix, which has three entries, and this is the fourth entry in that matrix","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OzuZjr6TyofhvoXlSv9wHHR9NctgX_2MtBK6ubQ9owc"}},"msgtype":"m.text"},"ts":1753987895373,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0xvwlxZi_yI5XQWC2YA1U583DlhwhTFmeCPC8ojsi90"},
{"content":{"body":"That sounds like a perfectly valid reason to consider a different design for an API. ","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tmJSjOcfTqD3jgtUzQSZqnJ5WJprywLNvirdDDyrEEc"}},"msgtype":"m.text"},"ts":1753987900738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1LhdH4QfZRvH6dPfFRIXirv4TwPL4XEQYdRL7NCyHe4"},
{"content":{"body":"the very slightest modicum of taste?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vDvlke2wXldDhpQxibVof0kKFpn0gPU4p19op4NxFV8"}},"msgtype":"m.text"},"ts":1753987908018,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jnX685SHn0q0Yl9dkRt83rM0pDcvLxmfMQXaDHCDE4o"},
{"content":{"body":"taste is a subjective thing, and my taste tends to consider \"deprecate the bad thing, make a much better new thing\" more pleasant than \"never learn from our mistakes\"","m.mentions":{},"msgtype":"m.text"},"ts":1753987942501,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$REA0phRZINzk4nQ0grknLK13e-NM7-MXd4eqDPY2hDo"},
{"content":{"body":"I disagree that such a reduced matrix is relevant, but don't want to complete either for their own sake anyway","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0xvwlxZi_yI5XQWC2YA1U583DlhwhTFmeCPC8ojsi90"}},"msgtype":"m.text"},"ts":1753987982876,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ptOCbpOCVk5s5YmLHdjUzxSPnVNslDhhnjPGAIeO0yw"},
{"content":{"body":"it is a fine reason to consider designing new APIs in a different way, when they are not just extensions of the existing API","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1LhdH4QfZRvH6dPfFRIXirv4TwPL4XEQYdRL7NCyHe4"}},"msgtype":"m.text"},"ts":1753987989483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oqOsyClxxoUvaAqqk2mR92i0QFc8pYNzGTS0haHvqkE"},
{"content":{"body":"I strongly agree that we don't want to complete either for their own sake and have said as much on several occasions","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ptOCbpOCVk5s5YmLHdjUzxSPnVNslDhhnjPGAIeO0yw"}},"msgtype":"m.text"},"ts":1753988003216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NDLWj9MD34TTErdq2Sa_fqVlsO_5guNU3oPpbu0Kmu0"},
{"content":{"body":"however, _if_ we are filling a the matrix of functionality _then_ it must match the exiting parts of the matrix","format":"org.matrix.custom.html","formatted_body":"however, <em>if</em> we are filling a the matrix of functionality <em>then</em> it must match the exiting parts of the matrix","m.mentions":{},"msgtype":"m.text"},"ts":1753988020014,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jAPizguEQYkLJmA9YkhMA_IHclD4SdcJqocPZfLU2y0"},
{"content":{"body":"* however, _if_ we are filling a the matrix of functionality _then_ it must match the existing parts of the matrix","format":"org.matrix.custom.html","formatted_body":"* however, <em>if</em> we are filling a the matrix of functionality <em>then</em> it must match the existing parts of the matrix","m.mentions":{},"m.new_content":{"body":"however, _if_ we are filling a the matrix of functionality _then_ it must match the existing parts of the matrix","format":"org.matrix.custom.html","formatted_body":"however, <em>if</em> we are filling a the matrix of functionality <em>then</em> it must match the existing parts of the matrix","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jAPizguEQYkLJmA9YkhMA_IHclD4SdcJqocPZfLU2y0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753988024451,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QR7pan4L0D2rdW7ovz0aA6NldRj84VVPBaemMC8QFGI"},
{"content":{"body":"* however, _if_ we are filling a matrix of functionality _then_ it must match the existing parts of the matrix","format":"org.matrix.custom.html","formatted_body":"* however, <em>if</em> we are filling a matrix of functionality <em>then</em> it must match the existing parts of the matrix","m.mentions":{},"m.new_content":{"body":"however, _if_ we are filling a matrix of functionality _then_ it must match the existing parts of the matrix","format":"org.matrix.custom.html","formatted_body":"however, <em>if</em> we are filling a matrix of functionality <em>then</em> it must match the existing parts of the matrix","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jAPizguEQYkLJmA9YkhMA_IHclD4SdcJqocPZfLU2y0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753988031667,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GM1e4KuJL5QVGIPkD5nRitM3c2gIvywVMiGNM2MKk5Y"},
{"content":{"body":"Same, where it matters a whole lot, like with avoiding coercions. This does not matter a whole lot.","format":"org.matrix.custom.html","formatted_body":"Same, where it matters a whole lot, like with avoiding coercions. This does not matter a whole lot.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$REA0phRZINzk4nQ0grknLK13e-NM7-MXd4eqDPY2hDo"}},"msgtype":"m.text"},"ts":1753988032739,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ua98lTUbLAAq2wbC3fZ6Q6jPseR_BOgRgtYWz-qZ9Eo"},
{"content":{"body":"\"matter\" is also subjective :-)","m.mentions":{},"msgtype":"m.text"},"ts":1753988078988,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N5XoyW_KyK-5ZLzgVpL67KJrkMymU0RiH489QwJf5xE"},
{"content":{"body":"aesthetics is at the bottom of the mattering ladder","m.mentions":{},"msgtype":"m.text"},"ts":1753988101196,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LV__RFNg98O_HBb1TkDQo7ZfCRnrxiGFHmtHkxITRqY"},
{"content":{"body":"Shifting from a 2x2 matrix to a 3x3 matrix when there is potential to shift to an _n_ x _n_ matrix seems like enough of a trigger to me.","format":"org.matrix.custom.html","formatted_body":"Shifting from a 2x2 matrix to a 3x3 matrix when there is potential to shift to an <em>n</em> x <em>n</em> matrix seems like enough of a trigger to me.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oqOsyClxxoUvaAqqk2mR92i0QFc8pYNzGTS0haHvqkE"}},"msgtype":"m.text"},"ts":1753988123792,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IDqg9h-PN5WPabDFlqLBlIYc91ZwB8PeFOqBoo1-K_A"},
{"content":{"body":"PropertyReflectionFactoryBean, then","m.mentions":{},"msgtype":"m.text"},"ts":1753988125761,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TvKs2L1ooF63Pm4fhY0wOu-Rg_TIJVZaYM_wYzcpfNs"},
{"content":{"body":"I strongly disagree with this, for reasons that align with statements from others above. In short, the current representation is bad and should not be extended, although _reworking_ might be appropriate","format":"org.matrix.custom.html","formatted_body":"I strongly disagree with this, for reasons that align with statements from others above. In short, the current representation is bad and should not be extended, although <em>reworking</em> might be appropriate","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jAPizguEQYkLJmA9YkhMA_IHclD4SdcJqocPZfLU2y0"}},"msgtype":"m.text"},"ts":1753988135670,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$DjAN7s3ws9H2Gcj9WnZinrHzwkKTpPNiAyNqs0KiJK0"},
{"content":{"body":"but this proposal is _not_ shifting from a 2x2 matrix to a 3x3 matrix","format":"org.matrix.custom.html","formatted_body":"but this proposal is <em>not</em> shifting from a 2x2 matrix to a 3x3 matrix","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IDqg9h-PN5WPabDFlqLBlIYc91ZwB8PeFOqBoo1-K_A"}},"msgtype":"m.text"},"ts":1753988152016,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-pwepCHEFAmQ0_Vc15HnivlE_k8M4IkP34aVplfn3So"},
{"content":{"body":"Have folks actually seen these enumeration+filters show up as a meaningful point of performance overheads? I don't think I've ever seen this as a hotspot any traces from benchmarks or live sites.","m.mentions":{},"msgtype":"m.text"},"ts":1753988193055,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$duG26nTiDgDasgsJM3rD1oIuFtCofSZ71o98rS6-7hc"},
{"content":{"body":"Mostly comes up in development and testing","m.mentions":{},"msgtype":"m.text"},"ts":1753988221251,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GPBgt7un-K_NIx-g2F9cAq-wyougmPxHKnOXfHWHbLw"},
{"content":{"body":"I'm sure you can make a microbenchmark but in large codebases","m.mentions":{},"msgtype":"m.text"},"ts":1753988222992,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zMvSjaJuI-2RjA0TE09fzahbqBBRhTAN2qZQ9Lh6Ie8"},
{"content":{"body":"ruben's experience in node is directly having it be very meaningful","m.mentions":{},"msgtype":"m.text"},"ts":1753988225440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ib_wyFn_GbQmN4_8YsVTVk3iG3y_5m7SRFzQtVlGe2I"},
{"content":{"body":"node's experience does not generalize to the web at all","m.mentions":{},"msgtype":"m.text"},"ts":1753988237021,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vekeLCxwMFrjGE0O0CvA-y9gT4Mcx3H_-Ff36YItlXI"},
{"content":{"body":"I don't think this is expected in prod code","m.mentions":{},"msgtype":"m.text"},"ts":1753988247892,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0ynvwEOaRbIKEav0WZT9WMexHUjB_WcbLbrpUfrcG8o"},
{"content":{"body":"sure, not claiming it does","m.mentions":{},"msgtype":"m.text"},"ts":1753988252367,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4KHFVZ2EXN_Q3sBbY3xdz1Bhbv6GVVoz_s-CrngfkdA"},
{"content":{"body":"production code does value inspection quite often, in the web and in node, sometimes in failure paths but not always.","m.mentions":{},"msgtype":"m.text"},"ts":1753988272020,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$27xpWj98IyfyPl3yAk-t3QIBJi2TEWi804bIiepYDMg"},
{"content":{"body":"Agoric code enumerates object properties as part of shape verification","m.mentions":{},"msgtype":"m.text"},"ts":1753988315732,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$cuhKeYTuPwdGmEy_Tr5iilMtdzn8uG0lQ1nM0c5BDqQ"},
{"content":{"body":"Sure, but failure paths are not usually ™️ hot though","m.mentions":{},"msgtype":"m.text"},"ts":1753988316611,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$a9r90YS85oehKNwrjsyV1Auz_mrGomB_WYjALsESapU"},
{"content":{"body":"not limited to failure paths","m.mentions":{},"msgtype":"m.text"},"ts":1753988326950,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$NrmvMSAht1bSFv0E5IyejpuGHxge_jo17t0oE6EeZfw"},
{"content":{"body":"sure, which is why i said \"not always\" :-)","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a9r90YS85oehKNwrjsyV1Auz_mrGomB_WYjALsESapU"}},"msgtype":"m.text"},"ts":1753988330152,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i269OT_UXfmU2QmKkS-3oUsbyqoZvRVVkAFHhWaKgH0"},
{"content":{"body":"Making tests and logging faster would be valuable for me as the dev, but unlikely to impact my users.","m.mentions":{},"msgtype":"m.text"},"ts":1753988362017,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LZVx5934_wOZP_nTIPjKTYu3rGcUr-Ah4RoV5SDJCK0"},
{"content":{"body":"for extremely obscure things, I can _maybe_ buy this on a case-by-case basis, if there's some hope people might migrate off of the current representation. but `Object.keys` is the opposite of obscure","format":"org.matrix.custom.html","formatted_body":"for extremely obscure things, I can <em>maybe</em> buy this on a case-by-case basis, if there's some hope people might migrate off of the current representation. but <code>Object.keys</code> is the opposite of obscure","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DjAN7s3ws9H2Gcj9WnZinrHzwkKTpPNiAyNqs0KiJK0"}},"msgtype":"m.text"},"ts":1753988381995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$komnEwud00fMQULezaoMg3i4c26SScHjJQDY5p2AGDY"},
{"content":{"body":"the *presence* of `Object.keys` is not obscure, but ignoring Symbol-keyed and non-enumerable properties **is**","format":"org.matrix.custom.html","formatted_body":"the <em>presence</em> of <code>Object.keys</code> is not obscure, but ignoring Symbol-keyed and non-enumerable properties <strong>is</strong>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$komnEwud00fMQULezaoMg3i4c26SScHjJQDY5p2AGDY"}},"msgtype":"m.text"},"ts":1753988441448,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$cO1gwXsgYDjsHkpzTUJG9uORXEBC7ohRWQWRQNgVZKY"},
{"content":{"body":"I think using symbols is obscure. And making non-enumerables (outside prototype methods)","m.mentions":{},"msgtype":"m.text"},"ts":1753988543981,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hKxUUH8rFGigrUokZUrloB65y-NBv4h6ZhJWa9oDFRM"},
{"content":{"body":"🕰️ remember to leave time if we're looking for stage advacnement","m.mentions":{},"msgtype":"m.text"},"ts":1753988586643,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YqS1GiD0QBRkQwvemVCYFEY4S_tGBkdeVfU47X5ZbzA"},
{"content":{"body":"like, to be clear, the proposal is:\n\n- How do you get all own strings? Object.getOwnPropertyNames()\n- How do you get all own symbols? Object.getOwnPropertySymbols()\n- How do you get enumerable own keys? Object.keys()\n- How do you get enumerable own symbols? Object.getOwnPropertySymbols({ enumerable: true })","format":"org.matrix.custom.html","formatted_body":"<p>like, to be clear, the proposal is:</p>\n<ul>\n<li>How do you get all own strings? Object.getOwnPropertyNames()</li>\n<li>How do you get all own symbols? Object.getOwnPropertySymbols()</li>\n<li>How do you get enumerable own keys? Object.keys()</li>\n<li>How do you get enumerable own symbols? Object.getOwnPropertySymbols({ enumerable: true })</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1753988643148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bPyfmdvynlSorTDxYyF0Xy3oREgE0BLROlo5tEhp4W4"},
{"content":{"body":"that is dumb","m.mentions":{},"msgtype":"m.text"},"ts":1753988651531,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-gCLb6v-0AL1r1WLksi0DyIm57CaSW3V6Jq6R07cFkE"},
{"content":{"body":"we are not doing that","m.mentions":{},"msgtype":"m.text"},"ts":1753988654129,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jbmtLxUXosYLRSAi5bWbYnJ9BqlU85fzvukfENmtj9g"},
{"content":{"body":"* that is extremely unpleasant to me","m.mentions":{},"m.new_content":{"body":"that is extremely unpleasant to me","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-gCLb6v-0AL1r1WLksi0DyIm57CaSW3V6Jq6R07cFkE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1753988670333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$76M4yDpBtzz6Sh0V-Lmem1bKucf4w01cPJxT25icHHQ"},
{"content":{"body":"tempted to break for lunch and come back.. my fear is that the calls for advancement may take more time than we think","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YqS1GiD0QBRkQwvemVCYFEY4S_tGBkdeVfU47X5ZbzA"}},"msgtype":"m.text"},"ts":1753988670840,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Rp9n61kAOCqIO0_fH-5QYTcf6eBgq9Es7JpRJUPZM5k"},
{"content":{"body":"fwiw i can't come back after lunch; i'd planned on not going late","m.mentions":{},"msgtype":"m.text"},"ts":1753988688834,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nksAdttnNQ8axIYT4l7m_RMOQyUQvsiWVAjW_pWFLk8"},
{"content":{"body":"though the ducks did win out easily over the chickens","m.mentions":{},"msgtype":"m.text"},"ts":1753988690278,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$VHZPjVDZIoa5etDu1Fh4h-83NDzzCG88LbC4dhIYWt4"},
{"content":{"body":"I am not coming back","format":"org.matrix.custom.html","formatted_body":"I am not coming back","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rp9n61kAOCqIO0_fH-5QYTcf6eBgq9Es7JpRJUPZM5k"}},"msgtype":"m.text"},"ts":1753988695947,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nRhSPT_aVl7foEeAbvZ4PYaBl2r5dXnINwsv2tBKDfo"}
]