[
{"content":{"body":"Can you explain what are the tangible implications of choosing Iterator here?","m.relates_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY","is_falling_back":true,"m.in_reply_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"Can you explain what are the tangible implications of choosing Iterator here?"},"ts":1657206270283,"senderName":"zbraniecki","senderId":"@zbraniecki:matrix.org","id":"$nMXtzBo6boLtU1L4PjQKmmeJ78kl4jBuEhROUOrTFGE"},
{"content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.<br />If you need to step over it manually, you could still use <code>Symbol.iterator</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY"}}},"ts":1657207905850,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs"},
{"content":{"body":"* I generally prefer Iterable, so that a range can be reused:\n\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\n\n\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\n\nIf you need to step over it manually, you could still use `[Symbol.iterator]()`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","m.new_content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\n\n\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\n\nIf you need to step over it manually, you could still use `[Symbol.iterator]()`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.</p>\n<p>If you need to step over it manually, you could still use <code>[Symbol.iterator]()</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657207972746,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LXlwikzCh9UA8Q03x8ssJb_Hde9zJdSUfTSPK8ACN2U"},
{"content":{"body":"* I generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","m.new_content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.<br />If you need to step over it manually, you could still use <code>Symbol.iterator</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657207973180,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$I0yJLIcliY_23nyQwgNDJFU8kIbnADDjjnJ8Hj1WYnM"},
{"content":{"body":"(and I am not very good at avoiding work when I'm supposed to be on PTO) ","msgtype":"m.text"},"ts":1657208059837,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$ZwqRrYHEKu3pntADdof4v5oL5KErLiXlUxe4k4t6a3U"},
{"content":{"body":"you can reuse it by sticking ()=> in front of it","format":"org.matrix.custom.html","formatted_body":"you can reuse it by sticking ()=&gt; in front of it","msgtype":"m.text"},"ts":1657213111616,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mDBkxhJs0etlY0lpsAbP0da44EgGRclzcFAVbBPml98"},
{"content":{"body":"That's not reuse, that's recreating it each time. It also potentially reevaluates each argument, which could have side effects/performance implications. ","format":"org.matrix.custom.html","formatted_body":"That's not reuse, that's recreating it each time. It also potentially reevaluates each argument, which could have side effects/performance implications.","msgtype":"m.text"},"ts":1657213532054,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$d7XN2GVYK01_ZyWZi7_Cn1pkmDVnXWGV0MUSCj9aAp0"},
{"content":{"body":"i.e., `const r = () => Number.range(0, f())`. Beginners could easily overlook the `f()`","format":"org.matrix.custom.html","formatted_body":"i.e., <code>const r = () =&gt; Number.range(0, f())</code>. Beginners could easily overlook the <code>f()</code>","msgtype":"m.text"},"ts":1657213655485,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LvVuTkixuCNsmLEOvH6BOq9i-Aphehz-J8HKA6TAn6I"},
{"content":{"body":"Maybe PFA could help, but it's also not something a beginner would likely reach for immediately, nor is the `() =>` trick ","format":"org.matrix.custom.html","formatted_body":"Maybe PFA could help, but it's also not something a beginner would likely reach for immediately, nor is the <code>() =&gt;</code> trick","msgtype":"m.text"},"ts":1657213748225,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$60eC7OrVGCq4MIrd9I4ZVUVLIhIt2VyGeEH-Jd0bihQ"}
]