[
{"content":{"body":"Can you explain what are the tangible implications of choosing Iterator here?","m.relates_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY","is_falling_back":true,"m.in_reply_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"Can you explain what are the tangible implications of choosing Iterator here?"},"ts":1657206270283,"senderName":"zbraniecki","senderId":"@zbraniecki:matrix.org","id":"$nMXtzBo6boLtU1L4PjQKmmeJ78kl4jBuEhROUOrTFGE"},
{"content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.<br />If you need to step over it manually, you could still use <code>Symbol.iterator</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY"}}},"ts":1657207905850,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs"},
{"content":{"body":"* I generally prefer Iterable, so that a range can be reused:\n\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\n\n\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\n\nIf you need to step over it manually, you could still use `[Symbol.iterator]()`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","m.new_content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\n\n\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\n\nIf you need to step over it manually, you could still use `[Symbol.iterator]()`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.</p>\n<p>If you need to step over it manually, you could still use <code>[Symbol.iterator]()</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657207972746,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LXlwikzCh9UA8Q03x8ssJb_Hde9zJdSUfTSPK8ACN2U"},
{"content":{"body":"* I generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","m.new_content":{"body":"> <@jackworks:matrix.org> üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )\n> \n> Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?\n\nI generally prefer Iterable, so that a range can be reused:\n```js\nconst oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n```\nIts rare that someone will manually step through an iterator rather than use `for..of` or `...`, and the latter will exhaust the iterator, making a range useless after it has been used once.\nIf you need to step over it manually, you could still use `Symbol.iterator`, so Iterable is vastly more flexible. \nThat said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.\nI'm still hoping we could someday have a standalone range/slice syntax like `a..b`, though that can (hopefully) come later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$trnWDJ5kovKv8-LzrKPPoSALzyxpclM3fBaqP-f_4KY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a><br /><p>üëÄ I want to do a temperature check on the range proposal (discussion https://github.com/tc39/proposal-Number.range/issues/17 )</p>\n<p>Do you think it should be a Iterator (1Ô∏è‚É£) or an Iterable object (üî¢)?</p></blockquote></mx-reply><p>I generally prefer Iterable, so that a range can be reused:</p>\n<pre><code class=\"language-js\">const oneToTen = Number.range(1, 10);\n// prints: 1\\n2\\n...\nfor (const x of oneToTen) console.log(x);\n// prints: ??? \nfor (const x of oneToTen) console.log(x);\n</code></pre>\n<p>Its rare that someone will manually step through an iterator rather than use <code>for..of</code> or <code>...</code>, and the latter will exhaust the iterator, making a range useless after it has been used once.<br />If you need to step over it manually, you could still use <code>Symbol.iterator</code>, so Iterable is vastly more flexible.<br />That said, the iterator helpers proposal depends on Iterator (which I still disagree with in principle), but relevant methods could be lifted to a Range as well.<br />I'm still hoping we could someday have a standalone range/slice syntax like <code>a..b</code>, though that can (hopefully) come later.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$6x1b1ltNJE-UP1xqMHA0lqDyIw43p8PL-5gGyx_rZGs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1657207973180,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$I0yJLIcliY_23nyQwgNDJFU8kIbnADDjjnJ8Hj1WYnM"},
{"content":{"body":"(and I am not very good at avoiding work when I'm supposed to be on PTO) ","msgtype":"m.text"},"ts":1657208059837,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$ZwqRrYHEKu3pntADdof4v5oL5KErLiXlUxe4k4t6a3U"},
{"content":{"body":"you can reuse it by sticking ()=> in front of it","format":"org.matrix.custom.html","formatted_body":"you can reuse it by sticking ()=&gt; in front of it","msgtype":"m.text"},"ts":1657213111616,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mDBkxhJs0etlY0lpsAbP0da44EgGRclzcFAVbBPml98"},
{"content":{"body":"That's not reuse, that's recreating it each time. It also potentially reevaluates each argument, which could have side effects/performance implications. ","format":"org.matrix.custom.html","formatted_body":"That's not reuse, that's recreating it each time. It also potentially reevaluates each argument, which could have side effects/performance implications.","msgtype":"m.text"},"ts":1657213532054,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$d7XN2GVYK01_ZyWZi7_Cn1pkmDVnXWGV0MUSCj9aAp0"},
{"content":{"body":"i.e., `const r = () => Number.range(0, f())`. Beginners could easily overlook the `f()`","format":"org.matrix.custom.html","formatted_body":"i.e., <code>const r = () =&gt; Number.range(0, f())</code>. Beginners could easily overlook the <code>f()</code>","msgtype":"m.text"},"ts":1657213655485,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$LvVuTkixuCNsmLEOvH6BOq9i-Aphehz-J8HKA6TAn6I"},
{"content":{"body":"Maybe PFA could help, but it's also not something a beginner would likely reach for immediately, nor is the `() =>` trick ","format":"org.matrix.custom.html","formatted_body":"Maybe PFA could help, but it's also not something a beginner would likely reach for immediately, nor is the <code>() =&gt;</code> trick","msgtype":"m.text"},"ts":1657213748225,"senderName":"rbuckton (OOF: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$60eC7OrVGCq4MIrd9I4ZVUVLIhIt2VyGeEH-Jd0bihQ"},
{"content":{"body":"My mental model is aligned with rbuckton (PTO: 7/5 - 7/16) - `oneToTen` should produce an iterator when used in a loop. I probably am projecting how Rust does it where `Range` implements `IntoIterator`","format":"org.matrix.custom.html","formatted_body":"My mental model is aligned with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (PTO: 7/5 - 7/16)</a> - <code>oneToTen</code> should produce an iterator when used in a loop. I probably am projecting how Rust does it where <code>Range</code> implements <code>IntoIterator</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My mental model is aligned with rbuckton (PTO: 7/5 - 7/16) - `oneToTen` should produce an iterator when used in a loop. I probably am projecting how Rust does it where `Range` implements `IntoIterator`","mimetype":"text/plain"},{"body":"My mental model is aligned with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton (PTO: 7/5 - 7/16)</a> - <code>oneToTen</code> should produce an iterator when used in a loop. I probably am projecting how Rust does it where <code>Range</code> implements <code>IntoIterator</code>","mimetype":"text/html"}]},"ts":1657214062364,"senderName":"zbraniecki","senderId":"@zbraniecki:matrix.org","id":"$ZqE0d4Ie1XuZFobW910RkBl08hqZdGkKLtSBp_ZFMYc"},
{"content":{"body":"i don't think beginners will expect to reuse it either tho.","msgtype":"m.text","org.matrix.msc1767.text":"i don't think beginners will expect to reuse it either tho."},"ts":1657214424540,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jkRgY4ato54rT88VokjC060_8pP2_LYGSFTW3xtxcZY"},
{"content":{"body":"I think beginners are more likely to reuse it than not, just as you could reuse an array, or map, or set, or typed array. This is especially true if we do ever have a range/slice syntax in the future. ","format":"org.matrix.custom.html","formatted_body":"I think beginners are more likely to reuse it than not, just as you could reuse an array, or map, or set, or typed array. This is especially true if we do ever have a range/slice syntax in the future.","msgtype":"m.text"},"ts":1657215474187,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$9z_TJE-7_mZpk9bNbVbbo85iQqdn6SCY3hqBypcBKCY"},
{"content":{"body":"I'm still of the opinion that the iterator helpers proposal has a very short-sighted view by focusing on Iterator and not Iterable, and I'd rather not repeat the mistake of leveraging the wrong level of abstraction in more places if we can potentially avoid it. That said, Iterator is probably fine for `Number.range()` on its own, but I would be strongly opposed to the same behavior for any potential Range/slice syntax in the future. ","format":"org.matrix.custom.html","formatted_body":"I'm still of the opinion that the iterator helpers proposal has a very short-sighted view by focusing on Iterator and not Iterable, and I'd rather not repeat the mistake of leveraging the wrong level of abstraction in more places if we can potentially avoid it. That said, Iterator is probably fine for <code>Number.range()</code> on its own, but I would be strongly opposed to the same behavior for any potential Range/slice syntax in the future.","msgtype":"m.text"},"ts":1657215668250,"senderName":"rbuckton (PTO: 7/5 - 7/16)","senderId":"@rbuckton:matrix.org","id":"$FGSqQ82Xf_1DU15cN41g8Txj2qQ6tdCk7sdOIXdY7Uo"},
{"content":{"body":"sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting.","msgtype":"m.text","org.matrix.msc1767.text":"sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting."},"ts":1657216638677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kWSqyVNMYa63IQixcjAaQzlGsqeB40PIazEJCl8Kazs"},
{"content":{"body":"please cover them on wednesday, when i cannot be there","msgtype":"m.text","org.matrix.msc1767.text":"please cover them on wednesday, when i cannot be there"},"ts":1657217333451,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K3mbaIIzvTpC78CvMMfWLxJH6f10fZMw4VV1SK31Dls"},
{"content":{"body":"iterable isn‚Äôt a thing, it‚Äôs a trait.","m.relates_to":{"event_id":"$FGSqQ82Xf_1DU15cN41g8Txj2qQ6tdCk7sdOIXdY7Uo","is_falling_back":true,"m.in_reply_to":{"event_id":"$FGSqQ82Xf_1DU15cN41g8Txj2qQ6tdCk7sdOIXdY7Uo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1657218759229,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wdYMNgYAbKq4VgcFBggAlQijTwmPmN6v-5WUsYUVc0Y"},
{"content":{"body":"whereas an iterator is a thing","m.relates_to":{"event_id":"$FGSqQ82Xf_1DU15cN41g8Txj2qQ6tdCk7sdOIXdY7Uo","is_falling_back":true,"m.in_reply_to":{"event_id":"$wdYMNgYAbKq4VgcFBggAlQijTwmPmN6v-5WUsYUVc0Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1657218777609,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EqjbblfojyXW7NDvmyPaX6o2-_fEqC-U53bNREgsbsA"},
{"content":{"body":"> <@bakkot:matrix.org> sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting.\n\nI will add an item on Temporal, but unfortunately it's also all dumb corner cases","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kWSqyVNMYa63IQixcjAaQzlGsqeB40PIazEJCl8Kazs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting.</blockquote></mx-reply>I will add an item on Temporal, but unfortunately it's also all dumb corner cases","m.relates_to":{"m.in_reply_to":{"event_id":"$kWSqyVNMYa63IQixcjAaQzlGsqeB40PIazEJCl8Kazs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting.\n\nI will add an item on Temporal, but unfortunately it's also all dumb corner cases","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kWSqyVNMYa63IQixcjAaQzlGsqeB40PIazEJCl8Kazs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sidebar: I am now ~half of the agenda items for the next meeting. hope everyone is prepared to talk about dumb corner cases for an entire meeting.</blockquote></mx-reply>I will add an item on Temporal, but unfortunately it's also all dumb corner cases","mimetype":"text/html"}]},"ts":1657222645846,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$Ie1IDsqYWuDJBvy3wSQ2y9-11mLPtBtH_fZyRDGY_Jg"}
]