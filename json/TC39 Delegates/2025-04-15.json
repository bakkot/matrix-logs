[
{"content":{"body":"`Object.is` is the only equality that makes any sense intuitively. the rest are just \"it matches <legacy baggage>\"","format":"org.matrix.custom.html","formatted_body":"<code>Object.is</code> is the only equality that makes any sense intuitively. the rest are just \"it matches &lt;legacy baggage&gt;\"","m.mentions":{},"msgtype":"m.text"},"ts":1744680222293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iJqq5QfcSOte1UlN5OG8uz0OcR6IYrrY16N8zebgRow"},
{"content":{"body":"you say this but in fact I am pretty sure very nearly everyone would be surprised by a notion of equality in which 0 â‰  -0","m.mentions":{},"msgtype":"m.text"},"ts":1744680488828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YZ3exaLovK4myKKYnfBOL_WGq3sSM8uGvsujsOJ2iOE"},
{"content":{"body":"so, no, I think you just straightforwardly wrong about that unless your claim is about only your own intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680507541,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-i_NOUzWhQtdmuPTgpETMNBav7vdlvlEahEFdIsspKc"},
{"content":{"body":"in which case fine whatever but we should not design the language around your intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680522714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ACiKwsxgqd3Bqi9lJYTjB55sXdghZL2ClAATioLhbfg"},
{"content":{"body":"i think everyone's assumption there is because of `==` and `===` and `SameValueZero`'s behavior. `-0` and `0` are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","format":"org.matrix.custom.html","formatted_body":"i think everyone's assumption there is because of <code>==</code> and <code>===</code> and <code>SameValueZero</code>'s behavior. <code>-0</code> and <code>0</code> are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","m.mentions":{},"msgtype":"m.text"},"ts":1744683034060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V5r7jShRJVCpCVkf9eK3bhQVCpPy1IWngaOHIPVysOY"},
{"content":{"body":"tbf, without that baggage there'd be no -0 to begin with","m.mentions":{},"msgtype":"m.text"},"ts":1744683047602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$exyh197VyHwfLK7XjiUUWr4NlymBP5rDn6Jd0w-h9II"},
{"content":{"body":"the expectation isn't because of `0 === -0`, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","format":"org.matrix.custom.html","formatted_body":"the expectation isn't because of <code>0 === -0</code>, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","m.mentions":{},"msgtype":"m.text"},"ts":1744683964101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5p_hOkFPHNv9eRM4oZWXW3FLKdjtlx57beh0vL3DGLw"},
{"content":{"body":"IEEE requires that `0 === -0` as a consequence of that, not the other way around","format":"org.matrix.custom.html","formatted_body":"IEEE requires that <code>0 === -0</code> as a consequence of that, not the other way around","m.mentions":{},"msgtype":"m.text"},"ts":1744683991125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2lEq0LDLTr8HegNE48F6eJGFhS5N5mhehhu-cPxpUc0"},
{"content":{"body":"the result is that almost no one needs to know about -0 because it behaves identically to 0 except in a few very obscure circumstances","m.mentions":{},"msgtype":"m.text"},"ts":1744684011677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v6UDb7AXW0N4v05XvnyyR4lfsNnJPsORQQEfuKOnmDE"},
{"content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"ts":1744684058363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA"},
{"content":{"body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"m.new_content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744684103559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v4052DTWk589taENI178PnJ0xhh4UrO9LnVWA8JNx-M"},
{"content":{"body":"I would counter that only people who are working with floats should have to think about (and make special accommodations for) the weirdness of floats. People writing generic libraries or using foundational built-in data structures should be able to reason algebraically. It's not worth abandoning that to smooth out the sharp edges of floats for people who arguably will need to learn about them eventually anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1744685167331,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OBRPEGz0K2I_YwvDosopEb-qCD7wAJyCqxD3a1fJ0N0"},
{"content":{"body":"there are a lot more people who are working with numbers in javascript than there are people writing generic libraries which need to distinguish between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685696771,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uyq_6XB8HiXYbSYscoW4rQRM8QelZiUZUbndByEQErU"},
{"content":{"body":"people who are using foundational built-in data structures _can_ reason algebraically as long as they don't care about the difference between -0 and 0","format":"org.matrix.custom.html","formatted_body":"people who are using foundational built-in data structures <em>can</em> reason algebraically as long as they don't care about the difference between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685748827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$neag4y2bRtPdIwdPCL_5rf1z09u6Khp3Y6m2Z8zmQfY"},
{"content":{"body":"people who do care about that difference have to care anyway","m.mentions":{},"msgtype":"m.text"},"ts":1744685758093,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EOlPFyJQI1ewNrcg_BNuR-LIJg_D2A_2qcd09ChLj0A"},
{"content":{"body":"in practice what happens is that the people writing generic libraries or using these data structures do not distinguish between 0 and -0 and this works out for everyone","m.mentions":{},"msgtype":"m.text"},"ts":1744685844873,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dnN1S3nnTux-eNk5CdiLiLephzyA_mTvY8k6F0bmIgk"},
{"content":{"body":"I suspect you could on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"ts":1744685937238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ"},
{"content":{"body":"possibly on zero hands","m.mentions":{},"msgtype":"m.text"},"ts":1744685939761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"},
{"content":{"body":"* I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"m.new_content":{"body":"I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744685960087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bEAsAfLBtM-a-RY1Gy0trR2wwJG6YoFj1NcPDM-lRfk"},
{"content":{"body":"Negative zero hands!","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"}},"msgtype":"m.text"},"ts":1744686772784,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs"},
{"content":{"body":"* Negative zero hands! Which is very different, of course.","m.mentions":{},"m.new_content":{"body":"Negative zero hands! Which is very different, of course.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744686794652,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$OEGyC8PibPY_dtEF696eht9yx2T4GquDQA7ROU9qo18"},
{"content":{"body":"For what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work. \n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript... \n\nThis of course was a mere convenience sample. Take it for what itâ€™s worth. ","format":"org.matrix.custom.html","formatted_body":"<p>For what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what itâ€™s worth.</p>","msgtype":"m.text"},"ts":1744692298617,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fTtzBzSqhTc0N2pLXM987U5MgSpQ4LG40Yf7YsOtD5c"},
{"content":{"body":"> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit\n\nFor what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what itâ€™s worth.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit</blockquote></mx-reply><p>For what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what itâ€™s worth.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw"}},"msgtype":"m.text"},"ts":1744692378648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7atTeYJtT85EuP9HjoIm3GEzsCHb0gXewoKt3RjziiY"},
{"content":{"body":"> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit\n\n * Regarding Kevinâ€™s gamedev example and game developersâ€™ domain knowledge of -0:\n\nI checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what itâ€™s worth.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit</blockquote></mx-reply> * <p>Regarding Kevinâ€™s gamedev example and game developersâ€™ domain knowledge of -0:</p>\n<p>I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what itâ€™s worth.</p>","m.new_content":{"body":"Regarding Kevinâ€™s gamedev example and game developersâ€™ domain knowledge of -0:\n\nI checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what itâ€™s worth.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding Kevinâ€™s gamedev example and game developersâ€™ domain knowledge of -0:</p>\n<p>I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what itâ€™s worth.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$7atTeYJtT85EuP9HjoIm3GEzsCHb0gXewoKt3RjziiY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744693063171,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vHlMFNOrg7ms7rOF9CaW3noIyMnJnaLXI8LbDwiKUUQ"},
{"content":{"body":"@room starting in 5 minutes","m.mentions":{"room":true},"msgtype":"m.text"},"ts":1744725289657,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$yhMbocZeTgPqiT1ubbJVxBLF5uRNpkDxGgrkr4tsCkQ"},
{"content":{"body":"hang on, can't we store the pre-transaction state in locals and roll it all back in the catch?","m.mentions":{},"msgtype":"m.text"},"ts":1744727185126,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tTaFqfyDHU-BgrHyK7IkxVeugzUXojszSEnbUw9eEPM"},
{"content":{"body":"is the issue that we may partially roll back because of another OOM?","m.mentions":{},"msgtype":"m.text"},"ts":1744727202978,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pxsYZAe-V6clw3_V-ktCEKZxQsQPiNjKNRqpmy5hipk"},
{"content":{"body":"Yes in this simple case, but it's not always straightforward to store all state to restore it","m.mentions":{},"msgtype":"m.text"},"ts":1744727226160,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RaJPRKFmhUvKoQAxeBINquNb9pCvHxgSFD32qwTLfnA"},
{"content":{"body":"The point was that it's not always obvious where OOM can happen, and an undue burden to be defensive about them","m.mentions":{},"msgtype":"m.text"},"ts":1744727287276,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pdUZsX1BujGs4veg0b072mKkz8GN5G4wifyjV60KhjU"},
{"content":{"body":"The combinations of backup values would grow incredibly fast in real programs' complexity ","msgtype":"m.text"},"ts":1744727416295,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$NW2_qjjKT78TtmGeON-7zqfTPwetBcvoWdscNm1CCkg"},
{"content":{"body":"I imagine Chrome filed that WHATWG issue because it *does* implement OOM-fails-fast","format":"org.matrix.custom.html","formatted_body":"I imagine Chrome filed that WHATWG issue because it <em>does</em> implement OOM-fails-fast","m.mentions":{},"msgtype":"m.text"},"ts":1744727450565,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oSkj478mRGmyIEcSmxQ5g0cqb5ZY0ujGjSFmNg6D6bY"},
{"content":{"body":"whether an OOM is thrown depends on the API","m.mentions":{},"msgtype":"m.text"},"ts":1744727511071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qI39QNrfJ15nAagaPgEx25yddx4zdorn1K_1XxFBWrM"},
{"content":{"body":"oh right","m.mentions":{},"msgtype":"m.text"},"ts":1744727520275,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MepvfX0Wyyt0rBgRTsjZZuiegbxG5y9RFFzUuz07qBo"},
{"content":{"body":"like, if you try to make a string that's too big, that probably throws a RangeError even if there's no explicit RangeError check (like in ArrayBuffer allocation)","m.mentions":{},"msgtype":"m.text"},"ts":1744727530962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D47Awqg7IxM5WFX_yetmwJan6EqR3ED7VyF02QNbm60"},
{"content":{"body":"but almost all \"small\" allocation OOMs crash","m.mentions":{},"msgtype":"m.text"},"ts":1744727539764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$U1r3K4wFqF32hlAWCXbiCXVHR0v8OaU9lsruWMPfXS8"},
{"content":{"body":"some of it has been added previously because people repeatedly ask","m.mentions":{},"msgtype":"m.text"},"ts":1744727573552,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Uoxd8mSxSdWKiXw62dwyP9slFm5lm-N6UHOp7iv_404"},
{"content":{"body":"you mean, cases where it throws rather than crashing?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Uoxd8mSxSdWKiXw62dwyP9slFm5lm-N6UHOp7iv_404"}},"msgtype":"m.text"},"ts":1744727588966,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$10cqeMIVinrr_ZzGHLUnOUMg0Q7HHFbwGQ6AQlcV3Ao"},
{"content":{"body":"would it be possible/desirable to implement the original OOM-fails-fast guarantee? Do we have evidence of web-incompatibility?","m.mentions":{},"msgtype":"m.text"},"ts":1744727591216,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gpK3zekcNoOSX_qp8BAdomJPme891FWtgOQaG-CW9uY"},
{"content":{"body":"yeah, where they ask for it to throw so they can catch it","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$10cqeMIVinrr_ZzGHLUnOUMg0Q7HHFbwGQ6AQlcV3Ao"}},"msgtype":"m.text"},"ts":1744727611695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$so3k44MjH3mROFs38ZoUI2Ko1jws2mIDq0RMPqrOM-w"},
{"content":{"body":"i think making out-of-stack crash is like incompatible","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gpK3zekcNoOSX_qp8BAdomJPme891FWtgOQaG-CW9uY"}},"msgtype":"m.text"},"ts":1744727662611,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU"},
{"content":{"body":"i don't think it is desirable to _spec_ original OOM-fail-fast","format":"org.matrix.custom.html","formatted_body":"i don't think it is desirable to <em>spec</em> original OOM-fail-fast","m.mentions":{},"msgtype":"m.text"},"ts":1744727695578,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cxaxDbzh4HTeZQXs1aKPm5KndTCgpMeYI_IZCDqD_Eg"},
{"content":{"body":"* i think making out-of-stack crash is likely incompatible","m.mentions":{},"m.new_content":{"body":"i think making out-of-stack crash is likely incompatible","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744727717519,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lHN4envg-0GHOS13Q0nxZjDXVg4BQ3bbcxUsQK7Aau0"},
{"content":{"body":"transcriptionist notes are excellent today","m.mentions":{},"msgtype":"m.text"},"ts":1744727743600,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aBQCmwI2f4OkyQax_18v4vnnmCqfJHkSH5fwAwDkcKU"},
{"content":{"body":"I'm not convinced that the current host hook requirement doesn't permit never returning","m.mentions":{},"msgtype":"m.text"},"ts":1744727751096,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sUfvRdsjXFRaB50smA5WKS7GE9WJjSeMX0e6ppSc4hU"},
{"content":{"body":"thanks for clarifying, Shu","m.mentions":{},"msgtype":"m.text"},"ts":1744727754935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ia0sJSUEEBhsLN6EX5JYoSpTCUpAE1hroi8Ny1NfhBU"},
{"content":{"body":"to be clear i think it is useless to have a host hook, and actively harmful to ultimately expose that hook to user code (if i understood what mark's long term plans were earlier in the proposal)","m.mentions":{},"msgtype":"m.text"},"ts":1744727788792,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AnBUKONYpvfxWJJPSyeFZZfLgcyiWveeuIFRppAJjDk"},
{"content":{"body":"why is it any more likely to be in ecosystem code than `for(;;);`?","format":"org.matrix.custom.html","formatted_body":"why is it any more likely to be in ecosystem code than <code data-md=\"`\">for(;;);</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1744728437585,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tihACsZNRbbFX21AYYj5g_EMdDRpSAdVjDjcX587W58"},
{"content":{"body":"\"inducing a host to panic\" sounds like exploiting a bug to me","m.mentions":{},"msgtype":"m.text"},"ts":1744728813892,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Tm7kF1RKfhEFU4OnyAMfXS1ZTJkW9U6Qd4OemQfPwts"},
{"content":{"body":"there is no sanctioned way to induce a host to panic","m.mentions":{},"msgtype":"m.text"},"ts":1744728821754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yQXrAELB6NlLMJHV3wUjN8n9rsT48mO2oMj4OCK7g_Q"},
{"content":{"body":"One strong difference in the browser between infinite loops and panic is infinite loop freezes the UI and panic would inform the user.\nThe host hook gives the hook power to decide (or even ask the user) how to react.","msgtype":"m.text"},"ts":1744728905282,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$p0D6bZ0qgeJZIUXurASc55K5n_1Qf0gM6VjXhSrSS74"},
{"content":{"body":"lots of people put panics in languages which have them and ~none of them write defensive infinite loops","m.mentions":{},"msgtype":"m.text"},"ts":1744728922292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3ykV4GMIoMPdhIkjkGau7zsOEuNkECGJ6mkNvZTxumk"},
{"content":{"body":"(we once wrote a defensive I finite loop at MetaMask. Long story)","msgtype":"m.text"},"ts":1744728957569,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$QSKnNH4ER-79tK-OwlMAobf7Bt7te13AW5p_XZq9K68"},
{"content":{"body":"* (we once wrote a defensive infinite loop at MetaMask. Long story)","m.new_content":{"body":"(we once wrote a defensive infinite loop at MetaMask. Long story)","msgtype":"m.text"},"m.relates_to":{"event_id":"$QSKnNH4ER-79tK-OwlMAobf7Bt7te13AW5p_XZq9K68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744728965298,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$MVJeo984KRSFYhfjuQXaNM0yykjpWYEbFFB0dBSu5oE"},
{"content":{"body":"what we're doing right now does not violate the JS spec, what?","m.mentions":{},"msgtype":"m.text"},"ts":1744729159483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HnYJiN7UEWuM6NB9Lmc6_b1jsnfEFdPWJma8lNCu7sw"},
{"content":{"body":"(In the mid-aughts, Google prefaced every JSON HTTP response with `while(true)` to defend against XSS. For all I know, they still do.)","format":"org.matrix.custom.html","formatted_body":"(In the mid-aughts, Google prefaced every JSON HTTP response with <code>while(true)</code> to defend against XSS. For all I know, they still do.)","m.mentions":{},"msgtype":"m.text"},"ts":1744729193974,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$HJik26JfFxkrDdatm1LDs34aSNF1tbSSsDWv6OEnIOA"},
{"content":{"body":"I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is legal per the JS spec","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HnYJiN7UEWuM6NB9Lmc6_b1jsnfEFdPWJma8lNCu7sw"}},"msgtype":"m.text"},"ts":1744729230099,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tlYGbzQ-obqZ23avExvw5EAYMnHdnjzTCH3qp6Lr4UM"},
{"content":{"body":"* I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is not legal per the JS spec","m.mentions":{},"m.new_content":{"body":"I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is not legal per the JS spec","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tlYGbzQ-obqZ23avExvw5EAYMnHdnjzTCH3qp6Lr4UM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744729337536,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FKY0PpaApYarxg7eRDzAeXOv4M7Gq2gxw4SDbgwWFLQ"},
{"content":{"body":"Making stack overflow crash is definitely not compatible. At one point SM increased our stack limit, and we saw performance reports on games websites using some weird obfuscator that deliberately overflowed the stack as part of its attempt to make itself hard to debug, because it was taking longer to hit the limit.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU"}},"msgtype":"m.text"},"ts":1744729337870,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$NZ4KbQysBRkSA2th5m9WsgRGZQS26VJr1egs6XGEcTQ"},
{"content":{"body":"what i was responding to was mark referred to the current OOM behavior in browsers as \"violating the spec\"","m.mentions":{},"msgtype":"m.text"},"ts":1744729348890,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZihHIejc5rRDRorrE9qxMQEJxJAz9Ys5NCQ2dfm9cQU"},
{"content":{"body":"how does aborting help facilitate transactions?","m.mentions":{},"msgtype":"m.text"},"ts":1744729475907,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1txKntRrjiZMy5FntQPEAATAZCzaPzBhfB73i7f5Otk"},
{"content":{"body":"or does it not become an abort, it becomes a rollback to some previously tagged point?","m.mentions":{},"msgtype":"m.text"},"ts":1744729499384,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$M8PsxhcUOkHqx9Fve6bfG_CMJriCGApnQwqgVAgeO5M"},
{"content":{"body":"In our case, our supervisor worker embargoes all effects from the child worker and commits them once the worker completes its operation","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1txKntRrjiZMy5FntQPEAATAZCzaPzBhfB73i7f5Otk"}},"msgtype":"m.text"},"ts":1744729542429,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$6THos3bS46V03l8xjJP1LN72LCZe7eqa3azKEouNblE"},
{"content":{"body":"It currently uses an actual DB transaction to accomplish that, but that's an implementation choice","m.mentions":{},"msgtype":"m.text"},"ts":1744729593338,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oL8DXxlha8BJa9qqszHvkKLha2hv8A44fRDNqt7V3KY"},
{"content":{"body":"ah like Golem","m.mentions":{},"msgtype":"m.text"},"ts":1744729625225,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$o55HyEE-S7TxgKRtAF6QbY5LRf7wjsmJQhMym57coKY"},
{"content":{"body":"(https://www.golem.cloud/)","m.mentions":{},"msgtype":"m.text"},"ts":1744729680640,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UNSYLrBz3tWsA7jNRxKqXtpVm99XLLCHnVf8lHwfnjg"},
{"content":{"body":"so `self.close()` on dedicated workers doesn't kill the worker, it just prevents new tasks from being enqueued onto the event loop, but you could signal to the parent to kill the worker, and then call it","format":"org.matrix.custom.html","formatted_body":"so <code>self.close()</code> on dedicated workers doesn't kill the worker, it just prevents new tasks from being enqueued onto the event loop, but you could signal to the parent to kill the worker, and then call it","m.mentions":{"user_ids":["@mhofman:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6THos3bS46V03l8xjJP1LN72LCZe7eqa3azKEouNblE"}},"msgtype":"m.text"},"ts":1744729682309,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$8N6koDANcBmQrUgFmBiyaubuWlVtjOF3pH1R7n00FlA"},
{"content":{"body":"(the abortable unit is obviously the worker agent as we don't use SAB)","m.mentions":{},"msgtype":"m.text"},"ts":1744729711949,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$PO8gNrOLmLHXIns4i4_0tWUUTUwpPp9OQBHqTIzVH00"},
{"content":{"body":"Right that's great for implementing `panic`. It doesn't help for OOM","format":"org.matrix.custom.html","formatted_body":"Right that's great for implementing <code>panic</code>. It doesn't help for OOM","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8N6koDANcBmQrUgFmBiyaubuWlVtjOF3pH1R7n00FlA"}},"msgtype":"m.text"},"ts":1744729808691,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dAEzBYoIvg-kh4MlN7Za87aai47HV6KwpSvRBcY--ck"}
]