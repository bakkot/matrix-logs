[
{"content":{"body":"`Object.is` is the only equality that makes any sense intuitively. the rest are just \"it matches <legacy baggage>\"","format":"org.matrix.custom.html","formatted_body":"<code>Object.is</code> is the only equality that makes any sense intuitively. the rest are just \"it matches &lt;legacy baggage&gt;\"","m.mentions":{},"msgtype":"m.text"},"ts":1744680222293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iJqq5QfcSOte1UlN5OG8uz0OcR6IYrrY16N8zebgRow"},
{"content":{"body":"you say this but in fact I am pretty sure very nearly everyone would be surprised by a notion of equality in which 0 ≠ -0","m.mentions":{},"msgtype":"m.text"},"ts":1744680488828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YZ3exaLovK4myKKYnfBOL_WGq3sSM8uGvsujsOJ2iOE"},
{"content":{"body":"so, no, I think you just straightforwardly wrong about that unless your claim is about only your own intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680507541,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-i_NOUzWhQtdmuPTgpETMNBav7vdlvlEahEFdIsspKc"},
{"content":{"body":"in which case fine whatever but we should not design the language around your intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680522714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ACiKwsxgqd3Bqi9lJYTjB55sXdghZL2ClAATioLhbfg"},
{"content":{"body":"i think everyone's assumption there is because of `==` and `===` and `SameValueZero`'s behavior. `-0` and `0` are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","format":"org.matrix.custom.html","formatted_body":"i think everyone's assumption there is because of <code>==</code> and <code>===</code> and <code>SameValueZero</code>'s behavior. <code>-0</code> and <code>0</code> are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","m.mentions":{},"msgtype":"m.text"},"ts":1744683034060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V5r7jShRJVCpCVkf9eK3bhQVCpPy1IWngaOHIPVysOY"},
{"content":{"body":"tbf, without that baggage there'd be no -0 to begin with","m.mentions":{},"msgtype":"m.text"},"ts":1744683047602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$exyh197VyHwfLK7XjiUUWr4NlymBP5rDn6Jd0w-h9II"},
{"content":{"body":"the expectation isn't because of `0 === -0`, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","format":"org.matrix.custom.html","formatted_body":"the expectation isn't because of <code>0 === -0</code>, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","m.mentions":{},"msgtype":"m.text"},"ts":1744683964101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5p_hOkFPHNv9eRM4oZWXW3FLKdjtlx57beh0vL3DGLw"},
{"content":{"body":"IEEE requires that `0 === -0` as a consequence of that, not the other way around","format":"org.matrix.custom.html","formatted_body":"IEEE requires that <code>0 === -0</code> as a consequence of that, not the other way around","m.mentions":{},"msgtype":"m.text"},"ts":1744683991125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2lEq0LDLTr8HegNE48F6eJGFhS5N5mhehhu-cPxpUc0"},
{"content":{"body":"the result is that almost no one needs to know about -0 because it behaves identically to 0 except in a few very obscure circumstances","m.mentions":{},"msgtype":"m.text"},"ts":1744684011677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v6UDb7AXW0N4v05XvnyyR4lfsNnJPsORQQEfuKOnmDE"},
{"content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"ts":1744684058363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA"},
{"content":{"body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"m.new_content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744684103559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v4052DTWk589taENI178PnJ0xhh4UrO9LnVWA8JNx-M"},
{"content":{"body":"I would counter that only people who are working with floats should have to think about (and make special accommodations for) the weirdness of floats. People writing generic libraries or using foundational built-in data structures should be able to reason algebraically. It's not worth abandoning that to smooth out the sharp edges of floats for people who arguably will need to learn about them eventually anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1744685167331,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OBRPEGz0K2I_YwvDosopEb-qCD7wAJyCqxD3a1fJ0N0"},
{"content":{"body":"there are a lot more people who are working with numbers in javascript than there are people writing generic libraries which need to distinguish between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685696771,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uyq_6XB8HiXYbSYscoW4rQRM8QelZiUZUbndByEQErU"},
{"content":{"body":"people who are using foundational built-in data structures _can_ reason algebraically as long as they don't care about the difference between -0 and 0","format":"org.matrix.custom.html","formatted_body":"people who are using foundational built-in data structures <em>can</em> reason algebraically as long as they don't care about the difference between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685748827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$neag4y2bRtPdIwdPCL_5rf1z09u6Khp3Y6m2Z8zmQfY"},
{"content":{"body":"people who do care about that difference have to care anyway","m.mentions":{},"msgtype":"m.text"},"ts":1744685758093,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EOlPFyJQI1ewNrcg_BNuR-LIJg_D2A_2qcd09ChLj0A"},
{"content":{"body":"in practice what happens is that the people writing generic libraries or using these data structures do not distinguish between 0 and -0 and this works out for everyone","m.mentions":{},"msgtype":"m.text"},"ts":1744685844873,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dnN1S3nnTux-eNk5CdiLiLephzyA_mTvY8k6F0bmIgk"},
{"content":{"body":"I suspect you could on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"ts":1744685937238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ"},
{"content":{"body":"possibly on zero hands","m.mentions":{},"msgtype":"m.text"},"ts":1744685939761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"},
{"content":{"body":"* I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"m.new_content":{"body":"I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744685960087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bEAsAfLBtM-a-RY1Gy0trR2wwJG6YoFj1NcPDM-lRfk"},
{"content":{"body":"Negative zero hands!","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"}},"msgtype":"m.text"},"ts":1744686772784,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs"},
{"content":{"body":"* Negative zero hands! Which is very different, of course.","m.mentions":{},"m.new_content":{"body":"Negative zero hands! Which is very different, of course.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744686794652,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$OEGyC8PibPY_dtEF696eht9yx2T4GquDQA7ROU9qo18"},
{"content":{"body":"For what it’s worth, I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work. \n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript... \n\nThis of course was a mere convenience sample. Take it for what it’s worth. ","format":"org.matrix.custom.html","formatted_body":"<p>For what it’s worth, I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what it’s worth.</p>","msgtype":"m.text"},"ts":1744692298617,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fTtzBzSqhTc0N2pLXM987U5MgSpQ4LG40Yf7YsOtD5c"},
{"content":{"body":"> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit\n\nFor what it’s worth, I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what it’s worth.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit</blockquote></mx-reply><p>For what it’s worth, I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what it’s worth.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw"}},"msgtype":"m.text"},"ts":1744692378648,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$7atTeYJtT85EuP9HjoIm3GEzsCHb0gXewoKt3RjziiY"},
{"content":{"body":"> <@michaelficarra:matrix.org> so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit\n\n * Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:\n\nI checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what it’s worth.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MzVFoCEymD9GxDwAtzw55le6VzvY3iYaJjeJVDuJJNw\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>so in Kevin's example, that would be a game developer who is using floats knowing that floats have a sign bit</blockquote></mx-reply> * <p>Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:</p>\n<p>I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what it’s worth.</p>","m.new_content":{"body":"Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:\n\nI checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what it’s worth.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:</p>\n<p>I checked today with a friend in game dev—some who works on physic engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what it’s worth.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$7atTeYJtT85EuP9HjoIm3GEzsCHb0gXewoKt3RjziiY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744693063171,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vHlMFNOrg7ms7rOF9CaW3noIyMnJnaLXI8LbDwiKUUQ"},
{"content":{"body":"@room starting in 5 minutes","m.mentions":{"room":true},"msgtype":"m.text"},"ts":1744725289657,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$yhMbocZeTgPqiT1ubbJVxBLF5uRNpkDxGgrkr4tsCkQ"},
{"content":{"body":"hang on, can't we store the pre-transaction state in locals and roll it all back in the catch?","m.mentions":{},"msgtype":"m.text"},"ts":1744727185126,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tTaFqfyDHU-BgrHyK7IkxVeugzUXojszSEnbUw9eEPM"},
{"content":{"body":"is the issue that we may partially roll back because of another OOM?","m.mentions":{},"msgtype":"m.text"},"ts":1744727202978,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pxsYZAe-V6clw3_V-ktCEKZxQsQPiNjKNRqpmy5hipk"},
{"content":{"body":"Yes in this simple case, but it's not always straightforward to store all state to restore it","m.mentions":{},"msgtype":"m.text"},"ts":1744727226160,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RaJPRKFmhUvKoQAxeBINquNb9pCvHxgSFD32qwTLfnA"},
{"content":{"body":"The point was that it's not always obvious where OOM can happen, and an undue burden to be defensive about them","m.mentions":{},"msgtype":"m.text"},"ts":1744727287276,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pdUZsX1BujGs4veg0b072mKkz8GN5G4wifyjV60KhjU"},
{"content":{"body":"The combinations of backup values would grow incredibly fast in real programs' complexity ","msgtype":"m.text"},"ts":1744727416295,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$NW2_qjjKT78TtmGeON-7zqfTPwetBcvoWdscNm1CCkg"},
{"content":{"body":"I imagine Chrome filed that WHATWG issue because it *does* implement OOM-fails-fast","format":"org.matrix.custom.html","formatted_body":"I imagine Chrome filed that WHATWG issue because it <em>does</em> implement OOM-fails-fast","m.mentions":{},"msgtype":"m.text"},"ts":1744727450565,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oSkj478mRGmyIEcSmxQ5g0cqb5ZY0ujGjSFmNg6D6bY"},
{"content":{"body":"whether an OOM is thrown depends on the API","m.mentions":{},"msgtype":"m.text"},"ts":1744727511071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qI39QNrfJ15nAagaPgEx25yddx4zdorn1K_1XxFBWrM"},
{"content":{"body":"oh right","m.mentions":{},"msgtype":"m.text"},"ts":1744727520275,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MepvfX0Wyyt0rBgRTsjZZuiegbxG5y9RFFzUuz07qBo"},
{"content":{"body":"like, if you try to make a string that's too big, that probably throws a RangeError even if there's no explicit RangeError check (like in ArrayBuffer allocation)","m.mentions":{},"msgtype":"m.text"},"ts":1744727530962,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$D47Awqg7IxM5WFX_yetmwJan6EqR3ED7VyF02QNbm60"},
{"content":{"body":"but almost all \"small\" allocation OOMs crash","m.mentions":{},"msgtype":"m.text"},"ts":1744727539764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$U1r3K4wFqF32hlAWCXbiCXVHR0v8OaU9lsruWMPfXS8"},
{"content":{"body":"some of it has been added previously because people repeatedly ask","m.mentions":{},"msgtype":"m.text"},"ts":1744727573552,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Uoxd8mSxSdWKiXw62dwyP9slFm5lm-N6UHOp7iv_404"},
{"content":{"body":"you mean, cases where it throws rather than crashing?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Uoxd8mSxSdWKiXw62dwyP9slFm5lm-N6UHOp7iv_404"}},"msgtype":"m.text"},"ts":1744727588966,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$10cqeMIVinrr_ZzGHLUnOUMg0Q7HHFbwGQ6AQlcV3Ao"},
{"content":{"body":"would it be possible/desirable to implement the original OOM-fails-fast guarantee? Do we have evidence of web-incompatibility?","m.mentions":{},"msgtype":"m.text"},"ts":1744727591216,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gpK3zekcNoOSX_qp8BAdomJPme891FWtgOQaG-CW9uY"},
{"content":{"body":"yeah, where they ask for it to throw so they can catch it","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$10cqeMIVinrr_ZzGHLUnOUMg0Q7HHFbwGQ6AQlcV3Ao"}},"msgtype":"m.text"},"ts":1744727611695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$so3k44MjH3mROFs38ZoUI2Ko1jws2mIDq0RMPqrOM-w"},
{"content":{"body":"i think making out-of-stack crash is like incompatible","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gpK3zekcNoOSX_qp8BAdomJPme891FWtgOQaG-CW9uY"}},"msgtype":"m.text"},"ts":1744727662611,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU"},
{"content":{"body":"i don't think it is desirable to _spec_ original OOM-fail-fast","format":"org.matrix.custom.html","formatted_body":"i don't think it is desirable to <em>spec</em> original OOM-fail-fast","m.mentions":{},"msgtype":"m.text"},"ts":1744727695578,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cxaxDbzh4HTeZQXs1aKPm5KndTCgpMeYI_IZCDqD_Eg"},
{"content":{"body":"* i think making out-of-stack crash is likely incompatible","m.mentions":{},"m.new_content":{"body":"i think making out-of-stack crash is likely incompatible","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744727717519,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lHN4envg-0GHOS13Q0nxZjDXVg4BQ3bbcxUsQK7Aau0"},
{"content":{"body":"transcriptionist notes are excellent today","m.mentions":{},"msgtype":"m.text"},"ts":1744727743600,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aBQCmwI2f4OkyQax_18v4vnnmCqfJHkSH5fwAwDkcKU"},
{"content":{"body":"I'm not convinced that the current host hook requirement doesn't permit never returning","m.mentions":{},"msgtype":"m.text"},"ts":1744727751096,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sUfvRdsjXFRaB50smA5WKS7GE9WJjSeMX0e6ppSc4hU"},
{"content":{"body":"thanks for clarifying, Shu","m.mentions":{},"msgtype":"m.text"},"ts":1744727754935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ia0sJSUEEBhsLN6EX5JYoSpTCUpAE1hroi8Ny1NfhBU"},
{"content":{"body":"to be clear i think it is useless to have a host hook, and actively harmful to ultimately expose that hook to user code (if i understood what mark's long term plans were earlier in the proposal)","m.mentions":{},"msgtype":"m.text"},"ts":1744727788792,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AnBUKONYpvfxWJJPSyeFZZfLgcyiWveeuIFRppAJjDk"},
{"content":{"body":"why is it any more likely to be in ecosystem code than `for(;;);`?","format":"org.matrix.custom.html","formatted_body":"why is it any more likely to be in ecosystem code than <code data-md=\"`\">for(;;);</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1744728437585,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tihACsZNRbbFX21AYYj5g_EMdDRpSAdVjDjcX587W58"},
{"content":{"body":"\"inducing a host to panic\" sounds like exploiting a bug to me","m.mentions":{},"msgtype":"m.text"},"ts":1744728813892,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Tm7kF1RKfhEFU4OnyAMfXS1ZTJkW9U6Qd4OemQfPwts"},
{"content":{"body":"there is no sanctioned way to induce a host to panic","m.mentions":{},"msgtype":"m.text"},"ts":1744728821754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yQXrAELB6NlLMJHV3wUjN8n9rsT48mO2oMj4OCK7g_Q"},
{"content":{"body":"One strong difference in the browser between infinite loops and panic is infinite loop freezes the UI and panic would inform the user.\nThe host hook gives the hook power to decide (or even ask the user) how to react.","msgtype":"m.text"},"ts":1744728905282,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$p0D6bZ0qgeJZIUXurASc55K5n_1Qf0gM6VjXhSrSS74"},
{"content":{"body":"lots of people put panics in languages which have them and ~none of them write defensive infinite loops","m.mentions":{},"msgtype":"m.text"},"ts":1744728922292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3ykV4GMIoMPdhIkjkGau7zsOEuNkECGJ6mkNvZTxumk"},
{"content":{"body":"(we once wrote a defensive I finite loop at MetaMask. Long story)","msgtype":"m.text"},"ts":1744728957569,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$QSKnNH4ER-79tK-OwlMAobf7Bt7te13AW5p_XZq9K68"},
{"content":{"body":"* (we once wrote a defensive infinite loop at MetaMask. Long story)","m.new_content":{"body":"(we once wrote a defensive infinite loop at MetaMask. Long story)","msgtype":"m.text"},"m.relates_to":{"event_id":"$QSKnNH4ER-79tK-OwlMAobf7Bt7te13AW5p_XZq9K68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744728965298,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$MVJeo984KRSFYhfjuQXaNM0yykjpWYEbFFB0dBSu5oE"},
{"content":{"body":"what we're doing right now does not violate the JS spec, what?","m.mentions":{},"msgtype":"m.text"},"ts":1744729159483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HnYJiN7UEWuM6NB9Lmc6_b1jsnfEFdPWJma8lNCu7sw"},
{"content":{"body":"(In the mid-aughts, Google prefaced every JSON HTTP response with `while(true)` to defend against XSS. For all I know, they still do.)","format":"org.matrix.custom.html","formatted_body":"(In the mid-aughts, Google prefaced every JSON HTTP response with <code>while(true)</code> to defend against XSS. For all I know, they still do.)","m.mentions":{},"msgtype":"m.text"},"ts":1744729193974,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$HJik26JfFxkrDdatm1LDs34aSNF1tbSSsDWv6OEnIOA"},
{"content":{"body":"I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is legal per the JS spec","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HnYJiN7UEWuM6NB9Lmc6_b1jsnfEFdPWJma8lNCu7sw"}},"msgtype":"m.text"},"ts":1744729230099,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tlYGbzQ-obqZ23avExvw5EAYMnHdnjzTCH3qp6Lr4UM"},
{"content":{"body":"* I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is not legal per the JS spec","m.mentions":{},"m.new_content":{"body":"I think Mark is arguing that stopping a script execution through any other means than the stack emptying because the execution finished is not legal per the JS spec","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tlYGbzQ-obqZ23avExvw5EAYMnHdnjzTCH3qp6Lr4UM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744729337536,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FKY0PpaApYarxg7eRDzAeXOv4M7Gq2gxw4SDbgwWFLQ"},
{"content":{"body":"Making stack overflow crash is definitely not compatible. At one point SM increased our stack limit, and we saw performance reports on games websites using some weird obfuscator that deliberately overflowed the stack as part of its attempt to make itself hard to debug, because it was taking longer to hit the limit.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MsIXNf2He4QhDvEUnoEcKN3Rx13Lmoz2KDjKJasImcU"}},"msgtype":"m.text"},"ts":1744729337870,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$NZ4KbQysBRkSA2th5m9WsgRGZQS26VJr1egs6XGEcTQ"},
{"content":{"body":"what i was responding to was mark referred to the current OOM behavior in browsers as \"violating the spec\"","m.mentions":{},"msgtype":"m.text"},"ts":1744729348890,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZihHIejc5rRDRorrE9qxMQEJxJAz9Ys5NCQ2dfm9cQU"},
{"content":{"body":"how does aborting help facilitate transactions?","m.mentions":{},"msgtype":"m.text"},"ts":1744729475907,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1txKntRrjiZMy5FntQPEAATAZCzaPzBhfB73i7f5Otk"},
{"content":{"body":"or does it not become an abort, it becomes a rollback to some previously tagged point?","m.mentions":{},"msgtype":"m.text"},"ts":1744729499384,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$M8PsxhcUOkHqx9Fve6bfG_CMJriCGApnQwqgVAgeO5M"},
{"content":{"body":"In our case, our supervisor worker embargoes all effects from the child worker and commits them once the worker completes its operation","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1txKntRrjiZMy5FntQPEAATAZCzaPzBhfB73i7f5Otk"}},"msgtype":"m.text"},"ts":1744729542429,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$6THos3bS46V03l8xjJP1LN72LCZe7eqa3azKEouNblE"},
{"content":{"body":"It currently uses an actual DB transaction to accomplish that, but that's an implementation choice","m.mentions":{},"msgtype":"m.text"},"ts":1744729593338,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oL8DXxlha8BJa9qqszHvkKLha2hv8A44fRDNqt7V3KY"},
{"content":{"body":"ah like Golem","m.mentions":{},"msgtype":"m.text"},"ts":1744729625225,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$o55HyEE-S7TxgKRtAF6QbY5LRf7wjsmJQhMym57coKY"},
{"content":{"body":"(https://www.golem.cloud/)","m.mentions":{},"msgtype":"m.text"},"ts":1744729680640,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UNSYLrBz3tWsA7jNRxKqXtpVm99XLLCHnVf8lHwfnjg"},
{"content":{"body":"so `self.close()` on dedicated workers doesn't kill the worker, it just prevents new tasks from being enqueued onto the event loop, but you could signal to the parent to kill the worker, and then call it","format":"org.matrix.custom.html","formatted_body":"so <code>self.close()</code> on dedicated workers doesn't kill the worker, it just prevents new tasks from being enqueued onto the event loop, but you could signal to the parent to kill the worker, and then call it","m.mentions":{"user_ids":["@mhofman:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6THos3bS46V03l8xjJP1LN72LCZe7eqa3azKEouNblE"}},"msgtype":"m.text"},"ts":1744729682309,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$8N6koDANcBmQrUgFmBiyaubuWlVtjOF3pH1R7n00FlA"},
{"content":{"body":"(the abortable unit is obviously the worker agent as we don't use SAB)","m.mentions":{},"msgtype":"m.text"},"ts":1744729711949,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$PO8gNrOLmLHXIns4i4_0tWUUTUwpPp9OQBHqTIzVH00"},
{"content":{"body":"Right that's great for implementing `panic`. It doesn't help for OOM","format":"org.matrix.custom.html","formatted_body":"Right that's great for implementing <code>panic</code>. It doesn't help for OOM","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8N6koDANcBmQrUgFmBiyaubuWlVtjOF3pH1R7n00FlA"}},"msgtype":"m.text"},"ts":1744729808691,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dAEzBYoIvg-kh4MlN7Za87aai47HV6KwpSvRBcY--ck"},
{"content":{"body":"Can we get someone else helping with notes?","m.mentions":{},"msgtype":"m.text"},"ts":1744729823731,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2DeD9crgx1ub-3pFlKLpKctqLOY_HPQ1TpvYP0uHwF0"},
{"content":{"body":"I'll help out","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2DeD9crgx1ub-3pFlKLpKctqLOY_HPQ1TpvYP0uHwF0"}},"msgtype":"m.text"},"ts":1744729842750,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$It6wLGFgvFMOwTMdwDZw_DUKP-HoHgEoezGc8i-GSPc"},
{"content":{"body":"I am pretty sure `{ object literal } as const` is all of these things Ron is saying","format":"org.matrix.custom.html","formatted_body":"I am pretty sure <code>{ object literal } as const</code> is all of these things Ron is saying","m.mentions":{},"msgtype":"m.text"},"ts":1744729977533,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K8qs7whnWx3cpXMfb-27dSqpovEkeMxuZOygKKseejQ"},
{"content":{"body":"TS can infer the closed domain of the keys and values just fine","m.mentions":{},"msgtype":"m.text"},"ts":1744729993689,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QJ4rJdMRvcoNZlod2_8sm80rzQB9XL3gf9cks2tz9Es"},
{"content":{"body":"and will prevent you from adding new keys and all","m.mentions":{},"msgtype":"m.text"},"ts":1744730012883,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cHRLXb8LLGTTHmVGt9zQmniMCG4Xo36r1Mn2QSIe2No"},
{"content":{"body":"see https://github.com/rbuckton/proposal-enum/issues/23","m.mentions":{},"msgtype":"m.text"},"ts":1744730023602,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pI8IjeSCFmHRza58fcAJMEeirTH15R8EzsQtSXsIeRs"},
{"content":{"body":"@bakkot:matrix.org I'm pretty sure Ron's banking on some of these continuation ideas actually happening though","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot</a> I&#39;m pretty sure Ron&#39;s banking on some of these continuation ideas actually happening though","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1744730054513,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_dTK7eqilKK7_4vj1yxvMPAHXnnXUUQ4VoBWEL-cjrI"},
{"content":{"body":"Igalia implemented `: enum` as an upgraded version of this, which also does some type system magic that catches further back up","format":"org.matrix.custom.html","formatted_body":"Igalia implemented <code>: enum</code> as an upgraded version of this, which also does some type system magic that catches further back up","m.mentions":{},"msgtype":"m.text"},"ts":1744730054754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2MVZwD1a7kwqScr1Nq87Kni6cgl0YDf1c5UuZXfDdBc"},
{"content":{"body":"the most basic thing is that `as const` still requires you to do `const Foo = { /* ... */ } as const; type Foo = Foo[keyof Foo]` which is ugly, and then the type isn't branded at that point","format":"org.matrix.custom.html","formatted_body":"the most basic thing is that <code>as const</code> still requires you to do <code>const Foo = { /* ... */ } as const; type Foo = Foo[keyof Foo]</code> which is ugly, and then the type isn't branded at that point","m.mentions":{},"msgtype":"m.text"},"ts":1744730100046,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M59_X6MfvefiV0u8TrlCzDrB7sUUm9UWuuORFtflVn0"},
{"content":{"body":"so I think the TS-only alternative would be more like https://github.com/microsoft/TypeScript/pull/61414","m.mentions":{},"msgtype":"m.text"},"ts":1744730127694,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$imh2SUjVH6Ef-b64My2aQPKex_coIrtpdNi4jWftmZE"},
{"content":{"body":"oh, `as enum` is neat, sure","format":"org.matrix.custom.html","formatted_body":"oh, <code>as enum</code> is neat, sure","m.mentions":{},"msgtype":"m.text"},"ts":1744730128257,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rbodt1pbgj4XbxeipsBbvaPT0U4tDK0LDyWTrpmdUNM"},
{"content":{"body":"sidebar comment is that is very, very risky","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_dTK7eqilKK7_4vj1yxvMPAHXnnXUUQ4VoBWEL-cjrI"}},"msgtype":"m.text"},"ts":1744730134223,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_lv5NFUVdisVITf2NNt_FD3jVAQJ980PcwRB-FPx6Pk"},
{"content":{"body":"see decorators","m.mentions":{},"msgtype":"m.text"},"ts":1744730139605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$76CbbXfRljMmeC06fWSlGJFAuaukf643vQYx3s7hdFA"},
{"content":{"body":"I think it does, though... consider `typeof (len => { try { return \"x\".repeat(len); } catch(err) {} })(2**53 - 1)`—the [spec](https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.repeat) requires it to be `\"string\"` AFAICT, but actual behavior is `\"undefined\"`","format":"org.matrix.custom.html","formatted_body":"I think it does, though... consider <code>typeof (len =&gt; { try { return \"x\".repeat(len); } catch(err) {} })(2**53 - 1)</code>—the <a href=\"https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.repeat\">spec</a> requires it to be <code>\"string\"</code> AFAICT, but actual behavior is <code>\"undefined\"</code>","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZihHIejc5rRDRorrE9qxMQEJxJAz9Ys5NCQ2dfm9cQU"}},"msgtype":"m.text"},"ts":1744730157172,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$HVngNbiZG1tNiAap-ZIHuqq9umtloKvte-4V_j2eAsM"},
{"content":{"body":"I have never found having to use `keyof Foo` to be that painful personally but simplifying seems good","format":"org.matrix.custom.html","formatted_body":"I have never found having to use <code>keyof Foo</code> to be that painful personally but simplifying seems good","m.mentions":{},"msgtype":"m.text"},"ts":1744730161615,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QBzGON_8a6m_IYzjXe5TKcuUgZlfqfWD6-0nNG6-VSs"},
{"content":{"body":"so far, I get that the advantages are 1) self-references 2) frozenness","m.mentions":{},"msgtype":"m.text"},"ts":1744730197928,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dgBqYKvt3uskOqrChyb6483bC2QwvszMplHmT-KhP2o"},
{"content":{"body":"I'd bet that the majority of TS developers who know how to use `enum` do not know how to use `keyof` to achieve the same effect","format":"org.matrix.custom.html","formatted_body":"I'd bet that the majority of TS developers who know how to use <code>enum</code> do not know how to use <code>keyof</code> to achieve the same effect","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QBzGON_8a6m_IYzjXe5TKcuUgZlfqfWD6-0nNG6-VSs"}},"msgtype":"m.text"},"ts":1744730225360,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nRL-yIOEMRp99hOXIGnAOvPpmtjXHZZDpHIbAz_le74"},
{"content":{"body":"oh I know, plus I think pretty much all of them have no shot (maybe auto-initialising with symbols would be fine)","format":"org.matrix.custom.html","formatted_body":"oh I know, plus I think pretty much all of them have no shot (maybe auto-initialising with symbols would be fine)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_lv5NFUVdisVITf2NNt_FD3jVAQJ980PcwRB-FPx6Pk"}},"msgtype":"m.text"},"ts":1744730235487,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$O5fqSn3XoOQqO4e7rbCR1QBgLYKCAVBxCtJDuT5wVXk"},
{"content":{"body":"sure because they can use `enum` instead, so it's not widely taught as a pattern, but if they did not have `enum` they'd learn the other pattern","format":"org.matrix.custom.html","formatted_body":"sure because they can use <code>enum</code> instead, so it's not widely taught as a pattern, but if they did not have <code>enum</code> they'd learn the other pattern","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nRL-yIOEMRp99hOXIGnAOvPpmtjXHZZDpHIbAz_le74"}},"msgtype":"m.text"},"ts":1744730290219,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wc_c2COElY50kgyaH9__zoIKywP51xnDKvQ76y7AkuI"},
{"content":{"body":"maybe, idk, the idiom feels kind of \"low level\" to me, why should I as a developer have to do this weird TS plumbing for something which is \"obvious\"","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wc_c2COElY50kgyaH9__zoIKywP51xnDKvQ76y7AkuI"}},"msgtype":"m.text"},"ts":1744730343453,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XqwcQVS-AJNY8O5oMdVD7JZigOvxRdM-2armkoEaUnI"},
{"content":{"body":"but none of this relates to whether we should add a JS feature","m.mentions":{},"msgtype":"m.text"},"ts":1744730362102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HjDacKj2w9DS4rXxLyvnWrL6hjQv5iZeVDgmdU6vxuc"},
{"content":{"body":"isn't Ron's whole motivation slide about TS DX?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HjDacKj2w9DS4rXxLyvnWrL6hjQv5iZeVDgmdU6vxuc"}},"msgtype":"m.text"},"ts":1744730440812,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M15Rm-G_RW2SD9NNCONr0SzHjtTO-3Ym36LRLjYc1iE"},
{"content":{"body":"yeah, I just mean that bakkot and I were talking about tradeoffs between `: enum` vs the `keyof` idiom, which is entirely *within* TS","format":"org.matrix.custom.html","formatted_body":"yeah, I just mean that bakkot and I were talking about tradeoffs between <code>: enum</code> vs the <code>keyof</code> idiom, which is entirely <em>within</em> TS","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M15Rm-G_RW2SD9NNCONr0SzHjtTO-3Ym36LRLjYc1iE"}},"msgtype":"m.text"},"ts":1744730482290,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9iJ1YGiH6-Nb-I5dzhm-zRbWMCVvSrmIXbs7LBEc2u8"},
{"content":{"body":"ah gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1744730492651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NA_n6uLg0ebJhwNd_2EWJOjD2u6_eyydGxQtRSJJ2tk"},
{"content":{"body":"This might be less surprising if it were called `Composite.is`?","format":"org.matrix.custom.html","formatted_body":"This might be less surprising if it were called <code>Composite.is</code>?","m.mentions":{},"m.relates_to":{"event_id":"$IEo77q056mAM5WM1wnvCVkJEyhnBQECERCWoYFNbXq8","is_falling_back":true,"m.in_reply_to":{"event_id":"$IEo77q056mAM5WM1wnvCVkJEyhnBQECERCWoYFNbXq8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1744730497284,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$mkX6VzBI_01ie_7zzPd8IVK0AvH0G33ER5dc-FIPFP0"},
{"content":{"body":"To these, I'd add 3) Looking like existing TS enum 4) being a syntax base for further follow-on features","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$dgBqYKvt3uskOqrChyb6483bC2QwvszMplHmT-KhP2o"}},"msgtype":"m.text"},"ts":1744730545111,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dBxeUB5L0B_YPZy0oNkdgUR7KfbHq-iNmiDgOtvA29A"},
{"content":{"body":"3) is not much of an advantage unless we do auto-incrementing, which we are not going to do","format":"org.matrix.custom.html","formatted_body":"<ol start=\"3\">\n<li>is not much of an advantage unless we do auto-incrementing, which we are not going to do</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744730663176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xwl1AfTA0QeLTOPo3ZljzUWdMKfmKmThvoKaKyl28Lo"},
{"content":{"body":"3 actually may be a disadvantage, because of the transition (see set -> define fields)","m.mentions":{},"msgtype":"m.text"},"ts":1744730822219,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UDPXEdWDGu4igqJGArZ30ULkXwCZkHJbM7vQ0iwwXCk"},
{"content":{"body":"why are we not going to do auto-incrementing? (not that I disagree...)","m.mentions":{},"msgtype":"m.text"},"ts":1744730839624,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-wYWTCYvlH49endWX4Ydy9nYoDwlUJ-evaubOBzhxDg"},
{"content":{"body":"because it is very bad and I and several delegates are dead against it for that reason","m.mentions":{},"msgtype":"m.text"},"ts":1744730865932,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I343DYgQv9xRNq6R79QQggg_hbqLqbdqaPS0YXlx8ik"},
{"content":{"body":"right just asking what the reason/badness is","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$I343DYgQv9xRNq6R79QQggg_hbqLqbdqaPS0YXlx8ik"}},"msgtype":"m.text"},"ts":1744730888067,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ozj3JbMcxFfKGFOsR8MnQZzg2VxqrcO8RHCtgwW5JnQ"},
{"content":{"body":"ah, see discussion in the vicinity of https://matrixlogs.bakkot.com/TC39_Delegates/2025-02-21#L227","m.mentions":{},"msgtype":"m.text"},"ts":1744730962908,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2d2uR6NlQWAs65rONLVIVZpLLhabfZVAYZS-wmwPvTE"},
{"content":{"body":"if this is a feature where TypeScript continues to have custom *runtime* semantics (due to disagreeing with TC39) it makes me significantly less excited about this feature","format":"org.matrix.custom.html","formatted_body":"if this is a feature where TypeScript continues to have custom <em>runtime</em> semantics (due to disagreeing with TC39) it makes me significantly less excited about this feature","m.mentions":{},"msgtype":"m.text"},"ts":1744730972230,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$D_ci4pHfT-FNWOreyn0Blga3ZBIVyhyYTkF0hqmAPGY"},
{"content":{"body":"biggest thing is that it makes it way, way too easy to have breaking changes","m.mentions":{},"msgtype":"m.text"},"ts":1744730984893,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I5dQqORlLVpXgQ-M9i4sTACV6uyDwLnUbdKkFiQiVq0"},
{"content":{"body":"not sure i follow, how does auto increment increase likelihood of having breaking changes?","m.mentions":{},"msgtype":"m.text"},"ts":1744731072425,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vLhrttu9DpspzFFlYGXWvO7O_0sLz0yhPsE6d5lZZmc"},
{"content":{"body":"As an aside, I have to express gratitude over having a Matrix archive website. It’s been so invaluable over the years for situations just like this.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2d2uR6NlQWAs65rONLVIVZpLLhabfZVAYZS-wmwPvTE"}},"msgtype":"m.text"},"ts":1744731115921,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$FkMtyW78dx2pthmnXAGvgFFDzKnOAMLjspoTdQZdNHU"},
{"content":{"body":"if you put a new variant not at the end of the enum, it renumbers all the following ones","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vLhrttu9DpspzFFlYGXWvO7O_0sLz0yhPsE6d5lZZmc"}},"msgtype":"m.text"},"ts":1744731157257,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rZKXWIqGkvDpXBuaBS_-Q5N-AR1AzUsY3qbh9vuPMQ8"},
{"content":{"body":"are you expecting that people will be like `if (val == 42)` and hardcode a particular enum's integer value?","format":"org.matrix.custom.html","formatted_body":"are you expecting that people will be like <code>if (val == 42)</code> and hardcode a particular enum's integer value?","m.mentions":{},"msgtype":"m.text"},"ts":1744731169846,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pD7nL4nqqifoZxU-evh-7RrQoRHAQ8kqdWKSXcDyVv8"},
{"content":{"body":"but ... why is that breaking?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rZKXWIqGkvDpXBuaBS_-Q5N-AR1AzUsY3qbh9vuPMQ8"}},"msgtype":"m.text"},"ts":1744731240774,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XOweyqZ4MXr8X39TdYJHYPdlsslA0_BZmnnFuROd0Os"},
{"content":{"body":"are there users of that enum that refer to the raw integer values?","m.mentions":{},"msgtype":"m.text"},"ts":1744731259599,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xh1FC8kxCMy0wF0ocyXmIvkw8kXpllLMElMOb_tP_Y0"},
{"content":{"body":"no i think its more like if you have a library and two versions of it are talking to each other","m.mentions":{},"msgtype":"m.text"},"ts":1744731263190,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LpUsFS5aOp5KZjcf6XaDLBK9Th8ngSb9n813qhm0mHA"},
{"content":{"body":"yes\n","m.mentions":{},"msgtype":"m.text"},"ts":1744731272598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KeJ_t25dcDWo0yT_EPr5qQo6R9412b4pIqEp8kfvUJs"},
{"content":{"body":"oh, you want two libraries with different versions in the same app","m.mentions":{},"msgtype":"m.text"},"ts":1744731281099,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nQfv7uzmKV-wFzZHsoNj8xPD0EvmS86DAX8gZOke628"},
{"content":{"body":"got it","m.mentions":{},"msgtype":"m.text"},"ts":1744731282681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0uIk2A8kwqTEBfSQufvEDo6jeMSjffglJp_iYr8fy4A"},
{"content":{"body":"well i personally imagine more like talking over http or smth","m.mentions":{},"msgtype":"m.text"},"ts":1744731296689,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cS-M-aktmJi1pABIX_Cs_eAW6LDcgbxuMhZ_LYoJgyI"},
{"content":{"body":"but in any random scenario ","m.mentions":{},"msgtype":"m.text"},"ts":1744731300275,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IFQ7pkj_Q04VPaYHqNpUZ4QuarOq_z46ZX2f34hqNw4"},
{"content":{"body":"having someone else helping with the notes would help","m.mentions":{},"msgtype":"m.text"},"ts":1744731361767,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$N7lFbeRiJogPHXjyEix5c9Du2_JcQiyufAJQqBT4Zsg"},
{"content":{"body":"also people storing enum values in JSON or databases","format":"org.matrix.custom.html","formatted_body":"also people storing enum values in JSON or databases","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nQfv7uzmKV-wFzZHsoNj8xPD0EvmS86DAX8gZOke628"}},"msgtype":"m.text"},"ts":1744731371030,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uvzd2P8fa1yPqYKMlXQnr9gfHFLCpxD_kmx2AzMAx70"},
{"content":{"body":"i'm still having trouble understanding why enum auto-numbering is the footgun. is it something like, the new version of the library is otherwise completely backwards compatible, but they wanted to prepend instead of append an enum value for an orthogonal new feature, and now it's incompatible?","m.mentions":{},"msgtype":"m.text"},"ts":1744731372304,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sCriHOvPP2dHd3-2k80coZdzK8X84-4Q15qaybVRyVA"},
{"content":{"body":"like we deal with these problems in Chrome as well, they're all append only","m.mentions":{},"msgtype":"m.text"},"ts":1744731391852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z442C9Ea2AgBy_s34xKeqewfyiezhpUSUKInvfSFvzo"},
{"content":{"body":"i mean we can talk about all the times v8 has broken abi compat from inserting variants/members into the middle of existing definitions if you want examples of how this is a footgun :P","m.mentions":{},"msgtype":"m.text"},"ts":1744731410715,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vmEPq9q3ryVCGOUJxGmW_zDDeqaWNhhzES_9ipaC_78"},
{"content":{"body":"* Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:\n\nI checked today with a friend in game dev—some who works on physics engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that would never need to care about. (He seems to deal with mathematical discontinuities in other ways, before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would use a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what it’s worth.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.new_content":{"body":"Regarding Kevin’s gamedev example and game developers’ domain knowledge of -0:\n\nI checked today with a friend in game dev—some who works on physics engines as their job, mostly within Unreal Engine’s C++/Blueprint APIs, for the past decade. He routinely works with data structures containing floating points in his physics work.\n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that would never need to care about. (He seems to deal with mathematical discontinuities in other ways, before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that they’ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would use a strict integer type for keys instead. We are not so lucky in JavaScript...\n\nThis of course was a mere convenience sample. Take it for what it’s worth.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7atTeYJtT85EuP9HjoIm3GEzsCHb0gXewoKt3RjziiY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744731412470,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$eva_n9IwPveCf5T6mP6_fkxZ9oBvRoXesTl9SUdQyVo"},
{"content":{"body":"removing enum values in general is a breaking change so i assume that's out of scope here","m.mentions":{},"msgtype":"m.text"},"ts":1744731414518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9zMcaA8BZDm-shrzpnrX_YHUna3znNKGbjA0vHwhpkY"},
{"content":{"body":"@shuyuguo:matrix.org in a completely closed world, auto-numbering would be fine, but the value of the enum escapes or is stored somewhere, so in practice it's rarely okay to re-number your enum","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shu</a> in a completely closed world, auto-numbering would be fine, but the value of the enum escapes or is stored somewhere, so in practice it&#39;s rarely okay to re-number your enum","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1744731437952,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Qr7jabH_GYqw41gPkZraVlQhFhch3PXC5DJw2MR-N1I"},
{"content":{"body":"yes, we can. i don't really know how well we deal with public API enums, probably too cavalierly","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vmEPq9q3ryVCGOUJxGmW_zDDeqaWNhhzES_9ipaC_78"}},"msgtype":"m.text"},"ts":1744731456968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dalExol4VTaFwpb8yzcjWoLvlR9lKcYHNDhK8UO8YKE"},
{"content":{"body":"I guess the idea is, it's just too tempting, syntax-wise, to add new values into the beginning or middle","m.mentions":{},"msgtype":"m.text"},"ts":1744731473674,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$77Zjq5ILXFtLodKKQwBVs4bOrw_9Fh-2yTHR5CV6GcU"},
{"content":{"body":"okay thanks","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Qr7jabH_GYqw41gPkZraVlQhFhch3PXC5DJw2MR-N1I"}},"msgtype":"m.text"},"ts":1744731502208,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qwD9HHUxZTnk65WJPJNRZXjSVJZcv8rZHe-hQwl3dws"},
{"content":{"body":"i feel like i would most enjoy the default being unique symbols for each item, unless you explicitly want the value to be serializable in which case you need to bring in your own numbers/strings (or use a decorator?)","m.mentions":{},"msgtype":"m.text"},"ts":1744731525871,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2dtrpt8464DGw2YYQWguDEAv6e70WuwG-m6C50D50-0"},
{"content":{"body":"In real life u might find someone made mistake. For example, in some versions of Monaco editor, I found the enum value changed in the new version and cause bugs in my application.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9zMcaA8BZDm-shrzpnrX_YHUna3znNKGbjA0vHwhpkY"}},"msgtype":"m.text"},"ts":1744731535389,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$lzf7r_EgDcStjaaEENF8yyoGEluGLHBNtUATDga4U2w"},
{"content":{"body":"* i feel like i would most enjoy the default being unique symbols for each item, unless you explicitly want the value to be serializable in which case you need to bring in your own numbers/strings (or use a decorator?). just to get a base level of mindfulness for how your enum is used.","m.mentions":{},"m.new_content":{"body":"i feel like i would most enjoy the default being unique symbols for each item, unless you explicitly want the value to be serializable in which case you need to bring in your own numbers/strings (or use a decorator?). just to get a base level of mindfulness for how your enum is used.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2dtrpt8464DGw2YYQWguDEAv6e70WuwG-m6C50D50-0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744731549108,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mgamfwYkXRPg7k5L9M03L7JFuTKJ1F3ZLYKWrQxm9Tw"},
{"content":{"body":"As a reference, in typescript-eslint's recommended configs there is a rule that bans comparing enum values with non-enum values. That's mostly targeted to stopping developers from relying on specific values of enums.\nhttps://typescript-eslint.io/rules/no-unsafe-enum-comparison\nThe rule's docs mark a delineation between the two common uses of enums that we've found:\n* \"Namespaced bag of values\": you care about the values (and likely don't auto-number)\n* \"Opaque identifiers\": you explicitly don't want to know about the values (e.g. for auto-numbering)","format":"org.matrix.custom.html","formatted_body":"<p>As a reference, in typescript-eslint's recommended configs there is a rule that bans comparing enum values with non-enum values. That's mostly targeted to stopping developers from relying on specific values of enums.<br>https://typescript-eslint.io/rules/no-unsafe-enum-comparison<br>The rule's docs mark a delineation between the two common uses of enums that we've found:</p>\n<ul>\n<li>\"Namespaced bag of values\": you care about the values (and likely don't auto-number)</li>\n<li>\"Opaque identifiers\": you explicitly don't want to know about the values (e.g. for auto-numbering)</li>\n</ul>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sCriHOvPP2dHd3-2k80coZdzK8X84-4Q15qaybVRyVA"}},"msgtype":"m.text"},"ts":1744731749742,"senderName":"Josh Goldberg 💖","senderId":"@joshuakgoldberg:matrix.org","id":"$J2STTlKUOQD1aodaUsBA1QF_D1oOF82ef-X-It2wjvM"},
{"content":{"body":"I remember there is a proposal by engines try to remove TDZ anyway?","m.mentions":{},"msgtype":"m.text"},"ts":1744731752877,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$w_OxJeFEgdYzqeSvtxreqwgK_UWjtW9eVWMjQQaEEzE"},
{"content":{"body":"if you maintain the discipline of append-only it's also fine but people don't; they like similar values to be close to each other in the declaration","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Z442C9Ea2AgBy_s34xKeqewfyiezhpUSUKInvfSFvzo"}},"msgtype":"m.text"},"ts":1744731763246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KxSYamuja4zrHFHZ3C6nSk9YqJewntqm1Rx7nzv1N04"},
{"content":{"body":"🤔 there's nothing protecting a user from giving more than 1 enum case the same associated value? that seems bad...","m.mentions":{},"msgtype":"m.text"},"ts":1744731784765,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YeCyigV-rmwbAKqjxJJJZuDv-WFJamLFIP_RQ6hOvRg"},
{"content":{"body":"yeah i understand that. there are many warnings about APPEND ONLY DO NOT REMOVE ANYTHING etc","m.mentions":{},"msgtype":"m.text"},"ts":1744731788668,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hXBjvzhrL2r89A9vDNJ1WqlF33NlJFcD1dc0iY8kjd8"},
{"content":{"body":"also just alphabetical so they're easier to scan","format":"org.matrix.custom.html","formatted_body":"also just alphabetical so they&#39;re easier to scan","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KxSYamuja4zrHFHZ3C6nSk9YqJewntqm1Rx7nzv1N04"}},"msgtype":"m.text"},"ts":1744731839209,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fa4F6MhLeGJzA2CXnXcyY6mlBFvIP1IXdMok0FogZBQ"},
{"content":{"body":"I hate to beat the same drum twice in a row, but yes that is also a recommended rule in typescript-eslint 😅\nhttps://typescript-eslint.io/rules/no-duplicate-enum-values\nSome developers like it for aliasing values. I've personally done this with a `/** @deprecated Use (other name) instead. */` sometimes.","format":"org.matrix.custom.html","formatted_body":"I hate to beat the same drum twice in a row, but yes that is also a recommended rule in typescript-eslint 😅<br>https://typescript-eslint.io/rules/no-duplicate-enum-values<br>Some developers like it for aliasing values. I've personally done this with a <code>/** @deprecated Use (other name) instead. */</code> sometimes.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YeCyigV-rmwbAKqjxJJJZuDv-WFJamLFIP_RQ6hOvRg"}},"msgtype":"m.text"},"ts":1744731851878,"senderName":"Josh Goldberg 💖","senderId":"@joshuakgoldberg:matrix.org","id":"$AONq-e1qlMSjw9OG95_EV-v026izoD-vpiFOz1MLUs4"},
{"content":{"body":"yeah so the goal is to not add a feature which requires that whenever you use it","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hXBjvzhrL2r89A9vDNJ1WqlF33NlJFcD1dc0iY8kjd8"}},"msgtype":"m.text"},"ts":1744731924365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$voGg50PpGBBrPXbNV4npCgT3WHusgbgq0dUogotSbXs"},
{"content":{"body":"sure, i understand the motivation. my take at this time is how much you'd like to favor public API enum use vs internal enum use","m.mentions":{},"msgtype":"m.text"},"ts":1744731970917,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xC1UG2DDHb4rtB5QNQN4XqgD4rbFjJH7Opne6_Wh2zE"},
{"content":{"body":"can we get some help with the notes?","m.mentions":{},"msgtype":"m.text"},"ts":1744732007116,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fjnBplXachdYaFRO8eEu8u8tUeqqTK1hyjm59UeB4BM"},
{"content":{"body":"do we need to raise a PoO for notes?","m.mentions":{},"msgtype":"m.text"},"ts":1744732057246,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KTacVROFHf7P44EUzhzGu0MhWh5z93DPCgCZP9Zo5jQ"},
{"content":{"body":"and attributions!","m.mentions":{},"msgtype":"m.text"},"ts":1744732172180,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9Y6HGSohAtceqtaDyz8ha_RGC6KMFgJq6urASGUsYHo"},
{"content":{"body":"it's super hard to attribute post-hoc","m.mentions":{},"msgtype":"m.text"},"ts":1744732182711,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xdRJqykXiUaids1_HZVcRmjt2GVrZs_lq9NGM5Chy2U"},
{"content":{"body":"yes, and we make errors there sometimes","m.mentions":{},"msgtype":"m.text"},"ts":1744732518336,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ac7J_vOXdvbeUpkZBeBIGdFX3AWTv4vKmIwbLoQpCZc"},
{"content":{"body":"set -> define is very different (much worse) case because it use same syntax but very different semantic. I don't think enum have similar issues.","m.mentions":{},"msgtype":"m.text"},"ts":1744732718324,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$45FvpQln1DD6br2a5FK40jYu0ibN5z_WZTVcYspiY_Y"},
{"content":{"body":"can someone help with the notes? I can't take notes rn -- need to go home, make dinner, and come back to the office in < 60 min","m.mentions":{},"msgtype":"m.text"},"ts":1744733186786,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$6S6IN1928vYBkV63AsFD-ID8zsDYXqaIz46ba8DQ5Qw"},
{"content":{"body":"Jesse could you stick around for a minute or two?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a> could you stick around for a minute or two?","m.mentions":{"user_ids":["@jesse:igalia.com"]},"msgtype":"m.text"},"ts":1744733229935,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$56qa9U8yRyvaqpUF0ozOyoCAlS6utOlkmBzXIEO8DmQ"},
{"content":{"body":"we should be wrapping up here soon","m.mentions":{},"msgtype":"m.text"},"ts":1744733239395,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$g24ZIrYgWhcj2cOAaSr_r4QZfobSCwEyclUohRXbjxY"},
{"content":{"body":"I can take over for the next minute Jesse ","format":"org.matrix.custom.html","formatted_body":"I can take over for the next minute <a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a>","m.mentions":{"user_ids":["@jesse:igalia.com"]},"msgtype":"m.text"},"ts":1744733254068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nmbIRobo7IWlqPz_VPaYkikU4BUiErCurplclmiXRwk"},
{"content":{"body":"go eat","m.mentions":{},"msgtype":"m.text"},"ts":1744733256851,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1wtglbrQJaL1V_p1gQcGe_5__HLrNw6CJRBc3Dmb8K0"},
{"content":{"body":"thanks both","m.mentions":{},"msgtype":"m.text"},"ts":1744733361334,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$-ynUoxX39W9srJHKcTKVytoPQaJHKvOWFUiDWyCcCzI"},
{"content":{"body":"The TypeScript compiler uses this behavior to define ranges for fast tests against `node.kind`, like `FirstKeyword = BreakKeyword, LastKeyword = OfKeyword`, etc., making it very valuable for using enums in performance-critical code.","format":"org.matrix.custom.html","formatted_body":"The TypeScript compiler uses this behavior to define ranges for fast tests against <code>node.kind</code>, like <code>FirstKeyword = BreakKeyword, LastKeyword = OfKeyword</code>, etc., making it very valuable for using enums in performance-critical code.","m.mentions":{"user_ids":["@joshuakgoldberg:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AONq-e1qlMSjw9OG95_EV-v026izoD-vpiFOz1MLUs4"}},"msgtype":"m.text"},"ts":1744735569589,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XyMv6i6V7BauM1t1t7d_GWlpeXWUwddavSCQdB0DEYk"},
{"content":{"body":"It's also useful when defining a mask that might only contain a single bit.","m.mentions":{},"msgtype":"m.text"},"ts":1744735614053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PmBGl5gKiZkbIE8zFWDVWjik3WVjHJ-wSnmb202oJ34"},
{"content":{"body":"the typescript compiler's moving to go, though - are there any other JS use cases?","m.mentions":{},"msgtype":"m.text"},"ts":1744735872673,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ViG1gaF1jOoYbhZsjOKBWa4nH0mvL19IQsuePcRHEOA"},
{"content":{"body":"i have done the same thing, in js, not in the typescript compiler","m.mentions":{},"msgtype":"m.text"},"ts":1744735929717,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2qM4UzgBr_kKyDg5MbS-agj9XiHMzFO7ptwoxJMb9lo"},
{"content":{"body":"The TypeScript compiler isn't the only case, just the most prominent. I use this behavior in other projects as well.","m.mentions":{},"msgtype":"m.text"},"ts":1744735950499,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TT1HvACpwXZgD7LocdC41fXd1rBUrDSr3mxuJNaUWD0"},
{"content":{"body":"sorry, to clarify - are these use cases performance-critical in the same way as tsc?","m.mentions":{},"msgtype":"m.text"},"ts":1744736029890,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5vH2wayD_diMwckd30lDlamrRywCJhGZx9R2-4szyAY"},
{"content":{"body":"@room back in 5 minutes","m.mentions":{"room":true},"msgtype":"m.text"},"ts":1744736112909,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$i5S7vEtnBvV4n5mVF2oQRTTKMBzdvgIkiOvTSDQaLBo"},
{"content":{"body":"Some are, yes. There are plenty of other cases, though. For example, I've used them when building a deserializer for a wire format.","m.mentions":{},"msgtype":"m.text"},"ts":1744736159150,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QfX7k1TmrN9Fl28FgUzi0MWWan6V6yINIkL7qh5NzeU"},
{"content":{"body":"looking for two TC39 heroes to help with the notes  🙏","m.mentions":{},"msgtype":"m.text"},"ts":1744736320098,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$EF4pbaa1RE6n1odu6--nT7uBaxOfX8vDjB58tLJGO9k"},
{"content":{"body":"Delegates, if you're presenting at a different part of this meeting, maybe consider taking notes now as a way to pay it forward for when you're speaking","m.mentions":{},"msgtype":"m.text"},"ts":1744736551682,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$OzLoSGUwclLx392blul9F5mjs9kLM5Wpp6VK1bJGZDI"},
{"content":{"body":"(i forgot to provide this context: ruben is a node TSC member and core collaborator)","m.mentions":{},"msgtype":"m.text"},"ts":1744736773406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2iWippswD72W-QFYvNVTHOIdnxJA3WFB6ODTxIuWFGQ"},
{"content":{"body":"@ljh","m.mentions":{},"msgtype":"m.text"},"ts":1744736791390,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$3vy3Ijof9E35apxdcl57oP0pHClNMrmAi5GPEgoRrwA"},
{"content":{"body":"bless you","m.mentions":{},"msgtype":"m.text"},"ts":1744736804241,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GZbwWJwO8QspR9pJA1kYr_pmWMaOHDdlnb6d88THTr8"},
{"content":{"body":"* @ljharb:matrix.org if you can, please update agenda to include link to slides","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb</a> if you can, please update agenda to include link to slides","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.new_content":{"body":"@ljharb:matrix.org if you can, please update agenda to include link to slides","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb</a> if you can, please update agenda to include link to slides","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3vy3Ijof9E35apxdcl57oP0pHClNMrmAi5GPEgoRrwA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744736809246,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$9lWIvS-PCaSgFvuecs-FF2-iivrQNfCKzF0U0zJe7sg"},
{"content":{"body":"it's a PDF, i'll upload it to the agenda","m.mentions":{},"msgtype":"m.text"},"ts":1744736896068,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UeEEHcH7WV3SVJHfEMimzL9lLTLSokX3WBEw41Z7oNU"},
{"content":{"body":"TCQ should be switched to the new agenda item so that people can add to the queue, right?","msgtype":"m.text"},"ts":1744737036094,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5Bxo8VkfrJjYIcFcWyWOhevf5YGiacckP2t03LBtXb4"},
{"content":{"body":"looks updated for me","m.mentions":{},"msgtype":"m.text"},"ts":1744737050382,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$jYQYONs7TXWQRAFqz8iOnfLgKOiVZdrFHnXtBoaY1VM"},
{"content":{"body":"can you try refreshing?>","m.mentions":{},"msgtype":"m.text"},"ts":1744737056611,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ynuorkUKpf0NkLzJGL8c_boozYJXZG6H4VSPpBvsByo"},
{"content":{"body":"https://github.com/tc39/agendas/blob/main/2025/2025.04%20-%20Object.propertyCount%20slides.pdf","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3vy3Ijof9E35apxdcl57oP0pHClNMrmAi5GPEgoRrwA"}},"msgtype":"m.text"},"ts":1744737064291,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T0axPTL9Tcw5caCjMheziI3R8crXfWSBtnUO6gH6wLg"},
{"content":{"body":"> <@jschoi:matrix.org> TCQ should be switched to the new agenda item so that people can add to the queue, right?\n\nResolved, thank you. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%245Bxo8VkfrJjYIcFcWyWOhevf5YGiacckP2t03LBtXb4\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>TCQ should be switched to the new agenda item so that people can add to the queue, right?</blockquote></mx-reply>Resolved, thank you.","m.relates_to":{"m.in_reply_to":{"event_id":"$5Bxo8VkfrJjYIcFcWyWOhevf5YGiacckP2t03LBtXb4"}},"msgtype":"m.text"},"ts":1744737073692,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$3pItie51umLXxWnaxO3MkOKFvyb5y0K-YKryVMOBbtE"},
{"content":{"body":"> <@ljharb:matrix.org> (i forgot to provide this context: ruben is a node TSC member and core collaborator)\n\nWould you like me to add this to the notes, where you introduce him?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%242iWippswD72W-QFYvNVTHOIdnxJA3WFB6ODTxIuWFGQ\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(i forgot to provide this context: ruben is a node TSC member and core collaborator)</blockquote></mx-reply>Would you like me to add this to the notes, where you introduce him?","m.relates_to":{"m.in_reply_to":{"event_id":"$2iWippswD72W-QFYvNVTHOIdnxJA3WFB6ODTxIuWFGQ"}},"msgtype":"m.text"},"ts":1744737142211,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$o6cy5FpDnsNBOWGAPmQCgimyP6gf37t-WQuX7DAvdkc"},
{"content":{"body":"sure, thanks!","m.mentions":{},"msgtype":"m.text"},"ts":1744737149299,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NbwUDuTlQ_mLv0ZsVq8BlBCsHZxtaNupU8DOP7OnYxg"},
{"content":{"body":"is this even implementable in a way that makes sense with these options?","m.mentions":{},"msgtype":"m.text"},"ts":1744737372858,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wykvNBEmy7j15uh3Jgq5oMCW09lgn6smNd3laHHVnvM"},
{"content":{"body":"like unless your object impl is always sorting out these 3 different kinds of keys","m.mentions":{},"msgtype":"m.text"},"ts":1744737403747,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xACP9Y-JhrJz5tS3bofWa9aWyuJVwRfLfFPbGKgHRDc"},
{"content":{"body":"it would be expensive to get the counts","m.mentions":{},"msgtype":"m.text"},"ts":1744737415120,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TxFdEtd6cKltgGwsAZNVvMshST6HlaO2Vbzfi0RhX6Q"},
{"content":{"body":"* it would be expensive as expensive to get the counts as doing Object.keys etc","m.mentions":{},"m.new_content":{"body":"it would be expensive as expensive to get the counts as doing Object.keys etc","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TxFdEtd6cKltgGwsAZNVvMshST6HlaO2Vbzfi0RhX6Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737426238,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WF0KG32E088hWBFclbb3nCl_J2AB-rlrgUsJ_imHsWY"},
{"content":{"body":"* it would be as expensive to get the counts as doing Object.keys etc","m.mentions":{},"m.new_content":{"body":"it would be as expensive to get the counts as doing Object.keys etc","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TxFdEtd6cKltgGwsAZNVvMshST6HlaO2Vbzfi0RhX6Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737431484,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xyjB4w7cB72qglJz9LbAgIA9XVGm82xvA4bL_xCHq48"},
{"content":{"body":"* like unless your object impl is storing these 3 different kinds of keys separately","m.mentions":{},"m.new_content":{"body":"like unless your object impl is storing these 3 different kinds of keys separately","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xACP9Y-JhrJz5tS3bofWa9aWyuJVwRfLfFPbGKgHRDc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737444703,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eUFdCWTxZ21Hcv_BNblgiSORG09JGVV1GGs3NIvXSwk"},
{"content":{"body":"this API is excessively fleshed out for a stage 0 proposal","m.mentions":{},"msgtype":"m.text"},"ts":1744737480855,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v-zlv00p7fdG7Rs0x7g_P4Uv0y-3KzfYre2aWX3zsFA"},
{"content":{"body":"it's probably pretty likely that engines will be differentiating these 3 classes of property keys","m.mentions":{},"msgtype":"m.text"},"ts":1744737490138,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oUA_lGHFue-dNe7sDCTWZ-BqF82jjs9wCxNXlIdTfSg"},
{"content":{"body":"gotta convey to new delegates to avoid that","m.mentions":{},"msgtype":"m.text"},"ts":1744737491243,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S_PyS29B_v-csiNu3fcdEXL21XK_fOzh4somuc1iVrg"},
{"content":{"body":"it's going for stage 1 or 2","m.mentions":{},"msgtype":"m.text"},"ts":1744737522597,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$G7jSkC6SRfoQn4k05nQQzDQysKIHjlT5H8ErCnnFoew"},
{"content":{"body":"yeah most people who have been participating in committee have gotten that message, but we definitely don't message it to outsiders","m.mentions":{},"msgtype":"m.text"},"ts":1744737529342,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ModMuAah-k2Vb4O9cyM4lrvFN6xECdA2B4_aqdTAtGw"},
{"content":{"body":"The alternative  should use `enumerableKeys` and `nonEnumerableKeys`? 🤔","format":"org.matrix.custom.html","formatted_body":"The alternative  should use <code>enumerableKeys</code> and <code>nonEnumerableKeys</code>? 🤔","m.mentions":{},"msgtype":"m.text"},"ts":1744737553777,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$8-zn_Xqn3ZMROvj7itX4L6TcWabHwvemqQnjUGOjRMw"},
{"content":{"body":"I would also like to convey to new delegates to avoid trying to go for stage 2 when there is any nontrivial design space","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G7jSkC6SRfoQn4k05nQQzDQysKIHjlT5H8ErCnnFoew"}},"msgtype":"m.text"},"ts":1744737619324,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1QV8R36FR3ZgbfZjTA5Yx6D8OgLQdzQaIoUU5EZJTP8"},
{"content":{"body":"This “Example uses” slide is important.","m.mentions":{},"msgtype":"m.text"},"ts":1744737624800,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$baZmo6zWbgME3GLjqlmQdfFLcgFabRg3rd3C_cALv2o"},
{"content":{"body":"* I would also like to convey to new delegates to avoid trying to go straight for stage 2 when there is any nontrivial design space","m.mentions":{},"m.new_content":{"body":"I would also like to convey to new delegates to avoid trying to go straight for stage 2 when there is any nontrivial design space","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1QV8R36FR3ZgbfZjTA5Yx6D8OgLQdzQaIoUU5EZJTP8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737626269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WjblvfbMM2kXm88LXG4wBQs--jzJyyGZpV7pDSM9yeA"},
{"content":{"body":"Maybe the most important slide.","m.mentions":{},"msgtype":"m.text"},"ts":1744737633816,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cZDV6ssR-hRDWFaiazNXi_X_q4JnbJXFfqoDT3UxpPE"},
{"content":{"body":"what is the nontrivial part of the design space you see?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1QV8R36FR3ZgbfZjTA5Yx6D8OgLQdzQaIoUU5EZJTP8"}},"msgtype":"m.text"},"ts":1744737640503,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J_G4SrJvQ7sLufEGsCgIgY8Mzmpu7lzGJHrzq2dK9vE"},
{"content":{"body":"* This “Example uses” slide with real-world appearances is important.","m.mentions":{},"m.new_content":{"body":"This “Example uses” slide with real-world appearances is important.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$baZmo6zWbgME3GLjqlmQdfFLcgFabRg3rd3C_cALv2o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737654739,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5x4Kl326Cj2SGx4qkkxQNf0uhHe0iAXSbLBR80t8e6M"},
{"content":{"body":"\"one method vs multiple methods\" seems trivial to me, as does \"how are the api options spelled\"","m.mentions":{},"msgtype":"m.text"},"ts":1744737657481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TObHIw7Zleu35NFUMHX0HdVZAnHGVHIyUMdsyVfvFY8"},
{"content":{"body":"keep in mind Jordan is co-champion on this, so this is not strictly a 'new member' thing","format":"org.matrix.custom.html","formatted_body":"keep in mind Jordan is co-champion on this, so this is not strictly a &#39;new member&#39; thing","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1QV8R36FR3ZgbfZjTA5Yx6D8OgLQdzQaIoUU5EZJTP8"}},"msgtype":"m.text"},"ts":1744737661243,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Pcn1ck-44aAtiLvJRRPlb9GpSqYcCoNSQGsWaBaj0ys"},
{"content":{"body":"which variants of kinds of key we allow you to query for, what the shape of the API is","m.mentions":{},"msgtype":"m.text"},"ts":1744737663696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VInlnF-CYWkvYfM_k37veT9mDxpWUfGiVRbjI1R0s6U"},
{"content":{"body":"* \"one method vs multiple methods\" seems trivial to me, as does \"how are the api options spelled\" and \"which api options are included\"","m.mentions":{},"m.new_content":{"body":"\"one method vs multiple methods\" seems trivial to me, as does \"how are the api options spelled\" and \"which api options are included\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TObHIw7Zleu35NFUMHX0HdVZAnHGVHIyUMdsyVfvFY8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744737666924,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iLSN27lU5jUGDZPpRS2EY2_DkUwiW9VrEd3hWsKgOxw"},
{"content":{"body":"certainly if you think there's more options than are being presented then it's fine to ensure those are included before stage 2. but the decision which to use likely would be a stage 2 decision imo","m.mentions":{},"msgtype":"m.text"},"ts":1744737714014,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$okBu_JCGs9EhyRzWYSEh7ZUyUbFudP83xK9LaCFk7LI"},
{"content":{"body":"no I mean I think we should do ~none of the options in the proposal","m.mentions":{},"msgtype":"m.text"},"ts":1744737734574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L_qNCazJFyAsJVVN2L9vBmsJyT3-QyNTH1-Pi-v3VMM"},
{"content":{"body":"and that's a large design space","m.mentions":{},"msgtype":"m.text"},"ts":1744737737798,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RNdtQkXOAQWOMrZ6Ahk0Ohli54Q-jws2tIrMQX6S08M"},
{"content":{"body":"lol ok well that's def a stage 2 blocking opinion :-)","m.mentions":{},"msgtype":"m.text"},"ts":1744737749706,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krvSEOmtjeYBgMVt1QP0GAmMKZWWSH2KnOGRdQ2IpII"},
{"content":{"body":"also we are not going to get through the queue on this","m.mentions":{},"msgtype":"m.text"},"ts":1744737799467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LUpHUKxKZav5x4CttwUfJT8szqcWgtowTUgUKsaqvQw"},
{"content":{"body":"not even close","m.mentions":{},"msgtype":"m.text"},"ts":1744737801788,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B3q6ck4Mlr4CPZZn8Qi4cQF_XhtvTUkb35iSeitjoNI"},
{"content":{"body":"maybe we should bring Dan Minor's topic forward, so that we can have the rest of the discussion keeping in mind to which degree this pattern is already optimized in practice?","m.mentions":{},"msgtype":"m.text"},"ts":1744737856761,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$zUP5bbYdOtEsL1QKQVPRAvGJHT7UHClUHKiiYv9GBdw"},
{"content":{"body":"yeah this presentation is taking all the available time","m.mentions":{},"msgtype":"m.text"},"ts":1744737862593,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wPm02_Zl60UBHLyl8z1ArESBtbNnmwOEEg3qG4LjFm8"},
{"content":{"body":"TCQ queue rearrangement would be great for situations just like this.","m.mentions":{},"msgtype":"m.text"},"ts":1744737954673,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$p_FBf_mBe6QlS7ny0v0VYnmgTa_BiE5Z8PPuxvSx468"},
{"content":{"body":"Is there a TCQ issue for marking whether your queue item would block the current agenda item or would manifestly affect its conclusion?","m.mentions":{},"msgtype":"m.text"},"ts":1744737988304,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$1Z4iwIF5AbZksiJCKR6So9eQWWjnY3FdcN7Bo0YXH3g"},
{"content":{"body":"If we go over, I do have a hard stop at 2:30pm ET and still need to be present for the Explicit Resource Management topic.","m.mentions":{},"msgtype":"m.text"},"ts":1744738015670,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wm9Y0o1d4XlNWjLbAsvBi9L01yNPf6-u8HTRAFGaqQk"},
{"content":{"body":"there's so much to be requested from TCQ but it's still unclear what the status of the rewrite is","m.mentions":{},"msgtype":"m.text"},"ts":1744738091479,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$2yLmmq2VlY5iaZ38lX_yHWkYGNDpXWNNvcxx0UGVjgs"},
{"content":{"body":"hmmm..  might need to move to day 4 if that's a hard constraint","format":"org.matrix.custom.html","formatted_body":"hmmm..  might need to move to day 4 if that&#39;s a hard constraint","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wm9Y0o1d4XlNWjLbAsvBi9L01yNPf6-u8HTRAFGaqQk"}},"msgtype":"m.text"},"ts":1744738120226,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$VQOx7vDrdTonUmbiyn7PJjCi8JieT8gSLBESP84K9QQ"},
{"content":{"body":"I'm not presenting, but I am the champion so I think it's fairly important I'm present. I have to leave at 2:30 to pick up my daughter, so I don't have any wiggle room.","m.mentions":{},"msgtype":"m.text"},"ts":1744738163348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IyMnmyug1F0F6-3nu-oTewlxcR8_0IJU7CbtpoU9qdo"},
{"content":{"body":"+1 to Shu","msgtype":"m.text"},"ts":1744738233950,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CxsaFBmybdBsmbM4QmeyQLSzTb0Ev6DpFTz5DMyp1iw"},
{"content":{"body":"Especially the examples with .filter(), I don’t expect that kind of optimization even in higher tier JITs.","msgtype":"m.text"},"ts":1744738270706,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rgQKqoCLkNEwYzj54yEtpsBeG55DzgmLA9mJOHAekLg"},
{"content":{"body":"we could swap with `non-extensible` topic, but then I think that affects @ljharb:matrix.org's constraint","format":"org.matrix.custom.html","formatted_body":"we could swap with <code data-md=\"`\">non-extensible</code> topic, but then I think that affects <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb</a>&#39;s constraint","m.mentions":{"user_ids":["@ljharb:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IyMnmyug1F0F6-3nu-oTewlxcR8_0IJU7CbtpoU9qdo"}},"msgtype":"m.text"},"ts":1744738308360,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$82gMXjoGmwyCQc96VQm9fcOOIXKui3BZm1n63L4AVFA"},
{"content":{"body":"what happened to Dan Minor's item?","m.mentions":{},"msgtype":"m.text"},"ts":1744738322160,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zP9p4cnL407PI8s0pNb9aPg3u6nqZD26CPhBoh2Nubk"},
{"content":{"body":"If we keep it at 2pm and it goes over, I will be back by about 2:50pm if the topic goes the full 30 minutes.","m.mentions":{},"msgtype":"m.text"},"ts":1744738393077,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U50GzknR2NaCpS_O1QK5Ybl5rVT6YyIcSJkk6G1hss4"},
{"content":{"body":"I think the more relevant optimization here is really just about, this will be done in the runtime without allocating an extra array/iterator. Doesn't need actual *compiler* optimizations.","format":"org.matrix.custom.html","formatted_body":"I think the more relevant optimization here is really just about, this will be done in the runtime without allocating an extra array/iterator. Doesn't need actual <em>compiler</em> optimizations.","m.mentions":{},"msgtype":"m.text"},"ts":1744738405940,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VERc1IXr0k9cS1Oofoo6xL1vNtRcpK3UDDzhsEQwcdE"},
{"content":{"body":"well, allocation sinking / scalar replacement is a common compiler optimization","m.mentions":{},"msgtype":"m.text"},"ts":1744738456520,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fU2bUJmyizOwem20qOWyPW3nfo3VotK0DwnU_rjMYoI"},
{"content":{"body":"v8 doesn't optimize this does it","m.mentions":{},"msgtype":"m.text"},"ts":1744738657796,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CUofYFvAuD9KBLfg95el4Vcx7bIGQOjKDISi-TWz5Ko"},
{"content":{"body":"this particular pattern? nope, not afaik","m.mentions":{},"msgtype":"m.text"},"ts":1744738708372,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$72zPwU-9l9B5y4CqRvEzVcp8YnTes6RZox9TstaqCl8"},
{"content":{"body":"seems ripe for peep hole reduction","m.mentions":{},"msgtype":"m.text"},"ts":1744738743982,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$C-WyWH4X-_Ngn7QGJm1l95aXCSUckIwMCp68UsE8Ous"},
{"content":{"body":"patches welcome","m.mentions":{},"msgtype":"m.text"},"ts":1744738824082,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TI48h-coeneaDuLuIizabdWDEg_w5fM3HcJ9YpkSRig"},
{"content":{"body":"sure but why would you call propertyCount on something allocated locally?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fU2bUJmyizOwem20qOWyPW3nfo3VotK0DwnU_rjMYoI"}},"msgtype":"m.text"},"ts":1744738894983,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fNSMeKgWDPKiHdKG9_tK0_EC_5yGzM8QDqz6HWBLVAI"},
{"content":{"body":"oh i was thinking of doing scalar replacement on the locally allocated `keys()` array","format":"org.matrix.custom.html","formatted_body":"oh i was thinking of doing scalar replacement on the locally allocated <code>keys()</code> array","m.mentions":{},"msgtype":"m.text"},"ts":1744739117638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NCImvpkdGcvxYoSw66Xi5yIqf9QazZ8qA1e7UfxGfO8"},
{"content":{"body":"* oh i was thinking of doing scalar replacement on the length of locally allocated `keys()` array","format":"org.matrix.custom.html","formatted_body":"* oh i was thinking of doing scalar replacement on the length of locally allocated <code>keys()</code> array","m.mentions":{},"m.new_content":{"body":"oh i was thinking of doing scalar replacement on the length of locally allocated `keys()` array","format":"org.matrix.custom.html","formatted_body":"oh i was thinking of doing scalar replacement on the length of locally allocated <code>keys()</code> array","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NCImvpkdGcvxYoSw66Xi5yIqf9QazZ8qA1e7UfxGfO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744739124877,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jqyAiC9ZhKJ9QIh2fBcAiPQNmYCZ1TKgDdJExdqVFdQ"},
{"content":{"body":"oic, yeah sounds hard","m.mentions":{},"msgtype":"m.text"},"ts":1744739268225,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GyL-8ceBstijDxRObkjbEEwZN9REHsnTePlnuytJwow"},
{"content":{"body":"If you're trying to validate that an Array doesn't have expando properties, couldn't you quite cheaply do `Object.countProperties(arr) - arr.length === 0`?","format":"org.matrix.custom.html","formatted_body":"If you're trying to validate that an Array doesn't have expando properties, couldn't you quite cheaply do <code>Object.countProperties(arr) - arr.length === 0</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1744739398135,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$kWMFZPsqyLokE1xSK78bgvSmkQ4z-CY-GJSkXLzcoSY"},
{"content":{"body":"sparse arrays :(","m.mentions":{},"msgtype":"m.text"},"ts":1744739425071,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p0tgfmCbQEtsjvVjr7Ed8HWA8DuZHOWUSqlUyPlwsHc"},
{"content":{"body":"drat","m.mentions":{},"msgtype":"m.text"},"ts":1744739440385,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$lM2PFnVYLfCImWmfAb8gIvUqGWiOl6Vw4edN_KcraA8"},
{"content":{"body":"just throw if passed a sparse array","m.mentions":{},"msgtype":"m.text"},"ts":1744739460465,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$sXUbsBspwsfsc3ePjhGUDKyH-NMLZVYCrq6buSUcCCk"},
{"content":{"body":"this is also a good lesson about over-developing the solution","m.mentions":{},"msgtype":"m.text"},"ts":1744739508302,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G7ppU1fE-ghKLIgeIDPIN72cnpvAXty7tTGBdT-Peyo"},
{"content":{"body":"I am super uncomfortable with granting stage 1 and then later finding out what we've agreed to when it's added to the notes by the champion","m.mentions":{},"msgtype":"m.text"},"ts":1744739721753,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$h4gxvmhRpjt_daCVVRVtfsxQn3Tb3st9i9R6S37jPCU"},
{"content":{"body":"I get that we have to move on, but this seems like a failure of our process","m.mentions":{},"msgtype":"m.text"},"ts":1744739737663,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fS-7FHML3Elx-jEVP4Amx_W5kRafMmuJo6Uo5CyV99g"},
{"content":{"body":"@erights Mark Miller (Agoric) MM: i am okay with the problem statement \"improving performance of counting properties on objects\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">@erights Mark Miller (Agoric) MM</a>: i am okay with the problem statement \"improving performance of counting properties on objects\"","m.mentions":{"user_ids":["@erights:matrix.org"]},"msgtype":"m.text"},"ts":1744739755291,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rOzUYUdg71yt7_SyRs_Q_gUMU34TyfbM9CuNJaq9OUA"},
{"content":{"body":"i need to think more about the problem statement \"how to detect sparse arrays and built-in Arrays with non-indexed properties\"","m.mentions":{},"msgtype":"m.text"},"ts":1744739778502,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Cg82MwEaaA2s9nED5WjLNBTAX59MupOjsGEpvH63Bgw"},
{"content":{"body":"those are just different problem statements","m.mentions":{},"msgtype":"m.text"},"ts":1744739781881,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ntIuUScJINiRbUMYWAaXLKlxIVmbqlvS6pW33gAyHkQ"},
{"content":{"body":"i dislike the pattern of delegates raising questions about what the actual problem statement is, and the champion saying \"yeah just add it to the list, that's one of our problems too\"","m.mentions":{},"msgtype":"m.text"},"ts":1744739805854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oCCX72fhpyXiNXRi6xX9uHGlac1fEtEAPYNN00hEJUU"},
{"content":{"body":"maybe we need a brief overflow topic to agree on what we got to Stage 1 on","m.mentions":{},"msgtype":"m.text"},"ts":1744739874192,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hRRpu9C-erFmrPVvxHkPyKzNVVPhAnWY_Ab2PSTkan8"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1744739881570,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G03SRRcXi72jJGhATiQ3_YHEtOiW3zuJ_Hyg-xtvZWA"},
{"content":{"body":"is the scope not statically whatever block contains the switch case?","m.mentions":{},"msgtype":"m.text"},"ts":1744739912290,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XYjGnoxU8GCMdYIStjgHiiZAjNqSp7dgMmEL9aA4FMo"},
{"content":{"body":"ehh, kinda","m.mentions":{},"msgtype":"m.text"},"ts":1744739922259,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nkI052VW29t7W9JyRQFNYEJfit1YLU9L-DWXWWbIrzk"},
{"content":{"body":"but it's a good change that stands alone of implementation opportunities imo","m.mentions":{},"msgtype":"m.text"},"ts":1744739946517,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4NxErszB50KPK8XRaTMElM3hMgSqhGMUFT94Bf8PCow"},
{"content":{"body":"oh switch does add a scope, til","m.mentions":{},"msgtype":"m.text"},"ts":1744739955886,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GTTii70mRzO_MjSzgIMJK7KoYJaWJ7V4k9tvgzc7RCE"},
{"content":{"body":"lexical declarations with on-scope-exit in bare case bodies is hateful","m.mentions":{},"msgtype":"m.text"},"ts":1744739963352,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HyDQbKsXxLY63eki01Rl5NFH_tPrZZO5xTJvKQevS8g"},
{"content":{"body":"oh yeah i'm not arguing in favor of keeping this","m.mentions":{},"msgtype":"m.text"},"ts":1744740001794,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$04DvqGZnOnUCPV9bh3R57GhQCrtKzxgsLd5m4PGS-wY"},
{"content":{"body":"I _think_ `Array.isSparse` plus `Object.propertyCount` gives you \"detecting [non-sparse] arrays with non-indexed properties\" as in bradford's example above (basically `return !Array.isSparse(arr) && Object.countProperties(arr) === arr.length + 1`)","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> <code>Array.isSparse</code> plus <code>Object.propertyCount</code> gives you \"detecting [non-sparse] arrays with non-indexed properties\" as in bradford's example above (basically <code>return !Array.isSparse(arr) &amp;&amp; Object.countProperties(arr) === arr.length + 1</code>)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Cg82MwEaaA2s9nED5WjLNBTAX59MupOjsGEpvH63Bgw"}},"msgtype":"m.text"},"ts":1744740025560,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rvHtJA7b6wQ5ObmVxAulvMRGSMTFs-pM9Vv-pDVipCM"},
{"content":{"body":"but yeah they're pretty different problem spaces","m.mentions":{},"msgtype":"m.text"},"ts":1744740045208,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yCGiL4rjF8h1NBhb2q12lStDPAyw3KMs4yuz_MFaCqo"},
{"content":{"body":"it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate `Array.isSparse` proposal\"","format":"org.matrix.custom.html","formatted_body":"it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate <code>Array.isSparse</code> proposal\"","m.mentions":{},"msgtype":"m.text"},"ts":1744740064280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZX3uJvwudnVaQB9d_JapCLQZpOTKx0WS-0v_D0uqpdw"},
{"content":{"body":"* I _think_ `Array.isSparse` plus `Object.countProperties` gives you \"detecting \\[non-sparse\\] arrays with non-indexed properties\" as in bradford's example above (basically `return !Array.isSparse(arr) && Object.countProperties(arr) === arr.length + 1`)","format":"org.matrix.custom.html","formatted_body":"* I <em>think</em> <code>Array.isSparse</code> plus <code>Object.countProperties</code> gives you \"detecting [non-sparse] arrays with non-indexed properties\" as in bradford's example above (basically <code>return !Array.isSparse(arr) &amp;&amp; Object.countProperties(arr) === arr.length + 1</code>)","m.mentions":{},"m.new_content":{"body":"I _think_ `Array.isSparse` plus `Object.countProperties` gives you \"detecting \\[non-sparse\\] arrays with non-indexed properties\" as in bradford's example above (basically `return !Array.isSparse(arr) && Object.countProperties(arr) === arr.length + 1`)","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> <code>Array.isSparse</code> plus <code>Object.countProperties</code> gives you \"detecting [non-sparse] arrays with non-indexed properties\" as in bradford's example above (basically <code>return !Array.isSparse(arr) &amp;&amp; Object.countProperties(arr) === arr.length + 1</code>)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rvHtJA7b6wQ5ObmVxAulvMRGSMTFs-pM9Vv-pDVipCM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744740066401,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iYInv_gze1LaWKliaCi54Ux0nvxL7Sk7XXpETtO6EAw"},
{"content":{"body":"this issue kind of points to how it'd be nice if we moved some more things to \"early\" time (or a secret third time in the middle?) in the spec's execution model of the world, so we don't gratuitously require this kind of extra logic","m.mentions":{},"msgtype":"m.text"},"ts":1744740071633,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yqyzocFHD_WJvEzgHY1GdSX3Q9cJk8suiAP8jInwR0M"},
{"content":{"body":"* it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate `Array.isSparse` proposal\" (thus removing \"index stuff\" from this one)","format":"org.matrix.custom.html","formatted_body":"* it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate <code>Array.isSparse</code> proposal\" (thus removing \"index stuff\" from this one)","m.mentions":{},"m.new_content":{"body":"it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate `Array.isSparse` proposal\" (thus removing \"index stuff\" from this one)","format":"org.matrix.custom.html","formatted_body":"it's 100% fine with me personally, if part of the stage 1 exploration results are \"make a separate <code>Array.isSparse</code> proposal\" (thus removing \"index stuff\" from this one)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZX3uJvwudnVaQB9d_JapCLQZpOTKx0WS-0v_D0uqpdw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744740132427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hc3W4oGkE77Z7kghmZuYNtTE4YbBWqpb-L7KoxWBhYA"},
{"content":{"body":"The current options are to differentiate `index`, `nonIndexString`, and `symbol` key types with another option to determine if they should be enumerable or not.\n\nVery frequent is the basic case, and I believe no one spoke up against that case: Object.keys(object).length. so enumerable true and index and nonIndexString keys.\n\nAnother frequent use case is checking if symbols collected with Object.getOwnSymbols are enumerable or not. That is enumerate true or false and symbol key type.\n\nOne more use case is to validate that an array like Object does not contain any non index string properties. This is a huge performance overhead for these cases. That is either index or nonStringKey type and enumerable true. \n\nI believe the latter is the main question about wanting to solve this with the API or not.\n\nAnother use case is to have a fast path for dense arrays by not having to check if an array is sparse. It would allow to skip additional steps. This would be index type and either enumerability.\n\nThere are lots of other use cases depending on what a user wants to do. I can collect additional ones if that is requested.","msgtype":"m.text"},"ts":1744740313515,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$mscXBxpFzVRh6ws_z8Nja226a0tRZ5vFKwLpieM8J2s"},
{"content":{"body":"Of those use cases, I am at this point only convinced that the basic case is worth solving in the language.","m.mentions":{},"msgtype":"m.text"},"ts":1744740474152,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1yYai-zVR5nh49VoWviMcTkVZ_qypYZbxMuDZ7V_bbE"},
{"content":{"body":"Array.isSparse will address the cheaper one of the two index key types use cases I am aware of. The major performance overhead comes when checking for additional non index string properties on array like objects. That is the one Mark also brought up. For most cases, this will make up most CPU time for validating or comparing these arrays.","msgtype":"m.text"},"ts":1744740550517,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$0xEIut4cu0xq2Fpt1SvYcf87VIGD_9Pc_yVQNJKUC_w"},
{"content":{"body":"yes I'm much more comfortable with agreeing to pursue only the first part as part of this proposal, and another case can be made for another proposal","m.mentions":{},"msgtype":"m.text"},"ts":1744740562039,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7DLXPkt2l0-HHYijh7RV3vTJpm8TRhHoT7uuuPq2TFg"},
{"content":{"body":"would folks be receptive to a separate `Array.isSparse` proposal then?","format":"org.matrix.custom.html","formatted_body":"would folks be receptive to a separate <code>Array.isSparse</code> proposal then?","m.mentions":{},"msgtype":"m.text"},"ts":1744740592290,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FmCeGVuvGzDqz9VUzjUI0rtQafeM2aaCsrKuNL7ycIU"},
{"content":{"body":"we didn't get around to further queue items but I'd like to point out that if there is one frequent use case where it's worth optimizing propertyCount, consider during stage 1 whether it makes more sense to add an API for that specifically","m.mentions":{},"msgtype":"m.text"},"ts":1744740596678,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$25IvZNnLXv-gVoGFD3B-d7h1Uv4BuRtRMs0SqoExsHs"},
{"content":{"body":"given adequate motivation","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FmCeGVuvGzDqz9VUzjUI0rtQafeM2aaCsrKuNL7ycIU"}},"msgtype":"m.text"},"ts":1744740608956,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dZS_zWA_jsH1ipjVbjX7DSspdWjN3Uop5vtxWZVlh4o"},
{"content":{"body":"I would certainly welcome a presentation that seeks Stage 1 for it","format":"org.matrix.custom.html","formatted_body":"I would certainly welcome a presentation that seeks Stage 1 for it","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FmCeGVuvGzDqz9VUzjUI0rtQafeM2aaCsrKuNL7ycIU"}},"msgtype":"m.text"},"ts":1744740612269,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$m5Wgdb2D7F_06CzYVdZnXA5KW1dtvCPMvhMJjBhqRVo"},
{"content":{"body":"I can put such a proposal together. Michael Ficarra: would you like to look into this together with me?","msgtype":"m.text"},"ts":1744740654467,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$tPEYK50QKggNGXf1cRBCBJVHT8Mt2MlMfo1p_F4wjEQ"},
{"content":{"body":"I would not","m.mentions":{},"msgtype":"m.text"},"ts":1744740673384,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zEfW6iD7La5U7pLKgXmD8OSzYbgi62omVuL97YnRfbI"},
{"content":{"body":"i'm happy to work on it as well, but i'm not sure what bakkot would consider \"adequate motivation\"","format":"org.matrix.custom.html","formatted_body":"i'm happy to work on it as well, but i'm not sure what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> would consider \"adequate motivation\"","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1744740689748,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WtVx16d5BrjczA1pBs59J5j3v34gl45Ht3qpUBKFSVc"},
{"content":{"body":"you've talked about code needing to check for sparse arrays. I personally have never seen code which needed to check for sparse arrays except maybe some extremely pedantic serialization libraries, so giving examples and explaining why it's important for that code would go a long way.","m.mentions":{},"msgtype":"m.text"},"ts":1744740768841,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WYOjKbfqj6zaVg_0QLSPKFJzhA7Vtw9ir0W1qXereFY"},
{"content":{"body":"`static #t = void ...` looks like it should just have been `static { ... }`","format":"org.matrix.custom.html","formatted_body":"<code>static #t = void ...</code> looks like it should just have been <code>static { ... }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1744740773041,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vYxOf4Hxz3ZlwURSSlZb6M27EBeWXez-6dsJT8bd-BQ"},
{"content":{"body":"yeah exactly","m.mentions":{},"msgtype":"m.text"},"ts":1744740854716,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RlT49dsSU048jV3ehrif1rsVvDP7o5tqIg9IwjjTNcs"},
{"content":{"body":"I would be convinced just seeing that a lot of people are doing it, regardless of whether we think it's \"good\"","format":"org.matrix.custom.html","formatted_body":"I would be convinced just seeing that a lot of people are doing it, regardless of whether we think it&#39;s &quot;good&quot;","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WtVx16d5BrjczA1pBs59J5j3v34gl45Ht3qpUBKFSVc"}},"msgtype":"m.text"},"ts":1744740881669,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xCmxpeeSfBVwGsS_FJQeDzn1zYfv1VXl8SmtFtJd9b8"},
{"content":{"body":"i mean every user of node's `console.log` or `util.inspect` would benefit from the perf increase such a proposal offers","format":"org.matrix.custom.html","formatted_body":"i mean every user of node's <code>console.log</code> or <code>util.inspect</code> would benefit from the perf increase such a proposal offers","m.mentions":{},"msgtype":"m.text"},"ts":1744740953005,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V6d514o7s5OQD-NniP8PyjuCF3cOJPv8YsbvrivU3Bg"},
{"content":{"body":"so that one seems pretty empirical","m.mentions":{},"msgtype":"m.text"},"ts":1744740957580,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JE4sBTznFqDwNhmCCrfBTqr-8bRTkWPl3DM8XdH2s4M"},
{"content":{"body":"I'm especially unconvinced by arguments from performance of node's internals because they always have the option of doing things in C++","m.mentions":{},"msgtype":"m.text"},"ts":1744741003747,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ST3Ucs2PwqhVrVi90uu9aPwzl-5m0ybIgdCdyFqA9bc"},
{"content":{"body":"or zig, or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1744741017794,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7MZFJeAABgtQjBeKcGx17vKVENhr18FkViA3GN-FxHM"},
{"content":{"body":"i don't think util.inspect would benefit, it still has to manually identify sparse runs","m.mentions":{},"msgtype":"m.text"},"ts":1744741037472,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BeJfXVtK6R0pBp_zl6hp6l6pLSVM6644348bo2xKUNQ"},
{"content":{"body":"From what was discussed: I would remove index vs nonIndexString from the implementation. I believe that was the main pain point. Adding Array.isSparse in combination with the keys would allow the main use cases to be addressed","msgtype":"m.text"},"ts":1744741038040,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$py8gPzEEHc5BlL_9a22axof8GU_iV09DPnOA3Ki3tLE"},
{"content":{"body":"wouldn't we also only care about cases that count properties but avoid enumerating?","m.mentions":{},"msgtype":"m.text"},"ts":1744741038132,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$h7M0FvNGbw_o6eqRFAadQ8xMQTJXtMF3ZlEc2mtYIbE"},
{"content":{"body":"This also simplifies the implementation by not having to worry about what an index key is","msgtype":"m.text"},"ts":1744741062973,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$008H4wh_HdaNXfuOEqIKXoPymMjZV_HvgAs5vhW0kNo"},
{"content":{"body":"Which is the German one that shu hasn't been able to reach?","format":"org.matrix.custom.html","formatted_body":"Which is the German one that <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> hasn't been able to reach?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1744741096940,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$EaB9rHFepclql6vUIz7LddCLxgyXo-7HfhbtyhWAiPc"},
{"content":{"body":"with the fast path, only when it finds a sparse thing, so it'd only punish people doing the Bad Thing","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BeJfXVtK6R0pBp_zl6hp6l6pLSVM6644348bo2xKUNQ"}},"msgtype":"m.text"},"ts":1744741124551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4yEyJ_DFRWNr8WVbsed3Sb40LuLs4Pm4R-MsTUm1K5g"},
{"content":{"body":"but it has to iterate over the array anyway","m.mentions":{},"msgtype":"m.text"},"ts":1744741142147,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$E9JV_wcK4QvOixu7BvAtsCviL75H9rza88NbTs70--A"},
{"content":{"body":"to print all the things it contains","m.mentions":{},"msgtype":"m.text"},"ts":1744741145800,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LTsmbLyIHOftAjTjLny5N5jF1U9GjgNH5catUADNHQM"},
{"content":{"body":"It does that by not allocating the array ","msgtype":"m.text"},"ts":1744741170963,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$Z6gUOXrsJzo4IaTq5I7SpAdtKqIO8wUG5I58-hbaKt0"},
{"content":{"body":"Aki: it's not the websites themselves, but whoever designed the websites for the two sites listed under \"Axial\": https://github.com/syg/proposal-nonextensible-applies-to-private/issues/1","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@akirose:matrix.org\">Aki</a>: it's not the websites themselves, but whoever designed the websites for the two sites listed under \"Axial\": https://github.com/syg/proposal-nonextensible-applies-to-private/issues/1","m.mentions":{"user_ids":["@akirose:matrix.org"]},"msgtype":"m.text"},"ts":1744741187105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$564whDaV4EOS6YGjIKQMMKmzoJks9HEzy1WNSQ39sDU"},
{"content":{"body":"That would otherwise be a huge overhead","msgtype":"m.text"},"ts":1744741187294,"senderName":"Ruben","senderId":"@bridgear:matrix.org","id":"$WITjIfLS4016IN25GuWLoPHu3gRUkhmFC78TQerBm8Q"},
{"content":{"body":"it's clear from the HTML source that those two sites were written by the same 3rd party people, so i figured it's not useful to reach out to the sites themselves","m.mentions":{},"msgtype":"m.text"},"ts":1744741222113,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8vWiCSUWeNbjriJVOO16HHb2Paig3ALMlisNZLV5rfE"},
{"content":{"body":"well, i _could_ ask them who they used directly but i haven't tried","format":"org.matrix.custom.html","formatted_body":"well, i <em>could</em> ask them who they used directly but i haven't tried","m.mentions":{},"msgtype":"m.text"},"ts":1744741237004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vnhfaSSC5laUFoBPqOU1U2HWDvAK0XutecD36FnXWuU"},
{"content":{"body":"not sure if they'd respond to english in any case","m.mentions":{},"msgtype":"m.text"},"ts":1744741248394,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FGGKn_6VD68_KtZ84VdlUJ05aqnJ4zUXYvrOGSZeuTM"},
{"content":{"body":"not sure it's in the spirit of the reviewer requirement to speedrun this process?","m.mentions":{},"msgtype":"m.text"},"ts":1744741365297,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$pY3Od1lPYSgIOS4GzZGzF382gYX3Bk88vnThNd8AKbs"},
{"content":{"body":"Mark should've written tests, he could've gone for 3","m.mentions":{},"msgtype":"m.text"},"ts":1744741507579,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uJbHwWesQrCCdcDHkuV2bHSZG1pcOdiE0Omu-0fqOZY"},
{"content":{"body":"probably it's not trivial to update all of test262 for this","m.mentions":{},"msgtype":"m.text"},"ts":1744741524836,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0FtxnIi9Sp3dm5ngOA7M0Ak3pM5sLNTs_bNR7dH4c-g"},
{"content":{"body":"I almost wrote tests for `getOrInsert` just so it could advance","format":"org.matrix.custom.html","formatted_body":"I almost wrote tests for <code>getOrInsert</code> just so it could advance","m.mentions":{},"msgtype":"m.text"},"ts":1744741536176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AY_91Felo8fjtVNcNfFMVQ6Fi7GPyYV6UUMri_EW9pM"},
{"content":{"body":"it's so small...","m.mentions":{},"msgtype":"m.text"},"ts":1744741538973,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xMLToKBpnzo7B0-fiRnsPbsyUluCLZwS0T4D0ctoOZs"},
{"content":{"body":"I didn't say it was easy","m.mentions":{},"msgtype":"m.text"},"ts":1744741540588,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Kmn-bcYxxuEbwaoinGLaXtHgwPwopvria6Rob0wWZag"},
{"content":{"body":"and claude is surprisingly good at writing test262 tests","m.mentions":{},"msgtype":"m.text"},"ts":1744741550392,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$juUhz0y5xeI95gCn4VwZqPBeL476oIbU58kZCOcwuKQ"},
{"content":{"body":"Yeah, I'm not sure what the urgency is here.","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pY3Od1lPYSgIOS4GzZGzF382gYX3Bk88vnThNd8AKbs"}},"msgtype":"m.text"},"ts":1744741559434,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$1crlKSTiyvF8kR1Ay3tvYrDmAySDWbNr9Ns2TpxNJ-0"},
{"content":{"body":"well, there's a little more urgency because this is a breaking change","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1crlKSTiyvF8kR1Ay3tvYrDmAySDWbNr9Ns2TpxNJ-0"}},"msgtype":"m.text"},"ts":1744741587435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UEJl5UNJmqO1ZtdzFpzrOG2cLg4g6YcHqOh1685mOwQ"},
{"content":{"body":"albeit of something which is multiple years old at this point","m.mentions":{},"msgtype":"m.text"},"ts":1744741596024,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$frz2r8NiJR8w3SsXhetV9jJbr1OXHrvM1KVUjIoE3gI"},
{"content":{"body":"Jonas from the University of Bergen already wrote tests -- https://github.com/tc39/test262/pull/4454","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AY_91Felo8fjtVNcNfFMVQ6Fi7GPyYV6UUMri_EW9pM"}},"msgtype":"m.text"},"ts":1744741599687,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$R9100b8IH66OV7l2QlBPix-tKXnhU8nAclgtMqfkZHQ"},
{"content":{"body":"i think there's also just a baseline impatience from knowing that you can only advance stuff at meetings. who wants to wait months for what could be immediate?","m.mentions":{},"msgtype":"m.text"},"ts":1744741614896,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_ozpZERQC7B989PW1IHJJGwAlq1Ku8n-hrTP8TOoDKI"},
{"content":{"body":"oh nice!","m.mentions":{},"msgtype":"m.text"},"ts":1744741617069,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Zf-uJxEUXoBURHBYliXAlk3tjv1hM3uSWgblMiQrcl8"},
{"content":{"body":"And with “monotonously (but not asymptomatically)” growing use. ","format":"org.matrix.custom.html","formatted_body":"And with “monotonously (but not asymptomatically)” growing use.","msgtype":"m.text"},"ts":1744741625269,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cbsqMqH9mdPfxVMaUCbQEPMbZo8q652pEcNMYXM_TSs"},
{"content":{"body":"glad I didn't then","m.mentions":{},"msgtype":"m.text"},"ts":1744741627132,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n8wamZsFEY3N97pZ6DF654Rj8-1GJJI_c-mTf7xvhyI"},
{"content":{"body":"tbf, he did say 'please'","format":"org.matrix.custom.html","formatted_body":"tbf, he did say &#39;please&#39;","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_ozpZERQC7B989PW1IHJJGwAlq1Ku8n-hrTP8TOoDKI"}},"msgtype":"m.text"},"ts":1744741738839,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$B4Y4Ya9bgm7ZHYXmbBIpIgUZvI9h-NA3C0oEnXEQboM"},
{"content":{"body":"monotonic not monotonous","m.mentions":{},"msgtype":"m.text"},"ts":1744741763352,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KxBLOnkFbGUM-UBGi7kKl14uWLaSU4PY3jY3hFZ_jEs"},
{"content":{"body":"Yes, you are right. I did an eggcorn. ","format":"org.matrix.custom.html","formatted_body":"Yes, you are right. I did an eggcorn.","msgtype":"m.text"},"ts":1744741868621,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$QlgevzYMhDhssnVz-i3a52YUgAPL88YROZvoKOU9Gz4"},
{"content":{"body":"yeah I don't really see this as a source of urgency. But it's more like, if we all agree on it, and it's simple and well-developed, then we can do this multiple advancement thing","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UEJl5UNJmqO1ZtdzFpzrOG2cLg4g6YcHqOh1685mOwQ"}},"msgtype":"m.text"},"ts":1744742275698,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iGb_37HGdeBSbnox3V2b2HIrXKctQOzkFKAKG-ZQU4U"},
{"content":{"body":"the chairs have been doing a really great job lately ❤️","m.mentions":{},"msgtype":"m.text"},"ts":1744742400592,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AQ2UNJCyVkLdUeQwZvXbDgn-veXSr10RXfV0KO4GG9I"},
{"content":{"body":"> The committee may elide the process based on the scope of a change under consideration, as it sees fit.","format":"org.matrix.custom.html","formatted_body":"<blockquote data-md=\">\">The committee may elide the process based on the scope of a change under consideration, as it sees fit.<br/></blockquote>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iGb_37HGdeBSbnox3V2b2HIrXKctQOzkFKAKG-ZQU4U"}},"msgtype":"m.text"},"ts":1744742422325,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4Cb_3M6zHKnxHXycroK3D3glXPAr6zpbPR-TT7VT1C0"},
{"content":{"body":"yep, I agree, that's the clause we're invoking","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4Cb_3M6zHKnxHXycroK3D3glXPAr6zpbPR-TT7VT1C0"}},"msgtype":"m.text"},"ts":1744742465208,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Wbmvqlz-fNM1jEYJX5ML3iPYMyV1iBBR2T9F65PoofA"},
{"content":{"body":"the YOLO clause","m.mentions":{},"msgtype":"m.text"},"ts":1744742465807,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$FMmU8K0l2K7KlFL6upuDCqP9WOL-Rpuh-Z5_i0RKz1s"},
{"content":{"body":"well, no, we're not eliding the process","m.mentions":{},"msgtype":"m.text"},"ts":1744742476762,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X7XunSTPSZgIFdVB7XarDGUmArZDG5YaW621EOW2vmE"},
{"content":{"body":"we're following it","m.mentions":{},"msgtype":"m.text"},"ts":1744742480352,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$07PbWbudewPNqR1X5VouEwO5oukT9yqFqf9DbJYoQqE"},
{"content":{"body":"one of the definitions of elide is 'merge'","m.mentions":{},"msgtype":"m.text"},"ts":1744742497224,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$w5sIoOxWeJr8va2ihbzlzWvBehOF3zQu4Dl2fj6Jn-U"},
{"content":{"body":"so I think we are still eliding?  🤷  semantics I suppose","m.mentions":{},"msgtype":"m.text"},"ts":1744742522828,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4kGIxShyh1DZXe0zlgVkkrvANoPbWtJtHx2UDfQyu1M"},
{"content":{"body":"Is it considered bad form to add multiple queue items at the same time? ","format":"org.matrix.custom.html","formatted_body":"Is it considered bad form to add multiple queue items at the same time?","msgtype":"m.text"},"ts":1744742952024,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$I_CLEKrdR9rsqOYlBcwngeixkW_w8pWtYy6hg32_ecs"},
{"content":{"body":"not at all","format":"org.matrix.custom.html","formatted_body":"not at all","m.mentions":{"user_ids":["@jschoi:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$I_CLEKrdR9rsqOYlBcwngeixkW_w8pWtYy6hg32_ecs"}},"msgtype":"m.text"},"ts":1744742970754,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AVtdH4czDg33sX3Z2RRPT_vNmv_cFuRpCy61BiCXCIU"},
{"content":{"body":"what's bad form is to add two topics in one item","m.mentions":{},"msgtype":"m.text"},"ts":1744742998476,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zQzhjdbYrL8zthbW2bqpfwfEnBcULbR2uFL-GIlXIBw"},
{"content":{"body":"Is it still alright to add multiple queue items if they’re added early, before a presentation ends?","msgtype":"m.text"},"ts":1744743034570,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$drOgANJAHa9UY6hWNIvbMFyK9nIkoDTyS2C_1d4dF2c"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1744743042762,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Ue3B3uKqvcThFHGfjHuDw16957i_EMtQ_JwZng4oYbI"},
{"content":{"body":"there is no transcriptionist at this point","m.mentions":{},"msgtype":"m.text"},"ts":1744743687645,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Sm9lb2n2DMo9Yc5yeBbdxBUq7IWZK1n1XYYLgZPAEAE"},
{"content":{"body":"Mathieu Hofman: to your question before time ran out, i see a host hook as a layering point for other _specs_. if the other specs that all embed JS today, HTML being foremost, just end up saying that the host hook does implementation-defined behavior, i think it is misleading editorially to add such a host hook","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: to your question before time ran out, i see a host hook as a layering point for other <em>specs</em>. if the other specs that all embed JS today, HTML being foremost, just end up saying that the host hook does implementation-defined behavior, i think it is misleading editorially to add such a host hook","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1744744931056,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_QB9jjxZK298AzfBu1st2wzcIh0bDBwPWrkVTmt1tBY"},
{"content":{"body":"a host hook suggests there is a prescribed or proscribed behavior common to >1 implementation","m.mentions":{},"msgtype":"m.text"},"ts":1744744957033,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JJjo4BW-bb2PHNi_3jyPQjw-ZFx5ltFlGOXsD7km6Cs"},
{"content":{"body":"I see 2 behavior possible for a host hook:\n- Throw an error / abrupt completion\n- Stop any forward progress\n\nI would very much like some host being able to be clear what their chosen behavior is. While I understand the Web is not interesting in killing the agent cluster, especially if that involves the main renderer thread, I think it makes sense for other hosts. For example maybe a Cloudflare worker would want to terminate the isolate on OOM? Or a node process could opt-in a similar termination (similar to how you can configure termination on unhandled rejection for example)","format":"org.matrix.custom.html","formatted_body":"<p>I see 2 behavior possible for a host hook:</p>\n<ul>\n<li>Throw an error / abrupt completion</li>\n<li>Stop any forward progress</li>\n</ul>\n<p>I would very much like some host being able to be clear what their chosen behavior is. While I understand the Web is not interesting in killing the agent cluster, especially if that involves the main renderer thread, I think it makes sense for other hosts. For example maybe a Cloudflare worker would want to terminate the isolate on OOM? Or a node process could opt-in a similar termination (similar to how you can configure termination on unhandled rejection for example)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744746055027,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DZbaNKC0N4scXmmjTcmeJRMcKePceZ80bBt51snDTac"}
]