[
{"content":{"body":"`Object.is` is the only equality that makes any sense intuitively. the rest are just \"it matches <legacy baggage>\"","format":"org.matrix.custom.html","formatted_body":"<code>Object.is</code> is the only equality that makes any sense intuitively. the rest are just \"it matches &lt;legacy baggage&gt;\"","m.mentions":{},"msgtype":"m.text"},"ts":1744680222293,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iJqq5QfcSOte1UlN5OG8uz0OcR6IYrrY16N8zebgRow"},
{"content":{"body":"you say this but in fact I am pretty sure very nearly everyone would be surprised by a notion of equality in which 0 â‰  -0","m.mentions":{},"msgtype":"m.text"},"ts":1744680488828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YZ3exaLovK4myKKYnfBOL_WGq3sSM8uGvsujsOJ2iOE"},
{"content":{"body":"so, no, I think you just straightforwardly wrong about that unless your claim is about only your own intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680507541,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-i_NOUzWhQtdmuPTgpETMNBav7vdlvlEahEFdIsspKc"},
{"content":{"body":"in which case fine whatever but we should not design the language around your intuition","m.mentions":{},"msgtype":"m.text"},"ts":1744680522714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ACiKwsxgqd3Bqi9lJYTjB55sXdghZL2ClAATioLhbfg"},
{"content":{"body":"i think everyone's assumption there is because of `==` and `===` and `SameValueZero`'s behavior. `-0` and `0` are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","format":"org.matrix.custom.html","formatted_body":"i think everyone's assumption there is because of <code>==</code> and <code>===</code> and <code>SameValueZero</code>'s behavior. <code>-0</code> and <code>0</code> are obviously different things, so without that baggage (or IEEE's), i claim everyone would assume they're different.","m.mentions":{},"msgtype":"m.text"},"ts":1744683034060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V5r7jShRJVCpCVkf9eK3bhQVCpPy1IWngaOHIPVysOY"},
{"content":{"body":"tbf, without that baggage there'd be no -0 to begin with","m.mentions":{},"msgtype":"m.text"},"ts":1744683047602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$exyh197VyHwfLK7XjiUUWr4NlymBP5rDn6Jd0w-h9II"},
{"content":{"body":"the expectation isn't because of `0 === -0`, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","format":"org.matrix.custom.html","formatted_body":"the expectation isn't because of <code>0 === -0</code>, it's because they expect the result of negating zero to be equal to zero, because that's how it always works","m.mentions":{},"msgtype":"m.text"},"ts":1744683964101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5p_hOkFPHNv9eRM4oZWXW3FLKdjtlx57beh0vL3DGLw"},
{"content":{"body":"IEEE requires that `0 === -0` as a consequence of that, not the other way around","format":"org.matrix.custom.html","formatted_body":"IEEE requires that <code>0 === -0</code> as a consequence of that, not the other way around","m.mentions":{},"msgtype":"m.text"},"ts":1744683991125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2lEq0LDLTr8HegNE48F6eJGFhS5N5mhehhu-cPxpUc0"},
{"content":{"body":"the result is that almost no one needs to know about -0 because it behaves identically to 0 except in a few very obscure circumstances","m.mentions":{},"msgtype":"m.text"},"ts":1744684011677,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v6UDb7AXW0N4v05XvnyyR4lfsNnJPsORQQEfuKOnmDE"},
{"content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"ts":1744684058363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA"},
{"content":{"body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"* if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"m.new_content":{"body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that `0 === -0` because you would assume that negating 0 didn't do anything the same way `0 === +0`, which assumption is very close to being correct","format":"org.matrix.custom.html","formatted_body":"if you didn't know that -0 was a special value, and you should not have to know that -0 is a special value unless you are one of the people who cares about those very obscure circumstances, then you would assume that <code>0 === -0</code> because you would assume that negating 0 didn't do anything the same way <code>0 === +0</code>, which assumption is very close to being correct","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SWLKV4Lm1FAsBLZkmK9mES4b5XW5t4bY6OaNnF8wXKA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744684103559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v4052DTWk589taENI178PnJ0xhh4UrO9LnVWA8JNx-M"},
{"content":{"body":"I would counter that only people who are working with floats should have to think about (and make special accommodations for) the weirdness of floats. People writing generic libraries or using foundational built-in data structures should be able to reason algebraically. It's not worth abandoning that to smooth out the sharp edges of floats for people who arguably will need to learn about them eventually anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1744685167331,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OBRPEGz0K2I_YwvDosopEb-qCD7wAJyCqxD3a1fJ0N0"},
{"content":{"body":"there are a lot more people who are working with numbers in javascript than there are people writing generic libraries which need to distinguish between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685696771,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uyq_6XB8HiXYbSYscoW4rQRM8QelZiUZUbndByEQErU"},
{"content":{"body":"people who are using foundational built-in data structures _can_ reason algebraically as long as they don't care about the difference between -0 and 0","format":"org.matrix.custom.html","formatted_body":"people who are using foundational built-in data structures <em>can</em> reason algebraically as long as they don't care about the difference between -0 and 0","m.mentions":{},"msgtype":"m.text"},"ts":1744685748827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$neag4y2bRtPdIwdPCL_5rf1z09u6Khp3Y6m2Z8zmQfY"},
{"content":{"body":"people who do care about that difference have to care anyway","m.mentions":{},"msgtype":"m.text"},"ts":1744685758093,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EOlPFyJQI1ewNrcg_BNuR-LIJg_D2A_2qcd09ChLj0A"},
{"content":{"body":"in practice what happens is that the people writing generic libraries or using these data structures do not distinguish between 0 and -0 and this works out for everyone","m.mentions":{},"msgtype":"m.text"},"ts":1744685844873,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dnN1S3nnTux-eNk5CdiLiLephzyA_mTvY8k6F0bmIgk"},
{"content":{"body":"I suspect you could on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"ts":1744685937238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ"},
{"content":{"body":"possibly on zero hands","m.mentions":{},"msgtype":"m.text"},"ts":1744685939761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"},
{"content":{"body":"* I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"m.new_content":{"body":"I suspect you could count on one hand the total number of people, ever, who both a.) had a case where the difference between 0 and -0 was important to them for reasons other than idealogical purity and b.) were surprised that Sets do not consider those distinct values ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f40qNcDsyeO17om11Tji0kOc8X2Sh1tTHbqZpqwslzQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744685960087,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bEAsAfLBtM-a-RY1Gy0trR2wwJG6YoFj1NcPDM-lRfk"},
{"content":{"body":"Negative zero hands!","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mCIZ70ldWsKekRA-QIH2bNVod6mhnkm5WG1faGZqkV8"}},"msgtype":"m.text"},"ts":1744686772784,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs"},
{"content":{"body":"* Negative zero hands! Which is very different, of course.","m.mentions":{},"m.new_content":{"body":"Negative zero hands! Which is very different, of course.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lpCAmYeNQEsQmo4OyRvj43yzAPqMF8j_5X2OkVwC7cs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744686794652,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$OEGyC8PibPY_dtEF696eht9yx2T4GquDQA7ROU9qo18"},
{"content":{"body":"For what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work. \n\nHe did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)\n\nHe said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript... \n\nThis of course was a mere convenience sample. Take it for what itâ€™s worth. ","format":"org.matrix.custom.html","formatted_body":"<p>For what itâ€™s worth, I checked today with a friend in game devâ€”some who works on physic engines as their job, mostly within Unreal Engineâ€™s C++/Blueprint APIs, for the past decade. He routinely works with floating points in his physics work.</p>\n<p>He did not know what negative zero was, and he doubted any of his colleagues knew either; he said it seemed like trivia that would never affect his team and that hopefully never need to care about. (He seems to deal with trigonometric discontinuities in other ways before ever encountering a negative zero. Or maybe Unreal has abstracted it away enough that theyâ€™ve never needed to care.)</p>\n<p>He said he would find it quite annoying if he had to care when a zero is positive or negative while using it as a key in an Unreal TMap container. But he would never use a float as a key anyway and instead would a strict integer type for keys instead. We are not so lucky in JavaScript...</p>\n<p>This of course was a mere convenience sample. Take it for what itâ€™s worth.</p>","msgtype":"m.text"},"ts":1744692298617,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$fTtzBzSqhTc0N2pLXM987U5MgSpQ4LG40Yf7YsOtD5c"}
]