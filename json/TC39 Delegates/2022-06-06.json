[
{"content":{"body":"Another reminder:  Plenary begins in 70mins!","msgtype":"m.text","org.matrix.msc1767.text":"Another reminder:  Plenary begins in 70mins!"},"ts":1654523436470,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Xpo-AMYC7mPpNuawV3HCjxqten1m8dcr9WHNxYPfnn4"},
{"content":{"body":"10 minutes!","msgtype":"m.text","org.matrix.msc1767.text":"10 minutes!"},"ts":1654527027098,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$F0D-vWIPY6xmmroZSy-18pOzekDtDvMkxHm5jAMgkyw"},
{"content":{"body":"1 minute until plenary!","msgtype":"m.text","org.matrix.msc1767.text":"1 minute until plenary!"},"ts":1654527546430,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$pKqt96WNppIiMRbmdEzr7XgC0dAs2ifSh4QhTyoeWtk"},
{"content":{"body":"We have 20 people attending so far","msgtype":"m.text","org.matrix.msc1767.text":"We have 20 people attending so far"},"ts":1654527725490,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$F0YERYl0_4gruaQx1gujBLMbOtOhZLzQA1EWbsS9q4I"},
{"content":{"body":"hey folks -- i am double booked this morning for the first hour","msgtype":"m.text","org.matrix.msc1767.text":"hey folks -- i am double booked this morning for the first hour"},"ts":1654527787092,"senderName":"yulia | PTO","senderId":"@yulia:mozilla.org","id":"$AhCjes5DxJHUFVN1G--RrK-35UtO87U6GzUFHLpNWZI"},
{"content":{"body":"if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after","msgtype":"m.text","org.matrix.msc1767.text":"if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after"},"ts":1654527802056,"senderName":"yulia | PTO","senderId":"@yulia:mozilla.org","id":"$pbwQTk48B9hX6B2jch5k-A07i_8wudB3QjFTYgDKlFw"},
{"content":{"body":" * if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after","m.new_content":{"body":"if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after","msgtype":"m.text","org.matrix.msc1767.text":"if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after"},"m.relates_to":{"event_id":"$pbwQTk48B9hX6B2jch5k-A07i_8wudB3QjFTYgDKlFw","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * if there are any questions for mozilla, Dan Minor will be present from mozilla -- and I will join after"},"ts":1654527808477,"senderName":"yulia | PTO","senderId":"@yulia:mozilla.org","id":"$O7sNDXaS6K4zovwjCUmucp0wiGo1tZA5wAxbo2POtYU"},
{"content":{"body":"I'm going to be absent today and joining tomorrow. The schedule looks fine for me, but I'd like to be present during the second time discussing ShadowRealms. Sorry for this information coming late.","msgtype":"m.text","org.matrix.msc1767.text":"I'm going to be absent today and joining tomorrow. The schedule looks fine for me, but I'd like to be present during the second time discussing ShadowRealms. Sorry for this information coming late."},"ts":1654527848646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pvajzDLOSBNl0HCeAgjqwCkAyrW8hVlpFnz55dqWU5E"},
{"content":{"body":"I'm excited to be back!","msgtype":"m.text","org.matrix.msc1767.text":"I'm excited to be back!"},"ts":1654527861731,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OEsb5KPvbICZM4keUcbSgcy-mXLskSvDPSurJHSNMH8"},
{"content":{"body":"do we have a draft schedule hackmd?","msgtype":"m.text","org.matrix.msc1767.text":"do we have a draft schedule hackmd?"},"ts":1654531081127,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$0kRNRIFbQ0NdcgPYaNPZbrASRbYAquD3k05ZJ8NXSaU"},
{"content":{"body":"it's linked in the Reflector post","msgtype":"m.text","org.matrix.msc1767.text":"it's linked in the Reflector post"},"ts":1654531159093,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$989joTST92aGPKkQ49epWWD5XA8UT1hhrMl7dozn3ac"},
{"content":{"body":"should i see something right now","msgtype":"m.text","org.matrix.msc1767.text":"should i see something right now"},"ts":1654531164424,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XGJQQJEzesYFDNS0NwZs3jnQglMPLvGfqhWcrVuC0Ho"},
{"content":{"body":"(don't post here)","msgtype":"m.text","org.matrix.msc1767.text":"(don't post here)"},"ts":1654531164634,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$qxCJOUarfcmOEW9r5-9HPl9HP6RmMTRbVvvx6bVmEfY"},
{"content":{"body":"aha! had to refresh. thank you","msgtype":"m.text","org.matrix.msc1767.text":"aha! had to refresh. thank you"},"ts":1654531775333,"senderName":"mpcsh","senderId":"@mpcsh_:matrix.org","id":"$0jZ0cUXZk0qW66QDanB-7RYc0nWelo2AQxAVh9JDsMg"},
{"content":{"body":"shu: can you capture the behavior which got consensus in the notes? not just \"the pr\" but a short summary, in case we find bugs in the PR or whatever","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: can you capture the behavior which got consensus in the notes? not just &quot;the pr&quot; but a short summary, in case we find bugs in the PR or whatever","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: can you capture the behavior which got consensus in the notes? not just \"the pr\" but a short summary, in case we find bugs in the PR or whatever","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: can you capture the behavior which got consensus in the notes? not just &quot;the pr&quot; but a short summary, in case we find bugs in the PR or whatever","mimetype":"text/html"}]},"ts":1654532447532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1SkN-CNTJqXEx4DqLvb-pcZPdaBO-fUsCg--DAEH5KM"},
{"content":{"body":"yes, after this item","msgtype":"m.text","org.matrix.msc1767.text":"yes, after this item"},"ts":1654532553268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u3a-pEMlaWJzMXY4gpRHQ2B2IOPfVSl2u56PYmBY3e8"},
{"content":{"body":"I always love Justin's presentations, they are very clear","msgtype":"m.text","org.matrix.msc1767.text":"I always love Justin's presentations, they are very clear"},"ts":1654532635545,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lB79s1YM9HyIrXVDJgmvDbCKGU5LzrpFePJU86bHoTk"},
{"content":{"body":"snek: one of the possible solutions is to do the same thing as the `await` fast-path, which actually never gets `.then` at all","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: one of the possible solutions is to do the same thing as the <code>await</code> fast-path, which actually never gets <code>.then</code> at all","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: one of the possible solutions is to do the same thing as the `await` fast-path, which actually never gets `.then` at all","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: one of the possible solutions is to do the same thing as the <code>await</code> fast-path, which actually never gets <code>.then</code> at all","mimetype":"text/html"}]},"ts":1654533176630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SVFNMOAyJkzSQSyhd6j39lKcl1SWzQmz7jKeMVPFYec"},
{"content":{"body":"(it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)","format":"org.matrix.custom.html","formatted_body":"(it just checks IsPromise and <code>.constructor</code>, and then assumes <code>.then</code> is the built-in <code>Promise.p.then</code>)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)","mimetype":"text/plain"},{"body":"(it just checks IsPromise and <code>.constructor</code>, and then assumes <code>.then</code> is the built-in <code>Promise.p.then</code>)","mimetype":"text/html"}]},"ts":1654533202287,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oNSkcE4eHxPy1EPNnzoI-W4Qcr_Yqg34mXWSOkgrSOQ"},
{"content":{"body":"did you mean to ping me","msgtype":"m.text","org.matrix.msc1767.text":"did you mean to ping me"},"ts":1654533250320,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YJWucrgOiedBcO9rTmBNyGdTw8rTZGH9zqFtuZfTWrE"},
{"content":{"body":"> <@bakkot:matrix.org> (it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)\n\ncan we really do that? I think there definitely someone overwriting `then` on the Promise instance...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oNSkcE4eHxPy1EPNnzoI-W4Qcr_Yqg34mXWSOkgrSOQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(it just checks IsPromise and <code>.constructor</code>, and then assumes <code>.then</code> is the built-in <code>Promise.p.then</code>)</blockquote></mx-reply>can we really do that? I think there definitely someone overwriting <code>then</code> on the Promise instance...","m.relates_to":{"m.in_reply_to":{"event_id":"$oNSkcE4eHxPy1EPNnzoI-W4Qcr_Yqg34mXWSOkgrSOQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> (it just checks IsPromise and `.constructor`, and then assumes `.then` is the built-in `Promise.p.then`)\n\ncan we really do that? I think there definitely someone overwriting `then` on the Promise instance...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oNSkcE4eHxPy1EPNnzoI-W4Qcr_Yqg34mXWSOkgrSOQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(it just checks IsPromise and <code>.constructor</code>, and then assumes <code>.then</code> is the built-in <code>Promise.p.then</code>)</blockquote></mx-reply>can we really do that? I think there definitely someone overwriting <code>then</code> on the Promise instance...","mimetype":"text/html"}]},"ts":1654533301711,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oZqp2Tm1wjYqE9ykW6aep93Q_peJFaJTdBtmHOHbV4k"},
{"content":{"body":"snek: this was re \"my prediction is this will end up with us moving the Get(\"then\") into the tick\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: this was re &quot;my prediction is this will end up with us moving the Get(&quot;then&quot;) into the tick&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: this was re \"my prediction is this will end up with us moving the Get(\"then\") into the tick\"","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: this was re &quot;my prediction is this will end up with us moving the Get(&quot;then&quot;) into the tick&quot;","mimetype":"text/html"}]},"ts":1654533336205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QhH5uI9UoM0P0EZEoiRlEh5bIB8y444ap-K6XkR-frQ"},
{"content":{"body":"oh","msgtype":"m.text","org.matrix.msc1767.text":"oh"},"ts":1654533340208,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4QDu24qyq4cKecu_BPRKuMypLlE7VM3G9ysHeGUFn3s"},
{"content":{"body":"Jack Works: that's how `await` works, yeah","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: that's how <code>await</code> works, yeah","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Jack Works: that's how `await` works, yeah","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: that's how <code>await</code> works, yeah","mimetype":"text/html"}]},"ts":1654533347303,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YSikA4p-m3vqrS6GPCa7LezuC0fw0ix9JvDei31k7xU"},
{"content":{"body":"that's cuz of the security thing","msgtype":"m.text","org.matrix.msc1767.text":"that's cuz of the security thing"},"ts":1654533347730,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FvyaF2YtOa1dn-Vh8Zkp91-zbD1uvDavo42aYKvECSw"},
{"content":{"body":"This a bit surprise me. So does that mean Promise from another Realm will have 1 more tick to resolve?","msgtype":"m.text","org.matrix.msc1767.text":"This a bit surprise me. So does that mean Promise from another Realm will have 1 more tick to resolve?"},"ts":1654533490576,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wMMu61bcBvAgCa193uD09iBjz40whp4x5gy6NoFHCd4"},
{"content":{"body":"per spec, yeah","msgtype":"m.text","org.matrix.msc1767.text":"per spec, yeah"},"ts":1654533504312,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j1Wc6ZiWXggwNeGIPo8RPPyXzwGdwlSBDR7NjXRRSSc"},
{"content":{"body":"yulia: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: https://blog.izs.me/2013/08/designing-apis-for-asynchrony/","mimetype":"text/html"}]},"ts":1654534079198,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3htf49y3vJoHAeSUriXoNVT0wYeq64N5JraqrThMpkU"},
{"content":{"body":"my topic is also around this question that shu is asking","msgtype":"m.text","org.matrix.msc1767.text":"my topic is also around this question that shu is asking"},"ts":1654534561276,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fZGdYca8GlZGaZxdo_8eEzuCXyBiNUSeQwbNWeS8jwo"},
{"content":{"body":"to be clear: i intensely support making this change for builtins; justin's case for that was quite compelling and convincing","msgtype":"m.text","org.matrix.msc1767.text":"to be clear: i intensely support making this change for builtins; justin's case for that was quite compelling and convincing"},"ts":1654534618939,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$diFRh0tRfLl7xWkJQNSC0lD-ZBcB3N9kEzFWJTRvbpE"},
{"content":{"body":"understood, the subtext is i'm asking a \"who's doing the work\" question","msgtype":"m.text","org.matrix.msc1767.text":"understood, the subtext is i'm asking a \"who's doing the work\" question"},"ts":1654534665071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ga9GicaPXA1wXaIw-b53jh3Xv78W0ot0of2VhOy1ETk"},
{"content":{"body":"> <@shuyuguo:matrix.org> understood, the subtext is i'm asking a \"who's doing the work\" question\n\nwhich work specifically?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ga9GicaPXA1wXaIw-b53jh3Xv78W0ot0of2VhOy1ETk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>understood, the subtext is i&#39;m asking a &quot;who&#39;s doing the work&quot; question</blockquote></mx-reply>which work specifically?","m.relates_to":{"m.in_reply_to":{"event_id":"$ga9GicaPXA1wXaIw-b53jh3Xv78W0ot0of2VhOy1ETk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> understood, the subtext is i'm asking a \"who's doing the work\" question\n\nwhich work specifically?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ga9GicaPXA1wXaIw-b53jh3Xv78W0ot0of2VhOy1ETk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>understood, the subtext is i&#39;m asking a &quot;who&#39;s doing the work&quot; question</blockquote></mx-reply>which work specifically?","mimetype":"text/html"}]},"ts":1654534699560,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$TJwt7fpY8qVQmkw6OEtRIAvYVKDe8YVnKSIC2c4hPRI"},
{"content":{"body":"i'm uncomfortable with an outcome that's like \"convince me no userland stuff breaks\" == \"browsers should ship and see before stage 3 because we have no good procedure to figure out if something breaks\"","msgtype":"m.text","org.matrix.msc1767.text":"i'm uncomfortable with an outcome that's like \"convince me no userland stuff breaks\" == \"browsers should ship and see before stage 3 because we have no good procedure to figure out if something breaks\""},"ts":1654534702977,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OQydOwWPjMb-oDXqOU8JjwkqvgAHXvKcv2ezCvNs9Yk"},
{"content":{"body":"like i don't actually know how to be convinced, myself, that no userland stuff breaks","msgtype":"m.text","org.matrix.msc1767.text":"like i don't actually know how to be convinced, myself, that no userland stuff breaks"},"ts":1654534718119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WUjJBx1Cd_BHuN6OXmMe9FZYOaWyyXG_6JWnLiVFsh0"},
{"content":{"body":"without shipping and seeing","msgtype":"m.text","org.matrix.msc1767.text":"without shipping and seeing"},"ts":1654534721271,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FnP0lZrplJP9P5t7moGcMymc7ZRE_Gc7jxjmzd3WDhs"},
{"content":{"body":"my feeling is similar","msgtype":"m.text","org.matrix.msc1767.text":"my feeling is similar"},"ts":1654534728785,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Rl5YFT6jl0BRVQxh2H0EN8fta1wX55L-xFvzM7le68s"},
{"content":{"body":"but we also have a preference for alternative 1, which would iiuc, side step the concerns around species","msgtype":"m.text","org.matrix.msc1767.text":"but we also have a preference for alternative 1, which would iiuc, side step the concerns around species"},"ts":1654534751655,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$IWfcj0WdUUpV8Ua3P_dlH-fiAqF7KD4bpfSXuu5NkXc"},
{"content":{"body":"this would be appropriate as a normative pr imo, but requires a way to test this","msgtype":"m.text","org.matrix.msc1767.text":"this would be appropriate as a normative pr imo, but requires a way to test this"},"ts":1654534769381,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VQ3cGmyStDdlZBn5EC7ljH6zuMA9AQo2dkpQOCJtAsw"},
{"content":{"body":"yeah i have no real preference for fast pathing natives or not","msgtype":"m.text","org.matrix.msc1767.text":"yeah i have no real preference for fast pathing natives or not"},"ts":1654534787405,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ECXkhCZN4-uHCGCfj50ndgkaRhRBkwgU6WzvuX4V7ZE"},
{"content":{"body":"the context of that comment was as a needs-consensus PR; doing it as a proposal means that \"stage 3\" is the time when we'd discover that","msgtype":"m.text","org.matrix.msc1767.text":"the context of that comment was as a needs-consensus PR; doing it as a proposal means that \"stage 3\" is the time when we'd discover that"},"ts":1654534837699,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DBNCYGG2rbtUecGcjTzgePbdxlLw4KSb-PJ9dEJhwz0"},
{"content":{"body":"i see, so explicitly you're supportive of stage 3 to find out if userland is broken, not blocking stage 3 before being convinced if userland is not broken","msgtype":"m.text","org.matrix.msc1767.text":"i see, so explicitly you're supportive of stage 3 to find out if userland is broken, not blocking stage 3 before being convinced if userland is not broken"},"ts":1654534886162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0mCtmPVdoNu788JcS6YRhpnzg_67wt6JsTg9EvrkGBM"},
{"content":{"body":"correct","msgtype":"m.text","org.matrix.msc1767.text":"correct"},"ts":1654534910380,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5pQNnaaEeGvg_XRNW0-pR_4RaQLVd6-eA3neob6qERU"},
{"content":{"body":"but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to","msgtype":"m.text","org.matrix.msc1767.text":"but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to"},"ts":1654534934930,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MGjIBJRiVRyKHWNUgFw_rmgvtB4U5m7UGgFu1TJwJ0A"},
{"content":{"body":" * but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to","m.new_content":{"body":"but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to","msgtype":"m.text","org.matrix.msc1767.text":"but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to"},"m.relates_to":{"event_id":"$MGjIBJRiVRyKHWNUgFw_rmgvtB4U5m7UGgFu1TJwJ0A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * but i would hope that the proposal can investigate both paths, so that if breakage is discovered, the \"special-case builtins\" path can be quickly shifted to"},"ts":1654534946213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3V0VZ32czR3JWJJ9psfEZkJPa2eTxlEj_bS_CL9z_aw"},
{"content":{"body":"thanks, sgtm","msgtype":"m.text","org.matrix.msc1767.text":"thanks, sgtm"},"ts":1654534996085,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZmlNzLqbai-AX8LmEu2fIEDhvaTHGqane0mduml-QCQ"},
{"content":{"body":"I am imagining the thing mark wants is `IsPromise(p) && GetOwnProperty(p, 'then') == undefined && GetPrototypeOf(p) == Promise.prototype`, basically, which seems like an interesting alternative to the current `constructor` fast-path in `await`","format":"org.matrix.custom.html","formatted_body":"I am imagining the thing mark wants is <code>IsPromise(p) &amp;&amp; GetOwnProperty(p, 'then') == undefined &amp;&amp; GetPrototypeOf(p) == Promise.prototype</code>, basically, which seems like an interesting alternative to the current <code>constructor</code> fast-path in <code>await</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am imagining the thing mark wants is `IsPromise(p) && GetOwnProperty(p, 'then') == undefined && GetPrototypeOf(p) == Promise.prototype`, basically, which seems like an interesting alternative to the current `constructor` fast-path in `await`","mimetype":"text/plain"},{"body":"I am imagining the thing mark wants is <code>IsPromise(p) &amp;&amp; GetOwnProperty(p, 'then') == undefined &amp;&amp; GetPrototypeOf(p) == Promise.prototype</code>, basically, which seems like an interesting alternative to the current <code>constructor</code> fast-path in <code>await</code>","mimetype":"text/html"}]},"ts":1654535026428,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EfJuADq0UgtnFPfZKjtXHa9_5nGtcaa4VGEZjx5hYBs"},
{"content":{"body":"none of those checks are observable, which is nice","msgtype":"m.text","org.matrix.msc1767.text":"none of those checks are observable, which is nice"},"ts":1654535043530,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sPy7i_U6aUJ_AWqCpNXkUYgA7khLSNb6GVEMXz93IT4"},
{"content":{"body":"(because the IsPromise check screens out proxies, specifically)","msgtype":"m.text","org.matrix.msc1767.text":"(because the IsPromise check screens out proxies, specifically)"},"ts":1654535087740,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-f4p1hwxI_Epe1Rd3iInmp6E5ftWTVRzxotUAWxo_yc"},
{"content":{"body":"\"Conditional Advancement\" was the word","msgtype":"m.text","org.matrix.msc1767.text":"\"Conditional Advancement\" was the word"},"ts":1654535204892,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4oTNFgybhXabhIXY_1nMhe2XbkVGGyoUsrGpU5Qb--4"},
{"content":{"body":"Justin Ridgewell: please lmk when the repo's made and i'll update the proposals repo","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: please lmk when the repo's made and i'll update the proposals repo","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: please lmk when the repo's made and i'll update the proposals repo","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: please lmk when the repo's made and i'll update the proposals repo","mimetype":"text/html"}]},"ts":1654535212214,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qvZDxizPTNUQhYoKVBpq8JxRpvx55xgwmfMGHB7XxOA"},
{"content":{"body":"btw starting after lunch, i'm going to be sitting in one of the OpenJS rooms at the JW Marriott in Austin for plenary. whoever's in town is more than welcome to join; DM me for details.","msgtype":"m.text","org.matrix.msc1767.text":"btw starting after lunch, i'm going to be sitting in one of the OpenJS rooms at the JW Marriott in Austin for plenary. whoever's in town is more than welcome to join; DM me for details."},"ts":1654535255955,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bU0mJFPIeA8HbVE-rFOEQDCvP5vItebboxHN6MY7Wu8"},
{"content":{"body":"Plenary resumes in ***2*** mins","format":"org.matrix.custom.html","formatted_body":"Plenary resumes in <em><strong>2</strong></em> mins","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Plenary resumes in ***2*** mins","mimetype":"text/plain"},{"body":"Plenary resumes in <em><strong>2</strong></em> mins","mimetype":"text/html"}]},"ts":1654538266403,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0n2C3eo2HPuU99KVRNt909oR5n_0vwi2ssDSYSRymdg"},
{"content":{"body":"+1 with a similar level of review/confidence as bakkot expressed","format":"org.matrix.custom.html","formatted_body":"+1 with a similar level of review/confidence as <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> expressed","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"+1 with a similar level of review/confidence as bakkot expressed","mimetype":"text/plain"},{"body":"+1 with a similar level of review/confidence as <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> expressed","mimetype":"text/html"}]},"ts":1654539080432,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_iJth4q9Oajnd7YlBNFVMgL1OZosdQ42xdkuiGCuSUQ"},
{"content":{"body":"this change seems generally good but I didn't review all the details","msgtype":"m.text","org.matrix.msc1767.text":"this change seems generally good but I didn't review all the details"},"ts":1654539088592,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gUhH1LRztD6QoqaJ8nnh6Az3nq7J6Ow19hIXFjJ-cgk"},
{"content":{"body":"rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)","mimetype":"text/html"}]},"ts":1654539114618,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$UIJ-k6FuaQdkS6nxTU4PBQQIAQSOsvbJTq7jI2ym9d4"},
{"content":{"body":"rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.","mimetype":"text/html"}]},"ts":1654539183092,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$qupSz98knY7jw0PLJ3ejSR6N_8_FnnQe-vDY5asijeA"},
{"content":{"body":"seems like a scheduling conflict, Rob Palmer ^ possible to reschedule that item before Thurs?","format":"org.matrix.custom.html","formatted_body":"seems like a scheduling conflict, <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> ^ possible to reschedule that item before Thurs?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"seems like a scheduling conflict, Rob Palmer ^ possible to reschedule that item before Thurs?","mimetype":"text/plain"},{"body":"seems like a scheduling conflict, <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> ^ possible to reschedule that item before Thurs?","mimetype":"text/html"}]},"ts":1654539238307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FserRfsjA2J_-JK-SekZ3VH9BkXMAvJX8yVZ0V5z-1k"},
{"content":{"body":"> <@waldemarh:matrix.org> rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.\n\nThat's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qupSz98knY7jw0PLJ3ejSR6N_8_FnnQe-vDY5asijeA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.</blockquote></mx-reply>That's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).","m.relates_to":{"m.in_reply_to":{"event_id":"$qupSz98knY7jw0PLJ3ejSR6N_8_FnnQe-vDY5asijeA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> rbuckton: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.\n\nThat's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qupSz98knY7jw0PLJ3ejSR6N_8_FnnQe-vDY5asijeA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I'm ok with advancing to stage 1 but would prefer not doing the double-advance to stage 2 until I get a chance to review it in detail.</blockquote></mx-reply>That's fine. I may be able to bring it back in July assuming I'm able to attend (I'll be in the middle of a cross-country move so may not be present at the next meeting).","mimetype":"text/html"}]},"ts":1654539260509,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DNie83GVEbjmT1s1sOPmH6gwOuGZdUotrOkg6nlroSg"},
{"content":{"body":"Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.","msgtype":"m.text","org.matrix.msc1767.text":"Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline."},"ts":1654539426203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vt_2525PjjAe4lkNiIbvOp6zlr9zgJxiTQZm4uQmXAc"},
{"content":{"body":" * Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.","m.new_content":{"body":"Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline.","msgtype":"m.text","org.matrix.msc1767.text":"Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline."},"m.relates_to":{"event_id":"$vt_2525PjjAe4lkNiIbvOp6zlr9zgJxiTQZm4uQmXAc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Also, I wrote up the spec text while reviewing the proposal internally with some folks who worked on the implementation in .NET. Fully understand on holding any possible double-advancement given the spec text was added after the deadline."},"ts":1654539439726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0YxIgY1KHa_oWX-pp3NQQQMPHYWwoiGYMPnV0C3nz84"},
{"content":{"body":"> <@waldemarh:matrix.org> rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)\n\nwould it help if we moved it to another day?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UIJ-k6FuaQdkS6nxTU4PBQQIAQSOsvbJTq7jI2ym9d4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)</blockquote></mx-reply>would it help if we moved it to another day?","m.relates_to":{"m.in_reply_to":{"event_id":"$UIJ-k6FuaQdkS6nxTU4PBQQIAQSOsvbJTq7jI2ym9d4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@waldemarh:matrix.org> rbuckton: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)\n\nwould it help if we moved it to another day?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UIJ-k6FuaQdkS6nxTU4PBQQIAQSOsvbJTq7jI2ym9d4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I have some comments on the RegExp Atomic Operators but won't be able to participate on Thursday. I reviewed all the proposals after the advancement deadline, and at that time I did not see the semantics. I see you added the semantics later but I was camping off-grid in the desert for the last week so I did not get a chance to review those. (Fun fact our group learned the hard way: covid can spread outdoors!)</blockquote></mx-reply>would it help if we moved it to another day?","mimetype":"text/html"}]},"ts":1654539477113,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gJoDEs3J2Js7Ly9qSWzRL5XDTZUee4yCMKdjEB2xb4c"},
{"content":{"body":"I'm available Mon-Thu this week. I have a conflict on Thursday.","msgtype":"m.text","org.matrix.msc1767.text":"I'm available Mon-Thu this week. I have a conflict on Thursday."},"ts":1654539498324,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$nPCs8qL085pJggv6troosDXBjddyyYuuhGyrf3opStw"},
{"content":{"body":"I'm availabler Mon-Wed this week. I have a conflict on Thursday.","msgtype":"m.text","org.matrix.msc1767.text":"I'm availabler Mon-Wed this week. I have a conflict on Thursday."},"ts":1654539517906,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$CPVzpHmXQxDI94R5aSSNEpzm9MKxU4Z_eHHqFkuY_MI"},
{"content":{"body":"nobody is running sugarjs on tc53 devices right?","msgtype":"m.text","org.matrix.msc1767.text":"nobody is running sugarjs on tc53 devices right?"},"ts":1654539657443,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_kL_wrudbuHxbdYoHd4GotQjKWZ-jWhJx1MA8tGkCO0"},
{"content":{"body":"I think we can say here, let it be noted that there is a standing disagreement between Shu and Mark on this question of whether frozen environments should be considered","msgtype":"m.text","org.matrix.msc1767.text":"I think we can say here, let it be noted that there is a standing disagreement between Shu and Mark on this question of whether frozen environments should be considered"},"ts":1654539712091,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XG1XziB_Xa6h1xHx8TbOrAk76Ziho2n_vslbWWO4P3k"},
{"content":{"body":"not an old version, surely","msgtype":"m.text","org.matrix.msc1767.text":"not an old version, surely"},"ts":1654539712120,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-k6EB6LsjV7HeJzeOOmWGn8Zre5_iUuCtqzIkFxuE_4"},
{"content":{"body":"what were the bad names that sugarjs uses","msgtype":"m.text","org.matrix.msc1767.text":"what were the bad names that sugarjs uses"},"ts":1654539743100,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hck3988h07JHjgmyVndfkgL04dOdwnmPGQeq5CboT5U"},
{"content":{"body":"I did not hear a disagreement. I heard the opposite: both agree frozen built-ins environments do exists and should be considered the same as other out in the wild code.","msgtype":"m.text","org.matrix.msc1767.text":"I did not hear a disagreement. I heard the opposite: both agree frozen built-ins environments do exists and should be considered the same as other out in the wild code."},"ts":1654539861155,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GjeWiDgvtwj3Zredu7YfmAGxCfyQFgeYBEpM0icqk1E"},
{"content":{"body":"no Mathieu Hofman there's disagreement. i agreed that frozen environments are *a* breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a \"second order\" breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly","format":"org.matrix.custom.html","formatted_body":"no <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> there's disagreement. i agreed that frozen environments are <em>a</em> breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a &quot;second order&quot; breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no Mathieu Hofman there's disagreement. i agreed that frozen environments are *a* breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a \"second order\" breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly","mimetype":"text/plain"},{"body":"no <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> there's disagreement. i agreed that frozen environments are <em>a</em> breakage to consider. i can generalize that disagreement more: the frozen environment breakage is a &quot;second order&quot; breakage to me in that it breaks the users of a library that mutates the environment to be different than the specced standard of 262. i don't want to weigh that very strongly","mimetype":"text/html"}]},"ts":1654539901826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iAXhD5ZLUWCZszhCtKtPlYsgGF6_TFxOpD1olnhgSwk"},
{"content":{"body":"i certainly do not consider it the same as other out in the wild code","msgtype":"m.text","org.matrix.msc1767.text":"i certainly do not consider it the same as other out in the wild code"},"ts":1654539924217,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FSPWdGnu67JodvmFxQFYB8oHfSlXBRLmNDpMwUOwdUM"},
{"content":{"body":"you're not saying your library breaks","msgtype":"m.text","org.matrix.msc1767.text":"you're not saying your library breaks"},"ts":1654539929523,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IFxzumXA9oimn4NV-_02g3X9NE_vv8qMlPl6ON6OKGg"},
{"content":{"body":"you're saying users of your library breaks","msgtype":"m.text","org.matrix.msc1767.text":"you're saying users of your library breaks"},"ts":1654539932304,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SMTVAQ4OOs8DjXV_fRMrz_SD-NB2f9DSjpMgvJGK3tg"},
{"content":{"body":"I wasn't asserting there'd be a breakage in user code running in those environments. I was just saying it may be one type of breakage we might witness in the wild","msgtype":"m.text","org.matrix.msc1767.text":"I wasn't asserting there'd be a breakage in user code running in those environments. I was just saying it may be one type of breakage we might witness in the wild"},"ts":1654540036848,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4834uxmrTzJclrU8oK9lKsqbR_dzpIvbkXI2TrU7-Fg"},
{"content":{"body":"I think we should note in the minutes that this disagreement continues to exist (for clarity).","msgtype":"m.text","org.matrix.msc1767.text":"I think we should note in the minutes that this disagreement continues to exist (for clarity)."},"ts":1654540067839,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qJUR36CViBjjXN0Grn28je5KxMd-5CFo-pI3J6T-7Ek"},
{"content":{"body":"but IIUC the only way you can witness that breakage is if _another_ library mutates something that's by-default writable to be not writable","format":"org.matrix.custom.html","formatted_body":"but IIUC the only way you can witness that breakage is if <em>another</em> library mutates something that's by-default writable to be not writable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but IIUC the only way you can witness that breakage is if _another_ library mutates something that's by-default writable to be not writable","mimetype":"text/plain"},{"body":"but IIUC the only way you can witness that breakage is if <em>another</em> library mutates something that's by-default writable to be not writable","mimetype":"text/html"}]},"ts":1654540089675,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qPugGmU3QstIzpNonXRVty6Zr_1B-zz79WtlWiG9xpQ"},
{"content":{"body":"That it's a risk with a name which may be used as a named prop","msgtype":"m.text","org.matrix.msc1767.text":"That it's a risk with a name which may be used as a named prop"},"ts":1654540092753,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QILZljCj-KHRSpR8qUefKTtOJF1jOyBWuA3Llhsgi_s"},
{"content":{"body":"This discussion seems to show that the disagreement continues to exist, as it has for as long as I've been in TC39","msgtype":"m.text","org.matrix.msc1767.text":"This discussion seems to show that the disagreement continues to exist, as it has for as long as I've been in TC39"},"ts":1654540175220,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Tj_I5ZlU6E1MncZVUbKAQ07HW3ICuN-AqIiW_IaZBfc"},
{"content":{"body":"+1 to dan's assessment","msgtype":"m.text","org.matrix.msc1767.text":"+1 to dan's assessment"},"ts":1654540184242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$05HILvttQte7o0d8GikZT_fkwm7bjSRe-jBAgkTxVdE"},
{"content":{"body":"(still hopeful for a solution to the override mistake which would make these moot)","msgtype":"m.text","org.matrix.msc1767.text":"(still hopeful for a solution to the override mistake which would make these moot)"},"ts":1654540247969,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$STGl_8EybjWnuWPsCjXSLYKER0B9pc_-Ts5JL4LCaOs"},
{"content":{"body":"well, Caitlin Potter prototyped it and found web compat issues...","msgtype":"m.text","org.matrix.msc1767.text":"well, Caitlin Potter prototyped it and found web compat issues..."},"ts":1654540268053,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HiLenRojj5veE7siKWD_JdKEuxCaQVO4JqEw5huyrZ4"},
{"content":{"body":"it's not clear to me what the solution should be, but I hope we can find one","msgtype":"m.text","org.matrix.msc1767.text":"it's not clear to me what the solution should be, but I hope we can find one"},"ts":1654540278729,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QGGUObW7iYsIQ5Z6kjUVirxTXeHToYpz21OwRw0XNZg"},
{"content":{"body":"What was prototyped exactly? I have an approach based on an explicit option bag to `freeze` which would set a slot on the frozen object, which would tweak the `OrdinarySet` step based on the presence of that slot.","format":"org.matrix.custom.html","formatted_body":"What was prototyped exactly? I have an approach based on an explicit option bag to <code>freeze</code> which would set a slot on the frozen object, which would tweak the <code>OrdinarySet</code> step based on the presence of that slot.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What was prototyped exactly? I have an approach based on an explicit option bag to `freeze` which would set a slot on the frozen object, which would tweak the `OrdinarySet` step based on the presence of that slot.","mimetype":"text/plain"},{"body":"What was prototyped exactly? I have an approach based on an explicit option bag to <code>freeze</code> which would set a slot on the frozen object, which would tweak the <code>OrdinarySet</code> step based on the presence of that slot.","mimetype":"text/html"}]},"ts":1654540362358,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Oc8SENz5I2Mfj1rdjBCEIX_dXBLMMlv5zyHCQN1U1nM"},
{"content":{"body":"I would love to see if there is prior experiments that would invalidate this idea","msgtype":"m.text","org.matrix.msc1767.text":"I would love to see if there is prior experiments that would invalidate this idea"},"ts":1654540426827,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$f5-4Ni0eqh9H6Dkmw2ghe-4Gu8vjGWw6nBO9cqppAeQ"},
{"content":{"body":"oh yeah what was prototyped was a more direct change of the Set behavior, we didn't try that tweak","msgtype":"m.text","org.matrix.msc1767.text":"oh yeah what was prototyped was a more direct change of the Set behavior, we didn't try that tweak"},"ts":1654540477145,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GlaoOe26CPJ3_mcWd6BA3RR2KMDlGsWpRJHgsNCOZmU"},
{"content":{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. _[i.e., the chronologically first matching local time]_\n> Else [_a local time skipped at a positive time zone transition_], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [_corresponding with_] tBefore is the largest integral Number < t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. _[i.e., the chronologically first matching local time]_\n> Else [_a local time skipped at a positive time zone transition_], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [_corresponding with_] tBefore is the largest integral Number < t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1654540500811,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$W92eXWG1OAN_g7jwnGADGBtgkZsr6__BY2rNuPrMfh0"},
{"content":{"body":" * bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","m.new_content":{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$W92eXWG1OAN_g7jwnGADGBtgkZsr6__BY2rNuPrMfh0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1654540532844,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$FdYumM1sTyu4YuBWr7diSVmryRB7yn0vPbR2cS8r97c"},
{"content":{"body":"if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?","msgtype":"m.text","org.matrix.msc1767.text":"if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?"},"ts":1654540558480,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OkjzRZi25Fp2MU8fjwTjQnr-mj0FNuWwCGhdj6v5fbo"},
{"content":{"body":" * bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","m.new_content":{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$W92eXWG1OAN_g7jwnGADGBtgkZsr6__BY2rNuPrMfh0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot: regarding \"Where do you get your default time zone?\", TL;DR is that we're covered.\n\nMore details:\n\nThe requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)\n\n> When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be **sorted by ascending numerical value**. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.\n\nAnd specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)\n\n> If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants\\[0\\]. _\\[i.e., the chronologically first matching local time\\]_\n> Else \\[_a local time skipped at a positive time zone transition_\\], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds \\[_corresponding with_\\] tBefore is the largest integral Number \\< t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants\n> …\n> t is **interpreted using the time zone offset before the transition**","mimetype":"text/plain"},{"body":" * <p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: regarding &quot;Where do you get your default time zone?&quot;, TL;DR is that we're covered.</p>\n<p>More details:</p>\n<p>The requirements are described in GetNamedTimeZoneEpochNanoseconds (which returns a List of nanoseconds since epoch for a specific time zone name and local time) similar to the current text in LocalTZA: https://arai-a.github.io/ecma262-compare/?pr=2781#sec-getnamedtimezoneepochnanoseconds (emphasis mine)</p>\n<blockquote>\n<p>When the input represents a local time occurring more than once because of a negative time zone transition (e.g. when daylight saving time ends or the time zone offset is decreased due to a time zone rule change), the returned List will have more than one element and will be <strong>sorted by ascending numerical value</strong>. When the input represents a local time skipped because of a positive time zone transition (e.g. when daylight saving time begins or the time zone offset is increased due to a time zone rule change), the returned List will be empty. Otherwise, the returned List will have one element.</p>\n</blockquote>\n<p>And specified more precisely in UTC (which interprets its input as a number representing local time and returns a single milliseconds since epoch): https://arai-a.github.io/ecma262-compare/?pr=2781#sec-utc-t (emphasis mine)</p>\n<blockquote>\n<p>If possibleInstants is not empty, then… Let disambiguatedInstant be possibleInstants[0]. <em>[i.e., the chronologically first matching local time]</em><br>Else [<em>a local time skipped at a positive time zone transition</em>], … Let possibleInstants be GetNamedTimeZoneEpochNanoseconds [<em>corresponding with</em>] tBefore is the largest integral Number &lt; t for which possibleInstants is not empty (i.e., tBefore represents the last local time before the transition) … Let disambiguatedInstant be the last element of possibleInstants<br>…<br>t is <strong>interpreted using the time zone offset before the transition</strong></p>\n</blockquote>\n","mimetype":"text/html"}]},"ts":1654540560018,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$JdV4dNjdF5kRmscAV22o3DiiVozARoCGMo-Dx-tbb-A"},
{"content":{"body":"or maybe you mean for preventExtensions in general?","msgtype":"m.text","org.matrix.msc1767.text":"or maybe you mean for preventExtensions in general?"},"ts":1654540583098,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aYT3gBIysrSxQDMsrqKL1bDHnm-bNiKQj8L0FdnNaUo"},
{"content":{"body":"> <@littledan:matrix.org> if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?\n\nWe did a few weeks ago","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OkjzRZi25Fp2MU8fjwTjQnr-mj0FNuWwCGhdj6v5fbo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>if we do something with freeze, I guess we&#39;d need to figure out the MOP implications. Maybe we could discuss this in an SES call?</blockquote></mx-reply>We did a few weeks ago","m.relates_to":{"m.in_reply_to":{"event_id":"$OkjzRZi25Fp2MU8fjwTjQnr-mj0FNuWwCGhdj6v5fbo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> if we do something with freeze, I guess we'd need to figure out the MOP implications. Maybe we could discuss this in an SES call?\n\nWe did a few weeks ago","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OkjzRZi25Fp2MU8fjwTjQnr-mj0FNuWwCGhdj6v5fbo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>if we do something with freeze, I guess we&#39;d need to figure out the MOP implications. Maybe we could discuss this in an SES call?</blockquote></mx-reply>We did a few weeks ago","mimetype":"text/html"}]},"ts":1654540584379,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sKaNha7zJs5u_Xn1QKiaziSAP82VA7xmRGGbWSuxb0o"},
{"content":{"body":"oh oops! I'll try to catch up on notes","msgtype":"m.text","org.matrix.msc1767.text":"oh oops! I'll try to catch up on notes"},"ts":1654540592434,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$940yVZZe0lJ1gyuOsnxdYZOCu0JQwhwvkTu1EwctIhY"},
{"content":{"body":"today would anything break if we got rid of IsHTMLDDA","msgtype":"m.text","org.matrix.msc1767.text":"today would anything break if we got rid of IsHTMLDDA"},"ts":1654540663724,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eYisFV2qSuJt-XMxZ0NaPi-ztdg1w3l5ZqOu3qRZqeQ"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1654540682161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hTowSzhwA77sRwB0HlJlU0FqbZLZl0eXA9s46Zo-SPc"},
{"content":{"body":"i don't hear any audio at all","msgtype":"m.text","org.matrix.msc1767.text":"i don't hear any audio at all"},"ts":1654540724127,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rPsmebr7bmLorB7tC8HyV2EcBbtf42kqjP-F1oGAZHE"},
{"content":{"body":"is it just me?","msgtype":"m.text","org.matrix.msc1767.text":"is it just me?"},"ts":1654540727435,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eOQbPQ07tS6pJcSZUgxtJKedQSlDklY8sKNXDqAbYck"},
{"content":{"body":"yes, refresh","msgtype":"m.text","org.matrix.msc1767.text":"yes, refresh"},"ts":1654540752434,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$2FNMBD13VjY2t5gErF-nf9NQ2E_EL4EDM9XmSvZkR1g"},
{"content":{"body":"?","msgtype":"m.text","org.matrix.msc1767.text":"?"},"ts":1654540753363,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dEvY92VgOadP447jgDmi2oEkEZA7L_XtczuKV3NUISU"},
{"content":{"body":"k","msgtype":"m.text","org.matrix.msc1767.text":"k"},"ts":1654540755358,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nZCmEJ3Aus075S1RjvDvcrBxPltxmT72rOrwPclWmeE"},
{"content":{"body":"man sugar used all the cool names","msgtype":"m.text","org.matrix.msc1767.text":"man sugar used all the cool names"},"ts":1654540819612,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$l_S6tjvzklXLjRfyseCJYZqVGExnPfKNPu2_em79Cto"},
{"content":{"body":"though I guess `groupBy` was uniquely bad because it made use of it during startup","format":"org.matrix.custom.html","formatted_body":"though I guess <code>groupBy</code> was uniquely bad because it made use of it during startup","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"though I guess `groupBy` was uniquely bad because it made use of it during startup","mimetype":"text/plain"},{"body":"though I guess <code>groupBy</code> was uniquely bad because it made use of it during startup","mimetype":"text/html"}]},"ts":1654540838203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7mARzS6Ec3KplALRoYvaHd1FK0fJ_uffN4Cwyaq-JiQ"},
{"content":{"body":"or something like that","msgtype":"m.text","org.matrix.msc1767.text":"or something like that"},"ts":1654540844008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AhDCcfhXRrjfFMGPHyvkjA09nivgeXvRpBfOh1Jgsqw"},
{"content":{"body":"`groupedBy`?","format":"org.matrix.custom.html","formatted_body":"<code>groupedBy</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`groupedBy`?","mimetype":"text/plain"},{"body":"<code>groupedBy</code>?","mimetype":"text/html"}]},"ts":1654540851668,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zszEMlYgoNWskEPMRfXbBED_BkzV58FHlq9h8w7QnmI"},
{"content":{"body":"`gimmeGroups`","format":"org.matrix.custom.html","formatted_body":"<code>gimmeGroups</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`gimmeGroups`","mimetype":"text/plain"},{"body":"<code>gimmeGroups</code>","mimetype":"text/html"}]},"ts":1654540866508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yxauy2oQc0NYDKR-RHZhAVQJxIw06nIJUei4sYQwLKM"},
{"content":{"body":"we just decided to go with `group` I think","format":"org.matrix.custom.html","formatted_body":"we just decided to go with <code>group</code> I think","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we just decided to go with `group` I think","mimetype":"text/plain"},{"body":"we just decided to go with <code>group</code> I think","mimetype":"text/html"}]},"ts":1654540868807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NqW_eaKtososmy3WIiU3KDxQtnroWfgk4ZTuO6RDuFE"},
{"content":{"body":"so i hear","msgtype":"m.text","org.matrix.msc1767.text":"so i hear"},"ts":1654540874191,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-r-DQJwTWHFnjkVoY2K_Hl77FbDO8_RJtqW2ODXutvk"},
{"content":{"body":"Have a question: is findLast/findLastIndex in ES2022 or ES2023?","msgtype":"m.text","org.matrix.msc1767.text":"Have a question: is findLast/findLastIndex in ES2022 or ES2023?"},"ts":1654540876353,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$5W-aX7mNzdWJWxZCO6CyxgGkulecvS4g8dbVP5tA6_U"},
{"content":{"body":"groupedBy would probably make more sense though if we consider the existence of r&t","msgtype":"m.text","org.matrix.msc1767.text":"groupedBy would probably make more sense though if we consider the existence of r&t"},"ts":1654540887348,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$c49zaDXzSv6cCSBbFOvZ79o2qbvCBt-XkSoYjyE24mI"},
{"content":{"body":"2023","msgtype":"m.text","org.matrix.msc1767.text":"2023"},"ts":1654540888686,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6sby1oPnBm5s94FTbvrWNksGwJQJBsUZ-CYK1dQqWWQ"},
{"content":{"body":" * 2023","m.new_content":{"body":"2023","msgtype":"m.text","org.matrix.msc1767.text":"2023"},"m.relates_to":{"event_id":"$6sby1oPnBm5s94FTbvrWNksGwJQJBsUZ-CYK1dQqWWQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * 2023"},"ts":1654540890675,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$148xj3JVzBlojtxlOoDGY7Ln1OkJrHo-V7H3m2CWGn0"},
{"content":{"body":"2022 is already cut","msgtype":"m.text","org.matrix.msc1767.text":"2022 is already cut"},"ts":1654540894319,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ajWY2mVDlMCcrrSgyRj2Ul7HrRWHV4C9tHMDc4x-Oeg"},
{"content":{"body":"Ok. So we need to fix it in tc39/proposals page?","msgtype":"m.text","org.matrix.msc1767.text":"Ok. So we need to fix it in tc39/proposals page?"},"ts":1654540931282,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$AFoRhKtnBocqCvTfy1YSHZ1_DFYIJWFTrCGSzsZAhbQ"},
{"content":{"body":"yep, thanks, just fixed","msgtype":"m.text","org.matrix.msc1767.text":"yep, thanks, just fixed"},"ts":1654540948291,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RN0_64tpCcCFFCwPuOQFzzugaxx7saRTYwpoyD7duaE"}
]