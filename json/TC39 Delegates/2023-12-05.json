[
{"content":{"body":"i understand the rationale, but i think it’d be better to catch as many things as possible before runtime even if we can’t catch them all.","msgtype":"m.text"},"ts":1701740516007,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nhzciDNwv4UIgryiUBm-ZpBx8nhRbvoHJaxj8kSANr4"},
{"content":{"body":"I think it just adds arbitrary complexity to the spec and to implementations, not to mention the additional overhead during parse and static semantics evaluation, for almost no gain. ","format":"org.matrix.custom.html","formatted_body":"I think it just adds arbitrary complexity to the spec and to implementations, not to mention the additional overhead during parse and static semantics evaluation, for almost no gain.","msgtype":"m.text"},"ts":1701742786518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p1ScosLvoJvZO5puHkgSls3JyhoBzCLhscbOeKS28Q4"},
{"content":{"body":"There's a long tail of things in JS that are syntactically valid, but otherwise incorrect, like `3()`, or `f() = 1`, or `null.x`. Banning those syntactically would significantly increase the complexity of both the existing specification text and new proposals. I'm not saying I'm opposed, just that I don't think the costs are worth the benefits.","format":"org.matrix.custom.html","formatted_body":"There's a long tail of things in JS that are syntactically valid, but otherwise incorrect, like <code>3()</code>, or <code>f() = 1</code>, or <code>null.x</code>. Banning those syntactically would significantly increase the complexity of both the existing specification text and new proposals. I'm not saying I'm opposed, just that I don't think the costs are worth the benefits.","m.mentions":{},"msgtype":"m.text"},"ts":1701743295924,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1YzHOnjC-IvCm03EGXiQx2N_mU0iYjeTUdRaTEzrf6o"},
{"content":{"body":"fully agreed with rbuckton , though pedantically: `f() = 1` is actually syntactically _invalid_ per spec but needs to be legal in engines for web-compat reasons; there is a longstanding open issue about this that no one has gotten around to fixing https://github.com/tc39/ecma262/issues/257","format":"org.matrix.custom.html","formatted_body":"fully agreed with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> , though pedantically: <code>f() = 1</code> is actually syntactically <em>invalid</em> per spec but needs to be legal in engines for web-compat reasons; there is a longstanding open issue about this that no one has gotten around to fixing https://github.com/tc39/ecma262/issues/257","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701747883993,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8z_whIn4xIWkGX-d88ivUdE9v1VJ3JkAbEakzViggFs"},
{"content":{"body":"That's exactly the kind of complexity that adding additional syntactic bans would litter throughout the whole spec.","m.mentions":{},"msgtype":"m.text"},"ts":1701748644664,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1_FFeDv2RfWCbarTkPVy0e0d6DvbvhZvXgFynoWDzpk"},
{"content":{"body":"> <@ljharb:matrix.org> how come `class Foo extends \"bar\" {}` is valid syntax given that even with return override it can't ever work?\n\ncan you wrap try catch outside of super()?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mV6UK-UV4-ekfp2Xr8K5ngBXtJIWFC7Vgiva1OW9J_Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />how come <code>class Foo extends \"bar\" {}</code> is valid syntax given that even with return override it can't ever work?</blockquote></mx-reply>can you wrap try catch outside of super()?","m.relates_to":{"m.in_reply_to":{"event_id":"$mV6UK-UV4-ekfp2Xr8K5ngBXtJIWFC7Vgiva1OW9J_Y"}},"msgtype":"m.text"},"ts":1701759176729,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9WYZ7poYZKidmP4V3fyvMudQHMGHcKUlw8Am8ZWMRx8"},
{"content":{"body":"Yes.","m.mentions":{},"msgtype":"m.text"},"ts":1701759265157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1uvVXmKzRW3B0M_5fkjFqaAcuOgB3n5Jcahf5AjuM2k"},
{"content":{"body":"Though `class Foo extends \"bar\" {}` will throw on class declaration evaluation, so the constructor will never be called","format":"org.matrix.custom.html","formatted_body":"Though <code>class Foo extends \"bar\" {}</code> will throw on class declaration evaluation, so the constructor will never be called","m.mentions":{},"msgtype":"m.text"},"ts":1701759290442,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KDcCoejrCQ9hrHqSTVQca7Ev2VwrWyAszb9osFZ4_sw"}
]