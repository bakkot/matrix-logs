[
{"content":{"body":"> <@rkirsling:matrix.org> btw if anybody else didn't get added to the Tokyo 2024 channel, please do speak up!\n\nOh! Could you add me too? Thanks!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_ZumO0SXtzbZeV7OdJNRn_1GVisuHFBoY-34Cm1IZnU\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>btw if anybody else didn't get added to the Tokyo 2024 channel, please do speak up!</blockquote></mx-reply>Oh! Could you add me too? Thanks!","m.relates_to":{"m.in_reply_to":{"event_id":"$_ZumO0SXtzbZeV7OdJNRn_1GVisuHFBoY-34Cm1IZnU"}},"msgtype":"m.text"},"ts":1728346329289,"senderName":"yusukesuzuki","senderId":"@yusukesuzuki:matrix.org","id":"$8jIFcjwrYyM9skONEnq7BSF8gp6nYOK4dgAnQ04UQ6c"},
{"content":{"body":"Has anyone dialled in yet?","msgtype":"m.text"},"ts":1728348280228,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$t77LOSW71Tlgr0nTJx3NYf-8UvvPrOo0HzeBwwKtdZs"},
{"content":{"body":"> <@yusukesuzuki:matrix.org> Oh! Could you add me too? Thanks!\n\nIt says you've already been added!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8jIFcjwrYyM9skONEnq7BSF8gp6nYOK4dgAnQ04UQ6c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@yusukesuzuki:matrix.org\">@yusukesuzuki:matrix.org</a><br />Oh! Could you add me too? Thanks!</blockquote></mx-reply>It says you've already been added!","m.relates_to":{"m.in_reply_to":{"event_id":"$8jIFcjwrYyM9skONEnq7BSF8gp6nYOK4dgAnQ04UQ6c"}},"msgtype":"m.text"},"ts":1728348341693,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BjGN6BhG84P-Rycaolq-UdpYl8BWn0pr8ArbMBYHBJw"},
{"content":{"body":"Oops! Thank you!!","msgtype":"m.text"},"ts":1728348377415,"senderName":"yusukesuzuki","senderId":"@yusukesuzuki:matrix.org","id":"$SKy0t4JbAFHlRDW63LyRoXiG0ptf4C4WgylFzWw2LVI"},
{"content":{"body":"We are prepping to start.  If you wish to help, please sign up to a session for Note Editing!\n\nhttps://github.com/tc39/Reflector/issues/537#issuecomment-2394180693","m.mentions":{},"msgtype":"m.text"},"ts":1728348638881,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$-QIN6sRexk1bb-tpipzVRnS-kjer1L8JTR92lKpvNvk"},
{"content":{"body":"The Teams call is up! Please rember to NOT sign into Teams itself. Join the call as a guest.","msgtype":"m.text"},"ts":1728348851820,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$dgm_zLc7ZnfY6hAgUTkMQdjLnIA3FWSY-Es0uPsQppw"},
{"content":{"body":"We have 4 slots for non-ordinary members in ExeCom","m.mentions":{},"msgtype":"m.text"},"ts":1728350841381,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5dF4PqIvfNCxT7UDFEgk_OVOSbNdfsuQD2xu7jvBrGk"},
{"content":{"body":"there are more slots than current members. I encourage everyone to join!","m.mentions":{},"msgtype":"m.text"},"ts":1728350862569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$98fONdMDCi4bVS5EgZsi6CE2fl8WrjnK5b5Na93ClG8"},
{"content":{"body":"Chris de Almeida: the wintercg vote","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: the wintercg vote","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"ts":1728351133120,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$io6t5OxXUliue5qzl-4ipDllE1R6aWlhGN4O1UUsf5I"},
{"content":{"body":"shu: maybe DE can elaborate, but my understanding is that they are going to fully move to Ecma, rather than have the split of the CG vs WG","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: maybe DE can elaborate, but my understanding is that they are going to fully move to Ecma, rather than have the split of the CG vs WG","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1728351254911,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Xn3SOKitkecIBoquW1GvlO901DrpKRmG4F7iPWXElyQ"},
{"content":{"body":"the IPR concerns were due to doing some things in w3c and then some things in ecma and that was problematic","m.mentions":{},"msgtype":"m.text"},"ts":1728351278630,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$RlkHYnQsmua4LTjXmBxcAv55ajwgaPCrgCYac2DQg4M"},
{"content":{"body":"last time that move was voted on and the vote failed due to IPR concerns. i am asking a clarification on what has changed since then","m.mentions":{},"msgtype":"m.text"},"ts":1728351297430,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$28DRBSA1_7Z_DHqgkPX-5EMjgBukYY64agfJq1RdirA"},
{"content":{"body":"because what i hear internally is \"it's pending legal review\", and aki's presentation makes it sound like it's a done thing","m.mentions":{},"msgtype":"m.text"},"ts":1728351308329,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RLEq6NRLyK8Z4sQBDAVvSKJ8NUy2md4cb8nAZv-HVSw"},
{"content":{"body":"I can talk on this if people want","m.mentions":{},"msgtype":"m.text"},"ts":1728351310815,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$4ouZM3it2qMkSqLvgH6x8nTgTkOxYUoFUMuYp_vL4-o"},
{"content":{"body":"> <@softwarechris:matrix.org> shu: maybe DE can elaborate, but my understanding is that they are going to fully move to Ecma, rather than have the split of the CG vs WG\n\nbut this is the tl;dr yeah","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Xn3SOKitkecIBoquW1GvlO901DrpKRmG4F7iPWXElyQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: maybe DE can elaborate, but my understanding is that they are going to fully move to Ecma, rather than have the split of the CG vs WG</blockquote></mx-reply>but this is the tl;dr yeah","m.mentions":{"user_ids":["@softwarechris:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Xn3SOKitkecIBoquW1GvlO901DrpKRmG4F7iPWXElyQ"}},"msgtype":"m.text"},"ts":1728351332586,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$wvYNUig6QbCWN_RQfNJkR1erRKwE6sqOlZyS6uEoxvI"},
{"content":{"body":"If you're interested in the founding documents, please let me know and I'll send them to you. I've already sent to Chris Wilson and Tantek Celik, in addition to the Ecma ExeCom.","m.mentions":{},"msgtype":"m.text"},"ts":1728351370733,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iO1cRuL78729pONrgHVdu8iZCI7Ki9AzBH7VQ8bvVyM"},
{"content":{"body":"specifically i'm wondering are you doing the thing where you're sending all the contributors IP transfer documents or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1728351400005,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8GHYPGcPk3MyLpaCFzuezojfXk1TrB3LSxyrE2PF7ys"},
{"content":{"body":"> <@shuyuguo:matrix.org> specifically i'm wondering are you doing the thing where you're sending all the contributors IP transfer documents or whatever\n\nyes, and this is OK since it's a one-time thing rather than an ongoing operation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8GHYPGcPk3MyLpaCFzuezojfXk1TrB3LSxyrE2PF7ys?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>specifically i&#39;m wondering are you doing the thing where you&#39;re sending all the contributors IP transfer documents or whatever</blockquote></mx-reply>yes, and this is OK since it's a one-time thing rather than an ongoing operation","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8GHYPGcPk3MyLpaCFzuezojfXk1TrB3LSxyrE2PF7ys"}},"msgtype":"m.text"},"ts":1728351419953,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bpa1XGK0K0ImLI7JOsBHdV4ZpwBY64Cyylmqn7KTohg"},
{"content":{"body":"is that thign pending legal review from the original folks who raised the IP concerns","m.mentions":{},"msgtype":"m.text"},"ts":1728351432198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cGJtLaZh13U7x4g33FIGrkEvNit0uAb2tsVC6_YJcA4"},
{"content":{"body":"> <@shuyuguo:matrix.org> is that thign pending legal review from the original folks who raised the IP concerns\n\nI don't know who it's pending legal review from. The people who raised concerns previously who I've been able to follow up with were positive about this version. I haven't been able to follow up with everyone.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cGJtLaZh13U7x4g33FIGrkEvNit0uAb2tsVC6_YJcA4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is that thign pending legal review from the original folks who raised the IP concerns</blockquote></mx-reply>I don't know who it's pending legal review from. The people who raised concerns previously who I've been able to follow up with were positive about this version. I haven't been able to follow up with everyone.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cGJtLaZh13U7x4g33FIGrkEvNit0uAb2tsVC6_YJcA4"}},"msgtype":"m.text"},"ts":1728351513123,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CbSUbc1lFHuJoXywbMSbzmqMPtGkmtXpzvsfNJSmP-w"},
{"content":{"body":"i'm assuming at least mozilla and google legal","m.mentions":{},"msgtype":"m.text"},"ts":1728351604866,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NqVJEUqie457plfrxsaoK7ZYqXvhI-DuRozGsfkrujE"},
{"content":{"body":"fwiw the audio sounds fine on the call","m.mentions":{},"msgtype":"m.text"},"ts":1728351784757,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_wboo6rxGGE0GdepvJ56RM2VWgIelCq0Ft480oTITG8"},
{"content":{"body":"Someone wanna drop that screenshot of TCQ questions for me so I can answer them here?","m.mentions":{},"msgtype":"m.text"},"ts":1728351957350,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$r30TfQekr8B4S4l_-cRRKcgMDRY0iSj95nVvBARBU5Y"},
{"content":{"body":"we shouldn't paste here","m.mentions":{},"msgtype":"m.text"},"ts":1728351980301,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$WdjcVJkPLOFA0IwmMj09UNaz2hxGtr7CZNbNuQF4ehY"},
{"content":{"body":"(mine was answered in the chat just now)","m.mentions":{},"msgtype":"m.text"},"ts":1728351983512,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BUtUofS7A5GbWAjPjFCQmo0FfEmAfKiAB0f3Lkgamjo"},
{"content":{"body":"> <@akirose:matrix.org> Someone wanna drop that screenshot of TCQ questions for me so I can answer them here?\n\nI don't think there was anything else not already answered here (just re tc55 original proposal ipr things)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$r30TfQekr8B4S4l_-cRRKcgMDRY0iSj95nVvBARBU5Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@akirose:matrix.org\">@akirose:matrix.org</a><br>Someone wanna drop that screenshot of TCQ questions for me so I can answer them here?</blockquote></mx-reply>I don't think there was anything else not already answered here (just re tc55 original proposal ipr things)","m.mentions":{"user_ids":["@akirose:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$r30TfQekr8B4S4l_-cRRKcgMDRY0iSj95nVvBARBU5Y"}},"msgtype":"m.text"},"ts":1728352031163,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$KYZz8sIqSUihpdLyMpHhnyTJp9pfGYHqvv0I7H7x9oA"},
{"content":{"body":"Chris de Almeida sent me the screenshot (thanks!)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a> sent me the screenshot (thanks!)","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"ts":1728352078417,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$kVF8Fo2JrL9vqOdaRXE31B6ppKOQo7M-ZIZ6L5LQjQc"},
{"content":{"body":"Ben: when you get a chance could you add a slides link to the agenda","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@benallen:igalia.com\">Ben</a>: when you get a chance could you add a slides link to the agenda","m.mentions":{"user_ids":["@benallen:igalia.com"]},"msgtype":"m.text"},"ts":1728352093405,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$txSuVRde67zgxif9Dkhytz3rM5wQAoFSw3vGRBVEd9k"},
{"content":{"body":"Doing now","m.mentions":{},"msgtype":"m.text"},"ts":1728352103462,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$1Vk_LLug_90cuRGzzkJgQQmn_YD8XK_ykjogxc1w92Q"},
{"content":{"body":"suggestion for Mozilla's concerns about being able to review the agenda: We require all agenda items to be added before the deadline, unless there is a particular \"emergency\"/reason for why the addition was delayed. We strongly encourage slides, repos or other supporting materials to be added to the agenda before the deadline or soon after it, with their contents done as early as possible.","m.mentions":{},"msgtype":"m.text"},"ts":1728352119665,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MYi1kkz6ilM3a3F0cR-mp16TftjbczWtB81e50ll-7w"},
{"content":{"body":"the suggestions dan made above (slides & content must be available) makes a lot of sense. I would also suggest (to avoid issues in the future) that we move the deadline to 14 days (in line with ecma), and we have an indication of the amount of work (in hours) so far added to the meeting. We can't approve what we don't review, and we want to make sure that the output of tc39 is as high as possible. I think that is a shared goal. If we can plan our meeting a bit better I think it would help. ","m.mentions":{},"msgtype":"m.text"},"ts":1728352597462,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VRQLBZzzMCimxAWjK_72XoUBNeLouGDCU_6EeMP3_MM"},
{"content":{"body":"I am not sure if many delegates are reviewing all proposal before the meeting, but it is a requirement for us as implementers, because if something lands and we didn't really think about it -- we are left holding the bag","m.mentions":{},"msgtype":"m.text"},"ts":1728352626918,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$EFay_exvxDhQe7nT5Do1XSJjLQVNoHed1bxaEGkk0G0"},
{"content":{"body":"Ecma rules say 21 days","m.mentions":{},"msgtype":"m.text"},"ts":1728352660756,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$j6vEW8RriK1k6_Q6iwkScgUtnAZRY0vWI2ahTKaL5RE"},
{"content":{"body":"fwiw those suggestions are already the case. supporting materials that aren't in by the deadline allows prodecural blocking","m.mentions":{},"msgtype":"m.text"},"ts":1728352665205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CLACAdIOA5C77eqKL61ybBBgTCVUyEdp9ZuGH4gGrJ0"},
{"content":{"body":"ah my mistake","m.mentions":{},"msgtype":"m.text"},"ts":1728352666944,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$h4MqUU8MzTkRC5I8RBYuFUxKH9hYoTogv7oulhjie58"},
{"content":{"body":" * fwiw those suggestions are already the case. supporting materials that aren't in by the deadline allows procedural blocking","m.mentions":{},"m.new_content":{"body":"fwiw those suggestions are already the case. supporting materials that aren't in by the deadline allows procedural blocking","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CLACAdIOA5C77eqKL61ybBBgTCVUyEdp9ZuGH4gGrJ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728352670440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K4T8jMao2oMh1QHhT9XFhpEBRDMW3ssF0xC8aKrtI1k"},
{"content":{"body":" * fwiw those suggestions are already the case. supporting materials that aren't in by the deadline allows for procedural blocking","m.mentions":{},"m.new_content":{"body":"fwiw those suggestions are already the case. supporting materials that aren't in by the deadline allows for procedural blocking","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CLACAdIOA5C77eqKL61ybBBgTCVUyEdp9ZuGH4gGrJ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728352684285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BMLhmSeHW17BFdOfCQ7Uh-V6T6NBLLjYR8snmjNYPi0"},
{"content":{"body":"we've confirmed with Ecma in the past that TC39 may adopt its own deadline (otherwise I would've worked on getting the rules changed). But 14 days seems reasonable to me.","m.mentions":{},"msgtype":"m.text"},"ts":1728352700553,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-JGX9k-Z8ABPOmcvp-WpUEPHfk0qEthuxC8WDL-E1_w"},
{"content":{"body":"at least for proposals 2.7+ i think an earlier deadline makes sense","m.mentions":{},"msgtype":"m.text"},"ts":1728352702130,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YzBcgs5v597FtHec4U95RX0HUI3tmHOeU2NFWjAguYo"},
{"content":{"body":"yeah i was having a conversation the other day about this and surprised to discover TC39's deadline was different from Ecma's, i totally forgot","m.mentions":{},"msgtype":"m.text"},"ts":1728352708969,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$RoVYs_RNFLVnbbtACM5cNCuucY_mu85rHrDPws74gpo"},
{"content":{"body":"the current 5 working days that we have to fully review all of the proposals was not enough","m.mentions":{},"msgtype":"m.text"},"ts":1728352711934,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$9M_kRPemyTkyPKzXPZnUJwPK0RuaEoP9nXKE-4E9gXg"},
{"content":{"body":"i'm not sure how we could calculate how much review work is needed, because it won't correlate with timebox time","m.mentions":{},"msgtype":"m.text"},"ts":1728352712267,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3LFrjDaptx-2Qmt4ziMWRcJKb3GljrMNCOBx9wsL-ts"},
{"content":{"body":"> <@shuyuguo:matrix.org> at least for proposals 2.7+ i think an earlier deadline makes sense\n\ni'd assume the largest review is needed for a stage 2 advancement, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzBcgs5v597FtHec4U95RX0HUI3tmHOeU2NFWjAguYo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>at least for proposals 2.7+ i think an earlier deadline makes sense</blockquote></mx-reply>i'd assume the largest review is needed for a stage 2 advancement, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YzBcgs5v597FtHec4U95RX0HUI3tmHOeU2NFWjAguYo"}},"msgtype":"m.text"},"ts":1728352758434,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qswSHZAJ5zBI3ngJ_fizBai9bYpoWouTdSnEN1MmM1E"},
{"content":{"body":"> <@shuyuguo:matrix.org> at least for proposals 2.7+ i think an earlier deadline makes sense\n\n * i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YzBcgs5v597FtHec4U95RX0HUI3tmHOeU2NFWjAguYo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>at least for proposals 2.7+ i think an earlier deadline makes sense</blockquote></mx-reply> * i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","m.mentions":{},"m.new_content":{"body":"i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","format":"org.matrix.custom.html","formatted_body":"i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qswSHZAJ5zBI3ngJ_fizBai9bYpoWouTdSnEN1MmM1E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728352773328,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Du0sd3s6BYyTkQOoaVpAaJNg27r6N4G50_uICtqBczk"},
{"content":{"body":"> <@ljharb:matrix.org> i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4\n\nthe 2->2.7 is the biggest one IMO, because that's starting to approach the \"impls left holding the bag in case of things missed during review\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qswSHZAJ5zBI3ngJ_fizBai9bYpoWouTdSnEN1MmM1E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd assume the largest review is needed for 1 → 2 or 2 → 2.7, and the smallest for a stage 0 → 1 or 2.7 → 3 or 3 → 4</blockquote></mx-reply>the 2-&gt;2.7 is the biggest one IMO, because that's starting to approach the \"impls left holding the bag in case of things missed during review\"","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qswSHZAJ5zBI3ngJ_fizBai9bYpoWouTdSnEN1MmM1E"}},"msgtype":"m.text"},"ts":1728352800430,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tKL2FZjb0Y7fzZ_HAhOnAL5AZD1MEA5AiUBhKvWsJPs"},
{"content":{"body":"so at least in terms of irreversible consequences","m.mentions":{},"msgtype":"m.text"},"ts":1728352816250,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IytGEVEZ9mIGwS7Z3eQP9oVW79LBmjUNWuJatY0kD_8"},
{"content":{"body":"yeah 2->2.7 is the biggest, that means that things that are not that, end up getting the short end of the stick","m.mentions":{},"msgtype":"m.text"},"ts":1728352826603,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ung34u9AY9WhnZiJcECKzSSij3r-M4TsXexMUix3hNE"},
{"content":{"body":"so given that, requiring an earlier deadline for attempting to enter 2 or 2.7 might make sense","m.mentions":{},"msgtype":"m.text"},"ts":1728352826967,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KmjM0YgP-2CYDryDx5I-aw7e_NjvZi5trb5moNlTyDQ"},
{"content":{"body":"fwiw I also did not notice that the agenda item contained \"TG4: Source Map Specification, 2024 edition approval (30m, Jonathan Kuperman)\"","m.mentions":{},"msgtype":"m.text"},"ts":1728352837776,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vzqR6ZtEWCcj4FYJMXsppw0CAxISQHdwZkCRcY2N1Jo"},
{"content":{"body":" * so given that, requiring an earlier deadline for attempting to enter 2 or 2.7 might make sense (no need to require it for the others)","m.mentions":{},"m.new_content":{"body":"so given that, requiring an earlier deadline for attempting to enter 2 or 2.7 might make sense (no need to require it for the others)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KmjM0YgP-2CYDryDx5I-aw7e_NjvZi5trb5moNlTyDQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728352839185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a8-kq4PjZVuQfXoLMdYtlcDLKZZL2pFGU7kturv9OVg"},
{"content":{"body":"mostly because I do not look at the task group updates section","m.mentions":{},"msgtype":"m.text"},"ts":1728352847641,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vEdcfgEt6YEm4m74gtr7hG8XefLL-H_0HPWkDtVjvAQ"},
{"content":{"body":"I don't have strong feelings on this but I do not want a complex rules engine for which deadlines apply to which stages","m.mentions":{},"msgtype":"m.text"},"ts":1728352848049,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$2RRr1fyinMDrpR9s9Bmy98aBo_HzTt4G6cyuBk2RRvA"},
{"content":{"body":"same, i would say just an earlier deadline allowing more than 5 days of review time","m.mentions":{},"msgtype":"m.text"},"ts":1728352865947,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$f0gtQMF9WEtE8J3jmvjuo84PmdXPa9QEau9JQO6YfJ4"},
{"content":{"body":"then we probably do want to move the deadline up earlier for all proposals","m.mentions":{},"msgtype":"m.text"},"ts":1728352870217,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LGUIn7LEmeBJm_dx3AJgtPRBzNjwLBFQaZUveJbyYEc"},
{"content":{"body":"> <@softwarechris:matrix.org> I don't have strong feelings on this but I do not want a complex rules engine for which deadlines apply to which stages\n\nI agree, I'd prefer to have a single deadline to apply to all agenda items, not just advancement requests","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2RRr1fyinMDrpR9s9Bmy98aBo_HzTt4G6cyuBk2RRvA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>I don&#39;t have strong feelings on this but I do not want a complex rules engine for which deadlines apply to which stages</blockquote></mx-reply>I agree, I'd prefer to have a single deadline to apply to all agenda items, not just advancement requests","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2RRr1fyinMDrpR9s9Bmy98aBo_HzTt4G6cyuBk2RRvA"}},"msgtype":"m.text"},"ts":1728352877648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Dv4RKCRL7O4O0xDR0N294pCHxzcgD83svsLn0W-ZAHg"},
{"content":{"body":"+1","m.mentions":{},"msgtype":"m.text"},"ts":1728352895666,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$JxudeNB1jEXZKhSIy_eg0uQtrTrn6gIx7M1piluTnNE"},
{"content":{"body":"we have never had a deadline for non-advancements and i don't think we should start now","m.mentions":{},"msgtype":"m.text"},"ts":1728352897222,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VXhc_FYCXHdfC-EnEbIE8yoqfe5tniQ73wq8rxewCPI"},
{"content":{"body":"i believe we are only discussing advancement deadlines","m.mentions":{},"msgtype":"m.text"},"ts":1728352910487,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OpIMJGYzX_AZkgkcXyjf6IC-s8hdPPE3LeMZbVSfewU"},
{"content":{"body":"I think it would remain a 'best effort' thing, not a 'you missed the boat, sorry' thing","m.mentions":{},"msgtype":"m.text"},"ts":1728352924364,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$DY9gU3tm1G26CXz7EzaBZun4Cegar6G_AOigzFysC8U"},
{"content":{"body":"the word \"deadline\" refers to the latter ime","m.mentions":{},"msgtype":"m.text"},"ts":1728352939777,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rt_QR-R2obPaiAk1zQTMi5dQbSenopU3qgKMst4s26Y"},
{"content":{"body":"but it's very helpful if everything is in before the given date","m.mentions":{},"msgtype":"m.text"},"ts":1728352950323,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$MO9VtM3CL_IvWctLfO0OfUS3fsElp_S62wKX3uSi2xc"},
{"content":{"body":" * the word \"deadline\" refers to the latter ime (\"dead\" being a somewhat final state)","m.mentions":{},"m.new_content":{"body":"the word \"deadline\" refers to the latter ime (\"dead\" being a somewhat final state)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Rt_QR-R2obPaiAk1zQTMi5dQbSenopU3qgKMst4s26Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728352953239,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4bAdwNVjpTtfbN_OL_RmYU7XwlXG9g3l9pZdNXCKhfg"},
{"content":{"body":"well, I raised non-advancement-requests, but I can accept if we don't adopt the policy that I suggested","m.mentions":{},"msgtype":"m.text"},"ts":1728352954472,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DmJiPUHeC12nig6hEjplbp73eT1vm6AGZbCcpgYOtqk"},
{"content":{"body":"and the later things get added, the more problems it creates","m.mentions":{},"msgtype":"m.text"},"ts":1728352961892,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$N0mKdJf9SQaMYg_7Ci5-IPV4fhS-wExN-SOcdttLaHA"},
{"content":{"body":"yeah, with the risk of something beling blocked -- i mean it would be the same situation as now, but with 2 weeks (10 days of working time, if there are no holidays) would go a long way here ","m.mentions":{},"msgtype":"m.text"},"ts":1728352975388,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$iR0WjEhh_Uh_J1m3GF61LyM2BkEDDmH-SMr-809vPF0"},
{"content":{"body":"adding something to the TC39 agenda is asking everyone to take time to focus together on a topic, so I think it's not too much for it to apply to everything. It will help us to be more effective if we have all supporting materials for all items ahead of a deadline.","m.mentions":{},"msgtype":"m.text"},"ts":1728353000286,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SDQCk-dBPyXIIsvyj0kAbIIHR4mGj0cZND2IpwGCyCQ"},
{"content":{"body":"part of the reason we wanted to keep the deadline short in the past is that there's only 2 months between plenaries","m.mentions":{},"msgtype":"m.text"},"ts":1728353001926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jl8_TJ4wplS0U5MgJlyIQirUWfk2nxr-0texQEkehiU"},
{"content":{"body":"those extra 4 days have been very helpful in the past to get ducks in a row for an upcoming plenary","m.mentions":{},"msgtype":"m.text"},"ts":1728353022781,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pRfyBVAwqntPClbL8fPncJAvCEg-GyRYywnamoHQD0M"},
{"content":{"body":"That said, since we meet so frequently, spilling over to the next meeting isn't a huge delay.","m.mentions":{},"msgtype":"m.text"},"ts":1728353224495,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$x7UADMtE1sxGm07zwMgV8MxVItGuVUlGDeUNHcMRDJY"},
{"content":{"body":"> <@bakkot:matrix.org> fwiw I also did not notice that the agenda item contained \"TG4: Source Map Specification, 2024 edition approval (30m, Jonathan Kuperman)\"\n\nI am actually confused whether this is the appropriate timing for a topic of this nature","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vzqR6ZtEWCcj4FYJMXsppw0CAxISQHdwZkCRcY2N1Jo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>fwiw I also did not notice that the agenda item contained &quot;TG4: Source Map Specification, 2024 edition approval (30m, Jonathan Kuperman)&quot;</blockquote></mx-reply>I am actually confused whether this is the appropriate timing for a topic of this nature","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vzqR6ZtEWCcj4FYJMXsppw0CAxISQHdwZkCRcY2N1Jo"}},"msgtype":"m.text"},"ts":1728353238080,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$YkDFtoF2TfvICBV5bP-Rno8e4xHYWuVCjY3NwV6hlSw"},
{"content":{"body":"2 months is a significant delay, but 4 days doesn't seem like one to me","m.mentions":{},"msgtype":"m.text"},"ts":1728353250343,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BKcH47SQHIRw-zkZly7CAkFOzqIO2MT6Obmk3x22V9Y"},
{"content":{"body":"like, 30m topic in the 5m topics section","m.mentions":{},"msgtype":"m.text"},"ts":1728353251796,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$9KG9sspBuBQs0a7y0SDkVFYxPIEECIewi5rTqIxom1w"},
{"content":{"body":"Current doc for advancement to Stage 1 says:\n\n> Such proposals must link to a proposal repository and they *should* link to supporting materials when possible.","format":"org.matrix.custom.html","formatted_body":"<p>Current doc for advancement to Stage 1 says:</p>\n<blockquote>\n<p>Such proposals must link to a proposal repository and they <em>should</em> link to supporting materials when possible.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728353268632,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hgRx5QPjZ6eaZXeGC-Oazq-9d6dpPLUQh8LnoR3acQg"},
{"content":{"body":"the time taken in those 4 days, vs incomplete review and missing something, the cost of the latter is much higher","m.mentions":{},"msgtype":"m.text"},"ts":1728353276985,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$oZOAJxpOvMCLEpd5CAEDHbQloDHXvFnZ3pEETpJzW8o"},
{"content":{"body":"maybe we should make that should a must","m.mentions":{},"msgtype":"m.text"},"ts":1728353290559,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$SCmbmaWEeUSTFk2fN6-t8GHCylkl-b_YYnzCq6VVctk"},
{"content":{"body":"> <@ljharb:matrix.org> those extra 4 days have been very helpful in the past to get ducks in a row for an upcoming plenary\n\nI think that logic made sense at the time, but as the committee grew and we got more topics on the agenda, the tradeoff shifts, as yulia says","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pRfyBVAwqntPClbL8fPncJAvCEg-GyRYywnamoHQD0M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>those extra 4 days have been very helpful in the past to get ducks in a row for an upcoming plenary</blockquote></mx-reply>I think that logic made sense at the time, but as the committee grew and we got more topics on the agenda, the tradeoff shifts, as <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a> says","m.mentions":{"user_ids":["@ljharb:matrix.org","@yulia:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pRfyBVAwqntPClbL8fPncJAvCEg-GyRYywnamoHQD0M"}},"msgtype":"m.text"},"ts":1728353297677,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XePe-t_wMqmYK5nfKX_P8EEQFvb_nunu4lLyNcXcynY"},
{"content":{"body":"I'm not following the chat,   but if it's for source map: it would be a 6 months delay and not 2 months, due to the GA meeting twice per year","msgtype":"m.text"},"ts":1728353325733,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wi8WqRVv0Uz1OVGygPEAj6Ea7q34JZvkxyJr0H-PIQM"},
{"content":{"body":"> <@aclaymore:matrix.org> maybe we should make that should a must\n\nI feel like I remember having a conversation in which I suggested this and we landed on \"should\" instead somehow...or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SCmbmaWEeUSTFk2fN6-t8GHCylkl-b_YYnzCq6VVctk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>maybe we should make that should a must</blockquote></mx-reply>I feel like I remember having a conversation in which I suggested this and we landed on \"should\" instead somehow...or something","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SCmbmaWEeUSTFk2fN6-t8GHCylkl-b_YYnzCq6VVctk"}},"msgtype":"m.text"},"ts":1728353333119,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$_J4NO5aUZxEWBbcRyH1FTjxZpCSIhzqNhqN7kBf57R4"},
{"content":{"body":"> <@aclaymore:matrix.org> maybe we should make that should a must\n\nI think it's fine to have reduced requirements for Stage 1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24SCmbmaWEeUSTFk2fN6-t8GHCylkl-b_YYnzCq6VVctk\">In reply to</a><a href=\"https://matrix.to/#/%40aclaymore%3Amatrix.org\">@aclaymore:matrix.org</a><br />maybe we should make that should a must</blockquote></mx-reply>I think it&#39;s fine to have reduced requirements for Stage 1","m.relates_to":{"m.in_reply_to":{"event_id":"$SCmbmaWEeUSTFk2fN6-t8GHCylkl-b_YYnzCq6VVctk"}},"msgtype":"m.text"},"ts":1728353337831,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$n1Ga-XUH3H1B8GUSl4hh2GMU74gvyH7D5PiRwpdf-zY"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I'm not following the chat,   but if it's for source map: it would be a 6 months delay and not 2 months, due to the GA meeting twice per year\n\nTwo months here refers to stage advancement","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24wi8WqRVv0Uz1OVGygPEAj6Ea7q34JZvkxyJr0H-PIQM\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I'm not following the chat,   but if it's for source map: it would be a 6 months delay and not 2 months, due to the GA meeting twice per year</blockquote></mx-reply>Two months here refers to stage advancement","m.relates_to":{"m.in_reply_to":{"event_id":"$wi8WqRVv0Uz1OVGygPEAj6Ea7q34JZvkxyJr0H-PIQM"}},"msgtype":"m.text"},"ts":1728353382954,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$LAbHdbXluahHcCReKbMZs_e6Qdkhr-mlEYS_wViWjRI"},
{"content":{"body":"overall, the wording in the agenda doc has encouraged people to not bother to especially try to get things into the agenda ahead of time, even when they maybe could've. It's been confusing for me to explain to people that they really should put everything there earlier, and I've had to clarify that lots of times.","m.mentions":{},"msgtype":"m.text"},"ts":1728353419447,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FLSxrFQ5EnkHvuqNsL6BuYL9rBtvrGHYf2cjv0Rmt2k"},
{"content":{"body":"littledan Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published underm Ecma's BSD version","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published underm Ecma's BSD version","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1728353425143,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$VFICX-xqpLe2b8Y4qKxj0sCsGkUXpNzOe2awiifx7ok"},
{"content":{"body":" * littledan Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version","m.mentions":{},"m.new_content":{"body":"littledan Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VFICX-xqpLe2b8Y4qKxj0sCsGkUXpNzOe2awiifx7ok","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728353432632,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zrgyqC1j-kyN_otj6KassuGZFcp_6-mnaLXATA7tQvs"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> littledan Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version\n\nEcma has one BSD version for test262 at https://ecma-international.org/policies/by-ipr/ecma-international-policy-on-submission-inclusion-and-licensing-of-software/ ; the alternative copyright notice at https://ecma-international.org/policies/by-ipr/ecma-text-copyright-policy/ (second section) seems broadly BSD-like, but somewhat different text, which is why I was confused. I imagine you're working on the latter relicensing (I don't really understand why it's not implicit based on Google+Mozilla's agreements with Ecma, but the lawyers will known better)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VFICX-xqpLe2b8Y4qKxj0sCsGkUXpNzOe2awiifx7ok?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> Btw, the reason we were thinking about the license for the spec itself, is that both ECMA-262 and ECMA-402 are published under Ecma's BSD version</blockquote></mx-reply>Ecma has one BSD version for test262 at https://ecma-international.org/policies/by-ipr/ecma-international-policy-on-submission-inclusion-and-licensing-of-software/ ; the alternative copyright notice at https://ecma-international.org/policies/by-ipr/ecma-text-copyright-policy/ (second section) seems broadly BSD-like, but somewhat different text, which is why I was confused. I imagine you're working on the latter relicensing (I don't really understand why it's not implicit based on Google+Mozilla's agreements with Ecma, but the lawyers will known better)","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VFICX-xqpLe2b8Y4qKxj0sCsGkUXpNzOe2awiifx7ok"}},"msgtype":"m.text"},"ts":1728353705242,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$faUX2r2toV2PAWndtw5A9XkLOpKRsIMO888SaWXPCxc"},
{"content":{"body":"do we have a slides link to TG5 Report?","m.mentions":{},"msgtype":"m.text"},"ts":1728353802832,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$XBa52LAwHNz8QjxRmzw5AWXeuKbmuAab1LyApaaG1N0"},
{"content":{"body":"https://docs.google.com/presentation/d/156wJbnrIEt-hbkhh0paVAIjrG9L7oe_R9z211yS0bIA/edit#slide=id.g308ab6c6cfb_0_25","m.mentions":{},"msgtype":"m.text"},"ts":1728353866233,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$fFY3Y_Qxs_FtH1OjEty8ajyxpoKW5glwXKMrxYudqbo"},
{"content":{"body":"yulia: would you put a brief summary of the TG5 presention in the notes? there's a spot for it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: would you put a brief summary of the TG5 presention in the notes? there's a spot for it","m.mentions":{"user_ids":["@yulia:mozilla.org"]},"msgtype":"m.text"},"ts":1728353878158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ri0zE0GiMv5yR0QXnpILkBgWutMarCXQj5TVJMSoz-8"},
{"content":{"body":"I could generate one but it's best of the speakers do it","m.mentions":{},"msgtype":"m.text"},"ts":1728353887212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OldaAm1DN7sYDfUb_ynl-zod5jrxqZBN1KiJIYwsS7I"},
{"content":{"body":" * I could generate one but it's best if the speakers do it","m.mentions":{},"m.new_content":{"body":"I could generate one but it's best if the speakers do it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OldaAm1DN7sYDfUb_ynl-zod5jrxqZBN1KiJIYwsS7I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728353891446,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S5Nc-hg-axICjBP-daFFL0uFNsuiPj9X-6cGvCDR6Os"},
{"content":{"body":"> <@bakkot:matrix.org> I could generate one but it's best if the speakers do it\n\nwhen you say \"generate\", do you mean you'd write it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OldaAm1DN7sYDfUb_ynl-zod5jrxqZBN1KiJIYwsS7I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I could generate one but it&#39;s best if the speakers do it</blockquote></mx-reply>when you say \"generate\", do you mean you'd write it?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OldaAm1DN7sYDfUb_ynl-zod5jrxqZBN1KiJIYwsS7I"}},"msgtype":"m.text"},"ts":1728353924351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c0hHshSHfwwQuECNj8ypqc0bxfidL9S6GgNT04UBY9A"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1728353929702,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9fQmn5bdrVwbq93iBesuxB8JSZdzGfScqh0D_4ACRTQ"},
{"content":{"body":"I strongly agree with Michael's point that we should never switch on iterability for any reason other than to throw for non-iterables","m.mentions":{},"msgtype":"m.text"},"ts":1728354192241,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4PIeN2MAKqNrHotjFmBhNBOEQshWpAxdvUpN2fgbF8c"},
{"content":{"body":"auto-wrapping is a footgun that required a special symbol to workaround for Array.prototype.concat. We shouldn't repeat that mistake","m.mentions":{},"msgtype":"m.text"},"ts":1728354194180,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0zw-mSjDP37Nw3L4Pe4XYhIzyvea4ZmeKQd-px3u-XM"},
{"content":{"body":"that isn't why isConcatSpreadable exists, it exists so DOM NodeLists can explain their special array concat behavior","m.mentions":{},"msgtype":"m.text"},"ts":1728354280979,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y0XROu52ZVAaht02v75nbi6YKEGGU-g76WdMjiW7_9c"},
{"content":{"body":"I thought isConcatSpreadable existed to make me suffer as a new hire :P","m.mentions":{},"m.relates_to":{"event_id":"$y0XROu52ZVAaht02v75nbi6YKEGGU-g76WdMjiW7_9c","is_falling_back":true,"m.in_reply_to":{"event_id":"$y0XROu52ZVAaht02v75nbi6YKEGGU-g76WdMjiW7_9c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728354321576,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$0jylmeTtqCSosVcwM3aka7w_js5JNfwFAXO_Ecjjgjs"},
{"content":{"body":"iow that symbol is not relevant to this proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1728354326473,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wLK1CpRoVzgLrTn8T5UZ8FKdrf8-9uos3FGunpjONYA"},
{"content":{"body":" * iow that symbol is not relevant to this proposal, whether it autowraps or not","m.mentions":{},"m.new_content":{"body":"iow that symbol is not relevant to this proposal, whether it autowraps or not","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wLK1CpRoVzgLrTn8T5UZ8FKdrf8-9uos3FGunpjONYA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728354333673,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IiG_PoEWBi83v4kHtG2gKnpdrK7a3P_dqowaStLYJUo"},
{"content":{"body":"It also likely wouldn't have been necessary if Array.prototype.concat did not have the auto-wrapping behavior","m.mentions":{},"msgtype":"m.text"},"ts":1728354333795,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MaAj9CyI1_c8YTIotvr0XxQdidl6T_DxWRFYKNDO9o8"},
{"content":{"body":"that too!","m.mentions":{},"m.relates_to":{"event_id":"$y0XROu52ZVAaht02v75nbi6YKEGGU-g76WdMjiW7_9c","is_falling_back":true,"m.in_reply_to":{"event_id":"$0jylmeTtqCSosVcwM3aka7w_js5JNfwFAXO_Ecjjgjs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728354338117,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0e8F0BND3_aMNDIKQE0t8DNmbUBPYIgRXhH6YuAO5lw"},
{"content":{"body":"someone made sure that \"make keith suffer\" was redacted from the notes","m.mentions":{},"m.relates_to":{"event_id":"$y0XROu52ZVAaht02v75nbi6YKEGGU-g76WdMjiW7_9c","is_falling_back":true,"m.in_reply_to":{"event_id":"$0e8F0BND3_aMNDIKQE0t8DNmbUBPYIgRXhH6YuAO5lw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728354349124,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LM1T7qu7ZZcD8pkQQdIklFZHzOUgj2DnfWN8QlPKxsQ"},
{"content":{"body":"it would still have been necessary.","m.mentions":{},"msgtype":"m.text"},"ts":1728354359579,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PkZf0tiBEtdRdAKqwD5rdanktKxPO7-pDyR5JlW4Yks"},
{"content":{"body":"because NodeLists aren't arrays and did have special concat behavior","m.mentions":{},"msgtype":"m.text"},"ts":1728354367371,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$245gpaZHYQdCUjUWj4ELdn_WTPXNeeciQPRUljdpokA"},
{"content":{"body":"without the autowrapping, NodeLists would have thrown instead of spread","m.mentions":{},"msgtype":"m.text"},"ts":1728354384609,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C3xaM7T6080tzijPZXHonROlfdG3Tdogr9FNdhPn130"},
{"content":{"body":" * without the autowrapping, NodeLists would have thrown instead of been added without spreading","m.mentions":{},"m.new_content":{"body":"without the autowrapping, NodeLists would have thrown instead of been added without spreading","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$C3xaM7T6080tzijPZXHonROlfdG3Tdogr9FNdhPn130","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728354402797,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GywhWUODcEzHXWSrPr_ANfd5aabu9C2jR6TlJrBR6HA"},
{"content":{"body":"Either way, auto-wrapping is a footgun. it also doesn't align with our recent decision to cut back on coercing things","m.mentions":{},"msgtype":"m.text"},"ts":1728354407235,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h8A2O-8BdvsS1QBdtcB3KO-SROocbGYOE1c_81Y-JSQ"},
{"content":{"body":"but NodeLists spread, thus the symbol. nothing to do with autowrapping whatsoever.","m.mentions":{},"msgtype":"m.text"},"ts":1728354410862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CZFdmu3ydiO-fty1Xqom-3rEIkXk_JtPlS7ZDh88lZg"},
{"content":{"body":"What's the special behavior of NodeList?","m.mentions":{},"msgtype":"m.text"},"ts":1728354447155,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$lpI8I2_rHD4aSzAvB7a2nk8WL99KULX2bzfh0epJ-n0"},
{"content":{"body":"> <@rbuckton:matrix.org> Either way, auto-wrapping is a footgun. it also doesn't align with our recent decision to cut back on coercing things\n\nI guess the behavior of Array.p.concat is come from perl. Though perl have the sigil to indicate whether it's a scalar or list.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h8A2O-8BdvsS1QBdtcB3KO-SROocbGYOE1c_81Y-JSQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Either way, auto-wrapping is a footgun. it also doesn&#39;t align with our recent decision to cut back on coercing things</blockquote></mx-reply>I guess the behavior of Array.p.concat is come from perl. Though perl have the sigil to indicate whether it's a scalar or list.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$h8A2O-8BdvsS1QBdtcB3KO-SROocbGYOE1c_81Y-JSQ"}},"msgtype":"m.text"},"ts":1728354561206,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$JV9UkfR2v-F9XUEEdqCmsBDvncPFcS3jIXMhZZ1xnPo"},
{"content":{"body":"As a committee, we should adopt the principle of \"making it hard to accidentally do the wrong thing\". When user intention is ambiguous, let's ask users to be explicit ","msgtype":"m.text"},"ts":1728354735618,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$N1_evlJm_CcIgqJJyZKXH_mGuA4auVJq7LSChabqKJA"},
{"content":{"body":"In TC39, the bare minimum is \"web compatibility\", which is a much weaker property than \"breaking change\". As Jordan explained, basically anything that we do can be considered breaking.","m.mentions":{},"msgtype":"m.text"},"ts":1728354815997,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PNdHkpaZQWafF9RFZCndXVwDq42WqKv55SOseZYYogE"},
{"content":{"body":"Iterable helpers that flatten their arguments are implicitly branching on iterability and likely to be used a lot in future.","m.mentions":{},"msgtype":"m.text"},"ts":1728355018384,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$iRdUQPjlfAT67dGRuXaFZSYfDrM8Ey1MNXuN3aZPnsQ"},
{"content":{"body":"which iterable helpers flatten their arguments?","m.mentions":{},"msgtype":"m.text"},"ts":1728355134648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bmzIDSP4fHjPnwAm8lDYxY6Cf7Jo9gv3fleQmHzK_oI"},
{"content":{"body":"Maybe my memory is faulty. I thought there was at least one API that did this.","m.mentions":{},"msgtype":"m.text"},"ts":1728355162399,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$1Sh-3HGOlTsz0PAsaOlrmqqfERARK4QGhhV9E42aXdk"},
{"content":{"body":"IIRC, `Iterator.prototype.flatMap` does not coerce non-iterator/non-iterable","format":"org.matrix.custom.html","formatted_body":"IIRC, <code>Iterator.prototype.flatMap</code> does not coerce non-iterator/non-iterable","m.mentions":{},"msgtype":"m.text"},"ts":1728355169177,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3TPB8lt6DB4tJpBYxwIhmr-MLfOr2Z0fej4a1z4sU0w"},
{"content":{"body":"it rejects non-iterators","m.mentions":{},"msgtype":"m.text"},"ts":1728355188947,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ikfOp-SUMlkrG5KBi6XavOE83d-EXM10Aq7-0oJ5FBU"},
{"content":{"body":"If you consider `Iterator.concat` to essentially be `(...args) => args.values().flatMap(x => x)`, then we should also throw for non-iterators","format":"org.matrix.custom.html","formatted_body":"If you consider <code>Iterator.concat</code> to essentially be <code>(...args) =&gt; args.values().flatMap(x =&gt; x)</code>, then we should also throw for non-iterators","m.mentions":{},"msgtype":"m.text"},"ts":1728355242093,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8HyknNm69f5xYTVDr_zFb54YKPSLIBseoCdQEPHWxEw"},
{"content":{"body":"in general as well, something being iterable is a massively impactful \"trait\" of it - something changing from being \"a thing\" to being \"a container of things\" isn't and shouldn't be a common thing. if we're talking about good API design, good API design wouldn't make this change, i'd think","m.mentions":{},"msgtype":"m.text"},"ts":1728355260413,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G3cWclu-YWWL87kwOPzFDV7wjnSGY_kQUBjafc0LiOs"},
{"content":{"body":" * in general as well, something being iterable is a massively impactful \"trait\" of it - something changing between being \"a thing\" to being \"a container of things\" isn't and shouldn't be a common thing. if we're talking about good API design, good API design wouldn't make this change, i'd think","m.mentions":{},"m.new_content":{"body":"in general as well, something being iterable is a massively impactful \"trait\" of it - something changing between being \"a thing\" to being \"a container of things\" isn't and shouldn't be a common thing. if we're talking about good API design, good API design wouldn't make this change, i'd think","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$G3cWclu-YWWL87kwOPzFDV7wjnSGY_kQUBjafc0LiOs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728355268775,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2shZd2LP8gVNun0BXRVhypfD6uxGztGF2hKAkc6Idfo"},
{"content":{"body":"> <@rbuckton:matrix.org> If you consider `Iterator.concat` to essentially be `(...args) => args.values().flatMap(x => x)`, then we should also throw for non-iterators\n\nto be really explicit, this proposal only accepts _iterables_, not iterators","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8HyknNm69f5xYTVDr_zFb54YKPSLIBseoCdQEPHWxEw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If you consider <code>Iterator.concat</code> to essentially be <code>(...args) =&gt; args.values().flatMap(x =&gt; x)</code>, then we should also throw for non-iterators</blockquote></mx-reply>to be really explicit, this proposal only accepts <em>iterables</em>, not iterators","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8HyknNm69f5xYTVDr_zFb54YKPSLIBseoCdQEPHWxEw"}},"msgtype":"m.text"},"ts":1728355332933,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3f2S5TvBrus9n9m0FWvUtYv4_wodAFXDtCPX6XUgHw4"},
{"content":{"body":"accepting _iterators_ turns out to get really awkward","format":"org.matrix.custom.html","formatted_body":"accepting <em>iterators</em> turns out to get really awkward","m.mentions":{},"msgtype":"m.text"},"ts":1728355344171,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M_GF2DzTa5SAbKi29sXQdpmEbMbp9VwrSc4acbUD_jM"},
{"content":{"body":"because you have to take responsibility for closing them","m.mentions":{},"msgtype":"m.text"},"ts":1728355352129,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gypokTEzigvuFT_htZUXEgkqOlYz9nHpF0sZgQsk7dw"},
{"content":{"body":"I'm not saying it must be implemented as such, but a naive implementation using `flatMap` would throw, not coerce.","format":"org.matrix.custom.html","formatted_body":"I'm not saying it must be implemented as such, but a naive implementation using <code>flatMap</code> would throw, not coerce.","m.mentions":{},"msgtype":"m.text"},"ts":1728355471666,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yBySBwyyaHLYxG8MS5bNbPZUKGTfC1Su3GYMUrAAtPM"},
{"content":{"body":"that naive implementation would eagerly exhaust the iterators, which this doesn't do","m.mentions":{},"msgtype":"m.text"},"ts":1728355508919,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$57cpKu6E4uElB2UmYxd1MGR3E0ZlD1bvgTuvo6L5OZk"},
{"content":{"body":"Again, I'm talking about consistency. `Iterator` generally doesn't coerce","format":"org.matrix.custom.html","formatted_body":"Again, I'm talking about consistency. <code>Iterator</code> generally doesn't coerce","m.mentions":{},"msgtype":"m.text"},"ts":1728355537995,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TEY3Bo0BYf6lqZ3t2MJeXYL-ct0V8H6nhb5GMRMME-I"},
{"content":{"body":"true, that's what `Iterator.from` is for","format":"org.matrix.custom.html","formatted_body":"true, that's what <code>Iterator.from</code> is for","m.mentions":{},"msgtype":"m.text"},"ts":1728355589463,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3TgJIep2SfuaPhS12tTyWfntzzbit07RYnf6W5XeWOc"},
{"content":{"body":"I'm not concerned, there are plenty of bad API designs on Array we shouldn't carry forward, even if we carry forward the concept to other APIs","m.mentions":{},"msgtype":"m.text"},"ts":1728355590775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZVoHx70WFplo38ge2EUvl4FYEQFIfLNvCg_IjfYtso0"},
{"content":{"body":"@ljharb:matrix.org very weakly yes, but I got over it quickly in Rust","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb</a> very weakly yes, but I got over it quickly in Rust","msgtype":"m.text"},"ts":1728355594881,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ybw1Ml2DIjj-K0Xiu1Bgauzr_-Y8vAuK7y2j8KUhw6I"},
{"content":{"body":"Used a whole bunch of `once(foo)`, but it’s much easier in JS because you can wrap in an array without screwing with types.","format":"org.matrix.custom.html","formatted_body":"Used a whole bunch of <code data-md=\"`\">once(foo)</code>, but it’s much easier in JS because you can wrap in an array without screwing with types.","msgtype":"m.text"},"ts":1728355641900,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9NsThvc8v6M2NP36dSp7zp0vJd0ig0aPn2dvI09V2tM"},
{"content":{"body":"For instance, iterator helper methods don't take a `thisArg` despite the array prototype methods of the same name doing so.","format":"org.matrix.custom.html","formatted_body":"For instance, iterator helper methods don't take a <code>thisArg</code> despite the array prototype methods of the same name doing so.","m.mentions":{},"msgtype":"m.text"},"ts":1728355644273,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N-M9qmkyb1NoWW7klbY2m19JCuXLKf_Ao3spM0Y1g5s"},
{"content":{"body":"sure, but array concat's behavior isn't bad.","m.mentions":{},"msgtype":"m.text"},"ts":1728355745022,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$4I95-5q7Lub7BJV9c4SHRGQcTu2EP9pm--SSGAqg3co"},
{"content":{"body":" * sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc)","m.mentions":{},"m.new_content":{"body":"sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4I95-5q7Lub7BJV9c4SHRGQcTu2EP9pm--SSGAqg3co","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728355753888,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pVJFA8HJWObj-JxLcoxKNQlQzfIO300Lf-u4rjNf3hs"},
{"content":{"body":" * sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc) the `thisArg` is useless since arrows and bind exist","format":"org.matrix.custom.html","formatted_body":" * sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc) the <code>thisArg</code> is useless since arrows and bind exist","m.mentions":{},"m.new_content":{"body":"sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc) the `thisArg` is useless since arrows and bind exist","format":"org.matrix.custom.html","formatted_body":"sure, but array concat's behavior isn't bad. (ignoring isConcatSpreadable ofc) the <code>thisArg</code> is useless since arrows and bind exist","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4I95-5q7Lub7BJV9c4SHRGQcTu2EP9pm--SSGAqg3co","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728355764925,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fexm-O7g5NdNmyc_dbP65_VelogfU7EbTo6aATdtlkE"},
{"content":{"body":"Rob Palmer If Ron finishes early, you can move ahead my import attributes discussion (the constraint on the agenda is mine)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> If Ron finishes early, you can move ahead my import attributes discussion (the constraint on the agenda is mine)","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1728355812795,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$l6Dl13LfP--jFC7ACMbfqS_NzQb2a-3kht97PniZvMU"},
{"content":{"body":"Thank you, Nicolo","m.mentions":{},"msgtype":"m.text"},"ts":1728355827897,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$MUViiN3YTlhZKh40pkJRja2edm2GJ6C3Qad7an1h4Yc"},
{"content":{"body":" * Rob Palmer If Ron finishes early, you can move forward my import attributes discussion (the constraint on the agenda is mine)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> If Ron finishes early, you can move forward my import attributes discussion (the constraint on the agenda is mine)","m.mentions":{},"m.new_content":{"body":"Rob Palmer If Ron finishes early, you can move forward my import attributes discussion (the constraint on the agenda is mine)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> If Ron finishes early, you can move forward my import attributes discussion (the constraint on the agenda is mine)","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$l6Dl13LfP--jFC7ACMbfqS_NzQb2a-3kht97PniZvMU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728355829852,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$U0qgNH759eIXmnaz1KjZOr8tBa52ZERJaW6AImhancs"},
{"content":{"body":"Rob Palmer with the deadpan \"wheee\" 😂","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> with the deadpan \"wheee\" 😂","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1728356507258,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qo72AC6jER32QJ_n8T_Md5D2ULzv10o_cop6FKKIwVw"},
{"content":{"body":"hahahahahahahaha","m.mentions":{},"msgtype":"m.text"},"ts":1728356523550,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$axeasxidHpG9mHP3EPHTxj328EdCgRmx9JgFeDAcAQY"},
{"content":{"body":"lots of stage 4!","m.mentions":{},"msgtype":"m.text"},"ts":1728356627238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ELQTrsdnt0El0zJqU4CMFlPQy72uQh0fcedVonMdJh4"},
{"content":{"body":"The schedule has been updated significantly!  Today's afternoon session now looks very different","m.mentions":{},"msgtype":"m.text"},"ts":1728360023265,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$ne5KF3KDHn0fYxSHkeuYa0RDnU0roCbUkiJuN1XK8Z0"},
{"content":{"body":"oh whoa apparently the rap battle is happening today","m.mentions":{},"msgtype":"m.text"},"ts":1728360155274,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$K1t-UTYKbiUE-40k1fniLBeyV5GgGqwbdn2hC2yT0ok"},
{"content":{"body":"GIRD YOUR LOINS EVERYONE","m.mentions":{},"msgtype":"m.text"},"ts":1728360187976,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$DdMMloJv6WUfMeF1elHe-3hJwIswINIROdrPOxNQxJs"},
{"content":{"body":"clarifying question for someone here who probably knows the answer (otherwise when guybedford has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","format":"org.matrix.custom.html","formatted_body":"clarifying question for someone here who probably knows the answer (otherwise when <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1728360991345,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$8cp_O7t1DxD4ZjYl1cFo8PMdmmx7ONjKZv25g2iak6I"},
{"content":{"body":" * clarifying question for someone here who probably knows the answer (otherwise when guybedford has time): This proposal is mostly to make worker imports of modules more statically analyzable right [1])https://github.com/tc39/proposal-esm-phase-imports?tab=readme-ov-file#problem-statement_? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","format":"org.matrix.custom.html","formatted_body":" * clarifying question for someone here who probably knows the answer (otherwise when <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> has time): This proposal is mostly to make worker imports of modules more statically analyzable right [1])https://github.com/tc39/proposal-esm-phase-imports?tab=readme-ov-file#problem-statement_? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","m.mentions":{},"m.new_content":{"body":"clarifying question for someone here who probably knows the answer (otherwise when guybedford has time): This proposal is mostly to make worker imports of modules more statically analyzable right [1])https://github.com/tc39/proposal-esm-phase-imports?tab=readme-ov-file#problem-statement_? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","format":"org.matrix.custom.html","formatted_body":"clarifying question for someone here who probably knows the answer (otherwise when <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> has time): This proposal is mostly to make worker imports of modules more statically analyzable right [1])https://github.com/tc39/proposal-esm-phase-imports?tab=readme-ov-file#problem-statement_? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8cp_O7t1DxD4ZjYl1cFo8PMdmmx7ONjKZv25g2iak6I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728361117600,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$qqCeLAGAWW7tCTZqOn3R1hmtmAlVpYsEKPDr8C5hWhI"},
{"content":{"body":"Yes that was the primary use case, but people then tried to think about how to use this for static analysis (basically exposing the metadata that the engine already has to collect)","m.mentions":{},"msgtype":"m.text"},"ts":1728361117940,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hFtA2ZmsGHRDy_GP9k0aDtD9gUsuKsKIOt0NXLSSBJ8"},
{"content":{"body":" * clarifying question for someone here who probably knows the answer (otherwise when guybedford has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","format":"org.matrix.custom.html","formatted_body":" * clarifying question for someone here who probably knows the answer (otherwise when <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","m.mentions":{},"m.new_content":{"body":"clarifying question for someone here who probably knows the answer (otherwise when guybedford has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","format":"org.matrix.custom.html","formatted_body":"clarifying question for someone here who probably knows the answer (otherwise when <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> has time): This proposal is mostly to make worker imports of modules more statically analyzable right? why are new methods necessary on the Module Source object for this? https://tc39.es/proposal-esm-phase-imports/#sec-module-source-objects","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8cp_O7t1DxD4ZjYl1cFo8PMdmmx7ONjKZv25g2iak6I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728361126989,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ffmCTJIffDzgI4WdLYFvNXqsdja0r_y834h0VfGzwSY"},
{"content":{"body":"I think this would mostly be useful in Node.js as it is","m.mentions":{},"msgtype":"m.text"},"ts":1728361131786,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aogOHOoyPcBehH7pNrwL-O8ZQbw0lmk_vhTMrKXC55k"},
{"content":{"body":"The browser utility is more marginal, unless we get something like the module constructor","m.mentions":{},"msgtype":"m.text"},"ts":1728361153426,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5zobV8aCM0CYyLejG_LvgBHaABZHxaKAtAMdjvm_ddo"},
{"content":{"body":"yeah i'm not clear on imports() and exports() utility either","m.mentions":{},"msgtype":"m.text"},"ts":1728361168171,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OeLWteoutaLZULcvhJ991OAbhjbQHsurHXx_hzONjhY"},
{"content":{"body":"yeah its a little hard to see a justification for this in browsers right now","m.mentions":{},"msgtype":"m.text"},"ts":1728361185561,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$UUcohrR9u1KsHUJUKa3QlLW4k8bAhOsJ7hPkkGG8Ops"},
{"content":{"body":"but thats not related to the update, this is a general concern about the proposal","m.mentions":{},"msgtype":"m.text"},"ts":1728361200989,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$3aAk8eK6zj79huIpCqRWtKY33n31gX3lbjbOte6zrzc"},
{"content":{"body":"Can one of you go on the queue?","m.mentions":{},"msgtype":"m.text"},"ts":1728361211018,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5xmleokMyCjQH6KEbqmtD6SoR5S5md7q2Hc1Xkw1X5A"},
{"content":{"body":"thanks :)","m.mentions":{},"msgtype":"m.text"},"ts":1728361256310,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZiP31rSryJWMPaHmopyITtny_WNlWNDV4na6S8Ub1Mk"},
{"content":{"body":"erights: As stated on a previous slide, there is no return override capability.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@erights:matrix.org\">erights</a>: As stated on a previous slide, there is no return override capability.","m.mentions":{"user_ids":["@erights:matrix.org"]},"msgtype":"m.text"},"ts":1728361953845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6u06KVjKyUbPN1FVDpKQZMLlpfLN2eeyUesB8YNubSk"},
{"content":{"body":"rbuckton: I think Mark's question (who isn't on Matrix) is whether a class can use a struct as the returned object in a return override to stamp fields on the struct","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I think Mark's question (who isn't on Matrix) is whether a class can use a struct as the returned object in a return override to stamp fields on the struct","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728362015054,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wJQrVU13Pi1rZKaK6Bb9BVCpUJQ5ucR5Bi5GlcqR13g"},
{"content":{"body":"Ah. No, it cannot","m.mentions":{},"msgtype":"m.text"},"ts":1728362030500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wg_3lramdAa1sdlpt4VKuJRn0nJdcdTLAdi5hROXU0U"},
{"content":{"body":"why not?","m.mentions":{},"msgtype":"m.text"},"ts":1728362033958,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mknNQxnJl0ykyoHalv16yWd2U9PfqNiey8JLzWBgVss"},
{"content":{"body":"if it's an object it should work","m.mentions":{},"msgtype":"m.text"},"ts":1728362038712,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xUnQA5pOMJMZgG_V5LN0M55FdFn3oM4JP7XHQ4IOH-8"},
{"content":{"body":"just as if i can weakly hold it","m.mentions":{},"msgtype":"m.text"},"ts":1728362048653,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_9G8NLokkOhbEYZT4tFx_RFBamf4TG_Eb6TvWxrXPns"},
{"content":{"body":"I mean I'd love that, but yes, why, what's the mechanism ?","m.mentions":{},"msgtype":"m.text"},"ts":1728362051135,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3vMIzAkFL7ODb958sj4hLzh1YsdzUvFHQJs1qaiJwCg"},
{"content":{"body":"it's an object. all objects (except `window`) can have fields stamped on them via return override.","format":"org.matrix.custom.html","formatted_body":"it's an object. all objects (except <code>window</code>) can have fields stamped on them via return override.","m.mentions":{},"msgtype":"m.text"},"ts":1728362070554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hj8LdHOz3gcmKIQjThm8PlOoK37bo-kPCBPgN46atbo"},
{"content":{"body":"No, the fields must be statically known at construction time for one-shot initialization","m.mentions":{},"msgtype":"m.text"},"ts":1728362071373,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DLoIFRI6xDFHXxjyiNARl3CC_IH1ZPoBIqMuoLIOFT8"},
{"content":{"body":"> <@ljharb:matrix.org> if it's an object it should work\n\nI am very against this line of logic. A WeakMap capability should not be syntactic","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xUnQA5pOMJMZgG_V5LN0M55FdFn3oM4JP7XHQ4IOH-8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if it&#39;s an object it should work</blockquote></mx-reply>I am very against this line of logic. A WeakMap capability should not be syntactic","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xUnQA5pOMJMZgG_V5LN0M55FdFn3oM4JP7XHQ4IOH-8"}},"msgtype":"m.text"},"ts":1728362089349,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SgcufuAX7IqtI_-TPnSeh2ghQ5e9ifs1HiDjCXQ4peY"},
{"content":{"body":"\"adding a private field\" is the same as \"putting an object in a weakmap\"","m.mentions":{},"msgtype":"m.text"},"ts":1728362099328,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3YFxpj21moT8AhEi8S7lEqcxTeLC3RCDtmAIShunNSs"},
{"content":{"body":"that's explicitly how private fields were designed","m.mentions":{},"msgtype":"m.text"},"ts":1728362104814,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ut0OGyONMMzS6gxFBOWUziDOUw0zXcYUyp5XYHPoxHc"},
{"content":{"body":"return override isn't syntactic","m.mentions":{},"msgtype":"m.text"},"ts":1728362114752,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yls_ujvMytNZr_OvFWn7bU2XbwNcVsM78TZGQjfcJ-g"},
{"content":{"body":"it is currently an invariant that if it is an object (modulo window) you can stamp private fields onto it via return override. we shouldn't break that invariant.","m.mentions":{},"msgtype":"m.text"},"ts":1728362149701,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YSdYsr7ejY1-WjOwrQ11TvEoYgmVFYtXqSR_-E8lJMg"},
{"content":{"body":"return override + private field stamping is a syntactic capability that is not deniable or virtualizable, unlike WeakMap","m.mentions":{},"msgtype":"m.text"},"ts":1728362156604,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jOv7MI9rCwlqLJZ0amqerGnThhKA4bM_UOYsQilUnCI"},
{"content":{"body":" * it is currently an invariant that if it is an object (modulo window) you can stamp private fields onto it via return override, and hold it weakly. we shouldn't break that invariant.","m.mentions":{},"m.new_content":{"body":"it is currently an invariant that if it is an object (modulo window) you can stamp private fields onto it via return override, and hold it weakly. we shouldn't break that invariant.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YSdYsr7ejY1-WjOwrQ11TvEoYgmVFYtXqSR_-E8lJMg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728362158027,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LX8b6z2qNulwFd-l6CpGG7kOmte2P_AowCkiwfUJGzM"},
{"content":{"body":"that's already the case for all objects, it's a consequence of being an object.","m.mentions":{},"msgtype":"m.text"},"ts":1728362170205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3hdWLlJQ3CapgrAjmlsBZBcNp5oGL8mHLIXnVTgbPQ4"},
{"content":{"body":"private fields, if/when supported, will also have a fixed layout.","m.mentions":{},"msgtype":"m.text"},"ts":1728362179551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Dc2WPCJ2g3w6OdpPlXdkwkrEDRZvzyhDSbK8L5EhuNA"},
{"content":{"body":"and it was a huge mistake","m.mentions":{},"msgtype":"m.text"},"ts":1728362181975,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hsxJgHN52iruYCtd4fCm2coyPG40M-ZGyM31ZegHth8"},
{"content":{"body":"and I strongly believe we should not hold this as an invariant","m.mentions":{},"msgtype":"m.text"},"ts":1728362190905,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ChEn0zU2rM3A9jauIyW8JWw2F48NXtkp8f00hTUUp1I"},
{"content":{"body":"doesn't mean we should create inconsistency by deviating from it","m.mentions":{},"msgtype":"m.text"},"ts":1728362193018,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EVzSWVCESFA3euz90imIUjGosomMrtMKXMbYap3eyRQ"},
{"content":{"body":"it is necessary to achieve the performance characteristics we want for structs/shared structs","m.mentions":{},"msgtype":"m.text"},"ts":1728362204329,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XIgt5EHLWSu1uERpeb1VUUWeOu2FbJmRYa8KlSAMYMs"},
{"content":{"body":"to me this is an obstacle to stage 2, to be clear.","m.mentions":{},"msgtype":"m.text"},"ts":1728362210294,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h8E-JfOGJ1ZkbgbrdMYgL5f2uXEgeORdNGl7u0yK0Jo"},
{"content":{"body":"can you `class extends Struct {}`? if so you can surely put a private filed in that class?","format":"org.matrix.custom.html","formatted_body":"can you <code>class extends Struct {}</code>? if so you can surely put a private filed in that class?","m.mentions":{},"msgtype":"m.text"},"ts":1728362229342,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ"},
{"content":{"body":"> <@rbuckton:matrix.org> private fields, if/when supported, will also have a fixed layout.\n\nThe fixed layout is so that struct methods can \"quickly\" access them, right? Those installed via return override would not be private fields that belong to the struct, so they wouldn't go through that fast path","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Dc2WPCJ2g3w6OdpPlXdkwkrEDRZvzyhDSbK8L5EhuNA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>private fields, if/when supported, will also have a fixed layout.</blockquote></mx-reply>The fixed layout is so that struct methods can \"quickly\" access them, right? Those installed via return override would not be private fields that belong to the struct, so they wouldn't go through that fast path","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Dc2WPCJ2g3w6OdpPlXdkwkrEDRZvzyhDSbK8L5EhuNA"}},"msgtype":"m.text"},"ts":1728362233629,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$762v5u_CQJNBgnKFtR78FeASNT0TwaSI3oAySysqdYA"},
{"content":{"body":"Yes and no. The fixed layout is partially so that implementations can properly optimize field accesses in ways that they cannot with normal fields today. For shared structs, we want private fields to be shared memory as well","m.mentions":{},"msgtype":"m.text"},"ts":1728362384433,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pq3sTMu2xM0rU4m73fWkeNcCMwf2DzN_Pu20VQigWLc"},
{"content":{"body":"> <@bakkot:matrix.org> can you `class extends Struct {}`? if so you can surely put a private filed in that class?\n\nThat is technically not necessary for for stamping private field","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>can you <code>class extends Struct {}</code>? if so you can surely put a private filed in that class?</blockquote></mx-reply>That is technically not necessary for for stamping private field","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ"}},"msgtype":"m.text"},"ts":1728362392464,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$7k329mFU8ou0JrfmM9CidM7hwaGXtdeijxovvVZoPKs"},
{"content":{"body":"> <@bakkot:matrix.org> can you `class extends Struct {}`? if so you can surely put a private filed in that class?\n\n * That is technically not necessary for for stamping private fields","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>can you <code>class extends Struct {}</code>? if so you can surely put a private filed in that class?</blockquote></mx-reply> * That is technically not necessary for for stamping private fields","m.mentions":{},"m.new_content":{"body":"That is technically not necessary for for stamping private fields","format":"org.matrix.custom.html","formatted_body":"That is technically not necessary for for stamping private fields","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7k329mFU8ou0JrfmM9CidM7hwaGXtdeijxovvVZoPKs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728362408158,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XQlEQeK-sIlfeQuhF_La8qBhL6gIEHOjOmTudCwBgxo"},
{"content":{"body":"right but... can you do that thing?","m.mentions":{},"msgtype":"m.text"},"ts":1728362443363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1vRZ547kuD3jj16bMoWm629QOo95ot6DcnK4Gwt6_7U"},
{"content":{"body":"> <@bakkot:matrix.org> can you `class extends Struct {}`? if so you can surely put a private filed in that class?\n\nWe could possibly allow this by storing the private fields of a struct/shared struct differently than those added by a class, where private fields added by a class are more weakmap like, while those added by a shared struct maintain fixed layout to be portable across agents.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>can you <code>class extends Struct {}</code>? if so you can surely put a private filed in that class?</blockquote></mx-reply>We could possibly allow this by storing the private fields of a struct/shared struct differently than those added by a class, where private fields added by a class are more weakmap like, while those added by a shared struct maintain fixed layout to be portable across agents.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UUXPvco-0afp6WUcCVu9sNita7KgBjWV-vmNeL9-qeQ"}},"msgtype":"m.text"},"ts":1728362755171,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sClDGPoNypYIZaddeYd4SzNo17ToY-btHa4wFdv_vNM"},
{"content":{"body":"that sounds like the only option to resolve it tbh","m.mentions":{},"msgtype":"m.text"},"ts":1728362799867,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZiQTUIDAgU9VuUR3I9Z5Wj-YxXhV_Um2u23PXDET2q4"},
{"content":{"body":"I am OK with it being impossible to `class extends Struct {}`, to be clear","format":"org.matrix.custom.html","formatted_body":"I am OK with it being impossible to <code>class extends Struct {}</code>, to be clear","m.mentions":{},"msgtype":"m.text"},"ts":1728362805060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sDfhE2v-zlUZtjmI0qjl05UNU3Z8hi3K1iLIUv5ezaE"},
{"content":{"body":"just asking if that would work","m.mentions":{},"msgtype":"m.text"},"ts":1728362811233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I1TP6w9v1uv5-D-h7TVVdvMSjo5CM-uhEnwMNN_pb7M"},
{"content":{"body":"i'm not ok with being unable to stamp fields onto it.","m.mentions":{},"msgtype":"m.text"},"ts":1728362826773,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1F0XhFjJWM0f1Kuq1SiGo5emGoTapsx_Zo6OfafOm_k"},
{"content":{"body":"I'd be fine `class extends struct` not working","format":"org.matrix.custom.html","formatted_body":"I'd be fine <code>class extends struct</code> not working","m.mentions":{},"msgtype":"m.text"},"ts":1728362849357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7CfsNeba-LWCwjyDcr1xmt7HWxN96DIMsL_wZHc7Uac"},
{"content":{"body":"As the current proposal, struct seems like a weakened version of class. Perceptually, the difference between struct and class is much smaller than the difference between struct and shared struct. I mean, it seems easy to rewrite a class to struct, but very hard to modify a struct to become a shared struct. This make me feel weird that \"struct\" and \"shared struct\" use similar name and syntax...","m.mentions":{},"msgtype":"m.text"},"ts":1728362865753,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$X32ZVH8VjtJV9lQh0iEK2lW88y2Y8-yf_4tiLAvUKTI"},
{"content":{"body":"if (and only if) it is impossible to `class extends Struct {}` then I am also ok with the return-override trick not allowing you to return a struct","format":"org.matrix.custom.html","formatted_body":"if (and only if) it is impossible to <code>class extends Struct {}</code> then I am also ok with the return-override trick not allowing you to return a struct","m.mentions":{},"msgtype":"m.text"},"ts":1728362917707,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mFsXFlFQxcX1IS9BLz-GfHO5EBOA_3lDVE0dCoI5KMY"},
{"content":{"body":"in which case, as a consequence, you could not stamp additional private fields on an existing struct","m.mentions":{},"msgtype":"m.text"},"ts":1728362929891,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jC6YEdNO6twpAU3duoRBfv1It3X8z5W-vIxR6f-_ExA"},
{"content":{"body":"Correlation is also important even if you just have one object, and want the methods to work after sharing it to the other side","msgtype":"m.text"},"ts":1728362957450,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dP3UaBGA7VDXLUH1C_LnUSNJK-GuIBBAqL3xPXCQ3OI"},
{"content":{"body":"`struct` is a restricted form of `class`, partly because `class` polymorphism is expensive and slow and cannot be fully optimized via ICs. the fixed layout of structs is partly intended to improve performance due to the well known layout. Basically: `class` is more flexible but slower, `struct` is more restrictive but faster.","format":"org.matrix.custom.html","formatted_body":"<code>struct</code> is a restricted form of <code>class</code>, partly because <code>class</code> polymorphism is expensive and slow and cannot be fully optimized via ICs. the fixed layout of structs is partly intended to improve performance due to the well known layout. Basically: <code>class</code> is more flexible but slower, <code>struct</code> is more restrictive but faster.","m.mentions":{},"msgtype":"m.text"},"ts":1728363066851,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M8V5eDrzSBV_1mjcXoGt_fHbHNY_vX6yAcAhMBVYxdg"},
{"content":{"body":"did I blink and miss an explanation of function coloring","m.mentions":{},"msgtype":"m.text"},"ts":1728363264448,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$N3MgfKfTW3u901u-eVyx8m8I22F9Fh1phpTIgn5veEc"},
{"content":{"body":"> <@rkirsling:matrix.org> did I blink and miss an explanation of function coloring\n\nFunction coloring is a function being aware of whether it is invoked inside of an `unsafe` block. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N3MgfKfTW3u901u-eVyx8m8I22F9Fh1phpTIgn5veEc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>did I blink and miss an explanation of function coloring</blockquote></mx-reply>Function coloring is a function being aware of whether it is invoked inside of an <code>unsafe</code> block.","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$N3MgfKfTW3u901u-eVyx8m8I22F9Fh1phpTIgn5veEc"}},"msgtype":"m.text"},"ts":1728363312838,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$69KINR3YAF32jazEPXvbW6nmv9Z-aMXpOwynEtH5O48"},
{"content":{"body":"I _think_ I understand what it means (like \"an async function is fundamentally different from a sync function\") but I don't see what shu is saying","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> I understand what it means (like \"an async function is fundamentally different from a sync function\") but I don't see what shu is saying","m.mentions":{},"msgtype":"m.text"},"ts":1728363316574,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$RtRKoRQjfdtKJaxksBgHn_yULCTr60qXqKCdf_zDub8"},
{"content":{"body":"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/","m.mentions":{},"msgtype":"m.text"},"ts":1728363318613,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C3eE871NDSo_TUn-TZcQV6KH__8BZby2ld4ovLHgCp8"},
{"content":{"body":"> <@rbuckton:matrix.org> Function coloring is a function being aware of whether it is invoked inside of an `unsafe` block.\n\nohhh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$69KINR3YAF32jazEPXvbW6nmv9Z-aMXpOwynEtH5O48?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Function coloring is a function being aware of whether it is invoked inside of an <code>unsafe</code> block.</blockquote></mx-reply>ohhh","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$69KINR3YAF32jazEPXvbW6nmv9Z-aMXpOwynEtH5O48"}},"msgtype":"m.text"},"ts":1728363325178,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$M_Ex3kBh1S9nLa0WgtUA55lbrjtM1HDrwTbXxQDjADM"},
{"content":{"body":"> <@ljharb:matrix.org> https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\n\nooh a Bob post","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C3eE871NDSo_TUn-TZcQV6KH__8BZby2ld4ovLHgCp8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/</blockquote></mx-reply>ooh a Bob post","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$C3eE871NDSo_TUn-TZcQV6KH__8BZby2ld4ovLHgCp8"}},"msgtype":"m.text"},"ts":1728363336283,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$8ju68oJJcqPdFjmvut0qqBjcE81MJ0NGRqFJ5Xi8SsM"},
{"content":{"body":"we should add that to the glossary","m.mentions":{},"msgtype":"m.text"},"ts":1728363338593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$__V19c5nYRfOhj-PAs-8niUA3UHmACnSL9ovFEj957w"},
{"content":{"body":"rbuckton: Yeah, I mean it seems we should use syntax like ` sealed class { } ` to make it clear (though `sealed` is not a correct keyword) that it's a better but restricted class. And let shared struct just use `struct {}` ...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Yeah, I mean it seems we should use syntax like <code>sealed class { }</code> to make it clear (though <code>sealed</code> is not a correct keyword) that it's a better but restricted class. And let shared struct just use <code>struct {}</code> ...","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728363359607,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_BTeD8yQqQc3BlAo74zp8_e4oP8unBGwaYjJ_7PaU0g"},
{"content":{"body":"the queue has 13 items btw","m.mentions":{},"msgtype":"m.text"},"ts":1728363362616,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-dCkqYyC958agFPSRojmJWFPqxbrm8yaSFVZeYuggC8"},
{"content":{"body":"Basically if you have a function `f` that contains an `unsafe {}` block, callers of `f` don't need to wrap it in an `unsafe {}` block.","format":"org.matrix.custom.html","formatted_body":"Basically if you have a function <code>f</code> that contains an <code>unsafe {}</code> block, callers of <code>f</code> don't need to wrap it in an <code>unsafe {}</code> block.","m.mentions":{},"msgtype":"m.text"},"ts":1728363370041,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$kQzWocJX5w9aBef_CFeJjMYWdSiBLAyMoZn54RrdxuE"},
{"content":{"body":" * Basically if you have a function `foo` that contains an `unsafe {}` block, callers of `foo` don't need to wrap it in an `unsafe {}` block.","format":"org.matrix.custom.html","formatted_body":" * Basically if you have a function <code>foo</code> that contains an <code>unsafe {}</code> block, callers of <code>foo</code> don't need to wrap it in an <code>unsafe {}</code> block.","m.mentions":{},"m.new_content":{"body":"Basically if you have a function `foo` that contains an `unsafe {}` block, callers of `foo` don't need to wrap it in an `unsafe {}` block.","format":"org.matrix.custom.html","formatted_body":"Basically if you have a function <code>foo</code> that contains an <code>unsafe {}</code> block, callers of <code>foo</code> don't need to wrap it in an <code>unsafe {}</code> block.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kQzWocJX5w9aBef_CFeJjMYWdSiBLAyMoZn54RrdxuE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728363380988,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$RFQ7K1DgItWiTeTvwE-Yo_7bSXC3mvXJ8DgnP4_X5Vs"},
{"content":{"body":"so i'd be able to write a \"am i in an unsafe block\" predicate?","m.mentions":{},"msgtype":"m.text"},"ts":1728363393148,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I"},
{"content":{"body":" * so i'd be able to write an \"am i in an unsafe block\" predicate?","m.mentions":{},"m.new_content":{"body":"so i'd be able to write an \"am i in an unsafe block\" predicate?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728363403452,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eFvE4ofwp_IvxGDk9jNWCNvmozq1U1Bts4yBoxxZyVI"},
{"content":{"body":"> <@haxjs:matrix.org> rbuckton: Yeah, I mean it seems we should use syntax like ` sealed class { } ` to make it clear (though `sealed` is not a correct keyword) that it's a better but restricted class. And let shared struct just use `struct {}` ...\n\nShu and the v8 team have other reasons to want `struct`, including the unique construction semantics. struct and shared struct construction differs significantly from `class`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_BTeD8yQqQc3BlAo74zp8_e4oP8unBGwaYjJ_7PaU0g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Yeah, I mean it seems we should use syntax like <code>sealed class { }</code> to make it clear (though <code>sealed</code> is not a correct keyword) that it's a better but restricted class. And let shared struct just use <code>struct {}</code> ...</blockquote></mx-reply>Shu and the v8 team have other reasons to want <code>struct</code>, including the unique construction semantics. struct and shared struct construction differs significantly from <code>class</code>.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_BTeD8yQqQc3BlAo74zp8_e4oP8unBGwaYjJ_7PaU0g"}},"msgtype":"m.text"},"ts":1728363409674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$idNvyfq8Eo291UV1AGKy5ymP5Kuwadj3oKmXuprHvH8"},
{"content":{"body":"> <@ljharb:matrix.org> so i'd be able to write an \"am i in an unsafe block\" predicate?\n\noh no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so i&#39;d be able to write an &quot;am i in an unsafe block&quot; predicate?</blockquote></mx-reply>oh no","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I"}},"msgtype":"m.text"},"ts":1728363429642,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$l0csgcs42EWMeuF8DMhWT_eOjXxmgfQoUm6-j9isk2E"},
{"content":{"body":"> <@ljharb:matrix.org> so i'd be able to write an \"am i in an unsafe block\" predicate?\n\nWith function coloring, yes. As specified, no and we do not think it should be added.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so i&#39;d be able to write an &quot;am i in an unsafe block&quot; predicate?</blockquote></mx-reply>With function coloring, yes. As specified, no and we do not think it should be added.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I"}},"msgtype":"m.text"},"ts":1728363433269,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fu5VnmOwCqlz9bIgPDQE6cXfxbxCRgO6CLIRhOQ2qp4"},
{"content":{"body":"gotcha thanks","m.mentions":{},"msgtype":"m.text"},"ts":1728363442508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qhSn8VlYI5LvQjr1FWyNH9FTdGuUFB5VbWx8h21E6Ng"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> oh no\n\nand by that I mean \"ugh yes\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l0csgcs42EWMeuF8DMhWT_eOjXxmgfQoUm6-j9isk2E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>oh no</blockquote></mx-reply>and by that I mean \"ugh yes\"","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$l0csgcs42EWMeuF8DMhWT_eOjXxmgfQoUm6-j9isk2E"}},"msgtype":"m.text"},"ts":1728363443833,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$8QkUJ-GyOcFDmdi5GjcSsq3ZP-ZNpLLJ0u_1ni689Yo"},
{"content":{"body":"> <@ljharb:matrix.org> so i'd be able to write an \"am i in an unsafe block\" predicate?\n\nas a property access on a proxy, maybe, depending on the open question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so i&#39;d be able to write an &quot;am i in an unsafe block&quot; predicate?</blockquote></mx-reply>as a property access on a proxy, maybe, depending on the open question","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I"}},"msgtype":"m.text"},"ts":1728363448642,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LWGq4aCzne59tBBxanRIFHnLwBJDYaoiOA1KQn5dh6M"},
{"content":{"body":"but as a predicate that has the shape of a function, no","m.mentions":{},"msgtype":"m.text"},"ts":1728363462973,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$U30OUyBQOnEnI5kED3J3xrkL-hNpW_vbT1ii-oiSzdE"},
{"content":{"body":"if you can't write such a predicate i'm not sure how you could virtualize shared structs","m.mentions":{},"msgtype":"m.text"},"ts":1728363478469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7-twEl8um2Au7reMf6YbIl9WiYcM7sEr4VTfKFktmU0"},
{"content":{"body":"> <@rbuckton:matrix.org> Shu and the v8 team have other reasons to want `struct`, including the unique construction semantics. struct and shared struct construction differs significantly from `class`.\n\nI understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$idNvyfq8Eo291UV1AGKy5ymP5Kuwadj3oKmXuprHvH8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Shu and the v8 team have other reasons to want <code>struct</code>, including the unique construction semantics. struct and shared struct construction differs significantly from <code>class</code>.</blockquote></mx-reply>I understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$idNvyfq8Eo291UV1AGKy5ymP5Kuwadj3oKmXuprHvH8"}},"msgtype":"m.text"},"ts":1728363514055,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$SJNED5bY_xx18VIEnpn2wpgO_fHgQaVtbQO44bpKQqI"},
{"content":{"body":"you can with proxy","m.mentions":{},"msgtype":"m.text"},"ts":1728363514112,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$J1Pk1hWJn291xYDDqc3afFMsyMFmMAsJ5JziJD5fBdo"},
{"content":{"body":"ok, then you can, and functions can be colored?","m.mentions":{},"msgtype":"m.text"},"ts":1728363522819,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$z2SIv41DUBAyIhFaR6QvJQp4b3bT59GeVa9tSq3dLlY"},
{"content":{"body":"it'd just be a boolean flag passed to the trap","m.mentions":{},"msgtype":"m.text"},"ts":1728363528514,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$T43aO2Ba_eq5B1DO-QZ7c0Z7RgZx8V5IUMV1HJf2UJU"},
{"content":{"body":" * ok, then you can, and functions can be colored manually?","m.mentions":{},"m.new_content":{"body":"ok, then you can, and functions can be colored manually?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$z2SIv41DUBAyIhFaR6QvJQp4b3bT59GeVa9tSq3dLlY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728363528984,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HH3FLy2NXRqtdmZEPtM3_AK2DSIOb2_VZUPANFC7LrU"},
{"content":{"body":"> <@haxjs:matrix.org> I understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.\n\nMaybe TG5 could investigate it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SJNED5bY_xx18VIEnpn2wpgO_fHgQaVtbQO44bpKQqI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.</blockquote></mx-reply>Maybe TG5 could investigate it","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SJNED5bY_xx18VIEnpn2wpgO_fHgQaVtbQO44bpKQqI"}},"msgtype":"m.text"},"ts":1728363550613,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$7DxJFPoNJsUaO3sDo0_Zlh1zj5tDRZSUFGuJlI7gJNc"},
{"content":{"body":"> <@ljharb:matrix.org> so i'd be able to write an \"am i in an unsafe block\" predicate?\n\nYou can try/catch around reading from a shared struct that you have, right?\n\n```js\nshared struct Test { x }\n\n{\n  try { new Test().x } catch { console.log(\"not unsafe block\") }\n}\n\nunsafe {\n  try { new Test().x; console.log(\"unsafe block\") } catch { }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>so i&#39;d be able to write an &quot;am i in an unsafe block&quot; predicate?</blockquote></mx-reply><p>You can try/catch around reading from a shared struct that you have, right?</p>\n<pre><code class=\"language-js\">shared struct Test { x }\n\n{\n  try { new Test().x } catch { console.log(\"not unsafe block\") }\n}\n\nunsafe {\n  try { new Test().x; console.log(\"unsafe block\") } catch { }\n}\n</code></pre>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ocKt62klTtA5LoSBHynNYQjrHLiLn7zcrwLneIQLf4I"}},"msgtype":"m.text"},"ts":1728363598114,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oWaZ8LdbIwzm2R3G5c071M4-1AbcmpPXE0wwMGPjogI"},
{"content":{"body":"> <@haxjs:matrix.org> I understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.\n\nEven from a developer point of view, the construction semantics of a `struct` differ enough from `class` that making it differ purely based on a modifier would trip up developers. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SJNED5bY_xx18VIEnpn2wpgO_fHgQaVtbQO44bpKQqI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I understand from the engine viewpoint (or spec viewpoint) it's true, but I guess from developer concept model, it's too different.</blockquote></mx-reply>Even from a developer point of view, the construction semantics of a <code>struct</code> differ enough from <code>class</code> that making it differ purely based on a modifier would trip up developers.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SJNED5bY_xx18VIEnpn2wpgO_fHgQaVtbQO44bpKQqI"}},"msgtype":"m.text"},"ts":1728363601225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2a6ghhwvjOiBa2VJ05IonBsIsT7UGWS_AKkgh1NTxdk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> You can try/catch around reading from a shared struct that you have, right?\n> \n> ```js\n> shared struct Test { x }\n> \n> {\n>   try { new Test().x } catch { console.log(\"not unsafe block\") }\n> }\n> \n> unsafe {\n>   try { new Test().x; console.log(\"unsafe block\") } catch { }\n> }\n> ```\n\nok, but can i run that try/catch inside a function that someone else invokes in, or not in, an unsafe block?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oWaZ8LdbIwzm2R3G5c071M4-1AbcmpPXE0wwMGPjogI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>You can try/catch around reading from a shared struct that you have, right?</p>\n<pre><code class=\"language-js\">shared struct Test { x }\n\n{\n  try { new Test().x } catch { console.log(\"not unsafe block\") }\n}\n\nunsafe {\n  try { new Test().x; console.log(\"unsafe block\") } catch { }\n}\n</code></pre>\n</blockquote></mx-reply>ok, but can i run that try/catch inside a function that someone else invokes in, or not in, an unsafe block?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oWaZ8LdbIwzm2R3G5c071M4-1AbcmpPXE0wwMGPjogI"}},"msgtype":"m.text"},"ts":1728363624756,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8J-IAIw_9OxzEuyKm-r7rHj11mf9XP6nsSSBnBS6vhc"},
{"content":{"body":"ah I've misunderstood - so is the following disallowed?\n\n```\nfunction foo() {\n    unsafe {\n        bar();\n    }\n}\n\nfunction bar(sharedInstance) {\n    sharedInstance.property = 123;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>ah I've misunderstood - so is the following disallowed?</p>\n<pre><code>function foo() {\n    unsafe {\n        bar();\n    }\n}\n\nfunction bar(sharedInstance) {\n    sharedInstance.property = 123;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728363629272,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$wxYbIYY-TamKp8a2BX_8eFo9s3qPQ-OZr7D9MpN9jNc"},
{"content":{"body":"> <@ljharb:matrix.org> ok, but can i run that try/catch inside a function that someone else invokes in, or not in, an unsafe block?\n\nNo, but that function's body is always running in \"safe\" mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8J-IAIw_9OxzEuyKm-r7rHj11mf9XP6nsSSBnBS6vhc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok, but can i run that try/catch inside a function that someone else invokes in, or not in, an unsafe block?</blockquote></mx-reply>No, but that function's body is always running in \"safe\" mode","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8J-IAIw_9OxzEuyKm-r7rHj11mf9XP6nsSSBnBS6vhc"}},"msgtype":"m.text"},"ts":1728363642249,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KUq-iB0_zoeRwTsr7ijTuVTdaCoHzvp0YzTvkKvUxL4"},
{"content":{"body":"It's like checking if your caller is strict or loose","m.mentions":{},"msgtype":"m.text"},"ts":1728363649310,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$M7baXS4gjzH1WX0cwjKwtUbwr9AwuzpXMVhKr2rWFXs"},
{"content":{"body":"You can't","m.mentions":{},"msgtype":"m.text"},"ts":1728363650770,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YNRH3Hizg_0vMR8UKls1VM8VexivqTu-J7BbkRTQZzA"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> ah I've misunderstood - so is the following disallowed?\n> \n> ```\n> function foo() {\n>     unsafe {\n>         bar();\n>     }\n> }\n> \n> function bar(sharedInstance) {\n>     sharedInstance.property = 123;\n> }\n> ```\n\nYes, this does not work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wxYbIYY-TamKp8a2BX_8eFo9s3qPQ-OZr7D9MpN9jNc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br><p>ah I've misunderstood - so is the following disallowed?</p>\n<pre><code>function foo() {\n    unsafe {\n        bar();\n    }\n}\n\nfunction bar(sharedInstance) {\n    sharedInstance.property = 123;\n}\n</code></pre>\n</blockquote></mx-reply>Yes, this does not work.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wxYbIYY-TamKp8a2BX_8eFo9s3qPQ-OZr7D9MpN9jNc"}},"msgtype":"m.text"},"ts":1728363651220,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r-mIMYr_QYNmwT7O6SVLK_L0xNSssVQL7PaRyjvlpbQ"},
{"content":{"body":"I would like to see a lot more examples what code is/is not legal `using`, somewhere","format":"org.matrix.custom.html","formatted_body":"I would like to see a lot more examples what code is/is not legal <code>using</code>, somewhere","m.mentions":{},"msgtype":"m.text"},"ts":1728363664573,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C6Mk4ItV7hrV_HURBraagLKShALR0qU1IxG90mSF5Xc"},
{"content":{"body":"it is probably good I just don't understand it yet","m.mentions":{},"msgtype":"m.text"},"ts":1728363670568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zsF52kEdTUMTC8-4jU6gVqFMQYrL-EXDPgvorBqfI3w"},
{"content":{"body":"`bar` does not magically get colored as `unsafe` when called. it must be lexically scoped within the block.","format":"org.matrix.custom.html","formatted_body":"<code>bar</code> does not magically get colored as <code>unsafe</code> when called. it must be lexically scoped within the block.","m.mentions":{},"msgtype":"m.text"},"ts":1728363671335,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b96G6sDgjEfBIWDuBKy-WamnaiAUwkXBPa2eDQbDiHY"},
{"content":{"body":"`using` or `unsafe`?","format":"org.matrix.custom.html","formatted_body":"<code>using</code> or <code>unsafe</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1728363682193,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UmIpjFrKdae5wQyAf8nLJpT6WGu6tgL66m2j61UNLuM"},
{"content":{"body":" * I would like to see a lot more examples what code is/is not legal for `unsafe`, somewhere","format":"org.matrix.custom.html","formatted_body":" * I would like to see a lot more examples what code is/is not legal for <code>unsafe</code>, somewhere","m.mentions":{},"m.new_content":{"body":"I would like to see a lot more examples what code is/is not legal for `unsafe`, somewhere","format":"org.matrix.custom.html","formatted_body":"I would like to see a lot more examples what code is/is not legal for <code>unsafe</code>, somewhere","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$C6Mk4ItV7hrV_HURBraagLKShALR0qU1IxG90mSF5Xc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728363683513,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0pcQSZ3okKL2LqmtXY8Lvr36gflwOsRnRINPaa0DxCo"},
{"content":{"body":"`unsafe`, sorry","format":"org.matrix.custom.html","formatted_body":"<code>unsafe</code>, sorry","m.mentions":{},"msgtype":"m.text"},"ts":1728363686602,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3BkpLlnaOxjpu-Z7_DfZr9viOcMjsRxO8NOMUxFd00E"},
{"content":{"body":"`unsafe` only controls the ability to get/set a field on a shared struct instance, and only applies to code lexically scoped within the `unsafe {}` block.","format":"org.matrix.custom.html","formatted_body":"<code>unsafe</code> only controls the ability to get/set a field on a shared struct instance, and only applies to code lexically scoped within the <code>unsafe {}</code> block.","m.mentions":{},"msgtype":"m.text"},"ts":1728363721549,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FEfbwBdXHpAXNQBpB_7D1PBv8fSP3C07svpzAe9fMjU"},
{"content":{"body":"ok, that sounds straightforward; I think I got confused by all the discussion of coloring","m.mentions":{},"msgtype":"m.text"},"ts":1728363750989,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TX1aHKSkB4bS9fLfDfIJoUAmlFEAxTrcQBPQEw2jXts"},
{"content":{"body":"`unsafe` only changes the behavior of get/set lexically contained in the block.","format":"org.matrix.custom.html","formatted_body":"<code>unsafe</code> only changes the behavior of get/set lexically contained in the block.","m.mentions":{},"msgtype":"m.text"},"ts":1728363751568,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2MmGXaNRRUg6YgoOU0yAvn7tS5nKlNcgH_acySDrzms"},
{"content":{"body":"but I am confused about the discussion of the APIs, then","m.mentions":{},"msgtype":"m.text"},"ts":1728363763990,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fgGrxDZcYa-Osb-Kt-A6wWM1Jip69ZoLOnUv9f0sQuA"},
{"content":{"body":"like `Reflect.get` etc","format":"org.matrix.custom.html","formatted_body":"like <code>Reflect.get</code> etc","m.mentions":{},"msgtype":"m.text"},"ts":1728363770764,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HkNJFqpXRJEZZpYp-0wKYcSPd0UhmLMMZLnBSEcfBTs"},
{"content":{"body":"Should `Reflect.get` have some way to access the value (regardless of where the call happens)","format":"org.matrix.custom.html","formatted_body":"Should <code>Reflect.get</code> have some way to access the value (regardless of where the call happens)","m.mentions":{},"msgtype":"m.text"},"ts":1728363800858,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4NeJX6GiCDtejB_y_TwLoflYiceFiCyccArFbrrGUB8"},
{"content":{"body":"The problem with `Reflect.get` is that it either must always succeed or always throw when reading a shared struct field.","format":"org.matrix.custom.html","formatted_body":"The problem with <code>Reflect.get</code> is that it either must always succeed or always throw when reading a shared struct field.","m.mentions":{},"msgtype":"m.text"},"ts":1728363806756,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wh7eev36_5Mc6KCde2Hc9jnTd0kkNrUVwjljge6ZsSQ"},
{"content":{"body":"or we thread a parameter about unsafe-ness through, per the slides","m.mentions":{},"msgtype":"m.text"},"ts":1728363839156,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gCl_6CKYzX0AiIo3y8tgxK871q11MAVUNSUK44QCGrc"},
{"content":{"body":"Which means a Proxy must also either always succeed or always fail, or passing a get through a proxy trap becomes inconsistent when it passes through Reflect.get.","m.mentions":{},"msgtype":"m.text"},"ts":1728363845247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ususUGoPHAx2zDVAHrtTUVbH_OcRPIykphlcdD30Fck"},
{"content":{"body":"Yes, that's the third option.","m.mentions":{},"msgtype":"m.text"},"ts":1728363850747,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QCUtpOM5zZIHNEHhZ42Y8p5MMV6Puu1e_1xjtKVvnzw"},
{"content":{"body":"get/set behavior is pretty straightforward. Where it gets funky is with own prop MOPs","m.mentions":{},"msgtype":"m.text"},"ts":1728363894371,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TEAVTJ-tJOFChGkd7OBpbtQjIbEo9tv4GgBMzI2DQ_A"},
{"content":{"body":"My point is more that Reflect.get cannot magically know its in an `unsafe` block","format":"org.matrix.custom.html","formatted_body":"My point is more that Reflect.get cannot magically know its in an <code>unsafe</code> block","m.mentions":{},"msgtype":"m.text"},"ts":1728363922334,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1iXK6QOyoq_LOjO6krETaSVHl99DVgH-C8bnSiemRKc"},
{"content":{"body":"ack","m.mentions":{},"msgtype":"m.text"},"ts":1728363936186,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OS7_2gasxdCV4k7NDR3OVA6TgNDo9OuQ2eb1i2yUx88"},
{"content":{"body":"It either must always succeed, always fail, or be explicitly informed via a parameter.","m.mentions":{},"msgtype":"m.text"},"ts":1728363969943,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$So2YEbuagOPj6pVmeZygSwP6qW_lHMv-CGaMI_0I1VQ"},
{"content":{"body":"Maybe I'm misunderstanding - but if you view it as an object which has been sealed, the behavior seems consistent with other objects, right?","m.mentions":{},"msgtype":"m.text"},"ts":1728364295200,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$41Ottf1SaJ1_cPv8oymH4Eu1Dd6Z14iliMGWSHCkO-U"},
{"content":{"body":"given a choice between \"make it practical to write shared-memory parallelism in JS\" and \"preserve the property about things being in WeakMaps\", I cannot _imagine_ thinking the second thing is as important","format":"org.matrix.custom.html","formatted_body":"given a choice between \"make it practical to write shared-memory parallelism in JS\" and \"preserve the property about things being in WeakMaps\", I cannot <em>imagine</em> thinking the second thing is as important","m.mentions":{},"msgtype":"m.text"},"ts":1728364328700,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hm6LZ0haPirkXMWl2JPvFzm189aFro81YOFkG7IY8j8"},
{"content":{"body":"it is like, several orders of magnitude less important","m.mentions":{},"msgtype":"m.text"},"ts":1728364337036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZGw1u8h9xfx8bfAI1E7vw90UDZrV3fx-H-_WI_qUlow"},
{"content":{"body":"this is not to say that I don't see the real cost to having more complex rules for developers. it's just that making it practical for pages to have shared-memory parallelism is of incredible, massive value to every user of the web, measured in nontrivial fractions of our lives spent waiting for slow pages that didn't have to be slow. and against that, \"JS developers have more complexity to learn\" just does not rate","m.mentions":{},"msgtype":"m.text"},"ts":1728364590529,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RZ__fPbwfVk2zZqxeAht3IOLPezhBtRiNKGy0QrTLBs"},
{"content":{"body":"ideally, of course, we would find something that allows us to get both","m.mentions":{},"msgtype":"m.text"},"ts":1728364607977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TuSpiCQ3t8c6QLA9JTmVnNDuSKJ0aU94-G9eoMIsEWA"},
{"content":{"body":"Yeah this seems like a clear case of what Yulia mentioned as a philosophical concern ","format":"org.matrix.custom.html","formatted_body":"Yeah this seems like a clear case of what Yulia mentioned as a philosophical concern","msgtype":"m.text"},"ts":1728364618990,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rBHWFloE47o-Jul6m-TemAG_V01bhlCff271etqkVoc"},
{"content":{"body":"but if it comes down to a choice between those two, we cannot choose the \"we don't get practical parallelism\" one.","m.mentions":{},"msgtype":"m.text"},"ts":1728364626547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U04OHAoS1e0AzS1bKG1tZsOeIWIVBzcsIHIC1DKnidc"},
{"content":{"body":"I'd much rather have shared memory multithreading than consistency with WeakMap keys. We already have this violation with symbols.","m.mentions":{},"msgtype":"m.text"},"ts":1728364672577,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rLsOXorqux50TkRIoDJBod-hjjQYm2Xo8N6JcEsAGQ4"},
{"content":{"body":"symbols aren't objects.","m.mentions":{},"msgtype":"m.text"},"ts":1728364678852,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K0ZS7ysyX4cHggiY6pGjY9vVAm5iyAG1Vm17xFLdnNM"},
{"content":{"body":"There are other synchronization primitives and concurrency mechanisms I'd like to add, but none meet the bar for an MVP proposal, we hope to propose them as follow-ons later.","m.mentions":{},"msgtype":"m.text"},"ts":1728364744280,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1ASKaJdpzRakgX_FIGHlu-CVTCC7C43pTwmSXaJ2Kas"},
{"content":{"body":" * There are other synchronization primitives and concurrency mechanisms we'd like to add, but none meet the bar for an MVP proposal, we hope to propose them as follow-ons later.","m.mentions":{},"m.new_content":{"body":"There are other synchronization primitives and concurrency mechanisms we'd like to add, but none meet the bar for an MVP proposal, we hope to propose them as follow-ons later.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1ASKaJdpzRakgX_FIGHlu-CVTCC7C43pTwmSXaJ2Kas","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728364753362,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ox1U9Z_sC_-43OqCGvRpd76b5mfkBv0-DEHPdJBpC6I"},
{"content":{"body":"sorry I spoke too quickly, there is currently no spec behavior that allows a host to prevent object keys to be added to WeakMap, but there is to allow them to refuse any private field stamping","m.mentions":{},"msgtype":"m.text"},"ts":1728364754606,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WW7q3P3B9jnZF5Ft8ErjSzppAxxG5jsRVF_kUJwG0Tw"},
{"content":{"body":"> <@mhofman:matrix.org> sorry I spoke too quickly, there is currently no spec behavior that allows a host to prevent object keys to be added to WeakMap, but there is to allow them to refuse any private field stamping\n\nsure but that language was only added recently *for window specifically*","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WW7q3P3B9jnZF5Ft8ErjSzppAxxG5jsRVF_kUJwG0Tw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>sorry I spoke too quickly, there is currently no spec behavior that allows a host to prevent object keys to be added to WeakMap, but there is to allow them to refuse any private field stamping</blockquote></mx-reply>sure but that language was only added recently <em>for window specifically</em>","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WW7q3P3B9jnZF5Ft8ErjSzppAxxG5jsRVF_kUJwG0Tw"}},"msgtype":"m.text"},"ts":1728364799901,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JcPXGxbTWfryJuTkVM_8KblXqWySAQ6MzGrJ8LI2VEA"},
{"content":{"body":"There is also the possibility that structs and shared structs are more primitive-like than object-like, especially given that shared struct per-realm prototype lookup is likely to be very much like primitive prototype lookup.","m.mentions":{},"msgtype":"m.text"},"ts":1728364835078,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gTrkVgl5qkVQQUM-ItT1iprHIVBzB-fwzsSqZCtzzrQ"},
{"content":{"body":"yes, i remain surprised they're not primitives personally","m.mentions":{},"msgtype":"m.text"},"ts":1728364866457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E9CkfDqPKlD767N93t_NOijc2PAtxFfK2PKG1vkv5tI"},
{"content":{"body":"primitives shouldn't be mutable","m.mentions":{},"msgtype":"m.text"},"ts":1728364887086,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Vy9dLipVnwzXGKiw5KFRebsJ4zREur-JoI-9llTzSbE"},
{"content":{"body":"oh true","m.mentions":{},"msgtype":"m.text"},"ts":1728364891593,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FMqdLwL_TOQeQOy4sWt76Eu0GU9i7FhgHYVz2to4auU"},
{"content":{"body":"Mathieu Hofman: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1728364915382,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VN4zctm8SIKvl5Oe1Y7RUdFzQIPu4EgvbORkEdEcPR8"},
{"content":{"body":"I am also worried about this topic but unlike Waldemar, I feel a lack of expertise on the subject lol","m.mentions":{},"msgtype":"m.text"},"ts":1728364929387,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$hL1P4_G5JcHw6Nu3pJsfWQIj14QBSTzjbJ5yPdgfmkM"},
{"content":{"body":" * Mathieu Hofman: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd and that was very very intentional, since the expectation was that only `window` would ever use it","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd and that was very very intentional, since the expectation was that only <code>window</code> would ever use it","m.mentions":{},"m.new_content":{"body":"Mathieu Hofman: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd and that was very very intentional, since the expectation was that only `window` would ever use it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: re the host hook, it's only allowed in a web browser https://tc39.es/ecma262/#sec-privatefieldadd and that was very very intentional, since the expectation was that only <code>window</code> would ever use it","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VN4zctm8SIKvl5Oe1Y7RUdFzQIPu4EgvbORkEdEcPR8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728364931297,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HaIp1UyIZGEaHgLsDsAEuwvykoiVk9B3RomjFNbMPEs"},
{"content":{"body":"In a way, they are essentially \"structured primitives\" in that they have own fields. I'm not opposed to them having primitive-like behavior for `typeof` and `Object()`, but we'd need to discuss more among the champions.","format":"org.matrix.custom.html","formatted_body":"In a way, they are essentially \"structured primitives\" in that they have own fields. I'm not opposed to them having primitive-like behavior for <code>typeof</code> and <code>Object()</code>, but we'd need to discuss more among the champions.","m.mentions":{},"msgtype":"m.text"},"ts":1728364933578,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F1zkzI1S6JCngGLXsrGuX22xx4X6SPjod60hewhJOxg"},
{"content":{"body":"that would be a much bigger problem for existing programs, a new type that has object like bahviors","m.mentions":{},"msgtype":"m.text"},"ts":1728364940008,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zu5fXvJTMj2iL6hZMzCo6FhR7UANJpw6AA__BCZ49O0"},
{"content":{"body":"`\"use unsafe\";`","format":"org.matrix.custom.html","formatted_body":"<code>\"use unsafe\";</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728364969649,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BuBowVTiDD9r-lKgqwKXrAG923lOhSirbNMTrwI8Pho"},
{"content":{"body":"> <@mhofman:matrix.org> that would be a much bigger problem for existing programs, a new type that has object like bahviors\n\nRecord was originally proposed to do this, but I see your point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zu5fXvJTMj2iL6hZMzCo6FhR7UANJpw6AA__BCZ49O0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>that would be a much bigger problem for existing programs, a new type that has object like bahviors</blockquote></mx-reply>Record was originally proposed to do this, but I see your point.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zu5fXvJTMj2iL6hZMzCo6FhR7UANJpw6AA__BCZ49O0"}},"msgtype":"m.text"},"ts":1728364974423,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z1_EqGgHv8ISF9HXQxt7GcJzV-JSZaBngkIUBiqS0ws"},
{"content":{"body":"> <@ljharb:matrix.org> `\"use unsafe\";`\n\n`\"extra sloppy\";`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BuBowVTiDD9r-lKgqwKXrAG923lOhSirbNMTrwI8Pho?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><code>\"use unsafe\";</code></blockquote></mx-reply><code>\"extra sloppy\";</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BuBowVTiDD9r-lKgqwKXrAG923lOhSirbNMTrwI8Pho"}},"msgtype":"m.text"},"ts":1728365009612,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$jpOdgsLfpi9kCFFml4xSqP3p2ac23fRo_cSalxHGPC8"},
{"content":{"body":"right and we only considered it because R/T are immutable","m.mentions":{},"msgtype":"m.text"},"ts":1728365012761,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lPOheJKbmMREZcqVfKyx6tf9ZbDb2e5lhw7CliL5_Rc"},
{"content":{"body":"the value of `unsafe` blocks is definitely much lessened if `unsafe`-ness is not part of the type system. we could make it so, though? in the sense of, functions could be tagged with `unsafe`-ness, which is on by default if you use `unsafe {}` blocks, and then have some explicit mechanism for saying \"this function uses an `unsafe` block but is actually safe\"","format":"org.matrix.custom.html","formatted_body":"the value of <code>unsafe</code> blocks is definitely much lessened if <code>unsafe</code>-ness is not part of the type system. we could make it so, though? in the sense of, functions could be tagged with <code>unsafe</code>-ness, which is on by default if you use <code>unsafe {}</code> blocks, and then have some explicit mechanism for saying \"this function uses an <code>unsafe</code> block but is actually safe\"","m.mentions":{},"msgtype":"m.text"},"ts":1728365031803,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2Dybtjocv0YOWq_zC4E2b2uxaDb1TVzF7YgNV4u8BRE"},
{"content":{"body":"and if you call an `unsafe` function and do not have `unsafe {}` in your call stack then it throws","format":"org.matrix.custom.html","formatted_body":"and if you call an <code>unsafe</code> function and do not have <code>unsafe {}</code> in your call stack then it throws","m.mentions":{},"msgtype":"m.text"},"ts":1728365049611,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KHDEvLJZzBjvpnBBv_3BozL3P30vHuF0GEy8Te2F-zg"},
{"content":{"body":"disclaimer, I have not thought about this idea for more than 30 seconds","m.mentions":{},"msgtype":"m.text"},"ts":1728365061231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MmvdppjaD2G0Vi06pK2kduxcXvJbEXhtu_JuUo4Kz9I"},
{"content":{"body":"one concern that immediately rises in my mind (thinking about the cross-language notion of `unsafe`) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":"one concern that immediately rises in my mind (thinking about the cross-language notion of <code>unsafe</code>) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"msgtype":"m.text"},"ts":1728365103790,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$U-XtpQi-B4vVVHKXTgSwFq5jWMyy3lo3AK2AXDkBnxg"},
{"content":{"body":" * one concern that immediately rises in my mind (thinking about the cross-language use of `unsafe`) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":" * one concern that immediately rises in my mind (thinking about the cross-language use of <code>unsafe</code>) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"m.new_content":{"body":"one concern that immediately rises in my mind (thinking about the cross-language use of `unsafe`) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":"one concern that immediately rises in my mind (thinking about the cross-language use of <code>unsafe</code>) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$U-XtpQi-B4vVVHKXTgSwFq5jWMyy3lo3AK2AXDkBnxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728365112918,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yNQsmB0W3X_x3jfvPF6wfLpBXtPMRbAQeVyzN7iSdgE"},
{"content":{"body":" * one concern that immediately rises in my mind (thinking about the cross-language use of a `unsafe` keyword) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":" * one concern that immediately rises in my mind (thinking about the cross-language use of a <code>unsafe</code> keyword) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"m.new_content":{"body":"one concern that immediately rises in my mind (thinking about the cross-language use of a `unsafe` keyword) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":"one concern that immediately rises in my mind (thinking about the cross-language use of a <code>unsafe</code> keyword) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$U-XtpQi-B4vVVHKXTgSwFq5jWMyy3lo3AK2AXDkBnxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728365119469,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$HMOt96UqfSbptwzE1RYz-at2gWHpH-Plal3SWKEQKDU"},
{"content":{"body":"> <@bakkot:matrix.org> and if you call an `unsafe` function and do not have `unsafe {}` in your call stack then it throws\n\nThis becomes function coloring, which makes things even more complicated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KHDEvLJZzBjvpnBBv_3BozL3P30vHuF0GEy8Te2F-zg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and if you call an <code>unsafe</code> function and do not have <code>unsafe {}</code> in your call stack then it throws</blockquote></mx-reply>This becomes function coloring, which makes things even more complicated.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KHDEvLJZzBjvpnBBv_3BozL3P30vHuF0GEy8Te2F-zg"}},"msgtype":"m.text"},"ts":1728365128315,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6eYo1dEeC0qcb72Xn33nSEglWfLFQ9ycoIctXyWlTGA"},
{"content":{"body":"yeah other names have been proposed, like `volatile`, i think?","format":"org.matrix.custom.html","formatted_body":"yeah other names have been proposed, like <code>volatile</code>, i think?","m.mentions":{},"msgtype":"m.text"},"ts":1728365140024,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ruHyzWVYB52nkxmcikl_7rlgqC-sE32JT-bGslpKIao"},
{"content":{"body":"yes, but with a way to opt-out, which matters a lot","m.mentions":{},"msgtype":"m.text"},"ts":1728365142086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IotZ9tTp3lOFCVlXJepZuhZSbogR8aEEWqhxpQFv_Fs"},
{"content":{"body":" * one concern that immediately rises in my mind (thinking about the cross-language use of an `unsafe` keyword) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":" * one concern that immediately rises in my mind (thinking about the cross-language use of an <code>unsafe</code> keyword) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"m.new_content":{"body":"one concern that immediately rises in my mind (thinking about the cross-language use of an `unsafe` keyword) is:\nis this the only thing we'd ever want `unsafe` to _mean_ in JS?","format":"org.matrix.custom.html","formatted_body":"one concern that immediately rises in my mind (thinking about the cross-language use of an <code>unsafe</code> keyword) is:<br>is this the only thing we'd ever want <code>unsafe</code> to <em>mean</em> in JS?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$U-XtpQi-B4vVVHKXTgSwFq5jWMyy3lo3AK2AXDkBnxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728365142604,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xu6EdYaT5t7IBv0zGTntYZSAZh2SBmePvtjQjlA3dKo"},
{"content":{"body":"re: \"unsafe\"","m.mentions":{},"msgtype":"m.text"},"ts":1728365142704,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qhW60Mb9J-lJq253-Wy90kjEqTlzZh2JWx8xBkJ5tp8"},
{"content":{"body":"the reason `async` is annoying is because you can't go from async to sync","format":"org.matrix.custom.html","formatted_body":"the reason <code>async</code> is annoying is because you can't go from async to sync","m.mentions":{},"msgtype":"m.text"},"ts":1728365152701,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtwVziuuPFCYWyT7XgNYqwV-6vZ3Z2F8gGQ8Qobk5Kg"},
{"content":{"body":"and here you could","m.mentions":{},"msgtype":"m.text"},"ts":1728365154895,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jj-rllvpcqlZwTecJ_6xjtZ1n5yJzNCdV8zttSUU4uw"},
{"content":{"body":"> <@bakkot:matrix.org> and if you call an `unsafe` function and do not have `unsafe {}` in your call stack then it throws\n\nyou're describing function coloring","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KHDEvLJZzBjvpnBBv_3BozL3P30vHuF0GEy8Te2F-zg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and if you call an <code>unsafe</code> function and do not have <code>unsafe {}</code> in your call stack then it throws</blockquote></mx-reply>you're describing function coloring","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KHDEvLJZzBjvpnBBv_3BozL3P30vHuF0GEy8Te2F-zg"}},"msgtype":"m.text"},"ts":1728365155223,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4drqB6UMDu6RwXIVoayJ2dWE5WTWvBI4dUQKZZKWiNs"},
{"content":{"body":"`unsafe {}` isn't necessary at all for shared memory semantics, it is purely a guardrail to discourage unintended misuse","format":"org.matrix.custom.html","formatted_body":"<code>unsafe {}</code> isn't necessary at all for shared memory semantics, it is purely a guardrail to discourage unintended misuse","m.mentions":{},"msgtype":"m.text"},"ts":1728365164576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sv1b1ne83mKjxfPkP3iD7_23M_cY2p3n08EQqIG4xgk"},
{"content":{"body":"function coloring is annoying only because you can't use async from sync. here you could as long as you explicitly opt in to enforcing the invariants yourself.","m.mentions":{},"msgtype":"m.text"},"ts":1728365222705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y1oXD5qak7k4EG6ssSaFPBfSbrv6wzg066q89rPD_Lk"},
{"content":{"body":"I do like `volatile`, maybe. either way I'm glad to here that naming is being thought of","format":"org.matrix.custom.html","formatted_body":"I do like <code>volatile</code>, maybe. either way I'm glad to here that naming is being thought of","m.mentions":{},"msgtype":"m.text"},"ts":1728365222911,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$e8WNNuSNx6P0Fti-CwJjeqXjXLVPgFtLehPY8Ds6TS4"},
{"content":{"body":" * I do like `volatile`, maybe. either way I'm glad to hear that naming is being thought of","format":"org.matrix.custom.html","formatted_body":" * I do like <code>volatile</code>, maybe. either way I'm glad to hear that naming is being thought of","m.mentions":{},"m.new_content":{"body":"I do like `volatile`, maybe. either way I'm glad to hear that naming is being thought of","format":"org.matrix.custom.html","formatted_body":"I do like <code>volatile</code>, maybe. either way I'm glad to hear that naming is being thought of","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$e8WNNuSNx6P0Fti-CwJjeqXjXLVPgFtLehPY8Ds6TS4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728365227832,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$k0Oy9BaZHgL3tDDr2bVO7Qzmx3YiV4gcIUb2fGzMYBM"},
{"content":{"body":"> <@shuyuguo:matrix.org> yeah other names have been proposed, like `volatile`, i think?\n\nYes, `volatile {}` was a suggestion from the TypeScript team as an alternative, and we're welcome to discussing others if there is a better option.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ruHyzWVYB52nkxmcikl_7rlgqC-sE32JT-bGslpKIao?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>yeah other names have been proposed, like <code>volatile</code>, i think?</blockquote></mx-reply>Yes, <code>volatile {}</code> was a suggestion from the TypeScript team as an alternative, and we're welcome to discussing others if there is a better option.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ruHyzWVYB52nkxmcikl_7rlgqC-sE32JT-bGslpKIao"}},"msgtype":"m.text"},"ts":1728365239560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3uZOgunft2Nd7w4w7G35xhyI0wi5rnwPcZR8XEDWDus"},
{"content":{"body":"Personal take: The benefit of private fields is guaranteed encapsulation. I see the reverse WeakMap used to implement it to be an unfortunate implementation detail, not something to take advantage of. I would expect and hope that 99% of developers will not even be aware of it. Given that, it would be really weird if you could add private fields to structs after construction - which are supposed to be of a fixed shape.","m.mentions":{},"msgtype":"m.text"},"ts":1728365244823,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$dDeRIWtOXJU4AT2eXi8vaHJEeQTicNn_4f62qYboDfM"},
{"content":{"body":"You also basically end up with a 1 bit dynamic scoping for unsafeness of the call","m.mentions":{},"msgtype":"m.text"},"ts":1728365267537,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aXqcDaWthHMxjSu6Rbpn8-aUbQPNkI7Lkoo3kzhsm_E"}
]