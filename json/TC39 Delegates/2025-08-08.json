[
{"content":{"body":"> <@mhofman:matrix.org> However I haven't heard a request for userland to be able to implement the safe resolve operation itself. Just that whatever hosts can do, that userland can do it just as much (aka a virtualization constraint, which of course I'm 100% behind)\n\nUnfortunately this approach may not be web compatible, based on Svelte.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24xpiT9VqKHVQ81LKskCijDETPunQQaIJlZR1q86xUw44\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>However I haven't heard a request for userland to be able to implement the safe resolve operation itself. Just that whatever hosts can do, that userland can do it just as much (aka a virtualization constraint, which of course I'm 100% behind)</blockquote></mx-reply>Unfortunately this approach may not be web compatible, based on Svelte.","m.relates_to":{"m.in_reply_to":{"event_id":"$xpiT9VqKHVQ81LKskCijDETPunQQaIJlZR1q86xUw44"}},"msgtype":"m.text"},"ts":1754617852690,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HNQZdTa08RPZxPgKVl-JHGnzQDZ-wZ3CRRdcTgluOV4"},
{"content":{"body":"I realize svelte just added it, but the fact that anyoneâ€™s done a get accessor that depends on immediate access makes me wary that others may have done it.","msgtype":"m.text"},"ts":1754617900351,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YOPoIEpc5pkkVcjTBDi3ezS8zr2iBMk8VCP3xCJz1wE"},
{"content":{"body":"The idea would be to only use this in certain places not by default, I think?","msgtype":"m.text"},"ts":1754617950057,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$96h2v1iBm4T0ZM_PBDfTuEnvIlwucZANT2riJkYWkgk"},
{"content":{"body":"If we limit this to just a safe capability that does the proxy check, thatâ€™s work.","msgtype":"m.text"},"ts":1754617952884,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eB8uYyMhQDo2shDL0J53ro3DTrNv4gwgV3tEtTqmjVg"},
{"content":{"body":"Yah, thatâ€™d be fine.","msgtype":"m.text"},"ts":1754617962701,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$557GzlIFTDyS3bis-SuaFmVckqlhJZKgnFoRNKJLAaw"},
{"content":{"body":"The default promise capability (and then return value, and promise constructor) could use the current immediate then access. The safe capability does a check to immediately resolve a non-thenable, or defers then access if proxy or then accessor is defined.","msgtype":"m.text"},"ts":1754618060159,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PXOe6lxGSOmOIaHFR6h8ETNBAMIFRRm-9z36ebQZNGk"},
{"content":{"body":"Although, `Fulfilled` wrapper could do this without us having to switch everything to a new capability","format":"org.matrix.custom.html","formatted_body":"Although, <code>Fulfilled</code> wrapper could do this without us having to switch everything to a new capability","m.mentions":{},"msgtype":"m.text"},"ts":1754618132791,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$r0tl9Me4MZqjbR5zllJ8LZHbIKAq23P-lLClMLiVk7M"},
{"content":{"body":"* Although, `Fulfilled` wrapper could do this without us having to switch everything to a new capability ðŸ˜‰","format":"org.matrix.custom.html","formatted_body":"* Although, <code>Fulfilled</code> wrapper could do this without us having to switch everything to a new capability ðŸ˜‰","m.mentions":{},"m.new_content":{"body":"Although, `Fulfilled` wrapper could do this without us having to switch everything to a new capability ðŸ˜‰","format":"org.matrix.custom.html","formatted_body":"Although, <code>Fulfilled</code> wrapper could do this without us having to switch everything to a new capability ðŸ˜‰","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$r0tl9Me4MZqjbR5zllJ8LZHbIKAq23P-lLClMLiVk7M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754618139680,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WsCvTAb8Kd_1JgSKwbwrKu4Rkk9KLYddVz5hhtiBwx8"},
{"content":{"body":"Catching up on the discussion right as I head into a late night chat, so can't participate too much at the moment, but, I just want to explicitly say how much I appreciate how much thought and discussion is going into trying to fix this. It really is wonderful to see. Thanks everyone. ","m.mentions":{},"msgtype":"m.text"},"ts":1754620065942,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$H5eu8y-o28fUpUjXdAsP6mTS07EPKiJAXZSYxZSxqgY"},
{"content":{"body":"* If we limit this to just a safe capability that does the proxy check, thatâ€™d work.","m.new_content":{"body":"If we limit this to just a safe capability that does the proxy check, thatâ€™d work.","msgtype":"m.text"},"m.relates_to":{"event_id":"$eB8uYyMhQDo2shDL0J53ro3DTrNv4gwgV3tEtTqmjVg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754621126432,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RgloEsjreajiEgPIX0YhkJcbiM9JzXeB75ikI5oStTw"},
{"content":{"body":"mgaudet: Can we get access to the test case mentioned in https://bugzilla.mozilla.org/show_bug.cgi?id=1923344#c11?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mgaudet:mozilla.org\">mgaudet</a>: Can we get access to the test case mentioned in https://bugzilla.mozilla.org/show_bug.cgi?id=1923344#c11?","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"msgtype":"m.text"},"ts":1754682563448,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$v0shkQmbUkHTP-_nh-HvUb8VIk6sc-goH2LpO2UYTOE"},
{"content":{"body":"I mainly want to see what the thenable implementation was","m.mentions":{},"msgtype":"m.text"},"ts":1754682580268,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$F8E5C0snFKc2vHzZnpvLMsPrDWhndxMBEoSjxUKLuRA"},
{"content":{"body":"* I mainly want to see what the thenable implementation was, if it had some exploit code to it","m.mentions":{},"m.new_content":{"body":"I mainly want to see what the thenable implementation was, if it had some exploit code to it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$F8E5C0snFKc2vHzZnpvLMsPrDWhndxMBEoSjxUKLuRA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754682590943,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9cNv65VE0srOL4McoLNfaT-NkV9wW4IWjtyoZ4C0q5M"},
{"content":{"body":"Or does the animation just being a thenable cause the exploit?","m.mentions":{},"msgtype":"m.text"},"ts":1754682610612,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kyqsGdIDTOtC9rJzdCWNvq0DkI90JLv-TDspuwQn0cg"},
{"content":{"body":"This affects Mathieu Hofman's preferred solution to delay thenable access, if just being a thenable is the problem then this solution will not solve that case.","format":"org.matrix.custom.html","formatted_body":"This affects <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>'s preferred solution to delay thenable access, if just being a thenable is the problem then this solution will not solve that case.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1754682660395,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RGP3VM7nheCdRg5UeYu4_PUJwvOouHCIraWPoGY3U5E"},
{"content":{"body":"it definitely had exploit code in it; but the problem was _where_ the code ran (synchronously at a point not forseen) ","format":"org.matrix.custom.html","formatted_body":"it definitely had exploit code in it; but the problem was <em>where</em> the code ran (synchronously at a point not forseen)","m.mentions":{},"msgtype":"m.text"},"ts":1754682787847,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$jySIwIErBvakY5U1XfEONGvAYafPlfVMLQ_jLbxHWhg"},
{"content":{"body":"Now, IIRC that one did not require newborn objects, and thus would probably not have been fixed by our mitigations for newborn objects that have been discussed. Not paged in at the moment tho","m.mentions":{},"msgtype":"m.text"},"ts":1754682925974,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$dqmHXWz5KuhCYkHMk6_IkAbYJla0j4Y3v_UiGLbIeRQ"},
{"content":{"body":"Afaik the problem is almost always with synchronous then get operations","msgtype":"m.text"},"ts":1754682926461,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_YkTxADB0yJRwwyEW1Obpk0tHlsohCtQIgZvk8K96v0"},
{"content":{"body":"```\nObject.defineProperty(Object.prototype, 'then', {\n    get: function () {\n      if (this.toString() == \"[object Animation]\") { \n```\n\nis the snippet from the simplified test acse","format":"org.matrix.custom.html","formatted_body":"<pre><code>Object.defineProperty(Object.prototype, 'then', {\n    get: function () {\n      if (this.toString() == \"[object Animation]\") { \n</code></pre>\n<p>is the snippet from the simplified test acse</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1754682989077,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$8KbUuWFPfJYhPscnU5Ne8KyEwgPsqMyQCJ7GoOJMlKI"},
{"content":{"body":"So it is something like `get then() {\n  exploit here;\n  return () => {}\n}`","format":"org.matrix.custom.html","formatted_body":"So it is something like <code>get then() { exploit here; return () =&gt; {} }</code>","m.mentions":{"user_ids":["@mgaudet:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jySIwIErBvakY5U1XfEONGvAYafPlfVMLQ_jLbxHWhg"}},"msgtype":"m.text"},"ts":1754683019163,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SGWbHeQ2zZfG_FFJxiv_k-y89UB5RGpHvS56mJkTzsc"},
{"content":{"body":"And yeah from what I read, the object was available to userland before. And an own then would have worked (even though the exploit code used an object prototype version)","msgtype":"m.text"},"ts":1754683032020,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mDmtRusAvOZETErdvPx4dzX3YQ0bCHYMH_idqNCtqmo"},
{"content":{"body":"Yep ","m.mentions":{},"msgtype":"m.text"},"ts":1754683044014,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$re-aBGNiiOdhTKIWb49QbvhPICEURDwfESECPrdm9R0"},
{"content":{"body":"There is a write up somewhere about that CVE ","msgtype":"m.text"},"ts":1754683089457,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1neCfbhOtiKZf9GT2S32qZWIE3gm9hZ51XUW1Q2MfkA"},
{"content":{"body":"Is it still possible to trigger the exploit with something like `then() { exploit here; }`?","format":"org.matrix.custom.html","formatted_body":"Is it still possible to trigger the exploit with something like <code>then() { exploit here; }</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1754683095158,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pIfWgW-92zXaLuBNHfM9h2w0x72y6zoBrSvki2scJGE"},
{"content":{"body":"Not it had to be a `get then`","msgtype":"m.text"},"ts":1754683114591,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JdLMMHaXiIvxJArVo3gl647diwwU-5RKZiVJYOYukRg"},
{"content":{"body":"(it could have been a proxy installed as the prototype too)","msgtype":"m.text"},"ts":1754683138302,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eBqnIUlmRjro_FXPN5JzbR2morrFYCaS0y8tARUIOXw"},
{"content":{"body":"https://www.welivesecurity.com/en/eset-research/romcom-exploits-firefox-and-windows-zero-days-in-the-wild/","m.mentions":{},"msgtype":"m.text"},"ts":1754683159744,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$NRAJ6sAbhn_iQpXtkje992hfwNDtPJlj82uUyy1IcFo"},
{"content":{"body":"Oh wait that's not the writeup ","m.mentions":{},"msgtype":"m.text"},"ts":1754683174824,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$bI2QgC7fkVhbh1KKNQKg-FXEnrxFSq1MMX9NgDLqLio"},
{"content":{"body":"Oh no it's in there, just needed to scroll futher","m.mentions":{},"msgtype":"m.text"},"ts":1754683207560,"senderName":"mgaudet","senderId":"@mgaudet:mozilla.org","id":"$_E31ZEzI3Bd0DL3vgA6RzGTXnjKg0pyeatBuwB1EO3k"},
{"content":{"body":"(Matrix needs to add a profile image cropper and stop telling people I'm changing my pic)","m.mentions":{},"msgtype":"m.text"},"ts":1754683257241,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$q9IPjOTch702n0Y3b_RsEmBLwTSIF28eyrC17fvvvmw"},
{"content":{"body":"Thanks for the link!","m.mentions":{},"msgtype":"m.text"},"ts":1754683278972,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$c7C9tNmnERKYP-AcYryOS1i0EWK58qQt5pWef1uBuKw"},
{"content":{"body":"That link also links to https://dimitrifourny.github.io/2024/11/14/firefox-animation-cve-2024-9680.html, which provides the full exploit","m.mentions":{},"msgtype":"m.text"},"ts":1754685209521,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-8FO20p3oY2N8jZiou2n4FEgf3iuI9MQrGMeHShMweM"},
{"content":{"body":"So if we do this:\n```\n1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n6. Call(then, onFulfilled, onRejected)\n```\n\nThat would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same","format":"org.matrix.custom.html","formatted_body":"<p>So if we do this:</p>\n<pre><code>1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n6. Call(then, onFulfilled, onRejected)\n</code></pre>\n<p>That would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same</p>\n","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wYn3s6LFm78FHEQx1wAd2TGTwktMqRJU_Uo3ljB13pY"}},"msgtype":"m.text"},"ts":1754687552898,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uakBiSwR6yHWz6G39TuGSa-S7uNOErJJRdIlr94tIVg"},
{"content":{"body":"* So if we do this:\n\n```\n1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n// Note: we used to delay 1 tick here\n6. Call(then, onFulfilled, onRejected)\n```\n\nThat would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same","format":"org.matrix.custom.html","formatted_body":"* <p>So if we do this:</p>\n<pre><code>1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n// Note: we used to delay 1 tick here\n6. Call(then, onFulfilled, onRejected)\n</code></pre>\n<p>That would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same</p>\n","m.mentions":{},"m.new_content":{"body":"So if we do this:\n\n```\n1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n// Note: we used to delay 1 tick here\n6. Call(then, onFulfilled, onRejected)\n```\n\nThat would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same","format":"org.matrix.custom.html","formatted_body":"<p>So if we do this:</p>\n<pre><code>1. Safely inspect obj and prototype chain for `.then`\n    1. If safe, fulfill now and exit\n2. Assert: not safe\n3. Delay 1 tick\n4. get `.then`\n5. If `.then` is not a function, fulfill and exit\n// Note: we used to delay 1 tick here\n6. Call(then, onFulfilled, onRejected)\n</code></pre>\n<p>That would fix the sync interleaving of C++ and JS code, wouldn't impact normal objects, and would keep the overall ticks for thenables the same</p>\n","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uakBiSwR6yHWz6G39TuGSa-S7uNOErJJRdIlr94tIVg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1754687708406,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nf7LYfXYt5ORwrEKjBq5zI18jgptt-aeRrGELNSAbr0"}
]