[
{"content":{"body":"another heads up for delegates, about Temporal. we got another spec bug report from two implementors today, and while investigating that one, Justin found another spec bug. I've added the fixes to the slides that I will present on Wednesday, but again since they are late additions, we understand if delegates will need more time to consider them.","msgtype":"m.text"},"ts":1635210105760,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$vPYTbLonGxfWb-QIjD_nF5U3pkub22MLo2-JWzwJh44"},
{"content":{"body":"Was there no CoC Committee update in the first session? It was on the agenda, but I didn’t hear any update and it’s not in the notes.","msgtype":"m.text"},"ts":1635217546358,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2qjjrrRNGQ-8gHn7V2SrQM6fvUqthW8ow6fXO98J61A"},
{"content":{"body":"No, I think the plan was to have it later. ","msgtype":"m.text"},"ts":1635237829592,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$45WzQSg1PjEUZenUIpcNYbCNeIdW2QafIXuBj6tlriI"},
{"content":{"body":"The Halloween edition of TC39 plenary will begin in 3 mins.","msgtype":"m.text"},"ts":1635238658797,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$K6L0rFHlM2dUYs5lEWkyZOkULTMMh8OYecs5FdDbEpU"},
{"content":{"body":"👻","msgtype":"m.text"},"ts":1635238778301,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$h93PHUy_f3cI9xH7tJVHEhBJz7IOvNmlDJspS8X2nvc"},
{"content":{"body":"I forget it every time: I don't have to fill the form every day, right?","msgtype":"m.text"},"ts":1635239009357,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$C_UzTgaeHATlsumk0Rd2QyLRmhn7KCKVGjdot57LeEY"},
{"content":{"body":" * I forget it every time: I don't have to fill the form every day, right?","m.new_content":{"body":"I forget it every time: I don't have to fill the form every day, right?","msgtype":"m.text"},"m.relates_to":{"event_id":"$C_UzTgaeHATlsumk0Rd2QyLRmhn7KCKVGjdot57LeEY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635239015229,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k4-39DL2GK1zJxuis73OxkBKbHyYnIz2MhRkS_NiIjo"},
{"content":{"body":"correct, nicolo - we keep the same password","msgtype":"m.text"},"ts":1635239086934,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$9nDYDZIWvkRCeJH1bXWkx2mGNAQohOi5ZGASxy2zBG8"},
{"content":{"body":"we just need each attendee to fill it in once","msgtype":"m.text"},"ts":1635239097777,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$QxPcrN1vlLWAzfanbW4lurzX7g9uyw9dq80IdPUV_A4"},
{"content":{"body":"Ok thanks!","msgtype":"m.text"},"ts":1635239104355,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$O27UC-x2bsAxH-9LqUlfUddWUOfcFLOCPZVuYvTIDDA"},
{"content":{"body":"(I had to do it twice because if you don't open matrix in a new window or save the info, you can't get back to it 🙈)","msgtype":"m.text"},"ts":1635239419199,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$JMg4viyhwyln1WUd01wrtP1xZ7sjkiElMxyF5UlXB70"},
{"content":{"body":"oh hi Surma ","format":"org.matrix.custom.html","formatted_body":"oh hi <a href=\"https://matrix.to/#/@surma:matrix.org\">Surma</a>","msgtype":"m.text"},"ts":1635239791928,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$bGqsVaF1CsDdjgzqxdKhsH7fn6JJRlOZZsh-1K7yhiw"},
{"content":{"body":"👋 Tierney Cyren ","format":"org.matrix.custom.html","formatted_body":"👋 <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">Tierney Cyren</a>","msgtype":"m.text"},"ts":1635239816696,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$0mZumMpS7nhD2u6RF5rSoklcspT6i04kErtm3b5RKZY"},
{"content":{"body":"glad to see you here :)","msgtype":"m.text"},"ts":1635239831246,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$kviB88wZEqaRHvsry-s7DiYz9dYZ8LZuZuJ3UlYYCH4"},
{"content":{"body":"👋hello","msgtype":"m.text"},"ts":1635239937194,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jWO4aASQQS999I61aArw7qMEzUgQbvqg_zqtp7jBjQw"},
{"content":{"body":"for the notes: frank said 3 PRs, but I can't figure out what the third one was","msgtype":"m.text"},"ts":1635240028557,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tbc3__AHQ8ar6rXlaDXRKg12UkpRN6Ttih_Za7QFi3I"},
{"content":{"body":"anyone know?","msgtype":"m.text"},"ts":1635240030481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eappg_fZxRJiBZ8sCiapWAHcWdkqs_C8ONQ7akG3hCI"},
{"content":{"body":"That looked like it worked.","msgtype":"m.text"},"ts":1635240032697,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2aZ6JJCz25mG8v8JzCREbz4yaKbkLtFHOmbmbP95AKA"},
{"content":{"body":"there was the non-continuous weekend one and the annex A one and then a third one","msgtype":"m.text"},"ts":1635240041480,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3WnGRjtDMzTtddU3ohXx85AAs2fRuvtpXOMBxYFJBkg"},
{"content":{"body":"\"canonical\"?","msgtype":"m.text"},"ts":1635240079898,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$H8EpyQ6ncHFLH_yGuAPSMrKc-FHYnaQjNTxlobCc08Q"},
{"content":{"body":"ah yes thanks","msgtype":"m.text"},"ts":1635240086687,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p_cZrhpWDZmFzwid4hGV0EX9GrCQcJYJ5EY3MNcBpns"},
{"content":{"body":"queue may be confused https://gc.gy/285b32a5-6cd1-4c10-9e9a-8a300f754897.png","msgtype":"m.text"},"ts":1635240202818,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$SYmT9-4kRd7-7kNrnegaTFaxuPVwr22F-A0bF7YdPH4"},
{"content":{"body":"an engine could probably do nice stack traces like that itself, no need to include pos in the error","msgtype":"m.text"},"ts":1635240417041,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CdKF-7EvuUkJIrmNlum0ALxC93SyS1BIYZ9lkjq5In4"},
{"content":{"body":"shu: raw returns some magic object that tells json.stringify to use the string as source instead of a string","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: raw returns some magic object that tells json.stringify to use the string as source instead of a string","msgtype":"m.text"},"ts":1635240632232,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$coeyEZ0h6d8NwlQo5UP_q2suwPC3FKim5L_qcAp4HKg"},
{"content":{"body":"In the cases where I have needed position information in JSON, I've generally had to rely on something like the TypeScript parser and AST, even in a purely JS project. My use cases so far have been fairly niche, such as doing minor updates to an existing JSON file while preserving the source formatting (usually for JSON files intended to be both human and machine readable such as package.json).","msgtype":"m.text"},"ts":1635240659641,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MlXurv4jQH8kyrMM4giwiLconla3DKQNavjQ3A2ijus"},
{"content":{"body":"syg: right now, JSON.stringify of an object without a `toString` is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@syg:mozilla.org\">syg</a>: right now, JSON.stringify of an object without a <code>toString</code> is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true","msgtype":"m.text"},"ts":1635241182422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA"},
{"content":{"body":"Michael Ficarra: I am strongly opposed to having the marker be an object with a symbol here because it implies that the engine will need to do a lookup on every object","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: I am strongly opposed to having the marker be an object with a symbol here because it implies that the engine will need to do a lookup on every object","msgtype":"m.text"},"ts":1635241575404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XnQ1usJkSfmF32aw7MDb0hXydyazB2QE_s3YlQkKtAI"},
{"content":{"body":"which is observable","msgtype":"m.text"},"ts":1635241583948,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hwo6yTjSIsRRr_VuufeMbPD2rcVk2C-ogpYShyw5H8I"},
{"content":{"body":"it's simpler in the sense of \"fewer kinds of object in the language\", true, but not in terms of \"how much observable behavior there is\", and the second thing seems like the thing we should be minimizing most of the time","msgtype":"m.text"},"ts":1635241613114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_02MrDiKXUUuaPjF5BBcKGjA7LMnZRwk9tJxZ0cCt20"},
{"content":{"body":"bakkot: fair point","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: fair point","msgtype":"m.text"},"ts":1635241697197,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NmiqZ2DnUlw0SZajM7EXxy-PjBHKjt8rAlRdSj3tArI"},
{"content":{"body":"that's a good point","msgtype":"m.text"},"ts":1635241744438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I73n2aTt_8rgUWZB-eWV5tt1xtg8kgkBrRTrYTIVCoc"},
{"content":{"body":"though i don't think a particular problem for performance in the common case","msgtype":"m.text"},"ts":1635241756282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oO4x5S-l8NLZ3E340hen_3eWoJe_LDGbtgY2w7RVIu4"},
{"content":{"body":"bakkot: how do we ensure these exotic marked objects don't usefully escape the callback?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: how do we ensure these exotic marked objects don't usefully escape the callback?","msgtype":"m.text"},"ts":1635241758605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2ahxFh_x5a2dAwQHCE4n5OXDo8QOft505rFMUlmRPZo"},
{"content":{"body":"you don't","msgtype":"m.text"},"ts":1635241771682,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jlxDpIjMncouu_A9A2FUBewNpEsEsMDTXN_fXjHDEDE"},
{"content":{"body":"is the value of the slot fresh?","msgtype":"m.text"},"ts":1635241779045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wmrllBva2mwXUJFPZ03AUdQhn9x1eLHhPqANQgGRcdk"},
{"content":{"body":"oh you mean per-invocation","msgtype":"m.text"},"ts":1635241808564,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$pNLcm283TIr6zEcQ6_pj-3343VdGiEPInfStQ_xGdx4"},
{"content":{"body":"in terms of spec language you could say its `{[[Index]]: n, [[String]]: s}`","format":"org.matrix.custom.html","formatted_body":"in terms of spec language you could say its <code>{[[Index]]: n, [[String]]: s}</code>","msgtype":"m.text"},"ts":1635241828599,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$o7oU1l3Z2cOtef7TTCghTuhcY23mgYWjChwWq8zOEk4"},
{"content":{"body":"and expect that index back","msgtype":"m.text"},"ts":1635241848056,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DoP0OZRrGjvLRMVi_N2nvqK4w4XO8FBjI9hRS65wpgs"},
{"content":{"body":"or you could expect the whole object i guess","msgtype":"m.text"},"ts":1635241855002,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VUf-_-g3vrqY9rTlt_EJYwUo-EOKQGky-o033O0R4bY"},
{"content":{"body":"cuz it has identity","msgtype":"m.text"},"ts":1635241857873,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$F8liOYqkxvVcCDEhwFD4rntnSC00mP8bLz7rR0D7Jhg"},
{"content":{"body":"Michael Ficarra: you can't ensure they don't escape, but like devsnek says you have a field which indicates which invocation it is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: you can't ensure they don't escape, but like devsnek says you have a field which indicates which invocation it is","msgtype":"m.text"},"ts":1635241934216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1tNoEquab5FfMywtnJG8WyPjRLpVFpNaK78Q89VQA08"},
{"content":{"body":"s/field/internal slot/","msgtype":"m.text"},"ts":1635241945301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qMdzdy7Qq0wtRPlF7OUQpEPxwHQzTZV3oGDlrR8MiLs"},
{"content":{"body":"> <@bakkot:matrix.org> syg: right now, JSON.stringify of an object without a `toString` is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true\n\nis that something that's generally depended upon?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@syg:mozilla.org\">syg</a>: right now, JSON.stringify of an object without a <code>toString</code> is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true</blockquote></mx-reply>is that something that's generally depended upon?","m.relates_to":{"m.in_reply_to":{"event_id":"$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA"}},"msgtype":"m.text"},"ts":1635241948336,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hD5aXLy1FHiY-5_QQb-EGVPZp-SlOnpv2qVyqMw2Pq4"},
{"content":{"body":"```js\nlet thing;\nlet raw = (v) => {\n  thing = { v };\n  return thing;\n};\nconst result = callback(key, value, { raw });\nif (thing && result === thing) {\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">let thing;\nlet raw = (v) =&gt; {\n  thing = { v };\n  return thing;\n};\nconst result = callback(key, value, { raw });\nif (thing &amp;&amp; result === thing) {\n</code></pre>\n","msgtype":"m.text"},"ts":1635241961243,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WDEMs8y100SiqjFVP-C0kJmqWGr8d2S4foyfcJFUO-4"},
{"content":{"body":"okay I mean a counter is just a fresh value, so I'm fine with that","msgtype":"m.text"},"ts":1635241968816,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BecRWEpT_BQ0LPErm6Zl0_Gl3Yoc_IZfPZ6ZmT9VmHE"},
{"content":{"body":"like, wouldn't the new guidance be \"here's another hook we need, if you hook into it, well, you get hook behavior\"","msgtype":"m.text"},"ts":1635241975095,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bOPR90CsqAL0CdLH1B53ZbA7MfXk4jsGqbITD30o31I"},
{"content":{"body":"and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","msgtype":"m.text"},"ts":1635241975098,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EE02szJREw4PlQmWOHyX55CHahZpW_i3aQ9BI0_wxqY"},
{"content":{"body":"what happens if you call raw multiple times in one callback","msgtype":"m.text"},"ts":1635241983030,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6QUiL8mgqL9WS5XV1Lz5RtSWK2UplVtFHW7xoSX_qoc"},
{"content":{"body":" * and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","m.new_content":{"body":"and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","msgtype":"m.text"},"m.relates_to":{"event_id":"$EE02szJREw4PlQmWOHyX55CHahZpW_i3aQ9BI0_wxqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635241985811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eidKoHzisLtk4Q7Z7ja1dc5H1qSrEP2ZbjQGnMNdafM"},
{"content":{"body":"devsnek: same index","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: same index","msgtype":"m.text"},"ts":1635241994277,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QULd51S5A085eHH-4K7E0GHxZGzZX6lfpVT1sVSjSaM"},
{"content":{"body":"i feel like that should work, you could compose a sub-object","msgtype":"m.text"},"ts":1635241995893,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$aytIaakA3ggXIS8dYYZAAkpHUhABjSH7GFPXackiADM"},
{"content":{"body":"Tbh I would expect the argument to `raw` to always be a string","format":"org.matrix.custom.html","formatted_body":"Tbh I would expect the argument to <code>raw</code> to always be a string","msgtype":"m.text"},"ts":1635242025596,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$e0lF_gJNbRQTpg-0Er3TovlQPADOeDLfp1XPYXabDPI"},
{"content":{"body":"Otherwise it's not raw","msgtype":"m.text"},"ts":1635242028879,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jKkXI29wNkDoUsDaPDsx1WmUCo1IJ5y-FPNQbrKr5hk"},
{"content":{"body":"no i mean like","msgtype":"m.text"},"ts":1635242034446,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$78U0LbdESGC4ZgukRJ43YDDvjj697gWiSoyZq1Uarmk"},
{"content":{"body":"`(key, value, { raw }) => ({ a: raw(foo), b: raw(bar) })`","format":"org.matrix.custom.html","formatted_body":"<code>(key, value, { raw }) =&gt; ({ a: raw(foo), b: raw(bar) })</code>","msgtype":"m.text"},"ts":1635242056910,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$2GLUDnDwhf3zoPgpJqiuB9EAFVNm4fAJvV874O9h-G4"},
{"content":{"body":"uh ok, that makes sense","msgtype":"m.text"},"ts":1635242072225,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RwAExtEc-u9BroUQVuEXi0cgYhg7fmIoaj3PfM_dirc"},
{"content":{"body":"For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":"For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","msgtype":"m.text"},"ts":1635242110571,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fSmYNYDPUVeqTxz8hJOs0U5MjyVEABpbhDIsHogxTYE"},
{"content":{"body":" * For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":" * For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","m.new_content":{"body":"For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":"For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fSmYNYDPUVeqTxz8hJOs0U5MjyVEABpbhDIsHogxTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635242129742,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qFpTtSK2RZs62l9PN3QOmBEnxurwecqDyjkgGCtB7GQ"},
{"content":{"body":"ye you could put a tojson on that","msgtype":"m.text"},"ts":1635242130803,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$KfjDAg_qenydESp1EmN5oEFtXTAxAv2oFvH-Q-EfXTE"},
{"content":{"body":"which uses raw","msgtype":"m.text"},"ts":1635242136078,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$kSSEvmByP7BKUJ6UNfCvkEZ9F1XGOp9dyeiVDshEWIw"},
{"content":{"body":"toJson wouldn't get passed `raw`","format":"org.matrix.custom.html","formatted_body":"toJson wouldn't get passed <code>raw</code>","msgtype":"m.text"},"ts":1635242184632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PHC60BpYfnhC5n23n98oCo5qCQQRd54-rB4k6Z3vv5E"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1635242185492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QTcfvn50uUuUdsWrrTu_exprVh2D7-9gUmR6yzEE4gI"},
{"content":{"body":"unless we do the global well-known symbol approach","msgtype":"m.text"},"ts":1635242201445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NhW2rhc5WoKl8aonNnnRYPS4IHQVYmp44FQ9k20qufg"},
{"content":{"body":"why does it matter which approach","msgtype":"m.text"},"ts":1635242215938,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6dqckrg90PQieFiWwDlxeHVzw0RzGmB-PNF28VMLm20"},
{"content":{"body":"Can't toJSON receive a parameter even if it's not global?","msgtype":"m.text"},"ts":1635242220399,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"},
{"content":{"body":"i think tojson should get to participate ","msgtype":"m.text"},"ts":1635242224150,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$FpyAI1qkBGc7DZH0MsLSJNKGTnQDAFu-RQgVIPT37Ks"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can't toJSON receive a parameter even if it's not global?\n\n(it _could_ break something?)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Can&#39;t toJSON receive a parameter even if it&#39;s not global?</blockquote></mx-reply>(it <em>could</em> break something?)","m.relates_to":{"m.in_reply_to":{"event_id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"}},"msgtype":"m.text"},"ts":1635242243202,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vSQDRwXafgfleGn6FTsDuqdqW0xUou5w0BCpAxYekBA"},
{"content":{"body":"I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"I mean it could but it doesn't in the current proposal","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"}}},"ts":1635242250158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cjek1Ae7bu90eN0iXFx8aWGcZP9UA_Kn2jE3H74RDIE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can't toJSON receive a parameter even if it's not global?\n\n * I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Can't toJSON receive a parameter even if it's not global?</blockquote></mx-reply> * I mean it could but it doesn't in the current proposal","m.new_content":{"body":"I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"I mean it could but it doesn't in the current proposal","msgtype":"m.text"},"m.relates_to":{"event_id":"$cjek1Ae7bu90eN0iXFx8aWGcZP9UA_Kn2jE3H74RDIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635242257694,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hld0qQXrVfI3W-GwaNF6hd5uoULXM24rsFukw3kgN6U"},
{"content":{"body":"also if we're going to let toJson participate I think a well-known symbol would make more sense anyway","msgtype":"m.text"},"ts":1635242279430,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s7I3t5PAN-L46O-Eylsaizttxfpu4EmQ3OgUQFglnhU"},
{"content":{"body":"since the point of having the per-invocation value is to ensure the stringifier callback has control","msgtype":"m.text"},"ts":1635242302581,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MCpTVc5OYsjPlq3nRJt2vtWdAvGQnZFSWYiw2ntb9HQ"},
{"content":{"body":"and toJson is for giving the objects being serialized control","msgtype":"m.text"},"ts":1635242317829,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kMNzAde0cz8Hy9AxD0L2ngVLLjEtWGDf5mPpNd0L9tM"},
{"content":{"body":"though, I guess a global well-known symbol means we'd be imposing a cost on all _existing_ serialization calls, which seems bad","format":"org.matrix.custom.html","formatted_body":"though, I guess a global well-known symbol means we'd be imposing a cost on all <em>existing</em> serialization calls, which seems bad","msgtype":"m.text"},"ts":1635242364444,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UJo9PMUiFgoe_lxyakCmbiQZZsog5JKmwxhGFiw4etM"},
{"content":{"body":"extra get per object in the graph to be stringified does seem bad","msgtype":"m.text"},"ts":1635242498248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r6fuEhZT-I-eBIdX7UMMkZIAlhN936NHu9c16cL29EQ"},
{"content":{"body":"though isn't that an issue even with a per-stringify symbol","msgtype":"m.text"},"ts":1635242507170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZS3xGwznvA6ONwhU9OqSFNHRW-XjnRJEw87zeL7EQcg"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635242566597,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ge9vwa23NSrTJ7EIcC28Oj_kZM-OJusHgS_MO8cOJdQ"},
{"content":{"body":"not with an opaque object though!","msgtype":"m.text"},"ts":1635242574437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oMgVd3pJluGJL5hnAlTceAWlw9btgm7cgMayEnvEjAk"},
{"content":{"body":"well, not an extra get but an extra slot check, which ought to be much cheaper, yes","msgtype":"m.text"},"ts":1635242609873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eQ51GISQ4lCM6Wfq4_G7xYCipMWpTTpERMyv-9mT4FE"},
{"content":{"body":"so, ok, here is an alternate possible design which I don't hate:\n\nadd a new `JSON.rawString` which returns an opaque, frozen, null-prototype object with a new internal slot holding a string (which has been checked to be valid JSON - maybe even a valid JSON primitive?). this can be called by any code. if JSON.stringify encounters such an object, it serializes it to its internal slot","format":"org.matrix.custom.html","formatted_body":"<p>so, ok, here is an alternate possible design which I don't hate:</p>\n<p>add a new <code>JSON.rawString</code> which returns an opaque, frozen, null-prototype object with a new internal slot holding a string (which has been checked to be valid JSON - maybe even a valid JSON primitive?). this can be called by any code. if JSON.stringify encounters such an object, it serializes it to its internal slot</p>\n","msgtype":"m.text"},"ts":1635242617761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kbMU50tGNOnPuzXIKOY4hqQ38qpL8R6KQG-mRevZvz0"},
{"content":{"body":"then toJson can use this function, and revivers can as well","msgtype":"m.text"},"ts":1635242639955,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0iuwDma9OUJdmc9MCSl8xPRfYFxvaUOVtF7gtNhh5I0"},
{"content":{"body":"basically just the \"allow it to be not per-invocation\" approach, but with internal slots instead of symbols","msgtype":"m.text"},"ts":1635242681174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S2BHKr3jydNz1_ZBNP6JYU9g1H8FBj66XaiHl6nF5zQ"},
{"content":{"body":"+1 from me. if the opaque object has gensym behavior it also complicates the performance of the slot check","msgtype":"m.text"},"ts":1635242698652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vG244UV3UTQ3T2L1G3NioTQi4l6yF3VBlgF0KmuccHc"},
{"content":{"body":"\"has gensym behavior\"?","msgtype":"m.text"},"ts":1635242713984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oO_ESuXn40s9ApGLHXrySmhUDRMKQubFRNO7RgJtmYw"},
{"content":{"body":"https://gc.gy/d9ff7617-8eb7-4039-81bf-ac0201805137.png","msgtype":"m.text"},"ts":1635242738860,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$izjYpGmv8pYIjo0nHEjjAM8820F50jTsJI7mpQhJ2io"},
{"content":{"body":"the fresh minting behavior where each invocation of stringify has a new kind of opaque object only valid for that invocation","msgtype":"m.text"},"ts":1635242742647,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n2YuXzul-prk4zUFCSXIz5K6lkpAFm5kMFuVP-ya2AY"},
{"content":{"body":"gensym = generate symbol?","msgtype":"m.text"},"ts":1635242763056,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$toN4fEuESf5L_Fj-70TJm4pQTALZ2u9R-KVzkvCc80o"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635242772792,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_cj8z9AVu9ICDAURGEMw2r3vDOy0HBkOi1jdUWHeuGY"},
{"content":{"body":"it's the scheme thing that returns fresh symbols","msgtype":"m.text"},"ts":1635242791032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zgAm9p-F8Sc4bLJ1ARBywKiliELDFdLOHk4rPX_tHCc"},
{"content":{"body":"I know what gensym is but am confused about how it affects GC here","msgtype":"m.text"},"ts":1635242992872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vGBah1HuTcpuk8IbkOsk_mNXFWnmVop74pVWd9zMq0Y"},
{"content":{"body":"oh, unless you're thinking about the GC of the underlying string?","msgtype":"m.text"},"ts":1635243024663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g31Kqra9Ow67R2D5yEmfQbS0Z44zOouj0PZ4mGfMH4c"},
{"content":{"body":"I would just not worry about the fact that holding the opaque object holds the string, I guess","msgtype":"m.text"},"ts":1635243045637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HiLN7wUKOfAfYewPDrjaSEGmq2TNYSQTUtxJNdwnFRs"},
{"content":{"body":"no not gc","msgtype":"m.text"},"ts":1635243055827,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TbKlqWFGwBLXU27cBICHYeGp1sElhF17U6ITQjxtOto"},
{"content":{"body":"i meant the \"is this one of them opaque objects\" checks","msgtype":"m.text"},"ts":1635243085989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YgW1JJ5_nNb3gbgNC8VDi9Id0GswzUZADWZsAW7f9Ao"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1635243092837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ycvKbmyzKtGsB75HbOQRcUB9F3YI3nnwOVFBTTkudH0"},
{"content":{"body":"I mean, you check if it has the slot, and then if it does you check if the value for the slot matches the value for the current invocation","msgtype":"m.text"},"ts":1635243118170,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VjQ0oQByK4Awo1UUZ6jXZm-RiJxV5oNINNlsxwEKXZg"},
{"content":{"body":"seems not so bad","msgtype":"m.text"},"ts":1635243121337,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f6wqJ_p_9Q6juxx3JL0Kpw48QpJ7OQ1SJUHOi2yz-hI"},
{"content":{"body":"and it's just the presence-of-slot check which gets paid by code not using this capability","msgtype":"m.text"},"ts":1635243133277,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aeiIVH7Xrx3KTUGCl1H_p3HBHfDDZKTTMpttcRl3Pok"},
{"content":{"body":"agree, seems not so bad","msgtype":"m.text"},"ts":1635243275097,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rELrPG7wZbWACB8Km5-kgHSUDea3D2jkw8JYHjWli4g"},
{"content":{"body":"yeah I favour this raw function that returns an object with an internal slot with index (or two such slots) option now","msgtype":"m.text"},"ts":1635243345763,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yRdRFUPJg7IGTYaVrtnLRPlDY7wlfRrBHa3bppPr3L0"},
{"content":{"body":"github issue: https://github.com/tc39/proposal-json-parse-with-source/issues/19","msgtype":"m.text"},"ts":1635243353600,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YHPt0JYiOS2FcO407XAW8gPK1eTgrcsBpBNSFy8dzyg"},
{"content":{"body":"Michael Ficarra: https://github.com/tc39/proposal-json-parse-with-source/issues/18#issuecomment-951789801","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: https://github.com/tc39/proposal-json-parse-with-source/issues/18#issuecomment-951789801","msgtype":"m.text"},"ts":1635243393094,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w4DdYGWQg0hlVJ3tR6tR6AUHhlwN1CysfkHY6leBlQo"},
{"content":{"body":"Michael Ficarra: what index? the per-invocation counter?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: what index? the per-invocation counter?","msgtype":"m.text"},"ts":1635243396117,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SeMUbmud-VOCKpDNhwFujvkTPKRor9aQRTiAhts735I"},
{"content":{"body":"ehh, i'd still rather we just have global","msgtype":"m.text"},"ts":1635243410725,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yxmezfAzbIBsemqt3dVAEDkbPllB_Y4Obl3sHahqVUE"},
{"content":{"body":"The only issue I see with an exotic object is if you write any custom JSON serialization logic today in a replacer/reviver, you would need to be able to test whether the object is one of these exotic objects so you can pass it through rather than trying to convert it yourself.","msgtype":"m.text"},"ts":1635243440845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZHhK_D54SBG5mV5VqBeYuNfkoaRaBNGrIlHZK4dTjrc"},
{"content":{"body":"yes, per-Json-stringify counter and possibly a per-callback counter","msgtype":"m.text"},"ts":1635243455260,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E4Z0Rc3KB4YzQblEKHcqL3rbxEs01OQuKVi4d3FH1KI"},
{"content":{"body":"i am against a per-callback counter","msgtype":"m.text"},"ts":1635243465458,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x5zidU_rDvRvs6DCX5I1aNLBJ9eR1pqDjkU7Mw-2oMA"},
{"content":{"body":"that's probably fine shu ","format":"org.matrix.custom.html","formatted_body":"that's probably fine <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1635243478783,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$31FoQow4ibTdiJ1gWtqeyUZcvVioEFXZo7q3U-J0gew"},
{"content":{"body":"i am also against a per-invocation counter and favor bakkot's concrete alternative, to be clear","format":"org.matrix.custom.html","formatted_body":"i am also against a per-invocation counter and favor <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s concrete alternative, to be clear","msgtype":"m.text"},"ts":1635243495671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-b9OcEhBK5HF8QuqCmKgO1GYSwc1mckYn9yIxO61M38"},
{"content":{"body":"but i am more against per-callback counter","msgtype":"m.text"},"ts":1635243501848,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bO4zPpA2A9-NlUFJtPrLp_esahsTDnI-CbiLRmV79Rk"},
{"content":{"body":"So you need both a `JSON.rawSting` and a `JSON.isRawString`, otherwise it comes *harder* to write serializers/deserializers.","format":"org.matrix.custom.html","formatted_body":"So you need both a <code>JSON.rawSting</code> and a <code>JSON.isRawString</code>, otherwise it comes <em>harder</em> to write serializers/deserializers.","msgtype":"m.text"},"ts":1635243509263,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t3d2QVIo_L7daHUdrD_5sXxHBcrJy5B0-fogvtTXJc0"},
{"content":{"body":"what do you do with isRawString","msgtype":"m.text"},"ts":1635243533953,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ZiqFvLkHcvnkGJ5HYwAbJ4PRqsjy7xKSbnhPVU5FpSw"},
{"content":{"body":"If you do custom serialization of any kind you need to know if the object you get in your custom serializer/replacer is this special exotic object or some other object.","msgtype":"m.text"},"ts":1635243598906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DZpb64sqdkUDaLR5ghFg7thGDRXzr9Q8duj8xDZ1wYA"},
{"content":{"body":"fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":"<p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","msgtype":"m.text"},"ts":1635243635846,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"},
{"content":{"body":"why do you need to know","msgtype":"m.text"},"ts":1635243649528,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$5xyX80yvzWXZ9yMS1F7b7uw9WT_YoTg1Jadlr0rEG-Y"},
{"content":{"body":" * fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":" * <p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","m.new_content":{"body":"fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":"<p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635243653010,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8KeTBkWrbPNWSXbs4Bw2GmaGozXNUC-ATTc-3sgKuI8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n> \n> (we are not looking to include tagged strings in the R&T proposal)\n\nthis issue makes me very sad, previously we said that Box(v) should always work without you having to care what v is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n</blockquote></mx-reply>this issue makes me very sad, previously we said that Box(v) should always work without you having to care what v is","m.relates_to":{"m.in_reply_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"}},"msgtype":"m.text"},"ts":1635243715777,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$vF1FLiUEuu7wsNZ1oaw8gP1BgY9tGCEfAJ5xNhzv-04"},
{"content":{"body":"A naive replacer might do:\n```js\nfunction serializer(value) {\n  if (typeof value === \"object\") {\n    if (Array.isArray) { ... }\n    const result = {};\n    for (const key in value) { ... } \n    return result; // uh oh, we've replaced the exotic object with an empty normal object.\n  }\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>A naive replacer might do:</p>\n<pre><code class=\"language-js\">function serializer(value) {\n  if (typeof value === &quot;object&quot;) {\n    if (Array.isArray) { ... }\n    const result = {};\n    for (const key in value) { ... } \n    return result; // uh oh, we've replaced the exotic object with an empty normal object.\n  }\n  ...\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1635243745904,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$McBbomDXl8DoX5EtRji9q2SCiy5qx2MLLk1GRYBrLJ8"},
{"content":{"body":"If there's no way to test, you have to expect to pass through objects with no keys, which adds complexity.","msgtype":"m.text"},"ts":1635243771618,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lBpEuF0V4vU6Hh7aFuWmjFtbP5dKXcdFbHp00bMpTdE"},
{"content":{"body":"rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code>","msgtype":"m.text"},"ts":1635243788765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n> \n> (we are not looking to include tagged strings in the R&T proposal)\n\nI really don't like attaching state to strings or any object in a way that is not only immediately consumed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n</blockquote></mx-reply>I really don't like attaching state to strings or any object in a way that is not only immediately consumed","m.relates_to":{"m.in_reply_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"}},"msgtype":"m.text"},"ts":1635243793692,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bPKRVzxsJ4JGZxLL_2LQYKHPYRyBTCeYSqQY79iA55I"},
{"content":{"body":"if we do that, we'd have to at least have a testing function like what Ron's talking about","msgtype":"m.text"},"ts":1635243816064,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nuSd_augopin31LCt6Nv91Q4I6BG2sJlOQEWcXUc_5k"},
{"content":{"body":"but then you force anyone using this feature to test anything that goes into their returned object","msgtype":"m.text"},"ts":1635243837006,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BYhnjvttb79xXL6H8tydS0BBk6HGpijnXflHeF3pddM"},
{"content":{"body":"> <@bakkot:matrix.org> rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`\n\n(assuming that `isRawString` enforces that its argument is a primitive JSON string or digit sequence)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code></blockquote></mx-reply>(assuming that <code>isRawString</code> enforces that its argument is a primitive JSON string or digit sequence)","m.relates_to":{"m.in_reply_to":{"event_id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"}},"msgtype":"m.text"},"ts":1635243839872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oe7ksqNOXQKuM8LSm3VyHt3RmPvhPDBAWSSct5N5DWk"},
{"content":{"body":"The upside of a symbol is its something you can check for.","msgtype":"m.text"},"ts":1635243845902,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nB766aAFwVZxB9IqxGlGK90aWODkMWqunoIeN8JIVKA"},
{"content":{"body":"(to be clear, not saying this is great, just saying that it's possible-ish without a new function)","msgtype":"m.text"},"ts":1635243849259,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OV_U2qkPNtNSIDKg2h_cNaXbHrP1K7gnVKVzfZcNafM"},
{"content":{"body":"> <@bakkot:matrix.org> rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`\n\nA `JSON.rawString(\"{}\")` would be observabily the same as `Object.freeze({ __proto__: null })`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code></blockquote></mx-reply>A <code>JSON.rawString(&quot;{}&quot;)</code> would be observabily the same as <code>Object.freeze({ __proto__: null })</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"}},"msgtype":"m.text"},"ts":1635243865076,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3iRBg4R34yMltCb_yukQiVhrSMozVJlh-NHHVM4_Rvw"},
{"content":{"body":"bakkot: So, your suggestion is to JSON.stringify an arbitrarily complex/large object that may have its own nested toJSON just to check for an exotic raw string object?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: So, your suggestion is to JSON.stringify an arbitrarily complex/large object that may have its own nested toJSON just to check for an exotic raw string object?","msgtype":"m.text"},"ts":1635243887271,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hW_pgb5f1ErC4xioUdP4SUZ2VHZ9ikTgEJ8nAGQGtY8"},
{"content":{"body":"nicolo-ribaudo: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: &quot;assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence&quot;","msgtype":"m.text"},"ts":1635243896523,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs"},
{"content":{"body":"> <@bakkot:matrix.org> nicolo-ribaudo: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"\n\nWhops, I didn't read it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"</blockquote></mx-reply>Whops, I didn't read it","m.relates_to":{"m.in_reply_to":{"event_id":"$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs"}},"msgtype":"m.text"},"ts":1635243919393,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7NYweijMkPFnOk3Ocw5lE6ZWw_NtSJe1ADiiXOSqRyM"},
{"content":{"body":"rbuckton: you can add `Object.keys(o).length === 0` if you're worried about that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: you can add <code>Object.keys(o).length === 0</code> if you're worried about that","msgtype":"m.text"},"ts":1635243926049,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mCJXny_MwuTizDdrO48YURX9ZO3JZeTU0doHw-wBagA"},
{"content":{"body":"It would have to be much more robust, checking for null prototype, no properties, etc.","msgtype":"m.text"},"ts":1635243927524,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vhGYT2kAuUJWffZvvTImooXnwZyiLTSGBwj2mkf7qyQ"},
{"content":{"body":"bakkot: More like `Object.getPrototypeOf(o) === null && Object.getOwnPropertyNames(o).length === 0 && Object.getOwnPropertySymbols(o).length === 0` etc.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: More like <code>Object.getPrototypeOf(o) === null &amp;&amp; Object.getOwnPropertyNames(o).length === 0 &amp;&amp; Object.getOwnPropertySymbols(o).length === 0</code> etc.","msgtype":"m.text"},"ts":1635244017391,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lPRA8d8u7FAtp5K8MA8LygguaykoY5gLwtPCXIj-WvU"},
{"content":{"body":"unless you're concerned about proxies, I don't think you need those additional checks","msgtype":"m.text"},"ts":1635244033332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pxdz5-ImLWVrGrZgHdCsOX2ry9D4deVmLT2u8Ylrjjw"},
{"content":{"body":"no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":"no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","msgtype":"m.text"},"ts":1635244078078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jOMDGf2gpmlcrHzYCfw16DcB3Nwtu7OMwbbbFuAzhug"},
{"content":{"body":"In which case I point you at `Array.isArray`, which is better (and more reliable) than `o => typeof o === \"object\" && o !== null && Object.prototype.toString.call(o) === \"[object Array]\"`","format":"org.matrix.custom.html","formatted_body":"In which case I point you at <code>Array.isArray</code>, which is better (and more reliable) than <code>o =&gt; typeof o === &quot;object&quot; &amp;&amp; o !== null &amp;&amp; Object.prototype.toString.call(o) === &quot;[object Array]&quot;</code>","msgtype":"m.text"},"ts":1635244079560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q48MroAeH1Xy25pVjuh_zqspDQwDJb4MiVq7DiIcC7w"},
{"content":{"body":" * no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":" * no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","m.new_content":{"body":"no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":"no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$jOMDGf2gpmlcrHzYCfw16DcB3Nwtu7OMwbbbFuAzhug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635244099009,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xYea160p2913P20weduMgopBZJMxdfjmdrlBbK6cUWc"},
{"content":{"body":"I thought rawString could return a string that contains any valid JSON. Couldn't you do `JSON.rawString(\"{}\")`, and wouldn't that fail the check?","format":"org.matrix.custom.html","formatted_body":"I thought rawString could return a string that contains any valid JSON. Couldn't you do <code>JSON.rawString(&quot;{}&quot;)</code>, and wouldn't that fail the check?","msgtype":"m.text"},"ts":1635244129505,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$grceMux7oGTkgBtDotEMCDI0iWYkZIqU5QgusVJN0WI"},
{"content":{"body":"rbuckton: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: &quot;assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence&quot;","msgtype":"m.text"},"ts":1635244141104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6dGW4R_-F-e2fG_jFizlluZuhUeeaUk1KfT0BNGxDRQ"},
{"content":{"body":"which I think it should, separately from this concern","msgtype":"m.text"},"ts":1635244159915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WQGqM8a9hudE3SsBizjB2M7lOWCUbioTMX3Vf0C-HIQ"},
{"content":{"body":"(otherwise you can abuse it to add whitespace, which seems bad)","msgtype":"m.text"},"ts":1635244172823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8gvmQkKqa_SgtW0TBXx3sbBHsX_Jour_BmLR7o6EmfQ"},
{"content":{"body":"That's fair, but you're still requiring a fairly complex check that could be more easily exposed by the language. ","msgtype":"m.text"},"ts":1635244174876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OVz-aAFvTWI8HcDv8HvOAtYgBR63IL3Lnqrqd9EX8-g"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635244185512,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jY_XlOaadAehCX1y5r9N-2-JXyyczGNkMQYbS4WVxh8"},
{"content":{"body":"like I said, not saying my proposal is great, just that it's possible-ish","msgtype":"m.text"},"ts":1635244202503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zJtX5r1nov6dd8U_H9CsRYJc31amUPue5B4u40JxB54"},
{"content":{"body":"though I guess you _do_ also need to check for boxed numbers / strings, which is also annoying","format":"org.matrix.custom.html","formatted_body":"though I guess you <em>do</em> also need to check for boxed numbers / strings, which is also annoying","msgtype":"m.text"},"ts":1635244212142,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IoKXxppZeV3A17RUfW4w_MwSWv-X_H-k4F_Wp8Cmatc"},
{"content":{"body":"so yeah it seems reasonable to add `isRawString`","format":"org.matrix.custom.html","formatted_body":"so yeah it seems reasonable to add <code>isRawString</code>","msgtype":"m.text"},"ts":1635244230178,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7YgRt9aPZ8fKzGFEon3j1eZM9UAy5_bXHUrnwTEqq-M"},
{"content":{"body":"An `isRawString` shim is much more complex than an `isArray` shim, which means its much easier to get wrong if you're rolling your own serializer (which, I would argue, is the exact situation you're in if you're using this functionality).","format":"org.matrix.custom.html","formatted_body":"An <code>isRawString</code> shim is much more complex than an <code>isArray</code> shim, which means its much easier to get wrong if you're rolling your own serializer (which, I would argue, is the exact situation you're in if you're using this functionality).","msgtype":"m.text"},"ts":1635244268249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$P9ArKVIcGZz2n4EbF57RyIVux7Xxoj9Vy8_NjlEcgJ4"},
{"content":{"body":"is there a good way for me to get involved in the LF discussion meetings?","msgtype":"m.text"},"ts":1635244331985,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$D-TqQ3sqUvPbwYftWd-F19Y8hPvnPPOfv8vXTZPdBk8"},
{"content":{"body":"Tierney Cyren: you may join this ad-hoc group","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bitandbang:matrix.org\">Tierney Cyren</a>: you may join this ad-hoc group","msgtype":"m.text"},"ts":1635244352203,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$FQBCOhCvdD1E1T-kzyGpztHxgxKGkweCm8JEi58n1Jc"},
{"content":{"body":"I've wanted to participate but how is unclear and I've not gotten around to asking","msgtype":"m.text"},"ts":1635244360784,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$iwbV8mtMaJ2YgQRQ3zE_0Gxl125KQqcDxDTQEA0Z9SU"},
{"content":{"body":"write an email to Patrick and he'll add you to the mailing list/event","msgtype":"m.text"},"ts":1635244370087,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TK7CWlQqnJgHZXGYmazDnCMaRo3CK9sWjMmRGL9nl1Q"},
{"content":{"body":" * write an email to Patrick and he'll add you to the mailing list/event","m.new_content":{"body":"write an email to Patrick and he'll add you to the mailing list/event","msgtype":"m.text"},"m.relates_to":{"event_id":"$TK7CWlQqnJgHZXGYmazDnCMaRo3CK9sWjMmRGL9nl1Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635244373565,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$RUHD1q2e3UjSEXaUAkxrOWHFjv26rf5Bqyz4VeIbDyA"},
{"content":{"body":"talk to Isabelle, I think she's responsible for getting everyone interested from MS involved","msgtype":"m.text"},"ts":1635244409870,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$nitvWUiEs2JW-LEwjv-m3tEaiwhsMNfK3Dt-kjfa19I"},
{"content":{"body":"$4m seems like a lot but what's the actual runway that provides? ","msgtype":"m.text"},"ts":1635245183686,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$Y2_hExIBNOtKj_AGVxBPuYT1oP79KwEsiOAUc-VSUmE"},
{"content":{"body":"that number does not feel helpful in a vacuum","msgtype":"m.text"},"ts":1635245217054,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$va2N3tM59Po-M9EgDzVpX0BFoEY9yTWJ-3B7-pHmQYc"},
{"content":{"body":"we are starting up plenary in 1 minute!","msgtype":"m.text"},"ts":1635249578630,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$NIButULzAY71RF9E81f1sKMKKatHNKYiIkru37ptLls"},
{"content":{"body":"it also happened with NativeError.prototype.toString lol","msgtype":"m.text"},"ts":1635249960779,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$a4HLsRry9o9iXtVTXsusMlmDkJDpCbqBlRGxNRT-utU"},
{"content":{"body":"chrome had that from 2016 to 2019 until i removed it","msgtype":"m.text"},"ts":1635250013237,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$inSVRe0ezJGEZe0zuMavM7Yr17QIa7nElABtHnqdvm8"},
{"content":{"body":"instead of tightening host restrictions, can't we just make a section of test262 which is like \"okay to fail, but should probably be looked at because it's more likely a bug\"?","msgtype":"m.text"},"ts":1635250193861,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$j0lwafMrpwnHu-HFvNirHfCGCVxsx25eLMF69LgzquU"},
{"content":{"body":"i was just thinking that","msgtype":"m.text"},"ts":1635250213843,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XoL745d5y7cNAfsWnc7nwKIrIMixtNclvQN_wsJmr7o"},
{"content":{"body":"like a common-sense directory lol","msgtype":"m.text"},"ts":1635250219127,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$L91Cpv8Lifu8sANOeEPGjgUXJfzohXyqife1QgnLQGg"},
{"content":{"body":"Michael Ficarra: yes, i plan to bring that up","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: yes, i plan to bring that up","msgtype":"m.text"},"ts":1635250227077,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6NWL9dK6gXFGGc6LNfAnb9bP5OF5JMGlKPb4R8YXMT8"},
{"content":{"body":"i object to this proposal","msgtype":"m.text"},"ts":1635250237479,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TJViA4T6dgekKaPnteqHPhiJ4F2htSbLiSK4veY_Jqo"},
{"content":{"body":"thanks shu ","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1635250238155,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rKwkuLHKFY9hDy6xtkzPiQEZKrW_Ka4ZQ_Anv440r2U"},
{"content":{"body":"what is this proposal","msgtype":"m.text"},"ts":1635250243678,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VQyBwYr8TsT8N7efuhKoACcO3ZMvQ9VeqkZVIiKrzzY"},
{"content":{"body":"but i'll wait for jordan to actually say the proposal first","msgtype":"m.text"},"ts":1635250248243,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_HQjrpV44i-LPQfIr6WQp-hsJeZr_v7T3a6rj4br-Y4"},
{"content":{"body":"i haven't made it yet.","msgtype":"m.text"},"ts":1635250248516,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0W-paFS_IOhGFp8sNUjIqwIgxRXtMD9R0bDo7ZI4XGc"},
{"content":{"body":"before i add myself to the queue","msgtype":"m.text"},"ts":1635250251026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vngqGl7xM7c4jQtIYoCHFikYCLsetgdskzjvcxfl6BE"},
{"content":{"body":"i assume its restricting names on prototypes or smth","msgtype":"m.text"},"ts":1635250260642,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$bikKW62OOX5eRe7Z5vwAi9ve07mT89nRJdnMROgPNmM"},
{"content":{"body":"test262-parser-tests has a \"fail\" directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail","msgtype":"m.text"},"ts":1635250319335,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY"},
{"content":{"body":"\"Any property on a given object mentioned in the specification, must ONLY appear in the locations specified on that object or its prototype chain\"","msgtype":"m.text"},"ts":1635250349059,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IDW2hzuFvwEyqqv0OMqhMLOnTtgOs04T9iFt7tRyBf4"},
{"content":{"body":"> <@michaelficarra:matrix.org> test262-parser-tests has a \"fail\" directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail\n\ngood filenames","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>test262-parser-tests has a &quot;fail&quot; directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail</blockquote></mx-reply>good filenames","m.relates_to":{"m.in_reply_to":{"event_id":"$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY"}},"msgtype":"m.text"},"ts":1635250357684,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BM_B9uIC_my7dr2qT1sGxh80c63SYpOmjrk2UQuefhs"},
{"content":{"body":"hey you try naming files with random non-programs","msgtype":"m.text"},"ts":1635250397122,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cIXIO3ggN3fIrC87GQAmyyTuZ2-OidLJohuHmXJEOEQ"},
{"content":{"body":"pull requests welcome","msgtype":"m.text"},"ts":1635250409615,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ijz6JvP3HtDCTZVBzRzsBID16-klmjH5blPm__7Ta04"},
{"content":{"body":"are the names just a hash of the source code or sth?","msgtype":"m.text"},"ts":1635250457867,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$CxCxDHQasN7mnDWv9FLio6OrLjgtWfv81GfWFZGSYgo"},
{"content":{"body":" * are the names just a hash of the source code or sth?","m.new_content":{"body":"are the names just a hash of the source code or sth?","msgtype":"m.text"},"m.relates_to":{"event_id":"$CxCxDHQasN7mnDWv9FLio6OrLjgtWfv81GfWFZGSYgo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635250462438,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kxyOdy5tNSwPZ5W-GIfgc3Jl9Q9kaJxL2ZanooAvMFw"},
{"content":{"body":"yep ryzokuken ","format":"org.matrix.custom.html","formatted_body":"yep <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text"},"ts":1635250464800,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zez6hBc3ILJSrvmLI0tHOjDp2GFSMEqcnmk5iR4HSKg"},
{"content":{"body":"i like test262 names","msgtype":"m.text"},"ts":1635250483750,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jrbqoHgfGjN3Vphi_HtW_R7TC2kKQRt8gigo9niXGzo"},
{"content":{"body":"man I gotta update that project","msgtype":"m.text"},"ts":1635250627705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a-jZnXVgTm6m8RaI6JiXH3DzZ9MaHqQSXKOFZf-YVOQ"},
{"content":{"body":"`test-assignment-really-terribly-bad.js`","format":"org.matrix.custom.html","formatted_body":"<code>test-assignment-really-terribly-bad.js</code>","msgtype":"m.text"},"ts":1635250630984,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$OeSpSYLWzGSeCytJndaL7wHLsnnfLZ6jCXjMRySd-WQ"},
{"content":{"body":"would we need work in e.g. test262.report if we add a new test category?","msgtype":"m.text"},"ts":1635250766096,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$EC-CIgCCdfJQ5DxOvlDqjdEGtlJFBhSVt0zBc12071s"},
{"content":{"body":"test262.report is bocoup right","msgtype":"m.text"},"ts":1635250864517,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CcwhmVjcWpl-E2YhmyqmvvgL1m8xfkb6H-qQcFK3S8A"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1635250898729,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$uHKAJqEMkpe4y0a7MZ8121vnHvXWcx7YJoJcwgtIxZQ"},
{"content":{"body":"I wonder if there are test cases we would like to add to 262 aside from things we feel bold enough to tighten that would nonetheless be useful for impls? I seem to recall tests in this category back in the day but have forgotten","msgtype":"m.text"},"ts":1635250997920,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$fTVQF5KE3ZZvN7PtlaJQ7o5nZkXAwoLep87RfG2IadM"},
{"content":{"body":"gc tests :P","msgtype":"m.text"},"ts":1635251028223,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ErfXiUH9NhYXspqF8RgjE5u9wDxezKecTEymF3J_Tdo"},
{"content":{"body":"devsnek: you ready to present extending null next?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: you ready to present extending null next?","msgtype":"m.text"},"ts":1635251196265,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$oqRbCYt6splv136FL5gV8Mtn5yK36QftWhKPiXNT5Jg"},
{"content":{"body":"yep","msgtype":"m.text"},"ts":1635251202857,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$UJeeKOKA3QWO9uCPoxl5XwxW0rhCSp90nBaMyVQ3OQE"},
{"content":{"body":"assuming i haven't fallen asleep by then","msgtype":"m.text"},"ts":1635251214805,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WDMXkLo-gul5J3CO80NqTp7IY6A1WQJbm4kX67Gk3Io"},
{"content":{"body":"do not fall asleep 😁","msgtype":"m.text"},"ts":1635251223867,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$5W0hQUFaTghLXgmIT2bw3YK6DhUq-cc0PgtKmow4hXg"},
{"content":{"body":"> <@devsnek:matrix.org> gc tests :P\n\nWell for what it's worth, all those are busted right now (relies on removed `cleanupSome`). I have on my todo list of fixing all these","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ErfXiUH9NhYXspqF8RgjE5u9wDxezKecTEymF3J_Tdo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>gc tests :P</blockquote></mx-reply>Well for what it's worth, all those are busted right now (relies on removed <code>cleanupSome</code>). I have on my todo list of fixing all these","m.relates_to":{"m.in_reply_to":{"event_id":"$ErfXiUH9NhYXspqF8RgjE5u9wDxezKecTEymF3J_Tdo"}},"msgtype":"m.text"},"ts":1635251263043,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ikLY5PHqwOVV7TJkPupwoaKLiBJ600Y0MJIeuH3HoZw"},
{"content":{"body":"i'm still sad about cleanupsome being separated","msgtype":"m.text"},"ts":1635251284356,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$2UBuz6phbK-t-hUOU9DHPhH3KYrYd4F58du_fYudY24"},
{"content":{"body":"Justin Ridgewell: if we need to pull in items today, are you available to present destructure private fields?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: if we need to pull in items today, are you available to present destructure private fields?","msgtype":"m.text"},"ts":1635251304140,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$i0UOkvctchI_o6vjn0jUaT0ji9CVLpwC76Yh9Q-EHUI"},
{"content":{"body":"NativeError.prototype.toString on v8 only shadows Error.prototype.toString uselessly \n","msgtype":"m.text"},"ts":1635251913059,"senderName":"erights","senderId":"@erights:matrix.org","id":"$P2s0pikPX0eJBo9dChkLCbRhMiPTaABYDv99hb7S1wg"},
{"content":{"body":"hm i didn't really have a position","msgtype":"m.text"},"ts":1635252689767,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$_R9mM1jfU3a2e6u-c9cUgutCOSn9GzP3twM9EunppXc"},
{"content":{"body":"lol ok i am going to be the only one maybe","msgtype":"m.text"},"ts":1635253332569,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$w5JmZWsdxFJjP28NakuIO_rBqGkpLIaCF-8JEU4UN_8"},
{"content":{"body":"Could `super()` just be a no-op in `class extends null`?","format":"org.matrix.custom.html","formatted_body":"Could <code>super()</code> just be a no-op in <code>class extends null</code>?","msgtype":"m.text"},"ts":1635253518276,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G_Hw4yMuXH7QmkhWJzRN6RHopfgKtubJYX4VpdDrLKY"},
{"content":{"body":"yulia: someone brought up the possibility of `class extends void {}` for a statically-analyzable version of `null`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: someone brought up the possibility of <code>class extends void {}</code> for a statically-analyzable version of <code>null</code>","msgtype":"m.text"},"ts":1635253551421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_rAPB7jgqPuIwmYeLjGilg7vxtZiXtyVlRJFbHnQlQ0"},
{"content":{"body":"she brought that up, yeah","msgtype":"m.text"},"ts":1635253562219,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CRQimkTzQVjiASC6FnOMasXor_t6caYApMPr76Xm6hs"},
{"content":{"body":"oh yeah","msgtype":"m.text"},"ts":1635253568462,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IgORu1ZhOPWmrqHLT0rmiWtZXDkJ7gjyInD74XsmpK4"},
{"content":{"body":"i guess some SM engineers thought it odd because (void 0) is undefined?","msgtype":"m.text"},"ts":1635253569129,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XopBT3QlK_4X94PU5qnNzxR56cvsTBC34eAcIKu5FuY"},
{"content":{"body":"sorry I'm tired","msgtype":"m.text"},"ts":1635253572381,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NKdM0J4xZoprwuC9f3igfmi0o7WMk0g0rK9NM3saX-U"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635253574960,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$RfYCac8GyO6IgooJ6PONuzoe-mzkuGiXNYojcTXIf5c"},
{"content":{"body":"that doesn't seem like a very big objection, though","msgtype":"m.text"},"ts":1635253577908,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EwOQAuC8z-JKyc71Tab60TQ8OAj_DQQC83ErylbTNu0"},
{"content":{"body":"the void 0 thing","msgtype":"m.text"},"ts":1635253582449,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mMe9PzAYNkeMvbRuzLIFb5j7aeT5JlVfBUeEhwSS2d4"},
{"content":{"body":"yeah i think it works kind off well personally","msgtype":"m.text"},"ts":1635253595608,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BP46c4F6LNc4YE6T18vvb3m_v_VBpgUei8jPRTLr4wk"},
{"content":{"body":"it's super weird to not allow `extends X` for any valid X, and to force `null` to have a special syntactic form","format":"org.matrix.custom.html","formatted_body":"it's super weird to not allow <code>extends X</code> for any valid X, and to force <code>null</code> to have a special syntactic form","msgtype":"m.text"},"ts":1635253606338,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YXRAdHHYlzadawGBu-LBpv-sSqHRGURhy2aQiVvivcA"},
{"content":{"body":" * it's super weird to not allow `extends X` for any valid X, and to force `null` to have a special syntactic form","format":"org.matrix.custom.html","formatted_body":" * it's super weird to not allow <code>extends X</code> for any valid X, and to force <code>null</code> to have a special syntactic form","m.new_content":{"body":"it's super weird to not allow `extends X` for any valid X, and to force `null` to have a special syntactic form","format":"org.matrix.custom.html","formatted_body":"it's super weird to not allow <code>extends X</code> for any valid X, and to force <code>null</code> to have a special syntactic form","msgtype":"m.text"},"m.relates_to":{"event_id":"$YXRAdHHYlzadawGBu-LBpv-sSqHRGURhy2aQiVvivcA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635253611743,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sfG_ZrnBy5LnSjobWPO1ezuzxrLJRewCsO6Cbd6SGgA"},
{"content":{"body":"null objects aren't supposed to be special, from a conceptual standpoint","msgtype":"m.text"},"ts":1635253632302,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E5JnYsPXcmx08faajuk7qqF2jR_GbyctLA3lKHjDJ7E"},
{"content":{"body":" * null objects aren't supposed to be special, from a conceptual standpoint","m.new_content":{"body":"null objects aren't supposed to be special, from a conceptual standpoint","msgtype":"m.text"},"m.relates_to":{"event_id":"$E5JnYsPXcmx08faajuk7qqF2jR_GbyctLA3lKHjDJ7E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635253636424,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E4w5SFPfRfcJOyRYtvAbUI2d-EB-V8CD7yQ6z68kcY8"},
{"content":{"body":"`null` was already special","format":"org.matrix.custom.html","formatted_body":"<code>null</code> was already special","msgtype":"m.text"},"ts":1635253641759,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kz0CD6TeFELh4shuVcQaQm4GPDB2cbMvIIU8Rhk05Pk"},
{"content":{"body":"you have to extend a _constructor_","format":"org.matrix.custom.html","formatted_body":"you have to extend a <em>constructor</em>","msgtype":"m.text"},"ts":1635253647342,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vmLMs4x8Um4vK5qnSRbhcD0zSHItKl5QqaaTLuBtQu4"},
{"content":{"body":"there is nothing weird about `null` not working","format":"org.matrix.custom.html","formatted_body":"there is nothing weird about <code>null</code> not working","msgtype":"m.text"},"ts":1635253651571,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UqAQ68y2JbHtplI2yAgTHlFP6oET_SH7XhLoVu_N3WQ"},
{"content":{"body":"i would consider null special","msgtype":"m.text"},"ts":1635253654732,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VDsvD0e62ABZ4tntfW-s226aQQUON17bFVUGMqoGtyg"},
{"content":{"body":"it was always going to be special-cased","msgtype":"m.text"},"ts":1635253660595,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QpGPaqY-pjrniwxsj-_npDXtys4mwbOGmvnH4vY_8HA"},
{"content":{"body":"Besides, you can't write `class extends void 0` since a `void` expression isn't a LHS expression","format":"org.matrix.custom.html","formatted_body":"Besides, you can't write <code>class extends void 0</code> since a <code>void</code> expression isn't a LHS expression","msgtype":"m.text"},"ts":1635253667892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qySMifXHy6pIIu7auNfOrPJny2XaQUsi2XOZEzQYkU8"},
{"content":{"body":"the weird thing is that we special cased it to not throw on definition","msgtype":"m.text"},"ts":1635253674373,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$bL8zNzAbL1CuhV2JYM0QnSE_Slo2fE1FshIS_0jFcOg"},
{"content":{"body":"if we can do this from a syntax perspective, i don't mind if super == this","msgtype":"m.text"},"ts":1635253701550,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$QdyvkrQaFNW1d17H4wM6hmAslm0RgfVFYnPH9_s0kQU"},
{"content":{"body":"thats fine","msgtype":"m.text"},"ts":1635253703106,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wZycg0Hu3TNYDndgkujl2vqCSDmnqaoI1KnEY5jmIRo"},
{"content":{"body":"We could always have a shared %NullConstructor% that you assign as the base for `class extends null` so that `super()` could work.","format":"org.matrix.custom.html","formatted_body":"We could always have a shared %NullConstructor% that you assign as the base for <code>class extends null</code> so that <code>super()</code> could work.","msgtype":"m.text"},"ts":1635253736812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8OeJcwAGcLsJb9PWK_EX6S2whi-w1Lr6RE2pmV3pwpA"},
{"content":{"body":"i.e., change 8.f.ii. of ClassDefinitionEvaluation to be `Let constructorParent be %NullConstructor%.`, where %NullConstructor% is a built-in function purely for the purpose of supporting `super()`.","format":"org.matrix.custom.html","formatted_body":"i.e., change 8.f.ii. of ClassDefinitionEvaluation to be <code>Let constructorParent be %NullConstructor%.</code>, where %NullConstructor% is a built-in function purely for the purpose of supporting <code>super()</code>.","msgtype":"m.text"},"ts":1635253905179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_lXaYCrmCedpUFe8ljHAvTzm40yHwUtxTjsHcG2GfHs"},
{"content":{"body":" * i.e., change 8.f.ii. of ClassDefinitionEvaluation to be `Let constructorParent be %NullConstructor%.`, where %NullConstructor% is a built-in function purely for the purpose of supporting `super()`.","format":"org.matrix.custom.html","formatted_body":" * i.e., change 8.f.ii. of ClassDefinitionEvaluation to be <code>Let constructorParent be %NullConstructor%.</code>, where %NullConstructor% is a built-in function purely for the purpose of supporting <code>super()</code>.","m.new_content":{"body":"i.e., change 8.f.ii. of ClassDefinitionEvaluation to be `Let constructorParent be %NullConstructor%.`, where %NullConstructor% is a built-in function purely for the purpose of supporting `super()`.","format":"org.matrix.custom.html","formatted_body":"i.e., change 8.f.ii. of ClassDefinitionEvaluation to be <code>Let constructorParent be %NullConstructor%.</code>, where %NullConstructor% is a built-in function purely for the purpose of supporting <code>super()</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$_lXaYCrmCedpUFe8ljHAvTzm40yHwUtxTjsHcG2GfHs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635253917013,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sXwztIEY0Em1Jkfni3mOQzL-izUUukW54aO83nIudwc"},
{"content":{"body":"yulia: could you expand a bit on the runtime problem in SM?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: could you expand a bit on the runtime problem in SM?","msgtype":"m.text"},"ts":1635253917940,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o6Icjha2L08lKSAYjiSi20m_8F1KT_-zGq1sxNamBcA"},
{"content":{"body":"basically, we won't be able to determine which bytecode we need to use until we execute it","msgtype":"m.text"},"ts":1635253940568,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Cf_WjOR9Ya3DuwyZvqCa_5VvbnELW8fHoSpvQfRJroY"},
{"content":{"body":"bytecode for what operation?","msgtype":"m.text"},"ts":1635253953454,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_KFiVVmHZ1M7crzV0Hf7ItbUr_0uG74teSEOtUyL3lk"},
{"content":{"body":"for the look up of the prototype iirc","msgtype":"m.text"},"ts":1635253976362,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hXlwnVR4JaW1u2-aAG5tu0nqD3JWSZGNvb0gUdajkXQ"},
{"content":{"body":"im trying to find the notes just a sec","msgtype":"m.text"},"ts":1635253988887,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$1QchHgtJRpOaLnXc86I5LqxRL0PoDigclAB9xUJEXUs"},
{"content":{"body":"thank you","msgtype":"m.text"},"ts":1635253994532,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lR6HK4aSH29YxUwCvotWg_GZiklLpUGJ8401asOE9Hg"},
{"content":{"body":"\"In this proposal if the base is null, the spec is asking for the constructor to still extend Function.prototype (which is reasonable enough). Normally we pull the super target function off the constructors own prototype while running, but in this case we also need to check elsewhere to find the original heritage to know if it was null vs explicitly Function.prototype.\nThis can be fixed for us by adding the original heritage (or at least a flag) to the JSFunction of the constructor. Problem is we don't really have a lot of spare slots or flags on functions themselves\"","msgtype":"m.text"},"ts":1635254018932,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$e0TTtLjxXJOnPrJpkN3lAUNyPPgpJrNFprk7uqlDb58"},
{"content":{"body":"Mathieu Hofman: it's not a base class _unless_ it inherits from Object.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: it's not a base class <em>unless</em> it inherits from Object.","msgtype":"m.text"},"ts":1635254048469,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SYjjv7Yan1cuUcFPQgVwCi5gtGpjqJwVQZo2IfJoRMA"},
{"content":{"body":"perhaps base classes should all have extended null, and `extends Object` should have been required to make something inherit from Object.prototype, but that ship's long gone","format":"org.matrix.custom.html","formatted_body":"perhaps base classes should all have extended null, and <code>extends Object</code> should have been required to make something inherit from Object.prototype, but that ship's long gone","msgtype":"m.text"},"ts":1635254073585,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lBJ7-notj0nhrLbeh-DoTdET534aswyApfjm5bM_8mc"},
{"content":{"body":"ooh, i see","msgtype":"m.text"},"ts":1635254082458,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZPwLtNRPPns55A0MpC3RdiEJRabGeJ0sprGmhfkfTGw"},
{"content":{"body":"that makes sense, yes, that's a bigger problem, in its requiring two bits of info","msgtype":"m.text"},"ts":1635254098650,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J32iLwPrl2IP3N9g1U_ARBEFnUHlAQgXZYESk5qNkB8"},
{"content":{"body":"(totally fine with me if the constructor itself also inherits from null)","msgtype":"m.text"},"ts":1635254230037,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HCm7KqnuLn2vcCwtn9TlR51VOmXSe5R1AJIaKDRDfxw"},
{"content":{"body":" * (totally fine with me if the constructor itself also inherits from null)","m.new_content":{"body":"(totally fine with me if the constructor itself also inherits from null)","msgtype":"m.text"},"m.relates_to":{"event_id":"$HCm7KqnuLn2vcCwtn9TlR51VOmXSe5R1AJIaKDRDfxw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635254233060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_4OGzn2F8AbCOKAnNYpxS2hxbnIYVYHTNhGSuFhMfXo"},
{"content":{"body":"the custructor should not inherit from null","msgtype":"m.text"},"ts":1635254250666,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jf9_YmHFAjf3xsYkc07vGWAK6hcDYyQmh3MVcH5Yglo"},
{"content":{"body":"> <@ljharb:matrix.org> (totally fine with me if the constructor itself also inherits from null)\n\nThis is problematic if you want to use `.bind`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HCm7KqnuLn2vcCwtn9TlR51VOmXSe5R1AJIaKDRDfxw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(totally fine with me if the constructor itself also inherits from null)</blockquote></mx-reply>This is problematic if you want to use <code>.bind</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$HCm7KqnuLn2vcCwtn9TlR51VOmXSe5R1AJIaKDRDfxw"}},"msgtype":"m.text"},"ts":1635254257807,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C0ytY-0tZD2v56eNQgl8r7YWv87PB0lpyTANBmH0xyQ"},
{"content":{"body":"that makes the function prototype methods not available","msgtype":"m.text"},"ts":1635254258370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$71_0-TRKR2eFgeEJhkF4dMMrvKYOuCptQe2ZcdNrqh0"},
{"content":{"body":"yes gut reaction for not having F.p methods on the constructor is \"oof\" from me","msgtype":"m.text"},"ts":1635254281909,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tsajwD8nZZC1nUOG0-HeAbfE4NM38rN8C7fRO67aeos"},
{"content":{"body":"Function.prototype.bind.call etc, which is already what robust code does","msgtype":"m.text"},"ts":1635254305227,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hoZ5iAia5MntTZQip8YO9ep-ecYpf7cxG8Za9YjPS04"},
{"content":{"body":"do people use function prototype methods on constructors?","msgtype":"m.text"},"ts":1635254312122,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DU2tXfc0BLTTGt00hIREzkpRBwzGjlgAKiqFS-4f0qs"},
{"content":{"body":"ljharb: no code does that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: no code does that","msgtype":"m.text"},"ts":1635254314024,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Kcb6XFUFEafd6zNTiQSA1zAG7sGy96CsN3RVFYw8C7g"},
{"content":{"body":"lol most doesn't, sure","msgtype":"m.text"},"ts":1635254319324,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t0itMUmykzTqToyV9iFIfef_Dl7hgJhO5L3frU7cjww"},
{"content":{"body":"your code, my code, a couple of polyfills, and no one else in the entire world","msgtype":"m.text"},"ts":1635254325731,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g_VRhqbdtUOGHowK0JxHTu0YZnkX7kGIJnL33CCj8Go"},
{"content":{"body":"but how often are you binding constructors either","msgtype":"m.text"},"ts":1635254328016,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Q87W4pIf0OLWAAS7BNbNxcyLzFJIiMe_JoS9fYB219Y"},
{"content":{"body":"not never!","msgtype":"m.text"},"ts":1635254332731,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B6rvffCzJlcQmTz_Pk-TsLzqXO4t8ieevuOmXUkvO_Y"},
{"content":{"body":"`⊤ class`","format":"org.matrix.custom.html","formatted_body":"<code>⊤ class</code>","msgtype":"m.text"},"ts":1635254358070,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KIXDv367rYFbpESFmwb87RFhLetmZZemsQfNIxpOueg"},
{"content":{"body":"that's `Object`","format":"org.matrix.custom.html","formatted_body":"that's <code>Object</code>","msgtype":"m.text"},"ts":1635254379622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z-dX27--nTqEoJhzP7zX33xYvxMnDRln2LwfFzKJOUg"},
{"content":{"body":"or, well","msgtype":"m.text"},"ts":1635254391783,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fu1XCNZWLdGP1TUkHGxI0ub6VL_X1Lyjj5TaTqssCSI"},
{"content":{"body":"a _second_ top class","format":"org.matrix.custom.html","formatted_body":"a <em>second</em> top class","msgtype":"m.text"},"ts":1635254394837,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y7TWmrcqjbgB0iZnQMckNQC14BJyxyfvK_hMSzLETiE"},
{"content":{"body":"i guess we don't really have a lattice","msgtype":"m.text"},"ts":1635254396206,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eL-AZJeB2x0pyXv02oHbMd9rMwH0QB7PAN_rsLZXXVs"},
{"content":{"body":"TIL bound functions proxy [[Construct]]","msgtype":"m.text"},"ts":1635254403242,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$S22zS5FkLNOIS3X5sU_91WuKrEcstlqZC10_dps0ZRM"},
{"content":{"body":"create your own!","msgtype":"m.text"},"ts":1635254404898,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h49YsKULq1tRYHMuKKRi6y_nX73zCe7_oEeDqPl7PIo"},
{"content":{"body":"yulia: if the word `extends` appears then it's not a base class","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: if the word <code>extends</code> appears then it's not a base class","msgtype":"m.text"},"ts":1635254507743,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5gH4D1JnUMUS8R3E3PIjly5u4qNhOzRsQdwYEetE9P8"},
{"content":{"body":"haha shu i was just thinking about structs","format":"org.matrix.custom.html","formatted_body":"haha <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> i was just thinking about structs","msgtype":"m.text"},"ts":1635254534520,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$5mO7DZVsKigdI_sOKs6r-Shc0y1fNw9vwIDG3uTsbL0"},
{"content":{"body":"a base class is `class {}` which includes inheriting from Object","format":"org.matrix.custom.html","formatted_body":"a base class is <code>class {}</code> which includes inheriting from Object","msgtype":"m.text"},"ts":1635254536721,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kiq4Dh5Z2VprDCoR8HvFFqjSS044LiksdO0NgU_1H3U"},
{"content":{"body":"that is not the usual OO understanding of \"base class\"","msgtype":"m.text"},"ts":1635254554158,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Omm52Kt1A_03izN1yR-XqQWcSA3ozeaHlsTt8SRQOIA"},
{"content":{"body":"> <@ljharb:matrix.org> yulia: if the word `extends` appears then it's not a base class\n\nwith this pr that's not true","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5gH4D1JnUMUS8R3E3PIjly5u4qNhOzRsQdwYEetE9P8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: if the word <code>extends</code> appears then it's not a base class</blockquote></mx-reply>with this pr that's not true","m.relates_to":{"m.in_reply_to":{"event_id":"$5gH4D1JnUMUS8R3E3PIjly5u4qNhOzRsQdwYEetE9P8"}},"msgtype":"m.text"},"ts":1635254555156,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$OL6ziKeG1XoidycruUk63eD69_o3GxUTJFqprFq64VM"},
{"content":{"body":"i don't care what the spec says about what's base/derived, i'm concerned with what users think","msgtype":"m.text"},"ts":1635254576750,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lqoxEHxi-nWdEhSEpDL73qlKaG1V2jsTkXVKmQLtLJQ"},
{"content":{"body":"i feel like this isn't a useful direction for the discussion? there are many ways to read it and virtual classes are really useful","msgtype":"m.text"},"ts":1635254583126,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4r3lLw2G9_LuZm87b1Hkk_EeJGSTiCSHUgRY9nVLq4s"},
{"content":{"body":"and the syntax determines that imo, not theoretical inheritance models","msgtype":"m.text"},"ts":1635254589624,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DbotBk51Jl3WVPynv07uhqeCI2KaQ9MmCUaLMBs3zk4"},
{"content":{"body":"so, i am happy to consider other syntax","msgtype":"m.text"},"ts":1635254601660,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$0rIQo2YWy8U-oMpHop-1MfD_rB3Gh9N3oSTqoH1_HJ0"},
{"content":{"body":"like, very much -- we don't have to have extends at all","msgtype":"m.text"},"ts":1635254612942,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$VKfMVoiYKR0YyN_rCWjvnkue6eo4lgZAby0rQlM06aU"},
{"content":{"body":"> <@ljharb:matrix.org> and the syntax determines that imo, not theoretical inheritance models\n\nfairly strong disagree, actually, class hiearchies are very conceptual","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DbotBk51Jl3WVPynv07uhqeCI2KaQ9MmCUaLMBs3zk4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and the syntax determines that imo, not theoretical inheritance models</blockquote></mx-reply>fairly strong disagree, actually, class hiearchies are very conceptual","m.relates_to":{"m.in_reply_to":{"event_id":"$DbotBk51Jl3WVPynv07uhqeCI2KaQ9MmCUaLMBs3zk4"}},"msgtype":"m.text"},"ts":1635254620335,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GGk-9vKSkR6IZZMxX4iC8JobDQJk3swN9BrbyTqQKy8"},
{"content":{"body":"if that were broadly true then there would have been outcry that default class inheritance wasn't null","msgtype":"m.text"},"ts":1635254671407,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Jyl6yaGXlyrmtbikAX3o0Hf40GERVTqXXYEQ_wHQUnI"},
{"content":{"body":"Object.prototype isn't a \"top class\" because you can have things that don't inherit from it","msgtype":"m.text"},"ts":1635254688776,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$krqBZSEX_pkjiJAuz9i2wELjFutJIZaBFkG_pctK3v4"},
{"content":{"body":"a base class is defined in relation to a class definition. In `class B extends A {}`, `A` is a base class in that `B` derives from `A`. `B` could always be the base class for another definition (i.e., `class C extends B {}`).","format":"org.matrix.custom.html","formatted_body":"a base class is defined in relation to a class definition. In <code>class B extends A {}</code>, <code>A</code> is a base class in that <code>B</code> derives from <code>A</code>. <code>B</code> could always be the base class for another definition (i.e., <code>class C extends B {}</code>).","msgtype":"m.text"},"ts":1635254695424,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$94nVQj1KDtoYK7ld489xiGr5z4vKYxnpcreOjGfByhU"},
{"content":{"body":"i meant more like \"top of a lattice\"","msgtype":"m.text"},"ts":1635254719226,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2kSOjvEd5nLZYYH4tzdvyrWRpdWtM2wjZ_zoa7TM8Dc"},
{"content":{"body":"You can say that `B` is a subclass, and that `class A {}` is not a subclass","format":"org.matrix.custom.html","formatted_body":"You can say that <code>B</code> is a subclass, and that <code>class A {}</code> is not a subclass","msgtype":"m.text"},"ts":1635254733691,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4OF6pGlJ6TA4heiwUP3x0KixeMl7dKx-FM_X4R3ZfGU"},
{"content":{"body":"ron's right on general use of \"base class\", ime","msgtype":"m.text"},"ts":1635254734043,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mqAQcuHcXwiIfD5L_2oByHkYdr6euoukEuNsn9r6gx8"},
{"content":{"body":"i suspect i'm not familiar with that term in the way you're using it (lattice)","msgtype":"m.text"},"ts":1635254740505,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jW10MOZA9VOy68h7IEwkExDN00WcsS4ALCWNTumiwT0"},
{"content":{"body":"strong agree with shu here","msgtype":"m.text"},"ts":1635254757285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gubZnNPACxJeRMyXY8ipsY7tuKEaTYmkcIFOPHeysNc"},
{"content":{"body":"> <@rbuckton:matrix.org> a base class is defined in relation to a class definition. In `class B extends A {}`, `A` is a base class in that `B` derives from `A`. `B` could always be the base class for another definition (i.e., `class C extends B {}`).\n\nI probably should have said \"root class\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$94nVQj1KDtoYK7ld489xiGr5z4vKYxnpcreOjGfByhU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>a base class is defined in relation to a class definition. In <code>class B extends A {}</code>, <code>A</code> is a base class in that <code>B</code> derives from <code>A</code>. <code>B</code> could always be the base class for another definition (i.e., <code>class C extends B {}</code>).</blockquote></mx-reply>I probably should have said &quot;root class&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$94nVQj1KDtoYK7ld489xiGr5z4vKYxnpcreOjGfByhU"}},"msgtype":"m.text"},"ts":1635254760718,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$AwxE7fqEqYKEZ88kak078dJdw-MMbs6rT1EI-Zu3IXE"},
{"content":{"body":"`🌱 class {}`","format":"org.matrix.custom.html","formatted_body":"<code>🌱 class {}</code>","msgtype":"m.text"},"ts":1635254802253,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$Z_IkUj8aJZGb77LYnAPZGwBsFSBUc5MkyQzwS0iEdxI"},
{"content":{"body":"[joke]","msgtype":"m.text"},"ts":1635254819201,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$_5NEqIpzzmP1URj6kqORQYFg9McTHpb5YfmObtzf6Ig"},
{"content":{"body":"I am going to drop in 3 min, and caroline will take over for mozilla","msgtype":"m.text"},"ts":1635254852401,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$V9hCGvMypmB7V7kIQRH_dwMDN5wP0E_Fd6yVWDtsiRE"},
{"content":{"body":"so, any further questions on the null stuff, just dm me and ill get to it when im back","msgtype":"m.text"},"ts":1635254871111,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$M_ViJg8SSwdS1sTzTapR6JMaDAn5dThRatGGQKZqnjU"},
{"content":{"body":"ljharb: \"root class\" is just as cromulent for what i mean, the thing hierarchies top out at","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: &quot;root class&quot; is just as cromulent for what i mean, the thing hierarchies top out at","msgtype":"m.text"},"ts":1635255053343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F1AKDfBooeALzq79-k3AvDubQfcwff47b2oDnXOLpeQ"},
{"content":{"body":"like, surely it's not just syntax, because we set up class hierarchies before `class` syntax was added","format":"org.matrix.custom.html","formatted_body":"like, surely it's not just syntax, because we set up class hierarchies before <code>class</code> syntax was added","msgtype":"m.text"},"ts":1635255071923,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WbYis6s8qnMneQuJP_4tGrr6Go8lrYDEc6SfEs5wGsQ"},
{"content":{"body":"and people understood them just fine","msgtype":"m.text"},"ts":1635255076703,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K2MI-ilzr6TLZcJtFXYVAlMdx3mt3kuJws_IA5CHivM"},
{"content":{"body":"sure but in those cases null and a constructor were 100% interchangeable","msgtype":"m.text"},"ts":1635255186342,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZIPaXuBsDdoAlTkwSFZOB7uFibavQePp7GWWk-AGz8M"},
{"content":{"body":"you did have to either omit or conditionally call a superclass constructor, to be fair, but there wasn't a syntactic requirement around `super` there","format":"org.matrix.custom.html","formatted_body":"you did have to either omit or conditionally call a superclass constructor, to be fair, but there wasn't a syntactic requirement around <code>super</code> there","msgtype":"m.text"},"ts":1635255213178,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wlIOx8v75B8kQNOUqe8SYhgyjCdZKOBKfRa9KrvRO2U"},
{"content":{"body":"rbuckton: if we need will you be able to bring forward a regexp item to today?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: if we need will you be able to bring forward a regexp item to today?","msgtype":"m.text"},"ts":1635255535393,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$08emPgyyMIzvhGoxunhKXdwV24rpWHKk1konbJOqSrc"},
{"content":{"body":"`Uint8Array.fromAsync(reader)` 👀","format":"org.matrix.custom.html","formatted_body":"<code>Uint8Array.fromAsync(reader)</code> 👀","msgtype":"m.text"},"ts":1635255575833,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DJ0__VmrJJNHhOK1DaTNUswTa_67e1nZzHEoy2UgydE"},
{"content":{"body":"I personally do not think it's weird to have 2 ways to express syntactically a root class: `class {}` or `class extends void {}`. In both cases no `super()` would be allowed","format":"org.matrix.custom.html","formatted_body":"I personally do not think it's weird to have 2 ways to express syntactically a root class: <code>class {}</code> or <code>class extends void {}</code>. In both cases no <code>super()</code> would be allowed","msgtype":"m.text"},"ts":1635255593068,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JW8VMXo-MwMsLANtLIjpGtPFI-ZUpIWM0TQZy1E3sWw"},
{"content":{"body":"a root class doesn't extend anything.","msgtype":"m.text"},"ts":1635255613299,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YO9eUVSKpy6mkTALEtrPbeNHbGshU09UdlEYUB78vAs"},
{"content":{"body":"`root class {}` or something would at least not have that confusion","format":"org.matrix.custom.html","formatted_body":"<code>root class {}</code> or something would at least not have that confusion","msgtype":"m.text"},"ts":1635255625633,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dc9ANMEYzRmoly5YVvtG-rHTkEp9ySU6nBdAW2ezkAk"},
{"content":{"body":"bterlson: That would be fine","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: That would be fine","msgtype":"m.text"},"ts":1635255631898,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C9z7ZHMoZTFTzcA5YSq9ez2vxqp-FYF-7mrxZE4JN0k"},
{"content":{"body":"My understanding is that in english `void` is nothing ;)","format":"org.matrix.custom.html","formatted_body":"My understanding is that in english <code>void</code> is nothing ;)","msgtype":"m.text"},"ts":1635255647377,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oxJzWyUIqfxhffBLrdxKiyUaFRhWKllk6k7z-L26pNQ"},
{"content":{"body":"`void` produces `undefined` which is a reified thing, not the absence of a thing","format":"org.matrix.custom.html","formatted_body":"<code>void</code> produces <code>undefined</code> which is a reified thing, not the absence of a thing","msgtype":"m.text"},"ts":1635255662678,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$erWcGAbcoiYirpCW1I_wY-qktJjLg6yxikEmRA4oZxY"},
{"content":{"body":" * `void` produces `undefined` which is a reified thing, not the absence of a thing","format":"org.matrix.custom.html","formatted_body":" * <code>void</code> produces <code>undefined</code> which is a reified thing, not the absence of a thing","m.new_content":{"body":"`void` produces `undefined` which is a reified thing, not the absence of a thing","format":"org.matrix.custom.html","formatted_body":"<code>void</code> produces <code>undefined</code> which is a reified thing, not the absence of a thing","msgtype":"m.text"},"m.relates_to":{"event_id":"$erWcGAbcoiYirpCW1I_wY-qktJjLg6yxikEmRA4oZxY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635255672038,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HlTFz_dNIUHOOjZ0rHUDbtVuboSB0jWQ9fTwd_0_CO4"},
{"content":{"body":"technically in english void and null are synonyms","msgtype":"m.text"},"ts":1635255673253,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$i99npvak8EpnOifBO4TyxHTWTM5Cw8AriGw_GLQEQio"},
{"content":{"body":"no, `void expr` produces `undefined`","format":"org.matrix.custom.html","formatted_body":"no, <code>void expr</code> produces <code>undefined</code>","msgtype":"m.text"},"ts":1635255687031,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LQynUEObkA4mu10jBYQDOlaBRCt-7gsOZUYju7hskFI"},
{"content":{"body":"`class {}` does not literally \"not extend anything\" either - it extends `Object.prototype`","format":"org.matrix.custom.html","formatted_body":"<code>class {}</code> does not literally &quot;not extend anything&quot; either - it extends <code>Object.prototype</code>","msgtype":"m.text"},"ts":1635255697650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8dog5K2XwHUrfjQY7tlw_FFo8MobHo_EDLDDHjT3s0g"},
{"content":{"body":"right, currently that's the only way JS supports using `void`","format":"org.matrix.custom.html","formatted_body":"right, currently that's the only way JS supports using <code>void</code>","msgtype":"m.text"},"ts":1635255701180,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xF0isoX_GnMcvaGquW-neengCJJ7hruokca5gG2skLE"},
{"content":{"body":"but, the way you think about it is that it does not extend anything","msgtype":"m.text"},"ts":1635255712191,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c2lGs8JZA9ZoudJaX2K_1ax3yXQWWpUtPDiThJbZiO8"},
{"content":{"body":"bakkot: yes, that's true as well. but it's not explicitly claiming to not extend","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yes, that's true as well. but it's not explicitly claiming to not extend","msgtype":"m.text"},"ts":1635255717101,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dU_zGotXNnpkwvF12b166QB8OaLtXBoT3ivCF6PcOOg"},
{"content":{"body":"my point is that \"`void` produces `undefined` which is a reified thing, not the absence of a thing\" is true in a technical sense but it is also true in a technical sense that `class {}` is a base class but also extends `Object.prototype`, if you are being that kind of precise.\n\non the other hand, _colloquially_ it is understood that `class {}` is a base class, and I argue that _colloquially_ it would be easily understood that `extends void` means \"does not extend anything\"","format":"org.matrix.custom.html","formatted_body":"<p>my point is that &quot;<code>void</code> produces <code>undefined</code> which is a reified thing, not the absence of a thing&quot; is true in a technical sense but it is also true in a technical sense that <code>class {}</code> is a base class but also extends <code>Object.prototype</code>, if you are being that kind of precise.</p>\n<p>on the other hand, <em>colloquially</em> it is understood that <code>class {}</code> is a base class, and I argue that <em>colloquially</em> it would be easily understood that <code>extends void</code> means &quot;does not extend anything&quot;</p>\n","msgtype":"m.text"},"ts":1635255847850,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-NWxIrSQ0P3lqHo-iyB3QqXAmx0eT6O-n4wPdT8VFWc"},
{"content":{"body":"i would do `null class Foo {}`","format":"org.matrix.custom.html","formatted_body":"i would do <code>null class Foo {}</code>","msgtype":"m.text"},"ts":1635255888340,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$QHJQ0UfMh2O1XgPo-np7Lv2nBC8JqIVqeiFFEX6NH5w"},
{"content":{"body":"`const o = null { a: b }` when","format":"org.matrix.custom.html","formatted_body":"<code>const o = null { a: b }</code> when","msgtype":"m.text"},"ts":1635255937917,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$96TrqpEMf8AG-NedAjlPr8BHZazuyD39mg7gTrH--H0"},
{"content":{"body":"there's already __proto__ syntax tho","format":"org.matrix.custom.html","formatted_body":"there's already <strong>proto</strong> syntax tho","msgtype":"m.text"},"ts":1635255949978,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F0eqs7BzZ3WB4gU39jST8WuzxbvnBTMeP-5M-W13DB8"},
{"content":{"body":"wait hold on","msgtype":"m.text"},"ts":1635255956206,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Gv98m9KPjRVFmk_WHVwasTw7dnZekdbBLCf_cnW_NEA"},
{"content":{"body":"`class Foo { __proto__: null }`","format":"org.matrix.custom.html","formatted_body":"<code>class Foo { __proto__: null }</code>","msgtype":"m.text"},"ts":1635255962339,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DfE2oS8LdiljACt5KVA32cnELudqiKlXvJJCoQ0Xzvw"},
{"content":{"body":"what does that do","msgtype":"m.text"},"ts":1635255971155,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$_WBObDWLBrOLsDsv1pwqZSwr3tnOiAAouLK3SW6OZdw"},
{"content":{"body":"with the colon, it's a syntax error, in TS i'm not sure","msgtype":"m.text"},"ts":1635255989963,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pVbsy79fhzez7yIyk9-IG_JmPG3sh90KkJ53h6dLIXg"},
{"content":{"body":"oh wait it uses DefineOwnProperty","msgtype":"m.text"},"ts":1635255992171,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$d_11m3PLwUPgNd094APJng0fU6E407sDgWkHZh9x7OQ"},
{"content":{"body":"Its a SyntaxError :)","msgtype":"m.text"},"ts":1635255994853,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J83Bcu097xgDdS5rFzK-sGb6SpeWcKfzhdfkf4MVh2k"},
{"content":{"body":"`__proto__ = null` would probably create a public class field, or throw, not sure","format":"org.matrix.custom.html","formatted_body":"<code>__proto__ = null</code> would probably create a public class field, or throw, not sure","msgtype":"m.text"},"ts":1635256008654,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F7IIT2LQYdO-FChNPfu0gnVWuKw8IKaJ91qtfHFjY0Q"},
{"content":{"body":"can someone put in a conclusion for the previous agenda item in the notes","msgtype":"m.text"},"ts":1635256010895,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gNT2xbPozb1zks6kyFhcFhCm1bHQUOgcAS4l0j0P1e8"},
{"content":{"body":"man i really wish class fields used Set","msgtype":"m.text"},"ts":1635256011749,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$IEpKqCQFHOBcXp5NfOKIsjmDmtpKOuC7odMM10HJQHg"},
{"content":{"body":"In TS its says you have a field named `__proto__` whose type is `null`.","format":"org.matrix.custom.html","formatted_body":"In TS its says you have a field named <code>__proto__</code> whose type is <code>null</code>.","msgtype":"m.text"},"ts":1635256014757,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$f_AP_o2MeoIRohFohlWPWQc1mtg_ZJKldxpot5sfCCQ"},
{"content":{"body":"I am so glad class fields do not use Set","msgtype":"m.text"},"ts":1635256023073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKSnMzwm5MMFggwcYqgIOeIP4Fojc1etnyFJh-3tY0E"},
{"content":{"body":"(re conclusion) there really isn't one i think, it's an update","msgtype":"m.text"},"ts":1635256031311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rh-EhJly7Z9-9XK-ipwZcL73_wwtHGSMPBg52of1_1g"},
{"content":{"body":" * (re conclusion) there really isn't one i think, it's an update","m.new_content":{"body":"(re conclusion) there really isn't one i think, it's an update","msgtype":"m.text"},"m.relates_to":{"event_id":"$rh-EhJly7Z9-9XK-ipwZcL73_wwtHGSMPBg52of1_1g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635256036219,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tRgJ8fSFy7axyT9FCVCg0KjQkM3PRbdc_MZUYJDHmdI"},
{"content":{"body":"galaxy brain is: what if object literals used set","msgtype":"m.text"},"ts":1635256041307,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3yvJKoxcqCVl76Fi7c28fsOsoQaFqZ6lqLGA2psaf54"},
{"content":{"body":"they used to","msgtype":"m.text"},"ts":1635256045667,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PrEwLFW0MNLQQ2W50d-Kn6gQVPApouJic2l6y1VCjYA"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1635256050514,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$9xHgiKKWXySlkp-x-HDHqWh1IAFADr0uQGSt3wUhE74"},
{"content":{"body":"ok so we just need to special case","msgtype":"m.text"},"ts":1635256065038,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$23NhmqQ10nSHmUdvOjnhMqsin7VU16AKBd8BcWl4IRA"},
{"content":{"body":"`__proto__ = null` in classes","format":"org.matrix.custom.html","formatted_body":"<code>__proto__ = null</code> in classes","msgtype":"m.text"},"ts":1635256069233,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DA9wqYe9LE0N3mAXjw4Tqsh-kRET-H9FhoYLxYUbivk"},
{"content":{"body":"```\nThe production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n```\n~ ES3","format":"org.matrix.custom.html","formatted_body":"<pre><code>The production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n</code></pre>\n<p>~ ES3</p>\n","msgtype":"m.text"},"ts":1635256091416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GkSwv1NO2BUKIjVMJT_VIFL6GqNB8WLzxP3Oyh8VlTM"},
{"content":{"body":" * ```\nThe production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n```\n~ ES3","format":"org.matrix.custom.html","formatted_body":" * <pre><code>The production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n</code></pre>\n<p>~ ES3</p>\n","m.new_content":{"body":"```\nThe production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n```\n~ ES3","format":"org.matrix.custom.html","formatted_body":"<pre><code>The production\nPropertyNameAndValueList : PropertyName : AssignmentExpression is evaluated as follows:\n1. Create a new object as if by the expression new Object().\n2. Evaluate PropertyName.\n3. Evaluate AssignmentExpression.\n4. Call GetValue(Result(3)).\n5. Call the [[Put]] method of Result(1) with arguments Result(2) and Result(4).\n6. Return Result(1).\n</code></pre>\n<p>~ ES3</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$GkSwv1NO2BUKIjVMJT_VIFL6GqNB8WLzxP3Oyh8VlTM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635256101994,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ywXV7OhQdnPRjmCqPBMGVc1PPxR3spP6TkySpqSLQzQ"},
{"content":{"body":"is that SSA","msgtype":"m.text"},"ts":1635256112071,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$OoFPnrkOFdxJcGnWrG9jLiFnuMiZ9LMiFWSpJqXDk1M"},
{"content":{"body":"> <@devsnek:matrix.org> `__proto__ = null` in classes\n\nExcept that already has a well-defined behavior: \n```\n> class C { __proto__ = null; }\nundefined\n> var o = new C();\nundefined\n> o\nC { ['__proto__']: null }\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DA9wqYe9LE0N3mAXjw4Tqsh-kRET-H9FhoYLxYUbivk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><code>__proto__ = null</code> in classes</blockquote></mx-reply><p>Except that already has a well-defined behavior:</p>\n<pre><code>&gt; class C { __proto__ = null; }\nundefined\n&gt; var o = new C();\nundefined\n&gt; o\nC { ['__proto__']: null }\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$DA9wqYe9LE0N3mAXjw4Tqsh-kRET-H9FhoYLxYUbivk"}},"msgtype":"m.text"},"ts":1635256171362,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5hQdvDgckblKa7C8ayO_VwEkkv1hqjLVMjt-HzTKSkA"},
{"content":{"body":"bakkot: wtf","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: wtf","msgtype":"m.text"},"ts":1635256182800,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w_QyWSTkdHnElTi3PQc4n_tJynnDoi2S1dhl8vwHwV4"},
{"content":{"body":"ya ik :(","msgtype":"m.text"},"ts":1635256183167,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Y-r1wI0z-I819uyGjh1W7FOpAFopK-F9QDbjLuhdz6o"},
{"content":{"body":"Just need decorators:\n```js\n@extendsNull\nclass C {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Just need decorators:</p>\n<pre><code class=\"language-js\">@extendsNull\nclass C {}\n</code></pre>\n","msgtype":"m.text"},"ts":1635256203520,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yMsSEBIPJ978c2CzWA8Tp3T4JXaZLRv8p-KWLqI44H0"},
{"content":{"body":"shu: yeah it was a wild time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: yeah it was a wild time","msgtype":"m.text"},"ts":1635256228467,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v3ZMQRsw3Vv_aOewXRqbGZfaMmbzOWl5IP86fUKaeog"},
{"content":{"body":"rbuckton: doesn't matter if nobody relies on it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: doesn't matter if nobody relies on it","msgtype":"m.text"},"ts":1635256230046,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lRcVfef1M4_WPwQBAexxu6m-skhSwUnjQL0_QT_a2o8"},
{"content":{"body":"i need to convert more people to my function decorator cult","msgtype":"m.text"},"ts":1635256233887,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$rZIkm-kSMVqRXHeSD1que9Bk8mPnDPGupdBPyNdGbbg"},
{"content":{"body":"devsnek: I'm always willing to try a new cult","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: I'm always willing to try a new cult","msgtype":"m.text"},"ts":1635256250865,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vFDu9MBbhXbQ3GxSdz3wVzISEE_pomOvnyRma97ndoI"},
{"content":{"body":"> <@devsnek:matrix.org> i need to convert more people to my function decorator cult\n\nBut the hoisting problem though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rZIkm-kSMVqRXHeSD1que9Bk8mPnDPGupdBPyNdGbbg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i need to convert more people to my function decorator cult</blockquote></mx-reply>But the hoisting problem though","m.relates_to":{"m.in_reply_to":{"event_id":"$rZIkm-kSMVqRXHeSD1que9Bk8mPnDPGupdBPyNdGbbg"}},"msgtype":"m.text"},"ts":1635256279046,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hk8cgm9d1SPjvvp5NMOWzGLALUXoZFEqG1fcdBMe3Xk"},
{"content":{"body":"that kind of hoisting is almost never used in practice","msgtype":"m.text"},"ts":1635256303155,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$OdrfkwywqSyP-55ScFT8AsrcGMGJhQx8VfvunqAO12g"},
{"content":{"body":"i don't know a case where its *needed*","format":"org.matrix.custom.html","formatted_body":"i don't know a case where its <em>needed</em>","msgtype":"m.text"},"ts":1635256313542,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BDP5woxF8AGZqrrS6HUt_AdNw7mu98r-AUxUMVOSt88"},
{"content":{"body":"Function expression decorators: ✔️\nFunction declaration decorators: ☠️","msgtype":"m.text"},"ts":1635256323123,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YMDMKvwoAPhxRD72ZmrsfY0QKQurNU_FsczsQokfjHo"},
{"content":{"body":"i seriously believe we can do decorators on function declarations by just not hoisting the function value","msgtype":"m.text"},"ts":1635256352194,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$MN5QAz-0TIe6mu4w3xah8cIXSOkPUbTgLqlhDGpY0tM"},
{"content":{"body":"> <@devsnek:matrix.org> that kind of hoisting is almost never used in practice\n\nThat kind of hoisting is about 80% of the TypeScript compiler ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OdrfkwywqSyP-55ScFT8AsrcGMGJhQx8VfvunqAO12g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>that kind of hoisting is almost never used in practice</blockquote></mx-reply>That kind of hoisting is about 80% of the TypeScript compiler","m.relates_to":{"m.in_reply_to":{"event_id":"$OdrfkwywqSyP-55ScFT8AsrcGMGJhQx8VfvunqAO12g"}},"msgtype":"m.text"},"ts":1635256355393,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YlXVmkh49uYBsTnWieyuSmVLeUjLLibImbNHhqeIupU"},
{"content":{"body":"no one will notice","msgtype":"m.text"},"ts":1635256358027,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6NlBJtPHMi-TZtHqIj8mYycYHs5uqgDxDQyMAIXjjrQ"},
{"content":{"body":"i definitely hoist a lot of functions","msgtype":"m.text"},"ts":1635256361101,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lEW11286XyJZqcqHCmaS0VxwkN56nR-dN-Rt7KPUZ14"},
{"content":{"body":"on the other hand, decorators are bad, so I'm ok with them being harder to use :P","msgtype":"m.text"},"ts":1635256372267,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$42f6V3cF4VioD_CbgIjkcpmZ0sOVMiqSccjfTB-0xxw"},
{"content":{"body":"but do you call them before their declaration ","msgtype":"m.text"},"ts":1635256372383,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VM3QYxXxJSkEjDqVLHQFJILTIjMm-nkVP8w5f_dVUOI"},
{"content":{"body":"or just refer to them","msgtype":"m.text"},"ts":1635256374432,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Zlf0g883plgh7j3-_aq7SJI7I5BqIVS5moLAMe4ADfw"},
{"content":{"body":"devsnek: yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: yes","msgtype":"m.text"},"ts":1635256377299,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oreQZBb5PWQRryF_UN_jE0avUf2U0GnF65n67G5aD5g"},
{"content":{"body":"call them","msgtype":"m.text"},"ts":1635256380976,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S_n1lKlW05mqbqar9P59ybDUojxHjSuulohEu0qrQeA"},
{"content":{"body":"ok but","msgtype":"m.text"},"ts":1635256386164,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$eUrLAf6DW_QmOAxHo6QAJxQGUx_yk0lB8Bb3lGNaXtI"},
{"content":{"body":"you can just","msgtype":"m.text"},"ts":1635256387652,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$_FRvi7w1pzsTjCbywWw3l4v7R-Be2bA0_FLx3qTwZb4"},
{"content":{"body":"not put decorators on that code","msgtype":"m.text"},"ts":1635256390739,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$rbU6VUoJ_28C97vMQiV3jPH5loZBPglQn-Xd8OOYsvY"},
{"content":{"body":"functions go at the bottom, logic goes at the top","msgtype":"m.text"},"ts":1635256391385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0axY4KgB2BY8aEgWgnSXMXmA6IfBry61Zmyj4BuP7HU"},
{"content":{"body":"(for scripts)","msgtype":"m.text"},"ts":1635256395922,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KWNwGdpZY8yDG2gDaLyfW7ktW12WlM0acMflr4IfoZM"},
{"content":{"body":"its a simple choice","msgtype":"m.text"},"ts":1635256409103,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$OlehMhMrPEJz8smtOfD8NJMqfYva-MgrV6esDFQuEIw"},
{"content":{"body":"At one point I was thinking about this:\n```js\n// not hoisted\n// not reassignable\nconst function f() {} \n\n// ok\n@dec\nconst function f() {}\n\n// syntax error\n@dec\nfunction f() {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>At one point I was thinking about this:</p>\n<pre><code class=\"language-js\">// not hoisted\n// not reassignable\nconst function f() {} \n\n// ok\n@dec\nconst function f() {}\n\n// syntax error\n@dec\nfunction f() {}\n</code></pre>\n","msgtype":"m.text"},"ts":1635256429992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nfOjM3SMsxHZMzdOnJhl71sfmgbaBblAaXsGMoXTzY4"},
{"content":{"body":"as a shorthand for `const f = function () {}`","format":"org.matrix.custom.html","formatted_body":"as a shorthand for <code>const f = function () {}</code>","msgtype":"m.text"},"ts":1635256450778,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MwxzK7_6IZxRIOBATOGgwnch6WFp-BhbpouCrYEWPjE"},
{"content":{"body":"ron i won't accept stylistic practice from the typescript compiler source","msgtype":"m.text"},"ts":1635256454622,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6fUuv-ROq3q8aX-MznJmUH5RMRE4ZFBmVZ3Ddk75SUU"},
{"content":{"body":"`const function` means a different thing","format":"org.matrix.custom.html","formatted_body":"<code>const function</code> means a different thing","msgtype":"m.text"},"ts":1635256458586,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-il1Lp7HmHBQmTog3_2_Mnebbp2Na0-PcQ83EWI0eoU"},
{"content":{"body":"until you get rid of the 40k line file","msgtype":"m.text"},"ts":1635256459331,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CW_LAnqMvoehx5zLRS19q4nIDWS8vIQF_mYEDNPQ-b8"},
{"content":{"body":"> <@bakkot:matrix.org> `const function` means a different thing\n\nin some languages, yes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-il1Lp7HmHBQmTog3_2_Mnebbp2Na0-PcQ83EWI0eoU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>const function</code> means a different thing</blockquote></mx-reply>in some languages, yes.","m.relates_to":{"m.in_reply_to":{"event_id":"$-il1Lp7HmHBQmTog3_2_Mnebbp2Na0-PcQ83EWI0eoU"}},"msgtype":"m.text"},"ts":1635256485814,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4O1cFv9LTTJaksrCUxSogzXDwtEc10d0t1FCRkp4SEc"},
{"content":{"body":"Either way, I'm all for function expression decorators.","msgtype":"m.text"},"ts":1635256506543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C-yLf5BNtDMXMnQGGLb3tkK5Al_4M04jjm47NETTgeI"},
{"content":{"body":"anyway i think this would work in practice and i encourage some company that has resources to do research to research it","msgtype":"m.text"},"ts":1635256520020,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$AJxEFC3b6g-ZznkfjnrxYWOmd_9qRWYfqO3NF2a9XJI"},
{"content":{"body":"Just not a fan of adding a decorator breaking hoisting on a function declaration.","msgtype":"m.text"},"ts":1635256525621,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$al-2DEndR7PmSjmOESpSKVeX2Yto4cV0ldoJ0LDJqGQ"},
{"content":{"body":"i don't think it counts as \"breaking\" as much as a tradeoff, it certainly doesn't have any impact on existing code","msgtype":"m.text"},"ts":1635256580864,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$uHPBzvxWkBlyHHuvgLiPvUL7ymVkTH2w6E-nvR3BQZE"},
{"content":{"body":"since it also can break circular imports","msgtype":"m.text"},"ts":1635256582803,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MuuCqvCD3SGFcFCXujjkcGZe5S_QOx_HO_UYQk0JwqI"},
{"content":{"body":" * i don't think it counts as \"breaking\" as much as a tradeoff, it certainly doesn't have any impact on existing code","m.new_content":{"body":"i don't think it counts as \"breaking\" as much as a tradeoff, it certainly doesn't have any impact on existing code","msgtype":"m.text"},"m.relates_to":{"event_id":"$uHPBzvxWkBlyHHuvgLiPvUL7ymVkTH2w6E-nvR3BQZE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635256585685,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$cTayRjXn0h5UmKDuB0DQBzrgJn10T9IF1_zXyIfe-EE"},
{"content":{"body":"it can't break circular imports","msgtype":"m.text"},"ts":1635256591782,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$S6Sa0C6QRvlxGxQ8NhJ0goqaqRZIQkm36VUA3yDKzbI"},
{"content":{"body":"re: the actual presentation, I strongly agree with WH","msgtype":"m.text"},"ts":1635256602301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mF-xwnN0ZQEbMzmrz7TZnh3emXDK0nOSrFV7DZdERAY"},
{"content":{"body":"sqrt is good, we should have it","msgtype":"m.text"},"ts":1635256610500,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KqUFFg7nSNBF3m8KlgQAm6qPLpaRlYH56wFMxvwluPM"},
{"content":{"body":"i mean it can break stuff but that's unrelated to the circular importing","msgtype":"m.text"},"ts":1635256614464,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$dWQAvKwbox-GyZlEZtkgHIiqiIq02sMbScvF1skhq20"},
{"content":{"body":"Its the same hoisting problem. Hoisted functions are reachable in a circular import.","msgtype":"m.text"},"ts":1635256625628,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fD6WbhQiZdh7esXA-QYowGpC0TpA5ntKfdf_EA0USmo"},
{"content":{"body":"right i'm just saying the base case is unchanged and the worst case is the same case as an undecorated class or a variable decoaration","msgtype":"m.text"},"ts":1635256699238,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$kyCaZ8rv0edkaLJyNyflclfb5-hF_xHckGsRLnOZkYk"},
{"content":{"body":"> <@devsnek:matrix.org> i don't think it counts as \"breaking\" as much as a tradeoff, it certainly doesn't have any impact on existing code\n\nThe problem with existing code is that existing code is some the code I want to decorate, and adding a decorator would change the semantics in a non-obvious way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uHPBzvxWkBlyHHuvgLiPvUL7ymVkTH2w6E-nvR3BQZE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don&#39;t think it counts as &quot;breaking&quot; as much as a tradeoff, it certainly doesn&#39;t have any impact on existing code</blockquote></mx-reply>The problem with existing code is that existing code is some the code I want to decorate, and adding a decorator would change the semantics in a non-obvious way.","m.relates_to":{"m.in_reply_to":{"event_id":"$uHPBzvxWkBlyHHuvgLiPvUL7ymVkTH2w6E-nvR3BQZE"}},"msgtype":"m.text"},"ts":1635256705129,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aZaOVzUkgp2Wy_RQuT7arZLeQbHTPiSKHrY1HAecnys"},
{"content":{"body":"its the same hazard as migrating function to class","msgtype":"m.text"},"ts":1635256737675,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Z-qYkoY0MIxF0jV1-eFMqVXbBI_OG0u7Fgq5cEpHThc"},
{"content":{"body":"There's a hidden hazard with decorators that doesn't exist when you're changing `function` -> `class`, in that its still `function`.","format":"org.matrix.custom.html","formatted_body":"There's a hidden hazard with decorators that doesn't exist when you're changing <code>function</code> -&gt; <code>class</code>, in that its still <code>function</code>.","msgtype":"m.text"},"ts":1635256796584,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_gSp_KlixIQlsNXVG-b8LAPbF83olkNjBCwNr-ZsgAU"},
{"content":{"body":"adding a decorator to something definitely risks all sorts of breakage; it's not something you can expect to do transparently","msgtype":"m.text"},"ts":1635256811122,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$S_WHBtz5PrfTUaJayycb4bCDTgoLs7agsqu1ycQrQKE"},
{"content":{"body":"If someone is using TypeScript (or JS with the TS language service), we could give you errors on decorated function decls. ","msgtype":"m.text"},"ts":1635256841841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fNGAPYSgmJ2kywULsoOIkCGjfaLTx4s2ylf7Hwi6oyU"},
{"content":{"body":"you could do that when it breaks hoisting too","msgtype":"m.text"},"ts":1635256853798,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xL4qnrtniqRtn5hlrWTAJNdq0GJEwMC-1-P_01TFgg0"},
{"content":{"body":"(not arguing for breaking hoisting, necessarily, but none of those are compelling arguments against doing so to me)","msgtype":"m.text"},"ts":1635256872420,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DUx8PJo3aTfUAWnx6yjSas0Dq26CV3P0uhQ2VVB6OmE"},
{"content":{"body":"p sure the two most popular eslint configs yell at you about hoisting and circulars, separately","msgtype":"m.text"},"ts":1635256879146,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$hSc0Sps8xLiFmaNtxvR-h9ofuvdwdVQ0t44gH1DqlzQ"},
{"content":{"body":" * p sure the two most popular eslint configs yell at you about hoisting and circulars, separately","m.new_content":{"body":"p sure the two most popular eslint configs yell at you about hoisting and circulars, separately","msgtype":"m.text"},"m.relates_to":{"event_id":"$hSc0Sps8xLiFmaNtxvR-h9ofuvdwdVQ0t44gH1DqlzQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635256887805,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$qwwICJkY48UEUmNwQfJt_10D2mtoiRf4nT160NzilRc"},
{"content":{"body":"anyway that's my hill","msgtype":"m.text"},"ts":1635256955068,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Tbla9_x6YU-slCmq3_9niOIfZFiuWiHnbRawTuYkdAI"},
{"content":{"body":"honestly i don't even know what i would use decorators on classes for lol","msgtype":"m.text"},"ts":1635256985385,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$-G8LY49jp4e-qXyaLcZuJxtRORfMHbrSGRtbA7zzL24"},
{"content":{"body":"and yes i know there are use cases, that's just where i'm at personally","msgtype":"m.text"},"ts":1635257015133,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$tZg7aUIypRC02cNocZUBEnTyidyqioDK-tC9V4_9LQM"},
{"content":{"body":"i very much want\n```\n@bound\nmethod () {}\n```\nto be a thing","format":"org.matrix.custom.html","formatted_body":"<p>i very much want</p>\n<pre><code>@bound\nmethod () {}\n</code></pre>\n<p>to be a thing</p>\n","msgtype":"m.text"},"ts":1635257032407,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n9MX3SIC8zOmQC1Dt5M1F4VtV_NJ5d8SWR-DWNWHo4c"},
{"content":{"body":"> <@devsnek:matrix.org> honestly i don't even know what i would use decorators on classes for lol\n\nI use them in TS for so many things.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-G8LY49jp4e-qXyaLcZuJxtRORfMHbrSGRtbA7zzL24?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>honestly i don&#39;t even know what i would use decorators on classes for lol</blockquote></mx-reply>I use them in TS for so many things.","m.relates_to":{"m.in_reply_to":{"event_id":"$-G8LY49jp4e-qXyaLcZuJxtRORfMHbrSGRtbA7zzL24"}},"msgtype":"m.text"},"ts":1635257035511,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nOhL4R_BVE_bGp_AUVPYNvif0hA1lL-ERP5d21humPk"},
{"content":{"body":"I want function decorators, but I also want parameter decorators.","msgtype":"m.text"},"ts":1635257052063,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wum32N6MqmN1f38waeTlWp85o0to2lJYm0GzKfHkIUQ"},
{"content":{"body":"i just want `@router.get('/foo') function getFoo() {}`","format":"org.matrix.custom.html","formatted_body":"i just want <code>@router.get('/foo') function getFoo() {}</code>","msgtype":"m.text"},"ts":1635257057423,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$UYBRPGHATCK6-_rI9QH80y1OOdZlIpfnINNI6saac-E"},
{"content":{"body":"why that over `router.get('/foo')(function getFoo() {})`?","format":"org.matrix.custom.html","formatted_body":"why that over <code>router.get('/foo')(function getFoo() {})</code>?","msgtype":"m.text"},"ts":1635257094491,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N23H2NRWBOr0cFtaYyH0zivy1uI4VoFMEavHEawOmrQ"},
{"content":{"body":"because that's ugly and weird","msgtype":"m.text"},"ts":1635257109969,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$IK7knqRGaL8oV2CyXQsVYadOhq1qCgJ52PkP3mdxWBc"},
{"content":{"body":"and it doesn't compose well","msgtype":"m.text"},"ts":1635257133521,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$fL8XDxdFDY1OhB4VbyP7evnPm4qFp_ZRV3GWDiehMyY"},
{"content":{"body":"`@get('/foo') @loginRequired({ admin: true }) @ratelimit(4, 1) function getFoo() {}`","format":"org.matrix.custom.html","formatted_body":"<code>@get('/foo') @loginRequired({ admin: true }) @ratelimit(4, 1) function getFoo() {}</code>","msgtype":"m.text"},"ts":1635257163223,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$G-Lt_1gxgWU5n-S_q3o96DjCT2N4RRmfsH8kbZ6FGnk"},
{"content":{"body":"`|>`?","format":"org.matrix.custom.html","formatted_body":"<code>|&gt;</code>?","msgtype":"m.text"},"ts":1635257185007,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8bOuDh2Ydq-426caiklkp-hiMKg6WLoUUL_68MwY8x4"},
{"content":{"body":"One reason:\n```js\nconst getFoo = router.get('/foo')(() => {});\ngetFoo.name; // \"\"\n\n// vs\nconst getFoo = @router.get('/foo') () => {}\ngetFoo.name; // \"getFoo\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>One reason:</p>\n<pre><code class=\"language-js\">const getFoo = router.get('/foo')(() =&gt; {});\ngetFoo.name; // &quot;&quot;\n\n// vs\nconst getFoo = @router.get('/foo') () =&gt; {}\ngetFoo.name; // &quot;getFoo&quot;\n</code></pre>\n","msgtype":"m.text"},"ts":1635257186299,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J1xRIqeX5RiAEmhoRs0_zxDIDU5qw3cvyxs8YiQC7xI"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1635257195219,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Bgv4KM12CZZGEhSTNsK8Sp__GYf6Uj00xrCL9inaiPM"},
{"content":{"body":"lol fair, but that's not compelling to me; if you want a name don't use arrows","msgtype":"m.text"},"ts":1635257207583,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pDqNTicUzC08NR51gSVbF9eim0qa3jfpeSGGzgUSArM"},
{"content":{"body":"i do not like expression position decorators lol","msgtype":"m.text"},"ts":1635257215959,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$UJoV_7BmU6OVmNgcn-5nGm8JlQG1_NqYrih29NH21hk"},
{"content":{"body":"i will always believe FNI was a mistake","msgtype":"m.text"},"ts":1635257216082,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wXYwFFRkoCwsOOfK_8tigVPfvZeHiYQoDXyZbyzUz8o"},
{"content":{"body":"ljharb: You want `@bound`, let the snek have `@dec function f() {}`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: You want <code>@bound</code>, let the snek have <code>@dec function f() {}</code>.","msgtype":"m.text"},"ts":1635257256203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VpM-FzFNougwJYNa5qDuIFKX56HAGSD5SndrjWj6YRA"},
{"content":{"body":"FNI was a mistake only if you think name is anything other than a debugging facility","msgtype":"m.text"},"ts":1635257261941,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bHfqFMn6ow2i_Op6QqbYdz5PvhYZQYUjH4Zs0Eleyr8"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1635257265279,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wfcCwyLp_oWDWvPWxqReNiRQnAvpZElJM-mfrdNemWE"},
{"content":{"body":"> <@michaelficarra:matrix.org> FNI was a mistake only if you think name is anything other than a debugging facility\n\ni think it's a mistake BECAUSE it's a debugging facility. inferred names are harder to grep for.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bHfqFMn6ow2i_Op6QqbYdz5PvhYZQYUjH4Zs0Eleyr8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>FNI was a mistake only if you think name is anything other than a debugging facility</blockquote></mx-reply>i think it's a mistake BECAUSE it's a debugging facility. inferred names are harder to grep for.","m.relates_to":{"m.in_reply_to":{"event_id":"$bHfqFMn6ow2i_Op6QqbYdz5PvhYZQYUjH4Zs0Eleyr8"}},"msgtype":"m.text"},"ts":1635257285244,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2GdzeK_RaActrkSeQA04v3p48uXM4o3l7b0NmnIhhnE"},
{"content":{"body":"> i just want `@router.get('/foo') function getFoo() {}`\n\noh god, this is the strongest argument against function decorators I've yet seen","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>i just want <code>@router.get('/foo') function getFoo() {}</code></p>\n</blockquote>\n<p>oh god, this is the strongest argument against function decorators I've yet seen</p>\n","msgtype":"m.text"},"ts":1635257303580,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L0-0SJ4KiqOVC9lY9-pQqzIN4pllP5w2VUa6WZb6RtI"},
{"content":{"body":"just have a code server that supports fni","msgtype":"m.text"},"ts":1635257309928,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XZvYTXGp9bm8AEC5a-f6DJzEK2SLVzt1D3QmzV1Tilo"},
{"content":{"body":"if people are going to write code like that we should not have function decorators","msgtype":"m.text"},"ts":1635257319390,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ODM0Gx7vnHm1CztHaMk7zJ634E9R-eLi30Zsxjg1dvw"},
{"content":{"body":"like what","msgtype":"m.text"},"ts":1635257361767,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$0sMS9ta_WMWjELkG6AcCiz_egPjKkQyuzIbAqSQWBhc"},
{"content":{"body":"The VS Code codebase uses so many parameter decorators for DI, we really need parameter decorators shortly after class/member decorators.","msgtype":"m.text"},"ts":1635257363106,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WBWYl0uo7Zqf77W4UIBJClMXx5mmqED3J3sXinv8k-A"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1635257365647,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$iKXftAB1a7b47cq1634f3N8NnL0N0js9dXELunrNRJ8"},
{"content":{"body":"bakkot: have you never used flask in python","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: have you never used flask in python","msgtype":"m.text"},"ts":1635257375044,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$MrGs0mIXBisd2ky_dJNues1CCSUKgtJXA_TjsLGccsU"},
{"content":{"body":"devsnek: yeah, it's _awful_","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: yeah, it's <em>awful</em>","msgtype":"m.text"},"ts":1635257383452,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Kgcq9GC-dsEnmxVfun_6UcTiNFEQmhI-fp5QpRZ04yY"},
{"content":{"body":"its incredible ","msgtype":"m.text"},"ts":1635257383847,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$RE1lfuHTGL92yNBMuh6-OyoBhS6ZevzZS5FlR0qIeHs"},
{"content":{"body":"lol","msgtype":"m.text"},"ts":1635257388036,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$FFwWLupqnZruQAM8vHRLhK7LOp4iBNn8t-nywXIcsXY"},
{"content":{"body":"Parameter decorators are so much higher on my list of priorities than function decorators, tbh.","msgtype":"m.text"},"ts":1635257390095,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WUN3cpPOy6qZBRw910ARj94CLDgOP9qH7QMTvFQG_2g"},
{"content":{"body":"especially debugging other people's flask apps","msgtype":"m.text"},"ts":1635257392032,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sFs-i-iN6KBZfBICHtJlYNWdJhJ3IEVL2Nrn8Mbltg0"},
{"content":{"body":"just instantly unmaintaintable nightmares","msgtype":"m.text"},"ts":1635257398096,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$boV_rh6dGq5jn32w2HhuXxBUR8U8b-OSnhAJQR3mOHs"},
{"content":{"body":"idk i love it","msgtype":"m.text"},"ts":1635257411771,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$Hk6FK4WFFkIbqaxo1VDKmlzeOy1kbgQBXUeh9YPgAOU"},
{"content":{"body":"aside from the globals","msgtype":"m.text"},"ts":1635257420312,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$J65Ej3QO0r-4-VOjO4hWJvi4c9rq14NcMm5fcoxB42w"},
{"content":{"body":"Worst case, you can do:\n```js\nconst { getFoo, ... } = class {\n  @router.get(\"/foo\")\n  static getFoo() {}\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>Worst case, you can do:</p>\n<pre><code class=\"language-js\">const { getFoo, ... } = class {\n  @router.get(&quot;/foo&quot;)\n  static getFoo() {}\n};\n</code></pre>\n","msgtype":"m.text"},"ts":1635257421770,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3drSi5-RTm5-mgpUo2D0hiXzvCg5jYQUZHI72UPj__Q"},
{"content":{"body":"should've been function parameters","msgtype":"m.text"},"ts":1635257422704,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$yPQkBblHpn5fCwzk1q3lPf7M7zHNWuVeEU4RKrjhrj8"},
{"content":{"body":"at a deep level i really do not get dependency injection","msgtype":"m.text"},"ts":1635257730244,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KtcKqBA4W9T6eHoBFjx5joLT5u2mOluZbHI_YDtNkOE"},
{"content":{"body":"i do not like DI","msgtype":"m.text"},"ts":1635257839635,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$U0E_uy6nzJB4Smf55PykJF1W6VZXtKPf9BX85zMEk14"},
{"content":{"body":"but what is it?","msgtype":"m.text"},"ts":1635258579906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F2Pd3wkqgaYSeQEeQjo6y5GNiB_OR5o2pc9z2EiFNmc"},
{"content":{"body":"is it just passing parameters or is there some gestalten design thing i'm not getting","msgtype":"m.text"},"ts":1635258594987,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ULVv5haN1cMVcHHBSli_e1iyOAI8MXmaHfHFFTp62gs"},
{"content":{"body":"Yeah. It’s just passing parameters.","msgtype":"m.text"},"ts":1635258635208,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$DK2VyNQcTg1hn0-A-7dWua7RWwWmLrfhyjn-4seLwxI"},
{"content":{"body":"but then you need parameter decorators for some reason","msgtype":"m.text"},"ts":1635258773552,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$gJdQ0_hetArRyD13264ZkjTfFVN5FvX7lCOoiUvSWJ4"},
{"content":{"body":"It’s kind of like the opposite of `import` in that…if A needs B and B needs C—instead of B pulling in specifically C for itself—B defines a parameter, A pulls in B and C, and A plugs C into B’s parameter.","format":"org.matrix.custom.html","formatted_body":"It’s kind of like the opposite of <code>import</code> in that…if A needs B and B needs C—instead of B pulling in specifically C for itself—B defines a parameter, A pulls in B and C, and A plugs C into B’s parameter.","msgtype":"m.text"},"ts":1635258875287,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$O1JwEUaaF0kCyjr0zFMbF69NswHROq8xAKgsk5nyhtg"},
{"content":{"body":"So A can switch C with something else compatible with B’s parameter before plugging it into it.","msgtype":"m.text"},"ts":1635258914141,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$miXvM647AjxXEt9whkhxzVqFnhlRl180QC8U3cMMCOw"},
{"content":{"body":" * So A can switch C with something else compatible with B’s parameter before plugging it into it.","m.new_content":{"body":"So A can switch C with something else compatible with B’s parameter before plugging it into it.","msgtype":"m.text"},"m.relates_to":{"event_id":"$miXvM647AjxXEt9whkhxzVqFnhlRl180QC8U3cMMCOw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635258942463,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cqTWo1DsBFwigHlTQsTVBOGr55GaRcNZkm3Xbvs4434"},
{"content":{"body":"most DI is something like taking parameters for your dependencies, but the actual construction of your object graph is handled by a composer.","msgtype":"m.text"},"ts":1635258958668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bYYu8j2o90BQaUs57L-G7A6o4Bu4zskcJIFESXY0r7c"},
{"content":{"body":"It allows you to substitute dependencies for testing or even at runtime based on circumstance.","msgtype":"m.text"},"ts":1635258977072,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9JIO3enHfeLjBedVdO2yn9smrPALVWP4J3_rcDG66zw"},
{"content":{"body":"Whenever we need to refer to another variable elsewhere, we always face the choice of (1) defining it as a function parameter to be plugged in later or (2) importing it and hardcoding the dependency. There’s nothing special about that choice; it’s just an everyday thing.","msgtype":"m.text"},"ts":1635259118172,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$r7nkZcnmUmOAHsRmYISDcIYizFd4B8K1sOPWs0iJZ1M"},
{"content":{"body":"Although like Ron said, some people use elaborate composer systems that try to abstract away this plugging in for you.","msgtype":"m.text"},"ts":1635259208940,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$SxYVdvRFRHKduN3bYb6Jg0-O5YY5IkEL3zFShWD4AhY"},
{"content":{"body":"DI using parameter decorators is something like:\n\n```js\n// service-c.js\nclass ServiceC {\n  constructor(\n    @inject(\"service-a\") serviceA,\n    @inject(\"service-b\") serviceB\n  ) { ... }\n}\n\n// main.js\nimport { ServiceA } from \"./service-a.js\";\nimport { ServiceB } from \"./service-b.js\";\nimport { ServiceC } from \"./service-c.js\";\n\nconst container = new ServiceContainer();\ncontainer.addClass(\"service-a\", ServiceA);\ncontainer.addClass(\"service-b\", ServiceB);\ncontainer.addClass(\"service-c\", ServiceC);\n\nconst instance = container.getService(\"service-c\"); // gets or creates a ServiceC from the container\n```","format":"org.matrix.custom.html","formatted_body":"<p>DI using parameter decorators is something like:</p>\n<pre><code class=\"language-js\">// service-c.js\nclass ServiceC {\n  constructor(\n    @inject(&quot;service-a&quot;) serviceA,\n    @inject(&quot;service-b&quot;) serviceB\n  ) { ... }\n}\n\n// main.js\nimport { ServiceA } from &quot;./service-a.js&quot;;\nimport { ServiceB } from &quot;./service-b.js&quot;;\nimport { ServiceC } from &quot;./service-c.js&quot;;\n\nconst container = new ServiceContainer();\ncontainer.addClass(&quot;service-a&quot;, ServiceA);\ncontainer.addClass(&quot;service-b&quot;, ServiceB);\ncontainer.addClass(&quot;service-c&quot;, ServiceC);\n\nconst instance = container.getService(&quot;service-c&quot;); // gets or creates a ServiceC from the container\n</code></pre>\n","msgtype":"m.text"},"ts":1635259233061,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XR-e3fNYXIrtwajGLRcvIeyeOp_D23c3DMw4JjjEVWA"},
{"content":{"body":"And in test code, you can do:\n```js\nimport { ServiceC } from \"./service-c.js\";\nit(\"test the service\", () => {\n  const mockServiceA = { ... };\n  const mockServiceB = { ... };\n  const serviceC = new ServiceC(mockServiceA, mockServiceB);\n  // test serviceC using mock behavior from dependencies\n});\n```","format":"org.matrix.custom.html","formatted_body":"<p>And in test code, you can do:</p>\n<pre><code class=\"language-js\">import { ServiceC } from &quot;./service-c.js&quot;;\nit(&quot;test the service&quot;, () =&gt; {\n  const mockServiceA = { ... };\n  const mockServiceB = { ... };\n  const serviceC = new ServiceC(mockServiceA, mockServiceB);\n  // test serviceC using mock behavior from dependencies\n});\n</code></pre>\n","msgtype":"m.text"},"ts":1635259308181,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AlIFSQnTd5v3gKdKcfinHV4wKqStOn5MYcws5tElBME"},
{"content":{"body":"Of course, `main.js` is a contrived example. Many DI containers are fairly flexible, allowing you to specify optional dependencies, aggregate dependencies, nested containers, disposable containers (to manage component lifetime), etc.","format":"org.matrix.custom.html","formatted_body":"Of course, <code>main.js</code> is a contrived example. Many DI containers are fairly flexible, allowing you to specify optional dependencies, aggregate dependencies, nested containers, disposable containers (to manage component lifetime), etc.","msgtype":"m.text"},"ts":1635259407872,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oqnvGI3a_f9X5L_jF8aWhQg_aRwIFwki2kuuns5-ELU"},
{"content":{"body":"As well as lazily-injected circular dependencies using field decorators.","msgtype":"m.text"},"ts":1635259436046,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zTV-ZfriMDug88Lg7zgwkILJ7lNJ8X4-WBqDyrgrAGI"},
{"content":{"body":"and why would i want to do this?","msgtype":"m.text"},"ts":1635260067926,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZqIG9Xq88VegyYYwkTPW8e67LJ1aFNzNEK878IBt6ds"},
{"content":{"body":"You would want to do this if you're a very large application that wants to break itself into smaller components for ease of maintenance, or support pluggability/extensions.","msgtype":"m.text"},"ts":1635260219879,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EaP70ntimBtTUIEduOrVXWeXj5XQSORH7kIGfyHcPTM"},
{"content":{"body":"Its a fairly common idiom across any number of programming languages. Its primarily used server-side or in desktop applications, though not so much in the browser.","msgtype":"m.text"},"ts":1635260284993,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pG8EnedDBtQFHzoFhKUvPSGPygKraAZtEf_8xROrDls"},
{"content":{"body":"the easiest to maintain thing is the thing i can read","msgtype":"m.text"},"ts":1635260309964,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UzGWeEt7zbl6haOE1vIA7xgAnky5iMhls9ZiN2e0vKs"},
{"content":{"body":"Like anything, once you understand the system its fairly easy to read.","msgtype":"m.text"},"ts":1635260447248,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EMOWubCa0yGYDpgoDHspScv6u2hpAyd4BFBhQB6J02k"},
{"content":{"body":"The VS Code system has a decorator factory that is used to create the actual decorators used for injection, and names the decorators to coincide with the interface name of the expected input. As a result, your code looks something like (in TS):\n\n```ts\n// themeService.ts\n\n// describe the service interface\nexport interface IThemeService {\n  getColorTheme(): IColorTheme;\n  readonly onDidColorThemeChange: Event<IColorTheme>;\n  getFileIconTheme(): IFileIconTheme;\n  readonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n}\n\n// create a decorator for the service\nexport const IThemeService = createDecorator<IThemeService>();\n\n// editor.ts\nimport { IThemeService } from \"./themeService\";\n\nexport class EditorService {\n  themeService: IThemeService;\n\n  constructor(\n    @IThemeService themeService: IThemeService\n  ) {\n    this.themeService = themeService;\n  }\n\n  // code that uses themService\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The VS Code system has a decorator factory that is used to create the actual decorators used for injection, and names the decorators to coincide with the interface name of the expected input. As a result, your code looks something like (in TS):</p>\n<pre><code class=\"language-ts\">// themeService.ts\n\n// describe the service interface\nexport interface IThemeService {\n  getColorTheme(): IColorTheme;\n  readonly onDidColorThemeChange: Event&lt;IColorTheme&gt;;\n  getFileIconTheme(): IFileIconTheme;\n  readonly onDidFileIconThemeChange: Event&lt;IFileIconTheme&gt;;\n}\n\n// create a decorator for the service\nexport const IThemeService = createDecorator&lt;IThemeService&gt;();\n\n// editor.ts\nimport { IThemeService } from &quot;./themeService&quot;;\n\nexport class EditorService {\n  themeService: IThemeService;\n\n  constructor(\n    @IThemeService themeService: IThemeService\n  ) {\n    this.themeService = themeService;\n  }\n\n  // code that uses themService\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1635260885784,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$B1PgH332DmC4JIpUU45dJj4eSHu9tmFI5uCL3GbVdws"},
{"content":{"body":"All the decorator does is provide the glue that the composition plumbing uses. The idea is fairly similar to context providers in React. I don't have to dig around in the plumbing of my application to find and use a dependency, I merely need to declare that I require the dependency and the composition runtime will either provide it, or fail to compose early because of an unsatisfied dependency.","msgtype":"m.text"},"ts":1635261050567,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YuRcJgzRvBVeiIsGdx2g2pR7agZgzZarrnpfhQFvM38"},
{"content":{"body":"Its also much like a module import graph, except that you have more control over lifetime of the entire dependency graph.","msgtype":"m.text"},"ts":1635261083471,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XFQ8tn3Lj0FMR3T0tcuOmDYCbvu1E1fznOV9fJvTwWY"},
{"content":{"body":"The Managed Extensibility Framework (MEF) API in .NET is another example of a DI system, and it actually uses `Import` and `Export` attributes to define dependency relationships within a DI container.","format":"org.matrix.custom.html","formatted_body":"The Managed Extensibility Framework (MEF) API in .NET is another example of a DI system, and it actually uses <code>Import</code> and <code>Export</code> attributes to define dependency relationships within a DI container.","msgtype":"m.text"},"ts":1635261178855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rCf4sqGgxaVvKxixt4pWTgwhk4tgN2oRq5SkXHHeRLU"},
{"content":{"body":"this seems like an invitation to write unnecessarily complex code ... the virtue of low-magic is links are really clear (I also don't really like `context` in React tho)","format":"org.matrix.custom.html","formatted_body":"this seems like an invitation to write unnecessarily complex code ... the virtue of low-magic is links are really clear (I also don't really like <code>context</code> in React tho)","msgtype":"m.text"},"ts":1635261457072,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$QlbjJPjbi2CfEiWrhUw-_p-Sq0R3maFAnTeS6n9lzzw"},
{"content":{"body":"to be verbosely clever instead of code-golf-style tersely clever","msgtype":"m.text"},"ts":1635261481982,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$lGDKHpQAQbOSHvgdf8dM8j6hfpF_1nLJH2xMH2CsBHM"},
{"content":{"body":"does anyone have a good resource for descriptions of non-standard JS extensions over the years? as-in, pre-harmony stuff that got removed like conditional catch / let blocks / etc","msgtype":"m.text"},"ts":1635264110635,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$DX-x87Y5SJBuq2so99YJf7BEtfEr-zAs4zCUMINZeYE"},
{"content":{"body":"rubber duck method, i guess this is a good resource: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features","msgtype":"m.text"},"ts":1635264221244,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$793ygsoRNRCOJfmtesPMxrizbZAKw_WBqUYpyPTF8B4"},
{"content":{"body":"Doesn't list E4X!","msgtype":"m.text"},"ts":1635264429149,"senderName":"annevk","senderId":"@annevk:mozilla.org","id":"$EaPVzPt-Y_0982o_lzIwVyNxw4IbhTTrf5DwAZwx4F0"},
{"content":{"body":"Microsoft JScript had a special `::` syntax for events, I believe. (CC: rbuckton)","format":"org.matrix.custom.html","formatted_body":"Microsoft JScript had a special <code>::</code> syntax for events, I believe. (CC: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>)","msgtype":"m.text"},"ts":1635264460370,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$38pDp8hzQJ1zhLUh1H3UpZ1qDKTOVhrg_LtdzK7OUWQ"},
{"content":{"body":" * Microsoft JScript had a special `::` syntax for events, I believe. (CC: rbuckton)","format":"org.matrix.custom.html","formatted_body":" * Microsoft JScript had a special <code>::</code> syntax for events, I believe. (CC: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>)","m.new_content":{"body":"Microsoft JScript had a special `::` syntax for events, I believe. (CC: rbuckton)","format":"org.matrix.custom.html","formatted_body":"Microsoft JScript had a special <code>::</code> syntax for events, I believe. (CC: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$38pDp8hzQJ1zhLUh1H3UpZ1qDKTOVhrg_LtdzK7OUWQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635264463593,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$gEPQmJ-OxWmtoA4199JNILgChwEviUeMPaUiuMnwidU"},
{"content":{"body":"And JScript supports `expr() = expr2`?","msgtype":"m.text"},"ts":1635264536369,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XUu-c_9jdkb6_5-J9_lCu2BUrz8J0RX3uXou4HMdC-Y"},
{"content":{"body":"what does that do?","msgtype":"m.text"},"ts":1635264644679,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$Ar09Q1SUh5SA0D1T_fqKfr6YgeCbDFKGKFm_-rC1334"},
{"content":{"body":"Golly, I do not remember. I wish there were still resources about this. 😔","msgtype":"m.text"},"ts":1635264671372,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$dxeKWKRv-wwM-fOu-AumIZ8IC7NBGYx-OoxLFSEhSoU"},
{"content":{"body":"> <@rick.button:matrix.org> what does that do?\n\nIDK, just heard of that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ar09Q1SUh5SA0D1T_fqKfr6YgeCbDFKGKFm_-rC1334?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rick.button:matrix.org\">@rick.button:matrix.org</a><br />what does that do?</blockquote></mx-reply>IDK, just heard of that","m.relates_to":{"m.in_reply_to":{"event_id":"$Ar09Q1SUh5SA0D1T_fqKfr6YgeCbDFKGKFm_-rC1334"}},"msgtype":"m.text"},"ts":1635264765156,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PVDDCwtiYT9nAXM36gz7cFeSnLFBREJcqNFqLwn_3CY"},
{"content":{"body":"> <@rick.button:matrix.org> what does that do?\n\nI think it was to allow things like `eval(\"x\") = 2`, but I might be wrong","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ar09Q1SUh5SA0D1T_fqKfr6YgeCbDFKGKFm_-rC1334?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rick.button:matrix.org\">@rick.button:matrix.org</a><br />what does that do?</blockquote></mx-reply>I think it was to allow things like `eval(\"x\") = 2`, but I might be wrong","m.relates_to":{"m.in_reply_to":{"event_id":"$Ar09Q1SUh5SA0D1T_fqKfr6YgeCbDFKGKFm_-rC1334"}},"msgtype":"m.text"},"ts":1635264832212,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$w964NftNLq9sfPDFbNB-OvFtRvnQZEW6j3o09e-CjCg"},
{"content":{"body":"wild","msgtype":"m.text"},"ts":1635264936008,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$YjJRb9-4jvTT9LEhFepVf5H7S6dVV8sIN1G38X9mZ2o"},
{"content":{"body":"`eval(\"x\") = 2` is what engine developers fear","format":"org.matrix.custom.html","formatted_body":"<code>eval(&quot;x&quot;) = 2</code> is what engine developers fear","msgtype":"m.text"},"ts":1635264980368,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$REbZEuXXZUX0xGL_BtxBtTJXD-JrueXUwEY6VeLB7tw"},
{"content":{"body":" * `eval(\"x\") = 2` is what engine developers fear","format":"org.matrix.custom.html","formatted_body":" * <code>eval(&quot;x&quot;) = 2</code> is what engine developers fear","m.new_content":{"body":"`eval(\"x\") = 2` is what engine developers fear","format":"org.matrix.custom.html","formatted_body":"<code>eval(&quot;x&quot;) = 2</code> is what engine developers fear","msgtype":"m.text"},"m.relates_to":{"event_id":"$REbZEuXXZUX0xGL_BtxBtTJXD-JrueXUwEY6VeLB7tw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635264990209,"senderName":"rickbutton","senderId":"@rick.button:matrix.org","id":"$aA0qVm4poRZ8rmhCzxKGLmCCIMwG_U_gDFbL2UTfoJQ"},
{"content":{"body":"Ok, maybe it wasn't for eval: the ES 1 specification, at paragraph 11.2.3, says that any host function can return a reference, but `eval` doesn't","msgtype":"m.text"},"ts":1635265427870,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$daZMLwIcH7_67dpZ4hPzYV6oiOSDUh3XRGv0rEgL6EQ"},
{"content":{"body":"* Ok, maybe it wasn't for eval: the ES 1 specification, at paragraph 11.2.3, says that any host function can return a reference, but `eval` doesn't","m.new_content":{"body":"Ok, maybe it wasn't for eval: the ES 1 specification, at paragraph 11.2.3, says that any host function can return a reference, but `eval` doesn't","msgtype":"m.text"},"m.relates_to":{"event_id":"$daZMLwIcH7_67dpZ4hPzYV6oiOSDUh3XRGv0rEgL6EQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635265481484,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-DFT9fs87-Bx5g1fr7at3qfE8Lwwe78Tegz5s3qJzuI"},
{"content":{"body":"You can do `(x) = 2` today, but you can't do `({ x }) = { x: 2 }`.","format":"org.matrix.custom.html","formatted_body":"You can do <code>(x) = 2</code> today, but you can't do <code>({ x }) = { x: 2 }</code>.","msgtype":"m.text"},"ts":1635265601523,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jjb-sFrAJ6Ev430RjdtMjPxzfnob02buQtZn8zdLaHs"},
{"content":{"body":"not a non-standard extension, just an idiosyncrasy of the language","msgtype":"m.text"},"ts":1635265713359,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OBNrajwNScQH8aHpYhGCIE_jxsE2cSz3YJ6hCBDc1kY"},
{"content":{"body":"We are taking about `fn(x)=2`, not `(x)=2`!","msgtype":"m.text"},"ts":1635265747098,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$BqznhgSJ8iXkGDRa7aTfb-PsWh3xAZndQxrbBnr0tQQ"},
{"content":{"body":"can anyone read through https://tc39.es/ecma262/#sec-number.prototype.toexponential and confirm whether `0.0.toExponential(2)` should be `'0.00e+0'` vs `'0e+0'`?","format":"org.matrix.custom.html","formatted_body":"can anyone read through https://tc39.es/ecma262/#sec-number.prototype.toexponential and confirm whether <code>0.0.toExponential(2)</code> should be <code>'0.00e+0'</code> vs <code>'0e+0'</code>?","msgtype":"m.text"},"ts":1635266886586,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y4zgVSL7bnv37mfGg9_4cJ5ZgK-uLUCijZN77d_wd-o"},
{"content":{"body":"uh, looks like 0.00e+0","msgtype":"m.text"},"ts":1635267947965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KDDATWRatfpnHzC6xp2ATMG0jjcq9YcSOO2fbwYRV5o"},
{"content":{"body":"`f` is 2, so step 9.a says `m` is `\"000\"`","format":"org.matrix.custom.html","formatted_body":"<code>f</code> is 2, so step 9.a says <code>m</code> is <code>&quot;000&quot;</code>","msgtype":"m.text"},"ts":1635267976464,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ba2QL9CfEQnAip6B5q5DTB3BKRPwjkXd5Y7LWKIpKkA"},
{"content":{"body":"then step 11 puts a `.` after the first digit","format":"org.matrix.custom.html","formatted_body":"then step 11 puts a <code>.</code> after the first digit","msgtype":"m.text"},"ts":1635267987487,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zFH0aRa_gEiI69fzzb4K-IHdicjGDRWYdDuVK6FPujQ"},
{"content":{"body":"ok cool, thanks - that seemed right to me but i wanted another check","msgtype":"m.text"},"ts":1635268474842,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B67SYk-FoCpxm0hvzj87P1P1ixRCTWF3c7BIGrDNn4w"}
]