[
{"content":{"body":"another heads up for delegates, about Temporal. we got another spec bug report from two implementors today, and while investigating that one, Justin found another spec bug. I've added the fixes to the slides that I will present on Wednesday, but again since they are late additions, we understand if delegates will need more time to consider them.","msgtype":"m.text"},"ts":1635210105760,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$vPYTbLonGxfWb-QIjD_nF5U3pkub22MLo2-JWzwJh44"},
{"content":{"body":"Was there no CoC Committee update in the first session? It was on the agenda, but I didnâ€™t hear any update and itâ€™s not in the notes.","msgtype":"m.text"},"ts":1635217546358,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$2qjjrrRNGQ-8gHn7V2SrQM6fvUqthW8ow6fXO98J61A"},
{"content":{"body":"No, I think the plan was to have it later. ","msgtype":"m.text"},"ts":1635237829592,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$45WzQSg1PjEUZenUIpcNYbCNeIdW2QafIXuBj6tlriI"},
{"content":{"body":"The Halloween edition of TC39 plenary will begin in 3 mins.","msgtype":"m.text"},"ts":1635238658797,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$K6L0rFHlM2dUYs5lEWkyZOkULTMMh8OYecs5FdDbEpU"},
{"content":{"body":"ðŸ‘»","msgtype":"m.text"},"ts":1635238778301,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$h93PHUy_f3cI9xH7tJVHEhBJz7IOvNmlDJspS8X2nvc"},
{"content":{"body":"I forget it every time: I don't have to fill the form every day, right?","msgtype":"m.text"},"ts":1635239009357,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$C_UzTgaeHATlsumk0Rd2QyLRmhn7KCKVGjdot57LeEY"},
{"content":{"body":" * I forget it every time: I don't have to fill the form every day, right?","m.new_content":{"body":"I forget it every time: I don't have to fill the form every day, right?","msgtype":"m.text"},"m.relates_to":{"event_id":"$C_UzTgaeHATlsumk0Rd2QyLRmhn7KCKVGjdot57LeEY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635239015229,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k4-39DL2GK1zJxuis73OxkBKbHyYnIz2MhRkS_NiIjo"},
{"content":{"body":"correct, nicolo - we keep the same password","msgtype":"m.text"},"ts":1635239086934,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$9nDYDZIWvkRCeJH1bXWkx2mGNAQohOi5ZGASxy2zBG8"},
{"content":{"body":"we just need each attendee to fill it in once","msgtype":"m.text"},"ts":1635239097777,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$QxPcrN1vlLWAzfanbW4lurzX7g9uyw9dq80IdPUV_A4"},
{"content":{"body":"Ok thanks!","msgtype":"m.text"},"ts":1635239104355,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$O27UC-x2bsAxH-9LqUlfUddWUOfcFLOCPZVuYvTIDDA"},
{"content":{"body":"(I had to do it twice because if you don't open matrix in a new window or save the info, you can't get back to it ðŸ™ˆ)","msgtype":"m.text"},"ts":1635239419199,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$JMg4viyhwyln1WUd01wrtP1xZ7sjkiElMxyF5UlXB70"},
{"content":{"body":"oh hi Surma ","format":"org.matrix.custom.html","formatted_body":"oh hi <a href=\"https://matrix.to/#/@surma:matrix.org\">Surma</a>","msgtype":"m.text"},"ts":1635239791928,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$bGqsVaF1CsDdjgzqxdKhsH7fn6JJRlOZZsh-1K7yhiw"},
{"content":{"body":"ðŸ‘‹ Tierney Cyren ","format":"org.matrix.custom.html","formatted_body":"ðŸ‘‹ <a href=\"https://matrix.to/#/@bitandbang:matrix.org\">Tierney Cyren</a>","msgtype":"m.text"},"ts":1635239816696,"senderName":"Surma","senderId":"@surma:matrix.org","id":"$0mZumMpS7nhD2u6RF5rSoklcspT6i04kErtm3b5RKZY"},
{"content":{"body":"glad to see you here :)","msgtype":"m.text"},"ts":1635239831246,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$kviB88wZEqaRHvsry-s7DiYz9dYZ8LZuZuJ3UlYYCH4"},
{"content":{"body":"ðŸ‘‹hello","msgtype":"m.text"},"ts":1635239937194,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jWO4aASQQS999I61aArw7qMEzUgQbvqg_zqtp7jBjQw"},
{"content":{"body":"for the notes: frank said 3 PRs, but I can't figure out what the third one was","msgtype":"m.text"},"ts":1635240028557,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tbc3__AHQ8ar6rXlaDXRKg12UkpRN6Ttih_Za7QFi3I"},
{"content":{"body":"anyone know?","msgtype":"m.text"},"ts":1635240030481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eappg_fZxRJiBZ8sCiapWAHcWdkqs_C8ONQ7akG3hCI"},
{"content":{"body":"That looked like it worked.","msgtype":"m.text"},"ts":1635240032697,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2aZ6JJCz25mG8v8JzCREbz4yaKbkLtFHOmbmbP95AKA"},
{"content":{"body":"there was the non-continuous weekend one and the annex A one and then a third one","msgtype":"m.text"},"ts":1635240041480,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3WnGRjtDMzTtddU3ohXx85AAs2fRuvtpXOMBxYFJBkg"},
{"content":{"body":"\"canonical\"?","msgtype":"m.text"},"ts":1635240079898,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$H8EpyQ6ncHFLH_yGuAPSMrKc-FHYnaQjNTxlobCc08Q"},
{"content":{"body":"ah yes thanks","msgtype":"m.text"},"ts":1635240086687,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p_cZrhpWDZmFzwid4hGV0EX9GrCQcJYJ5EY3MNcBpns"},
{"content":{"body":"queue may be confused https://gc.gy/285b32a5-6cd1-4c10-9e9a-8a300f754897.png","msgtype":"m.text"},"ts":1635240202818,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$SYmT9-4kRd7-7kNrnegaTFaxuPVwr22F-A0bF7YdPH4"},
{"content":{"body":"an engine could probably do nice stack traces like that itself, no need to include pos in the error","msgtype":"m.text"},"ts":1635240417041,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CdKF-7EvuUkJIrmNlum0ALxC93SyS1BIYZ9lkjq5In4"},
{"content":{"body":"shu: raw returns some magic object that tells json.stringify to use the string as source instead of a string","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: raw returns some magic object that tells json.stringify to use the string as source instead of a string","msgtype":"m.text"},"ts":1635240632232,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$coeyEZ0h6d8NwlQo5UP_q2suwPC3FKim5L_qcAp4HKg"},
{"content":{"body":"In the cases where I have needed position information in JSON, I've generally had to rely on something like the TypeScript parser and AST, even in a purely JS project. My use cases so far have been fairly niche, such as doing minor updates to an existing JSON file while preserving the source formatting (usually for JSON files intended to be both human and machine readable such as package.json).","msgtype":"m.text"},"ts":1635240659641,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MlXurv4jQH8kyrMM4giwiLconla3DKQNavjQ3A2ijus"},
{"content":{"body":"syg: right now, JSON.stringify of an object without a `toString` is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@syg:mozilla.org\">syg</a>: right now, JSON.stringify of an object without a <code>toString</code> is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true","msgtype":"m.text"},"ts":1635241182422,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA"},
{"content":{"body":"Michael Ficarra: I am strongly opposed to having the marker be an object with a symbol here because it implies that the engine will need to do a lookup on every object","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: I am strongly opposed to having the marker be an object with a symbol here because it implies that the engine will need to do a lookup on every object","msgtype":"m.text"},"ts":1635241575404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XnQ1usJkSfmF32aw7MDb0hXydyazB2QE_s3YlQkKtAI"},
{"content":{"body":"which is observable","msgtype":"m.text"},"ts":1635241583948,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hwo6yTjSIsRRr_VuufeMbPD2rcVk2C-ogpYShyw5H8I"},
{"content":{"body":"it's simpler in the sense of \"fewer kinds of object in the language\", true, but not in terms of \"how much observable behavior there is\", and the second thing seems like the thing we should be minimizing most of the time","msgtype":"m.text"},"ts":1635241613114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_02MrDiKXUUuaPjF5BBcKGjA7LMnZRwk9tJxZ0cCt20"},
{"content":{"body":"bakkot: fair point","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: fair point","msgtype":"m.text"},"ts":1635241697197,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NmiqZ2DnUlw0SZajM7EXxy-PjBHKjt8rAlRdSj3tArI"},
{"content":{"body":"that's a good point","msgtype":"m.text"},"ts":1635241744438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I73n2aTt_8rgUWZB-eWV5tt1xtg8kgkBrRTrYTIVCoc"},
{"content":{"body":"though i don't think a particular problem for performance in the common case","msgtype":"m.text"},"ts":1635241756282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oO4x5S-l8NLZ3E340hen_3eWoJe_LDGbtgY2w7RVIu4"},
{"content":{"body":"bakkot: how do we ensure these exotic marked objects don't usefully escape the callback?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: how do we ensure these exotic marked objects don't usefully escape the callback?","msgtype":"m.text"},"ts":1635241758605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2ahxFh_x5a2dAwQHCE4n5OXDo8QOft505rFMUlmRPZo"},
{"content":{"body":"you don't","msgtype":"m.text"},"ts":1635241771682,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jlxDpIjMncouu_A9A2FUBewNpEsEsMDTXN_fXjHDEDE"},
{"content":{"body":"is the value of the slot fresh?","msgtype":"m.text"},"ts":1635241779045,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wmrllBva2mwXUJFPZ03AUdQhn9x1eLHhPqANQgGRcdk"},
{"content":{"body":"oh you mean per-invocation","msgtype":"m.text"},"ts":1635241808564,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$pNLcm283TIr6zEcQ6_pj-3343VdGiEPInfStQ_xGdx4"},
{"content":{"body":"in terms of spec language you could say its `{[[Index]]: n, [[String]]: s}`","format":"org.matrix.custom.html","formatted_body":"in terms of spec language you could say its <code>{[[Index]]: n, [[String]]: s}</code>","msgtype":"m.text"},"ts":1635241828599,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$o7oU1l3Z2cOtef7TTCghTuhcY23mgYWjChwWq8zOEk4"},
{"content":{"body":"and expect that index back","msgtype":"m.text"},"ts":1635241848056,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$DoP0OZRrGjvLRMVi_N2nvqK4w4XO8FBjI9hRS65wpgs"},
{"content":{"body":"or you could expect the whole object i guess","msgtype":"m.text"},"ts":1635241855002,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VUf-_-g3vrqY9rTlt_EJYwUo-EOKQGky-o033O0R4bY"},
{"content":{"body":"cuz it has identity","msgtype":"m.text"},"ts":1635241857873,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$F8liOYqkxvVcCDEhwFD4rntnSC00mP8bLz7rR0D7Jhg"},
{"content":{"body":"Michael Ficarra: you can't ensure they don't escape, but like devsnek says you have a field which indicates which invocation it is","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: you can't ensure they don't escape, but like devsnek says you have a field which indicates which invocation it is","msgtype":"m.text"},"ts":1635241934216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1tNoEquab5FfMywtnJG8WyPjRLpVFpNaK78Q89VQA08"},
{"content":{"body":"s/field/internal slot/","msgtype":"m.text"},"ts":1635241945301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qMdzdy7Qq0wtRPlF7OUQpEPxwHQzTZV3oGDlrR8MiLs"},
{"content":{"body":"> <@bakkot:matrix.org> syg: right now, JSON.stringify of an object without a `toString` is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true\n\nis that something that's generally depended upon?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@syg:mozilla.org\">syg</a>: right now, JSON.stringify of an object without a <code>toString</code> is guaranteed to do the thing you expect absent a reviver, but if the symbol is shared that's no longer true</blockquote></mx-reply>is that something that's generally depended upon?","m.relates_to":{"m.in_reply_to":{"event_id":"$BjhfGUh7X4GLCLzEMIPGLTodzzPALQfWNhQmhIQs3EA"}},"msgtype":"m.text"},"ts":1635241948336,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hD5aXLy1FHiY-5_QQb-EGVPZp-SlOnpv2qVyqMw2Pq4"},
{"content":{"body":"```js\nlet thing;\nlet raw = (v) => {\n  thing = { v };\n  return thing;\n};\nconst result = callback(key, value, { raw });\nif (thing && result === thing) {\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">let thing;\nlet raw = (v) =&gt; {\n  thing = { v };\n  return thing;\n};\nconst result = callback(key, value, { raw });\nif (thing &amp;&amp; result === thing) {\n</code></pre>\n","msgtype":"m.text"},"ts":1635241961243,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$WDEMs8y100SiqjFVP-C0kJmqWGr8d2S4foyfcJFUO-4"},
{"content":{"body":"okay I mean a counter is just a fresh value, so I'm fine with that","msgtype":"m.text"},"ts":1635241968816,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BecRWEpT_BQ0LPErm6Zl0_Gl3Yoc_IZfPZ6ZmT9VmHE"},
{"content":{"body":"like, wouldn't the new guidance be \"here's another hook we need, if you hook into it, well, you get hook behavior\"","msgtype":"m.text"},"ts":1635241975095,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bOPR90CsqAL0CdLH1B53ZbA7MfXk4jsGqbITD30o31I"},
{"content":{"body":"and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","msgtype":"m.text"},"ts":1635241975098,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EE02szJREw4PlQmWOHyX55CHahZpW_i3aQ9BI0_wxqY"},
{"content":{"body":"what happens if you call raw multiple times in one callback","msgtype":"m.text"},"ts":1635241983030,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6QUiL8mgqL9WS5XV1Lz5RtSWK2UplVtFHW7xoSX_qoc"},
{"content":{"body":" * and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","m.new_content":{"body":"and stringify encounters an object with this slot holding a different value than for the current invocation it can throw","msgtype":"m.text"},"m.relates_to":{"event_id":"$EE02szJREw4PlQmWOHyX55CHahZpW_i3aQ9BI0_wxqY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635241985811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eidKoHzisLtk4Q7Z7ja1dc5H1qSrEP2ZbjQGnMNdafM"},
{"content":{"body":"devsnek: same index","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">devsnek</a>: same index","msgtype":"m.text"},"ts":1635241994277,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QULd51S5A085eHH-4K7E0GHxZGzZX6lfpVT1sVSjSaM"},
{"content":{"body":"i feel like that should work, you could compose a sub-object","msgtype":"m.text"},"ts":1635241995893,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$aytIaakA3ggXIS8dYYZAAkpHUhABjSH7GFPXackiADM"},
{"content":{"body":"Tbh I would expect the argument to `raw` to always be a string","format":"org.matrix.custom.html","formatted_body":"Tbh I would expect the argument to <code>raw</code> to always be a string","msgtype":"m.text"},"ts":1635242025596,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$e0lF_gJNbRQTpg-0Er3TovlQPADOeDLfp1XPYXabDPI"},
{"content":{"body":"Otherwise it's not raw","msgtype":"m.text"},"ts":1635242028879,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jKkXI29wNkDoUsDaPDsx1WmUCo1IJ5y-FPNQbrKr5hk"},
{"content":{"body":"no i mean like","msgtype":"m.text"},"ts":1635242034446,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$78U0LbdESGC4ZgukRJ43YDDvjj697gWiSoyZq1Uarmk"},
{"content":{"body":"`(key, value, { raw }) => ({ a: raw(foo), b: raw(bar) })`","format":"org.matrix.custom.html","formatted_body":"<code>(key, value, { raw }) =&gt; ({ a: raw(foo), b: raw(bar) })</code>","msgtype":"m.text"},"ts":1635242056910,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$2GLUDnDwhf3zoPgpJqiuB9EAFVNm4fAJvV874O9h-G4"},
{"content":{"body":"uh ok, that makes sense","msgtype":"m.text"},"ts":1635242072225,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RwAExtEc-u9BroUQVuEXi0cgYhg7fmIoaj3PfM_dirc"},
{"content":{"body":"For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":"For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","msgtype":"m.text"},"ts":1635242110571,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fSmYNYDPUVeqTxz8hJOs0U5MjyVEABpbhDIsHogxTYE"},
{"content":{"body":" * For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":" * For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","m.new_content":{"body":"For example to represent a `class Fraction { #numerator: bigint; #denominator: bigint }`","format":"org.matrix.custom.html","formatted_body":"For example to represent a <code>class Fraction { #numerator: bigint; #denominator: bigint }</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$fSmYNYDPUVeqTxz8hJOs0U5MjyVEABpbhDIsHogxTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635242129742,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qFpTtSK2RZs62l9PN3QOmBEnxurwecqDyjkgGCtB7GQ"},
{"content":{"body":"ye you could put a tojson on that","msgtype":"m.text"},"ts":1635242130803,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$KfjDAg_qenydESp1EmN5oEFtXTAxAv2oFvH-Q-EfXTE"},
{"content":{"body":"which uses raw","msgtype":"m.text"},"ts":1635242136078,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$kSSEvmByP7BKUJ6UNfCvkEZ9F1XGOp9dyeiVDshEWIw"},
{"content":{"body":"toJson wouldn't get passed `raw`","format":"org.matrix.custom.html","formatted_body":"toJson wouldn't get passed <code>raw</code>","msgtype":"m.text"},"ts":1635242184632,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PHC60BpYfnhC5n23n98oCo5qCQQRd54-rB4k6Z3vv5E"},
{"content":{"body":"I think","msgtype":"m.text"},"ts":1635242185492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QTcfvn50uUuUdsWrrTu_exprVh2D7-9gUmR6yzEE4gI"},
{"content":{"body":"unless we do the global well-known symbol approach","msgtype":"m.text"},"ts":1635242201445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NhW2rhc5WoKl8aonNnnRYPS4IHQVYmp44FQ9k20qufg"},
{"content":{"body":"why does it matter which approach","msgtype":"m.text"},"ts":1635242215938,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$6dqckrg90PQieFiWwDlxeHVzw0RzGmB-PNF28VMLm20"},
{"content":{"body":"Can't toJSON receive a parameter even if it's not global?","msgtype":"m.text"},"ts":1635242220399,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"},
{"content":{"body":"i think tojson should get to participate ","msgtype":"m.text"},"ts":1635242224150,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$FpyAI1qkBGc7DZH0MsLSJNKGTnQDAFu-RQgVIPT37Ks"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can't toJSON receive a parameter even if it's not global?\n\n(it _could_ break something?)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Can&#39;t toJSON receive a parameter even if it&#39;s not global?</blockquote></mx-reply>(it <em>could</em> break something?)","m.relates_to":{"m.in_reply_to":{"event_id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"}},"msgtype":"m.text"},"ts":1635242243202,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vSQDRwXafgfleGn6FTsDuqdqW0xUou5w0BCpAxYekBA"},
{"content":{"body":"I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"I mean it could but it doesn't in the current proposal","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM"}}},"ts":1635242250158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cjek1Ae7bu90eN0iXFx8aWGcZP9UA_Kn2jE3H74RDIE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Can't toJSON receive a parameter even if it's not global?\n\n * I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sYlSqXEaSUWfeamRz1Kr-L7aUKL9-q55yjCJqNg3REM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Can't toJSON receive a parameter even if it's not global?</blockquote></mx-reply> * I mean it could but it doesn't in the current proposal","m.new_content":{"body":"I mean it could but it doesn't in the current proposal","format":"org.matrix.custom.html","formatted_body":"I mean it could but it doesn't in the current proposal","msgtype":"m.text"},"m.relates_to":{"event_id":"$cjek1Ae7bu90eN0iXFx8aWGcZP9UA_Kn2jE3H74RDIE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635242257694,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hld0qQXrVfI3W-GwaNF6hd5uoULXM24rsFukw3kgN6U"},
{"content":{"body":"also if we're going to let toJson participate I think a well-known symbol would make more sense anyway","msgtype":"m.text"},"ts":1635242279430,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$s7I3t5PAN-L46O-Eylsaizttxfpu4EmQ3OgUQFglnhU"},
{"content":{"body":"since the point of having the per-invocation value is to ensure the stringifier callback has control","msgtype":"m.text"},"ts":1635242302581,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MCpTVc5OYsjPlq3nRJt2vtWdAvGQnZFSWYiw2ntb9HQ"},
{"content":{"body":"and toJson is for giving the objects being serialized control","msgtype":"m.text"},"ts":1635242317829,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kMNzAde0cz8Hy9AxD0L2ngVLLjEtWGDf5mPpNd0L9tM"},
{"content":{"body":"though, I guess a global well-known symbol means we'd be imposing a cost on all _existing_ serialization calls, which seems bad","format":"org.matrix.custom.html","formatted_body":"though, I guess a global well-known symbol means we'd be imposing a cost on all <em>existing</em> serialization calls, which seems bad","msgtype":"m.text"},"ts":1635242364444,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UJo9PMUiFgoe_lxyakCmbiQZZsog5JKmwxhGFiw4etM"},
{"content":{"body":"extra get per object in the graph to be stringified does seem bad","msgtype":"m.text"},"ts":1635242498248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r6fuEhZT-I-eBIdX7UMMkZIAlhN936NHu9c16cL29EQ"},
{"content":{"body":"though isn't that an issue even with a per-stringify symbol","msgtype":"m.text"},"ts":1635242507170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZS3xGwznvA6ONwhU9OqSFNHRW-XjnRJEw87zeL7EQcg"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635242566597,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ge9vwa23NSrTJ7EIcC28Oj_kZM-OJusHgS_MO8cOJdQ"},
{"content":{"body":"not with an opaque object though!","msgtype":"m.text"},"ts":1635242574437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oMgVd3pJluGJL5hnAlTceAWlw9btgm7cgMayEnvEjAk"},
{"content":{"body":"well, not an extra get but an extra slot check, which ought to be much cheaper, yes","msgtype":"m.text"},"ts":1635242609873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eQ51GISQ4lCM6Wfq4_G7xYCipMWpTTpERMyv-9mT4FE"},
{"content":{"body":"so, ok, here is an alternate possible design which I don't hate:\n\nadd a new `JSON.rawString` which returns an opaque, frozen, null-prototype object with a new internal slot holding a string (which has been checked to be valid JSON - maybe even a valid JSON primitive?). this can be called by any code. if JSON.stringify encounters such an object, it serializes it to its internal slot","format":"org.matrix.custom.html","formatted_body":"<p>so, ok, here is an alternate possible design which I don't hate:</p>\n<p>add a new <code>JSON.rawString</code> which returns an opaque, frozen, null-prototype object with a new internal slot holding a string (which has been checked to be valid JSON - maybe even a valid JSON primitive?). this can be called by any code. if JSON.stringify encounters such an object, it serializes it to its internal slot</p>\n","msgtype":"m.text"},"ts":1635242617761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kbMU50tGNOnPuzXIKOY4hqQ38qpL8R6KQG-mRevZvz0"},
{"content":{"body":"then toJson can use this function, and revivers can as well","msgtype":"m.text"},"ts":1635242639955,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0iuwDma9OUJdmc9MCSl8xPRfYFxvaUOVtF7gtNhh5I0"},
{"content":{"body":"basically just the \"allow it to be not per-invocation\" approach, but with internal slots instead of symbols","msgtype":"m.text"},"ts":1635242681174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S2BHKr3jydNz1_ZBNP6JYU9g1H8FBj66XaiHl6nF5zQ"},
{"content":{"body":"+1 from me. if the opaque object has gensym behavior it also complicates the performance of the slot check","msgtype":"m.text"},"ts":1635242698652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vG244UV3UTQ3T2L1G3NioTQi4l6yF3VBlgF0KmuccHc"},
{"content":{"body":"\"has gensym behavior\"?","msgtype":"m.text"},"ts":1635242713984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oO_ESuXn40s9ApGLHXrySmhUDRMKQubFRNO7RgJtmYw"},
{"content":{"body":"https://gc.gy/d9ff7617-8eb7-4039-81bf-ac0201805137.png","msgtype":"m.text"},"ts":1635242738860,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$izjYpGmv8pYIjo0nHEjjAM8820F50jTsJI7mpQhJ2io"},
{"content":{"body":"the fresh minting behavior where each invocation of stringify has a new kind of opaque object only valid for that invocation","msgtype":"m.text"},"ts":1635242742647,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n2YuXzul-prk4zUFCSXIz5K6lkpAFm5kMFuVP-ya2AY"},
{"content":{"body":"gensym = generate symbol?","msgtype":"m.text"},"ts":1635242763056,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$toN4fEuESf5L_Fj-70TJm4pQTALZ2u9R-KVzkvCc80o"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635242772792,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_cj8z9AVu9ICDAURGEMw2r3vDOy0HBkOi1jdUWHeuGY"},
{"content":{"body":"it's the scheme thing that returns fresh symbols","msgtype":"m.text"},"ts":1635242791032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zgAm9p-F8Sc4bLJ1ARBywKiliELDFdLOHk4rPX_tHCc"},
{"content":{"body":"I know what gensym is but am confused about how it affects GC here","msgtype":"m.text"},"ts":1635242992872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vGBah1HuTcpuk8IbkOsk_mNXFWnmVop74pVWd9zMq0Y"},
{"content":{"body":"oh, unless you're thinking about the GC of the underlying string?","msgtype":"m.text"},"ts":1635243024663,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g31Kqra9Ow67R2D5yEmfQbS0Z44zOouj0PZ4mGfMH4c"},
{"content":{"body":"I would just not worry about the fact that holding the opaque object holds the string, I guess","msgtype":"m.text"},"ts":1635243045637,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HiLN7wUKOfAfYewPDrjaSEGmq2TNYSQTUtxJNdwnFRs"},
{"content":{"body":"no not gc","msgtype":"m.text"},"ts":1635243055827,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TbKlqWFGwBLXU27cBICHYeGp1sElhF17U6ITQjxtOto"},
{"content":{"body":"i meant the \"is this one of them opaque objects\" checks","msgtype":"m.text"},"ts":1635243085989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YgW1JJ5_nNb3gbgNC8VDi9Id0GswzUZADWZsAW7f9Ao"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1635243092837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ycvKbmyzKtGsB75HbOQRcUB9F3YI3nnwOVFBTTkudH0"},
{"content":{"body":"I mean, you check if it has the slot, and then if it does you check if the value for the slot matches the value for the current invocation","msgtype":"m.text"},"ts":1635243118170,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VjQ0oQByK4Awo1UUZ6jXZm-RiJxV5oNINNlsxwEKXZg"},
{"content":{"body":"seems not so bad","msgtype":"m.text"},"ts":1635243121337,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f6wqJ_p_9Q6juxx3JL0Kpw48QpJ7OQ1SJUHOi2yz-hI"},
{"content":{"body":"and it's just the presence-of-slot check which gets paid by code not using this capability","msgtype":"m.text"},"ts":1635243133277,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aeiIVH7Xrx3KTUGCl1H_p3HBHfDDZKTTMpttcRl3Pok"},
{"content":{"body":"agree, seems not so bad","msgtype":"m.text"},"ts":1635243275097,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rELrPG7wZbWACB8Km5-kgHSUDea3D2jkw8JYHjWli4g"},
{"content":{"body":"yeah I favour this raw function that returns an object with an internal slot with index (or two such slots) option now","msgtype":"m.text"},"ts":1635243345763,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yRdRFUPJg7IGTYaVrtnLRPlDY7wlfRrBHa3bppPr3L0"},
{"content":{"body":"github issue: https://github.com/tc39/proposal-json-parse-with-source/issues/19","msgtype":"m.text"},"ts":1635243353600,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YHPt0JYiOS2FcO407XAW8gPK1eTgrcsBpBNSFy8dzyg"},
{"content":{"body":"Michael Ficarra: https://github.com/tc39/proposal-json-parse-with-source/issues/18#issuecomment-951789801","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: https://github.com/tc39/proposal-json-parse-with-source/issues/18#issuecomment-951789801","msgtype":"m.text"},"ts":1635243393094,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w4DdYGWQg0hlVJ3tR6tR6AUHhlwN1CysfkHY6leBlQo"},
{"content":{"body":"Michael Ficarra: what index? the per-invocation counter?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: what index? the per-invocation counter?","msgtype":"m.text"},"ts":1635243396117,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SeMUbmud-VOCKpDNhwFujvkTPKRor9aQRTiAhts735I"},
{"content":{"body":"ehh, i'd still rather we just have global","msgtype":"m.text"},"ts":1635243410725,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yxmezfAzbIBsemqt3dVAEDkbPllB_Y4Obl3sHahqVUE"},
{"content":{"body":"The only issue I see with an exotic object is if you write any custom JSON serialization logic today in a replacer/reviver, you would need to be able to test whether the object is one of these exotic objects so you can pass it through rather than trying to convert it yourself.","msgtype":"m.text"},"ts":1635243440845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZHhK_D54SBG5mV5VqBeYuNfkoaRaBNGrIlHZK4dTjrc"},
{"content":{"body":"yes, per-Json-stringify counter and possibly a per-callback counter","msgtype":"m.text"},"ts":1635243455260,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E4Z0Rc3KB4YzQblEKHcqL3rbxEs01OQuKVi4d3FH1KI"},
{"content":{"body":"i am against a per-callback counter","msgtype":"m.text"},"ts":1635243465458,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x5zidU_rDvRvs6DCX5I1aNLBJ9eR1pqDjkU7Mw-2oMA"},
{"content":{"body":"that's probably fine shu ","format":"org.matrix.custom.html","formatted_body":"that's probably fine <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1635243478783,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$31FoQow4ibTdiJ1gWtqeyUZcvVioEFXZo7q3U-J0gew"},
{"content":{"body":"i am also against a per-invocation counter and favor bakkot's concrete alternative, to be clear","format":"org.matrix.custom.html","formatted_body":"i am also against a per-invocation counter and favor <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s concrete alternative, to be clear","msgtype":"m.text"},"ts":1635243495671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-b9OcEhBK5HF8QuqCmKgO1GYSwc1mckYn9yIxO61M38"},
{"content":{"body":"but i am more against per-callback counter","msgtype":"m.text"},"ts":1635243501848,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bO4zPpA2A9-NlUFJtPrLp_esahsTDnI-CbiLRmV79Rk"},
{"content":{"body":"So you need both a `JSON.rawSting` and a `JSON.isRawString`, otherwise it comes *harder* to write serializers/deserializers.","format":"org.matrix.custom.html","formatted_body":"So you need both a <code>JSON.rawSting</code> and a <code>JSON.isRawString</code>, otherwise it comes <em>harder</em> to write serializers/deserializers.","msgtype":"m.text"},"ts":1635243509263,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t3d2QVIo_L7daHUdrD_5sXxHBcrJy5B0-fogvtTXJc0"},
{"content":{"body":"what do you do with isRawString","msgtype":"m.text"},"ts":1635243533953,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ZiqFvLkHcvnkGJ5HYwAbJ4PRqsjy7xKSbnhPVU5FpSw"},
{"content":{"body":"If you do custom serialization of any kind you need to know if the object you get in your custom serializer/replacer is this special exotic object or some other object.","msgtype":"m.text"},"ts":1635243598906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DZpb64sqdkUDaLR5ghFg7thGDRXzr9Q8duj8xDZ1wYA"},
{"content":{"body":"fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":"<p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","msgtype":"m.text"},"ts":1635243635846,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"},
{"content":{"body":"why do you need to know","msgtype":"m.text"},"ts":1635243649528,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$5xyX80yvzWXZ9yMS1F7b7uw9WT_YoTg1Jadlr0rEG-Y"},
{"content":{"body":" * fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":" * <p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","m.new_content":{"body":"fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n\n(we are not looking to include tagged strings in the R&T proposal)","format":"org.matrix.custom.html","formatted_body":"<p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635243653010,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$8KeTBkWrbPNWSXbs4Bw2GmaGozXNUC-ATTc-3sgKuI8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n> \n> (we are not looking to include tagged strings in the R&T proposal)\n\nthis issue makes me very sad, previously we said that Box(v) should always work without you having to care what v is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n</blockquote></mx-reply>this issue makes me very sad, previously we said that Box(v) should always work without you having to care what v is","m.relates_to":{"m.in_reply_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"}},"msgtype":"m.text"},"ts":1635243715777,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$vF1FLiUEuu7wsNZ1oaw8gP1BgY9tGCEfAJ5xNhzv-04"},
{"content":{"body":"A naive replacer might do:\n```js\nfunction serializer(value) {\n  if (typeof value === \"object\") {\n    if (Array.isArray) { ... }\n    const result = {};\n    for (const key in value) { ... } \n    return result; // uh oh, we've replaced the exotic object with an empty normal object.\n  }\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>A naive replacer might do:</p>\n<pre><code class=\"language-js\">function serializer(value) {\n  if (typeof value === &quot;object&quot;) {\n    if (Array.isArray) { ... }\n    const result = {};\n    for (const key in value) { ... } \n    return result; // uh oh, we've replaced the exotic object with an empty normal object.\n  }\n  ...\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1635243745904,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$McBbomDXl8DoX5EtRji9q2SCiy5qx2MLLk1GRYBrLJ8"},
{"content":{"body":"If there's no way to test, you have to expect to pass through objects with no keys, which adds complexity.","msgtype":"m.text"},"ts":1635243771618,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lBpEuF0V4vU6Hh7aFuWmjFtbP5dKXcdFbHp00bMpTdE"},
{"content":{"body":"rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code>","msgtype":"m.text"},"ts":1635243788765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> fwiw, in the R&T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with `JSON.rawString`.\n> \n> (we are not looking to include tagged strings in the R&T proposal)\n\nI really don't like attaching state to strings or any object in a way that is not only immediately consumed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>fwiw, in the R&amp;T repository there has been a bunch of discussion about tagged strings (https://github.com/tc39/proposal-record-tuple/issues/258#issuecomment-947115796). This feels similar, since it's a string tagged with <code>JSON.rawString</code>.</p>\n<p>(we are not looking to include tagged strings in the R&amp;T proposal)</p>\n</blockquote></mx-reply>I really don't like attaching state to strings or any object in a way that is not only immediately consumed","m.relates_to":{"m.in_reply_to":{"event_id":"$eNr-Dza_GLTn8w8BrSqWzBNVUGsdUENWSsLOyIYvsZ4"}},"msgtype":"m.text"},"ts":1635243793692,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bPKRVzxsJ4JGZxLL_2LQYKHPYRyBTCeYSqQY79iA55I"},
{"content":{"body":"if we do that, we'd have to at least have a testing function like what Ron's talking about","msgtype":"m.text"},"ts":1635243816064,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$nuSd_augopin31LCt6Nv91Q4I6BG2sJlOQEWcXUc_5k"},
{"content":{"body":"but then you force anyone using this feature to test anything that goes into their returned object","msgtype":"m.text"},"ts":1635243837006,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BYhnjvttb79xXL6H8tydS0BBk6HGpijnXflHeF3pddM"},
{"content":{"body":"> <@bakkot:matrix.org> rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`\n\n(assuming that `isRawString` enforces that its argument is a primitive JSON string or digit sequence)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code></blockquote></mx-reply>(assuming that <code>isRawString</code> enforces that its argument is a primitive JSON string or digit sequence)","m.relates_to":{"m.in_reply_to":{"event_id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"}},"msgtype":"m.text"},"ts":1635243839872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oe7ksqNOXQKuM8LSm3VyHt3RmPvhPDBAWSSct5N5DWk"},
{"content":{"body":"The upside of a symbol is its something you can check for.","msgtype":"m.text"},"ts":1635243845902,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nB766aAFwVZxB9IqxGlGK90aWODkMWqunoIeN8JIVKA"},
{"content":{"body":"(to be clear, not saying this is great, just saying that it's possible-ish without a new function)","msgtype":"m.text"},"ts":1635243849259,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OV_U2qkPNtNSIDKg2h_cNaXbHrP1K7gnVKVzfZcNafM"},
{"content":{"body":"> <@bakkot:matrix.org> rbuckton: `JSON.isRawString = o => o && typeof o === 'object' && !(toJSON in o) && !['{', '['].includes(JSON.stringify(o))`\n\nA `JSON.rawString(\"{}\")` would be observabily the same as `Object.freeze({ __proto__: null })`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>JSON.isRawString = o =&gt; o &amp;&amp; typeof o === 'object' &amp;&amp; !(toJSON in o) &amp;&amp; !['{', '['].includes(JSON.stringify(o))</code></blockquote></mx-reply>A <code>JSON.rawString(&quot;{}&quot;)</code> would be observabily the same as <code>Object.freeze({ __proto__: null })</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Fnu6AF7kWq6CZJSvLQyyM7zrkY2GAojGtHqO8GTGffE"}},"msgtype":"m.text"},"ts":1635243865076,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3iRBg4R34yMltCb_yukQiVhrSMozVJlh-NHHVM4_Rvw"},
{"content":{"body":"bakkot: So, your suggestion is to JSON.stringify an arbitrarily complex/large object that may have its own nested toJSON just to check for an exotic raw string object?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: So, your suggestion is to JSON.stringify an arbitrarily complex/large object that may have its own nested toJSON just to check for an exotic raw string object?","msgtype":"m.text"},"ts":1635243887271,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hW_pgb5f1ErC4xioUdP4SUZ2VHZ9ikTgEJ8nAGQGtY8"},
{"content":{"body":"nicolo-ribaudo: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: &quot;assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence&quot;","msgtype":"m.text"},"ts":1635243896523,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs"},
{"content":{"body":"> <@bakkot:matrix.org> nicolo-ribaudo: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"\n\nWhops, I didn't read it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"</blockquote></mx-reply>Whops, I didn't read it","m.relates_to":{"m.in_reply_to":{"event_id":"$EFIJW33D39up_nVf5rsW_n8nBZ1MFPeH6B-b4LZinjs"}},"msgtype":"m.text"},"ts":1635243919393,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7NYweijMkPFnOk3Ocw5lE6ZWw_NtSJe1ADiiXOSqRyM"},
{"content":{"body":"rbuckton: you can add `Object.keys(o).length === 0` if you're worried about that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: you can add <code>Object.keys(o).length === 0</code> if you're worried about that","msgtype":"m.text"},"ts":1635243926049,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mCJXny_MwuTizDdrO48YURX9ZO3JZeTU0doHw-wBagA"},
{"content":{"body":"It would have to be much more robust, checking for null prototype, no properties, etc.","msgtype":"m.text"},"ts":1635243927524,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vhGYT2kAuUJWffZvvTImooXnwZyiLTSGBwj2mkf7qyQ"},
{"content":{"body":"bakkot: More like `Object.getPrototypeOf(o) === null && Object.getOwnPropertyNames(o).length === 0 && Object.getOwnPropertySymbols(o).length === 0` etc.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: More like <code>Object.getPrototypeOf(o) === null &amp;&amp; Object.getOwnPropertyNames(o).length === 0 &amp;&amp; Object.getOwnPropertySymbols(o).length === 0</code> etc.","msgtype":"m.text"},"ts":1635244017391,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lPRA8d8u7FAtp5K8MA8LygguaykoY5gLwtPCXIj-WvU"},
{"content":{"body":"unless you're concerned about proxies, I don't think you need those additional checks","msgtype":"m.text"},"ts":1635244033332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Pxdz5-ImLWVrGrZgHdCsOX2ry9D4deVmLT2u8Ylrjjw"},
{"content":{"body":"no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":"no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","msgtype":"m.text"},"ts":1635244078078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jOMDGf2gpmlcrHzYCfw16DcB3Nwtu7OMwbbbFuAzhug"},
{"content":{"body":"In which case I point you at `Array.isArray`, which is better (and more reliable) than `o => typeof o === \"object\" && o !== null && Object.prototype.toString.call(o) === \"[object Array]\"`","format":"org.matrix.custom.html","formatted_body":"In which case I point you at <code>Array.isArray</code>, which is better (and more reliable) than <code>o =&gt; typeof o === &quot;object&quot; &amp;&amp; o !== null &amp;&amp; Object.prototype.toString.call(o) === &quot;[object Array]&quot;</code>","msgtype":"m.text"},"ts":1635244079560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q48MroAeH1Xy25pVjuh_zqspDQwDJb4MiVq7DiIcC7w"},
{"content":{"body":" * no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":" * no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","m.new_content":{"body":"no non-exotic object can have the behavior that `toJSON` is absent and also `!['{', '['].includes(JSON.stringify(o)[0])`","format":"org.matrix.custom.html","formatted_body":"no non-exotic object can have the behavior that <code>toJSON</code> is absent and also <code>!['{', '['].includes(JSON.stringify(o)[0])</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$jOMDGf2gpmlcrHzYCfw16DcB3Nwtu7OMwbbbFuAzhug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635244099009,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xYea160p2913P20weduMgopBZJMxdfjmdrlBbK6cUWc"},
{"content":{"body":"I thought rawString could return a string that contains any valid JSON. Couldn't you do `JSON.rawString(\"{}\")`, and wouldn't that fail the check?","format":"org.matrix.custom.html","formatted_body":"I thought rawString could return a string that contains any valid JSON. Couldn't you do <code>JSON.rawString(&quot;{}&quot;)</code>, and wouldn't that fail the check?","msgtype":"m.text"},"ts":1635244129505,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$grceMux7oGTkgBtDotEMCDI0iWYkZIqU5QgusVJN0WI"},
{"content":{"body":"rbuckton: \"assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: &quot;assuming that isRawString enforces that its argument is a primitive JSON string or digit sequence&quot;","msgtype":"m.text"},"ts":1635244141104,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6dGW4R_-F-e2fG_jFizlluZuhUeeaUk1KfT0BNGxDRQ"},
{"content":{"body":"which I think it should, separately from this concern","msgtype":"m.text"},"ts":1635244159915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WQGqM8a9hudE3SsBizjB2M7lOWCUbioTMX3Vf0C-HIQ"},
{"content":{"body":"(otherwise you can abuse it to add whitespace, which seems bad)","msgtype":"m.text"},"ts":1635244172823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8gvmQkKqa_SgtW0TBXx3sbBHsX_Jour_BmLR7o6EmfQ"},
{"content":{"body":"That's fair, but you're still requiring a fairly complex check that could be more easily exposed by the language. ","msgtype":"m.text"},"ts":1635244174876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OVz-aAFvTWI8HcDv8HvOAtYgBR63IL3Lnqrqd9EX8-g"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1635244185512,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jY_XlOaadAehCX1y5r9N-2-JXyyczGNkMQYbS4WVxh8"},
{"content":{"body":"like I said, not saying my proposal is great, just that it's possible-ish","msgtype":"m.text"},"ts":1635244202503,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zJtX5r1nov6dd8U_H9CsRYJc31amUPue5B4u40JxB54"},
{"content":{"body":"though I guess you _do_ also need to check for boxed numbers / strings, which is also annoying","format":"org.matrix.custom.html","formatted_body":"though I guess you <em>do</em> also need to check for boxed numbers / strings, which is also annoying","msgtype":"m.text"},"ts":1635244212142,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IoKXxppZeV3A17RUfW4w_MwSWv-X_H-k4F_Wp8Cmatc"},
{"content":{"body":"so yeah it seems reasonable to add `isRawString`","format":"org.matrix.custom.html","formatted_body":"so yeah it seems reasonable to add <code>isRawString</code>","msgtype":"m.text"},"ts":1635244230178,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7YgRt9aPZ8fKzGFEon3j1eZM9UAy5_bXHUrnwTEqq-M"},
{"content":{"body":"An `isRawString` shim is much more complex than an `isArray` shim, which means its much easier to get wrong if you're rolling your own serializer (which, I would argue, is the exact situation you're in if you're using this functionality).","format":"org.matrix.custom.html","formatted_body":"An <code>isRawString</code> shim is much more complex than an <code>isArray</code> shim, which means its much easier to get wrong if you're rolling your own serializer (which, I would argue, is the exact situation you're in if you're using this functionality).","msgtype":"m.text"},"ts":1635244268249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$P9ArKVIcGZz2n4EbF57RyIVux7Xxoj9Vy8_NjlEcgJ4"},
{"content":{"body":"is there a good way for me to get involved in the LF discussion meetings?","msgtype":"m.text"},"ts":1635244331985,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$D-TqQ3sqUvPbwYftWd-F19Y8hPvnPPOfv8vXTZPdBk8"},
{"content":{"body":"Tierney Cyren: you may join this ad-hoc group","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bitandbang:matrix.org\">Tierney Cyren</a>: you may join this ad-hoc group","msgtype":"m.text"},"ts":1635244352203,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$FQBCOhCvdD1E1T-kzyGpztHxgxKGkweCm8JEi58n1Jc"},
{"content":{"body":"I've wanted to participate but how is unclear and I've not gotten around to asking","msgtype":"m.text"},"ts":1635244360784,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$iwbV8mtMaJ2YgQRQ3zE_0Gxl125KQqcDxDTQEA0Z9SU"},
{"content":{"body":"write an email to Patrick and he'll add you to the mailing list/event","msgtype":"m.text"},"ts":1635244370087,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$TK7CWlQqnJgHZXGYmazDnCMaRo3CK9sWjMmRGL9nl1Q"},
{"content":{"body":" * write an email to Patrick and he'll add you to the mailing list/event","m.new_content":{"body":"write an email to Patrick and he'll add you to the mailing list/event","msgtype":"m.text"},"m.relates_to":{"event_id":"$TK7CWlQqnJgHZXGYmazDnCMaRo3CK9sWjMmRGL9nl1Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635244373565,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$RUHD1q2e3UjSEXaUAkxrOWHFjv26rf5Bqyz4VeIbDyA"},
{"content":{"body":"talk to Isabelle, I think she's responsible for getting everyone interested from MS involved","msgtype":"m.text"},"ts":1635244409870,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$nitvWUiEs2JW-LEwjv-m3tEaiwhsMNfK3Dt-kjfa19I"},
{"content":{"body":"$4m seems like a lot but what's the actual runway that provides? ","msgtype":"m.text"},"ts":1635245183686,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$Y2_hExIBNOtKj_AGVxBPuYT1oP79KwEsiOAUc-VSUmE"},
{"content":{"body":"that number does not feel helpful in a vacuum","msgtype":"m.text"},"ts":1635245217054,"senderName":"Tierney Cyren","senderId":"@bitandbang:matrix.org","id":"$va2N3tM59Po-M9EgDzVpX0BFoEY9yTWJ-3B7-pHmQYc"},
{"content":{"body":"we are starting up plenary in 1 minute!","msgtype":"m.text"},"ts":1635249578630,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$NIButULzAY71RF9E81f1sKMKKatHNKYiIkru37ptLls"},
{"content":{"body":"it also happened with NativeError.prototype.toString lol","msgtype":"m.text"},"ts":1635249960779,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$a4HLsRry9o9iXtVTXsusMlmDkJDpCbqBlRGxNRT-utU"},
{"content":{"body":"chrome had that from 2016 to 2019 until i removed it","msgtype":"m.text"},"ts":1635250013237,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$inSVRe0ezJGEZe0zuMavM7Yr17QIa7nElABtHnqdvm8"},
{"content":{"body":"instead of tightening host restrictions, can't we just make a section of test262 which is like \"okay to fail, but should probably be looked at because it's more likely a bug\"?","msgtype":"m.text"},"ts":1635250193861,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$j0lwafMrpwnHu-HFvNirHfCGCVxsx25eLMF69LgzquU"},
{"content":{"body":"i was just thinking that","msgtype":"m.text"},"ts":1635250213843,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$XoL745d5y7cNAfsWnc7nwKIrIMixtNclvQN_wsJmr7o"},
{"content":{"body":"like a common-sense directory lol","msgtype":"m.text"},"ts":1635250219127,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$L91Cpv8Lifu8sANOeEPGjgUXJfzohXyqife1QgnLQGg"},
{"content":{"body":"Michael Ficarra: yes, i plan to bring that up","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: yes, i plan to bring that up","msgtype":"m.text"},"ts":1635250227077,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6NWL9dK6gXFGGc6LNfAnb9bP5OF5JMGlKPb4R8YXMT8"},
{"content":{"body":"i object to this proposal","msgtype":"m.text"},"ts":1635250237479,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TJViA4T6dgekKaPnteqHPhiJ4F2htSbLiSK4veY_Jqo"},
{"content":{"body":"thanks shu ","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","msgtype":"m.text"},"ts":1635250238155,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rKwkuLHKFY9hDy6xtkzPiQEZKrW_Ka4ZQ_Anv440r2U"},
{"content":{"body":"what is this proposal","msgtype":"m.text"},"ts":1635250243678,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$VQyBwYr8TsT8N7efuhKoACcO3ZMvQ9VeqkZVIiKrzzY"},
{"content":{"body":"but i'll wait for jordan to actually say the proposal first","msgtype":"m.text"},"ts":1635250248243,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_HQjrpV44i-LPQfIr6WQp-hsJeZr_v7T3a6rj4br-Y4"},
{"content":{"body":"i haven't made it yet.","msgtype":"m.text"},"ts":1635250248516,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0W-paFS_IOhGFp8sNUjIqwIgxRXtMD9R0bDo7ZI4XGc"},
{"content":{"body":"before i add myself to the queue","msgtype":"m.text"},"ts":1635250251026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vngqGl7xM7c4jQtIYoCHFikYCLsetgdskzjvcxfl6BE"},
{"content":{"body":"i assume its restricting names on prototypes or smth","msgtype":"m.text"},"ts":1635250260642,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$bikKW62OOX5eRe7Z5vwAi9ve07mT89nRJdnMROgPNmM"},
{"content":{"body":"test262-parser-tests has a \"fail\" directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail","msgtype":"m.text"},"ts":1635250319335,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY"},
{"content":{"body":"\"Any property on a given object mentioned in the specification, must ONLY appear in the locations specified on that object or its prototype chain\"","msgtype":"m.text"},"ts":1635250349059,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IDW2hzuFvwEyqqv0OMqhMLOnTtgOs04T9iFt7tRyBf4"},
{"content":{"body":"> <@michaelficarra:matrix.org> test262-parser-tests has a \"fail\" directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail\n\ngood filenames","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>test262-parser-tests has a &quot;fail&quot; directory which is spiritually the same: https://github.com/tc39/test262-parser-tests/tree/master/fail</blockquote></mx-reply>good filenames","m.relates_to":{"m.in_reply_to":{"event_id":"$E-vjr8QiOXz-mY8aXRsWBKG4B95dfccZHZIFDHk6RSY"}},"msgtype":"m.text"},"ts":1635250357684,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$BM_B9uIC_my7dr2qT1sGxh80c63SYpOmjrk2UQuefhs"},
{"content":{"body":"hey you try naming files with random non-programs","msgtype":"m.text"},"ts":1635250397122,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cIXIO3ggN3fIrC87GQAmyyTuZ2-OidLJohuHmXJEOEQ"},
{"content":{"body":"pull requests welcome","msgtype":"m.text"},"ts":1635250409615,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ijz6JvP3HtDCTZVBzRzsBID16-klmjH5blPm__7Ta04"},
{"content":{"body":"are the names just a hash of the source code or sth?","msgtype":"m.text"},"ts":1635250457867,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$CxCxDHQasN7mnDWv9FLio6OrLjgtWfv81GfWFZGSYgo"},
{"content":{"body":" * are the names just a hash of the source code or sth?","m.new_content":{"body":"are the names just a hash of the source code or sth?","msgtype":"m.text"},"m.relates_to":{"event_id":"$CxCxDHQasN7mnDWv9FLio6OrLjgtWfv81GfWFZGSYgo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635250462438,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$kxyOdy5tNSwPZ5W-GIfgc3Jl9Q9kaJxL2ZanooAvMFw"},
{"content":{"body":"yep ryzokuken ","format":"org.matrix.custom.html","formatted_body":"yep <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>","msgtype":"m.text"},"ts":1635250464800,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Zez6hBc3ILJSrvmLI0tHOjDp2GFSMEqcnmk5iR4HSKg"},
{"content":{"body":"i like test262 names","msgtype":"m.text"},"ts":1635250483750,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$jrbqoHgfGjN3Vphi_HtW_R7TC2kKQRt8gigo9niXGzo"},
{"content":{"body":"man I gotta update that project","msgtype":"m.text"},"ts":1635250627705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a-jZnXVgTm6m8RaI6JiXH3DzZ9MaHqQSXKOFZf-YVOQ"},
{"content":{"body":"`test-assignment-really-terribly-bad.js`","format":"org.matrix.custom.html","formatted_body":"<code>test-assignment-really-terribly-bad.js</code>","msgtype":"m.text"},"ts":1635250630984,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$OeSpSYLWzGSeCytJndaL7wHLsnnfLZ6jCXjMRySd-WQ"},
{"content":{"body":"would we need work in e.g. test262.report if we add a new test category?","msgtype":"m.text"},"ts":1635250766096,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$EC-CIgCCdfJQ5DxOvlDqjdEGtlJFBhSVt0zBc12071s"},
{"content":{"body":"test262.report is bocoup right","msgtype":"m.text"},"ts":1635250864517,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$CcwhmVjcWpl-E2YhmyqmvvgL1m8xfkb6H-qQcFK3S8A"},
{"content":{"body":"Yeah","msgtype":"m.text"},"ts":1635250898729,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$uHKAJqEMkpe4y0a7MZ8121vnHvXWcx7YJoJcwgtIxZQ"},
{"content":{"body":"I wonder if there are test cases we would like to add to 262 aside from things we feel bold enough to tighten that would nonetheless be useful for impls? I seem to recall tests in this category back in the day but have forgotten","msgtype":"m.text"},"ts":1635250997920,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$fTVQF5KE3ZZvN7PtlaJQ7o5nZkXAwoLep87RfG2IadM"},
{"content":{"body":"gc tests :P","msgtype":"m.text"},"ts":1635251028223,"senderName":"devsnek","senderId":"@devsnek:matrix.org","id":"$ErfXiUH9NhYXspqF8RgjE5u9wDxezKecTEymF3J_Tdo"}
]