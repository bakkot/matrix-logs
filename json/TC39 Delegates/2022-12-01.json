[
{"content":{"body":"what is the last item scheduled for today?","msgtype":"m.text","org.matrix.msc1767.text":"what is the last item scheduled for today?"},"ts":1669885241942,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SKwtAnOQSvfQfJUj9Gqn2xLNAYCtqt6-sydJ1ALpCj0"},
{"content":{"body":"ShadowRealm","msgtype":"m.text","org.matrix.msc1767.text":"ShadowRealm"},"ts":1669885439268,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$y5E3gzpAyeax4v0RLeLoIy092hJzBEYV8xt47LUYylE"},
{"content":{"body":"but it may move slightly if time magically opens up","msgtype":"m.text","org.matrix.msc1767.text":"but it may move slightly if time magically opens up"},"ts":1669885460889,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$lqY46smShcXJOsaBLu2J2tVOmccO-MW82oBqN4ZDoLY"},
{"content":{"body":"i should like to be present for shadowrealms but tbqh i don't know if i'll be able to stay awake until then","msgtype":"m.text","org.matrix.msc1767.text":"i should like to be present for shadowrealms but tbqh i don't know if i'll be able to stay awake until then"},"ts":1669885519833,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zsli2mD5NASGhefcQ4Fm1yYC5-hWWp8CNQnv3_2HWt8"},
{"content":{"body":" * can someone let me in to the meet? Rob Palmer ryzokuken bterlson ","format":"org.matrix.custom.html","formatted_body":" * can someone let me in to the meet? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>","m.new_content":{"body":"can someone let me in to the meet? Rob Palmer ryzokuken bterlson ","format":"org.matrix.custom.html","formatted_body":"can someone let me in to the meet? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"can someone let me in to the meet? Rob Palmer ryzokuken bterlson ","mimetype":"text/plain"},{"body":"can someone let me in to the meet? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ywQV3Kc7PDcls_AwM02jI8PGl4qve8qDpk3LBapW3z4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * can someone let me in to the meet? Rob Palmer ryzokuken bterlson ","mimetype":"text/plain"},{"body":" * can someone let me in to the meet? <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>","mimetype":"text/html"}]},"ts":1669885723504,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5ayyhPmLXFt4m1PHM4X5lV1SsPo0kHeoZneQn8Q_3c8"},
{"content":{"body":"bakkot: can you add `amazing iterator` -> `async iterator`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: can you add <code>amazing iterator</code> -&gt; <code>async iterator</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: can you add `amazing iterator` -> `async iterator`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: can you add <code>amazing iterator</code> -&gt; <code>async iterator</code>?","mimetype":"text/html"}]},"ts":1669885782465,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$-s_idU7fjT8gbFEaA8uwgVL6Qi9aZQnwadCfNbmkpO8"},
{"content":{"body":"bterlson: advance queue?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: advance queue?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bterlson: advance queue?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: advance queue?","mimetype":"text/html"}]},"ts":1669886341217,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t57efosA3vYaR4FeLGIGGcSrwweXMpkTj3qsOUTMv8Y"},
{"content":{"body":"As Michael Saboff said, please add your name, abbreviation and organization to today's meeting notes.  Link here:  https://github.com/tc39/Reflector/issues/446","msgtype":"m.text","org.matrix.msc1767.text":"As Michael Saboff said, please add your name, abbreviation and organization to today's meeting notes.  Link here:  https://github.com/tc39/Reflector/issues/446"},"ts":1669886597533,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$FSbrElhu12M_2OliOwAxAA-mzU1kFELmb20U9ouZPxw"},
{"content":{"body":"Please could everyone avoid sharing direct URLs to our notes or meeting URLs in this publicly logged room.  These are all linked from the Reflector post so that they are kept private.","msgtype":"m.text","org.matrix.msc1767.text":"Please could everyone avoid sharing direct URLs to our notes or meeting URLs in this publicly logged room.  These are all linked from the Reflector post so that they are kept private."},"ts":1669886681614,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$SNOwQ_L3Ofe1_-XzEh_hB_tza_m_EmZNJ0F9XE60wyA"},
{"content":{"body":"already 15 min ahead!","msgtype":"m.text","org.matrix.msc1767.text":"already 15 min ahead!"},"ts":1669886915651,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$iNHOaVoaf_pYE-qmNOIIn4DBcwz7blIm-n_RcqAeD6E"},
{"content":{"body":"Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","format":"org.matrix.custom.html","formatted_body":"Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","mimetype":"text/plain"},{"body":"Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","mimetype":"text/html"}]},"ts":1669887467951,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$CCPP7y3jG4xAVl-N3D-qYmPOeZ38G6SMSx8EqsI5h20"},
{"content":{"body":" * Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","format":"org.matrix.custom.html","formatted_body":" * Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","m.new_content":{"body":"Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","format":"org.matrix.custom.html","formatted_body":"Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","mimetype":"text/plain"},{"body":"Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$CCPP7y3jG4xAVl-N3D-qYmPOeZ38G6SMSx8EqsI5h20","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Wouldn't this be also the first time, that we would have a ~_keyword_~operator being extended / giving a `.` ? `await` is not a normal function but sth. _magical_ like `delete`?","mimetype":"text/plain"},{"body":" * Wouldn't this be also the first time, that we would have a ~<em>keyword</em>~operator being extended / giving a <code>.</code> ? <code>await</code> is not a normal function but sth. <em>magical</em> like <code>delete</code>?","mimetype":"text/html"}]},"ts":1669887478172,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$lMVXBz38k3tq5QC-QTwOkE0UVddV70hAhyrc8cebxiA"},
{"content":{"body":"no, we have `new.target`","format":"org.matrix.custom.html","formatted_body":"no, we have <code>new.target</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"no, we have `new.target`","mimetype":"text/plain"},{"body":"no, we have <code>new.target</code>","mimetype":"text/html"}]},"ts":1669887494029,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P6MVumub0OoJ8EBTTqVhcTyYdo5hlxl9qP5dyjeD9SU"},
{"content":{"body":"and `super.whatever`","format":"org.matrix.custom.html","formatted_body":"and <code>super.whatever</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and `super.whatever`","mimetype":"text/plain"},{"body":"and <code>super.whatever</code>","mimetype":"text/html"}]},"ts":1669887496649,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0md2TFkVmgP9O6VpFwMO-cxzq0dRT5AYuSrVeI1WUCQ"},
{"content":{"body":"and `import.meta`","format":"org.matrix.custom.html","formatted_body":"and <code>import.meta</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and `import.meta`","mimetype":"text/plain"},{"body":"and <code>import.meta</code>","mimetype":"text/html"}]},"ts":1669887504849,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZniHmUqt6gaTlAvqDsJgJg_ej_RbXHQYwE6eYBoN-KU"},
{"content":{"body":"metaproperties are already A Thing","msgtype":"m.text","org.matrix.msc1767.text":"metaproperties are already A Thing"},"ts":1669887509365,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h-KNanArJdMFwWajEXGwMywrKy9595-QZlBUAnQD3Ak"},
{"content":{"body":"`super.whatever` is used like a magical function and `new.target` is a magical property. `import.meta` a magical global.","format":"org.matrix.custom.html","formatted_body":"<code>super.whatever</code> is used like a magical function and <code>new.target</code> is a magical property. <code>import.meta</code> a magical global.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`super.whatever` is used like a magical function and `new.target` is a magical property. `import.meta` a magical global.","mimetype":"text/plain"},{"body":"<code>super.whatever</code> is used like a magical function and <code>new.target</code> is a magical property. <code>import.meta</code> a magical global.","mimetype":"text/html"}]},"ts":1669887601298,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$QS_MWqtGJ7fqjlDgT0q5yRHqJteS3Q3zmcB7g4WTWkU"},
{"content":{"body":"speaking of research -- anyone wanna take over running that call?","msgtype":"m.text","org.matrix.msc1767.text":"speaking of research -- anyone wanna take over running that call?"},"ts":1669887621431,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$ihCMrRS8RQ0MK3e7r4L-mnUhAGOeclCE78Z2cw7oHNM"},
{"content":{"body":"I can relate to the idea of hiding Promises, but it would come at the cost of having - IMO - at the cost of another magical thing, that we do not have so far.","msgtype":"m.text","org.matrix.msc1767.text":"I can relate to the idea of hiding Promises, but it would come at the cost of having - IMO - at the cost of another magical thing, that we do not have so far."},"ts":1669887731843,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$ONMHelhbSq7SQuAIb7Wd1sr53j-0C-hRhbJ876DwvF4"},
{"content":{"body":" * `super.whatever` is used like a _magical_ **function** and `new.target` is a _magical_ **property**. `import.meta` a _magical_ **global**.","format":"org.matrix.custom.html","formatted_body":" * <code>super.whatever</code> is used like a <em>magical</em> <strong>function</strong> and <code>new.target</code> is a <em>magical</em> <strong>property</strong>. <code>import.meta</code> a <em>magical</em> <strong>global</strong>.","m.new_content":{"body":"`super.whatever` is used like a _magical_ **function** and `new.target` is a _magical_ **property**. `import.meta` a _magical_ **global**.","format":"org.matrix.custom.html","formatted_body":"<code>super.whatever</code> is used like a <em>magical</em> <strong>function</strong> and <code>new.target</code> is a <em>magical</em> <strong>property</strong>. <code>import.meta</code> a <em>magical</em> <strong>global</strong>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`super.whatever` is used like a _magical_ **function** and `new.target` is a _magical_ **property**. `import.meta` a _magical_ **global**.","mimetype":"text/plain"},{"body":"<code>super.whatever</code> is used like a <em>magical</em> <strong>function</strong> and <code>new.target</code> is a <em>magical</em> <strong>property</strong>. <code>import.meta</code> a <em>magical</em> <strong>global</strong>.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$QS_MWqtGJ7fqjlDgT0q5yRHqJteS3Q3zmcB7g4WTWkU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * `super.whatever` is used like a _magical_ **function** and `new.target` is a _magical_ **property**. `import.meta` a _magical_ **global**.","mimetype":"text/plain"},{"body":" * <code>super.whatever</code> is used like a <em>magical</em> <strong>function</strong> and <code>new.target</code> is a <em>magical</em> <strong>property</strong>. <code>import.meta</code> a <em>magical</em> <strong>global</strong>.","mimetype":"text/html"}]},"ts":1669887817048,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$ChOcVNRjqrE3BJ0ixnu6oJlwvg0wkM1V_EJKqM2q-VA"},
{"content":{"body":"it could be an `awaitAll` keyword and it'd be the same","format":"org.matrix.custom.html","formatted_body":"it could be an <code>awaitAll</code> keyword and it'd be the same","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it could be an `awaitAll` keyword and it'd be the same","mimetype":"text/plain"},{"body":"it could be an <code>awaitAll</code> keyword and it'd be the same","mimetype":"text/html"}]},"ts":1669887880090,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OEYzACDEhhpjVWbBsAXYbgeC23glepN5LLqcCsDvyg8"},
{"content":{"body":"we have issues with sound in the room?","msgtype":"m.text","org.matrix.msc1767.text":"we have issues with sound in the room?"},"ts":1669887884490,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$LiJuDyg7rRjgH07ey473nZi3sCZxXCs1YcmtnLKrDDA"},
{"content":{"body":"`await.all` isn't magical, it's just a way to nest keywords under keyords in this case","format":"org.matrix.custom.html","formatted_body":"<code>await.all</code> isn't magical, it's just a way to nest keywords under keyords in this case","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`await.all` isn't magical, it's just a way to nest keywords under keyords in this case","mimetype":"text/plain"},{"body":"<code>await.all</code> isn't magical, it's just a way to nest keywords under keyords in this case","mimetype":"text/html"}]},"ts":1669887898460,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Gwfe0Td5hbFb-ueJ5JooVayV7jPah8xDa5718RXWNmo"},
{"content":{"body":"`await.all [a, b, c]` just doesn't seem that different from `await Promise.all([a, b, c])` to me","format":"org.matrix.custom.html","formatted_body":"<code>await.all [a, b, c]</code> just doesn't seem that different from <code>await Promise.all([a, b, c])</code> to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`await.all [a, b, c]` just doesn't seem that different from `await Promise.all([a, b, c])` to me","mimetype":"text/plain"},{"body":"<code>await.all [a, b, c]</code> just doesn't seem that different from <code>await Promise.all([a, b, c])</code> to me","mimetype":"text/html"}]},"ts":1669887898678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_QbnqFsiMDtvR0DXT0KzkxdANm3viN0S87U2sMmmaOo"},
{"content":{"body":"async/await isn't about hiding promises. It's about taking continuation passing style code and allowing you to write it as linear code so that you can maintain the benefit of existing control flow constructs like `continue`/`break`/`return`/`yield`.","format":"org.matrix.custom.html","formatted_body":"async/await isn't about hiding promises. It's about taking continuation passing style code and allowing you to write it as linear code so that you can maintain the benefit of existing control flow constructs like <code>continue</code>/<code>break</code>/<code>return</code>/<code>yield</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"async/await isn't about hiding promises. It's about taking continuation passing style code and allowing you to write it as linear code so that you can maintain the benefit of existing control flow constructs like `continue`/`break`/`return`/`yield`.","mimetype":"text/plain"},{"body":"async/await isn't about hiding promises. It's about taking continuation passing style code and allowing you to write it as linear code so that you can maintain the benefit of existing control flow constructs like <code>continue</code>/<code>break</code>/<code>return</code>/<code>yield</code>.","mimetype":"text/html"}]},"ts":1669887900480,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N-aAfAdkX6JIM5PrGj8meMt6FSckS9iuL7Dnk1pQjvE"},
{"content":{"body":"what is being highlighted right now is the issue of breaking consistency in a language -- new developers will have a hard time keeping two things in mind","msgtype":"m.text","org.matrix.msc1767.text":"what is being highlighted right now is the issue of breaking consistency in a language -- new developers will have a hard time keeping two things in mind"},"ts":1669887920890,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$J1FXXQieKU1PDrZLHwRybmZcsdkwHlFZUQd0Kxw4T1E"},
{"content":{"body":"> <@bakkot:matrix.org> `await.all [a, b, c]` just doesn't seem that different from `await Promise.all([a, b, c])` to me\n\nsure, i do the latter all the time, but in my experience devs in fact consider those quite different, and avoid the latter in favor of `await a; await b; await c` *constantly*","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_QbnqFsiMDtvR0DXT0KzkxdANm3viN0S87U2sMmmaOo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>await.all [a, b, c]</code> just doesn't seem that different from <code>await Promise.all([a, b, c])</code> to me</blockquote></mx-reply>sure, i do the latter all the time, but in my experience devs in fact consider those quite different, and avoid the latter in favor of <code>await a; await b; await c</code> <em>constantly</em>","m.relates_to":{"m.in_reply_to":{"event_id":"$_QbnqFsiMDtvR0DXT0KzkxdANm3viN0S87U2sMmmaOo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> `await.all [a, b, c]` just doesn't seem that different from `await Promise.all([a, b, c])` to me\n\nsure, i do the latter all the time, but in my experience devs in fact consider those quite different, and avoid the latter in favor of `await a; await b; await c` *constantly*","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_QbnqFsiMDtvR0DXT0KzkxdANm3viN0S87U2sMmmaOo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>await.all [a, b, c]</code> just doesn't seem that different from <code>await Promise.all([a, b, c])</code> to me</blockquote></mx-reply>sure, i do the latter all the time, but in my experience devs in fact consider those quite different, and avoid the latter in favor of <code>await a; await b; await c</code> <em>constantly</em>","mimetype":"text/html"}]},"ts":1669887930278,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kPI4LV90bAIGVyYHLd1ABAxz07VvcTaW9LFA8vBrNQ4"},
{"content":{"body":"I would question teaching async/await before promises for this reason","msgtype":"m.text","org.matrix.msc1767.text":"I would question teaching async/await before promises for this reason"},"ts":1669887931280,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$TTbpwvLUc8cwxPtpx3tR-DgVNfxjIQmRGRakpPFT_60"},
{"content":{"body":"i don't think the solution here is syntax","msgtype":"m.text","org.matrix.msc1767.text":"i don't think the solution here is syntax"},"ts":1669887945867,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$dkK4ZojjbauNReuAi6x4IJheIdXmDv1P2KUC7cy50LA"},
{"content":{"body":"In other words, is there so far any `await`-like thing with a `.`?","format":"org.matrix.custom.html","formatted_body":"In other words, is there so far any <code>await</code>-like thing with a <code>.</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In other words, is there so far any `await`-like thing with a `.`?","mimetype":"text/plain"},{"body":"In other words, is there so far any <code>await</code>-like thing with a <code>.</code>?","mimetype":"text/html"}]},"ts":1669887960430,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$YtpbcIs7SdEkMQNiiHEeFrN-HB7zvEMIfpUCUCwXhDA"},
{"content":{"body":"Christian Ulbrich: no, in that respect it'd be something new, but almost every new syntax feature has that :-)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: no, in that respect it'd be something new, but almost every new syntax feature has that :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Christian Ulbrich: no, in that respect it'd be something new, but almost every new syntax feature has that :-)","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: no, in that respect it'd be something new, but almost every new syntax feature has that :-)","mimetype":"text/html"}]},"ts":1669887978765,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IiZjFgJbIVp-lpX-oylhrUt6IzJ2Hlu2Nj0ZVDoN8YA"},
{"content":{"body":"yulia: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.","mimetype":"text/html"}]},"ts":1669887990645,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W4uxag6ifnX-x1R6BlKjwzLvUeUb436mro5wV9L7pwA"},
{"content":{"body":"DevMo has a great example of how to do promises in sequence via Array.prototype.reduce","msgtype":"m.text","org.matrix.msc1767.text":"DevMo has a great example of how to do promises in sequence via Array.prototype.reduce"},"ts":1669887993799,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$IcJeapBsP0r3Ymv55JkhsfViVvX8KEQGoFeb4rX2lr4"},
{"content":{"body":"ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?","mimetype":"text/html"}]},"ts":1669887996953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI"},
{"content":{"body":"> <@ljharb:matrix.org> yulia: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.\n\nthe ergonomics issue is relying on learners to make its poinit","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$W4uxag6ifnX-x1R6BlKjwzLvUeUb436mro5wV9L7pwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.</blockquote></mx-reply>the ergonomics issue is relying on learners to make its poinit","m.relates_to":{"m.in_reply_to":{"event_id":"$W4uxag6ifnX-x1R6BlKjwzLvUeUb436mro5wV9L7pwA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> yulia: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.\n\nthe ergonomics issue is relying on learners to make its poinit","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$W4uxag6ifnX-x1R6BlKjwzLvUeUb436mro5wV9L7pwA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: i totally agree this doesn't fix the education problem. to me it's fixing an ergonomics problem.</blockquote></mx-reply>the ergonomics issue is relying on learners to make its poinit","mimetype":"text/html"}]},"ts":1669888006696,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$uYCGWswMebrEnY0p93AHesVcAPo27R7qQoG8lQnWCRo"},
{"content":{"body":"\"wanting to avoid `Promise`\" seems like a problem we should not be trying to solve for them","format":"org.matrix.custom.html","formatted_body":"&quot;wanting to avoid <code>Promise</code>&quot; seems like a problem we should not be trying to solve for them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"\"wanting to avoid `Promise`\" seems like a problem we should not be trying to solve for them","mimetype":"text/plain"},{"body":"&quot;wanting to avoid <code>Promise</code>&quot; seems like a problem we should not be trying to solve for them","mimetype":"text/html"}]},"ts":1669888008438,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MNONUz20_awS_NNFAtnHW_puLm4UN21nybcvD74GuR8"},
{"content":{"body":"you just did so as well","msgtype":"m.text","org.matrix.msc1767.text":"you just did so as well"},"ts":1669888009924,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Uo-TMgMDnfiLi5WgWX1NIOoNRttHRLfqyCc60EoOjGQ"},
{"content":{"body":"I imagine `for await all` would take a lot of pressure off of `await.all`.","format":"org.matrix.custom.html","formatted_body":"I imagine <code>for await all</code> would take a lot of pressure off of <code>await.all</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I imagine `for await all` would take a lot of pressure off of `await.all`.","mimetype":"text/plain"},{"body":"I imagine <code>for await all</code> would take a lot of pressure off of <code>await.all</code>.","mimetype":"text/html"}]},"ts":1669888015423,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SyzItsKPNLNV4AE5P_pFwVOOa4bkir6_NJlWnnZCtAM"},
{"content":{"body":"i don't agree that this is a solution","msgtype":"m.text","org.matrix.msc1767.text":"i don't agree that this is a solution"},"ts":1669888017868,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$i7eJqJSy25zEnu8yq9OInncYIQkVI8wh3ynCHVvMsI0"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?\n\nmy experience is that most of the time they don't need to be serial, and that they didn't want to deal with the ceremony of Promise.all","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?</blockquote></mx-reply>my experience is that most of the time they don't need to be serial, and that they didn't want to deal with the ceremony of Promise.all","m.relates_to":{"m.in_reply_to":{"event_id":"$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?\n\nmy experience is that most of the time they don't need to be serial, and that they didn't want to deal with the ceremony of Promise.all","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?</blockquote></mx-reply>my experience is that most of the time they don't need to be serial, and that they didn't want to deal with the ceremony of Promise.all","mimetype":"text/html"}]},"ts":1669888022745,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O1ckWwczuMwCAsdP_NY6BWZ0BlC0T-E6AVqYLxOTPvw"},
{"content":{"body":"Motivate a change to \"unconfuse\" developers from Promises by adding a totally new syntax, should be well-thought of.","msgtype":"m.text","org.matrix.msc1767.text":"Motivate a change to \"unconfuse\" developers from Promises by adding a totally new syntax, should be well-thought of."},"ts":1669888032974,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$ed7PtAbyieRMiKcxYapK0bmYO7huU3bfZE_--5uyuG8"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?\n\nthis rings true to me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?</blockquote></mx-reply>this rings true to me","m.relates_to":{"m.in_reply_to":{"event_id":"$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> ljharb I definitely see people do `await a; await b; await c` over `await Promise.all` but I have generally assumed it was because of thinking serially rather than because of wanting to avoid `Promise`?\n\nthis rings true to me","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$54mO1i_0z6KMrmTF-c0_1UbKFQ_4-zm7zuIpv5KK8yI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> I definitely see people do <code>await a; await b; await c</code> over <code>await Promise.all</code> but I have generally assumed it was because of thinking serially rather than because of wanting to avoid <code>Promise</code>?</blockquote></mx-reply>this rings true to me","mimetype":"text/html"}]},"ts":1669888033824,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FuuGG3abA7HI77BqofG9JjqkvfYFMa9DUW6T2RcjBTc"},
{"content":{"body":"i reckon beginners are not at a place that _would_ reach for parallel combinators but for a more discoverable way to do so, like syntax, or something","format":"org.matrix.custom.html","formatted_body":"i reckon beginners are not at a place that <em>would</em> reach for parallel combinators but for a more discoverable way to do so, like syntax, or something","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i reckon beginners are not at a place that _would_ reach for parallel combinators but for a more discoverable way to do so, like syntax, or something","mimetype":"text/plain"},{"body":"i reckon beginners are not at a place that <em>would</em> reach for parallel combinators but for a more discoverable way to do so, like syntax, or something","mimetype":"text/html"}]},"ts":1669888080795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$52HxCpxoxX2v36rnGseo_Ytbl5PEkN6msaSc2Ha_I5w"},
{"content":{"body":"they're just not at a place to reason about things in parallel","msgtype":"m.text","org.matrix.msc1767.text":"they're just not at a place to reason about things in parallel"},"ts":1669888088880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oXv0gCTL5P6GdBvBtjnHRexYRjnWQrHsrTZSiUjE9Zk"},
{"content":{"body":"Concerning the hiding motivation, it actually is a problem that have all the time with junior developers, they already do not know, that they are using promises...","msgtype":"m.text","org.matrix.msc1767.text":"Concerning the hiding motivation, it actually is a problem that have all the time with junior developers, they already do not know, that they are using promises..."},"ts":1669888101279,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$oiR9Xci5F0Y65r_KtvuAyEYeZgixBeNAfk21yVC65nY"},
{"content":{"body":"I agree with Yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","format":"org.matrix.custom.html","formatted_body":"I agree with Yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree with Yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","mimetype":"text/plain"},{"body":"I agree with Yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","mimetype":"text/html"}]},"ts":1669888129535,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JLgrmkklCNjyiMI3OzJNry31xRNNrNCvjUU8vRIyWUk"},
{"content":{"body":"if the main problem is await all, should we only add `await.all` without `await.race` and others? Or even just introduce a special syntax (eg. `await* promises`)?","format":"org.matrix.custom.html","formatted_body":"if the main problem is await all, should we only add <code>await.all</code> without <code>await.race</code> and others? Or even just introduce a special syntax (eg. <code>await* promises</code>)?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if the main problem is await all, should we only add `await.all` without `await.race` and others? Or even just introduce a special syntax (eg. `await* promises`)?","mimetype":"text/plain"},{"body":"if the main problem is await all, should we only add <code>await.all</code> without <code>await.race</code> and others? Or even just introduce a special syntax (eg. <code>await* promises</code>)?","mimetype":"text/html"}]},"ts":1669888151153,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Zffun1aqA2ZsQQb_tYl9mZOBT0jrlQoBpV2wMj8Brus"},
{"content":{"body":"first we must teach one of the First Mistakes -- the existence of the microtask queue","msgtype":"m.text","org.matrix.msc1767.text":"first we must teach one of the First Mistakes -- the existence of the microtask queue"},"ts":1669888155358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nyaruZ-MsiAtaKmdh87W5hDi2maEUMV2g0y6O1_aQPA"},
{"content":{"body":"shu: The whole Playwright API is heavily _async_...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: The whole Playwright API is heavily <em>async</em>...","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: The whole Playwright API is heavily _async_...","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: The whole Playwright API is heavily <em>async</em>...","mimetype":"text/html"}]},"ts":1669888162678,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$XBDbYrU9DzVcqICcN7T8F-HDgDPPQ9S2A2ZlMIXQZnc"},
{"content":{"body":"Christian Ulbrich: sorry what's the context of that comment? i don't know what that means","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: sorry what's the context of that comment? i don't know what that means","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Christian Ulbrich: sorry what's the context of that comment? i don't know what that means","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: sorry what's the context of that comment? i don't know what that means","mimetype":"text/html"}]},"ts":1669888188922,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DSMkBhlwcX5T8gRj2YN1kYKYCW2Q8mI_AEwFwYt2AVk"},
{"content":{"body":" * I agree with @yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","format":"org.matrix.custom.html","formatted_body":" * I agree with @yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","m.new_content":{"body":"I agree with @yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","format":"org.matrix.custom.html","formatted_body":"I agree with @yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree with @yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","mimetype":"text/plain"},{"body":"I agree with @yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$JLgrmkklCNjyiMI3OzJNry31xRNNrNCvjUU8vRIyWUk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I agree with @yulia that promises should be taught before async/await. I agree with rbuckton that the latter is not to hide the former.","mimetype":"text/plain"},{"body":" * I agree with @yulia that promises should be taught before async/await. I agree with <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> that the latter is not to hide the former.","mimetype":"text/html"}]},"ts":1669888207352,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$j2e00usAwr5h8y5zV35a7VWRRWS58VP-3DxQMQxq6Qw"},
{"content":{"body":"> <@haxjs:matrix.org> if the main problem is await all, should we only add `await.all` without `await.race` and others? Or even just introduce a special syntax (eg. `await* promises`)?\n\nthat would still be better than the status quo, but i think that'd be an unfortunate inconsistency","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Zffun1aqA2ZsQQb_tYl9mZOBT0jrlQoBpV2wMj8Brus?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>if the main problem is await all, should we only add <code>await.all</code> without <code>await.race</code> and others? Or even just introduce a special syntax (eg. <code>await* promises</code>)?</blockquote></mx-reply>that would still be better than the status quo, but i think that'd be an unfortunate inconsistency","m.relates_to":{"m.in_reply_to":{"event_id":"$Zffun1aqA2ZsQQb_tYl9mZOBT0jrlQoBpV2wMj8Brus"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> if the main problem is await all, should we only add `await.all` without `await.race` and others? Or even just introduce a special syntax (eg. `await* promises`)?\n\nthat would still be better than the status quo, but i think that'd be an unfortunate inconsistency","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Zffun1aqA2ZsQQb_tYl9mZOBT0jrlQoBpV2wMj8Brus?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>if the main problem is await all, should we only add <code>await.all</code> without <code>await.race</code> and others? Or even just introduce a special syntax (eg. <code>await* promises</code>)?</blockquote></mx-reply>that would still be better than the status quo, but i think that'd be an unfortunate inconsistency","mimetype":"text/html"}]},"ts":1669888266460,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zLfw7Db3hQbWhMsFtolcxp7wNvOaGPvlOGR1pCpkLfk"},
{"content":{"body":"\"do nothing\" is always an option.","msgtype":"m.text","org.matrix.msc1767.text":"\"do nothing\" is always an option."},"ts":1669888303848,"senderName":"Alex Vincent","senderId":"@alex.vincent:matrix.org","id":"$xovkRj5u_vJPc1z7AXLSltC5DjQ9vuRqeWvD0D735ck"},
{"content":{"body":"ljharb: if syntax, there is no inconsistency?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: if syntax, there is no inconsistency?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: if syntax, there is no inconsistency?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: if syntax, there is no inconsistency?","mimetype":"text/html"}]},"ts":1669888306985,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$3YqLwXyGcpa6EZHBy6oB38QZ8GxLhPuWO6WTsGacCC4"},
{"content":{"body":"the inconsistency would be 3 of the promise combinators lacking syntax, but 1 having it","msgtype":"m.text","org.matrix.msc1767.text":"the inconsistency would be 3 of the promise combinators lacking syntax, but 1 having it"},"ts":1669888357597,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7xvxBgq8OJYSI8Qtf38QlGw63eTdKmqpBSktiegneUY"},
{"content":{"body":"I mean, if 80% usage of combinators is just Promsie.all, is it ok to only add syntax for it?","msgtype":"m.text","org.matrix.msc1767.text":"I mean, if 80% usage of combinators is just Promsie.all, is it ok to only add syntax for it?"},"ts":1669888521091,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$k2-Qh3VURmoy059zSqAp2pcsYy7gx7Ns9fkrpJ-oRX8"},
{"content":{"body":"should we only add a subset of + - * /, because some of them get more usage than the others?","msgtype":"m.text","org.matrix.msc1767.text":"should we only add a subset of + - * /, because some of them get more usage than the others?"},"ts":1669888695628,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AGEq7R29ZTG0dvmh2p62lCh1jT4yLUgaKVR476WPNmQ"},
{"content":{"body":"i remain adamant that consistency is important for learnability of a language, 20% is a pretty big chunk, but i think we are  just pulling numbers from the air right now. ","msgtype":"m.text","org.matrix.msc1767.text":"i remain adamant that consistency is important for learnability of a language, 20% is a pretty big chunk, but i think we are  just pulling numbers from the air right now. "},"ts":1669888725317,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$v3_HrjlZTBUokfgywxuluXuRNwnXkD4-FB_eLx_8pzg"},
{"content":{"body":"> <@yulia:mozilla.org> speaking of research -- anyone wanna take over running that call?\n\nSad to see you cannot attend ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ihCMrRS8RQ0MK3e7r4L-mnUhAGOeclCE78Z2cw7oHNM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br />speaking of research -- anyone wanna take over running that call?</blockquote></mx-reply>Sad to see you cannot attend","m.relates_to":{"m.in_reply_to":{"event_id":"$ihCMrRS8RQ0MK3e7r4L-mnUhAGOeclCE78Z2cw7oHNM"}},"msgtype":"m.text"},"ts":1669888802228,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$qdHfhLlsjvdOD5mpmmC11ov-EZSUN-54_HqUrqbdJq0"}
]