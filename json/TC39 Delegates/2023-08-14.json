[
{"content":{"body":"that's workable but gross, and it shouldn't be called concat in that case","msgtype":"m.text"},"ts":1691992576326,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dAsEiisTeeVqBNERmdUbY5rrhS0zdy9EI-FcgYVTNA8"},
{"content":{"body":"concat is the only name for this operation in every single language and every library","msgtype":"m.text"},"ts":1691996941727,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aUdkozBDWnlnZtmEyIlV3HaWmUUUg2rzA59TIhtwID4"},
{"content":{"body":"This is called [chain](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.chain) in Rust, and is combined with [once](https://doc.rust-lang.org/stable/std/iter/fn.once.html) to create an iterator of a single value","format":"org.matrix.custom.html","formatted_body":"This is called <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.chain\">chain</a> in Rust, and is combined with <a href=\"https://doc.rust-lang.org/stable/std/iter/fn.once.html\">once</a> to create an iterator of a single value","msgtype":"m.text"},"ts":1692021622013,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$a8iITo4yjgUoMhif0IXEixX53DPRPHmDmXVV01cVs4M"},
{"content":{"body":"ljharb: You're in luck! I was already planning on starting work on this proposal today.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: You're in luck! I was already planning on starting work on this proposal today.","msgtype":"m.text"},"ts":1692024746305,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0bHgZ-mbPhGTQqC6t2Qa_eGdZY_NTPlL8hZxCLbJPwY"},
{"content":{"body":"> <@bakkot:matrix.org> concat is the only name for this operation in every single language and every library\n\nbut concat in this language accepts a single thing or a list of things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24aUdkozBDWnlnZtmEyIlV3HaWmUUUg2rzA59TIhtwID4\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>concat is the only name for this operation in every single language and every library</blockquote></mx-reply>but concat in this language accepts a single thing or a list of things","m.relates_to":{"m.in_reply_to":{"event_id":"$aUdkozBDWnlnZtmEyIlV3HaWmUUUg2rzA59TIhtwID4"}},"msgtype":"m.text"},"ts":1692024796810,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vV-DF8j_wor1nh6NPQWUSuv_riYOR62CAo9kZ3cLMFM"},
{"content":{"body":"I am very much okay with the meaning of `concat` depending on the kind of thing it's applied to","format":"org.matrix.custom.html","formatted_body":"I am very much okay with the meaning of <code>concat</code> depending on the kind of thing it's applied to","msgtype":"m.text"},"ts":1692024956193,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$e-MqJCInK0Aj0LXy4bSrIR8hnNxMtYRmJMo32luyctY"},
{"content":{"body":"regardless, though, it's probably more important to match one of `Iterator.from` or `Iterator.prototype.flatMap`, which both reject primitives (though differ in their handling of strings)","format":"org.matrix.custom.html","formatted_body":"regardless, though, it's probably more important to match one of <code>Iterator.from</code> or <code>Iterator.prototype.flatMap</code>, which both reject primitives (though differ in their handling of strings)","msgtype":"m.text"},"ts":1692025099692,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mXEegLCskMakJ8JsfO_PR5zFQ49e4YHEmjuOE00rRIY"},
{"content":{"body":"Yeah, so long as there's an easy way to lift a primitive into an iterable (via `once()` or something), then having `concat()` only accept iterables is fine with me. ","format":"org.matrix.custom.html","formatted_body":"Yeah, so long as there's an easy way to lift a primitive into an iterable (via <code>once()</code> or something), then having <code>concat()</code> only accept iterables is fine with me.","msgtype":"m.text"},"ts":1692035577581,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$I40sglbfStj89t0HNjd1f9Y76OfhlAM43FvyBiGq3jQ"},
{"content":{"body":"It'll still probably commit the cardinal sin of Treating Strings Like Iterables tho, unless we explicitly guard against that.","msgtype":"m.text"},"ts":1692035597968,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JGbGFFaUukbimuq7jM0vzpVB3C3E9nG4SGLMhTXDQBI"},
{"content":{"body":"if it requires being an array than i'll probably just always `concat([].concat(item))` which would be annoying","format":"org.matrix.custom.html","formatted_body":"if it requires being an array than i'll probably just always <code>concat([].concat(item))</code> which would be annoying","msgtype":"m.text"},"ts":1692035748091,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T_xX-MyvYmWwXXjcPrwKj3Sn4D4ApgOGdX768juh3zg"},
{"content":{"body":"You can lift `x` into an iterable by doing `[x]`","format":"org.matrix.custom.html","formatted_body":"You can lift <code>x</code> into an iterable by doing <code>[x]</code>","msgtype":"m.text"},"ts":1692035764002,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zaQY3GhyLz6ItTXzy7ytTLzcVcwTgpBzrC15muHPRpE"},
{"content":{"body":"> <@tabatkins:matrix.org> It'll still probably commit the cardinal sin of Treating Strings Like Iterables tho, unless we explicitly guard against that.\n\niterator flatmap explicitly guards against that, so concat would too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JGbGFFaUukbimuq7jM0vzpVB3C3E9nG4SGLMhTXDQBI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>It&#39;ll still probably commit the cardinal sin of Treating Strings Like Iterables tho, unless we explicitly guard against that.</blockquote></mx-reply>iterator flatmap explicitly guards against that, so concat would too","m.relates_to":{"m.in_reply_to":{"event_id":"$JGbGFFaUukbimuq7jM0vzpVB3C3E9nG4SGLMhTXDQBI"}},"msgtype":"m.text"},"ts":1692037123620,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OujeYV_96EDku1gm0N72OxYIJTBcJ08cJba2gwBo478"},
{"content":{"body":"Excellent.","msgtype":"m.text"},"ts":1692037141295,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$aSASGXdCZtcH1QOyQUz9XNb2HmBoNrmoc3PypTTf5CM"},
{"content":{"body":"> <@ljharb:matrix.org> if it requires being an array than i'll probably just always `concat([].concat(item))` which would be annoying\n\nyou'd only do that if you don't know whether or not `item` is an array, surely? which... I have a hard time imagining code where that comes up very much?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$T_xX-MyvYmWwXXjcPrwKj3Sn4D4ApgOGdX768juh3zg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if it requires being an array than i'll probably just always <code>concat([].concat(item))</code> which would be annoying</blockquote></mx-reply>you'd only do that if you don't know whether or not <code>item</code> is an array, surely? which... I have a hard time imagining code where that comes up very much?","m.relates_to":{"m.in_reply_to":{"event_id":"$T_xX-MyvYmWwXXjcPrwKj3Sn4D4ApgOGdX768juh3zg"}},"msgtype":"m.text"},"ts":1692037216424,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wfK0JINnNj8sJC4MI6PtKxFFdMiwonC6mjoKEDri3lw"},
{"content":{"body":"yeah there's very, very little non-trivial stuff you can do with a value that could be an X *or* an array of Xs that doesn't require first establishing which it is. `Array#concat` allowing it is a weird historical quirk, most langs don't have that.","format":"org.matrix.custom.html","formatted_body":"yeah there's very, very little non-trivial stuff you can do with a value that could be an X <em>or</em> an array of Xs that doesn't require first establishing which it is. <code>Array#concat</code> allowing it is a weird historical quirk, most langs don't have that.","msgtype":"m.text"},"ts":1692037314446,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$09Riy_1wmBlPISR7mba1ML73qA6p-K-eS778TMio2QQ"},
{"content":{"body":"> <@bakkot:matrix.org> iterator flatmap explicitly guards against that, so concat would too\n\nnot necessarily; if we just make Iterator.from variadic, it will iterate strings","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OujeYV_96EDku1gm0N72OxYIJTBcJ08cJba2gwBo478?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>iterator flatmap explicitly guards against that, so concat would too</blockquote></mx-reply>not necessarily; if we just make Iterator.from variadic, it will iterate strings","m.relates_to":{"m.in_reply_to":{"event_id":"$OujeYV_96EDku1gm0N72OxYIJTBcJ08cJba2gwBo478"}},"msgtype":"m.text"},"ts":1692038900587,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$wjW9A8ZicCiO8ERqA4EUWzScvQat31tO6xhE6aroJ9o"},
{"content":{"body":"that sounds like a good reason to do `concat` instead of making `Iterator.from` variadic","format":"org.matrix.custom.html","formatted_body":"that sounds like a good reason to do <code>concat</code> instead of making <code>Iterator.from</code> variadic","msgtype":"m.text"},"ts":1692038921124,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NMrNRmjCIie7eg9G8GUF643ZitiVLcC2cRYZIlPwvFo"},
{"content":{"body":"Why would variadicity change this behavior.","msgtype":"m.text"},"ts":1692038935667,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rz9QlmnOmK64vlItWMVyYVNM2-08w0X4i2Zfb7HkAvk"},
{"content":{"body":"TabAtkins: it changes nothing, that's already the behaviour of iterator.from on a single argument","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: it changes nothing, that's already the behaviour of iterator.from on a single argument","msgtype":"m.text"},"ts":1692038953813,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZTnKEuhjCfvPLKKa2MtAMab497leFZvqbQKVKcWYY9A"},
{"content":{"body":"`Iterator.from` does accept strings","format":"org.matrix.custom.html","formatted_body":"<code>Iterator.from</code> does accept strings","msgtype":"m.text"},"ts":1692038958741,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KyJhh1CfcHRQcyVkkSA-4nI28O_agBvhTUxLF2IvTlo"},
{"content":{"body":"it's only specifically `flatMap` which doesn't","format":"org.matrix.custom.html","formatted_body":"it's only specifically <code>flatMap</code> which doesn't","msgtype":"m.text"},"ts":1692038972059,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nLuBZeWzVBVt_Fx8jNaaFhWQ8lLp2-ilqwdmpLFWHUQ"},
{"content":{"body":"Ah, ok, so the Sin has already been committed.","msgtype":"m.text"},"ts":1692038972253,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WYyapb15iQCxRXi9fhUvmMAHLl3tf4ryNkD0QxzqXjo"},
{"content":{"body":"Damn.","msgtype":"m.text"},"ts":1692038973533,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$h9GpSoixHOsCs8jUOYy_2hfTBieM-jLSLBznqu13I4c"},
{"content":{"body":"Iterator.from and Iterator.prototype.flatMap are different in this respect","msgtype":"m.text"},"ts":1692038976813,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$YqnJKZ00jJnNFpu_7TSwDO-k2UXBSupcotouO45HBiA"},
{"content":{"body":"(`Iterator.from` being an explicit coercion it makes a lot more sense there)","format":"org.matrix.custom.html","formatted_body":"(<code>Iterator.from</code> being an explicit coercion it makes a lot more sense there)","msgtype":"m.text"},"ts":1692038989103,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YUeKdvI2TQzFWtTWMR2fIE6_RBVhs8SQZ7UsZLwGhYo"},
{"content":{"body":"wish I'd recognized that and complained loudly about it earlier","msgtype":"m.text"},"ts":1692038994094,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$f4oVoWwieX4fuL_yD9lgZhGjv0gWSbsGpKBjwaFT1LQ"},
{"content":{"body":"but I think it's the right call for Iterator.from; whether we like it or not, strings *are* iterable","format":"org.matrix.custom.html","formatted_body":"but I think it's the right call for Iterator.from; whether we like it or not, strings <em>are</em> iterable","msgtype":"m.text"},"ts":1692039024349,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$loPM-Ve8LuX7JIEOCQqEw3SBzp6P-vwzaxNvLzg1ahs"},
{"content":{"body":"Array.from shouldn't reject strings either","msgtype":"m.text"},"ts":1692039051725,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HvhG1mdWyhe-93U8LtQLG2OVKrzD-gcOLBAp0dFhKRU"},
{"content":{"body":"it's important not to _implicitly_ treat strings as iterable, but explicitly is fine I think","format":"org.matrix.custom.html","formatted_body":"it's important not to <em>implicitly</em> treat strings as iterable, but explicitly is fine I think","msgtype":"m.text"},"ts":1692039059693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xM-CnsBqRQTcc-LTD8u6l7dSZb6pQasumEui8nwJwVk"},
{"content":{"body":"or, well","msgtype":"m.text"},"ts":1692039064385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7TJgzBBhWdNSNXYiEQVQBDdoXd4LexTIDmK1KCJuCeM"},
{"content":{"body":"given that they are iterable","msgtype":"m.text"},"ts":1692039066527,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uridrleXl-ioYTuXGZmfXeJv0apM1zpYH5uqtT9sdyQ"},
{"content":{"body":"Since `[...\"foo\"]` works, I *guess*, ugh","format":"org.matrix.custom.html","formatted_body":"Since <code>[...\"foo\"]</code> works, I <em>guess</em>, ugh","msgtype":"m.text"},"ts":1692039068776,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$HlhgtzzxUrRVE-VETrn_B57lUt_PRjjFeW-EVtUsRcg"},
{"content":{"body":"if they weren't, yes","msgtype":"m.text"},"ts":1692039072805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-NImnUG0W-n-Uckgjm5tr8iI-jAWR5XJGfbD3d0v-Pk"},
{"content":{"body":"exactly","msgtype":"m.text"},"ts":1692039079454,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ywqUe3dNxoyNMkXriJo_zP1BCW6Tni9SV7CTdfrJRLE"},
{"content":{"body":"> <@bakkot:matrix.org> you'd only do that if you don't know whether or not `item` is an array, surely? which... I have a hard time imagining code where that comes up very much?\n\nit comes up for me all the time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24wfK0JINnNj8sJC4MI6PtKxFFdMiwonC6mjoKEDri3lw\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you'd only do that if you don't know whether or not <code>item</code> is an array, surely? which... I have a hard time imagining code where that comes up very much?</blockquote></mx-reply>it comes up for me all the time","m.relates_to":{"m.in_reply_to":{"event_id":"$wfK0JINnNj8sJC4MI6PtKxFFdMiwonC6mjoKEDri3lw"}},"msgtype":"m.text"},"ts":1692043715267,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YuK1sFg-pAAkzG7aDQYKiK4N2oI0X7PIVIrrp9WSnx0"},
{"content":{"body":"and yes the original Sin is that strings are iterable","msgtype":"m.text"},"ts":1692043764190,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$akqIm3Rw1pb-pp9fK_blxQ4mw-KbrOx660tO7H32Q0Y"},
{"content":{"body":"> <@bakkot:matrix.org> it's important not to _implicitly_ treat strings as iterable, but explicitly is fine I think\n\n(Note that I still feel quite strongly that this is also a (lesser) sin; there is no Correct way to iterate a string and pretending there is just misleads authors. Giving strings well-named iterator-returning methods is the correct thing to do. But that ship sailed long ago for JS.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xM-CnsBqRQTcc-LTD8u6l7dSZb6pQasumEui8nwJwVk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it's important not to <em>implicitly</em> treat strings as iterable, but explicitly is fine I think</blockquote></mx-reply>(Note that I still feel quite strongly that this is also a (lesser) sin; there is no Correct way to iterate a string and pretending there is just misleads authors. Giving strings well-named iterator-returning methods is the correct thing to do. But that ship sailed long ago for JS.)","m.relates_to":{"m.in_reply_to":{"event_id":"$xM-CnsBqRQTcc-LTD8u6l7dSZb6pQasumEui8nwJwVk"}},"msgtype":"m.text"},"ts":1692044022554,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xQwvlm-3xVG_DgCqTLJcYDRQTP_SZUwdUpEYGM09yZU"},
{"content":{"body":"fully agreed","msgtype":"m.text"},"ts":1692044136120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZvsNgHPQUIJrJlc8UWwPdzuG7Nc7MLqPZMJFPWm1JDU"},
{"content":{"body":"> <@ljharb:matrix.org> it comes up for me all the time\n\nI believe you I just have a hard time imagining it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YuK1sFg-pAAkzG7aDQYKiK4N2oI0X7PIVIrrp9WSnx0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it comes up for me all the time</blockquote></mx-reply>I believe you I just have a hard time imagining it","m.relates_to":{"m.in_reply_to":{"event_id":"$YuK1sFg-pAAkzG7aDQYKiK4N2oI0X7PIVIrrp9WSnx0"}},"msgtype":"m.text"},"ts":1692044246009,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DD1-N_wRxJtFFQo34Bny7Xcq7wiVT3q0tC3pvA7PMzw"},
{"content":{"body":"> <@tabatkins:matrix.org> (Note that I still feel quite strongly that this is also a (lesser) sin; there is no Correct way to iterate a string and pretending there is just misleads authors. Giving strings well-named iterator-returning methods is the correct thing to do. But that ship sailed long ago for JS.)\n\ni still think we should add codeUnits and codePoints iterator methods, even tho it’s too late to remove the Symbol.iterator method ¯\\_(ツ)_/¯ ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24xQwvlm-3xVG_DgCqTLJcYDRQTP_SZUwdUpEYGM09yZU\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>(Note that I still feel quite strongly that this is also a (lesser) sin; there is no Correct way to iterate a string and pretending there is just misleads authors. Giving strings well-named iterator-returning methods is the correct thing to do. But that ship sailed long ago for JS.)</blockquote></mx-reply>i still think we should add codeUnits and codePoints iterator methods, even tho it’s too late to remove the Symbol.iterator method ¯_(ツ)_/¯","m.relates_to":{"m.in_reply_to":{"event_id":"$xQwvlm-3xVG_DgCqTLJcYDRQTP_SZUwdUpEYGM09yZU"}},"msgtype":"m.text"},"ts":1692044337994,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mj95LR08tHL9mJDd99JCPVf3R1kX_PA8YLgDENNzHL0"},
{"content":{"body":"And if all possible a `graphemeClusters` method, tho that does depend on Unicode version.","format":"org.matrix.custom.html","formatted_body":"And if all possible a <code>graphemeClusters</code> method, tho that does depend on Unicode version.","msgtype":"m.text"},"ts":1692044392278,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yHB4nWyJ-Aa-oserx-JouUiqW1evQElC0KvLn2Cy8x4"},
{"content":{"body":" * And if at all possible a `graphemeClusters` method, tho that does depend on Unicode version.","format":"org.matrix.custom.html","formatted_body":" * And if at all possible a <code>graphemeClusters</code> method, tho that does depend on Unicode version.","m.new_content":{"body":"And if at all possible a `graphemeClusters` method, tho that does depend on Unicode version.","format":"org.matrix.custom.html","formatted_body":"And if at all possible a <code>graphemeClusters</code> method, tho that does depend on Unicode version.","msgtype":"m.text"},"m.relates_to":{"event_id":"$yHB4nWyJ-Aa-oserx-JouUiqW1evQElC0KvLn2Cy8x4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692044397514,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$43WuWS5Ze2ifjmguZ7638MZyf2VQUx1wpU9DqxE5F-A"},
{"content":{"body":"a `codePoints` iterator might be confusing given that `codePointAt` gives you a number","format":"org.matrix.custom.html","formatted_body":"a <code>codePoints</code> iterator might be confusing given that <code>codePointAt</code> gives you a number","msgtype":"m.text"},"ts":1692044446834,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eZARQX962rtOJcaHabGbof7gYveR_BJ1mYYUT1sbIuw"},
{"content":{"body":"but codeUnits and codePoints would def be Free(tm) since that's the two iteration methods we already expose.","msgtype":"m.text"},"ts":1692044447552,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$QYU1lZdrIWw03w7j2OSXXIneoVFvVODO-0SlfidIF6I"},
{"content":{"body":"well, unless `codePoints` was an iterator of numbers","format":"org.matrix.custom.html","formatted_body":"well, unless <code>codePoints</code> was an iterator of numbers","msgtype":"m.text"},"ts":1692044452827,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dYjM1POKk6inzVikq03Rx5znl60r8X1ownK1vGQmWOs"},
{"content":{"body":"ljharb: iterator sequencing proposal: https://github.com/michaelficarra/proposal-iterator-sequencing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: iterator sequencing proposal: https://github.com/michaelficarra/proposal-iterator-sequencing","msgtype":"m.text"},"ts":1692056981253,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LSrB0SXuexbmfnI9InxZgXP1tBVnxIGV_MmdLPWya0E"}
]