[
{"content":{"body":"psyched for a nonfictional plenary","msgtype":"m.text"},"ts":1647920028310,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fUvrC5mxFaumcTsrLRd7jBt2tuuRyXDyAkN2ZNK0SRA"},
{"content":{"body":"could we add a blocking version of await, only available off the main thread","msgtype":"m.text","org.matrix.msc1767.text":"could we add a blocking version of await, only available off the main thread"},"ts":1647968108824,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VE7WXT4MMJ6iq083ZX0iI5hgIpRgm7u2GXsZ2qzf3_A"},
{"content":{"body":"we already have atomics.wait","msgtype":"m.text","org.matrix.msc1767.text":"we already have atomics.wait"},"ts":1647968116580,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pBZWfFtKOSlSsVnjgvAbfllZeKqAW3qKuKLYl_LVlRU"},
{"content":{"body":" * could we add a blocking version of await, only available off the main thread","m.new_content":{"body":"could we add a blocking version of await, only available off the main thread","msgtype":"m.text","org.matrix.msc1767.text":"could we add a blocking version of await, only available off the main thread"},"m.relates_to":{"event_id":"$VE7WXT4MMJ6iq083ZX0iI5hgIpRgm7u2GXsZ2qzf3_A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * could we add a blocking version of await, only available off the main thread"},"ts":1647968128698,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n_gFwghfP_SOApAjZxp6TI27ZO_Y9-4jjMmXSdp4U1s"},
{"content":{"body":"is this a terrible idea","msgtype":"m.text","org.matrix.msc1767.text":"is this a terrible idea"},"ts":1647968132090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MxlkuK6GOlll1p5ppXh27fZxX7XgGItEhsIGiT85ATM"},
{"content":{"body":"the win being not worrying about red/blue functions? Or could there also be performance wins to blocking over using await mechanics ?","msgtype":"m.text","org.matrix.msc1767.text":"the win being not worrying about red/blue functions? Or could there also be performance wins to blocking over using await mechanics ?"},"ts":1647968237446,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$dDHO7Z5vImHZtOgKUS4D1B2NhAtux-agUREeIOlH7Kw"},
{"content":{"body":"bakkot: probably?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: probably?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably?","mimetype":"text/html"}]},"ts":1647968447793,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SNNeDNXt9Xi6HTknKFzH5ePYhWmBmo5cDMSSWxgfQC0"},
{"content":{"body":"what are the proposed semantics? remember `Atomics.wait` only gets woken up by another thread or timeout","format":"org.matrix.custom.html","formatted_body":"what are the proposed semantics? remember <code>Atomics.wait</code> only gets woken up by another thread or timeout","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what are the proposed semantics? remember `Atomics.wait` only gets woken up by another thread or timeout","mimetype":"text/plain"},{"body":"what are the proposed semantics? remember <code>Atomics.wait</code> only gets woken up by another thread or timeout","mimetype":"text/html"}]},"ts":1647968506968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NDwMfeoTlJ97QxOg4q9XCJtFjEIT6UBRT5XZRZ3spKs"},
{"content":{"body":"i don't think `await`s are like that","format":"org.matrix.custom.html","formatted_body":"i don't think <code>await</code>s are like that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't think `await`s are like that","mimetype":"text/plain"},{"body":"i don't think <code>await</code>s are like that","mimetype":"text/html"}]},"ts":1647968511270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dQf4nKySmN_MQFA37Hb-9gxLKTcTZiPwWkLZZizyVdI"},
{"content":{"body":"IIUC we can not resolve a promise off the thread, so blocking version of `await` sounds like a deadlock.","format":"org.matrix.custom.html","formatted_body":"IIUC we can not resolve a promise off the thread, so blocking version of <code>await</code> sounds like a deadlock.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"IIUC we can not resolve a promise off the thread, so blocking version of `await` sounds like a deadlock.","mimetype":"text/plain"},{"body":"IIUC we can not resolve a promise off the thread, so blocking version of <code>await</code> sounds like a deadlock.","mimetype":"text/html"}]},"ts":1647968705658,"senderName":"legendecas","senderId":"@legendecas:matrix.org","id":"$pkuK4RoZWD6FLaKVWirL9EG2RN7zDPkq9i8rub10g78"},
{"content":{"body":"it doesn't have to be, but you'd have to invent a radically different set of event loop semantics","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't have to be, but you'd have to invent a radically different set of event loop semantics"},"ts":1647968793056,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$br_L0lIfp-TquGZFW16WIXs4jkXONRPoGxo-eydPZ4Q"},
{"content":{"body":"which makes me think it is probably an infeasible idea","msgtype":"m.text","org.matrix.msc1767.text":"which makes me think it is probably an infeasible idea"},"ts":1647968802873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DblNlgtqlqqOfCASG876Wk4XerhiZn1Y-vuSlf5uzvY"},
{"content":{"body":" * bakkot: probably a terrible idea?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably a terrible idea?","m.new_content":{"body":"bakkot: probably a terrible idea?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably a terrible idea?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: probably a terrible idea?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably a terrible idea?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$SNNeDNXt9Xi6HTknKFzH5ePYhWmBmo5cDMSSWxgfQC0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * bakkot: probably a terrible idea?","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: probably a terrible idea?","mimetype":"text/html"}]},"ts":1647968860336,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Mn2KNcFwTRuHW2gUdGj4Wtf1Ki7igrKbPfkafT79xKA"},
{"content":{"body":"GetSuperBase makes a supposedly fallible call `? _home_.[[GetPrototypeOf]]()`, but AFAICT every [[HomeObject]] is a code-inaccessible built-in object created by either ClassDefinitionEvaluation step 14–15 or §13.2.5.4 Evaluation of |ObjectLiteral|, in either case with an infallible (and ordinary) [[GetPrototypeOf]]. Can someone check me here, providing example source text where it fails—or even where GetSuperBase observes an undefined [[HomeObject]]?\n\nMakeMethod($f, _object_) sets $f.[[HomeObject]] to _object_ and is called from only\n* DefineMethod with argument _object_\n* MethodDefinitionEvaluation with argument _object_\n\nMakeMethod($f, _homeObject_) sets $f.[[HomeObject]] to _object_ and is called from only\n* ClassFieldDefinitionEvaluation with argument _homeObject_\n* ClassStaticBlockDefinitionEvaluation with argument _homeObject_\n\n\nDefineMethod is called with argument _object_ from only\n* MethodDefinitionEvaluation with argument _object_\n\nDefineMethod is called with argument _proto_ from only\n* ClassDefinitionEvaluation\n  * for the ConstructorMethod of the class body\n  * where _proto_ is OrdinaryObjectCreate(_protoParent_), exposed as the \"prototype\" property of the returned class constructor\n  * where _protoParent_ is `null` for `extends null`, x.prototype for `extends x` where it is `null` or an object, and %Object.prototype% for missing `extends`\n\nMethodDefinitionEvaluation is called with argument _object_ from only\n* PropertyDefinitionEvaluation with argument _object_\n* ClassElementEvaluation with argument _object_\n\nClassFieldDefinitionEvaluation is called with argument _object_ from only\n* ClassElementEvaluation with argument _object_\n\nClassStaticBlockDefinitionEvaluation is called with argument _object_ from only\n* ClassElementEvaluation with argument _object_\n\n\nClassElementEvaluation is called with argument _proto_ from only\n* ClassDefinitionEvaluation\n  * for non-static class elements\n  * where _proto_ is OrdinaryObjectCreate(_protoParent_), exposed as the \"prototype\" property of the returned class constructor\n  * where _protoParent_ is `null` for `extends null`, x.prototype for `extends x` where it is `null` or an object, and %Object.prototype% for missing `extends`\n\nClassElementEvaluation is called with argument _F_ from only\n* ClassDefinitionEvaluation\n  * for static class elements\n  * where _F_ is the returned class constructor (and subject to later prototype mutation)\n\nPropertyDefinitionEvaluation is called with argument _obj_ from only\n* Evaluation of |ObjectLiteral|\n  * where _obj_ is OrdinaryObjectCreate(%Object.prototype%)\n  * where _obj_ is returned (and subject to later prototype mutation)","format":"org.matrix.custom.html","formatted_body":"<p>GetSuperBase makes a supposedly fallible call <code>? _home_.[[GetPrototypeOf]]()</code>, but AFAICT every [[HomeObject]] is a code-inaccessible built-in object created by either ClassDefinitionEvaluation step 14–15 or §13.2.5.4 Evaluation of |ObjectLiteral|, in either case with an infallible (and ordinary) [[GetPrototypeOf]]. Can someone check me here, providing example source text where it fails—or even where GetSuperBase observes an undefined [[HomeObject]]?</p>\n<p>MakeMethod($f, <em>object</em>) sets $f.[[HomeObject]] to <em>object</em> and is called from only</p>\n<ul>\n<li>DefineMethod with argument <em>object</em></li>\n<li>MethodDefinitionEvaluation with argument <em>object</em></li>\n</ul>\n<p>MakeMethod($f, <em>homeObject</em>) sets $f.[[HomeObject]] to <em>object</em> and is called from only</p>\n<ul>\n<li>ClassFieldDefinitionEvaluation with argument <em>homeObject</em></li>\n<li>ClassStaticBlockDefinitionEvaluation with argument <em>homeObject</em></li>\n</ul>\n<p>DefineMethod is called with argument <em>object</em> from only</p>\n<ul>\n<li>MethodDefinitionEvaluation with argument <em>object</em></li>\n</ul>\n<p>DefineMethod is called with argument <em>proto</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for the ConstructorMethod of the class body</li>\n<li>where <em>proto</em> is OrdinaryObjectCreate(<em>protoParent</em>), exposed as the &quot;prototype&quot; property of the returned class constructor</li>\n<li>where <em>protoParent</em> is <code>null</code> for <code>extends null</code>, x.prototype for <code>extends x</code> where it is <code>null</code> or an object, and %Object.prototype% for missing <code>extends</code></li>\n</ul>\n</li>\n</ul>\n<p>MethodDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>PropertyDefinitionEvaluation with argument <em>object</em></li>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassFieldDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassStaticBlockDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassElementEvaluation is called with argument <em>proto</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for non-static class elements</li>\n<li>where <em>proto</em> is OrdinaryObjectCreate(<em>protoParent</em>), exposed as the &quot;prototype&quot; property of the returned class constructor</li>\n<li>where <em>protoParent</em> is <code>null</code> for <code>extends null</code>, x.prototype for <code>extends x</code> where it is <code>null</code> or an object, and %Object.prototype% for missing <code>extends</code></li>\n</ul>\n</li>\n</ul>\n<p>ClassElementEvaluation is called with argument <em>F</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for static class elements</li>\n<li>where <em>F</em> is the returned class constructor (and subject to later prototype mutation)</li>\n</ul>\n</li>\n</ul>\n<p>PropertyDefinitionEvaluation is called with argument <em>obj</em> from only</p>\n<ul>\n<li>Evaluation of |ObjectLiteral|\n<ul>\n<li>where <em>obj</em> is OrdinaryObjectCreate(%Object.prototype%)</li>\n<li>where <em>obj</em> is returned (and subject to later prototype mutation)</li>\n</ul>\n</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"GetSuperBase makes a supposedly fallible call `? _home_.[[GetPrototypeOf]]()`, but AFAICT every [[HomeObject]] is a code-inaccessible built-in object created by either ClassDefinitionEvaluation step 14–15 or §13.2.5.4 Evaluation of |ObjectLiteral|, in either case with an infallible (and ordinary) [[GetPrototypeOf]]. Can someone check me here, providing example source text where it fails—or even where GetSuperBase observes an undefined [[HomeObject]]?\n\nMakeMethod($f, _object_) sets $f.[[HomeObject]] to _object_ and is called from only\n* DefineMethod with argument _object_\n* MethodDefinitionEvaluation with argument _object_\n\nMakeMethod($f, _homeObject_) sets $f.[[HomeObject]] to _object_ and is called from only\n* ClassFieldDefinitionEvaluation with argument _homeObject_\n* ClassStaticBlockDefinitionEvaluation with argument _homeObject_\n\n\nDefineMethod is called with argument _object_ from only\n* MethodDefinitionEvaluation with argument _object_\n\nDefineMethod is called with argument _proto_ from only\n* ClassDefinitionEvaluation\n  * for the ConstructorMethod of the class body\n  * where _proto_ is OrdinaryObjectCreate(_protoParent_), exposed as the \"prototype\" property of the returned class constructor\n  * where _protoParent_ is `null` for `extends null`, x.prototype for `extends x` where it is `null` or an object, and %Object.prototype% for missing `extends`\n\nMethodDefinitionEvaluation is called with argument _object_ from only\n* PropertyDefinitionEvaluation with argument _object_\n* ClassElementEvaluation with argument _object_\n\nClassFieldDefinitionEvaluation is called with argument _object_ from only\n* ClassElementEvaluation with argument _object_\n\nClassStaticBlockDefinitionEvaluation is called with argument _object_ from only\n* ClassElementEvaluation with argument _object_\n\n\nClassElementEvaluation is called with argument _proto_ from only\n* ClassDefinitionEvaluation\n  * for non-static class elements\n  * where _proto_ is OrdinaryObjectCreate(_protoParent_), exposed as the \"prototype\" property of the returned class constructor\n  * where _protoParent_ is `null` for `extends null`, x.prototype for `extends x` where it is `null` or an object, and %Object.prototype% for missing `extends`\n\nClassElementEvaluation is called with argument _F_ from only\n* ClassDefinitionEvaluation\n  * for static class elements\n  * where _F_ is the returned class constructor (and subject to later prototype mutation)\n\nPropertyDefinitionEvaluation is called with argument _obj_ from only\n* Evaluation of |ObjectLiteral|\n  * where _obj_ is OrdinaryObjectCreate(%Object.prototype%)\n  * where _obj_ is returned (and subject to later prototype mutation)","mimetype":"text/plain"},{"body":"<p>GetSuperBase makes a supposedly fallible call <code>? _home_.[[GetPrototypeOf]]()</code>, but AFAICT every [[HomeObject]] is a code-inaccessible built-in object created by either ClassDefinitionEvaluation step 14–15 or §13.2.5.4 Evaluation of |ObjectLiteral|, in either case with an infallible (and ordinary) [[GetPrototypeOf]]. Can someone check me here, providing example source text where it fails—or even where GetSuperBase observes an undefined [[HomeObject]]?</p>\n<p>MakeMethod($f, <em>object</em>) sets $f.[[HomeObject]] to <em>object</em> and is called from only</p>\n<ul>\n<li>DefineMethod with argument <em>object</em></li>\n<li>MethodDefinitionEvaluation with argument <em>object</em></li>\n</ul>\n<p>MakeMethod($f, <em>homeObject</em>) sets $f.[[HomeObject]] to <em>object</em> and is called from only</p>\n<ul>\n<li>ClassFieldDefinitionEvaluation with argument <em>homeObject</em></li>\n<li>ClassStaticBlockDefinitionEvaluation with argument <em>homeObject</em></li>\n</ul>\n<p>DefineMethod is called with argument <em>object</em> from only</p>\n<ul>\n<li>MethodDefinitionEvaluation with argument <em>object</em></li>\n</ul>\n<p>DefineMethod is called with argument <em>proto</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for the ConstructorMethod of the class body</li>\n<li>where <em>proto</em> is OrdinaryObjectCreate(<em>protoParent</em>), exposed as the &quot;prototype&quot; property of the returned class constructor</li>\n<li>where <em>protoParent</em> is <code>null</code> for <code>extends null</code>, x.prototype for <code>extends x</code> where it is <code>null</code> or an object, and %Object.prototype% for missing <code>extends</code></li>\n</ul>\n</li>\n</ul>\n<p>MethodDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>PropertyDefinitionEvaluation with argument <em>object</em></li>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassFieldDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassStaticBlockDefinitionEvaluation is called with argument <em>object</em> from only</p>\n<ul>\n<li>ClassElementEvaluation with argument <em>object</em></li>\n</ul>\n<p>ClassElementEvaluation is called with argument <em>proto</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for non-static class elements</li>\n<li>where <em>proto</em> is OrdinaryObjectCreate(<em>protoParent</em>), exposed as the &quot;prototype&quot; property of the returned class constructor</li>\n<li>where <em>protoParent</em> is <code>null</code> for <code>extends null</code>, x.prototype for <code>extends x</code> where it is <code>null</code> or an object, and %Object.prototype% for missing <code>extends</code></li>\n</ul>\n</li>\n</ul>\n<p>ClassElementEvaluation is called with argument <em>F</em> from only</p>\n<ul>\n<li>ClassDefinitionEvaluation\n<ul>\n<li>for static class elements</li>\n<li>where <em>F</em> is the returned class constructor (and subject to later prototype mutation)</li>\n</ul>\n</li>\n</ul>\n<p>PropertyDefinitionEvaluation is called with argument <em>obj</em> from only</p>\n<ul>\n<li>Evaluation of |ObjectLiteral|\n<ul>\n<li>where <em>obj</em> is OrdinaryObjectCreate(%Object.prototype%)</li>\n<li>where <em>obj</em> is returned (and subject to later prototype mutation)</li>\n</ul>\n</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1647989926113,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$28I1hclNBJ5_QXms3D4vca_AwiPDz_zLbAq1H1_jSpU"},
{"content":{"body":"Richard Gibson: your analysis sounds right to me","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: your analysis sounds right to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Richard Gibson: your analysis sounds right to me","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@gibson042:matrix.org\">Richard Gibson</a>: your analysis sounds right to me","mimetype":"text/html"}]},"ts":1647990261348,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AFQz89qOsGk_97-QSbvZLZSSdAPQZnao-LMO2ilAOxs"},
{"content":{"body":"I strongly suspect there's a number of remaining cases where there's a `!` which should be a `?`","format":"org.matrix.custom.html","formatted_body":"I strongly suspect there's a number of remaining cases where there's a <code>!</code> which should be a <code>?</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I strongly suspect there's a number of remaining cases where there's a `!` which should be a `?`","mimetype":"text/plain"},{"body":"I strongly suspect there's a number of remaining cases where there's a <code>!</code> which should be a <code>?</code>","mimetype":"text/html"}]},"ts":1647990343662,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pYtyozl2zgb4jTE1CSvlZRUuyf_YrB_sFeh1Cyae5C0"},
{"content":{"body":"or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be `undefined`","format":"org.matrix.custom.html","formatted_body":"or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be <code>undefined</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be `undefined`","mimetype":"text/plain"},{"body":"or, I should say the non-throwy-ness sounds right; I haven't looked for how it might be <code>undefined</code>","mimetype":"text/html"}]},"ts":1647990357158,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bIiG5pjwX7shcI69Xxk-S1EK0xY3h02FJlV03CGtXL8"}
]