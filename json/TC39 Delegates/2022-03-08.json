[
{"content":{"body":"ljharb: incubator call?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: incubator call?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","mimetype":"text/html"}]},"ts":1646755433082,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FQIfippAePFYZ73W1mRTcDsdjLRELkyuFVf_ag8tft4"},
{"content":{"body":"Iâ€™ll be a few late, but Iâ€™m coming","msgtype":"m.text"},"ts":1646755500615,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sJt-u2ArFCXlWqsg52Y9VgbR5FlBDE58K42WoIkmNE8"},
{"content":{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","mimetype":"text/html"}]},"ts":1646756712906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XbOhue58weV6BG1Jo1IrSUpFNUmBnp4GO5OcQX-CFeA"},
{"content":{"body":"it sounds like a surgical procedure","msgtype":"m.text","org.matrix.msc1767.text":"it sounds like a surgical procedure"},"ts":1646758870789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CYAKnVceOCrxHgtbSRemE6vkXaQ0JNZCrgJ28dPcpwc"},
{"content":{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","format":"org.matrix.custom.html","formatted_body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","mimetype":"text/plain"},{"body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","mimetype":"text/html"}]},"ts":1646769106153,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mUkwOgCaPnMoeHYc__ogLQ4RHZlvtP71EHYXKpdQFG4"},
{"content":{"body":"sounds like you want optional pipeline ðŸ˜‰","msgtype":"m.text","org.matrix.msc1767.text":"sounds like you want optional pipeline ðŸ˜‰"},"ts":1646769677935,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk"},
{"content":{"body":" * sounds like you want optional pipeline ðŸ˜‰","m.new_content":{"body":"sounds like you want optional pipeline ðŸ˜‰","msgtype":"m.text","org.matrix.msc1767.text":"sounds like you want optional pipeline ðŸ˜‰"},"m.relates_to":{"event_id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * sounds like you want optional pipeline ðŸ˜‰"},"ts":1646769694057,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5xQBaDSYo3arulDBSyrD_RYIypIR2Qq80mg1785t0hQ"},
{"content":{"body":"`y ?> x(<sigil>)`","format":"org.matrix.custom.html","formatted_body":"<code>y ?&gt; x(&lt;sigil&gt;)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`y ?> x(<sigil>)`","mimetype":"text/plain"},{"body":"<code>y ?&gt; x(&lt;sigil&gt;)</code>","mimetype":"text/html"}]},"ts":1646769730572,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$aUeW7_BVFTGPIxFedfOhzCZiR2uofd1LaYWorD_BCRI"},
{"content":{"body":"optional pipeline :(","msgtype":"m.text","org.matrix.msc1767.text":"optional pipeline :("},"ts":1646769746534,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m5rwTyDSN3QXqpDw5yBmGEaejfW64cq1v-XwoD8L9Tc"},
{"content":{"body":"we could just have do-notation, like a real language","msgtype":"m.text","org.matrix.msc1767.text":"we could just have do-notation, like a real language"},"ts":1646769769120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ERNcoKC3QR5b73AJy3e-pdgkikJUxoTSdaSfBHsXfqc"},
{"content":{"body":"ðŸ”¥","msgtype":"m.text","org.matrix.msc1767.text":"ðŸ”¥"},"ts":1646769787046,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hRujfuGCBqau6edbjjtS9SuBTX5bfT4xBJ3dC5LTKPU"},
{"content":{"body":"real languages are statement based, only acceptable expressions are immediates and registers and addresses","msgtype":"m.text","org.matrix.msc1767.text":"real languages are statement based, only acceptable expressions are immediates and registers and addresses"},"ts":1646769880003,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$H5xODV44xMvRTtGCu1-ZykZa6GVgucxIcEU8rLZunks"},
{"content":{"body":"and immediates can't be too big","msgtype":"m.text","org.matrix.msc1767.text":"and immediates can't be too big"},"ts":1646769886945,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$U7kNFVoxr6m2_-F6JKqyYKHNthgWIhmZnu6i3RvynGo"},
{"content":{"body":"and it'll be an awkward number of bits, like 21","msgtype":"m.text","org.matrix.msc1767.text":"and it'll be an awkward number of bits, like 21"},"ts":1646769892405,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_a56WKkdJWigkE7KumDSmBVgisAnfLvuQAYFNDEP2vo"},
{"content":{"body":"all logic is ternary. true/false/unknown ","msgtype":"m.text","org.matrix.msc1767.text":"all logic is ternary. true/false/unknown "},"ts":1646769960164,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI"},
{"content":{"body":"> <@aclaymore:matrix.org> sounds like you want optional pipeline ðŸ˜‰\n\nThereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤” ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>sounds like you want optional pipeline ðŸ˜‰</blockquote></mx-reply>Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”","m.relates_to":{"m.in_reply_to":{"event_id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk"}},"msgtype":"m.text"},"ts":1646770273038,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vZwVrOREFYJSUHa3emheess90Uukc3n0ziAjVj5iR6s"},
{"content":{"body":"nullish is the only reasonable choice for optional pipes","msgtype":"m.text","org.matrix.msc1767.text":"nullish is the only reasonable choice for optional pipes"},"ts":1646770328125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8vYnMk0txD1YFo311HBRH3jAquqYIYc6czOKPs9ZWwY"},
{"content":{"body":"also I don't want optional pipes","msgtype":"m.text","org.matrix.msc1767.text":"also I don't want optional pipes"},"ts":1646770331812,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OKaFrl4whoQzhqa_xxyUt0DOqdVBp6hOedBRtrHA7Pc"},
{"content":{"body":"but it's the only reasonable choice if we have to have them","msgtype":"m.text","org.matrix.msc1767.text":"but it's the only reasonable choice if we have to have them"},"ts":1646770337408,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J1Ao-99QPrVKoUHw5V-Sx_yhO0ClcmNg--AeTupFod4"},
{"content":{"body":"> <@aclaymore:matrix.org> all logic is ternary. true/false/unknown \n\nAlso, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf\n\nQuaternary logic. We have the technology. Do we have the courage? [joke]","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>all logic is ternary. true/false/unknown </blockquote></mx-reply><p>Also, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf</p>\n<p>Quaternary logic. We have the technology. Do we have the courage? [joke]</p>","msgtype":"m.text","m.relates_to":{"m.in_reply_to":{"event_id":"$3Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI"}}},"ts":1646770977854,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$R-9VEkIlbyhAaiI3jP6KsFj4qHGXRt3pd_fAj7-Ivhc"},
{"content":{"body":"* > <@aclaymore:matrix.org> all logic is ternary. true/false/unknown \n\nAlso, we have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf\n\nQuaternary logic. We have the technology. Do we have the courage?","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>all logic is ternary. true/false/unknown </blockquote></mx-reply><p>Also, we have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf</p>\n<p>Quaternary logic. We have the technology. Do we have the courage?</p>","m.new_content":{"body":"> <@aclaymore:matrix.org> all logic is ternary. true/false/unknown \n\nAlso, we have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf\n\nQuaternary logic. We have the technology. Do we have the courage?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>all logic is ternary. true/false/unknown </blockquote></mx-reply><p>Also, we have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf</p>\n<p>Quaternary logic. We have the technology. Do we have the courage?</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$R-9VEkIlbyhAaiI3jP6KsFj4qHGXRt3pd_fAj7-Ivhc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1646771015286,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$cI5UowFSvVeBmbcSTMCk_63strJTmCl166RelSVys4g"},
{"content":{"body":"* > <@aclaymore:matrix.org> all logic is ternary. true/false/unknown \n\nAlso, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf\n\nQuaternary logic. We have the technology. Do we have the courage? [joke]","format":"org.matrix.custom.html","formatted_body":"* <mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>all logic is ternary. true/false/unknown </blockquote></mx-reply><p>Also, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf</p>\n<p>Quaternary logic. We have the technology. Do we have the courage? [joke]</p>","m.new_content":{"body":"> <@aclaymore:matrix.org> all logic is ternary. true/false/unknown \n\nAlso, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf\n\nQuaternary logic. We have the technology. Do we have the courage? [joke]","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%243Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>all logic is ternary. true/false/unknown </blockquote></mx-reply><p>Also, we both have null and undefined. We can go further. https://www.computer.org/csdl/proceedings-article/glsv/1991/00143992/12OmNzzxusf</p>\n<p>Quaternary logic. We have the technology. Do we have the courage? [joke]</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$R-9VEkIlbyhAaiI3jP6KsFj4qHGXRt3pd_fAj7-Ivhc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1646771062159,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$0D8FWisZi0WKLqR8Yn1_sfwnwuzhRHJq9hWOEuYVmc8"},
{"content":{"body":"we have gone further","msgtype":"m.text","org.matrix.msc1767.text":"we have gone further"},"ts":1646771458308,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$boHH8DpE3extgs4H_t-F94YUQfETgya9Ohu8Fskb7OM"},
{"content":{"body":"we have an infinite number of `document.all`s available to us","format":"org.matrix.custom.html","formatted_body":"we have an infinite number of <code>document.all</code>s available to us","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we have an infinite number of `document.all`s available to us","mimetype":"text/plain"},{"body":"we have an infinite number of <code>document.all</code>s available to us","mimetype":"text/html"}]},"ts":1646771467359,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$huLdd30PQ1VL8xMPQJhnGory2yku9bSKclZJi430SZ8"},
{"content":{"body":"for as many non-null/undef nullish values as you want","msgtype":"m.text","org.matrix.msc1767.text":"for as many non-null/undef nullish values as you want"},"ts":1646771478811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tiPnfEvlgH9tI4hNx8wJd5r8pAhQhU8BM6VQqwEh_Us"},
{"content":{"body":"> <@jschoi:matrix.org> Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”\n\n? It would use the same rules as optional-call and ??; anything else would be a profound mistake.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vZwVrOREFYJSUHa3emheess90Uukc3n0ziAjVj5iR6s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”</blockquote></mx-reply>? It would use the same rules as optional-call and ??; anything else would be a profound mistake.","m.relates_to":{"m.in_reply_to":{"event_id":"$vZwVrOREFYJSUHa3emheess90Uukc3n0ziAjVj5iR6s"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jschoi:matrix.org> Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”\n\n? It would use the same rules as optional-call and ??; anything else would be a profound mistake.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vZwVrOREFYJSUHa3emheess90Uukc3n0ziAjVj5iR6s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jschoi:matrix.org\">@jschoi:matrix.org</a><br>Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”</blockquote></mx-reply>? It would use the same rules as optional-call and ??; anything else would be a profound mistake.","mimetype":"text/html"}]},"ts":1646772405073,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$25-Nq3O_vALgNcyko7dxXw50X1TjTBCVDiTMSeZk37I"},
{"content":{"body":"Yeah, I had thought there would be some disagreement on this, but it looks like everyone (including me) agrees with nullishness.","msgtype":"m.text"},"ts":1646776793261,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$GfiPgoHziQIv5PwRb5mPN2u9v78hPAtc9MyElQ2ChCs"},
{"content":{"body":"I don't think it's *particularly* that everyone agrees on nullishness (tho maybe people do), it's just that it's extremely clear that all the things doing optionality with the same syntax pattern need to act the same.","format":"org.matrix.custom.html","formatted_body":"I don't think it's <em>particularly</em> that everyone agrees on nullishness (tho maybe people do), it's just that it's extremely clear that all the things doing optionality with the same syntax pattern need to act the same.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I don't think it's *particularly* that everyone agrees on nullishness (tho maybe people do), it's just that it's extremely clear that all the things doing optionality with the same syntax pattern need to act the same.","mimetype":"text/plain"},{"body":"I don't think it's <em>particularly</em> that everyone agrees on nullishness (tho maybe people do), it's just that it's extremely clear that all the things doing optionality with the same syntax pattern need to act the same.","mimetype":"text/html"}]},"ts":1646779584173,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EyRBTABt0Ra0ZhTXKb38w1rDZwxtFZavbA2F7hDItRI"},
{"content":{"body":"> <@bakkot:matrix.org> we have an infinite number of `document.all`s available to us\n\nnot even limited to `document.all`, hosts can put `[[IsHTMLDDA]]` on any objects they choose","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$huLdd30PQ1VL8xMPQJhnGory2yku9bSKclZJi430SZ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>we have an infinite number of <code>document.all</code>s available to us</blockquote></mx-reply>not even limited to <code>document.all</code>, hosts can put <code>[[IsHTMLDDA]]</code> on any objects they choose","m.relates_to":{"m.in_reply_to":{"event_id":"$huLdd30PQ1VL8xMPQJhnGory2yku9bSKclZJi430SZ8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> we have an infinite number of `document.all`s available to us\n\nnot even limited to `document.all`, hosts can put `[[IsHTMLDDA]]` on any objects they choose","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$huLdd30PQ1VL8xMPQJhnGory2yku9bSKclZJi430SZ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>we have an infinite number of <code>document.all</code>s available to us</blockquote></mx-reply>not even limited to <code>document.all</code>, hosts can put <code>[[IsHTMLDDA]]</code> on any objects they choose","mimetype":"text/html"}]},"ts":1646782784342,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$N3qW43GH_T3cyQ04deZGqrUzL76gIKxtXiKJRrurZOA"},
{"content":{"body":"owo","msgtype":"m.text","org.matrix.msc1767.text":"owo"},"ts":1646782828658,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yI_KIEKU_tZLUYsyzjXkU7vqYp6-K1-B29K_XAepqcU"},
{"content":{"body":"\"can\", but \"should\" not","msgtype":"m.text","org.matrix.msc1767.text":"\"can\", but \"should\" not"},"ts":1646782901154,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ilDq_jZRi-mI9t8rZY5YhVEEmdGs9TWNcAMLxUWyGUA"},
{"content":{"body":"\"implementations should not create any with the exception of document.all\"","msgtype":"m.text","org.matrix.msc1767.text":"\"implementations should not create any with the exception of document.all\""},"ts":1646782916611,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xzTqEsMb5smvTKQgWaHt-nyuS2goICtzRZl3QesNbLM"},
{"content":{"body":"should've said \"must\"","msgtype":"m.text","org.matrix.msc1767.text":"should've said \"must\""},"ts":1646782920633,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X1UfH3l3zQee8yRmI-GVg-TR_hoQ_XYmXjqzeCmjUzk"},
{"content":{"body":"still could","msgtype":"m.text"},"ts":1646782942916,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xo3dHrMMPpddQq-zMDGv2i3v04x5d50Z5B35UI1MzRU"},
{"content":{"body":"^","msgtype":"m.text","org.matrix.msc1767.text":"^"},"ts":1646782989856,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5eHDm_tfEtFc8LWsSVlSkRpj-Yl8JGED_VGTOiv_PnE"},
{"content":{"body":"with consensus, which, I definitely do not care enough about this to spend committee time on it","msgtype":"m.text","org.matrix.msc1767.text":"with consensus, which, I definitely do not care enough about this to spend committee time on it"},"ts":1646782992141,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$miOlry6Fr-4afm2rAldH_1xNbHVwHMrcDf9eoApyYoI"},
{"content":{"body":"also, now I've noticed that there's an issue with B.3.6.3 https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-typeof","msgtype":"m.text","org.matrix.msc1767.text":"also, now I've noticed that there's an issue with B.3.6.3 https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-typeof"},"ts":1646783004213,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NAFhUD2_9WgIV6Vv64hzE4NQZENX7Y7cQjdbtntCy8c"},
{"content":{"body":"what's the issue?","msgtype":"m.text","org.matrix.msc1767.text":"what's the issue?"},"ts":1646783057740,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hWtm8I6TfOvM9cALT3V4tFo6VZmX-TgWJE4iSPOxiYc"},
{"content":{"body":"the left column of that table should separate all language values unambiguously","msgtype":"m.text","org.matrix.msc1767.text":"the left column of that table should separate all language values unambiguously"},"ts":1646783081610,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KxMpQHFaA5_q_4EjfgVcFHbl4WfnbMx6g3MChT8JEn8"},
{"content":{"body":"an object with `[[IsHTMLDDA]]` will always fall into two rows","format":"org.matrix.custom.html","formatted_body":"an object with <code>[[IsHTMLDDA]]</code> will always fall into two rows","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"an object with `[[IsHTMLDDA]]` will always fall into two rows","mimetype":"text/plain"},{"body":"an object with <code>[[IsHTMLDDA]]</code> will always fall into two rows","mimetype":"text/html"}]},"ts":1646783101817,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$u9gr4wRCYAW0MHaYc49x7muV_6JmAgPJ0NKhTfZ06-U"},
{"content":{"body":"either it has `[[Call]]` or it doesn't","format":"org.matrix.custom.html","formatted_body":"either it has <code>[[Call]]</code> or it doesn't","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"either it has `[[Call]]` or it doesn't","mimetype":"text/plain"},{"body":"either it has <code>[[Call]]</code> or it doesn't","mimetype":"text/html"}]},"ts":1646783110479,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ta6PCvEOX-ltK4LVLeyQJcguHfOtsaEKEwm1GFTnZ68"},
{"content":{"body":"we should just have it insert a step into 13.5.3.1 instead of a row into the table","msgtype":"m.text","org.matrix.msc1767.text":"we should just have it insert a step into 13.5.3.1 instead of a row into the table"},"ts":1646783325981,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$m3mWkWVrB9JjTWdK4gQuIbPoV0z0poSGmzHX_F1H4RU"}
]