[
{"content":{"body":"ljharb: incubator call?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: incubator call?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","mimetype":"text/html"}]},"ts":1646755433082,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FQIfippAePFYZ73W1mRTcDsdjLRELkyuFVf_ag8tft4"},
{"content":{"body":"Iâ€™ll be a few late, but Iâ€™m coming","msgtype":"m.text"},"ts":1646755500615,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sJt-u2ArFCXlWqsg52Y9VgbR5FlBDE58K42WoIkmNE8"},
{"content":{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","mimetype":"text/html"}]},"ts":1646756712906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XbOhue58weV6BG1Jo1IrSUpFNUmBnp4GO5OcQX-CFeA"},
{"content":{"body":"it sounds like a surgical procedure","msgtype":"m.text","org.matrix.msc1767.text":"it sounds like a surgical procedure"},"ts":1646758870789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CYAKnVceOCrxHgtbSRemE6vkXaQ0JNZCrgJ28dPcpwc"},
{"content":{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","format":"org.matrix.custom.html","formatted_body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","mimetype":"text/plain"},{"body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","mimetype":"text/html"}]},"ts":1646769106153,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mUkwOgCaPnMoeHYc__ogLQ4RHZlvtP71EHYXKpdQFG4"},
{"content":{"body":"sounds like you want optional pipeline ðŸ˜‰","msgtype":"m.text","org.matrix.msc1767.text":"sounds like you want optional pipeline ðŸ˜‰"},"ts":1646769677935,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk"},
{"content":{"body":" * sounds like you want optional pipeline ðŸ˜‰","m.new_content":{"body":"sounds like you want optional pipeline ðŸ˜‰","msgtype":"m.text","org.matrix.msc1767.text":"sounds like you want optional pipeline ðŸ˜‰"},"m.relates_to":{"event_id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * sounds like you want optional pipeline ðŸ˜‰"},"ts":1646769694057,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5xQBaDSYo3arulDBSyrD_RYIypIR2Qq80mg1785t0hQ"},
{"content":{"body":"`y ?> x(<sigil>)`","format":"org.matrix.custom.html","formatted_body":"<code>y ?&gt; x(&lt;sigil&gt;)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`y ?> x(<sigil>)`","mimetype":"text/plain"},{"body":"<code>y ?&gt; x(&lt;sigil&gt;)</code>","mimetype":"text/html"}]},"ts":1646769730572,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$aUeW7_BVFTGPIxFedfOhzCZiR2uofd1LaYWorD_BCRI"},
{"content":{"body":"optional pipeline :(","msgtype":"m.text","org.matrix.msc1767.text":"optional pipeline :("},"ts":1646769746534,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m5rwTyDSN3QXqpDw5yBmGEaejfW64cq1v-XwoD8L9Tc"},
{"content":{"body":"we could just have do-notation, like a real language","msgtype":"m.text","org.matrix.msc1767.text":"we could just have do-notation, like a real language"},"ts":1646769769120,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ERNcoKC3QR5b73AJy3e-pdgkikJUxoTSdaSfBHsXfqc"},
{"content":{"body":"ðŸ”¥","msgtype":"m.text","org.matrix.msc1767.text":"ðŸ”¥"},"ts":1646769787046,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hRujfuGCBqau6edbjjtS9SuBTX5bfT4xBJ3dC5LTKPU"},
{"content":{"body":"real languages are statement based, only acceptable expressions are immediates and registers and addresses","msgtype":"m.text","org.matrix.msc1767.text":"real languages are statement based, only acceptable expressions are immediates and registers and addresses"},"ts":1646769880003,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$H5xODV44xMvRTtGCu1-ZykZa6GVgucxIcEU8rLZunks"},
{"content":{"body":"and immediates can't be too big","msgtype":"m.text","org.matrix.msc1767.text":"and immediates can't be too big"},"ts":1646769886945,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$U7kNFVoxr6m2_-F6JKqyYKHNthgWIhmZnu6i3RvynGo"},
{"content":{"body":"and it'll be an awkward number of bits, like 21","msgtype":"m.text","org.matrix.msc1767.text":"and it'll be an awkward number of bits, like 21"},"ts":1646769892405,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_a56WKkdJWigkE7KumDSmBVgisAnfLvuQAYFNDEP2vo"},
{"content":{"body":"all logic is ternary. true/false/unknown ","msgtype":"m.text","org.matrix.msc1767.text":"all logic is ternary. true/false/unknown "},"ts":1646769960164,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3Zo3TDDwqZ6e95EKJAwokGCAxs208S9xYAIe2FvpUDI"},
{"content":{"body":"> <@aclaymore:matrix.org> sounds like you want optional pipeline ðŸ˜‰\n\nThereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤” ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>sounds like you want optional pipeline ðŸ˜‰</blockquote></mx-reply>Thereâ€™s going to be a bikeshed around whether to use falsey or nullish for optional pipes. ðŸ¤”","m.relates_to":{"m.in_reply_to":{"event_id":"$vCkzWJyfz67UaBMFtolYQcHD5ZumEsLoRoNHKBcl7Kk"}},"msgtype":"m.text"},"ts":1646770273038,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$vZwVrOREFYJSUHa3emheess90Uukc3n0ziAjVj5iR6s"},
{"content":{"body":"nullish is the only reasonable choice for optional pipes","msgtype":"m.text","org.matrix.msc1767.text":"nullish is the only reasonable choice for optional pipes"},"ts":1646770328125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8vYnMk0txD1YFo311HBRH3jAquqYIYc6czOKPs9ZWwY"},
{"content":{"body":"also I don't want optional pipes","msgtype":"m.text","org.matrix.msc1767.text":"also I don't want optional pipes"},"ts":1646770331812,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OKaFrl4whoQzhqa_xxyUt0DOqdVBp6hOedBRtrHA7Pc"},
{"content":{"body":"but it's the only reasonable choice if we have to have them","msgtype":"m.text","org.matrix.msc1767.text":"but it's the only reasonable choice if we have to have them"},"ts":1646770337408,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$J1Ao-99QPrVKoUHw5V-Sx_yhO0ClcmNg--AeTupFod4"}
]