[
{"content":{"body":"ljharb: incubator call?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: incubator call?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: incubator call?","mimetype":"text/html"}]},"ts":1646755433082,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FQIfippAePFYZ73W1mRTcDsdjLRELkyuFVf_ag8tft4"},
{"content":{"body":"I’ll be a few late, but I’m coming","msgtype":"m.text"},"ts":1646755500615,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sJt-u2ArFCXlWqsg52Y9VgbR5FlBDE58K42WoIkmNE8"},
{"content":{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"jschoi: \"demethodize\" is pretty gross imo, ftr :-p","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>: &quot;demethodize&quot; is pretty gross imo, ftr :-p","mimetype":"text/html"}]},"ts":1646756712906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XbOhue58weV6BG1Jo1IrSUpFNUmBnp4GO5OcQX-CFeA"},
{"content":{"body":"it sounds like a surgical procedure","msgtype":"m.text","org.matrix.msc1767.text":"it sounds like a surgical procedure"},"ts":1646758870789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CYAKnVceOCrxHgtbSRemE6vkXaQ0JNZCrgJ28dPcpwc"},
{"content":{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","format":"org.matrix.custom.html","formatted_body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, we have `x?.(y)`, where it doesn't call `x` unless `x` is non-nullish; is there no simple way to do `x(y)` when _y_ is non-nullish? (obv i can do `y == null ? y : x(y)` but that means i have to repeat the `y` expression more than once, or store it in a var)","mimetype":"text/plain"},{"body":"so, we have <code>x?.(y)</code>, where it doesn't call <code>x</code> unless <code>x</code> is non-nullish; is there no simple way to do <code>x(y)</code> when <em>y</em> is non-nullish? (obv i can do <code>y == null ? y : x(y)</code> but that means i have to repeat the <code>y</code> expression more than once, or store it in a var)","mimetype":"text/html"}]},"ts":1646769106153,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mUkwOgCaPnMoeHYc__ogLQ4RHZlvtP71EHYXKpdQFG4"}
]