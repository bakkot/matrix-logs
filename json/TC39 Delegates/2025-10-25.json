[
{"content":{"body":"Do you think we could start saving the agenda deadline in the tc39 calendar? :)","msgtype":"m.text"},"ts":1761394751400,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$41rjA-bIak8A-Y1vjBAe7XzAFUUXPDcSJqtrraCgU0c"},
{"content":{"body":"one of the things in James M Snell's TypedArrays presentations is a `compare` method for TypedArrays. This in theory subsumes a `equals` method, but in practice `equals` can be implemented as a `memcmp` (as long as you don't care about NaN / -0) and `compare` cannot (except for `uint8`; for other types the ordering considered as a byte sequence is not the same as the ordering as int32 or whatever)\n\nis it likely engines could optimize `Int32Array.compare(a, b) === 0` to do a `memcmp`? if not, how would people feel about having an `equals` method also?","format":"org.matrix.custom.html","formatted_body":"<p>one of the things in <a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>'s TypedArrays presentations is a <code>compare</code> method for TypedArrays. This in theory subsumes a <code>equals</code> method, but in practice <code>equals</code> can be implemented as a <code>memcmp</code> (as long as you don't care about NaN / -0) and <code>compare</code> cannot (except for <code>uint8</code>; for other types the ordering considered as a byte sequence is not the same as the ordering as int32 or whatever)</p>\n<p>is it likely engines could optimize <code>Int32Array.compare(a, b) === 0</code> to do a <code>memcmp</code>? if not, how would people feel about having an <code>equals</code> method also?</p>\n","m.mentions":{"user_ids":["@jasnell:matrix.org"]},"msgtype":"m.text"},"ts":1761413091909,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0AiIU5z_locdlkpeQwVQ3Zr-koALJdUMXZYb2_HWZhk"}
]