[
{"content":{"body":"hey nice, SRI support for ES modules finally https://github.com/whatwg/html/pull/10269","m.mentions":{},"msgtype":"m.text"},"ts":1713372582711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WpJQYjh8joAIt0QOd6Mz_GLugIstLrSCokR3ZzEcP5U"},
{"content":{"body":"ljharb: I just realized that I had previously suggested a `Function.prototype.try`, and that kind of conflicts with `Promise.try` in that `Promise` inherits from `Function` but `Promise.try` is a different thing than `Function.prototype.try` would be","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I just realized that I had previously suggested a <code>Function.prototype.try</code>, and that kind of conflicts with <code>Promise.try</code> in that <code>Promise</code> inherits from <code>Function</code> but <code>Promise.try</code> is a different thing than <code>Function.prototype.try</code> would be","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1713380410268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m465QHFF5xwqzs6Ic5H4zK_0ZY-IL3rLUtjNa2im5qg"},
{"content":{"body":"I feel like if we are going to use that name for something it would be better used on `Function.prototype.try`","format":"org.matrix.custom.html","formatted_body":"I feel like if we are going to use that name for something it would be better used on <code>Function.prototype.try</code>","m.mentions":{},"msgtype":"m.text"},"ts":1713380432653,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NVoCxIJUs6N7Mtg4rO-52QglfxbBVA4EGPmD311SVak"},
{"content":{"body":"`Function.prototype.try` being https://matrixlogs.bakkot.com/TC39_Delegates/2023-11-29#L10","format":"org.matrix.custom.html","formatted_body":"<code>Function.prototype.try</code> being https://matrixlogs.bakkot.com/TC39_Delegates/2023-11-29#L10","m.mentions":{},"msgtype":"m.text"},"ts":1713380478593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q62Yfp-VZtxdcKiQjdi4rS54B9if0RVbEooNZbr8fU4"},
{"content":{"body":"maybe we can just live with the conflict? but it's a bit awkward","m.mentions":{},"msgtype":"m.text"},"ts":1713380488505,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mBEtE58Bk271oUqAqZz9j2iPVY6rDS_uSAg9U7QvN1w"},
{"content":{"body":"I guess because `Promise` can't be called without `new` it is unlikely to be an issue in practice, but still","format":"org.matrix.custom.html","formatted_body":"I guess because <code>Promise</code> can't be called without <code>new</code> it is unlikely to be an issue in practice, but still","m.mentions":{},"msgtype":"m.text"},"ts":1713380545335,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rvMg2VzL_WCwTIFupjwwYoAZDxDulQZjiHlNO0YMqyk"},
{"content":{"body":"I don't think that'd be a conflict","m.mentions":{},"msgtype":"m.text"},"ts":1713381583238,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oejHrSlpCcyuYx_xp7ukzOErNvhnJn5qZ3WrDLzZSVY"},
{"content":{"body":"One returns a sync monad (can we get a `Result` type?), the other returns an async monad","format":"org.matrix.custom.html","formatted_body":"One returns a sync monad (can we get a <code>Result</code> type?), the other returns an async monad","m.mentions":{},"msgtype":"m.text"},"ts":1713381602788,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nsh72fA3-D354GDcBlWMj0_f4mM2dIAIFFRMBuSVs94"},
{"content":{"body":"Someone actually just asked for `Result` in the internal Google chat yesterday","format":"org.matrix.custom.html","formatted_body":"Someone actually just asked for <code>Result</code> in the internal Google chat yesterday","m.mentions":{},"msgtype":"m.text"},"ts":1713381625678,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$llDr-G6B4NCxDx2T4WzW5QKNHakdCJu8_bhDUjcGFH4"},
{"content":{"body":"> <@jridgewell:matrix.org> I don't think that'd be a conflict\n\nPromise is an instance if function, so it would shadow .try with an incompatible implementation ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oejHrSlpCcyuYx_xp7ukzOErNvhnJn5qZ3WrDLzZSVY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br />I don't think that'd be a conflict</blockquote></mx-reply>Promise is an instance if function, so it would shadow .try with an incompatible implementation","m.relates_to":{"m.in_reply_to":{"event_id":"$oejHrSlpCcyuYx_xp7ukzOErNvhnJn5qZ3WrDLzZSVY"}},"msgtype":"m.text"},"ts":1713381804661,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0ZnIPJDcjE_qToZeVc1wHkvF0Ut_u7nPBpWX_alcLk4"},
{"content":{"body":"I understand, but disagree that it’s incompatible","msgtype":"m.text"},"ts":1713381834789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-jdZokO2ry9oxwzIIjww_W_ZNgaFFWWuWK9w5soKshc"},
{"content":{"body":"It’s returning the type appropriate for the constructor","msgtype":"m.text"},"ts":1713381860967,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bQnbPjim8l_1oD8bA4Yt_nxE4klBH7aMz2b6L6b-dZo"},
{"content":{"body":"And I'm now remembering that `Promise.try` receive the fn to call as its first argument, and `Function.try` would not.","format":"org.matrix.custom.html","formatted_body":"And I'm now remembering that <code>Promise.try</code> receive the fn to call as its first argument, and <code>Function.try</code> would not.","m.mentions":{},"msgtype":"m.text"},"ts":1713382006036,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$75eBSuVmdNAsp9yXOkQlWwLQtGI_B2rbawlecn2e0MU"},
{"content":{"body":" * And I'm now realizing that `Promise.try` receive the fn to call as its first argument, and `Function.try` would not.","format":"org.matrix.custom.html","formatted_body":" * And I'm now realizing that <code>Promise.try</code> receive the fn to call as its first argument, and <code>Function.try</code> would not.","m.mentions":{},"m.new_content":{"body":"And I'm now realizing that `Promise.try` receive the fn to call as its first argument, and `Function.try` would not.","format":"org.matrix.custom.html","formatted_body":"And I'm now realizing that <code>Promise.try</code> receive the fn to call as its first argument, and <code>Function.try</code> would not.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$75eBSuVmdNAsp9yXOkQlWwLQtGI_B2rbawlecn2e0MU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1713382013168,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yB_a381eHd3nKX-GyKi9TvLxKP4PRBizGczzOv73Rqo"},
{"content":{"body":"Never mind, ignore my comments.","m.mentions":{},"msgtype":"m.text"},"ts":1713382019956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qHbfm8TfRU_Yp0cz2cdczbsa27y5yCIfhjuKQB_cpXI"},
{"content":{"body":"https://github.com/tc39/ecma262/pull/3313","m.mentions":{},"m.relates_to":{"event_id":"$3TqQrnjSglufq0oLV0DCwv6Tot95pAE-UY4zNeLyR4w","is_falling_back":true,"m.in_reply_to":{"event_id":"$ktoLsFRCCGJ43FvN06WYF78wWlX4dSARfZvsvfH8q5g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1713395251965,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$C3lHGHuBZu6YN1Hk_XbBNLNgB6Cce0_QmY1wjtpt3s0"},
{"content":{"body":"> <@jridgewell:matrix.org> Someone actually just asked for `Result` in the internal Google chat yesterday\n\nSomething along the lines of `Option` that I've been talking about in relation to extractors and pattern matching and ADT enums? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$llDr-G6B4NCxDx2T4WzW5QKNHakdCJu8_bhDUjcGFH4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br />Someone actually just asked for <code>Result</code> in the internal Google chat yesterday</blockquote></mx-reply>Something along the lines of <code>Option</code> that I've been talking about in relation to extractors and pattern matching and ADT enums?","m.relates_to":{"m.in_reply_to":{"event_id":"$llDr-G6B4NCxDx2T4WzW5QKNHakdCJu8_bhDUjcGFH4"}},"msgtype":"m.text"},"ts":1713396387057,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZCknKLLdPpaeOrHEWoR49wd9XV7KHL-NVQwa0bD5Hzg"},
{"content":{"body":" Similar but not quite, since `None` can’t carry data that `Err` can","format":"org.matrix.custom.html","formatted_body":"Similar but not quite, since <code>None</code> can’t carry data that <code>Err</code> can","msgtype":"m.text"},"ts":1713396480447,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Bv4BfiwQhXAycFYJV6zONjaNN8WRYSM5_GgawfYacfc"},
{"content":{"body":"Fair, though `Result` still seems like something in the same ballpark ","format":"org.matrix.custom.html","formatted_body":"Fair, though <code>Result</code> still seems like something in the same ballpark","msgtype":"m.text"},"ts":1713396556388,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vShfTQhdZC-viE39Jz8vP2cSWurOotw1bXqKlgnpG3g"}
]