[
{"content":{"body":"it's T-1 hours and still no VC link?","m.mentions":{},"msgtype":"m.text"},"ts":1722268749806,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5tMqYBFXSy4tmQJEEbSl6B-wen3rbTbCGrn3Zsor94A"},
{"content":{"body":"@shuyuguo:matrix.org VC link is up now","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a> VC link is up now","msgtype":"m.text"},"ts":1722269650653,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xSwluHGeh-TvHr6SVDDV1tFMlYZDBQqJtRGCqy0haNA"},
{"content":{"body":"we have to sign into webex?","m.mentions":{},"msgtype":"m.text"},"ts":1722269967646,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$JPAvl8PGhNbNPALPPtoXUaxJhUICmzb4HpHc0Mwzx4M"},
{"content":{"body":" * Draft schedule is up:\nhttps://github.com/tc39/Reflector/issues/536","m.mentions":{},"m.new_content":{"body":"Draft schedule is up:\nhttps://github.com/tc39/Reflector/issues/536","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AIWMtSWhaFFy0fV45fErqIYKFX3MMkmmAjAufzyHpHc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722269984150,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$kAXervZKLx4S9SgBHjphOb8kh3zYMOLue_1FSlN4vjc"},
{"content":{"body":"no","m.mentions":{},"msgtype":"m.text"},"ts":1722269991543,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Thf-qghhFAUvbA0545nWyOA759lhE7nwMAgNAbYJlsU"},
{"content":{"body":"oh i see. the screen saying sign in with existing account got me 😄","m.mentions":{},"msgtype":"m.text"},"ts":1722270066084,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZngjX2RptB1tigTPmUrkmE--M5-kf-3H84j1jBY6W00"},
{"content":{"body":"and you don't have to use the app either -- you can use browser ","m.mentions":{},"msgtype":"m.text"},"ts":1722270175071,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$f0vzTtyyeBvWQfT07xoTwPjL26jSMO7oKXyflyxJhJE"},
{"content":{"body":"The meeting will begin in 11 minutes.  There are seven of us in the call now.","m.mentions":{},"msgtype":"m.text"},"ts":1722271725327,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1JBenqvpW1TXdvRds2j18J6D9s9LlGKr-G0unS6Nao4"},
{"content":{"body":"i'm here! hi!","m.mentions":{},"msgtype":"m.text"},"ts":1722271738636,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$HdY2qfl3AtebBVe3T9MZmA3J-ZZanuWhYjSb-2ZGmBY"},
{"content":{"body":"i'm in the self-imposed lobby bc i'm on the phone","m.mentions":{},"msgtype":"m.text"},"ts":1722271749591,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$N2xgT0wKUUsv0d8DZSFyzcyhms5u8LiF_f-FE4mYhUY"},
{"content":{"body":"Is the lobby music good?  Do you need any any help progressing?","m.mentions":{},"msgtype":"m.text"},"ts":1722271783302,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$27OUyGHg_gooNx9FND08k0xZvMs9ggqewNtAIOiX7wc"},
{"content":{"body":"lol thank you webex, i noticed: https://snaps.akiro.se/2407_ua0hr.jpg","m.mentions":{},"msgtype":"m.text"},"ts":1722271817082,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$hO1F7SXcBUcDfORcyAVGxtRne3j0_jvRUpFOyqu-dxo"},
{"content":{"body":"could just have the meeting in the lobby","m.mentions":{},"msgtype":"m.text"},"ts":1722271859140,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$u2z1KvsJiPl5aR0_PVVY8DPfHj0pSN1cXb1tBoKwbmk"},
{"content":{"body":"3 minutes... encounting","m.mentions":{},"msgtype":"m.text"},"ts":1722272231856,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$qdniGasioxCx-OFnuC_oN6T58o0xmzfEpStIflmyHvA"},
{"content":{"body":"_encounting_ ?","format":"org.matrix.custom.html","formatted_body":"<em>encounting</em> ?","m.mentions":{},"msgtype":"m.text"},"ts":1722272266769,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$aeueoWMj2NSuHfSNOkivw2ooXVyGeAl2NhGVxoXZymU"},
{"content":{"body":"(I will find you the relevant movie clip soon)","m.mentions":{},"msgtype":"m.text"},"ts":1722272333979,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$m1udM_4mKyDCfJP-7wYoEwIBDiq5_ZWXnaoD0WFl71s"},
{"content":{"body":"rob you're roboting a lot","m.mentions":{},"msgtype":"m.text"},"ts":1722272621690,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wAIh6eIQBPoUtL9rowcrboMkj9FPH8CyK0QmrcTAWFM"},
{"content":{"body":" maybe turn your video off?","m.mentions":{},"msgtype":"m.text"},"ts":1722272674825,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$stIla0CFUKTjMDNJp2fTs4LiKgmoDnIW3UPU8L_YURM"},
{"content":{"body":"I am getting a new router delivered tomorrow.","m.mentions":{},"msgtype":"m.text"},"ts":1722273018185,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$3XXEpRQJfhVKSsIBklc6jFwwv39-pfMgjtudU6IUEUQ"},
{"content":{"body":"my webex cuts out for like 5s every 2 mins or so","m.mentions":{},"msgtype":"m.text"},"ts":1722273429413,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YLn8MNFraT680X543r9w4EWkmUQqyW_tYkyvjRT5DnU"},
{"content":{"body":"i wonder if it's a web version problem or a corp wifi problem...","m.mentions":{},"msgtype":"m.text"},"ts":1722273442991,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ERlZ9ArmuOEGyYGtRplOAhpSkwudIDDiwuUrQ7M25M0"},
{"content":{"body":"Wow 4 new members 🚀","m.mentions":{},"msgtype":"m.text"},"ts":1722273443999,"senderName":"jkup","senderId":"@jkup:matrix.org","id":"$e8Z4oecCRmIzzsn5CeRSOGj-k66Y-deKz3OioY5GT5k"},
{"content":{"body":"i think its a web version problem","m.mentions":{},"msgtype":"m.text"},"ts":1722273513982,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x3eYYWLeROLxsOLG9aJ3x2Fm7vYLYlOra3wB5TtkX8I"},
{"content":{"body":"i don't want to install the native client but all right","m.mentions":{},"msgtype":"m.text"},"ts":1722273605012,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dNSmpTNLhHSXEUvfindK5BI1DD6-sp0Y9y-0RfYlnSE"},
{"content":{"body":"But we can say, Welcome Back *Editor* Ben.","format":"org.matrix.custom.html","formatted_body":"But we can say, Welcome Back <em>Editor</em> Ben.","m.mentions":{},"msgtype":"m.text"},"ts":1722274835160,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$o8laV2RrnQXqBVgWkll-RJO0DA1Au-WaGMMIIrDezF8"},
{"content":{"body":"Chip had me in the first half","msgtype":"m.text"},"ts":1722274867699,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$PkfRgCXK9MUVohyb8HAXyXMrK7HhV83Tph1Nmz_gVc8"},
{"content":{"body":"i got a new coin you gotta hear about then","m.mentions":{},"msgtype":"m.text"},"ts":1722274891078,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bgiI3nfzNT50PFvtnqtCb9Laqm0CwR8dvPzpsRbeUyc"},
{"content":{"body":"fomo","m.mentions":{},"msgtype":"m.text"},"ts":1722275553228,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Z-NJgzt8ST3LjRa_b4BKsONW0Rw015dKb96OnXGEdiU"},
{"content":{"body":"I wanted to say something funny but my mic is not working","m.mentions":{},"msgtype":"m.text"},"ts":1722275692541,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q0zaIRRcUmrl92BuGbvhrl8DMyormCL0368yZ1oRIg0"},
{"content":{"body":"Thanks everybody!","m.mentions":{},"msgtype":"m.text"},"ts":1722275697383,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$RE4hHv9zb-mE1QiNxESclS5J9F-Aat6if2C50gJ_HJg"},
{"content":{"body":"Somebody say that I say thanks :P","m.mentions":{},"msgtype":"m.text"},"ts":1722275715149,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_v2D3F2y2cOR4aUWgT_IptyqMwxCBAKnoGKNVz1lwy8"},
{"content":{"body":"should there be a `String.prototype.chars` for when you really do want to iterate over a string's characters","format":"org.matrix.custom.html","formatted_body":"should there be a <code>String.prototype.chars</code> for when you really do want to iterate over a string's characters","m.mentions":{},"msgtype":"m.text"},"ts":1722276791455,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$1alkkUmyxI20UeCsXCxCousAqu68k1zh1hvW-DxGNfA"},
{"content":{"body":"\"characters\" is a wildly overloaded term","m.mentions":{},"msgtype":"m.text"},"ts":1722276832376,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4q0oNK0LUbaCE6Zipry3u5HqFPSAU8nAE_oeHnp74xI"},
{"content":{"body":"there should be a `String.prototype.codepoints` to iterate over a string's codepoints","format":"org.matrix.custom.html","formatted_body":"there should be a <code>String.prototype.codepoints</code> to iterate over a string's codepoints","m.mentions":{},"msgtype":"m.text"},"ts":1722276845275,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vhd7ez4kgkEo0fqZtIPQFLt8G3wDKrW17uuphJQ1cjw"},
{"content":{"body":"I'm less convinced of a `.graphemes` because that's a 402 thing but it could perhaps be done","format":"org.matrix.custom.html","formatted_body":"I'm less convinced of a <code>.graphemes</code> because that's a 402 thing but it could perhaps be done","m.mentions":{},"msgtype":"m.text"},"ts":1722276864889,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YooKzxbfccVCsn-zEA8jKqoTQFgcn1jQuEIPJYWnkrc"},
{"content":{"body":"I am not sure there's any use cases for a `.codeunits` but if you have a strong use case that could be done as well","format":"org.matrix.custom.html","formatted_body":"I am not sure there's any use cases for a <code>.codeunits</code> but if you have a strong use case that could be done as well","m.mentions":{},"msgtype":"m.text"},"ts":1722276891478,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pKShfOQNhI6Yc4-WxG5TotryW2BBHCUtJB5pPYdBJeM"},
{"content":{"body":"my brain assumed it would be `.values`","format":"org.matrix.custom.html","formatted_body":"my brain assumed it would be <code>.values</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722276909875,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$bg1NFzVOJKFilG8cC6jmAe0_EsWPtPHeHX-a6MVmiX8"},
{"content":{"body":"but i guess [Symbol.iterator]() is a better way to spell that","format":"org.matrix.custom.html","formatted_body":"but i guess Symbol.iterator is a better way to spell that","m.mentions":{},"msgtype":"m.text"},"ts":1722276927411,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5-4bXZt_tPuG1EhQhpFxjGaINfRh9H71Si5NdnmvE7s"},
{"content":{"body":"yea mb i meant codepoints","m.mentions":{},"m.relates_to":{"event_id":"$Vhd7ez4kgkEo0fqZtIPQFLt8G3wDKrW17uuphJQ1cjw","is_falling_back":true,"m.in_reply_to":{"event_id":"$Vhd7ez4kgkEo0fqZtIPQFLt8G3wDKrW17uuphJQ1cjw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722277018301,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$7iN6pAEH6QxwgTQnMGsv_tlvDv-J1DZeF14reX9Dn8I"},
{"content":{"body":"My mic keeps not working in webex even with different browsers and after rebooting 😭","m.mentions":{},"msgtype":"m.text"},"ts":1722277467152,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$qbxQa7kbNIesrK_5dmSph3IIhlcSeloviUZFM97rS1o"},
{"content":{"body":"Oh it works on my ipad","m.mentions":{},"msgtype":"m.text"},"ts":1722277684906,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fgEOSX4vBWl8OC7g_G0d4hOoRxXWGwizTj8angnLJ4M"},
{"content":{"body":"Good","m.mentions":{},"msgtype":"m.text"},"ts":1722277686444,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$e38atxHRSl9fMXgcpfLUIDERSBActh25cFO6BWF8h9c"},
{"content":{"body":"When we decide that we want to change the behavior of spec operations like `toFixed` do we comment or rename them to say that they're legacy?","format":"org.matrix.custom.html","formatted_body":"When we decide that we want to change the behavior of spec operations like <code>toFixed</code> do we comment or rename them to say that they're legacy?","m.mentions":{},"msgtype":"m.text"},"ts":1722277724858,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Gjy1HqCaFKxCsr_IJvR2nZSJlJ4p5j1ekGYHojXz4AY"},
{"content":{"body":"If we don't, would it be worthwhile to do that so we don't accidentally slip in new uses in the future? Or we could have a spec linter rule, idk if such a tool exists?","m.mentions":{},"msgtype":"m.text"},"ts":1722277787166,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$uLoRnCOyTg-ImnqBR2DFeui4KvbdN8h3DAw47Gq-m74"},
{"content":{"body":"yeah, probably we should rename the existing ones and add new stricter ones","m.mentions":{},"msgtype":"m.text"},"ts":1722277833844,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w-04WeEw9X5jVFItabzhsZrneomEwpD4x3G7qES2A5I"},
{"content":{"body":"or add a \"looseness\" parameter, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1722277842416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y9qU2DPqMnU_-I84mqoD49c25g1vOb7izpdDTzLqyKg"},
{"content":{"body":"Are there other changes that we would make to Temporal if we wanted to apply all the conventions?","msgtype":"m.text"},"ts":1722277930572,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bd6KU3EeLSWAi7bjphnlBKGetCC4e23cjwztUT6sGwM"},
{"content":{"body":"not doing any coercions at all :)","m.mentions":{},"msgtype":"m.text"},"ts":1722277941792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mfXsLsVGbin9yt-8xtCpgy2_OFLBMBGqJ9P2jowR0nM"},
{"content":{"body":"which would save a lot of tests, among other things","m.mentions":{},"msgtype":"m.text"},"ts":1722277949498,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xzU9AfylHZaZIHulsHdSb0ShXpcbf19KqCiLzPEPx80"},
{"content":{"body":"I meant for the conventions that we already adopted","msgtype":"m.text"},"ts":1722277964530,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kjccqf0L9ur3SAXsGuadat4brlowZAFAVwzTkAaEEow"},
{"content":{"body":"we already adopted \"don't do any coercions\"","m.mentions":{},"msgtype":"m.text"},"ts":1722277976039,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pb8tO6o1IF7YdVAk4L-qk15g60rSZ61Iloayb_1cCbs"},
{"content":{"body":"Oh right","msgtype":"m.text"},"ts":1722277983692,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OAEDJ-GKE-rAAYkkBYdl85qaSKssCXJPL5m0sUWf__8"},
{"content":{"body":"I am in favor of applying this to Temporal","msgtype":"m.text"},"ts":1722277999204,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9TVAD5czGamzmqDSIVMLanRYGeX40tPW7TjblUOy8sI"},
{"content":{"body":"I think it is much more likely that we can apply this change to 402.","msgtype":"m.text"},"ts":1722278048148,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$73tM77BuKfUWjeFf2fwmksc2YuzmMgD9EwrjFCDgjpA"},
{"content":{"body":"We aren’t talking about 262 overall, just those three methods","msgtype":"m.text"},"ts":1722278062023,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KT26FS10tU5kFWsFxSvwji32insHAzdiOFM22Jtp9vc"},
{"content":{"body":"FWIW for Temporal.Duration we already rejected non-integral inputs because of people putting in values like `Temporal.Duration.from({ hours: 1.5 })` ","format":"org.matrix.custom.html","formatted_body":"FWIW for Temporal.Duration we already rejected non-integral inputs because of people putting in values like <code>Temporal.Duration.from({ hours: 1.5 })</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722278127453,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$1WHIUjCCdXhD5a32b4FznlkHhw2tjk3HYedh9GQyZZQ"},
{"content":{"body":"I'm open to going back and changing other things like `roundingIncrement`, `fractionalSecondDigits`, and `Temporal.PlainDate.from({ year: 2024.5, month: 7.5, day: 29.5 })` to reject non-integral inputs but I'd like us to explicitly approve that now, rather than me coming back to a following meeting with a PR","format":"org.matrix.custom.html","formatted_body":"I'm open to going back and changing other things like <code>roundingIncrement</code>, <code>fractionalSecondDigits</code>, and <code>Temporal.PlainDate.from({ year: 2024.5, month: 7.5, day: 29.5 })</code> to reject non-integral inputs but I'd like us to explicitly approve that now, rather than me coming back to a following meeting with a PR","m.mentions":{},"msgtype":"m.text"},"ts":1722278248463,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$rgl2HHAYM4aJpR9nH_ciE7R6KX0b2ZHNjqtu_UfztZM"},
{"content":{"body":"> <@pchimento:igalia.com> I'm open to going back and changing other things like `roundingIncrement`, `fractionalSecondDigits`, and `Temporal.PlainDate.from({ year: 2024.5, month: 7.5, day: 29.5 })` to reject non-integral inputs but I'd like us to explicitly approve that now, rather than me coming back to a following meeting with a PR\n\nWhat about the other conventions?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rgl2HHAYM4aJpR9nH_ciE7R6KX0b2ZHNjqtu_UfztZM\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I'm open to going back and changing other things like <code>roundingIncrement</code>, <code>fractionalSecondDigits</code>, and <code>Temporal.PlainDate.from({ year: 2024.5, month: 7.5, day: 29.5 })</code> to reject non-integral inputs but I'd like us to explicitly approve that now, rather than me coming back to a following meeting with a PR</blockquote></mx-reply>What about the other conventions?","m.relates_to":{"m.in_reply_to":{"event_id":"$rgl2HHAYM4aJpR9nH_ciE7R6KX0b2ZHNjqtu_UfztZM"}},"msgtype":"m.text"},"ts":1722278303817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q7y6zJNEzo-EYDC03SugE8DgrLwuW-ipU9O0Bo3p2v4"},
{"content":{"body":"I don't know off the top of my head how much deviation there is from the other conventions, I'd have to check","m.mentions":{},"msgtype":"m.text"},"ts":1722278334222,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$x07IWL0-OzyLq_FUE_x8i0oIzE-5PfPILaPlkJC1EpU"},
{"content":{"body":"IMO, it makes sense that year, month, and day require integral inputs, but not hour/minute/second. Given one of the goals of Temporal is to make date and time math easier, not being able to write `Temporal.Duration.from({ hours: 1.5 })` is unfortunate. ","format":"org.matrix.custom.html","formatted_body":"IMO, it makes sense that year, month, and day require integral inputs, but not hour/minute/second. Given one of the goals of Temporal is to make date and time math easier, not being able to write <code>Temporal.Duration.from({ hours: 1.5 })</code> is unfortunate.","m.mentions":{},"msgtype":"m.text"},"ts":1722278354988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZPYmg0p5q8pvPjptn3noEL6EtmKCr3NNpbY8RyrY3DA"},
{"content":{"body":"should `Temporal.Duration.from({ hours: 1.15 })` be 1.15 hours or 1.1499999999999999112 hours? those are distinct nanosecond values","format":"org.matrix.custom.html","formatted_body":"should <code>Temporal.Duration.from({ hours: 1.15 })</code> be 1.15 hours or 1.1499999999999999112 hours? those are distinct nanosecond values","m.mentions":{},"msgtype":"m.text"},"ts":1722278485193,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$F3tuMFcT0AvrMGZ-87vk2PmqmKhWWQWK5Sr-iJimf30"},
{"content":{"body":"> <@littledan:matrix.org> What about the other conventions?\n\nAre there any? Other than the new strings-aren't-iterable one I guess. https://github.com/tc39/how-we-work/blob/main/normative-conventions.md","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Q7y6zJNEzo-EYDC03SugE8DgrLwuW-ipU9O0Bo3p2v4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What about the other conventions?</blockquote></mx-reply>Are there any? Other than the new strings-aren't-iterable one I guess. https://github.com/tc39/how-we-work/blob/main/normative-conventions.md","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q7y6zJNEzo-EYDC03SugE8DgrLwuW-ipU9O0Bo3p2v4"}},"msgtype":"m.text"},"ts":1722278517556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tLaH8pX0R557osIZNNY2wXKcanV3TnhJqmNioHJiz_U"},
{"content":{"body":"Well I was wondering if ptomato had an opinion on the “not coercing at all” one with respect to Temporal","msgtype":"m.text"},"ts":1722278566006,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tnbzLcUe3yovac4kP42IGR-hN-UIv0txFmbEJCICYFc"},
{"content":{"body":"I regularly want to be able to easily scale a duration to implement backoff, and there's already no convenient way to scale a fixed duration (e.g., hours and smaller). ","m.mentions":{},"msgtype":"m.text"},"ts":1722278585143,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ynzSF70l6eyHn3uuTuHsnuNit1WVt9G2vdUd8M1uYV0"},
{"content":{"body":"> <@littledan:matrix.org> Well I was wondering if ptomato had an opinion on the “not coercing at all” one with respect to Temporal\n\nI don't have much of an opinion, but what I don't want is to have to come back to the next meeting with a PR","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tnbzLcUe3yovac4kP42IGR-hN-UIv0txFmbEJCICYFc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Well I was wondering if ptomato had an opinion on the “not coercing at all” one with respect to Temporal</blockquote></mx-reply>I don't have much of an opinion, but what I don't want is to have to come back to the next meeting with a PR","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tnbzLcUe3yovac4kP42IGR-hN-UIv0txFmbEJCICYFc"}},"msgtype":"m.text"},"ts":1722278651491,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$C1Jvj6-E_GUQE7KDe6kRP_nOKsY9BWd6WDuKG1FLfz4"},
{"content":{"body":"> <@pchimento:igalia.com> I don't have much of an opinion, but what I don't want is to have to come back to the next meeting with a PR\n\nI agree, we should be able to agree on the conclusion in principle and then you should just be able to land it with some async review","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24C1Jvj6-E_GUQE7KDe6kRP_nOKsY9BWd6WDuKG1FLfz4\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I don't have much of an opinion, but what I don't want is to have to come back to the next meeting with a PR</blockquote></mx-reply>I agree, we should be able to agree on the conclusion in principle and then you should just be able to land it with some async review","m.relates_to":{"m.in_reply_to":{"event_id":"$C1Jvj6-E_GUQE7KDe6kRP_nOKsY9BWd6WDuKG1FLfz4"}},"msgtype":"m.text"},"ts":1722278732438,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$82rG1wDiqkX9eCcspaWX9-E8RM2pjxawqNRwcDF3DMI"},
{"content":{"body":"for backoff I'm more likely to convert a `Duration` input into ms or ns via `total` and just work with the single unit that I can scale appropriately.","format":"org.matrix.custom.html","formatted_body":"for backoff I'm more likely to convert a <code>Duration</code> input into ms or ns via <code>total</code> and just work with the single unit that I can scale appropriately.","m.mentions":{},"msgtype":"m.text"},"ts":1722278736539,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TjlSxeFZQgwzuKYX_1RPjQDd2NG5NUSC2EhAj3k-TSs"},
{"content":{"body":"Rbuckton: you are making a very different feature request from this coercion discussion. Probably this is best for the temporal v2 bucket","msgtype":"m.text"},"ts":1722278776165,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bwdtPs4ncMZfGgHziaeZXUWv28kQG5INM6um-_qMcrc"},
{"content":{"body":"rbuckton: we considered a `Temporal.Duration.prototype.multiply` at one point but decided it was out of scope. if you have an idea for how it should work, could you open an issue on https://github.com/js-temporal/proposal-temporal-v2/? I think the use case would be helpful","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: we considered a <code>Temporal.Duration.prototype.multiply</code> at one point but decided it was out of scope. if you have an idea for how it should work, could you open an issue on https://github.com/js-temporal/proposal-temporal-v2/? I think the use case would be helpful","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1722278825737,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$9L_iWe_VMJDBYV-tO85DHhI7HS5pfCEtfpbDE8Dy4Og"},
{"content":{"body":"> <@littledan:matrix.org> Rbuckton: you are making a very different feature request from this coercion discussion. Probably this is best for the temporal v2 bucket\n\nPerhaps. It started as commentary related to the statement that Temporal rejects non-integral values.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bwdtPs4ncMZfGgHziaeZXUWv28kQG5INM6um-_qMcrc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Rbuckton: you are making a very different feature request from this coercion discussion. Probably this is best for the temporal v2 bucket</blockquote></mx-reply>Perhaps. It started as commentary related to the statement that Temporal rejects non-integral values.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bwdtPs4ncMZfGgHziaeZXUWv28kQG5INM6um-_qMcrc"}},"msgtype":"m.text"},"ts":1722278855296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8zuqUPQQ-h0kprl_rYb4AzojVCtVVpQQBXEKP3QvMvs"},
{"content":{"body":"oh actually we already have one: https://github.com/js-temporal/proposal-temporal-v2/issues/7","m.mentions":{},"msgtype":"m.text"},"ts":1722278891154,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$CJ5qg0GuoFQ9INZoCxytmB_J_ygQESHa2zStX7T5L3I"},
{"content":{"body":"littledan ptomato this meeting has some extra time if you want to put together a last-minute item for dropping coercion from temporal, though it is very far past the deadline so it would need to be conditional approval","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a> this meeting has some extra time if you want to put together a last-minute item for dropping coercion from temporal, though it is very far past the deadline so it would need to be conditional approval","m.mentions":{"user_ids":["@littledan:matrix.org","@pchimento:igalia.com"]},"msgtype":"m.text"},"ts":1722279098985,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-9DA78D4TZ85tj72KGQP1Z7lwVHaHwqtBYtnuKP3nMs"},
{"content":{"body":"Why not stage 4 today for import attributes?","msgtype":"m.text"},"ts":1722279315450,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SHy2PMvahOp74IOeYMMWGzOxtxwc7McMBYsAXQqGylw"},
{"content":{"body":"> <@bakkot:matrix.org> littledan ptomato this meeting has some extra time if you want to put together a last-minute item for dropping coercion from temporal, though it is very far past the deadline so it would need to be conditional approval\n\nConditional on what?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24-9DA78D4TZ85tj72KGQP1Z7lwVHaHwqtBYtnuKP3nMs\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">ptomato</a> this meeting has some extra time if you want to put together a last-minute item for dropping coercion from temporal, though it is very far past the deadline so it would need to be conditional approval</blockquote></mx-reply>Conditional on what?","m.relates_to":{"m.in_reply_to":{"event_id":"$-9DA78D4TZ85tj72KGQP1Z7lwVHaHwqtBYtnuKP3nMs"}},"msgtype":"m.text"},"ts":1722279347656,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hQxFbvj-CMhW4ckygdRvVo8OuCJbA8axqijLzuQNEE8"},
{"content":{"body":"no one subsequently raising an objection at the next meeting once they'd had time to review, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1722279426404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WUjSCGEX0j0t-suL20hfWE3kLBmaR73tU1m77ItPpt4"},
{"content":{"body":"waldemar: what's the issue with the spec text?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: what's the issue with the spec text?","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1722279489853,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bQt5tOoAWtFE56bYh9mcQzMGbR1BK8TBUqnq7oZ5xXM"},
{"content":{"body":"OK, this is a different way of using conditional advancement than we usually do, which is more about conditions which can be met async ","format":"org.matrix.custom.html","formatted_body":"OK, this is a different way of using conditional advancement than we usually do, which is more about conditions which can be met async","msgtype":"m.text"},"ts":1722279507440,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jsUubbPM9qVuh8ghLesENXe2EzD2psl3k87SoSDO2Rg"},
{"content":{"body":"I'm having trouble with my microphone,  but I'll get in on notes again","m.mentions":{},"msgtype":"m.text"},"ts":1722283267443,"senderName":"Ben","senderId":"@benallen:igalia.com","id":"$q6N0d00MBJTZ80alpMIZHeYr8EQ-ngnu1kyWWuSIVe4"},
{"content":{"body":"Hat's are still available","m.mentions":{},"msgtype":"m.text"},"ts":1722283416248,"senderName":"saminahusain","senderId":"@saminahusain:matrix.org","id":"$WUAxbbzDj5fQvHIonoOSIBtiWn1O6c3skP-6ZFUTkYc"},
{"content":{"body":"I can help in 5ish min","msgtype":"m.text"},"ts":1722283422072,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$28i1jOVXtu0FPzS4XEsoSWCWZC87WVqdpkIaLadSyNg"},
{"content":{"body":"I can help until AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1722283492095,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Z-NLq6YkVlHzjim-VsPBf1kBXz3CjR4P3n3nowr1Z-0"},
{"content":{"body":"How can I register for one? 🤠","m.mentions":{},"m.relates_to":{"event_id":"$WUAxbbzDj5fQvHIonoOSIBtiWn1O6c3skP-6ZFUTkYc","is_falling_back":true,"m.in_reply_to":{"event_id":"$WUAxbbzDj5fQvHIonoOSIBtiWn1O6c3skP-6ZFUTkYc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722283655863,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$e_Ey7mgrfhRpT7B93i2cf4rqXYfLCZ0oxjKVc7_i-Jw"},
{"content":{"body":"I don't recall a linearity consensus","msgtype":"m.text"},"ts":1722283715016,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$GrZiWdg0aMjgoWssy-iYQXxU_i1_Ps0gRM_N4y71UT8"},
{"content":{"body":"monotonicity only, which is what we have","msgtype":"m.text"},"ts":1722283724228,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_kDcBnivYv2XCXdjktmRumxJKSuEolAom0IUwAJ3gQ8"},
{"content":{"body":"I thought exponential backoff was waiting longer and longer (I don't have background in this area)","m.mentions":{},"msgtype":"m.text"},"ts":1722283848144,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v3rkvY8pqCFbww1Rp9xSukTZFqegkXOf86n48p0oYwg"},
{"content":{"body":"> <@littledan:matrix.org> I thought exponential backoff was waiting longer and longer (I don't have background in this area)\n\nI also thought the same, but wikipedia clearly shows it's the other way around","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v3rkvY8pqCFbww1Rp9xSukTZFqegkXOf86n48p0oYwg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I thought exponential backoff was waiting longer and longer (I don&#39;t have background in this area)</blockquote></mx-reply>I also thought the same, but wikipedia clearly shows it's the other way around","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v3rkvY8pqCFbww1Rp9xSukTZFqegkXOf86n48p0oYwg"}},"msgtype":"m.text"},"ts":1722283869152,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$I_Ug4v3quKbhEMKMaqRXzizpDEEnoiOtiuQpSA7UQbE"},
{"content":{"body":"depends on what you're talking about","m.mentions":{},"msgtype":"m.text"},"ts":1722283880316,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IauQ2VEszRIGBbzVnsDYmryg8_TE2xWI27ZFhQsqFnw"},
{"content":{"body":"For some reason I always assumed that pause was monotonically increasing, and not monotonically decreasing","m.mentions":{},"msgtype":"m.text"},"ts":1722283884784,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$crAka8BKOMg_U5M7e_KganW2GVd3jiLtwC16XHXNp2g"},
{"content":{"body":"in this case it gets shorter and shorter until falling back to the slow path","m.mentions":{},"msgtype":"m.text"},"ts":1722283888951,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Tzw8ToVlro55_Z2266Zlgt4cym1tHSanO8bjmGfjajQ"},
{"content":{"body":"> SYG: Okay, understood, I would document that, that the input number is intended to increase linearly.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>SYG: Okay, understood, I would document that, that the input number is intended to increase linearly.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722283905164,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4dj-IHIQX-GnORRZNvdha2aydvWWt_8PKF8krJzFuNw"},
{"content":{"body":"> <@littledan:matrix.org> I thought exponential backoff was waiting longer and longer (I don't have background in this area)\n\n * I also thought the same, ~~but wikipedia clearly shows it's the other way around~~","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v3rkvY8pqCFbww1Rp9xSukTZFqegkXOf86n48p0oYwg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I thought exponential backoff was waiting longer and longer (I don't have background in this area)</blockquote></mx-reply> * I also thought the same, ~~but wikipedia clearly shows it's the other way around~~","m.mentions":{},"m.new_content":{"body":"I also thought the same, ~~but wikipedia clearly shows it's the other way around~~","format":"org.matrix.custom.html","formatted_body":"I also thought the same, ~~but wikipedia clearly shows it's the other way around~~","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I_Ug4v3quKbhEMKMaqRXzizpDEEnoiOtiuQpSA7UQbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722283912430,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$88zDvf4GByhSMBcnush95Xce7UxQ635yNb62NM4K1Ac"},
{"content":{"body":" * I also thought the same, <del>but wikipedia clearly shows it's the other way around</del>","format":"org.matrix.custom.html","formatted_body":" * I also thought the same, <del>but wikipedia clearly shows it's the other way around</del>","m.mentions":{},"m.new_content":{"body":"I also thought the same, <del>but wikipedia clearly shows it's the other way around</del>","format":"org.matrix.custom.html","formatted_body":"I also thought the same, <del>but wikipedia clearly shows it's the other way around</del>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I_Ug4v3quKbhEMKMaqRXzizpDEEnoiOtiuQpSA7UQbE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722283918701,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_L7DiRPUf0UoXBpV8aLdoUgTw-7aFqK0TKpENycUz7M"},
{"content":{"body":"wait, that's still not talking about the relationship","msgtype":"m.text"},"ts":1722283952574,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KNia851uL4Z-ux46-VxxsY7j_vmKwp-G_-LJpUU8nmM"},
{"content":{"body":"yes the input can increase linearly, but that doesn't mean it is linearly proportional to the time waited","msgtype":"m.text"},"ts":1722283975809,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rgC8lWvPLvyNGmKLH__5aV4lYwUntaRRDqreu1V8bUs"},
{"content":{"body":"saying \"the spec is not intelligible\" is not an effective way to communicate because it is very unspecific.","m.mentions":{},"msgtype":"m.text"},"ts":1722284104270,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Dt-4kw-lLmchWbWCelFephwCoIXehjKXDeqz4_CZOPU"},
{"content":{"body":"It would be better to separate the discussions of what *should* happen, from how we encode this in the words","format":"org.matrix.custom.html","formatted_body":"It would be better to separate the discussions of what <em>should</em> happen, from how we encode this in the words","m.mentions":{},"msgtype":"m.text"},"ts":1722284122303,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nDxsAJEKJMw8ymJQqP9Zxx3qtAPTgOO4d7O1Q3IvaYc"},
{"content":{"body":"also there is no editorial issue with the spec as far as I can tell","msgtype":"m.text"},"ts":1722284137673,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lUOzksClgyo98z95RLWfTzdQoskWHYRHJasIX16zu-U"},
{"content":{"body":"we were very careful with the phrasing in this proposal","msgtype":"m.text"},"ts":1722284153536,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KHFTpJfNWtDGIfG0gYFRN8bKwnLs93ZA7-rAYHWhaJ4"},
{"content":{"body":"This is reminding me of the coffee `filter` in/out discussion in Nov 2019.  Folk are seeing the pause N from both sides.  Shu wants small N to mean a longer pause.","format":"org.matrix.custom.html","formatted_body":"This is reminding me of the coffee <code>filter</code> in/out discussion in Nov 2019.  Folk are seeing the pause N from both sides.  Shu wants small N to mean a longer pause.","m.mentions":{},"msgtype":"m.text"},"ts":1722284232437,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$aAGSdnuq5GPuj_D-PFSYW-QFdwSAP7YNcMIvwb4T-Pk"},
{"content":{"body":"i agree with justin that note 3 does not say what shu was saying it should say","m.mentions":{},"msgtype":"m.text"},"ts":1722284257256,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$AHLP3LvqGbdFdGo_qE2LlUpKxmFeQnC_TEKgGKEXLKo"},
{"content":{"body":"> <@robpalme:matrix.org> This is reminding me of the coffee `filter` in/out discussion in Nov 2019.  Folk are seeing the pause N from both sides.  Shu wants small N to mean a longer pause.\n\nthe two discussions are being mixed together, the editorial and normative","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aAGSdnuq5GPuj_D-PFSYW-QFdwSAP7YNcMIvwb4T-Pk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>This is reminding me of the coffee <code>filter</code> in/out discussion in Nov 2019.  Folk are seeing the pause N from both sides.  Shu wants small N to mean a longer pause.</blockquote></mx-reply>the two discussions are being mixed together, the editorial and normative","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aAGSdnuq5GPuj_D-PFSYW-QFdwSAP7YNcMIvwb4T-Pk"}},"msgtype":"m.text"},"ts":1722284287548,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_h76h_G7f5KpZjuCxxZQF5eYNWrz09Hb2lD2Ep79UU8"},
{"content":{"body":"note 1 literally says that this means a pause instruction on such architectures lol","msgtype":"m.text"},"ts":1722284290692,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pw2ArFotkw6_Pdou5rf-MWkVUOPwL7uulIsbKmrs4Po"},
{"content":{"body":"so it is confusing; we need to separate and order them","m.mentions":{},"msgtype":"m.text"},"ts":1722284294923,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T5tdn9-_ZkBcpvPT_31KxugvXzvW320iTp-ZZlRA01I"},
{"content":{"body":"My reading of step 2 is the opposite of what shu is saying, and it's not just the note being the opposite. Assuming that \"a signal is sent\" means \"wait a little bit\", for larger Ns it waits for a little bit more times","m.mentions":{},"msgtype":"m.text"},"ts":1722284411517,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$neRRaaUV0sx4rkz8ttRAlI9FzkhJ9MZiMJlC2IIzI2c"},
{"content":{"body":"I am also confused by the wording, but let's first focus on, what *should* the thing do, and then we can fix/disambiguate the wording","format":"org.matrix.custom.html","formatted_body":"I am also confused by the wording, but let's first focus on, what <em>should</em> the thing do, and then we can fix/disambiguate the wording","m.mentions":{},"msgtype":"m.text"},"ts":1722284442523,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$evbypPxuB7eCcrN-ZkgwK00mBnIEb4PNDajFMrb9yDI"},
{"content":{"body":"I think we have agreement on the normative:  the pauses between spins get bigger and bigger before going to sleep.","m.mentions":{},"msgtype":"m.text"},"ts":1722284475690,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$vKObmsCZX6zoMQ1tn2hUrU-Ll8QGD0_UocKKpTP3IGc"},
{"content":{"body":"no it was the opposite :)","m.mentions":{},"msgtype":"m.text"},"ts":1722284489420,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QUz5F8s5CXFHhvUkj35GfCyTrrKelNGxt8JiJeIdD-A"},
{"content":{"body":"> <@robpalme:matrix.org> I think we have agreement on the normative:  the pauses between spins get bigger and bigger before going to sleep.\n\nDidn't Shu say the opposite?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vKObmsCZX6zoMQ1tn2hUrU-Ll8QGD0_UocKKpTP3IGc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>I think we have agreement on the normative:  the pauses between spins get bigger and bigger before going to sleep.</blockquote></mx-reply>Didn't Shu say the opposite?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vKObmsCZX6zoMQ1tn2hUrU-Ll8QGD0_UocKKpTP3IGc"}},"msgtype":"m.text"},"ts":1722284490669,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$4bdTDx98yU_Lii5f9pskxhMY8L7OqSBkyOsyYB4uJTs"},
{"content":{"body":"also we don't have agreement; Justin is disagreeing on substance","m.mentions":{},"msgtype":"m.text"},"ts":1722284503789,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gQr5-0_rxyL93CvAy5EUgRaNdRhn8ZVTsUtqI51bM7g"},
{"content":{"body":"what is it that Shu is proposing?","m.mentions":{},"msgtype":"m.text"},"ts":1722284564011,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SSKbDPXZBVMAqXtYJ4hMJ8cnDh5_rfLf6N0gCgXMF-E"},
{"content":{"body":"We must now decide whether to spin in session or yield to the agenda :P","m.mentions":{},"msgtype":"m.text"},"ts":1722284570606,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$d2NXHFEOIuWLhGuHFZA-7vo5gdZtv9EDCF6aIYEcK0M"},
{"content":{"body":"Context switches are expensive","m.mentions":{},"msgtype":"m.text"},"ts":1722284582704,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$uYw2MZpihQTeecZLmuGJwU7ACbdLCbSOErc6Cpvaj4o"},
{"content":{"body":"Having the smaller-i-longer-wait sematnics is fine with me if it’s really how other implemenations have done it.","msgtype":"m.text"},"ts":1722284599474,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XHl1tW0YxnqH_fWYBRb_cEXNnVJ_FWClCpPQoP-FiwA"},
{"content":{"body":"pauses get bigger and smaller in mature implementations. ideally you want to have the behavior that kris explained, but implementations like linux for example also have a signal of \"starvation\" which can cause the delay to get longer as well.","m.mentions":{},"msgtype":"m.text"},"ts":1722284615543,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qlMIfKHm_GHJLRU43SZvr1mQ1yuun3DqpTEKPhLhNPg"},
{"content":{"body":"The current semantics with reworded text and note would be fine with me.","msgtype":"m.text"},"ts":1722284622510,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hnlgvXIR4oUntWBZbu3w0YW69rWOVnqXdzwgbcAOttU"},
{"content":{"body":"The current semantics reads as the opposite of the current spec/note to me.","msgtype":"m.text"},"ts":1722284651512,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IpFNGnhaOzHa3y-bAprSJv4O18YR1LN4MTmirCUG3dA"},
{"content":{"body":"will you be in Tokyo? I will bring a bunch.","m.mentions":{},"m.relates_to":{"event_id":"$WUAxbbzDj5fQvHIonoOSIBtiWn1O6c3skP-6ZFUTkYc","is_falling_back":true,"m.in_reply_to":{"event_id":"$e_Ey7mgrfhRpT7B93i2cf4rqXYfLCZ0oxjKVc7_i-Jw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722284674860,"senderName":"saminahusain","senderId":"@saminahusain:matrix.org","id":"$qpxdopIqmjwNCV0I_9i46PzQu7s4b4gZXUh63wRVRls"},
{"content":{"body":"> <@devsnek:matrix.org> pauses get bigger and smaller in mature implementations. ideally you want to have the behavior that kris explained, but implementations like linux for example also have a signal of \"starvation\" which can cause the delay to get longer as well.\n\nyeah let's just not give this semantics","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qlMIfKHm_GHJLRU43SZvr1mQ1yuun3DqpTEKPhLhNPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>pauses get bigger and smaller in mature implementations. ideally you want to have the behavior that kris explained, but implementations like linux for example also have a signal of &quot;starvation&quot; which can cause the delay to get longer as well.</blockquote></mx-reply>yeah let's just not give this semantics","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qlMIfKHm_GHJLRU43SZvr1mQ1yuun3DqpTEKPhLhNPg"}},"msgtype":"m.text"},"ts":1722284697379,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FA9qxXBNbliKGMWKpDR3TbWaIVakdU6eTquRBl84Muo"},
{"content":{"body":"yeah i think it would be best if we simply don't constrain it","m.mentions":{},"msgtype":"m.text"},"ts":1722284727492,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$owS0fpTVYB9_F7WI8Mribg3UcjujKsvIzEffLGHQ1OI"},
{"content":{"body":"this will need an overflow item, there's too much overflow to get through it","m.mentions":{},"msgtype":"m.text"},"ts":1722284733711,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PEQTYQxDUVtYxBaho0ytQ24bPh02er996MAJeK2ZNkM"},
{"content":{"body":"we have a lot to say","m.mentions":{},"msgtype":"m.text"},"ts":1722284736631,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-QzL9ZAl_Uy2bl6iUzYEj_eDrHyLGz26jlwQQnwR8PY"},
{"content":{"body":"if we don't give it semantics, then someone will ship (wlog) \"longer iteration number is short wait\", and then some application be written in such a way that depends on that behavior for performance, and now it is web-reality and can't be changed without negative performance impact","m.mentions":{},"msgtype":"m.text"},"ts":1722284787475,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_y6u65htoDtXeUY0UU68lKQO9a-ZMToJCNLkpFgQoWo"},
{"content":{"body":"so I don't see much benefit from not giving it semantics","m.mentions":{},"msgtype":"m.text"},"ts":1722284796404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IjsnqzHEXKNAtGyn0FW_WJLUjZ5oGPQUh9F5olNytbc"},
{"content":{"body":"spin locks use the counter to make a determination as to whether you've been spinning often enough to justify a context switch/kernel transition. The counter is used to indicate frequency and sometimes introduce and reduce contention. not all counter values are guaranteed to pause in some implementations","m.mentions":{},"msgtype":"m.text"},"ts":1722284799465,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8_qMbxlaI9ioD_OufwCGXb7iiT_nzCKWiHqTkKHizPU"},
{"content":{"body":"I guess it allows implementations to specialize for specific scripts, which they do sometimes do, but... ugh","m.mentions":{},"msgtype":"m.text"},"ts":1722284809033,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DpSAmeX-jRM--8MF01_uTsjjjYDHYIuv4bsd_DiT33s"},
{"content":{"body":" * I guess it allows implementations to give special behavior for specific scripts, which they do sometimes do, but... ugh","m.mentions":{},"m.new_content":{"body":"I guess it allows implementations to give special behavior for specific scripts, which they do sometimes do, but... ugh","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DpSAmeX-jRM--8MF01_uTsjjjYDHYIuv4bsd_DiT33s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722284818995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vdyCEIMi0d7F-8_mXUUyoCeCjDSiHkZjopYi_GLQGUg"},
{"content":{"body":"well, this is a lot like tuning GC","m.mentions":{},"msgtype":"m.text"},"ts":1722284840607,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ls_fSGSeHUyS0hgNCpVPul_1nEEP1CXxZZgYAyZ7_LQ"},
{"content":{"body":"Most spinlock/spinwait implementations are very handwavy on specifics because it's CPU architecture dependent","m.mentions":{},"msgtype":"m.text"},"ts":1722284887330,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zbgy1yVmRL-9woR2F3xGDabP1wkKUuUj9gHW4vKvc-k"},
{"content":{"body":"Likely will be there, thanks!","m.mentions":{},"m.relates_to":{"event_id":"$WUAxbbzDj5fQvHIonoOSIBtiWn1O6c3skP-6ZFUTkYc","is_falling_back":true,"m.in_reply_to":{"event_id":"$qpxdopIqmjwNCV0I_9i46PzQu7s4b4gZXUh63wRVRls"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722284926517,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$ga3xcqzsKJpVcva4_Gg3P2WOYz0TIFnFJo5XM88Y6rE"},
{"content":{"body":"iteration count is used more to determine `pause` request frequency, not how much time to wait.","format":"org.matrix.custom.html","formatted_body":"iteration count is used more to determine <code>pause</code> request frequency, not how much time to wait.","m.mentions":{},"msgtype":"m.text"},"ts":1722285126345,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-RNwFwp8KH1G73qYbFEb9jlMqBXDmlNCITitxPBnb6k"},
{"content":{"body":"If the iteration count is high and you're approaching a context switch, you want to wait less and less time to give the high-iteration spin a chance to attain the lock. But many spin wait operations will decide that it may only pause for any length of time when `iterationCount % 10 === 0` or `iterationCount % 100 === 0`, etc., and return immediately in other cases.","format":"org.matrix.custom.html","formatted_body":"If the iteration count is high and you're approaching a context switch, you want to wait less and less time to give the high-iteration spin a chance to attain the lock. But many spin wait operations will decide that it may only pause for any length of time when <code>iterationCount % 10 === 0</code> or <code>iterationCount % 100 === 0</code>, etc., and return immediately in other cases.","m.mentions":{},"msgtype":"m.text"},"ts":1722285267066,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TaELZ4TJEipBEW9E0RbDKae860YNZ6ESD3arKTzllx4"},
{"content":{"body":"The purpose of the argument is indicate spin frequency and to not always pause.","m.mentions":{},"msgtype":"m.text"},"ts":1722285352627,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JQB1nC-KI3qlz37EI-NSULnxNpyCCMb3UcuTv_3GxoE"},
{"content":{"body":"i am just confused what there is to disagree on, there is literally no observable behavior","m.mentions":{},"msgtype":"m.text"},"ts":1722285425518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nvNrYLmh2bW4HDneYqKTb4TdVal0hKWu9nD06wSDbf0"},
{"content":{"body":"> <@shuyuguo:matrix.org> i am just confused what there is to disagree on, there is literally no observable behavior\n\nHow is the number of signals related to the pause length in nanoseconds?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nvNrYLmh2bW4HDneYqKTb4TdVal0hKWu9nD06wSDbf0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i am just confused what there is to disagree on, there is literally no observable behavior</blockquote></mx-reply>How is the number of signals related to the pause length in nanoseconds?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nvNrYLmh2bW4HDneYqKTb4TdVal0hKWu9nD06wSDbf0"}},"msgtype":"m.text"},"ts":1722285459285,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WOGxVM3maXk9w3OrIkqq9lvkiqoILqd3j6FQXlCwsDw"},
{"content":{"body":"it's implementation-defined","m.mentions":{},"msgtype":"m.text"},"ts":1722285473105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9WSg07zokzLflK3RY-zK2bcS6Ol0Va4oyuXDBzYo0EE"},
{"content":{"body":"My understanding of the concerns are that the spec text that is either over detailed, or uses the confusing terminology.","m.mentions":{},"msgtype":"m.text"},"ts":1722285507812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$miwpXxdyi5KKk0M-25v4daarvQeSY89iLN0Kc5fsBFg"},
{"content":{"body":"i will remove the text about the backoff and any particular relation between the pause length and the iterationNumber argument","m.mentions":{},"msgtype":"m.text"},"ts":1722285531431,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rwOhcV06NRf5RxepL6oKjj_6IywhYAQStkghsJovfvg"},
{"content":{"body":"there's another design constraint in play which waldemar and michael saboff seem to be saying: if there is no observable behavior, there should be no argument","m.mentions":{},"msgtype":"m.text"},"ts":1722285568445,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AayPNgaoBN_6zDa08MgB0-iht3pXD5A_4xCqeXcCYw0"},
{"content":{"body":"> <@shuyuguo:matrix.org> i will remove the text about the backoff and any particular relation between the pause length and the iterationNumber argument\n\nI think that’ll upset @msaboff ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rwOhcV06NRf5RxepL6oKjj_6IywhYAQStkghsJovfvg\">In reply to</a><a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shuyuguo:matrix.org</a><br />i will remove the text about the backoff and any particular relation between the pause length and the iterationNumber argument</blockquote></mx-reply>I think that’ll upset @msaboff ?","m.relates_to":{"m.in_reply_to":{"event_id":"$rwOhcV06NRf5RxepL6oKjj_6IywhYAQStkghsJovfvg"}},"msgtype":"m.text"},"ts":1722285594874,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$u1fFJ6DPp3JnLogwdWWfVxZFxhPaWpvZXAb0C1aFJQU"},
{"content":{"body":"Justin Ridgewell: how so?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: how so?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1722285605408,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a8TBW6W8pXQVFgPYdvSSTLeOqzt7xniLImaJ_ocOT1o"},
{"content":{"body":"he said JSC will likely ignore it, which is certainly fine","m.mentions":{},"msgtype":"m.text"},"ts":1722285617563,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OdquUTwSmyGhl9hJ_KIUHOXjmZf2qGxYPjUdwT4YOS0"},
{"content":{"body":"my personal intention is that until the code is in the optimizing JIT and inlined, it _is_ ignored","format":"org.matrix.custom.html","formatted_body":"my personal intention is that until the code is in the optimizing JIT and inlined, it <em>is</em> ignored","m.mentions":{},"msgtype":"m.text"},"ts":1722285635669,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1ofyPO6gbG2acH4Z2wmTNJNki0kxF4JUM7MfvbkPB9c"},
{"content":{"body":"His final statement was that if there’s no note, the param will just be ignored.","msgtype":"m.text"},"ts":1722285647892,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0sKGnTxnJNjbEHuVhqzRjNBXEJxQ3tBkxO3gtxraqnk"},
{"content":{"body":"> <@shuyuguo:matrix.org> he said JSC will likely ignore it, which is certainly fine\n\npresumably it'd be better for the web if you can align on this...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OdquUTwSmyGhl9hJ_KIUHOXjmZf2qGxYPjUdwT4YOS0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>he said JSC will likely ignore it, which is certainly fine</blockquote></mx-reply>presumably it'd be better for the web if you can align on this...","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OdquUTwSmyGhl9hJ_KIUHOXjmZf2qGxYPjUdwT4YOS0"}},"msgtype":"m.text"},"ts":1722285649505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wzgzpyOmWEu-5VWMt9lqmG3hSl7KPjuVOJaNwtkUFB0"},
{"content":{"body":"i don't think i do...?","m.mentions":{},"msgtype":"m.text"},"ts":1722285662133,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PitGI40Lp5A12Lby3au-VZ5Oi75nY883uqWpUketZ0c"},
{"content":{"body":"presumably JSC will do the right thing for M-chips","m.mentions":{},"msgtype":"m.text"},"ts":1722285673703,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Kq-SK5wS4Rich25BNKHahe93_4AWBYrYGtjTj3ccuHE"},
{"content":{"body":"and V8 might do a more generic thing?","m.mentions":{},"msgtype":"m.text"},"ts":1722285685322,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OIRdXgnouy4BlNfr-HnfKbX0hBVf2jhJBClb58xzDtY"},
{"content":{"body":"OK sure","m.mentions":{},"msgtype":"m.text"},"ts":1722285700341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UDLM4JDqa_47qg3HDw-UBBrtPh3M4Xy9FmcO3VeOXHY"},
{"content":{"body":"but \"just ignore it\" doesn't sound like something tuned for M-chips; it sounds like not engaging with the question","m.mentions":{},"msgtype":"m.text"},"ts":1722285724381,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PbnY7a8NREjuHBbxoQF2zUP4MSSuADg-y9LRNL7ZLSA"},
{"content":{"body":"> <@littledan:matrix.org> but \"just ignore it\" doesn't sound like something tuned for M-chips; it sounds like not engaging with the question\n\nfair, but it's intended to be a hint","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PbnY7a8NREjuHBbxoQF2zUP4MSSuADg-y9LRNL7ZLSA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but &quot;just ignore it&quot; doesn&#39;t sound like something tuned for M-chips; it sounds like not engaging with the question</blockquote></mx-reply>fair, but it's intended to be a hint","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PbnY7a8NREjuHBbxoQF2zUP4MSSuADg-y9LRNL7ZLSA"}},"msgtype":"m.text"},"ts":1722285747170,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kpIbnYTmo3-dbgaUJpQ3YeMzUC3gPLJtQPP8TAb315E"},
{"content":{"body":"why would we try to align on how to interpret a hint?","m.mentions":{},"msgtype":"m.text"},"ts":1722285754004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CnQr2PBuyRG1q6CJPxTS8O5MQoPkxkrHh9W_KSJNs8s"},
{"content":{"body":"it's supposed to give freedom to implementations!","m.mentions":{},"msgtype":"m.text"},"ts":1722285759511,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nSQvxoJ42xXpGAU6Allwrc0vhnY12wgYYCLf8-rSqYY"},
{"content":{"body":"(I don't know if this is actually implementable given the perf constraints)\n\nWhat if instead of the iteration number we passed an object, and the engine internally counts how many times it sees that object? So that there is no possible expectation connected to \"big number\" vs \"small number\"","m.mentions":{},"msgtype":"m.text"},"ts":1722285767592,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$2IEt0CKV7kAzHTajlOijH0oxBagWOlhZRdhwvUaM2VM"},
{"content":{"body":"no thanks...","m.mentions":{},"msgtype":"m.text"},"ts":1722285778682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pwMhVFU3FBYU1Dm1zZQNip2TC9yf6sp9Z8oCcPPBp0c"},
{"content":{"body":"I approve of every possible steam (locomotive, motor) metaphor as we can cram into this language.","m.mentions":{},"msgtype":"m.text"},"ts":1722285780520,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Zcpdrp8Z5TNAPwhAfWxthN4wvVuvtH1qESC4uYxhDxo"},
{"content":{"body":"> <@shuyuguo:matrix.org> why would we try to align on how to interpret a hint?\n\nwell, we'd want to align on, engines feeling like they can interpret this as a hint, rather than that it's just something to ignore","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CnQr2PBuyRG1q6CJPxTS8O5MQoPkxkrHh9W_KSJNs8s?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>why would we try to align on how to interpret a hint?</blockquote></mx-reply>well, we'd want to align on, engines feeling like they can interpret this as a hint, rather than that it's just something to ignore","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CnQr2PBuyRG1q6CJPxTS8O5MQoPkxkrHh9W_KSJNs8s"}},"msgtype":"m.text"},"ts":1722285784386,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$udt6NjnKDonIqdAGpUnkL5BURk4gcaREHNZ9RH80R-g"},
{"content":{"body":"> <@littledan:matrix.org> well, we'd want to align on, engines feeling like they can interpret this as a hint, rather than that it's just something to ignore\n\nyes, i agree. but ignoring is a valid interpretation of a hint, do we agree on that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$udt6NjnKDonIqdAGpUnkL5BURk4gcaREHNZ9RH80R-g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, we'd want to align on, engines feeling like they can interpret this as a hint, rather than that it's just something to ignore</blockquote></mx-reply>yes, i agree. but ignoring is a valid interpretation of a hint, do we agree on that?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$udt6NjnKDonIqdAGpUnkL5BURk4gcaREHNZ9RH80R-g"}},"msgtype":"m.text"},"ts":1722285810853,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LVdMrJSCTCn3DTsCS57Gib8qQz2xheJSOL946qf-WUE"},
{"content":{"body":"I assume the CPU architecture has some semantic meaning for the hint?","msgtype":"m.text"},"ts":1722285840490,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XRXYWYIPWzp3dFng5F_mDSxaGcrv784n9vthTmG6NgU"},
{"content":{"body":"yes, it is valid, but I hope that JS engines can get past the philosophical disagreement that seems to exist right now and agree that this is a potentially usable hint if it makes sense for the architecture","m.mentions":{},"msgtype":"m.text"},"ts":1722285843943,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PJlCSwfTrbH4CTqoiSgFxK7ZaWRHyikmeKqjbq0by3U"},
{"content":{"body":"We can tell engines to ignore it, but how do they map our hint’s intention to the arch’s intention?","msgtype":"m.text"},"ts":1722285857629,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BMvHF7rGDEBBp5XbKQWUrqO6kb4lnOaU5Xek5Dr9gbM"},
{"content":{"body":"since msaboff's statement was not about the architecture","m.mentions":{},"msgtype":"m.text"},"ts":1722285862807,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$adJiTDi4jKf6xTskRwVyBv1IhKi8-pyccpdonJ0CwDE"},
{"content":{"body":"> <@jridgewell:matrix.org> I assume the CPU architecture has some semantic meaning for the hint?\n\nnot the CPU arch per se, more the VM","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XRXYWYIPWzp3dFng5F_mDSxaGcrv784n9vthTmG6NgU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I assume the CPU architecture has some semantic meaning for the hint?</blockquote></mx-reply>not the CPU arch per se, more the VM","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XRXYWYIPWzp3dFng5F_mDSxaGcrv784n9vthTmG6NgU"}},"msgtype":"m.text"},"ts":1722285880700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hcWeWO18d71akNUhf6gxTx2tqUiCo95JjgoUffx3OHc"},
{"content":{"body":"`Atomics.pause` is purely a CPU architecture dependent operation. A conforming implementation is welcome to ignore `iterationCount` and return immediately if it so chooses, though that is the least efficient approach as it most likely results in thread starvation and does not improve contention.\nAn efficient implementation of `pause` will use the `iterationCount` to avoid thread starvation and optimize contention by *periodically* introducing an asm `pause` or similar instruction based on whatever information is relevant for that architecture. The main goal is to avoid spinning longer than you would have had to wait for a context switch/kernel transition. These optimizations can include, but are not limited to:\n- Only `pausing` every *n* iterations\n- issuing a `pause` more or less frequently the longer we've been spinning\n- issuing a `pause` more or less frequently based on how frequently we've been spinning\n- issuing a `pause` more or less frequently as you approach an amount of time since you started spinning that would be equivalent to the time spent waiting for a context switch.","format":"org.matrix.custom.html","formatted_body":"<p><code>Atomics.pause</code> is purely a CPU architecture dependent operation. A conforming implementation is welcome to ignore <code>iterationCount</code> and return immediately if it so chooses, though that is the least efficient approach as it most likely results in thread starvation and does not improve contention.<br>An efficient implementation of <code>pause</code> will use the <code>iterationCount</code> to avoid thread starvation and optimize contention by <em>periodically</em> introducing an asm <code>pause</code> or similar instruction based on whatever information is relevant for that architecture. The main goal is to avoid spinning longer than you would have had to wait for a context switch/kernel transition. These optimizations can include, but are not limited to:</p>\n<ul>\n<li>Only <code>pausing</code> every <em>n</em> iterations</li>\n<li>issuing a <code>pause</code> more or less frequently the longer we've been spinning</li>\n<li>issuing a <code>pause</code> more or less frequently based on how frequently we've been spinning</li>\n<li>issuing a <code>pause</code> more or less frequently as you approach an amount of time since you started spinning that would be equivalent to the time spent waiting for a context switch.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722285905377,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_ZqTKm3ucQQfdhMb-6o20hTgNQUzRzTuUstfoeY5ySk"},
{"content":{"body":"> <@rbuckton:matrix.org> `Atomics.pause` is purely a CPU architecture dependent operation. A conforming implementation is welcome to ignore `iterationCount` and return immediately if it so chooses, though that is the least efficient approach as it most likely results in thread starvation and does not improve contention.\n> An efficient implementation of `pause` will use the `iterationCount` to avoid thread starvation and optimize contention by *periodically* introducing an asm `pause` or similar instruction based on whatever information is relevant for that architecture. The main goal is to avoid spinning longer than you would have had to wait for a context switch/kernel transition. These optimizations can include, but are not limited to:\n> - Only `pausing` every *n* iterations\n> - issuing a `pause` more or less frequently the longer we've been spinning\n> - issuing a `pause` more or less frequently based on how frequently we've been spinning\n> - issuing a `pause` more or less frequently as you approach an amount of time since you started spinning that would be equivalent to the time spent waiting for a context switch.\n\nIs this the interpretation you’re proposing, or is this a written behavior somewhere?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_ZqTKm3ucQQfdhMb-6o20hTgNQUzRzTuUstfoeY5ySk\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br /><p><code>Atomics.pause</code> is purely a CPU architecture dependent operation. A conforming implementation is welcome to ignore <code>iterationCount</code> and return immediately if it so chooses, though that is the least efficient approach as it most likely results in thread starvation and does not improve contention.<br>An efficient implementation of <code>pause</code> will use the <code>iterationCount</code> to avoid thread starvation and optimize contention by <em>periodically</em> introducing an asm <code>pause</code> or similar instruction based on whatever information is relevant for that architecture. The main goal is to avoid spinning longer than you would have had to wait for a context switch/kernel transition. These optimizations can include, but are not limited to:</p>\n<ul>\n<li>Only <code>pausing</code> every <em>n</em> iterations</li>\n<li>issuing a <code>pause</code> more or less frequently the longer we've been spinning</li>\n<li>issuing a <code>pause</code> more or less frequently based on how frequently we've been spinning</li>\n<li>issuing a <code>pause</code> more or less frequently as you approach an amount of time since you started spinning that would be equivalent to the time spent waiting for a context switch.</li>\n</ul>\n</blockquote></mx-reply>Is this the interpretation you’re proposing, or is this a written behavior somewhere?","m.relates_to":{"m.in_reply_to":{"event_id":"$_ZqTKm3ucQQfdhMb-6o20hTgNQUzRzTuUstfoeY5ySk"}},"msgtype":"m.text"},"ts":1722285966892,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pZqIuUr0g2ozuEiI-ydjT39NvBWc_EkJpuShVFofYQs"},
{"content":{"body":"Most implementations of a `pause`-like method I've seen are heavily optimized based on OS, CPU Arch, runtime, clock speed, and other factors and as such can't be easily expressed in an algorithmic form.","format":"org.matrix.custom.html","formatted_body":"Most implementations of a <code>pause</code>-like method I've seen are heavily optimized based on OS, CPU Arch, runtime, clock speed, and other factors and as such can't be easily expressed in an algorithmic form.","m.mentions":{},"msgtype":"m.text"},"ts":1722285967180,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AolAwaQgnORRQ05T8MBBwU_ikxqZGri4KLc_16gj2yE"},
{"content":{"body":"This is my observation from looking at spin-wait mechanisms in several languages and runtimes.","m.mentions":{},"msgtype":"m.text"},"ts":1722286001382,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BVx5xG09R5Ha3r49u4I2CJtMR1nNdsC2nkZtONJjQLg"},
{"content":{"body":"This isn't precise copy that I would use in the spec.","m.mentions":{},"msgtype":"m.text"},"ts":1722286012118,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A44ievN-oiomTGuPQlC6w8GR7vsEbaDkaEEw6BtaBFw"},
{"content":{"body":"This is more to argue that we should put a lot less into the algorithm steps and NOTEs than we currently are.","m.mentions":{},"msgtype":"m.text"},"ts":1722286053218,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PdXjUibSlaCGjGiwEP_4xrpB3cP1jirHJewl6dRyt5U"},
{"content":{"body":"i think there are only two realistic options:\n\n1. drop the hint argument entirely\n2. accept an integer as an hint and say it is implementation-defined how it is used to determine how long to pause\n\ni still think 2 is uncontroversial but clearly it _is_ controversial but not in a way i understand how to make progress on","format":"org.matrix.custom.html","formatted_body":"<p>i think there are only two realistic options:</p>\n<ol>\n<li>drop the hint argument entirely</li>\n<li>accept an integer as an hint and say it is implementation-defined how it is used to determine how long to pause</li>\n</ol>\n<p>i still think 2 is uncontroversial but clearly it <em>is</em> controversial but not in a way i understand how to make progress on</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722286152568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uK-toqEXuUH74UIDnnjD-MVP9zath2BSa5sa4fyher8"},
{"content":{"body":"We should not drop the hint argument. ","m.mentions":{},"msgtype":"m.text"},"ts":1722286191248,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aY0_83MX38Mh_RI1hYrlVOr60TrWiesm4r9DASx63O8"},
{"content":{"body":"i think this would be a strictly worse API for its purpose if it dropped the hint argument, yes","m.mentions":{},"msgtype":"m.text"},"ts":1722286213050,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qIYfK9vlyKr6HvUxR0yGlQjJFpFbOgMCGH6IxTvnZ0k"},
{"content":{"body":"Would Waldemar be satisifed with bigger-number-longer-wait? Then let the engine handle that to match the VM’s CPU instructions, eg smaller-number-longer-wait?","msgtype":"m.text"},"ts":1722286287471,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zSouoQiH8woVoKy4PMJx6KKbyjDqFKs8PyNViPc8WzU"},
{"content":{"body":"The simplest text would be something along the lines of: \"An implementation can use the value of `iterationCount` as a hint to determine whether it is advisable to request the CPU pause for an extremely short period of time (TBD) to decrease contention and avoid an expensive context switch.\" I can look for something better though.","format":"org.matrix.custom.html","formatted_body":"The simplest text would be something along the lines of: \"An implementation can use the value of <code>iterationCount</code> as a hint to determine whether it is advisable to request the CPU pause for an extremely short period of time (TBD) to decrease contention and avoid an expensive context switch.\" I can look for something better though.","m.mentions":{},"msgtype":"m.text"},"ts":1722286302877,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MwhnvGbcUUxZlJPHNk5CwKC3IxSz_5EJH_FnNuFRVTw"},
{"content":{"body":"Basically, (2) but with a few examples of what `iterationCount` could be used for and the time scale we are trying to avoid.","format":"org.matrix.custom.html","formatted_body":"Basically, (2) but with a few examples of what <code>iterationCount</code> could be used for and the time scale we are trying to avoid.","m.mentions":{},"msgtype":"m.text"},"ts":1722286359393,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r1iOK4ilA8BWVGvlave8lthBE45yfrB9w4CGa4fbChg"},
{"content":{"body":"> <@jridgewell:matrix.org> Would Waldemar be satisifed with bigger-number-longer-wait? Then let the engine handle that to match the VM’s CPU instructions, eg smaller-number-longer-wait?\n\nwould that question arise? if something is implementation-defined, you can object to implementation-defined, but it'd be odd to object to specific implementations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zSouoQiH8woVoKy4PMJx6KKbyjDqFKs8PyNViPc8WzU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Would Waldemar be satisifed with bigger-number-longer-wait? Then let the engine handle that to match the VM’s CPU instructions, eg smaller-number-longer-wait?</blockquote></mx-reply>would that question arise? if something is implementation-defined, you can object to implementation-defined, but it'd be odd to object to specific implementations","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zSouoQiH8woVoKy4PMJx6KKbyjDqFKs8PyNViPc8WzU"}},"msgtype":"m.text"},"ts":1722286444223,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mIQvh-xlsDSXEoC8T07mljcfm1N0AVXJWMdBeyBcN50"},
{"content":{"body":"I am confused about why people don't like \"semaphore\" as the name for this","m.mentions":{},"msgtype":"m.text"},"ts":1722286520828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0chx_jZwo04vVk2007Rgql0FSmnAj5UKVdi01ECpckI"},
{"content":{"body":"this is the obvious name","m.mentions":{},"msgtype":"m.text"},"ts":1722286521598,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NtKpljt7cd0U_sf3E2_D8j5R7fGEJiYnR11IAQ6pfcc"},
{"content":{"body":"I don't think \"bigger-number-longer-wait\" is correct, TBH.","m.mentions":{},"msgtype":"m.text"},"ts":1722286536768,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wr0FXRHEYaRH6KdSYgYLwh87hDJAyLche1PScEk-yes"},
{"content":{"body":"everyone uses this name when independently implementing this exact API, which has happened many times","m.mentions":{},"msgtype":"m.text"},"ts":1722286540005,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7T9eyw5bAiRryquLtE9TjJZ_xKQ0vEN63INS2uEqix0"},
{"content":{"body":"I think the implementation is still left to the engine, but the hint now has a known meaning. Whether it uses exponential/quadratic/etc, whether the CPU expect big or large numbers, is left for the implementation.","msgtype":"m.text"},"ts":1722286563507,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$l6dJsrzKATscdrb9dZpcKam-wMPUWsapshL8vZkp65E"},
{"content":{"body":"https://www.npmjs.com/package/semaphore\nhttps://www.npmjs.com/package/@shopify/semaphore\nhttps://www.npmjs.com/package/async-sema","m.mentions":{},"msgtype":"m.text"},"ts":1722286570738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qww8LNpuAEiA1fxhiGjww59qI7t-GfKHitj0WX1pFC8"},
{"content":{"body":"I think just because \"semaphore\" is often used to mean \"binary semaphore\"","m.mentions":{},"msgtype":"m.text"},"ts":1722286573404,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Pp2OIBmTjzZTtU0Q3IE3pVg63qymK9AHIORg_fakQH8"},
{"content":{"body":"but yes I agree that the name makes sense, just trying to explain the confusion","m.mentions":{},"msgtype":"m.text"},"ts":1722286585825,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uC8C4E0q1-ROrs2eafGWuLLX7eqoNkiUl_iwuEVpcVk"},
{"content":{"body":"> <@rbuckton:matrix.org> I don't think \"bigger-number-longer-wait\" is correct, TBH.\n\nIt’s the most intuitive, and it’s how I’ve written async-retires before.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Wr0FXRHEYaRH6KdSYgYLwh87hDJAyLche1PScEk-yes\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />I don&#39;t think &quot;bigger-number-longer-wait&quot; is correct, TBH.</blockquote></mx-reply>It’s the most intuitive, and it’s how I’ve written async-retires before.","m.relates_to":{"m.in_reply_to":{"event_id":"$Wr0FXRHEYaRH6KdSYgYLwh87hDJAyLche1PScEk-yes"}},"msgtype":"m.text"},"ts":1722286649152,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XRGQoHzD734nxAy2hLQqmR3d7s9rGebrcN_kpu6Fvro"},
{"content":{"body":"It may be helpful to put together links to spin wait implementations in other languages and to papers on spin waiting, contention, and cpu/task scheduling that are relevant.","m.mentions":{},"msgtype":"m.text"},"ts":1722286667986,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S6kbnL_S0RkI77tPbRY8cwpEpGP0CGYKOwEiFtJPWHs"},
{"content":{"body":"I don’t know whether it matches CPU behavior.","msgtype":"m.text"},"ts":1722286677742,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8JMGw9omgvqAbVBCAJkoHNqaQVktM6rTveYM7SpsM-Y"},
{"content":{"body":"> <@jridgewell:matrix.org> It’s the most intuitive, and it’s how I’ve written async-retires before.\n\nThis is not async retries, that is the wrong paradigm.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XRGQoHzD734nxAy2hLQqmR3d7s9rGebrcN_kpu6Fvro?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>It’s the most intuitive, and it’s how I’ve written async-retires before.</blockquote></mx-reply>This is not async retries, that is the wrong paradigm.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XRGQoHzD734nxAy2hLQqmR3d7s9rGebrcN_kpu6Fvro"}},"msgtype":"m.text"},"ts":1722286679940,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7v_z9Mpi4dhBf7mN1dpAB-RNif3I-XisSwWYoK7g-cE"},
{"content":{"body":"Sync retries sounds very similar to async retries…","msgtype":"m.text"},"ts":1722286721466,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$s9-q1yEJDCKG1z8tds70ExNQeDY8Zb0rKvd-Z2A1tLI"},
{"content":{"body":"> <@jridgewell:matrix.org> I think the implementation is still left to the engine, but the hint now has a known meaning. Whether it uses exponential/quadratic/etc, whether the CPU expect big or large numbers, is left for the implementation.\n\nit doesn't have a known meaning, that's why it's a hint","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$l6dJsrzKATscdrb9dZpcKam-wMPUWsapshL8vZkp65E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I think the implementation is still left to the engine, but the hint now has a known meaning. Whether it uses exponential/quadratic/etc, whether the CPU expect big or large numbers, is left for the implementation.</blockquote></mx-reply>it doesn't have a known meaning, that's why it's a hint","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$l6dJsrzKATscdrb9dZpcKam-wMPUWsapshL8vZkp65E"}},"msgtype":"m.text"},"ts":1722286824230,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r9GKUo8yU_9ItXT1zygwYFzFZgY4cfj3Iyyz2Pj--i0"},
{"content":{"body":"the meaning is basically, write this: `for (i; i < spinCount; i++) { TryLock(); Atomics.pause(i); }`, and know the VM will do what it thinks best","format":"org.matrix.custom.html","formatted_body":"the meaning is basically, write this: <code>for (i; i &lt; spinCount; i++) { TryLock(); Atomics.pause(i); }</code>, and know the VM will do what it thinks best","m.mentions":{},"msgtype":"m.text"},"ts":1722286873799,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_QDA2R_KsR7d9SqTiOBjtSVJ4w3I33uP1JGfOeG7dwU"},
{"content":{"body":"I think if we're going to spec something bigger number longer wait is more intuitive. If you want the opposite you can just implement your spin lock in a countdown loop rather than a count up loop","m.mentions":{},"msgtype":"m.text"},"ts":1722286903569,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$M3cmk3ncRe-9s4HAEV8i60zGetRNBcFwGn628e8VLBM"},
{"content":{"body":"do not think at a lower level, because the JS programmer has no control at that lower level given the multi-tiered execution, etc","m.mentions":{},"msgtype":"m.text"},"ts":1722286916954,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y4Ka7no_9PI-iJmkG5vvhKv0E6T2MeqhU1EKUnns5gY"},
{"content":{"body":"keith_miller: my proposal is to say nothing in the spec text. an implementation can simply choose to interpret it as \"larger number is longer\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: my proposal is to say nothing in the spec text. an implementation can simply choose to interpret it as \"larger number is longer\"","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1722286938653,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-hhbkTLCv5_TFjXPOC7KDLZewBDrxFjiPxFr6b80Xh4"},
{"content":{"body":"why do people want to specify a certain relationship between loop count and pauses","m.mentions":{},"msgtype":"m.text"},"ts":1722286959050,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VodkiPHZEmyXMOso8zDZfJQlLz1hm8hgyod1QruQD8E"},
{"content":{"body":"I think that's the worst outcome","m.mentions":{},"msgtype":"m.text"},"ts":1722286963672,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$d9yNsDdNVKXi9pfQrpnTjQZfral_Eo2026L6Kv-lBZU"},
{"content":{"body":"> <@jridgewell:matrix.org> Sync retries sounds very similar to async retries…\n\nThe purpose is more like this: \"Ideally we shouldn't spin for longer than it would take for a context switch resulting from putting the thread to sleep or waking it up. To help avoid contention, we should periodically `pause` the thread to give another core an opportunity to perform the operation under contention. However, the closer we get to the amount of time it should have taken to put the thread to sleep, we should `pause` less frequently to aggressively avoid that threshold.\"\nIn some implementations, like .NET's `SpinWait`, once you reach a certain number of spins you trigger a `sleep(0)` or `sleep(1)`, which is a long wait, and then essentially restart as if the spin count was close to zero again.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$s9-q1yEJDCKG1z8tds70ExNQeDY8Zb0rKvd-Z2A1tLI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Sync retries sounds very similar to async retries…</blockquote></mx-reply>The purpose is more like this: \"Ideally we shouldn't spin for longer than it would take for a context switch resulting from putting the thread to sleep or waking it up. To help avoid contention, we should periodically <code>pause</code> the thread to give another core an opportunity to perform the operation under contention. However, the closer we get to the amount of time it should have taken to put the thread to sleep, we should <code>pause</code> less frequently to aggressively avoid that threshold.\"<br>In some implementations, like .NET's <code>SpinWait</code>, once you reach a certain number of spins you trigger a <code>sleep(0)</code> or <code>sleep(1)</code>, which is a long wait, and then essentially restart as if the spin count was close to zero again.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s9-q1yEJDCKG1z8tds70ExNQeDY8Zb0rKvd-Z2A1tLI"}},"msgtype":"m.text"},"ts":1722286985526,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IEqSrtfCGhOgVhJ8TxxT1sZYosDYWgaeF1n3zomSpKk"},
{"content":{"body":"> <@keith_miller:matrix.org> I think that's the worst outcome\n\ncan you say more?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$d9yNsDdNVKXi9pfQrpnTjQZfral_Eo2026L6Kv-lBZU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I think that&#39;s the worst outcome</blockquote></mx-reply>can you say more?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$d9yNsDdNVKXi9pfQrpnTjQZfral_Eo2026L6Kv-lBZU"}},"msgtype":"m.text"},"ts":1722286991277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G52q9zw8PDXdC85EcoihRYQ-oBMR2SNoShLDK_HXqG4"},
{"content":{"body":"we don't specify pauses for GC; we just trust that engines will figure out a good policy","m.mentions":{},"msgtype":"m.text"},"ts":1722287025196,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8u7Ook_WzT7rImNn33eRv48atI5qAjA4QEL4CBKyrZ0"},
{"content":{"body":"Then we could end up in a world where one implementation does longer waits as count goes up and others do shorter ","m.mentions":{},"msgtype":"m.text"},"ts":1722287027309,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$80YQK3tW9RoUMqMLl6kO9EkT1fXf8BDEP1BCKyLTqE8"},
{"content":{"body":"that's good, the implementation should do whatever is best on the given machine.","m.mentions":{},"msgtype":"m.text"},"ts":1722287057787,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wKa15OhJElP8aTJltaNGFhh0LbIYdcmBeDBZW81hyvc"},
{"content":{"body":"So the \"backoff\" tends to be something like: short -> shorter -> shortest -> long -> short -> shorter -> shortest -> etc.","m.mentions":{},"msgtype":"m.text"},"ts":1722287059840,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$V7gObXvpgOHkca7Oyz3eDbtMsKv_gWuXZo7HO15iYLs"},
{"content":{"body":" * that's good, the implementation should do whatever is best on the machine its running on.","m.mentions":{},"m.new_content":{"body":"that's good, the implementation should do whatever is best on the machine its running on.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wKa15OhJElP8aTJltaNGFhh0LbIYdcmBeDBZW81hyvc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722287063247,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kNS4XaaRJDkjWPcxwVXhGrzTszOUnVlnse95VlhJbJg"},
{"content":{"body":"With a number of \"don't even wait at all\" operations thrown into the mix.","m.mentions":{},"msgtype":"m.text"},"ts":1722287082967,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PfHQyGbuRBl22NUPNjb0IqKFb-FiA-RZyl4ULBbWhnI"},
{"content":{"body":"> <@keith_miller:matrix.org> Then we could end up in a world where one implementation does longer waits as count goes up and others do shorter\n\nThat'","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$80YQK3tW9RoUMqMLl6kO9EkT1fXf8BDEP1BCKyLTqE8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Then we could end up in a world where one implementation does longer waits as count goes up and others do shorter </blockquote></mx-reply>That'","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$80YQK3tW9RoUMqMLl6kO9EkT1fXf8BDEP1BCKyLTqE8"}},"msgtype":"m.text"},"ts":1722287099905,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x28gYTvshi1pSwn5MxCe_G_xBX3FDkwWOqobso7PAsU"},
{"content":{"body":"I guess my concern is that one workload wants longer and longer waits. And others want shorter and shorter waits","m.mentions":{},"msgtype":"m.text"},"ts":1722287113262,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$li8CVNMiqJJuHU-bo-j_elOsM73dPj54AgaGkPWbmtU"},
{"content":{"body":"> <@keith_miller:matrix.org> Then we could end up in a world where one implementation does longer waits as count goes up and others do shorter\n\n * That's perfectly acceptable. An implementation should choose the pause strategy that works best within its own requirements.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$80YQK3tW9RoUMqMLl6kO9EkT1fXf8BDEP1BCKyLTqE8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Then we could end up in a world where one implementation does longer waits as count goes up and others do shorter </blockquote></mx-reply> * That's perfectly acceptable. An implementation should choose the pause strategy that works best within its own requirements.","m.mentions":{},"m.new_content":{"body":"That's perfectly acceptable. An implementation should choose the pause strategy that works best within its own requirements.","format":"org.matrix.custom.html","formatted_body":"That's perfectly acceptable. An implementation should choose the pause strategy that works best within its own requirements.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x28gYTvshi1pSwn5MxCe_G_xBX3FDkwWOqobso7PAsU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722287123431,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b7Q7Rt1ralBAKYWOKxy0WvbrFlc13jsWhSTdkvJ8FpU"},
{"content":{"body":"And there's no way to know as an implementation a priori which is better","m.mentions":{},"msgtype":"m.text"},"ts":1722287130551,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$HtGn1xIHz-LK4YAYB4wD6uXYzsraahrq4ncxsTzhuZ0"},
{"content":{"body":"keith_miller: that's fair, and the concession is that you can't actually express that in JS code ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: that's fair, and the concession is that you can't actually express that in JS code","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1722287143402,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mbLhvZzM1IibI1JYCVTimOuNfP0Bh857kupTJb2aGXI"},
{"content":{"body":"because the call overhead is so high in the interpreter","m.mentions":{},"msgtype":"m.text"},"ts":1722287153783,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2ZW6T7isOXc1i445k-AhQmV_unPzhjLx4sHtdKq-3eY"},
{"content":{"body":"ljharb could you add yourself to the queue again?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> could you add yourself to the queue again?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1722287164644,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$nQgLaAGf2CmXpP0V9ZJ3RbgkB51DMJSfwyAalzIniqU"},
{"content":{"body":"shu: I guess I agree that the actual API doesn't look like exactly like traditional semaphore but the way you use it is exactly the way you use a semaphore 99% of the time","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I guess I agree that the actual API doesn't look like exactly like traditional semaphore but the way you use it is exactly the way you use a semaphore 99% of the time","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1722287168836,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GKnaf7qsrNKASdbSa6eIXJqa-ZUkz9LTarGD96YlB4Q"},
{"content":{"body":"> <@keith_miller:matrix.org> I guess my concern is that one workload wants longer and longer waits. And others want shorter and shorter waits\n\nThat's not what you do with spin locking.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$li8CVNMiqJJuHU-bo-j_elOsM73dPj54AgaGkPWbmtU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I guess my concern is that one workload wants longer and longer waits. And others want shorter and shorter waits</blockquote></mx-reply>That's not what you do with spin locking.","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$li8CVNMiqJJuHU-bo-j_elOsM73dPj54AgaGkPWbmtU"}},"msgtype":"m.text"},"ts":1722287171088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S2ZeJLHU7BWViI9EeRmdnLvwKDyHFv2_5xxcLUtcvuo"},
{"content":{"body":"i don't think a user of the pause api would want that. that is a concern you have to express in cpu instructions, so js would be a poor choice for that code.","m.mentions":{},"msgtype":"m.text"},"ts":1722287172541,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$P8mxnZtkDgbHZA7rXnRKvZ8w0s6WpcCBkDf1E2PuADw"},
{"content":{"body":"Then we should just not have anything passed by the JS users and the JS engine can infer the loop count if they *really* want to","format":"org.matrix.custom.html","formatted_body":"Then we should just not have anything passed by the JS users and the JS engine can infer the loop count if they <em>really</em> want to","m.mentions":{},"msgtype":"m.text"},"ts":1722287205965,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$noRtjlEIAMlX7cpszJCxRnsZnuUAjZknHw8ZreyT-0Y"},
{"content":{"body":"If you want longer waits, you use a mutex/condvar or futex. Spin waiting generally should be as short as possible to avoid starvation and break contention.","m.mentions":{},"msgtype":"m.text"},"ts":1722287210193,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-9Zn-qtaoLrVhzPPzf4HnqP1gAH47q5KxwL7PoViAto"},
{"content":{"body":"If you want longer waits, you `sleep`, not `pause`.","format":"org.matrix.custom.html","formatted_body":"If you want longer waits, you <code>sleep</code>, not <code>pause</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1722287227432,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s13NLt82_5bchunaOSVvRqzGmMdkPPGQRLKqkRJOtGU"},
{"content":{"body":"> <@keith_miller:matrix.org> Then we should just not have anything passed by the JS users and the JS engine can infer the loop count if they *really* want to\n\nHow is the JS engine supposed to know when you start spinning and are under contention when that is purely driven by user code?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$noRtjlEIAMlX7cpszJCxRnsZnuUAjZknHw8ZreyT-0Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Then we should just not have anything passed by the JS users and the JS engine can infer the loop count if they <em>really</em> want to</blockquote></mx-reply>How is the JS engine supposed to know when you start spinning and are under contention when that is purely driven by user code?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$noRtjlEIAMlX7cpszJCxRnsZnuUAjZknHw8ZreyT-0Y"}},"msgtype":"m.text"},"ts":1722287270097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SnHMGMY0tcKAs4a7qeXrezgEW5aTpv7MEr0BKUiieAI"},
{"content":{"body":"bakkot: the API as proposed currently is about governing rate limits, not a mutual exclusion building block. i understand conceptually the core mechanism is the same.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the API as proposed currently is about governing rate limits, not a mutual exclusion building block. i understand conceptually the core mechanism is the same.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1722287296365,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XGPu6rtSCsgMGV9nGR-xptcVn8tcORO9F2GgbRyDAc4"},
{"content":{"body":"\"Spin lock\" is also the wrong terminology. This is a \"spin wait\" and is generally used to write lock-free code via compare-and-swap","m.mentions":{},"msgtype":"m.text"},"ts":1722287314176,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JopcyYf5-WmFtQVfAfTd54dg9VeAE2P-cYuMob2ScJw"},
{"content":{"body":"if i were to propose a mutual exclusion Semaphore, i would not use this protocol","m.mentions":{},"msgtype":"m.text"},"ts":1722287324748,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tQcChSrLFBV-1D8vN_NyW4yVeVWjyDAHrndw1LVp_LY"},
{"content":{"body":"You can write a spin lock using `pause`, but that's not the goal.","format":"org.matrix.custom.html","formatted_body":"You can write a spin lock using <code>pause</code>, but that's not the goal.","m.mentions":{},"msgtype":"m.text"},"ts":1722287328141,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hbMo_RXwR8viNqdNxIRZcu-VPMbq7Mf65vXs_3GvYgs"},
{"content":{"body":"it may be that because of this API mismatch, neither Semaphore-like APIs should get the simple name \"Semaphore\"","m.mentions":{},"msgtype":"m.text"},"ts":1722287341444,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EhLB0e-8uGlIMqW8v-uI37z_jbPf44l1PrWJ_VbIlz4"},
{"content":{"body":"https://docs.rs/tokio/latest/tokio/sync/struct.Semaphore.html <- thing called semaphore in a non-js language, with a broadly similar api to our proposal. we will investigate other names though! :D","m.mentions":{},"msgtype":"m.text"},"ts":1722287344056,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$3dpft8ftvHDW-YNcHNCNwtIQlxxA-mC6WonnpHz7LFA"},
{"content":{"body":"+1 on Stage 1","m.mentions":{},"msgtype":"m.text"},"ts":1722287345967,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YP1l32ZEJU_HJjhn_BasAUtFOZdXJ_Oyk-V4wjpBhXI"},
{"content":{"body":"it can also be perhaps more simply resolved by just namespacing","m.mentions":{},"msgtype":"m.text"},"ts":1722287383610,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gFLzMr4DXCutgue-aPZcy4ME6T-MPJgHO0j9N2S3EbI"},
{"content":{"body":"`Governor.Semaphore` vs `Locks.Sempahore` or `Atomics.Semaphore` or whatever","format":"org.matrix.custom.html","formatted_body":"<code>Governor.Semaphore</code> vs <code>Locks.Sempahore</code> or <code>Atomics.Semaphore</code> or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1722287395139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bsF5nuyAGfdd-ibZ3geKCEW95haUmXgOJFc2gH3HWQc"},
{"content":{"body":"In esfx, I use `Semaphore` for the thread coordination primitive, and `AsyncSemaphore` for the async coordination (non multi-threaded) primitive, though `AsyncSemaphore` is still a simple coordination primitive and has now knowledge of async iteration.","format":"org.matrix.custom.html","formatted_body":"In esfx, I use <code>Semaphore</code> for the thread coordination primitive, and <code>AsyncSemaphore</code> for the async coordination (non multi-threaded) primitive, though <code>AsyncSemaphore</code> is still a simple coordination primitive and has now knowledge of async iteration.","m.mentions":{},"msgtype":"m.text"},"ts":1722287427834,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R-qj8vFQCYpLpIgyEFitFmYv4w6YkQ4hEKOtfmx_7Tc"},
{"content":{"body":"> <@lucacasonato:matrix.org> https://docs.rs/tokio/latest/tokio/sync/struct.Semaphore.html <- thing called semaphore in a non-js language, with a broadly similar api to our proposal. we will investigate other names though! :D\n\nthat thing's namespaced under `tokio::sync`, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3dpft8ftvHDW-YNcHNCNwtIQlxxA-mC6WonnpHz7LFA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>https://docs.rs/tokio/latest/tokio/sync/struct.Semaphore.html &lt;- thing called semaphore in a non-js language, with a broadly similar api to our proposal. we will investigate other names though! :D</blockquote></mx-reply>that thing's namespaced under <code>tokio::sync</code>, right?","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3dpft8ftvHDW-YNcHNCNwtIQlxxA-mC6WonnpHz7LFA"}},"msgtype":"m.text"},"ts":1722287432054,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nq9CLb43JureCRlfdUQ3CRP4CiK0BVovHyp62Cr7lI4"},
{"content":{"body":"Yes!","m.mentions":{},"msgtype":"m.text"},"ts":1722287464774,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$T08ygfUryiIC-Op02yQNXSC96MJXd3ZMnBWBchC7Rqg"},
{"content":{"body":"> <@rbuckton:matrix.org> In esfx, I use `Semaphore` for the thread coordination primitive, and `AsyncSemaphore` for the async coordination (non multi-threaded) primitive, though `AsyncSemaphore` is still a simple coordination primitive and has now knowledge of async iteration.\n\n(`Semaphore` as proposed wouldn't have knowledge of async iteration; async iteration would take a governor-protocol-implementing-thing, which `Semaphore` would be)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R-qj8vFQCYpLpIgyEFitFmYv4w6YkQ4hEKOtfmx_7Tc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In esfx, I use <code>Semaphore</code> for the thread coordination primitive, and <code>AsyncSemaphore</code> for the async coordination (non multi-threaded) primitive, though <code>AsyncSemaphore</code> is still a simple coordination primitive and has now knowledge of async iteration.</blockquote></mx-reply>(<code>Semaphore</code> as proposed wouldn't have knowledge of async iteration; async iteration would take a governor-protocol-implementing-thing, which <code>Semaphore</code> would be)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$R-qj8vFQCYpLpIgyEFitFmYv4w6YkQ4hEKOtfmx_7Tc"}},"msgtype":"m.text"},"ts":1722287478815,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2-m2hGtHS7jf2oQigB7em8eL97M69mXmF687DgOWDfw"},
{"content":{"body":"right, my objection is about this being a globally named `Semaphore`","format":"org.matrix.custom.html","formatted_body":"right, my objection is about this being a globally named <code>Semaphore</code>","m.mentions":{},"msgtype":"m.text"},"ts":1722287479108,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zlv-vXjT3i98nsnvzXYXa99Fxt6evNrrWT9UKEp0P30"},
{"content":{"body":"`Governor.Semaphore` wfm if we have such a class though fwiw I don't think `Governor` needs to actually exist ","format":"org.matrix.custom.html","formatted_body":"<code>Governor.Semaphore</code> wfm if we have such a class though fwiw I don't think <code>Governor</code> needs to actually exist","m.mentions":{},"msgtype":"m.text"},"ts":1722287526455,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$E-7aM5ihdU5SPtbFvsR4fdiE8_hHcLRVF-cOnOlZnh4"},
{"content":{"body":"Governor is just a protocol right? Like Thenable","m.mentions":{},"msgtype":"m.text"},"ts":1722287575618,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mDzY2JwpjAXxLjkSr2ftVZVd7NyXywB94M4sqSFNrZo"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1722287583770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XGKeAR_KYGBx6gucuOPn_EWdMh26NoMyi1YxAH453cU"},
{"content":{"body":"but the proposal includes a class, also","m.mentions":{},"msgtype":"m.text"},"ts":1722287592181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MKZ_M8IhZky_m8mola6v5My2-yqjdAwlIQyDlcbirfI"},
{"content":{"body":"for some reason","m.mentions":{},"msgtype":"m.text"},"ts":1722287592730,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vLaq7Rbdj8vT2Gkmfz84VJ8srQjkZld2lbvj4sx8sEI"},
{"content":{"body":"bakkot: the helpers! :D","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: the helpers! :D","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1722287601112,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$KdZH7Qe2zysiVr9yAgQh1h6aUpO4zSxM8AqqrjKgPvg"},
{"content":{"body":"> <@shuyuguo:matrix.org> keith_miller: that's fair, and the concession is that you can't actually express that in JS code\n\nThen the API should provide a mechanism for saying if you want the pauses to get longer and longer or shorter and shorter or we should just have nothing, IMO.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mbLhvZzM1IibI1JYCVTimOuNfP0Bh857kupTJb2aGXI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: that's fair, and the concession is that you can't actually express that in JS code</blockquote></mx-reply>Then the API should provide a mechanism for saying if you want the pauses to get longer and longer or shorter and shorter or we should just have nothing, IMO.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mbLhvZzM1IibI1JYCVTimOuNfP0Bh857kupTJb2aGXI"}},"msgtype":"m.text"},"ts":1722287611791,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Zj9bNGbkbd7nvO7o3kPQdz1PS4OWw7E1AmntjNsqTss"},
{"content":{"body":"yeah I agree with Igalia that this stuff is a bit complicated, but investigating APIs during Stage 1 SGTM","m.mentions":{},"msgtype":"m.text"},"ts":1722287653485,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T1fEGyAC46o1cJyyRvGzcBD8MUZLYyVDhPR8cTXlUNo"},
{"content":{"body":"keith_miller: but it might not be a linear/superlinear relationship at all, like what Ron was saying with \"wait every 10th iteration\" or something","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: but it might not be a linear/superlinear relationship at all, like what Ron was saying with \"wait every 10th iteration\" or something","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1722287654169,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pFXxgaPz0h7Pa7CfssP9jNWhTof2CW3Snd2Hr8P9wUc"},
{"content":{"body":"keith_miller: can you articulate why an implementation-defined hint is the worst outcome?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: can you articulate why an implementation-defined hint is the worst outcome?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1722287688775,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I42S4lLccBLpTdjhTB5CtVMlw51YNNrc0NbnMKFEK-k"},
{"content":{"body":"https://en.cppreference.com/w/cpp/thread/counting_semaphore\nhttps://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view=net-8.0\nhttps://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-8.0\nhttps://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore\nhttps://docs.python.org/3/library/asyncio-sync.html#boundedsemaphore\nhttps://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html\nhttps://esfx.js.org/esfx/api/threading-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)\nhttps://esfx.js.org/esfx/api/async-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)","m.mentions":{},"msgtype":"m.text"},"ts":1722287694668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U6npZvh0QoZCoWhwLyG2b7fa3iJtzsNWY2NNINww31M"},
{"content":{"body":"> <@shuyuguo:matrix.org> keith_miller: but it might not be a linear/superlinear relationship at all, like what Ron was saying with \"wait every 10th iteration\" or something\n\nNot linear. Here's .NET's version of `pause()` (MIT Licensed): https://github.com/dotnet/runtime/blob/4c58b5a5132cb089b23d32cafe3fcfa7e615a0da/src/libraries/System.Private.CoreLib/src/System/Threading/SpinWait.cs#L144","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pFXxgaPz0h7Pa7CfssP9jNWhTof2CW3Snd2Hr8P9wUc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: but it might not be a linear/superlinear relationship at all, like what Ron was saying with \"wait every 10th iteration\" or something</blockquote></mx-reply>Not linear. Here's .NET's version of <code>pause()</code> (MIT Licensed): https://github.com/dotnet/runtime/blob/4c58b5a5132cb089b23d32cafe3fcfa7e615a0da/src/libraries/System.Private.CoreLib/src/System/Threading/SpinWait.cs#L144","m.mentions":{"user_ids":["@shuyuguo:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pFXxgaPz0h7Pa7CfssP9jNWhTof2CW3Snd2Hr8P9wUc"}},"msgtype":"m.text"},"ts":1722287752659,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4"},
{"content":{"body":"Also: https://github.com/dotnet/runtime/blob/040fde48a75f0c211353f073e4f69e2e31607752/src/coreclr/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs#L139","m.mentions":{},"msgtype":"m.text"},"ts":1722287798397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Kio5WpBKiMVn4ZrBrZMChFI_ecbR8mCHcaWxDgVUeTQ"},
{"content":{"body":"to me a semaphore are those big flags the dude waves on the top of an aircraft carrier","m.mentions":{},"msgtype":"m.text"},"ts":1722287819636,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VAlyU4pLb4CSLKAlebw_-DHDEyw09a4Ec5z8yX8BBa4"},
{"content":{"body":"like, a way to send messages/signals","m.mentions":{},"msgtype":"m.text"},"ts":1722287861559,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ai5eTBXaqZQlQmMYji3tNPkFMKrYLIxWVnZrv0N6teI"},
{"content":{"body":"From skimming that code it does `Thread.Yield();` so it doesn't provide a hint?","format":"org.matrix.custom.html","formatted_body":"From skimming that code it does <code>Thread.Yield();</code> so it doesn't provide a hint?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722287919625,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$EjeeZ_n7qy4Zdjsd1hH8gInbFw8AfuE-vsIb-DKEBuE"},
{"content":{"body":"> <@ljharb:matrix.org> to me a semaphore are those big flags the dude waves on the top of an aircraft carrier\n\nThat's pretty much the idea. A counting semaphore tracks how many concurrent users are allowed in and blocks new users from entering until someone leaves. You want in? I check the count and if you're allowed in I waive the flag to let you in, otherwise I waive the flag to tell you to stay put. When someone leaves, I waive the flag to let the next person in.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VAlyU4pLb4CSLKAlebw_-DHDEyw09a4Ec5z8yX8BBa4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>to me a semaphore are those big flags the dude waves on the top of an aircraft carrier</blockquote></mx-reply>That's pretty much the idea. A counting semaphore tracks how many concurrent users are allowed in and blocks new users from entering until someone leaves. You want in? I check the count and if you're allowed in I waive the flag to let you in, otherwise I waive the flag to tell you to stay put. When someone leaves, I waive the flag to let the next person in.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VAlyU4pLb4CSLKAlebw_-DHDEyw09a4Ec5z8yX8BBa4"}},"msgtype":"m.text"},"ts":1722287921263,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eBqNK5Z-UfMgI9UZ9uhPMTOakrohKTQXFd-h1H433UI"},
{"content":{"body":"> <@rbuckton:matrix.org> https://en.cppreference.com/w/cpp/thread/counting_semaphore\n> https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view=net-8.0\n> https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-8.0\n> https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore\n> https://docs.python.org/3/library/asyncio-sync.html#boundedsemaphore\n> https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html\n> https://esfx.js.org/esfx/api/threading-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)\n> https://esfx.js.org/esfx/api/async-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)\n\nGiven this list, `Semaphore` really seems like the right name, though I'm fine with `CountingSemaphore` also. shu wdyt about this list?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$U6npZvh0QoZCoWhwLyG2b7fa3iJtzsNWY2NNINww31M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>https://en.cppreference.com/w/cpp/thread/counting_semaphore<br/>https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view=net-8.0<br/>https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=net-8.0<br/>https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore<br/>https://docs.python.org/3/library/asyncio-sync.html#boundedsemaphore<br/>https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html<br/>https://esfx.js.org/esfx/api/threading-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)<br/>https://esfx.js.org/esfx/api/async-semaphore.html?tabs=ts (NOTE: my implementation, though not heavily used)</blockquote></mx-reply>Given this list, <code>Semaphore</code> really seems like the right name, though I'm fine with <code>CountingSemaphore</code> also. <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> wdyt about this list?","m.mentions":{"user_ids":["@rbuckton:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$U6npZvh0QoZCoWhwLyG2b7fa3iJtzsNWY2NNINww31M"}},"msgtype":"m.text"},"ts":1722287944215,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jQx31P_zXeF6XBFbXn1KUmrRvx8Yih9OITG1ji3xOhs"},
{"content":{"body":"> <@bakkot:matrix.org> Given this list, `Semaphore` really seems like the right name, though I'm fine with `CountingSemaphore` also. shu wdyt about this list?\n\ni'll rephase my objection to that i will die on the hill of there being a global builtin named `Semaphore` that implements this symbol-based governor protocol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jQx31P_zXeF6XBFbXn1KUmrRvx8Yih9OITG1ji3xOhs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Given this list, <code>Semaphore</code> really seems like the right name, though I'm fine with <code>CountingSemaphore</code> also. <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> wdyt about this list?</blockquote></mx-reply>i'll rephase my objection to that i will die on the hill of there being a global builtin named <code>Semaphore</code> that implements this symbol-based governor protocol","m.mentions":{"user_ids":["@bakkot:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jQx31P_zXeF6XBFbXn1KUmrRvx8Yih9OITG1ji3xOhs"}},"msgtype":"m.text"},"ts":1722287974548,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YH2JYoXdKeLKhT72lPIk1RAyd5cxzbwPYn-LtZvC1O0"},
{"content":{"body":"i do not object to using the name `Semaphore`, so long as it is clear that it is not the mutual exclusion building block semaphore","format":"org.matrix.custom.html","formatted_body":"i do not object to using the name <code>Semaphore</code>, so long as it is clear that it is not the mutual exclusion building block semaphore","m.mentions":{},"msgtype":"m.text"},"ts":1722287994246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cgCI95MhCAp_72WBctqAY6fSR9bwYUwERD2e_4IiL0o"},
{"content":{"body":"the protocol isn't symbol-based","m.mentions":{},"msgtype":"m.text"},"ts":1722288009648,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HhofQ0177NhUbJ89Exx4EzcWGX_1JIPKAtfoRc3-hn0"},
{"content":{"body":"I agree it does sleep periodically but `sleep` is an independent concept.","format":"org.matrix.custom.html","formatted_body":"I agree it does sleep periodically but <code>sleep</code> is an independent concept.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$EjeeZ_n7qy4Zdjsd1hH8gInbFw8AfuE-vsIb-DKEBuE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288011750,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$U_ZxclKyYx1uve5ncQWTsBrBtNqo-DV4Nr7MmvgqpUQ"},
{"content":{"body":"i thought it has a protocol?","m.mentions":{},"msgtype":"m.text"},"ts":1722288023219,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Dv5dao0yjSOQzFMgMt_g453VEnY4eVIL7GLKzlGCNPk"},
{"content":{"body":"it's string-based, at least currently","m.mentions":{},"msgtype":"m.text"},"ts":1722288032647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y_EISgd06cqWLsg1acIbRFi9tiJf35v6mWy23HiG8PA"},
{"content":{"body":"Which, I assume isn't intended to be part of your proposal?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$U_ZxclKyYx1uve5ncQWTsBrBtNqo-DV4Nr7MmvgqpUQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288037772,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Sc4cI2m1SottAjn0hwftv1k1KyeSiZLZUx_AIsI6rt8"},
{"content":{"body":"it is, there is a string-named async `acquire` method which gives you an object with a string-named sync `release` method","format":"org.matrix.custom.html","formatted_body":"it is, there is a string-named async <code>acquire</code> method which gives you an object with a string-named sync <code>release</code> method","m.mentions":{},"msgtype":"m.text"},"ts":1722288043558,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FF0puGS1Ja6O2IlqwdjIQwCDRwarRD9cD1yq5hYAem8"},
{"content":{"body":"ah, string, sorry","m.mentions":{},"msgtype":"m.text"},"ts":1722288072263,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qMiJKyObi6hNkU9dVM4IExiC0-TRw7c1SU52z_zthXQ"},
{"content":{"body":"```\ninterface Governor {\n  acquire(): Promise<GovernorToken>;\n}\n\ninterface GovernorToken {\n  release(): void;\n  [Symbol.dispose](): void;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  [Symbol.dispose](): void;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722288077901,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$wii-tGIeEB30F-Nw-jjxNJfgswl5X6NsF9G4nIHcHDA"},
{"content":{"body":"yeah string vs symbol was one of the post-Stage 1 design considerations","msgtype":"m.text"},"ts":1722288090111,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$LJi_YFwt56fUxucpMdah9eFgoRPX7DWRchQ1BykZt44"},
{"content":{"body":" * ```\ninterface Governor {\n  acquire(): Promise<GovernorToken>;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code>interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```\ninterface Governor {\n  acquire(): Promise<GovernorToken>;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wii-tGIeEB30F-Nw-jjxNJfgswl5X6NsF9G4nIHcHDA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288091788,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$YJVUs0jDSotjiVtlEpSLcAPL4aSLIIISt4VZ2st94UI"},
{"content":{"body":" * ```ts\ninterface Governor {\n  acquire(): Promise<GovernorToken>;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-ts\">interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```ts\ninterface Governor {\n  acquire(): Promise<GovernorToken>;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-ts\">interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wii-tGIeEB30F-Nw-jjxNJfgswl5X6NsF9G4nIHcHDA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288095961,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$M1afxAUFnf3xqBKltPWfAOKJF9q2gvodDXbb1ut53PY"},
{"content":{"body":"The `Semaphore` in the slides implements the `Governor` interface, which is very iterator specific","format":"org.matrix.custom.html","formatted_body":"The <code>Semaphore</code> in the slides implements the <code>Governor</code> interface, which is very iterator specific","m.mentions":{},"msgtype":"m.text"},"ts":1722288099644,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rYNdpHpotGR1RZ2WpS-ItbJpkp2VNM0vjNDjckJzmVw"},
{"content":{"body":"(`Symbol.dispose` isn't part of the protocol but should generally be there yes)","format":"org.matrix.custom.html","formatted_body":"(<code>Symbol.dispose</code> isn't part of the protocol but should generally be there yes)","m.mentions":{},"msgtype":"m.text"},"ts":1722288102086,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EcUqQX_D4LxoIM-b8LItkH6Fvj2wukr6QjSiqR425to"},
{"content":{"body":"> <@lucacasonato:matrix.org> ```ts\n> interface Governor {\n>   acquire(): Promise<GovernorToken>;\n> }\n> \n> interface GovernorToken {\n>   release(): void;\n>   // or\n>   [Symbol.dispose](): void;\n> }\n> ```\n\nand, not or","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24wii-tGIeEB30F-Nw-jjxNJfgswl5X6NsF9G4nIHcHDA\">In reply to</a><a href=\"https://matrix.to/#/%40lucacasonato%3Amatrix.org\">@lucacasonato:matrix.org</a><br /><pre><code class=\"language-ts\">interface Governor {\n  acquire(): Promise&lt;GovernorToken&gt;;\n}\n\ninterface GovernorToken {\n  release(): void;\n  // or\n  [Symbol.dispose](): void;\n}\n</code></pre>\n</blockquote></mx-reply>and, not or","m.relates_to":{"m.in_reply_to":{"event_id":"$wii-tGIeEB30F-Nw-jjxNJfgswl5X6NsF9G4nIHcHDA"}},"msgtype":"m.text"},"ts":1722288114461,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$A5snpx8aVLzUcIxvHeM2DXdkKXoXC3boLPuOQIZHu_I"},
{"content":{"body":"that `acquire(): Promise<GovernorToken>` is not how i would declare `acquire` if i were designing a shmem semaphore","format":"org.matrix.custom.html","formatted_body":"that <code>acquire(): Promise&lt;GovernorToken&gt;</code> is not how i would declare <code>acquire</code> if i were designing a shmem semaphore","m.mentions":{},"msgtype":"m.text"},"ts":1722288129918,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cdGt74TzZJAqJOHecF2G4K4esTsDumMK-HlxvbmfRh4"},
{"content":{"body":"how about tryAcquire","m.mentions":{},"msgtype":"m.text"},"ts":1722288146367,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vXZD8T6lpKwdYM-bJdw-IAzQMI04WOp2QljfdKOjUpI"},
{"content":{"body":"> <@michaelficarra:matrix.org> and, not or\n\ndepends on if the token is a protocol or a class","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$A5snpx8aVLzUcIxvHeM2DXdkKXoXC3boLPuOQIZHu_I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>and, not or</blockquote></mx-reply>depends on if the token is a protocol or a class","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$A5snpx8aVLzUcIxvHeM2DXdkKXoXC3boLPuOQIZHu_I"}},"msgtype":"m.text"},"ts":1722288147480,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$PmQfxJrr5hVQIoZhU1pymIidWXgvSnsOdpxpYgDJPuI"},
{"content":{"body":"Well, it's listed as \"non-essential\", to be fair, but if it did it would pollute semaphore with unrelated functionality, IMO.","m.mentions":{},"msgtype":"m.text"},"ts":1722288151651,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TmGD1jJM4uxVGB6T6_36SVEMEykLy53UT3KfooAI1rg"},
{"content":{"body":"like, it would be a blocking void `acquire()` that can't be called on the main thread","format":"org.matrix.custom.html","formatted_body":"like, it would be a blocking void <code>acquire()</code> that can't be called on the main thread","m.mentions":{},"msgtype":"m.text"},"ts":1722288157021,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7HwWQoU0IO-9kt57iIi2fkTQnBy8X2nVT294VjLoB4Q"},
{"content":{"body":"> <@devsnek:matrix.org> how about tryAcquire\n\nhttps://github.com/michaelficarra/proposal-concurrency-control/issues/2","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vXZD8T6lpKwdYM-bJdw-IAzQMI04WOp2QljfdKOjUpI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>how about tryAcquire</blockquote></mx-reply>https://github.com/michaelficarra/proposal-concurrency-control/issues/2","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vXZD8T6lpKwdYM-bJdw-IAzQMI04WOp2QljfdKOjUpI"}},"msgtype":"m.text"},"ts":1722288162344,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$RnlGXySev8PtnHayU8sXWjgtvOCl9iFPKsV5ZB6fAf8"},
{"content":{"body":"> <@devsnek:matrix.org> how about tryAcquire\n\nthat was in the post-Stage 1 design considerations slide","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24vXZD8T6lpKwdYM-bJdw-IAzQMI04WOp2QljfdKOjUpI\">In reply to</a><a href=\"https://matrix.to/#/%40devsnek%3Amatrix.org\">@devsnek:matrix.org</a><br />how about tryAcquire</blockquote></mx-reply>that was in the post-Stage 1 design considerations slide","m.relates_to":{"m.in_reply_to":{"event_id":"$vXZD8T6lpKwdYM-bJdw-IAzQMI04WOp2QljfdKOjUpI"}},"msgtype":"m.text"},"ts":1722288198176,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Jsc3NtsWKs6IX1MWLfiJy73v9Dy7CK2he3N68azvjhw"},
{"content":{"body":"sorry it went by really fast","msgtype":"m.text"},"ts":1722288203014,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ACiagD7ZsjvxA4ZRfXmCxqsOrbT6WHGUpLFnq6pheIM"},
{"content":{"body":"no i was distracted, mb","m.mentions":{},"msgtype":"m.text"},"ts":1722288213573,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eWB5VP95zlMTmnDaKqcFygVvU7RhONlLbK_Cy-QqrF0"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, it would be a blocking void `acquire()` that can't be called on the main thread\n\nhow attached are you to the `void` part? the fact that you can `release` a thing you didn't previously `acquire` seems like a non-essential (and bad) part of textbook C semaphore implementation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7HwWQoU0IO-9kt57iIi2fkTQnBy8X2nVT294VjLoB4Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like, it would be a blocking void <code>acquire()</code> that can't be called on the main thread</blockquote></mx-reply>how attached are you to the <code>void</code> part? the fact that you can <code>release</code> a thing you didn't previously <code>acquire</code> seems like a non-essential (and bad) part of textbook C semaphore implementation","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7HwWQoU0IO-9kt57iIi2fkTQnBy8X2nVT294VjLoB4Q"}},"msgtype":"m.text"},"ts":1722288224414,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w0UcWC2oHgqO5cD64PoS-M8jxIwiCPIdiYZE1osKzCg"},
{"content":{"body":"In my `AsyncSemaphore` implementation, you don't `acquire` and then `dispose`, as that grants a capability to the `acquire` caller that belongs on the semaphore itself","format":"org.matrix.custom.html","formatted_body":"In my <code>AsyncSemaphore</code> implementation, you don't <code>acquire</code> and then <code>dispose</code>, as that grants a capability to the <code>acquire</code> caller that belongs on the semaphore itself","m.mentions":{},"msgtype":"m.text"},"ts":1722288271205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5Ilycqly2XcHVLQHvBlNRLlXNrbY2BgsAqaq8GdiYu4"},
{"content":{"body":"i am also a fan of release tokens. you can build the meh c api on top of that if you want.","m.mentions":{},"msgtype":"m.text"},"ts":1722288293414,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TShVjadf9tdYxjdLoRxBCfMw_EFoRxzhgtmsdG-B3UM"},
{"content":{"body":"> <@bakkot:matrix.org> how attached are you to the `void` part? the fact that you can `release` a thing you didn't previously `acquire` seems like a non-essential (and bad) part of textbook C semaphore implementation\n\nWhy is this bad? The semaphore maintains its capabilities rather than blindly handing them off to callers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w0UcWC2oHgqO5cD64PoS-M8jxIwiCPIdiYZE1osKzCg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>how attached are you to the <code>void</code> part? the fact that you can <code>release</code> a thing you didn't previously <code>acquire</code> seems like a non-essential (and bad) part of textbook C semaphore implementation</blockquote></mx-reply>Why is this bad? The semaphore maintains its capabilities rather than blindly handing them off to callers.","m.mentions":{"user_ids":["@bakkot:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w0UcWC2oHgqO5cD64PoS-M8jxIwiCPIdiYZE1osKzCg"}},"msgtype":"m.text"},"ts":1722288318084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ba0JV7jHEciUt9uKb3uXr9fwlYA0fp4bG5hJJGL00is"},
{"content":{"body":"another reason why those other snapshots are not all exposed is because these are often not useful and each is complicated to define. So the idea is to add the \"causal snapshots\" where they are useful.","m.mentions":{},"msgtype":"m.text"},"ts":1722288342954,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CT_TvKLkmArsC9ei0IEKDxj7iBOqRaHEN2c3WXVZYts"},
{"content":{"body":"... access to the semaphore should not imply access to the ability to cause the semaphore to think it has more resources available","m.mentions":{},"msgtype":"m.text"},"ts":1722288346969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sk4Sw8Jl-ULpO1uqdDyEFDO3ArfuEjdHJcoE4HUiUds"},
{"content":{"body":"IMO that's like putting `cancel()` on a `Promise` return value. It's the wrong separation of concerns.","format":"org.matrix.custom.html","formatted_body":"IMO that's like putting <code>cancel()</code> on a <code>Promise</code> return value. It's the wrong separation of concerns.","m.mentions":{},"msgtype":"m.text"},"ts":1722288355012,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AEZcq44M7U2ieGzTa3WhcbatOu01DclbPMeid3bIoFg"},
{"content":{"body":"you should only be able to cause it to think it has resources if it previously told you that you owned those resources","m.mentions":{},"msgtype":"m.text"},"ts":1722288358008,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HhbDLKW9Y9KwPorZGcNHQNMNbEkDEhDgMGNBHbKz1_I"},
{"content":{"body":"I have exactly the reverse intuition about who should be responsible for this capability","m.mentions":{},"msgtype":"m.text"},"ts":1722288384609,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CvI5-jbtOSm5RsY0Hh5_oCczUYnOElmXsDMGPfGHzhw"},
{"content":{"body":"yeah that particular implementation keeps a magic internal _count to determine","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Sc4cI2m1SottAjn0hwftv1k1KyeSiZLZUx_AIsI6rt8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288411855,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F4r0iQHamE-zWin2xDs-txi19oUYTf-QT7oD3gtwvRQ"},
{"content":{"body":"wait ron you're arguing that there should be a release method that requires no previously acquired capability?","m.mentions":{},"msgtype":"m.text"},"ts":1722288416169,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CEb8tqlZpf43_iREzQqYLRTfDlv3IdDZ93zqHzX2adU"},
{"content":{"body":"To use the train or ship \"Semaphore\" metaphor, that's like waiving a flag to let a user in, and then that user gets to waive the flag to let the next user in. ","m.mentions":{},"msgtype":"m.text"},"ts":1722288430484,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SjjnH-HA-Vx8ZzT2qcLc4R_XzJS2dxVxpxHE22RNuN8"},
{"content":{"body":" * wait ron you're arguing that there should be a release method that does not require a acquired capability?","m.mentions":{},"m.new_content":{"body":"wait ron you're arguing that there should be a release method that does not require a acquired capability?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CEb8tqlZpf43_iREzQqYLRTfDlv3IdDZ93zqHzX2adU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288434876,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8wym1o3GMQU_BsY3-JES00-Y6o78QAwgxV0zSmy78DQ"},
{"content":{"body":"https://github.com/dotnet/runtime/blob/4c58b5a5132cb089b23d32cafe3fcfa7e615a0da/src/libraries/System.Private.CoreLib/src/System/Threading/SpinWait.cs#L225-L230","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$F4r0iQHamE-zWin2xDs-txi19oUYTf-QT7oD3gtwvRQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288438164,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nZEFVOD-WgTHyNRkev3AdqtWRUiH_zXdeCt4nmF8sfM"},
{"content":{"body":" * wait ron you're arguing that there should be a release method that does not require a previously acquired capability?","m.mentions":{},"m.new_content":{"body":"wait ron you're arguing that there should be a release method that does not require a previously acquired capability?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CEb8tqlZpf43_iREzQqYLRTfDlv3IdDZ93zqHzX2adU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288439008,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zcRVm_plGfrrAytQWQBR2niGkSUE5QlCvYE8RdU4KpA"},
{"content":{"body":"... right, yes, that's the correct thing","m.mentions":{},"msgtype":"m.text"},"ts":1722288457215,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZOCeJTDd9KiA3VJgwigaPy5Z5yhGsko90mxoY6U18oM"},
{"content":{"body":"the user announces when they're done","m.mentions":{},"msgtype":"m.text"},"ts":1722288460426,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V-Uls56dKc8QwQKRpd-NxtnJ1WmLlgtCjg1qXaOeMh0"},
{"content":{"body":"i am warming up to the idea of letting the VM do complete magic here without a userland hint","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$nZEFVOD-WgTHyNRkev3AdqtWRUiH_zXdeCt4nmF8sfM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288468095,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cVLv6AobHXL2bIfjkFZKN3HmpUHKinzs96jMriwnqUo"},
{"content":{"body":"the user does not get to say \"someone is done\", only \"I personally am done\"","m.mentions":{},"msgtype":"m.text"},"ts":1722288471602,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Iy-yiTpvwEqcpqyuFHWSw4aI107Ce4Db33Bq4srEWnk"},
{"content":{"body":"> <@rbuckton:matrix.org> To use the train or ship \"Semaphore\" metaphor, that's like waiving a flag to let a user in, and then that user gets to waive the flag to let the next user in.\n\nIt's like waving the flag, and then giving the flag to the user. And then when the user is done they have to give the flag back to whoever is waving flags so they can wave in the next person","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SjjnH-HA-Vx8ZzT2qcLc4R_XzJS2dxVxpxHE22RNuN8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>To use the train or ship &quot;Semaphore&quot; metaphor, that&#39;s like waiving a flag to let a user in, and then that user gets to waive the flag to let the next user in. </blockquote></mx-reply>It's like waving the flag, and then giving the flag to the user. And then when the user is done they have to give the flag back to whoever is waving flags so they can wave in the next person","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SjjnH-HA-Vx8ZzT2qcLc4R_XzJS2dxVxpxHE22RNuN8"}},"msgtype":"m.text"},"ts":1722288473609,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$fDjHxXYbtIFLLvMMfl2AJKQfD40gbP5ZoPUXeX3L2ps"},
{"content":{"body":"> <@devsnek:matrix.org> wait ron you're arguing that there should be a release method that does not require a previously acquired capability?\n\nThat's how my `AsyncSemaphore` works, though releasing an empty semaphore does nothing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CEb8tqlZpf43_iREzQqYLRTfDlv3IdDZ93zqHzX2adU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>wait ron you&#39;re arguing that there should be a release method that does not require a previously acquired capability?</blockquote></mx-reply>That's how my <code>AsyncSemaphore</code> works, though releasing an empty semaphore does nothing.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CEb8tqlZpf43_iREzQqYLRTfDlv3IdDZ93zqHzX2adU"}},"msgtype":"m.text"},"ts":1722288477742,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7jqfFWJi5WwboE0hnSRZ8PHuhw41b_-bpn1f-9bPd9I"},
{"content":{"body":"And I do have \"release tokens\" in many of the other coordination primitives in esfx","m.mentions":{},"msgtype":"m.text"},"ts":1722288492706,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$73pWAdvU0sj5e-qiOysEywEA35BJaE9qESw3zvoZN4c"},
{"content":{"body":"i am new to someone arguing that linear types are bad","m.mentions":{},"msgtype":"m.text"},"ts":1722288505387,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8"},
{"content":{"body":"do <2 minutes remain?","m.mentions":{},"msgtype":"m.text"},"ts":1722288516261,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lEtNXu1qoQVV9JtTcoZagk28qxLd_9Qqg-tQr0E5Zzg"},
{"content":{"body":"Mark: Yes, that is the case","m.mentions":{},"msgtype":"m.text"},"ts":1722288531505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$porRY69Qa9spQuwnnFWILycAtrtGDbXI1vOf-2rWJZQ"},
{"content":{"body":"I guess it's also weird because all of the examples are behaviors that the particular lock implementation wants and don't seem to be architecture specific.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$cVLv6AobHXL2bIfjkFZKN3HmpUHKinzs96jMriwnqUo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288552380,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$PO7h0V8hiKkG7_E9fqke4jtCxMcmIffhAPT5UBxNVFA"},
{"content":{"body":"> <@littledan:matrix.org> do <2 minutes remain?\n\nlooked like a TCQ bug","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lEtNXu1qoQVV9JtTcoZagk28qxLd_9Qqg-tQr0E5Zzg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>do &lt;2 minutes remain?</blockquote></mx-reply>looked like a TCQ bug","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lEtNXu1qoQVV9JtTcoZagk28qxLd_9Qqg-tQr0E5Zzg"}},"msgtype":"m.text"},"ts":1722288552896,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rPmaVbBqnOI2rijQLvViXt_QaPJQcczGpUd6bJxTfN0"},
{"content":{"body":"Maybe for compile times? :P","m.mentions":{},"m.relates_to":{"event_id":"$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8","is_falling_back":true,"m.in_reply_to":{"event_id":"$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288610789,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$15qa2LiScXEgiH3Jeoirh5g3z9OQr1iLv_RDPBSJp0Q"},
{"content":{"body":"lol, fair","m.mentions":{},"m.relates_to":{"event_id":"$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8","is_falling_back":true,"m.in_reply_to":{"event_id":"$15qa2LiScXEgiH3Jeoirh5g3z9OQr1iLv_RDPBSJp0Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288621015,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$M6po4nC50UAxtTuY35HtYkVoj0_-McZJtDikM4Ys3JE"},
{"content":{"body":"the high-level goal here is for the compilers to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline `pause`)","format":"org.matrix.custom.html","formatted_body":"the high-level goal here is for the compilers to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline <code>pause</code>)","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$PO7h0V8hiKkG7_E9fqke4jtCxMcmIffhAPT5UBxNVFA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288668074,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5QtY1a8HSeqx1-V0AvrV2kFIhEJhR6FSOcpLbxYEIN4"},
{"content":{"body":"do you see a way to do that other than an implementation-defined hint parameter? that was my best idea","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$5QtY1a8HSeqx1-V0AvrV2kFIhEJhR6FSOcpLbxYEIN4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288678038,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e5Co9hacVSLo5pU4rjFH1aVB2zpgc93icgARKU4mgZU"},
{"content":{"body":"this topic goes to the end of day (~28 mins remaining)","m.mentions":{},"msgtype":"m.text"},"ts":1722288688282,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$VsbVp4qnp6EgScbVHDoao3Q3Zj8FWzx8n-xaEsBkGWU"},
{"content":{"body":"if that causes more confusion and problems, then i will drop it. but that also means giving up on that goal, which is too bad","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$e5Co9hacVSLo5pU4rjFH1aVB2zpgc93icgARKU4mgZU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288699093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tM60Me1F45-BzM8yQ-l1Kv59nX2Ebl7j5IPBlbOdvJM"},
{"content":{"body":"> <@devsnek:matrix.org> i am new to someone arguing that linear types are bad\n\nIn the case of `Semaphore`, it's about capability and separation of concerns.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i am new to someone arguing that linear types are bad</blockquote></mx-reply>In the case of <code>Semaphore</code>, it's about capability and separation of concerns.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$tP282E3Bgvl2vYF9K1fZypRVV2rXiUkrD9AiTxXdfa8"}},"msgtype":"m.text"},"ts":1722288701848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GvofuRj57goae70IPkyRfWR-PUUAd78vHIwKCVnIshc"},
{"content":{"body":" * the high-level goal here is for the VMs to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline `pause`)","format":"org.matrix.custom.html","formatted_body":" * the high-level goal here is for the VMs to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline <code>pause</code>)","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.new_content":{"body":"the high-level goal here is for the VMs to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline `pause`)","format":"org.matrix.custom.html","formatted_body":"the high-level goal here is for the VMs to do the optimal thing in both the interpreter (where the call overhead is huge) and in inlined code (where you can inline <code>pause</code>)","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5QtY1a8HSeqx1-V0AvrV2kFIhEJhR6FSOcpLbxYEIN4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288708163,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4u1jocTWHgaMYNKOOu3PJ-XBhYznZkFs3_hW0iq1j2g"},
{"content":{"body":"Do you just want consistent timing? Or are you looking for something else? I guess I don't see how you're anticipating the goal to be achieved.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$tM60Me1F45-BzM8yQ-l1Kv59nX2Ebl7j5IPBlbOdvJM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288758670,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$qrb5H30o4DgpMa_ZD47-rnzQfsf1Hn_QDN9EHr1hEk4"},
{"content":{"body":"Just because a user can invoke `acquire()` or `wait()` on a semaphore does not mean that the next waiting user should automatically be let in when that user is done. A counting semaphore only lets one user in, but can release `n` waiting users as is necessary.","format":"org.matrix.custom.html","formatted_body":"Just because a user can invoke <code>acquire()</code> or <code>wait()</code> on a semaphore does not mean that the next waiting user should automatically be let in when that user is done. A counting semaphore only lets one user in, but can release <code>n</code> waiting users as is necessary.","m.mentions":{},"msgtype":"m.text"},"ts":1722288790566,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ddCoo6ZEouOkC2vlFdbqkyo_tGCmx-e6XPukPwbWono"},
{"content":{"body":"I don't see how the loop count is related to the JIT tier","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$qrb5H30o4DgpMa_ZD47-rnzQfsf1Hn_QDN9EHr1hEk4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288805388,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YozForC3Po9Gu6VHVfGM--XWHfovaUlOrW-nLrDPVQs"},
{"content":{"body":"i want consistent timing, yes","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$YozForC3Po9Gu6VHVfGM--XWHfovaUlOrW-nLrDPVQs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288824719,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yZPuwFJ3gor93ufFXVJlK-hqVQ5kiZsj4xWyNnxJMDU"},
{"content":{"body":"if i have a fast path loop:\n\n```\ndo {\n  TryLock();\n  Atomics.pause();\n} while (spins++ < kSpinCount)\n```","format":"org.matrix.custom.html","formatted_body":"<p>if i have a fast path loop:</p>\n<pre><code>do {\n  TryLock();\n  Atomics.pause();\n} while (spins++ &lt; kSpinCount)\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$yZPuwFJ3gor93ufFXVJlK-hqVQ5kiZsj4xWyNnxJMDU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288856105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BXNG0jdIm4fwcXELypMB559YwKMXGNeMlAXQLuKD6co"},
{"content":{"body":"I guess I still don't see how the loop hint helps with that?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$BXNG0jdIm4fwcXELypMB559YwKMXGNeMlAXQLuKD6co"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288859167,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$9O__dY5K-5vgBQYplzxXxt6_WCUL9ATce9IdsyfzPys"},
{"content":{"body":" * if i have a fast path loop:\n\n```\ndo {\n  TryLock();\n  Atomics.pause(spins);\n} while (spins++ < kSpinCount)\n```","format":"org.matrix.custom.html","formatted_body":" * <p>if i have a fast path loop:</p>\n<pre><code>do {\n  TryLock();\n  Atomics.pause(spins);\n} while (spins++ &lt; kSpinCount)\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"if i have a fast path loop:\n\n```\ndo {\n  TryLock();\n  Atomics.pause(spins);\n} while (spins++ < kSpinCount)\n```","format":"org.matrix.custom.html","formatted_body":"<p>if i have a fast path loop:</p>\n<pre><code>do {\n  TryLock();\n  Atomics.pause(spins);\n} while (spins++ &lt; kSpinCount)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BXNG0jdIm4fwcXELypMB559YwKMXGNeMlAXQLuKD6co","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722288872978,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rLbHE6C9TDsRF41YasUDR5DcOG4c1tPvPc4gfez87o0"},
{"content":{"body":"what i was going for was, if that do-while loop is running in the interpreter, `Atomics.pause(spins)` would always execute one `pause`","format":"org.matrix.custom.html","formatted_body":"what i was going for was, if that do-while loop is running in the interpreter, <code>Atomics.pause(spins)</code> would always execute one <code>pause</code>","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$9O__dY5K-5vgBQYplzxXxt6_WCUL9ATce9IdsyfzPys"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288900352,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PZ3zlibvWKFjsGpuS2SATaddAItRsWXjaNuiYLZ5lJw"},
{"content":{"body":"The goal seems reasonable. But wouldn't it just be implemented with extra pauses in the JIT?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$PZ3zlibvWKFjsGpuS2SATaddAItRsWXjaNuiYLZ5lJw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288901594,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$E6xIU6N5FtH-Qzbyu8OdkLWLF21DWXxGbUYYH6IYvr0"},
{"content":{"body":"if it's inlined JIT code, Atomics.pause(spins) would use `spins` to determine how many `pause`s","format":"org.matrix.custom.html","formatted_body":"if it's inlined JIT code, Atomics.pause(spins) would use <code>spins</code> to determine how many <code>pause</code>s","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$E6xIU6N5FtH-Qzbyu8OdkLWLF21DWXxGbUYYH6IYvr0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288922173,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_IOzCEUa2jANzIuGK6_lx-DdTKEgaU7xOwCexY-nRKg"},
{"content":{"body":"> <@keith_miller:matrix.org> The goal seems reasonable. But wouldn't it just be implemented with extra pauses in the JIT?\n\nwell right, but i wanted the user to signal that intent instead of doing it for _all_ calls to `pause`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$E6xIU6N5FtH-Qzbyu8OdkLWLF21DWXxGbUYYH6IYvr0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>The goal seems reasonable. But wouldn&#39;t it just be implemented with extra pauses in the JIT?</blockquote></mx-reply>well right, but i wanted the user to signal that intent instead of doing it for <em>all</em> calls to <code>pause</code>","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":false,"m.in_reply_to":{"event_id":"$E6xIU6N5FtH-Qzbyu8OdkLWLF21DWXxGbUYYH6IYvr0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288939688,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OGTasfpxkp1rEc-gqQWI13pT48cP2ThgZOPStHHyKMQ"},
{"content":{"body":"i don't think it's the end of the world to do it for all calls of pause, to be clear","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$OGTasfpxkp1rEc-gqQWI13pT48cP2ThgZOPStHHyKMQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288950795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BjO3LFlJgtI8gOCyWMDTR_u5M4lSIhps2jrBn8zBfL4"},
{"content":{"body":"i thought this would be uncontroversial","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$BjO3LFlJgtI8gOCyWMDTR_u5M4lSIhps2jrBn8zBfL4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288954824,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QvVv8uldpfLpQoz5ZAjG0G3S9htYQsohLbbFaAxGcHc"},
{"content":{"body":"Are you saying you want the total spin loop time to be the same between JIT and interpreter?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$QvVv8uldpfLpQoz5ZAjG0G3S9htYQsohLbbFaAxGcHc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288977703,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$dus2ekgAwljdJO8L1lhqi8HSyiaiyTv9rCKKNFMx5N0"},
{"content":{"body":"yes","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$dus2ekgAwljdJO8L1lhqi8HSyiaiyTv9rCKKNFMx5N0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722288990754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VInmsADqNvOX5sX3cJxXaQ1nkuE2xIpPK7NsSpiyhd0"},
{"content":{"body":"Or that any given pause is the same","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$VInmsADqNvOX5sX3cJxXaQ1nkuE2xIpPK7NsSpiyhd0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289000754,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$QTSAPybbLH9lUfMrF1xHFAU649OzmQfrQDQoEn0r1Qg"},
{"content":{"body":"i mean, or as close as feasible","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$VInmsADqNvOX5sX3cJxXaQ1nkuE2xIpPK7NsSpiyhd0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289001706,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BLQ62FvJLYu-GiSQB6crXjaa8HY9TDrwLmA3Yl_X3Tk"},
{"content":{"body":"not some hard real-time kind of guarantee","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$BLQ62FvJLYu-GiSQB6crXjaa8HY9TDrwLmA3Yl_X3Tk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289009802,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Zl_SaV6R3m9v4rsddzm1JjJk4e024qZQ8EcKR_9xju8"},
{"content":{"body":"I see, I misunderstood","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Zl_SaV6R3m9v4rsddzm1JjJk4e024qZQ8EcKR_9xju8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289015393,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$GNypbC1xktqcxGCYESVc3Z_vnrBT7cfZtnmC3nr2byE"},
{"content":{"body":"if i write a mutex implementation in JS, i don't want the contention fast path to be waiting for longer/shorter depending on whether you're in the interpreter or in the JITs","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$GNypbC1xktqcxGCYESVc3Z_vnrBT7cfZtnmC3nr2byE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289038719,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iRda8YfwL6CqtQjtsZxsBbc-YF6eoAQTG9BLqE7aq9w"},
{"content":{"body":"there are different ways to accomplish that goal: i thought a hint parameter was the most flexible","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$iRda8YfwL6CqtQjtsZxsBbc-YF6eoAQTG9BLqE7aq9w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289134106,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pLMp2Bp2dqakiMi8F09RTI6VlrWKKY9bQQq3WpVgjXg"},
{"content":{"body":"Hmm, it almost feels like the right way to express that would be `Atomics.compareExchangeWithRetry(..., count)` or something but idk","format":"org.matrix.custom.html","formatted_body":"Hmm, it almost feels like the right way to express that would be <code>Atomics.compareExchangeWithRetry(..., count)</code> or something but idk","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$pLMp2Bp2dqakiMi8F09RTI6VlrWKKY9bQQq3WpVgjXg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289216512,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YR8vUXHawCG1q-LapTSqONBt0X4IunC_QWlkWui5oq0"},
{"content":{"body":"Or at least less controversial at this point lol","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$YR8vUXHawCG1q-LapTSqONBt0X4IunC_QWlkWui5oq0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289230105,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$aXT_J6KPGjKPX7Guhm3Ct9e7iOQ1DAu7ConUyvQ4rKE"},
{"content":{"body":"The user should be the one who indicates that they are done. Ability to `acquire` should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding `acquire`.","format":"org.matrix.custom.html","formatted_body":"The user should be the one who indicates that they are done. Ability to <code>acquire</code> should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding <code>acquire</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1722289264837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$74VVSRanwq0iXxWf1eTiCJigAtfP7rb6BOQBrY03QxM"},
{"content":{"body":"> <@shuyuguo:matrix.org> if i write a mutex implementation in JS, i don't want the contention fast path to be waiting for longer/shorter depending on whether you're in the interpreter or in the JITs\n\nI kinda agree but isn't that already up to scheduling in native-land anyway?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iRda8YfwL6CqtQjtsZxsBbc-YF6eoAQTG9BLqE7aq9w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if i write a mutex implementation in JS, i don&#39;t want the contention fast path to be waiting for longer/shorter depending on whether you&#39;re in the interpreter or in the JITs</blockquote></mx-reply>I kinda agree but isn't that already up to scheduling in native-land anyway?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":false,"m.in_reply_to":{"event_id":"$iRda8YfwL6CqtQjtsZxsBbc-YF6eoAQTG9BLqE7aq9w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289270621,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Qffb0QxqX9ph97ZzQxWRrKMIulXnGQildhnxT-Bfi2Y"},
{"content":{"body":" * The user should be the one who indicates that they are done. Ability to `acquire` should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding completed `acquire`.","format":"org.matrix.custom.html","formatted_body":" * The user should be the one who indicates that they are done. Ability to <code>acquire</code> should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding completed <code>acquire</code>.","m.mentions":{},"m.new_content":{"body":"The user should be the one who indicates that they are done. Ability to `acquire` should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding completed `acquire`.","format":"org.matrix.custom.html","formatted_body":"The user should be the one who indicates that they are done. Ability to <code>acquire</code> should not give you any further capabilities except the ability to indicate that you're done. And you should not have the ability to indicate that you're done without previously having exactly one corresponding completed <code>acquire</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$74VVSRanwq0iXxWf1eTiCJigAtfP7rb6BOQBrY03QxM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722289284504,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3NJoz3FC-ZXFTvsa7eTtoVb4EWH-Qd7FyfX6yaEh1bM"},
{"content":{"body":"right, it's a best effort thing","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Qffb0QxqX9ph97ZzQxWRrKMIulXnGQildhnxT-Bfi2Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289303479,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KRTwObKRDYqNXA-ncNy-p-oVTn69y7NUg8O0hYFIX10"},
{"content":{"body":"my thread can certainly be preempted","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$KRTwObKRDYqNXA-ncNy-p-oVTn69y7NUg8O0hYFIX10"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289306655,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ru2-13aLPvokUJjvE-Ue_h1FR6ydSERm1td5W6in02w"},
{"content":{"body":"i mean, that doesn't stop C++ implementations from trying to be clever with inline asm and spin counts even though it's also up to OS scheduling","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Ru2-13aLPvokUJjvE-Ue_h1FR6ydSERm1td5W6in02w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289330343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UNWqiXvOVg5pJ7MfwHfrTgqZMtvEsNngHNVIkCXzKnQ"},
{"content":{"body":"since it shows enough improvement on enough workloads on enough OSes","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$UNWqiXvOVg5pJ7MfwHfrTgqZMtvEsNngHNVIkCXzKnQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289347892,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uMxa5C_R5QeiwZij_yv_ZgySfL_gKroru6pBCVwvLoA"},
{"content":{"body":"It's easy enough for a consumer to wrap release:\n```js\nclass WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() => { this.#sem.release(1); });\n    return stack;\n  }\n}\n```\nBut you can also implement semaphores wrappers that defer the actual call to `release()` based on other heuristics, such as application load, quiescence, etc.","format":"org.matrix.custom.html","formatted_body":"<p>It's easy enough for a consumer to wrap release:</p>\n<pre><code class=\"language-js\">class WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() =&gt; { this.#sem.release(1); });\n    return stack;\n  }\n}\n</code></pre>\n<p>But you can also implement semaphores wrappers that defer the actual call to <code>release()</code> based on other heuristics, such as application load, quiescence, etc.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722289436674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-8J3nO4bp71-0prpP61GST9bcoyqHtYjRn_JCuXs0NA"},
{"content":{"body":" * It's easy enough for a consumer to wrap release:\n\n```js\nclass WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() => { this.#sem.release(1); });\n    return stack;\n  }\n}\n```\n\nBut you can also implement semaphore wrappers that defer the actual call to `release()` based on other heuristics, such as application load, quiescence, etc.","format":"org.matrix.custom.html","formatted_body":" * <p>It's easy enough for a consumer to wrap release:</p>\n<pre><code class=\"language-js\">class WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() =&gt; { this.#sem.release(1); });\n    return stack;\n  }\n}\n</code></pre>\n<p>But you can also implement semaphore wrappers that defer the actual call to <code>release()</code> based on other heuristics, such as application load, quiescence, etc.</p>\n","m.mentions":{},"m.new_content":{"body":"It's easy enough for a consumer to wrap release:\n\n```js\nclass WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() => { this.#sem.release(1); });\n    return stack;\n  }\n}\n```\n\nBut you can also implement semaphore wrappers that defer the actual call to `release()` based on other heuristics, such as application load, quiescence, etc.","format":"org.matrix.custom.html","formatted_body":"<p>It's easy enough for a consumer to wrap release:</p>\n<pre><code class=\"language-js\">class WorkArea {\n  #sem = new Semaphore(1);\n  async acquire() {\n    await this.#sem.acquire();\n    const stack = new DisposableStack();\n    stack.defer(() =&gt; { this.#sem.release(1); });\n    return stack;\n  }\n}\n</code></pre>\n<p>But you can also implement semaphore wrappers that defer the actual call to <code>release()</code> based on other heuristics, such as application load, quiescence, etc.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-8J3nO4bp71-0prpP61GST9bcoyqHtYjRn_JCuXs0NA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722289451290,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VkUepoFBpgEcP8iLTAv-nm_SsDkheQyDCZknKzNnI8s"},
{"content":{"body":"Counting semaphores, especially, have different cases than a simple binary semaphore or mutex","m.mentions":{},"msgtype":"m.text"},"ts":1722289510436,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vH2gcOGqCZh8LTaiSNMafCfP978DLoiEWue8B1jUWTo"},
{"content":{"body":"Yeah, idk, I think if I really cared about this enough I would probably just implement my spin loop in WASM where I have more control on the assembly that's generated anyway.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$uMxa5C_R5QeiwZij_yv_ZgySfL_gKroru6pBCVwvLoA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289534078,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$LuqmvW3s0zdTEwCQF9UG6NhNO2oioubMN2SxB5LMWy0"},
{"content":{"body":"why would you want to have to write a wrapper for the behavior that enforces correct usage","m.mentions":{},"msgtype":"m.text"},"ts":1722289621621,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XAZTmvk-arJMg0lqcF4wC3o04vC9a2PtJBDTgYv2nPs"},
{"content":{"body":"You're assuming a single correct usage, and there is not a single correct usage.","m.mentions":{},"msgtype":"m.text"},"ts":1722289651361,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$114CPlrQAUAHu889pr4pdPFCyKxSoo0SasrcKvpEV_s"},
{"content":{"body":"> <@rbuckton:matrix.org> You're assuming a single correct usage, and there is not a single correct usage.\n\nI don’t understand why you’d encoruage putting `dispose` on the manager instead of the instance.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24114CPlrQAUAHu889pr4pdPFCyKxSoo0SasrcKvpEV_s\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />You&#39;re assuming a single correct usage, and there is not a single correct usage.</blockquote></mx-reply>I don’t understand why you’d encoruage putting <code data-md=\"`\">dispose</code> on the manager instead of the instance.","m.relates_to":{"m.in_reply_to":{"event_id":"$114CPlrQAUAHu889pr4pdPFCyKxSoo0SasrcKvpEV_s"}},"msgtype":"m.text"},"ts":1722289708753,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eX7uj4Zn_GXusQXICeVGM-54CCnC7fApCHFTMvMlO4Q"},
{"content":{"body":"You can also separate the \"locking\" mechanism of a semaphore from the \"counting\" mechanism  of a semaphore, just as we're considering separating the \"locking\" mechanism of a Mutex from the state of the mutex, e.g.:\n\n```\nconst mut = new Mutex();\nstartThread(mut, data);\n{\n  using lck = new UniqueLock(mut);\n  ...\n} // releases `lck`\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<p>You can also separate the \"locking\" mechanism of a semaphore from the \"counting\" mechanism  of a semaphore, just as we're considering separating the \"locking\" mechanism of a Mutex from the state of the mutex, e.g.:</p>\n<pre><code>const mut = new Mutex();\nstartThread(mut, data);\n{\n  using lck = new UniqueLock(mut);\n  ...\n} // releases `lck`\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1722289755144,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$akKu11fGB4kLQ7vYkQJO5hMnSRU5vnPSrSfKL3dRgjY"},
{"content":{"body":"but i still have not heard a counter argument on why it's bad to have a hint","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$LuqmvW3s0zdTEwCQF9UG6NhNO2oioubMN2SxB5LMWy0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722289760956,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EOs_Eo9m_iTMlRHjiU4-yK9_GDhi04ypJGquZP4fA0U"},
{"content":{"body":"i think the release(n) use case is valid and is also better served with tokens.","m.mentions":{},"msgtype":"m.text"},"ts":1722289768537,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9vHRgPZJEBiQlcGsmYY78S8JZmTi6E5rHB7Fq7t7D_U"},
{"content":{"body":"> <@jridgewell:matrix.org> I don’t understand why you’d encoruage putting `dispose` on the manager instead of the instance.\n\nI didn't?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eX7uj4Zn_GXusQXICeVGM-54CCnC7fApCHFTMvMlO4Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don’t understand why you’d encoruage putting <code data-md=\"`\">dispose</code> on the manager instead of the instance.</blockquote></mx-reply>I didn't?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eX7uj4Zn_GXusQXICeVGM-54CCnC7fApCHFTMvMlO4Q"}},"msgtype":"m.text"},"ts":1722289771888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AI0QwxSPk921VFZwbO2VQ2L6puwpkPmujh0TplM-KQQ"},
{"content":{"body":"tauri://localhost/#/%23tc39-space%3Amatrix.org/%23tc39-delegates%3Amatrix.org/%24-8J3nO4bp71-0prpP61GST9bcoyqHtYjRn_JCuXs0NA is on the manager instead of the token instance.","msgtype":"m.text"},"ts":1722289803321,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8-VjkNZml7t1PGTpnEQ0WSvJXrSZ7RZsogN5Cq9RSlU"},
{"content":{"body":"`acquire().dispose()` maybe makes sense for binary semaphores, but not necessarily counting semaphores.","format":"org.matrix.custom.html","formatted_body":"<code>acquire().dispose()</code> maybe makes sense for binary semaphores, but not necessarily counting semaphores.","m.mentions":{},"msgtype":"m.text"},"ts":1722289814117,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zt6YQGb3o5bJmJA8f0vbEkSrcnP1JzAZyMSQDwc-fos"},
{"content":{"body":"Wow, that’ copy-link is borked.","msgtype":"m.text"},"ts":1722289817128,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5ZLJTrwuV8mMyyKRBLB2NWDHGEUTUlo7Y7z_ui-zu2A"},
{"content":{"body":"That link didn't work in matrix","m.mentions":{},"msgtype":"m.text"},"ts":1722289833333,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ypFzyKf253BKGx-zMGEHRWnD834B0weUux60E8ijiaU"},
{"content":{"body":"https://matrixlogs.bakkot.com/TC39_Delegates/2024-07-29#L327","msgtype":"m.text"},"ts":1722289847983,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6By-_9sgeMKQkUwg8sg7vNFUcGwyM1N3WGWD62zvYAg"},
{"content":{"body":"In JavaScript, I claim, the overwhelming most common use case for an API that looks kinda like this is \"I want to make at most 5 simultaneous network requests\" (or database connections, or filesystem accesses, or threads, or whatever). Leaving aside naming questions, I think that use case is best served by the API presented today.","m.mentions":{},"msgtype":"m.text"},"ts":1722289863768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$apMlZoa2AwXoZoDT2e77bHJ_k3ZGzvuVUbDp4dkwGTg"},
{"content":{"body":"Cinny apparently doesn’t implement link to message well.","msgtype":"m.text"},"ts":1722289866647,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6ly6_c5GxKf5vjk9R1-dnrgl_Jfnn5ItwT9yDqfjW_s"},
{"content":{"body":"i don't agree that there is a difference in api preference for n=1 vs n>1","m.mentions":{},"msgtype":"m.text"},"ts":1722289905635,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x5-sdgZr42oSfq6fQLFg31ll1ILkidiBJx4GhTDSfY0"},
{"content":{"body":"> <@jridgewell:matrix.org> https://matrixlogs.bakkot.com/TC39_Delegates/2024-07-29#L327\n\nThat example didn't put dispose on the manager? It wrapped `release` in the call to `acquire` to emulate what snek was suggesting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6By-_9sgeMKQkUwg8sg7vNFUcGwyM1N3WGWD62zvYAg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>https://matrixlogs.bakkot.com/TC39_Delegates/2024-07-29#L327</blockquote></mx-reply>That example didn't put dispose on the manager? It wrapped <code>release</code> in the call to <code>acquire</code> to emulate what <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a> was suggesting.","m.mentions":{"user_ids":["@jridgewell:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6By-_9sgeMKQkUwg8sg7vNFUcGwyM1N3WGWD62zvYAg"}},"msgtype":"m.text"},"ts":1722289917893,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tGD-VR9oRXrdPpZOKZzTTRhp_dD7COBCP7lhk4dm8PQ"},
{"content":{"body":"If the concern is \"I sometimes want to do something other than that, and I think of that other thing as being called Semaphore\", that's a fair piece of feedback to support the rename, but not to support a different API.","m.mentions":{},"msgtype":"m.text"},"ts":1722289939465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WSfcLCkykBWzKhLjPHefp28HVU-uEeY_uphb6CXm6LQ"},
{"content":{"body":"`this.#sem.release(1)`, with `#sem` being a manger.","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">this.#sem.release(1)</code>, with <code data-md=\"`\">#sem</code> being a manger.","msgtype":"m.text"},"ts":1722289942244,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZwxtyXt_yAPs4oJrk1N32OA4WD_rXu4xm007Pzgvjc8"},
{"content":{"body":"That's what a `{ acquire(): Promise<Disposable> }` would do anyways?","format":"org.matrix.custom.html","formatted_body":"That's what a <code>{ acquire(): Promise&lt;Disposable&gt; }</code> would do anyways?","m.mentions":{},"msgtype":"m.text"},"ts":1722289970083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H5C-pVIlwr-ms4eqMXPEdyRQyrLnxIIAHGgAcH6FSSc"},
{"content":{"body":"So, consider `ReverseAsyncContext` with `add` and `reduce` instead of `set` and `get`.","format":"org.matrix.custom.html","formatted_body":"So, consider <code>ReverseAsyncContext</code> with <code>add</code> and <code>reduce</code> instead of <code>set</code> and <code>get</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1722290034767,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38"},
{"content":{"body":"what does this mean","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290064737,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$I2QbOzbsDOmvQfRPkkGxOJdlSJLJS5sYCSdA38oxB8g"},
{"content":{"body":"If the hint does anything other than monotonically increase/decrease doesn't it kinda need to know the limit anyway?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$EOs_Eo9m_iTMlRHjiU4-yK9_GDhi04ypJGquZP4fA0U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290076072,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$vkfUsZ5oVmsuD_Dn1ebnewFXyRp9OkDeCzRPXgVQ0Lo"},
{"content":{"body":"I don't think it's necessarily bad just that without any comment on what it means then it's unclear.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$vkfUsZ5oVmsuD_Dn1ebnewFXyRp9OkDeCzRPXgVQ0Lo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290105073,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$M-O8VQ3kr0223TC8v8YmYa_9NsKxMIpVLFZ_5gdvO-8"},
{"content":{"body":"We were looking into something like this for opentracing, opencontext, which is now opentel.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$I2QbOzbsDOmvQfRPkkGxOJdlSJLJS5sYCSdA38oxB8g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290107148,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$0CIOXuNC2gLim1cfJePO4xb_jWyXakXvmkbEZDvprbg"},
{"content":{"body":"oh no i just mean what is a ReverseAsyncContext","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$0CIOXuNC2gLim1cfJePO4xb_jWyXakXvmkbEZDvprbg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290133221,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2nezHPaWqd5paVShLq3MRyHNcpteOlu3MvgGcKJeZCE"},
{"content":{"body":"We were interested because it would make it possible to solve some “read after write” hazards, with a “cookie” or lamport clock variants","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$2nezHPaWqd5paVShLq3MRyHNcpteOlu3MvgGcKJeZCE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290136573,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$LOqq49pv28VQ6q0VnrpJfMmSr-lm5h9aBMJt_lCryJ0"},
{"content":{"body":"there would be an internal limit","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$M-O8VQ3kr0223TC8v8YmYa_9NsKxMIpVLFZ_5gdvO-8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290141870,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UGaSVYnimS8vw9e1-KQc3V6mcTgLis8nZiUuNIZd5A4"},
{"content":{"body":"It’s AsyncContext but the variables are sets instead of cells.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$LOqq49pv28VQ6q0VnrpJfMmSr-lm5h9aBMJt_lCryJ0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290156595,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2Y5j6RJltewxbhOVtwumFoASXuXoXPA_udOF6f1b_io"},
{"content":{"body":"like no matter waht the input is you'd never `pause` more than N times, whatever that is","format":"org.matrix.custom.html","formatted_body":"like no matter waht the input is you'd never <code>pause</code> more than N times, whatever that is","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$UGaSVYnimS8vw9e1-KQc3V6mcTgLis8nZiUuNIZd5A4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290159210,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-T8EtqdsuyrOvzcrD-SCQow2kQfQnZ0sgWrzdv2Us_A"},
{"content":{"body":"50, 100","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$-T8EtqdsuyrOvzcrD-SCQow2kQfQnZ0sgWrzdv2Us_A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290163409,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-QFGBXA39apL27gADbQyuo9p7SxLs4rXHeNInvXOozs"},
{"content":{"body":"Like what if I like to write my loops as `for (I = spinCount; I--;) Atomics.yield(i);`","format":"org.matrix.custom.html","formatted_body":"Like what if I like to write my loops as <code>for (I = spinCount; I--;) Atomics.yield(i);</code>","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$-QFGBXA39apL27gADbQyuo9p7SxLs4rXHeNInvXOozs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290166243,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$90MB85eGQON_AN4znnXxXmWMyCU0shJo-DVeoj1yWlg"},
{"content":{"body":"Such that it’s meaningful for information to flow up the stack instead of broadcast outward.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$2Y5j6RJltewxbhOVtwumFoASXuXoXPA_udOF6f1b_io"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290177057,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$kgLneA4GpELAPezCPB-xJ05RIuyBx5qEoEQz7bTM-xI"},
{"content":{"body":"because it's less characters or w/e","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$90MB85eGQON_AN4znnXxXmWMyCU0shJo-DVeoj1yWlg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290178673,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ue3JS1sSmB9mAjSM9B1c6hGhvclhdxI6TNcDA32-u5w"},
{"content":{"body":"oh i see, got it","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$kgLneA4GpELAPezCPB-xJ05RIuyBx5qEoEQz7bTM-xI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290184468,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oUFm4DHpP7cttHWvThyAYpONOa_fCE_Garee_ZIBWmQ"},
{"content":{"body":" * oh i see, got it, ty","format":"org.matrix.custom.html","formatted_body":" * oh i see, got it, ty","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.new_content":{"body":"oh i see, got it, ty","format":"org.matrix.custom.html","formatted_body":"oh i see, got it, ty","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$oUFm4DHpP7cttHWvThyAYpONOa_fCE_Garee_ZIBWmQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722290204886,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vdby9aEgRObCi0ZM-lFal9EKO-ZflUnwwBPWsjNABcw"},
{"content":{"body":"Wait then why not have the JIT inject a count into the IR?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$ue3JS1sSmB9mAjSM9B1c6hGhvclhdxI6TNcDA32-u5w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290217796,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$hb9taZpYOOEKixLd7yMhzIsDOMySstIRa7KLy6cAg34"},
{"content":{"body":"The reducer would merge all the members of the set such that the next consumer would have less work.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$oUFm4DHpP7cttHWvThyAYpONOa_fCE_Garee_ZIBWmQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290252218,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$9rIo-Q79YlUgPgBvjZTyYy9NnkOly---OJ4fajdSx-M"},
{"content":{"body":"It is probably a Bad Idea™ but this is the natural conclusion. There was a paper about it that I will have to find.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$9rIo-Q79YlUgPgBvjZTyYy9NnkOly---OJ4fajdSx-M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290288192,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$EMJbAmlR1qcwaGJsvf2kD5xsNtgJSuT4rB_IgA5u-X0"},
{"content":{"body":"Thanks for sharing! We was discussing about possible merging/reducing with this flow at https://github.com/tc39/proposal-async-context/pull/94#discussion_r1651720741 ","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$EMJbAmlR1qcwaGJsvf2kD5xsNtgJSuT4rB_IgA5u-X0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290373716,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$pPm985p-se4KXYmkpeeN4YV1lUgdyxKbDKLcp7puq6k"},
{"content":{"body":"> <@keith_miller:matrix.org> Like what if I like to write my loops as `for (I = spinCount; I--;) Atomics.yield(i);`\n\nyeah, that's fair","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$90MB85eGQON_AN4znnXxXmWMyCU0shJo-DVeoj1yWlg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Like what if I like to write my loops as <code>for (I = spinCount; I--;) Atomics.yield(i);</code></blockquote></mx-reply>yeah, that's fair","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":false,"m.in_reply_to":{"event_id":"$90MB85eGQON_AN4znnXxXmWMyCU0shJo-DVeoj1yWlg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290415525,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J1Yen0zqmo08CoyKaQtoqjgVDiYAQ_fDGVkbbnvy-l0"},
{"content":{"body":"yeah we were thinking that it'd be bad if JS code got injected into the middle whenever context merges happen (which is all the time)","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$pPm985p-se4KXYmkpeeN4YV1lUgdyxKbDKLcp7puq6k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290420948,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wEsbNWoy4qVkLxDXJfRcnTAG3uelEpNvUs0_wu-3u0I"},
{"content":{"body":"> <@bakkot:matrix.org> If the concern is \"I sometimes want to do something other than that, and I think of that other thing as being called Semaphore\", that's a fair piece of feedback to support the rename, but not to support a different API.\n\nI have two concerns:\n1. The `Semaphore` API proposed depends on asynchrony and is geared for async coordination, not thread coordination. We also hope to introduce other thread coordination primitives in the future, including a `Semaphore` in line with `Mutex` and `Condition` that can be shared and does not require asynchrony. As such, we must avoid conflicting naming.\n2. Before we decide on a final API for an async coordination `Semaphore`, we must ensure we understand the full problem domain of counting semaphores, to ensure we chose an API that is consistent with intended use cases.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WSfcLCkykBWzKhLjPHefp28HVU-uEeY_uphb6CXm6LQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>If the concern is &quot;I sometimes want to do something other than that, and I think of that other thing as being called Semaphore&quot;, that&#39;s a fair piece of feedback to support the rename, but not to support a different API.</blockquote></mx-reply><p>I have two concerns:</p>\n<ol>\n<li>The <code>Semaphore</code> API proposed depends on asynchrony and is geared for async coordination, not thread coordination. We also hope to introduce other thread coordination primitives in the future, including a <code>Semaphore</code> in line with <code>Mutex</code> and <code>Condition</code> that can be shared and does not require asynchrony. As such, we must avoid conflicting naming.</li>\n<li>Before we decide on a final API for an async coordination <code>Semaphore</code>, we must ensure we understand the full problem domain of counting semaphores, to ensure we chose an API that is consistent with intended use cases.</li>\n</ol>\n","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WSfcLCkykBWzKhLjPHefp28HVU-uEeY_uphb6CXm6LQ"}},"msgtype":"m.text"},"ts":1722290469096,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7AScPss-1NgSUQTeMxSGhZjWhonfHfJGd4WiuEyUOlQ"},
{"content":{"body":"the guidance is that you pass monotonic increasing integers as hints that you are pausing for the Nth time","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$J1Yen0zqmo08CoyKaQtoqjgVDiYAQ_fDGVkbbnvy-l0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290483043,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HSWLDqPMFqzls-gR6ZwSIjbsbTPJUBkwYFpXbTxaQRY"},
{"content":{"body":"whatever strategy the VM chooses, it needs to understand that","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$HSWLDqPMFqzls-gR6ZwSIjbsbTPJUBkwYFpXbTxaQRY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290495486,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n2eBZfmXrpd-hMHcx8kOyyvpulWPd041bUVR8lXjtAU"},
{"content":{"body":"Coming to think of it, putting a Set in an AsyncContext variable can’t be prevented, and this kind of work will be possible regardleess","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$wEsbNWoy4qVkLxDXJfRcnTAG3uelEpNvUs0_wu-3u0I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290496328,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$jA3MuEi43JDNSAtBgzVnfh1zlDJeGx4GMPKteupk1dk"},
{"content":{"body":"it can then choose whatever","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$n2eBZfmXrpd-hMHcx8kOyyvpulWPd041bUVR8lXjtAU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290498845,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O7_NFkYfbeGYA7DltuuJJNgKU-CYqAtUuiqZ-AhyoTw"},
{"content":{"body":"And it’s only safe anyway if the mergers are consistent (which is enforced to a degree by ocap discipline around holding the variable)","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$jA3MuEi43JDNSAtBgzVnfh1zlDJeGx4GMPKteupk1dk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290528693,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$uI-EvNxWrD5RdVxeLpUlUDlDcYNBrcQvrGq5XVYGFGM"},
{"content":{"body":"For `Mutex`, we have been discussing an API design to allow `Mutex`, `Condition`, and `UniqueLock` to work in a blocking manner (when off the UI thread in the browser), and an async manner (when on the UI thread in the browser). The current design has both sync and async methods on `UniqueLock`.","format":"org.matrix.custom.html","formatted_body":"For <code>Mutex</code>, we have been discussing an API design to allow <code>Mutex</code>, <code>Condition</code>, and <code>UniqueLock</code> to work in a blocking manner (when off the UI thread in the browser), and an async manner (when on the UI thread in the browser). The current design has both sync and async methods on <code>UniqueLock</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1722290578006,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gB7jzLfnv4yCg3P0hy8ZWnA0x4QwM7wgEOmR7Z5yBNk"},
{"content":{"body":"Ah, but contexts derived from a context holding growing subsets that might contribute to the parent set is not there.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$uI-EvNxWrD5RdVxeLpUlUDlDcYNBrcQvrGq5XVYGFGM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290634071,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$JIOFyjooJUf1EvvuvmtIs32VPSni88ZpRXhGr1NaaxM"},
{"content":{"body":"Were we able to consider `Semaphore` for the MVP for shared structs, it likely would be a sharable object like `Mutex`, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate `Semaphore` unnecessary.","format":"org.matrix.custom.html","formatted_body":"Were we able to consider <code>Semaphore</code> for the MVP for shared structs, it likely would be a sharable object like <code>Mutex</code>, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate <code>Semaphore</code> unnecessary.","m.mentions":{},"msgtype":"m.text"},"ts":1722290645011,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vL-ePALKRYy7-z3AcKYMQOFSamxvsIp0Q0GrwpwYUaI"},
{"content":{"body":"why do you draw a line between binary and counting semaphores for this api? ","m.mentions":{},"msgtype":"m.text"},"ts":1722290646446,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ig4WgGfuTznAKnVbXGNSiDCmM59tPb3YhdYCogYfB3k"},
{"content":{"body":"do you think they must have different apis?","m.mentions":{},"msgtype":"m.text"},"ts":1722290653540,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YNcfE-8LsHtFKJJlOX5ouOFB9YpxyN8Bbhw4jo9pVRk"},
{"content":{"body":"Well, it’ll be fun to talk about.","m.mentions":{},"m.relates_to":{"event_id":"$lZN9fNpmStD6H5Cgc2Ms7q7Ht_EiJUkDphav1JUlS38","is_falling_back":true,"m.in_reply_to":{"event_id":"$JIOFyjooJUf1EvvuvmtIs32VPSni88ZpRXhGr1NaaxM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722290657633,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$wUTZlh1DKCb6xCiIrd7ca8cHL69aRmoVIN_yK-lh29o"},
{"content":{"body":"(I for one do not think that we need to replay the history of mutual exclusion with all its conventional names.)","m.mentions":{},"msgtype":"m.text"},"ts":1722290711713,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$ArQvaXcCg9XjDFbTg3W15EJB-jzeEyiVUZlcrovZEgs"},
{"content":{"body":"Not necessarily. But I'm not sold on `acquire().dispose()`. I can see it making sense on a binary semaphore, as it can only ever have one user, but a counting semaphore can have multiple users, or release in batches.","format":"org.matrix.custom.html","formatted_body":"Not necessarily. But I'm not sold on <code>acquire().dispose()</code>. I can see it making sense on a binary semaphore, as it can only ever have one user, but a counting semaphore can have multiple users, or release in batches.","m.mentions":{},"msgtype":"m.text"},"ts":1722290722706,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n2D92bU51Q8wRugmLaXkisZsmd7ToOLZkP-IfHpY5QE"},
{"content":{"body":"((I also for one do not think that we need to foist the unavoidable downsides of mutual exclusion on JavaScript, which is more useful for some workloads due to omission while not precluding folks from using other languages for workloads for which they are better suited.))","m.mentions":{},"msgtype":"m.text"},"ts":1722290813427,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xSwpoJgCPC3unfTrUGN7P7_wn3PW-ZHrQAER-pC6vms"},
{"content":{"body":"keith_miller msaboff waldemar rbuckton https://github.com/tc39/proposal-atomics-microwait/issues/9","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> https://github.com/tc39/proposal-atomics-microwait/issues/9","m.mentions":{"user_ids":["@keith_miller:matrix.org","@msaboff:matrix.org","@waldemarh:matrix.org","@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1722290856954,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Hk2XOFi4uxtKxghUjT1jas7WADjAAxWoIvrqUAd2_-0"},
{"content":{"body":"> <@rbuckton:matrix.org> Were we able to consider `Semaphore` for the MVP for shared structs, it likely would be a sharable object like `Mutex`, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate `Semaphore` unnecessary.\n\n`Mutex` does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you just change the binary to counting, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only `acquireSync` plus coordination with the host to be `structuredClone`-able.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vL-ePALKRYy7-z3AcKYMQOFSamxvsIp0Q0GrwpwYUaI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Were we able to consider <code>Semaphore</code> for the MVP for shared structs, it likely would be a sharable object like <code>Mutex</code>, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate <code>Semaphore</code> unnecessary.</blockquote></mx-reply><code>Mutex</code> does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you just change the binary to counting, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only <code>acquireSync</code> plus coordination with the host to be <code>structuredClone</code>-able.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vL-ePALKRYy7-z3AcKYMQOFSamxvsIp0Q0GrwpwYUaI"}},"msgtype":"m.text"},"ts":1722291175447,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oR0TyalDIa-oKJHeEjT5jnFKg1-_F0v-htZ_ox8f4_M"},
{"content":{"body":"> <@rbuckton:matrix.org> Were we able to consider `Semaphore` for the MVP for shared structs, it likely would be a sharable object like `Mutex`, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate `Semaphore` unnecessary.\n\n * `Mutex` does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you change the binary nature of `Mutex` to be counting instead, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only `acquireSync` plus coordination with the host to be `structuredClone`-able.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vL-ePALKRYy7-z3AcKYMQOFSamxvsIp0Q0GrwpwYUaI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Were we able to consider <code>Semaphore</code> for the MVP for shared structs, it likely would be a sharable object like <code>Mutex</code>, and have both a blocking (off UI thread) and non-blocking async (on UI thread) API, that would likely make a separate <code>Semaphore</code> unnecessary.</blockquote></mx-reply> * <code>Mutex</code> does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you change the binary nature of <code>Mutex</code> to be counting instead, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only <code>acquireSync</code> plus coordination with the host to be <code>structuredClone</code>-able.","m.mentions":{},"m.new_content":{"body":"`Mutex` does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you change the binary nature of `Mutex` to be counting instead, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only `acquireSync` plus coordination with the host to be `structuredClone`-able.","format":"org.matrix.custom.html","formatted_body":"<code>Mutex</code> does not handle the \"I want to make at most 5 simultaneous network requests\" case, which is (I claim) the most common case for something like this in JS. But if you change the binary nature of <code>Mutex</code> to be counting instead, that's just what's proposed here, plus natural extensions already discussed: an off-thread-only <code>acquireSync</code> plus coordination with the host to be <code>structuredClone</code>-able.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$oR0TyalDIa-oKJHeEjT5jnFKg1-_F0v-htZ_ox8f4_M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722291195402,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0O_QPlTXTr2GGtfHZ5XccTAqHIqx_nqkMEWQgx7w9II"},
{"content":{"body":"> <@devsnek:matrix.org> why do you draw a line between binary and counting semaphores for this api?\n\nAlso, let me back up a bit and clarify my position. I have a negative gut reaction to `acquire().dispose()` possibly due to my experience and prior use of semaphores in .NET and C++, which both keep the acquire/release capabilities on the semaphore itself. To address that reaction, I need additional time to consider the implications of such an API over the existing use cases. Normally I would be chomping at the bit for the DX improvement that `acquire().dispose()` might provide, but the shared structs proposal is trying to enable a very specific set of capabilities that have unique concerns that differ from most existing JS code. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ig4WgGfuTznAKnVbXGNSiDCmM59tPb3YhdYCogYfB3k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>why do you draw a line between binary and counting semaphores for this api? </blockquote></mx-reply>Also, let me back up a bit and clarify my position. I have a negative gut reaction to <code>acquire().dispose()</code> possibly due to my experience and prior use of semaphores in .NET and C++, which both keep the acquire/release capabilities on the semaphore itself. To address that reaction, I need additional time to consider the implications of such an API over the existing use cases. Normally I would be chomping at the bit for the DX improvement that <code>acquire().dispose()</code> might provide, but the shared structs proposal is trying to enable a very specific set of capabilities that have unique concerns that differ from most existing JS code.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ig4WgGfuTznAKnVbXGNSiDCmM59tPb3YhdYCogYfB3k"}},"msgtype":"m.text"},"ts":1722291234244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BKSoP0-7yByqaUIWY8kFUm3IysqWODAAsZsEXWW_iiA"},
{"content":{"body":"Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down? What changed that made you think monotonic was a problem?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$O7_NFkYfbeGYA7DltuuJJNgKU-CYqAtUuiqZ-AhyoTw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291256504,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$DnlcMqffbYef5zHjbJl7eC0keRZeqPrCgxRffPo6a1g"},
{"content":{"body":"I also regret I did not have the time to flesh out those concerns prior to the meeting, unfortunately a week was not long enough given other pressing concerns. I hope to have a longer discussion with Michael Ficarra following the plenary.","format":"org.matrix.custom.html","formatted_body":"I also regret I did not have the time to flesh out those concerns prior to the meeting, unfortunately a week was not long enough given other pressing concerns. I hope to have a longer discussion with <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> following the plenary.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1722291380284,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ngnYBBclnkNTFnqHBGYSA8QcO2qef7aAK5ZMlELaXjI"},
{"content":{"body":" * Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to MDN. What changed that made you think monotonic was a problem?","format":"org.matrix.custom.html","formatted_body":" * Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to MDN. What changed that made you think monotonic was a problem?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.new_content":{"body":"Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to MDN. What changed that made you think monotonic was a problem?","format":"org.matrix.custom.html","formatted_body":"Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to MDN. What changed that made you think monotonic was a problem?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DnlcMqffbYef5zHjbJl7eC0keRZeqPrCgxRffPo6a1g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722291411741,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$eissadpwHDdWZcHJ16UJsBqlrwxA_Pl8qi5fEwQ4Khk"},
{"content":{"body":" * Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to the spec or MDN. What changed that made you think monotonic was a problem?","format":"org.matrix.custom.html","formatted_body":" * Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to the spec or MDN. What changed that made you think monotonic was a problem?","m.mentions":{},"m.new_content":{"body":"Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to the spec or MDN. What changed that made you think monotonic was a problem?","format":"org.matrix.custom.html","formatted_body":"Hmm, I guess, I'm a bit confused about the objection to monotonically increasing pauses? Isn't that morally the same as what you proposed today? If you want shorter and shorter waits just write your loop as a count down. We could even add such a note to the spec or MDN. What changed that made you think monotonic was a problem?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DnlcMqffbYef5zHjbJl7eC0keRZeqPrCgxRffPo6a1g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722291424248,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$7fr3G5yggNgJHhL-U3osG6L36a8HV11ANHQMmdCrRUI"},
{"content":{"body":"i see. my personal experience using counting and binary semaphores in rust (which is just tokio::sync::Semaphore, its the same api) is that it works well for both cases, and it has helped to reduce bugs in more complex use cases like the ones you seem to be concerned about.","m.mentions":{},"msgtype":"m.text"},"ts":1722291430219,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NaWHYrB6WerNRNmh1kUBsIfRtc9GgPkow9eXCIpz8Do"},
{"content":{"body":"i probably overreacted","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$DnlcMqffbYef5zHjbJl7eC0keRZeqPrCgxRffPo6a1g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291453858,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$z4g4vD3mC8uFXvLEd5wYAm9iJoRpbJVeqPVgOjVKsZQ"},
{"content":{"body":"i am not really objected to monotonic increasing","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$DnlcMqffbYef5zHjbJl7eC0keRZeqPrCgxRffPo6a1g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291460829,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NMKyWXBpMG1M25yxTKsCS_gMo6jscnPZx90dMKDQCho"},
{"content":{"body":"i think it is slightly less ergonomic because i think monotonic decreasing wait time is the right default interpretation","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$NMKyWXBpMG1M25yxTKsCS_gMo6jscnPZx90dMKDQCho"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291486997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_u1woqC-j0niGeOQOPBP9hc-lMmknqMtX22OBhFQP-M"},
{"content":{"body":"but as you say i can of course just write the opposite loop","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$NMKyWXBpMG1M25yxTKsCS_gMo6jscnPZx90dMKDQCho"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291493456,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xKWbxc6METbtRM7c2Z-iD4pegWxQB0vdwJ2t9JII7gY"},
{"content":{"body":"but it's easy to flip that around: why is monotonic increasing the right default?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$xKWbxc6METbtRM7c2Z-iD4pegWxQB0vdwJ2t9JII7gY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291534439,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aGOUlxsktpj3rWSS2QpH0TWFUwWZgJe4Mnqi4VR0mYk"},
{"content":{"body":"> <@shuyuguo:matrix.org> i think it is slightly less ergonomic because i think monotonic decreasing wait time is the right default interpretation\n\nI guess I disagree with that assumption but I don't have any data to back it up.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_u1woqC-j0niGeOQOPBP9hc-lMmknqMtX22OBhFQP-M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i think it is slightly less ergonomic because i think monotonic decreasing wait time is the right default interpretation</blockquote></mx-reply>I guess I disagree with that assumption but I don't have any data to back it up.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":false,"m.in_reply_to":{"event_id":"$_u1woqC-j0niGeOQOPBP9hc-lMmknqMtX22OBhFQP-M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291555070,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$PAFkBdsJ_-KlqCyKFhSRTPzaUoMgovi5twx8gDAXxZk"},
{"content":{"body":"yeah, tbf neither do i","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$PAFkBdsJ_-KlqCyKFhSRTPzaUoMgovi5twx8gDAXxZk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291569745,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9VesJymQlcJROBU3yha4IwMcv70ozZQqM9MpyvResPs"},
{"content":{"body":"> <@devsnek:matrix.org> i see. my personal experience using counting and binary semaphores in rust (which is just tokio::sync::Semaphore, its the same api) is that it works well for both cases, and it has helped to reduce bugs in more complex use cases like the ones you seem to be concerned about.\n\nThat's well and good, I'm just coming at `Semaphore` from a different perspective. I also was a bit put off by the, albeit optional, `wrap` and `wrapIterator` convenience methods, they felt out of place and seemed to be pushing `Semaphore` towards being very specific to async iteration use cases.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NaWHYrB6WerNRNmh1kUBsIfRtc9GgPkow9eXCIpz8Do?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i see. my personal experience using counting and binary semaphores in rust (which is just tokio::sync::Semaphore, its the same api) is that it works well for both cases, and it has helped to reduce bugs in more complex use cases like the ones you seem to be concerned about.</blockquote></mx-reply>That's well and good, I'm just coming at <code>Semaphore</code> from a different perspective. I also was a bit put off by the, albeit optional, <code>wrap</code> and <code>wrapIterator</code> convenience methods, they felt out of place and seemed to be pushing <code>Semaphore</code> towards being very specific to async iteration use cases.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NaWHYrB6WerNRNmh1kUBsIfRtc9GgPkow9eXCIpz8Do"}},"msgtype":"m.text"},"ts":1722291576240,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-MuothFhJs2qmbCM3qBP8Es12mLkbeV_-toFXSl84aE"},
{"content":{"body":"In other contexts backoff is typically longer and longer I guess","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$9VesJymQlcJROBU3yha4IwMcv70ozZQqM9MpyvResPs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291581227,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$YbX8dv215UiAecljqJhMEPSoMMvC5yo8mNN3Mj4KN88"},
{"content":{"body":"the only tie-breaking data i see is there might be non-monotonic relationships that are reasonable as well","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$9VesJymQlcJROBU3yha4IwMcv70ozZQqM9MpyvResPs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291581811,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7Ii9HEDac4atk5vl_N-55T6S4MgIozNzGdUtxtbKFi0"},
{"content":{"body":"(and like, there's no way to check for non-compliance, so whatever relationship we _say_ in that step, an implementation can still do anything it wants)","format":"org.matrix.custom.html","formatted_body":"(and like, there's no way to check for non-compliance, so whatever relationship we <em>say</em> in that step, an implementation can still do anything it wants)","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$7Ii9HEDac4atk5vl_N-55T6S4MgIozNzGdUtxtbKFi0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291609876,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$khT6d4fden0ofpW062IbKXS7s3tIG0u-sMS2gOEM17o"},
{"content":{"body":"so given that, i am also happy to say that the hint is monotonic increasing","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$khT6d4fden0ofpW062IbKXS7s3tIG0u-sMS2gOEM17o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291635981,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7ObJ_Ya1C3gzW2qbhWQRcpWLRWIme1ZrphTPYLB1V04"},
{"content":{"body":"But non-monotonic seems like it would need to know the upper bound in most cases.","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$7ObJ_Ya1C3gzW2qbhWQRcpWLRWIme1ZrphTPYLB1V04"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291664043,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$Hjvw01sJcaxoOfQvZntiFTPHHTOFI1-H8C0oXC9uKNo"},
{"content":{"body":"so does monotonic","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Hjvw01sJcaxoOfQvZntiFTPHHTOFI1-H8C0oXC9uKNo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291673010,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uUsX5ARvKPXko_g6N_Lrjz5beIiq4lqKv-XfKZKRsUM"},
{"content":{"body":"you don't want a user to be able to `pause` for 2^53 times...","format":"org.matrix.custom.html","formatted_body":"you don't want a user to be able to <code>pause</code> for 2^53 times...","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$uUsX5ARvKPXko_g6N_Lrjz5beIiq4lqKv-XfKZKRsUM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291680443,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gp-sL4Bn8hMVywIOk-bfe_Q2qn9Xde5z5ZGNL_uqplI"},
{"content":{"body":"Well that would presumably a static cap?","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$gp-sL4Bn8hMVywIOk-bfe_Q2qn9Xde5z5ZGNL_uqplI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291695677,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$lPD13WjbeV7nqyrf5hctQSHR-3ANNculrcGNyLCXVaw"},
{"content":{"body":"right","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$lPD13WjbeV7nqyrf5hctQSHR-3ANNculrcGNyLCXVaw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291700034,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G6EezDCxmTEPv_GPE8qlWWgLKAlWNM5mZgmrARNoBBE"},
{"content":{"body":" * Well that would presumably be a static cap?","format":"org.matrix.custom.html","formatted_body":" * Well that would presumably be a static cap?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.new_content":{"body":"Well that would presumably be a static cap?","format":"org.matrix.custom.html","formatted_body":"Well that would presumably be a static cap?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lPD13WjbeV7nqyrf5hctQSHR-3ANNculrcGNyLCXVaw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722291704615,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$hHzVjF9lsAn3zBFNwUkTzul1RSTWaS4Q-J_a-w0ZQB4"},
{"content":{"body":"(Those would be on Governor, not Semaphore, and would be implemented purely in terms of `acquire`/`release`. also `wrap` is useful for lots of stuff; it's basically https://www.npmjs.com/package/throat which gets used a bunch)","format":"org.matrix.custom.html","formatted_body":"(Those would be on Governor, not Semaphore, and would be implemented purely in terms of <code>acquire</code>/<code>release</code>. also <code>wrap</code> is useful for lots of stuff; it's basically https://www.npmjs.com/package/throat which gets used a bunch)","m.mentions":{},"msgtype":"m.text"},"ts":1722291717640,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pPmhgWxGNTIUBRVMIxrp8KPzQlTG1yrRUPn1On8cQvM"},
{"content":{"body":"But e.g. if you wanted to do X -> X-1 -> X-2 -> X-1 -> X you need to know the midpoint","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$G6EezDCxmTEPv_GPE8qlWWgLKAlWNM5mZgmrARNoBBE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291742021,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$uRQ3cC_KAeLdl58TcoCEu6Qavk5A9wyLY58CI1egd0o"},
{"content":{"body":"From working with `Atomics.Mutex` in the Shared Structs dev trial, and experimenting with a `UniqueLock` approach that dovetailed with `using`, I found I quite liked way concerns were separated. In that design, `Mutex` is essentially an opaque shared token. To take, attempt to take, release, or assume a lock required a non-shared `UniqueLock` wrapper that was bound to the local scope.","format":"org.matrix.custom.html","formatted_body":"From working with <code>Atomics.Mutex</code> in the Shared Structs dev trial, and experimenting with a <code>UniqueLock</code> approach that dovetailed with <code>using</code>, I found I quite liked way concerns were separated. In that design, <code>Mutex</code> is essentially an opaque shared token. To take, attempt to take, release, or assume a lock required a non-shared <code>UniqueLock</code> wrapper that was bound to the local scope.","m.mentions":{},"msgtype":"m.text"},"ts":1722291762149,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IfByUisiaIe8prWmrKhEA1tgaE22yC1IzvxAe3SpYoE"},
{"content":{"body":"I dunno, I guess this seems like way too deep into the bike shed lol","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$uRQ3cC_KAeLdl58TcoCEu6Qavk5A9wyLY58CI1egd0o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291775479,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$RnlCaH-a98BhkjurQlMciNt4x3nr4JTbjdgsxTlc79Q"},
{"content":{"body":" * I dunno, maybe we're way too deep into the bike shed lol","format":"org.matrix.custom.html","formatted_body":" * I dunno, maybe we're way too deep into the bike shed lol","m.mentions":{},"m.new_content":{"body":"I dunno, maybe we're way too deep into the bike shed lol","format":"org.matrix.custom.html","formatted_body":"I dunno, maybe we're way too deep into the bike shed lol","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RnlCaH-a98BhkjurQlMciNt4x3nr4JTbjdgsxTlc79Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722291788814,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$SbtXevRptZK8XDejso4P4CKjXTDfxaS1ulGfE0x0tHc"},
{"content":{"body":"Were we to do `acquire().release()` for `Semaphore`, I would have generally preferred to use a similar API design to `Mutex`/`UniqueLock`.","format":"org.matrix.custom.html","formatted_body":"Were we to do <code>acquire().release()</code> for <code>Semaphore</code>, I would have generally preferred to use a similar API design to <code>Mutex</code>/<code>UniqueLock</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1722291809518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HcP3smIUZHVICkdG94MZOLNxNomN-U9gaJwBNumIh3U"},
{"content":{"body":"Pardon, I must break for dinner. I will return shortly.","m.mentions":{},"msgtype":"m.text"},"ts":1722291818723,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WRN2h5W4_uE6qMCuphPDbLi2tpavrfQXW12Dt02t3AE"},
{"content":{"body":"I guess if I were reading the API I would like to have some intuition about how the VM should/might be using my hint that doesn't involve reading the implementation's source (if it's even available).","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$RnlCaH-a98BhkjurQlMciNt4x3nr4JTbjdgsxTlc79Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291902316,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$07jToVKOXuY1W7heyLwtacxrNFZGr5w75PyzTkFay-c"},
{"content":{"body":"Especially for such a low level API","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$07jToVKOXuY1W7heyLwtacxrNFZGr5w75PyzTkFay-c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291930254,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$zVFNnPyN1oWKxt_VTq0Mgck4U-VqCqUYO7ggEJgFSPc"},
{"content":{"body":"Anyway, I'll move this to the GH issue since that seems like the right place for this discussion at this point","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$zVFNnPyN1oWKxt_VTq0Mgck4U-VqCqUYO7ggEJgFSPc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722291966632,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$RGsggAGI_6OnOpcTpoSBmEf731UOmL49pNibotp8uCQ"},
{"content":{"body":"i think what's crystallizing for me is that i am fine with dropping the complete implementation-defined language, because since it's timing only, you can do anything you want as an as-if implementation","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$RGsggAGI_6OnOpcTpoSBmEf731UOmL49pNibotp8uCQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722292063822,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CkyLyGO2Qfnf6rQ8vERkxOUKdYBcWDtk6R1o_Wzm48o"},
{"content":{"body":"so _any_ language about how _iterationNumber_ is used i'm fine with","format":"org.matrix.custom.html","formatted_body":"so <em>any</em> language about how <em>iterationNumber</em> is used i'm fine with","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$CkyLyGO2Qfnf6rQ8vERkxOUKdYBcWDtk6R1o_Wzm48o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722292074952,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d5JyP-6xUrrUM6RQq-SlzCdUw9MkKbMBCz9IcB_4rV4"},
{"content":{"body":"we can say it's monotonic increasing","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$d5JyP-6xUrrUM6RQq-SlzCdUw9MkKbMBCz9IcB_4rV4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722292078857,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GBVgD7I3XmBaS462REIHXFhvbTN36T-sUt16avk7aY4"},
{"content":{"body":"i'd prefer that to dropping the hint parameter entirely","m.mentions":{},"m.relates_to":{"event_id":"$rNcSoJn9EyOLkic864NqD-EcU5B7Jqt0SdjnnqAFrY4","is_falling_back":true,"m.in_reply_to":{"event_id":"$GBVgD7I3XmBaS462REIHXFhvbTN36T-sUt16avk7aY4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1722292095131,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9VX5C-qSv_xh7bKmusIItqs8QJ4_bIHs_zAH1RHGSEs"},
{"content":{"body":"> <@jridgewell:matrix.org> Would Waldemar be satisifed with bigger-number-longer-wait? Then let the engine handle that to match the VM’s CPU instructions, eg smaller-number-longer-wait?\n\nThat's how it already is. I'd like to know more about the relationship between the number and the wait time. As far as I can tell, Shu's bigger-number-shorter-wait was not in the spec and I don't know why he made that claim at the meeting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zSouoQiH8woVoKy4PMJx6KKbyjDqFKs8PyNViPc8WzU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Would Waldemar be satisifed with bigger-number-longer-wait? Then let the engine handle that to match the VM’s CPU instructions, eg smaller-number-longer-wait?</blockquote></mx-reply>That's how it already is. I'd like to know more about the relationship between the number and the wait time. As far as I can tell, Shu's bigger-number-shorter-wait was not in the spec and I don't know why he made that claim at the meeting.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zSouoQiH8woVoKy4PMJx6KKbyjDqFKs8PyNViPc8WzU"}},"msgtype":"m.text"},"ts":1722292214211,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$M6JLxBko9nXSCFi675e-HoDAUmd8AZuC--CLpnNReh8"},
{"content":{"body":"it was in the spec, but i take the point the wording was confusing to many and not well communicated in previous meetings","m.mentions":{},"msgtype":"m.text"},"ts":1722292355088,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XMQ4gcJ4QyichkCveJ0dptyGlRrmAJP6tB6QgWRakHY"},
{"content":{"body":"waldemar: after chatting with keith_miller i think i am perfectly happy with spelling out the bigger-number-longer-wait semantics. but i'd like to caution that since timing is not observable behavior, an implementation can still choose another interpretation of the hint as an as-if optimization.\n\nwould spelling out bigger-number-longer-wait satisfy your concerns?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: after chatting with <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a> i think i am perfectly happy with spelling out the bigger-number-longer-wait semantics. but i'd like to caution that since timing is not observable behavior, an implementation can still choose another interpretation of the hint as an as-if optimization.</p>\n<p>would spelling out bigger-number-longer-wait satisfy your concerns?</p>\n","m.mentions":{"user_ids":["@waldemarh:matrix.org","@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1722292457883,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$08-9zIyYhjc1y3y97TpDcMQXh-3w8rT6Z9mG3YWvx3c"}
]