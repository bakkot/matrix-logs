[
{"content":{"body":"question that came up internally recently: does anyone have any idea why in https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.hypot, the infinite special case takes precedence NaN special case?","m.mentions":{},"msgtype":"m.text"},"ts":1709221970965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RaNJixGvdMKmCYTwIwXrfQmHGqstI96b2tHRCfP6s6w"},
{"content":{"body":"shu: seems like it may have been a precision concern? \n - https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441\n - https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: seems like it may have been a precision concern?</p>\n<ul>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441</li>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18</li>\n</ul>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1709225789090,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6XfkdnHL4QpqbjyQKxhkUbMgOuWKp22RweLNrWFGrjI"},
{"content":{"body":" * shu: seems like it may have been a precision concern? (the november 2013 notes in particular)\n\n- https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441\n- https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: seems like it may have been a precision concern? (the november 2013 notes in particular)</p>\n<ul>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441</li>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18</li>\n</ul>\n","m.mentions":{},"m.new_content":{"body":"shu: seems like it may have been a precision concern? (the november 2013 notes in particular)\n\n- https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441\n- https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: seems like it may have been a precision concern? (the november 2013 notes in particular)</p>\n<ul>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-11/nov-20.md?plain=1#L441</li>\n<li>https://github.com/tc39/notes/blob/970d84b7d0f9c455757870a3892ea78e7bee2cfd/meetings/2013-09/sept-17.md?plain=1#L340C13-L340C18</li>\n</ul>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6XfkdnHL4QpqbjyQKxhkUbMgOuWKp22RweLNrWFGrjI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1709225804825,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wYlpAOHGBXI2yL0qavlE79v3sqBRjW73Anz2vdlT0Kc"},
{"content":{"body":"hm i don't follow the precision argument for infinity vs nan precedence","m.mentions":{},"msgtype":"m.text"},"ts":1709229805155,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tKWYTG90X9yYahxI1cKz7l0pJ7KKVfJDWUIgNrPD9DQ"},
{"content":{"body":"thanks for digging those up","m.mentions":{},"msgtype":"m.text"},"ts":1709229808691,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NY0VTTD-PqWc5hYQPuTh5IIaYU8qI5yyprsvfHHrtIs"},
{"content":{"body":"i see a nan mention in the sept-17 one","m.mentions":{},"msgtype":"m.text"},"ts":1709229812769,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$96OFgVAhpFk9QEZUJjdSGG4DxEm33pjjmc7h1OR5IH8"},
{"content":{"body":"yeah it's not clear to me from the notes either","m.mentions":{},"msgtype":"m.text"},"ts":1709230395452,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Tuh359vbV3nXGVcxHHsgloaM5_mNiZ-Z8ZV_82JYwmk"},
{"content":{"body":"but that's all i could find","m.mentions":{},"msgtype":"m.text"},"ts":1709230397705,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vnkuKyWWy3PjLhycuHRQ_PrgjA4l8v2hQ8NdNjZ9sI0"},
{"content":{"body":"In several of the math functions (but, annoyingly, not *quite* all), they'll treat NaN as if it could be every value, and if this still results in a well-defined answer, return that answer instead of returning NaN. That's the case for hypot() - if there's an infinite term, then it doesn't matter what the rest of the terms are, it's gonna return infinity.","format":"org.matrix.custom.html","formatted_body":"In several of the math functions (but, annoyingly, not <em>quite</em> all), they'll treat NaN as if it could be every value, and if this still results in a well-defined answer, return that answer instead of returning NaN. That's the case for hypot() - if there's an infinite term, then it doesn't matter what the rest of the terms are, it's gonna return infinity.","m.mentions":{},"msgtype":"m.text"},"ts":1709233336335,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$lDY8bdvn9dSsu_YyOQNMIygxLByeIFJ0Q-Lb41vDvxo"},
{"content":{"body":"(I did some exploration of this while writing the CSS math functions. I chose not to perfectly match JS in this regard, and instead make NaN immediately infectious, because JS wasn't self-consistent anyway.)","m.mentions":{},"msgtype":"m.text"},"ts":1709233371335,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cZ0BPFTbcnpbeAfwKS6y7Il33boXWMN4fH9Ll7E2zMY"},
{"content":{"body":"(In particular, min/max don't follow these rules. `Math.max(Infinity, NaN)` returns NaN, despite the fact that every possible numeric value the second argument could take would still result in Infinity being returned.)","format":"org.matrix.custom.html","formatted_body":"(In particular, min/max don't follow these rules. <code>Math.max(Infinity, NaN)</code> returns NaN, despite the fact that every possible numeric value the second argument could take would still result in Infinity being returned.)","m.mentions":{},"msgtype":"m.text"},"ts":1709233434554,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YYZBnWfYb0DN3_1TfVNZc-RSJp5nj8xMz-Ut9apfbLg"},
{"content":{"body":"> <@tabatkins:matrix.org> In several of the math functions (but, annoyingly, not *quite* all), they'll treat NaN as if it could be every value, and if this still results in a well-defined answer, return that answer instead of returning NaN. That's the case for hypot() - if there's an infinite term, then it doesn't matter what the rest of the terms are, it's gonna return infinity.\n\nthe question is why Infinity has precedence over NaN","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lDY8bdvn9dSsu_YyOQNMIygxLByeIFJ0Q-Lb41vDvxo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>In several of the math functions (but, annoyingly, not <em>quite</em> all), they'll treat NaN as if it could be every value, and if this still results in a well-defined answer, return that answer instead of returning NaN. That's the case for hypot() - if there's an infinite term, then it doesn't matter what the rest of the terms are, it's gonna return infinity.</blockquote></mx-reply>the question is why Infinity has precedence over NaN","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lDY8bdvn9dSsu_YyOQNMIygxLByeIFJ0Q-Lb41vDvxo"}},"msgtype":"m.text"},"ts":1709244691880,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$levMWcckny6eEoeb38-e9mHj4GNOREYIdLqpEgUVwEA"},
{"content":{"body":"if you wrote that code in userland JS, NaN would have precedence over Infinity","m.mentions":{},"msgtype":"m.text"},"ts":1709244708547,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JaUm23g1ArLtmJjzWA8XAS-kYDkilnEVrvOQ_D7DbA0"},
{"content":{"body":"wrote it in the naive way, i guess","m.mentions":{},"msgtype":"m.text"},"ts":1709244715919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rYodGQGZKixYFJWqWsf5-5RKYktfErhHRCquUCHftdg"},
{"content":{"body":"Yeah, I said why - in several functions, they allow a non-NaN answer if NaN could be replaced with anything without changing the result.","m.mentions":{},"msgtype":"m.text"},"ts":1709244742618,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2cmJCvrbkCHv5MXqD2QTvoL3p-DOgL5p2yNYYiRHOM4"},
{"content":{"body":"Which is relatively reasonable behavior, I think. (But the other behavior - fully infectious NaN - is also reasonable.)","m.mentions":{},"msgtype":"m.text"},"ts":1709244783076,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$yDEeHC3ABSvu6Y3Dl7A-suBrOU6IooFzJH0q9s6l31U"},
{"content":{"body":"trying to parse that sentence...","m.mentions":{},"msgtype":"m.text"},"ts":1709244785852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XUZZaUBxbGhkApojY9FaEyQfTxhJTL2fQ7zbgonOGV4"},
{"content":{"body":"okay sorry i just don't understand the precedence","m.mentions":{},"msgtype":"m.text"},"ts":1709244841842,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3W0fQWS7De5sIOfk_8-LZ_zH_D28Giah_FPHAesTEx0"},
{"content":{"body":"okay, so the precedent is that several functions already decided that NaN should have lower precedence than Infinity because Infinity is thought of as just another \"non-NaN\"?","m.mentions":{},"msgtype":"m.text"},"ts":1709244952580,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ueb-6tbiBQDzJD_1PQky1jp6moPyEwK_OtZFgloQwVo"},
{"content":{"body":"that doesn't give me insight on why they made this decision when the precedence in user `+` is the opposite","format":"org.matrix.custom.html","formatted_body":"that doesn't give me insight on why they made this decision when the precedence in user <code>+</code> is the opposite","m.mentions":{},"msgtype":"m.text"},"ts":1709244978670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$p-ftdTefW_INnRUu64E_bQZvoM-ChhE3Noa-OjgjcX8"},
{"content":{"body":"No, the (mixed!) precedent is that, in several functions, if the NaN argument *doesn't affect the result* (aka you could replace it with *any non-NaN* value, and every possible substitution would have no effect on the return value), then the function just returns that consistent value.","format":"org.matrix.custom.html","formatted_body":"No, the (mixed!) precedent is that, in several functions, if the NaN argument <em>doesn't affect the result</em> (aka you could replace it with <em>any non-NaN</em> value, and every possible substitution would have no effect on the return value), then the function just returns that consistent value.","m.mentions":{},"msgtype":"m.text"},"ts":1709245096529,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LFu_DVxuAEbTKsmO8NY9UFh9J9JKnp8NudaePuxzd1Y"},
{"content":{"body":"It's not a \"lower precedence\" thing, it's a \"the return value doesn't depend on this argument, so we won't pay any attention to it\" thing.","m.mentions":{},"msgtype":"m.text"},"ts":1709245129850,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ztunTUrjHCWHCSteqf9uFowzTrW45tDOaxMAfU-nXLk"},
{"content":{"body":"Infinity *is* just another number; NaN is the weird one that (among other reasons) is returned when multiple possible values are possible.","format":"org.matrix.custom.html","formatted_body":"Infinity <em>is</em> just another number; NaN is the weird one that (among other reasons) is returned when multiple possible values are possible.","m.mentions":{},"msgtype":"m.text"},"ts":1709245176114,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LSHsxtMFuL4V6BLKdy0jF9J1VPBLOnuKkZxH82TqEcI"},
{"content":{"body":"`+` is consistent with this behavior: in `Infinity + X`, if X=-Infinity you get NaN, while any other value yields Infinity, so the X's value *is* important to the result, so `Infinity + NaN` has to be NaN too.","format":"org.matrix.custom.html","formatted_body":"<code>+</code> is consistent with this behavior: in <code>Infinity + X</code>, if X=-Infinity you get NaN, while any other value yields Infinity, so the X's value <em>is</em> important to the result, so <code>Infinity + NaN</code> has to be NaN too.","m.mentions":{},"msgtype":"m.text"},"ts":1709245396274,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$NNDM9ljn4darFnT46tSMbu_bqUhUkFjo8-QkPW-KMwk"}
]