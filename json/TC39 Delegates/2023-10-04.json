[
{"content":{"body":"I think we would be better off with O(5) constructs, with the aim of not enabling avoiding all type /* */comment formats, rather than literally just parameters and return values. It sounds like you are open to this possibility, right?\n\nBut I am also not yet sure if the whole thing should be reduced as much as bakkot suggests—we should talk more about overall motivation/usage modes in the next presentation.","format":"org.matrix.custom.html","formatted_body":"<p>I think we would be better off with O(5) constructs, with the aim of not enabling avoiding all type /* */comment formats, rather than literally just parameters and return values. It sounds like you are open to this possibility, right?</p>\n<p>But I am also not yet sure if the whole thing should be reduced as much as bakkot suggests—we should talk more about overall motivation/usage modes in the next presentation.</p>","msgtype":"m.text"},"ts":1696388885456,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZrcWsat4g66VbKKanCxbrJ3PyjwS9zBkj8kLts4PZPA"},
{"content":{"body":"I'm open to that possibility. Also to be clear I didn't mean to suggest this would only cover parameters and return values - for example, `let x = y ::as string;` would be legal under my suggested grammar (assuming the `::` comment form is allowed in the appropriate places). And I think that's better than having a separate `as` production even though that means you can't use TypeScript casts as they're written today.","format":"org.matrix.custom.html","formatted_body":"I'm open to that possibility. Also to be clear I didn't mean to suggest this would only cover parameters and return values - for example, <code>let x = y ::as string;</code> would be legal under my suggested grammar (assuming the <code>::</code> comment form is allowed in the appropriate places). And I think that's better than having a separate <code>as</code> production even though that means you can't use TypeScript casts as they're written today.","m.mentions":{},"msgtype":"m.text"},"ts":1696391575473,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kC2hIePPpjP8CstEcSwpddNObVNrsocu-Mi__GuW5Og"},
{"content":{"body":"/// interface X {\n///     either(x: this): this\n/// }\n\n/// <T extends X>(i: T, j: T): T\nfunction f(i, j) {\n    let next = i.either(j) /// T\n    return next\n}","msgtype":"m.text"},"ts":1696394451957,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jR8Gsuq5M5Trn9qA3qH24YVmX5e9aQjLOQ_Cy1suiWM"},
{"content":{"body":"One issue with magic comments is that it’s unclear how tools should handle errors—was that comment just a comment?","msgtype":"m.text"},"ts":1696401959349,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6qs2hnrr3GVz2Fo7gPXxFo5BQv2w94YsRbx6FHjVDds"},
{"content":{"body":"I remember having a thought about `::` being problematic grammatically, but I can’t remember what the problem was…","format":"org.matrix.custom.html","formatted_body":"I remember having a thought about <code>::</code> being problematic grammatically, but I can’t remember what the problem was…","msgtype":"m.text"},"ts":1696402029017,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8D_Wb3mWFnYj8ohuF6yN5ZbXfX9XV3TKItNTn8gFMd4"},
{"content":{"body":"The main reason I am a little hesitant about that particular grammar is that some things will want to take an argument and some won’t. This is the kind of thing to work out case-by-case when developing encodings of type systems into JS grammar","msgtype":"m.text"},"ts":1696402094781,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dSpu2pOKdqazOtnkPkTO84u46RZuz05ds55_C4Z7tpc"}
]