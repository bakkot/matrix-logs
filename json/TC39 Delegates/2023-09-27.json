[
{"content":{"body":"> <@tabatkins:matrix.org> I think we just need a `\"use semicolons\"` parser switch that turns off ASI honestly.\n\nAnti proposal: `\"no asi harzards\"` parser switch that fix ASI hazards according to developer's expectation. (Yeah , it's very very impossible , especially the committee introduced the very serious new hazards in ES2020)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nLJgloqsZbsmmX6x9bWOrQqGNb_jsEJ0IQy7RivduAE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I think we just need a <code>\"use semicolons\"</code> parser switch that turns off ASI honestly.</blockquote></mx-reply>Anti proposal: <code>\"no asi harzards\"</code> parser switch that fix ASI hazards according to developer's expectation. (Yeah , it's very very impossible , especially the committee introduced the very serious new hazards in ES2020)","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nLJgloqsZbsmmX6x9bWOrQqGNb_jsEJ0IQy7RivduAE"}},"msgtype":"m.text"},"ts":1695772888520,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$DtFfNTVeW31f0QBEySA8ykcvI2ANy7Mw2-tnHG-09_A"},
{"content":{"body":"i doubt anything that even tacitly encourages omission of semicolons will achieve consensus :-)","m.mentions":{},"msgtype":"m.text"},"ts":1695776089093,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$US81hfi4So6AlHwhjZ3AvGupnB21CDC9QJtsPej83qs"},
{"content":{"body":"I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for `+`, `-`, `/`, and `/=`, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is quite so complex, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","format":"org.matrix.custom.html","formatted_body":"I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for <code>+</code>, <code>-</code>, <code>/</code>, and <code>/=</code>, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is quite so complex, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","m.mentions":{},"msgtype":"m.text"},"ts":1695776461249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O-6QnHimmNH412I3selHH_a8woMOcR5tC-c5U9kquRc"},
{"content":{"body":" * I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for `+`, `-`, `/`, and `/=`, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is as complex as was suggested, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","format":"org.matrix.custom.html","formatted_body":" * I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for <code>+</code>, <code>-</code>, <code>/</code>, and <code>/=</code>, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is as complex as was suggested, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","m.mentions":{},"m.new_content":{"body":"I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for `+`, `-`, `/`, and `/=`, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is as complex as was suggested, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","format":"org.matrix.custom.html","formatted_body":"I've updated https://github.com/tc39/proposal-throw-expressions/pull/18 to use Static Semantics rules to avoid ASI for <code>+</code>, <code>-</code>, <code>/</code>, and <code>/=</code>, in keeping with how we also use Static Semantics rules to avoid ASI for optional chains followed by a template literal on a following line. I don't believe the end result is as complex as was suggested, but I'd appreciate if anyone with time could take a look over it as I am still short a reviewer.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$O-6QnHimmNH412I3selHH_a8woMOcR5tC-c5U9kquRc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776534400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4QnUNqm9CTk3jZIgiAHOqihRu_JT56pRRWW0G7NRQio"},
{"content":{"body":"i was going to say \"tcq needs updating\" but i refreshed and it's not loading at all for me","m.mentions":{},"msgtype":"m.text"},"ts":1695776545385,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$g3Snko8c6Vj1QI7-Pm7yIrQu8l0WfCSNXvslCd6zWz4"},
{"content":{"body":"TCQ down for everyone or just me?","m.mentions":{},"msgtype":"m.text"},"ts":1695776548740,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$-WtcZ7PSDNHwflZNTIo7qCiuuGwZPCbgpHE04lHimQs"},
{"content":{"body":" * i was going to say \"tcq needs updating\" but i refreshed and it's not loading at all for me now, just hanging","m.mentions":{},"m.new_content":{"body":"i was going to say \"tcq needs updating\" but i refreshed and it's not loading at all for me now, just hanging","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3Snko8c6Vj1QI7-Pm7yIrQu8l0WfCSNXvslCd6zWz4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776550410,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$c6bFeh-sPzy92hrx8sF6A1Kb6fyhiU_pkM3r8X5ScWs"},
{"content":{"body":"tcqdownforeveryone.status","msgtype":"m.text"},"ts":1695776565036,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9jOtK1wedpJoH8SuSdEB80goixT23rmT7uRaFMT48OA"},
{"content":{"body":"this would never happen if it was using IBM infra!  `/s`","format":"org.matrix.custom.html","formatted_body":"this would never happen if it was using IBM infra!  <code>/s</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695776597945,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$orIhslyNuTzUz4JzJR4Rajy03Cuob800aKMwINuDsfg"},
{"content":{"body":"TCQ appears to be operational once again","m.mentions":{},"msgtype":"m.text"},"ts":1695776638288,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$5NUmRZpzdStQKeDVIM_eux1omOQ4zQGLtvSlEfvxYVg"},
{"content":{"body":"🤞","m.mentions":{},"msgtype":"m.text"},"ts":1695776649407,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$BlpjI7jMEQOvHRUmOM-f1er8wWdGhB8hUopBJtqRLII"},
{"content":{"body":"> <@ljharb:matrix.org> i doubt anything that even tacitly encourages omission of semicolons will achieve consensus :-)\n\nyeah , we lost the feasibility forever after ES2020.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$US81hfi4So6AlHwhjZ3AvGupnB21CDC9QJtsPej83qs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i doubt anything that even tacitly encourages omission of semicolons will achieve consensus :-)</blockquote></mx-reply>yeah , we lost the feasibility forever after ES2020.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$US81hfi4So6AlHwhjZ3AvGupnB21CDC9QJtsPej83qs"}},"msgtype":"m.text"},"ts":1695776663496,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$yPjxCVbrDlJhwbO_x7JeilqTwWCird2e_hBsPJzaAbA"},
{"content":{"body":"not because of that, but because some number of us (at least one :-) ) feel that omitting semicolons isn't a good style to encourage.","m.mentions":{},"msgtype":"m.text"},"ts":1695776721460,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg"},
{"content":{"body":" * not because of that, but because some number of us (at least one 😄) feel that omitting semicolons isn't a good style to encourage.","m.mentions":{},"m.new_content":{"body":"not because of that, but because some number of us (at least one 😄) feel that omitting semicolons isn't a good style to encourage.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776786918,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6n3v9CbDVLP91w0rMF3eH9NSxn8ULwRXGMEJsGEM4Ok"},
{"content":{"body":" * not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.","m.mentions":{},"m.new_content":{"body":"not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776846481,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G21Gc3wp-V_wXPjP35rJMllCSutETJEVSs6-0KAX82U"},
{"content":{"body":" * not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~~isn't a good~~ is a harmful style to encourage.","m.mentions":{},"m.new_content":{"body":"not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~~isn't a good~~ is a harmful style to encourage.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776850216,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fNKVdNZpwSdvGKX8NMBiXRyjU6rOB7fnBAecJrUn7ko"},
{"content":{"body":" * not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.","m.mentions":{},"m.new_content":{"body":"not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695776853583,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qYwT4HmIcokGO92RYhw1Fg_uoifgfzanCsL4EpfeZVM"},
{"content":{"body":"we should make a t-shirt","m.mentions":{},"msgtype":"m.text"},"ts":1695776965661,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$WusfujhuJ6plx89M4_kSc0njAphwBd-6ZCmAVLH0YQ8"},
{"content":{"body":"\"eat your vegetables and use your semicolons\"","m.mentions":{},"msgtype":"m.text"},"ts":1695776975487,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$TrrlAgSaBiXxotToajKAGcHgB1GeCHZy3vTTgw9J75U"},
{"content":{"body":"you should use your whole colon tbh","msgtype":"m.text"},"ts":1695776994889,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$untOo0KAzFBR2JsiVfvQC-gfIDqoXarcps1nHq9lxFk"},
{"content":{"body":"omitting semicolons is `eval()`!","format":"org.matrix.custom.html","formatted_body":"omitting semicolons is <code>eval()</code>!","m.mentions":{},"msgtype":"m.text"},"ts":1695777000020,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$qwbUza0exY0hLh9I_HOYrb3g5qujD7vYmMIw042NOEs"},
{"content":{"body":"I never know how to understand the feedback \"we would like to see this done but are unwilling to dedicate resources to doing it ourselves\"","m.mentions":{},"msgtype":"m.text"},"ts":1695777416618,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HLGrkIgYR1MiCliVNpC7Su6yiUpaULHnrKiB1J5Sdv4"},
{"content":{"body":"is there not an inherent conflict there?","m.mentions":{},"msgtype":"m.text"},"ts":1695777440621,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ExhAdKSmFbqMckC-0h8CSra4b648PMRYtXa98SEOIhQ"},
{"content":{"body":"Michael Ficarra: i think you know in your heart how to understand that feedback","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: i think you know in your heart how to understand that feedback","msgtype":"m.text"},"ts":1695777472781,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j-r656jo2ybzmRjOxmHYR59X5WQx9xDK7yAnR_l-lII"},
{"content":{"body":"> <@ljharb:matrix.org> not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.\n\nWhile I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time is ES5 of coz).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn&#39;t a good~ is a harmful style to encourage.</blockquote></mx-reply>While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time is ES5 of coz).","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg"}},"msgtype":"m.text"},"ts":1695777479549,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$TdAmqIa3C_WRY2OvbUTIlMfNJ9s4ojC9KrbzMfXDqq8"},
{"content":{"body":"> <@ljharb:matrix.org> not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.\n\n * While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time to fix asi harzards was ES5 strict mode, of coz).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nxnQlcuPzwE296SiJ8lC-cxsOjPQJg0Nhtv1Ln2dUzg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>not because of that, but because some number of us (at least one 😄) feel that omitting semicolons ~isn't a good~ is a harmful style to encourage.</blockquote></mx-reply> * While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time to fix asi harzards was ES5 strict mode, of coz).","m.mentions":{},"m.new_content":{"body":"While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time to fix asi harzards was ES5 strict mode, of coz).","format":"org.matrix.custom.html","formatted_body":"While I understand there are always people don't like omitting semicolons, also there are always people don't like to be forced to add semicolons. After all, I believe the original design of the language (by BE) encourage omitting semicolon, just like the most recent new application programming languages (swift, kotlin,  scala3, etc.) Unfortunately BE made some small mistakes and introduce ASI hazards (though the most ASI hazards patterns were not used by any one in early days), but it still fixable IMO, until ES2020 (the best time to fix asi harzards was ES5 strict mode, of coz).","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TdAmqIa3C_WRY2OvbUTIlMfNJ9s4ojC9KrbzMfXDqq8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695777643778,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$qiZnEtF0548aHu9h6m-FOXpWtCbvkiReBxtnb1bdrXg"},
{"content":{"body":"We should probably take this to TDZ;","m.mentions":{},"msgtype":"m.text"},"ts":1695777696244,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$0jUSspuf7_lMd1TFe6zjDmEUWz09A7skanxSQj6Q4rg"},
{"content":{"body":"this still assumes that removing hazards from something hazardous is a \"fix\"","m.mentions":{},"m.relates_to":{"event_id":"$TdAmqIa3C_WRY2OvbUTIlMfNJ9s4ojC9KrbzMfXDqq8","is_falling_back":true,"m.in_reply_to":{"event_id":"$TdAmqIa3C_WRY2OvbUTIlMfNJ9s4ojC9KrbzMfXDqq8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695777724635,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LKEWJbWyr0gqimSbt76KvcukiwtQgCQ4BuvhqS9qAYY"},
{"content":{"body":"this is a cool and relevant pr https://github.com/nodejs/node/pull/48528","m.mentions":{},"msgtype":"m.text"},"ts":1695777829092,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zOnFQDpxbM2fJ_7ormtctJrCwgPIUBBM6sguE--maHc"},
{"content":{"body":"we actually see some huge performance boosts here","m.mentions":{},"msgtype":"m.text"},"ts":1695777937679,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$E_k-Imk6vMLxGqbybd5J66UzVBWzKuJAxjVD42DjgeI"},
{"content":{"body":"Yah, this will be considerably faster than `AsyncLocalStorage` in Node.js","format":"org.matrix.custom.html","formatted_body":"Yah, this will be considerably faster than <code>AsyncLocalStorage</code> in Node.js","msgtype":"m.text"},"ts":1695777958596,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TX9npF4-ojDB_-Ikj9mYKl0dIl8Wc4Xl9hsMr1SH6LI"},
{"content":{"body":"Can you help me understanding this better?\n\n","format":"org.matrix.custom.html","formatted_body":"Can you help me understanding this better?","m.relates_to":{"event_id":"$HLGrkIgYR1MiCliVNpC7Su6yiUpaULHnrKiB1J5Sdv4","is_falling_back":true,"m.in_reply_to":{"event_id":"$HLGrkIgYR1MiCliVNpC7Su6yiUpaULHnrKiB1J5Sdv4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695778127666,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$QUp4mPaY0rRsNNWy_HyWqxAg0h0ToOroah1iyDTrXUc"},
{"content":{"body":"And it is using mechanisms that is already available in V8","m.mentions":{},"msgtype":"m.text"},"ts":1695778436057,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$gMV6chkCF9rk3T5EW7NkcVfS00Nf6kXbGyBQceKXqyg"},
{"content":{"body":" * And it is using mechanisms that are already available in V8","m.mentions":{},"m.new_content":{"body":"And it is using mechanisms that are already available in V8","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gMV6chkCF9rk3T5EW7NkcVfS00Nf6kXbGyBQceKXqyg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695778439884,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$iW81mhExx3ky-Wb2oTDLK9Hlh8oSGduatFdPPDVl6P8"},
{"content":{"body":"I was hoping for the same","m.mentions":{},"m.relates_to":{"event_id":"$HLGrkIgYR1MiCliVNpC7Su6yiUpaULHnrKiB1J5Sdv4","is_falling_back":true,"m.in_reply_to":{"event_id":"$QUp4mPaY0rRsNNWy_HyWqxAg0h0ToOroah1iyDTrXUc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695778543362,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$niC14mN98gP4JlHacbT5XRHEHM-1V8txRxxkE9sM-5w"},
{"content":{"body":"V8 is a mutable codebase","msgtype":"m.text"},"ts":1695778806233,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$B7P_gHDXHAG9R5sAmUmdS-Q8bD8MrnEYh-bPA1BFXjk"},
{"content":{"body":"i'd not consider the state things are today to be immutable -- e.g., don't assume `ContinuationPreservedEmbedderData` and its current performance characteristics to be like, unchanging facts of the world forever and forever","format":"org.matrix.custom.html","formatted_body":"i'd not consider the state things are today to be immutable -- e.g., don't assume <code>ContinuationPreservedEmbedderData</code> and its current performance characteristics to be like, unchanging facts of the world forever and forever","msgtype":"m.text"},"ts":1695778916541,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk"},
{"content":{"body":"I still not convinced by the motivation of get-intrinsics. it looks tooooo specialized to me, only spec lawyer will use it","m.mentions":{},"msgtype":"m.text"},"ts":1695778923804,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$byc4VomRa46CQAPFEBPo9IzDTNkoGpEuU_uFgwVFkl4"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'd not consider the state things are today to be immutable -- e.g., don't assume `ContinuationPreservedEmbedderData` and its current performance characteristics to be like, unchanging facts of the world forever and forever\n\nyeah that's why it hasn't merged yet","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i'd not consider the state things are today to be immutable -- e.g., don't assume <code>ContinuationPreservedEmbedderData</code> and its current performance characteristics to be like, unchanging facts of the world forever and forever</blockquote></mx-reply>yeah that's why it hasn't merged yet","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk"}},"msgtype":"m.text"},"ts":1695778975484,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6RFa8KZqj1O9ejdyonne6Z99xE_tD7MaFbTw6Q1OTTg"},
{"content":{"body":"upstream discussion","m.mentions":{},"msgtype":"m.text"},"ts":1695778990119,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$a0YMus29cT8hcM3LOgSXsgVZA724DNZUfI4gzmkHZnQ"},
{"content":{"body":"sometimes in readmes, I link to issues for open questions. Or at least I try not to claim that they are already solved.","msgtype":"m.text"},"ts":1695779013029,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lIgFzRnKwp-fr2wyoO8WRjqMsaFJZhCcPB9TE9uovGA"},
{"content":{"body":"> <@devsnek:matrix.org> yeah that's why it hasn't merged yet\n\nyet champions keep repeating the argument that \"no performance problem because V8 already ships this\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6RFa8KZqj1O9ejdyonne6Z99xE_tD7MaFbTw6Q1OTTg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah that's why it hasn't merged yet</blockquote></mx-reply>yet champions keep repeating the argument that \"no performance problem because V8 already ships this\"","m.relates_to":{"m.in_reply_to":{"event_id":"$6RFa8KZqj1O9ejdyonne6Z99xE_tD7MaFbTw6Q1OTTg"}},"msgtype":"m.text"},"ts":1695779030980,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NgtwvjJTzVYehUuM86Tyuuh1RZKnycZLURM4F3d-S14"},
{"content":{"body":"I can tell from my perspective how I want to dedicate resources on a proposal I’m championing going through a part that depends dedicated expertise that is out of my domain. This requires cross collaboration and contracting in which I’m doing. \n\nYet I’m not sure if you’re referring to me on ShadowRealm, so I don’t know if that’s the clarification you’re looking for, as you are also not asking for me directly or in a way that makes it seem you’re actually trying to understand.\n\nWith that said, it took us time, but we are happy to work again with people that can provide the expertise to complete the tasks needed.\n\nI’m also glad that TC39 is composed by a diverse set of expertises and backgrounds. We all must aim for the goal of interoperability, which is the best value of JS.","format":"org.matrix.custom.html","formatted_body":"<p>I can tell from my perspective how I want to dedicate resources on a proposal I’m championing going through a part that depends dedicated expertise that is out of my domain. This requires cross collaboration and contracting in which I’m doing.</p>\n<p>Yet I’m not sure if you’re referring to me on ShadowRealm, so I don’t know if that’s the clarification you’re looking for, as you are also not asking for me directly or in a way that makes it seem you’re actually trying to understand.</p>\n<p>With that said, it took us time, but we are happy to work again with people that can provide the expertise to complete the tasks needed.</p>\n<p>I’m also glad that TC39 is composed by a diverse set of expertises and backgrounds. We all must aim for the goal of interoperability, which is the best value of JS.</p>","m.relates_to":{"event_id":"$HLGrkIgYR1MiCliVNpC7Su6yiUpaULHnrKiB1J5Sdv4","is_falling_back":true,"m.in_reply_to":{"event_id":"$niC14mN98gP4JlHacbT5XRHEHM-1V8txRxxkE9sM-5w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695779038618,"senderName":"leobalter","senderId":"@leobalter:matrix.org","id":"$_G386P-ALhX3C3AtWg92LOoYD21PVvx6-vTh4Hb7GWI"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'd not consider the state things are today to be immutable -- e.g., don't assume `ContinuationPreservedEmbedderData` and its current performance characteristics to be like, unchanging facts of the world forever and forever\n\nIt's more like an existence proof that this technique isn't way too slow--I would've assumed the opposite before this had shipped.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i'd not consider the state things are today to be immutable -- e.g., don't assume <code>ContinuationPreservedEmbedderData</code> and its current performance characteristics to be like, unchanging facts of the world forever and forever</blockquote></mx-reply>It's more like an existence proof that this technique isn't way too slow--I would've assumed the opposite before this had shipped.","m.relates_to":{"m.in_reply_to":{"event_id":"$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk"}},"msgtype":"m.text"},"ts":1695779067886,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kGBXzJTBnwKfdsLkywbf15jLYYkYOuwSj9pIwPlVz7k"},
{"content":{"body":"> <@littledan:matrix.org> It's more like an existence proof that this technique isn't way too slow--I would've assumed the opposite before this had shipped.\n\nor it isn't way too much used","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kGBXzJTBnwKfdsLkywbf15jLYYkYOuwSj9pIwPlVz7k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It's more like an existence proof that this technique isn't way too slow--I would've assumed the opposite before this had shipped.</blockquote></mx-reply>or it isn't way too much used","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kGBXzJTBnwKfdsLkywbf15jLYYkYOuwSj9pIwPlVz7k"}},"msgtype":"m.text"},"ts":1695779082841,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LYueoY3xUE25zDp40ga4oUo4MISJYEfROqMkYsN2ZFc"},
{"content":{"body":"like with.","m.mentions":{},"msgtype":"m.text"},"ts":1695779095799,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$NhiLGN1DVf5RXc4_hMSSSItGeP9XbzUz501gV-Lib70"},
{"content":{"body":"the copy is being done unconditionally","msgtype":"m.text"},"ts":1695779096045,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OLch1S-lCEr4VfKRf-qZ88aMaOrConJgUWqcc70OTsI"},
{"content":{"body":"i understand the state of the world today","msgtype":"m.text"},"ts":1695779115720,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5rCt0r9iqJnJpSRF7p5o06Sr8QUSpB1Lf5_vgCQDyP4"},
{"content":{"body":"> <@devsnek:matrix.org> yeah that's why it hasn't merged yet\n\nWhat is it that hasn't merged?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6RFa8KZqj1O9ejdyonne6Z99xE_tD7MaFbTw6Q1OTTg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah that's why it hasn't merged yet</blockquote></mx-reply>What is it that hasn't merged?","m.relates_to":{"m.in_reply_to":{"event_id":"$6RFa8KZqj1O9ejdyonne6Z99xE_tD7MaFbTw6Q1OTTg"}},"msgtype":"m.text"},"ts":1695779117153,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dVpHmb8TFyVxxZQGyhGHO02B7l9Nf1FuOpGCiCJQjnA"},
{"content":{"body":"(but actually I found `with` does not _that_ bad on performance, at least in JSC)","format":"org.matrix.custom.html","formatted_body":"(but actually I found <code>with</code> does not <em>that</em> bad on performance, at least in JSC)","m.mentions":{},"msgtype":"m.text"},"ts":1695779122993,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FYqzeM02BtqiZ6brE6BgGBtRT6F6mz8d8X91RF9BtZg"},
{"content":{"body":"the pr i linked","m.mentions":{},"msgtype":"m.text"},"ts":1695779126822,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GKPQVFpSoq8eaACp84LOOdH_HsL3fyG_uOoy6CEwG5w"},
{"content":{"body":"i am saying, V8 retains the optionality to _become_ unhappy with CPED","format":"org.matrix.custom.html","formatted_body":"i am saying, V8 retains the optionality to <em>become</em> unhappy with CPED","msgtype":"m.text"},"ts":1695779132897,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xn5V9HYYA2P4WKTG70knirf24qEpBrCGVLWsmi8rQbY"},
{"content":{"body":"because like shu said, google isn't sure that CPED will continue to exist","m.mentions":{},"msgtype":"m.text"},"ts":1695779142894,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GfS1tE-2LVbTuSJCG6FZv4RIlw8qYJS7vNfL_oOGSA0"},
{"content":{"body":"what is CPED, Carnegie Project on the Education Doctorate?","m.mentions":{},"msgtype":"m.text"},"ts":1695779169450,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PKnfN8sOfTf7YSZjl5lUZewzegw0mTPWrwf3peedB2M"},
{"content":{"body":"ContinuationPreservedEmbedderData","m.mentions":{},"msgtype":"m.text"},"ts":1695779178239,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7SBznR6gYltjRwLM3s8-SN9dIX05hCjwILdkXj43dJM"},
{"content":{"body":"> <@devsnek:matrix.org> ContinuationPreservedEmbedderData\n\nStill not understand what is it 🤣","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7SBznR6gYltjRwLM3s8-SN9dIX05hCjwILdkXj43dJM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>ContinuationPreservedEmbedderData</blockquote></mx-reply>Still not understand what is it 🤣","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7SBznR6gYltjRwLM3s8-SN9dIX05hCjwILdkXj43dJM"}},"msgtype":"m.text"},"ts":1695779241963,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$eQMJUYI8-0rYHzisxMZBWnobPhFhkrqkJMw2VcWEWN0"},
{"content":{"body":"> <@haxjs:matrix.org> Still not understand what is it 🤣\n\nits sort of like [[AsyncContextSnapshot]] in the async context proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eQMJUYI8-0rYHzisxMZBWnobPhFhkrqkJMw2VcWEWN0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Still not understand what is it 🤣</blockquote></mx-reply>its sort of like [[AsyncContextSnapshot]] in the async context proposal","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eQMJUYI8-0rYHzisxMZBWnobPhFhkrqkJMw2VcWEWN0"}},"msgtype":"m.text"},"ts":1695779291133,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Q0HkLKNMWxC_xc0r0zWoFttXLsVaI2F1VissKi3Od4I"},
{"content":{"body":"though it doesn't map exactly","m.mentions":{},"msgtype":"m.text"},"ts":1695779294838,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kmjtjiFwqR5o6k-dTaUe1whRQ0oHv1Kp9a94SJL6IjQ"},
{"content":{"body":"every variadic function makes TS team sweat...","m.mentions":{},"msgtype":"m.text"},"ts":1695779296328,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$V0DiP7uifPoA-8LnTQIuKUa6gvqWp_dKsdHG8-ldskw"},
{"content":{"body":"> <@christianulbrich:matrix.org> every variadic function makes TS team sweat...\n\n<T>(a: T): [T]\n<T, T1>(a: T, b: T1): [T, T1]\n<T, T1, T2>(a: T, b: T1, c: T2): [T, T1, T2]\n...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V0DiP7uifPoA-8LnTQIuKUa6gvqWp_dKsdHG8-ldskw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br>every variadic function makes TS team sweat...</blockquote></mx-reply>&lt;T&gt;(a: T): [T]<br>&lt;T, T1&gt;(a: T, b: T1): [T, T1]<br>&lt;T, T1, T2&gt;(a: T, b: T1, c: T2): [T, T1, T2]<br>...","m.mentions":{"user_ids":["@christianulbrich:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$V0DiP7uifPoA-8LnTQIuKUa6gvqWp_dKsdHG8-ldskw"}},"msgtype":"m.text"},"ts":1695779379722,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$d0Y2gWhTsH23QMvVy39QeT4cL5GDI2Z5J5Up3jVlpWw"},
{"content":{"body":"it happens in many languages","m.mentions":{},"msgtype":"m.text"},"ts":1695779390146,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9H2vR8ndyYBOFmLkHwfJVGvtMzv7BckZ0tGMRyxtugQ"},
{"content":{"body":"i don't think \"i don't have an iterable\" is a problem in practice","m.mentions":{},"msgtype":"m.text"},"ts":1695779524019,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QDMX1YHLPnpvzuA_8ee2eIVYI5VWpo_yhUGs5NvR1nI"},
{"content":{"body":"if you have more than 0 things, there is generally a way to turn at least one of them into the head of the iterator","m.mentions":{},"msgtype":"m.text"},"ts":1695779559033,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x1-2bqzkG9CLO_5C9va7aERe6bplKvLRsgfbIcEUT9w"},
{"content":{"body":"[].values, Iterator.from, etc etc","m.mentions":{},"msgtype":"m.text"},"ts":1695779566987,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$18mYEc-Rs9JZoQ_4Dy3qIAe_zvS4WMPWNsC2WmH_q10"},
{"content":{"body":"`Iterator.once(value)` is potentially an option, assuming it were lighter weight than just using a single-element array.","format":"org.matrix.custom.html","formatted_body":"<code>Iterator.once(value)</code> is potentially an option, assuming it were lighter weight than just using a single-element array.","m.mentions":{},"msgtype":"m.text"},"ts":1695779857289,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MyipAQpTBgNB8QBR8-GeT7a_R_FntzcZYyhI2-6C-vs"},
{"content":{"body":"`Iterator.of`, surely?","format":"org.matrix.custom.html","formatted_body":"<code>Iterator.of</code>, surely?","m.mentions":{},"msgtype":"m.text"},"ts":1695779871482,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HpnlmLKIIAjxya5J2GeVuWAyPSi7qTb0RSq6bagPJRo"},
{"content":{"body":"> <@shuyuguo:matrix.org> i'd not consider the state things are today to be immutable -- e.g., don't assume `ContinuationPreservedEmbedderData` and its current performance characteristics to be like, unchanging facts of the world forever and forever\n\nMy design for AsyncContext was independent of CPED, it just happens that CPED is the exact same thing that's needed (it's based on the poorlyfill I implemented for Vercel). The priority is today's code is unaffected by the proposal (tasks need to store an additional pointer), resuming a task is unaffected (only a pointer swap), and we can figure out how to optimize creating new context afterwards. I found CPED while digging through the V8 codebase's host hooks afterwards, and it did exactly what I wanted.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i'd not consider the state things are today to be immutable -- e.g., don't assume <code>ContinuationPreservedEmbedderData</code> and its current performance characteristics to be like, unchanging facts of the world forever and forever</blockquote></mx-reply>My design for AsyncContext was independent of CPED, it just happens that CPED is the exact same thing that's needed (it's based on the poorlyfill I implemented for Vercel). The priority is today's code is unaffected by the proposal (tasks need to store an additional pointer), resuming a task is unaffected (only a pointer swap), and we can figure out how to optimize creating new context afterwards. I found CPED while digging through the V8 codebase's host hooks afterwards, and it did exactly what I wanted.","m.relates_to":{"m.in_reply_to":{"event_id":"$YDyVAC8alp5PvuOoYHLNl9gZ3odcPmhbGrETBiKTiqk"}},"msgtype":"m.text"},"ts":1695779904821,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Mfd6y4Dt6zWUpGBcNOch2KgRQ8H425VQZGx9Wvl2GQg"},
{"content":{"body":"But generally, I'm fine with `concat`/`append`. I use them in my own packages.","format":"org.matrix.custom.html","formatted_body":"But generally, I'm fine with <code>concat</code>/<code>append</code>. I use them in my own packages.","m.mentions":{},"msgtype":"m.text"},"ts":1695779905933,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nrJoaJRY5DxJL0LvpZ5p_UBzGlHQRDe9JDDdD2RYPzQ"},
{"content":{"body":"there is iter::once(value) in rust but i have basically never seen any code that uses it","m.mentions":{},"msgtype":"m.text"},"ts":1695779943803,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_TQgvQnIeQnKp4DDyOrQg9D-LkuqUKTZaQ3EAX_qVXw"},
{"content":{"body":"i'm sure it exists","m.mentions":{},"msgtype":"m.text"},"ts":1695779945603,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YUGD1-TZCh08QyqFp_n_6TIQ78FubC1-ce1XrBpuFY8"},
{"content":{"body":"but its far more uncommon than chaining so i wouldn't want to over-index on that","m.mentions":{},"msgtype":"m.text"},"ts":1695779955094,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jKP7zllO8g3qKb60duRVzF4dZndN1mP0huM75SyJM04"},
{"content":{"body":"Justin Ridgewell: i am responding to the argument that's repeatedly been put forth that this will not have performance problems because CPED exists in V8","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: i am responding to the argument that's repeatedly been put forth that this will not have performance problems because CPED exists in V8","msgtype":"m.text"},"ts":1695779961562,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VFZ4RGr9-BYxxL9g-xT4uSCK4_w0VzN-FUbmUJhqc4M"},
{"content":{"body":"When I saw `Iterator.of` I immediately thought of `RxJS.of()` , though it has been while, that I did reactive streams, `.of()` looks like a good choice...","format":"org.matrix.custom.html","formatted_body":"When I saw <code>Iterator.of</code> I immediately thought of <code>RxJS.of()</code> , though it has been while, that I did reactive streams, <code>.of()</code> looks like a good choice...","m.mentions":{},"msgtype":"m.text"},"ts":1695779976878,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$Hwy01WmEcmZaEPaa59xstU7WhGaaDhODvH3ycjBI9Rw"},
{"content":{"body":"Also `Array.of`","format":"org.matrix.custom.html","formatted_body":"Also <code>Array.of</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695779996005,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lubkpa_SOPkAHdnCd4J_E5ELE8ygN6VPh35qON-9gjA"},
{"content":{"body":"Justin Ridgewell: i just want to make the point that that argument is not strictly true, since V8 retains the optionality to become unhappy with the performance CPED as it stands today","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: i just want to make the point that that argument is not strictly true, since V8 retains the optionality to become unhappy with the performance CPED as it stands today","msgtype":"m.text"},"ts":1695779996046,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g80isv_OMNzWZ8mGwbMuHkWBjMikaZhWtRaKUHF3Uy8"},
{"content":{"body":"all this being said, i don't know *why* v8 doesn't like CPED ","format":"org.matrix.custom.html","formatted_body":"all this being said, i don't know <em>why</em> v8 doesn't like CPED","m.mentions":{},"msgtype":"m.text"},"ts":1695780017512,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rcczl3B3YvwjTt4qTGHMcNWkf6KkfhJFiZVbENYr0Ks"},
{"content":{"body":"i just know that every time it comes up someone from v8 makes sure to say that","m.mentions":{},"msgtype":"m.text"},"ts":1695780025943,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vF-RWR_j1rWAVIJiK7Qp1ccTHf2sfZFiuU2dqvZ8Rvg"},
{"content":{"body":"I'll also add the C# has `Concat`, `Append`, and `Prepend` as well.","format":"org.matrix.custom.html","formatted_body":"I'll also add the C# has <code>Concat</code>, <code>Append</code>, and <code>Prepend</code> as well.","m.mentions":{},"msgtype":"m.text"},"ts":1695780043205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Kt4sya7brEv2EanvfrZRpR_GpptVRVma3t39cng0iBI"},
{"content":{"body":"we don't like it because it unconditionally incurs memory cost on every callback","msgtype":"m.text"},"ts":1695780048238,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LmFUOeTGRjfZmvZAbH8NjYuxFgu9FKbUbRUg1Z1seVY"},
{"content":{"body":"> <@shuyuguo:matrix.org> Justin Ridgewell: i just want to make the point that that argument is not strictly true, since V8 retains the optionality to become unhappy with the performance CPED as it stands today\n\nIf CPED is changed, that's fine. I think we're abusing it because it exists. AsyncContext requires something with similar functionality (global pointer, store a pointer on tasks, restore that pointer to resume). ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$g80isv_OMNzWZ8mGwbMuHkWBjMikaZhWtRaKUHF3Uy8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: i just want to make the point that that argument is not strictly true, since V8 retains the optionality to become unhappy with the performance CPED as it stands today</blockquote></mx-reply>If CPED is changed, that's fine. I think we're abusing it because it exists. AsyncContext requires something with similar functionality (global pointer, store a pointer on tasks, restore that pointer to resume).","m.relates_to":{"m.in_reply_to":{"event_id":"$g80isv_OMNzWZ8mGwbMuHkWBjMikaZhWtRaKUHF3Uy8"}},"msgtype":"m.text"},"ts":1695780084413,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZC3sJVmUHfYfo8lK2yGIdCpJoE4eX1bhHBUNBuaFoCM"},
{"content":{"body":"sounds good","msgtype":"m.text"},"ts":1695780096026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hO2KrTRSmf6QYZMXYWsx7DaH-3gElqe55fg4ZiVBpTA"},
{"content":{"body":"that matches my understanding","msgtype":"m.text"},"ts":1695780100377,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gnzm0k9U6g6MRnpV-sSLGjxeLmA_L7mj0tNSIRM0o1M"},
{"content":{"body":"> <@shuyuguo:matrix.org> Justin Ridgewell: i am responding to the argument that's repeatedly been put forth that this will not have performance problems because CPED exists in V8\n\nIt just proves that it can be implemented in a way that gives you the same performance as today's V8, which as Dan said, was unexpected for everyone.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VFZ4RGr9-BYxxL9g-xT4uSCK4_w0VzN-FUbmUJhqc4M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: i am responding to the argument that's repeatedly been put forth that this will not have performance problems because CPED exists in V8</blockquote></mx-reply>It just proves that it can be implemented in a way that gives you the same performance as today's V8, which as Dan said, was unexpected for everyone.","m.relates_to":{"m.in_reply_to":{"event_id":"$VFZ4RGr9-BYxxL9g-xT4uSCK4_w0VzN-FUbmUJhqc4M"}},"msgtype":"m.text"},"ts":1695780130512,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1OvnwAYIUfRQYXfyajpX_pP1nfAGAcU0NhBWud3XkyE"},
{"content":{"body":"maybe in a few more years, we'll catch up with Python Itertools as of 2007!","msgtype":"m.text"},"ts":1695780141573,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WytVq7oZXQ_5IedGqdkqmHon2z6HjfGSSyyBNEp70Qw"},
{"content":{"body":"great work Michael Ficarra ","format":"org.matrix.custom.html","formatted_body":"great work <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>","msgtype":"m.text"},"ts":1695780151347,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$W7JfPnA1L6Upp9EN949IATiTztvlk_JjhwCcRpphUow"},
{"content":{"body":"it is funny how much effort it takes to add a suite of functionality to js","m.mentions":{},"msgtype":"m.text"},"ts":1695780163919,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$d2aH84uTs1ykhRXll73KwWwixGzgilesO1FWNr7NWQk"},
{"content":{"body":"thanks littledan 🙂","format":"org.matrix.custom.html","formatted_body":"thanks <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> 🙂","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1695780164825,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xHzrghvwe9Yvsox3cNQNKkWiX-XLL9LbFoEzVbKIdf8"},
{"content":{"body":"watching how rust has evolved. stuff like \"chain\" barely gets any attention by anyone, whereas we have an entire proposal dedicated just to it","m.mentions":{},"msgtype":"m.text"},"ts":1695780185636,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vC-eZjoOxFXh3XxxbENdbacX7syEDQQdwL6qbfRwAfU"},
{"content":{"body":"snek: I actually appreciate that because I didn't realise how many possible shapes of solutions there were to these problem spaces","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: I actually appreciate that because I didn't realise how many possible shapes of solutions there were to these problem spaces","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1695780197511,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-VrLEf27WY98kFT8kmu-WVZtif7Bi_Q8PjcW7aHi1Yc"},
{"content":{"body":"need conclusion+summary for iterator sequencing  🙏","m.mentions":{},"msgtype":"m.text"},"ts":1695780212205,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$XRssQ8pCs1BLpQFIh295yk4xE5prLz_OkoPHPE9gin0"},
{"content":{"body":"oh yeah its definitely important to consider these things","m.mentions":{},"msgtype":"m.text"},"ts":1695780215459,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2k5ND0MdS4eKm9G4brSRC0jIq3hVFOt8wfz588Heh1A"},
{"content":{"body":"I am confident that our process will produce a great solution here","m.mentions":{},"msgtype":"m.text"},"ts":1695780222754,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tuDZIaJKd_ulHu_3IGdWdFnFEYlAvNqdaAqxPIxv2ro"},
{"content":{"body":"I think I'm still confused by the use of `.values`","format":"org.matrix.custom.html","formatted_body":"I think I'm still confused by the use of <code>.values</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695780256451,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$N9rdCkkBPtCGU_UE59T4W-4pjzY7MXZ9rvM3Is8LoYs"},
{"content":{"body":"can we advance the queue","m.mentions":{},"msgtype":"m.text"},"ts":1695780258862,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KcknSJ-hpCQgu3ewzxe-XrrDgkcgeZsSct0lx-gRhko"},
{"content":{"body":" * I think I'm still confused by the use of `.values()`","format":"org.matrix.custom.html","formatted_body":" * I think I'm still confused by the use of <code>.values()</code>","m.mentions":{},"m.new_content":{"body":"I think I'm still confused by the use of `.values()`","format":"org.matrix.custom.html","formatted_body":"I think I'm still confused by the use of <code>.values()</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N9rdCkkBPtCGU_UE59T4W-4pjzY7MXZ9rvM3Is8LoYs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695780258974,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$cUOO3Sy1TROfmlGbKvfe_NfP4LJ0xN-GQIP5FF8oblo"},
{"content":{"body":"rkirsling: don't worry about it, you will never need to use that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: don't worry about it, you will never need to use that","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"msgtype":"m.text"},"ts":1695780274282,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MvzWCSjDZ6tBKWZxc0fmmC7TrBlTOG79HWrfYy4ymtE"},
{"content":{"body":"> <@michaelficarra:matrix.org> I am confident that our process will produce a great solution here\n\nIt's just to get an iterator from which you can call flatMap, which will then do the concat","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tuDZIaJKd_ulHu_3IGdWdFnFEYlAvNqdaAqxPIxv2ro?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I am confident that our process will produce a great solution here</blockquote></mx-reply>It's just to get an iterator from which you can call flatMap, which will then do the concat","m.relates_to":{"m.in_reply_to":{"event_id":"$tuDZIaJKd_ulHu_3IGdWdFnFEYlAvNqdaAqxPIxv2ro"}},"msgtype":"m.text"},"ts":1695780303617,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tSAZ2wN-enNl_fK7dBuRRuRmVydKhQeDqUDv-wTk0Ps"},
{"content":{"body":"rkirsling: ^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: ^","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"msgtype":"m.text"},"ts":1695780327135,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cV_0uOyabq1t4TWtSiASD4yFefpgBFCz4tVc9EVfyoo"},
{"content":{"body":"TCQ has returned","m.mentions":{},"msgtype":"m.text"},"ts":1695780333029,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$0s-2xpHgUurtu9Vcyxnvq8bs1w85tl2MQQ4xPcdVzCQ"},
{"content":{"body":"high level the pattern is just flatMap(iterator of iterators)","m.mentions":{},"msgtype":"m.text"},"ts":1695780339267,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$thWsHlECxajrq4z4IuMb9w4atCP5ZHCDOrMP05ox6Cw"},
{"content":{"body":"oh thank god","m.mentions":{},"msgtype":"m.text"},"ts":1695780340447,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y0iuapuCOZnz0UWwgTrYC3xPDLeqkWyGDKDMlly-eO0"},
{"content":{"body":"petition to add `iter` as an alias for symbol.iterator on all built-in iterators","format":"org.matrix.custom.html","formatted_body":"petition to add <code>iter</code> as an alias for symbol.iterator on all built-in iterators","m.mentions":{},"msgtype":"m.text"},"ts":1695780364433,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0SvNSt8c2nu5n836lVxQIvWiG6pjKFlUVqaxFHh5T2w"},
{"content":{"body":"only if we can use `::`","format":"org.matrix.custom.html","formatted_body":"only if we can use <code>::</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695780374183,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GTaKSnM-kdWBPGb_rsmRbqX35xVD8Cr-oEqlptnH0LU"},
{"content":{"body":":(","m.mentions":{},"msgtype":"m.text"},"ts":1695780383302,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UFbyrdhJeqHa7NvfcAIO3It-cpYRB5O5QILNlQRWSxc"},
{"content":{"body":"> <@bakkot:matrix.org> petition to add `iter` as an alias for symbol.iterator on all built-in iterators\n\ni think i'd be OK with this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0SvNSt8c2nu5n836lVxQIvWiG6pjKFlUVqaxFHh5T2w?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>petition to add <code>iter</code> as an alias for symbol.iterator on all built-in iterators</blockquote></mx-reply>i think i'd be OK with this","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0SvNSt8c2nu5n836lVxQIvWiG6pjKFlUVqaxFHh5T2w"}},"msgtype":"m.text"},"ts":1695780401693,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VJmlooW-peBj9lAunxIw4n-YVNS6vDA9H3EhvFdzYaA"},
{"content":{"body":"so from the discussion today, I think I will lean toward `Iterator.of/Iterator.prototype.flat` for iterator sequencing stage 2","format":"org.matrix.custom.html","formatted_body":"so from the discussion today, I think I will lean toward <code>Iterator.of/Iterator.prototype.flat</code> for iterator sequencing stage 2","m.mentions":{},"msgtype":"m.text"},"ts":1695780502647,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$40o3U34I0KU1v6hbM9C92GttgIsw50apmxuaQEHyr-0"},
{"content":{"body":":(","m.mentions":{},"msgtype":"m.text"},"ts":1695780522670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rjs3iKra2BWQeLJ_q3OJ2fY9PEUw428j83HSbnU54GM"},
{"content":{"body":"and as a bonus, those methods are useful for other things","m.mentions":{},"msgtype":"m.text"},"ts":1695780524119,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$x0SnfmByF0t5GdiHz2SrM_GB-zuotBAwaexiewzaa3w"},
{"content":{"body":"I do not think people will reach for that","m.mentions":{},"msgtype":"m.text"},"ts":1695780526246,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L30szf43eY8iLsC_0JO-yH2waf8XQHSLM34npxHem7Y"},
{"content":{"body":"I would really like a method named something obvious","m.mentions":{},"msgtype":"m.text"},"ts":1695780530678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HXrGZHLaD8Dd_PrBRVuNBjBIEU8owux3kSNLxuZ7M9E"},
{"content":{"body":"that makes it clear you are doing concatenation","m.mentions":{},"msgtype":"m.text"},"ts":1695780536851,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cTE5ASByS_Aar9ZtH6qEoj-P49ymCZ-V659BH44iFvM"},
{"content":{"body":"i think a static method is a non-starter","m.mentions":{},"msgtype":"m.text"},"ts":1695780540203,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gpbfg7jp7oFcU2Q9hSOpHspSPl8s7enRxjXD4MVvWpY"},
{"content":{"body":"for this problem space","m.mentions":{},"msgtype":"m.text"},"ts":1695780543284,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vRg03dIGiUPuvhsEbwgbbsM-vNRO2Rw2gcE1Y6guQwo"},
{"content":{"body":"I'd be perfectly happy with `.concat`, `.append`, and `.prepend`","format":"org.matrix.custom.html","formatted_body":"I'd be perfectly happy with <code>.concat</code>, <code>.append</code>, and <code>.prepend</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695780563164,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GF6L_pkwdypoDpH-omhKb8zePg_icSfwi71Aml_1MKk"},
{"content":{"body":"also `flat` is problematic in ways that `concat` is not, wrt handling of non-iterable values","format":"org.matrix.custom.html","formatted_body":"also <code>flat</code> is problematic in ways that <code>concat</code> is not, wrt handling of non-iterable values","m.mentions":{},"msgtype":"m.text"},"ts":1695780583996,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$owEFQ3GjIjzdPQhINbqNBIg8nrJT8Db3N689Te9uxuU"},
{"content":{"body":"> <@devsnek:matrix.org> i don't think \"i don't have an iterable\" is a problem in practice\n\nit is very common in practice to have something that can either be one thing, or a list of things, and `[].concat(x)` is incredibly useful and commonplace to ensure one always has an array without having to care","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QDMX1YHLPnpvzuA_8ee2eIVYI5VWpo_yhUGs5NvR1nI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don&#39;t think &quot;i don&#39;t have an iterable&quot; is a problem in practice</blockquote></mx-reply>it is very common in practice to have something that can either be one thing, or a list of things, and <code>[].concat(x)</code> is incredibly useful and commonplace to ensure one always has an array without having to care","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QDMX1YHLPnpvzuA_8ee2eIVYI5VWpo_yhUGs5NvR1nI"}},"msgtype":"m.text"},"ts":1695780604981,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$C1tc38PEcomKwKu2xw72GDgTeBtMWk7stEffYv0OvrE"},
{"content":{"body":"i don't think i've ever seen code that has `[].concat(x)`","format":"org.matrix.custom.html","formatted_body":"i don't think i've ever seen code that has <code>[].concat(x)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695780639073,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nxN_xm5mL_lm9VHSkNmLKY0DyJ33Kl6CShFw1viDPWs"},
{"content":{"body":"I have literally never seen that pattern in any code not written by you","m.mentions":{},"msgtype":"m.text"},"ts":1695780641700,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xhsU2SNn4w0dhLIBEUqK_ub8NNXpzVhySaJoZJ8JRLg"},
{"content":{"body":"i believe you that it exists","m.mentions":{},"msgtype":"m.text"},"ts":1695780645655,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9ZQpkP0f9SluxCj4KBmzed1mkujoMdDIUs6fB7K-anU"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1695780647713,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-pC6ag-qNNjfmIPf-xMDMSzEkJIRrSyyBci6muDWqb8"},
{"content":{"body":"OH `cons`","format":"org.matrix.custom.html","formatted_body":"OH <code>cons</code>","msgtype":"m.text"},"ts":1695780658812,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$xk6ZSUeryaiLRrzCDSMOu-w1d2eNF9SS77XNSwwcfW4"},
{"content":{"body":"but like, i wrote code with `chain` literally today (in rust) at work","format":"org.matrix.custom.html","formatted_body":"but like, i wrote code with <code>chain</code> literally today (in rust) at work","m.mentions":{},"msgtype":"m.text"},"ts":1695780659455,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3_gVoNekC5XMQM82tvvM1Lisfpf-YeydIAD3q1zYuQs"},
{"content":{"body":"none the less, i didn't make it up, it's common in lots of codebases i've worked in, which is why i use it in all of mine","m.mentions":{},"msgtype":"m.text"},"ts":1695780668371,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$io8lNX3wTI-8mIHvosdL8jxtj74DN7jPTxvRUCMM8C4"},
{"content":{"body":"> <@bakkot:matrix.org> I have literally never seen that pattern in any code not written by you\n\nIt definitely exists in transpiled emit, not sure how often it is hand-written","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xhsU2SNn4w0dhLIBEUqK_ub8NNXpzVhySaJoZJ8JRLg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I have literally never seen that pattern in any code not written by you</blockquote></mx-reply>It definitely exists in transpiled emit, not sure how often it is hand-written","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xhsU2SNn4w0dhLIBEUqK_ub8NNXpzVhySaJoZJ8JRLg"}},"msgtype":"m.text"},"ts":1695780679833,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j-AtCloTpEFFKSkPMz7A4QJa24W1cVSRk_KmFrlNap0"},
{"content":{"body":"i agree concatSpreadable is awful, but not because \"concat takes an array or a scalar\" is awful.","m.mentions":{},"msgtype":"m.text"},"ts":1695780705934,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uoLfmUIhYRHsNq3ee0RgHjqoNgT9O8paNR3_cFo0O1A"},
{"content":{"body":"two things can be awful at the same time","m.mentions":{},"msgtype":"m.text"},"ts":1695780736956,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$t7RtZnek3jHHEEEob-mmjN6A6Lo6WEUtrIMSf2maHHE"},
{"content":{"body":"\"preferred\" is also a bit strong. ","m.mentions":{},"msgtype":"m.text"},"ts":1695780770594,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J5gKLUegTrbHkNAHfNl8_QllKjsTtyQMAxCQQCFxbgc"},
{"content":{"body":"sure. i just don't agree the second one is awful, because i don't think in terms of haskelly types","m.mentions":{},"msgtype":"m.text"},"ts":1695780789551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Pwfbrb3rr5v3kaHEWxecQcawcRWnp7K0f3XntswWCRQ"},
{"content":{"body":"I mean even TypeScript-y types don't unify those things","m.mentions":{},"msgtype":"m.text"},"ts":1695780832092,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gnQ8Ogc2o5P_yTvZT6PocHkem_sZIvGzR7x9Es1ddsA"},
{"content":{"body":"you don't need some advanced type system to be told that that is inappropriate","m.mentions":{},"msgtype":"m.text"},"ts":1695780858027,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dtLQaovDpKSSLHvVmoTeFGgm5n2WLLv7s-Q16iufbmU"},
{"content":{"body":"waldemar: You don't get a prototype, at least as far as we've been discussing.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: You don't get a prototype, at least as far as we've been discussing.","m.mentions":{"user_ids":["@waldemarh:matrix.org"]},"msgtype":"m.text"},"ts":1695780862555,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U350vxp-qnF65SrvxJMZz_uaBX9n6KFSCgfnbn9F-sU"},
{"content":{"body":"As in, `[[Prototype]]` is `null`","format":"org.matrix.custom.html","formatted_body":"As in, <code>[[Prototype]]</code> is <code>null</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695780879662,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I2vo_Ag3ALv_mJRp24BY9tk6alq6S_zx0ebessnKB08"},
{"content":{"body":"> <@bakkot:matrix.org> also `flat` is problematic in ways that `concat` is not, wrt handling of non-iterable values\n\nto elaborate on this: either it throws on non-iterable values, or it doesn't; both are problematic. throwing on non-iterable values means you can't use it like `Array.prototype.flat` to flatten a tree. not throwing on non-iterable values means that ever making anything iterable is a breaking change.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$owEFQ3GjIjzdPQhINbqNBIg8nrJT8Db3N689Te9uxuU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>also <code>flat</code> is problematic in ways that <code>concat</code> is not, wrt handling of non-iterable values</blockquote></mx-reply>to elaborate on this: either it throws on non-iterable values, or it doesn't; both are problematic. throwing on non-iterable values means you can't use it like <code>Array.prototype.flat</code> to flatten a tree. not throwing on non-iterable values means that ever making anything iterable is a breaking change.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$owEFQ3GjIjzdPQhINbqNBIg8nrJT8Db3N689Te9uxuU"}},"msgtype":"m.text"},"ts":1695780888736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI"},
{"content":{"body":"imo having a variable number of things is what vectors are for, not vector or item","m.mentions":{},"msgtype":"m.text"},"ts":1695780889756,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$p2A3szG44Gww64CSRDfxPSHBNcdAK_D2lUbvzSA2PiY"},
{"content":{"body":"typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo","format":"org.matrix.custom.html","formatted_body":"typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo","m.mentions":{},"msgtype":"m.text"},"ts":1695780889883,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$be6Ub7VyYBxRrOu-WxwapAfoUFpptFt9ho-XCi5BnQY"},
{"content":{"body":" * typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo. that doesn't mean it's bad.","format":"org.matrix.custom.html","formatted_body":" * typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo. that doesn't mean it's bad.","m.mentions":{},"m.new_content":{"body":"typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo. that doesn't mean it's bad.","format":"org.matrix.custom.html","formatted_body":"typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo. that doesn't mean it's bad.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$be6Ub7VyYBxRrOu-WxwapAfoUFpptFt9ho-XCi5BnQY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695780895285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yLRtGAFb2vhk-DXy4HDlYvBmEoLcn77ahK5-Z-k3Syw"},
{"content":{"body":" * typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.","format":"org.matrix.custom.html","formatted_body":" * typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.","m.mentions":{},"m.new_content":{"body":"typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.","format":"org.matrix.custom.html","formatted_body":"typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$be6Ub7VyYBxRrOu-WxwapAfoUFpptFt9ho-XCi5BnQY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695780929900,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LplNPxoDGn8KHw3ETkPkknlN7DrEHp74M4zPh6JnBhE"},
{"content":{"body":"I remember the original draft don't allow prototype on shared struct values, now it's allowed but just omitted when transfer? Is my understanding correct?","m.mentions":{},"msgtype":"m.text"},"ts":1695781009536,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$qAio4Z-wvJKE2rWt8uuhw7tAJcj9xZGYQcuFYKX28dk"},
{"content":{"body":"i'm curious why prototypes are a thing at all","m.mentions":{},"msgtype":"m.text"},"ts":1695781032630,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$bFnJJLTVLCCm6XcAs5jpEDb_fPLUD9lWaxCPPxcdAk8"},
{"content":{"body":"on shared structs","m.mentions":{},"msgtype":"m.text"},"ts":1695781036783,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PLVXLhrJikd8XwqGoZgk30jJH7rKiUroeBn9WYTsHQQ"},
{"content":{"body":"> <@haxjs:matrix.org> I remember the original draft don't allow prototype on shared struct values, now it's allowed but just omitted when transfer? Is my understanding correct?\n\nNot quite. If you want thread-local behavior, you must explicitly opt in and supply that behavior in each thread.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qAio4Z-wvJKE2rWt8uuhw7tAJcj9xZGYQcuFYKX28dk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>I remember the original draft don&#39;t allow prototype on shared struct values, now it&#39;s allowed but just omitted when transfer? Is my understanding correct?</blockquote></mx-reply>Not quite. If you want thread-local behavior, you must explicitly opt in and supply that behavior in each thread.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qAio4Z-wvJKE2rWt8uuhw7tAJcj9xZGYQcuFYKX28dk"}},"msgtype":"m.text"},"ts":1695781048808,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ln4yUEBkD5BzfDT9im7Xso-FJUZPGw0ot5-Oeb4VdzY"},
{"content":{"body":"i'd expect them to be an underlying implementation detail of some higher level thing","m.mentions":{},"msgtype":"m.text"},"ts":1695781051391,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wXgbaejJb1i8O4YJ39PdaJRwxZ20mx3kjThIqW5v7KM"},
{"content":{"body":"i'm also confused why a struct would have behavior (functions) attached","m.mentions":{},"msgtype":"m.text"},"ts":1695781052972,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZP5LUPl4ZFJtExrIcGIt6aDTvcoKoOMooM3bxf3OrcM"},
{"content":{"body":"me hearing \"just an ephemeron\" just now felt like like most people probably feel hearing \"just a monoid object in the category of endofunctors on C\"","m.mentions":{},"msgtype":"m.text"},"ts":1695781063387,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$NnR_w0zpMLH8F3D91AiOOrcI3ygcYnFEPp0kbnxx-ik"},
{"content":{"body":"I don't understand this. Why is throwing on non-iterables bad?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781067075,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DKgUttdx5ITsBrTwje444sHX6m1U4McIOGRNYeAer5Y"},
{"content":{"body":"> <@devsnek:matrix.org> i'd expect them to be an underlying implementation detail of some higher level thing\n\nThere is a lot of complexity to this. Attaching behavior is very important.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wXgbaejJb1i8O4YJ39PdaJRwxZ20mx3kjThIqW5v7KM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i&#39;d expect them to be an underlying implementation detail of some higher level thing</blockquote></mx-reply>There is a lot of complexity to this. Attaching behavior is very important.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wXgbaejJb1i8O4YJ39PdaJRwxZ20mx3kjThIqW5v7KM"}},"msgtype":"m.text"},"ts":1695781079061,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA"},
{"content":{"body":"maybe just reference counter...","m.mentions":{},"msgtype":"m.text"},"ts":1695781080508,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eJDAvT5NLqW0mwLk2Ws62b75mhedeuPT8j3H0l8EoEs"},
{"content":{"body":"> <@rbuckton:matrix.org> There is a lot of complexity to this. Attaching behavior is very important.\n\n*having* behavior is. *attaching* it is just a style choice.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There is a lot of complexity to this. Attaching behavior is very important.</blockquote></mx-reply><em>having</em> behavior is. <em>attaching</em> it is just a style choice.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA"}},"msgtype":"m.text"},"ts":1695781095860,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kO-Fny5aCyBI4XlkG1gROVA1gZ3C0Tje79CI3KT5NNg"},
{"content":{"body":"> <@rbuckton:matrix.org> There is a lot of complexity to this. Attaching behavior is very important.\n\n * _having_ behavior is. _attaching_ it is just a style choice. functions can live separate from the data they affect.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There is a lot of complexity to this. Attaching behavior is very important.</blockquote></mx-reply> * <em>having</em> behavior is. <em>attaching</em> it is just a style choice. functions can live separate from the data they affect.","m.mentions":{},"m.new_content":{"body":"_having_ behavior is. _attaching_ it is just a style choice. functions can live separate from the data they affect.","format":"org.matrix.custom.html","formatted_body":"<em>having</em> behavior is. <em>attaching</em> it is just a style choice. functions can live separate from the data they affect.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kO-Fny5aCyBI4XlkG1gROVA1gZ3C0Tje79CI3KT5NNg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781106216,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ef798qrNWTHPfS_HHQcAuSKAxj_NZHazt0phyoMi4aw"},
{"content":{"body":"> <@rbuckton:matrix.org> Not quite. If you want thread-local behavior, you must explicitly opt in and supply that behavior in each thread.\n\nNot fully understand... I mean I can always use functions (not methods)?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ln4yUEBkD5BzfDT9im7Xso-FJUZPGw0ot5-Oeb4VdzY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Not quite. If you want thread-local behavior, you must explicitly opt in and supply that behavior in each thread.</blockquote></mx-reply>Not fully understand... I mean I can always use functions (not methods)?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ln4yUEBkD5BzfDT9im7Xso-FJUZPGw0ot5-Oeb4VdzY"}},"msgtype":"m.text"},"ts":1695781109958,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$i5Y-OC5QLQ-qLDXpez0-qG3LEEhFKMi4avZ6qjKB_mM"},
{"content":{"body":"> <@ljharb:matrix.org> typescript certainly can't handle `[].concat()` at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.\n\nhttps://github.com/microsoft/TypeScript/issues/47351 is the issue presumably","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$be6Ub7VyYBxRrOu-WxwapAfoUFpptFt9ho-XCi5BnQY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>typescript certainly can't handle <code>[].concat()</code> at all, it's been a long standing open issue on the repo. that doesn't mean it's bad, it's just another gap in TS's ability to describe JS.</blockquote></mx-reply>https://github.com/microsoft/TypeScript/issues/47351 is the issue presumably","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$be6Ub7VyYBxRrOu-WxwapAfoUFpptFt9ho-XCi5BnQY"}},"msgtype":"m.text"},"ts":1695781150022,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gOeTRBrxAy6R-ePduES-W5WVW0KhCpWKRPsIo1wPILM"},
{"content":{"body":"what i read is, \"because it's actually an important use case to have an X and a non-X and concatenate them\"","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$DKgUttdx5ITsBrTwje444sHX6m1U4McIOGRNYeAer5Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781152072,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CySUl4Cg5WPdWyJST0ojr_2AS8qjnvDtS71z6B3MzBo"},
{"content":{"body":"> <@ljharb:matrix.org> _having_ behavior is. _attaching_ it is just a style choice. functions can live separate from the data they affect.\n\nNo, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kO-Fny5aCyBI4XlkG1gROVA1gZ3C0Tje79CI3KT5NNg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><em>having</em> behavior is. <em>attaching</em> it is just a style choice. functions can live separate from the data they affect.</blockquote></mx-reply>No, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.","m.mentions":{"user_ids":["@ljharb:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kO-Fny5aCyBI4XlkG1gROVA1gZ3C0Tje79CI3KT5NNg"}},"msgtype":"m.text"},"ts":1695781156125,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uYjAplbrgZFH1NK2y62ab5ZI-Dsmi2zDHVd4wpqj1WQ"},
{"content":{"body":"> <@bakkot:matrix.org> https://github.com/microsoft/TypeScript/issues/47351 is the issue presumably\n\n(with exactly 0 +1s...)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gOeTRBrxAy6R-ePduES-W5WVW0KhCpWKRPsIo1wPILM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>https://github.com/microsoft/TypeScript/issues/47351 is the issue presumably</blockquote></mx-reply>(with exactly 0 +1s...)","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gOeTRBrxAy6R-ePduES-W5WVW0KhCpWKRPsIo1wPILM"}},"msgtype":"m.text"},"ts":1695781172566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e-4x6o51DbS6fwknlNQHnOCgKyLxN5Og49a3TAfFoO8"},
{"content":{"body":"> <@rbuckton:matrix.org> No, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.\n\ni would love to be convinced that it's \"need\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uYjAplbrgZFH1NK2y62ab5ZI-Dsmi2zDHVd4wpqj1WQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.</blockquote></mx-reply>i would love to be convinced that it's \"need\"","m.mentions":{"user_ids":["@rbuckton:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uYjAplbrgZFH1NK2y62ab5ZI-Dsmi2zDHVd4wpqj1WQ"}},"msgtype":"m.text"},"ts":1695781177834,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HnKyYC9Or5FsY-PjoHTHuMpB0dErEB5TWYazgx9dihM"},
{"content":{"body":"> <@rbuckton:matrix.org> There is a lot of complexity to this. Attaching behavior is very important.\n\nI think it might be solved by extensions proposal? Don't use prototype, always use extension methods/accessor on shared struct values.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There is a lot of complexity to this. Attaching behavior is very important.</blockquote></mx-reply>I think it might be solved by extensions proposal? Don't use prototype, always use extension methods/accessor on shared struct values.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IQ6D4vGusANvTB-idgo6RO8tZ1qQuyzwrwBOhcUeMQA"}},"msgtype":"m.text"},"ts":1695781182616,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6T9147UkPUObGsBYTM5kfONdbI_1xyVOFlFtWsjzbVI"},
{"content":{"body":"i think sharing code within a struct makes sense and is well motivated. i think the whole prototype thing is weird","m.mentions":{},"msgtype":"m.text"},"ts":1695781184717,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$B5rXP6G3o0uiAg5MT8sP5kk8QdBs8U_MM84oFSJmtwY"},
{"content":{"body":"> <@rbuckton:matrix.org> No, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.\n\n * i would love to be convinced that it's \"need\", but people quite often incorrectly think their wants are needs.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uYjAplbrgZFH1NK2y62ab5ZI-Dsmi2zDHVd4wpqj1WQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, attaching is necessary for many projects, this is a result of feedback from multiple sources experimenting with the origin trial. Not everyone needs it, but many do.</blockquote></mx-reply> * i would love to be convinced that it's \"need\", but people quite often incorrectly think their wants are needs.","m.mentions":{},"m.new_content":{"body":"i would love to be convinced that it's \"need\", but people quite often incorrectly think their wants are needs.","format":"org.matrix.custom.html","formatted_body":"i would love to be convinced that it's \"need\", but people quite often incorrectly think their wants are needs.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HnKyYC9Or5FsY-PjoHTHuMpB0dErEB5TWYazgx9dihM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781208971,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PwWvpauhR3Eh9ZRI2a4MGY5m4JcYQkWUxD94owwu2do"},
{"content":{"body":"> <@rkirsling:matrix.org> me hearing \"just an ephemeron\" just now felt like like most people probably feel hearing \"just a monoid object in the category of endofunctors on C\"\n\nat least ephemeron can be explained in 2 lines and <del>you may need a math phd to know the category theory</del>","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NnR_w0zpMLH8F3D91AiOOrcI3ygcYnFEPp0kbnxx-ik?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>me hearing &quot;just an ephemeron&quot; just now felt like like most people probably feel hearing &quot;just a monoid object in the category of endofunctors on C&quot;</blockquote></mx-reply>at least ephemeron can be explained in 2 lines and <del>you may need a math phd to know the category theory</del>","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NnR_w0zpMLH8F3D91AiOOrcI3ygcYnFEPp0kbnxx-ik"}},"msgtype":"m.text"},"ts":1695781217987,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9ZYvjbNa-qbB1p8nJb_ct5ZZMvjRO1W4r6_XtpKXwEU"},
{"content":{"body":"I've been experimenting with this in TypeScript. I absolutely cannot use it efficiently without the ability to attach behavior, unless I use Proxy or completely duplicate our AST as regular objects for the public API.","m.mentions":{},"msgtype":"m.text"},"ts":1695781226999,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hAzNI18vpFALIX_IclsOIVexbPwG4gvIyqMmPInuwoE"},
{"content":{"body":"anything else would be a significant breaking change.","m.mentions":{},"msgtype":"m.text"},"ts":1695781235634,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$StvHn1vTKhav3meapGAD77fnNvndER5xIcUY76EA0XA"},
{"content":{"body":"> <@michaelficarra:matrix.org> I don't understand this. Why is throwing on non-iterables bad?\n\ndid you not see the \"to flatten a tree\" bit","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DKgUttdx5ITsBrTwje444sHX6m1U4McIOGRNYeAer5Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I don&#39;t understand this. Why is throwing on non-iterables bad?</blockquote></mx-reply>did you not see the \"to flatten a tree\" bit","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":false,"m.in_reply_to":{"event_id":"$DKgUttdx5ITsBrTwje444sHX6m1U4McIOGRNYeAer5Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781246940,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uCqurGzhL_6V8lBNfaYvbq3qjyCSF0Rw9TO4UJs8vis"},
{"content":{"body":"i don't understand why `x.foo()` and `foo(x)` are meaningfully different","format":"org.matrix.custom.html","formatted_body":"i don't understand why <code>x.foo()</code> and <code>foo(x)</code> are meaningfully different","m.mentions":{},"msgtype":"m.text"},"ts":1695781254858,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI"},
{"content":{"body":"(I think garbage collection is more difficult than category theory, but that's probably an issue of motivation)","m.mentions":{},"msgtype":"m.text"},"ts":1695781266926,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$fHsHHZq6I0k07EwBXyuAtMPEF0snoiMu_hiEl7dUiUY"},
{"content":{"body":" * i don't understand why `x.foo()` and `foo(x)` are meaningfully different in terms of capabilities","format":"org.matrix.custom.html","formatted_body":" * i don't understand why <code>x.foo()</code> and <code>foo(x)</code> are meaningfully different in terms of capabilities","m.mentions":{},"m.new_content":{"body":"i don't understand why `x.foo()` and `foo(x)` are meaningfully different in terms of capabilities","format":"org.matrix.custom.html","formatted_body":"i don't understand why <code>x.foo()</code> and <code>foo(x)</code> are meaningfully different in terms of capabilities","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781267090,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LG1EetV0zm1NQIJen3A2qmvnaHI2puucBYxvrNXcIEo"},
{"content":{"body":"oh you mean like with a depth and stuff?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$uCqurGzhL_6V8lBNfaYvbq3qjyCSF0Rw9TO4UJs8vis"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781277564,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zLevukaqt0-9DRRZd4tCSDMF-BsW5LA0qMpRRmhlWNQ"},
{"content":{"body":"> <@rbuckton:matrix.org> I've been experimenting with this in TypeScript. I absolutely cannot use it efficiently without the ability to attach behavior, unless I use Proxy or completely duplicate our AST as regular objects for the public API.\n\nthis makes perfect sense to me. It's necessary to be able to use objects directly, without wrapping them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hAzNI18vpFALIX_IclsOIVexbPwG4gvIyqMmPInuwoE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve been experimenting with this in TypeScript. I absolutely cannot use it efficiently without the ability to attach behavior, unless I use Proxy or completely duplicate our AST as regular objects for the public API.</blockquote></mx-reply>this makes perfect sense to me. It's necessary to be able to use objects directly, without wrapping them.","m.relates_to":{"m.in_reply_to":{"event_id":"$hAzNI18vpFALIX_IclsOIVexbPwG4gvIyqMmPInuwoE"}},"msgtype":"m.text"},"ts":1695781278036,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5SAGwQ_5lVXZrCF5fHQp81t1kH-gPQtIQR-cyUIxtag"},
{"content":{"body":"> <@ljharb:matrix.org> i don't understand why `x.foo()` and `foo(x)` are meaningfully different in terms of capabilities\n\nIf you are writing a project from scratch, sure. If you are adapting an existing project, it might not be feasible.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i don't understand why <code>x.foo()</code> and <code>foo(x)</code> are meaningfully different in terms of capabilities</blockquote></mx-reply>If you are writing a project from scratch, sure. If you are adapting an existing project, it might not be feasible.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI"}},"msgtype":"m.text"},"ts":1695781278376,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QTwd66n5l0wZHJ77jjFj3yycCbSZTrmKOtmXi3nFImQ"},
{"content":{"body":"nobody should be doing that","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$zLevukaqt0-9DRRZd4tCSDMF-BsW5LA0qMpRRmhlWNQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781281457,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fu6xQ7yarUEX7h564r9TJFjrgbn9Xicb4nUWb7KQ0zc"},
{"content":{"body":"don't do that","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$fu6xQ7yarUEX7h564r9TJFjrgbn9Xicb4nUWb7KQ0zc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781284836,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lIerFOItdmN9wvmu3USj0OmDjJxOuz4C1zwcL94A0PY"},
{"content":{"body":"I was assuming you would have the depth parameter like on arrays, yes","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$lIerFOItdmN9wvmu3USj0OmDjJxOuz4C1zwcL94A0PY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781290651,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ixgluiVcd39NePQtLPIkt0Ebhb7zzO1IEkh7NsZa7QE"},
{"content":{"body":"> <@rbuckton:matrix.org> If you are writing a project from scratch, sure. If you are adapting an existing project, it might not be feasible.\n\nthat's not a need, that's just difficulty adapting to a different style.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QTwd66n5l0wZHJ77jjFj3yycCbSZTrmKOtmXi3nFImQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If you are writing a project from scratch, sure. If you are adapting an existing project, it might not be feasible.</blockquote></mx-reply>that's not a need, that's just difficulty adapting to a different style.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QTwd66n5l0wZHJ77jjFj3yycCbSZTrmKOtmXi3nFImQ"}},"msgtype":"m.text"},"ts":1695781294335,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pmRuEPvoE8GHT5TPMJV1RfCdl3Gdhu28oHUV6ddwrJ8"},
{"content":{"body":"flat should not take a depth, it should always be 1","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$ixgluiVcd39NePQtLPIkt0Ebhb7zzO1IEkh7NsZa7QE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781295167,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cIBWsVt_kzp-Nuc4LT63tm-eUhUA0CIXdUOElqi8oKM"},
{"content":{"body":"> <@rbuckton:matrix.org> I've been experimenting with this in TypeScript. I absolutely cannot use it efficiently without the ability to attach behavior, unless I use Proxy or completely duplicate our AST as regular objects for the public API.\n\nto be clear what i'm suggesting is like. you could have a property of a struct, which holds a sharable code value (a function of sorts). it would probably be callable like `a.b()` even.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hAzNI18vpFALIX_IclsOIVexbPwG4gvIyqMmPInuwoE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;ve been experimenting with this in TypeScript. I absolutely cannot use it efficiently without the ability to attach behavior, unless I use Proxy or completely duplicate our AST as regular objects for the public API.</blockquote></mx-reply>to be clear what i'm suggesting is like. you could have a property of a struct, which holds a sharable code value (a function of sorts). it would probably be callable like <code>a.b()</code> even.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hAzNI18vpFALIX_IclsOIVexbPwG4gvIyqMmPInuwoE"}},"msgtype":"m.text"},"ts":1695781295268,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hOLDV0Fq3N5hYBCBNV_x2ovimf2XFrUdPR30Q9DZtaY"},
{"content":{"body":"would the plan be to not do that?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$ixgluiVcd39NePQtLPIkt0Ebhb7zzO1IEkh7NsZa7QE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781295313,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gFoU6xVcVfioMNqCZx6k3-E8epxBDwC-zFGJFN-v6I0"},
{"content":{"body":"yeah no depth parameter","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$gFoU6xVcVfioMNqCZx6k3-E8epxBDwC-zFGJFN-v6I0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781302012,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6YHirofetWWYS8cfLAxvTboM4KmDUamp1HOo0mAmfEg"},
{"content":{"body":"well","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$6YHirofetWWYS8cfLAxvTboM4KmDUamp1HOo0mAmfEg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781307073,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WEuW8av-s_q1ArnhKiwQnjZns2GPLwb9rGnm_OS20Z0"},
{"content":{"body":"fucking gross","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$6YHirofetWWYS8cfLAxvTboM4KmDUamp1HOo0mAmfEg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781307263,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VmMfZNARBoJkBLhEVIEkYPQOS3OYurh4CcwFTV8B-xU"},
{"content":{"body":"> <@ljharb:matrix.org> i don't understand why `x.foo()` and `foo(x)` are meaningfully different in terms of capabilities\n\nDX, and x.foo() could be virtual methods.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i don't understand why <code>x.foo()</code> and <code>foo(x)</code> are meaningfully different in terms of capabilities</blockquote></mx-reply>DX, and x.foo() could be virtual methods.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FV4pL71oX79kdws8AkdY5BQ-onJdIj5JWu5_xZhXisI"}},"msgtype":"m.text"},"ts":1695781315717,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$JHqKnhzQLTil51JDdv2JLiLyGx-ci9H4E-CsS0sAg9Q"},
{"content":{"body":"why? `.flat(Infinity)` is great","format":"org.matrix.custom.html","formatted_body":"why? <code>.flat(Infinity)</code> is great","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$VmMfZNARBoJkBLhEVIEkYPQOS3OYurh4CcwFTV8B-xU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781323723,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0gUZEsh_r2pe0FRcmrVLMftXpJHwoBCZ0HXIU5lhEqo"},
{"content":{"body":"> <@ljharb:matrix.org> that's not a need, that's just difficulty adapting to a different style.\n\nThat's not an option for a widely used public API, without breaking an entire ecosystem of tooling.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pmRuEPvoE8GHT5TPMJV1RfCdl3Gdhu28oHUV6ddwrJ8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>that's not a need, that's just difficulty adapting to a different style.</blockquote></mx-reply>That's not an option for a widely used public API, without breaking an entire ecosystem of tooling.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pmRuEPvoE8GHT5TPMJV1RfCdl3Gdhu28oHUV6ddwrJ8"}},"msgtype":"m.text"},"ts":1695781328972,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5TLtrlidAJcRaNP5oyZJEibN2sDcqeuDImVmiAM2pRE"},
{"content":{"body":"🤦‍♂️ please","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$0gUZEsh_r2pe0FRcmrVLMftXpJHwoBCZ0HXIU5lhEqo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781333603,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_al3bG9HZ5-tg2jktrEvfUWdnISqJfoDCZw1Oz7Zwks"},
{"content":{"body":"I am ok with this but I think if you're going to push jordan to accept an asymmetry with array methods, you should push for `.concat`, the nice normal thing","format":"org.matrix.custom.html","formatted_body":"I am ok with this but I think if you're going to push jordan to accept an asymmetry with array methods, you should push for <code>.concat</code>, the nice normal thing","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$_al3bG9HZ5-tg2jktrEvfUWdnISqJfoDCZw1Oz7Zwks"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781342497,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$i-BSRVb0tP6shnU-XprYOgWnrgPkb3aZzVjvMljtrQs"},
{"content":{"body":"And I'm not talking about TS, though we would be included in that. This is feedback from other attempts to migrate other projects to use structs.","m.mentions":{},"msgtype":"m.text"},"ts":1695781365908,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S27n-v56cdEWf-b8J8AxaPAhQNF4ANzAsu1oa_pjkB0"},
{"content":{"body":"what tooling ecosystem? certainly APIs may need breaking changes; asynchrony forces that, for example.","m.mentions":{},"msgtype":"m.text"},"ts":1695781384151,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wtJK8PIYbVc9_s4tz3QefHCuzxv5yORBhnWwKPa7w1g"},
{"content":{"body":"it's perfectly fine if multithreading forces that too.","m.mentions":{},"msgtype":"m.text"},"ts":1695781393015,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vTUgSRr5Mxs5-ANallU_laFN9eqXz8yzgFeweajfGlI"},
{"content":{"body":" * it's perfectly fine if multithreading forces that too (even if it's ideal not to)","m.mentions":{},"m.new_content":{"body":"it's perfectly fine if multithreading forces that too (even if it's ideal not to)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$vTUgSRr5Mxs5-ANallU_laFN9eqXz8yzgFeweajfGlI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781398291,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0BTS9dvuPpGnOj_ey9gUAKEb0GBVcT7rElxlHgX_-w4"},
{"content":{"body":" * it's perfectly fine if multithreading forces that too (even if it's ideal not to)\n\nwe have semver and code refactoring tools and codemods that can make that easier.","m.mentions":{},"m.new_content":{"body":"it's perfectly fine if multithreading forces that too (even if it's ideal not to)\n\nwe have semver and code refactoring tools and codemods that can make that easier.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$vTUgSRr5Mxs5-ANallU_laFN9eqXz8yzgFeweajfGlI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781431195,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PcgbwPnmXZ76vuRERPTVx5wGw0ag1FgzBmREoWV2phU"},
{"content":{"body":"I don't believe that it is, and there are solutions under discussion to make that a non-issue.","m.mentions":{},"msgtype":"m.text"},"ts":1695781432848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rvJuSA7OLpQlR1mRz8m92NHaUGG2SqXStCAp42-snrA"},
{"content":{"body":"Need pipeline and static functions 🤞","msgtype":"m.text"},"ts":1695781528330,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$gsShjenkEkdgKJWScD4VpYFyF4fkPRUgXf87P940ikk"},
{"content":{"body":"oof, didn't we already make this mistake with global registries with symbols?","m.mentions":{},"msgtype":"m.text"},"ts":1695781547440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e-55hlnxKqmzT3egFpdIKnYc2CT9i2-0oWTxHiySBb4"},
{"content":{"body":" * oof, didn't we already make this global registry mistake with symbols?","m.mentions":{},"m.new_content":{"body":"oof, didn't we already make this global registry mistake with symbols?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$e-55hlnxKqmzT3egFpdIKnYc2CT9i2-0oWTxHiySBb4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781563948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IFKk2lb-4KUFNwmN9fRyKgUYY_1emaaYTtYPYUQaM8Y"},
{"content":{"body":"this is even worse than that; it links objects!","m.mentions":{},"msgtype":"m.text"},"ts":1695781575941,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$o7t_SjnKCcMKuemLkuxiwkLAp96gT1ks_yOWZffp6II"},
{"content":{"body":"when the solution is \"universal state!\" then maybe the problem's not worth solving","m.mentions":{},"msgtype":"m.text"},"ts":1695781583803,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9dHgTL7YCyCqt1XdLSAOiXdpGjUbd7CJNM2SXYHlH4g"},
{"content":{"body":"what global registry mistake? registered symbols are super useful","m.mentions":{},"msgtype":"m.text"},"ts":1695781586309,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KAoI_2GXFOZBQNVXQK8fpbIi515u5PLMTArdI3bhmFY"},
{"content":{"body":"i'm not sure how, they're just fancy strings.","m.mentions":{},"msgtype":"m.text"},"ts":1695781608169,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fIkWWX7RAkGleWA2gCEQ-XQn0uCNyaC9izZkFfZcK_w"},
{"content":{"body":"yeah just use a string","m.mentions":{},"msgtype":"m.text"},"ts":1695781624436,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SbQX7VvyowILFK8b7g7PbbqUJjTw2YVCBqyr7AmgrH8"},
{"content":{"body":"strings can be constructed","m.mentions":{},"msgtype":"m.text"},"ts":1695781651838,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1qECiGwxkAghOS7iEOtkt79xqe2nSH1gGxKlD7koNow"},
{"content":{"body":"from random places","m.mentions":{},"msgtype":"m.text"},"ts":1695781655108,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QL77HPBe_QLJWiSkajYZUWF9F4o_wpSLRgNMteQtltU"},
{"content":{"body":"> <@michaelficarra:matrix.org> yeah just use a string\n\nThen why did we add `Symbol.iterator`? It's just a fancy `__iterator__`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$SbQX7VvyowILFK8b7g7PbbqUJjTw2YVCBqyr7AmgrH8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>yeah just use a string</blockquote></mx-reply>Then why did we add <code>Symbol.iterator</code>? It's just a fancy <code>__iterator__</code>.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SbQX7VvyowILFK8b7g7PbbqUJjTw2YVCBqyr7AmgrH8"}},"msgtype":"m.text"},"ts":1695781657434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2XFnMzXoIE61IeZuk5JX5wemZij5sJsZEGOsEjfwXQU"},
{"content":{"body":"i don't think the domain overlap makes sense","m.mentions":{},"msgtype":"m.text"},"ts":1695781660349,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WQe24i8buIK_xqCvRw8Xamy45TQo4atzm1vNFc5UEH0"},
{"content":{"body":"yeah, I also don't fully understand the use cases of `Symbol.for()`","format":"org.matrix.custom.html","formatted_body":"yeah, I also don't fully understand the use cases of <code>Symbol.for()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695781673860,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$8Nkf6tEVjKYSnJpC3K7ooo1NybSsPSwi2fSGJ1AoCBI"},
{"content":{"body":"snek: that's the same thing as passing the string to Symbol.for...","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: that's the same thing as passing the string to Symbol.for...","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1695781686671,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oD-VSm_tFwtIBlt1XQ7qKBYdM2xGiqJ2zE7XhcEel7g"},
{"content":{"body":"i think a great example is `Symbol.for('nodejs.util.inspect')`","format":"org.matrix.custom.html","formatted_body":"i think a great example is <code>Symbol.for('nodejs.util.inspect')</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695781690914,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k"},
{"content":{"body":"> <@devsnek:matrix.org> what global registry mistake? registered symbols are super useful\n\nthis is the first time I've heard anyone express this opinion - what are they useful for?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KAoI_2GXFOZBQNVXQK8fpbIi515u5PLMTArdI3bhmFY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what global registry mistake? registered symbols are super useful</blockquote></mx-reply>this is the first time I've heard anyone express this opinion - what are they useful for?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KAoI_2GXFOZBQNVXQK8fpbIi515u5PLMTArdI3bhmFY"}},"msgtype":"m.text"},"ts":1695781693968,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VEwaIzjnQWszon7ymwQ7dhaWfNZZKK3_E6vZpC9rcdg"},
{"content":{"body":"what does that do that a string wouldn't do?","m.mentions":{},"msgtype":"m.text"},"ts":1695781704136,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8sgtVuMwFZgxMASZOFdDghD6cbiEyWJtwNG3MQST3bo"},
{"content":{"body":"> <@devsnek:matrix.org> i think a great example is `Symbol.for('nodejs.util.inspect')`\n\nnot sure how that's great; node would work the same if it used a non-global symbol","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think a great example is <code>Symbol.for('nodejs.util.inspect')</code></blockquote></mx-reply>not sure how that's great; node would work the same if it used a non-global symbol","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k"}},"msgtype":"m.text"},"ts":1695781710032,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hMooNzQ0XswteWS2vut9jFS65TGKE0I68eLbQNkuRdc"},
{"content":{"body":"> <@devsnek:matrix.org> i think a great example is `Symbol.for('nodejs.util.inspect')`\n\nu could also use the string directly as key...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think a great example is <code>Symbol.for('nodejs.util.inspect')</code></blockquote></mx-reply>u could also use the string directly as key...","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k"}},"msgtype":"m.text"},"ts":1695781711754,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$dQhf_AxEGBIthiXfWT_yku3mRJlMXjgXAvsm_tgegcg"},
{"content":{"body":"you could use a string","m.mentions":{},"msgtype":"m.text"},"ts":1695781719200,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UxYZXMngZe9orEkKgmeWDSo1h6ConAIz36F9TyD8UN0"},
{"content":{"body":"> <@devsnek:matrix.org> i think a great example is `Symbol.for('nodejs.util.inspect')`\n\n * not sure how that's great; node would work the same if it used a non-global symbol - and in fact it *did* use a non-global one prior to the change to make it global","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sVbBdGP5frew2c9f2uEVwIHRM321fyMZ_3ex7xkpM6k?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think a great example is <code>Symbol.for('nodejs.util.inspect')</code></blockquote></mx-reply> * not sure how that's great; node would work the same if it used a non-global symbol - and in fact it <em>did</em> use a non-global one prior to the change to make it global","m.mentions":{},"m.new_content":{"body":"not sure how that's great; node would work the same if it used a non-global symbol - and in fact it *did* use a non-global one prior to the change to make it global","format":"org.matrix.custom.html","formatted_body":"not sure how that's great; node would work the same if it used a non-global symbol - and in fact it <em>did</em> use a non-global one prior to the change to make it global","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hMooNzQ0XswteWS2vut9jFS65TGKE0I68eLbQNkuRdc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781730534,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PbgF7M_el7Ms9W1gxWVEhSXPGFbI9tRd4IrpEtJUcc8"},
{"content":{"body":"but strings can come from random places","m.mentions":{},"msgtype":"m.text"},"ts":1695781737544,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eU7Q6d0kpCJ8bnOAfyN7nJm5mvluM_MZmuB2yYfX520"},
{"content":{"body":"so can global symbols","m.mentions":{},"msgtype":"m.text"},"ts":1695781745418,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t8MWO8UHE0RMTZnWp2Z2KIzcCFVgFzI-J_XmCriMHaM"},
{"content":{"body":"you could end up with that object by accident or maliciously ","m.mentions":{},"msgtype":"m.text"},"ts":1695781747955,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gOfIObtfpCbGN5w6qF5ppkA74dMTJyOkOHXGQjt3R98"},
{"content":{"body":"same with global symbols","m.mentions":{},"msgtype":"m.text"},"ts":1695781754406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b_z7lmLUAws3NkUGSBw7BgRtuiPSH5_B2oxAfgrZDSo"},
{"content":{"body":"say something that you can't say about strings","m.mentions":{},"msgtype":"m.text"},"ts":1695781760137,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cXGOAup4lZ8nGgACUC2EgJH9klXMtPiLOyk5WmsmP6I"},
{"content":{"body":"no, you have to choose to invoke Symbol.for on some random string","m.mentions":{},"msgtype":"m.text"},"ts":1695781764559,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ciTeD4SMKoZztKlZjgGOr8s4anEB8QdL6YCAU5T0WJg"},
{"content":{"body":"its not the default","m.mentions":{},"msgtype":"m.text"},"ts":1695781774377,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qMr6WdJsxeS2pKyti05TblRsdQwFz6TUVrj83iKCaaI"},
{"content":{"body":"maybe less likely by accident but equally likely by malice?","m.mentions":{},"msgtype":"m.text"},"ts":1695781777443,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o3ewTKGMU887JhLNffutSBxkHRJ8WFaB6p4XTe0k4j8"},
{"content":{"body":"To be honest , global symbol might be a little bit safer than string, but just a very little...","m.mentions":{},"msgtype":"m.text"},"ts":1695781790980,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$6KhIfq7Zutehi6dDZv1Ik8Rd7f2H8Ym52Jafud2MR4k"},
{"content":{"body":"> <@ljharb:matrix.org> same with global symbols\n\nand if you're using a symbol this way, you're deliberately trying to break things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$b_z7lmLUAws3NkUGSBw7BgRtuiPSH5_B2oxAfgrZDSo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />same with global symbols</blockquote></mx-reply>and if you're using a symbol this way, you're deliberately trying to break things","m.relates_to":{"m.in_reply_to":{"event_id":"$b_z7lmLUAws3NkUGSBw7BgRtuiPSH5_B2oxAfgrZDSo"}},"msgtype":"m.text"},"ts":1695781792956,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QAhV-O5CgCYwhlb0NY9JUuRtmqTi9ZKM0V0izd_bMm4"},
{"content":{"body":"*using* some random string is pretty unlikely too, especially that java package style node uses","format":"org.matrix.custom.html","formatted_body":"<em>using</em> some random string is pretty unlikely too, especially that java package style node uses","m.mentions":{},"msgtype":"m.text"},"ts":1695781796436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3-fEVcvLbBwSMyaAbb75VVkVs8eNZ_mTu11h0d9t_Gk"},
{"content":{"body":"I dunno, I randomly call Symbol.for on things all the time, just in case","m.mentions":{},"msgtype":"m.text"},"ts":1695781802762,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_A95dw5Vymg8OyCtrOaPmdx0Zp0Jwp9Hg5OmiQcxnv0"},
{"content":{"body":"...i don't understand what could possibly be gross about a depth. It's just a shorthand for .flat().flat().flat()...","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$i-BSRVb0tP6shnU-XprYOgWnrgPkb3aZzVjvMljtrQs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781844046,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4GVVQbDnKVD5Cc8z50jCZ8cR_4GtB3Gm1tOtOv3vI-E"},
{"content":{"body":"this is very amusing because I always thought there was secretly a good reason why Symbol.for is a thing and I simply never needed to know it","m.mentions":{},"msgtype":"m.text"},"ts":1695781847096,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$lHTT-jbmCiMv_Xw_IcBWQRIckfE5j0gM8pWErkChR5Q"},
{"content":{"body":"There have been several attempts to use the origin trial, which is currently data only, to adopt shared structs in existing projects. The feedback has been the same: Without the ability to attach behavior requires a complete rewrite of the project, including the public API, which is a burden that we would rather not enforce on the project maintainers, nor their consumers. That makes the feature unusable for projects that would sorely benefit from the capability.","m.mentions":{},"msgtype":"m.text"},"ts":1695781856427,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zGnfcY-2sXsRMwhi9_OV1_Nu8CZPBbZjHjVAeSA7PJg"},
{"content":{"body":"i am surprised to hear that people don't like symbol.for","m.mentions":{},"msgtype":"m.text"},"ts":1695781859375,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2cW6ib5gnoeNNrZZRecaqrvyDeg-sE61jd1jjY6g6f0"},
{"content":{"body":"And personally, I use `.flat(Infinity)` more than any other value. ^_^","format":"org.matrix.custom.html","formatted_body":"And personally, I use <code>.flat(Infinity)</code> more than any other value. ^_^","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$4GVVQbDnKVD5Cc8z50jCZ8cR_4GtB3Gm1tOtOv3vI-E"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695781862838,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$2Ej7FDR5i_yF-g6RuBnkEu1To-atX1gU9GGPkn2DzmU"},
{"content":{"body":"its definitely rare use cases but i think its well motivated at least","m.mentions":{},"msgtype":"m.text"},"ts":1695781873415,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$U7lA0AWird0SMwA3Apo6oi_wEqrnxcE7v6m198sTv6w"},
{"content":{"body":" * There have been several attempts to use the origin trial, which is currently data only, to adopt shared structs in existing projects. The feedback has been the same: Without the ability to attach behavior, shared structs require a complete rewrite of the project, including the public API, which is a burden that we would rather not enforce on the project maintainers, nor their consumers. That makes the feature unusable for projects that would sorely benefit from the capability.","m.mentions":{},"m.new_content":{"body":"There have been several attempts to use the origin trial, which is currently data only, to adopt shared structs in existing projects. The feedback has been the same: Without the ability to attach behavior, shared structs require a complete rewrite of the project, including the public API, which is a burden that we would rather not enforce on the project maintainers, nor their consumers. That makes the feature unusable for projects that would sorely benefit from the capability.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zGnfcY-2sXsRMwhi9_OV1_Nu8CZPBbZjHjVAeSA7PJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695781877128,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Io9BixuGTwV0M7gZJDmYa9cfVo6pbdx00WQT2RqFYZ8"},
{"content":{"body":"> <@rbuckton:matrix.org> There have been several attempts to use the origin trial, which is currently data only, to adopt shared structs in existing projects. The feedback has been the same: Without the ability to attach behavior, shared structs require a complete rewrite of the project, including the public API, which is a burden that we would rather not enforce on the project maintainers, nor their consumers. That makes the feature unusable for projects that would sorely benefit from the capability.\n\nwhat is the difference between `thing = wrap(struct)` and `Object.setPrototypeOf(struct, ...)`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zGnfcY-2sXsRMwhi9_OV1_Nu8CZPBbZjHjVAeSA7PJg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>There have been several attempts to use the origin trial, which is currently data only, to adopt shared structs in existing projects. The feedback has been the same: Without the ability to attach behavior, shared structs require a complete rewrite of the project, including the public API, which is a burden that we would rather not enforce on the project maintainers, nor their consumers. That makes the feature unusable for projects that would sorely benefit from the capability.</blockquote></mx-reply>what is the difference between <code>thing = wrap(struct)</code> and <code>Object.setPrototypeOf(struct, ...)</code>?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zGnfcY-2sXsRMwhi9_OV1_Nu8CZPBbZjHjVAeSA7PJg"}},"msgtype":"m.text"},"ts":1695781947740,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3TL0lTxPacMdfdvAT6IhfPNMDr7yoiWPnPQnB2cP1Mw"},
{"content":{"body":"> <@devsnek:matrix.org> what is the difference between `thing = wrap(struct)` and `Object.setPrototypeOf(struct, ...)`?\n\nPerformance and memory consumption.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3TL0lTxPacMdfdvAT6IhfPNMDr7yoiWPnPQnB2cP1Mw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what is the difference between <code>thing = wrap(struct)</code> and <code>Object.setPrototypeOf(struct, ...)</code>?</blockquote></mx-reply>Performance and memory consumption.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3TL0lTxPacMdfdvAT6IhfPNMDr7yoiWPnPQnB2cP1Mw"}},"msgtype":"m.text"},"ts":1695781962547,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-MF7WxtdXOzolKEcF7zHrYGSp9A-fgyPs55TUjZSco4"},
{"content":{"body":"In TypeScript, If you have a large AST, you either double your memory consumption for the AST, or redirect through accessors which is slower.","m.mentions":{},"msgtype":"m.text"},"ts":1695782003519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1E6EfGimnW3V9UjqNVPmTIBkhhC8vUaSGc32OZwNh9g"},
{"content":{"body":"you want the entire AST to be shared structs?","m.mentions":{},"msgtype":"m.text"},"ts":1695782027007,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE"},
{"content":{"body":"even in languages with proper thread apis and such i would never want to do that","m.mentions":{},"msgtype":"m.text"},"ts":1695782049386,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$om11l-ze2cqO56hXCkUrIt6bxd8_DC1gTsHy0sbeAI8"},
{"content":{"body":"> <@devsnek:matrix.org> you want the entire AST to be shared structs?\n\nThat's how I would see us using this proposal in Babel too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>you want the entire AST to be shared structs?</blockquote></mx-reply>That's how I would see us using this proposal in Babel too","m.relates_to":{"m.in_reply_to":{"event_id":"$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE"}},"msgtype":"m.text"},"ts":1695782051167,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_O9soWe8UH4lvCKMSIxXdQLkoDpyG48eIH7GbqI_-Og"},
{"content":{"body":"> <@devsnek:matrix.org> you want the entire AST to be shared structs?\n\nYes. That is what I'm doing right now to parallelize parse in an experiment.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>you want the entire AST to be shared structs?</blockquote></mx-reply>Yes. That is what I'm doing right now to parallelize parse in an experiment.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE"}},"msgtype":"m.text"},"ts":1695782057323,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a-175MJeCqJuPrn44A5hRgNPJcMOdvYbP-HYFiWtClU"},
{"content":{"body":"> <@devsnek:matrix.org> you want the entire AST to be shared structs?\n\n * Yes. That is what I'm doing right now to parallelize the TypeScript parser in an experiment.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ebk0k3ZKRyEHK_mDrOJk4GwhktglkuL31HTQwOO6KtE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>you want the entire AST to be shared structs?</blockquote></mx-reply> * Yes. That is what I'm doing right now to parallelize the TypeScript parser in an experiment.","m.mentions":{},"m.new_content":{"body":"Yes. That is what I'm doing right now to parallelize the TypeScript parser in an experiment.","format":"org.matrix.custom.html","formatted_body":"Yes. That is what I'm doing right now to parallelize the TypeScript parser in an experiment.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$a-175MJeCqJuPrn44A5hRgNPJcMOdvYbP-HYFiWtClU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695782101750,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZkXQHMg71ZB_YRG7Qv7UGNblGNfIQ_JjZbNOkg-7dh8"},
{"content":{"body":"And we could parallelize transform by having locks on subtrees","msgtype":"m.text"},"ts":1695782101781,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ToNS8z_m8f_6Ol4ZmEDzGNBbHvTv4hPzCH4G0SHP60M"},
{"content":{"body":"have you looked into how projects like rslint work","m.mentions":{},"msgtype":"m.text"},"ts":1695782128274,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$N89rxIu6Dd9cGpGpwhUNPbQi8GkncqtaNgKOZbb7hGU"},
{"content":{"body":"I could also parallelize emit, so I'd prefer to use the same AST everywhere.","m.mentions":{},"msgtype":"m.text"},"ts":1695782136642,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$haK68eFLwvn06BXwaAhTBcNX99okIsELAJDZA7ZdyJ8"},
{"content":{"body":"Does rslint operate on a file on a time, or does it require whole program knowledge?","m.mentions":{},"msgtype":"m.text"},"ts":1695782203400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Frsk_gF-8relo3hldLJY7OpDJ3RfAuoZF80mHVrG-tw"},
{"content":{"body":"i'm not sure if it does whole program but i was more talking about how it operates on a shared AST","m.mentions":{},"msgtype":"m.text"},"ts":1695782230954,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0yyvzZczznOBCQMwB70cNz0FmFvhYQSyEvjK4mpYev4"},
{"content":{"body":" * i'm not sure if it does whole program but i was more talking about how it operates on a shared AST in parallel","m.mentions":{},"m.new_content":{"body":"i'm not sure if it does whole program but i was more talking about how it operates on a shared AST in parallel","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0yyvzZczznOBCQMwB70cNz0FmFvhYQSyEvjK4mpYev4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695782234226,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xMxidN5BPMHK89_6x6xGGcJkR7tnLqoMrw8cNnucYJo"},
{"content":{"body":"TabAtkins: an infinitely-nested iterator will not be able to yield anything","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: an infinitely-nested iterator will not be able to yield anything","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$2Ej7FDR5i_yF-g6RuBnkEu1To-atX1gU9GGPkn2DzmU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782246296,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pU_W_72N9XObjyps5KQNmgO5Atc805UkDAfuYhfXpJo"},
{"content":{"body":"I am not familiar with the internals of rslint.","m.mentions":{},"msgtype":"m.text"},"ts":1695782281057,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qfwXHl89ZAA8T6fCUhfY2XaXVDiJwIVf2tF8M7MP-BU"},
{"content":{"body":"Yeah and mapping over an infinite iterator will infinite loop too. Is this something that's easy to hit by accident?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$pU_W_72N9XObjyps5KQNmgO5Atc805UkDAfuYhfXpJo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782284332,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$5VROiylEw1ETFUTESqmGD1jpmR1LTbYuh1wrWbv7B3M"},
{"content":{"body":"it might be good to look at how projects which operate on a \"shared ast\" as a concept work in other languages","m.mentions":{},"msgtype":"m.text"},"ts":1695782297557,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nNMLkmr5sWvoOeMpPBWjx6z8A_CLUy5FRyTlrfQXCz0"},
{"content":{"body":"basically nobody uses infinite iterators, that's just not a problem that happens","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$5VROiylEw1ETFUTESqmGD1jpmR1LTbYuh1wrWbv7B3M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782306358,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gb0c5Rj6oF48eF73iWPzlAODO0qRZuZt5P8UVvbtw7w"},
{"content":{"body":"rslint is one example, but there are lots","m.mentions":{},"msgtype":"m.text"},"ts":1695782310867,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VYyEcFPejWaNnJBZXL9GwX5b8YXkCx0N55vKCKDBGUw"},
{"content":{"body":"anyway i suspect i will end up losing this argument, i don't have the energy to care about typescript internals more than you","m.mentions":{},"msgtype":"m.text"},"ts":1695782332798,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UT865PPncUrlvXCg73hS1yI3PWCNiQ_ytel73QGNHqY"},
{"content":{"body":"JS inability to paralellize and share memory is the main reason we didn't use it for Turbobpack.","msgtype":"m.text"},"ts":1695782446711,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$H_GxlsVrpguzWEi-jxPvWtps1wfaCqXsBOH9992CTmM"},
{"content":{"body":"I find the idea of _\"having non-byte stuff shared\"_ , quite easy to grasp, that this _\"should work with functions\"_ as well (bcause it is JS), seems no to be so far-fetched. Question is, whether this is really doable, not so much to me, whether someone would use it.","format":"org.matrix.custom.html","formatted_body":"I find the idea of <em>\"having non-byte stuff shared\"</em> , quite easy to grasp, that this <em>\"should work with functions\"</em> as well (bcause it is JS), seems no to be so far-fetched. Question is, whether this is really doable, not so much to me, whether someone would use it.","m.mentions":{},"msgtype":"m.text"},"ts":1695782459335,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$5-ogg0ySUXHoVhPboCwh5xjZkrzKFSekA41OXSmXcQQ"},
{"content":{"body":"We have proper sharing in Rust, but we don't access the same AST in parallel, only split the parsing/transforming between threads","msgtype":"m.text"},"ts":1695782494767,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ls-EQMBtbp1hz2R6nQEd4jtlwBmGajobYvf7QfBbn3M"},
{"content":{"body":"if we just have shared functions of some form, we don't need the prototype hacks","m.mentions":{},"msgtype":"m.text"},"ts":1695782497920,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$13DGrIBE_tFaUggw7xsmfl56R65SI6N3ZwqbXRoJN-E"},
{"content":{"body":"So you're saying that when this goes to Stage 4, Turbopack can get rewritten in JS?","msgtype":"m.text"},"ts":1695782503537,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$refou0lSGlyFkVUe-Yyss2LuGHUejLhtDo1HLqziZ60"},
{"content":{"body":"aaaaaanyway this is why I would not recommend trying to move forward with `.flat`","format":"org.matrix.custom.html","formatted_body":"aaaaaanyway this is why I would not recommend trying to move forward with <code>.flat</code>","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$gb0c5Rj6oF48eF73iWPzlAODO0qRZuZt5P8UVvbtw7w"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782510382,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j9BwxTsL6Bz-ERjYtxc2hdFehsaAxupfeFVUBQh2_J0"},
{"content":{"body":"No, Rust offers us a lot more, but this was the non-starter for TS","msgtype":"m.text"},"ts":1695782534427,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$apQRit6sw2k9Ri9kVdWLQb1Q8Xatmt6_4dXiSxgsVIU"},
{"content":{"body":"Rust macros are magic ✨","msgtype":"m.text"},"ts":1695782558229,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yaG3dK-Pwc-F8E5yR0jbKRrhCacKhPrqE-Ub_vmLf0k"},
{"content":{"body":"TabAtkins: mapping over an infinite iterator works fine, it does not infinite loop","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: mapping over an infinite iterator works fine, it does not infinite loop","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$j9BwxTsL6Bz-ERjYtxc2hdFehsaAxupfeFVUBQh2_J0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782576772,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uC06raOWF4HEqf5WJCPzVpfkOlxs-ZuydcA6bXDqzTM"},
{"content":{"body":"So you say, if we have macros in JS, that turbopack... ah sorry","m.mentions":{},"msgtype":"m.text"},"ts":1695782592729,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$Ul-txzGBJ_Nz248mOsPs63vYNYz4H0Bfm4qJF2uRtt8"},
{"content":{"body":"also people *do* use infinite iterators ljharb ","format":"org.matrix.custom.html","formatted_body":"also people <em>do</em> use infinite iterators <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$uC06raOWF4HEqf5WJCPzVpfkOlxs-ZuydcA6bXDqzTM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782593123,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5l8JbO6bXRiY9B5WXBX8HewaNQp3laUFUFVTlS7JK2U"},
{"content":{"body":"`for of` over an infinite iterator will infinite loop","format":"org.matrix.custom.html","formatted_body":"<code>for of</code> over an infinite iterator will infinite loop","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$5l8JbO6bXRiY9B5WXBX8HewaNQp3laUFUFVTlS7JK2U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782594666,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$urqABDNSWC1hDEhuA2uBnTpoD-fLvDndIF78MK3fJt4"},
{"content":{"body":"yeah, that's what i meant","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$urqABDNSWC1hDEhuA2uBnTpoD-fLvDndIF78MK3fJt4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782601447,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$-EbkuPEgvrzTD3Diq2HAGII6QQAqhJZTDPslDuKGV0U"},
{"content":{"body":"and infinite iterators are way more common than infinitely _nested_ iterators","format":"org.matrix.custom.html","formatted_body":"and infinite iterators are way more common than infinitely <em>nested</em> iterators","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$urqABDNSWC1hDEhuA2uBnTpoD-fLvDndIF78MK3fJt4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782601977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qhtdxZ2NRP9lAdl9Yzm_BcFZr7CYKf6rfQNSOOe7upk"},
{"content":{"body":"exhausting it","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$qhtdxZ2NRP9lAdl9Yzm_BcFZr7CYKf6rfQNSOOe7upk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782604830,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EnWsA_nbVLYi3n70PUdzY5U1JmR0Fi1t5vdDBMrZkW0"},
{"content":{"body":"infinitely nested iterators just don't exist at all, period","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$EnWsA_nbVLYi3n70PUdzY5U1JmR0Fi1t5vdDBMrZkW0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782627756,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KYzaRAQh74kj2Tttww47gf55eayewswIHqSyg_qoSSQ"},
{"content":{"body":"I mean. Strings.","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$KYzaRAQh74kj2Tttww47gf55eayewswIHqSyg_qoSSQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782638623,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$STp-VFaW_7026vjgYoDKw8u8UKLs8Weaz1IbzAArlRw"},
{"content":{"body":"there is no (useful) code that would construct them","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$KYzaRAQh74kj2Tttww47gf55eayewswIHqSyg_qoSSQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782639615,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TLWkLoNtTJTXOTk9iKrRM8RpMM0oGeC3VIyyfeYQX-k"},
{"content":{"body":"Because we fucked up.","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$TLWkLoNtTJTXOTk9iKrRM8RpMM0oGeC3VIyyfeYQX-k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782652541,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JovZ4bCx4ArnVZmdB8OnJakW6Ors-wSHKj6Ix4aqIXg"},
{"content":{"body":"> <@jridgewell:matrix.org> Rust macros are magic ✨\n\nThere is also TS macros ( https://github.com/GoogleFeud/ts-macros ),maybe not very magic 😅","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yaG3dK-Pwc-F8E5yR0jbKRrhCacKhPrqE-Ub_vmLf0k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Rust macros are magic ✨</blockquote></mx-reply>There is also TS macros ( https://github.com/GoogleFeud/ts-macros ),maybe not very magic 😅","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yaG3dK-Pwc-F8E5yR0jbKRrhCacKhPrqE-Ub_vmLf0k"}},"msgtype":"m.text"},"ts":1695782658349,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$ctiY6pxXfQNm29gfoNqKqAkjrNYBlPtNUdlVe0jYBh0"},
{"content":{"body":"strings at least would not be a problem here","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$JovZ4bCx4ArnVZmdB8OnJakW6Ors-wSHKj6Ix4aqIXg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782681738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fLWavR88WXpZnc2ZNCQn-NTotKqJleUe1QmvveSOwwI"},
{"content":{"body":"> <@devsnek:matrix.org> if we just have shared functions of some form, we don't need the prototype hacks\n\nLooking at rslint, it looks like they start up a bunch of threads, parse in parallel, and then transmit the files back. Does `std::sync::mpsc::channel` clone the sent data, or does it reuse the same memory?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$13DGrIBE_tFaUggw7xsmfl56R65SI6N3ZwqbXRoJN-E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>if we just have shared functions of some form, we don&#39;t need the prototype hacks</blockquote></mx-reply>Looking at rslint, it looks like they start up a bunch of threads, parse in parallel, and then transmit the files back. Does <code>std::sync::mpsc::channel</code> clone the sent data, or does it reuse the same memory?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$13DGrIBE_tFaUggw7xsmfl56R65SI6N3ZwqbXRoJN-E"}},"msgtype":"m.text"},"ts":1695782691845,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qbh3g1aJKnpGendmGXkmnCBS1fKQgthcvRgXQX_XDFE"},
{"content":{"body":"> <@michaelficarra:matrix.org> infinitely nested iterators just don't exist at all, period\n\nyou:\n\n> an infinitely-nested iterator will not be able to yield anything\n\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KYzaRAQh74kj2Tttww47gf55eayewswIHqSyg_qoSSQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>infinitely nested iterators just don&#39;t exist at all, period</blockquote></mx-reply><p>you:</p>\n<blockquote>\n<p>an infinitely-nested iterator will not be able to yield anything</p>\n</blockquote>\n","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":false,"m.in_reply_to":{"event_id":"$KYzaRAQh74kj2Tttww47gf55eayewswIHqSyg_qoSSQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782693068,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IDpzU4ZHpse1F3WzfYvhCpaGZTHJCtK3Q_BYQz2uXpw"},
{"content":{"body":"if they don't exist, then `.flat(Infinity)` is not at problem","format":"org.matrix.custom.html","formatted_body":"if they don't exist, then <code>.flat(Infinity)</code> is not at problem","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$IDpzU4ZHpse1F3WzfYvhCpaGZTHJCtK3Q_BYQz2uXpw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782703543,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$knfhdIk5SfQk_9IY9dzJf4U_g7qyeDqJAFEh71hzu74"},
{"content":{"body":"I'm not that familiar with the Rust API","m.mentions":{},"msgtype":"m.text"},"ts":1695782708783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zxXFEU_JBYsdYJogciYnACsCe4IRR1kiwvUfrO31RK4"},
{"content":{"body":"Outside of strings, infinitely nested iterators are indeed virtually never a thing.","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$knfhdIk5SfQk_9IY9dzJf4U_g7qyeDqJAFEh71hzu74"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782709865,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0UtZHoHCKE-O81l1G3Pes9CT996RmJrELwxdrC76yoM"},
{"content":{"body":"depends on what you're sending through it","m.mentions":{},"msgtype":"m.text"},"ts":1695782716008,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qf3AQz3EldAgSzucE_oejnNYwqsbD4bGPlIU-WxXygg"},
{"content":{"body":"also they're iterable not iterator, so `.flat(Infinity)` on them wouldn't infinitely recurse","format":"org.matrix.custom.html","formatted_body":"also they're iterable not iterator, so <code>.flat(Infinity)</code> on them wouldn't infinitely recurse","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$0UtZHoHCKE-O81l1G3Pes9CT996RmJrELwxdrC76yoM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782720836,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$lIcBIOikG58sC19mHoOcCp0yoQSzmqlXgj3wzhvCgfA"},
{"content":{"body":"So yeah, I'm also confused why they're an objection to flat(Infinity)","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$lIcBIOikG58sC19mHoOcCp0yoQSzmqlXgj3wzhvCgfA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782726231,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EBK4_RoImZw-0FXVNIf3JpSWMlPJ0pxczBYECW1O0_U"},
{"content":{"body":"> <@bakkot:matrix.org> if they don't exist, then `.flat(Infinity)` is not at problem\n\nit also has no reason to exist","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$knfhdIk5SfQk_9IY9dzJf4U_g7qyeDqJAFEh71hzu74?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if they don't exist, then <code>.flat(Infinity)</code> is not at problem</blockquote></mx-reply>it also has no reason to exist","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":false,"m.in_reply_to":{"event_id":"$knfhdIk5SfQk_9IY9dzJf4U_g7qyeDqJAFEh71hzu74"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782736766,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$EjDiISUOdKB1uJgbdOt8RsiFN9-05AEZj7PjBA50Wg8"},
{"content":{"body":"`.flat` would certainly also work on iterables, like `flatMap` does?","format":"org.matrix.custom.html","formatted_body":"<code>.flat</code> would certainly also work on iterables, like <code>flatMap</code> does?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$EjDiISUOdKB1uJgbdOt8RsiFN9-05AEZj7PjBA50Wg8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782741907,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fWw0aIKIu92pZNNq3ft1v-24bsOfsRI2EK5n9Av77Ec"},
{"content":{"body":"mpsc is \"single consumer\" so in most cases it is a move operation","m.mentions":{},"msgtype":"m.text"},"ts":1695782752232,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TVWnRBqXE5CfkqVDaEfu5p2KJ4n8HLJTTjGi0UFuYyA"},
{"content":{"body":" * mpsc is \"single consumer\" so in most cases it is a move operation (reuses the same memory)","m.mentions":{},"m.new_content":{"body":"mpsc is \"single consumer\" so in most cases it is a move operation (reuses the same memory)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TVWnRBqXE5CfkqVDaEfu5p2KJ4n8HLJTTjGi0UFuYyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695782770970,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j3Z4IMkEz6A4NqunEwTebQ-f-7yIg5yDDqdw3ByklWU"},
{"content":{"body":"bakkot: except strings lol","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: except strings lol","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$fWw0aIKIu92pZNNq3ft1v-24bsOfsRI2EK5n9Av77Ec"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782780562,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NAYX5t4_5BSyUUInBTclRzewnUUxVboSXx5QZ7XZnHk"},
{"content":{"body":"except strings, yes","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$NAYX5t4_5BSyUUInBTclRzewnUUxVboSXx5QZ7XZnHk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782792344,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wSGsc7H1o814ISYF5CR0bHXVdFT_bSIgpyi7858SJU8"},
{"content":{"body":"everyone agrees on that","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$wSGsc7H1o814ISYF5CR0bHXVdFT_bSIgpyi7858SJU8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782795365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SAniYLL1ySuZJunai5VqQxtNN6WHUCPvmm36QgcftLc"},
{"content":{"body":"Why do you think it has no reason to exist? You seem to dislike infinite flat on arrays too, while I use that more than anything else, so maybe this is a mismatch in expectations?","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$SAniYLL1ySuZJunai5VqQxtNN6WHUCPvmm36QgcftLc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782808341,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Pu_a82p_Hr2CpbJK36pHcdfzIbAvATs1iRgx8A6CYFQ"},
{"content":{"body":"The issue with using module blocks is that it means the worker has no access to the struct declarations until after they are received from the originating thread, which complicates startup.","m.mentions":{},"msgtype":"m.text"},"ts":1695782818596,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$prF6QHKrGYsfO0uG4zM3vJvpneceJgBTR_0geKcrGtQ"},
{"content":{"body":"TabAtkins: infinitely-nested arrays don't exist because you can't even construct them","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: infinitely-nested arrays don't exist because you can't even construct them","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Pu_a82p_Hr2CpbJK36pHcdfzIbAvATs1iRgx8A6CYFQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782833041,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Rye37rmV6u2QBqMugkWjCSkYCJX-XlEX1Z9-YkPLgjI"},
{"content":{"body":"i would love if we had sharable funclets or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1695782836555,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Dfworw74_fSAog37NJG-q2UZmksKSMp6T-yUN-tpqTY"},
{"content":{"body":"we can just revive domenic's proposal","m.mentions":{},"msgtype":"m.text"},"ts":1695782843724,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IYFGD3baswcudMlgsT37ogd2qOnD5FWGqsCuu8jt7wY"},
{"content":{"body":"Sure. But *indefinitely* nested ones do, and that's what I mean by Infinity.","format":"org.matrix.custom.html","formatted_body":"Sure. But <em>indefinitely</em> nested ones do, and that's what I mean by Infinity.","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$Rye37rmV6u2QBqMugkWjCSkYCJX-XlEX1Z9-YkPLgjI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782852884,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$phlncNfMHK978-k6COXNp4suAIN9hWrx8hC9FbTZDyE"},
{"content":{"body":"at least you can construct an infinitely-nested iterator, even if you could never iterate it","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$phlncNfMHK978-k6COXNp4suAIN9hWrx8hC9FbTZDyE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782855357,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hTSUCpZRgjqqUhon9K-UjgAdOv7JolFa6IFsvAY6kC0"},
{"content":{"body":"sure you can construct them. `const a = []; a.push(a)`","format":"org.matrix.custom.html","formatted_body":"sure you can construct them. <code>const a = []; a.push(a)</code>","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$hTSUCpZRgjqqUhon9K-UjgAdOv7JolFa6IFsvAY6kC0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782865049,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GY4PutIBXDBKFbp7Qz8Xij2BdYqqgs3h0PjF86fBOqE"},
{"content":{"body":"lol indeed","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$GY4PutIBXDBKFbp7Qz8Xij2BdYqqgs3h0PjF86fBOqE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782874460,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$u08IgQaRDZSbLcivQhbkngh26GFT435yDG_Q7G-ChrM"},
{"content":{"body":"people do *that* a bunch, actually, with objects too, which is why there's npm packages to handle describing or serializing them","format":"org.matrix.custom.html","formatted_body":"people do <em>that</em> a bunch, actually, with objects too, which is why there's npm packages to handle describing or serializing them","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$u08IgQaRDZSbLcivQhbkngh26GFT435yDG_Q7G-ChrM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782895221,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8AO0HW0eI-LgIJboggKGARK_towio5iLmKbgfFKjWQk"},
{"content":{"body":"blöcks","m.mentions":{},"msgtype":"m.text"},"ts":1695782910626,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lRBx7I9lUv2NF5lT6uFySVk1XL51G0f-5Lhl9XeGG0w"},
{"content":{"body":"> <@rbuckton:matrix.org> The issue with using module blocks is that it means the worker has no access to the struct declarations until after they are received from the originating thread, which complicates startup.\n\nthe DX for that order is terrible. If I want to use a `Point` in a module in my worker, I can't import it. I have to receive the constructor as an argument.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$prF6QHKrGYsfO0uG4zM3vJvpneceJgBTR_0geKcrGtQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The issue with using module blocks is that it means the worker has no access to the struct declarations until after they are received from the originating thread, which complicates startup.</blockquote></mx-reply>the DX for that order is terrible. If I want to use a <code>Point</code> in a module in my worker, I can't import it. I have to receive the constructor as an argument.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$prF6QHKrGYsfO0uG4zM3vJvpneceJgBTR_0geKcrGtQ"}},"msgtype":"m.text"},"ts":1695782911820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r0kiJ0JC32bF5RxHJf3cguvrqM0bXAjFPlGKZ7VBwsU"},
{"content":{"body":"(but nobody would be iterating over those, i expect)","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$8AO0HW0eI-LgIJboggKGARK_towio5iLmKbgfFKjWQk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695782915130,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$duLx5sptusUcvf3-bWp8S8JibKpfg6C42FZYizcRY0o"},
{"content":{"body":"yeah blöcks","m.mentions":{},"msgtype":"m.text"},"ts":1695782919709,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$P5-vj-NJlpVgGkwZCMoJEYCtsT_W6HP_XRjR2GgoT9w"},
{"content":{"body":"How does source location work with eval?","msgtype":"m.text"},"ts":1695782929190,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$9l6D4AXSDpDy8VPbXHTgxLNjNUVkqL38sULVIW-dLJo"},
{"content":{"body":"source location won't work","m.mentions":{},"msgtype":"m.text"},"ts":1695782941149,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qPoqx9lXEGK6CsVz7FhGMw4uwcu0SUKePnpb_xbLEvk"},
{"content":{"body":"that has to change","m.mentions":{},"msgtype":"m.text"},"ts":1695782943092,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pCbHqIZDVun9mVvW3W5UGxBBvw8yOeUQ9gcP3nBUh7I"},
{"content":{"body":"> <@waldemarh:matrix.org> How does source location work with eval?\n\nIt breaks","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9l6D4AXSDpDy8VPbXHTgxLNjNUVkqL38sULVIW-dLJo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>How does source location work with eval?</blockquote></mx-reply>It breaks","m.relates_to":{"m.in_reply_to":{"event_id":"$9l6D4AXSDpDy8VPbXHTgxLNjNUVkqL38sULVIW-dLJo"}},"msgtype":"m.text"},"ts":1695782943989,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aj6PN7BhLvot5-Xqo8ka9BOqW3aIdjSWWQ88p8Uj8W8"},
{"content":{"body":"otherwise you can't use bundlers","m.mentions":{},"msgtype":"m.text"},"ts":1695782946817,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$78Ila2AojpHMPYtqN0iCFc0Cy2j11a6SHAfDvSD2s8Q"},
{"content":{"body":"> <@waldemarh:matrix.org> How does source location work with eval?\n\nit does not I believe ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9l6D4AXSDpDy8VPbXHTgxLNjNUVkqL38sULVIW-dLJo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br />How does source location work with eval?</blockquote></mx-reply>it does not I believe","m.relates_to":{"m.in_reply_to":{"event_id":"$9l6D4AXSDpDy8VPbXHTgxLNjNUVkqL38sULVIW-dLJo"}},"msgtype":"m.text"},"ts":1695782950543,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ypoatOSyy81lnkcUMpdcIis15VC1bgkfnY870DS-I_8"},
{"content":{"body":"but eval has a inferred address right? like \"vm:123\"","msgtype":"m.text"},"ts":1695782980827,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UvJb_HjMNLy8NqVl_K5ffmE1eCrZLXWUpq9PUAklZfY"},
{"content":{"body":"that is also some kind of source text identity ","msgtype":"m.text"},"ts":1695782990956,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Gti4bpJ6n1i51bHCZHLKVBYouiDOKxViMGARGO4tCOc"},
{"content":{"body":"And calling `.flat(Infinity)` on that array just stack overflows immediately. That's fine.","format":"org.matrix.custom.html","formatted_body":"And calling <code>.flat(Infinity)</code> on that array just stack overflows immediately. That's fine.","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$duLx5sptusUcvf3-bWp8S8JibKpfg6C42FZYizcRY0o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783014497,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MVIDm4kCCUMZVqSYxA9tRl9f2AEKU13XT1k7qJqlddo"},
{"content":{"body":"Every `eval` call generates a new source location","format":"org.matrix.custom.html","formatted_body":"Every <code>eval</code> call generates a new source location","msgtype":"m.text"},"ts":1695783021581,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$JvTTf5pPg4HLdp5H3QHNpJYECJ1ZHvJSbgso6675mbw"},
{"content":{"body":"As if they were different files","msgtype":"m.text"},"ts":1695783026803,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aygx4_JRxL_Vz8eehlIHl4Zw9GJezzuBUH9D6G1oo7U"},
{"content":{"body":"Regarding the source location thing, I had also been working on a mechanism that didn't depend on source location, but a correlation step on the worker thread to do setup to associate a foreign struct with a local prototype. The downside to this approach is that it results in multiple \"maps\" that affect ICs and require fixup.","m.mentions":{},"msgtype":"m.text"},"ts":1695783027812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iQAAt8rQIb8BzTNfK-aPLsWqxCYevCr_JbnXcK_e5pk"},
{"content":{"body":"> people do that a bunch\n\nname them; they do not deserve anonymity","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>people do that a bunch</p>\n</blockquote>\n<p>name them; they do not deserve anonymity</p>\n","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$MVIDm4kCCUMZVqSYxA9tRl9f2AEKU13XT1k7qJqlddo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783054831,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$g-z-1ZNT0HIM0jBudYE9JDhowcobcuvZSRAJrTjg4D0"},
{"content":{"body":"the easiest would just be requiring the registration to use a very qualified name","m.mentions":{},"msgtype":"m.text"},"ts":1695783057343,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hlPOAwi86tAACrNp3Ib7S-wYBAYWV8I-Au--WkMXpm4"},
{"content":{"body":"the DOM","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$g-z-1ZNT0HIM0jBudYE9JDhowcobcuvZSRAJrTjg4D0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783070175,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l9XbT60sQpIIY6aSLPzl_W-zUAPr4WJ-kv4ql6S3fZ0"},
{"content":{"body":"like `struct Foo registered \"snek.library.Foo\" {}`","format":"org.matrix.custom.html","formatted_body":"like <code>struct Foo registered \"snek.library.Foo\" {}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695783073149,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SnB6pzRGVxlHGLICbeKxlMkg5nDjxHuo9k3_ksuz968"},
{"content":{"body":" * the DOM, for objects :-p","format":"org.matrix.custom.html","formatted_body":" * the DOM, for objects :-p","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.new_content":{"body":"the DOM, for objects :-p","format":"org.matrix.custom.html","formatted_body":"the DOM, for objects :-p","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$l9XbT60sQpIIY6aSLPzl_W-zUAPr4WJ-kv4ql6S3fZ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695783075030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SuuwlRAwkxSa7MPPh_yPV7Ly6R3V0EA3mv-NeDymX50"},
{"content":{"body":"com.google.workspace.sheets.myStruct","msgtype":"m.text"},"ts":1695783079620,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$o-6ZkWqL5hXyI27Fr8fXgWbTY2IYijBQOPE3JnYuZrM"},
{"content":{"body":"puttin the java in javascript","m.mentions":{},"msgtype":"m.text"},"ts":1695783087459,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Iegr9loWo8unzhGBS-guiUiNlTE2-ETaTSEYIuzFn1g"},
{"content":{"body":" * like `struct Foo registered \"dev.snek.library.Foo\" {}`","format":"org.matrix.custom.html","formatted_body":" * like <code>struct Foo registered \"dev.snek.library.Foo\" {}</code>","m.mentions":{},"m.new_content":{"body":"like `struct Foo registered \"dev.snek.library.Foo\" {}`","format":"org.matrix.custom.html","formatted_body":"like <code>struct Foo registered \"dev.snek.library.Foo\" {}</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SnB6pzRGVxlHGLICbeKxlMkg5nDjxHuo9k3_ksuz968","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695783092469,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$u9YMtwR8PChJE7VhKpE-jEmRqB8agOSiCJMxEiIUdhk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Every `eval` call generates a new source location\n\nSo the correlation from the presentation won't work with eval'd code.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JvTTf5pPg4HLdp5H3QHNpJYECJ1ZHvJSbgso6675mbw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Every <code>eval</code> call generates a new source location</blockquote></mx-reply>So the correlation from the presentation won't work with eval'd code.","m.relates_to":{"m.in_reply_to":{"event_id":"$JvTTf5pPg4HLdp5H3QHNpJYECJ1ZHvJSbgso6675mbw"}},"msgtype":"m.text"},"ts":1695783094369,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$h7XC_AxlaLfi_yJSM8AXH5z79cwkOSm943TMY9OJk_k"},
{"content":{"body":"> <@devsnek:matrix.org> the easiest would just be requiring the registration to use a very qualified name\n\nWe have also considered that. I suggested it as a mechanism to address the bundling issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hlPOAwi86tAACrNp3Ib7S-wYBAYWV8I-Au--WkMXpm4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>the easiest would just be requiring the registration to use a very qualified name</blockquote></mx-reply>We have also considered that. I suggested it as a mechanism to address the bundling issue.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hlPOAwi86tAACrNp3Ib7S-wYBAYWV8I-Au--WkMXpm4"}},"msgtype":"m.text"},"ts":1695783096068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hAb6wHRc1GuwEtUOyfwATxhLJJ3rx5iI-5ftgwG2RgM"},
{"content":{"body":"yeah, exactly like symbols","m.mentions":{},"msgtype":"m.text"},"ts":1695783097696,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$H6rR4NQn3gMHRzI2FCEVkiqw9ASWgVvJ0YZhmkOM-F4"},
{"content":{"body":"> <@rbuckton:matrix.org> We have also considered that. I suggested it as a mechanism to address the bundling issue.\n\nThe problem is that it's potentially forgeable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hAb6wHRc1GuwEtUOyfwATxhLJJ3rx5iI-5ftgwG2RgM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We have also considered that. I suggested it as a mechanism to address the bundling issue.</blockquote></mx-reply>The problem is that it's potentially forgeable","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hAb6wHRc1GuwEtUOyfwATxhLJJ3rx5iI-5ftgwG2RgM"}},"msgtype":"m.text"},"ts":1695783108888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q_Yxyc0SgJehZaq7DmAK92hcwSJF7vT0nuMvdFWMkuU"},
{"content":{"body":"why is that text red? 🤔","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$l9XbT60sQpIIY6aSLPzl_W-zUAPr4WJ-kv4ql6S3fZ0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783117573,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$aCGD_QFMv5bBNTRFyuFboW679PxUpzu5id8Y1xJD70o"},
{"content":{"body":"> <@rbuckton:matrix.org> We have also considered that. I suggested it as a mechanism to address the bundling issue.\n\nyeah if you have main_thread.js and worker_thread.js, its kind of required i think","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hAb6wHRc1GuwEtUOyfwATxhLJJ3rx5iI-5ftgwG2RgM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We have also considered that. I suggested it as a mechanism to address the bundling issue.</blockquote></mx-reply>yeah if you have main_thread.js and worker_thread.js, its kind of required i think","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hAb6wHRc1GuwEtUOyfwATxhLJJ3rx5iI-5ftgwG2RgM"}},"msgtype":"m.text"},"ts":1695783124065,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$v0m_QVhd-BDP_YyE-v-VrDDwvt-6kZZ7kphIwlAeXBo"},
{"content":{"body":"since those are different source texts","m.mentions":{},"msgtype":"m.text"},"ts":1695783130397,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-v1gOm9FW43wDbrCsR8ypx_0wVRr-Gy51Nvlic09Xac"},
{"content":{"body":"> <@devsnek:matrix.org> yeah, exactly like symbols\n\nThere's a difference. You don't define anything about a symbol except the description.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H6rR4NQn3gMHRzI2FCEVkiqw9ASWgVvJ0YZhmkOM-F4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah, exactly like symbols</blockquote></mx-reply>There's a difference. You don't define anything about a symbol except the description.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$H6rR4NQn3gMHRzI2FCEVkiqw9ASWgVvJ0YZhmkOM-F4"}},"msgtype":"m.text"},"ts":1695783132881,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8lDaFWNio8oh8AxnHeNOVjt0MDewlloncLPszxIdlZU"},
{"content":{"body":"ye the ultimate key in the agent would be the name + the shape ","m.mentions":{},"msgtype":"m.text"},"ts":1695783156770,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$okEiQX7KQwhL0ZV-mV5G_Lzh4TKu2MB2-3gK1YwExIs"},
{"content":{"body":"> <@devsnek:matrix.org> yeah if you have main_thread.js and worker_thread.js, its kind of required i think\n\nNot necessarily, many bundlers support splitting out common code shared between different entrypoints.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$v0m_QVhd-BDP_YyE-v-VrDDwvt-6kZZ7kphIwlAeXBo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah if you have main_thread.js and worker_thread.js, its kind of required i think</blockquote></mx-reply>Not necessarily, many bundlers support splitting out common code shared between different entrypoints.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$v0m_QVhd-BDP_YyE-v-VrDDwvt-6kZZ7kphIwlAeXBo"}},"msgtype":"m.text"},"ts":1695783179358,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n9E32aeMAkCXNddrkSNf21-oxrkEcPV0LYUkAwdBk4M"},
{"content":{"body":"> <@devsnek:matrix.org> ye the ultimate key in the agent would be the name + the shape\n\nThat's interesting.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$okEiQX7KQwhL0ZV-mV5G_Lzh4TKu2MB2-3gK1YwExIs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>ye the ultimate key in the agent would be the name + the shape </blockquote></mx-reply>That's interesting.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$okEiQX7KQwhL0ZV-mV5G_Lzh4TKu2MB2-3gK1YwExIs"}},"msgtype":"m.text"},"ts":1695783221088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a89DgrosOpLypZKX4vOD-pjQwWKCoH6NQpzFPHwlx0E"},
{"content":{"body":"I'm not sure if its still not forgeable and thus usable as a communications channel.","m.mentions":{},"msgtype":"m.text"},"ts":1695783243166,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0lA2e21U1-qA58Lt2rboj81vOKwsnjmpnV3BRp5CN2w"},
{"content":{"body":"it probably contains one of your mention words","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$XsCbkTjvKzS9Zdpv8aC9g-_Nap2YDvtr8CPpbczQYxA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783264851,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CrQpybsbRfbL_Q5SyUMfjU3YeouFMlD24izn51l8SIY"},
{"content":{"body":"> <@waldemarh:matrix.org> So the correlation from the presentation won't work with eval'd code.\n\nYes, it wouldn't","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h7XC_AxlaLfi_yJSM8AXH5z79cwkOSm943TMY9OJk_k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>So the correlation from the presentation won't work with eval'd code.</blockquote></mx-reply>Yes, it wouldn't","m.relates_to":{"m.in_reply_to":{"event_id":"$h7XC_AxlaLfi_yJSM8AXH5z79cwkOSm943TMY9OJk_k"}},"msgtype":"m.text"},"ts":1695783276500,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5RNoTz4QmLDgoe-3iphfQJcSJ_8MP8jsT8nzrFrLkok"},
{"content":{"body":"> <@waldemarh:matrix.org> So the correlation from the presentation won't work with eval'd code.\n\n * Exactlt, it wouldn't","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h7XC_AxlaLfi_yJSM8AXH5z79cwkOSm943TMY9OJk_k?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">@waldemarh:matrix.org</a><br>So the correlation from the presentation won't work with eval'd code.</blockquote></mx-reply> * Exactlt, it wouldn't","m.new_content":{"body":"Exactlt, it wouldn't","format":"org.matrix.custom.html","formatted_body":"Exactlt, it wouldn't","msgtype":"m.text"},"m.relates_to":{"event_id":"$5RNoTz4QmLDgoe-3iphfQJcSJ_8MP8jsT8nzrFrLkok","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695783292216,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$AOfUXSDAZsixWY_6K29w624zz9lHMCFKIb4C2GB6OGg"},
{"content":{"body":"yeah that's another thing, if you use fast dev mode (eval) your project will break lol","m.mentions":{},"msgtype":"m.text"},"ts":1695783297039,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5HcrS6TV9UOzzh3Wj1CSYWxE0QRp-w170PuJ2x3V7eo"},
{"content":{"body":" * Exactly, it wouldn't","format":"org.matrix.custom.html","formatted_body":" * Exactly, it wouldn't","m.new_content":{"body":"Exactly, it wouldn't","format":"org.matrix.custom.html","formatted_body":"Exactly, it wouldn't","msgtype":"m.text"},"m.relates_to":{"event_id":"$5RNoTz4QmLDgoe-3iphfQJcSJ_8MP8jsT8nzrFrLkok","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695783298506,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$g9tlQFyoL_ADlIX4ogwP0K7kAgNLJSmniWs3qUJrueo"},
{"content":{"body":"The mechanism I'd been investigating was to correlate struct types between a worker and main thread: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62","m.mentions":{},"msgtype":"m.text"},"ts":1695783313421,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z3KGPZBMIjPurcFvk1zHEb6N5mlXBrxj4HBoBb1LpcQ"},
{"content":{"body":"> <@devsnek:matrix.org> yeah that's another thing, if you use fast dev mode (eval) your project will break lol\n\nWell in webpack all those eval calls happen just once per file right? So it's ok if they have their own source location","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5HcrS6TV9UOzzh3Wj1CSYWxE0QRp-w170PuJ2x3V7eo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah that&#39;s another thing, if you use fast dev mode (eval) your project will break lol</blockquote></mx-reply>Well in webpack all those eval calls happen just once per file right? So it's ok if they have their own source location","m.relates_to":{"m.in_reply_to":{"event_id":"$5HcrS6TV9UOzzh3Wj1CSYWxE0QRp-w170PuJ2x3V7eo"}},"msgtype":"m.text"},"ts":1695783333145,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1BsgaZMtdZ5D6YqFh7NaTyP-Fh9xmzbf4dBE8K2tAk4"},
{"content":{"body":"> <@devsnek:matrix.org> we can just revive domenic's proposal\n\nhow did that solve any of the problems we're discussing here?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IYFGD3baswcudMlgsT37ogd2qOnD5FWGqsCuu8jt7wY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>we can just revive domenic&#39;s proposal</blockquote></mx-reply>how did that solve any of the problems we're discussing here?","m.relates_to":{"m.in_reply_to":{"event_id":"$IYFGD3baswcudMlgsT37ogd2qOnD5FWGqsCuu8jt7wY"}},"msgtype":"m.text"},"ts":1695783350476,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YXqkLq0B2Axx_EPset5hSygBl69qZ6ofQ2TwIss2eXU"},
{"content":{"body":"> <@littledan:matrix.org> how did that solve any of the problems we're discussing here?\n\nit solves sharable functions, not other things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YXqkLq0B2Axx_EPset5hSygBl69qZ6ofQ2TwIss2eXU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>how did that solve any of the problems we're discussing here?</blockquote></mx-reply>it solves sharable functions, not other things","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YXqkLq0B2Axx_EPset5hSygBl69qZ6ofQ2TwIss2eXU"}},"msgtype":"m.text"},"ts":1695783372025,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VWeyhE2d8Ob-maFd-Awy2mAXZByPxZjoUPkKaejZClk"},
{"content":{"body":"> <@littledan:matrix.org> how did that solve any of the problems we're discussing here?\n\n * it solves sharable code, not other things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YXqkLq0B2Axx_EPset5hSygBl69qZ6ofQ2TwIss2eXU?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>how did that solve any of the problems we're discussing here?</blockquote></mx-reply> * it solves sharable code, not other things","m.mentions":{},"m.new_content":{"body":"it solves sharable code, not other things","format":"org.matrix.custom.html","formatted_body":"it solves sharable code, not other things","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VWeyhE2d8Ob-maFd-Awy2mAXZByPxZjoUPkKaejZClk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695783377986,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$O30wO5PgA89H6wlv3Ry4dDtF1DIwvFesAmnKlGKf0_w"},
{"content":{"body":"> <@devsnek:matrix.org> it solves sharable code, not other things\n\nIsn't that proposal essentially what module expressions/module blocks is?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VWeyhE2d8Ob-maFd-Awy2mAXZByPxZjoUPkKaejZClk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>it solves sharable code, not other things</blockquote></mx-reply>Isn't that proposal essentially what module expressions/module blocks is?","m.mentions":{"user_ids":["@devsnek:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VWeyhE2d8Ob-maFd-Awy2mAXZByPxZjoUPkKaejZClk"}},"msgtype":"m.text"},"ts":1695783402785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZsPyOfOQs3URs9SkkEZ0dLjMxOFAi4JVNpQfBN-BngQ"},
{"content":{"body":"it is quite similar yes","m.mentions":{},"msgtype":"m.text"},"ts":1695783410884,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7lYAwPvpxsUYUW7B1Wc4I20BEXKb_MoLNpRJn8d46ps"},
{"content":{"body":"hmmm I have zero keywords","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$X1BjSmQtGVOwLbNZEbPBwaUabH1D-laM9ja7jjhdzHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695783414573,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$XIbeaJNuHCMVGLnvetdfKeRHuHQgf-kEm_J6Q2efvIE"},
{"content":{"body":"> <@rbuckton:matrix.org> Isn't that proposal essentially what module expressions/module blocks is?\n\nyeah that plus closing over things and structured cloning them","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZsPyOfOQs3URs9SkkEZ0dLjMxOFAi4JVNpQfBN-BngQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Isn't that proposal essentially what module expressions/module blocks is?</blockquote></mx-reply>yeah that plus closing over things and structured cloning them","m.relates_to":{"m.in_reply_to":{"event_id":"$ZsPyOfOQs3URs9SkkEZ0dLjMxOFAi4JVNpQfBN-BngQ"}},"msgtype":"m.text"},"ts":1695783419283,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8kBjOCFoTALAvEFz8efikk_tfpzteCPUbqURToYau-k"},
{"content":{"body":"i think both could exist","m.mentions":{},"msgtype":"m.text"},"ts":1695783426198,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HFY-8Uj3U5UMKL3SBTnbrI-0BhwwP8rVBm8aQ4ZSO_E"},
{"content":{"body":"It also didn't solve the shared code issue with respect to the developer experience.","m.mentions":{},"msgtype":"m.text"},"ts":1695783427104,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrTsoNJw_aUjuz9Hb166AaWGecX5yPfwowUtqa7Lhsk"},
{"content":{"body":"the main thing is whether you are sharing a module or a callable","m.mentions":{},"msgtype":"m.text"},"ts":1695783438307,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jUzfKvbkFZhoTCwVUNf_aI3ZeFTT-bRTxoYo7B2mRrY"},
{"content":{"body":"i think callables are a lot nicer to work with in many cases","m.mentions":{},"msgtype":"m.text"},"ts":1695783450673,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zyXNmWsw_SC927wGcVBqncQM4W3WAQakqPiVwqFjaXw"},
{"content":{"body":"this could be my bias from working with erlang/elixir though","m.mentions":{},"msgtype":"m.text"},"ts":1695783458495,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OD6LGJg6NuXWyxLOSxW3c2TqhT8D3gl2KlnxIqOj--0"},
{"content":{"body":"I agree that `f()` is much better than `await import(mod).then(m => m.f())`, and module expressions are only a viable solution if \"prototype calls\" don't look like that","format":"org.matrix.custom.html","formatted_body":"I agree that <code>f()</code> is much better than <code>await import(mod).then(m =&gt; m.f())</code>, and module expressions are only a viable solution if \"prototype calls\" don't look like that","msgtype":"m.text"},"ts":1695783558854,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$spnHJR-e6ALlfS4PoqvMoIzGiC5b67g9NfwkMMYiNrA"},
{"content":{"body":"(specifically, I wouldn't want a`await`)","format":"org.matrix.custom.html","formatted_body":"(specifically, I wouldn't want a<code>await</code>)","msgtype":"m.text"},"ts":1695783575534,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$hStdugyIhjVNLvdmCYSw4EHL_vgR3j656nvbFzXUi1k"},
{"content":{"body":"yeah i can definitely see both existing ","m.mentions":{},"msgtype":"m.text"},"ts":1695783591191,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1QbX69opA1wt8jAeBMlAh86tH0rBMjWKKWGcpJqv3Jk"},
{"content":{"body":"ah this is my jam","m.mentions":{},"msgtype":"m.text"},"ts":1695783826761,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8JZjo9Mm2SpIErv2DvULGF4QRsSLXvs3bNw-J2F8oI4"},
{"content":{"body":"> <@devsnek:matrix.org> mpsc is \"single consumer\" so in most cases it is a move operation (reuses the same memory)\n\nThen that is essentially what I'm already doing. I parse the file in a thread pool thread, which produces a shared AST node that I send back to the main thread. If I had used normal objects sent via `postMessage`, I'd end up producing an entire copy of the AST in the main thread while the worker ends up holding on to the local copy until some point in the future when GC runs, which increases memory pressure and triggers GC more often, and that's would be a huge problem in some very large codebases (it already is, to a degree, so that would just makle it worse).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TVWnRBqXE5CfkqVDaEfu5p2KJ4n8HLJTTjGi0UFuYyA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>mpsc is &quot;single consumer&quot; so in most cases it is a move operation (reuses the same memory)</blockquote></mx-reply>Then that is essentially what I'm already doing. I parse the file in a thread pool thread, which produces a shared AST node that I send back to the main thread. If I had used normal objects sent via <code>postMessage</code>, I'd end up producing an entire copy of the AST in the main thread while the worker ends up holding on to the local copy until some point in the future when GC runs, which increases memory pressure and triggers GC more often, and that's would be a huge problem in some very large codebases (it already is, to a degree, so that would just makle it worse).","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TVWnRBqXE5CfkqVDaEfu5p2KJ4n8HLJTTjGi0UFuYyA"}},"msgtype":"m.text"},"ts":1695784172418,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k9UN7JqV81Bl_zpeqlBd0bPK15Cdl20OSyc8jjfKG58"},
{"content":{"body":"But since I can't attach behavior to a struct, I still end up having to rebuild the AST as normal objects to hand off to the rest of the compiler. Unfortunately, rewriting the entire compiler just to use a data-only AST isn't something feasible in the time I've spent on it so far. And the TSC compiler is mostly written using the FP style. There are too many bits of code that still expect to be able to call `.map`, `.filter`, etc. on a `NodeArray` that wouldn't otherwise be present in a data-only world. And it's not just arrays. We regularly use `Map` and `Set` as well. ","format":"org.matrix.custom.html","formatted_body":"But since I can't attach behavior to a struct, I still end up having to rebuild the AST as normal objects to hand off to the rest of the compiler. Unfortunately, rewriting the entire compiler just to use a data-only AST isn't something feasible in the time I've spent on it so far. And the TSC compiler is mostly written using the FP style. There are too many bits of code that still expect to be able to call <code>.map</code>, <code>.filter</code>, etc. on a <code>NodeArray</code> that wouldn't otherwise be present in a data-only world. And it's not just arrays. We regularly use <code>Map</code> and <code>Set</code> as well.","m.mentions":{},"msgtype":"m.text"},"ts":1695784444010,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s80qI0BxK76PN_nw3fH1zs0j_yJTBLqMFM7SWcaU7IA"},
{"content":{"body":"Switching back to a purely functional approach even for working with arrays is not a reasonable ask, as there is far too much to reasonably change, and would have an oversized impact on TypeScript API consumers. Maybe we pay the cost to speed up `tsc` command line compilation, but API consumers wouldn't get that benefit.","format":"org.matrix.custom.html","formatted_body":"Switching back to a purely functional approach even for working with arrays is not a reasonable ask, as there is far too much to reasonably change, and would have an oversized impact on TypeScript API consumers. Maybe we pay the cost to speed up <code>tsc</code> command line compilation, but API consumers wouldn't get that benefit.","m.mentions":{},"msgtype":"m.text"},"ts":1695784624686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WANG0Xdwr8qW1zR-nbL4co-xuCFV__vQj72Oc2DuvAQ"},
{"content":{"body":"hmm.. ok, when I view source, I'm in the mentions block:\n\n```\n    \"m.new_content\": {\n      \"body\": \"the DOM, for objects :-p\",\n      \"format\": \"org.matrix.custom.html\",\n      \"formatted_body\": \"the DOM, for objects :-p\",\n      \"m.mentions\": {\n        \"user_ids\": [\n          \"@softwarechris:matrix.org\"\n        ]\n      },\n```","format":"org.matrix.custom.html","formatted_body":"<p>hmm.. ok, when I view source, I'm in the mentions block:</p>\n<pre><code>    \"m.new_content\": {\n      \"body\": \"the DOM, for objects :-p\",\n      \"format\": \"org.matrix.custom.html\",\n      \"formatted_body\": \"the DOM, for objects :-p\",\n      \"m.mentions\": {\n        \"user_ids\": [\n          \"@softwarechris:matrix.org\"\n        ]\n      },\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$ZRYa53bdZDxyPyotjkn3WdDinVRsvf-3aHd4aDgxuaI","is_falling_back":true,"m.in_reply_to":{"event_id":"$XIbeaJNuHCMVGLnvetdfKeRHuHQgf-kEm_J6Q2efvIE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695784640804,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zsVkTtaEpSacZJ3qg_d7J4pbyVQ0APHB7eAu6YG34z8"},
{"content":{"body":"i understand what tsc wants to do i just explicitly don't consider it when thinking about how things should be designed, as it is a very \"special\" codebase. ","m.mentions":{},"msgtype":"m.text"},"ts":1695784881771,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5KMlCLXSFQ_mDM8HB1glB0j_6Q7pK7jyNMvyvAaM1GE"},
{"content":{"body":"Just using `f(data)` glosses over the fact that `f` isn't going to be that short in the majority of cases. I have too many places where I've had to write something like `concurrentMap_set(map, key, value)` when it could have been `map.set(key, value)`. I'd much rather we not turn JS into C to use this feature.","format":"org.matrix.custom.html","formatted_body":"Just using <code>f(data)</code> glosses over the fact that <code>f</code> isn't going to be that short in the majority of cases. I have too many places where I've had to write something like <code>concurrentMap_set(map, key, value)</code> when it could have been <code>map.set(key, value)</code>. I'd much rather we not turn JS into C to use this feature.","m.mentions":{},"msgtype":"m.text"},"ts":1695784909073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H9X4_MHey3Ni---iEyK4riOuVOZb5YNuCGUG2_w7604"},
{"content":{"body":"like i'd rather have microsoft toil over rewriting tsc than make the design of a feature work","m.mentions":{},"msgtype":"m.text"},"ts":1695784922792,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FGDiWOnnWRVaAmR9dqO8f1_dW4Von9YFsBUXkPpj2nc"},
{"content":{"body":" * like i'd rather have microsoft toil over rewriting tsc than make the design of a feature worse","m.mentions":{},"m.new_content":{"body":"like i'd rather have microsoft toil over rewriting tsc than make the design of a feature worse","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FGDiWOnnWRVaAmR9dqO8f1_dW4Von9YFsBUXkPpj2nc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695784929946,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oKtfjgX58pZ6-0LFTZqFWG5zVEgp2sHQ_0s86hO4x1s"},
{"content":{"body":"it is subjective of course","m.mentions":{},"msgtype":"m.text"},"ts":1695784956795,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_l4WjvvcDEz6DXJbd8kJ7eM40o3U8RnaXcSChkX8Tfw"},
{"content":{"body":"I would consider the inability to attach behavior to a struct a worse outcome, especially because I believe that are reasonable ways to achieve this.","m.mentions":{},"msgtype":"m.text"},"ts":1695784964484,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xbm4ZdMy8ApwLwTyzyzjadIRdDOBQHjWY3omH1Q6fJU"},
{"content":{"body":"i'm cool with attaching behavior to structs, i just don't like the unshared prototype or whatever its called","m.mentions":{},"msgtype":"m.text"},"ts":1695785004114,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4j-KjOcllct-AHR8Fo5BEEigsveSg-vqWHa6BJ9IXbk"},
{"content":{"body":"What about that is problematic?","m.mentions":{},"msgtype":"m.text"},"ts":1695785017294,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_576wcNRvZ7OrnJUzYZahj_cVL6e3zmLBBR2_H7198k"},
{"content":{"body":"the aesthetics ","m.mentions":{},"msgtype":"m.text"},"ts":1695785029595,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zHth5ncEhpKAVkhJV6glmjMBGXHYo3_OHs_lLOQq5MQ"},
{"content":{"body":"Do you mean the `with nonshared prototype;`? That's nowhere near final syntax.","format":"org.matrix.custom.html","formatted_body":"Do you mean the <code>with nonshared prototype;</code>? That's nowhere near final syntax.","m.mentions":{},"msgtype":"m.text"},"ts":1695785060449,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4Vxubh4vrbhgomGHgsEkYY4tTU1Yw9juvwKzqdxcloQ"},
{"content":{"body":"That comes from trying to require explicit opt-in for some things so that we leave room for the potential for _actual_ shared code in the future, and not paint ourselves into a corner.","format":"org.matrix.custom.html","formatted_body":"That comes from trying to require explicit opt-in for some things so that we leave room for the potential for <em>actual</em> shared code in the future, and not paint ourselves into a corner.","m.mentions":{},"msgtype":"m.text"},"ts":1695785109918,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nSjA1SySyCvoucPZq1gveIbRVWeXGffkutD7_Bnz3xY"},
{"content":{"body":"no not the syntax, i'd rather just skip to having actual shared code","m.mentions":{},"msgtype":"m.text"},"ts":1695785133696,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cPMiD-z76aiLEouJAMvO3VrLuky3nh0CdTlz5zWdETM"},
{"content":{"body":"We haven't found a workable solution for that.","m.mentions":{},"msgtype":"m.text"},"ts":1695785163801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yLtpbTwHpakcbY7bCUjwDpNeDUeg_80bzDFdMNjlBRU"},
{"content":{"body":"JS is not threadsafe, and the way functions work today makes them not threadsafe either.","m.mentions":{},"msgtype":"m.text"},"ts":1695785206126,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$86ut5IRpN6hBqZbesTdbsY6LgZXnqaFh1ncy0byfZeI"},
{"content":{"body":"ye i'm aware of the history there, i was around for blocks and such. i just want to spend more brainpower on that instead of the temporary solution","m.mentions":{},"msgtype":"m.text"},"ts":1695785304947,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$67sjT1OyDfai1bqDJmu8Z4UNaNHYXBnlLv7u-lxMSKY"},
{"content":{"body":"Neither that proposal nor module expressions are actually shared code.","m.mentions":{},"msgtype":"m.text"},"ts":1695785328378,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fNAFymBfkQ1EuxBPqwplcb4SQ7bUCxRLLax3Hlff04c"},
{"content":{"body":"They are essentially just shared source text.","m.mentions":{},"msgtype":"m.text"},"ts":1695785347586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K5ssKd0VhCnAbyice2aULTvO8JNbYdndxyO9KGQvWb8"},
{"content":{"body":"i'm not sure what you mean by shared code then","m.mentions":{},"msgtype":"m.text"},"ts":1695785367431,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j-Ek05xCfpvBQRWLIy9Q9AODSRO_dxg4HVLWU3ImuP8"},
{"content":{"body":"If you are talking about just having the same method declarations evaluated in two threads, that's exactly what was being proposed.","m.mentions":{},"msgtype":"m.text"},"ts":1695785408690,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ssy3p20HAz2rzToG-d1TvVnh8wHX3nRchmAkhtPDtZA"},
{"content":{"body":"i am not talking about that","m.mentions":{},"msgtype":"m.text"},"ts":1695785417776,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xZCaTA5LkcRbsyocekGVNZvZhh1phRmWYJsI__uROAM"},
{"content":{"body":"in v8 terminology i'm thinking of something like bytecode being shared between isolates","m.mentions":{},"msgtype":"m.text"},"ts":1695785460709,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fzeglZ50r_6f8y3h5pGFRAzaTq-5BiMVVkF1-re63xc"},
{"content":{"body":"If you're talking about the main thread sending the declaration to the child thread, that ends up being a terrible developer experience.","m.mentions":{},"msgtype":"m.text"},"ts":1695785463057,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-VI6tO1Ccu_Nrqk0IN3y32E-MIxj1AWUFhDUx4DebRE"},
{"content":{"body":"bytecode for the function?","m.mentions":{},"msgtype":"m.text"},"ts":1695785481040,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yvSEb9lCbCdB4DdkAuF7TEhdW21s-j9ejzH_gmMGIz4"},
{"content":{"body":"for some given source text","m.mentions":{},"msgtype":"m.text"},"ts":1695785491486,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PNSLpiNyp-l7C6dvTDCD-K-e806MgUw-jsfyFwBd4zo"},
{"content":{"body":"it could also include closed over references","m.mentions":{},"msgtype":"m.text"},"ts":1695785511478,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$RJ3SWopaMU4QwwPx7tguSZrc-zk6CpYGG5-uWP-1rg0"},
{"content":{"body":"maybe another example would be functions in erlang/elixir, though its hard to say exactly what \"closed over\" means there because everything is COW","m.mentions":{},"msgtype":"m.text"},"ts":1695785536045,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5HizrRRrDwIZeGp3K5X3G0-MT_kozlamXmDehzBuX4Q"},
{"content":{"body":"I'm not sure how feasible that would be. If you're just talking about untyped, unoptimized code, maybe, but not optimized representations or every deopt and recompile would stop the world.","m.mentions":{},"msgtype":"m.text"},"ts":1695785559947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vIVFYjqkrBRSchBarjqtcp-z2CpJ1xhVsIlGjcvYNjg"},
{"content":{"body":"And if its just untyped, unoptimized code, that could be achieved with what was discussed as well.","m.mentions":{},"msgtype":"m.text"},"ts":1695785574595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vIY4mF6NDxFXo2U0uDAgpgQY1vuDo8K3s4r1536njWU"},
{"content":{"body":"yeah i mean its possible it might have to split apart","m.mentions":{},"msgtype":"m.text"},"ts":1695785582193,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0ckFPLWnBw2EJWmFlfgGQ3UfSt_28_YPKlDgTmZOc1Y"},
{"content":{"body":"these are sort of the two states though","m.mentions":{},"msgtype":"m.text"},"ts":1695785596366,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dvjnqXaeOFJsPjGDPEu37PHxn0URJcMTXCUuGrtF6lI"},
{"content":{"body":"like you write `let add = magicCodeContainerSyntax(a, b){a + b}` and you expect that sending add to other threads and using it is generally a very cheap operation as long as you don't do anything too weird","format":"org.matrix.custom.html","formatted_body":"like you write <code>let add = magicCodeContainerSyntax(a, b){a + b}</code> and you expect that sending add to other threads and using it is generally a very cheap operation as long as you don't do anything too weird","m.mentions":{},"msgtype":"m.text"},"ts":1695785681531,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$t7WK7Y6wj7UqQF2Ol4q3NOlkh-aoVOdpOgM6QbaQprc"},
{"content":{"body":"What was presented was having a single `shared struct` declaration that was addressable by source location, in which case v8 or another engine could leverage the statically known shape of the declaration to generate the same hidden class for a struct in multiple threads. It could potentially even generate shared function information for all of the methods, and let each thread refine those on a per-thread basis.","format":"org.matrix.custom.html","formatted_body":"What was presented was having a single <code>shared struct</code> declaration that was addressable by source location, in which case v8 or another engine could leverage the statically known shape of the declaration to generate the same hidden class for a struct in multiple threads. It could potentially even generate shared function information for all of the methods, and let each thread refine those on a per-thread basis.","m.mentions":{},"msgtype":"m.text"},"ts":1695785756774,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wVRXywH6JnOXubLFQcmw_kXB2QejX25UtqhJETpD5ZU"},
{"content":{"body":"yeah that sounds like a reasonable application","m.mentions":{},"msgtype":"m.text"},"ts":1695785813357,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XjYRaArJGQGb5V1YA0G0YQ71WsALXI74Y3cdZZ2SUBU"},
{"content":{"body":"This has issues with bundling and tree shaking, which I've talked about with shu and others in  #shared-structs:matrix.org, though there is an argument to be made that bundlers could work around this by splitting out structs into a separate file reused by multiple entrypoints, which is something many bundlers can already do.","format":"org.matrix.custom.html","formatted_body":"This has issues with bundling and tree shaking, which I've talked about with <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> and others in  <a href=\"https://matrix.to/#/#shared-structs:matrix.org\">#shared-structs:matrix.org</a>, though there is an argument to be made that bundlers could work around this by splitting out structs into a separate file reused by multiple entrypoints, which is something many bundlers can already do.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695785901839,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yteMZ43EfShQf-wq9SdDOzYCZjeQSAzisgnoz4iHFfA"},
{"content":{"body":"yeah the addressing needs to be... addressed","m.mentions":{},"msgtype":"m.text"},"ts":1695785943340,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$y0GZf17v6szGTV3vamOIVGurEoUlLq4x2cst2-id5E0"},
{"content":{"body":"but the overall concept is sound i think","m.mentions":{},"msgtype":"m.text"},"ts":1695785948826,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wIOIkeLnsijS0ex7aUQdHsvNk2AjRgqV9Zg-Du3KOSY"},
{"content":{"body":"both in terms of theory and in terms of implementation","m.mentions":{},"msgtype":"m.text"},"ts":1695785956345,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$V8jOoZfOk0-QgryyHWHnwi9asQkfs7XDtPCYIDQdaiM"},
{"content":{"body":"My concern with trying to use something like module blocks to encapsulate shared code in the main thread and send it to the worker is that it becomes difficult to use in the worker. You can't just `import` your declarations now, you have to receive them as arguments if you want to create new instances of a struct type to send back to the main thread. That wouldn't work for TypeScript, we have too many different AST nodes.","format":"org.matrix.custom.html","formatted_body":"My concern with trying to use something like module blocks to encapsulate shared code in the main thread and send it to the worker is that it becomes difficult to use in the worker. You can't just <code>import</code> your declarations now, you have to receive them as arguments if you want to create new instances of a struct type to send back to the main thread. That wouldn't work for TypeScript, we have too many different AST nodes.","m.mentions":{},"msgtype":"m.text"},"ts":1695786001356,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M7cIPAZf0hSRa0wh7BYxekB31lE14LwgqlLpXXqvfE8"},
{"content":{"body":"So I would prefer a DX that allows me to use `import`.","format":"org.matrix.custom.html","formatted_body":"So I would prefer a DX that allows me to use <code>import</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1695786032926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mMW-Oiy5a3h7zsxw6XkyU1btkYTa80XJwgpf6-0IIWY"},
{"content":{"body":"this is similar to elixir. you can send `fn() -> MyModule.foo() end` to another process (or even another physical computer) but that doesn't mean `MyModule` is properly imported for you to use it there.","format":"org.matrix.custom.html","formatted_body":"this is similar to elixir. you can send <code>fn() -&gt; MyModule.foo() end</code> to another process (or even another physical computer) but that doesn't mean <code>MyModule</code> is properly imported for you to use it there.","m.mentions":{},"msgtype":"m.text"},"ts":1695786077183,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WYFlYB2SCYKFLud11zjr4QTu8chwang3szS1ltHEHpU"},
{"content":{"body":"Have people run into issues with bunders duplicating declarations of classes with private fields?","m.mentions":{},"msgtype":"m.text"},"ts":1695786104836,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$cQ2Xg9RXHhGcAg22gUSDV4j3rmBHAxbvT7RwMNiwMQE"},
{"content":{"body":"the issue with bundlers is.... say you have shared_util.js that is imported by both main_thread.js and worker_thread.js","m.mentions":{},"msgtype":"m.text"},"ts":1695786138080,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$G0IBYW0viQfR8eET82M7I3Xo9NdvW_u1FFV19qQZvG0"},
{"content":{"body":"if shared_util is bundled into those two other files, it will have a different source location for each one","m.mentions":{},"msgtype":"m.text"},"ts":1695786155191,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KJgrw0AdS-pr0dlX9OVVzsXAOak_UvQEqI29PVNx8Ao"},
{"content":{"body":"which will break the struct addressing","m.mentions":{},"msgtype":"m.text"},"ts":1695786159344,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$xsLHjMyAV1pKWRUyWkcx-sdLF1YtpoeyMgDfpyNKCKc"},
{"content":{"body":"you can leave it split out to fix that","m.mentions":{},"msgtype":"m.text"},"ts":1695786171997,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6LQ893_r0KO5uhQKAAX-T40q9bcGDg_P6s2HGG_14VE"},
{"content":{"body":"though i'm not personally a fan of that","m.mentions":{},"msgtype":"m.text"},"ts":1695786180148,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BY-mTSUnJ533CfYA9oMVQwlZIA0nnj1VIJBwytxQooY"},
{"content":{"body":"There is also an argument to be made that I *don't* want to share bytecode between functions in different threads. One of the biggest issues with worker threads today is that you must essentially duplicate large portions of your application code in memory in the worker. One solution to that would be to use tree shaking to remove unused code, but now anything used by a shared struct method cannot be dropped so I have to pay the cost for unused code.","format":"org.matrix.custom.html","formatted_body":"There is also an argument to be made that I <em>don't</em> want to share bytecode between functions in different threads. One of the biggest issues with worker threads today is that you must essentially duplicate large portions of your application code in memory in the worker. One solution to that would be to use tree shaking to remove unused code, but now anything used by a shared struct method cannot be dropped so I have to pay the cost for unused code.","m.mentions":{},"msgtype":"m.text"},"ts":1695786187911,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2L7WwPcFCgHGhTk8h7qjBBsJAXOvWwWQRUhv-6YQkSo"},
{"content":{"body":"not sure i'm following what you're saying there","m.mentions":{},"msgtype":"m.text"},"ts":1695786285595,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WNqzkw7G2Xsodp4m-gxMEy7VzkprwEfll0bqBLWt6ec"},
{"content":{"body":"anything duplicated in main_thread.js and worker_thread.js results in that much additional memory taken up by the worker, as it constructs its own copies of every function and object as it evaluates the duplicate code.","m.mentions":{},"msgtype":"m.text"},"ts":1695786396431,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gitFjDHt41KyG3U-0Z2Y9BJAAmxPBk6A_Y7F2E2TmZc"},
{"content":{"body":"i feel like you're saying you want things to be shared but then saying that you don't want things to be shared","m.mentions":{},"msgtype":"m.text"},"ts":1695786443502,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$owKe5_z8kCdbT1-GUuZD3I9KUp5Chj91_pK2Qx4RN-E"},
{"content":{"body":"If main_thread.js and worker_thread.js both depend on shared_util.js, but each only uses part of that file, tree shaking would elide the unused functionality to remove overhead per-thread.","m.mentions":{},"msgtype":"m.text"},"ts":1695786467874,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8TiWQ7WYUA0VdedT6UU9Ok0GF7F0ywX9jW-QWeCwdTw"},
{"content":{"body":"oh i see, you're saying you don't want the pointer from shared_util to the shared bytecode to hang around if you're not using it","m.mentions":{},"msgtype":"m.text"},"ts":1695786503881,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SxXmcO0k62j433qJsnfi4tllXMtdwZ21Il6IihwyNsQ"},
{"content":{"body":"yeah definitely something worth thinking about","m.mentions":{},"msgtype":"m.text"},"ts":1695786521948,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$AZWGsgkD_XsuOpk7ZE0EEph13A9QrrU9Yq1lUzr-qWo"},
{"content":{"body":"That is at odds with what shu presented, and what we've discussed, but is also something I've been considering with the various alternatives we've been working through.","m.mentions":{},"msgtype":"m.text"},"ts":1695786537246,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bB2quD_nkEhJkYgCqPwT9gEpdpVGRjNCWVKq30h-XNg"},
{"content":{"body":"if addressing is not based on source location i think that \"just works\" with tree shaking","m.mentions":{},"msgtype":"m.text"},"ts":1695786549625,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$be8F9A6jndywplWcD4WNGggzgn4Pyp7--KKc0DNp3ak"},
{"content":{"body":"I mean, the downside of this all is polymorphic usage sites, right?","m.mentions":{},"msgtype":"m.text"},"ts":1695786569030,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$MT7W0CDAXykTLM07CrNlDqhPaTBta2FSrK4sP5jPMuA"},
{"content":{"body":"It does not make your code crash","m.mentions":{},"msgtype":"m.text"},"ts":1695786573719,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$mr3uF9YmLcUqSW6P2pumDzyZEwBeL25_pElPZBaZGTc"},
{"content":{"body":"i think the worst case is that the engine has to make a full copy for each thread of whatever the backing representation is (which is just the status quo today)","m.mentions":{},"msgtype":"m.text"},"ts":1695786630694,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UpqNhe62_YXqTzFPbfRjY1Sq9jmahvsoh5359L-7hsM"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> I mean, the downside of this all is polymorphic usage sites, right?\n\nYes, the version of the proposal presented today was heavily motivated by reducing polymorphism, but that is at the cost of the potential for increased overhead since tree-shaking becomes limited.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MT7W0CDAXykTLM07CrNlDqhPaTBta2FSrK4sP5jPMuA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>I mean, the downside of this all is polymorphic usage sites, right?</blockquote></mx-reply>Yes, the version of the proposal presented today was heavily motivated by reducing polymorphism, but that is at the cost of the potential for increased overhead since tree-shaking becomes limited.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MT7W0CDAXykTLM07CrNlDqhPaTBta2FSrK4sP5jPMuA"}},"msgtype":"m.text"},"ts":1695786642821,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3OdVxdbvQ76OMjD6tPYJ98olRSnAZbr2GPRv04IIlg4"},
{"content":{"body":"I've suggested a registration mechanism that would be bundler/tree-shaking friendly, but it imposes other limitations to avoid side-channel communication issues related to a shared registry that are also a concern.","m.mentions":{},"msgtype":"m.text"},"ts":1695786723535,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wBrRNXjhnDdV3plEXlQC73IjoX8KWgE8gZK-C__mP-I"},
{"content":{"body":"So just bundle split?","m.mentions":{},"msgtype":"m.text"},"ts":1695786724338,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$0Q3ZIg3kbGN7wLbHqLTO9C5qA6goP6m4kkZhbbgkLFU"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> So just bundle split?\n\nthat is what was presented, yes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0Q3ZIg3kbGN7wLbHqLTO9C5qA6goP6m4kkZhbbgkLFU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>So just bundle split?</blockquote></mx-reply>that is what was presented, yes.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0Q3ZIg3kbGN7wLbHqLTO9C5qA6goP6m4kkZhbbgkLFU"}},"msgtype":"m.text"},"ts":1695786740603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-fxN58tbzWYlP9pHLG2uny4b-6Mb8c42Rr8CgU8up4A"},
{"content":{"body":"this all feels like non-problems","m.mentions":{},"msgtype":"m.text"},"ts":1695786742969,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$W_prxWjKr7Q8NmjtUbbM3d0p7seFwvWUYleB1J0bdyk"},
{"content":{"body":"bundle split can be problematic in some cases based on network conditions","m.mentions":{},"msgtype":"m.text"},"ts":1695786783858,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$trX7voksjgw7Ckrl730a9z2P9HQtrB5iNO6R_ctW_aY"},
{"content":{"body":"as much as we wish everything was http2+ everywhere","m.mentions":{},"msgtype":"m.text"},"ts":1695786805637,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CjPKAWGNnu7O9J2X5osERgs6BsoR4ZKGRsaNXfVZWk8"},
{"content":{"body":"its definitely not *that* bad","format":"org.matrix.custom.html","formatted_body":"its definitely not <em>that</em> bad","m.mentions":{},"msgtype":"m.text"},"ts":1695786820951,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R8Kw34CxiNfdLIxFevJ5qu2rklfxPJwZk-L2Vqf8W8Q"},
{"content":{"body":"but creating a worker off of a separate `.js` file isn't?","format":"org.matrix.custom.html","formatted_body":"but creating a worker off of a separate <code>.js</code> file isn't?","m.mentions":{},"msgtype":"m.text"},"ts":1695786835973,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$QTyZZJv77sUg96b9hd1uHynfXfks1eaE52VEAh9OL7w"},
{"content":{"body":"i more just don't like that the feature strongly informs how code can be processed. ","m.mentions":{},"msgtype":"m.text"},"ts":1695786897608,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9C16uIQ4EO0M5cULoo511pwFFdrCGLbQvoEuOVsx5A4"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> this all feels like non-problems\n\nthat's my feeling too?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$W_prxWjKr7Q8NmjtUbbM3d0p7seFwvWUYleB1J0bdyk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>this all feels like non-problems</blockquote></mx-reply>that's my feeling too?","m.relates_to":{"m.in_reply_to":{"event_id":"$W_prxWjKr7Q8NmjtUbbM3d0p7seFwvWUYleB1J0bdyk"}},"msgtype":"m.text"},"ts":1695786903119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pVE9sjcZkwXhPRdAIbhtx_bqEQIxo-ocW2P0f_wtOVw"},
{"content":{"body":"One way to overcome the bundling issue is with a lexical keyword to introduce a shared identity, i.e.:\n\n```\nshared struct S {\n  with registration 'e9c1cfb0-e9d6-469c-8fba-99f641e4b64e';\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>One way to overcome the bundling issue is with a lexical keyword to introduce a shared identity, i.e.:</p>\n<pre><code>shared struct S {\n  with registration 'e9c1cfb0-e9d6-469c-8fba-99f641e4b64e';\n  ...\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695786908333,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nD5Q_TnwBmZkDSegb4t0_Sklm__EATqpFIA8KKSokVw"},
{"content":{"body":"Or a URN, or whatever you like.","m.mentions":{},"msgtype":"m.text"},"ts":1695786925158,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GZSfPycbvyEStc_bZpy4LtOxc7jnCX3h4rJ3KeNPgeI"},
{"content":{"body":"yeah that's what i suggested above, except my example was more human-readable lol","m.mentions":{},"msgtype":"m.text"},"ts":1695786925535,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TvFFJdm1q8tuZUlLU5gjwaETdpHL-mP_uDok5e2EY2E"},
{"content":{"body":"We'd discussed it being an API, or just a decorator as well. The problem with an API or a decorator is that it provides a way to communicate between otherwise isolated code.","m.mentions":{},"msgtype":"m.text"},"ts":1695786973579,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uyht3LOepLqkp5e5v_mePTz2ipqBoAZYtyC14i6_EtE"},
{"content":{"body":"i'm curious what that communication channel is","m.mentions":{},"msgtype":"m.text"},"ts":1695787006935,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QDn4cf5YuCy5qcn1eYZFmFmm2DXBHa60oq5OuxTohiE"},
{"content":{"body":"If you have a global registry, in which you can insert a keyed element, which throws if the element already existed, then it can be used to communicate.","m.mentions":{},"msgtype":"m.text"},"ts":1695787071912,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HM9WNjIAuzcesOIVvAxPvX_QMkOpW1NLz6gxJRJibHY"},
{"content":{"body":"oh, don't throw ","m.mentions":{},"msgtype":"m.text"},"ts":1695787081354,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rIP1MnSBcY-JvzZWoLApTRKiysyeGEGFnVgMiU49u2s"},
{"content":{"body":"How do you catch developer mistakes?","m.mentions":{},"msgtype":"m.text"},"ts":1695787089705,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Du1X1wT2jRS245-IrxqgiFKaYSepz_zg1UhVxS2bdA4"},
{"content":{"body":"like if you write out the same definition in two separate files?","m.mentions":{},"msgtype":"m.text"},"ts":1695787120819,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$O7fdMawe6-18n49CnlwPjIHOzn8qcDw7J4qnJNVTPO4"},
{"content":{"body":"and then they fall out of sync?","m.mentions":{},"msgtype":"m.text"},"ts":1695787125277,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DzyyAbXQ81Q3UucTS8Vc7BKVs6hTAidOhKaDRWB3yGY"},
{"content":{"body":"`\"use strict\"` was partly about not silently allowing things that didn't work.","format":"org.matrix.custom.html","formatted_body":"<code>\"use strict\"</code> was partly about not silently allowing things that didn't work.","m.mentions":{},"msgtype":"m.text"},"ts":1695787130714,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qZV9wWCX_VKX4A1r62gG1nnG30agtv48KMi0GRpryUM"},
{"content":{"body":"i would consider you to be on your own at that point lol","m.mentions":{},"msgtype":"m.text"},"ts":1695787133764,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kfNvoT12joO0uBd0-PHLGjqVqB451Lwt_v81IVSogxg"},
{"content":{"body":"I'm personally fine with not throwing, but that's also because I work on a type system that could warn you ahead of time about that kind of conflict.","m.mentions":{},"msgtype":"m.text"},"ts":1695787186165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v-a3Ajrm5WIPhj-36YesQdupc3rxbBpeaEoX0LGZq1U"},
{"content":{"body":"yeah i mean i don't think that's an inherently new problem to structs","m.mentions":{},"msgtype":"m.text"},"ts":1695787207551,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lOES-Ja5js6Y9Mpbc3v0ItADHXClOyYhxaNm3KBWlnc"},
{"content":{"body":"we have solutions for it","m.mentions":{},"msgtype":"m.text"},"ts":1695787233759,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$D6utGVcS4QpZ5ZTfMiiS-8GhVYYCsBW9kvuJu8gyj-s"},
{"content":{"body":"orthogonal imo","m.mentions":{},"msgtype":"m.text"},"ts":1695787237742,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZWfQI-PXor0VQH63gmITKrPI7PLePnCGOt6PIm_jK0s"},
{"content":{"body":"So as not to continue to flood the chat about the `shared struct` proposal, I'd suggest anyone who is interested in discussing further join #shared-structs:matrix.org or one of the working session meetings in the TC39 calendar.","format":"org.matrix.custom.html","formatted_body":"So as not to continue to flood the chat about the <code>shared struct</code> proposal, I'd suggest anyone who is interested in discussing further join <a href=\"https://matrix.to/#/#shared-structs:matrix.org\">#shared-structs:matrix.org</a> or one of the working session meetings in the TC39 calendar.","m.mentions":{},"msgtype":"m.text"},"ts":1695787415611,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g10Rvsy2F4DlRGlMgFna34ywjE7us-KRozcyaFAb1Ys"},
{"content":{"body":"please do!","msgtype":"m.text"},"ts":1695787460709,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$N3l6Ga3AGNl1bSp6cVg_1Yio8ltCo_vZ1SlPw4C3FG8"},
{"content":{"body":"Type Annotations community call minutes are here:  https://github.com/tc39/proposal-type-annotations/issues/184","msgtype":"m.text"},"ts":1695787510521,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$oiOS61nfAJGmAAA5D16RzxVI_W7Dq2VZtSLia6OKYXE"},
{"content":{"body":"(Specifically [the link to the Google Doc](https://docs.google.com/document/d/1ecYpaEj5XObkOCUzZ_Y6GlYTTydjPjb1urg09MGYAG4/edit?usp=sharing))","format":"org.matrix.custom.html","formatted_body":"(Specifically <a href=\"https://docs.google.com/document/d/1ecYpaEj5XObkOCUzZ_Y6GlYTTydjPjb1urg09MGYAG4/edit?usp=sharing\">the link to the Google Doc</a>)","msgtype":"m.text"},"ts":1695787627530,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$Mjg5Zk5OMZLYBVjjUO-hqanI1L8PeVhKYdphqUQIgus"},
{"content":{"body":"i like token soup","m.mentions":{},"msgtype":"m.text"},"ts":1695787809939,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9vh1s3SMTxByOGh9hLAjrumlVNNU2DtNhibt3MQSepc"},
{"content":{"body":"would be nice to see a future proposal which allows getting the token soup in some way, probably just as a string","m.mentions":{},"msgtype":"m.text"},"ts":1695787930797,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$arOpg0mvRNDHSVzvILmGznblMbCiY7x-9Pa3Ttkjsoc"},
{"content":{"body":"when I was skimming the slides before, I assumed \"token soup\" was intended as an insulting phrase 😅","m.mentions":{},"msgtype":"m.text"},"ts":1695788037828,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$aPS4dOrNT00VxJw4hQH_ljNG0XlFpoGQNjSHsOOIrOc"},
{"content":{"body":"like maybe like a Perl-y thing","m.mentions":{},"msgtype":"m.text"},"ts":1695788082484,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$JgdplNa_-wVeovGBez4tCM6ORkN0kKtMkRYs1S4J8M0"},
{"content":{"body":"what if we made this proposal console-only","m.mentions":{},"msgtype":"m.text"},"ts":1695788138739,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qDLhUY9dvVtDGNGMks8awIGt7dPhIAjqKqc0hqh_R1g"},
{"content":{"body":"there was a discussion about having a REPL goal","m.mentions":{},"msgtype":"m.text"},"ts":1695788146734,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$viwq8ZJmHTQNx1LUWJRu8NBE2bx3JpUKJj22pLE0Q-E"},
{"content":{"body":"lmao","m.mentions":{},"msgtype":"m.text"},"ts":1695788150681,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Qavqp8pNsJNTFKviZ7ZNE_53PwOn3UETRmu8RMI-Krc"},
{"content":{"body":"chrome could just strip TS types in the console","m.mentions":{},"msgtype":"m.text"},"ts":1695788152060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uy33hinW9ybcgeis64E5Ab8QEgJYgOhN39whOpK0vWw"},
{"content":{"body":" * (like a Perl-y sort of image)","m.mentions":{},"m.new_content":{"body":"(like a Perl-y sort of image)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JgdplNa_-wVeovGBez4tCM6ORkN0kKtMkRYs1S4J8M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695788154321,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Puw3M2ju_olbUgFVKO9HKaw6M7TZJe6I-4qehluK_UI"},
{"content":{"body":"I would like that better...","m.mentions":{},"msgtype":"m.text"},"ts":1695788160515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v_ZLwwAuIhD4moTh7PqK5hTGl8B9HE2QUVAJjauPMfQ"},
{"content":{"body":"i like repl goal","m.mentions":{},"msgtype":"m.text"},"ts":1695788163019,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9pUQbMgBYcFM-x2BVcRnOXBywJLuK5PjpxKSu6WxlcQ"},
{"content":{"body":"> <@bakkot:matrix.org> chrome could just strip TS types in the console\n\nI said the same when it went stage 1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uy33hinW9ybcgeis64E5Ab8QEgJYgOhN39whOpK0vWw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>chrome could just strip TS types in the console</blockquote></mx-reply>I said the same when it went stage 1","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uy33hinW9ybcgeis64E5Ab8QEgJYgOhN39whOpK0vWw"}},"msgtype":"m.text"},"ts":1695788223284,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$S-7Mvbl7M6f0lTtWYgeP3LTcHi_s4Tnh8m_5Ec9btk4"},
{"content":{"body":"repl goal needs\n- sloppy by default\n- supports redeclarable static import\n- supports redeclarable let/const\n- supports type stripping\n- top level await","format":"org.matrix.custom.html","formatted_body":"<p>repl goal needs</p>\n<ul>\n<li>sloppy by default</li>\n<li>supports redeclarable static import</li>\n<li>supports redeclarable let/const</li>\n<li>supports type stripping</li>\n<li>top level await</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695788286887,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dDGSfHuG4Pq50DDf7lTgnerOHCFzY_4Bi0w1DYydTrA"},
{"content":{"body":" * repl goal needs\n\n- sloppy by default\n- supports redeclarable static import\n- supports redeclarable let/const\n- supports type stripping\n- top level await\n- ???","format":"org.matrix.custom.html","formatted_body":" * <p>repl goal needs</p>\n<ul>\n<li>sloppy by default</li>\n<li>supports redeclarable static import</li>\n<li>supports redeclarable let/const</li>\n<li>supports type stripping</li>\n<li>top level await</li>\n<li>???</li>\n</ul>\n","m.mentions":{},"m.new_content":{"body":"repl goal needs\n\n- sloppy by default\n- supports redeclarable static import\n- supports redeclarable let/const\n- supports type stripping\n- top level await\n- ???","format":"org.matrix.custom.html","formatted_body":"<p>repl goal needs</p>\n<ul>\n<li>sloppy by default</li>\n<li>supports redeclarable static import</li>\n<li>supports redeclarable let/const</li>\n<li>supports type stripping</li>\n<li>top level await</li>\n<li>???</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dDGSfHuG4Pq50DDf7lTgnerOHCFzY_4Bi0w1DYydTrA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695788290204,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$l4oY8uW3HMVOUypmkcInnTbtARl6G-0UVFjA_-A6CW4"},
{"content":{"body":"gentle reminder, please add yourself to the attendee list at the top of the notes if you have not done so.  thank you 🙏","m.mentions":{},"msgtype":"m.text"},"ts":1695788307364,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$tzcDXjBbBiMLPk_NyewTmpOgk3WBrr-vjTkq194G5Us"},
{"content":{"body":"> <@devsnek:matrix.org> repl goal needs\n> \n> - sloppy by default\n> - supports redeclarable static import\n> - supports redeclarable let/const\n> - supports type stripping\n> - top level await\n> - ???\n\nannex J: Repl tool modification of the 262","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dDGSfHuG4Pq50DDf7lTgnerOHCFzY_4Bi0w1DYydTrA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><p>repl goal needs</p>\n<ul>\n<li>sloppy by default</li>\n<li>supports redeclarable static import</li>\n<li>supports redeclarable let/const</li>\n<li>supports type stripping</li>\n<li>top level await</li>\n<li>???</li>\n</ul>\n</blockquote></mx-reply>annex J: Repl tool modification of the 262","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dDGSfHuG4Pq50DDf7lTgnerOHCFzY_4Bi0w1DYydTrA"}},"msgtype":"m.text"},"ts":1695788338856,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$f88KU3Lok0dSSo7qe16J-EUZCQeW-oLZ_BO_3LAUYCo"},
{"content":{"body":"a repl goal that ignores types would be very interesting, and avoids many of the downsides of the current annotations proposal","m.mentions":{},"msgtype":"m.text"},"ts":1695788343556,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lhkq-i21i9NsMIQXggSx9HI_Y6MHsWhtiFZQJkg23dk"},
{"content":{"body":"I do not understand the analogy to JSON at all","m.mentions":{},"msgtype":"m.text"},"ts":1695788351324,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$x2qVVj0KGf4YpvtC2YxSxXSbzFanLrql3me1chri-RI"},
{"content":{"body":"i feel very undecided about this","m.mentions":{},"msgtype":"m.text"},"ts":1695788377363,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HWFBTI1t439L4_F3bW7yTDO1wbox_mfe2hLJmyWiw4M"},
{"content":{"body":"i want reflective type annotations so i can write cool things","m.mentions":{},"msgtype":"m.text"},"ts":1695788387766,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZnyeA6KHrJKLBHGWdUBZrpHX8dtpFFeg98hXfW0uP4U"},
{"content":{"body":"which champions just said is out of scope","msgtype":"m.text"},"ts":1695788401736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TGuUQ3ZBild7YcqDX0yuKukitSC2Aw4mdEfTSiSNVdg"},
{"content":{"body":"You don't want to send extra bytes for JSON comments over the wire, but it sure would be nice if you had them for configuration readability","m.mentions":{},"msgtype":"m.text"},"ts":1695788405497,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$bvtL_9uNU9tOIUhIImLo1aATQskySnTgGiAT5ufPokA"},
{"content":{"body":"the reflection part","msgtype":"m.text"},"ts":1695788406232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8NHqdm9KGjmz65UaLSRGiL9aGPk3AIMEDX9wOE4MbyU"},
{"content":{"body":"I think this proposal will impede any reflective type annotations","m.mentions":{},"msgtype":"m.text"},"ts":1695788409179,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$53H4XipOvvgXRRRWTf69WAeWR9n_kOC_11--UeFRjAE"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1695788415836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4ZKwgZxEDfTefV234aaan-DZ90ecNiiLsdvMeiKv6ME"},
{"content":{"body":"i feel like it could come later as like \"get the annotation strings\"","m.mentions":{},"msgtype":"m.text"},"ts":1695788427009,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zhVua_BBjDJZjio8F5wtD72SuSDX4OiMlT6cJnN_omw"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> You don't want to send extra bytes for JSON comments over the wire, but it sure would be nice if you had them for configuration readability\n\nright, but MLS's point was that TS is _only_ useful if you have another tool. that's not true of comments in JSON.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bvtL_9uNU9tOIUhIImLo1aATQskySnTgGiAT5ufPokA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>You don&#39;t want to send extra bytes for JSON comments over the wire, but it sure would be nice if you had them for configuration readability</blockquote></mx-reply>right, but MLS's point was that TS is <em>only</em> useful if you have another tool. that's not true of comments in JSON.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bvtL_9uNU9tOIUhIImLo1aATQskySnTgGiAT5ufPokA"}},"msgtype":"m.text"},"ts":1695788440703,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dKVZLz10ZzabV-xCdIgt-hqA_LKENBnS_Q0aBaMy-Ac"},
{"content":{"body":"but i also feel like it could make trying to rely on that more hazardous if things are used to stripping them out","m.mentions":{},"msgtype":"m.text"},"ts":1695788441937,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZuOz-yhZU-7AupRV3ML49ZEL43DmLxjz7s12UaE78UE"},
{"content":{"body":"i... don't think i can ship that","msgtype":"m.text"},"ts":1695788445773,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cpi1qlP4B-sRScGI6ThJ4Ua6xTk_jaNyNUP2mQjeb-g"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> You don't want to send extra bytes for JSON comments over the wire, but it sure would be nice if you had them for configuration readability\n\n * right, but MLS's point was that TS is _only_ useful if you have another tool (which can then do the stripping). that's not true of comments in JSON.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bvtL_9uNU9tOIUhIImLo1aATQskySnTgGiAT5ufPokA?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>You don't want to send extra bytes for JSON comments over the wire, but it sure would be nice if you had them for configuration readability</blockquote></mx-reply> * right, but MLS's point was that TS is <em>only</em> useful if you have another tool (which can then do the stripping). that's not true of comments in JSON.","m.mentions":{},"m.new_content":{"body":"right, but MLS's point was that TS is _only_ useful if you have another tool (which can then do the stripping). that's not true of comments in JSON.","format":"org.matrix.custom.html","formatted_body":"right, but MLS's point was that TS is <em>only</em> useful if you have another tool (which can then do the stripping). that's not true of comments in JSON.","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dKVZLz10ZzabV-xCdIgt-hqA_LKENBnS_Q0aBaMy-Ac","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695788447969,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qd9rxayzEgtJlap048yM3QGqCI5keUWBkBChgQaIF20"},
{"content":{"body":"msaboff: total strawman, but could your concern be mitigated by also standardizing the semantics of these type annotations, even if JS engines do not enforce these?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: total strawman, but could your concern be mitigated by also standardizing the semantics of these type annotations, even if JS engines do not enforce these?","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"msgtype":"m.text"},"ts":1695788491661,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$nVvYknqLuIZeJr8QBUXeBzrd1rhmwsNE8TLQPnSXQPo"},
{"content":{"body":"have people who are talking about the convenience of not having to strip types used esbuild's watch mode","m.mentions":{},"msgtype":"m.text"},"ts":1695788493338,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nq2HXMPrmq-nmObEbczZWwBSQvwND0efy9j0hz31lsI"},
{"content":{"body":"it is so fast","m.mentions":{},"msgtype":"m.text"},"ts":1695788495177,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8__uH6d-6iK6LeFCQbgKKmkuPLoAn7KA11w8mIhUbcM"},
{"content":{"body":"you literally do not notice","m.mentions":{},"msgtype":"m.text"},"ts":1695788498364,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DLgPmNZ1u5J1KRJrpl8F3gKcNr29ZJBt9jqU3a-h3E8"},
{"content":{"body":"> <@shuyuguo:matrix.org> i... don't think i can ship that\n\ni think it would be fine with lazy re-parsing? but i can imagine it would be annoying","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cpi1qlP4B-sRScGI6ThJ4Ua6xTk_jaNyNUP2mQjeb-g?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i... don&#39;t think i can ship that</blockquote></mx-reply>i think it would be fine with lazy re-parsing? but i can imagine it would be annoying","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cpi1qlP4B-sRScGI6ThJ4Ua6xTk_jaNyNUP2mQjeb-g"}},"msgtype":"m.text"},"ts":1695788537506,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aPEPsUYtQlkSfS13YlFKvUH02BV8KjvRx8sPvo0fpF0"},
{"content":{"body":"we have different definitions of \"fine\" i think","msgtype":"m.text"},"ts":1695788560420,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6NAM5YgfwL9RrFIBBBZYlZhGfecsg0RHYJDz5qS7Cn0"},
{"content":{"body":"it is implementable with re-parsing","msgtype":"m.text"},"ts":1695788565633,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RrZWlQbKpq-KIBXLIcNyHT4spScvI88QHK56_7L2t9w"},
{"content":{"body":"ok but this proposal does not move to a world where tooling is optional","m.mentions":{},"msgtype":"m.text"},"ts":1695788575920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZJMsAPPRaDPUsjPM0vtg1fZPpvYVHE_ZKvMakImwLiU"},
{"content":{"body":"like, at all","m.mentions":{},"msgtype":"m.text"},"ts":1695788578325,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SX56Ax4d0I4jRdWCrqsNYlmA92tLaqK9oEX6FOE1hn4"},
{"content":{"body":"i mean v8 already has a reparser for errors, its just a question of how fast do you want your annotations","m.mentions":{},"msgtype":"m.text"},"ts":1695788582709,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$i4iJ-dP-15mTNgpjYOQ4iuRA9lePBlPu2DkElUEYPP4"},
{"content":{"body":"> <@lucacasonato:matrix.org> msaboff: total strawman, but could your concern be mitigated by also standardizing the semantics of these type annotations, even if JS engines do not enforce these?\n\nNo.  There is nothing I see an implementation using TA's.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nVvYknqLuIZeJr8QBUXeBzrd1rhmwsNE8TLQPnSXQPo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br><a href=\"https://matrix.to/#/@msaboff:matrix.org\">msaboff</a>: total strawman, but could your concern be mitigated by also standardizing the semantics of these type annotations, even if JS engines do not enforce these?</blockquote></mx-reply>No.  There is nothing I see an implementation using TA's.","m.relates_to":{"m.in_reply_to":{"event_id":"$nVvYknqLuIZeJr8QBUXeBzrd1rhmwsNE8TLQPnSXQPo"}},"msgtype":"m.text"},"ts":1695788583388,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$LyVFw12-FfWPDAeyJJXAmBmZdUh-jFYrro1yJdn0ySo"},
{"content":{"body":"types do nothing for you without additional tools","m.mentions":{},"msgtype":"m.text"},"ts":1695788584357,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OGksekfOCJFrOsocw6V9U2DLUhIT1q_3w0d2qoXy7IY"},
{"content":{"body":"that is the whole proposal","m.mentions":{},"msgtype":"m.text"},"ts":1695788586491,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WgZpoH9bQII7wNpZKZsKmeMX7lGB4NbMgApI8ekmCJM"},
{"content":{"body":"let's have annex J developer mode to contain all of those things","m.mentions":{},"msgtype":"m.text"},"ts":1695788597742,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ANbFETxC9ko-3FxwQXcDAHojJR1vmWp8Gxlgs859MrU"},
{"content":{"body":"bakkot: perhaps you should express that on the queue","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: perhaps you should express that on the queue","msgtype":"m.text"},"ts":1695788600755,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0A8K0EqCH_zUE5mVqKuKW2bQR7F3s3ROlOEXmdOqKwE"},
{"content":{"body":" * re: littledan's comment, ok but this proposal does not move to a world where tooling is optional","m.mentions":{},"m.new_content":{"body":"re: littledan's comment, ok but this proposal does not move to a world where tooling is optional","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ZJMsAPPRaDPUsjPM0vtg1fZPpvYVHE_ZKvMakImwLiU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695788603491,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4xsf_ki4PgqY2GkfcbHzpYysX4wDKTQg-U7cTdfG8Cw"},
{"content":{"body":"the queue is so full","m.mentions":{},"msgtype":"m.text"},"ts":1695788606692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lG8T04F5L0AKdjdGCMWa__Y50ewXAc0hdozFX_KoKmQ"},
{"content":{"body":"i think it would be valuable to demonstrate that there are skeptics who are not just implementers","msgtype":"m.text"},"ts":1695788620483,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nl42AePNDE-Bccnpd-DNRkJEw-dhbEW_egCjOUqeSyY"},
{"content":{"body":"> <@bakkot:matrix.org> the queue is so full\n\nThere is a 60 minute timebox.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lG8T04F5L0AKdjdGCMWa__Y50ewXAc0hdozFX_KoKmQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the queue is so full</blockquote></mx-reply>There is a 60 minute timebox.","m.relates_to":{"m.in_reply_to":{"event_id":"$lG8T04F5L0AKdjdGCMWa__Y50ewXAc0hdozFX_KoKmQ"}},"msgtype":"m.text"},"ts":1695788628039,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$NqH1wloSjfH0OznOISVOjsJah6qqLskeOufnNtz6roI"},
{"content":{"body":"bleh","m.mentions":{},"msgtype":"m.text"},"ts":1695788630019,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pu5zef1C3Y_de0boszagHInO7cMtIeMDKIwfvZbvUmQ"},
{"content":{"body":"ok","m.mentions":{},"msgtype":"m.text"},"ts":1695788631465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DKX3MoE85VPNJaj9SKRCaZRTV_yIissT_P3MAhRRRu4"},
{"content":{"body":"(I do have concerns with the current syntax proposal, and think it needs to be more generic/soupy rather than invasive into the grammar, but it's still absolutely the case that *some* syntax that's valid (and erased) at runtime is useful.)","format":"org.matrix.custom.html","formatted_body":"(I do have concerns with the current syntax proposal, and think it needs to be more generic/soupy rather than invasive into the grammar, but it's still absolutely the case that <em>some</em> syntax that's valid (and erased) at runtime is useful.)","m.mentions":{},"msgtype":"m.text"},"ts":1695788756188,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$GcJik9OmAlx9B1bjMNrHkk__B0_pvvyJjzA0K9qs8NA"},
{"content":{"body":"> <@msaboff:matrix.org> No.  There is nothing I see an implementation using TA's.\n\nI don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LyVFw12-FfWPDAeyJJXAmBmZdUh-jFYrro1yJdn0ySo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>No.  There is nothing I see an implementation using TA's.</blockquote></mx-reply>I don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LyVFw12-FfWPDAeyJJXAmBmZdUh-jFYrro1yJdn0ySo"}},"msgtype":"m.text"},"ts":1695788772359,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$s2mvZDemWtM8kuilHeQvxS4A0upadPAmRKHtei3OBEQ"},
{"content":{"body":"The impact is quite high, if we follow this route, we are effectively defining the grammar for types for JavaScript once and for all.","m.mentions":{},"msgtype":"m.text"},"ts":1695788828254,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$VmPIrDudDML26m-17K52zeqd4v2PesACDLrkwT3HMhA"},
{"content":{"body":"i mean if we have token soup we aren't defining any grammar for types","m.mentions":{},"msgtype":"m.text"},"ts":1695788855212,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mq1LIFz4SZnY5aPP6c3p0ZVWV5nU_8ipBnyug-3_aOY"},
{"content":{"body":"other than `:`","format":"org.matrix.custom.html","formatted_body":"other than <code>:</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695788858847,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$AqZEzLnAsg1sqp_b8_89-1p55uDzlszEN-n7aUaA-GA"},
{"content":{"body":"> <@christianulbrich:matrix.org> The impact is quite high, if we follow this route, we are effectively defining the grammar for types for JavaScript once and for all.\n\nwhich is a pretty permanent thing to do when there isn't even a type system existing that can accurately describe the entire language.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VmPIrDudDML26m-17K52zeqd4v2PesACDLrkwT3HMhA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br>The impact is quite high, if we follow this route, we are effectively defining the grammar for types for JavaScript once and for all.</blockquote></mx-reply>which is a pretty permanent thing to do when there isn't even a type system existing that can accurately describe the entire language.","m.mentions":{"user_ids":["@christianulbrich:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VmPIrDudDML26m-17K52zeqd4v2PesACDLrkwT3HMhA"}},"msgtype":"m.text"},"ts":1695788866935,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$obyuTIiUHVrttvSDlOtAb_gyBXc8IbR5dzNOYOBL2As"},
{"content":{"body":"I think I've gotten a bit confused here as to whether this information is meant to be used _statically_ by engines","format":"org.matrix.custom.html","formatted_body":"I think I've gotten a bit confused here as to whether this information is meant to be used <em>statically</em> by engines","m.mentions":{},"msgtype":"m.text"},"ts":1695788869249,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GogidLDzCcUNmgbcpYADU9Dp0OxIRqaIrveNb2MVcTU"},
{"content":{"body":"> <@devsnek:matrix.org> i mean if we have token soup we aren't defining any grammar for types\n\nwell, assuming we also don't have `interface` and etc...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mq1LIFz4SZnY5aPP6c3p0ZVWV5nU_8ipBnyug-3_aOY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i mean if we have token soup we aren&#39;t defining any grammar for types</blockquote></mx-reply>well, assuming we also don't have <code>interface</code> and etc...","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mq1LIFz4SZnY5aPP6c3p0ZVWV5nU_8ipBnyug-3_aOY"}},"msgtype":"m.text"},"ts":1695788878984,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h9p68UyT1NUZiYr4YYlEqNdQ7MJ8LKvBvED9eUim4Nk"},
{"content":{"body":"and `type`","format":"org.matrix.custom.html","formatted_body":"and <code>type</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695788882159,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5cB0s5uUE55MtbzoSJs4jIgJII4BR_HU7vuYPrdt7Sc"},
{"content":{"body":"> <@lucacasonato:matrix.org> I don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)\n\nSo what do you expect an implementation doing with TA's besides throwing them away.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$s2mvZDemWtM8kuilHeQvxS4A0upadPAmRKHtei3OBEQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>I don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)</blockquote></mx-reply>So what do you expect an implementation doing with TA's besides throwing them away.","m.relates_to":{"m.in_reply_to":{"event_id":"$s2mvZDemWtM8kuilHeQvxS4A0upadPAmRKHtei3OBEQ"}},"msgtype":"m.text"},"ts":1695788885019,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE"},
{"content":{"body":"and all the other TS keywords","m.mentions":{},"msgtype":"m.text"},"ts":1695788887267,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JO9oMivud2KlFzy6ZMaTMj9vVZXP9hv6qBiT1u6WwzQ"},
{"content":{"body":"> <@lucacasonato:matrix.org> I don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)\n\n * So what do you expect an implementation doing with TA's besides throwing them away?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$s2mvZDemWtM8kuilHeQvxS4A0upadPAmRKHtei3OBEQ?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>I don't understand what you mean. I am not suggesting runtime implementations of ECMA262 do anything other with TA's than strip them. But we could standardize how tooling itself is meant to interpret the grammar and perform the type checking (so there would be type checking implementations such as TypeScript, and runtime implementations such as JSC / V8 / SM)</blockquote></mx-reply> * So what do you expect an implementation doing with TA's besides throwing them away?","m.new_content":{"body":"So what do you expect an implementation doing with TA's besides throwing them away?","format":"org.matrix.custom.html","formatted_body":"So what do you expect an implementation doing with TA's besides throwing them away?","msgtype":"m.text"},"m.relates_to":{"event_id":"$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695788894876,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$7lPvUIR7NBPbOSBaHB1GXcDooj3FTU-vdvhK0a8YrNA"},
{"content":{"body":"but of course if we don't have all the other TS keywords, it does not accomplish the goal of letting people ship TS at runtime","m.mentions":{},"msgtype":"m.text"},"ts":1695788899362,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wKNrtkb0AXmc5Mq8rrc2ZK-FbH7jP7IpyyKMKDvfQH0"},
{"content":{"body":"because I thought the answer was an obvious \"yes\" but maybe it's actually \"no\" and we're just demarcating a section to be ignored by an engine's parser?","m.mentions":{},"msgtype":"m.text"},"ts":1695788901593,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$tdlLUcU-54_thPc0PmZ9vHZxj5jasopQfcqRoBw_Cc8"},
{"content":{"body":"> <@msaboff:matrix.org> So what do you expect an implementation doing with TA's besides throwing them away?\n\nThat *is* the expectation, yes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>So what do you expect an implementation doing with TA's besides throwing them away?</blockquote></mx-reply>That <em>is</em> the expectation, yes.","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE"}},"msgtype":"m.text"},"ts":1695788907396,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WA9GyaCJbLsHu7BQxg-DxNqw930A-lIOsuZ6_lYOnLY"},
{"content":{"body":"> <@msaboff:matrix.org> So what do you expect an implementation doing with TA's besides throwing them away?\n\nA runtime implementation should do nothing other than to throw them away.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>So what do you expect an implementation doing with TA's besides throwing them away?</blockquote></mx-reply>A runtime implementation should do nothing other than to throw them away.","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EiVb-pliCQMUk18-P8-rxDSdpIcasWK_kZOadm7VcKE"}},"msgtype":"m.text"},"ts":1695788911092,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$ykSz14VTAyTIaGHko417-HxBwSWbvJXZVQiXpjU9Mj8"},
{"content":{"body":"> <@ljharb:matrix.org> which is a pretty permanent thing to do when there isn't even a type system existing that can accurately describe the entire language.\n\nI am with you, I have the same feeling, that finding a type system, that can actually define all of JavaScript's types might be difficult. Although there surely would be some kind of `any` wouldn't it? :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$obyuTIiUHVrttvSDlOtAb_gyBXc8IbR5dzNOYOBL2As?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>which is a pretty permanent thing to do when there isn't even a type system existing that can accurately describe the entire language.</blockquote></mx-reply>I am with you, I have the same feeling, that finding a type system, that can actually define all of JavaScript's types might be difficult. Although there surely would be some kind of <code>any</code> wouldn't it? :)","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$obyuTIiUHVrttvSDlOtAb_gyBXc8IbR5dzNOYOBL2As"}},"msgtype":"m.text"},"ts":1695788931454,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$BUMuZLh9GMJmTe6I65FE7UgCJrYX24LIpIL7DXWfnNg"},
{"content":{"body":"> <@lucacasonato:matrix.org> A runtime implementation should do nothing other than to throw them away.\n\nSo I think you agree with the comment I made that started this thread.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ykSz14VTAyTIaGHko417-HxBwSWbvJXZVQiXpjU9Mj8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>A runtime implementation should do nothing other than to throw them away.</blockquote></mx-reply>So I think you agree with the comment I made that started this thread.","m.relates_to":{"m.in_reply_to":{"event_id":"$ykSz14VTAyTIaGHko417-HxBwSWbvJXZVQiXpjU9Mj8"}},"msgtype":"m.text"},"ts":1695788941254,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$0EH-X0pKy6Sy6xSwEdkeQ25Zl3kMpyN4AMhEtZ9ilPs"},
{"content":{"body":"> <@rkirsling:matrix.org> because I thought the answer was an obvious \"yes\" but maybe it's actually \"no\" and we're just demarcating a section to be ignored by an engine's parser?\n\nit's the second thing definitely","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tdlLUcU-54_thPc0PmZ9vHZxj5jasopQfcqRoBw_Cc8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>because I thought the answer was an obvious &quot;yes&quot; but maybe it&#39;s actually &quot;no&quot; and we&#39;re just demarcating a section to be ignored by an engine&#39;s parser?</blockquote></mx-reply>it's the second thing definitely","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tdlLUcU-54_thPc0PmZ9vHZxj5jasopQfcqRoBw_Cc8"}},"msgtype":"m.text"},"ts":1695788945953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-EUddv6Ou8F3oSYxMAjd8UJUWY83Gk-kAuIdLpgSCmM"},
{"content":{"body":"engines cannot use TS types for several reasons","m.mentions":{},"msgtype":"m.text"},"ts":1695788953436,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eV18DwY0mTd0Nt5OFPqT2hQpGWQcrfcvcjzxu_tQouk"},
{"content":{"body":"> <@christianulbrich:matrix.org> I am with you, I have the same feeling, that finding a type system, that can actually define all of JavaScript's types might be difficult. Although there surely would be some kind of `any` wouldn't it? :)\n\nnope, but `unknown`, yes. maybe there is no such system, but until there is, why would we want to lock ourselves in","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BUMuZLh9GMJmTe6I65FE7UgCJrYX24LIpIL7DXWfnNg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">@christianulbrich:matrix.org</a><br>I am with you, I have the same feeling, that finding a type system, that can actually define all of JavaScript's types might be difficult. Although there surely would be some kind of <code>any</code> wouldn't it? :)</blockquote></mx-reply>nope, but <code>unknown</code>, yes. maybe there is no such system, but until there is, why would we want to lock ourselves in","m.mentions":{"user_ids":["@christianulbrich:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BUMuZLh9GMJmTe6I65FE7UgCJrYX24LIpIL7DXWfnNg"}},"msgtype":"m.text"},"ts":1695788972864,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DzGQ0J8pBHtG4UQrV1t9d9f7b3mW0zcuU5O8ty-wmIo"},
{"content":{"body":"> <@bakkot:matrix.org> it's the second thing definitely\n\nthat at least clarifies for me why \"token soup\" is meant as a neutral-sentiment phrase","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-EUddv6Ou8F3oSYxMAjd8UJUWY83Gk-kAuIdLpgSCmM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it's the second thing definitely</blockquote></mx-reply>that at least clarifies for me why \"token soup\" is meant as a neutral-sentiment phrase","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-EUddv6Ou8F3oSYxMAjd8UJUWY83Gk-kAuIdLpgSCmM"}},"msgtype":"m.text"},"ts":1695789003282,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xQr3fnht_xg9lZGpnp2AOY_XrWt2Oql0dPRcjnkGXKs"},
{"content":{"body":"ok I also want to know the answer to WH's question though","m.mentions":{},"msgtype":"m.text"},"ts":1695789205693,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G4028al8on_m-e__D6Ggqksc3CTpZ-gjTkwx-QNNT0o"},
{"content":{"body":"> <@msaboff:matrix.org> So I think you agree with the comment I made that started this thread.\n\nOk, let me rephrase the original strawman then:\n\n- You do not like that a specific tool or set of tools is picked as the \"blessed\" syntax, I assume (please tell me if I am wrong) because we (TC39) as the body standardising the grammar, do not have control over how tools interpret this syntax, effectively delegating a large amount of syntax semantics to a different body (TypeScript / flow / whoever we \"bless\")\n- I am suggesting this may be mitigated by moving the semantics that a static checker should interpret the syntax with into the scope of TC39, possibly into ECMA262. This way TC39 keeps this control\n- Runtime implementations of ECMA262 will totally ignore these type annotations. The semantics, if we define them, would only be enforced by other ahead of time static analysis tools","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0EH-X0pKy6Sy6xSwEdkeQ25Zl3kMpyN4AMhEtZ9ilPs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>So I think you agree with the comment I made that started this thread.</blockquote></mx-reply><p>Ok, let me rephrase the original strawman then:</p>\n<ul>\n<li>You do not like that a specific tool or set of tools is picked as the \"blessed\" syntax, I assume (please tell me if I am wrong) because we (TC39) as the body standardising the grammar, do not have control over how tools interpret this syntax, effectively delegating a large amount of syntax semantics to a different body (TypeScript / flow / whoever we \"bless\")</li>\n<li>I am suggesting this may be mitigated by moving the semantics that a static checker should interpret the syntax with into the scope of TC39, possibly into ECMA262. This way TC39 keeps this control</li>\n<li>Runtime implementations of ECMA262 will totally ignore these type annotations. The semantics, if we define them, would only be enforced by other ahead of time static analysis tools</li>\n</ul>\n","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0EH-X0pKy6Sy6xSwEdkeQ25Zl3kMpyN4AMhEtZ9ilPs"}},"msgtype":"m.text"},"ts":1695789210954,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$cEWz_hhlcNBVxj8PTse7iTZYBKoL0bbK2qneANhYvRM"},
{"content":{"body":"_is_ the goal that in 10 years every TS user will write only the subset of TS which is legal ES?","format":"org.matrix.custom.html","formatted_body":"<em>is</em> the goal that in 10 years every TS user will write only the subset of TS which is legal ES?","m.mentions":{},"msgtype":"m.text"},"ts":1695789224860,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3fsDvhGGOizSd9CwBXwWxsJOJobLzIQ3sSTVIMQHSG8"},
{"content":{"body":"I suppose that's up to TS and its users, but probably yes.","m.mentions":{},"msgtype":"m.text"},"ts":1695789251870,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WI0AsgQja3fAbjS36c0DvlIL8tn9AagTTG62tL4xtZ0"},
{"content":{"body":"I don't understand what you mean, shu.","m.mentions":{},"msgtype":"m.text"},"ts":1695789286921,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8hw5jp-BpYBj1swUwPG9pfGgrdwYmqN5fflEwFlyqkk"},
{"content":{"body":"> <@bakkot:matrix.org> _is_ the goal that in 10 years every TS user will write only the subset of TS which is legal ES?\n\nJSX:","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3fsDvhGGOizSd9CwBXwWxsJOJobLzIQ3sSTVIMQHSG8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><em>is</em> the goal that in 10 years every TS user will write only the subset of TS which is legal ES?</blockquote></mx-reply>JSX:","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3fsDvhGGOizSd9CwBXwWxsJOJobLzIQ3sSTVIMQHSG8"}},"msgtype":"m.text"},"ts":1695789289077,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SSy0RFlkxoUqkcyVkRAp-FYiQ4YqvPYvwTYsU4YXSVA"},
{"content":{"body":"yeah JSX seems like that makes it obviously not-gonna-happen","m.mentions":{},"msgtype":"m.text"},"ts":1695789304569,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WdEA4HryuFPWNLui3znX8OBwUWwTj5INKha0COzOqqg"},
{"content":{"body":"TabAtkins: maybe i misread what bakkot said, let me re-read","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: maybe i misread what bakkot said, let me re-read","msgtype":"m.text"},"ts":1695789318035,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_KClvjRB1ih40QbdAb2zJbS9K_VSWdLCHX6Rp_jeGR4"},
{"content":{"body":"Python's type syntax is also (a) completely meaningless/erased at runtime, and (b) different tools use different type syntaxes for their purposes, and (c) they all stick within the broad constraints of valid Python annotations, tho.","m.mentions":{},"msgtype":"m.text"},"ts":1695789329005,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iuqxk6-zAVGcR_bvKB3IYhLVkiqoYhiq9IAbVJg-Le8"},
{"content":{"body":"shu: sorry, there was an implicit \"in ten years, assuming we do this proposal as standard ES\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: sorry, there was an implicit \"in ten years, assuming we do this proposal as standard ES\"","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695789335967,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iTqMaGGwuiOWkyJsTCVSR2mHO6qKEw0xqwOaa6jn19s"},
{"content":{"body":"Don't see why that doesn't apply just as well to JS.","m.mentions":{},"msgtype":"m.text"},"ts":1695789338881,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$rWFoTT2HcogzNOmta1mJ_TDdibE1st89ttmNeJec7u4"},
{"content":{"body":"TabAtkins: ha indeed i did, i read \"10 years every\" as \"every 10 years\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: ha indeed i did, i read \"10 years every\" as \"every 10 years\"","msgtype":"m.text"},"ts":1695789340946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zKH7AiwScC4KN8NNqmJUzCyUEoMuRXo_jLbDg5_ycTU"},
{"content":{"body":"ahaha","m.mentions":{},"msgtype":"m.text"},"ts":1695789348470,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$w0G7_K9nb83k4SH1Q6R8fb2APPjbZSc_ut6XBcpGO68"},
{"content":{"body":"> <@lucacasonato:matrix.org> Ok, let me rephrase the original strawman then:\n> \n> - You do not like that a specific tool or set of tools is picked as the \"blessed\" syntax, I assume (please tell me if I am wrong) because we (TC39) as the body standardising the grammar, do not have control over how tools interpret this syntax, effectively delegating a large amount of syntax semantics to a different body (TypeScript / flow / whoever we \"bless\")\n> - I am suggesting this may be mitigated by moving the semantics that a static checker should interpret the syntax with into the scope of TC39, possibly into ECMA262. This way TC39 keeps this control\n> - Runtime implementations of ECMA262 will totally ignore these type annotations. The semantics, if we define them, would only be enforced by other ahead of time static analysis tools\n\nLuca, I was only making the last point in my comment here.\nI do have other concerns related to the first two points you list.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cEWz_hhlcNBVxj8PTse7iTZYBKoL0bbK2qneANhYvRM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br><p>Ok, let me rephrase the original strawman then:</p>\n<ul>\n<li>You do not like that a specific tool or set of tools is picked as the \"blessed\" syntax, I assume (please tell me if I am wrong) because we (TC39) as the body standardising the grammar, do not have control over how tools interpret this syntax, effectively delegating a large amount of syntax semantics to a different body (TypeScript / flow / whoever we \"bless\")</li>\n<li>I am suggesting this may be mitigated by moving the semantics that a static checker should interpret the syntax with into the scope of TC39, possibly into ECMA262. This way TC39 keeps this control</li>\n<li>Runtime implementations of ECMA262 will totally ignore these type annotations. The semantics, if we define them, would only be enforced by other ahead of time static analysis tools</li>\n</ul>\n</blockquote></mx-reply>Luca, I was only making the last point in my comment here.<br>I do have other concerns related to the first two points you list.","m.relates_to":{"m.in_reply_to":{"event_id":"$cEWz_hhlcNBVxj8PTse7iTZYBKoL0bbK2qneANhYvRM"}},"msgtype":"m.text"},"ts":1695789359067,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$hU3ya7xqm2rZrP82fLDksMrUUWH_whi_b3wiYlS_GF4"},
{"content":{"body":"I, for example, *almost certainly would not* use typed Python if I had to run a build step that produced my actual Python files. The fact that my code is runtime-valid is important.","format":"org.matrix.custom.html","formatted_body":"I, for example, <em>almost certainly would not</em> use typed Python if I had to run a build step that produced my actual Python files. The fact that my code is runtime-valid is important.","m.mentions":{},"msgtype":"m.text"},"ts":1695789403694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4X8uTkDOWT6Slymu1l05LKsxBNxIlL9ogExW1k1O5Eg"},
{"content":{"body":"that seems empirically just not borne out by the vast majority of JS authors","msgtype":"m.text"},"ts":1695789427358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9zb30WJPPEOdKrGXa8PBcN-OzgiQDRqJ13U6WB94Zgo"},
{"content":{"body":"(JS devs appear to have way more appetite for build pain that I do, on average. But still.)","m.mentions":{},"msgtype":"m.text"},"ts":1695789428943,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Gxqt-lOWsJP2cyf75KL8DhhIDvN-JhzbSA0U-C6KIsk"},
{"content":{"body":"like, everyone uses toolchains","msgtype":"m.text"},"ts":1695789432379,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ceq-CEvm6nyA_AcvM2kKf1GNNKgQ0SDbGnpQlppkJ74"},
{"content":{"body":"this proposal is predicated on the assumption that you are using a toolchain!!!","m.mentions":{},"msgtype":"m.text"},"ts":1695789450460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mAWAi0gc-uRt7ZzFKmtmv3Prn_Ph3xkeXkNVOsB9zKE"},
{"content":{"body":"and, as kevin said, this proposal itself presupposes you already use TS","msgtype":"m.text"},"ts":1695789452299,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fDlXoRhdrrwbG1zH3ck8klBRG0iKBafMPiqhEEv3rzU"},
{"content":{"body":"> <@msaboff:matrix.org> Luca, I was only making the last point in my comment here.\n> I do have other concerns related to the first two points you list.\n\nOk, thank you - I'd be interested to learn more about your reasoning for not liking that a specific tool or set of tools is picked as the \"blessed\" syntax, as that may help find alternative solutions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hU3ya7xqm2rZrP82fLDksMrUUWH_whi_b3wiYlS_GF4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>Luca, I was only making the last point in my comment here.<br />I do have other concerns related to the first two points you list.</blockquote></mx-reply>Ok, thank you - I'd be interested to learn more about your reasoning for not liking that a specific tool or set of tools is picked as the \"blessed\" syntax, as that may help find alternative solutions","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hU3ya7xqm2rZrP82fLDksMrUUWH_whi_b3wiYlS_GF4"}},"msgtype":"m.text"},"ts":1695789462209,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$t83441p-hUrNavCCke20iFDzNi_EUsDpcFpNCCwc84Q"},
{"content":{"body":"That you use a toolchain *for production*. Not that you use a toolchain *to make your code run at all*, necessarily.","format":"org.matrix.custom.html","formatted_body":"That you use a toolchain <em>for production</em>. Not that you use a toolchain <em>to make your code run at all</em>, necessarily.","m.mentions":{},"msgtype":"m.text"},"ts":1695789476773,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$iLmtXYJvoIdSMvwgm3uMFHEVuSroTFsJFX9Ju7kPiZE"},
{"content":{"body":"let me be frank","msgtype":"m.text"},"ts":1695789486285,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2T-One7gs5FfVrp4z51HGWWgVcCjRYCBCrVHvH48r30"},
{"content":{"body":"you do typechecks at devtime","m.mentions":{},"msgtype":"m.text"},"ts":1695789489386,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L3GxTDUCELcQhwmXIei8JjmFqumPDK__O7xURo1Blpg"},
{"content":{"body":"all of the benefit of typechecks is at devtime","m.mentions":{},"msgtype":"m.text"},"ts":1695789495838,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UNemLUYQAl69BHQ7MNOUT7Cym6YrEfqyRkesbDD9SdU"},
{"content":{"body":"Like I said, it's the same as minifying being a good thing to do *for production*, but we don't require you to write minified code to execute locally.","format":"org.matrix.custom.html","formatted_body":"Like I said, it's the same as minifying being a good thing to do <em>for production</em>, but we don't require you to write minified code to execute locally.","m.mentions":{},"msgtype":"m.text"},"ts":1695789498697,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LbXV0Wf73KVXbhxIT2dy11UL-l_aXAbYn124LA25KjY"},
{"content":{"body":"> <@bakkot:matrix.org> you do typechecks at devtime\n\nNo, you have your editor do this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L3GxTDUCELcQhwmXIei8JjmFqumPDK__O7xURo1Blpg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you do typechecks at devtime</blockquote></mx-reply>No, you have your editor do this","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$L3GxTDUCELcQhwmXIei8JjmFqumPDK__O7xURo1Blpg"}},"msgtype":"m.text"},"ts":1695789502079,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$1gsRV6K31COUoGGF_7wWx-ZNzm7JMRsSTkmsaa2vQR0"},
{"content":{"body":"that is a tool","m.mentions":{},"msgtype":"m.text"},"ts":1695789512822,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xmomef_-Z3Tme3Oev06lTsrpb6MNlLlcehOa-gxLjo0"},
{"content":{"body":"You do not run `tsc` during dev mode","format":"org.matrix.custom.html","formatted_body":"You do not run <code>tsc</code> during dev mode","m.mentions":{},"msgtype":"m.text"},"ts":1695789513326,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$wV8poraKRjVuwh5u6XCPIsSk0HHImeaI2AszCfcbbJA"},
{"content":{"body":"that","m.mentions":{},"msgtype":"m.text"},"ts":1695789513463,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rirxl0lT-2X-IkqieMZr6XeRe98DBnHjTOOW_hfcmyE"},
{"content":{"body":"you are using","m.mentions":{},"msgtype":"m.text"},"ts":1695789514565,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zYeBeiBO7RhE3x-3KceYzK1l3BpakVWdCWnLDCeLzuM"},
{"content":{"body":"at devtime","m.mentions":{},"msgtype":"m.text"},"ts":1695789516714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UTdFG3-oZ3VzJb8GQg4CbmROk6KsG2s0vDr8JWpj5wA"},
{"content":{"body":"this proposal is asking for engines to ship everything, to everyone, all the time, for a thing that is purportedly not done in production, on the promise that users will also manually strip stuff away at production","msgtype":"m.text"},"ts":1695789521782,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5vIISIp02fEdKUSeqHRecKv3GcEGvy5Yyxa4Sm0N7C4"},
{"content":{"body":"you should definitely be running tsc in CI before you merge in code","m.mentions":{},"msgtype":"m.text"},"ts":1695789523653,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gZ_Wtmbw-v7fEULxS_Q8c3IFQc-90febOzHOZrIAEdQ"},
{"content":{"body":"what's in it for me? why would i support this?","msgtype":"m.text"},"ts":1695789528704,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jYUhPsXU6x_rC9IWFHDeeNlj3wElhsaMRGeZmPvUVic"},
{"content":{"body":"> <@lucacasonato:matrix.org> Ok, thank you - I'd be interested to learn more about your reasoning for not liking that a specific tool or set of tools is picked as the \"blessed\" syntax, as that may help find alternative solutions\n\nI don't like that TC39, an open standard, is blessing possibly one syntax when there are several other possible syntax options.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$t83441p-hUrNavCCke20iFDzNi_EUsDpcFpNCCwc84Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Ok, thank you - I'd be interested to learn more about your reasoning for not liking that a specific tool or set of tools is picked as the \"blessed\" syntax, as that may help find alternative solutions</blockquote></mx-reply>I don't like that TC39, an open standard, is blessing possibly one syntax when there are several other possible syntax options.","m.relates_to":{"m.in_reply_to":{"event_id":"$t83441p-hUrNavCCke20iFDzNi_EUsDpcFpNCCwc84Q"}},"msgtype":"m.text"},"ts":1695789532738,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$GYodYS1-Jv13pwcTRkrayb3NUWntpPNg_apMMg--Fos"},
{"content":{"body":"i.e., if Type Annotations advances to Stage 3/4, TypeScript would also adopt `f::<T>()` for type argument lists. We likely would not ban `f<T>()` in a .ts file, but imagine the community would migrate to the new syntax just as they did for `as` when we added it to avoid conflicts with JSX.","format":"org.matrix.custom.html","formatted_body":"i.e., if Type Annotations advances to Stage 3/4, TypeScript would also adopt <code>f::&lt;T&gt;()</code> for type argument lists. We likely would not ban <code>f&lt;T&gt;()</code> in a .ts file, but imagine the community would migrate to the new syntax just as they did for <code>as</code> when we added it to avoid conflicts with JSX.","m.mentions":{},"msgtype":"m.text"},"ts":1695789536895,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uvP4ZItnF6t8JszF37t0nXS0YdIWrcK_EZlo1cxwyBA"},
{"content":{"body":"Yes, I do typechecks at devtime. But typechecking is different than executing. Being able to execute my code directly, and then typecheck at some convenient point, is nice.","m.mentions":{},"msgtype":"m.text"},"ts":1695789537641,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$vT9XLbfcJFaeTsCyUW4SuHRC5gYRfMEWtSLLNVLOgtg"},
{"content":{"body":"all other things being equal, i agree it is nice","msgtype":"m.text"},"ts":1695789550744,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9EHBp3c0ZFaDZ11jUcv5yN_SRbo0BJh-vTmJvej7Y8I"},
{"content":{"body":"there are real costs here","msgtype":"m.text"},"ts":1695789553427,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TFkTjpyIWMvMgRWvvZASDoR43Ybeaz4vpSjnJ-TJ-Sw"},
{"content":{"body":"Right now on the Babel codebase we use ESLint to lint, TSC to type-check, Babel to strip away types, and Rollup to bundle.\n\nESLint and TSC are run transaprently by my editor and on CI, Rollup only happens on CI, and the only step between me writing the code and testing it in Node.js is to compile away types","msgtype":"m.text"},"ts":1695789597127,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k_c5kx-fmP-ErjjihcRYKLWoU8zvpPG04NQ5zv6M8-o"},
{"content":{"body":"> <@msaboff:matrix.org> I don't like that TC39, an open standard, is blessing possibly one syntax when there are several other possible syntax options.\n\nOk, thank you - but isn't this something we always do when adding new syntax? We bless one syntax that we decide aligns best with the needs of the ecosystem and the direction we want to take the language? How is this syntax specifically different?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GYodYS1-Jv13pwcTRkrayb3NUWntpPNg_apMMg--Fos?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>I don't like that TC39, an open standard, is blessing possibly one syntax when there are several other possible syntax options.</blockquote></mx-reply>Ok, thank you - but isn't this something we always do when adding new syntax? We bless one syntax that we decide aligns best with the needs of the ecosystem and the direction we want to take the language? How is this syntax specifically different?","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GYodYS1-Jv13pwcTRkrayb3NUWntpPNg_apMMg--Fos"}},"msgtype":"m.text"},"ts":1695789601928,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$CS6iSMkRgZUEzo27nCdfp4e_VmXSVQkGNoqNoU-4ccQ"},
{"content":{"body":"no, we usually invent new syntax from whole cloth","msgtype":"m.text"},"ts":1695789621137,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fnnxYmx_zRuvI0r0fiWu02X1rtJyusqmyxDqkCRRgX8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Right now on the Babel codebase we use ESLint to lint, TSC to type-check, Babel to strip away types, and Rollup to bundle.\n> \n> ESLint and TSC are run transaprently by my editor and on CI, Rollup only happens on CI, and the only step between me writing the code and testing it in Node.js is to compile away types\n\nnode can strip types? but also, `esbuild --watch` is like","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$k_c5kx-fmP-ErjjihcRYKLWoU8zvpPG04NQ5zv6M8-o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Right now on the Babel codebase we use ESLint to lint, TSC to type-check, Babel to strip away types, and Rollup to bundle.<br/><br/>ESLint and TSC are run transaprently by my editor and on CI, Rollup only happens on CI, and the only step between me writing the code and testing it in Node.js is to compile away types</blockquote></mx-reply>node can strip types? but also, <code>esbuild --watch</code> is like","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$k_c5kx-fmP-ErjjihcRYKLWoU8zvpPG04NQ5zv6M8-o"}},"msgtype":"m.text"},"ts":1695789627770,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HoBaD_9h_prv77e-IHjViJiGCn2Algpvmm39HeiYXas"},
{"content":{"body":"we look at prior art, but not literally pick existing syntax","msgtype":"m.text"},"ts":1695789630846,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AJtW3siZ_Bprh8WQCLoiGTcH0LxUTqiC0Avye3BNxWA"},
{"content":{"body":"not a big burden, given that existing stack","m.mentions":{},"msgtype":"m.text"},"ts":1695789632473,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5Cy96fZgHlonDeP2ESsNajaiTdUK7_0Xv_fqFcAiuTk"},
{"content":{"body":" * node could choose to strip types? but also, `esbuild --watch` is like","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$k_c5kx-fmP-ErjjihcRYKLWoU8zvpPG04NQ5zv6M8-o?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Right now on the Babel codebase we use ESLint to lint, TSC to type-check, Babel to strip away types, and Rollup to bundle.<br><br>ESLint and TSC are run transaprently by my editor and on CI, Rollup only happens on CI, and the only step between me writing the code and testing it in Node.js is to compile away types</blockquote></mx-reply> * node could choose to strip types? but also, <code>esbuild --watch</code> is like","m.mentions":{},"m.new_content":{"body":"node could choose to strip types? but also, `esbuild --watch` is like","format":"org.matrix.custom.html","formatted_body":"node could choose to strip types? but also, <code>esbuild --watch</code> is like","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HoBaD_9h_prv77e-IHjViJiGCn2Algpvmm39HeiYXas","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695789638353,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_NNBfhuc8azURxNehE-LIlUw1gVR5ue-q21YNnrdY4M"},
{"content":{"body":"> <@bakkot:matrix.org> node could choose to strip types? but also, `esbuild --watch` is like\n\nWell, browsers can strip types too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HoBaD_9h_prv77e-IHjViJiGCn2Algpvmm39HeiYXas?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>node could choose to strip types? but also, <code>esbuild --watch</code> is like</blockquote></mx-reply>Well, browsers can strip types too","m.relates_to":{"m.in_reply_to":{"event_id":"$HoBaD_9h_prv77e-IHjViJiGCn2Algpvmm39HeiYXas"}},"msgtype":"m.text"},"ts":1695789649988,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$k_0a2y5of2dHFJHBxq1fPVnrCs0cFM-1OHwBaEGPRvI"},
{"content":{"body":"wait that was just \"token soup\" as a negative phrase","m.mentions":{},"msgtype":"m.text"},"ts":1695789653057,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$moCNBEYBSnmCQ_2pbXQQmFa66ZrKTLQfs6Qy5ACVPkg"},
{"content":{"body":" * wait that was just \"token soup\" as a negative phrase from Eemeli just now","m.mentions":{},"m.new_content":{"body":"wait that was just \"token soup\" as a negative phrase from Eemeli just now","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$moCNBEYBSnmCQ_2pbXQQmFa66ZrKTLQfs6Qy5ACVPkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695789663006,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xnxA9NDoAH7DcBpKH4SuJo-GMzwKjzmsQd9Tt_ENzVw"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Well, browsers can strip types too\n\nby slowing down parsing for **everyone**","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$k_0a2y5of2dHFJHBxq1fPVnrCs0cFM-1OHwBaEGPRvI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Well, browsers can strip types too</blockquote></mx-reply>by slowing down parsing for <strong>everyone</strong>","m.relates_to":{"m.in_reply_to":{"event_id":"$k_0a2y5of2dHFJHBxq1fPVnrCs0cFM-1OHwBaEGPRvI"}},"msgtype":"m.text"},"ts":1695789664101,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oFxKRdwwDQCYeDh1_olSsBP2Av2FJjmmQMTleIuhp5c"},
{"content":{"body":"> <@shuyuguo:matrix.org> by slowing down parsing for **everyone**\n\nWould it also slow down parsing for code not using type annotations?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oFxKRdwwDQCYeDh1_olSsBP2Av2FJjmmQMTleIuhp5c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>by slowing down parsing for <strong>everyone</strong></blockquote></mx-reply>Would it also slow down parsing for code not using type annotations?","m.relates_to":{"m.in_reply_to":{"event_id":"$oFxKRdwwDQCYeDh1_olSsBP2Av2FJjmmQMTleIuhp5c"}},"msgtype":"m.text"},"ts":1695789693841,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uj3RzS7pqBreEknONEQBbuNLUVnGh7PUelIwX3-yrlg"},
{"content":{"body":"yes!","msgtype":"m.text"},"ts":1695789703291,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IgJS-H5lmHC8nizGmlueUyDgEbK3mqkbj0CxU2LaqLk"},
{"content":{"body":"shu: Yeah, I think the final syntax needs to be something super cheap to parse. The current proposal isn't it imo.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Yeah, I think the final syntax needs to be something super cheap to parse. The current proposal isn't it imo.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695789708516,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$v8BT7Cdfwre0JfByGjxFYQizRogJfksB7ifIEtZJIb8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Would it also slow down parsing for code not using type annotations?\n\nLikely YES","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uj3RzS7pqBreEknONEQBbuNLUVnGh7PUelIwX3-yrlg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Would it also slow down parsing for code not using type annotations?</blockquote></mx-reply>Likely YES","m.relates_to":{"m.in_reply_to":{"event_id":"$uj3RzS7pqBreEknONEQBbuNLUVnGh7PUelIwX3-yrlg"}},"msgtype":"m.text"},"ts":1695789712874,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$tv8u48k5x1TESQUEWOs_u13pbt4elOxGSaGvsgvRSEc"},
{"content":{"body":"*especially* likely if there's cover grammar-like shenanigans involved","format":"org.matrix.custom.html","formatted_body":"<em>especially</em> likely if there's cover grammar-like shenanigans involved","msgtype":"m.text"},"ts":1695789736827,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pcAFQht5Z5AV_TizQlaL1d0HhY2WiIJz8kG72hBEBxA"},
{"content":{"body":"yup","m.mentions":{},"msgtype":"m.text"},"ts":1695789743572,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$b6ju8tEesHrk8jeXl3PUEusbSrFbeDsOEKD_l832LEI"},
{"content":{"body":"> <@shuyuguo:matrix.org> we look at prior art, but not literally pick existing syntax\n\nWell but that is what we are doing here too? We don't literally pick TS syntax, we pick syntax that is similar to TypeScript to ease migration (we did this before with decorators), but ultimately it's a subset that is easier to parse and unambiguous. I don't see this as standardising TypeScript, I see this as standardising a syntax space for types that looks similar to TypeScript (inspiration), because it's what folks in the ecosystem are familiar with ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AJtW3siZ_Bprh8WQCLoiGTcH0LxUTqiC0Avye3BNxWA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we look at prior art, but not literally pick existing syntax</blockquote></mx-reply>Well but that is what we are doing here too? We don't literally pick TS syntax, we pick syntax that is similar to TypeScript to ease migration (we did this before with decorators), but ultimately it's a subset that is easier to parse and unambiguous. I don't see this as standardising TypeScript, I see this as standardising a syntax space for types that looks similar to TypeScript (inspiration), because it's what folks in the ecosystem are familiar with","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AJtW3siZ_Bprh8WQCLoiGTcH0LxUTqiC0Avye3BNxWA"}},"msgtype":"m.text"},"ts":1695789762990,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$97wcbH_GLq-djMMkOCKX-juPZkWGVXOTe-p63U4kqwc"},
{"content":{"body":"The advantage of \"token soup\" is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.","m.mentions":{},"msgtype":"m.text"},"ts":1695789763957,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ"},
{"content":{"body":"I wonder if there is some perf goal we could aim at. Such as \"no cover grammar needed unless there is a token clearly introducing a type context\"","msgtype":"m.text"},"ts":1695789764663,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0"},
{"content":{"body":"the slow part of the annotations is single-char stepping. the slow part of the not-annotations is the other weird complexity layered on top.","m.mentions":{},"msgtype":"m.text"},"ts":1695789779561,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A7NC1R6a95ItaqAHGk5O6i9wef3XOKxtX3nSPi5Yt7g"},
{"content":{"body":"> <@rbuckton:matrix.org> The advantage of \"token soup\" is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.\n\nbut it would not let them do stuff like `satisfies`, etc","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The advantage of &quot;token soup&quot; is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.</blockquote></mx-reply>but it would not let them do stuff like <code>satisfies</code>, etc","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ"}},"msgtype":"m.text"},"ts":1695789781098,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9oiwNzgqlNAXkjHCnoeTqjzczBYzS6KWHUSZP-DjqGA"},
{"content":{"body":"TS introduces new keywords... pretty often","m.mentions":{},"msgtype":"m.text"},"ts":1695789786696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D9UH3ekJEpaj1GTyp14HxQP0oNCXxuZLJlBiGbWRW84"},
{"content":{"body":"> <@rbuckton:matrix.org> The advantage of \"token soup\" is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.\n\nthere are very few things in this space that wouldn't benefit from going through tc39","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The advantage of &quot;token soup&quot; is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.</blockquote></mx-reply>there are very few things in this space that wouldn't benefit from going through tc39","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ"}},"msgtype":"m.text"},"ts":1695789796732,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hMArN9-nA-7wxOmx6jClCueVGBe84BItfJGqauf3GHA"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I wonder if there is some perf goal we could aim at. Such as \"no cover grammar needed unless there is a token clearly introducing a type context\"\n\nOr if we managed to entirely avoid new cover grammars, so that the check is just \"is the enxt token a `::<`/`:`?\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I wonder if there is some perf goal we could aim at. Such as &quot;no cover grammar needed unless there is a token clearly introducing a type context&quot;</blockquote></mx-reply>Or if we managed to entirely avoid new cover grammars, so that the check is just \"is the enxt token a <code>::&lt;</code>/<code>:</code>?\"","m.relates_to":{"m.in_reply_to":{"event_id":"$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0"}},"msgtype":"m.text"},"ts":1695789820303,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SQoqDoeD2vQbRkdIJQDCX-RCPteV-oVCMTfG9MVZKF0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I wonder if there is some perf goal we could aim at. Such as \"no cover grammar needed unless there is a token clearly introducing a type context\"\n\ni think that assumes that you've already convinced engines that it's worthwhile to add *anything* here, and i think we are not yet convinced. at least not myself and michael","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I wonder if there is some perf goal we could aim at. Such as &quot;no cover grammar needed unless there is a token clearly introducing a type context&quot;</blockquote></mx-reply>i think that assumes that you've already convinced engines that it's worthwhile to add <em>anything</em> here, and i think we are not yet convinced. at least not myself and michael","m.relates_to":{"m.in_reply_to":{"event_id":"$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0"}},"msgtype":"m.text"},"ts":1695789822895,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CAzWpNRCwh2jhtg5LRvVEgh_ePe7bQ4kVj6YXvrKloc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I wonder if there is some perf goal we could aim at. Such as \"no cover grammar needed unless there is a token clearly introducing a type context\"\n\n * Or if we managed to entirely avoid new cover grammars, so that the check is just \"is the next token a `::<`/`:`?\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$O5t5CD7-qR1P5OO_4wSnzr5fRtlpxeVkMynmRekehZ0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I wonder if there is some perf goal we could aim at. Such as \"no cover grammar needed unless there is a token clearly introducing a type context\"</blockquote></mx-reply> * Or if we managed to entirely avoid new cover grammars, so that the check is just \"is the next token a <code>::&lt;</code>/<code>:</code>?\"","m.new_content":{"body":"Or if we managed to entirely avoid new cover grammars, so that the check is just \"is the next token a `::<`/`:`?\"","format":"org.matrix.custom.html","formatted_body":"Or if we managed to entirely avoid new cover grammars, so that the check is just \"is the next token a <code>::&lt;</code>/<code>:</code>?\"","msgtype":"m.text"},"m.relates_to":{"event_id":"$SQoqDoeD2vQbRkdIJQDCX-RCPteV-oVCMTfG9MVZKF0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695789825401,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$22-1XEbmDdezcGkbraSY-DiYQCnH_QRs0_ho_Aizs68"},
{"content":{"body":"> <@bakkot:matrix.org> but it would not let them do stuff like `satisfies`, etc\n\nTrue, but I think that's an acceptable tradeoff.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9oiwNzgqlNAXkjHCnoeTqjzczBYzS6KWHUSZP-DjqGA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but it would not let them do stuff like <code>satisfies</code>, etc</blockquote></mx-reply>True, but I think that's an acceptable tradeoff.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9oiwNzgqlNAXkjHCnoeTqjzczBYzS6KWHUSZP-DjqGA"}},"msgtype":"m.text"},"ts":1695789856244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YMI8znH85MyE13pJbFGe9hJ2ay7vB6CEWfzcH5fDVUE"},
{"content":{"body":"though to be clear i do not share msaboff's concerns about picking winners as strongly","msgtype":"m.text"},"ts":1695789902605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Z49dePPaeMDTZcglBOG6gy5i_1U-GR2366Y6JKVLIYQ"},
{"content":{"body":"i think where i am ending up here is that if we can't get any runtime benefit here, runtimes shouldn't deal with this, and it shouldn't move forward","m.mentions":{},"msgtype":"m.text"},"ts":1695789967832,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PflVCPaDNO-_OIdhg6nFh8EjaEpGtyY2I3E83I3O2B0"},
{"content":{"body":"and its pretty clear at this point that there will be no runtime benefit ","m.mentions":{},"msgtype":"m.text"},"ts":1695789984476,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LfVYlJU5CarokWAOCFAAk42V5P_PObMuYnjIliMK5vE"},
{"content":{"body":"I just think there's a lot of terribly misleading verbiage surrounding \"runtime\" and erasure","m.mentions":{},"msgtype":"m.text"},"ts":1695789988693,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5DCJT5qipzE3hNM4uQKDclfEUEIit2QQDYdewjetJ20"},
{"content":{"body":"every engine has a parser for early errors","m.mentions":{},"msgtype":"m.text"},"ts":1695790012138,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$Y1xx3Pr9hZu2Otkn-rfef54MOtj43Niq8gOo_uWFvpQ"},
{"content":{"body":"\"runtime benefit\" in my sentence is anything from engines using the type annotations to make code faster to simple string reflection","m.mentions":{},"msgtype":"m.text"},"ts":1695790039848,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FsiSpPx_AKzdDc58g4eGngHM9ctJFQs0BvfAylAzG0k"},
{"content":{"body":"if you just read this presentation you would think that engines will be using this information statically and _then_ throw it away at runtime","format":"org.matrix.custom.html","formatted_body":"if you just read this presentation you would think that engines will be using this information statically and <em>then</em> throw it away at runtime","m.mentions":{},"msgtype":"m.text"},"ts":1695790062180,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$JpZwKeF7udfh8wma_XHH0LhkwA_3QtimNZl7olt23v0"},
{"content":{"body":"and if that's impossible (which it seems like it is?) then this seems just bad...?","m.mentions":{},"msgtype":"m.text"},"ts":1695790107085,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$yKy61qU3IOIuj_qQdE_vuqJubDzUA4kU_bma7FfWHss"},
{"content":{"body":"Again, these arguments generally would argue against Python's type annotations as well.","m.mentions":{},"msgtype":"m.text"},"ts":1695790143879,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0nrPDnnDskR-G2EyBwFHB3Yb0CDf6dN0KTvfwQPCLbM"},
{"content":{"body":"but mostly I'm just concerned about how confused I've felt.","m.mentions":{},"msgtype":"m.text"},"ts":1695790144516,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$iCUhtbU4ykMG9oHVQfJYPC_Bw67KQbuKtlUAT-e9zqo"},
{"content":{"body":"Make sure you actually *mean* for your counterargument to be that strong.","format":"org.matrix.custom.html","formatted_body":"Make sure you actually <em>mean</em> for your counterargument to be that strong.","m.mentions":{},"msgtype":"m.text"},"ts":1695790153790,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CuUz3HW24kM88VKxNu9IXK51YxOWDJ_6DYk6_48acu4"},
{"content":{"body":"> <@tabatkins:matrix.org> Again, these arguments generally would argue against Python's type annotations as well.\n\npython type annotations are reflectable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0nrPDnnDskR-G2EyBwFHB3Yb0CDf6dN0KTvfwQPCLbM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Again, these arguments generally would argue against Python&#39;s type annotations as well.</blockquote></mx-reply>python type annotations are reflectable","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0nrPDnnDskR-G2EyBwFHB3Yb0CDf6dN0KTvfwQPCLbM"}},"msgtype":"m.text"},"ts":1695790161526,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cGB2F9feGk9pWqw590eRbBLLIeokezQ-53K9Uc2vGr0"},
{"content":{"body":"and this property is used to huge advantage in the ecosystem","m.mentions":{},"msgtype":"m.text"},"ts":1695790172702,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CLD-nd4Slh8ttywK2FMVc_v9IgeE2pHLwGLQ3QBwUgc"},
{"content":{"body":"> <@devsnek:matrix.org> \"runtime benefit\" in my sentence is anything from engines using the type annotations to make code faster to simple string reflection\n\nSo what should an implementation do if the type is violated while processing?  Throw?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FsiSpPx_AKzdDc58g4eGngHM9ctJFQs0BvfAylAzG0k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>&quot;runtime benefit&quot; in my sentence is anything from engines using the type annotations to make code faster to simple string reflection</blockquote></mx-reply>So what should an implementation do if the type is violated while processing?  Throw?","m.relates_to":{"m.in_reply_to":{"event_id":"$FsiSpPx_AKzdDc58g4eGngHM9ctJFQs0BvfAylAzG0k"}},"msgtype":"m.text"},"ts":1695790176280,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$K-tG4c8KhBe3siAYJtWZH0Mc7aXdxI1cyfgfw4nt1wE"},
{"content":{"body":"Mehhhhh the reflection barely matters if at all.","m.mentions":{},"msgtype":"m.text"},"ts":1695790176679,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$u1hVYY1-_sThO6G3vR59g61s6qMGkvc-lv9jBbimWdk"},
{"content":{"body":"also python is categorically different than JS","m.mentions":{},"msgtype":"m.text"},"ts":1695790178906,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sPvAKnuB7CHvZqJWuuHdWM-sR4jQNTxQ6TNm0M0qaDE"},
{"content":{"body":" * also python is categorically different than JS, because The Web","m.mentions":{},"m.new_content":{"body":"also python is categorically different than JS, because The Web","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sPvAKnuB7CHvZqJWuuHdWM-sR4jQNTxQ6TNm0M0qaDE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695790205269,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$O-lBqFyS8QNOwpGQK2aGSuzgekb6Vo2HzXRkxAi3ApE"},
{"content":{"body":"> <@ljharb:matrix.org> there are very few things in this space that wouldn't benefit from going through tc39\n\nZooming out (and ignoring the specifics of soup vs concrete grammar), one of the whole motivations of this proposal is to ensure coordination of real-life type syntax with tc39.  By default, if we do nothing type syntax will iterate outside tc39 which brings coordination risk.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hMArN9-nA-7wxOmx6jClCueVGBe84BItfJGqauf3GHA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>there are very few things in this space that wouldn't benefit from going through tc39</blockquote></mx-reply>Zooming out (and ignoring the specifics of soup vs concrete grammar), one of the whole motivations of this proposal is to ensure coordination of real-life type syntax with tc39.  By default, if we do nothing type syntax will iterate outside tc39 which brings coordination risk.","m.relates_to":{"m.in_reply_to":{"event_id":"$hMArN9-nA-7wxOmx6jClCueVGBe84BItfJGqauf3GHA"}},"msgtype":"m.text"},"ts":1695790209500,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$RJky2ly3hs6sJuQKpLKAuk9odQ8K4Mn1yPig_O2C0Xw"},
{"content":{"body":"mypy doesn't execute python and inspect the reflection, it parses itself","m.mentions":{},"msgtype":"m.text"},"ts":1695790211099,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$37XQ8vu6nZCUmm3-KbvXaX89GSONq_8yjkM2lvfI0Ks"},
{"content":{"body":"> <@msaboff:matrix.org> So what should an implementation do if the type is violated while processing?  Throw?\n\ni don't think implementations should try to do it. i'm just saying, if everything we can possibly imagine is off the table, then i don't think its worth it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$K-tG4c8KhBe3siAYJtWZH0Mc7aXdxI1cyfgfw4nt1wE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>So what should an implementation do if the type is violated while processing?  Throw?</blockquote></mx-reply>i don't think implementations should try to do it. i'm just saying, if everything we can possibly imagine is off the table, then i don't think its worth it","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$K-tG4c8KhBe3siAYJtWZH0Mc7aXdxI1cyfgfw4nt1wE"}},"msgtype":"m.text"},"ts":1695790219066,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9h7NheQf3Gxu-Rnv01E8W8uQzofe6eA-NOF-MI51q00"},
{"content":{"body":"Python also isn't shipped to me over the network every time I want to run it?","m.mentions":{},"msgtype":"m.text"},"ts":1695790223907,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$kh1QJHGayFrHziAfjz3HmR-p9MtXZMW24GfIfYjXVUo"},
{"content":{"body":"sure, i run a build step on my python when i ship a new version to pypi","m.mentions":{},"msgtype":"m.text"},"ts":1695790245161,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$bthwQrShW0EvG7jZLN1B34vHIKUHDcnCt-qkgwxHLrU"},
{"content":{"body":"> <@michaelficarra:matrix.org> Python also isn't shipped to me over the network every time I want to run it?\n\none would hope","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kh1QJHGayFrHziAfjz3HmR-p9MtXZMW24GfIfYjXVUo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>Python also isn&#39;t shipped to me over the network every time I want to run it?</blockquote></mx-reply>one would hope","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kh1QJHGayFrHziAfjz3HmR-p9MtXZMW24GfIfYjXVUo"}},"msgtype":"m.text"},"ts":1695790245659,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tOakrxGpTGmUAKdgmdNfTNnLk9pXAoPaYD9v54Asdc0"},
{"content":{"body":"just wait","m.mentions":{},"msgtype":"m.text"},"ts":1695790257042,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$tYdxJnNEhwitWi4zkq0Z3u5KWePKxJIYnndAJAdFHeg"},
{"content":{"body":"> <@tabatkins:matrix.org> Mehhhhh the reflection barely matters if at all.\n\nthere are several major libraries that make use of it. some of them are for dependency injection, which i find distasteful, but its still a thing. there are other cool examples like discord.py which uses annotations to build string parsing. i'm talking about packages with hundreds of thousands of downloads per day *minimum* here.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u1hVYY1-_sThO6G3vR59g61s6qMGkvc-lv9jBbimWdk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>Mehhhhh the reflection barely matters if at all.</blockquote></mx-reply>there are several major libraries that make use of it. some of them are for dependency injection, which i find distasteful, but its still a thing. there are other cool examples like discord.py which uses annotations to build string parsing. i'm talking about packages with hundreds of thousands of downloads per day <em>minimum</em> here.","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$u1hVYY1-_sThO6G3vR59g61s6qMGkvc-lv9jBbimWdk"}},"msgtype":"m.text"},"ts":1695790432523,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-0g8LKMy9zdggz1j-Na5f4V7ZVu1MBrY5dOnGM7vcK8"},
{"content":{"body":"ok sure, annotations for non-type-checking reasons i guess. I've never used these *because* i use the annotations for types instead.","format":"org.matrix.custom.html","formatted_body":"ok sure, annotations for non-type-checking reasons i guess. I've never used these <em>because</em> i use the annotations for types instead.","m.mentions":{},"msgtype":"m.text"},"ts":1695790487327,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$734jc-CoD6EnhU8VhGAoQWcntqBERkBE-Q1-1t8OPIo"},
{"content":{"body":"(you can only do one or the other, I believe)","m.mentions":{},"msgtype":"m.text"},"ts":1695790496607,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PyAjEl1n-bYlGWSd37PJEC4Xf5DfXNoBRkIUz6apil4"},
{"content":{"body":"yeah i agree there","m.mentions":{},"msgtype":"m.text"},"ts":1695790506945,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zZPTG-CVzlXAkbFdQFrxTpAPxT-lC2w5sVBpsdaU70k"},
{"content":{"body":"to be clear, I don't claim that there are _zero_ projects which are both complex and would benefit from this ","format":"org.matrix.custom.html","formatted_body":"to be clear, I don't claim that there are <em>zero</em> projects which are both complex and would benefit from this","m.mentions":{},"msgtype":"m.text"},"ts":1695790586030,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HNno5kaEnYOsHyXjEORkNaO-ppOxVpNNhIcQ7rmTgr8"},
{"content":{"body":"> <@rbuckton:matrix.org> The advantage of \"token soup\" is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.\n\nAs I showed in the presentation earlier in the year, that doesn't actually work. For example, you can't even do something as trivial as using existing ECMAScript expression syntax to calculate a constant inside a token soup.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The advantage of &quot;token soup&quot; is that typed languages can continue to innovate within that space without requiring advancing a proposal through TC39 for what is otherwise just a comment.</blockquote></mx-reply>As I showed in the presentation earlier in the year, that doesn't actually work. For example, you can't even do something as trivial as using existing ECMAScript expression syntax to calculate a constant inside a token soup.","m.relates_to":{"m.in_reply_to":{"event_id":"$x5A8hvbnhiAeDyyCWfRNFH15_UCngzjjmX7xptsNntQ"}},"msgtype":"m.text"},"ts":1695790603585,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$HdDzyz8LMtwNdzzM7bppXxeFK4Uf19St7xGv4pepwyo"},
{"content":{"body":"so, is it really impossible to bring JSX into the language?","m.mentions":{},"msgtype":"m.text"},"ts":1695790613610,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$1qfuEczJnH164E0ftlDzt3CPJ-rfJI1ALxDWtOiMSNw"},
{"content":{"body":"i think one of the main challenges is how you can lexically indicate what the syntax is equivalent to - ie `React.createElement`, `h`, etc","format":"org.matrix.custom.html","formatted_body":"i think one of the main challenges is how you can lexically indicate what the syntax is equivalent to - ie <code>React.createElement</code>, <code>h</code>, etc","m.mentions":{},"msgtype":"m.text"},"ts":1695790652969,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MDR9Jyf3ylq_l6VxmGCQiofxo-gpHCVy_iNWrJHqjX4"},
{"content":{"body":"otherwise it'd just need to be hardcoded to make an object literal of some kind","m.mentions":{},"msgtype":"m.text"},"ts":1695790687886,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xeiXApaUpHLEVeRCtQJ4PxMSFwF5_qpSLMDAc-whW1U"},
{"content":{"body":"yeah it would have to be pojo","m.mentions":{},"msgtype":"m.text"},"ts":1695790696919,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$tk3P6WWtRIdJ4tZeVvumYBzK4--j5gEWI0hvF2hsSbk"},
{"content":{"body":"> <@ljharb:matrix.org> i think one of the main challenges is how you can lexically indicate what the syntax is equivalent to - ie `React.createElement`, `h`, etc\n\nof course our own representation and ui library comes to support us","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MDR9Jyf3ylq_l6VxmGCQiofxo-gpHCVy_iNWrJHqjX4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i think one of the main challenges is how you can lexically indicate what the syntax is equivalent to - ie <code>React.createElement</code>, <code>h</code>, etc</blockquote></mx-reply>of course our own representation and ui library comes to support us","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MDR9Jyf3ylq_l6VxmGCQiofxo-gpHCVy_iNWrJHqjX4"}},"msgtype":"m.text"},"ts":1695790702026,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7FMGd1hPJiPw4SxT8ML2XC1_Ahdx0f5gcJQV2JPQAkw"},
{"content":{"body":"> <@devsnek:matrix.org> yeah it would have to be pojo\n\nor curried","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tk3P6WWtRIdJ4tZeVvumYBzK4--j5gEWI0hvF2hsSbk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>yeah it would have to be pojo</blockquote></mx-reply>or curried","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$tk3P6WWtRIdJ4tZeVvumYBzK4--j5gEWI0hvF2hsSbk"}},"msgtype":"m.text"},"ts":1695790721346,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LIa8kTS13T29Hg6dG8C02KlAE6EKUkUsqnqaroBuePE"},
{"content":{"body":"`(<p>hi</p>)(h)`","format":"org.matrix.custom.html","formatted_body":"<code>(&lt;p&gt;hi&lt;/p&gt;)(h)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695790739547,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$S3o39XV3nhrvD0x8X6-tPZHft0ve6hgV66iEllnn0Fs"},
{"content":{"body":"is bloomberg going to get rid of tools?","m.mentions":{},"msgtype":"m.text"},"ts":1695790791644,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OeU61PkMhOz4nSsxffyKN2iMBetMsNPGOigwrauqAOM"},
{"content":{"body":"run code in the void","m.mentions":{},"msgtype":"m.text"},"ts":1695790820535,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$sj-SEUIy0YhzgvlzyAi-JbEDW4IQ0BYGJMz68tu6ps8"},
{"content":{"body":"i got bad news for you if you think JS is directly executed by the metal","msgtype":"m.text"},"ts":1695790846434,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$prTraBRu9FRmHkKkqsMsc0s_od2K0siD3a7g4lq_Iac"},
{"content":{"body":"one of the stated goals tho is \"unfork the ecosystem\"; \"unfork\" means 0 fork, not \"less forked\"","m.mentions":{},"msgtype":"m.text"},"ts":1695790850208,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GFbZdkkqOuvfZR9vvR8NhKKGBs7pzpgg0WVPhT94xP8"},
{"content":{"body":"\"spork the ecosystem\" doesn't have the same ring to it","m.mentions":{},"msgtype":"m.text"},"ts":1695790864221,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r3M7sbuaZ5DBVeqOmZvw7zgI-hYhL4FXl7_B436Eep0"},
{"content":{"body":"ljharb: this is actually a *new* fork!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: this is actually a <em>new</em> fork!","msgtype":"m.text"},"ts":1695790864262,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-Ey6jAM5dBWEQ08qluswObyZdu2sk_3ulkhfazjV9NA"},
{"content":{"body":"critical fork","m.mentions":{},"msgtype":"m.text"},"ts":1695790876120,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-e8fTaD81AC7T2gp8dfqxAVIhTMlvPYF3igDO73PSiA"},
{"content":{"body":"> <@shuyuguo:matrix.org> i got bad news for you if you think JS is directly executed by the metal\n\neven the array accesses? 🥺 /s","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$prTraBRu9FRmHkKkqsMsc0s_od2K0siD3a7g4lq_Iac?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i got bad news for you if you think JS is directly executed by the metal</blockquote></mx-reply>even the array accesses? 🥺 /s","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$prTraBRu9FRmHkKkqsMsc0s_od2K0siD3a7g4lq_Iac"}},"msgtype":"m.text"},"ts":1695790885334,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$QDdut0rPvnRebVCnbJzfq-D5gNFJHxR5dI2O9pS4qqM"},
{"content":{"body":"*especially* the array accesses","format":"org.matrix.custom.html","formatted_body":"<em>especially</em> the array accesses","m.mentions":{},"msgtype":"m.text"},"ts":1695790902185,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MzoO4nwho_GJTVzoZkYkcwYTAQodTTKRpG-699RmujU"},
{"content":{"body":"👉️🥺👈️","msgtype":"m.text"},"ts":1695790915074,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8I-oiCq3IAVAUQK-yBRk1NV8eenekGJTWWiYxSQ4TEU"},
{"content":{"body":"is that you putting your fingers in your ears","m.mentions":{},"msgtype":"m.text"},"ts":1695790926111,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$o8pSM1MKBse26ngaC6OV2RYPj45mN7pDXprAw4JYn0I"},
{"content":{"body":"it can be that too","m.mentions":{},"msgtype":"m.text"},"ts":1695790935727,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$-BxMRMZc5WnwWN5ONvgZX28dLBSxmBNqf6_MfRa7qOA"},
{"content":{"body":"no i wanted to make that meme where the fingers are together","msgtype":"m.text"},"ts":1695790937269,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eDqjNYs76DBGr7kbzkIO985JPiG2flalJ9xNWPM12Oo"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1695790944679,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5QMeyEbP4vUKNAuckADflS_YjNOg1tkny9sa6fVlGKY"},
{"content":{"body":"dunno how to make that on one line","msgtype":"m.text"},"ts":1695790945852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gqyd2A6xx-rxhi91GOFv3ObMsvV_ZJlO_zYJ7DlC2tU"},
{"content":{"body":"A+ reference","m.mentions":{},"m.relates_to":{"event_id":"$MzoO4nwho_GJTVzoZkYkcwYTAQodTTKRpG-699RmujU","is_falling_back":true,"m.in_reply_to":{"event_id":"$MzoO4nwho_GJTVzoZkYkcwYTAQodTTKRpG-699RmujU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695790952206,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mhD9gYz2hr0KIxvtR-zmHfVy_QhUjeZcHGwcG61uk7g"},
{"content":{"body":"> <@ljharb:matrix.org> one of the stated goals tho is \"unfork the ecosystem\"; \"unfork\" means 0 fork, not \"less forked\"\n\nlet's bring JSX in!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GFbZdkkqOuvfZR9vvR8NhKKGBs7pzpgg0WVPhT94xP8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>one of the stated goals tho is &quot;unfork the ecosystem&quot;; &quot;unfork&quot; means 0 fork, not &quot;less forked&quot;</blockquote></mx-reply>let's bring JSX in!","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GFbZdkkqOuvfZR9vvR8NhKKGBs7pzpgg0WVPhT94xP8"}},"msgtype":"m.text"},"ts":1695790954296,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$FUCO5izG30yDXcwQ_UPmJ6NwkOhLSSYpvQkz_kjB4uU"},
{"content":{"body":"> <@devsnek:matrix.org> is bloomberg going to get rid of tools?\n\nI hope not or I'll be out of a job.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OeU61PkMhOz4nSsxffyKN2iMBetMsNPGOigwrauqAOM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>is bloomberg going to get rid of tools?</blockquote></mx-reply>I hope not or I'll be out of a job.","m.relates_to":{"m.in_reply_to":{"event_id":"$OeU61PkMhOz4nSsxffyKN2iMBetMsNPGOigwrauqAOM"}},"msgtype":"m.text"},"ts":1695790962321,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$0VdnvYpHh_5O2r9KBldui7pdv-Pk76JRUppdY5Edkuc"},
{"content":{"body":"danielrosenwasser: we're very interested in more devtools collaboration with TypeScript :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: we're very interested in more devtools collaboration with TypeScript :)","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1695790969852,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Hgp6kzfByWgW37jmaNc4H14uNJquf6DagI2WwepRjGQ"},
{"content":{"body":"i am a little bit disappointed that we didn't get to discuss topics around in-browser devtools more","m.mentions":{},"msgtype":"m.text"},"ts":1695790970311,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$CgTktyQPFyrWDCLOkczfKRGkxrUXANE_HmIdszLiCyA"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> i am a little bit disappointed that we didn't get to discuss topics around in-browser devtools more\n\ni remain of the opinion the most highly impactful thing is that, exactly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CgTktyQPFyrWDCLOkczfKRGkxrUXANE_HmIdszLiCyA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>i am a little bit disappointed that we didn&#39;t get to discuss topics around in-browser devtools more</blockquote></mx-reply>i remain of the opinion the most highly impactful thing is that, exactly","m.relates_to":{"m.in_reply_to":{"event_id":"$CgTktyQPFyrWDCLOkczfKRGkxrUXANE_HmIdszLiCyA"}},"msgtype":"m.text"},"ts":1695790990532,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WcmkHF_rEMOfbhbY7xTTPxaGB84QOScZwQxBD7iwukk"},
{"content":{"body":"That was something that flew by the queue a few times","m.mentions":{},"msgtype":"m.text"},"ts":1695790992470,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$KfCXsm4Gag7WhNrB3AhDTVMHfw75ftQL_6fA0H6gAEQ"},
{"content":{"body":"not changing the standard","msgtype":"m.text"},"ts":1695790994894,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eYWrNDkfLXyb0x7ZQeU-osd5rk5iM8E9wnjigVupxLI"},
{"content":{"body":"Then I'd love to talk about that too","m.mentions":{},"msgtype":"m.text"},"ts":1695791008830,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$fmNEBImzDPyO4tlKFX4VekDApa6Lfegr5zPBh1ae7qI"},
{"content":{"body":"the coolest thing about devtools changes is that you can just pr them","m.mentions":{},"msgtype":"m.text"},"ts":1695791019937,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kZqfE-4RsCVy_SnjxjRjVo3KpUWK7ibYqrMMz6FEsc8"},
{"content":{"body":"(i say that as a non-devtools representative)","msgtype":"m.text"},"ts":1695791022381,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MVCLd0rLmgQzPlCEnXeaMU8DOTfJUJ-xo3KLuALAHxg"},
{"content":{"body":"you don't need plenary approval","m.mentions":{},"msgtype":"m.text"},"ts":1695791025517,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8CL2cUTm8AUPOBSIRt6Q1mJIXOF5MV43xtJ3FN0hHoY"},
{"content":{"body":"> <@shuyuguo:matrix.org> (i say that as a non-devtools representative)\n\nbut i have talked with them about it!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MVCLd0rLmgQzPlCEnXeaMU8DOTfJUJ-xo3KLuALAHxg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>(i say that as a non-devtools representative)</blockquote></mx-reply>but i have talked with them about it!","m.relates_to":{"m.in_reply_to":{"event_id":"$MVCLd0rLmgQzPlCEnXeaMU8DOTfJUJ-xo3KLuALAHxg"}},"msgtype":"m.text"},"ts":1695791055239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lm3NSpuOhjzZu1342OhzBXeV7ZQHENMp6g4exBASOf4"},
{"content":{"body":"bradley and i talking to v8 about devtools improvements in node is where the \"repl goal\" stuff came from","m.mentions":{},"msgtype":"m.text"},"ts":1695791097170,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eySkURjzgpeJbhDSPePp8RSOVazcmfrEuvTWE0NB1kA"},
{"content":{"body":"it goes full circle","m.mentions":{},"msgtype":"m.text"},"ts":1695791109055,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HvmjQ4kDpD53tiAUTE72v9lHsy2hqBbrgEZA4R61Kj0"},
{"content":{"body":"so let me try to summarize my thoughts:\n\n- I agree there is would be some benefit for at least some projects, including both beginners and complex projects\n- I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and _definitely_ won't cover JSX\n- and this proposal will constrain the growth of TS, e.g. no new `satisfies`-like keywords, which TS has wanted to add lots of historically\n- the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console\n- the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain\n\n- given all that, the costs do not seem worth the benefits, to me.","format":"org.matrix.custom.html","formatted_body":"<p>so let me try to summarize my thoughts:</p>\n<ul>\n<li>\n<p>I agree there is would be some benefit for at least some projects, including both beginners and complex projects</p>\n</li>\n<li>\n<p>I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and <em>definitely</em> won't cover JSX</p>\n</li>\n<li>\n<p>and this proposal will constrain the growth of TS, e.g. no new <code>satisfies</code>-like keywords, which TS has wanted to add lots of historically</p>\n</li>\n<li>\n<p>the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console</p>\n</li>\n<li>\n<p>the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain</p>\n</li>\n<li>\n<p>given all that, the costs do not seem worth the benefits, to me.</p>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695791111678,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bi7I7by-DEDacqWNs00x261YsXcf0dr0gXCsNSSYbdk"},
{"content":{"body":"BTW we worked on presenting the motivation in this presentation: https://onedrive.live.com/view.aspx?resid=5D3264BDC1CB4F5B!5615&authkey=!ADFHxW4BxojKreE","msgtype":"m.text"},"ts":1695791137344,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5xRofDghxT9Wuyfv9owbX857c5W_aZaIy06k3WWxYDk"},
{"content":{"body":"I probably don't need to say it, buuuut: for the type annotations proposal, our meeting notes, including summary+conclusion get referenced quite a lot, so we should collectively take extra care to clean them up, ensure accuracy, etc","m.mentions":{},"msgtype":"m.text"},"ts":1695791159036,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$E07OL1gaDfj2qsM46Hh25ZkmOko2g-3GuLQPkb86fLA"},
{"content":{"body":"also like, \"runtime\" as a count noun is one of the worst words our industry has ever devised","m.mentions":{},"msgtype":"m.text"},"ts":1695791197631,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$-VJbm-w2f6f4tSd4ES1dgFSwabdVafo4xLkkVttaUTY"},
{"content":{"body":"> <@devsnek:matrix.org> bradley and i talking to v8 about devtools improvements in node is where the \"repl goal\" stuff came from\n\nright, I still hope we can get back around to the repl goal proposal...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eySkURjzgpeJbhDSPePp8RSOVazcmfrEuvTWE0NB1kA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>bradley and i talking to v8 about devtools improvements in node is where the &quot;repl goal&quot; stuff came from</blockquote></mx-reply>right, I still hope we can get back around to the repl goal proposal...","m.relates_to":{"m.in_reply_to":{"event_id":"$eySkURjzgpeJbhDSPePp8RSOVazcmfrEuvTWE0NB1kA"}},"msgtype":"m.text"},"ts":1695791204527,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$66J0UKJ3X-1msOop9F9RxM1o2FvCPPGooG1dwaLmBb0"},
{"content":{"body":"and it's disappointing that people seem to be imagining that we'd never have alignment at that level","msgtype":"m.text"},"ts":1695791227342,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vc27ZCoN7IuzFOYVf3E6_CBZ_S0g1P8Qvm-pcP9zxU4"},
{"content":{"body":"yeah i think we can define some minimum behavior pretty easily. just need people who want to spend time on it","m.mentions":{},"msgtype":"m.text"},"ts":1695791258237,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$B2BLJsRpBVWFn61QxRDfyPluzuIuB-j3pJ_UwaG76B8"},
{"content":{"body":"....and also have time to spend on it","m.mentions":{},"msgtype":"m.text"},"ts":1695791267656,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Jpq-RSkNRRaKXn52s2RO39KnzYig7-Yd6hMSQuJ3Wvk"},
{"content":{"body":"> <@bakkot:matrix.org> so let me try to summarize my thoughts:\n> \n> - I agree there is would be some benefit for at least some projects, including both beginners and complex projects\n> - I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and _definitely_ won't cover JSX\n> - and this proposal will constrain the growth of TS, e.g. no new `satisfies`-like keywords, which TS has wanted to add lots of historically\n> - the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console\n> - the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain\n> \n> - given all that, the costs do not seem worth the benefits, to me.\n\nthis captures my main concerns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bi7I7by-DEDacqWNs00x261YsXcf0dr0gXCsNSSYbdk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>so let me try to summarize my thoughts:</p>\n<ul>\n<li>\n<p>I agree there is would be some benefit for at least some projects, including both beginners and complex projects</p>\n</li>\n<li>\n<p>I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and <em>definitely</em> won't cover JSX</p>\n</li>\n<li>\n<p>and this proposal will constrain the growth of TS, e.g. no new <code>satisfies</code>-like keywords, which TS has wanted to add lots of historically</p>\n</li>\n<li>\n<p>the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console</p>\n</li>\n<li>\n<p>the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain</p>\n</li>\n<li>\n<p>given all that, the costs do not seem worth the benefits, to me.</p>\n</li>\n</ul>\n</blockquote></mx-reply>this captures my main concerns","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Bi7I7by-DEDacqWNs00x261YsXcf0dr0gXCsNSSYbdk"}},"msgtype":"m.text"},"ts":1695791313424,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Vq1kc6m-aPXqNuhZt_o3FgdDPyGQUzn_NDPCZibQiSY"},
{"content":{"body":"yeah same","m.mentions":{},"msgtype":"m.text"},"ts":1695791361084,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hvVnn-JDH7UaXW-wZA6YgCQDtVfkm0sURbYwMgJnLjA"},
{"content":{"body":" * yeah same, modulo reflection","m.mentions":{},"m.new_content":{"body":"yeah same, modulo reflection","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hvVnn-JDH7UaXW-wZA6YgCQDtVfkm0sURbYwMgJnLjA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695791378782,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3Af7-EsfJRUXVWSLZgjCW-0H-ATCCOvox1fGmj01ms0"},
{"content":{"body":"Why don't we just define a binary AST and require all code to be compiled to that?","msgtype":"m.text"},"ts":1695791536696,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0e4p9InBWk4-oNDPM6rhBsWwCdel_YWlXRDf-BNH73Y"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1695791546389,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oerVYFPJTDhJPSa6qfWSoEszPRRzLmEwqtYT1GDtQMU"},
{"content":{"body":"i'd like that","msgtype":"m.text"},"ts":1695791577671,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VL7kdxDZTKaQv0IhDrZBQCZ06Ge09_8tOqJ2qo8ZgUk"},
{"content":{"body":"are you saying that'd be a bad world","msgtype":"m.text"},"ts":1695791591726,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$phkmfshrBlSpzM8P7ErYpiaTxkFQaqApYr_erf-mkLk"},
{"content":{"body":"did facebook give up on binast","m.mentions":{},"msgtype":"m.text"},"ts":1695791609915,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7xPUpf9ZVP0uWm90rQKqv8WDge8bOH_EvIyR2sXE3L4"},
{"content":{"body":"i haven't heard anything about it in years","m.mentions":{},"msgtype":"m.text"},"ts":1695791615199,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1pRst0lOTwFUOWZBpNgu5zZ8i2RpxcltEU1_ANUDszQ"},
{"content":{"body":"Wasn't there already an attempt to propose a binary AST?","m.mentions":{},"msgtype":"m.text"},"ts":1695791623684,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$miUlHtk0FLbPdjulZKgeklEgLwjyeba93afYFGa-BhA"},
{"content":{"body":"yes, that was me","msgtype":"m.text"},"ts":1695791631259,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$E4n42FI7k-iVR2VbCMvfNHo4_5Lxq565-2YuOJZ8ZAw"},
{"content":{"body":"https://github.com/tc39/proposal-binary-ast","m.mentions":{},"msgtype":"m.text"},"ts":1695791645828,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$az2p-nymi8fO2okbbY--RYjWy5vgUpbjkObwAXuqkQI"},
{"content":{"body":"Some people were against it 😉","msgtype":"m.text"},"ts":1695791667903,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$rJMimr5VZTnyt7ATaTQhcuu52pWMtvVZtrHk06Bsj94"},
{"content":{"body":"what if the binast was s expressions, and it had 4 primitive types and a small memory buffer, and used a harvard architecture...","m.mentions":{},"msgtype":"m.text"},"ts":1695791699803,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zrhMLDx_EcOL0wNvaZ4uLGIN05PP4XPSt1FbR1g67ec"},
{"content":{"body":"> <@devsnek:matrix.org> what if the binast was s expressions, and it had 4 primitive types and a small memory buffer, and used a harvard architecture...\n\nWhat if we got rid of dynamic types","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zrhMLDx_EcOL0wNvaZ4uLGIN05PP4XPSt1FbR1g67ec?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what if the binast was s expressions, and it had 4 primitive types and a small memory buffer, and used a harvard architecture...</blockquote></mx-reply>What if we got rid of dynamic types","m.relates_to":{"m.in_reply_to":{"event_id":"$zrhMLDx_EcOL0wNvaZ4uLGIN05PP4XPSt1FbR1g67ec"}},"msgtype":"m.text"},"ts":1695791758394,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CcaKbIWWXwW3k2DTxrzU69ZrU4xIzBV0sARy3XBS9sU"},
{"content":{"body":"The moment I used Decimal seriously, the first thing I'd do is write a template function that just does numeric parsing.","m.mentions":{},"msgtype":"m.text"},"ts":1695791777879,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$KMd2HAyaczIo63qDXjqAGi23qD1BOt-lZe8dhoCMwO4"},
{"content":{"body":"My point is if we expect all code authored to go through some tool, just go all the way and make the output of that tool something completely different than what was authored. I believe all proposals around that have never considered making that a requirement. Aka that if the author wrote valid JavaScript, it can still be executed as is ","msgtype":"m.text"},"ts":1695791813826,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XV7rL-Te4BPJ0Yze9nI1sAF3wowwIru5lQRFRyALQrU"},
{"content":{"body":"decmath`${price} + ${tax}`","format":"org.matrix.custom.html","formatted_body":"decmath<code>${price} + ${tax}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695791817678,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$xK9U1ezWeUt1IOCymY9KvFRMWBCPOLvPFF_ISYf0SuQ"},
{"content":{"body":"> and this proposal will constrain the growth of TS, e.g. no new satisfies-like keywords, which TS has wanted to add lots of historically\n\nThis part is definitely on the champions' radar. One path, at least at first, is that TS could add `satisfies` without it becoming JS, just they would initially have a worse developer experience (working only in .ts and not in .js) until a version of that feature (possibly with tweaked syntax) got added to JS grammar. But hopefully we can figure out how to reserve a larger space of grammar such that new features can fit into it. We haven't figured out what that space should be yet, though.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>and this proposal will constrain the growth of TS, e.g. no new satisfies-like keywords, which TS has wanted to add lots of historically</p>\n</blockquote>\n<p>This part is definitely on the champions' radar. One path, at least at first, is that TS could add <code>satisfies</code> without it becoming JS, just they would initially have a worse developer experience (working only in .ts and not in .js) until a version of that feature (possibly with tweaked syntax) got added to JS grammar. But hopefully we can figure out how to reserve a larger space of grammar such that new features can fit into it. We haven't figured out what that space should be yet, though.</p>\n","msgtype":"m.text"},"ts":1695791818928,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bIxIHXQ5N6XEdKsEJ3G9IDafLT2-3ETS5CQSe9pn5mQ"},
{"content":{"body":"we should just have primitive decimals, this makes no sense","m.mentions":{},"msgtype":"m.text"},"ts":1695791819744,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1_rZ898Y0Yca2Vh9Nz7o23TBCO8iWs8irbRLLlwH3u8"},
{"content":{"body":"> <@tabatkins:matrix.org> decmath`${price} + ${tax}`\n\nit would get a lot of downloads","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xK9U1ezWeUt1IOCymY9KvFRMWBCPOLvPFF_ISYf0SuQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>decmath<code>${price} + ${tax}</code></blockquote></mx-reply>it would get a lot of downloads","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xK9U1ezWeUt1IOCymY9KvFRMWBCPOLvPFF_ISYf0SuQ"}},"msgtype":"m.text"},"ts":1695791842929,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Xs0ZFhXepjbLdpdeEYk8wBCdFHGTW_p11OYLx7qs9AE"},
{"content":{"body":"no sense at all","m.mentions":{},"msgtype":"m.text"},"ts":1695791859000,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7ybbtYiimAJ0G4jKFgmtsAsC1kqWnfoACjZ-MBSDTUc"},
{"content":{"body":"> <@michaelficarra:matrix.org> we should just have primitive decimals, this makes no sense\n\nThis is something we can discuss in more detail if we get around to \"operator overloading withdrawal\"; let's focus on other parts of this presentation for now.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1_rZ898Y0Yca2Vh9Nz7o23TBCO8iWs8irbRLLlwH3u8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>we should just have primitive decimals, this makes no sense</blockquote></mx-reply>This is something we can discuss in more detail if we get around to \"operator overloading withdrawal\"; let's focus on other parts of this presentation for now.","m.relates_to":{"m.in_reply_to":{"event_id":"$1_rZ898Y0Yca2Vh9Nz7o23TBCO8iWs8irbRLLlwH3u8"}},"msgtype":"m.text"},"ts":1695791869460,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Pd_ectVx9ucSUhXvqAcXcNu8fz97lJe3N0tLHbhR8hs"},
{"content":{"body":"it's pretty important to focus on this part now, i think","m.mentions":{},"msgtype":"m.text"},"ts":1695791897518,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oEERgEegFrPJLsdLjeDqruPpOiqHCs8cbcgdgHwYrwo"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> What if we got rid of dynamic types\n\nThen we would have ES262.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CcaKbIWWXwW3k2DTxrzU69ZrU4xIzBV0sARy3XBS9sU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>What if we got rid of dynamic types</blockquote></mx-reply>Then we would have ES262.","m.relates_to":{"m.in_reply_to":{"event_id":"$CcaKbIWWXwW3k2DTxrzU69ZrU4xIzBV0sARy3XBS9sU"}},"msgtype":"m.text"},"ts":1695791900835,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$-OLkalciMrmBzGpzpS-dYPn7QlZWDDnuLv0GwAo5ofU"},
{"content":{"body":"> <@ljharb:matrix.org> it's pretty important to focus on this part now, i think\n\nwell, this isn't going for advancement... I agree it's an important topic but I wanted to give space for other people to give their presentations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oEERgEegFrPJLsdLjeDqruPpOiqHCs8cbcgdgHwYrwo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it&#39;s pretty important to focus on this part now, i think</blockquote></mx-reply>well, this isn't going for advancement... I agree it's an important topic but I wanted to give space for other people to give their presentations.","m.relates_to":{"m.in_reply_to":{"event_id":"$oEERgEegFrPJLsdLjeDqruPpOiqHCs8cbcgdgHwYrwo"}},"msgtype":"m.text"},"ts":1695791940412,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TPfIBeDqIjsB0auUSmLfOYUwq0YzvpRWquvTy2kmHoY"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> What if we got rid of dynamic types\n\n * Then we wouldn't have ES262.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CcaKbIWWXwW3k2DTxrzU69ZrU4xIzBV0sARy3XBS9sU?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>What if we got rid of dynamic types</blockquote></mx-reply> * Then we wouldn't have ES262.","m.new_content":{"body":"Then we wouldn't have ES262.","format":"org.matrix.custom.html","formatted_body":"Then we wouldn't have ES262.","msgtype":"m.text"},"m.relates_to":{"event_id":"$-OLkalciMrmBzGpzpS-dYPn7QlZWDDnuLv0GwAo5ofU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695791943109,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$y5sKwu1RuPk2TqGejlh6nJAb800UfmfpcU49Zd-EK1k"},
{"content":{"body":"Lots of the stuff in this presentation is just orthogonal from whether it's a primitive","msgtype":"m.text"},"ts":1695791955934,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-TxfeG8hgpduREp1L1h9Noejk5seehaKWhySdAx7QwE"},
{"content":{"body":"my sense is that that stuff is irrelevant if it's not a primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1695791970311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3vhUhNPFAgxfe-Ci-q2CASa257ZQR3MLye3qJjuN1K4"},
{"content":{"body":"> <@msaboff:matrix.org> Then we wouldn't have ES262.\n\n(it was more fun before editing, because the ES262 _spec_ is statically typed 😛)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-OLkalciMrmBzGpzpS-dYPn7QlZWDDnuLv0GwAo5ofU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>Then we wouldn't have ES262.</blockquote></mx-reply>(it was more fun before editing, because the ES262 <em>spec</em> is statically typed 😛)","m.relates_to":{"m.in_reply_to":{"event_id":"$-OLkalciMrmBzGpzpS-dYPn7QlZWDDnuLv0GwAo5ofU"}},"msgtype":"m.text"},"ts":1695791979888,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eIPJJ8fztOdiwWuuT35USXoRXh5r-BfuMJE15f6tcKM"},
{"content":{"body":"yes and lots of it doesn't matter at all if nobody is going to use it because it's so unergonomic","m.mentions":{},"msgtype":"m.text"},"ts":1695791982080,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$vWcTEIvu-kdlws8SVXFoA8gOsgJA6_Qg_Jg0TV2AOuw"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> (it was more fun before editing, because the ES262 _spec_ is statically typed 😛)\n\nHappy to make you laugh.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eIPJJ8fztOdiwWuuT35USXoRXh5r-BfuMJE15f6tcKM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>(it was more fun before editing, because the ES262 <em>spec</em> is statically typed 😛)</blockquote></mx-reply>Happy to make you laugh.","m.relates_to":{"m.in_reply_to":{"event_id":"$eIPJJ8fztOdiwWuuT35USXoRXh5r-BfuMJE15f6tcKM"}},"msgtype":"m.text"},"ts":1695792015306,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$6zrBPeuccsQcLZ8mLXBAlCSEvvFXCwEFX3yJu6aDN1Y"},
{"content":{"body":"IIRC there are still concerns about using IEEE 754 at all","m.mentions":{},"msgtype":"m.text"},"ts":1695792044177,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$N3LK6ovHPAwUHT97yfxQi-w9fhEs9-SGX4mMVM0VW4I"},
{"content":{"body":"IEEE-754 Decimal128 is the obviously correct choice here","m.mentions":{},"msgtype":"m.text"},"ts":1695792064467,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Bu_RMbQNDlfSEX3qR3jDOxQrZtFvt5htpcno_bt-7Yc"},
{"content":{"body":"> <@softwarechris:matrix.org> IIRC there are still concerns about using IEEE 754 at all\n\nyeah, this is an example of something interesting to discuss which isn't about whether it's a primitive","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N3LK6ovHPAwUHT97yfxQi-w9fhEs9-SGX4mMVM0VW4I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>IIRC there are still concerns about using IEEE 754 at all</blockquote></mx-reply>yeah, this is an example of something interesting to discuss which isn't about whether it's a primitive","m.relates_to":{"m.in_reply_to":{"event_id":"$N3LK6ovHPAwUHT97yfxQi-w9fhEs9-SGX4mMVM0VW4I"}},"msgtype":"m.text"},"ts":1695792073185,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sz5Q3zdDOXEOhxYtOCNA4P4RDLabdAZcqqD40eI3Cnc"},
{"content":{"body":"points to the sign: https://speleotrove.com/decimal/decifaq4.html#signif","m.mentions":{},"msgtype":"m.emote"},"ts":1695792091079,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DkQMvZ017oNpZwNX_b8AgL9AcmtJrUjYuduygePy-wk"},
{"content":{"body":"> <@tabatkins:matrix.org> The moment I used Decimal seriously, the first thing I'd do is write a template function that just does numeric parsing.\n\n``D`1```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMd2HAyaczIo63qDXjqAGi23qD1BOt-lZe8dhoCMwO4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>The moment I used Decimal seriously, the first thing I&#39;d do is write a template function that just does numeric parsing.</blockquote></mx-reply>``D`1```","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KMd2HAyaczIo63qDXjqAGi23qD1BOt-lZe8dhoCMwO4"}},"msgtype":"m.text"},"ts":1695792106073,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wicB5cofmLl8heGVs2GBHIOTzxLyULjDCUe08Zql3Iw"},
{"content":{"body":"if its not a primitive is there any benefit to it existing in the language itself","m.mentions":{},"msgtype":"m.text"},"ts":1695792110579,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gZ0Oa0ZlgTfVepX2vcbePGkZCoNnk5kmAONg_nHFiPI"},
{"content":{"body":"that's my queue item","m.mentions":{},"msgtype":"m.text"},"ts":1695792121203,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6knrJiijjzZcuD3WvhNnHet62acft-iOuKaXqc8gY90"},
{"content":{"body":"just perf optimization?","m.mentions":{},"msgtype":"m.text"},"ts":1695792121246,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6ECyvERhxtry9NcF2j4qe47JCkN9W6XvujHfT6pBCbI"},
{"content":{"body":"> <@tabatkins:matrix.org> The moment I used Decimal seriously, the first thing I'd do is write a template function that just does numeric parsing.\n\n * ``D\\`1\\```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KMd2HAyaczIo63qDXjqAGi23qD1BOt-lZe8dhoCMwO4?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>The moment I used Decimal seriously, the first thing I'd do is write a template function that just does numeric parsing.</blockquote></mx-reply> * ``D`1```","m.mentions":{},"m.new_content":{"body":"``D\\`1\\```","format":"org.matrix.custom.html","formatted_body":"``D`1```","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wicB5cofmLl8heGVs2GBHIOTzxLyULjDCUe08Zql3Iw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792123436,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$5SP_M-v63dxVUdDk1_MA-JuaeQg4sXoMyXUbHl6JYoY"},
{"content":{"body":"> <@bakkot:matrix.org> so let me try to summarize my thoughts:\n> \n> - I agree there is would be some benefit for at least some projects, including both beginners and complex projects\n> - I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and _definitely_ won't cover JSX\n> - and this proposal will constrain the growth of TS, e.g. no new `satisfies`-like keywords, which TS has wanted to add lots of historically\n> - the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console\n> - the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain\n> \n> - given all that, the costs do not seem worth the benefits, to me.\n\nalso, it has been my experience that many of the reported problems with \"having to compile typescript\" are actually different problems than \"I have to run another tool\". they're things like \"I want to dual-emit CJS and ESM\" or \"the module resolution in my version of typescript is different from in node\" or \"module interop is broken\" or things like that. and to the extent that this proposal helps those problems, it does so only because it forces you to make TS's resolution-and-etc match your other tools. but that is a tooling problem, not a fundamental problem with having a strip-types step in your build process, and TS has lately been making some improvements in that area already","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bi7I7by-DEDacqWNs00x261YsXcf0dr0gXCsNSSYbdk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>so let me try to summarize my thoughts:</p>\n<ul>\n<li>\n<p>I agree there is would be some benefit for at least some projects, including both beginners and complex projects</p>\n</li>\n<li>\n<p>I am not convinced that in fact most people will be able to skip the build step: this proposal does not cover all of TS as-is, and <em>definitely</em> won't cover JSX</p>\n</li>\n<li>\n<p>and this proposal will constrain the growth of TS, e.g. no new <code>satisfies</code>-like keywords, which TS has wanted to add lots of historically</p>\n</li>\n<li>\n<p>the thing where you want to copy-paste code from your editor to the browser console is very real, but could be solved just in the browser console</p>\n</li>\n<li>\n<p>the grammar in this proposal is massive, which will be a lot of work (and runtime cost) to implement, reason about, and maintain</p>\n</li>\n<li>\n<p>given all that, the costs do not seem worth the benefits, to me.</p>\n</li>\n</ul>\n</blockquote></mx-reply>also, it has been my experience that many of the reported problems with \"having to compile typescript\" are actually different problems than \"I have to run another tool\". they're things like \"I want to dual-emit CJS and ESM\" or \"the module resolution in my version of typescript is different from in node\" or \"module interop is broken\" or things like that. and to the extent that this proposal helps those problems, it does so only because it forces you to make TS's resolution-and-etc match your other tools. but that is a tooling problem, not a fundamental problem with having a strip-types step in your build process, and TS has lately been making some improvements in that area already","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$Bi7I7by-DEDacqWNs00x261YsXcf0dr0gXCsNSSYbdk"}},"msgtype":"m.text"},"ts":1695792126747,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5Br90G3piVqehv44hUOKI2ZBT5ahYGwT-Vrhz_3BPgw"},
{"content":{"body":" * D`1`","format":"org.matrix.custom.html","formatted_body":" * D<code>1</code>","m.mentions":{},"m.new_content":{"body":"D`1`","format":"org.matrix.custom.html","formatted_body":"D<code>1</code>","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wicB5cofmLl8heGVs2GBHIOTzxLyULjDCUe08Zql3Iw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792130039,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Wlt-PpJa4wwV79L0C4sEDmU9Zm5slbGUraaJ3s-dq0U"},
{"content":{"body":"(Matrix does not correctly handle multi-ticks, don't even bother trying.)","m.mentions":{},"msgtype":"m.text"},"ts":1695792131668,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$VgzJjq5Ah2C3CjAmBTMWymlbw7Z70fijz5d6yPpvD4A"},
{"content":{"body":"TabAtkins: ``` `yes it does` ```","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: <code>`yes it does`</code>","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"ts":1695792141987,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KZfrdsAS-r1vnxmYVKotKXX0s4T7lhWz72Im0MQMSK4"},
{"content":{"body":"like i think performance can be a valid reason","m.mentions":{},"msgtype":"m.text"},"ts":1695792144889,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TTpjcBJzYWuv9_wkDpdLm-ADrhitP8cBDcQR-iv9ONw"},
{"content":{"body":"even if its not a primitive ","m.mentions":{},"msgtype":"m.text"},"ts":1695792148929,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4hNWHutCM_cxeAbntn2L3my-M5yCAOYiSRTFjluNTx0"},
{"content":{"body":"but i'd wanna see very very good performance","m.mentions":{},"msgtype":"m.text"},"ts":1695792153510,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ZqMgu-vsqZ0l8Qyv_x7WU_tx9PpwK9VOrzc5sdIg3uU"},
{"content":{"body":" * TabAtkins: ```yes it does``` but you may have to \"hold it correctly\" tbf","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: <code>yes it does</code> but you may have to \"hold it correctly\" tbf","m.mentions":{},"m.new_content":{"body":"TabAtkins: ```yes it does``` but you may have to \"hold it correctly\" tbf","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: <code>yes it does</code> but you may have to \"hold it correctly\" tbf","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KZfrdsAS-r1vnxmYVKotKXX0s4T7lhWz72Im0MQMSK4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792154877,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ysuRqX0gHmuyaXmTCrjLRDsPx_Zd0FnpFarr7hFT2MU"},
{"content":{"body":" * TabAtkins: ``` `yes it does` ``` but you may have to \"hold it correctly\" tbf","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: <code>`yes it does`</code> but you may have to \"hold it correctly\" tbf","m.mentions":{},"m.new_content":{"body":"TabAtkins: ``` `yes it does` ``` but you may have to \"hold it correctly\" tbf","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: <code>`yes it does`</code> but you may have to \"hold it correctly\" tbf","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KZfrdsAS-r1vnxmYVKotKXX0s4T7lhWz72Im0MQMSK4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792165312,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FBOhYKzxHc5ARJfkkOTFLPUmUe3SbGZZ-LclqKM8J1Q"},
{"content":{"body":"correctness is the main reason (but i agree that ergonomics is p important)","m.mentions":{},"msgtype":"m.text"},"ts":1695792175451,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$CnRkTgmI6RHt_DHZ0VM7OyiW9ZrzseLTF8FpsJ6mENE"},
{"content":{"body":"so I worry that a lot of people are experience \"compiling with typescript is painful\" and assuming that types-as-comments will fix their problems, when those are in fact different problems","m.mentions":{},"msgtype":"m.text"},"ts":1695792187285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cmxlTJ6KzoaIcVZjVe9-lxk3jdTrKm6X8zIODm_T2TI"},
{"content":{"body":"Like the \"lossless division with fixed precision\" isn't trivial to write yourself.","m.mentions":{},"msgtype":"m.text"},"ts":1695792202735,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$kNK9eX4f0H_DSIUkF_BzwdaSXGRJWDJgcpqwIazDW9E"},
{"content":{"body":"luckily there's packages that implement it already","m.mentions":{},"msgtype":"m.text"},"ts":1695792214172,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$I4YjrRvewPMSW9DcM16RHXqYERKVjdpmvBh1RJIdxUw"},
{"content":{"body":" * luckily there's packages that implement it already, right","m.mentions":{},"m.new_content":{"body":"luckily there's packages that implement it already, right","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I4YjrRvewPMSW9DcM16RHXqYERKVjdpmvBh1RJIdxUw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792216436,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kgPbn-A6cWWLJ4xhHZdto8TifZ8Vr9TwNELfWJvQNJE"},
{"content":{"body":" * luckily there's packages that implement it already, right?","m.mentions":{},"m.new_content":{"body":"luckily there's packages that implement it already, right?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$I4YjrRvewPMSW9DcM16RHXqYERKVjdpmvBh1RJIdxUw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792217348,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qq6GRBvOeeFnFUc6hDx-LtFN1qAvHBgOfVg296mLA6E"},
{"content":{"body":"it would have perf footguns though, like I'd have to do manual interning to avoid repeated string parsing snek ","format":"org.matrix.custom.html","formatted_body":"it would have perf footguns though, like I'd have to do manual interning to avoid repeated string parsing <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1695792231749,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Acz4DPw9oztyN8GoEMfiIPqP6fEK6v4cx8GVZ7VWLC4"},
{"content":{"body":"To the best of my knowledge, not really.","m.mentions":{},"msgtype":"m.text"},"ts":1695792240429,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$8uKVpREDjo-Bx7bK3B402aIszDjuGbmxDnJLNxVaBSk"},
{"content":{"body":"> <@bakkot:matrix.org> so I worry that a lot of people are experience \"compiling with typescript is painful\" and assuming that types-as-comments will fix their problems, when those are in fact different problems\n\nhas this been a common refrain?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cmxlTJ6KzoaIcVZjVe9-lxk3jdTrKm6X8zIODm_T2TI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>so I worry that a lot of people are experience &quot;compiling with typescript is painful&quot; and assuming that types-as-comments will fix their problems, when those are in fact different problems</blockquote></mx-reply>has this been a common refrain?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cmxlTJ6KzoaIcVZjVe9-lxk3jdTrKm6X8zIODm_T2TI"}},"msgtype":"m.text"},"ts":1695792241101,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Og_-VnjQv6oj7jH2MTx8azqa09qSHQELjs4T2QxLY68"},
{"content":{"body":"\"compiling with typescript is painful\" is common, definitely","m.mentions":{},"msgtype":"m.text"},"ts":1695792267862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$y9hKt0zWrusxSicOtiNsWcvRve6L2f8QVAurSUWhUQw"},
{"content":{"body":"and upon investigating that turning out to be down to moduleResolution differences or CJS/ESM or whatever is also common IME","m.mentions":{},"msgtype":"m.text"},"ts":1695792289421,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fkKWYSTzv9tiCNV6yScTbM13kGKKA2FnrJdu2ENY3Lk"},
{"content":{"body":"I mean the idea that types as comments is the panacea","m.mentions":{},"msgtype":"m.text"},"ts":1695792291048,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$z6s34_vGqDa6BV3a6Yn1j_P-BludXyRnxkepzmD42SI"},
{"content":{"body":"Me as the poor guy, writing software, I do not care about performance, but about having something, that is so often needed, simply being built into the language, so I do not have to rely on third-party implementations. I think that is also the reason, way everyone is waiting for Temporal.","m.mentions":{},"msgtype":"m.text"},"ts":1695792291650,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$Nby2okTDfwn95n6_w7anKN1Oa14gqakoo9zlkGfBE-8"},
{"content":{"body":"I will say, even if we didn't get operator overloading, a literal syntax would be *super* helpful without invoking perf issues.","format":"org.matrix.custom.html","formatted_body":"I will say, even if we didn't get operator overloading, a literal syntax would be <em>super</em> helpful without invoking perf issues.","m.mentions":{},"msgtype":"m.text"},"ts":1695792295224,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$U7-qEBS7q1dwf1zjY6whBcD5wI-IIfOTQBEjxl7CTuQ"},
{"content":{"body":" * I mean the idea that types annotations is the panacea","m.mentions":{},"m.new_content":{"body":"I mean the idea that types annotations is the panacea","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$z6s34_vGqDa6BV3a6Yn1j_P-BludXyRnxkepzmD42SI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792302277,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$LDh5uox1DSV-wQmfecsBX5q5kqATim34VDFQqbqmNaQ"},
{"content":{"body":"Christian Ulbrich: YES. More batteries included please.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@christianulbrich:matrix.org\">Christian Ulbrich</a>: YES. More batteries included please.","m.mentions":{"user_ids":["@christianulbrich:matrix.org"]},"msgtype":"m.text"},"ts":1695792314797,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$0vL171xVeHZhiiGXwnXVyctvkPH5k2wtd8Bx8tNVJCA"},
{"content":{"body":"temporal is about dates/times tho, not *numbers*","format":"org.matrix.custom.html","formatted_body":"temporal is about dates/times tho, not <em>numbers</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695792322617,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aqOQcYgn6BDJf-1Qqg1AZAUfQ3L_2Nfsa2awgUyTPvU"},
{"content":{"body":"`Decimal(\"1.2\")` is so obnoxious vs `1.2n`","format":"org.matrix.custom.html","formatted_body":"<code>Decimal(\"1.2\")</code> is so obnoxious vs <code>1.2n</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695792339578,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$JuI3nnd7lcCR9luOxl_IWNKszC6gOsDodASJ4M3jjYM"},
{"content":{"body":" * `Decimal(\"1.2\")` is so obnoxious vs `1.2m`","format":"org.matrix.custom.html","formatted_body":" * <code>Decimal(\"1.2\")</code> is so obnoxious vs <code>1.2m</code>","m.mentions":{},"m.new_content":{"body":"`Decimal(\"1.2\")` is so obnoxious vs `1.2m`","format":"org.matrix.custom.html","formatted_body":"<code>Decimal(\"1.2\")</code> is so obnoxious vs <code>1.2m</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JuI3nnd7lcCR9luOxl_IWNKszC6gOsDodASJ4M3jjYM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792346430,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$inrFn4s6UKLuwvNb1n_P5XK9-murSdx0huzFJmGnuDI"},
{"content":{"body":"> <@softwarechris:matrix.org> I mean the idea that types annotations is the panacea\n\nah, I don't know for sure. I _expect_ that many of the random developers who are excited about the proposal are excited because they think it will fix their problems, but their problems are in fact other things like ESM or whatever..","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$z6s34_vGqDa6BV3a6Yn1j_P-BludXyRnxkepzmD42SI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>I mean the idea that types annotations is the panacea</blockquote></mx-reply>ah, I don't know for sure. I <em>expect</em> that many of the random developers who are excited about the proposal are excited because they think it will fix their problems, but their problems are in fact other things like ESM or whatever..","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$z6s34_vGqDa6BV3a6Yn1j_P-BludXyRnxkepzmD42SI"}},"msgtype":"m.text"},"ts":1695792352817,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_UurrIH1-3SfJxc9G0U2JmMx2EIiv4TjBmN_FX3esVE"},
{"content":{"body":"`1.2m` is pretty motivating i think","format":"org.matrix.custom.html","formatted_body":"<code>1.2m</code> is pretty motivating i think","m.mentions":{},"msgtype":"m.text"},"ts":1695792369909,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4GRcIQL_DRYCKilZnwQiGKAom1PN0ewe1aOQedRztLk"},
{"content":{"body":"ljharb: Temporal is about giving JS proper date handling. There are other libraries out there, that at least could do theoretically the same, yet we do Temporal.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: Temporal is about giving JS proper date handling. There are other libraries out there, that at least could do theoretically the same, yet we do Temporal.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1695792482446,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$6fGID1_xgfa25mC_fS0VYxjT5shVbbHrtIWV2D0V7es"},
{"content":{"body":"> <@tabatkins:matrix.org> `Decimal(\"1.2\")` is so obnoxious vs `1.2m`\n\nyou forgot `new`, it's `new Decimal(\"1.2\")`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JuI3nnd7lcCR9luOxl_IWNKszC6gOsDodASJ4M3jjYM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>Decimal(\"1.2\")</code> is so obnoxious vs <code>1.2m</code></blockquote></mx-reply>you forgot <code>new</code>, it's <code>new Decimal(\"1.2\")</code>","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JuI3nnd7lcCR9luOxl_IWNKszC6gOsDodASJ4M3jjYM"}},"msgtype":"m.text"},"ts":1695792486819,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Ek9AWsEAAnaF5lH9f2ejg4Qsol1wrPf5uQKINS9oyyI"},
{"content":{"body":"How do you feel about syntax for decimals but not primitives? Like regexs","msgtype":"m.text"},"ts":1695792503117,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-D0x-IZuI4Saa0YBvR7u_65sMGGLLqG-8Uj5hqaSuUs"},
{"content":{"body":"Jack Works: I mean, it doesn't *need* to be. We *can* define it to not require the `new`. ^_^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I mean, it doesn't <em>need</em> to be. We <em>can</em> define it to not require the <code>new</code>. ^_^","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"msgtype":"m.text"},"ts":1695792510635,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$mqO0Bov_IaJGZ5GxEAj1GWgBJ-8MgGWieCsY4-TaF_s"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> How do you feel about syntax for decimals but not primitives? Like regexs\n\n`1.2m !== 1.2m` will trip everyone up forever","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-D0x-IZuI4Saa0YBvR7u_65sMGGLLqG-8Uj5hqaSuUs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>How do you feel about syntax for decimals but not primitives? Like regexs</blockquote></mx-reply><code>1.2m !== 1.2m</code> will trip everyone up forever","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-D0x-IZuI4Saa0YBvR7u_65sMGGLLqG-8Uj5hqaSuUs"}},"msgtype":"m.text"},"ts":1695792533491,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$saIfGu0-ZKbfealz2I0oVxmBQW1PTQM5LmTrA3czdSo"},
{"content":{"body":"While I *really want* operator overloading, I'd accept it without. And ignoring that, I don't care about primitive vs object.","format":"org.matrix.custom.html","formatted_body":"While I <em>really want</em> operator overloading, I'd accept it without. And ignoring that, I don't care about primitive vs object.","m.mentions":{},"msgtype":"m.text"},"ts":1695792541808,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$fuQF73_Ic4gAHUD932SWI1XbXu38EpojJpLpBzW8tK0"},
{"content":{"body":"regexps you don't do arithmetic / comparisons / etc on","m.mentions":{},"msgtype":"m.text"},"ts":1695792542974,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YmvhYHpMDcg75RopYo1Xd4vR3xHTlqboIYwVdgfz1ZM"},
{"content":{"body":"> <@tabatkins:matrix.org> Jack Works: I mean, it doesn't *need* to be. We *can* define it to not require the `new`. ^_^\n\nI want to keep the no `new` version for primitives. browsers don't want it for now, but I want to keep the hope","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$mqO0Bov_IaJGZ5GxEAj1GWgBJ-8MgGWieCsY4-TaF_s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a>: I mean, it doesn't <em>need</em> to be. We <em>can</em> define it to not require the <code>new</code>. ^_^</blockquote></mx-reply>I want to keep the no <code>new</code> version for primitives. browsers don't want it for now, but I want to keep the hope","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mqO0Bov_IaJGZ5GxEAj1GWgBJ-8MgGWieCsY4-TaF_s"}},"msgtype":"m.text"},"ts":1695792546764,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$gmnUpocJFZI8DB93mnJKcXPITdtiD5TkzAGElVLh4lY"},
{"content":{"body":"> <@bakkot:matrix.org> `1.2m !== 1.2m` will trip everyone up forever\n\nfor the same reason, I also require `1.2m` not a thing before primitive happens","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$saIfGu0-ZKbfealz2I0oVxmBQW1PTQM5LmTrA3czdSo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><code>1.2m !== 1.2m</code> will trip everyone up forever</blockquote></mx-reply>for the same reason, I also require <code>1.2m</code> not a thing before primitive happens","m.mentions":{"user_ids":["@bakkot:matrix.org","@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$saIfGu0-ZKbfealz2I0oVxmBQW1PTQM5LmTrA3czdSo"}},"msgtype":"m.text"},"ts":1695792566559,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wyTmUH6-6eq2TYqiKPiFpTwz8NpY7-YZ4HObyD9iJz4"},
{"content":{"body":"if we have primitives in the future, what we have today becomes boxed primitive, and it will not create a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1695792656563,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$HqvncTp8ftmqeAQ_hZyGuYjisIAZjxdk1q74FnxLtng"},
{"content":{"body":"`1.2m !== 1.2m` clearly just make `valueOf` throw, can't do it then.","format":"org.matrix.custom.html","formatted_body":"<code>1.2m !== 1.2m</code> clearly just make <code>valueOf</code> throw, can't do it then.","m.mentions":{},"msgtype":"m.text"},"ts":1695792679254,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$KRV9_v4L6pdZPI-sgCIFzR7NRJN7dHYqyxzjKCVGW0A"},
{"content":{"body":"because temporal pulls in like 70mb of data","m.mentions":{},"msgtype":"m.text"},"ts":1695792684964,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VY3z-qVllHdUfjBmxwyz6rl6W1r-c3UGU9xayKKKwSY"},
{"content":{"body":"like we don't have number, but `new Number('1').add(new Number('2'))`","format":"org.matrix.custom.html","formatted_body":"like we don't have number, but <code>new Number('1').add(new Number('2'))</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695792687959,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$SB-G9xViwuD-cCN8uk5F50P55-gZNLjYbMXVI1dEyJM"},
{"content":{"body":"> <@tabatkins:matrix.org> `1.2m !== 1.2m` clearly just make `valueOf` throw, can't do it then.\n\n`!==` does not use `valueOf`, thank goodness","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KRV9_v4L6pdZPI-sgCIFzR7NRJN7dHYqyxzjKCVGW0A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>1.2m !== 1.2m</code> clearly just make <code>valueOf</code> throw, can't do it then.</blockquote></mx-reply><code>!==</code> does not use <code>valueOf</code>, thank goodness","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KRV9_v4L6pdZPI-sgCIFzR7NRJN7dHYqyxzjKCVGW0A"}},"msgtype":"m.text"},"ts":1695792712545,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MIZCG8zJaAODx7LUQLRo7yIBGGytieD_eZRvPSAb-Nw"},
{"content":{"body":"gosh dang it","m.mentions":{},"msgtype":"m.text"},"ts":1695792720288,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$82SEE-iBNy5k-i0-cIN8CxNxfjwAlM071ue7NlLOm6E"},
{"content":{"body":"> <@tabatkins:matrix.org> `1.2m !== 1.2m` clearly just make `valueOf` throw, can't do it then.\n\na previously throwing code no longer throws is not a breaking change in tc39 IMO","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KRV9_v4L6pdZPI-sgCIFzR7NRJN7dHYqyxzjKCVGW0A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br><code>1.2m !== 1.2m</code> clearly just make <code>valueOf</code> throw, can't do it then.</blockquote></mx-reply>a previously throwing code no longer throws is not a breaking change in tc39 IMO","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KRV9_v4L6pdZPI-sgCIFzR7NRJN7dHYqyxzjKCVGW0A"}},"msgtype":"m.text"},"ts":1695792735435,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$HXML7x2kIpyB01L9930Y3PfZBATpZ8hK-ib6iv5qoOA"},
{"content":{"body":"Right!","m.mentions":{},"msgtype":"m.text"},"ts":1695792749187,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$LhnEdCVmkYqWtmM7OEcIMGoA8DIIuEzzy3kvXdGSVLI"},
{"content":{"body":"I was just half-jokingly saying that having the equality test throw would avoid people accidentally relying on it being always-false.","m.mentions":{},"msgtype":"m.text"},"ts":1695792779055,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$aZXEoVrj8UMQu0DldIGjEqVmxCZ6sb3Hj2M8PxMxt9k"},
{"content":{"body":"my brother are you asking me to add a typeswitch to === for certain types and to add a *throw*","format":"org.matrix.custom.html","formatted_body":"my brother are you asking me to add a typeswitch to === for certain types and to add a <em>throw</em>","msgtype":"m.text"},"ts":1695792829277,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yuyr-OK1qmCrq_1QkivxoISABrtCE-pnZUPbihBGyio"},
{"content":{"body":" * my brother are you asking me to add a typeswitch to === for certain object types and to add a _throw_","format":"org.matrix.custom.html","formatted_body":" * my brother are you asking me to add a typeswitch to === for certain object types and to add a <em>throw</em>","m.new_content":{"body":"my brother are you asking me to add a typeswitch to === for certain object types and to add a _throw_","format":"org.matrix.custom.html","formatted_body":"my brother are you asking me to add a typeswitch to === for certain object types and to add a <em>throw</em>","msgtype":"m.text"},"m.relates_to":{"event_id":"$Yuyr-OK1qmCrq_1QkivxoISABrtCE-pnZUPbihBGyio","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792835417,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$spWk2cDcErb8kOj-V2ei-Jlnrx2g39n5pwyoTBUgI3k"},
{"content":{"body":"> <@tabatkins:matrix.org> I was just half-jokingly saying that having the equality test throw would avoid people accidentally relying on it being always-false.\n\nMaking `===` throw has the same perf impact as making it work properly: you have in both cases exactly one more branch","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aZXEoVrj8UMQu0DldIGjEqVmxCZ6sb3Hj2M8PxMxt9k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I was just half-jokingly saying that having the equality test throw would avoid people accidentally relying on it being always-false.</blockquote></mx-reply>Making <code>===</code> throw has the same perf impact as making it work properly: you have in both cases exactly one more branch","m.relates_to":{"m.in_reply_to":{"event_id":"$aZXEoVrj8UMQu0DldIGjEqVmxCZ6sb3Hj2M8PxMxt9k"}},"msgtype":"m.text"},"ts":1695792838291,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1851v9Z1HOy07LapvKLb56oPd1Vklrd0oJ4TvBdlMzI"},
{"content":{"body":"is this proposing that we would use d128","m.mentions":{},"msgtype":"m.text"},"ts":1695792849379,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6-BeeC-6U4tin0JIllAvL3fnh7SV_3mCNe2BA3XZBco"},
{"content":{"body":"d128 vs bigdec is still an open question","m.mentions":{},"msgtype":"m.text"},"ts":1695792862532,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PDetjSn1JpanoJyoZOOR36E-cfIhcmyDuRh_vUq2g54"},
{"content":{"body":"(`new Number(1) === new Number(1)` also false today so I'm very optimistic that Decimal can add boxed primitive first then if the engine see it is widely used they can add primitives later)","format":"org.matrix.custom.html","formatted_body":"(<code>new Number(1) === new Number(1)</code> also false today so I'm very optimistic that Decimal can add boxed primitive first then if the engine see it is widely used they can add primitives later)","m.mentions":{},"msgtype":"m.text"},"ts":1695792863257,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jxQBvi0dYYWE7EEELNj-peSfskJWv8X6m3VMmmE1Jy4"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> Making `===` throw has the same perf impact as making it work properly: you have in both cases exactly one more branch\n\nit's actually worse I think - throwing operators are special, can't be optimized the same as non-throwing operations","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1851v9Z1HOy07LapvKLb56oPd1Vklrd0oJ4TvBdlMzI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>Making <code>===</code> throw has the same perf impact as making it work properly: you have in both cases exactly one more branch</blockquote></mx-reply>it's actually worse I think - throwing operators are special, can't be optimized the same as non-throwing operations","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1851v9Z1HOy07LapvKLb56oPd1Vklrd0oJ4TvBdlMzI"}},"msgtype":"m.text"},"ts":1695792885409,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rxCV0ABLU9O0P6AuXC_V6jSitItN8XR-3xXqq2nWjns"},
{"content":{"body":"`===` must never, ever throw","format":"org.matrix.custom.html","formatted_body":"<code>===</code> must never, ever throw","m.mentions":{},"msgtype":"m.text"},"ts":1695792902843,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3DlpJb81ykaXoUl3m8aiTBRnBeprTpFEHlSrUenHWBk"},
{"content":{"body":"IE 8 or 9 did that on one thing and it's very very bad","m.mentions":{},"msgtype":"m.text"},"ts":1695792919017,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pR82jG81fNUNvWeCatKd-dA-JPXEFdl9ToohPDjtlSM"},
{"content":{"body":"Ah, if it's cheaper to just do the comparison right then that's easy, ship is shu ","format":"org.matrix.custom.html","formatted_body":"Ah, if it's cheaper to just do the comparison right then that's easy, ship is <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695792929561,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$EdoY4z8iQaQrKgnMp5iJZDWpAHI05aSo0vvR9RODvFQ"},
{"content":{"body":" * Ah, if it's cheaper to just do the comparison right then that's easy, ship it shu","format":"org.matrix.custom.html","formatted_body":" * Ah, if it's cheaper to just do the comparison right then that's easy, ship it <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","m.mentions":{},"m.new_content":{"body":"Ah, if it's cheaper to just do the comparison right then that's easy, ship it shu","format":"org.matrix.custom.html","formatted_body":"Ah, if it's cheaper to just do the comparison right then that's easy, ship it <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EdoY4z8iQaQrKgnMp5iJZDWpAHI05aSo0vvR9RODvFQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792937260,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XrqJYMar80VxI5dP938whfQBlDy0TZXn-Q2jgirFru4"},
{"content":{"body":"throwing doesn't really make surrounding code slower anymore. there are certainly some weird cases but in general everyone is on the unwinding train these days i think","m.mentions":{},"msgtype":"m.text"},"ts":1695792941798,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ugaaTzlHmr54Wf3kH8YiviivWC_odKDXWY4Zq7eVdmg"},
{"content":{"body":" * `===` must never, ever throw, that's a hill i will gladly die on","format":"org.matrix.custom.html","formatted_body":" * <code>===</code> must never, ever throw, that's a hill i will gladly die on","m.mentions":{},"m.new_content":{"body":"`===` must never, ever throw, that's a hill i will gladly die on","format":"org.matrix.custom.html","formatted_body":"<code>===</code> must never, ever throw, that's a hill i will gladly die on","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3DlpJb81ykaXoUl3m8aiTBRnBeprTpFEHlSrUenHWBk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695792941926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$U6cQxA-czdEz4ozEsh3lKolMIPcyQhFl2s9cbwGC4I8"},
{"content":{"body":"they constrain optimizability","msgtype":"m.text"},"ts":1695792955268,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rmU49ulx9tEJoNzfyRL9DuqXy388ffrqF2Avs24GG48"},
{"content":{"body":"anyone questioning Decimal128, *please* read https://speleotrove.com/decimal/decifaq4.html#signif","format":"org.matrix.custom.html","formatted_body":"anyone questioning Decimal128, <em>please</em> read https://speleotrove.com/decimal/decifaq4.html#signif","m.mentions":{},"msgtype":"m.text"},"ts":1695792966215,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ejyB3hfzOveCq3S5vzggliY-Xv7O_35oMI3xhSPfsTc"},
{"content":{"body":"you can't DCE stuff that might throw as easily","msgtype":"m.text"},"ts":1695792974252,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hsTM3COJqfXXisF9UK2Q1fw56l633cg0eOFlaq6318Y"},
{"content":{"body":"consider https://en.cppreference.com/w/cpp/language/noexcept_spec","m.mentions":{},"msgtype":"m.text"},"ts":1695792982426,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$XOTyhTzbgIC2B-ZGIerNbIHU40Nrs_HJC8D5HyE0b-I"},
{"content":{"body":"(or do other analysis)","msgtype":"m.text"},"ts":1695792985615,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VUCbwLj45nfp2fBfqDWhp_u4RKLPhCaExXob53NzwhQ"},
{"content":{"body":"> <@rkirsling:matrix.org> consider https://en.cppreference.com/w/cpp/language/noexcept_spec\n\nhow is noexcept in C++ be enforced?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XOTyhTzbgIC2B-ZGIerNbIHU40Nrs_HJC8D5HyE0b-I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>consider https://en.cppreference.com/w/cpp/language/noexcept_spec</blockquote></mx-reply>how is noexcept in C++ be enforced?","m.mentions":{"user_ids":["@rkirsling:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XOTyhTzbgIC2B-ZGIerNbIHU40Nrs_HJC8D5HyE0b-I"}},"msgtype":"m.text"},"ts":1695793008928,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$f_gXagHlFxengglnkl5V46IGQR5Bk7IgMGzCenu9KuE"},
{"content":{"body":"panic","m.mentions":{},"msgtype":"m.text"},"ts":1695793018777,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C6gsx8ZcxUY7FMGy4FH02kYMnI9OV99Au_-4E8YBT5E"},
{"content":{"body":"?","m.mentions":{},"msgtype":"m.text"},"ts":1695793019543,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$mjk5KIBAk1x4PTksuz3Jdcv3Rz3toam1O4--Bw6iV5o"},
{"content":{"body":"noexcept is enforced because unwinding is part of the spec","m.mentions":{},"msgtype":"m.text"},"ts":1695793023083,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1bcGwJb4VJyNAfToLuQ-lATPmkHplL67A1mbfi5mGNg"},
{"content":{"body":"oh","m.mentions":{},"msgtype":"m.text"},"ts":1695793032819,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$GI8b_gOQaPaskCkCDwtFQQDDA1b-xp-UNuIQSij5Qpk"},
{"content":{"body":"if a noexcept method throws, it panics the whole program","m.mentions":{},"msgtype":"m.text"},"ts":1695793038153,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XnS6PmqTIiPaq8_RjTuGJAtnemwEitq79gPHe08x0s8"},
{"content":{"body":"`window.onerror = () => window.close()`","format":"org.matrix.custom.html","formatted_body":"<code>window.onerror = () =&gt; window.close()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695793039785,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$l3FZfrhPav-8Lbjd-Q9JCWnhv_mqnstYHgofYl0q71k"},
{"content":{"body":":D","m.mentions":{},"msgtype":"m.text"},"ts":1695793044681,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZMp-ImQDkVPm6DBzGXDvEBhaylrWUgnO-BRfi0RWKzE"},
{"content":{"body":"sick","msgtype":"m.text"},"ts":1695793060193,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-jji12Oixm6_sUY2dWaORnRq48LmRo2MmLiLtljtlUA"},
{"content":{"body":"`window.onerror = () => ud2`","format":"org.matrix.custom.html","formatted_body":"<code>window.onerror = () =&gt; ud2</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695793076728,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$t9odn5DyCFJPh9H4IyW2skZfshyIEjHVX2WmCFTlQgg"},
{"content":{"body":"this is the kind of performance trick i would like to subscribe to in a newsletter","msgtype":"m.text"},"ts":1695793079415,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yHT7V6cj3bvw3uMnOOM8JH2Sb6Xi_swXmy2q06urGbg"},
{"content":{"body":"> <@bakkot:matrix.org> ah, I don't know for sure. I _expect_ that many of the random developers who are excited about the proposal are excited because they think it will fix their problems, but their problems are in fact other things like ESM or whatever..\n\nOur problem is none of that. It's simply that writing JSDoc is terrible DX, but for our case is still preferable to dealing with generated code. And from what I've seen, we're not the only project with that experience.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_UurrIH1-3SfJxc9G0U2JmMx2EIiv4TjBmN_FX3esVE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />ah, I don't know for sure. I <em>expect</em> that many of the random developers who are excited about the proposal are excited because they think it will fix their problems, but their problems are in fact other things like ESM or whatever..</blockquote></mx-reply>Our problem is none of that. It's simply that writing JSDoc is terrible DX, but for our case is still preferable to dealing with generated code. And from what I've seen, we're not the only project with that experience.","m.relates_to":{"m.in_reply_to":{"event_id":"$_UurrIH1-3SfJxc9G0U2JmMx2EIiv4TjBmN_FX3esVE"}},"msgtype":"m.text"},"ts":1695793139172,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8KBWbZuX6x-k7I8l_634YKbpwzWcj_3DGhBSUDM16Uw"},
{"content":{"body":"I agree that at least some projects would in fact benefit, yes","m.mentions":{},"msgtype":"m.text"},"ts":1695793158813,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fRxM-xM8qG2ZGxdW9ySzI4JVvbpHtY68IIoTxmu2NkI"},
{"content":{"body":"I certainly do not claim that _all_ of the random developers who are excited about the proposal in fact have a different problem","format":"org.matrix.custom.html","formatted_body":"I certainly do not claim that <em>all</em> of the random developers who are excited about the proposal in fact have a different problem","m.mentions":{},"msgtype":"m.text"},"ts":1695793181326,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bfy1RSYyPRYmCFnqWPLWi3pxHLk2AwQ-LQnjKXZIFnc"},
{"content":{"body":"just that I expect many of them do","m.mentions":{},"msgtype":"m.text"},"ts":1695793188650,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fOmwetWgv7NqmJ5ieoIi9ha_ctq5WZMX7Vt0ebPa8CQ"},
{"content":{"body":"try ts-node, ts-node can configured to skip type checking and even use swc for transpile ","m.mentions":{},"msgtype":"m.text"},"ts":1695793192296,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$DwcAq_6umO0WhO1Qdz1cOnPdSpjJoHkzW6Tm0cJKy1s"},
{"content":{"body":"i should poll at my company about this type annotation thing","m.mentions":{},"msgtype":"m.text"},"ts":1695793239007,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$N_V_pMNLxcJSJFGO5oUWa02QZo07ZfEfQCEFV-emock"},
{"content":{"body":"i don't think i've ever had the stated problem ","m.mentions":{},"msgtype":"m.text"},"ts":1695793258802,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ioX6585_1QPw_krNYGdG8RKK3-HttSzRlkmx_XAQyWw"},
{"content":{"body":"pasting typescript into devtools or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1695793265487,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GsAZp0NW9tHxjXze3xSP0t_Y8RnBo2BHiWfWHAxwdCo"},
{"content":{"body":"or maybe i'm so used to it i don't notice","m.mentions":{},"msgtype":"m.text"},"ts":1695793270570,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eFd-VveebKwCBbhHLSiFofNMR9P6ilnOiOenWK6lMhI"},
{"content":{"body":"ts-node has a repl","m.mentions":{},"msgtype":"m.text"},"ts":1695793277393,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XwmXnluxp00Khn1162VX7HdEHppULlRrbIIwo53LnGo"},
{"content":{"body":"I agree, the correctness win here is the higher-order bit","m.mentions":{},"msgtype":"m.text"},"ts":1695793301058,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OHa9Gyg9-UvK3fXCZGiRSWqAuvbNNEaF-Uo0cQlY9x8"},
{"content":{"body":"we did just switch to rspack, so tool time is definitely a thing some people are thinking about","m.mentions":{},"msgtype":"m.text"},"ts":1695793316711,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$37E7OTFpnwd6p3DzJVC7iN41YU9pisI6Hg0m4chl_5U"},
{"content":{"body":" * we did just switch to rspack this morning, so tool time is definitely a thing some people are thinking about","m.mentions":{},"m.new_content":{"body":"we did just switch to rspack this morning, so tool time is definitely a thing some people are thinking about","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$37E7OTFpnwd6p3DzJVC7iN41YU9pisI6Hg0m4chl_5U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695793348192,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XkROeEKZ_dLuDP6yGWZbhSQQ1Q2Dst_7h-g1XAbUBGc"},
{"content":{"body":"> <@jackworks:matrix.org> try ts-node, ts-node can configured to skip type checking and even use swc for transpile \n\nNot all our code runs on node ;) there are other JS engines and environments!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DwcAq_6umO0WhO1Qdz1cOnPdSpjJoHkzW6Tm0cJKy1s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br />try ts-node, ts-node can configured to skip type checking and even use swc for transpile</blockquote></mx-reply>Not all our code runs on node ;) there are other JS engines and environments!","m.relates_to":{"m.in_reply_to":{"event_id":"$DwcAq_6umO0WhO1Qdz1cOnPdSpjJoHkzW6Tm0cJKy1s"}},"msgtype":"m.text"},"ts":1695793437467,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xXDe7x8HWKb6m2p23_C6KW8ozGHepp4FQftxxcGNCco"},
{"content":{"body":"littledan: please don't jump the queue like that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: please don't jump the queue like that","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1695793441556,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sfzBtrrkKxyVHcVkXs7K0oUSOAwDImkUMw5GyQt-9tY"},
{"content":{"body":"tschromium","m.mentions":{},"msgtype":"m.text"},"ts":1695793444564,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UJb70brSSqZ6tYhDw8CqRbob21Y5aeKrIBl_0NqyL5A"},
{"content":{"body":"> <@mhofman:matrix.org> Not all our code runs on node ;) there are other JS engines and environments!\n\nwhich other ones can't transpile TS on the fly?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xXDe7x8HWKb6m2p23_C6KW8ozGHepp4FQftxxcGNCco?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Not all our code runs on node ;) there are other JS engines and environments!</blockquote></mx-reply>which other ones can't transpile TS on the fly?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xXDe7x8HWKb6m2p23_C6KW8ozGHepp4FQftxxcGNCco"}},"msgtype":"m.text"},"ts":1695793556965,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N3terCLrvIi4SQxr7sd-MtDACyx2ymxtIbfuCt0PUAU"},
{"content":{"body":"> <@mhofman:matrix.org> Not all our code runs on node ;) there are other JS engines and environments!\n\n * which other ones can't be made to transpile TS on the fly somehow?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xXDe7x8HWKb6m2p23_C6KW8ozGHepp4FQftxxcGNCco?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Not all our code runs on node ;) there are other JS engines and environments!</blockquote></mx-reply> * which other ones can't be made to transpile TS on the fly somehow?","m.mentions":{},"m.new_content":{"body":"which other ones can't be made to transpile TS on the fly somehow?","format":"org.matrix.custom.html","formatted_body":"which other ones can't be made to transpile TS on the fly somehow?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$N3terCLrvIi4SQxr7sd-MtDACyx2ymxtIbfuCt0PUAU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695793563114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dzw-RCrS8QAMe81F2-zO4Wp7qKqhNrgMngOQCzQTvtQ"},
{"content":{"body":"sffc: PLEASE, I beg you, read https://speleotrove.com/decimal/decifaq4.html#signif","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: PLEASE, I beg you, read https://speleotrove.com/decimal/decifaq4.html#signif","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"ts":1695793578449,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$CCvA11w_IhSflxvgI33GmA8yWXipqXp9q5Bein5fAPk"},
{"content":{"body":"Also saying use deno and tsnode is basically making the argument that the expected DX is for the JS environment to strip / ignore types. I'm just asking for that behavior to be standardized ","msgtype":"m.text"},"ts":1695793583265,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$K0By0ZlUKk3fUK44W2FvB7w5CrSOmAmxI9ekIk9jBS0"},
{"content":{"body":"that's only expected DX tho *in a repl*","format":"org.matrix.custom.html","formatted_body":"that's only expected DX tho <em>in a repl</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695793603791,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iNaSWTwbey-KRAlCZO_Fr6iFyDJzl2KI10hQudAVVVM"},
{"content":{"body":" * that's only widely expected DX tho _in a repl_","format":"org.matrix.custom.html","formatted_body":" * that's only widely expected DX tho <em>in a repl</em>","m.mentions":{},"m.new_content":{"body":"that's only widely expected DX tho _in a repl_","format":"org.matrix.custom.html","formatted_body":"that's only widely expected DX tho <em>in a repl</em>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iNaSWTwbey-KRAlCZO_Fr6iFyDJzl2KI10hQudAVVVM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695793613937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AOW1MZ4ADYN2davgkZwwyUv2knJY-Eu3UzMRHbwBaM4"},
{"content":{"body":"No those environments are used to run production code","msgtype":"m.text"},"ts":1695793624807,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NwZSC0NmofWhfRG_nI8xfk9oVMTyte6PZFHmhBwBWeE"},
{"content":{"body":"dminor: did adding bigint slow down every JS program?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: did adding bigint slow down every JS program?","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1695793851643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rCaogyQsiNGJVlNtasSvez9Z0T0cGLCin6QTY7ZB1n8"},
{"content":{"body":"> <@mhofman:matrix.org> Also saying use deno and tsnode is basically making the argument that the expected DX is for the JS environment to strip / ignore types. I'm just asking for that behavior to be standardized\n\nso I think a big disconnect here is the purported benefit is node users, but the cost is imposed on browser vendors and users of webpages","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$K0By0ZlUKk3fUK44W2FvB7w5CrSOmAmxI9ekIk9jBS0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Also saying use deno and tsnode is basically making the argument that the expected DX is for the JS environment to strip / ignore types. I&#39;m just asking for that behavior to be standardized </blockquote></mx-reply>so I think a big disconnect here is the purported benefit is node users, but the cost is imposed on browser vendors and users of webpages","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$K0By0ZlUKk3fUK44W2FvB7w5CrSOmAmxI9ekIk9jBS0"}},"msgtype":"m.text"},"ts":1695793861390,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a3josa2MVDdCZ8tOs3RcFmNYHL3_RyGR5tLuwCUqXFY"},
{"content":{"body":"> <@michaelficarra:matrix.org> sffc: PLEASE, I beg you, read https://speleotrove.com/decimal/decifaq4.html#signif\n\nTrailing zeros are important as part of the representation / interchange format. `new Decimal(\"1.0\").toLocaleString()` and `new Intl.PluralRules().select(new Decimal(\"1.0\"))` should just work. I don't have a position regarding the impact on arithmetic of these values.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CCvA11w_IhSflxvgI33GmA8yWXipqXp9q5Bein5fAPk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: PLEASE, I beg you, read https://speleotrove.com/decimal/decifaq4.html#signif</blockquote></mx-reply>Trailing zeros are important as part of the representation / interchange format. <code>new Decimal(\"1.0\").toLocaleString()</code> and <code>new Intl.PluralRules().select(new Decimal(\"1.0\"))</code> should just work. I don't have a position regarding the impact on arithmetic of these values.","m.relates_to":{"m.in_reply_to":{"event_id":"$CCvA11w_IhSflxvgI33GmA8yWXipqXp9q5Bein5fAPk"}},"msgtype":"m.text"},"ts":1695793871758,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$Q4TlOCqvnqo4NTBJFQ59qi0uO0URPUxzBG7WFFSXp0w"},
{"content":{"body":"and node can at least make breaking changes, sometimes, like typescript does","m.mentions":{},"msgtype":"m.text"},"ts":1695793872619,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_0FdV3tvMy_9dWPots97P4rUFm8WxCJ8P8bkRE2ZBMs"},
{"content":{"body":"(imo the reason bigint doesn't get used is because it doesn't interop with Number, which is a mistake Decimal needn't repeat)","m.mentions":{},"msgtype":"m.text"},"ts":1695793876597,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$VrP9kh4eLNB6_frSZd-JAjtJQgCqU5LQ99ItnnkpEDs"},
{"content":{"body":"so it's just a very... very different space","m.mentions":{},"msgtype":"m.text"},"ts":1695793876761,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8-tcjcVncTrYMDnnsSjI-HpIXo3S_rB9ystBrwqz79A"},
{"content":{"body":" * (imo the reason bigint doesn't get used is because it doesn't interop cleanly with Number, which is a mistake Decimal needn't repeat)","m.mentions":{},"m.new_content":{"body":"(imo the reason bigint doesn't get used is because it doesn't interop cleanly with Number, which is a mistake Decimal needn't repeat)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VrP9kh4eLNB6_frSZd-JAjtJQgCqU5LQ99ItnnkpEDs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695793881467,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tWEc-CKgukSD2-zrj90b3oe2LrrEFjamAv3M2y0KYdg"},
{"content":{"body":"> <@ljharb:matrix.org> (imo the reason bigint doesn't get used is because it doesn't interop cleanly with Number, which is a mistake Decimal needn't repeat)\n\nDecimal would need to repeat that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$VrP9kh4eLNB6_frSZd-JAjtJQgCqU5LQ99ItnnkpEDs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(imo the reason bigint doesn&#39;t get used is because it doesn&#39;t interop cleanly with Number, which is a mistake Decimal needn&#39;t repeat)</blockquote></mx-reply>Decimal would need to repeat that","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VrP9kh4eLNB6_frSZd-JAjtJQgCqU5LQ99ItnnkpEDs"}},"msgtype":"m.text"},"ts":1695793939074,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$phRh9bT-rELzuYGa2LgZT1bvJNUMc5Y_F60n1LjvSWQ"},
{"content":{"body":"sffc: So you're expecting that `new Decimal(\"1.0\")` and `new Decimal(\"1.0000\")` would produce the same results when participating in any arithmetic expression?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: So you're expecting that <code>new Decimal(\"1.0\")</code> and <code>new Decimal(\"1.0000\")</code> would produce the same results when participating in any arithmetic expression?","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"ts":1695793950428,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5GABIMrKje60OgWE3G-HzbT0VDsdvk7VV1iDaXW1T2A"},
{"content":{"body":"decimal interoperating with number would be insane","m.mentions":{},"msgtype":"m.text"},"ts":1695793950905,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XE0SDO8TwrnmQ_BHueJgudc4b9ONlLShExSoXzHrlC8"},
{"content":{"body":"why?","m.mentions":{},"msgtype":"m.text"},"ts":1695793974977,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BuGUpUgVr3jXSi1bhBmhEorEq9ZI9BwNcLVlh7vwbwc"},
{"content":{"body":"number → decimal at least, even if not the other way","m.mentions":{},"msgtype":"m.text"},"ts":1695793983435,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V4rGJI7h8VRNFS1Sd7cr3OSQzkzKZpWS0pHzHlvEau0"},
{"content":{"body":"1.3 + 1.3m === ?","m.mentions":{},"msgtype":"m.text"},"ts":1695793993590,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MOJiR1BOoI961tkTw_Kp48dQ0ovBp2xjxcwYiYnUdK0"},
{"content":{"body":"there is no sensible answer to that question","m.mentions":{},"msgtype":"m.text"},"ts":1695793999286,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XJTkFKsdSehf4K0Nw1bZjqd8uQKgriFqN7uBSJX7_K8"},
{"content":{"body":"2.6m?","m.mentions":{},"msgtype":"m.text"},"ts":1695794006205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc"},
{"content":{"body":"> <@ljharb:matrix.org> number → decimal at least, even if not the other way\n\nEither Number -> Decimal or Decimal -> Number are inexact.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$V4rGJI7h8VRNFS1Sd7cr3OSQzkzKZpWS0pHzHlvEau0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>number → decimal at least, even if not the other way</blockquote></mx-reply>Either Number -&gt; Decimal or Decimal -&gt; Number are inexact.","m.relates_to":{"m.in_reply_to":{"event_id":"$V4rGJI7h8VRNFS1Sd7cr3OSQzkzKZpWS0pHzHlvEau0"}},"msgtype":"m.text"},"ts":1695794015463,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$q9glpSTRd7j4JAcUt211qCCkx7ujsIWFTZTL5dye468"},
{"content":{"body":" * 2.6m? or whatever number 1.3 actually is, converted to decimal, added to 1.3m","m.mentions":{},"m.new_content":{"body":"2.6m? or whatever number 1.3 actually is, converted to decimal, added to 1.3m","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695794021472,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rGye-BZWo2xYk5J_Ohu84fkP98-nJXfsxgwdvYE0V_o"},
{"content":{"body":"> <@ljharb:matrix.org> 2.6m?\n\nyeah that's impossible","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>2.6m?</blockquote></mx-reply>yeah that's impossible","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc"}},"msgtype":"m.text"},"ts":1695794021793,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zUFxSgmyHKkJpZnhpr2m3cHdqE173kMbSAliiZzjmV8"},
{"content":{"body":"which is why they can't interop","m.mentions":{},"msgtype":"m.text"},"ts":1695794025106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7XPUpzdFqaiC9WIeeg9zx2OMsiyfPCiijbyIbJjgfJs"},
{"content":{"body":"(might be possible in simple cases, not possible in general)","m.mentions":{},"msgtype":"m.text"},"ts":1695794061982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q8SUkG6pFnvMp7lqsgs-ZwCXYg-BH32QzfZc7av3nQY"},
{"content":{"body":"the implicit conversion would have to go number -> mathematical value -> decimal","m.mentions":{},"msgtype":"m.text"},"ts":1695794062825,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$2O8aDEtDqLYGcvB_jJZn8MuVPt7xXfw7OkXhnynezfM"},
{"content":{"body":"> <@ljharb:matrix.org> dminor: did adding bigint slow down every JS program?\n\nAdding a new primitive meanings adding a new branch for dynamic dispatch based upon type, so it will slow things down, I can't say whether it was a measurable difference for BigInt or not, but adding a primitive has the potential to slow down existing programs, not just things that use the new primitive.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rCaogyQsiNGJVlNtasSvez9Z0T0cGLCin6QTY7ZB1n8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: did adding bigint slow down every JS program?</blockquote></mx-reply>Adding a new primitive meanings adding a new branch for dynamic dispatch based upon type, so it will slow things down, I can't say whether it was a measurable difference for BigInt or not, but adding a primitive has the potential to slow down existing programs, not just things that use the new primitive.","m.relates_to":{"m.in_reply_to":{"event_id":"$rCaogyQsiNGJVlNtasSvez9Z0T0cGLCin6QTY7ZB1n8"}},"msgtype":"m.text"},"ts":1695794075495,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$igBJBHFQeY5OHqgAFF4u7iJBugxvRod2_4k9Pu3lmTw"},
{"content":{"body":"> <@michaelficarra:matrix.org> sffc: So you're expecting that `new Decimal(\"1.0\")` and `new Decimal(\"1.0000\")` would produce the same results when participating in any arithmetic expression?\n\nThat's not something I said. I assume that spec authors who have gone into the weeds have defined what happens with trailing zeros when arithmetic is performed. The Temporal champions went into the weeds on similar types of problems in datetime arithmetic. All I'm saying is that `new Decimal(\"1\")` and `new Decimal(\"1.0\")` are absolutely distinct values for the purposes of internationalization and therefore from the Intl point of view it is important that the distinction be retained.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5GABIMrKje60OgWE3G-HzbT0VDsdvk7VV1iDaXW1T2A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: So you're expecting that <code>new Decimal(\"1.0\")</code> and <code>new Decimal(\"1.0000\")</code> would produce the same results when participating in any arithmetic expression?</blockquote></mx-reply>That's not something I said. I assume that spec authors who have gone into the weeds have defined what happens with trailing zeros when arithmetic is performed. The Temporal champions went into the weeds on similar types of problems in datetime arithmetic. All I'm saying is that <code>new Decimal(\"1\")</code> and <code>new Decimal(\"1.0\")</code> are absolutely distinct values for the purposes of internationalization and therefore from the Intl point of view it is important that the distinction be retained.","m.relates_to":{"m.in_reply_to":{"event_id":"$5GABIMrKje60OgWE3G-HzbT0VDsdvk7VV1iDaXW1T2A"}},"msgtype":"m.text"},"ts":1695794076212,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$MrXY8bXodIjb-5UWoT7RiItmc4gtU4fcWzse76Ot888"},
{"content":{"body":"so we've got 1) they're not primitives and operators don't Just Work, 2) it can't be made reasonable to interop with Number… i'm having a lot of trouble understanding the remaining value","m.mentions":{},"msgtype":"m.text"},"ts":1695794084508,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vojjH9lJX-nftshRosHaM7WWws4F4DFUgQxNfNkvCJg"},
{"content":{"body":"sffc: then you don't want decimal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: then you don't want decimal","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"ts":1695794106159,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$V8hwikX3IBCsAjkAtdy6uMHRnvSKu7CfK9k-1nxwtbo"},
{"content":{"body":"no use case of decimal known to me calls for them to inteorp with Number","m.mentions":{},"msgtype":"m.text"},"ts":1695794106671,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fKGWAOpsuONB0UF2Yuqc_L6Zpx7K9uuranezLtGWXWU"},
{"content":{"body":"> <@dminor:mozilla.org> Adding a new primitive meanings adding a new branch for dynamic dispatch based upon type, so it will slow things down, I can't say whether it was a measurable difference for BigInt or not, but adding a primitive has the potential to slow down existing programs, not just things that use the new primitive.\n\nsure. but this concern wasn't brought up for BigInt, so how is Decimal any different?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$igBJBHFQeY5OHqgAFF4u7iJBugxvRod2_4k9Pu3lmTw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>Adding a new primitive meanings adding a new branch for dynamic dispatch based upon type, so it will slow things down, I can't say whether it was a measurable difference for BigInt or not, but adding a primitive has the potential to slow down existing programs, not just things that use the new primitive.</blockquote></mx-reply>sure. but this concern wasn't brought up for BigInt, so how is Decimal any different?","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$igBJBHFQeY5OHqgAFF4u7iJBugxvRod2_4k9Pu3lmTw"}},"msgtype":"m.text"},"ts":1695794107961,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5-NNnZDmCB_H4jv--Fk50knnBPHB9HHQg5md2erOL_w"},
{"content":{"body":"so I don't know why interop with Number would matter","m.mentions":{},"msgtype":"m.text"},"ts":1695794113304,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zxZsFjZoHvAmVoKSf1xtQfHLfFunTDMB-OQ-gysyFbM"},
{"content":{"body":"> <@ljharb:matrix.org> sure. but this concern wasn't brought up for BigInt, so how is Decimal any different?\n\nBecause we learned from the experience of implementing BigInt :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5-NNnZDmCB_H4jv--Fk50knnBPHB9HHQg5md2erOL_w?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>sure. but this concern wasn't brought up for BigInt, so how is Decimal any different?</blockquote></mx-reply>Because we learned from the experience of implementing BigInt :)","m.relates_to":{"m.in_reply_to":{"event_id":"$5-NNnZDmCB_H4jv--Fk50knnBPHB9HHQg5md2erOL_w"}},"msgtype":"m.text"},"ts":1695794134310,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$fFmoe99UPmRcnMfuemFVdOt6m_v5uOGHp48Qy75jw6c"},
{"content":{"body":"> <@usharma:igalia.com> the implicit conversion would have to go number -> mathematical value -> decimal\n\nHow would you represent the intermediate mathematical value?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2O8aDEtDqLYGcvB_jJZn8MuVPt7xXfw7OkXhnynezfM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>the implicit conversion would have to go number -&gt; mathematical value -&gt; decimal</blockquote></mx-reply>How would you represent the intermediate mathematical value?","m.relates_to":{"m.in_reply_to":{"event_id":"$2O8aDEtDqLYGcvB_jJZn8MuVPt7xXfw7OkXhnynezfM"}},"msgtype":"m.text"},"ts":1695794136925,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$ECHMoSkjT-KrEZh6FVGpzRObtfNFW0T_1318-YOFFmQ"},
{"content":{"body":"ljharb: perf improvement is still possibly significant","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: perf improvement is still possibly significant","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1695794149343,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$77-W_i8qvbHoS-t_UqvfEUZ6q9ihonnUwUykjfmWADE"},
{"content":{"body":"> <@ljharb:matrix.org> 2.6m? or whatever number 1.3 actually is, converted to decimal, added to 1.3m\n\n2.60000000000000004...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>2.6m? or whatever number 1.3 actually is, converted to decimal, added to 1.3m</blockquote></mx-reply>2.60000000000000004...","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HEpSfPCRZlpGARqG1fg3j9bweftYF86g2EP-FeEMzpc"}},"msgtype":"m.text"},"ts":1695794165237,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KX76CQ4-yr4k-Hjd8FFIV_8igT-E_Pf0aVUnRX439GU"},
{"content":{"body":"within an engine? we have a way to represent mathematical values in the spec","m.mentions":{},"msgtype":"m.text"},"ts":1695794166632,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$6I5ADDzPJ1bIkEI79-kgpfyQHacN0nERWqAa3TNAF2Y"},
{"content":{"body":"are you...kidding","msgtype":"m.text"},"ts":1695794176969,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ElgDxghVxwVU7gER_FhgrHcFcvXaGKrXuzdc9oWLHME"},
{"content":{"body":"> <@devsnek:matrix.org> 2.60000000000000004...\n\nfine with me, as long as i can round decimals :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KX76CQ4-yr4k-Hjd8FFIV_8igT-E_Pf0aVUnRX439GU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>2.60000000000000004...</blockquote></mx-reply>fine with me, as long as i can round decimals :-)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KX76CQ4-yr4k-Hjd8FFIV_8igT-E_Pf0aVUnRX439GU"}},"msgtype":"m.text"},"ts":1695794179815,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ofUuHnb2PKhXYNSwMlZnaHWaaXESVGJb0-Y3PVByaVc"},
{"content":{"body":"Well BigInt, and looking at implementing records and tuples","msgtype":"m.text"},"ts":1695794182793,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$my9SEgimY0cwTaf6b_SJAfW6cznQ4R2C-s66I6-xIxE"},
{"content":{"body":"you think we have a way to represent, in memory, mathematical reals?","msgtype":"m.text"},"ts":1695794186199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DoINr7fMByahQvLBJFQMM_zosTgDS5c8qRozZ_oUJNg"},
{"content":{"body":"> <@devsnek:matrix.org> 2.60000000000000004...\n\n * fine with me, as long as i can round/ceil/floor decimals :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KX76CQ4-yr4k-Hjd8FFIV_8igT-E_Pf0aVUnRX439GU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>2.60000000000000004...</blockquote></mx-reply> * fine with me, as long as i can round/ceil/floor decimals :-)","m.mentions":{},"m.new_content":{"body":"fine with me, as long as i can round/ceil/floor decimals :-)","format":"org.matrix.custom.html","formatted_body":"fine with me, as long as i can round/ceil/floor decimals :-)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ofUuHnb2PKhXYNSwMlZnaHWaaXESVGJb0-Y3PVByaVc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695794190113,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$98hhGKrgkbfFTImNIddpqb06WvT3oCtDnIZMesUkJrU"},
{"content":{"body":"like, as intermediate values?","msgtype":"m.text"},"ts":1695794201327,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bXJNmy17YZcotYxCcyLZEHjo5u8q-Hm2NgixrUbR8yM"},
{"content":{"body":"we definitely use mathematical values all over the spec","m.mentions":{},"msgtype":"m.text"},"ts":1695794233967,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$hiHG-ZlHJHC7J0UmnCqw5Spfe8yhEFIcJbEmi89nzHk"},
{"content":{"body":"(potentially TDZ): I suggested trading `undefined` _primitive_ for `Decimal` one. I guess no one will notice!","format":"org.matrix.custom.html","formatted_body":"(potentially TDZ): I suggested trading <code>undefined</code> <em>primitive</em> for <code>Decimal</code> one. I guess no one will notice!","m.mentions":{},"msgtype":"m.text"},"ts":1695794242987,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$z4CNFcNgvaZfANWWbOLfdXrroPlslt7_jVayoXV0n0g"},
{"content":{"body":"I assume there's something corresponding to that within engines","m.mentions":{},"msgtype":"m.text"},"ts":1695794248026,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$HWJI2x1pMLPw7JZtL-o1v4592NBQzCcea8PJbA8Wn2I"},
{"content":{"body":"> <@usharma:igalia.com> we definitely use mathematical values all over the spec\n\nbecause we don't want to accidentally spec error accumulation in our internal arithmetic","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hiHG-ZlHJHC7J0UmnCqw5Spfe8yhEFIcJbEmi89nzHk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>we definitely use mathematical values all over the spec</blockquote></mx-reply>because we don't want to accidentally spec error accumulation in our internal arithmetic","m.relates_to":{"m.in_reply_to":{"event_id":"$hiHG-ZlHJHC7J0UmnCqw5Spfe8yhEFIcJbEmi89nzHk"}},"msgtype":"m.text"},"ts":1695794254305,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oHgTtVe7HDJG0MRxCBFMuG5GlgQT8SHtPhB8yVxyqmE"},
{"content":{"body":"> <@usharma:igalia.com> I assume there's something corresponding to that within engines\n\nnope","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$HWJI2x1pMLPw7JZtL-o1v4592NBQzCcea8PJbA8Wn2I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>I assume there&#39;s something corresponding to that within engines</blockquote></mx-reply>nope","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HWJI2x1pMLPw7JZtL-o1v4592NBQzCcea8PJbA8Wn2I"}},"msgtype":"m.text"},"ts":1695794261297,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YlctHsg0AAc4VPnLve48ThXc7AOYK_YQd6CQb98KkHY"},
{"content":{"body":"it just does IEEE arithmetic","m.mentions":{},"msgtype":"m.text"},"ts":1695794264365,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$seUadFaLGvohTN5QGagobkq_8DJgfbU-wgLfhWdYdCM"},
{"content":{"body":"ryzokuken: they're a fiction","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>: they're a fiction","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"ts":1695794269377,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$0XvoVzhyQkVk1eVmuqgU_NfR2nbZaSxpu6pLJsv08_Q"},
{"content":{"body":"and IEEE arithmetic corresponds to the right thing","m.mentions":{},"msgtype":"m.text"},"ts":1695794270768,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vPJgce1EGIWHiI1iWCuwlW6sNlpfgHqBp01cEQ26bkU"},
{"content":{"body":"say 1/3rd to scare a js engine implementor","m.mentions":{},"msgtype":"m.text"},"ts":1695794275291,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3t27oE9GCu-08oKmKbe9TveDcgn7558PqrLDx7DDx9M"},
{"content":{"body":"welp, nvm then","m.mentions":{},"msgtype":"m.text"},"ts":1695794277628,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$la78tqf6sr8wMQIbSaTd4Koohy1M15wx38nhkje51rI"},
{"content":{"body":"the use of reals in the spec is just a way to not write down IEEE semantics in the spec","m.mentions":{},"msgtype":"m.text"},"ts":1695794288367,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8hJaJvAZt32Gd-itUtYgqkTDNlu6lk9-piJM5daVxDc"},
{"content":{"body":"ps those occasional groups in the kitchen are quite loud, is there a polite way to address that?","m.mentions":{},"msgtype":"m.text"},"ts":1695794294028,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-YB_EZAinzvsqvpwlHf1mvd5U6H0CS4AohrLilkiYpM"},
{"content":{"body":"re: string.prototype.decimalAdd()\n\nthis sounds like coloring strings in some way? especially for typescript, you'd have to have some sort of colored string to make this not suck","m.mentions":{},"msgtype":"m.text"},"ts":1695794301294,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$lqrgEO7Gvsl9N2gr4HoNNzPZBN-7gxvBZXQqSgancu4"},
{"content":{"body":"Luca Casonato: phantom types!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: phantom types!","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"ts":1695794318118,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Z5wXrseDZ9KwUN8O967PY4hSZ9qputAi1OQEP7cd0VU"},
{"content":{"body":"> <@usharma:igalia.com> within an engine? we have a way to represent mathematical values in the spec\n\nWhat would be the proposed representation of such an intermediate mathematical value.  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6I5ADDzPJ1bIkEI79-kgpfyQHacN0nERWqAa3TNAF2Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>within an engine? we have a way to represent mathematical values in the spec</blockquote></mx-reply>What would be the proposed representation of such an intermediate mathematical value.  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","m.relates_to":{"m.in_reply_to":{"event_id":"$6I5ADDzPJ1bIkEI79-kgpfyQHacN0nERWqAa3TNAF2Y"}},"msgtype":"m.text"},"ts":1695794325371,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$uxE8i7OdI4L67Txg61t2qRg2tlkJkyDwRH2bpdmOyFk"},
{"content":{"body":"`String<Decimal>`","format":"org.matrix.custom.html","formatted_body":"<code>String&lt;Decimal&gt;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695794339022,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DH5vavHa4HlCxgNsRaeJMMfDy-DgK-ApG9d7yBOSBLI"},
{"content":{"body":"We could color them by wrapping then in an object as a \"marker\"","msgtype":"m.text"},"ts":1695794356111,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$H-mVSnd4S-pKlUvJF--3TQJpQxtanBsncmwV_QAwQzE"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> We could color them by wrapping then in an object as a \"marker\"\n\n`new Decimal(str)`~","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H-mVSnd4S-pKlUvJF--3TQJpQxtanBsncmwV_QAwQzE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We could color them by wrapping then in an object as a &quot;marker&quot;</blockquote></mx-reply><code>new Decimal(str)</code>~","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$H-mVSnd4S-pKlUvJF--3TQJpQxtanBsncmwV_QAwQzE"}},"msgtype":"m.text"},"ts":1695794373177,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$FA90_US9qc_MDBYuPACYL1VTE6BCncnJiGngw7JyJgI"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> We could color them by wrapping then in an object as a \"marker\"\n\n * `new Decimal(str)`!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$H-mVSnd4S-pKlUvJF--3TQJpQxtanBsncmwV_QAwQzE?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>We could color them by wrapping then in an object as a \"marker\"</blockquote></mx-reply> * <code>new Decimal(str)</code>!","m.mentions":{},"m.new_content":{"body":"`new Decimal(str)`!","format":"org.matrix.custom.html","formatted_body":"<code>new Decimal(str)</code>!","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FA90_US9qc_MDBYuPACYL1VTE6BCncnJiGngw7JyJgI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695794375406,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$J0VC3VxXc0QBHtOH_tNsCutBAGrdO0T498hqcFgeIzc"},
{"content":{"body":"> <@lucacasonato:matrix.org> re: string.prototype.decimalAdd()\n> \n> this sounds like coloring strings in some way? especially for typescript, you'd have to have some sort of colored string to make this not suck\n\nif this proposal means TS makes it easier to color strings, I'm all for it!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$lqrgEO7Gvsl9N2gr4HoNNzPZBN-7gxvBZXQqSgancu4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>re: string.prototype.decimalAdd()<br/><br/>this sounds like coloring strings in some way? especially for typescript, you&#39;d have to have some sort of colored string to make this not suck</blockquote></mx-reply>if this proposal means TS makes it easier to color strings, I'm all for it!","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lqrgEO7Gvsl9N2gr4HoNNzPZBN-7gxvBZXQqSgancu4"}},"msgtype":"m.text"},"ts":1695794376140,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TKiHBm8WjHWKd5yT10pNpYSpFaC6MJsRAHGcPq7jCjw"},
{"content":{"body":"> <@usharma:igalia.com> within an engine? we have a way to represent mathematical values in the spec\n\n * What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6I5ADDzPJ1bIkEI79-kgpfyQHacN0nERWqAa3TNAF2Y?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>within an engine? we have a way to represent mathematical values in the spec</blockquote></mx-reply> * What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","m.new_content":{"body":"What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","format":"org.matrix.custom.html","formatted_body":"What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.","msgtype":"m.text"},"m.relates_to":{"event_id":"$uxE8i7OdI4L67Txg61t2qRg2tlkJkyDwRH2bpdmOyFk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695794397623,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$vdJLftyL8flzA48bjFYtOI_H_0GWSigpnySqvg-i89w"},
{"content":{"body":"> <@msaboff:matrix.org> What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.\n\nright. Sorry I was mistaken in assuming that engines might have some way to represent mathematical values within the spec but I now realize that they're pure fiction 😕 ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uxE8i7OdI4L67Txg61t2qRg2tlkJkyDwRH2bpdmOyFk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br>What would be the proposed representation of such an intermediate mathematical value?  Number and Decimal have different significant digits and exponent ranges.  Number is inexact for decimal values.  If we had such an exact mathematical value, we'd use that for Number.</blockquote></mx-reply>right. Sorry I was mistaken in assuming that engines might have some way to represent mathematical values within the spec but I now realize that they're pure fiction 😕","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uxE8i7OdI4L67Txg61t2qRg2tlkJkyDwRH2bpdmOyFk"}},"msgtype":"m.text"},"ts":1695794401842,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$jZXgpTUbNkVFBLbZdkL1NPMvLRHhMLLNlxEW23BmlHc"},
{"content":{"body":"hell yeah love mauve strings","msgtype":"m.text"},"ts":1695794406169,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1-o9A7g9UwJNTkP2Aoy7QMftAwmHhvgLc3B5Rkb9-TE"},
{"content":{"body":"> <@bakkot:matrix.org> if this proposal means TS makes it easier to color strings, I'm all for it!\n\nactually yeah me too :D","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TKiHBm8WjHWKd5yT10pNpYSpFaC6MJsRAHGcPq7jCjw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if this proposal means TS makes it easier to color strings, I'm all for it!</blockquote></mx-reply>actually yeah me too :D","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TKiHBm8WjHWKd5yT10pNpYSpFaC6MJsRAHGcPq7jCjw"}},"msgtype":"m.text"},"ts":1695794409532,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$4oNc94MaSLtbpTumnB7_stE4XvNQmIXmiOYa9OseNEI"},
{"content":{"body":"> <@bakkot:matrix.org> if this proposal means TS makes it easier to color strings, I'm all for it!\n\n`'a'.blink()` color strings?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TKiHBm8WjHWKd5yT10pNpYSpFaC6MJsRAHGcPq7jCjw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>if this proposal means TS makes it easier to color strings, I'm all for it!</blockquote></mx-reply><code>'a'.blink()</code> color strings?","m.mentions":{"user_ids":["@bakkot:matrix.org","@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TKiHBm8WjHWKd5yT10pNpYSpFaC6MJsRAHGcPq7jCjw"}},"msgtype":"m.text"},"ts":1695794419849,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Ig39mq9D96MwFCENaXTa1SPtl2QGRxjoP3LztzEMmbk"},
{"content":{"body":"if you store it as a fraction of bigints and reduce after each step you get something that is both horribly slow and semantically bad","m.mentions":{},"msgtype":"m.text"},"ts":1695794438845,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DC-QYaJvpXAfBSfz4q1cG1daMh2Q9QvuDJVpWPDXatY"},
{"content":{"body":"> <@bakkot:matrix.org> so I think a big disconnect here is the purported benefit is node users, but the cost is imposed on browser vendors and users of webpages\n\nOur programs should be able to run on a multitude of environments, including browsers and non node/deno based \"server\" environments. That's the benefit of standardizing this in the language.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$a3josa2MVDdCZ8tOs3RcFmNYHL3_RyGR5tLuwCUqXFY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />so I think a big disconnect here is the purported benefit is node users, but the cost is imposed on browser vendors and users of webpages</blockquote></mx-reply>Our programs should be able to run on a multitude of environments, including browsers and non node/deno based &quot;server&quot; environments. That's the benefit of standardizing this in the language.","m.relates_to":{"m.in_reply_to":{"event_id":"$a3josa2MVDdCZ8tOs3RcFmNYHL3_RyGR5tLuwCUqXFY"}},"msgtype":"m.text"},"ts":1695794446541,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WYasdsxu1jC81BdW_E1Xc9dr8nhLmumbycq54ZbnAWk"},
{"content":{"body":"> <@mhofman:matrix.org> Our programs should be able to run on a multitude of environments, including browsers and non node/deno based \"server\" environments. That's the benefit of standardizing this in the language.\n\nI agree that is a benefit. I do not think the costs are commensurate with the benefits.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WYasdsxu1jC81BdW_E1Xc9dr8nhLmumbycq54ZbnAWk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Our programs should be able to run on a multitude of environments, including browsers and non node/deno based \"server\" environments. That's the benefit of standardizing this in the language.</blockquote></mx-reply>I agree that is a benefit. I do not think the costs are commensurate with the benefits.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WYasdsxu1jC81BdW_E1Xc9dr8nhLmumbycq54ZbnAWk"}},"msgtype":"m.text"},"ts":1695794497911,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$z7XnJkMUljS19-XbBccQSS6HBgBa-fErNhrjD75E_EM"},
{"content":{"body":"I think that, in this case, having a variant of node which strips TS types has fewer costs in general, even though it does have that one additional cost.","m.mentions":{},"msgtype":"m.text"},"ts":1695794539229,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kV34jENs9W9rfP_jK5EGozz5nf2fOBegsH2xTskZn6k"},
{"content":{"body":"not least of which that it would allow breaking changes ever","m.mentions":{},"msgtype":"m.text"},"ts":1695794552951,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QU7fxC7szD3sDY6p1mPlkS3c_UbbNg_XHUu7kuGm9K4"},
{"content":{"body":"and JSX, and so on","m.mentions":{},"msgtype":"m.text"},"ts":1695794559255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZwERTVAMfq61yGaNggpFOFshqOJ3L_EVEZNc3mzu_rA"},
{"content":{"body":"but also, more significantly, that it would not impose costs on users of webpages","m.mentions":{},"msgtype":"m.text"},"ts":1695794583090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PMSxOEj5PP9fMYCK8nqtLipeZDJfEc-7y1fbRBAd2CU"},
{"content":{"body":"(by making parsing JS slower/more expensive)","m.mentions":{},"msgtype":"m.text"},"ts":1695794596790,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xu8PCVtqD5ygkjQva1pz-AdEXFEqgyfGIlqIwPwG4ok"},
{"content":{"body":"I'll go back to my argument, why do browsers not ask that code they execute be in the form of binary AST.","msgtype":"m.text"},"ts":1695794762819,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ppu4vMOuoJfxadPQKnXD1n03A5JRHy9yeXfigtfx5Hs"},
{"content":{"body":"* I'll go back to my argument, why do browsers not require that code they execute be in the form of binary AST.","m.new_content":{"body":"I'll go back to my argument, why do browsers not require that code they execute be in the form of binary AST.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Ppu4vMOuoJfxadPQKnXD1n03A5JRHy9yeXfigtfx5Hs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695794780747,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4z1S2_eZlClmZonkqto7lbEV3Yzsw5PIVLP1fvvT2Hk"},
{"content":{"body":"how could they?","m.mentions":{},"msgtype":"m.text"},"ts":1695794825909,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$agPm2oVt-qMMQlNlX2yEGHW6ztcpSfexn3FFoxpbVfI"},
{"content":{"body":"if thats a hypothetical it requires too many \"suppose\"s for me to comprehend","m.mentions":{},"msgtype":"m.text"},"ts":1695794890240,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KmPt5jd4Fg9k-VR7ZiFUImInczJn-WEsQE9tW_hqaTs"},
{"content":{"body":"is this a serious question","m.mentions":{},"msgtype":"m.text"},"ts":1695794977434,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R3bsChGvpqb_5gVg_L0039fJJiIGKEZn83hMSMaOuwA"},
{"content":{"body":"I'm just trying to understand exactly how important the tradeoff between parsing performance and readability of executed code is","msgtype":"m.text"},"ts":1695794982319,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eewB9-7HycVSgbcrTdATpskefEQ3DlCrmlPeGbXVcJQ"},
{"content":{"body":"I'd love it if browsers could accept a binary AST format. I'm sure it would be much faster to execute.","m.mentions":{},"msgtype":"m.text"},"ts":1695794983222,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$jTjcVgoIVsGJX7b2YcsQeikZqFNWAdbe6D4jlz0TWl0"},
{"content":{"body":"cuz there can be serious answers","m.mentions":{},"msgtype":"m.text"},"ts":1695794987398,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_r3hRvKICwcuPXTw5u6nKnff3ULzuJ8msOYMdrA5XxM"},
{"content":{"body":"and it could serve as a standard interchange format to move code from one environment to another whose source was different","m.mentions":{},"msgtype":"m.text"},"ts":1695795032134,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$iw4klWrYVyq9m6l0ZCb5XXTZE7xHDBlu-6LLGpDesvQ"},
{"content":{"body":"like if we could cut off legacy and restart from the ground up would js even exist? probably not... wasm is significantly better ","m.mentions":{},"msgtype":"m.text"},"ts":1695795040831,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mmLE2e6spfPyu8n79V5iE4LtReUdC_R0zTkOINqoW4A"},
{"content":{"body":"And if there is actually a large cost to parsing if the type annotations are not present in the executed code.","msgtype":"m.text"},"ts":1695795062633,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BWrA0rPI0HxRatSVeeus_KPDESP7o50mZOrEjACQkbM"},
{"content":{"body":"Or if there are other avenues we could explore to mitigate the impact of engines being able to parse and ignore type annotations ","msgtype":"m.text"},"ts":1695795132777,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$82CmX8q4sw8rjlMVnCHP3d40Ky4S0e-xv_CUTj6mPLc"},
{"content":{"body":"In production scenarios where performance matters","msgtype":"m.text"},"ts":1695795152437,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$O5iY8hQUySvvVgyFCRHKTYN0gkdAKV58DAGfKSadOeM"},
{"content":{"body":"> <@mhofman:matrix.org> I'll go back to my argument, why do browsers not require that code they execute be in the form of binary AST.\n\nwe almost certainly would if the option existed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ppu4vMOuoJfxadPQKnXD1n03A5JRHy9yeXfigtfx5Hs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I&#39;ll go back to my argument, why do browsers not require that code they execute be in the form of binary AST.</blockquote></mx-reply>we almost certainly would if the option existed","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ppu4vMOuoJfxadPQKnXD1n03A5JRHy9yeXfigtfx5Hs"}},"msgtype":"m.text"},"ts":1695795631639,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1cU6fCOQK44SVICs5YMcPjfRFmbyj1wOon6i6FfEujs"},
{"content":{"body":"that would be a better world","m.mentions":{},"msgtype":"m.text"},"ts":1695795634426,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$shrmGKb6HdPbwwku6__vK10YSmkng20H00XiWLNmPM8"},
{"content":{"body":"but the option does not exist","m.mentions":{},"msgtype":"m.text"},"ts":1695795638906,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3LJLKH1MWy9dIGnojQkfx3RUUg0Hd6SyiQBL9NsaQeQ"},
{"content":{"body":"however, do note that when adding a _new_ thing, wasm, we _do_ require it to be compiled rather than accepting WAT","format":"org.matrix.custom.html","formatted_body":"however, do note that when adding a <em>new</em> thing, wasm, we <em>do</em> require it to be compiled rather than accepting WAT","m.mentions":{},"msgtype":"m.text"},"ts":1695795651899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BekXmFsnxubT2vT5BssKSu63ezY5OtGFwdvq7UzcaNw"},
{"content":{"body":"snek: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.","msgtype":"m.text"},"ts":1695795665425,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$GGMA-WnY4cb6PmRG96t_c8E1YgzF2HD8TmNdJGSroys"},
{"content":{"body":"recall that we went with binary ast as an option because we thought bytecode would be DOA","msgtype":"m.text"},"ts":1695795703004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Rf5jg_kMURHCmNTEPtSmEMmWuoXCo-BS7KDvy22uyig"},
{"content":{"body":"binary ast is a worse option than bytecode in every way for shipping compiled code","msgtype":"m.text"},"ts":1695795715139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DWUMO-DQKX7ZBdRN49UI43AygDAsVVYdpAi3vRMoXzs"},
{"content":{"body":"(not for tools, obviously)","msgtype":"m.text"},"ts":1695795719999,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b9HNcvJmO_tS1_vXOBkhQqo5VW_3g9-sN9JmQJrZBMM"},
{"content":{"body":"perhaps with wasm and the lessons there maybe we can think harder about a bytecode again","msgtype":"m.text"},"ts":1695795741377,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EQJ2lCCf_OGGohccc-l2OR03PCYUWh14oKOTpCH2uUM"},
{"content":{"body":"if you go through and try to answer every question here you eventually end up at wasm or something similar to wasm... the point of *everything* is that we have an existing ecosystem here","format":"org.matrix.custom.html","formatted_body":"if you go through and try to answer every question here you eventually end up at wasm or something similar to wasm... the point of <em>everything</em> is that we have an existing ecosystem here","m.mentions":{},"msgtype":"m.text"},"ts":1695795761760,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nWBZUmEUcPJrADtp0CzlmPv7ttjMw9hb6P3a_PmZR-4"},
{"content":{"body":"why would i end up at wasm? i'm talking about a JS bytecode that has 1:1 expressivity with source JS","msgtype":"m.text"},"ts":1695795787202,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q81yQvR8P_OCkSSO7G0LrFWrrG0rQcBQdRZNkV57Htw"},
{"content":{"body":"i mean mathieu's and msaboff's questions","m.mentions":{},"msgtype":"m.text"},"ts":1695795812261,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IokOH5lbr04NSRA8P80tH7rFufmV149Gh2QlfKaCFJI"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1695795816975,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mn0KJGrrbnjr3TfEI6DBfx9Un-rXT-MqiDwUAvD1PJg"},
{"content":{"body":"can we advance the queue","m.mentions":{},"msgtype":"m.text"},"ts":1695795832370,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_SEgHn5-5R6rsKnHHU4JamV1bDt9-7TCUKQeH4LSQEc"},
{"content":{"body":"But Wasm has issues as well.  Dev tooling, HTML interop, standard library...","msgtype":"m.text"},"ts":1695795838664,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$B3BaKhNyx64PNdMxX7-h9ry-BCBxwHQJCRzPp_zqKqo"},
{"content":{"body":"> <@msaboff:matrix.org> snek: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.\n\ni'd assume with semver","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GGMA-WnY4cb6PmRG96t_c8E1YgzF2HD8TmNdJGSroys?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br><a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.</blockquote></mx-reply>i'd assume with semver","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GGMA-WnY4cb6PmRG96t_c8E1YgzF2HD8TmNdJGSroys"}},"msgtype":"m.text"},"ts":1695795839857,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qpdVrz0BAlqc8wgsMPmCjcDX8c5xfuYzg3ee3A8gLpU"},
{"content":{"body":"> <@msaboff:matrix.org> snek: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.\n\n * i'd assume with semver, but maybe i'm missing something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GGMA-WnY4cb6PmRG96t_c8E1YgzF2HD8TmNdJGSroys?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br><a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: How do you version a BinaryAST?  Many proposals add new node to an implementation's AST.  How do you handle where the spec needs the source of an expression, e.g. RegExp or a stack trace?  There are many more issues.</blockquote></mx-reply> * i'd assume with semver, but maybe i'm missing something","m.mentions":{},"m.new_content":{"body":"i'd assume with semver, but maybe i'm missing something","format":"org.matrix.custom.html","formatted_body":"i'd assume with semver, but maybe i'm missing something","m.mentions":{"user_ids":["@msaboff:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qpdVrz0BAlqc8wgsMPmCjcDX8c5xfuYzg3ee3A8gLpU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695795850071,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qrz5uGxZEYgvfVi6p79zBa95qI2Xq5HowJyM98Tb_cw"},
{"content":{"body":"why does that ping me lol","m.mentions":{},"msgtype":"m.text"},"ts":1695795850283,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$G4Tm5ZLw8wqkreJrVrGa7UDAvCZFoDuE2gojMWcieuE"},
{"content":{"body":"because element","m.mentions":{},"msgtype":"m.text"},"ts":1695795869437,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$6gK3wCE6xuWRl5LrluQqiWMOm85FKOaQsk_gLZMm7WA"},
{"content":{"body":"anyway the reason i mentioned it was because wasm adds new bytecode ops without versioning at all (wasm is still on version 0x1 mvp). it just takes some time to plan everything out.","m.mentions":{},"msgtype":"m.text"},"ts":1695795922711,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Pi4GxrnnFhAJ4fDXDc5mUdryFUAiQKwwp2m22EgPEC0"},
{"content":{"body":" * anyway the reason i mentioned it was because wasm adds new bytecode ops without versioning at all (wasm is still on version 0x1 \"mvp\"). it just takes some time to plan everything out.","m.mentions":{},"m.new_content":{"body":"anyway the reason i mentioned it was because wasm adds new bytecode ops without versioning at all (wasm is still on version 0x1 \"mvp\"). it just takes some time to plan everything out.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Pi4GxrnnFhAJ4fDXDc5mUdryFUAiQKwwp2m22EgPEC0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695795937170,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$78cJ24abuRBKrOSVPU0GJ1FJASHNsTficmGUoZQ9i9w"},
{"content":{"body":"Is it different from JS adding new syntax?","msgtype":"m.text"},"ts":1695795978363,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TH4oYjqolkH_hj2RRrI8ZoCLF2Q_dAdGuSI1s5dDh1k"},
{"content":{"body":"at a theoretical level no it is not","m.mentions":{},"msgtype":"m.text"},"ts":1695796000463,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UM9KUpmPGvkhAuM_MD7SdTCqxC8GK-B46-IUnZkW6qo"},
{"content":{"body":"but humans find it easier to namespace words than numbers ","m.mentions":{},"msgtype":"m.text"},"ts":1695796009673,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OSuz7-aLXFQ9Dg85ekEq-1BXHfL3sYXl3SLtTZ8hhjI"},
{"content":{"body":" * but humans find it easier to namespace words and symbols than numbers ","m.mentions":{},"m.new_content":{"body":"but humans find it easier to namespace words and symbols than numbers ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OSuz7-aLXFQ9Dg85ekEq-1BXHfL3sYXl3SLtTZ8hhjI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796020168,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Hk0PtDqC_wkWOgU_xl4TsoBmEOoltSHd4xv2Jrt8Yj8"},
{"content":{"body":"> <@devsnek:matrix.org> i mean mathieu's and msaboff's questions\n\nNo I don't think compiling js programs to wasm makes sense. But instead of minifying and to allow making uncompiled JavaScript more useful, I would entertain an efficient source transform of JS that can be efficiently parsed by engines.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IokOH5lbr04NSRA8P80tH7rFufmV149Gh2QlfKaCFJI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br />i mean mathieu's and msaboff's questions</blockquote></mx-reply>No I don't think compiling js programs to wasm makes sense. But instead of minifying and to allow making uncompiled JavaScript more useful, I would entertain an efficient source transform of JS that can be efficiently parsed by engines.","m.relates_to":{"m.in_reply_to":{"event_id":"$IokOH5lbr04NSRA8P80tH7rFufmV149Gh2QlfKaCFJI"}},"msgtype":"m.text"},"ts":1695796138019,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XNqn5tR8YhIoaGa4G-DsGV4N80UnLxP5GnmOeqfJ02U"},
{"content":{"body":"i fail to see how \"an infinite iterator of empty tuples\" is a logical option but k","m.mentions":{},"msgtype":"m.text"},"ts":1695796159560,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9YX0ggazhJedIJFrcUbLwv9loWM4bDgfq7d2YXWzCkQ"},
{"content":{"body":"> <@ljharb:matrix.org> i fail to see how \"an infinite iterator of empty tuples\" is a logical option but k\n\nI guess that'd have to be the tail of everything if it's what would happen for zero things","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9YX0ggazhJedIJFrcUbLwv9loWM4bDgfq7d2YXWzCkQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i fail to see how &quot;an infinite iterator of empty tuples&quot; is a logical option but k</blockquote></mx-reply>I guess that'd have to be the tail of everything if it's what would happen for zero things","m.relates_to":{"m.in_reply_to":{"event_id":"$9YX0ggazhJedIJFrcUbLwv9loWM4bDgfq7d2YXWzCkQ"}},"msgtype":"m.text"},"ts":1695796183427,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FT--YWZoilbs3YJm5eutyTwHcvm0wdTxs06-rNefpjg"},
{"content":{"body":"it would be empty","m.mentions":{},"msgtype":"m.text"},"ts":1695796186001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eeZRdhNIHkwBESd9ZOXxtaT1aEdbCLdO9zLqc8urMd8"},
{"content":{"body":"not all that useful...","msgtype":"m.text"},"ts":1695796186595,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SmLNhVM7CbcCTkpNkJWGYp8vsNyl8rKf26e4h00nt_0"},
{"content":{"body":"producing an infinite iterator anywhere seems pretty harmful to me","m.mentions":{},"msgtype":"m.text"},"ts":1695796239453,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iF9-G4ybMvmw05BSe4sBrtQAYOqS7dc_dGmIgeSpZkk"},
{"content":{"body":"network streams are infinite iterators","m.mentions":{},"msgtype":"m.text"},"ts":1695796259970,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$piI-kTlS-7cRnRjx6Q8Z5K6ehLneB9QnFy9ANWkxOl0"},
{"content":{"body":" * network streams are infinite async iterators","m.mentions":{},"m.new_content":{"body":"network streams are infinite async iterators","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$piI-kTlS-7cRnRjx6Q8Z5K6ehLneB9QnFy9ANWkxOl0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796267380,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7yRcsy_YWgSNb3JBaglLWJQ32P73TQyN3XDJWIIYIh8"},
{"content":{"body":"I think the current version of Wasm lacks some of what is needed to cleanly compile JS to Wasm.  Its Turing complete, but not optimal.  Also you'd need to include your own garbage collector, etc.","msgtype":"m.text"},"ts":1695796272259,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$xDegw9upewVTXp1VtUwnyoaWqXK4abB8cTIlZLNUmLc"},
{"content":{"body":"you should not compile js to wasm","m.mentions":{},"msgtype":"m.text"},"ts":1695796287939,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_pFUUoHQE5L2pH6MUlAXJshyBP-f-pZ5DPzwyeN49DU"},
{"content":{"body":"Yeah, I prefer `Iterator.zip([...], mapper?)` (omitted mapping just produces an array of the items)","format":"org.matrix.custom.html","formatted_body":"Yeah, I prefer <code>Iterator.zip([...], mapper?)</code> (omitted mapping just produces an array of the items)","m.mentions":{},"msgtype":"m.text"},"ts":1695796358624,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$cO1rWw6Pl7gVR8TsNE10SU5imqpmoLPF4hUGdR3dIR4"},
{"content":{"body":"i got distracted, why does zip have a mapper","m.mentions":{},"msgtype":"m.text"},"ts":1695796383518,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-Bh4wu_5qOcCGhbqwipngx3xswsBEUyRGPQjdDozJXE"},
{"content":{"body":"snek: it's a combiner","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: it's a combiner","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1695796392031,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$fP4ArCjyYq_Yk75vbUoz8oF9jRCj3FquWZdBebKtRhM"},
{"content":{"body":"zipWith","m.mentions":{},"msgtype":"m.text"},"ts":1695796394298,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SOuChMKmq5ZXQtHt3ZPzjJVDuEvCkpdMoGflui6gdM8"},
{"content":{"body":"i don't like the idea of being forced to wrap multiple iterators in an iterator just to zip them","m.mentions":{},"msgtype":"m.text"},"ts":1695796396021,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$snDZatzo2uqxZlgZBqT8zmZblVf4LiE7ctUwNttTn20"},
{"content":{"body":"I mean, it's a temp array","m.mentions":{},"msgtype":"m.text"},"ts":1695796405708,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$i_QLKgyaYdQ5JiqhFSB16PUSXErMU6tg1YimocYNi1w"},
{"content":{"body":" * i don't like the idea of being forced to wrap multiple iterators in an iterator just to zip them, which is why i want varargs or an object","m.mentions":{},"m.new_content":{"body":"i don't like the idea of being forced to wrap multiple iterators in an iterator just to zip them, which is why i want varargs or an object","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$snDZatzo2uqxZlgZBqT8zmZblVf4LiE7ctUwNttTn20","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796415859,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IfYhmKvTWMi1vY_RHAftfGlwPYJIEUA_5TfjcDn_GgQ"},
{"content":{"body":"yes, and forcing that imo is not a great design","m.mentions":{},"msgtype":"m.text"},"ts":1695796423233,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$roTKo7dyH9xeBy1eouvfEpTWCDoc2WmkfrOBnPqiDrA"},
{"content":{"body":"i don't understand what zipWith means, i should have paid better attention i'm sorry","m.mentions":{},"msgtype":"m.text"},"ts":1695796427301,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$u1BdlLCMjUeWLf9Z5Byw5ctlONYxgiNDYj5C51taawE"},
{"content":{"body":"> <@ljharb:matrix.org> i don't like the idea of being forced to wrap multiple iterators in an iterator just to zip them, which is why i want varargs or an object\n\ndo you also not like the idea of being forced to wrap multiple promises in an iterable just to await all of them?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$snDZatzo2uqxZlgZBqT8zmZblVf4LiE7ctUwNttTn20?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i don&#39;t like the idea of being forced to wrap multiple iterators in an iterator just to zip them, which is why i want varargs or an object</blockquote></mx-reply>do you also not like the idea of being forced to wrap multiple promises in an iterable just to await all of them?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$snDZatzo2uqxZlgZBqT8zmZblVf4LiE7ctUwNttTn20"}},"msgtype":"m.text"},"ts":1695796432756,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oShPoJFanA1RiJ886CML1p4oIIVGJvO7d15A1UFXgLE"},
{"content":{"body":"> <@devsnek:matrix.org> i don't understand what zipWith means, i should have paid better attention i'm sorry\n\nIterator.zipWith(Math.max, a, b, c)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$u1BdlLCMjUeWLf9Z5Byw5ctlONYxgiNDYj5C51taawE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don&#39;t understand what zipWith means, i should have paid better attention i&#39;m sorry</blockquote></mx-reply>Iterator.zipWith(Math.max, a, b, c)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$u1BdlLCMjUeWLf9Z5Byw5ctlONYxgiNDYj5C51taawE"}},"msgtype":"m.text"},"ts":1695796447233,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Gh7hB6KOTm6S9fK020jDgI-PJTH5PUuwC38SGgYRz7A"},
{"content":{"body":"> <@bakkot:matrix.org> do you also not like the idea of being forced to wrap multiple promises in an iterable just to await all of them?\n\ncorrect, i do not like that and do want a form that takes an object literal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oShPoJFanA1RiJ886CML1p4oIIVGJvO7d15A1UFXgLE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>do you also not like the idea of being forced to wrap multiple promises in an iterable just to await all of them?</blockquote></mx-reply>correct, i do not like that and do want a form that takes an object literal","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oShPoJFanA1RiJ886CML1p4oIIVGJvO7d15A1UFXgLE"}},"msgtype":"m.text"},"ts":1695796447604,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GA4osNkhRBPlEwcgTBhfydkLHM2-cAYp9A42vJW61N8"},
{"content":{"body":"what is the difference between an object literal and an array here?","m.mentions":{},"msgtype":"m.text"},"ts":1695796470022,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Smwzk5YjAOH-Pmv2u-ZjCozJqaGPL9W3ouBGsK7wrTM"},
{"content":{"body":"the thing you asked for was the varargs version, which is not like an object literal","m.mentions":{},"msgtype":"m.text"},"ts":1695796485000,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L11WV5fBy9JOnJ81C_uNhoUjP75mdbwky48jmcxtdkQ"},
{"content":{"body":"> <@lucacasonato:matrix.org> Iterator.zipWith(Math.max, a, b, c)\n\ni don't understand what this does","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Gh7hB6KOTm6S9fK020jDgI-PJTH5PUuwC38SGgYRz7A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>Iterator.zipWith(Math.max, a, b, c)</blockquote></mx-reply>i don't understand what this does","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Gh7hB6KOTm6S9fK020jDgI-PJTH5PUuwC38SGgYRz7A"}},"msgtype":"m.text"},"ts":1695796486210,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dhuV_fRWjeKy0fP2MRteqwadNiLS3xDcNAxxGPEx63A"},
{"content":{"body":"I think it's easiest to understand zip as transposing an array of arrays, fwiw.","m.mentions":{},"msgtype":"m.text"},"ts":1695796489728,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$68x3EDi3j6g7N440kTYqEGMjpi1LX4Bbbe5bemq-YTE"},
{"content":{"body":"> <@bakkot:matrix.org> the thing you asked for was the varargs version, which is not like an object literal\n\nsure, `Promise.all(a, b, c)` would be fine too","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$L11WV5fBy9JOnJ81C_uNhoUjP75mdbwky48jmcxtdkQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the thing you asked for was the varargs version, which is not like an object literal</blockquote></mx-reply>sure, <code>Promise.all(a, b, c)</code> would be fine too","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$L11WV5fBy9JOnJ81C_uNhoUjP75mdbwky48jmcxtdkQ"}},"msgtype":"m.text"},"ts":1695796499585,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$G8e4OpSnTn4MpBFO1UUyIb9V_vEv0SfKBFdWxq2-ZKQ"},
{"content":{"body":"i am familiar with zip in other languages, i've never seen it paired with a function","m.mentions":{},"msgtype":"m.text"},"ts":1695796513903,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$S3H4iTMBcdVLgHqxQ6KDVu4CYQ5C9RJ1N3HkXYgHTas"},
{"content":{"body":"> <@tabatkins:matrix.org> I think it's easiest to understand zip as transposing an array of arrays, fwiw.\n\nnothing about that sentence reads \"easy\" to me ¯\\\\\\_(ツ)_/¯ ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$68x3EDi3j6g7N440kTYqEGMjpi1LX4Bbbe5bemq-YTE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I think it&#39;s easiest to understand zip as transposing an array of arrays, fwiw.</blockquote></mx-reply>nothing about that sentence reads \"easy\" to me ¯\\_(ツ)_/¯","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$68x3EDi3j6g7N440kTYqEGMjpi1LX4Bbbe5bemq-YTE"}},"msgtype":"m.text"},"ts":1695796514114,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B9weeu9ZYNR8pT4gnBrgLbmwXXf2NdSUgCteb7iuw14"},
{"content":{"body":"> <@tabatkins:matrix.org> I think it's easiest to understand zip as transposing an array of arrays, fwiw.\n\nYeah, the variadic map thing can be called map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$68x3EDi3j6g7N440kTYqEGMjpi1LX4Bbbe5bemq-YTE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>I think it&#39;s easiest to understand zip as transposing an array of arrays, fwiw.</blockquote></mx-reply>Yeah, the variadic map thing can be called map","m.relates_to":{"m.in_reply_to":{"event_id":"$68x3EDi3j6g7N440kTYqEGMjpi1LX4Bbbe5bemq-YTE"}},"msgtype":"m.text"},"ts":1695796515202,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K1bAqNTDpLkKg-jWQ5hC7sj8SwFzQJJqe7oRYIsWFGY"},
{"content":{"body":"(just my intuition)","msgtype":"m.text"},"ts":1695796526792,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pPwOGq-jVI8196Lf93OdZ9a_yiesrkEdL2RkHcTVcZk"},
{"content":{"body":"I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.","m.mentions":{},"msgtype":"m.text"},"ts":1695796527800,"senderName":"rhysd","senderId":"@rhysd:matrix.org","id":"$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE"},
{"content":{"body":"i don't understand what the function does","m.mentions":{},"msgtype":"m.text"},"ts":1695796530600,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_M6jUJS3tAiDf1VCruTJWAKqh9fQiIi9pkgUmD_gUFI"},
{"content":{"body":"> <@devsnek:matrix.org> i don't understand what this does\n\n`Iterator.zipWith([a, b], mapper)` is the same as `Iterator.zip([a, b]).map(vs => mapper(...vs))`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dhuV_fRWjeKy0fP2MRteqwadNiLS3xDcNAxxGPEx63A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don't understand what this does</blockquote></mx-reply><code>Iterator.zipWith([a, b], mapper)</code> is the same as <code>Iterator.zip([a, b]).map(vs =&gt; mapper(...vs))</code>","m.mentions":{"user_ids":["@devsnek:matrix.org","@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dhuV_fRWjeKy0fP2MRteqwadNiLS3xDcNAxxGPEx63A"}},"msgtype":"m.text"},"ts":1695796544386,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EO4rw_tJWGgC8TiqsqrT40SmeQMNKUJMmZ6d9_aD1ks"},
{"content":{"body":"it just lets you skip making an intermediate array for results and instead immediately passes them to a function","m.mentions":{},"msgtype":"m.text"},"ts":1695796557928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ifR2bRPmYUsAn9VmLVP4Ugn2vTJv5qlGw3RidnAyZd8"},
{"content":{"body":"that's all","m.mentions":{},"msgtype":"m.text"},"ts":1695796560566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tmYHFHhdUcXRcp8LBO4KFGXjfRUUrwWW09SuvkbayaQ"},
{"content":{"body":"> <@rhysd:matrix.org> I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.\n\nrust has this, and it is used commonly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rhysd:matrix.org\">@rhysd:matrix.org</a><br>I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.</blockquote></mx-reply>rust has this, and it is used commonly","m.mentions":{"user_ids":["@rhysd:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE"}},"msgtype":"m.text"},"ts":1695796563482,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PAYSjkKnetjX9XfVgZYUO4cwN_yxhYIVWDoLp5-JjEc"},
{"content":{"body":"in this case there is no intermediate array tho, because of iterator helpers?","m.mentions":{},"msgtype":"m.text"},"ts":1695796570755,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1Xd2HSiUCAmOjOD-IyA9plZv7JhQsFL2puts83nBt9Q"},
{"content":{"body":"> <@rhysd:matrix.org> I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.\n\n * rust has this, and it is used commonly, i think the separate func is less common tbh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rhysd:matrix.org\">@rhysd:matrix.org</a><br>I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.</blockquote></mx-reply> * rust has this, and it is used commonly, i think the separate func is less common tbh","m.mentions":{},"m.new_content":{"body":"rust has this, and it is used commonly, i think the separate func is less common tbh","format":"org.matrix.custom.html","formatted_body":"rust has this, and it is used commonly, i think the separate func is less common tbh","m.mentions":{"user_ids":["@rhysd:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PAYSjkKnetjX9XfVgZYUO4cwN_yxhYIVWDoLp5-JjEc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796572714,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BhQmb9sFDAtk6qnUUCopz2mTrTHzt1ZKVSccscxglRI"},
{"content":{"body":" * in this case there is no intermediate array tho, because of iterator helpers? it's not like Array.from","m.mentions":{},"m.new_content":{"body":"in this case there is no intermediate array tho, because of iterator helpers? it's not like Array.from","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1Xd2HSiUCAmOjOD-IyA9plZv7JhQsFL2puts83nBt9Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796576149,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jDmqsAJF-Zuu9SdwNojyqsHWq7Vu7WMi1b4-PCIRX1I"},
{"content":{"body":"> <@ljharb:matrix.org> in this case there is no intermediate array tho, because of iterator helpers? it's not like Array.from\n\nthere is an intermediate array? `zip` produces arrays","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1Xd2HSiUCAmOjOD-IyA9plZv7JhQsFL2puts83nBt9Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>in this case there is no intermediate array tho, because of iterator helpers? it&#39;s not like Array.from</blockquote></mx-reply>there is an intermediate array? <code>zip</code> produces arrays","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1Xd2HSiUCAmOjOD-IyA9plZv7JhQsFL2puts83nBt9Q"}},"msgtype":"m.text"},"ts":1695796584323,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OewfzH3oXj_VPe234JKX4MzPoxXmfWEFKsDW74o3bTQ"},
{"content":{"body":"an iterator of arrays","m.mentions":{},"msgtype":"m.text"},"ts":1695796588163,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dPKQ2tsCfeApTW081PMmxt_rkxzZgXMq4BlQMZJMlXo"},
{"content":{"body":"> <@bakkot:matrix.org> it just lets you skip making an intermediate array for results and instead immediately passes them to a function\n\ngot it, ty","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ifR2bRPmYUsAn9VmLVP4Ugn2vTJv5qlGw3RidnAyZd8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it just lets you skip making an intermediate array for results and instead immediately passes them to a function</blockquote></mx-reply>got it, ty","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ifR2bRPmYUsAn9VmLVP4Ugn2vTJv5qlGw3RidnAyZd8"}},"msgtype":"m.text"},"ts":1695796594499,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1Jl-HpEZu-o3JWdAckPLbP7vPAcHatTaBaVynDkIOVM"},
{"content":{"body":"> <@rhysd:matrix.org> I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.\n\n.NET-based languages like C# make this available as an extension method, so it can be used both as a static method and like an instance method: https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip?view=net-7.0","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rhysd:matrix.org\">@rhysd:matrix.org</a><br>I wonder how about using methods like it1.zip(it2).zip(it3) instead of function like Rust does.</blockquote></mx-reply>.NET-based languages like C# make this available as an extension method, so it can be used both as a static method and like an instance method: https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip?view=net-7.0","m.mentions":{"user_ids":["@rhysd:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$33qAXfsHAZtr420t4N7ECPEEaf4VavoOVY_XJmZ2ceE"}},"msgtype":"m.text"},"ts":1695796607173,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WfLo349rXkcYSxHm1fZed7l8h9Q4b3AKJ9VHkCLOS-c"},
{"content":{"body":"> <@bakkot:matrix.org> there is an intermediate array? `zip` produces arrays\n\nahhh right, so the mapper lets you skip that step, fair point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OewfzH3oXj_VPe234JKX4MzPoxXmfWEFKsDW74o3bTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there is an intermediate array? <code>zip</code> produces arrays</blockquote></mx-reply>ahhh right, so the mapper lets you skip that step, fair point.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OewfzH3oXj_VPe234JKX4MzPoxXmfWEFKsDW74o3bTQ"}},"msgtype":"m.text"},"ts":1695796607738,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CQDR_kP2_KU4CBuhl0MKLBo6Zoi6WoJjyNBUISREkMA"},
{"content":{"body":"> <@bakkot:matrix.org> there is an intermediate array? `zip` produces arrays\n\n * ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OewfzH3oXj_VPe234JKX4MzPoxXmfWEFKsDW74o3bTQ?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there is an intermediate array? <code>zip</code> produces arrays</blockquote></mx-reply> * ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then","m.mentions":{},"m.new_content":{"body":"ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then","format":"org.matrix.custom.html","formatted_body":"ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CQDR_kP2_KU4CBuhl0MKLBo6Zoi6WoJjyNBUISREkMA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796615009,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HDzOCULC-67-NTWk3Sn6b1YxXT9ewXcX2Q4h8xwOJB4"},
{"content":{"body":" * ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then (in a good way)","format":"org.matrix.custom.html","formatted_body":" * ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then (in a good way)","m.mentions":{},"m.new_content":{"body":"ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then (in a good way)","format":"org.matrix.custom.html","formatted_body":"ahhh right, so the mapper lets you skip that step, fair point. that is like Array.from then (in a good way)","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CQDR_kP2_KU4CBuhl0MKLBo6Zoi6WoJjyNBUISREkMA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796618901,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i2h3-jquDk9kbjeA602YECMSGjDMgMs39q86tg_GKDg"},
{"content":{"body":"idk how convinced i am of zipWith existing but 🤷","m.mentions":{},"msgtype":"m.text"},"ts":1695796624299,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UAeMpVvhKSJ2sWP7xAiy5xSl9L3ZW1j7X0zyOUf7P_o"},
{"content":{"body":"Yup, the mapper is exactly the same reasoning as Array.from","m.mentions":{},"msgtype":"m.text"},"ts":1695796628782,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$4l1jmdItz9AfxdqMleZMienctkVr7w7y4Ew8M3NsyvE"},
{"content":{"body":"> <@bakkot:matrix.org> it just lets you skip making an intermediate array for results and instead immediately passes them to a function\n\nYeah this sounds useful but is zip the right name, or map? maybe zip should just take the iterators, and not a function, and you use map if you have a function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ifR2bRPmYUsAn9VmLVP4Ugn2vTJv5qlGw3RidnAyZd8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it just lets you skip making an intermediate array for results and instead immediately passes them to a function</blockquote></mx-reply>Yeah this sounds useful but is zip the right name, or map? maybe zip should just take the iterators, and not a function, and you use map if you have a function","m.relates_to":{"m.in_reply_to":{"event_id":"$ifR2bRPmYUsAn9VmLVP4Ugn2vTJv5qlGw3RidnAyZd8"}},"msgtype":"m.text"},"ts":1695796639351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N7m6Y3WZ6Hl0vzFgSwCIWxhlehKWadD5bTTcmJZMxUE"},
{"content":{"body":"Could be omitted but it's a common case (in my experience, at least)","m.mentions":{},"msgtype":"m.text"},"ts":1695796644135,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$kPkoXaNF_Aage12JLZqhKmwYiQ_t1jZCsDZBqtMlXq8"},
{"content":{"body":"either way as long as prototype.zip exists and does the normal thing i'm fine","m.mentions":{},"msgtype":"m.text"},"ts":1695796665328,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oDESYk-20j14c4CPfrOviw0f95ptOQTRHwzdoDmzAa8"},
{"content":{"body":"> <@littledan:matrix.org> Yeah this sounds useful but is zip the right name, or map? maybe zip should just take the iterators, and not a function, and you use map if you have a function\n\nI am fine with that outcome personally","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$N7m6Y3WZ6Hl0vzFgSwCIWxhlehKWadD5bTTcmJZMxUE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah this sounds useful but is zip the right name, or map? maybe zip should just take the iterators, and not a function, and you use map if you have a function</blockquote></mx-reply>I am fine with that outcome personally","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$N7m6Y3WZ6Hl0vzFgSwCIWxhlehKWadD5bTTcmJZMxUE"}},"msgtype":"m.text"},"ts":1695796674407,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-j7gkpgLs66ljRoyVwoZjLh40yVjnFgWREBC4lFfhL4"},
{"content":{"body":"it is kind of wild that self-hosted JS in JSC (and presumably not just JSC) uses `var` exclusively to avoid the perf implications of TDZ","format":"org.matrix.custom.html","formatted_body":"it is kind of wild that self-hosted JS in JSC (and presumably not just JSC) uses <code>var</code> exclusively to avoid the perf implications of TDZ","m.mentions":{},"msgtype":"m.text"},"ts":1695796678942,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$iSj7pxeDR4RJX1PPXQ04EnZmAX0CunocR-TRBMeRNGs"},
{"content":{"body":"the battle against intermediate objects is already hopelessly lost when using iterators","m.mentions":{},"msgtype":"m.text"},"ts":1695796691826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Oo2k8RHO4i3stuQpd62HsdxvkSFvu6BWgbierjXT100"},
{"content":{"body":"so it may not be worth having a new method solely to allow you to skip some intermediate objects...","m.mentions":{},"msgtype":"m.text"},"ts":1695796710966,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aApBE8-1eefdl9k3G-zmgSmtWOBzlHHmQp_vPTMh93I"},
{"content":{"body":"`zip` is a useful name because its what many people reach for in many languages, as well as many existing js libraries.","format":"org.matrix.custom.html","formatted_body":"<code>zip</code> is a useful name because its what many people reach for in many languages, as well as many existing js libraries.","m.mentions":{},"msgtype":"m.text"},"ts":1695796715460,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMpHloMsWznbnDRMHuKsajgxSLpUoePMQ2XhqWqPXrA"},
{"content":{"body":"ryzokuken: can you move the queue to shu's topic?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>: can you move the queue to shu's topic?","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"ts":1695796731557,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$W6zuyJF5V_J677RAt3Wv3qEuCJRayfFd_jssiDqmVZw"},
{"content":{"body":"done","m.mentions":{},"msgtype":"m.text"},"ts":1695796746917,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Tdvik21r5J-vpwkyBJR0kzqFoUfav_dH4o3IRAxplBM"},
{"content":{"body":"apologies I missed it","m.mentions":{},"msgtype":"m.text"},"ts":1695796749755,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$uXq1Kp69XxKhT3ldEV16zDjgWeZwJgQgVNuWvADqvK0"},
{"content":{"body":"thanks!","m.mentions":{},"msgtype":"m.text"},"ts":1695796751850,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$tfSt6vTJA9TvNXGKsw0Qmn2W4IfW1L_M-TjUReSvlWQ"},
{"content":{"body":"Yeah, def shouldn't be named something other than `zip` imo","format":"org.matrix.custom.html","formatted_body":"Yeah, def shouldn't be named something other than <code>zip</code> imo","m.mentions":{},"msgtype":"m.text"},"ts":1695796753767,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Px6_tWpIhKWu78t15sGpPr6wwwnrLDWgTNbaSFZ289E"},
{"content":{"body":"> <@bakkot:matrix.org> so it may not be worth having a new method solely to allow you to skip some intermediate objects...\n\nsure but variadic map is probably also ergonomically motivated (just it'd be a weird name for zip itself)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aApBE8-1eefdl9k3G-zmgSmtWOBzlHHmQp_vPTMh93I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>so it may not be worth having a new method solely to allow you to skip some intermediate objects...</blockquote></mx-reply>sure but variadic map is probably also ergonomically motivated (just it'd be a weird name for zip itself)","m.relates_to":{"m.in_reply_to":{"event_id":"$aApBE8-1eefdl9k3G-zmgSmtWOBzlHHmQp_vPTMh93I"}},"msgtype":"m.text"},"ts":1695796760813,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4O0vI0pWk0bPZE-bKiC8P1FK0E8bBPlYPpHT6Jy1wkE"},
{"content":{"body":"(or some variant like `zipLongest`","format":"org.matrix.custom.html","formatted_body":"(or some variant like <code>zipLongest</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695796764694,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$Wt6kZYIl4Z6zvbAzPuDyEnMOAJ6Jy2mcDvU_VIL_TI8"},
{"content":{"body":" * (or some variant like `zipLongest`)","format":"org.matrix.custom.html","formatted_body":" * (or some variant like <code>zipLongest</code>)","m.mentions":{},"m.new_content":{"body":"(or some variant like `zipLongest`)","format":"org.matrix.custom.html","formatted_body":"(or some variant like <code>zipLongest</code>)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Wt6kZYIl4Z6zvbAzPuDyEnMOAJ6Jy2mcDvU_VIL_TI8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796767542,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$PuvlT2ENxw7R2Vh-FmhlTHFLKPDgGs7wfsoQdE9dupY"},
{"content":{"body":"or... no, it'd look weird as an iterator method... zip will just read better","msgtype":"m.text"},"ts":1695796797558,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DwP8Uy8FTlsM2CXlbPnE8FBrBkl6CkPzXdwCaBZIbvY"},
{"content":{"body":"> <@littledan:matrix.org> sure but variadic map is probably also ergonomically motivated (just it'd be a weird name for zip itself)\n\nvariadic map doesn't make as much sense in JS because map is a prototype method rather than being `map(fn, iter)`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4O0vI0pWk0bPZE-bKiC8P1FK0E8bBPlYPpHT6Jy1wkE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>sure but variadic map is probably also ergonomically motivated (just it'd be a weird name for zip itself)</blockquote></mx-reply>variadic map doesn't make as much sense in JS because map is a prototype method rather than being <code>map(fn, iter)</code>","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4O0vI0pWk0bPZE-bKiC8P1FK0E8bBPlYPpHT6Jy1wkE"}},"msgtype":"m.text"},"ts":1695796805869,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R5AubexP9NKfkmnitT1uXp7kAMUHvNuqWVHtkWG7P3U"},
{"content":{"body":"anyone know website that chrome publish their telemetry data of language features?","m.mentions":{},"msgtype":"m.text"},"ts":1695796869964,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$7nZtefBrqcvzUcq_zXWIAeU_Vm30wFAVVRWLfyqihgU"},
{"content":{"body":"https://chromestatus.com/metrics/feature/popularity","msgtype":"m.text"},"ts":1695796885638,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pw7QIpDaVUfWFLWbISzqu-140cCAm0D_Ad1rR_lMOaQ"},
{"content":{"body":"well, not everything has a telemetry thing","msgtype":"m.text"},"ts":1695796895713,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9O71e7xtHHzv23aOoBtKkC815RGgVab7uTZG1wRNF78"},
{"content":{"body":"> <@devsnek:matrix.org> either way as long as prototype.zip exists and does the normal thing i'm fine\n\nwould you also be OK with a static method?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oDESYk-20j14c4CPfrOviw0f95ptOQTRHwzdoDmzAa8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>either way as long as prototype.zip exists and does the normal thing i&#39;m fine</blockquote></mx-reply>would you also be OK with a static method?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oDESYk-20j14c4CPfrOviw0f95ptOQTRHwzdoDmzAa8"}},"msgtype":"m.text"},"ts":1695796901568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BHKRyfA02Bb302K7MS9R2i7Ksma5-jqV8fbC-Jr77Pc"},
{"content":{"body":"static method seems a little more natural to me...","m.mentions":{},"msgtype":"m.text"},"ts":1695796910237,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pGPAv5tFBKcX0fOZsm_0ISXwzzbN1RIfU2uG5L1ReOY"},
{"content":{"body":"I think static n-iterator version, and prototype 2-iterator version, make sense together.","m.mentions":{},"msgtype":"m.text"},"ts":1695796940488,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$pBFWfjMG8Q2cf70HQYhcMhTCF_heflAapROG-pztqcU"},
{"content":{"body":"as long as i can do zipping without ever running into the one that has the function","m.mentions":{},"msgtype":"m.text"},"ts":1695796952029,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4wu7GD-u8-HPRmsRMESJHo1CW4q2Ms8iXPIK5uAMyI4"},
{"content":{"body":"arr1.zip(arr2, mapper)","m.mentions":{},"msgtype":"m.text"},"ts":1695796955211,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$frR5OsaFZIBdW-qJaFMME1PlbmH6kedAcMm24MRnqTU"},
{"content":{"body":" * as long as i can do zipping without ever running into the one that has the map arg","m.mentions":{},"m.new_content":{"body":"as long as i can do zipping without ever running into the one that has the map arg","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4wu7GD-u8-HPRmsRMESJHo1CW4q2Ms8iXPIK5uAMyI4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695796955545,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1zqV0br6UHRDsBSvg2T6zN23qxgIRXk5E3Lxe1ND3cA"},
{"content":{"body":"and Iterator.zip([arr1, arr2, arr3], mapper)","m.mentions":{},"msgtype":"m.text"},"ts":1695796970801,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$DVQM_gfXO0GBa_-wozVEDMtwJ2dr0oatNrPTTSPkS8s"},
{"content":{"body":"what if you have an iterable function object","m.mentions":{},"msgtype":"m.text"},"ts":1695796972895,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7HHvrv3fnGgjivUPhJHuruqubNONanFYCKAuJFwOoNc"},
{"content":{"body":"what about it","m.mentions":{},"msgtype":"m.text"},"ts":1695796985311,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$ZPly6PT0uU91n1Wr0H7AL-qhWhZaL4zWcLcvY-0x1Ms"},
{"content":{"body":"that example wasn't variadic","m.mentions":{},"msgtype":"m.text"},"ts":1695796994668,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$XNBKfeQ9k-Oc4it4XJti6NwT_g5qryOYBUfyOyapMi4"},
{"content":{"body":"either of them","m.mentions":{},"msgtype":"m.text"},"ts":1695796999716,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$dhu8ZengceCdLvnC6a6BqvJMuGw-1FoY8xPGOyeDKg8"},
{"content":{"body":"i think having to write zip([a, b]) instead of zip(a, b) would be unfortunate","m.mentions":{},"msgtype":"m.text"},"ts":1695797013458,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ESRhi_ze50jR5BlIu4t_08dFty2Qyni_QRTLKeQA5qw"},
{"content":{"body":"yeah I'd prefer to keep this simple","msgtype":"m.text"},"ts":1695797013614,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Yjx0Tp61uaw3_I9GelaMDmYoMwo6RFfRwiOYveDK02c"},
{"content":{"body":"like not worth the mapper func","m.mentions":{},"msgtype":"m.text"},"ts":1695797025532,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$D6BtUnJ7sh53kGhMl5y49mLP815tao-ZmkAxNfi00WU"},
{"content":{"body":"I am fine without the mapper, especially since we *do* want an options bag.","format":"org.matrix.custom.html","formatted_body":"I am fine without the mapper, especially since we <em>do</em> want an options bag.","m.mentions":{},"msgtype":"m.text"},"ts":1695797048891,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$E6-7y740xVfVcYhUD9MbRtp3iJt5-f6ZKrXpgoIOwVQ"},
{"content":{"body":"there are other options you'd want beyond the mapper function","m.mentions":{},"msgtype":"m.text"},"ts":1695797049368,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NO9lg0a3NhI0kcIMwoRzJ1Ga20gvk3f4SknpDkVgkqw"},
{"content":{"body":"like \"use this value to fill out the shorter one\"","m.mentions":{},"msgtype":"m.text"},"ts":1695797057325,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pDcms7kMmltOyHsg8ZPI96KAvfBBMhG-cPPeX98UjGo"},
{"content":{"body":"Bc longest *is* necessary in my experience.","format":"org.matrix.custom.html","formatted_body":"Bc longest <em>is</em> necessary in my experience.","m.mentions":{},"msgtype":"m.text"},"ts":1695797065576,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$qjufdI37QJwC1zGGmM-RXOv99btBul3ymPtue4u9JY0"},
{"content":{"body":"though of course we could just have a bunch of different methods, instead of an options bag","m.mentions":{},"msgtype":"m.text"},"ts":1695797087445,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2_pvLWblSUkZsrdMk8vMaL-YtegL_JeXkOjziA78q2o"},
{"content":{"body":"isn't that what we designed array holes for?","msgtype":"m.text"},"ts":1695797090292,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a3GZMqYFxlcPwvDDPUt2zqEdkZx03P59SpG0z_vbEpc"},
{"content":{"body":"> <@bakkot:matrix.org> like \"use this value to fill out the shorter one\"\n\nisn't that `zip(a, chain(b, repeat(v)))`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pDcms7kMmltOyHsg8ZPI96KAvfBBMhG-cPPeX98UjGo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>like &quot;use this value to fill out the shorter one&quot;</blockquote></mx-reply>isn't that <code>zip(a, chain(b, repeat(v)))</code>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pDcms7kMmltOyHsg8ZPI96KAvfBBMhG-cPPeX98UjGo"}},"msgtype":"m.text"},"ts":1695797090442,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KKumF_dIQiBB7tk8io93m7Lw1WpwPOzGxYX6as3rbS4"},
{"content":{"body":"you don't need an options bag for that","m.mentions":{},"msgtype":"m.text"},"ts":1695797095334,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BONu7ZyeiHGeDj2itThhu5QKurIlH96VvfNj6fOXMyI"},
{"content":{"body":"only if you know which one is longer up front","m.mentions":{},"msgtype":"m.text"},"ts":1695797102232,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dg1Uh2uKCKxoDBkgrvdwPky-_-bAZsZkLT3jBdDOZZc"},
{"content":{"body":"ugh tho","m.mentions":{},"msgtype":"m.text"},"ts":1695797102508,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MMQ_t76N2KPA_JbVxJ9ErfML2gFXzr4z--it4O0JSH0"},
{"content":{"body":"also that, yes","m.mentions":{},"msgtype":"m.text"},"ts":1695797107735,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$jbb5ReN5ElLoF5QtrnUaMQiWUS7Yg9RkcleTQYsH_-M"},
{"content":{"body":"if you don't know which one, you can't do it with `zip`","format":"org.matrix.custom.html","formatted_body":"if you don't know which one, you can't do it with <code>zip</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695797112949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v0attFNYMGl7zo3x_tFiMgjH5S9HsSHyPJT6NWnLs38"},
{"content":{"body":"or like you can but it's really really hard","m.mentions":{},"msgtype":"m.text"},"ts":1695797116901,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DWAqTKqRn8tQ73JbTWpK2joDAgP74WTcBICIEOvZ49U"},
{"content":{"body":"fair","m.mentions":{},"msgtype":"m.text"},"ts":1695797118535,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j8IhrF1LV_VI96R-m9osWRqKZGw4PrrD5qagK6wlr08"},
{"content":{"body":"things to think about i guess","m.mentions":{},"msgtype":"m.text"},"ts":1695797126254,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_LRD4OQTnBHeY74KKzx_uHUBb2w0c-F8Rti8omV6OnY"},
{"content":{"body":"previous discussion at https://matrixlogs.bakkot.com/TC39_General/2021-09-11#L3","m.mentions":{},"msgtype":"m.text"},"ts":1695797145561,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t5KbdTVowemLyF7HjZRF0K0B6SRgMFDQER2nnGZQk8A"},
{"content":{"body":"zip(a, b) and zipAdvanced([a, b], options, mapper)","m.mentions":{},"msgtype":"m.text"},"ts":1695797207960,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LMU6CJ5FN9qtltAC1xHyFGlsIY8Tiavxnn0-JBjZMo4"},
{"content":{"body":"I think just making the wrapper array is better","m.mentions":{},"msgtype":"m.text"},"ts":1695797252537,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uvp6BQ0GZTrPGzxPVzVag4Y8Y6JbEKkSPYvxdWomAkg"},
{"content":{"body":"to match Promise.all","m.mentions":{},"msgtype":"m.text"},"ts":1695797254810,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2BibI3hNJxiKaCHUwq7V-G0XCZPjdnuSUfFmMl_9Evg"},
{"content":{"body":"`zip(a, b)` and `knit([a, b], options, mapper)` :-p","format":"org.matrix.custom.html","formatted_body":"<code>zip(a, b)</code> and <code>knit([a, b], options, mapper)</code> :-p","m.mentions":{},"msgtype":"m.text"},"ts":1695797258046,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gkQQZREyiDQdS9OFI_ATR6XRqj5uGkjNmF12TrSzr1E"},
{"content":{"body":"the wrapper array is \"fine\" but super annoying to have to write","m.mentions":{},"msgtype":"m.text"},"ts":1695797267286,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jvub9oJd0bD7XZw09gNjxgjoKcyBsyDNEkz2EgzOQQE"},
{"content":{"body":"velcro ","m.mentions":{},"msgtype":"m.text"},"ts":1695797271379,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-xTvjyf87V52tWEe1SBqwFv8RjmkdDGtq_26FhzniHA"},
{"content":{"body":"what do other languages do about this options thing?","msgtype":"m.text"},"ts":1695797274659,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iF2nX0prO4iePQE0ANWRa7xpScEg21HwB3Om8-HXwQY"},
{"content":{"body":"yeah i'm not gonna die on this hill but its unfortunate","m.mentions":{},"msgtype":"m.text"},"ts":1695797279067,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$JPU4hmuWpZz8cSKKUgpbdqro4NBOs-ixIc_TJk8ryTg"},
{"content":{"body":"python has kwargs","m.mentions":{},"msgtype":"m.text"},"ts":1695797289149,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$K7Az_ljNXI0jkk6vwhyTjXR4HIQOOzAjVBehe-64JXE"},
{"content":{"body":"i wish js had kwargs","m.mentions":{},"msgtype":"m.text"},"ts":1695797293450,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j2sc6KUs9PLbKdCpRiN3Cyex6jrdktxpQerQAT3sjyc"},
{"content":{"body":"littledan: Python just has several variant functions, with each taking extra args as necessary.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: Python just has several variant functions, with each taking extra args as necessary.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1695797306254,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$e_eYzeB9DC11okDE52RveIXWuiSgEgcZMkuu3brnc6c"},
{"content":{"body":"and yeah, kwargs man","m.mentions":{},"msgtype":"m.text"},"ts":1695797312829,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$YVf6za1EgDmKvPtE9JVWpeFlpfihuUHsP4C1U7Fez_I"},
{"content":{"body":"kwargs","m.mentions":{},"msgtype":"m.text"},"ts":1695797314769,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$WTjRYIN4aezyHvDbqrdBqx8Ro6Gk0muUCN0Md5dN0Rg"},
{"content":{"body":"in sujitech we ship es2022 to users","m.mentions":{},"msgtype":"m.text"},"ts":1695797326216,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$-Ql3O8dn6DNbJb1vWuDryezo058QZIIhR74njQ157QY"},
{"content":{"body":"if we had a variant of js","m.mentions":{},"msgtype":"m.text"},"ts":1695797344660,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pPCLUwTk862ayoz1th0npJyRDc9C54dpKq6s2jwlg7c"},
{"content":{"body":"without hoisting","m.mentions":{},"msgtype":"m.text"},"ts":1695797346537,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eOTgzcTHJDS3vmYt1Z-o_HlFl1j8T7t0oU-lqgja5Os"},
{"content":{"body":"would that fix this tdz stuff","m.mentions":{},"msgtype":"m.text"},"ts":1695797355315,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cRUkGTgm6-5GuR6sgNH_cnRfJ4p3vpN8BEZ3KrBcgo0"},
{"content":{"body":"> <@tabatkins:matrix.org> kwargs\n\nwe just need real named arguments in JS, that's all","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WTjRYIN4aezyHvDbqrdBqx8Ro6Gk0muUCN0Md5dN0Rg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@tabatkins:matrix.org\">@tabatkins:matrix.org</a><br>kwargs</blockquote></mx-reply>we just need real named arguments in JS, that's all","m.mentions":{"user_ids":["@tabatkins:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WTjRYIN4aezyHvDbqrdBqx8Ro6Gk0muUCN0Md5dN0Rg"}},"msgtype":"m.text"},"ts":1695797356103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-x54-s-x0AJRWJz5g3fnj6EfIqNVHEGSAyPEHlq7Kzw"},
{"content":{"body":"we only this year stopped supporting IE9...","m.mentions":{},"msgtype":"m.text"},"ts":1695797356806,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UukaLLfn7RsCwvj8SrbyEI604cSghGClYju_qU6GMxE"},
{"content":{"body":"same!","m.mentions":{},"msgtype":"m.text"},"ts":1695797380834,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fpUJ3txItmh5xOe7JV9omG_9idk5E-54a9lEL7UJpZc"},
{"content":{"body":"Is @shu saying we should have stopped with ES5 😉","msgtype":"m.text"},"ts":1695797440023,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$eFJPlmOH53jDtuP9Qs68RZqkduxr3ctNZuPLhmvJGpg"},
{"content":{"body":"can't become unmodern if the definition of modern never changes :rollsafe:","m.mentions":{},"msgtype":"m.text"},"ts":1695797482178,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ezINS3M5eqLy7cMDIpXb5CU70Y36jp-PEfNfJADjSAY"},
{"content":{"body":"why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized","m.mentions":{},"msgtype":"m.text"},"ts":1695797857097,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE"},
{"content":{"body":"For Bloomberg Terminal we ship ESnext (Stage 4) to users as much as possible, which is also capped by the min-support of each piece of the toolchain that needs to transform that code, because relatively modern Chromium gets embedded.","msgtype":"m.text"},"ts":1695797874614,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$sCwTyG5V8Q0OY4BjuerAHrnV0m13_qqW-lfVRXYfbtI"},
{"content":{"body":"> <@devsnek:matrix.org> why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized\n\nIsn't that overhead part of the problem?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized</blockquote></mx-reply>Isn't that overhead part of the problem?","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE"}},"msgtype":"m.text"},"ts":1695797984784,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NG_wqikO2mhGKY1i1buUmGYECaDJ34bXuowWFji95bk"},
{"content":{"body":"which overhead","m.mentions":{},"msgtype":"m.text"},"ts":1695798002281,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uhxylbpFYhEhu-MgsCnGEd-TuO2AEjITA1fRIWWWBLw"},
{"content":{"body":"You're not patching one place. You're patching every place the variable is referenced.","m.mentions":{},"msgtype":"m.text"},"ts":1695798015816,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SbLYhEvcUsLd-tVRPGmHU9zJXyJDOSP8EZx3kgbGF2w"},
{"content":{"body":"> <@devsnek:matrix.org> why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized\n\nyou have a bunch of different versions of the function also","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized</blockquote></mx-reply>you have a bunch of different versions of the function also","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE"}},"msgtype":"m.text"},"ts":1695798030830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GmBDybvxdHF2KsjQ7Sk-9y08rX6Kc4j1V76m6K65L58"},
{"content":{"body":"it's not like functions only get compiled once","m.mentions":{},"msgtype":"m.text"},"ts":1695798036250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2rSoLrj6On9lu637i9oLKGBR5ncq8GEBsNHAXmGKgkg"},
{"content":{"body":"And that involves GC as well","m.mentions":{},"msgtype":"m.text"},"ts":1695798045407,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LSTqpc3DN425jlrb4W2aI4JEqHjFCqXe8wZ3WM0pLKE"},
{"content":{"body":"ah yeah same underlying sfi 🥲","m.mentions":{},"msgtype":"m.text"},"ts":1695798070649,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$X149QPCa6tF7OES1i6DalNMcrjH9TNvZpJPS6ET_098"},
{"content":{"body":"danielrosenwasser: re: \"we assume the runtime will catch it\" - does that mean your type analysis treats `let` and `var` differently?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: re: \"we assume the runtime will catch it\" - does that mean your type analysis treats <code>let</code> and <code>var</code> differently?","m.mentions":{"user_ids":["@danielrosenwasser:matrix.org"]},"msgtype":"m.text"},"ts":1695798499060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ii_Ln3YEY_JUFh72ri1f9sXyT8LYgeroPtrNKlnLIEQ"},
{"content":{"body":"depending on transpilers to inform engines about eliding TDZ checks doesn't benefit developers not using transpilers.","m.mentions":{},"msgtype":"m.text"},"ts":1695798662438,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K_G-ge2Q_v5RbSOXRhcV9XL0CfOH5dRvPHGGWrBIaxk"},
{"content":{"body":"> <@bakkot:matrix.org> danielrosenwasser: re: \"we assume the runtime will catch it\" - does that mean your type analysis treats `let` and `var` differently?\n\n*well* I certainly thought so","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ii_Ln3YEY_JUFh72ri1f9sXyT8LYgeroPtrNKlnLIEQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">danielrosenwasser</a>: re: \"we assume the runtime will catch it\" - does that mean your type analysis treats <code>let</code> and <code>var</code> differently?</blockquote></mx-reply><em>well</em> I certainly thought so","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ii_Ln3YEY_JUFh72ri1f9sXyT8LYgeroPtrNKlnLIEQ"}},"msgtype":"m.text"},"ts":1695798810115,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$7245NRrR3NMyHp6yYRoojSI4UIV9idwA6Mob86kftww"},
{"content":{"body":"But no, we just take the optimistic path on that","m.mentions":{},"msgtype":"m.text"},"ts":1695798868095,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$up2OR1lU9TfSi5TB3IFKSi3nxXE8u2DEVOoB8mktg8o"},
{"content":{"body":"you can observe an `undefined`-initialized `var` or `let` in downlevel emit","format":"org.matrix.custom.html","formatted_body":"you can observe an <code>undefined</code>-initialized <code>var</code> or <code>let</code> in downlevel emit","m.mentions":{},"msgtype":"m.text"},"ts":1695798889310,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$Ogn_zdxy8xbnFnvpXHA-_Hee5x8khX-RrK4AsOIw7KM"},
{"content":{"body":"ok cool, that's what I thought","m.mentions":{},"msgtype":"m.text"},"ts":1695798902829,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8zD0SYcLog0xuoXpAU9hfGft_au1XdnVg6jxRwUaaRA"},
{"content":{"body":"it would make using `var` super annoying if it were treated differently","format":"org.matrix.custom.html","formatted_body":"it would make using <code>var</code> super annoying if it were treated differently","m.mentions":{},"msgtype":"m.text"},"ts":1695798926240,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$soliadMOMtI1heVMXxImSXnspycahxUKTSCUhi7mDIE"},
{"content":{"body":"interestingly v8 implements tdz checks as two separate bytecodes","m.mentions":{},"msgtype":"m.text"},"ts":1695799067454,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$c0Gx0VitDSVXQHYEJA2nHVgP3YR9LMOBme9-B3sGP_I"},
{"content":{"body":"load variable and then throw reference error if loaded value is uninitialized","m.mentions":{},"msgtype":"m.text"},"ts":1695799086400,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EH_Dv1yuNJ_di8sDfqo55DVMhqnZ6mPbq7sbUxhpwTg"},
{"content":{"body":"the_hole","m.mentions":{},"msgtype":"m.text"},"ts":1695799099306,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M5A2TgAg5oSuBCldUSviibvPxFdXZucg-cE1bxzdaLo"},
{"content":{"body":"yeah that one","m.mentions":{},"msgtype":"m.text"},"ts":1695799104267,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0Ehk3CtOVsjdl8OTDLt_pGwj_BeTTeorVhdki5UX-sw"},
{"content":{"body":"or whatever it's called","m.mentions":{},"msgtype":"m.text"},"ts":1695799106252,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iL13P_fy-wX0aPKExWSvTjRHB_0ygaL9ohm7xXBkuOQ"},
{"content":{"body":"love to have another kind of `null`","format":"org.matrix.custom.html","formatted_body":"love to have another kind of <code>null</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695799113515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Vb52ndup2eNGIjD7x0y8C0CsWBWaAQ6NqxzXhohCIUI"},
{"content":{"body":"i'm feeling like, if this was a single bytecode, it would be a single branch instruction instead of an entire bytecode clock cycle, which is significantly cheaper?","m.mentions":{},"msgtype":"m.text"},"ts":1695799125504,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ErqXEmicBjk_qdt4eFHQQlSjzVG6yrkPyiX4SYkpMNs"},
{"content":{"body":"but idk maybe i'm missing something obvious","m.mentions":{},"msgtype":"m.text"},"ts":1695799138877,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qmJ1UgBEPFRB6Ov2D_ABosHmM1AYzIbpSuR5a8KUMNI"},
{"content":{"body":"surely most of the cost is the branch, not the bytecode clock cycle?","m.mentions":{},"msgtype":"m.text"},"ts":1695799157617,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2BlGRT6ktxjr_r_l27kJRBasS21GZZYPzicIillzlqE"},
{"content":{"body":"branches are expensive","m.mentions":{},"msgtype":"m.text"},"ts":1695799163106,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0fT_wZ-g3fcnzJG7lhwAgWxcnTLmlZ5XbezQF_iuxqg"},
{"content":{"body":"What Mark is suggesting (moving `let` above all of its uses), is exactly what we had in our codebase when we discovered this regression.","format":"org.matrix.custom.html","formatted_body":"What Mark is suggesting (moving <code>let</code> above all of its uses), is exactly what we had in our codebase when we discovered this regression.","m.mentions":{},"msgtype":"m.text"},"ts":1695799189372,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IoQBMMpcN0jicYFmX116zaXljqFHx0vL932nKARH-WU"},
{"content":{"body":"the branch exists either way, the bytecode dispatch is a jmp+lea+maybe smth else idr","m.mentions":{},"msgtype":"m.text"},"ts":1695799222037,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$bCWCZ5snf0vuA6F_E1nThUChOW4wNO3X9NHLARQSRa8"},
{"content":{"body":"rbuckton: you should say that out loud, mark doesn't read chat","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: you should say that out loud, mark doesn't read chat","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1695799247914,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HwvdNvdNF31_zk6qHG5wRlhonqBbJekVytkhhmKcQGc"},
{"content":{"body":"Mark's point is that the engines need to optimize for that, which they don't.","m.mentions":{},"msgtype":"m.text"},"ts":1695799275518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ld1i8oD-Cxdv1wT2av06C1JsZ963bKXnQnJc4Fa96VI"},
{"content":{"body":"So, Mark is saying \"lets encourage people to rewrite their JS into something that will force engines to do TDZ checks\", right?","m.mentions":{},"msgtype":"m.text"},"ts":1695799315193,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$rZRDO16uWg91j2D80gu8a1wLWe17hkIcnPJ054qFIsA"},
{"content":{"body":" * So, Mark is saying \"lets encourage people to rewrite their JS into something that will **not force** engines to do TDZ checks\", right?","format":"org.matrix.custom.html","formatted_body":" * So, Mark is saying \"lets encourage people to rewrite their JS into something that will <strong>not force</strong> engines to do TDZ checks\", right?","m.mentions":{},"m.new_content":{"body":"So, Mark is saying \"lets encourage people to rewrite their JS into something that will **not force** engines to do TDZ checks\", right?","format":"org.matrix.custom.html","formatted_body":"So, Mark is saying \"lets encourage people to rewrite their JS into something that will <strong>not force</strong> engines to do TDZ checks\", right?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rZRDO16uWg91j2D80gu8a1wLWe17hkIcnPJ054qFIsA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799343397,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$gBAnv9HW86yNO6PeSxOOFVyu0jRUq2PWMz0v4nvLxfg"},
{"content":{"body":"Hold it the right way!™","m.mentions":{},"msgtype":"m.text"},"ts":1695799343947,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$SpFklv5yX00nVCJmdwPu8YLFbYYkcjdWjBLfFdJPEFg"},
{"content":{"body":"it really sounds like \"if engines never have to encounter a `let`, then `let` won't be unperformant\" ","format":"org.matrix.custom.html","formatted_body":"it really sounds like \"if engines never have to encounter a <code>let</code>, then <code>let</code> won't be unperformant\"","m.mentions":{},"msgtype":"m.text"},"ts":1695799352531,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$VLnYu30wIa6jQ4l0ikfhKfMXvbW1kNStqQfNuHy7kFw"},
{"content":{"body":"right, and also suggesting the engine do more/smarter checks than they currently do","m.mentions":{},"msgtype":"m.text"},"ts":1695799365912,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NAQ3lf6h4-nvzSwy-vrV7MP7dyWjyCpA4vG08LsG9U4"},
{"content":{"body":"but of course more/smarter checks are also expensive...","m.mentions":{},"msgtype":"m.text"},"ts":1695799374830,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IU9ix1fudiZuq4DVhnU6Wb8mz9NoSNucGosWxQlcFbA"},
{"content":{"body":"at the very least this sounds like it would take at least two passes","m.mentions":{},"msgtype":"m.text"},"ts":1695799386080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$28HrSQN3vKxQUlrtUNu4qrcY0Ncb_ycklYcxhSD9I3Q"},
{"content":{"body":"I cannot imagine a developer who wants `const` being willing to rewrite it as a `let` with no assignment and a later assignment.","format":"org.matrix.custom.html","formatted_body":"I cannot imagine a developer who wants <code>const</code> being willing to rewrite it as a <code>let</code> with no assignment and a later assignment.","m.mentions":{},"msgtype":"m.text"},"ts":1695799387395,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$Lh1Vrd33i5gez0HJKbpEBRX8z3QEcRFgmNz8dIqn2-w"},
{"content":{"body":"I think Mark is saying \"fix this one case, and depend on linters to suggest you use that case\", which doesn't help for `const` since it may depend on calculations and can't be hoisted.","format":"org.matrix.custom.html","formatted_body":"I think Mark is saying \"fix this one case, and depend on linters to suggest you use that case\", which doesn't help for <code>const</code> since it may depend on calculations and can't be hoisted.","m.mentions":{},"msgtype":"m.text"},"ts":1695799388988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BV0crrxnDU9KZajWhlh5aHChyDC1xkPSbZO0BjKB-Hc"},
{"content":{"body":"Linters also generally don't do inter-procedural analysis either, so this sounds like a big ask.","m.mentions":{},"msgtype":"m.text"},"ts":1695799489287,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3h-807vu1Wwu6oq3WgbAfXpXIlg2t7UZXpzgO8VJnnY"},
{"content":{"body":"is it difficult to figure out that a variable is *not* referenced inside a closure, and also not referenced prior to the declaration?","format":"org.matrix.custom.html","formatted_body":"is it difficult to figure out that a variable is <em>not</em> referenced inside a closure, and also not referenced prior to the declaration?","m.mentions":{},"msgtype":"m.text"},"ts":1695799511401,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zbbVU2VLz3FLe39XorUCwGTfqc9X8GigI0q7EYJqe7Q"},
{"content":{"body":"more like \"encourage everyone, particularly transpilers, to emit code in which `let`/`const` binding references are dominated (i.e., their TDZ is empty), and encourage implementations to statically detect such dominated bindings and eliminate any corresponding runtime penalty for them\"","format":"org.matrix.custom.html","formatted_body":"more like \"encourage everyone, particularly transpilers, to emit code in which <code>let</code>/<code>const</code> binding references are dominated (i.e., their TDZ is empty), and encourage implementations to statically detect such dominated bindings and eliminate any corresponding runtime penalty for them\"","m.mentions":{},"msgtype":"m.text"},"ts":1695799525208,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$nFKX4IqYgOCbqKVfK5D48QyRMULMYKP_9vwWouEkltA"},
{"content":{"body":"> <@ljharb:matrix.org> is it difficult to figure out that a variable is *not* referenced inside a closure, and also not referenced prior to the declaration?\n\nI think those are the cases that *are* optimized today.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zbbVU2VLz3FLe39XorUCwGTfqc9X8GigI0q7EYJqe7Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>is it difficult to figure out that a variable is <em>not</em> referenced inside a closure, and also not referenced prior to the declaration?</blockquote></mx-reply>I think those are the cases that <em>are</em> optimized today.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zbbVU2VLz3FLe39XorUCwGTfqc9X8GigI0q7EYJqe7Q"}},"msgtype":"m.text"},"ts":1695799533642,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KyAFC-72GlmZMFm-WONzvq-rooReRVJ350UMxQK1N0E"},
{"content":{"body":"At least, when they are run in a hot code path such that they get optimized.","m.mentions":{},"msgtype":"m.text"},"ts":1695799553412,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FoDd_r5UUye29PaVjDCbMf5Ow7p6AWNJq5LaSXC6wW8"},
{"content":{"body":"what about if it's a function statement vs a declaration?","m.mentions":{},"msgtype":"m.text"},"ts":1695799561148,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UsjJ10sQg2NyxCTHaAOL7R_ALfMnBqQJZ065hK_P4ds"},
{"content":{"body":"As Shu said, not all code gets optimized.","m.mentions":{},"msgtype":"m.text"},"ts":1695799562855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7GF-cKkJk0WW7-yHw_TiXsUyLSSqLpJh-tPi_5jgh08"},
{"content":{"body":"I am almost certain that gets checked literally during parsing","m.mentions":{},"msgtype":"m.text"},"ts":1695799566688,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jooLmwnZRKYc6CcTHGUH0rZl_iKXa8Cemf1Pu9d3bh4"},
{"content":{"body":"like can the perf issue be avoided simply by not using function declarations","m.mentions":{},"msgtype":"m.text"},"ts":1695799569643,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sLdkEEeL5ziG6apHlV3KkM3Ymx9vW0Pj36WvXAnjQMw"},
{"content":{"body":" * like can the perf issue be avoided simply by not using function declarations?","m.mentions":{},"m.new_content":{"body":"like can the perf issue be avoided simply by not using function declarations?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sLdkEEeL5ziG6apHlV3KkM3Ymx9vW0Pj36WvXAnjQMw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799571823,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cjdsap4UPyNH6JydcVnNcmw6mHwxyJdNg8RJ4_uE-kI"},
{"content":{"body":"slight correction, the closed-over bindings are generally not top-level","m.mentions":{},"msgtype":"m.text"},"ts":1695799574493,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$3zO2jJirzE0cne-islYAh8Pfvm1QtYyVMzSc_c_DxxI"},
{"content":{"body":" * like can the perf issue be avoided simply by not using function declarations? (which many linter configs discourage anyways due to exposure to hoisting)","m.mentions":{},"m.new_content":{"body":"like can the perf issue be avoided simply by not using function declarations? (which many linter configs discourage anyways due to exposure to hoisting)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sLdkEEeL5ziG6apHlV3KkM3Ymx9vW0Pj36WvXAnjQMw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799583607,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8Fbn2qVbu-XyLUdvX7_nMKVjLw6w7cJ7fU8LSlDK6Fw"},
{"content":{"body":"they act as state intentionally captured by closures for major components","m.mentions":{},"msgtype":"m.text"},"ts":1695799591564,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$VGjiL693iajk_e8DGHcjVcj8XcP2ZPv7lnxSF9fLAtU"},
{"content":{"body":" * like can the perf issue be avoided simply by not using function declarations? (which many linter configs discourage anyways due to it adding exposure to hoisting and use-before-define)","m.mentions":{},"m.new_content":{"body":"like can the perf issue be avoided simply by not using function declarations? (which many linter configs discourage anyways due to it adding exposure to hoisting and use-before-define)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sLdkEEeL5ziG6apHlV3KkM3Ymx9vW0Pj36WvXAnjQMw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799592742,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$COcoRrBJ_eDQA7x2iOkcY48UI5hBCDtbZWOx5ZWc1Jg"},
{"content":{"body":"yeah I think this discussion is basically centered (or at least, can be centered) on code which is _not_ reaching top-tier JIT","format":"org.matrix.custom.html","formatted_body":"yeah I think this discussion is basically centered (or at least, can be centered) on code which is <em>not</em> reaching top-tier JIT","m.mentions":{},"msgtype":"m.text"},"ts":1695799635029,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GkACKkI4gRmqY6SiczSbFlPCJuMdgEZLHItjCFsFXb4"},
{"content":{"body":" * I am almost certain the not-closed-over bit gets checked literally during parsing","m.mentions":{},"m.new_content":{"body":"I am almost certain the not-closed-over bit gets checked literally during parsing","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jooLmwnZRKYc6CcTHGUH0rZl_iKXa8Cemf1Pu9d3bh4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799638736,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NXtWnqka62bPxJSW2X6tiSlkrf3r-g029zPuJNSJy9M"},
{"content":{"body":"so like, in the example on the screen, if the function is written as an expression and not a declaration, then the resulting reorganization it would force seems like it'd avoid this perf hit?","m.mentions":{},"msgtype":"m.text"},"ts":1695799665353,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tJsD9zh2yxiWcLtRihbAOrSjhay4A0kTqgq3dLBV-jg"},
{"content":{"body":"in the simple cases engines skip the TDZ checks even in the lowest tier","m.mentions":{},"msgtype":"m.text"},"ts":1695799666682,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oTFg7Ms8dxyfD3AvhMHMCIOe0qiPMEdMgPg-5LDGPPU"},
{"content":{"body":"because the simplest cases can be checked during parsing, in a single pass","m.mentions":{},"msgtype":"m.text"},"ts":1695799675630,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AbJaO6H8chvYG5uluEXUWmFyM4X_zZCwAadI3H0fgK0"},
{"content":{"body":"right. simple cases are fine","m.mentions":{},"msgtype":"m.text"},"ts":1695799687945,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$bputhv_qAJDfj3TR1CZ1M3uLwaav2cpYN4lo1R1cTdo"},
{"content":{"body":"if the only codebases suffering are ones that use function decls and rely on hoisting i'm much less interested in trying to address a problem","m.mentions":{},"msgtype":"m.text"},"ts":1695799694447,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m_pvZ4Gvg1Bb5bu8VXSog-4RVg7OEaamaXE5ya84VFY"},
{"content":{"body":"The main reason we have this mess is that function definitions *can* hoist, even if most of them may not be used that way.\nIf one turns a function statement into a const binding initialized with a function expression, that is known never to hoist, and thus the implementation can trivially see that it's dominated by any prior bindings in the scope.","format":"org.matrix.custom.html","formatted_body":"The main reason we have this mess is that function definitions <em>can</em> hoist, even if most of them may not be used that way.<br>If one turns a function statement into a const binding initialized with a function expression, that is known never to hoist, and thus the implementation can trivially see that it's dominated by any prior bindings in the scope.","msgtype":"m.text"},"ts":1695799702598,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$5fTLgfcpMVbk6S6W3mW-Xrlod-M5BBf313MoOIpMT2Q"},
{"content":{"body":"^ that suggests to me another reason to avoid using declarations","m.mentions":{},"msgtype":"m.text"},"ts":1695799719995,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-ichgWbHyDlVzfCeLX-aCNiQG14bpcD1jrzeMPLjllQ"},
{"content":{"body":" * ^ that suggests to me another reason to just avoid using declarations","m.mentions":{},"m.new_content":{"body":"^ that suggests to me another reason to just avoid using declarations","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-ichgWbHyDlVzfCeLX-aCNiQG14bpcD1jrzeMPLjllQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799723364,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PN77-S4ZLJhjyu1O_HPUWByvBpbl7lNDMEerIIMBJ3E"},
{"content":{"body":"Lint rules can do that, or transpilers might be able to do that.","msgtype":"m.text"},"ts":1695799739471,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$7h-MqLOaQRsoshenlNuuREMB0lqiqVk4kwoKlE52tro"},
{"content":{"body":"this is why i asked above if adding a no-hosting mode would help. ultimately i'd like to look at a lower level investigation of this problem space from v8, assuming they've written something up somewhere","m.mentions":{},"msgtype":"m.text"},"ts":1695799754117,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LYR3Ej94kUIqOR9qWtc5pulcT4ltnLbnPvHgGnoM1YU"},
{"content":{"body":"no-hoisting means that `let x = 1; { x; let x = 2 }` sees 1?","format":"org.matrix.custom.html","formatted_body":"no-hoisting means that <code>let x = 1; { x; let x = 2 }</code> sees 1?","msgtype":"m.text"},"ts":1695799824290,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fOzf4W2JtQD6G6Zn2G3MQRt0X6fmzuCbbiWLz_OMD0Y"},
{"content":{"body":"Unfortunately a lot of people are attached to a style which relies heavily on hoisting, so I think it is unlikely we'll convince people to move away from that ","m.mentions":{},"msgtype":"m.text"},"ts":1695799832658,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1LKtipPFvcC-zgnDDp8SkO6CX2ZGqOz3RV6SaflI8Eo"},
{"content":{"body":"i agree, it's very unfortunate","m.mentions":{},"msgtype":"m.text"},"ts":1695799841630,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lD40hanKgYG65-wVZpCiLe4xWAVtLTEQBx7ovdAJUI0"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> no-hoisting means that `let x = 1; { x; let x = 2 }` sees 1?\n\nit's only hoisting _of function declarations_ which we're talking about I believe","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fOzf4W2JtQD6G6Zn2G3MQRt0X6fmzuCbbiWLz_OMD0Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>no-hoisting means that <code>let x = 1; { x; let x = 2 }</code> sees 1?</blockquote></mx-reply>it's only hoisting <em>of function declarations</em> which we're talking about I believe","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fOzf4W2JtQD6G6Zn2G3MQRt0X6fmzuCbbiWLz_OMD0Y"}},"msgtype":"m.text"},"ts":1695799853705,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_IvCAcNv3F7fmvhWmLhRWCmFB7jQecyInZlf4Fm6jJk"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> no-hoisting means that `let x = 1; { x; let x = 2 }` sees 1?\n\nno i mean a mode where you can't call functions before their declaration","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fOzf4W2JtQD6G6Zn2G3MQRt0X6fmzuCbbiWLz_OMD0Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>no-hoisting means that <code>let x = 1; { x; let x = 2 }</code> sees 1?</blockquote></mx-reply>no i mean a mode where you can't call functions before their declaration","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fOzf4W2JtQD6G6Zn2G3MQRt0X6fmzuCbbiWLz_OMD0Y"}},"msgtype":"m.text"},"ts":1695799866781,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$yQIBLSrcNnbRAEp-TF7FatwozccnX6RnI0ioCfXXzUA"},
{"content":{"body":"oh no, dminor, you removed your topic from the queue?","format":"org.matrix.custom.html","formatted_body":"oh no, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>, you removed your topic from the queue?","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"ts":1695799874821,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$qYmFMO8WwHRfPUmAJNFC3RHO5N1zuJnWu_XyDIUKYVE"},
{"content":{"body":"it would also let us have good decorators","m.mentions":{},"msgtype":"m.text"},"ts":1695799875131,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$i4lzy3WFqCit7A5fuPZ7BXLHJxu3QBBmDbauTX7aLSw"},
{"content":{"body":" * oh no, dminor, you removed your topic from the queue? I was gonna + 1it","format":"org.matrix.custom.html","formatted_body":" * oh no, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>, you removed your topic from the queue? I was gonna + 1it","m.mentions":{},"m.new_content":{"body":"oh no, dminor, you removed your topic from the queue? I was gonna + 1it","format":"org.matrix.custom.html","formatted_body":"oh no, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>, you removed your topic from the queue? I was gonna + 1it","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qYmFMO8WwHRfPUmAJNFC3RHO5N1zuJnWu_XyDIUKYVE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799881471,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$rHawx_MLKzNbifxz1ED91dY8fbpgL79PCRyeE5mgcVk"},
{"content":{"body":"Oh ok I got confused by the previous discussion about manually hoisting let","msgtype":"m.text"},"ts":1695799882549,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$bpRmeiRtg-rlgfjVtsSVgt9bew1uITAJPim7FxGMGtw"},
{"content":{"body":" * oh no, dminor, you removed your topic from the queue? I was gonna +1 it","format":"org.matrix.custom.html","formatted_body":" * oh no, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>, you removed your topic from the queue? I was gonna +1 it","m.mentions":{},"m.new_content":{"body":"oh no, dminor, you removed your topic from the queue? I was gonna +1 it","format":"org.matrix.custom.html","formatted_body":"oh no, <a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>, you removed your topic from the queue? I was gonna +1 it","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qYmFMO8WwHRfPUmAJNFC3RHO5N1zuJnWu_XyDIUKYVE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695799885047,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5aNsk96KJ-pke9eswo0Y7P69t031Tt4Y-tb4bc8-Edo"},
{"content":{"body":"> <@devsnek:matrix.org> it would also let us have good decorators\n\nusing `const x = function(){}` also lets you have good decorators","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i4lzy3WFqCit7A5fuPZ7BXLHJxu3QBBmDbauTX7aLSw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>it would also let us have good decorators</blockquote></mx-reply>using <code>const x = function(){}</code> also lets you have good decorators","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i4lzy3WFqCit7A5fuPZ7BXLHJxu3QBBmDbauTX7aLSw"}},"msgtype":"m.text"},"ts":1695799943618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lTAgA0xVduEbj-vvmW0rntEuqLRXw_ii5MWKz7jdgx0"},
{"content":{"body":"> <@devsnek:matrix.org> no i mean a mode where you can't call functions before their declaration\n\nFunction decorators would also require a non-hoisting mechanism, even if that mechanism is \"a decorated function doesn't hoist\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yQIBLSrcNnbRAEp-TF7FatwozccnX6RnI0ioCfXXzUA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>no i mean a mode where you can't call functions before their declaration</blockquote></mx-reply>Function decorators would also require a non-hoisting mechanism, even if that mechanism is \"a decorated function doesn't hoist\"","m.mentions":{"user_ids":["@devsnek:matrix.org","@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yQIBLSrcNnbRAEp-TF7FatwozccnX6RnI0ioCfXXzUA"}},"msgtype":"m.text"},"ts":1695799947204,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R9hb9KrW4HYa90HAQpubDpC2P17rfomDxU3pVcoCEY4"},
{"content":{"body":"where \"good decorators\" of course means _normal function calls_ instead of a special syntactic form for calling functions in a different way","format":"org.matrix.custom.html","formatted_body":"where \"good decorators\" of course means <em>normal function calls</em> instead of a special syntactic form for calling functions in a different way","m.mentions":{},"msgtype":"m.text"},"ts":1695799973763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eyiM3eFqyXJQ-VAQ1kTII3w2xL-MzB9bHOVLuKAUiks"},
{"content":{"body":"> <@bakkot:matrix.org> where \"good decorators\" of course means _normal function calls_ instead of a special syntactic form for calling functions in a different way\n\n*snek will remember this*","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eyiM3eFqyXJQ-VAQ1kTII3w2xL-MzB9bHOVLuKAUiks?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>where \"good decorators\" of course means <em>normal function calls</em> instead of a special syntactic form for calling functions in a different way</blockquote></mx-reply><em>snek will remember this</em>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eyiM3eFqyXJQ-VAQ1kTII3w2xL-MzB9bHOVLuKAUiks"}},"msgtype":"m.text"},"ts":1695800000897,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$mtfrpdPJA3UoXzJV8-qo5tSDjl8RV4GFL5d1vAuTdEc"},
{"content":{"body":"shu: this sounds like a fun investigation, one way or another","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: this sounds like a fun investigation, one way or another","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695800003023,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZcEKUEmFDQWEmlMojLI_MpnqNk-OIX7iejpFU2eWsH0"},
{"content":{"body":"ryzokuken:  advance queue?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>:  advance queue?","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"ts":1695800048530,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l2JyhmyQhJ4Rg8XcZne0MbrouoOoZqfDsA5hbBZMwS0"},
{"content":{"body":"queue is advanced for me","m.mentions":{},"msgtype":"m.text"},"ts":1695800055924,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ioJcbShZ9wRNS_e6gNBcNWr3grPzLy-zVFF3b9X4A9M"},
{"content":{"body":"I think TCQ got stuck for me","m.mentions":{},"msgtype":"m.text"},"ts":1695800063713,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$2hb75WwYeZEjAdUX2zrE8U200lxC2rQsbP_wwBCcFho"},
{"content":{"body":"oh, i see the topic changed but the queue isn't empty","m.mentions":{},"msgtype":"m.text"},"ts":1695800068618,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T3kZ3oiwxQNME8mUUtyw6i2W27gSXJfPhn6mfLuW50w"},
{"content":{"body":"> <@bakkot:matrix.org> where \"good decorators\" of course means _normal function calls_ instead of a special syntactic form for calling functions in a different way\n\nThat would conflict with the feedback I received that function decorators had to exist for parameter decorators to advance beyond stage 1, and is the reason that parameter decorators currently only covers class methods.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eyiM3eFqyXJQ-VAQ1kTII3w2xL-MzB9bHOVLuKAUiks?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>where \"good decorators\" of course means <em>normal function calls</em> instead of a special syntactic form for calling functions in a different way</blockquote></mx-reply>That would conflict with the feedback I received that function decorators had to exist for parameter decorators to advance beyond stage 1, and is the reason that parameter decorators currently only covers class methods.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eyiM3eFqyXJQ-VAQ1kTII3w2xL-MzB9bHOVLuKAUiks"}},"msgtype":"m.text"},"ts":1695800070543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U1DHQY37q-OVXB6WNR5tdCdxe3KbL4oyAKe-s6bWTsg"},
{"content":{"body":"TCQ is down :-(","m.mentions":{},"msgtype":"m.text"},"ts":1695800071649,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HXNiuwIzKrY9nhXDCtfSxFVTDfkW8dnDfNtNTU6kMso"},
{"content":{"body":"> <@ljharb:matrix.org> oh, i see the topic changed but the queue isn't empty\n\nthat is another weird TCQ bug","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$T3kZ3oiwxQNME8mUUtyw6i2W27gSXJfPhn6mfLuW50w?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>oh, i see the topic changed but the queue isn&#39;t empty</blockquote></mx-reply>that is another weird TCQ bug","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$T3kZ3oiwxQNME8mUUtyw6i2W27gSXJfPhn6mfLuW50w"}},"msgtype":"m.text"},"ts":1695800083227,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$81GP0aXxi3JKF0-DexlpOirLV10Oi54gVkETBixhyOI"},
{"content":{"body":"shu: is there a doc from v8 that explores tdz at a lower level? i'd be interested in seeing analysis of the bytecode and assembly and such without profiling it myself if such a thing already exists.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: is there a doc from v8 that explores tdz at a lower level? i'd be interested in seeing analysis of the bytecode and assembly and such without profiling it myself if such a thing already exists.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695800112312,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$oZkrWyvkzmqWDBGZzfQ3xjnnFQUDJivfBETUyB74ENo"},
{"content":{"body":"I removed myself from the queue, but I'll say it here, SpiderMonkey is cautiously interested in removing TDZ and we've started investigating the impact on our engine.","msgtype":"m.text"},"ts":1695800115327,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$llQIzonjcFXkHKdTopbRvnv-llpm9tBd5TwmopUoMHE"},
{"content":{"body":"> <@devsnek:matrix.org> why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized\n\nyou're patching bytecode of a function that can be called multiple times?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>why does the bytecode not rewrite itself into a direct lookup once it observes that the slot is initialized</blockquote></mx-reply>you're patching bytecode of a function that can be called multiple times?","m.relates_to":{"m.in_reply_to":{"event_id":"$4-V7SB-X_twtrzE0L5WS92VDubSQYQSLkLXJDhiwbIE"}},"msgtype":"m.text"},"ts":1695800133077,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aeu-B8y1HdSEOlqxyBHJf8FCUmF-08GLz8CGcTcfn8Y"},
{"content":{"body":"a closure that can be allocated multiple times?","msgtype":"m.text"},"ts":1695800138951,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DCbiYno3LCrt_7KwFIwfgtvYPaVC0UNhJLV8HY8sEuA"},
{"content":{"body":"yeah i forgot that bytecode is shared","m.mentions":{},"msgtype":"m.text"},"ts":1695800151047,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$P0knAaywAOfn0xktczqXL5SjtdRvAl7wMsZLfG6SlwE"},
{"content":{"body":"> <@rbuckton:matrix.org> That would conflict with the feedback I received that function decorators had to exist for parameter decorators to advance beyond stage 1, and is the reason that parameter decorators currently only covers class methods.\n\ncorrect, I personally do not think there is a viable path for function decorators or parameter decorators to exist","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$U1DHQY37q-OVXB6WNR5tdCdxe3KbL4oyAKe-s6bWTsg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That would conflict with the feedback I received that function decorators had to exist for parameter decorators to advance beyond stage 1, and is the reason that parameter decorators currently only covers class methods.</blockquote></mx-reply>correct, I personally do not think there is a viable path for function decorators or parameter decorators to exist","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$U1DHQY37q-OVXB6WNR5tdCdxe3KbL4oyAKe-s6bWTsg"}},"msgtype":"m.text"},"ts":1695800153230,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$36zcXW9ACTk5A-WW3iMTiDJtaR4b4HFJTdcny-ru0xc"},
{"content":{"body":"> <@devsnek:matrix.org> shu: is there a doc from v8 that explores tdz at a lower level? i'd be interested in seeing analysis of the bytecode and assembly and such without profiling it myself if such a thing already exists.\n\nalas no, lower level like at the cycle-counting level?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oZkrWyvkzmqWDBGZzfQ3xjnnFQUDJivfBETUyB74ENo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: is there a doc from v8 that explores tdz at a lower level? i'd be interested in seeing analysis of the bytecode and assembly and such without profiling it myself if such a thing already exists.</blockquote></mx-reply>alas no, lower level like at the cycle-counting level?","m.relates_to":{"m.in_reply_to":{"event_id":"$oZkrWyvkzmqWDBGZzfQ3xjnnFQUDJivfBETUyB74ENo"}},"msgtype":"m.text"},"ts":1695800180497,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EF79OboWdDtV8RlUzu8zWNiELBRIZ6FVWKjuRliVRj0"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1695800191167,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WS4P42Tbdwc6xY88wIhVE2JEJ-9STOLR_hxGAjdRJ_8"},
{"content":{"body":"> <@shuyuguo:matrix.org> you're patching bytecode of a function that can be called multiple times?\n\nUhm, if the TDZ check does not trigger the first time it will never throw","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aeu-B8y1HdSEOlqxyBHJf8FCUmF-08GLz8CGcTcfn8Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you're patching bytecode of a function that can be called multiple times?</blockquote></mx-reply>Uhm, if the TDZ check does not trigger the first time it will never throw","m.relates_to":{"m.in_reply_to":{"event_id":"$aeu-B8y1HdSEOlqxyBHJf8FCUmF-08GLz8CGcTcfn8Y"}},"msgtype":"m.text"},"ts":1695800223895,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$URaTgGd5wqr8L1xsPCQH58WfSboULqNTLBkUushm0ew"},
{"content":{"body":"for any particular activation of a function","msgtype":"m.text"},"ts":1695800239311,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mxfi0S5N3CGn6r8ef30NQ0fDRr2kp369Au9i2M1au6A"},
{"content":{"body":"but not for subsequent activations, especially if it's a newly allocated closure","msgtype":"m.text"},"ts":1695800248183,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PMlLcq-HldGZNLFmibr8FtOCsHgelQG3Xofv3mtYNCo"},
{"content":{"body":"so you can't patch the bytecode","msgtype":"m.text"},"ts":1695800251070,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m64qm2SHT0NRqhONMOcis2rE7TGWGjJ-G8k4XGY8WaI"},
{"content":{"body":"Oh right","msgtype":"m.text"},"ts":1695800257914,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7a-7eb3DGe4G81eOEUeAE7OtGHqXbRCtjFi7KG8HJIc"},
{"content":{"body":"if bytecode was not shared it would work but then you'd have big memory usage","m.mentions":{},"msgtype":"m.text"},"ts":1695800270559,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CgYGDwG6GNQEIWgfS550EwuRjG302moMDGUO9MiKAwY"},
{"content":{"body":"i want to have a general gripe","msgtype":"m.text"},"ts":1695800276592,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ie5K_r2AX3_yZMJLogMBSqjVlm_l35uaSmrVyNpCF6E"},
{"content":{"body":"when engines complain about something, it is not before we do a lot of work to try to make it a non-problem","msgtype":"m.text"},"ts":1695800289080,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dAA6MvdnNMtq4Qjs5n_ju33NtNYVU7aMuhQpX1fDafQ"},
{"content":{"body":"i am not a fan of being told, \"have you tried being smarter\"","msgtype":"m.text"},"ts":1695800298390,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7iSvYpUHh9D5VEqPDgbsYZpkBmMn7VpSYszIhHVELYI"},
{"content":{"body":"Yep sorry","msgtype":"m.text"},"ts":1695800324436,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WNh0xtbjGRepg0Hd-venPqIfg_Oi5KuL5BB7G45oZPw"},
{"content":{"body":"it wasn't towards you per se","msgtype":"m.text"},"ts":1695800336551,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eGJLX0o0ZV4LRdJD0wXkSe8RwrVC1CpAwWM5voG7V9s"},
{"content":{"body":"more towards mark","msgtype":"m.text"},"ts":1695800343713,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Y5intSgLoNa2MbDlCI6GWkhaNsI4u8mz48oKxn9KsEo"},
{"content":{"body":"> <@bakkot:matrix.org> correct, I personally do not think there is a viable path for function decorators or parameter decorators to exist\n\nI'm not sure why parameter decorators are not viable, at least for class elements. They're extremely valuable, and we have plenty of evidence for that in the TypeScript ecosystem.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$36zcXW9ACTk5A-WW3iMTiDJtaR4b4HFJTdcny-ru0xc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>correct, I personally do not think there is a viable path for function decorators or parameter decorators to exist</blockquote></mx-reply>I'm not sure why parameter decorators are not viable, at least for class elements. They're extremely valuable, and we have plenty of evidence for that in the TypeScript ecosystem.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$36zcXW9ACTk5A-WW3iMTiDJtaR4b4HFJTdcny-ru0xc"}},"msgtype":"m.text"},"ts":1695800348502,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6NK8rVmVrsJzpygTFI8kBaFLo_IlxH-OGtWgPsaqqDE"},
{"content":{"body":"right, that tone really surprised me","m.mentions":{},"msgtype":"m.text"},"ts":1695800353147,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$o-K7RSuqw21-QK7j7jFdzJkjoL_nhQqbGBZFb16Vn-0"},
{"content":{"body":"As engineers, we mostly can't help ourselves. We see a problem and immediately think \"I bet I could fix that...\"","m.mentions":{},"msgtype":"m.text"},"ts":1695800365765,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$3iaFu0iokSyQ3fKrhBNZ3IwtV2ItIAWb_2-uCBemA9w"},
{"content":{"body":"shu: you could try complaining about things before you do such work","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: you could try complaining about things before you do such work","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1695800374976,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$21l5NAPpCn1xPxR2k9e0nKptBLS_8HXYIQOce8DWPdU"},
{"content":{"body":"> <@dminor:mozilla.org> I removed myself from the queue, but I'll say it here, SpiderMonkey is cautiously interested in removing TDZ and we've started investigating the impact on our engine.\n\nhas the analysis i wrote been improved upon?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$llQIzonjcFXkHKdTopbRvnv-llpm9tBd5TwmopUoMHE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>I removed myself from the queue, but I&#39;ll say it here, SpiderMonkey is cautiously interested in removing TDZ and we&#39;ve started investigating the impact on our engine.</blockquote></mx-reply>has the analysis i wrote been improved upon?","m.relates_to":{"m.in_reply_to":{"event_id":"$llQIzonjcFXkHKdTopbRvnv-llpm9tBd5TwmopUoMHE"}},"msgtype":"m.text"},"ts":1695800375818,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jGfbmSBAD9EhuOVi1QGC5mfm229p2KKlSXjXEQJVp8U"},
{"content":{"body":"i bet i could fix that with the \"javascript load and branch if the hole\" instruction","m.mentions":{},"msgtype":"m.text"},"ts":1695800388508,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8mIqLz92W3o598as5go0VvxOUa-4muAvmzxBaPuJmX4"},
{"content":{"body":"In all fairness, one might add, that YOU, might not mean YOU, personally. :)","m.mentions":{},"msgtype":"m.text"},"ts":1695800389029,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$E4UCcqi0G10XmeFqg5DGgr-OWWPIrJIq9-QBLQvUvdQ"},
{"content":{"body":"> <@michaelficarra:matrix.org> shu: you could try complaining about things before you do such work\n\nbut then \"have you tried being smarter\" would be a valid criticism!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$21l5NAPpCn1xPxR2k9e0nKptBLS_8HXYIQOce8DWPdU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: you could try complaining about things before you do such work</blockquote></mx-reply>but then \"have you tried being smarter\" would be a valid criticism!","m.relates_to":{"m.in_reply_to":{"event_id":"$21l5NAPpCn1xPxR2k9e0nKptBLS_8HXYIQOce8DWPdU"}},"msgtype":"m.text"},"ts":1695800390053,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SBs7L4oq85QeQqqqwrpCJJKPwtRxZlpBoYpupexAa4g"},
{"content":{"body":"exactly, I've fixed it","m.mentions":{},"msgtype":"m.text"},"ts":1695800405521,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$eDfSKezSEZTpAT6nEXABV_NDLAZPH3RVj7iR3tyAS-E"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm not sure why parameter decorators are not viable, at least for class elements. They're extremely valuable, and we have plenty of evidence for that in the TypeScript ecosystem.\n\nI do not think parameter-decorators-but-only-for-class-elements is an reasonable outcome, as I believe I said when they were presented","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6NK8rVmVrsJzpygTFI8kBaFLo_IlxH-OGtWgPsaqqDE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'm not sure why parameter decorators are not viable, at least for class elements. They're extremely valuable, and we have plenty of evidence for that in the TypeScript ecosystem.</blockquote></mx-reply>I do not think parameter-decorators-but-only-for-class-elements is an reasonable outcome, as I believe I said when they were presented","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6NK8rVmVrsJzpygTFI8kBaFLo_IlxH-OGtWgPsaqqDE"}},"msgtype":"m.text"},"ts":1695800408275,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VvlRi-ezshipSglDQIPWGYBP9Om_mr8iGXjmI6omZP0"},
{"content":{"body":"also I do not think function decorators make sense, though it is possible I could be convinced of that","m.mentions":{},"msgtype":"m.text"},"ts":1695800439449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ya0rpqCCg5TY-w6FKE8ReN0T5mmxXdXyctUP9NtYBB0"},
{"content":{"body":"if in addition someone believes parameter decorators cannot advance without function decorators, then there is no option which satisfies all of these constraints","m.mentions":{},"msgtype":"m.text"},"ts":1695800461148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WNVDY5yzc2yXqBY-lFoq5XSGt4ph2NCIGpEvpxghrCE"},
{"content":{"body":"> <@bakkot:matrix.org> correct, I personally do not think there is a viable path for function decorators or parameter decorators to exist\n\naww, I really want function decorators... they aren't viable because of hoisting?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$36zcXW9ACTk5A-WW3iMTiDJtaR4b4HFJTdcny-ru0xc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>correct, I personally do not think there is a viable path for function decorators or parameter decorators to exist</blockquote></mx-reply>aww, I really want function decorators... they aren't viable because of hoisting?","m.relates_to":{"m.in_reply_to":{"event_id":"$36zcXW9ACTk5A-WW3iMTiDJtaR4b4HFJTdcny-ru0xc"}},"msgtype":"m.text"},"ts":1695800461288,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-gCtzKB44ZzSx-33XTcnYbTUiNF2YezdqesQsqGKq68"},
{"content":{"body":"i get so annoyed that js doesn't have decorators on functions whenever i come back to it from python","m.mentions":{},"msgtype":"m.text"},"ts":1695800474237,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A-LmdF_OXK6YIlYrzsMtddBql70HeRcDL3EGQqjdy1M"},
{"content":{"body":"bakkot: Couldn't we achieve some poor woman's function composition with function decorators and isn't this, what everyone wants in lie of pipeline operator?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: Couldn't we achieve some poor woman's function composition with function decorators and isn't this, what everyone wants in lie of pipeline operator?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1695800500469,"senderName":"Christian Ulbrich","senderId":"@christianulbrich:matrix.org","id":"$nMpLGefSX_ElOq-zAqSaY8CCiQCQdDVbbjsVTn0eV-8"},
{"content":{"body":"We could easily have function decorators for function expressions and arrow functions, if we wanted them.","m.mentions":{},"msgtype":"m.text"},"ts":1695800549753,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ynetT4fGbJxBV3g1XVf5gEkTOF0POI-XHXsQgWcXfyo"},
{"content":{"body":"We've always been stuck on the hoisting behavior of function declarations.","m.mentions":{},"msgtype":"m.text"},"ts":1695800565464,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZEWlySvyljPgyrDHc71he7GSqKw-XCebvWrBcAALHGU"},
{"content":{"body":"i don't think either of those should have decorators on them :P","m.mentions":{},"msgtype":"m.text"},"ts":1695800579084,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$D72q79_Ov6BCuaIaQ7m9pLwtPLYG2uM4NMAPcrfzQW8"},
{"content":{"body":"any use case to decorate any kind of function applies to decorate any other kind of function.","m.mentions":{},"msgtype":"m.text"},"ts":1695800635337,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ihSSxbX0l4Ib4za1StwaUPSSsCBpfcicrZ-bmOXwqic"},
{"content":{"body":" * surely any use case to decorate any kind of function applies to decorate any other kind of function.","m.mentions":{},"m.new_content":{"body":"surely any use case to decorate any kind of function applies to decorate any other kind of function.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ihSSxbX0l4Ib4za1StwaUPSSsCBpfcicrZ-bmOXwqic","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695800671757,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ysXChO3UDxCF1eVxkmEL2Q3oAO7LubWbtKCjUPGGoiU"},
{"content":{"body":"> <@devsnek:matrix.org> i don't think either of those should have decorators on them :P\n\nI'm confused by this and your previous statement, they seem to be in conflict.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$D72q79_Ov6BCuaIaQ7m9pLwtPLYG2uM4NMAPcrfzQW8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don&#39;t think either of those should have decorators on them :P</blockquote></mx-reply>I'm confused by this and your previous statement, they seem to be in conflict.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D72q79_Ov6BCuaIaQ7m9pLwtPLYG2uM4NMAPcrfzQW8"}},"msgtype":"m.text"},"ts":1695800679584,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hMn01nTlZeYNkCDs73AzAh-wlqGMGRwwYxSlBDsSEaw"},
{"content":{"body":"i think function declarations should have decorators. i don't think function expressions or arrow arrow functions should have decorators","m.mentions":{},"msgtype":"m.text"},"ts":1695800708182,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$aP8GH-HAlKWiyWkvW-fxMIyScOHOX1DO-suU4GmgpL4"},
{"content":{"body":"> <@devsnek:matrix.org> i don't think either of those should have decorators on them :P\n\n\"You don't believe in 2,999 gods. And I don't believe in just one more\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$D72q79_Ov6BCuaIaQ7m9pLwtPLYG2uM4NMAPcrfzQW8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i don&#39;t think either of those should have decorators on them :P</blockquote></mx-reply>\"You don't believe in 2,999 gods. And I don't believe in just one more\"","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D72q79_Ov6BCuaIaQ7m9pLwtPLYG2uM4NMAPcrfzQW8"}},"msgtype":"m.text"},"ts":1695800708490,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LSJ2baVPEcpmV3Ega37_pJqLJbdxTXOmoZ4sjAytjII"},
{"content":{"body":"well maybe function expressions that are not in a variable declaration are ok","m.mentions":{},"msgtype":"m.text"},"ts":1695800725717,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NZ66Vxpx-DeQ2yvlgZyjVrYwGn192x4hhXhkp3qY3ek"},
{"content":{"body":"> <@devsnek:matrix.org> i think function declarations should have decorators. i don't think function expressions or arrow arrow functions should have decorators\n\nIt may be that function expressions are the _only_ way to have function decorators, unless we are willing to disable hoisting of decorated function declarations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$aP8GH-HAlKWiyWkvW-fxMIyScOHOX1DO-suU4GmgpL4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think function declarations should have decorators. i don&#39;t think function expressions or arrow arrow functions should have decorators</blockquote></mx-reply>It may be that function expressions are the <em>only</em> way to have function decorators, unless we are willing to disable hoisting of decorated function declarations.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aP8GH-HAlKWiyWkvW-fxMIyScOHOX1DO-suU4GmgpL4"}},"msgtype":"m.text"},"ts":1695800750888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oMsXdq3-BX80rmTLf2sYVmkpXIPxn11XftXVZALV6ZA"},
{"content":{"body":"yeah i'm aware","m.mentions":{},"msgtype":"m.text"},"ts":1695800763187,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$M5U28NXKRxQjEUygElQsHjNhbS2gzw0BaiCHD8icolM"},
{"content":{"body":"didn't we just lightly establish that function declarations are bad because hoisting","m.mentions":{},"msgtype":"m.text"},"ts":1695800777256,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-jPcNMPrqcy1mufqBy3nIUj3sCFX5uhxz6fF_okAvIU"},
{"content":{"body":"I would be fine with having this mean the function doesn't hoist:\n```js\n@dec\nfunction f() {}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I would be fine with having this mean the function doesn't hoist:</p>\n<pre><code class=\"language-js\">@dec\nfunction f() {}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695800789447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0ZtDaU0CakXDwPR_FSY88FHrgwXA2STmHf_uYgMKpc8"},
{"content":{"body":"in this particular lens, but i actually don't think they're bad","msgtype":"m.text"},"ts":1695800793263,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dxPijr17fRVpKuX7X4seoVFmq6fgy5TJW61ZcvlilHk"},
{"content":{"body":" * didn't we just lightly establish that function declarations are bad because hoisting (altho a non-hosting function declaration sounds great!)","m.mentions":{},"m.new_content":{"body":"didn't we just lightly establish that function declarations are bad because hoisting (altho a non-hosting function declaration sounds great!)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-jPcNMPrqcy1mufqBy3nIUj3sCFX5uhxz6fF_okAvIU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695800795702,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PHTDbnq9Wvw03-GEVbqgVF4iA9dfyLtJ1Tygm9Vu4Yg"},
{"content":{"body":"i think implicit function declaration hoisting behavior is actually much better than TDZ","msgtype":"m.text"},"ts":1695800806021,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g6HtP5DUTJMg1wuiNHLvUNAx1rLqAtBhtVeWcM7PXzc"},
{"content":{"body":"implicit letrec without special syntax is great","msgtype":"m.text"},"ts":1695800811995,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yfn0sA6O5p9CgSaFoXPFk8Jg8g4BhIyth5QOSZ_d8yg"},
{"content":{"body":"i am also very ok with decorators making functions not hoisted","m.mentions":{},"msgtype":"m.text"},"ts":1695800812989,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6T3GpbYS7ss_yyWU60wAZxHrZegdl0Cy0zkC2ONKo20"},
{"content":{"body":"can i just do `@ function f() {}` to have a non-hoisting function declaration without any decorator? i'm all on board with that","format":"org.matrix.custom.html","formatted_body":"can i just do <code>@ function f() {}</code> to have a non-hoisting function declaration without any decorator? i'm all on board with that","m.mentions":{},"msgtype":"m.text"},"ts":1695800823084,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h_YRBXuBNLiV0eEQXK4YuB1SfZg2gAhU5NCaKv3-IB8"},
{"content":{"body":"most of my code is actually written with a rule that prevents using hoisting anyway","m.mentions":{},"msgtype":"m.text"},"ts":1695800827470,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$d1kiwQSbQeDy9E8U5bUyGXEEq2lQXzYLI65OB6KmG7U"},
{"content":{"body":"At one point I was considering something like this:\n\n```\nlet function f() {}\nconst function g() {}\n```","format":"org.matrix.custom.html","formatted_body":"<p>At one point I was considering something like this:</p>\n<pre><code>let function f() {}\nconst function g() {}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695800864811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9BgVvUD7bCf-21rE_cOH5oeAbZZiEEF4vwSwcXTJF3U"},
{"content":{"body":"`fn`","format":"org.matrix.custom.html","formatted_body":"<code>fn</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695800874893,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cY2QVem73ENiDD_cAzRcNNALJlhpQoksYWyIuw_luQg"},
{"content":{"body":"i smell more tdz","m.mentions":{},"msgtype":"m.text"},"ts":1695800874927,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NJeQsC1TzoyzQV9TxyGXGvM2AJViX_UjcvGgsMwApcM"},
{"content":{"body":"`def`","format":"org.matrix.custom.html","formatted_body":"<code>def</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695800877144,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$bzOQx4yu2zmNrz_Y-Bs2iJhT1GXKcJXNw4U1u6IEn3Y"},
{"content":{"body":"Please no.","m.mentions":{},"msgtype":"m.text"},"ts":1695800879720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4N-iEhG6Uy-KwXeS0EeA1S5e8lzlJYkNGTKHMLkA6CM"},
{"content":{"body":"PROCEDURE","m.mentions":{},"msgtype":"m.text"},"ts":1695800900947,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$C5GaSVAcO4iDitTWUvu46O6CKA6UFaqhEAlWwE0HcQ8"},
{"content":{"body":"Yes, `function` is long, but `fn`, `impl`, `def` are not friendly to the reader.","format":"org.matrix.custom.html","formatted_body":"Yes, <code>function</code> is long, but <code>fn</code>, <code>impl</code>, <code>def</code> are not friendly to the reader.","m.mentions":{},"msgtype":"m.text"},"ts":1695800911598,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t8jINfuq6zWdoRQeTr-UuFziLfAS8EoVfY0h8iR7u0s"},
{"content":{"body":"i do wish everything was just `function`. i always mix them up when switching languages","format":"org.matrix.custom.html","formatted_body":"i do wish everything was just <code>function</code>. i always mix them up when switching languages","m.mentions":{},"msgtype":"m.text"},"ts":1695800928557,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x0wGDD45Wib6lIxHg0vCRz_XLesbg0445a14Eae7Kgc"},
{"content":{"body":"`good function f() {}`","format":"org.matrix.custom.html","formatted_body":"<code>good function f() {}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695800951255,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QgLPJheGsTCotXS6DBkk_1bjE15hgEeg38E4NmPYcJ0"},
{"content":{"body":"`'use good;`","format":"org.matrix.custom.html","formatted_body":"<code>'use good;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695800965229,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$zcDGiZkADCeJtKHtUZZgwcI4kcTlQGS1W8GhZUyYZZc"},
{"content":{"body":" * `'use good';`","format":"org.matrix.custom.html","formatted_body":" * <code>'use good';</code>","m.mentions":{},"m.new_content":{"body":"`'use good';`","format":"org.matrix.custom.html","formatted_body":"<code>'use good';</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zcDGiZkADCeJtKHtUZZgwcI4kcTlQGS1W8GhZUyYZZc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695800969248,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$XqeL1BzkcCnvNL-mvkPPbJXa9YjtrjMPD9597eUzKLY"},
{"content":{"body":"But, `let function f() {}` seemed like a good alternative to `let f = function () {}` when it came to decorators.","format":"org.matrix.custom.html","formatted_body":"But, <code>let function f() {}</code> seemed like a good alternative to <code>let f = function () {}</code> when it came to decorators.","m.mentions":{},"msgtype":"m.text"},"ts":1695800991569,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7Ie2Ve_XMttznKVlbI9XZ_ufrEDbAFb07s0G12y7pho"},
{"content":{"body":"`l'function f() {}`","format":"org.matrix.custom.html","formatted_body":"<code>l'function f() {}</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695801015006,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jR4vYAQsIS_tj97888jaWYqaLWloSIkcp8Y6hbnltcA"},
{"content":{"body":"`@let`","format":"org.matrix.custom.html","formatted_body":"<code>@let</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695801018344,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BzAWSTXZtV13WOzpx5hIyEuB-09-7QJkUIgE89qUhPI"},
{"content":{"body":"Especially since decorators expose the name of a thing, thus `let f = @dec function() {}` seems like it wouldn't get the name.","format":"org.matrix.custom.html","formatted_body":"Especially since decorators expose the name of a thing, thus <code>let f = @dec function() {}</code> seems like it wouldn't get the name.","m.mentions":{},"msgtype":"m.text"},"ts":1695801025829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GYxyFBGO-rjZ8PAx6MPEDHG_upP7U4UcO3b-KlPMYuY"},
{"content":{"body":"> <@devsnek:matrix.org> i am also very ok with decorators making functions not hoisted\n\nyes, this is what I was hoping would happen. Of course, then we need to decide whether they get tdz...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6T3GpbYS7ss_yyWU60wAZxHrZegdl0Cy0zkC2ONKo20?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i am also very ok with decorators making functions not hoisted</blockquote></mx-reply>yes, this is what I was hoping would happen. Of course, then we need to decide whether they get tdz...","m.relates_to":{"m.in_reply_to":{"event_id":"$6T3GpbYS7ss_yyWU60wAZxHrZegdl0Cy0zkC2ONKo20"}},"msgtype":"m.text"},"ts":1695801269149,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iDbfRFy1sMrAcWqw9_HhgoKpkgXJiRIoDoQUFQqdIuE"},
{"content":{"body":"i'll let shu decide","m.mentions":{},"msgtype":"m.text"},"ts":1695801297706,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VXYxjpdcXEYqEWozXhbntn79phKw9BFpZKKhGo6PJas"},
{"content":{"body":"```\nvar function f() {}\n```\nhoist the name, like a 'var', but not the value :)","format":"org.matrix.custom.html","formatted_body":"<pre><code>var function f() {}\n</code></pre>\n<p>hoist the name, like a 'var', but not the value :)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1695801346803,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kNrGkzBUs5Ow-eImVHccrO5OSYf_AZ1250yBK1AzsJU"},
{"content":{"body":"why not all three, var functions have no tdz, let functions are reassignable and have tdz, const functions aren't reassignable :-p","m.mentions":{},"msgtype":"m.text"},"ts":1695801404523,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o6npTtmv8ry3f71qjGJZ6PorFvA3nBNtxExThGdnEYg"},
{"content":{"body":"> <@ljharb:matrix.org> why not all three, var functions have no tdz, let functions are reassignable and have tdz, const functions aren't reassignable :-p\n\nI mean, that's what I'm suggesting, mostly unironically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o6npTtmv8ry3f71qjGJZ6PorFvA3nBNtxExThGdnEYg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>why not all three, var functions have no tdz, let functions are reassignable and have tdz, const functions aren&#39;t reassignable :-p</blockquote></mx-reply>I mean, that's what I'm suggesting, mostly unironically.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o6npTtmv8ry3f71qjGJZ6PorFvA3nBNtxExThGdnEYg"}},"msgtype":"m.text"},"ts":1695801428910,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TNxdoIwc-bQTnh_Q_AOfZwMPwqyN2ErjKM9NAC0ghak"},
{"content":{"body":"const functions can be used in constexprs","m.mentions":{},"msgtype":"m.text"},"ts":1695801430010,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DmDOuxLeITFeO64wPzYcYVTq0qcll_6hYs9lhgTZR6Y"},
{"content":{"body":"> <@rbuckton:matrix.org> Especially since decorators expose the name of a thing, thus `let f = @dec function() {}` seems like it wouldn't get the name.\n\nwell, class decorators can find themselves in the same position, and get undefined","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GYxyFBGO-rjZ8PAx6MPEDHG_upP7U4UcO3b-KlPMYuY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Especially since decorators expose the name of a thing, thus <code>let f = @dec function() {}</code> seems like it wouldn't get the name.</blockquote></mx-reply>well, class decorators can find themselves in the same position, and get undefined","m.relates_to":{"m.in_reply_to":{"event_id":"$GYxyFBGO-rjZ8PAx6MPEDHG_upP7U4UcO3b-KlPMYuY"}},"msgtype":"m.text"},"ts":1695801437096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-E4g6h5-R8S7iqQDSoyf5T2PV6kk62PU_f2R0DEHX8U"},
{"content":{"body":"> <@littledan:matrix.org> well, class decorators can find themselves in the same position, and get undefined\n\nAnd that's exactly why I would want to be able to decorate function declarations as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-E4g6h5-R8S7iqQDSoyf5T2PV6kk62PU_f2R0DEHX8U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, class decorators can find themselves in the same position, and get undefined</blockquote></mx-reply>And that's exactly why I would want to be able to decorate function declarations as well.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-E4g6h5-R8S7iqQDSoyf5T2PV6kk62PU_f2R0DEHX8U"}},"msgtype":"m.text"},"ts":1695801474892,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-2BukpZWzxDKWasHB3kZ5b4VteO2nErMtGl-bRH33P0"},
{"content":{"body":"yes, I think we should focus on decorating function declarations, and live with the non-hoisting (and presumably starting at undefined, given Shu's presentation)","msgtype":"m.text"},"ts":1695801510396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5r7AoWwk8c6NQJ6r57SMo4z5FmWFoX6U5XSYyGv6x0A"},
{"content":{"body":"> <@littledan:matrix.org> yes, I think we should focus on decorating function declarations, and live with the non-hoisting (and presumably starting at undefined, given Shu's presentation)\n\nI would be happy with this. The function hoisting issue held up decorators for years, and was why it was split off from the original proposal, IIRC.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5r7AoWwk8c6NQJ6r57SMo4z5FmWFoX6U5XSYyGv6x0A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yes, I think we should focus on decorating function declarations, and live with the non-hoisting (and presumably starting at undefined, given Shu&#39;s presentation)</blockquote></mx-reply>I would be happy with this. The function hoisting issue held up decorators for years, and was why it was split off from the original proposal, IIRC.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5r7AoWwk8c6NQJ6r57SMo4z5FmWFoX6U5XSYyGv6x0A"}},"msgtype":"m.text"},"ts":1695801555217,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$A3hjop7Q-C3vZIno3Egv18-BaUSHDTI2hUF-2eVEhL4"},
{"content":{"body":"Luca Casonato: I'm not convinced by snapshotting, just dump everything you care about yourself","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I'm not convinced by snapshotting, just dump everything you care about yourself","m.mentions":{"user_ids":["@lucacasonato:matrix.org"]},"msgtype":"m.text"},"ts":1695801631582,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dfUpegAq3krKpWbrYHb411QKsv8qbAM0TcxqDhluIWw"},
{"content":{"body":"eemeli: I just wanted to make sure you have understood that a solution here would look more like \"give me the ISO-8601 representation of this\" or \"sort this according to some defined non-locale-specific Unicode operation\", etc, not a \"give me the stable string repr of this\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: I just wanted to make sure you have understood that a solution here would look more like \"give me the ISO-8601 representation of this\" or \"sort this according to some defined non-locale-specific Unicode operation\", etc, not a \"give me the stable string repr of this\"","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"msgtype":"m.text"},"ts":1695801834871,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5TnPMrK1j_QABLTnhY57ysCSugh3DGA4WtlF6z0qqXg"},
{"content":{"body":"that's the thing I was trying to say that I couldn't put to words in the moment","m.mentions":{},"msgtype":"m.text"},"ts":1695801855699,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zMglrlUjt43-NZNviLRZ_ng7Fp80Rci44JGy-OgHPso"},
{"content":{"body":"but it was basically what bakkot had said","format":"org.matrix.custom.html","formatted_body":"but it was basically what <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> had said","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1695801869826,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DStOnCBSyXUv7-Yu4M3AUO3HpSgPeE5tmUJdyB1M9p4"},
{"content":{"body":"> <@michaelficarra:matrix.org> Luca Casonato: I'm not convinced by snapshotting, just dump everything you care about yourself\n\nbut if your app has localization features that are subject to change, you cannot do snapshot testing unless you make some kind of Intl stub ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dfUpegAq3krKpWbrYHb411QKsv8qbAM0TcxqDhluIWw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I'm not convinced by snapshotting, just dump everything you care about yourself</blockquote></mx-reply>but if your app has localization features that are subject to change, you cannot do snapshot testing unless you make some kind of Intl stub","m.mentions":{"user_ids":["@michaelficarra:matrix.org","@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dfUpegAq3krKpWbrYHb411QKsv8qbAM0TcxqDhluIWw"}},"msgtype":"m.text"},"ts":1695801878777,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$CqykPqQyunBnDj0FmA25WUHVKMRCCj7rm2N-8vK6oUI"},
{"content":{"body":"in this case you could just test with the `zxx` locale and get it working","format":"org.matrix.custom.html","formatted_body":"in this case you could just test with the <code>zxx</code> locale and get it working","m.mentions":{},"msgtype":"m.text"},"ts":1695801895471,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$dogXfWBDe9L8_c6v8B5755Modzk3h9GPtHPQ4XUPOFA"},
{"content":{"body":"> <@usharma:igalia.com> but if your app has localization features that are subject to change, you cannot do snapshot testing unless you make some kind of Intl stub\n\nwhy can't you just read all of the properties you care about?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CqykPqQyunBnDj0FmA25WUHVKMRCCj7rm2N-8vK6oUI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>but if your app has localization features that are subject to change, you cannot do snapshot testing unless you make some kind of Intl stub</blockquote></mx-reply>why can't you just read all of the properties you care about?","m.mentions":{"user_ids":["@usharma:igalia.com","@michaelficarra:matrix.org","@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CqykPqQyunBnDj0FmA25WUHVKMRCCj7rm2N-8vK6oUI"}},"msgtype":"m.text"},"ts":1695801925594,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxJDDrvP4HrpqeqHv9W_7__uhzHpBf28wtMSG3phu1M"},
{"content":{"body":"ryzokuken: I think that is an unrelated problem","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a>: I think that is an unrelated problem","m.mentions":{"user_ids":["@usharma:igalia.com"]},"msgtype":"m.text"},"ts":1695801932768,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IuZ1cMc2-2zMullM20SXr4Cu6HlvrRylxOgLC1H_Lms"},
{"content":{"body":"if the answer is \"they are not exposed\", we should fix that","m.mentions":{},"msgtype":"m.text"},"ts":1695801933235,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pu4srpHIQgkXlwVyZ0m5yzcyT_hsuorYHxgrtCFHSbI"},
{"content":{"body":"> <@michaelficarra:matrix.org> eemeli: I just wanted to make sure you have understood that a solution here would look more like \"give me the ISO-8601 representation of this\" or \"sort this according to some defined non-locale-specific Unicode operation\", etc, not a \"give me the stable string repr of this\"\n\nthis is how I understood the motivation myself (not the latter case I mean)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5TnPMrK1j_QABLTnhY57ysCSugh3DGA4WtlF6z0qqXg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: I just wanted to make sure you have understood that a solution here would look more like \"give me the ISO-8601 representation of this\" or \"sort this according to some defined non-locale-specific Unicode operation\", etc, not a \"give me the stable string repr of this\"</blockquote></mx-reply>this is how I understood the motivation myself (not the latter case I mean)","m.mentions":{"user_ids":["@michaelficarra:matrix.org","@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5TnPMrK1j_QABLTnhY57ysCSugh3DGA4WtlF6z0qqXg"}},"msgtype":"m.text"},"ts":1695801956731,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LFJzt68Gg72A1jzuampDcpYB8WTsLlyaQ87ijEICzPk"},
{"content":{"body":"> <@bakkot:matrix.org> why can't you just read all of the properties you care about?\n\nno I literally mean if you have a website that is rendered localized, you cannot do snapshot testing unless you have some sort of null locale to use in the testing environment","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DxJDDrvP4HrpqeqHv9W_7__uhzHpBf28wtMSG3phu1M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>why can't you just read all of the properties you care about?</blockquote></mx-reply>no I literally mean if you have a website that is rendered localized, you cannot do snapshot testing unless you have some sort of null locale to use in the testing environment","m.mentions":{"user_ids":["@bakkot:matrix.org","@michaelficarra:matrix.org","@lucacasonato:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DxJDDrvP4HrpqeqHv9W_7__uhzHpBf28wtMSG3phu1M"}},"msgtype":"m.text"},"ts":1695802019861,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$eLWeMS0NFSBkPu0g5BqQxiIjBK5EB4ccP7xysLgE5IQ"},
{"content":{"body":"or work on engines without Intl support","m.mentions":{},"msgtype":"m.text"},"ts":1695802036419,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$tJ0LMO75FfllLYZy_XJosM3E1Hr6Hl29To8dojy3h5g"},
{"content":{"body":"say more about why?","m.mentions":{},"msgtype":"m.text"},"ts":1695802062089,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gMLRAEHEg5lH1UKqQanV1aszN9iNyOpfqtB29yodMfU"},
{"content":{"body":"why can't you stub intl.whatever to just return \"AAAAA\"","m.mentions":{},"msgtype":"m.text"},"ts":1695802075787,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ofqEHveSh1V9hcuvw57-IAxurkzIawVsre34xrdm5sk"},
{"content":{"body":"why can you not do your own serialization, of all of the properties you care about?","m.mentions":{},"msgtype":"m.text"},"ts":1695802076426,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R8JpsIfBQgCtuQUunqt4x0F-EDp73fKp8xjU8Z93AOY"},
{"content":{"body":"> <@devsnek:matrix.org> why can't you stub intl.whatever to just return \"AAAAA\"\n\nyeah, that's one solution I mentioned","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ofqEHveSh1V9hcuvw57-IAxurkzIawVsre34xrdm5sk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>why can&#39;t you stub intl.whatever to just return &quot;AAAAA&quot;</blockquote></mx-reply>yeah, that's one solution I mentioned","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ofqEHveSh1V9hcuvw57-IAxurkzIawVsre34xrdm5sk"}},"msgtype":"m.text"},"ts":1695802086511,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$PIiAEVX5NlDMGBS1Xl-ULH-xtddJgB_9pPrcHQCYSm8"},
{"content":{"body":"oh you mean snapshotting _the entire website_","format":"org.matrix.custom.html","formatted_body":"oh you mean snapshotting <em>the entire website</em>","m.mentions":{},"msgtype":"m.text"},"ts":1695802122763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D_Guf_Zc9mjNR3xgc9kDIk8ngq95uqDQGKuf1rjjhyk"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1695802128407,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Hpn3F1bDkoIeWJdLa4xPCzaR4t-D8eMX_KvYyJuVEZM"},
{"content":{"body":"yeah I am not convinced that use case is worth solving, stubbing out intl seems fine for that case","m.mentions":{},"msgtype":"m.text"},"ts":1695802138524,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GY6cRKoN-5CD7wWjLXfmPEFsEFLu6nnTS5f8RUMvLME"},
{"content":{"body":"you also need to stub `Math.random` and so on","format":"org.matrix.custom.html","formatted_body":"you also need to stub <code>Math.random</code> and so on","m.mentions":{},"msgtype":"m.text"},"ts":1695802144069,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p_Fuu5ANEvpOWrlFSq86LUOXv7wmvmKkdKRK2ztJZ8I"},
{"content":{"body":"`new Date`","format":"org.matrix.custom.html","formatted_body":"<code>new Date</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695802149333,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tbS8A-S419fK1-Ow4uidrNXec9iENXp4dFrKJIYFZLU"},
{"content":{"body":"lots of stuff","m.mentions":{},"msgtype":"m.text"},"ts":1695802150717,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BKTAgD3r669CebftTeB1-Z_LxIdkwd_OjAzd0P-Z8q0"},
{"content":{"body":"right, true","m.mentions":{},"msgtype":"m.text"},"ts":1695802150730,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$3bmXv8ZqMHyw9rKbai5oQJHVG6AkykxUOTn2KdFvFHg"},
{"content":{"body":"(off to dinner, back later)","m.mentions":{},"msgtype":"m.text"},"ts":1695802159670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I5tj6H0X85Wx0PREHrFsXWcO1NjVGc9Z7IbThIlqbBA"},
{"content":{"body":"but there's other cases apart from that","m.mentions":{},"msgtype":"m.text"},"ts":1695802162494,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$gHQzKetuS7ZE7z6uBBDSaZ9oUbruPrZ00yyn_LRM_Os"},
{"content":{"body":"I was just elaborating on the one Luca mentioned","m.mentions":{},"msgtype":"m.text"},"ts":1695802169605,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$ATIVh62G7dmi3P5YZ_lc04vy8oI142iL5WiBCiCuick"},
{"content":{"body":"like i see this the same way as if we said \"we need a special deterministic url for using fetch() in snapshot tests\"","m.mentions":{},"msgtype":"m.text"},"ts":1695802171311,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zY8d-L_1QMf2S1BCUgfjLozAUG16UuoHcSz5B0XL7fg"},
{"content":{"body":"same, talk to you all after lunch!","m.mentions":{},"msgtype":"m.text"},"ts":1695802180668,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$HqPnaPbasOrbk3os-SODg-BHzKxH4dKiG6utEVDQFwQ"},
{"content":{"body":"> <@devsnek:matrix.org> like i see this the same way as if we said \"we need a special deterministic url for using fetch() in snapshot tests\"\n\nwhat about engines without Intl support","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zY8d-L_1QMf2S1BCUgfjLozAUG16UuoHcSz5B0XL7fg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>like i see this the same way as if we said &quot;we need a special deterministic url for using fetch() in snapshot tests&quot;</blockquote></mx-reply>what about engines without Intl support","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zY8d-L_1QMf2S1BCUgfjLozAUG16UuoHcSz5B0XL7fg"}},"msgtype":"m.text"},"ts":1695802198417,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$8tPPOmvXKHtfxrB-g__JuGQcSr2YW2cZxmh9zX9_YYY"},
{"content":{"body":"not sure what you mean","m.mentions":{},"msgtype":"m.text"},"ts":1695802258280,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$SzWr9jBxg96xpQnx3psXj3oDS38lMz-0FXFgUeGcRLA"},
{"content":{"body":"if you design localized interfaces that use Intl, you need to guard every call or again, use an Intl stub","m.mentions":{},"msgtype":"m.text"},"ts":1695802259475,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$rHTwreKPWHMo1QQebzGQuspVh-CpxSNzDjG2CRltOTI"},
{"content":{"body":"but if there were a null locale that was supported on all implementations, you would have a clean fallback","m.mentions":{},"msgtype":"m.text"},"ts":1695802284606,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$iWdIJrrxCfiGDJp_qlNf04wAtvBEy0kTNKF8Ik7JeM4"},
{"content":{"body":"like how the `iso8601` calendar works in Temporal.","format":"org.matrix.custom.html","formatted_body":"like how the <code>iso8601</code> calendar works in Temporal.","m.mentions":{},"msgtype":"m.text"},"ts":1695802295965,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$hfC1KqahCEt8Zcqa8g3DrqnHinSBbjsz1OVUSLQlR_U"},
{"content":{"body":"i think a null locale would be an explicitly bad thing","m.mentions":{},"msgtype":"m.text"},"ts":1695802311618,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$x7IhChCCwlCYJWF-j-C8Spuig3GvtTYpA2u1sVP-qAc"},
{"content":{"body":"Ideally you'd want to use `gregory` for many real use cases, but in the absence of any of these Intl calendars, you can always use the programmatic one","format":"org.matrix.custom.html","formatted_body":"Ideally you'd want to use <code>gregory</code> for many real use cases, but in the absence of any of these Intl calendars, you can always use the programmatic one","m.mentions":{},"msgtype":"m.text"},"ts":1695802329760,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$NwH_uJCz802-mWEQLmGAC6vYp7u4sh-FzItw_9NmDAs"},
{"content":{"body":"we used to have something similar in nodejs","m.mentions":{},"msgtype":"m.text"},"ts":1695802335652,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FDVB7lCqXwSqgyi4DicC6LsoJZJXDdw5lgEhWxOPgZc"},
{"content":{"body":"and it caused so much pain that we now ship node with full locale data by default now","m.mentions":{},"msgtype":"m.text"},"ts":1695802343204,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$EFPTjpjNfauBKTA2Yaukd3oIWjgfUIfYHmkeilCuEYE"},
{"content":{"body":" * and it caused so much pain that we now ship node with full locale data by default","m.mentions":{},"m.new_content":{"body":"and it caused so much pain that we now ship node with full locale data by default","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EFPTjpjNfauBKTA2Yaukd3oIWjgfUIfYHmkeilCuEYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695802368034,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$n_nz_Fl5DdPLrf6sbzyMdbDvKti1Vs_iwpnTEO0recE"},
{"content":{"body":"well, except we shipped an awkward stripped down locale data","m.mentions":{},"msgtype":"m.text"},"ts":1695802368760,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$MCA-_xQ3qYue-cllPrJKB8WBPRVn5-u-GQHAsumKCXo"},
{"content":{"body":"that was like en-US or something IIRC","m.mentions":{},"msgtype":"m.text"},"ts":1695802379273,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LEFYSnnhzDOeQhOB-yAc2Dh2eDasMOZXboGE_zyxTVI"},
{"content":{"body":"no matter what you put in you got out en-US but it wasn't real en-US because there wasn't even cldr data for en-US bundled","m.mentions":{},"msgtype":"m.text"},"ts":1695802406857,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VStTuqDR3vnLUKHF42dh9xmX1AiwdhtBxoZlFOxUYWY"},
{"content":{"body":"damn","m.mentions":{},"msgtype":"m.text"},"ts":1695802420793,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$PGn_26kEyagz39fvMELS1kXeLXk3slx4DcP8S6KDl1g"},
{"content":{"body":"but that's not what is being proposed here","m.mentions":{},"msgtype":"m.text"},"ts":1695802426400,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$GiXfeM8-DkALIFhaf3Ngnu3xHFbTmA1gtaZ9hHLzwfg"},
{"content":{"body":"although I guess motivations could be similar ","m.mentions":{},"msgtype":"m.text"},"ts":1695802443200,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$k76sw-AhoMxrbsDLg8U450-FJdPWRooGBcxLQq2uIhk"},
{"content":{"body":"i think my intuition is still that this is not a good thing and i'd rather code polyfilled intl in some way that makes sense to them ","m.mentions":{},"msgtype":"m.text"},"ts":1695802499037,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6f6Va8EHENPGc1f4osoUSOfaYSNnETaRbZZxjEUn7F4"},
{"content":{"body":"anyway, I don't want to cause any damage and will let Eemeli explain the merits of the proposal, I was hoping to add a supportive voice but I'm not involved yet","m.mentions":{},"msgtype":"m.text"},"ts":1695802502392,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Wkqa3diqXZIK9GE3ay9m1frT3ZZOulH9URc8IMDijtM"},
{"content":{"body":"> <@michaelficarra:matrix.org> Luca Casonato: I'm not convinced by snapshotting, just dump everything you care about yourself\n\nIf it’s a simple, stable, easy to read, string base representation of the value, I’d prefer to use that over a structured representation for debugging & snapshot testing ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24dfUpegAq3krKpWbrYHb411QKsv8qbAM0TcxqDhluIWw\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: I'm not convinced by snapshotting, just dump everything you care about yourself</blockquote></mx-reply>If it’s a simple, stable, easy to read, string base representation of the value, I’d prefer to use that over a structured representation for debugging &amp; snapshot testing","m.relates_to":{"m.in_reply_to":{"event_id":"$dfUpegAq3krKpWbrYHb411QKsv8qbAM0TcxqDhluIWw"}},"msgtype":"m.text"},"ts":1695804180246,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$N8Ahz4QaA_sYH_zr57saUm8dSPWXIcjbGEoT7SbjYfY"},
{"content":{"body":"> <@bakkot:matrix.org> you also need to stub `Math.random` and so on\n\nNot unless your runtime provides a way for you to run tests deterministically at a fixed fake time (which many test runners do)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24p_Fuu5ANEvpOWrlFSq86LUOXv7wmvmKkdKRK2ztJZ8I\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you also need to stub <code>Math.random</code> and so on</blockquote></mx-reply>Not unless your runtime provides a way for you to run tests deterministically at a fixed fake time (which many test runners do)","m.relates_to":{"m.in_reply_to":{"event_id":"$p_Fuu5ANEvpOWrlFSq86LUOXv7wmvmKkdKRK2ztJZ8I"}},"msgtype":"m.text"},"ts":1695804234174,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$FYfutGRRIpcPnYeGTUCSOTIREiCIGRKgGNU6RxzgUwM"},
{"content":{"body":"> <@devsnek:matrix.org> like i see this the same way as if we said \"we need a special deterministic url for using fetch() in snapshot tests\"\n\nWhy, url already has a simple and stable human readable serialization of the contained properties? Dates for example, may not ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24zY8d-L_1QMf2S1BCUgfjLozAUG16UuoHcSz5B0XL7fg\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>like i see this the same way as if we said \"we need a special deterministic url for using fetch() in snapshot tests\"</blockquote></mx-reply>Why, url already has a simple and stable human readable serialization of the contained properties? Dates for example, may not","m.relates_to":{"m.in_reply_to":{"event_id":"$zY8d-L_1QMf2S1BCUgfjLozAUG16UuoHcSz5B0XL7fg"}},"msgtype":"m.text"},"ts":1695804335350,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$AYYeNj5XkeaXsieB8CNVhqhr035l8zkCzsEQxAfFap8"},
{"content":{"body":"92 unread messages in a thread (or threads?) I cannot identify. Thanks, Matrix.","msgtype":"m.text"},"ts":1695823400992,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$drNKv6MsnQuJUdC1E5S9wghkNgMWG_xjl_-u98SnPdE"},
{"content":{"body":"I think one necessary next step for Stable Formatting is to enumerate the cases where Intl APIs are currently being used badly or dangerously because they're providing the most ergonomic solutions to developer problems.","msgtype":"m.text"},"ts":1695825686743,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$RNAalIY2sEZwrqH7qyeTNuog3Bk67FdfOL-K0cnFPZ8"},
{"content":{"body":"> <@shuyuguo:matrix.org> i am not a fan of being told, \"have you tried being smarter\"\n\nI have no context on the particulars here, but I can say that around the Agoric virtual water cooler, we have tremendous respect for your intelligence. I have no doubt we could be kinder.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7iSvYpUHh9D5VEqPDgbsYZpkBmMn7VpSYszIhHVELYI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i am not a fan of being told, &quot;have you tried being smarter&quot;</blockquote></mx-reply>I have no context on the particulars here, but I can say that around the Agoric virtual water cooler, we have tremendous respect for your intelligence. I have no doubt we could be kinder.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7iSvYpUHh9D5VEqPDgbsYZpkBmMn7VpSYszIhHVELYI"}},"msgtype":"m.text"},"ts":1695845588901,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IYVaaBVzYN-sIEUE9qvMBdI4LHgUy2mp53bb2PSyD24"},
{"content":{"body":"are you a fan of being told \"have you tried being kinder\" ?  `/s`","format":"org.matrix.custom.html","formatted_body":"are you a fan of being told \"have you tried being kinder\" ?  <code>/s</code>","m.mentions":{},"msgtype":"m.text"},"ts":1695846559662,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$OoiJuW57pn0rygKfnpvVBTEnOzQ95YjQyQquWMcunUY"},
{"content":{"body":"It’s always welcome feedback, regardless.","m.mentions":{},"m.relates_to":{"event_id":"$OoiJuW57pn0rygKfnpvVBTEnOzQ95YjQyQquWMcunUY","is_falling_back":true,"m.in_reply_to":{"event_id":"$OoiJuW57pn0rygKfnpvVBTEnOzQ95YjQyQquWMcunUY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1695846624759,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HnWkW-MY5U-QcksjkiF6O8o4hybOF58gelfHMcAoLa8"},
{"content":{"body":"> <@kriskowal:matrix.org> I have no context on the particulars here, but I can say that around the Agoric virtual water cooler, we have tremendous respect for your intelligence. I have no doubt we could be kinder.\n\nthanks.\n\nthe context is i would appreciate the assumption that we have done our due diligence on performance problems, which involves judgments in a tradeoff space. disagreements on the judgment call that was made _can_ be productive, but i would like the intellectual humility to appreciate our tradeoff space rather than making an opposite call in plenary like \"i don't think you're trying hard enough\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IYVaaBVzYN-sIEUE9qvMBdI4LHgUy2mp53bb2PSyD24?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I have no context on the particulars here, but I can say that around the Agoric virtual water cooler, we have tremendous respect for your intelligence. I have no doubt we could be kinder.</blockquote></mx-reply><p>thanks.</p>\n<p>the context is i would appreciate the assumption that we have done our due diligence on performance problems, which involves judgments in a tradeoff space. disagreements on the judgment call that was made <em>can</em> be productive, but i would like the intellectual humility to appreciate our tradeoff space rather than making an opposite call in plenary like \"i don't think you're trying hard enough\"</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$IYVaaBVzYN-sIEUE9qvMBdI4LHgUy2mp53bb2PSyD24"}},"msgtype":"m.text"},"ts":1695855163890,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fkbeQJawGRtGKktacyO8zzExMwLkRlMXetYPtBer65k"},
{"content":{"body":"@shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration without initialization that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","format":"org.matrix.custom.html","formatted_body":"@shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration without initialization that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","m.mentions":{},"msgtype":"m.text"},"ts":1695857905115,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84"},
{"content":{"body":" * @shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","format":"org.matrix.custom.html","formatted_body":" * @shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","m.mentions":{},"m.new_content":{"body":"@shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","format":"org.matrix.custom.html","formatted_body":"@shu, I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695858403693,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KDIJpocJoFNe8LGQGGsMHmZrT-SIYpvCtX6f03ou7iY"},
{"content":{"body":" * shu: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.new_content":{"body":"shu: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a `let` declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I just went through the transcript, I wasn't online anymore then, but putting aside the debate over due diligence and tradeoff judgements, I actually do not understand in which scenario a <code>let</code> declaration (without initialization) that occurs as the first statement of a scope can ever execute after any other code declared in that scope.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rzT_QTReKXCIIOb97BFqR2h-_SargTaN6oTeIO-tp84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695858647152,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cxBe2_CAuY69sW4I4C0PkjlezuauHyxhu2LbfdKA7o8"}
]