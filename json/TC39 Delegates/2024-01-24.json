[
{"content":{"body":"I do not have a strong opinion. My weak opinion teeters. Just facts: TextEncoder had to be static because the byte array could not be the receiver. The “into” term indicates that writer array is an argument, not a return or the receiver. By contrast “copyWithin” implies both the reader and writer are the receiver. I don’t know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument. ","format":"org.matrix.custom.html","formatted_body":"I do not have a strong opinion. My weak opinion teeters. Just facts: TextEncoder had to be static because the byte array could not be the receiver. The “into” term indicates that writer array is an argument, not a return or the receiver. By contrast “copyWithin” implies both the reader and writer are the receiver. I don’t know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument.","msgtype":"m.text"},"ts":1706113879903,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gCDBla7C6xxuWkquEV-b3iq68bZPlVqmSjefnJTi5Y4"},
{"content":{"body":"So nothing prevents the method from being on the prototype but it is easier to name on the constructor. ","format":"org.matrix.custom.html","formatted_body":"So nothing prevents the method from being on the prototype but it is easier to name on the constructor.","msgtype":"m.text"},"ts":1706114142481,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fG7Z1VRgkY6-5Td4v0_4PevMNuU91pNRH0I9pv6_8qU"},
{"content":{"body":"`write`?","format":"org.matrix.custom.html","formatted_body":"<code>write</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1706115926043,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PA3FTMqtw8G7faBuSAHquNSh7kpT_kw_9Qfbiv5n8qw"},
{"content":{"body":"> I don’t know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument.\n\nPlausibly [`fill`](https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%typedarray%.prototype.fill), which I guess for this proposal would suggest something like `Uint8Array.prototype.fillFromBase64`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>I don’t know a modifier word precedent for indicating the operation writes to the receiver and reads from an argument.</p>\n</blockquote>\n<p>Plausibly <a href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-%25typedarray%25.prototype.fill\"><code>fill</code></a>, which I guess for this proposal would suggest something like <code>Uint8Array.prototype.fillFromBase64</code></p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1706116005213,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Yomc4R38tKfWH9Nm0abUWlpj_PZGvgnix6JF5ymzfEE"},
{"content":{"body":"`fill` sounds very reasonable, imo","format":"org.matrix.custom.html","formatted_body":"<code>fill</code> sounds very reasonable, imo","m.mentions":{},"msgtype":"m.text"},"ts":1706116028521,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$MGsaGKuEnq_4vkkUgM_na9tLkeeQwCegw3bpmrysUVQ"},
{"content":{"body":"Maybe `set`? `DataView.prototype.setUint32()` sets multiple bytes on the receiver from an argument.","format":"org.matrix.custom.html","formatted_body":"Maybe <code>set</code>? <code>DataView.prototype.setUint32()</code> sets multiple bytes on the receiver from an argument.","m.mentions":{},"msgtype":"m.text"},"ts":1706116070034,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yayiIzmsju0I4BXL1VXy0V59PFPmoa_TKuGaAz7zjKM"},
{"content":{"body":"`fill` usually means performing a repetitive action, like \"fill this array with zeroes\"","format":"org.matrix.custom.html","formatted_body":"<code>fill</code> usually means performing a repetitive action, like \"fill this array with zeroes\"","m.mentions":{},"msgtype":"m.text"},"ts":1706116092778,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2xXdcOsI6InoZuEUIq2cdfdZ6kieOo3okUpIjafI-6c"},
{"content":{"body":"yep, `set` appears to be the other prior instance of that pattern","format":"org.matrix.custom.html","formatted_body":"yep, <code>set</code> appears to be the other prior instance of that pattern","m.mentions":{},"msgtype":"m.text"},"ts":1706116184121,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$WyRb2RSvZbONnksggPfACdQt0Dp9P3RwEiCRGF7U4vM"},
{"content":{"body":"This is also a somewhat new capability in the standard library, so something precedent-setting isn't necessarily uncalled for. I would generally use a term like `write` for this kind of operation elsewhere.","format":"org.matrix.custom.html","formatted_body":"This is also a somewhat new capability in the standard library, so something precedent-setting isn't necessarily uncalled for. I would generally use a term like <code>write</code> for this kind of operation elsewhere.","m.mentions":{},"msgtype":"m.text"},"ts":1706116200777,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y3Xj_52aiWdz0D0LAvVJ3f9WLwFETIhfC1lbsbx8OVY"},
{"content":{"body":"Also, `decode` has *some* precedent with `decodeURI`/`decodeURIComponent`, so `decodeBase64Into` is a possibility.","format":"org.matrix.custom.html","formatted_body":"Also, <code>decode</code> has <em>some</em> precedent with <code>decodeURI</code>/<code>decodeURIComponent</code>, so <code>decodeBase64Into</code> is a possibility.","m.mentions":{},"msgtype":"m.text"},"ts":1706116288633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$63OBSoLHwzBmQiWBy_fCj44CiewSJ1KUz78VLXgyUno"},
{"content":{"body":"I think the overarching point is that we ought to avoid \"into\" in the naming of a prototype method that writes into its receiver","m.mentions":{},"msgtype":"m.text"},"ts":1706116360291,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hrRg24V2wwRwnmbLjDHjnC3GkAuRYljIKg61eoQiHf4"},
{"content":{"body":"The name I would normally use for such a method, were it on the prototype, would be `writeBase64Bytes()`","format":"org.matrix.custom.html","formatted_body":"The name I would normally use for such a method, were it on the prototype, would be <code>writeBase64Bytes()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1706116434409,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AK2U-jI-ve35Pmu5Jt8VWTDjAF3KgetIpqlbbtKwcyM"},
{"content":{"body":"`set` doesn't seem like the right precedent, because its essentially a byte-for-byte copy. There's no encoding that happens (aside from byte order)","format":"org.matrix.custom.html","formatted_body":"<code>set</code> doesn't seem like the right precedent, because its essentially a byte-for-byte copy. There's no encoding that happens (aside from byte order)","m.mentions":{},"msgtype":"m.text"},"ts":1706116523244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7Fg2Ligs2oVs1hodGFd8uM8j-qQPtRCohZmgyUDS0x0"},
{"content":{"body":"`setFromBase64` and `writeFromBase64` seem like solid options. `writeBase64Bytes` isn't as strong IMO, but also isn't bad.","format":"org.matrix.custom.html","formatted_body":"<code>setFromBase64</code> and <code>writeFromBase64</code> seem like solid options. <code>writeBase64Bytes</code> isn't as strong IMO, but also isn't bad.","m.mentions":{},"msgtype":"m.text"},"ts":1706116550635,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$1cAdmtH8AkeAUTl6kmsLTipOmHO9aDlrGXmy1WMyP4o"},
{"content":{"body":"The term `byte` has precedent within the language, despite referring to it as `Uint8` on DataView and in the TypedArray constructor. `BYTES_PER_ELEMENT`, `byteLength`, etc.","format":"org.matrix.custom.html","formatted_body":"The term <code>byte</code> has precedent within the language, despite referring to it as <code>Uint8</code> on DataView and in the TypedArray constructor. <code>BYTES_PER_ELEMENT</code>, <code>byteLength</code>, etc.","m.mentions":{},"msgtype":"m.text"},"ts":1706116607561,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nZw-bo35aIDJITkePomd4_j21lyjs0-NYE8QEphfdf8"},
{"content":{"body":"Also, `writeBase64Bytes` means it could theoretically be applied to any typedarray prototype with the same meaning (i.e., \"write the bytes\"). An `Int32Array.prototype.writeFromBase64`, for example, might be misconstrued as decoding base64 into `Int32` elements, rather that bytes. `writeFromBase64` is probably fine if its *only* on `Uint8Array` (or maybe `Int8Array`).","format":"org.matrix.custom.html","formatted_body":"Also, <code>writeBase64Bytes</code> means it could theoretically be applied to any typedarray prototype with the same meaning (i.e., \"write the bytes\"). An <code>Int32Array.prototype.writeFromBase64</code>, for example, might be misconstrued as decoding base64 into <code>Int32</code> elements, rather that bytes. <code>writeFromBase64</code> is probably fine if its <em>only</em> on <code>Uint8Array</code> (or maybe <code>Int8Array</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1706116779704,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UHNQBUyCt6znOlHTM6n-cA_WcPgVm21RerG1O1HQCT8"},
{"content":{"body":"I think `writeBase64` is sufficiently specific and would be equally sensible on DataView or Uint*Array. ","format":"org.matrix.custom.html","formatted_body":"I think <code>writeBase64</code> is sufficiently specific and would be equally sensible on DataView or Uint*Array.","msgtype":"m.text"},"ts":1706118176354,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Z36CXKchBYSbdRBY4prmQBfH2T5sHjV1V1d-bTE3OeI"},
{"content":{"body":"* I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8*Array.","m.new_content":{"body":"I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8*Array.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Z36CXKchBYSbdRBY4prmQBfH2T5sHjV1V1d-bTE3OeI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706118192424,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$D9Y5Jd8DcvgzJnxmqYBgzsHMZ9bRZLmPeEmm5al0OT8"},
{"content":{"body":"* I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8Array (and variants).","m.new_content":{"body":"I think writeBase64 is sufficiently specific and would be equally sensible on DataView or Uint8Array (and variants).","msgtype":"m.text"},"m.relates_to":{"event_id":"$Z36CXKchBYSbdRBY4prmQBfH2T5sHjV1V1d-bTE3OeI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1706118219446,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dJbSLJfHq1Ch3fNFOa9-boibcavcqbCTYMVUP-CyXGE"},
{"content":{"body":"plan is for these to only be on Uint8Array specifically, so I'm not too worried about the interpretation on other TA types","m.mentions":{},"msgtype":"m.text"},"ts":1706118224622,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WNzmD_C7PaczxZQhkteiHf8ZgF1lPH27N4SI3Wijz5c"},
{"content":{"body":"I would find base64-decoding to non-byte types confusing","m.mentions":{},"msgtype":"m.text"},"ts":1706118236837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OmmPrUfRfN_4hL_7ui2jr7kesXzW35ugbLztenvSa2E"},
{"content":{"body":"I don’t like it but `set` has much stronger precedent than `write`","format":"org.matrix.custom.html","formatted_body":"I don’t like it but <code>set</code> has much stronger precedent than <code>write</code>","msgtype":"m.text"},"ts":1706118328042,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dFBqaPTFVizIDKrdFfQ7SYyjc4HXtMp5VXKZ2gJfeyY"},
{"content":{"body":"re: `set` vs `write`, we have a bunch of methods called \"set\" and none called \"write\", and the names themselves don't seem to suggest that one of them does decoding, so I'm inclined more towards `set`","format":"org.matrix.custom.html","formatted_body":"re: <code>set</code> vs <code>write</code>, we have a bunch of methods called \"set\" and none called \"write\", and the names themselves don't seem to suggest that one of them does decoding, so I'm inclined more towards <code>set</code>","m.mentions":{},"msgtype":"m.text"},"ts":1706118348416,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oZaxxmo1ezCamc2oj8cT47SAk1qLw1hcQrgJavv5xLo"},
{"content":{"body":"the DataView `setUint32` etc methods are arguably doing encoding, especially given the endianness parameter","format":"org.matrix.custom.html","formatted_body":"the DataView <code>setUint32</code> etc methods are arguably doing encoding, especially given the endianness parameter","m.mentions":{},"msgtype":"m.text"},"ts":1706118388898,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qoYFmWYh-Xgh1SuidgC4gIIzpSTfOWWfwDxk0d_kA4Y"},
{"content":{"body":"so of the names above, `setFromBase64` is my preference","format":"org.matrix.custom.html","formatted_body":"so of the names above, <code>setFromBase64</code> is my preference","m.mentions":{},"msgtype":"m.text"},"ts":1706118407846,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YQ-zi_YwnWLCeoSIPaShBPPE6VHmekQ9wqBupDyB59s"},
{"content":{"body":"not opposed to `write`, but `set` seems nicer","format":"org.matrix.custom.html","formatted_body":"not opposed to <code>write</code>, but <code>set</code> seems nicer","m.mentions":{},"msgtype":"m.text"},"ts":1706118441223,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$g4kW5v_Ref5wISvsVeZm_bLbxZv8vbX1rkoRbkmPIEQ"},
{"content":{"body":"and it sounds like people are leaning towards having this on the prototype rather than a static?","m.mentions":{},"msgtype":"m.text"},"ts":1706118453148,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BVn1gwkzgm_Bl_C5cGAE-HFEmbnbod7dYOab8Ke7mWY"},
{"content":{"body":"ok maybe no one actually cares about prototype vs static?","m.mentions":{},"msgtype":"m.text"},"ts":1706118792301,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gf_lq9mR-lLANPX55C0YlyR2-MKv_J31ue0GytPgUXk"},
{"content":{"body":"As I said, my biggest concern for `set` is that methods like `setInt32` imply a byte-for-byte copy, which doesn't seem consistent with this, but I'm not strongly opposed. ","format":"org.matrix.custom.html","formatted_body":"As I said, my biggest concern for <code>set</code> is that methods like <code>setInt32</code> imply a byte-for-byte copy, which doesn't seem consistent with this, but I'm not strongly opposed.","msgtype":"m.text"},"ts":1706120724894,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bk6cPOkKMc_2WVuQW3LmZmhdrhP2QoihyfT0P6vEozs"},
{"content":{"body":"I guess I slightly prefer it on the prototype","m.mentions":{},"msgtype":"m.text"},"ts":1706121585549,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ppZxODNbvTGmHxW2Da49LwaHKeJDNLEhwoYA6aHWhcQ"},
{"content":{"body":"I’m leaning toward the prototype, given we’ve found precedent-founded names for a prototype-method, like `setFromBase64`.","format":"org.matrix.custom.html","formatted_body":"I’m leaning toward the prototype, given we’ve found precedent-founded names for a prototype-method, like <code>setFromBase64</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1706121709102,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aQKB_lZlJqUQVP74gl0QoV5VZFF4_v29uWSnMZsyKuo"},
{"content":{"body":"`setFromBase64` seems as byte-for-byte as `setInt32` does, to me? the input is not bytes itself, but can be represented by bytes in a canonical way, so you represent it as bytes and then set those in the buffer","format":"org.matrix.custom.html","formatted_body":"<code>setFromBase64</code> seems as byte-for-byte as <code>setInt32</code> does, to me? the input is not bytes itself, but can be represented by bytes in a canonical way, so you represent it as bytes and then set those in the buffer","m.mentions":{},"msgtype":"m.text"},"ts":1706122755562,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bu2gMKS8TPVCah4OcAeh9VWSVj9GOctp0l5MG1f2JmQ"},
{"content":{"body":"I would not be offended by `setFromHex`, `setFromAscii`, or `setFromUtf8` if they were proposed. There’s some bytewise compaction and contraction, not even uniformly proportional in all these cases.","format":"org.matrix.custom.html","formatted_body":"I would not be offended by <code>setFromHex</code>, <code>setFromAscii</code>, or <code>setFromUtf8</code> if they were proposed. There’s some bytewise compaction and contraction, not even uniformly proportional in all these cases.","m.mentions":{},"msgtype":"m.text"},"ts":1706128188275,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bGaDTyPWnGSTRs0yslGBWWtlgEpPTor28DtBXuzrtkY"},
{"content":{"body":"this proposal will include `setFromHex`","format":"org.matrix.custom.html","formatted_body":"this proposal will include <code>setFromHex</code>","m.mentions":{},"msgtype":"m.text"},"ts":1706130050028,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8SBdNpAXnNmWlIhSVzsSMxFz5ueR72hdf0tt3ohnlwo"},
{"content":{"body":"`fromUtf8` will continue to live in TextEncoder; no reason to be duplicative","format":"org.matrix.custom.html","formatted_body":"<code>fromUtf8</code> will continue to live in TextEncoder; no reason to be duplicative","m.mentions":{},"msgtype":"m.text"},"ts":1706130061799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CfQwXewBEStcUo1GJH3RGKIRCJmqXM0K3pcyMmFBP7A"}
]