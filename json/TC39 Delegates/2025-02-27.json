[
{"content":{"body":"> <@eemeli:mozilla.org> I find it rather hard to justify that `[ok, error, value]` is needed just because `error` might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.\n\nCould we do something like `[value]` if success and `[undefined, reason]` if throw. That way anyone that want to handle the unexpected case can use the arity of the returned tuple? Or if we absolutely want to put the error first, use a hole in the array instead of a reason.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br />I find it rather hard to justify that <code>[ok, error, value]</code> is needed just because <code>error</code> might be falsy. If your error might be falsy, that's something you ought to fix in your own code rather than having the spec make allowances for it.</blockquote></mx-reply>Could we do something like <code>[value]</code> if success and <code>[undefined, reason]</code> if throw. That way anyone that want to handle the unexpected case can use the arity of the returned tuple? Or if we absolutely want to put the error first, use a hole in the array instead of a reason.","m.relates_to":{"m.in_reply_to":{"event_id":"$c7T5Xj-8AXeyuF_6PRsgQ7A1ZR2_jT23RlGpmtyDXWs"}},"msgtype":"m.text"},"ts":1740630248838,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3LS-aL6o8sF4DjVtC3_A0eQZzN7juCq_LCDP5cx6XuY"}
]