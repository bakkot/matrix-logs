[
{"content":{"body":"Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and `Symbol.for` can simply recreate the value, `Symbol.keyFor` can unwrap the description, and comparing would match the subtype (registered symbol) + description value.","format":"org.matrix.custom.html","formatted_body":"Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and <code>Symbol.for</code> can simply recreate the value, <code>Symbol.keyFor</code> can unwrap the description, and comparing would match the subtype (registered symbol) + description value.","msgtype":"m.text"},"ts":1643246477794,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc"},
{"content":{"body":"if you want to talk more about the presentation from the KAIST research group yesterday, I've started a thread on the Reflector: https://github.com/tc39/Reflector/issues/417","msgtype":"m.text"},"ts":1643305971189,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XlzEApt-vOgfiYry_PxOYwI6mE8ORIaOuLfWjpYqXbQ"},
{"content":{"body":"> <@mhofman:matrix.org> Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and `Symbol.for` can simply recreate the value, `Symbol.keyFor` can unwrap the description, and comparing would match the subtype (registered symbol) + description value.\n\nmaybe would have added a bit of complexity to other places (e.g. `typeof` to now handle 2 different representations for the same type). And if `Symbol.for` is only called a few times per application run, not a large optimization saving.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and <code>Symbol.for</code> can simply recreate the value, <code>Symbol.keyFor</code> can unwrap the description, and comparing would match the subtype (registered symbol) + description value.</blockquote></mx-reply>maybe would have added a bit of complexity to other places (e.g. <code>typeof</code> to now handle 2 different representations for the same type). And if <code>Symbol.for</code> is only called a few times per application run, not a large optimization saving.","m.relates_to":{"m.in_reply_to":{"event_id":"$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc"}},"msgtype":"m.text"},"ts":1643306553659,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XGH29labOrd7EHigG6EacDQ0jKNFgqyc-qLoEuFfc34"},
{"content":{"body":"https://hackmd.io/yDDJCsS-Sv2AJwo8arAn3w?view","msgtype":"m.text"},"ts":1643306584170,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$X3bp3HWeZt4eBPlt04XtkMphqE2ebmFu6a-UHQ_0I0g"},
{"content":{"body":"the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":"the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","msgtype":"m.text"},"ts":1643306709470,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CslYFehVrq1WEk2JetUm77HRrBZR3jWnzHF1hSJXjwY"},
{"content":{"body":" * the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":" * the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","m.new_content":{"body":"the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":"the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","msgtype":"m.text"},"m.relates_to":{"event_id":"$CslYFehVrq1WEk2JetUm77HRrBZR3jWnzHF1hSJXjwY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643306715933,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AvXdfhfNnHCblQBDiO8qZcEdixI4LqOYSw31cq94oTA"},
{"content":{"body":"oops, we're in the jitsi, not the meet on the calendar invite","msgtype":"m.text"},"ts":1643307019264,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$15wpsSzlqBp6H1YVTNrxj5Qw_hWdYS8kTbqjeV3J6c8"}
]