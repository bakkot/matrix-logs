[
{"content":{"body":"Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and `Symbol.for` can simply recreate the value, `Symbol.keyFor` can unwrap the description, and comparing would match the subtype (registered symbol) + description value.","format":"org.matrix.custom.html","formatted_body":"Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and <code>Symbol.for</code> can simply recreate the value, <code>Symbol.keyFor</code> can unwrap the description, and comparing would match the subtype (registered symbol) + description value.","msgtype":"m.text"},"ts":1643246477794,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc"},
{"content":{"body":"if you want to talk more about the presentation from the KAIST research group yesterday, I've started a thread on the Reflector: https://github.com/tc39/Reflector/issues/417","msgtype":"m.text"},"ts":1643305971189,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XlzEApt-vOgfiYry_PxOYwI6mE8ORIaOuLfWjpYqXbQ"},
{"content":{"body":"> <@mhofman:matrix.org> Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and `Symbol.for` can simply recreate the value, `Symbol.keyFor` can unwrap the description, and comparing would match the subtype (registered symbol) + description value.\n\nmaybe would have added a bit of complexity to other places (e.g. `typeof` to now handle 2 different representations for the same type). And if `Symbol.for` is only called a few times per application run, not a large optimization saving.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Btw, re symbols, I'm still surprised no engine considers registered symbols separately from unique symbols, and simply implements them as a wrapped string. At that point there is no need to track instances of registered symbols and collect them, at least any more than roping the strings they wrap, and <code>Symbol.for</code> can simply recreate the value, <code>Symbol.keyFor</code> can unwrap the description, and comparing would match the subtype (registered symbol) + description value.</blockquote></mx-reply>maybe would have added a bit of complexity to other places (e.g. <code>typeof</code> to now handle 2 different representations for the same type). And if <code>Symbol.for</code> is only called a few times per application run, not a large optimization saving.","m.relates_to":{"m.in_reply_to":{"event_id":"$NT3Sj2YHGVOs5g8yvt2Cl19WOw9cM1ZfqvJ20MJg9xc"}},"msgtype":"m.text"},"ts":1643306553659,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XGH29labOrd7EHigG6EacDQ0jKNFgqyc-qLoEuFfc34"},
{"content":{"body":"https://hackmd.io/yDDJCsS-Sv2AJwo8arAn3w?view","msgtype":"m.text"},"ts":1643306584170,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$X3bp3HWeZt4eBPlt04XtkMphqE2ebmFu6a-UHQ_0I0g"},
{"content":{"body":"the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":"the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","msgtype":"m.text"},"ts":1643306709470,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CslYFehVrq1WEk2JetUm77HRrBZR3jWnzHF1hSJXjwY"},
{"content":{"body":" * the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":" * the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","m.new_content":{"body":"the data flow call has begun; there's only 4 of us so far. jschoi, coming?","format":"org.matrix.custom.html","formatted_body":"the data flow call has begun; there's only 4 of us so far. <a href=\"https://matrix.to/#/@jschoi:matrix.org\">jschoi</a>, coming?","msgtype":"m.text"},"m.relates_to":{"event_id":"$CslYFehVrq1WEk2JetUm77HRrBZR3jWnzHF1hSJXjwY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643306715933,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AvXdfhfNnHCblQBDiO8qZcEdixI4LqOYSw31cq94oTA"},
{"content":{"body":"oops, we're in the jitsi, not the meet on the calendar invite","msgtype":"m.text"},"ts":1643307019264,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$15wpsSzlqBp6H1YVTNrxj5Qw_hWdYS8kTbqjeV3J6c8"},
{"content":{"body":"TabAtkins: I meant uncurry-this","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: I meant uncurry-this","msgtype":"m.text"},"ts":1643311946867,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$lAhxfJ3zB7m8W8r73kLQjE_bx28RjuV3prHIx3S3cC4"},
{"content":{"body":"I assumed that was what was meant by call-this","msgtype":"m.text"},"ts":1643311960870,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$n_XIYAzCHmSPhWQRVE07Ina5_-seZjayaNGhG6ItEOM"},
{"content":{"body":"because there is zero mention of `call-this` in either article","format":"org.matrix.custom.html","formatted_body":"because there is zero mention of <code>call-this</code> in either article","msgtype":"m.text"},"ts":1643312029897,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$oSDqPkI9UrS63o1IxagSEvwLRrnVwciaHfGIU3qqtL8"},
{"content":{"body":"so if that's not what was meant then I have zero idea what was meant by that phrase","msgtype":"m.text"},"ts":1643312093609,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$vy03SZDxaEsRT0Cn-B35Mr8JIU3WQNcFbdv20x0VU_E"},
{"content":{"body":"https://github.com/tabatkins/proposal-call-this-operator","msgtype":"m.text"},"ts":1643312121880,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$SSME5NtORvNQFHjX7KjjwbqabFLzyVJMjrn5vkXcf-0"},
{"content":{"body":"literally just \"`.call()`, but a calling operator\"","format":"org.matrix.custom.html","formatted_body":"literally just &quot;<code>.call()</code>, but a calling operator&quot;","msgtype":"m.text"},"ts":1643312144947,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$gB_xBWx_RWV4OKtkjNnbI_nBDNDQiujre1SbUWvIaKQ"},
{"content":{"body":"`method@(reciever, arg)` === `method.call(receiver, arg)`","format":"org.matrix.custom.html","formatted_body":"<code>method@(reciever, arg)</code> === <code>method.call(receiver, arg)</code>","msgtype":"m.text"},"ts":1643312158488,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$b6F_1Ob54f-XqQbdgm7hN-AMClC2yC8wQud8G5quPzs"},
{"content":{"body":"I see","msgtype":"m.text"},"ts":1643312178020,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$JyyH_bViGuP11CNjlUhDBae4X9K1dtZItgl-pRn_VGE"},
{"content":{"body":"Do people remember the reasons why named argument syntax was rejected in JS? A la `foo(argname: 1, arg2name: 2)`?","format":"org.matrix.custom.html","formatted_body":"Do people remember the reasons why named argument syntax was rejected in JS? A la <code>foo(argname: 1, arg2name: 2)</code>?","msgtype":"m.text"},"ts":1643312189484,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$9T2eD1iQVUfu44n6arNO-SXFfceeU69z6sJe6j4sokc"},
{"content":{"body":"that too seems inoffensive (in that it _adds onto_ existing syntax)","format":"org.matrix.custom.html","formatted_body":"that too seems inoffensive (in that it <em>adds onto</em> existing syntax)","msgtype":"m.text"},"ts":1643312189849,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZopYsfxx9QHPZQk4x1tiMKm1z9R8XaWSs_FsThcTNUM"},
{"content":{"body":" * that too seems inoffensive","m.new_content":{"body":"that too seems inoffensive","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZopYsfxx9QHPZQk4x1tiMKm1z9R8XaWSs_FsThcTNUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643312201688,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$a_8hsARkqlAq9AuCkgNkSfDve26jomxSvkwzmb1o4VM"},
{"content":{"body":" * that too seems inoffensive (in that it _adds onto_ existing syntax)","format":"org.matrix.custom.html","formatted_body":" * that too seems inoffensive (in that it <em>adds onto</em> existing syntax)","m.new_content":{"body":"that too seems inoffensive (in that it _adds onto_ existing syntax)","format":"org.matrix.custom.html","formatted_body":"that too seems inoffensive (in that it <em>adds onto</em> existing syntax)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZopYsfxx9QHPZQk4x1tiMKm1z9R8XaWSs_FsThcTNUM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643312226728,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$BfcMo0Lexdbpa__thezrQmksKRlNZNDRmp7VjxDyB5g"},
{"content":{"body":"oh lol it's funny that my previous statement was in fact that `::` is less confusing than `->`\nhttps://github.com/tc39/proposal-bind-this/issues/10","format":"org.matrix.custom.html","formatted_body":"oh lol it's funny that my previous statement was in fact that <code>::</code> is less confusing than <code>-&gt;</code><br>https://github.com/tc39/proposal-bind-this/issues/10","msgtype":"m.text"},"ts":1643314618909,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$PELqI5__eaSk9S-ZQzaO0qOBPgCu5lSCFrwZ4CTV9nA"},
{"content":{"body":" * oh lol it's funny that my previous statement was in fact that `::` is less confusing than `->`\nhttps://github.com/tc39/proposal-bind-this/issues/10","format":"org.matrix.custom.html","formatted_body":" * oh lol it's funny that my previous statement was in fact that <code>::</code> is less confusing than <code>-&gt;</code><br>https://github.com/tc39/proposal-bind-this/issues/10","m.new_content":{"body":"oh lol it's funny that my previous statement was in fact that `::` is less confusing than `->`\nhttps://github.com/tc39/proposal-bind-this/issues/10","format":"org.matrix.custom.html","formatted_body":"oh lol it's funny that my previous statement was in fact that <code>::</code> is less confusing than <code>-&gt;</code><br>https://github.com/tc39/proposal-bind-this/issues/10","msgtype":"m.text"},"m.relates_to":{"event_id":"$PELqI5__eaSk9S-ZQzaO0qOBPgCu5lSCFrwZ4CTV9nA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1643314634591,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$4Uwl0dSUasSQeEub4pSyRtSPbHZFq4d2tHiMruu676k"},
{"content":{"body":"sorry about that, I do still think that's true","msgtype":"m.text"},"ts":1643314755799,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$DNhqdp0ClgJv-kAFwGyszmUH8qrZyj8YjtFaao6Syc4"},
{"content":{"body":"which means that my new point is really just that I'd have a preference for call-this","msgtype":"m.text"},"ts":1643314952957,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$FXaSCYm3Qmjh_gms2VTUrFej14gaeoPCdnz4gTFBo1g"},
{"content":{"body":"rkirsling: Also, take a look at rbuckton’s new idea in the pipe room. `f(this: thisArg)`. Or maybe `f(thisArg:)`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rkirsling:matrix.org\">rkirsling</a>: Also, take a look at <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>’s new idea in the pipe room. <code>f(this: thisArg)</code>. Or maybe <code>f(thisArg:)</code>.","msgtype":"m.text"},"ts":1643315007640,"senderName":"jschoi","senderId":"@jschoi:matrix.org","id":"$5Tgyk89rVk5B-YcAGABtojphYrxXuopWlM90DKHvl9M"},
{"content":{"body":"I could see conflicts with type systems which also use :","msgtype":"m.text"},"ts":1643315472069,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$U-lJ-i63K-4ESixMtJBYn8V2pLlovrZWRdLfgD8B9W4"},
{"content":{"body":"TabAtkins: i think mainly because its value-add is negligible over \"an options bag, destructured in the function\"","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@tabatkins:matrix.org\">TabAtkins</a>: i think mainly because its value-add is negligible over &quot;an options bag, destructured in the function&quot;","msgtype":"m.text"},"ts":1643321657838,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$q9-MFOWRb5BnAVNZZGcDYhh9sK1fWv62lC2M9RKrHEQ"}
]