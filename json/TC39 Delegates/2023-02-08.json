[
{"content":{"body":"right","msgtype":"m.text"},"ts":1675817116712,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$COCvHv65eDTuR8QC2Lb6IuU0rbpyg88OnC-wd162zn4"},
{"content":{"body":"Can we just fix the override mistake? If we introduce a \"freeze mode\" that doesn't trigger the override mistake for some intrinsics, I'd like this behavior to not be exotic, and be applicable to non intrinsics. One avenue I've been toying with is an options bag to `Object.freeze` that would allow setting such mode on the object and have the `OrdinarySetWithOwnDescriptor` check for that mode. I think changing 2.1 to something like this would be enough: `If ownDesc.[[Writable]] is false and O.[[FrozenWithoutOverrideMistake]] is true, return false.`","format":"org.matrix.custom.html","formatted_body":"Can we just fix the override mistake? If we introduce a &quot;freeze mode&quot; that doesn't trigger the override mistake for some intrinsics, I'd like this behavior to not be exotic, and be applicable to non intrinsics. One avenue I've been toying with is an options bag to <code>Object.freeze</code> that would allow setting such mode on the object and have the <code>OrdinarySetWithOwnDescriptor</code> check for that mode. I think changing 2.1 to something like this would be enough: <code>If ownDesc.[[Writable]] is false and O.[[FrozenWithoutOverrideMistake]] is true, return false.</code>","msgtype":"m.text"},"ts":1675817952608,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$t-DwttygOxSDYgNNV3qDlEYs0NZe-vJvMTp0mztr8co"},
{"content":{"body":"Then instead of ad-hoc patching some intrinsics so that they'd be exotic non-configurable, just ask that code opt-in to freezing all the intrinsics through the new \"secure mode\"","msgtype":"m.text"},"ts":1675818158243,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CMJlXh6FeX0mbDseleivgK-0Jurdvi02h0QPOwE_zyE"},
{"content":{"body":"Mm, I'm not sure how much appetite there would be for a new attribute on every object. That's a lot to ask of engines.","msgtype":"m.text"},"ts":1675818190808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jp_yWx29OKwKDKhAL2bmzspl9tm3gISKUa88Px0daYI"},
{"content":{"body":"maybe?","msgtype":"m.text"},"ts":1675818198600,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$th0IxI_IxONJeS9m_QUYecvXenzacfIBqrNZpPNjPik"},
{"content":{"body":"Doesn't have to be on every object, just the special frozen ones ;)","msgtype":"m.text"},"ts":1675818216013,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ke4A_LHuGfkxY70WZZQjZurXDeRjNjeyLsfx6vyl5Yo"},
{"content":{"body":"Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in `isFrozen`, and simply returned true if in that mode. It'd behave like a \"cached-frozen\" mode.","format":"org.matrix.custom.html","formatted_body":"Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in <code>isFrozen</code>, and simply returned true if in that mode. It'd behave like a &quot;cached-frozen&quot; mode.","msgtype":"m.text"},"ts":1675818327494,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xI_9rxaFUF0rtcQpaWBluKSyXlVq00yT8aOOJqa9k18"},
{"content":{"body":"though if you really want this patch to be non-exotic, you can do that without a new attribute by, instead of having a nonwritable field, instead having a frozen getter/setter pair where the setter silently does nothing","msgtype":"m.text"},"ts":1675818331836,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ePcYaGWhJRGDOWeg1mb-t9a34Iu-cT6JwqB6z8FupU0"},
{"content":{"body":" * Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in `isFrozen`, and simply returned true if in that mode. It'd behave like a \"cached-frozen\" mode.","format":"org.matrix.custom.html","formatted_body":" * Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in <code>isFrozen</code>, and simply returned true if in that mode. It'd behave like a &quot;cached-frozen&quot; mode.","m.new_content":{"body":"Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in `isFrozen`, and simply returned true if in that mode. It'd behave like a \"cached-frozen\" mode.","format":"org.matrix.custom.html","formatted_body":"Implement it as another integrity level if you want, super-frozen. I actually would like if that same super-frozen mode didn't re-execute all the checks in <code>isFrozen</code>, and simply returned true if in that mode. It'd behave like a &quot;cached-frozen&quot; mode.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xI_9rxaFUF0rtcQpaWBluKSyXlVq00yT8aOOJqa9k18","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675818337211,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$u3FHzOBnO0fYe5R8YqfkNUFNR-k7fsuzaMTZPeRxmNA"},
{"content":{"body":"I too like things being more frozen, but asking engines to mess about with the internal representations of things is, generally, going to need to clear a pretty high bar","msgtype":"m.text"},"ts":1675818384210,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yFK6pJCkWKaYmVcWoKHfvkAEA_gqyYYgGZVRMaoqze0"},
{"content":{"body":"I would expect, anyway","msgtype":"m.text"},"ts":1675818387744,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N49hA3Hcp6vhIDbycY684seSpfLxq84x6rnEExzz2JM"},
{"content":{"body":"Correct, and that's what the Hardened JS / SES repairs do to tame the override mistake (referring to installing a no-op setter)","msgtype":"m.text"},"ts":1675818388227,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_7V3Xn4598PLntpXkgLB5ifUXgHknZGWXnFHccbvQjs"},
{"content":{"body":" * Correct, and that's what the Hardened JS / SES repairs do to tame the override mistake (referring to installing a no-op setter)","m.new_content":{"body":"Correct, and that's what the Hardened JS / SES repairs do to tame the override mistake (referring to installing a no-op setter)","msgtype":"m.text"},"m.relates_to":{"event_id":"$_7V3Xn4598PLntpXkgLB5ifUXgHknZGWXnFHccbvQjs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675818427400,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hKoeg9MOdOfrwM_d2_2nW-ixW60SKOWDhyghIkkUItU"}
]