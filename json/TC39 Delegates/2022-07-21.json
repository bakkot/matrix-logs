[
{"content":{"body":"a downside of using a set-specific iterator method is that `union` _only_ needs iteration, and so it would maybe be nice if `set.union(array)` worked. but it also seems bad for `set.union` and `set.intersection` to iterate with different methods","format":"org.matrix.custom.html","formatted_body":"a downside of using a set-specific iterator method is that <code>union</code> <em>only</em> needs iteration, and so it would maybe be nice if <code>set.union(array)</code> worked. but it also seems bad for <code>set.union</code> and <code>set.intersection</code> to iterate with different methods","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a downside of using a set-specific iterator method is that `union` _only_ needs iteration, and so it would maybe be nice if `set.union(array)` worked. but it also seems bad for `set.union` and `set.intersection` to iterate with different methods","mimetype":"text/plain"},{"body":"a downside of using a set-specific iterator method is that <code>union</code> <em>only</em> needs iteration, and so it would maybe be nice if <code>set.union(array)</code> worked. but it also seems bad for <code>set.union</code> and <code>set.intersection</code> to iterate with different methods","mimetype":"text/html"}]},"ts":1658361734010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KLzG7mWi_olARMWR7NqUvpoDG4AN_N1xA4ZvXKNck8I"},
{"content":{"body":"I guess I would not terribly mind giving up on `set.union(array)` working, though","format":"org.matrix.custom.html","formatted_body":"I guess I would not terribly mind giving up on <code>set.union(array)</code> working, though","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess I would not terribly mind giving up on `set.union(array)` working, though","mimetype":"text/plain"},{"body":"I guess I would not terribly mind giving up on <code>set.union(array)</code> working, though","mimetype":"text/html"}]},"ts":1658361770834,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aVICgDsxnxyQw69iWnds6qwFPLrviNf_7P3NzMz6XV0"},
{"content":{"body":"There are other approaches to computing a set intersection that don't depend on calling `has` on `arg`, at the expense of space. ","format":"org.matrix.custom.html","formatted_body":"There are other approaches to computing a set intersection that don't depend on calling <code>has</code> on <code>arg</code>, at the expense of space.","msgtype":"m.text"},"ts":1658362727927,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TwGS958ziI38eEVI2kGDEHtYUZBpV8F55l6vnslFf90"},
{"content":{"body":"ljharb \"petty\" wasn’t the right word today, sorry.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> &quot;petty&quot; wasn’t the right word today, sorry.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb \"petty\" wasn’t the right word today, sorry.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> &quot;petty&quot; wasn’t the right word today, sorry.","mimetype":"text/html"}]},"ts":1658368313630,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-hZFhsdFtvCQlvSAGjwMDWLSgUJJnDGeQpfIiF5pFW0"},
{"content":{"body":"I’m still not sure what the right word is. It seemed like you’re saying don’t worry about the limitation to web browsers, it’s analogous to a sign that reads \"no stealing (except thieves)\". That just doesn’t seem to me like a good defense for the sign. But, again, at Agoric we’re satisfied that we can point to the meeting notes if it comes up again.","msgtype":"m.text","org.matrix.msc1767.text":"I’m still not sure what the right word is. It seemed like you’re saying don’t worry about the limitation to web browsers, it’s analogous to a sign that reads \"no stealing (except thieves)\". That just doesn’t seem to me like a good defense for the sign. But, again, at Agoric we’re satisfied that we can point to the meeting notes if it comes up again."},"ts":1658368555173,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wROfYzG3_5C__8ww4HS4HIQI5SY8fexYsYCbRD8UKUc"},
{"content":{"body":"One thing is certain, though: I picked the wrong word!","msgtype":"m.text","org.matrix.msc1767.text":"One thing is certain, though: I picked the wrong word!"},"ts":1658368610365,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$z7xkPnhyYrbezkkLAsmZxSeu3UM9XmYJtCApJUKjkz4"},
{"content":{"body":"tbh that’s a fine analogy if we can ignore the inherent negative connotation. someone is welcome to steal if they’re content with the associated label and all it implies.","msgtype":"m.text"},"ts":1658371208267,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ruV-uKJjUZIrkgGXhY7yquhdV4Hbs6v2Web3TLoBEb0"},
{"content":{"body":"anyones welcome to violate any spec they want as well, as long as they’re willing to give up on the label of complying with it ¯\\\\\\_(ツ)_/¯","format":"org.matrix.custom.html","formatted_body":"anyones welcome to violate any spec they want as well, as long as they’re willing to give up on the label of complying with it ¯\\_(ツ)_/¯","msgtype":"m.text"},"ts":1658371248415,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zn-Gdc2PkyHIaAUim4ohgW6KIf-DFYeovURj_d3_7LY"},
{"content":{"body":"does anyone know if the meetup today was recorded?","msgtype":"m.text","org.matrix.msc1767.text":"does anyone know if the meetup today was recorded?"},"ts":1658375445312,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ix7RW1yns2xwo1S1-gdGVR3b9HYnbkbSNEAJx6QhNRI"},
{"content":{"body":"The gmeet had a “recording” status on it, so possibly yes","msgtype":"m.text"},"ts":1658381004137,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$i4JX5YeHsnNuvS-_IdEAepmCsh_noj-PGF4mAk6wS1Y"},
{"content":{"body":"> <@aclaymore:matrix.org> The gmeet had a “recording” status on it, so possibly yes\n\nthe plenary was recorded?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i4JX5YeHsnNuvS-_IdEAepmCsh_noj-PGF4mAk6wS1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>The gmeet had a “recording” status on it, so possibly yes</blockquote></mx-reply>the plenary was recorded?","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$i4JX5YeHsnNuvS-_IdEAepmCsh_noj-PGF4mAk6wS1Y"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@aclaymore:matrix.org> The gmeet had a “recording” status on it, so possibly yes\n\nthe plenary was recorded?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i4JX5YeHsnNuvS-_IdEAepmCsh_noj-PGF4mAk6wS1Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>The gmeet had a “recording” status on it, so possibly yes</blockquote></mx-reply>the plenary was recorded?","mimetype":"text/html"}]},"ts":1658407214961,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$wd5amEt-u8epFssRnaIMJjCeivejkWpD0LPnVhKZ76U"},
{"content":{"body":"Sorry for the confusion. We were talking about the post plenary meet-up.","msgtype":"m.text"},"ts":1658409195857,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9D2DxAeeALyQNgLrAQaipoQu3wA9lOr9Din7cbgoYIA"},
{"content":{"body":"Keep seeing \"deiter updates\" and thinking, who's Deiter?","msgtype":"m.text"},"ts":1658419250661,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ASp68R_ITUG937vSHRAVc96frFvfkDX6sxAFHklHoYk"},
{"content":{"body":"De-iterator","msgtype":"m.text"},"ts":1658419450337,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$14YwGuUzgWBUF7XHAUokuMJXGH7L1QsswLAYn86ro8g"},
{"content":{"body":"From HE Shi-Jun  (hax)","format":"org.matrix.custom.html","formatted_body":"From <a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a> (hax)","msgtype":"m.text"},"ts":1658419473637,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$lxNph6b-dakzjzFKMKhPdvNtWc_B3up3bkJj5h_JdMQ"},
{"content":{"body":"Ashley Claymore: rbuckton: the best explainer for protocols right now is the presentation at https://docs.google.com/presentation/d/1HnxJl4Iodf3I23e-ZDkw4F1LEkMRGUBFq6xxR0a9a_k/edit#slide=id.g3e3a1a53c0_0_0","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the best explainer for protocols right now is the presentation at https://docs.google.com/presentation/d/1HnxJl4Iodf3I23e-ZDkw4F1LEkMRGUBFq6xxR0a9a_k/edit#slide=id.g3e3a1a53c0_0_0","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ashley Claymore: rbuckton: the best explainer for protocols right now is the presentation at https://docs.google.com/presentation/d/1HnxJl4Iodf3I23e-ZDkw4F1LEkMRGUBFq6xxR0a9a_k/edit#slide=id.g3e3a1a53c0_0_0","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the best explainer for protocols right now is the presentation at https://docs.google.com/presentation/d/1HnxJl4Iodf3I23e-ZDkw4F1LEkMRGUBFq6xxR0a9a_k/edit#slide=id.g3e3a1a53c0_0_0","mimetype":"text/html"}]},"ts":1658419560814,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KA4nKYWJ0EwdBzyYxiH443UObcDlLsoemr_4x8BNt_Q"},
{"content":{"body":"I'll work on providing better detailed documentation soon as I prepare for stage 2","msgtype":"m.text","org.matrix.msc1767.text":"I'll work on providing better detailed documentation soon as I prepare for stage 2"},"ts":1658419574497,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$szxF-YwGhHxLUR52eqoZKlh3cJf20ja6iR6fHnreHL8"},
{"content":{"body":"dieter: https://www.youtube.com/watch?v=rZMoGyr1BFU","msgtype":"m.text","org.matrix.msc1767.text":"dieter: https://www.youtube.com/watch?v=rZMoGyr1BFU"},"ts":1658419610673,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$T9nVTieeo7fcwQ6byf8xc9msQ5qcL-wcUz88nXMTnkM"},
{"content":{"body":"> <@rkirsling:matrix.org> Keep seeing \"deiter updates\" and thinking, who's Deiter?\n\nBecause double-ended queue is shorted to \"deque\", I use \"deiter\" as the abbr for double-ended iterator 😅","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ASp68R_ITUG937vSHRAVc96frFvfkDX6sxAFHklHoYk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>Keep seeing &quot;deiter updates&quot; and thinking, who&#39;s Deiter?</blockquote></mx-reply>Because double-ended queue is shorted to &quot;deque&quot;, I use &quot;deiter&quot; as the abbr for double-ended iterator 😅","m.relates_to":{"m.in_reply_to":{"event_id":"$ASp68R_ITUG937vSHRAVc96frFvfkDX6sxAFHklHoYk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rkirsling:matrix.org> Keep seeing \"deiter updates\" and thinking, who's Deiter?\n\nBecause double-ended queue is shorted to \"deque\", I use \"deiter\" as the abbr for double-ended iterator 😅","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ASp68R_ITUG937vSHRAVc96frFvfkDX6sxAFHklHoYk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rkirsling:matrix.org\">@rkirsling:matrix.org</a><br>Keep seeing &quot;deiter updates&quot; and thinking, who&#39;s Deiter?</blockquote></mx-reply>Because double-ended queue is shorted to &quot;deque&quot;, I use &quot;deiter&quot; as the abbr for double-ended iterator 😅","mimetype":"text/html"}]},"ts":1658421420212,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ouCA9zp4h1jiXO1WMTKXTVqSNFyp7jWf0FFlPdE7wbI"},
{"content":{"body":"what is `.indexed()`?","format":"org.matrix.custom.html","formatted_body":"what is <code>.indexed()</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what is `.indexed()`?","mimetype":"text/plain"},{"body":"what is <code>.indexed()</code>?","mimetype":"text/html"}]},"ts":1658423268743,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o1z51ucs1X-IfLXU3c3wxjV6hlh8LK89anfSAnjKeks"},
{"content":{"body":"oh i see","msgtype":"m.text","org.matrix.msc1767.text":"oh i see"},"ts":1658423279246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s3FgnZoAPTXwEbeNeI2X3Re4LIqaavcrKIjC0jzc3tA"},
{"content":{"body":"for those reading Matrix later: https://github.com/tc39/proposal-iterator-helpers#indexed","msgtype":"m.text","org.matrix.msc1767.text":"for those reading Matrix later: https://github.com/tc39/proposal-iterator-helpers#indexed"},"ts":1658423434597,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hf44mXT1AB1zHKL52ETFHipAwF8l8HD_6RjnwVs8PoU"},
{"content":{"body":"i wish we could just call it enumerate like every other language :(","msgtype":"m.text","org.matrix.msc1767.text":"i wish we could just call it enumerate like every other language :("},"ts":1658423535282,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WheG4h06fzC1CMAD8c-2Fsq6BBqnCQElTEZ7yEFkA98"},
{"content":{"body":"indexed is better than asIndexedPairs though ","msgtype":"m.text","org.matrix.msc1767.text":"indexed is better than asIndexedPairs though "},"ts":1658423604293,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TH4_ZxH81dMslmOpZnTt4tCvA0tkS5GncyiaRH4c1g8"},
{"content":{"body":"so i'm not complaining too much","msgtype":"m.text","org.matrix.msc1767.text":"so i'm not complaining too much"},"ts":1658423609208,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$RjLLjCR8RZU4wyCbvfGtOxLRaK6F8q34fPbc0JIHTBU"},
{"content":{"body":"otoh i would not have needed to ask the question if it was named `asIndexedPairs`!","format":"org.matrix.custom.html","formatted_body":"otoh i would not have needed to ask the question if it was named <code>asIndexedPairs</code>!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"otoh i would not have needed to ask the question if it was named `asIndexedPairs`!","mimetype":"text/plain"},{"body":"otoh i would not have needed to ask the question if it was named <code>asIndexedPairs</code>!","mimetype":"text/html"}]},"ts":1658423635944,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uZKSuJQR_jGedz_c0jTZ2WkLGEdRosCC_wEUJg-KMkY"},
{"content":{"body":"Call and raise `toIndexEntries`","format":"org.matrix.custom.html","formatted_body":"Call and raise <code>toIndexEntries</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Call and raise `toIndexEntries`","mimetype":"text/plain"},{"body":"Call and raise <code>toIndexEntries</code>","mimetype":"text/html"}]},"ts":1658423685076,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8we9CpyrQsYcaUWwnMnSTL_vgpVim-N9QJZ-W63Psq8"},
{"content":{"body":"I have no strong opinion but I'd be fine with including `Iterator.prototype.flat`","format":"org.matrix.custom.html","formatted_body":"I have no strong opinion but I'd be fine with including <code>Iterator.prototype.flat</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I have no strong opinion but I'd be fine with including `Iterator.prototype.flat`","mimetype":"text/plain"},{"body":"I have no strong opinion but I'd be fine with including <code>Iterator.prototype.flat</code>","mimetype":"text/html"}]},"ts":1658423713571,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ifUiz_lx9pzSMo4BdAr4oVMUoJBneLUd1yK2ww_EZuo"},
{"content":{"body":"(Never mind my bikesheddery joy. I’m fine with `indexed`.)","format":"org.matrix.custom.html","formatted_body":"(Never mind my bikesheddery joy. I’m fine with <code>indexed</code>.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Never mind my bikesheddery joy. I’m fine with `indexed`.)","mimetype":"text/plain"},{"body":"(Never mind my bikesheddery joy. I’m fine with <code>indexed</code>.)","mimetype":"text/html"}]},"ts":1658423729578,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xA-HxBsjP7Gz8YD_YV4G9HY3eXlez0nlXZLyuFN0gxU"},
{"content":{"body":"since it does make sense, as explained","msgtype":"m.text","org.matrix.msc1767.text":"since it does make sense, as explained"},"ts":1658423732325,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T0FirS0sdFj28Uo3E5BUZmJiz6rsQQdQ0fPPB6vT9t0"},
{"content":{"body":"No opinions from me either","msgtype":"m.text","org.matrix.msc1767.text":"No opinions from me either"},"ts":1658423785948,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$wQrCrkyaIg4876gTwnEuE1F_pNcN3fNJ_vFl0PHyuvk"},
{"content":{"body":" * No opinions from me either","m.new_content":{"body":"No opinions from me either","msgtype":"m.text","org.matrix.msc1767.text":"No opinions from me either"},"m.relates_to":{"event_id":"$wQrCrkyaIg4876gTwnEuE1F_pNcN3fNJ_vFl0PHyuvk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * No opinions from me either"},"ts":1658423795870,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$OPfyMZtvjpBieAUkjqhl_xaJTXIyUQuSxW9mhtfuh50"},
{"content":{"body":"oh I thought that flat/flatMap for iterator helpers was about iterators that yield arrays and such","msgtype":"m.text","org.matrix.msc1767.text":"oh I thought that flat/flatMap for iterator helpers was about iterators that yield arrays and such"},"ts":1658423893507,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_9wuudjlysQ6xs_iKoh1diyGHFiMw7Mze7oCi8y-uGM"},
{"content":{"body":"I can definitely see how flat is difficult if we want it to be for iterators of iterators","msgtype":"m.text","org.matrix.msc1767.text":"I can definitely see how flat is difficult if we want it to be for iterators of iterators"},"ts":1658423914045,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9Rcl9W-DcLU6UWL6882Fz02AG0k8mnb9i7fAhAsBGKk"},
{"content":{"body":"iterators that yield iterables, which includes arrays","msgtype":"m.text","org.matrix.msc1767.text":"iterators that yield iterables, which includes arrays"},"ts":1658423935372,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z09doj240-jOYNpKwufI8F_pfwMnFSOebTy6YrztZ1Q"},
{"content":{"body":" * iterators that yield iterables, which includes arrays","m.new_content":{"body":"iterators that yield iterables, which includes arrays","msgtype":"m.text","org.matrix.msc1767.text":"iterators that yield iterables, which includes arrays"},"m.relates_to":{"event_id":"$Z09doj240-jOYNpKwufI8F_pfwMnFSOebTy6YrztZ1Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * iterators that yield iterables, which includes arrays"},"ts":1658423938690,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9CwPv67XsQJuNhn2GaJrOq0iJBkLmG1Dh0G21gzbH0Y"},
{"content":{"body":"right","msgtype":"m.text","org.matrix.msc1767.text":"right"},"ts":1658423939153,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ra2LK5zrocD3wXPL0zUSEg1PTykkhM5HxKTXl1ZTAfM"},
{"content":{"body":"this explanation makes me want to omit flat, yes","msgtype":"m.text","org.matrix.msc1767.text":"this explanation makes me want to omit flat, yes"},"ts":1658423946369,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0j4CHHq9I7vSpRf_-FOA-Ce7uxhznRKZW6k7QOVvlbw"},
{"content":{"body":"Interesting. C#'s linq/Enumerable provides an index, which is quite useful ","msgtype":"m.text","org.matrix.msc1767.text":"Interesting. C#'s linq/Enumerable provides an index, which is quite useful "},"ts":1658424036801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EXbf1ZtIHuhj-yfyqiSouIdUpoDsGDg1Po-FS-oE2Bs"},
{"content":{"body":"I found the argument compelling that you should use `indexed` and not rely on the `index` arg of `map` callbacks &c.","format":"org.matrix.custom.html","formatted_body":"I found the argument compelling that you should use <code>indexed</code> and not rely on the <code>index</code> arg of <code>map</code> callbacks &amp;c.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I found the argument compelling that you should use `indexed` and not rely on the `index` arg of `map` callbacks &c.","mimetype":"text/plain"},{"body":"I found the argument compelling that you should use <code>indexed</code> and not rely on the <code>index</code> arg of <code>map</code> callbacks &amp;c.","mimetype":"text/html"}]},"ts":1658424217873,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H7upswYol1AGUU4i3Q2LiR4C98AJhAPHbqD0MjZ4RdU"},
{"content":{"body":"I guess I am not super opposed to passing `index`. I am worried people will get confused but also some people will definitely get utility from it, so /shrug","format":"org.matrix.custom.html","formatted_body":"I guess I am not super opposed to passing <code>index</code>. I am worried people will get confused but also some people will definitely get utility from it, so /shrug","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess I am not super opposed to passing `index`. I am worried people will get confused but also some people will definitely get utility from it, so /shrug","mimetype":"text/plain"},{"body":"I guess I am not super opposed to passing <code>index</code>. I am worried people will get confused but also some people will definitely get utility from it, so /shrug","mimetype":"text/html"}]},"ts":1658424795054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6SyLhylLiuXJ5ubv8WAVFKYw-7C8F9MlvuCGhgZiR9Q"},
{"content":{"body":"i am opposed to it","msgtype":"m.text","org.matrix.msc1767.text":"i am opposed to it"},"ts":1658424825855,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2yb7dRWeytIFMDncYjy5FD5qwKvSOCLSlgY8KKKmyiw"},
{"content":{"body":"for same reasons as mficarra?","msgtype":"m.text","org.matrix.msc1767.text":"for same reasons as mficarra?"},"ts":1658424841540,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jrhHBy4SF58bDBN7cb6V59oUTKreZE6qwkNjmX2mr9Q"},
{"content":{"body":"the original reasoning is that we explicitly force you to consider when you are introducing the counter which starts from 0","msgtype":"m.text","org.matrix.msc1767.text":"the original reasoning is that we explicitly force you to consider when you are introducing the counter which starts from 0"},"ts":1658424844170,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$j1JNczQmzDzte3cMLs0i_aj_5B8JgeUpMV9moKHrWzw"},
{"content":{"body":"i don't really see the harm","msgtype":"m.text","org.matrix.msc1767.text":"i don't really see the harm"},"ts":1658424847456,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ffolV8Y3e8d6iwbNqyabbAhtFbeaVnJZNknJqhpjUDg"},
{"content":{"body":"why is that a good thing to force?","msgtype":"m.text","org.matrix.msc1767.text":"why is that a good thing to force?"},"ts":1658424856640,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FOJFOBln4hbDN0R0MhvbE828-D_ZrGpgqqMoHM4IwZU"},
{"content":{"body":"My concern about dropping `index` is theefold: \n1. Migrating code that uses `Array.prototype.map` to `Iterator.prototype.map` requires reaching for something new and refactoring your code to accept an array pair. \n2. Reusing existing named functions as callbacks requires them to either be polymorphic or the need to wrap the callback in an arrow to set the correct parameters.\n3. Reaching for an index requires allocating an array pair for *every* element, as opposed to a single number passed as an extra argument.","format":"org.matrix.custom.html","formatted_body":"<p>My concern about dropping <code>index</code> is theefold:</p>\n<ol>\n<li>Migrating code that uses <code>Array.prototype.map</code> to <code>Iterator.prototype.map</code> requires reaching for something new and refactoring your code to accept an array pair.</li>\n<li>Reusing existing named functions as callbacks requires them to either be polymorphic or the need to wrap the callback in an arrow to set the correct parameters.</li>\n<li>Reaching for an index requires allocating an array pair for <em>every</em> element, as opposed to a single number passed as an extra argument.</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My concern about dropping `index` is theefold: \n1. Migrating code that uses `Array.prototype.map` to `Iterator.prototype.map` requires reaching for something new and refactoring your code to accept an array pair. \n2. Reusing existing named functions as callbacks requires them to either be polymorphic or the need to wrap the callback in an arrow to set the correct parameters.\n3. Reaching for an index requires allocating an array pair for *every* element, as opposed to a single number passed as an extra argument.","mimetype":"text/plain"},{"body":"<p>My concern about dropping <code>index</code> is theefold:</p>\n<ol>\n<li>Migrating code that uses <code>Array.prototype.map</code> to <code>Iterator.prototype.map</code> requires reaching for something new and refactoring your code to accept an array pair.</li>\n<li>Reusing existing named functions as callbacks requires them to either be polymorphic or the need to wrap the callback in an arrow to set the correct parameters.</li>\n<li>Reaching for an index requires allocating an array pair for <em>every</em> element, as opposed to a single number passed as an extra argument.</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658424874590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Adhr1F8gvN9kLiHB0a3bJZGUQXXKrP6M4ZuCnMVOJhQ"}
]