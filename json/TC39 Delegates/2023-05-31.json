[
{"content":{"body":"it could have worked but I got some private feedback from a few (and public feedback from one) that it wouldn't work out","m.relates_to":{"event_id":"$_XeWv8kqea-JR8K_XBJdM_CcQ7TdRXsQM9rwwj0oUHk","is_falling_back":true,"m.in_reply_to":{"event_id":"$AxCy5ViJZUySx5clM5DCDajukDw08Iqg_6bpsSMQfSk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1685517533181,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$28YKTRqC_oE_wMBsRk933DFXv_fGPtUWGW8GR6zmbbs"},
{"content":{"body":"> <@michaelficarra:matrix.org> the 19th is a federal holiday in the US and the rest of that week is PLDI, so these options are not great...\n\nI can add some more options.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NT0H1F8EUqvGmMjk66FJMadCjstAxv7um9zdQpV7iUk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>the 19th is a federal holiday in the US and the rest of that week is PLDI, so these options are not great...</blockquote></mx-reply>I can add some more options.","m.relates_to":{"event_id":"$_XeWv8kqea-JR8K_XBJdM_CcQ7TdRXsQM9rwwj0oUHk","is_falling_back":false,"m.in_reply_to":{"event_id":"$NT0H1F8EUqvGmMjk66FJMadCjstAxv7um9zdQpV7iUk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1685517563974,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$jLE8_1Zem11S8PbYJhx0J537poO2jr__GaG0VRJu5m0"},
{"content":{"body":"options added","m.relates_to":{"event_id":"$_XeWv8kqea-JR8K_XBJdM_CcQ7TdRXsQM9rwwj0oUHk","is_falling_back":true,"m.in_reply_to":{"event_id":"$jLE8_1Zem11S8PbYJhx0J537poO2jr__GaG0VRJu5m0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1685518138239,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$_uCpPMmtolRNLHydFSb6_lnP4S2cp3WRAE3e3H3VPSk"},
{"content":{"body":"so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n\nkeeping in mind that `Math.min`/`max` work like the second option","format":"org.matrix.custom.html","formatted_body":"<p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n","msgtype":"m.text"},"ts":1685572178385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r0NPdPIq2-64hT3dhulCwyG8Lx7KvRHfEdhSLhgWA6E"},
{"content":{"body":" * so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emojis","format":"org.matrix.custom.html","formatted_body":" * <p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emojis</p>\n","m.new_content":{"body":"so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emojis","format":"org.matrix.custom.html","formatted_body":"<p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emojis</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$r0NPdPIq2-64hT3dhulCwyG8Lx7KvRHfEdhSLhgWA6E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685572210728,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xOPAz80e0rJ2xFpYot-ORRgZ3sP_McfAd5cwugfbi1U"},
{"content":{"body":" * so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emoji reacts","format":"org.matrix.custom.html","formatted_body":" * <p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emoji reacts</p>\n","m.new_content":{"body":"so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emoji reacts","format":"org.matrix.custom.html","formatted_body":"<p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emoji reacts</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$r0NPdPIq2-64hT3dhulCwyG8Lx7KvRHfEdhSLhgWA6E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685572217127,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FWUoDVBc5-Su_i3vsv7ybddjqOkNlqvWomF1LBYJu68"},
{"content":{"body":"`Math.sum(...iterable)` seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for `Math.min(...array)`.","format":"org.matrix.custom.html","formatted_body":"<code>Math.sum(...iterable)</code> seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for <code>Math.min(...array)</code>.","msgtype":"m.text"},"ts":1685574443096,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$7-VgJSvjKkbgW0jkFZhESo_IaIR3bIl9p1Jl3dG09-Y"},
{"content":{"body":" * `Math.sum(...iterable)` seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for `Math.min/max(...array)`.","format":"org.matrix.custom.html","formatted_body":" * <code>Math.sum(...iterable)</code> seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for <code>Math.min/max(...array)</code>.","m.new_content":{"body":"`Math.sum(...iterable)` seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for `Math.min/max(...array)`.","format":"org.matrix.custom.html","formatted_body":"<code>Math.sum(...iterable)</code> seems like a reasonable way to implement 1 using 2. SpiderMonkey already has special handling for <code>Math.min/max(...array)</code>.","msgtype":"m.text"},"m.relates_to":{"event_id":"$7-VgJSvjKkbgW0jkFZhESo_IaIR3bIl9p1Jl3dG09-Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685574450728,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$fW0vgIa90EA4PXK_j5V3hEGCBFPmSfgZsfM5pRizECk"},
{"content":{"body":"iain: unfortunately no engine I have on hand is able to handle `Math.max(...iterable)` when iterable has more than ~100k elements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: unfortunately no engine I have on hand is able to handle <code>Math.max(...iterable)</code> when iterable has more than ~100k elements","msgtype":"m.text"},"ts":1685574601544,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O4n321td2gIWG0Nf_7QNy5ombq6lu7yZ45ER4QqOVRU"},
{"content":{"body":"Ah, fair enough","msgtype":"m.text"},"ts":1685574680799,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$k-RjqUdZg44sHfND69kqZg5C3lHy3eSkcHHHGos0BNs"},
{"content":{"body":" * iain: unfortunately no engine I have on hand is able to handle `Math.max(...iterable)` when iterable has more than ~70k elements","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: unfortunately no engine I have on hand is able to handle <code>Math.max(...iterable)</code> when iterable has more than ~70k elements","m.new_content":{"body":"iain: unfortunately no engine I have on hand is able to handle `Math.max(...iterable)` when iterable has more than ~70k elements","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@iain:mozilla.org\">iain</a>: unfortunately no engine I have on hand is able to handle <code>Math.max(...iterable)</code> when iterable has more than ~70k elements","msgtype":"m.text"},"m.relates_to":{"event_id":"$O4n321td2gIWG0Nf_7QNy5ombq6lu7yZ45ER4QqOVRU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685574700220,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ey598UudbZcdfgpbOLNud_HGF49gr0pBiLz-joOQ-F8"},
{"content":{"body":"which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) and because I don't know those limits offhand I would not be willing to use the `...iterable` version with any array whose length is not very strictly bounded","format":"org.matrix.custom.html","formatted_body":"which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) and because I don't know those limits offhand I would not be willing to use the <code>...iterable</code> version with any array whose length is not very strictly bounded","msgtype":"m.text"},"ts":1685574751923,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aYd-doC0Ld2jOkCD7978YxVyt-Rxt5gKsXTnYY0qtOY"},
{"content":{"body":" * which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) because I don't know those limits offhand I would not be willing to use the `...iterable` version with any array whose length is not very strictly bounded","format":"org.matrix.custom.html","formatted_body":" * which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) because I don't know those limits offhand I would not be willing to use the <code>...iterable</code> version with any array whose length is not very strictly bounded","m.new_content":{"body":"which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) because I don't know those limits offhand I would not be willing to use the `...iterable` version with any array whose length is not very strictly bounded","format":"org.matrix.custom.html","formatted_body":"which, a.) sometimes I do in fact have arrays with more than 100k elements and b.) because I don't know those limits offhand I would not be willing to use the <code>...iterable</code> version with any array whose length is not very strictly bounded","msgtype":"m.text"},"m.relates_to":{"event_id":"$aYd-doC0Ld2jOkCD7978YxVyt-Rxt5gKsXTnYY0qtOY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685574761912,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8N7CCFBAhVIMEvnQDOKMLvcv2Au1EodNX5SMjKsa1hI"},
{"content":{"body":" * so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emoji reacts [note they may be out of order because Element displays the most popular ones first]","format":"org.matrix.custom.html","formatted_body":" * <p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emoji reacts [note they may be out of order because Element displays the most popular ones first]</p>\n","m.new_content":{"body":"so if we were going to add a `Math.sum`, should it\n\n1. take a single iterable argument and add its elements, or\n2. take a variable number of arguments and add them all together?\n3. we should pick a different name to avoid this problem (`Math.sumFrom`?)\n\nkeeping in mind that `Math.min`/`max` work like the second option\n\nplz vote with emoji reacts [note they may be out of order because Element displays the most popular ones first]","format":"org.matrix.custom.html","formatted_body":"<p>so if we were going to add a <code>Math.sum</code>, should it</p>\n<ol>\n<li>take a single iterable argument and add its elements, or</li>\n<li>take a variable number of arguments and add them all together?</li>\n<li>we should pick a different name to avoid this problem (<code>Math.sumFrom</code>?)</li>\n</ol>\n<p>keeping in mind that <code>Math.min</code>/<code>max</code> work like the second option</p>\n<p>plz vote with emoji reacts [note they may be out of order because Element displays the most popular ones first]</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$r0NPdPIq2-64hT3dhulCwyG8Lx7KvRHfEdhSLhgWA6E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685574799069,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vT6uBMn9kJWGRVh7A6vS0NQc-LkVau78JS4u014BEHg"},
{"content":{"body":"Yeah I'm sad about that. I mean, I like both at the same time - take a variable number of numbers-or-iterators, and sum all of them","msgtype":"m.text"},"ts":1685576230075,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$D0dmkmjU5WJAn59sWgopqkPS3seOxVoNNOLhGssU-6k"},
{"content":{"body":"aka flatten the arguments array and then sum the result","msgtype":"m.text"},"ts":1685576246674,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$823iWRtUV6mPvcRum5stG_A06Fi6A8XqcPfgMUQgUDk"},
{"content":{"body":"I’ve had the same problem with `splice`.","format":"org.matrix.custom.html","formatted_body":"I’ve had the same problem with <code>splice</code>.","msgtype":"m.text"},"ts":1685576326487,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zQJn-XzoaHJnShIEopKxYJfciba1MRr7EpQ0RDgr8KI"},
{"content":{"body":"Not that I’m suggesting that we add `Array.prototype.swap` or `Array.prototype.patch`, but","format":"org.matrix.custom.html","formatted_body":"Not that I’m suggesting that we add <code>Array.prototype.swap</code> or <code>Array.prototype.patch</code>, but","msgtype":"m.text"},"ts":1685576367330,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OvC9n3fytLAItSx0n_qVQhm36GDYus3Rb1NJl04rWCo"},
{"content":{"body":"I'll say that in most cases I find it a little annoying if something *only* takes an iterable versus taking N arguments, because when I'm hand-authoring I have to remember to add a wrapper. But for sum() it's not really a deal; if I'm invoking on some varaibles directly I can just... add them together instead.","format":"org.matrix.custom.html","formatted_body":"I'll say that in most cases I find it a little annoying if something <em>only</em> takes an iterable versus taking N arguments, because when I'm hand-authoring I have to remember to add a wrapper. But for sum() it's not really a deal; if I'm invoking on some varaibles directly I can just... add them together instead.","msgtype":"m.text"},"ts":1685576397299,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$-5sNc3ZBNDfjBQHua7kvmYmi2mUTQqt1xHH0cO-cyLk"},
{"content":{"body":"The other issue with taking a single iterable is when you have two iterables. JS doesn't have built-in chain to make that work.","msgtype":"m.text"},"ts":1685576452578,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$oYAGaqYY4VHGGuNjKj8lBlWvKyWgeKBE9CeEdiYxSI8"},
{"content":{"body":"if only we'd thought to make `Math.max` throw if you passed it something non-primitive with a `Symbol.iterator` property...","format":"org.matrix.custom.html","formatted_body":"if only we'd thought to make <code>Math.max</code> throw if you passed it something non-primitive with a <code>Symbol.iterator</code> property...","msgtype":"m.text"},"ts":1685576454030,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BmXReKEXaayl4q59SBxsDI9ZhHmJ34oI5t5Rlxi7kSU"},
{"content":{"body":"While argument spread handles it automatically","msgtype":"m.text"},"ts":1685576462153,"senderName":"TabAtkins","senderId":"@tabatkins:matrix.org","id":"$tnD6WuJ-4TJ2utGyIpnq4OHTjuwDMN26abApFZmq6ss"},
{"content":{"body":"> JS doesn't have built-in chain to make that work\n\nsoon! `Iterator.from([iter1, iter2]).flatMap(x => x)`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>JS doesn't have built-in chain to make that work</p>\n</blockquote>\n<p>soon! <code>Iterator.from([iter1, iter2]).flatMap(x =&gt; x)</code></p>\n","msgtype":"m.text"},"ts":1685576504658,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$w2kVSAJh9XumUk0RIt5EbQiEHYjfB13MfKTPBSqHEt0"},
{"content":{"body":"honestly that is making me want `Iterator.of`","format":"org.matrix.custom.html","formatted_body":"honestly that is making me want <code>Iterator.of</code>","msgtype":"m.text"},"ts":1685576542927,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Bcw_XUgt9rrmkCRGHrATzwc3ibDqDNUcrG455Qoom8U"},
{"content":{"body":"we should have that too","msgtype":"m.text"},"ts":1685576545229,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YZmjnKzUoULGAA2NOFoCPsBnQ-RTSacbnOwKW5apx-Q"},
{"content":{"body":"really the problem here is coercing","msgtype":"m.text"},"ts":1685576690720,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_LXDXITg1XYo48rpw5xzHeOtbC53zvZx826mWhL_mi8"},
{"content":{"body":"we should stop coercing things","msgtype":"m.text"},"ts":1685576693454,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kI4djkY_QfML105dyZNIYP0tuPdtohzOLPbinKJy2D4"}
]