[
{"content":{"body":"woo-ow","m.mentions":{},"msgtype":"m.text"},"ts":1712797473408,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$CvO5WtC-mLwGFB0VeP14vJF_g5HTGKEZPi_T4SnDAZs"},
{"content":{"body":"that example Waldemar found is pretty epic","m.mentions":{},"msgtype":"m.text"},"ts":1712797484073,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$QjKUN7W5HHpybCI9_3Bu0HCnHwp8bF46OjCNkiOCBH0"},
{"content":{"body":"what example?","m.mentions":{},"msgtype":"m.text"},"ts":1712797496958,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$STZHF4p2B--drT_QC9RJKIC4YUWk4746NVZ7HWVjZtE"},
{"content":{"body":"https://github.com/tc39/proposal-pattern-matching/issues/323, at the end of the link","m.mentions":{},"msgtype":"m.text"},"ts":1712797534532,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$ZxL6Rpjp56rNIK0IGjN1_hV0OsEX46J0XodS6jfdLJE"},
{"content":{"body":"keywords are terrifying","m.mentions":{},"msgtype":"m.text"},"ts":1712797583815,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$PCzf3JSBX-eYaj9VVrcv6PbOn6Gbv8kpW9ic4Mxxzgs"},
{"content":{"body":" * contextual keywords are terrifying","m.mentions":{},"m.new_content":{"body":"contextual keywords are terrifying","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PCzf3JSBX-eYaj9VVrcv6PbOn6Gbv8kpW9ic4Mxxzgs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712797624687,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$K-qZbVF0N4_zLFpopcf0K7O0HDsUgXHkURNyrZMNGKs"},
{"content":{"body":"@rbuckton:matrix.org Have you considered `.` for discard bindings before? It‚Äôs visually insigificant, isn‚Äôt an identifier, and can‚Äôt be used in any place that makes discard bindings useful.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton</a> Have you considered <code data-md=\"`\">.</code> for discard bindings before? It‚Äôs visually insigificant, isn‚Äôt an identifier, and can‚Äôt be used in any place that makes discard bindings useful.","msgtype":"m.text"},"ts":1712801089901,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZGcoXij97faSvCVp3EvlUemLGCNqUZaaapdJS_T_ooc"},
{"content":{"body":"It might be _too_ visually small.","format":"org.matrix.custom.html","formatted_body":"It might be <i data-md=\"_\">too</i> visually small.","msgtype":"m.text"},"ts":1712801117723,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5JVuurZirBQvhrMzsP9r0RfF8bmiu6Plvu0UI9t34v0"},
{"content":{"body":"That, and too easy to confuse for a property access.","m.mentions":{},"msgtype":"m.text"},"ts":1712801180138,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nfZNIui9kN5mfEz8mvD-ytRMgTpTLhZJ-MendGpuJvM"},
{"content":{"body":"How would you confuse it for propery access?","msgtype":"m.text"},"ts":1712801977017,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eHaMdnH5D8J40RZR4Vv1mse2boTa2vzEQSSk3yRFyu8"},
{"content":{"body":"There‚Äôs no preceding object","msgtype":"m.text"},"ts":1712801989685,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jMmFaXqkRpcIQyidTqQ0YVP8SjGvkYiLHy-RicO3PrU"},
{"content":{"body":"it could theoretically be mixed with `and`, `or`, or `not` in pattern matching, though that's not exactly practical.","format":"org.matrix.custom.html","formatted_body":"it could theoretically be mixed with <code>and</code>, <code>or</code>, or <code>not</code> in pattern matching, though that's not exactly practical.","m.mentions":{},"msgtype":"m.text"},"ts":1712804544783,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hCwE_uxt4rYqeLB1au9dbn-Hgha7oVvs4qy-7SYixDE"},
{"content":{"body":"for (using is of and [not/a+\"/g]; b++; [/\"/g, 5])","msgtype":"m.text"},"ts":1712831080737,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$j9_IJTRn9n1Fwgd7nlDfMVo3ph7aNGhrMnwzPTUMFvY"},
{"content":{"body":"how Waldemar find this","msgtype":"m.text"},"ts":1712831107175,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QhzXtPf8fRYNsUNhzhuvUZ3L-qYGrFq-uAfG_PE166A"},
{"content":{"body":"üò® real insight ","msgtype":"m.text"},"ts":1712831178638,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RliDTKyN8RY46JWXpZ9IpnTo75g4-tTy8DnuJz184WA"},
{"content":{"body":"```\nfor (using is of and [not/a+\"/g]; b++; [/\"/g, 5])\n\nFirst parse\nfor (using x of ...) {}\n    keyword using\n    Identifier is\n    keyword of\n    Expression [not/a+\"/g]; b++; [/\"/g, 5]\n        ArrayExpression [\n            Element not/a+\"/g]; b++; [/\"/g\n                Division not/a\n                Plus +\n                Division \"/g]; b++; [/\"/g\n                    Left \"/g]; b++; [/\"\n                    Right g\n            Element 5\n        ]\n\nSecond parse\nfor (a; b; c)\nFirstPart\n    PatternMatching\n        Identifier using\n        Keyword is\n        Pattern\n            IdentifierPattern of\n            Keyword and\n            ArrayPatter []\n                Keyword not\n                RegExpPattern /a+\"/g\nSecondPart b++\nThirdPart [/\"/g, 5]\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>for (using is of and [not/a+\"/g]; b++; [/\"/g, 5])\n\nFirst parse\nfor (using x of ...) {}\n    keyword using\n    Identifier is\n    keyword of\n    Expression [not/a+\"/g]; b++; [/\"/g, 5]\n        ArrayExpression [\n            Element not/a+\"/g]; b++; [/\"/g\n                Division not/a\n                Plus +\n                Division \"/g]; b++; [/\"/g\n                    Left \"/g]; b++; [/\"\n                    Right g\n            Element 5\n        ]\n\nSecond parse\nfor (a; b; c)\nFirstPart\n    PatternMatching\n        Identifier using\n        Keyword is\n        Pattern\n            IdentifierPattern of\n            Keyword and\n            ArrayPatter []\n                Keyword not\n                RegExpPattern /a+\"/g\nSecondPart b++\nThirdPart [/\"/g, 5]\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712832612222,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$K0rEbITqtuKel6w79pOoTqUI7DLnI5_7AEtz2PIs_XQ"},
{"content":{"body":"Anything involving regexp literals is suspect","msgtype":"m.text"},"ts":1712832783875,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v8B-vhr_bhWTTia8yKpc7xTQoFxlAtyTGPDjZbfvmtY"},
{"content":{"body":"but it's a real ambiguous example ","msgtype":"m.text"},"ts":1712833398119,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$EaEyrHwjmj4b3IcgX1L_83wq7EgEe4wyaw7bJo_RvOk"},
{"content":{"body":"both interpretations are legal ","msgtype":"m.text"},"ts":1712833409793,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$VaciKizYJamj1izASRElw9ZlJsZxSoYBUx7X7RlfReM"},
{"content":{"body":"the authors' copy of the soon-to-be RFC 9557 üéâ\n\nhttps://www.rfc-editor.org/authors/rfc9557.html","m.mentions":{},"msgtype":"m.text"},"ts":1712840985480,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Ufhrx8DRJHFgk3mjAFy_aheX4ulKc49ge20Ov_95Ssk"},
{"content":{"body":"> <@usharma:igalia.com> the authors' copy of the soon-to-be RFC 9557 üéâ\n> \n> https://www.rfc-editor.org/authors/rfc9557.html\n\nWow! The extension if ISO 8601 with custom timezone and calendar syntax has an RFC number!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ufhrx8DRJHFgk3mjAFy_aheX4ulKc49ge20Ov_95Ssk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@usharma:igalia.com\">@usharma:igalia.com</a><br>the authors&#39; copy of the soon-to-be RFC 9557 üéâ<br/><br/>https://www.rfc-editor.org/authors/rfc9557.html</blockquote></mx-reply>Wow! The extension if ISO 8601 with custom timezone and calendar syntax has an RFC number!","m.mentions":{"user_ids":["@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ufhrx8DRJHFgk3mjAFy_aheX4ulKc49ge20Ov_95Ssk"}},"msgtype":"m.text"},"ts":1712842158857,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_um5LG43mPCT_AtH3Tt9pKD1KW5qenrURI4muU-JAbE"},
{"content":{"body":"Does anyone else fill out the sign-in form every day because they didn't save the Webex link?","m.mentions":{},"msgtype":"m.text"},"ts":1712843678304,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$JKxODcxGY7oGMmKqgnTsgau1inPp_epDtWb73iEogZE"},
{"content":{"body":" * Does anyone else fill out the sign-in form every day because they didn't save the Webex link? lol","m.mentions":{},"m.new_content":{"body":"Does anyone else fill out the sign-in form every day because they didn't save the Webex link? lol","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JKxODcxGY7oGMmKqgnTsgau1inPp_epDtWb73iEogZE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712843688099,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CPYzpBEsvh2TRpAeyRCBZhHSvjA0X5M-olBwsYqNLso"},
{"content":{"body":"starting real soon folks!","m.mentions":{},"msgtype":"m.text"},"ts":1712843920761,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$QFnPc9wgOd29p85HvI8DAnyz1wH8AmyaX0jnGGh3QTU"},
{"content":{"body":"we lost Nicolo as a notes helper.  if someone else here could volunteer to help, even just for this topic, that would really help us out.  chair group is trying to help w/ notes (as we often do), but also have to juggle other things.  thank you üôè","m.mentions":{},"msgtype":"m.text"},"ts":1712846251612,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$yZi3USJsXFeuW9IR_SegWcCm9ukuX02rKGdIHlDqua4"},
{"content":{"body":"it's easier during the presentation, and a little more work during discussion","m.mentions":{},"msgtype":"m.text"},"ts":1712846287926,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$J9vKoJH7y9KTWRZ_prh49ee3b1ll62IRrLsd3CvIlR4"},
{"content":{"body":"> <@jackworks:matrix.org> for (using is of and [not/a+\"/g]; b++; [/\"/g, 5])\n\nIt's just like old `for (async of () => {}` issue, maybe worse?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$j9_IJTRn9n1Fwgd7nlDfMVo3ph7aNGhrMnwzPTUMFvY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>for (using is of and [not/a+&quot;/g]; b++; [/&quot;/g, 5])</blockquote></mx-reply>It's just like old <code>for (async of () =&gt; {}</code> issue, maybe worse?","m.mentions":{"user_ids":["@jackworks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$j9_IJTRn9n1Fwgd7nlDfMVo3ph7aNGhrMnwzPTUMFvY"}},"msgtype":"m.text"},"ts":1712846763925,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$pK5Vv-noXRQ6AL1T8zMNOuT-5xsu5xoXZ261v1uVk4U"},
{"content":{"body":"saminahusain: It'd be great if Ecma could facilitate getting TC39 the relevant ISO/IEEE specs. This is a technical barrier for us in this proposal, as it was in the development of Temporal (with the relationship with ISO 8601)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@saminahusain:matrix.org\">saminahusain</a>: It'd be great if Ecma could facilitate getting TC39 the relevant ISO/IEEE specs. This is a technical barrier for us in this proposal, as it was in the development of Temporal (with the relationship with ISO 8601)","m.mentions":{"user_ids":["@saminahusain:matrix.org"]},"msgtype":"m.text"},"ts":1712846970439,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UAyoOta0CZA0sutgPslwIa_1SMQRRIC4ZWPZLUJ4VUM"},
{"content":{"body":"> <@softwarechris:matrix.org> sent a file.\n\n‚òùÔ∏è","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6PY5ll8qmQObtwipVmk95tccIfLyVSZhTKeO0qZp24M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>sent a file.</blockquote></mx-reply>‚òùÔ∏è","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$6PY5ll8qmQObtwipVmk95tccIfLyVSZhTKeO0qZp24M"}},"msgtype":"m.text"},"ts":1712847273291,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$d3NRVblGxjXPyqghgnA2GO5lV9E_KTDxrJv1t1VDfjw"},
{"content":{"body":"What's TLS?","m.mentions":{},"msgtype":"m.text"},"ts":1712849350719,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$XGJVr8vOjFha7ljI6Ol-skbXEJqF6b5AtS-D4kdryZE"},
{"content":{"body":"ljharb: no `class extends sharedStruct {}` won't work, for the reasons shu is discussing now, as well as that it has too many rough edges. You can't add new public or private fields in a subclass of a shared struct as it would violate the fixed layout. Plus we can't correlate a class prototype across realms.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: no <code>class extends sharedStruct {}</code> won't work, for the reasons shu is discussing now, as well as that it has too many rough edges. You can't add new public or private fields in a subclass of a shared struct as it would violate the fixed layout. Plus we can't correlate a class prototype across realms.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1712849366626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$v_bgBOdV7V1KL4BVl-dKFRYrkEj_JOgF3qTgN6c815w"},
{"content":{"body":"thread-local storage","m.mentions":{},"msgtype":"m.text"},"ts":1712849369233,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FBp4JPnx9f1k3DJ3v3adsBbdHG2OUoY_uz43CI30PR4"},
{"content":{"body":" * TLS: thread-local storage","m.mentions":{},"m.new_content":{"body":"TLS: thread-local storage","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FBp4JPnx9f1k3DJ3v3adsBbdHG2OUoY_uz43CI30PR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849377348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VJzKO4RRlDDyENn3X7OxWNdejQOBunzXF91buIhZfo4"},
{"content":{"body":"Though he really means \"Realm-local storage\"","m.mentions":{},"msgtype":"m.text"},"ts":1712849394384,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fH3BW7MqirYG1UA-Lqb7C5dMb-NHKaiRSiheOcXYV_E"},
{"content":{"body":"the instance would still be sealed ofc","m.mentions":{},"msgtype":"m.text"},"ts":1712849396506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UUA9NsXfUVnPGEm_5WtypNvomSIjghoKZZUxh5md_Lo"},
{"content":{"body":"and it has the same problem of correlation, but it seems a better way to correlate to me than a \"boxed primitive\"-like hand wavy mechanism","m.mentions":{},"msgtype":"m.text"},"ts":1712849425084,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$i4Yb1a-w7dKGAaZuEEaBgVtIhXdB4dboqn-beKeIs4M"},
{"content":{"body":"> <@ljharb:matrix.org> the instance would still be sealed ofc\n\nThe prototype would not be correlated.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UUA9NsXfUVnPGEm_5WtypNvomSIjghoKZZUxh5md_Lo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the instance would still be sealed ofc</blockquote></mx-reply>The prototype would not be correlated.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UUA9NsXfUVnPGEm_5WtypNvomSIjghoKZZUxh5md_Lo"}},"msgtype":"m.text"},"ts":1712849450732,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hCVaqjAUdlPRun9gnXGaAdKqzLkuLF8vKI3uRlvyMwg"},
{"content":{"body":"this also reminds me of yaml class marshalling attack vectors in ruby, for some reason","m.mentions":{},"msgtype":"m.text"},"ts":1712849464080,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_voGGC6HjwQLEHTaNpFm4IKcZhMCiTvLzpiTfGY6MyA"},
{"content":{"body":"You are misunderstanding correlation, I think. We're talking about ensuring the same struct type defined in the same file and loaded into two different realms/threads/agents will have same methods.","m.mentions":{},"msgtype":"m.text"},"ts":1712849503902,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sWtg92AnZrQ3wlbU8RnRYnBeSx9G0IkvvebBWALD0Ug"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1712849513794,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dr6nKioAjHgtgiuhAeuj6puRiKBA3Y2lgBtISW9ZFz4"},
{"content":{"body":"i'm suggesting that you make a class with methods, and extend the struct, and then the \"automatic\" part would be reloading that same class code in each place","m.mentions":{},"msgtype":"m.text"},"ts":1712849535604,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9wXc1z5TTG0lL3UTU61iu87hKJ94tZq4UUfqylUajVc"},
{"content":{"body":"We can't correlate a class prototype, because classes and class prototypes aren't correlated across threads. We can correlate a struct definition and prototype.","m.mentions":{},"msgtype":"m.text"},"ts":1712849540801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1oYwSKbHq0QT0n06zCtKKsC96JmrNhs8q6gsRGJ-0kw"},
{"content":{"body":"the prototype is a mutable object tho","m.mentions":{},"msgtype":"m.text"},"ts":1712849557185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2WVMEIb841GKQh7v6JmnKjmVZXlSx7IiBB9H3XSiHTQ"},
{"content":{"body":"if that can be correlated, why can't anything be?","m.mentions":{},"msgtype":"m.text"},"ts":1712849568795,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zCcGp4bPZmrFaOdRvMTIOrsQ24ngV9AYijf2g7hKhD0"},
{"content":{"body":"No, correlation is based on syntax and source location. ","m.mentions":{},"msgtype":"m.text"},"ts":1712849591304,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YB8wTwA4bspNTHDU2GqRkOE-eF6ZqwdRDg5Rdhv8X_c"},
{"content":{"body":"right but i mean, you have to re-evaluate code in each place in order to get the prototype, right?","m.mentions":{},"msgtype":"m.text"},"ts":1712849621666,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hq3zWg9jRYuvlmNssBEQxjl33LNDHmB9g28QegsHIE4"},
{"content":{"body":" * right but i mean, you have to re-evaluate code in each context in order to get the prototype, right?","m.mentions":{},"m.new_content":{"body":"right but i mean, you have to re-evaluate code in each context in order to get the prototype, right?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Hq3zWg9jRYuvlmNssBEQxjl33LNDHmB9g28QegsHIE4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849627102,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PeSTS37W1593tTE7iraYHMlDJmuOq2oVLiiawnAs3oo"},
{"content":{"body":"correlating every `class` is way too much overhead.","format":"org.matrix.custom.html","formatted_body":"correlating every <code>class</code> is way too much overhead.","m.mentions":{},"msgtype":"m.text"},"ts":1712849630286,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$up7iw3PGa3jbQSAjNc2ryf7Mw3Gy5hnTJ8X2rLztWio"},
{"content":{"body":" * right but i mean, you have to re-evaluate code in each context in order to get the prototype object, right?","m.mentions":{},"m.new_content":{"body":"right but i mean, you have to re-evaluate code in each context in order to get the prototype object, right?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Hq3zWg9jRYuvlmNssBEQxjl33LNDHmB9g28QegsHIE4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849631088,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9HfPCzBxdb-vnZgRgY6S7_VZz4iHsU1tqYoYirU_svo"},
{"content":{"body":"> <@rbuckton:matrix.org> correlating every `class` is way too much overhead.\n\nthis is just the shared ones, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$up7iw3PGa3jbQSAjNc2ryf7Mw3Gy5hnTJ8X2rLztWio?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>correlating every <code>class</code> is way too much overhead.</blockquote></mx-reply>this is just the shared ones, right?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$up7iw3PGa3jbQSAjNc2ryf7Mw3Gy5hnTJ8X2rLztWio"}},"msgtype":"m.text"},"ts":1712849662035,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$s-43zJJPTuouqaxCc0j37a9oHVOiPzqiq8pH2X8dq7g"},
{"content":{"body":"well sure, not every class. only one canonical one that the shared struct creator indicates","m.mentions":{},"msgtype":"m.text"},"ts":1712849677406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Kuu5aucla2W1mnSN2cGMODSTi8NbVq6FsEIQZlk0eJM"},
{"content":{"body":" * well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it'd be precisely the same amount of overhead as the prototype object correlation","m.mentions":{},"m.new_content":{"body":"well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it'd be precisely the same amount of overhead as the prototype object correlation","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Kuu5aucla2W1mnSN2cGMODSTi8NbVq6FsEIQZlk0eJM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849692464,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$He4_M0KJxfW864EzR4bCkHZYnGR_68RNl1VOy0gq0Kc"},
{"content":{"body":"We would only correlate `shared struct` types between realms","format":"org.matrix.custom.html","formatted_body":"We would only correlate <code>shared struct</code> types between realms","m.mentions":{},"msgtype":"m.text"},"ts":1712849694992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RJCXda1TM_Mk-EHEfe7soIqLYvDcEFByPb6XPsgm4Z0"},
{"content":{"body":"the prototype object isn't a shared struct","m.mentions":{},"msgtype":"m.text"},"ts":1712849707839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n2xmyEFK3v1qeWIH9M_MA7jM6WK2tb1gVMGv597n-Vg"},
{"content":{"body":"> <@ljharb:matrix.org> well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it'd be precisely the same amount of overhead as the prototype object correlation\n\n`class extends sharedStruct` cannot be cannonical and cannot be determined syntactically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Kuu5aucla2W1mnSN2cGMODSTi8NbVq6FsEIQZlk0eJM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it&#39;d be precisely the same amount of overhead as the prototype object correlation</blockquote></mx-reply><code>class extends sharedStruct</code> cannot be cannonical and cannot be determined syntactically.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Kuu5aucla2W1mnSN2cGMODSTi8NbVq6FsEIQZlk0eJM"}},"msgtype":"m.text"},"ts":1712849737654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IbQvjKxVuln4tWi6ZSxkamd5rVB7zr7FHTMkEIjrLOo"},
{"content":{"body":"> <@ljharb:matrix.org> well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it'd be precisely the same amount of overhead as the prototype object correlation\n\n * `class extends sharedStruct` cannot be canonical and cannot be determined syntactically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Kuu5aucla2W1mnSN2cGMODSTi8NbVq6FsEIQZlk0eJM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>well sure, not every class. only one canonical one that the shared struct creator indicates. that seems like it'd be precisely the same amount of overhead as the prototype object correlation</blockquote></mx-reply> * <code>class extends sharedStruct</code> cannot be canonical and cannot be determined syntactically.","m.mentions":{},"m.new_content":{"body":"`class extends sharedStruct` cannot be canonical and cannot be determined syntactically.","format":"org.matrix.custom.html","formatted_body":"<code>class extends sharedStruct</code> cannot be canonical and cannot be determined syntactically.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IbQvjKxVuln4tWi6ZSxkamd5rVB7zr7FHTMkEIjrLOo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849742940,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t-4_mFcbkfxB8cA7N8Psny2N0QPRm7Ws313oznipzWE"},
{"content":{"body":"if a function is re-eval'd in multiple contexts to achieve the goal of \"having the same methods\", then surely any code could be","m.mentions":{},"msgtype":"m.text"},"ts":1712849743889,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Uj2kjdwcigtPqdheHPCIUaeb1W-KXmCKwCyE9W2p6uI"},
{"content":{"body":"That isn't the problem.","m.mentions":{},"msgtype":"m.text"},"ts":1712849762100,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m67ADYdwkUGA7E5MDCcDcEof71VIilEVu_hkXFeTZY4"},
{"content":{"body":"there's all sorts of ways that can be covered","m.mentions":{},"msgtype":"m.text"},"ts":1712849763915,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GXLzh4vfRhgCnhJot3JtQk-xH2mfygGCqs-g56IhJXw"},
{"content":{"body":"the wrapper class could be defined inside the shared struct, or you could just define method syntax inside the struct definition and the semantics would be that methods are copied","m.mentions":{},"msgtype":"m.text"},"ts":1712849789052,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU"},
{"content":{"body":" * the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax inside the struct definition and the semantics would be that methods are copied","m.mentions":{},"m.new_content":{"body":"the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax inside the struct definition and the semantics would be that methods are copied","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849810923,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pAd-KmFjfs-BtBnGrYqugHUpv8g2zuT_k9qOHlBEbWs"},
{"content":{"body":" * the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the struct definition and the semantics would be that methods are copied","m.mentions":{},"m.new_content":{"body":"the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the struct definition and the semantics would be that methods are copied","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849819691,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SdYpPVK-Cy7zyeKVabW-WUtxwOnF0bAhdDJdIkSzIgo"},
{"content":{"body":" * the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the shared struct definition and the semantics would be that shared struct methods are copied","m.mentions":{},"m.new_content":{"body":"the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the shared struct definition and the semantics would be that shared struct methods are copied","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849825363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dYjabk5OFlFH58vCMMUMYywh02GcVfWun7QLWtGg7Eo"},
{"content":{"body":"Those sound categorically worse than what we are proposing. Class construction has the wrong semantics for shared structs.","m.mentions":{},"msgtype":"m.text"},"ts":1712849865866,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sQrKGm9H2cdZCvQHGxo3mOsI46RpSl9ZsvPguXpBIFI"},
{"content":{"body":"```","format":"org.matrix.custom.html","formatted_body":"<pre><code></code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712849883148,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GEYzowzXRVQFSobgpNZHRRgwxzRmxTfZWu42ND719UE"},
{"content":{"body":"> <@ljharb:matrix.org> the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the shared struct definition and the semantics would be that shared struct methods are copied\n\nwe are proposing methods defined in the struct.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the wrapper class could be defined lexically inside the shared struct, or you could just define method syntax directly inside the shared struct definition and the semantics would be that shared struct methods are copied</blockquote></mx-reply>we are proposing methods defined in the struct.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DE8D6pDY0OAnKg6FVGoi8ikyZIZLr3ZG6EvM45kVoiU"}},"msgtype":"m.text"},"ts":1712849906829,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$224zrKc8x3PGPNxVml4VLTcHseb6i29bb74hszAFxL8"},
{"content":{"body":" * why would something like\n```\nshared struct {\n  // existing stuff\n  foo() {}\n}\n```\nwhere the methods are auto-re-eval'd be worse?","format":"org.matrix.custom.html","formatted_body":" * <p>why would something like</p>\n<pre><code>shared struct {\n  // existing stuff\n  foo() {}\n}\n</code></pre>\n<p>where the methods are auto-re-eval'd be worse?</p>\n","m.mentions":{},"m.new_content":{"body":"why would something like\n```\nshared struct {\n  // existing stuff\n  foo() {}\n}\n```\nwhere the methods are auto-re-eval'd be worse?","format":"org.matrix.custom.html","formatted_body":"<p>why would something like</p>\n<pre><code>shared struct {\n  // existing stuff\n  foo() {}\n}\n</code></pre>\n<p>where the methods are auto-re-eval'd be worse?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GEYzowzXRVQFSobgpNZHRRgwxzRmxTfZWu42ND719UE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712849912121,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tARNBl7L2K1Zj7zq71kbFevL34QGKv2-cU4y5gnpsXc"},
{"content":{"body":"hm, maybe i misunderstood shu's slides, it looked like he was mutating `.prototype`","format":"org.matrix.custom.html","formatted_body":"hm, maybe i misunderstood shu's slides, it looked like he was mutating <code>.prototype</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712849930370,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$J3IQml0qMjDvmkSfi0h0AwFhOprq4g4k3jX5mzACZNk"},
{"content":{"body":"He was showing a build up to what we actually want.","m.mentions":{},"msgtype":"m.text"},"ts":1712849950387,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n4F22a-9RUaBk_S0bLa-t5Dap_bgYPv7gS51kHGI68g"},
{"content":{"body":"We already reference source location in TemplateMap. This isn't a new solution","m.mentions":{},"msgtype":"m.text"},"ts":1712850367441,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$poU5UW2SyrLaLITuqKCe3HtcvuyK4jkYgVWXjsbSz6o"},
{"content":{"body":" * We already reference source location in TemplateMap. This isn't a new concept","m.mentions":{},"m.new_content":{"body":"We already reference source location in TemplateMap. This isn't a new concept","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$poU5UW2SyrLaLITuqKCe3HtcvuyK4jkYgVWXjsbSz6o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712850373378,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7pyQxZFXr7RJ7nyZeDMOChJKnOgbElb8I3OKfEmnQnA"},
{"content":{"body":"Maybe tooling could extract out the minimal part of the struct declarations so they can have a more concrete source text location. And then re-write the code so it can reference that.","m.mentions":{},"msgtype":"m.text"},"ts":1712850678808,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RwfEXt9QoRT-IRn6KZLaNYYV_JxYZxHdIZ86vHJVBNA"},
{"content":{"body":"(for the virtulization case)","m.mentions":{},"msgtype":"m.text"},"ts":1712850694093,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$YXHKE8Z4vLAzk5n3Nd9Z1gFzHFhrEGcnDeRNObr3Qgc"},
{"content":{"body":"this is a sidebar but it would be nice if we could structuredClone symbols in a coherent way (i.e., such that if you send the same one over twice, you get the same value)","m.mentions":{},"msgtype":"m.text"},"ts":1712850738372,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LW4tXLduS5KO_5p67ovi27P-erZBVpm_WaTya-_AqoM"},
{"content":{"body":"That's what bundlers would need to do if they have different entrypoints. IIRC, many bundlers can already do source splitting for those cases.","m.mentions":{},"msgtype":"m.text"},"ts":1712850764606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZMU-HTr_1Aa3r-m7FTgXNnHCPqvdYCDDUaM9Qmo6lRs"},
{"content":{"body":"> <@bakkot:matrix.org> this is a sidebar but it would be nice if we could structuredClone symbols in a coherent way (i.e., such that if you send the same one over twice, you get the same value)\n\nI've been told that this would be too troublesome to implement","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LW4tXLduS5KO_5p67ovi27P-erZBVpm_WaTya-_AqoM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>this is a sidebar but it would be nice if we could structuredClone symbols in a coherent way (i.e., such that if you send the same one over twice, you get the same value)</blockquote></mx-reply>I've been told that this would be too troublesome to implement","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LW4tXLduS5KO_5p67ovi27P-erZBVpm_WaTya-_AqoM"}},"msgtype":"m.text"},"ts":1712850774666,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K0KCklLnJVay2iAhzfWIrc_3X6IZQ_15jNR_J5wGSaQ"},
{"content":{"body":"> <@bakkot:matrix.org> this is a sidebar but it would be nice if we could structuredClone symbols in a coherent way (i.e., such that if you send the same one over twice, you get the same value)\n\nonly RegisteredSymbols would be the easier form of this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$LW4tXLduS5KO_5p67ovi27P-erZBVpm_WaTya-_AqoM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>this is a sidebar but it would be nice if we could structuredClone symbols in a coherent way (i.e., such that if you send the same one over twice, you get the same value)</blockquote></mx-reply>only RegisteredSymbols would be the easier form of this","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LW4tXLduS5KO_5p67ovi27P-erZBVpm_WaTya-_AqoM"}},"msgtype":"m.text"},"ts":1712850823062,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MVlJeeLcXZWspL_0NmuFKrItw3QlGnRnkU-JNWxQ9nI"},
{"content":{"body":"> <@littledan:matrix.org> I've been told that this would be too troublesome to implement\n\nhuh. doesn't seem like it would be that hard.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$K0KCklLnJVay2iAhzfWIrc_3X6IZQ_15jNR_J5wGSaQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I've been told that this would be too troublesome to implement</blockquote></mx-reply>huh. doesn't seem like it would be that hard.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$K0KCklLnJVay2iAhzfWIrc_3X6IZQ_15jNR_J5wGSaQ"}},"msgtype":"m.text"},"ts":1712850836579,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lGPlBBA4KA_dk8UTfPwkPXQbsNFqRPV3Lz0YrceeXHw"},
{"content":{"body":"the usefulness for me would be unforgeable transferable symbols","m.mentions":{},"msgtype":"m.text"},"ts":1712850847527,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T5y7dcJirvYdlxczD70FmiDDI3Jd2saAWiC2a_AAB_w"},
{"content":{"body":" * the usefulness for me would be unforgeable transferable symbols, ie, not registered ones","m.mentions":{},"m.new_content":{"body":"the usefulness for me would be unforgeable transferable symbols, ie, not registered ones","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$T5y7dcJirvYdlxczD70FmiDDI3Jd2saAWiC2a_AAB_w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712850852280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p8CqpC2ZtNt0yIJhM2V6kMr_Po5FKBkvUAOt7eEPHzs"},
{"content":{"body":"you can do it in userland if you patch postMessage / the message event / structuredClone and stash symbols in a weakmap","m.mentions":{},"msgtype":"m.text"},"ts":1712850883440,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2yEqP4yCMkzgido6rL1Gu_gRUcRLilH1uYJNFJEW-lM"},
{"content":{"body":"littledan: Maybe doesn't matter, but I prefer the term `ConcurrentMap` to `SharedMap`. Just because a map is shareable does not mean it can be used concurrently by multiple threads. A true concurrent map uses lock-free CAS mechanisms to allow for concurrent reads and writes. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: Maybe doesn't matter, but I prefer the term <code>ConcurrentMap</code> to <code>SharedMap</code>. Just because a map is shareable does not mean it can be used concurrently by multiple threads. A true concurrent map uses lock-free CAS mechanisms to allow for concurrent reads and writes.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1712850996329,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9lc1DPWxFwtwR-6_zVZVopL-QuadKDERsdMYSExBqNY"},
{"content":{"body":"keith_miller: I have previously advocated for a manual correlation over postMessage, but apparently the DX of that is not acceptable, and prevents some use cases that I don't fully understand","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: I have previously advocated for a manual correlation over postMessage, but apparently the DX of that is not acceptable, and prevents some use cases that I don't fully understand","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"msgtype":"m.text"},"ts":1712851044290,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uhII5dBkfZDXaOxU3pmpcWm9tt7s0gwy6NrDVfcFFhI"},
{"content":{"body":"> <@bakkot:matrix.org> you can do it in userland if you patch postMessage / the message event / structuredClone and stash symbols in a weakmap\n\nLike CK, if the sending realm is also trying to put these symbols in a weak{Map/set/ref}, now the local GC only holds them weakly. They might be GC'ed before the round trip comes back","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2yEqP4yCMkzgido6rL1Gu_gRUcRLilH1uYJNFJEW-lM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you can do it in userland if you patch postMessage / the message event / structuredClone and stash symbols in a weakmap</blockquote></mx-reply>Like CK, if the sending realm is also trying to put these symbols in a weak{Map/set/ref}, now the local GC only holds them weakly. They might be GC'ed before the round trip comes back","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2yEqP4yCMkzgido6rL1Gu_gRUcRLilH1uYJNFJEW-lM"}},"msgtype":"m.text"},"ts":1712851086274,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vGD_qQ4uYkH8NwgFVWnMmskkGyjwHyqTpkveqhK0PT4"},
{"content":{"body":"CK?","m.mentions":{},"msgtype":"m.text"},"ts":1712851119269,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qTeGuk8TyaP3Za-3_s3EeWXebth9LVCwko1DSMWM2UE"},
{"content":{"body":"put them in a weakref that's strongly held by a Map, and if the weakref is collected, you can just make a new symbol?","m.mentions":{},"msgtype":"m.text"},"ts":1712851126427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9eVSuVUZW-bOCy4ScfA0Y4RoMKDIcfZix2A8vOovEY4"},
{"content":{"body":"CompositeKeys","m.mentions":{},"m.relates_to":{"event_id":"$qTeGuk8TyaP3Za-3_s3EeWXebth9LVCwko1DSMWM2UE","is_falling_back":true,"m.in_reply_to":{"event_id":"$qTeGuk8TyaP3Za-3_s3EeWXebth9LVCwko1DSMWM2UE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712851135283,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hRXk1yvscL2eFE3KDpG4JCA_zuQUvbLOQGXeu9TeazA"},
{"content":{"body":"But then that's not round tripping","m.mentions":{},"msgtype":"m.text"},"ts":1712851152368,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2jFeemszNKdmwOphlzCZ3zWmAmgoq-y3BOFFZg_bZqQ"},
{"content":{"body":"ah, sure, ok","m.mentions":{},"msgtype":"m.text"},"ts":1712851163132,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wUUvGCMXvKGOR5oA2t08qAz8j0CANzxgqzOVL8PAD90"},
{"content":{"body":"ah true, hm","m.mentions":{},"msgtype":"m.text"},"ts":1712851184346,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$t2QP7ZNJ8PBo7hvX8XjENKXxB-biEaENrzStl8aM1M4"},
{"content":{"body":"In Java Valhala, they 'fix' that by letting WeakMaps have a 'soft' policy. Where there is no guarantee that the value will remain in the map, even if it's reachable","m.mentions":{},"msgtype":"m.text"},"ts":1712851228206,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$rcdl_Ja_-6jWD7ozUZyZafIkBJ6rXFIfgAoTPQSfsBo"},
{"content":{"body":"> <@rbuckton:matrix.org> littledan: Maybe doesn't matter, but I prefer the term `ConcurrentMap` to `SharedMap`. Just because a map is shareable does not mean it can be used concurrently by multiple threads. A true concurrent map uses lock-free CAS mechanisms to allow for concurrent reads and writes.\n\nI don't get it; shouldn't we use ConcurrentArray then?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9lc1DPWxFwtwR-6_zVZVopL-QuadKDERsdMYSExBqNY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: Maybe doesn't matter, but I prefer the term <code>ConcurrentMap</code> to <code>SharedMap</code>. Just because a map is shareable does not mean it can be used concurrently by multiple threads. A true concurrent map uses lock-free CAS mechanisms to allow for concurrent reads and writes.</blockquote></mx-reply>I don't get it; shouldn't we use ConcurrentArray then?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9lc1DPWxFwtwR-6_zVZVopL-QuadKDERsdMYSExBqNY"}},"msgtype":"m.text"},"ts":1712851250543,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v-IG4DSH2MuipyJFmt5EH_iG1a6f6EJr9xIX7yl1AQI"},
{"content":{"body":"Arrays only usually require a single operation to update. Maps require many more operations that are not thread safe.","m.mentions":{},"msgtype":"m.text"},"ts":1712851299422,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7t9K4h9KLvS_VEjROPMpAgowAPvOZ8Sf-lqyXjm1TIU"},
{"content":{"body":"> <@littledan:matrix.org> I've been told that this would be too troublesome to implement\n\nHow is it so much more troublesome that sharing an instance of `shared struct SharedSymbol {}` ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$K0KCklLnJVay2iAhzfWIrc_3X6IZQ_15jNR_J5wGSaQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I've been told that this would be too troublesome to implement</blockquote></mx-reply>How is it so much more troublesome that sharing an instance of <code>shared struct SharedSymbol {}</code> ?","m.mentions":{"user_ids":["@littledan:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$K0KCklLnJVay2iAhzfWIrc_3X6IZQ_15jNR_J5wGSaQ"}},"msgtype":"m.text"},"ts":1712851369785,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4"},
{"content":{"body":"> <@mhofman:matrix.org> How is it so much more troublesome that sharing an instance of `shared struct SharedSymbol {}` ?\n\nSharedStructs are in someways Finite, due to source text location ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>How is it so much more troublesome that sharing an instance of <code>shared struct SharedSymbol {}</code> ?</blockquote></mx-reply>SharedStructs are in someways Finite, due to source text location ?","m.mentions":{"user_ids":["@mhofman:matrix.org","@littledan:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4"}},"msgtype":"m.text"},"ts":1712851411796,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2kmDTp5zi6Elf58k4XGJ5Q6ygXuHVaCi7-En-j-9iTQ"},
{"content":{"body":"> <@mhofman:matrix.org> How is it so much more troublesome that sharing an instance of `shared struct SharedSymbol {}` ?\n\n * SharedStructs are in someways finite, due to source text location ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>How is it so much more troublesome that sharing an instance of <code>shared struct SharedSymbol {}</code> ?</blockquote></mx-reply> * SharedStructs are in someways finite, due to source text location ?","m.mentions":{},"m.new_content":{"body":"SharedStructs are in someways finite, due to source text location ?","format":"org.matrix.custom.html","formatted_body":"SharedStructs are in someways finite, due to source text location ?","m.mentions":{"user_ids":["@mhofman:matrix.org","@littledan:matrix.org","@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2kmDTp5zi6Elf58k4XGJ5Q6ygXuHVaCi7-En-j-9iTQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712851416053,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$JixV-ueUyAWpQJxoaBOF3kGaL-iVcG6FvolWI28ZxXk"},
{"content":{"body":"> <@bakkot:matrix.org> you can do it in userland if you patch postMessage / the message event / structuredClone and stash symbols in a weakmap\n\nYou cannot if you want to make sure you don't leak memory. You need distributed GC for this to work","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2yEqP4yCMkzgido6rL1Gu_gRUcRLilH1uYJNFJEW-lM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>you can do it in userland if you patch postMessage / the message event / structuredClone and stash symbols in a weakmap</blockquote></mx-reply>You cannot if you want to make sure you don't leak memory. You need distributed GC for this to work","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2yEqP4yCMkzgido6rL1Gu_gRUcRLilH1uYJNFJEW-lM"}},"msgtype":"m.text"},"ts":1712851422811,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$bwQKjjAJCVmf7Jz_AC6EK8XlUxwfp0l-MFxkHZHbtAU"},
{"content":{"body":"presumably shared structs will in fact be more work than structuredCloning symbols would be, and engines just think it's worth it because it is plainly much more valuable","m.mentions":{},"msgtype":"m.text"},"ts":1712851452788,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rrbqUHmZf3X7ncg3x20N8M_0QQXZaM8fjgp-SUeOK0k"},
{"content":{"body":" * SharedStructs are in someways finite (and eternal), due to source text location ?","format":"org.matrix.custom.html","formatted_body":" * SharedStructs are in someways finite (and eternal), due to source text location ?","m.mentions":{},"m.new_content":{"body":"SharedStructs are in someways finite (and eternal), due to source text location ?","format":"org.matrix.custom.html","formatted_body":"SharedStructs are in someways finite (and eternal), due to source text location ?","m.mentions":{"user_ids":["@mhofman:matrix.org","@littledan:matrix.org","@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2kmDTp5zi6Elf58k4XGJ5Q6ygXuHVaCi7-En-j-9iTQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712851454344,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uYW___McGhukHZI0_23JBkfnc0WlvP7Z99dpb50h_kY"},
{"content":{"body":"Right, if you do the work for shared structs you basically could share unique symbols almost for free","m.mentions":{},"msgtype":"m.text"},"ts":1712851539582,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DB6FTbZjFlHcH2wAlnvbRCdoNvAeDJVavYSXBUIJkUU"},
{"content":{"body":"> <@aclaymore:matrix.org> SharedStructs are in someways finite (and eternal), due to source text location ?\n\ninstances of shared structs are definitely not eternal. they require distributed gc. and fun part, they can be used as WeakMap keys","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2kmDTp5zi6Elf58k4XGJ5Q6ygXuHVaCi7-En-j-9iTQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>SharedStructs are in someways finite (and eternal), due to source text location ?</blockquote></mx-reply>instances of shared structs are definitely not eternal. they require distributed gc. and fun part, they can be used as WeakMap keys","m.mentions":{"user_ids":["@aclaymore:matrix.org","@littledan:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2kmDTp5zi6Elf58k4XGJ5Q6ygXuHVaCi7-En-j-9iTQ"}},"msgtype":"m.text"},"ts":1712851581548,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$--iUtbct8SK-o_g-2K-jUbMBn8v92wgaiFgIUC-zGjU"},
{"content":{"body":"it would certainly be a nice bonus if this feature gave us clonable symbols!","m.mentions":{},"msgtype":"m.text"},"ts":1712851640217,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7kJS9LcA6KpoVHf4o-E387U-wOdWCHkKC7j7jLCx1_k"},
{"content":{"body":"Will `import {SharedStruct} from \"shared.js\" with { foo: \"bar\" }` have same source location? I guess not?","format":"org.matrix.custom.html","formatted_body":"Will <code>import {SharedStruct} from \"shared.js\" with { foo: \"bar\" }</code> have same source location? I guess not?","m.mentions":{},"msgtype":"m.text"},"ts":1712851822124,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_e_T4BqWAFj3-Tec00WV6eaeYbtTDVpe52fcgQZKClc"},
{"content":{"body":"> <@mhofman:matrix.org> How is it so much more troublesome that sharing an instance of `shared struct SharedSymbol {}` ?\n\nI guess this was from back when we didn't have a shared heap, and it would've been about correlating signals in different agents (and then the question is, how do you GC them)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>How is it so much more troublesome that sharing an instance of <code>shared struct SharedSymbol {}</code> ?</blockquote></mx-reply>I guess this was from back when we didn't have a shared heap, and it would've been about correlating signals in different agents (and then the question is, how do you GC them)","m.mentions":{"user_ids":["@mhofman:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qXeFiw6fbSb43o7kykTg9cDkY7OThIEbz8YA-a8BWU4"}},"msgtype":"m.text"},"ts":1712851961175,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qagHyqI3fKwlPOh1LTD7Psi3IWl_eHkuZN3VuNM8lDE"},
{"content":{"body":"> <@mhofman:matrix.org> keith_miller: I have previously advocated for a manual correlation over postMessage, but apparently the DX of that is not acceptable, and prevents some use cases that I don't fully understand\n\nI'd _really_ like to see these use cases enumerated, because it seems to me like explicit handshaking in which e.g. a reference to the shared struct is exchanged constitutes a more comprehensible and robust pattern\n```\nlet ready = false;\nonmessage = evt => {\n  if (!ready) {\n    ready = true;\n    correlate(localStructDef, evt.data);\n    return;\n  }\n\n  assert(Object.getPrototypeOf(evt.data) === localStructDef.prototype);\n  ‚Ä¶use evt.data as an instance of the shared struct‚Ä¶\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uhII5dBkfZDXaOxU3pmpcWm9tt7s0gwy6NrDVfcFFhI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br><a href=\"https://matrix.to/#/@keith_miller:matrix.org\">keith_miller</a>: I have previously advocated for a manual correlation over postMessage, but apparently the DX of that is not acceptable, and prevents some use cases that I don't fully understand</blockquote></mx-reply><p>I'd <em>really</em> like to see these use cases enumerated, because it seems to me like explicit handshaking in which e.g. a reference to the shared struct is exchanged constitutes a more comprehensible and robust pattern</p>\n<pre><code>let ready = false;\nonmessage = evt =&gt; {\n  if (!ready) {\n    ready = true;\n    correlate(localStructDef, evt.data);\n    return;\n  }\n\n  assert(Object.getPrototypeOf(evt.data) === localStructDef.prototype);\n  ‚Ä¶use evt.data as an instance of the shared struct‚Ä¶\n}\n</code></pre>\n","m.mentions":{"user_ids":["@mhofman:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uhII5dBkfZDXaOxU3pmpcWm9tt7s0gwy6NrDVfcFFhI"}},"msgtype":"m.text"},"ts":1712853173173,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$p3faUkzwjbcuNke0YtDYaLTP7zo9mrgyRAxJy87Z1bA"},
{"content":{"body":"Yeah, I guess I still don't fully understand. It seems like the spawner of a worker could just forward their shared types to that worker. Or alternatively the spawned worker could fetch it lazily, if desired.","m.mentions":{},"msgtype":"m.text"},"ts":1712853312094,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$DqBegeejRjVdwyluq66waNA2-yzuZ-ZddPSQwOQ8ld4"},
{"content":{"body":" * Yeah, I guess I still don't fully understand. It seems like the spawner of a worker could just forward their shared types to that worker before revealing the existence of that worker to the world. Or alternatively the spawned worker could fetch it lazily, if desired.","m.mentions":{},"m.new_content":{"body":"Yeah, I guess I still don't fully understand. It seems like the spawner of a worker could just forward their shared types to that worker before revealing the existence of that worker to the world. Or alternatively the spawned worker could fetch it lazily, if desired.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DqBegeejRjVdwyluq66waNA2-yzuZ-ZddPSQwOQ8ld4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712853335088,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$698WwG_F1Wc-dtkgVBrQ2xusvURfHqBbf59e1U3QuxM"},
{"content":{"body":" * Yeah, I guess I still don't fully understand. It seems like the spawner of a worker could just forward their shared types to that worker before revealing the existence of that worker to the world. Or alternatively the spawned worker could fetch the shared structs lazily, if desired.","m.mentions":{},"m.new_content":{"body":"Yeah, I guess I still don't fully understand. It seems like the spawner of a worker could just forward their shared types to that worker before revealing the existence of that worker to the world. Or alternatively the spawned worker could fetch the shared structs lazily, if desired.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DqBegeejRjVdwyluq66waNA2-yzuZ-ZddPSQwOQ8ld4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712853349340,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$rATcvF-3_jO7Jw9ZhnqSUg3tw03sk970Df-LUeH_hY0"},
{"content":{"body":"maybe the answer to this question would be in the V8 CL history, if Shu has already implemented it and found it to be not good enough?","m.mentions":{},"msgtype":"m.text"},"ts":1712853441762,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fOHCIEtOWy8WilejGJnXOha1bAGPD1nJHAEEnHkbcPU"},
{"content":{"body":"I guess it could be hard to do it lazily because there's no sync postMessage for workers","m.mentions":{},"msgtype":"m.text"},"ts":1712853562488,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$QgEQXY7XwVd0I39ljv_XggNHSv7JNCcrVmofY1TxIok"},
{"content":{"body":"> <@gibson042:matrix.org> I'd _really_ like to see these use cases enumerated, because it seems to me like explicit handshaking in which e.g. a reference to the shared struct is exchanged constitutes a more comprehensible and robust pattern\n> ```\n> let ready = false;\n> onmessage = evt => {\n>   if (!ready) {\n>     ready = true;\n>     correlate(localStructDef, evt.data);\n>     return;\n>   }\n> \n>   assert(Object.getPrototypeOf(evt.data) === localStructDef.prototype);\n>   ‚Ä¶use evt.data as an instance of the shared struct‚Ä¶\n> }\n> ```\n\nthat constitutes a barrier though, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$p3faUkzwjbcuNke0YtDYaLTP7zo9mrgyRAxJy87Z1bA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>I'd <em>really</em> like to see these use cases enumerated, because it seems to me like explicit handshaking in which e.g. a reference to the shared struct is exchanged constitutes a more comprehensible and robust pattern</p>\n<pre><code>let ready = false;\nonmessage = evt =&gt; {\n  if (!ready) {\n    ready = true;\n    correlate(localStructDef, evt.data);\n    return;\n  }\n\n  assert(Object.getPrototypeOf(evt.data) === localStructDef.prototype);\n  ‚Ä¶use evt.data as an instance of the shared struct‚Ä¶\n}\n</code></pre>\n</blockquote></mx-reply>that constitutes a barrier though, right?","m.mentions":{"user_ids":["@gibson042:matrix.org","@mhofman:matrix.org","@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$p3faUkzwjbcuNke0YtDYaLTP7zo9mrgyRAxJy87Z1bA"}},"msgtype":"m.text"},"ts":1712853703738,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WOnZlDfUzd5R1J3tmx6bpMJLxukNgVVFnJRCuFst94g"},
{"content":{"body":"like, your workers can't just import and start doing stuff. it has to import, wait till some barrier is reached, then continue doing stuff. it's worse for loading performance","m.mentions":{},"msgtype":"m.text"},"ts":1712853742945,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tuiuwivw9IKwYTugQ_pgGjVHbZFc1tswqJhgXBvGIjM"},
{"content":{"body":"it's definitely _possible_, rbuckton has built such a thing","format":"org.matrix.custom.html","formatted_body":"it's definitely <em>possible</em>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> has built such a thing","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712853755972,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NLOUweWBdWy5b3uHv5TA-IniHlPLBAtSoAoZne-2OM8"},
{"content":{"body":"the \"more robust\" argument is interesting, i buy the explicitness of it for sure","m.mentions":{},"msgtype":"m.text"},"ts":1712853794428,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Zn4oDaVVmxyVzxqT0gLliQh_W9DSK7ZVRvOZFmDEMpw"},
{"content":{"body":"an example of \"more robust\" is the fact that it isn't broken by na√Øve bundlers","m.mentions":{},"msgtype":"m.text"},"ts":1712853821444,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$_s10Gw6bDkGN49sfTGoq7h6X_LKRyQVJLkxoUuLRdXA"},
{"content":{"body":"ah okay","m.mentions":{},"msgtype":"m.text"},"ts":1712853840284,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qXjwXnaRliJxzTpgODOkp9v49JpqLPUCCrz9SKNzKz0"},
{"content":{"body":"that depends on whether that's a goal worth optimizing for","m.mentions":{},"msgtype":"m.text"},"ts":1712853855943,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CaIUBt_bD4xyBsUN2Cww8UN6RN3nihB0n2MTL_pkHlc"},
{"content":{"body":"There's only a small handful of bundlers in common use, and they're all maintained by specific individuals who you can talk to, so I don't wan to design a feature on the assumption that bundlers will not be writing careful handling","m.mentions":{},"msgtype":"m.text"},"ts":1712853890191,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zxI9G2vtzj7pX-jB8dtGMWda0gU8NnUWjPK2dwnhCmc"},
{"content":{"body":" * There's only a small handful of bundlers in common use, and they're all maintained by specific individuals who you can talk to, so I don't want to design a feature on the assumption that bundlers will not be writing careful handling","m.mentions":{},"m.new_content":{"body":"There's only a small handful of bundlers in common use, and they're all maintained by specific individuals who you can talk to, so I don't want to design a feature on the assumption that bundlers will not be writing careful handling","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zxI9G2vtzj7pX-jB8dtGMWda0gU8NnUWjPK2dwnhCmc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712853896460,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iJoXM7t6R5x6mdWQdnijIwNOGlVzpkEYBtq0yKc8p9o"},
{"content":{"body":"i was also initially on the other side of comprehendability argument, but flipped after realizing that the \"JS classes are distinct per evaluation\" thing is pretty JS-specific and folks generally don't have that mental model","m.mentions":{},"msgtype":"m.text"},"ts":1712853901339,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tqjx-JHyuKfIL4GgR8Xrh_je6bl8q-3MiSMlvu88V1o"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's definitely _possible_, rbuckton has built such a thing\n\nI did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support `#name` private state, but that isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NLOUweWBdWy5b3uHv5TA-IniHlPLBAtSoAoZne-2OM8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it's definitely <em>possible</em>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> has built such a thing</blockquote></mx-reply>I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support <code>#name</code> private state, but that isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NLOUweWBdWy5b3uHv5TA-IniHlPLBAtSoAoZne-2OM8"}},"msgtype":"m.text"},"ts":1712853904545,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nkQNYoyXhsbIrWwCSvDSjtQl75hk6Cykl2CdgnZH4jU"},
{"content":{"body":"i see, i misremembered","m.mentions":{},"msgtype":"m.text"},"ts":1712853919600,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q4RJaWTg_CDYQ8hrB1CR52jpZg208C7RRNOyeLnoa8w"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's definitely _possible_, rbuckton has built such a thing\n\n * I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support `#name` private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NLOUweWBdWy5b3uHv5TA-IniHlPLBAtSoAoZne-2OM8?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it's definitely <em>possible</em>, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> has built such a thing</blockquote></mx-reply> * I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support <code>#name</code> private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","m.mentions":{},"m.new_content":{"body":"I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support `#name` private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","format":"org.matrix.custom.html","formatted_body":"I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support <code>#name</code> private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nkQNYoyXhsbIrWwCSvDSjtQl75hk6Cykl2CdgnZH4jU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712853921529,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ePXif14oaL-A3bgEUBkBR0ZSu29ELlyEi2rRMfQ6M9k"},
{"content":{"body":"Private state can only maintain its privacy if you can ensure the same encapsulation exists in both realms.","m.mentions":{},"msgtype":"m.text"},"ts":1712853956165,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Je-ECznXTi2x4A04ahJRbiGGRC8sfDSjXsJ-GDiJ1CI"},
{"content":{"body":"> <@bakkot:matrix.org> There's only a small handful of bundlers in common use, and they're all maintained by specific individuals who you can talk to, so I don't want to design a feature on the assumption that bundlers will not be writing careful handling\n\nI'm not limiting \"more robust\" to bundlers, just using that as an easily understood example. The same applies to e.g. dynamic code evaluation/version skew/etc.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zxI9G2vtzj7pX-jB8dtGMWda0gU8NnUWjPK2dwnhCmc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>There&#39;s only a small handful of bundlers in common use, and they&#39;re all maintained by specific individuals who you can talk to, so I don&#39;t want to design a feature on the assumption that bundlers will not be writing careful handling</blockquote></mx-reply>I'm not limiting \"more robust\" to bundlers, just using that as an easily understood example. The same applies to e.g. dynamic code evaluation/version skew/etc.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zxI9G2vtzj7pX-jB8dtGMWda0gU8NnUWjPK2dwnhCmc"}},"msgtype":"m.text"},"ts":1712853990703,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$g9MyVRxADOKW8fna47XS9gJDLhCmxVeiSm_6lrQYS6w"},
{"content":{"body":"Do shared structs allow for private state in the current proposal?","m.mentions":{},"msgtype":"m.text"},"ts":1712854036012,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$_8jZLiUbvqphv8fioRnRF6sEIkyAL9FtM9MTwEnMTJ8"},
{"content":{"body":"No, it is not part of the MVP. They do allow fields, methods, getters, and setters though. ","m.mentions":{},"msgtype":"m.text"},"ts":1712854059019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8E8mNAtm-PJnz1FcZiGZWMvuh7t7xa-Jg8QbL_1UccU"},
{"content":{"body":"Is that strictly needed? Or just ergonomic?","m.mentions":{},"msgtype":"m.text"},"ts":1712854064277,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$A7ygbdGgApLhYafF1iRNXgj8Mcn-b5LUDqUivGsf5Nk"},
{"content":{"body":"I believe it is needed.","m.mentions":{},"msgtype":"m.text"},"ts":1712854077456,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0aN5PsTsGFWFXLTt08ao7jZRqZi52muGghRedSDVOWg"},
{"content":{"body":"You cannot use a `WeakMap` as pseudo-privacy like you might have done for a `class` because a `WeakMap` is local to a specific thread/agent/realm.","format":"org.matrix.custom.html","formatted_body":"You cannot use a <code>WeakMap</code> as pseudo-privacy like you might have done for a <code>class</code> because a <code>WeakMap</code> is local to a specific thread/agent/realm.","m.mentions":{},"msgtype":"m.text"},"ts":1712854112493,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kiyRfBpHUj8dr0CcHCK-3sJr04TBmOSi6IZ8ovZ5e1s"},
{"content":{"body":"Because it seems like you could wrap the private bits in a per-worker wrapper?","m.mentions":{},"msgtype":"m.text"},"ts":1712854114823,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$xJJe3xiluwy3B3MuI7E2jJMqWciwHTdGZ3HbOd11xco"},
{"content":{"body":"How, without exposing the private state as public state?","m.mentions":{},"msgtype":"m.text"},"ts":1712854139170,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KKPVNa7ywGeJhe0KlnSwQ-Y3ucZyfP8eSEgHeeP2SHE"},
{"content":{"body":"You have to share something between threads to communicate private state, and if it is not itself private then there is no private state.","m.mentions":{},"msgtype":"m.text"},"ts":1712854162560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fLAF__ndr0nD5jCmUxsPm-IKg2X20TUOr6zcnb3tTns"},
{"content":{"body":"I guess you can't have that in transitive members though?","m.mentions":{},"msgtype":"m.text"},"ts":1712854162946,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$TB7o2_BErbjFMsK1qRYjJGJg3oE1V5LIk7Tqp_srmiI"},
{"content":{"body":"I also don't fully understand how private state interacts with wasm GC","m.mentions":{},"msgtype":"m.text"},"ts":1712854249044,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$S3d5wvaZaZlvlu_XMuTLRgYrtaEKh9mZpYe-62ht26U"},
{"content":{"body":"If private state was important for `class`, despite `WeakMap` as a possible solution, then it is _more_ important for `struct` as `WeakMap` is not a possible solution. There are a lot of open questions on private state, which is why it's not part of the MVP, but I don't want to chose a direction that completely rules it out as a possibility.","format":"org.matrix.custom.html","formatted_body":"If private state was important for <code>class</code>, despite <code>WeakMap</code> as a possible solution, then it is <em>more</em> important for <code>struct</code> as <code>WeakMap</code> is not a possible solution. There are a lot of open questions on private state, which is why it's not part of the MVP, but I don't want to chose a direction that completely rules it out as a possibility.","m.mentions":{},"msgtype":"m.text"},"ts":1712854330401,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WurAMPFaWk0hdf7zBcO1wHia3TpHQFphw8NDC5ohCXI"},
{"content":{"body":"Are we resuming at 1:00pm or 1:10pm?","m.mentions":{},"msgtype":"m.text"},"ts":1712854366225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZW3__m78OLoLaNxnpbkJvCOuZEgVbx0QmuMHqF8-pMw"},
{"content":{"body":"i heard 1","m.mentions":{},"msgtype":"m.text"},"ts":1712854423970,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ayt9OCxpxpFb1XhEumsc55MfWg0_pfxpO52AydQROng"},
{"content":{"body":"Ah, trying to finish eating and wrangling my dogs before we start back up. Thanks","m.mentions":{},"msgtype":"m.text"},"ts":1712854463965,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4mP5puGtkSuxCJa7h5HjK4T2Ecfv1SE-t5Y1oJSWUmc"},
{"content":{"body":"you're eating your dogs?","m.mentions":{},"msgtype":"m.text"},"ts":1712854477998,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7syQVPXxgBz_QuCQddyASctveovl4Ml1uonZ26UENoY"},
{"content":{"body":"lol.","m.mentions":{},"msgtype":"m.text"},"ts":1712854484747,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z1YJW6oGvQHQ1vofn7eNSaxiTTc2GVhiYf2-SXBkwCs"},
{"content":{"body":" * you're eating your dogs? (lol sorry, will take it to tdz)","m.mentions":{},"m.new_content":{"body":"you're eating your dogs? (lol sorry, will take it to tdz)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7syQVPXxgBz_QuCQddyASctveovl4Ml1uonZ26UENoY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712854487961,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kjQHe1loMG03rm5bUgakBxY-x31ZO51114ydeLyRum8"},
{"content":{"body":"> <@rbuckton:matrix.org> I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support `#name` private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.\n\nI dispute the \"makes that impossible\" claim. As a strawperson, consider\n```\nshared struct SharedPoint {\n  ‚Ä¶\n  #id\n  x;\n  y;\n}\n```\ndescribing a struct with three fields in which instance properties `x` and `y` can be accessed from anywhere but `#id` can be accessed only from functions within the definition (i.e., just like `class`)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nkQNYoyXhsbIrWwCSvDSjtQl75hk6Cykl2CdgnZH4jU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support <code>#name</code> private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.</blockquote></mx-reply><p>I dispute the \"makes that impossible\" claim. As a strawperson, consider</p>\n<pre><code>shared struct SharedPoint {\n  ‚Ä¶\n  #id\n  x;\n  y;\n}\n</code></pre>\n<p>describing a struct with three fields in which instance properties <code>x</code> and <code>y</code> can be accessed from anywhere but <code>#id</code> can be accessed only from functions within the definition (i.e., just like <code>class</code>)</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org","@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nkQNYoyXhsbIrWwCSvDSjtQl75hk6Cykl2CdgnZH4jU"}},"msgtype":"m.text"},"ts":1712854533597,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$EoaNO_yDQARkisL3ngTS9AH4q8wwBE41QRX6uGdoB1o"},
{"content":{"body":"> <@rbuckton:matrix.org> I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support `#name` private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.\n\n * I dispute the \"makes that impossible\" claim. As a strawperson, consider\n\n```\nshared struct SharedPoint {\n  ‚Ä¶\n  #id;\n  x;\n  y;\n}\n```\n\ndescribing a struct with three fields in which instance properties `x` and `y` can be accessed from anywhere but `#id` can be accessed only from functions within the definition (i.e., just like `class`)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$nkQNYoyXhsbIrWwCSvDSjtQl75hk6Cykl2CdgnZH4jU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I did not build such a thing, but I do have a document describing that kind of interaction. There is a lot more user error involved though. I also have hopes to eventually support <code>#name</code> private state, but it isn't safe to do so unless I can be certain the struct declarations on both sides are identical. A handshaking mechanism makes that impossible.</blockquote></mx-reply> * <p>I dispute the \"makes that impossible\" claim. As a strawperson, consider</p>\n<pre><code>shared struct SharedPoint {\n  ‚Ä¶\n  #id;\n  x;\n  y;\n}\n</code></pre>\n<p>describing a struct with three fields in which instance properties <code>x</code> and <code>y</code> can be accessed from anywhere but <code>#id</code> can be accessed only from functions within the definition (i.e., just like <code>class</code>)</p>\n","m.mentions":{},"m.new_content":{"body":"I dispute the \"makes that impossible\" claim. As a strawperson, consider\n\n```\nshared struct SharedPoint {\n  ‚Ä¶\n  #id;\n  x;\n  y;\n}\n```\n\ndescribing a struct with three fields in which instance properties `x` and `y` can be accessed from anywhere but `#id` can be accessed only from functions within the definition (i.e., just like `class`)","format":"org.matrix.custom.html","formatted_body":"<p>I dispute the \"makes that impossible\" claim. As a strawperson, consider</p>\n<pre><code>shared struct SharedPoint {\n  ‚Ä¶\n  #id;\n  x;\n  y;\n}\n</code></pre>\n<p>describing a struct with three fields in which instance properties <code>x</code> and <code>y</code> can be accessed from anywhere but <code>#id</code> can be accessed only from functions within the definition (i.e., just like <code>class</code>)</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org","@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EoaNO_yDQARkisL3ngTS9AH4q8wwBE41QRX6uGdoB1o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712854553151,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$AbyCGsUn8KfupKCJ84Nj2vz0dkEIiGSrkPAn0ZgYSXk"},
{"content":{"body":" * I dispute the \"makes that impossible\" claim. As a strawperson, consider\n\n```\nshared struct SharedPoint {\n  #id;\n  x;\n  y;\n  ‚Ä¶\n}\n```\n\ndescribing a struct with three fields in which instance properties `x` and `y` can be accessed from anywhere but `#id` can be accessed only from functions within the definition (i.e., just like `class`)","format":"org.matrix.custom.html","formatted_body":" * <p>I dispute the \"makes that impossible\" claim. As a strawperson, consider</p>\n<pre><code>shared struct SharedPoint {\n  #id;\n  x;\n  y;\n  ‚Ä¶\n}\n</code></pre>\n<p>describing a struct with three fields in which instance properties <code>x</code> and <code>y</code> can be accessed from anywhere but <code>#id</code> can be accessed only from functions within the definition (i.e., just like <code>class</code>)</p>\n","m.mentions":{},"m.new_content":{"body":"I dispute the \"makes that impossible\" claim. As a strawperson, consider\n\n```\nshared struct SharedPoint {\n  #id;\n  x;\n  y;\n  ‚Ä¶\n}\n```\n\ndescribing a struct with three fields in which instance properties `x` and `y` can be accessed from anywhere but `#id` can be accessed only from functions within the definition (i.e., just like `class`)","format":"org.matrix.custom.html","formatted_body":"<p>I dispute the \"makes that impossible\" claim. As a strawperson, consider</p>\n<pre><code>shared struct SharedPoint {\n  #id;\n  x;\n  y;\n  ‚Ä¶\n}\n</code></pre>\n<p>describing a struct with three fields in which instance properties <code>x</code> and <code>y</code> can be accessed from anywhere but <code>#id</code> can be accessed only from functions within the definition (i.e., just like <code>class</code>)</p>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org","@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EoaNO_yDQARkisL3ngTS9AH4q8wwBE41QRX6uGdoB1o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712854559151,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$wHspD6OP4IJ7Y-5i43Sr8Z9rMf9T-X8feSSwL3rn4nk"},
{"content":{"body":"Sure. And via handshaking I can replace what with my own `SharedPoint` that has a getter that exposes `#id`.","format":"org.matrix.custom.html","formatted_body":"Sure. And via handshaking I can replace what with my own <code>SharedPoint</code> that has a getter that exposes <code>#id</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1712854598732,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$znznNebUkZplgvqFe5hmLB4Miwea4hJPxg5okE8yd-g"},
{"content":{"body":"The correlation must be unforgeable.","m.mentions":{},"msgtype":"m.text"},"ts":1712854615348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eAW0CNzi5iNsgco25hst8sICs6zKbYTVFIdyW2UVcDE"},
{"content":{"body":"correct","m.mentions":{},"msgtype":"m.text"},"ts":1712854615593,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$0OZOyVWP8JNR0bPCWjp_inZ1zk56WXRKyGz97v7QU-4"},
{"content":{"body":"because...?","m.mentions":{},"msgtype":"m.text"},"ts":1712854632351,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$3fqAjpWdcellmPv1zb4LoFsqOJKaUPX7qzgknt4vZKc"},
{"content":{"body":"Otherwise a bad actor could spin up a worker with code that does this, pass it a shared struct instance, and extract the private state.","m.mentions":{},"msgtype":"m.text"},"ts":1712854657634,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BX3oaG3Ajq7ZxD9p7zAo5OgMn-ss9XLL3jRTfwwYn5I"},
{"content":{"body":"or even observe that it exists.","m.mentions":{},"msgtype":"m.text"},"ts":1712854684584,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Hi8Ms4hHih6T1A32DgOXnebrpamsuNh7XTVBU2kOLXk"},
{"content":{"body":"How are they doing this?","m.mentions":{},"msgtype":"m.text"},"ts":1712854708022,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$jQFzX-9snI73_oZybnTpi4qGi34m0esf3Zt3zGwHk7E"},
{"content":{"body":"it seems like you and I have wildly different threat models and conceptions of the purpose of private fields","m.mentions":{},"msgtype":"m.text"},"ts":1712854729090,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$9_ZSckuvEFg8f4cwlA5m9Vd3lp1NhpJmBcYjVDVll6w"},
{"content":{"body":"Wouldn't they be different types? With different private names?","m.mentions":{},"msgtype":"m.text"},"ts":1712854732747,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$eByC2O6A7DIqY0JIstsw3zcWOGRgbJsIo44fGQXhii0"},
{"content":{"body":"Sorry, must finish eating and prep for my presentation.","m.mentions":{},"msgtype":"m.text"},"ts":1712854732952,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uq6Tso8a3IJ8YP6F4oKu9BceehStR_AAD3JfPG9CGfc"},
{"content":{"body":"> <@rbuckton:matrix.org> Private state can only maintain its privacy if you can ensure the same encapsulation exists in both realms.\n\nNot entirely true. If the capability is derived from the shared struct declaration, it is likely fine for that capability to allow wiring private state access. The same way you can declare static methods on a class that can be plucked to give friends the ability to access class privates. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Je-ECznXTi2x4A04ahJRbiGGRC8sfDSjXsJ-GDiJ1CI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Private state can only maintain its privacy if you can ensure the same encapsulation exists in both realms.</blockquote></mx-reply>Not entirely true. If the capability is derived from the shared struct declaration, it is likely fine for that capability to allow wiring private state access. The same way you can declare static methods on a class that can be plucked to give friends the ability to access class privates.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Je-ECznXTi2x4A04ahJRbiGGRC8sfDSjXsJ-GDiJ1CI"}},"msgtype":"m.text"},"ts":1712854828710,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zZVK6HOFvGRrVlGx0wRgnMq-PJWCIOV6j83PkwHS1y0"},
{"content":{"body":"exactly. Access to private fields in the above example would require a reference to the struct _definition_; a mere instance would not suffice","format":"org.matrix.custom.html","formatted_body":"exactly. Access to private fields in the above example would require a reference to the struct <em>definition</em>; a mere instance would not suffice","m.mentions":{},"msgtype":"m.text"},"ts":1712854915941,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$KdRxHjZabek02y9F1R46XMfZDrnO4Jym2ypvhikFoAc"},
{"content":{"body":"> <@keith_miller:matrix.org> Wouldn't they be different types? With different private names?\n\nit'd be like, you'd have a different private name in each agent, but they would both be associated to the same underlying field in memory","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$eByC2O6A7DIqY0JIstsw3zcWOGRgbJsIo44fGQXhii0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Wouldn&#39;t they be different types? With different private names?</blockquote></mx-reply>it'd be like, you'd have a different private name in each agent, but they would both be associated to the same underlying field in memory","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$eByC2O6A7DIqY0JIstsw3zcWOGRgbJsIo44fGQXhii0"}},"msgtype":"m.text"},"ts":1712854965670,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Va7uPsWNOo351vpuvVwT6JHzvX5dqNqKXdu_O4PqCoU"},
{"content":{"body":"ryzokuken / Chris de Almeida : Will we have time for the extractor continuation?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> / <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a> : Will we have time for the extractor continuation?","m.mentions":{"user_ids":["@usharma:igalia.com","@softwarechris:matrix.org"]},"msgtype":"m.text"},"ts":1712854977022,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$FtzXvDjHdNOsNC2cY8FeeRn9wW9RggR-0i1sq6ql74E"},
{"content":{"body":"for anyone who is disappointed that they missed their opportunity to help with the notes during this plenary meeting, there is an opportunity opening up in about 30 minutes after this topic.  please register your interest by contacting the chair group. first come, first served.  thank you üôè","m.mentions":{},"msgtype":"m.text"},"ts":1712854978689,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Lm9Nd0W5TId5EjHjo29WN3zAQLFDiMNdp8J5-yxVYHw"},
{"content":{"body":"> <@eemeli:mozilla.org> ryzokuken / Chris de Almeida : Will we have time for the extractor continuation?\n\nvirtually no chance, unfortunately üòû","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$FtzXvDjHdNOsNC2cY8FeeRn9wW9RggR-0i1sq6ql74E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken</a> / <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a> : Will we have time for the extractor continuation?</blockquote></mx-reply>virtually no chance, unfortunately üòû","m.mentions":{"user_ids":["@eemeli:mozilla.org","@usharma:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FtzXvDjHdNOsNC2cY8FeeRn9wW9RggR-0i1sq6ql74E"}},"msgtype":"m.text"},"ts":1712855015962,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KkSfz0N6KQIDBjdxAm5MdTNgM7oDF9Ui7c04VPUTuag"},
{"content":{"body":"Alas.","m.mentions":{},"msgtype":"m.text"},"ts":1712855026629,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$dxg0I2YepKQae0SUZdXznnY0Lf8ZPBs-HCG4FBD3EvQ"},
{"content":{"body":"yikes i'm having a really hard time cognitively keeping up, this is the first time i've tried doing notes since i went on leave for a head injury and maybe it was a touch overambitious of me","m.mentions":{},"msgtype":"m.text"},"ts":1712855082126,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$MVPm1YrHH_K2yh8RIQ_ZH5lNlolqAfPAYx7FusAxFUg"},
{"content":{"body":"> <@akirose:matrix.org> yikes i'm having a really hard time cognitively keeping up, this is the first time i've tried doing notes since i went on leave for a head injury and maybe it was a touch overambitious of me\n\noh.  hopefully Daniel is able to keep up. chais also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MVPm1YrHH_K2yh8RIQ_ZH5lNlolqAfPAYx7FusAxFUg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@akirose:matrix.org\">@akirose:matrix.org</a><br>yikes i&#39;m having a really hard time cognitively keeping up, this is the first time i&#39;ve tried doing notes since i went on leave for a head injury and maybe it was a touch overambitious of me</blockquote></mx-reply>oh.  hopefully Daniel is able to keep up. chais also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","m.mentions":{"user_ids":["@akirose:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MVPm1YrHH_K2yh8RIQ_ZH5lNlolqAfPAYx7FusAxFUg"}},"msgtype":"m.text"},"ts":1712855149743,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$S50vbSoHgunlB1kRESvgCxgTdehuPONbm4de34lcOr8"},
{"content":{"body":"> <@akirose:matrix.org> yikes i'm having a really hard time cognitively keeping up, this is the first time i've tried doing notes since i went on leave for a head injury and maybe it was a touch overambitious of me\n\n * oh.  hopefully Daniel is able to keep up. chairs also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MVPm1YrHH_K2yh8RIQ_ZH5lNlolqAfPAYx7FusAxFUg?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@akirose:matrix.org\">@akirose:matrix.org</a><br>yikes i'm having a really hard time cognitively keeping up, this is the first time i've tried doing notes since i went on leave for a head injury and maybe it was a touch overambitious of me</blockquote></mx-reply> * oh.  hopefully Daniel is able to keep up. chairs also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","m.mentions":{},"m.new_content":{"body":"oh.  hopefully Daniel is able to keep up. chairs also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","format":"org.matrix.custom.html","formatted_body":"oh.  hopefully Daniel is able to keep up. chairs also help but aren't always able to. if you need to bow out, no worries, don't feel obliged if the vibes are off","m.mentions":{"user_ids":["@akirose:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$S50vbSoHgunlB1kRESvgCxgTdehuPONbm4de34lcOr8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712855162091,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$hqY0cCRMVGaxAFtQ8zx9S9sCkyRXc8Gg8DLu2GqoPmE"},
{"content":{"body":"the getter and the FinalizationRegistry solutions don't seem so bad...","msgtype":"m.text"},"ts":1712855449699,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rS_wBFbmxvYOFZWhbo9GacJHgUwqD3er6rpzmKUn2NE"},
{"content":{"body":"particularly FinalizationRegistry seems pretty suboptimal compared to strict enforcement where you can just throw one exception saying \"you forgot `using`\" _from the source code location where you forgot it_","format":"org.matrix.custom.html","formatted_body":"particularly FinalizationRegistry seems pretty suboptimal compared to strict enforcement where you can just throw one exception saying \"you forgot <code>using</code>\" <em>from the source code location where you forgot it</em>","m.mentions":{},"msgtype":"m.text"},"ts":1712855599126,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$Pfczu94igN_1c-vfUHOf2Z0rZ2-MSMHTB2OuOFt7IA4"},
{"content":{"body":"FinalizationRegistry is very bad","m.mentions":{},"msgtype":"m.text"},"ts":1712855618842,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0VmmU-Jg1C5I-pP996ZUGEEyQRwRaY_s1NGlVwtHEeI"},
{"content":{"body":"it is not a guarantee at all","m.mentions":{},"msgtype":"m.text"},"ts":1712855623369,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tcYV5q-8dEHyBTlE05KKz-4n896xVSfvE3fXq99Sp8U"},
{"content":{"body":"and it is at some point in the future","m.mentions":{},"msgtype":"m.text"},"ts":1712855629081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GkcNmQBcRqsFRbo-zxZE6T7VdMOIgcJRCHyM1so450c"},
{"content":{"body":"it's really, really not a solution for anything except releasing memory","m.mentions":{},"msgtype":"m.text"},"ts":1712855639798,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gGgt6RXKL4UdeJ-00XcaSt6MXQQ0GK59JdpXe8ZH-t4"},
{"content":{"body":"which is the only thing it was ever for","m.mentions":{},"msgtype":"m.text"},"ts":1712855644481,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wly2q12dRuZiIA5Ky02sx4bUIW4I_eIoSRVa1IpjFME"},
{"content":{"body":"FR is only ok here as a diagnostic mechanism ","m.mentions":{},"msgtype":"m.text"},"ts":1712855729114,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$d1EqrFY-VwsRME7Cr4SNbQXAuBal09dIbL78PjydrZw"},
{"content":{"body":"Is @shuyuguo:matrix.org's concern that you can just manually call `foo[Symbol.enter]()` and so there‚Äôs no real enforcement?","format":"org.matrix.custom.html","formatted_body":"Is <a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a>&#39;s concern that you can just manually call <code data-md=\"`\">foo[Symbol.enter]()</code> and so there‚Äôs no real enforcement?","msgtype":"m.text"},"ts":1712856286452,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7j0nLbwDEdD5ia_dsiAefH_SpYO58bweP9my1WBgnck"},
{"content":{"body":"+ it's still not local warning to the user doing something wrong","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>it's still not local warning to the user doing something wrong</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712856300282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$idM3VJQ3sKXmVTlx34vaNXVKcksI8dCP9GQKeGAlE8g"},
{"content":{"body":"yeah but you don't have the resource if you don't call Symbol.enter, so there's no leak","m.mentions":{},"msgtype":"m.text"},"ts":1712856313062,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hw6QtywCQw28YtLLYnkxRibEuo5-Nv8AYCw8Sp0oj9s"},
{"content":{"body":"right okay","m.mentions":{},"msgtype":"m.text"},"ts":1712856319415,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tW9n-AjIO69r12zJ6rw80eZFpnRv-99UJ8qPr8FmEBU"},
{"content":{"body":"i think i understand it now, it's just not [[nodiscard]]","m.mentions":{},"msgtype":"m.text"},"ts":1712856329911,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MwtHYYp6ajQSCPCsqPluU-ohIxqbKAgxo1F5_7wWXfM"},
{"content":{"body":"it's something pretty different","m.mentions":{},"msgtype":"m.text"},"ts":1712856332402,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8652sWOzITuO74KIBjVM3_nxQHxFtcxmIafLSSoM_jI"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1712856335433,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DlT9OARpiWkOBXYoOVtjPdcIyFujhqyjchk3lZDKlT8"},
{"content":{"body":"it really does seem like you have to gate every public operation on \"the dispose getter has been called, and the resource is not yet disposed\"","m.mentions":{},"msgtype":"m.text"},"ts":1712856375847,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$axqzqqJU0aReXndy-6o59E6bS1UlefTos9zMLvexIjY"},
{"content":{"body":"iow, the entire thing is invalid before being `using`d - queued for disposal - and again invalid after disposal","format":"org.matrix.custom.html","formatted_body":"iow, the entire thing is invalid before being <code>using</code>d - queued for disposal - and again invalid after disposal","m.mentions":{},"msgtype":"m.text"},"ts":1712856403395,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$poq7iuFaaIodHTnoOTHNB8Xbcf3dupU479Wo1Op1VE8"},
{"content":{"body":"\"resource is not yet disposed\" is not quite as important; that can be invalid but is not a leak","m.mentions":{},"msgtype":"m.text"},"ts":1712856411238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9n6vB4U419qhlXggwIs4msL_vr2ZuR0BRpaciJTBNZ4"},
{"content":{"body":"it's still probably good practice but the hit to performance for public fields is not necessarily worth it","m.mentions":{},"msgtype":"m.text"},"ts":1712856454389,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DRlBbXjWcl7QXZTGb4rNtnays_9kN82I8twOa7dfdQc"},
{"content":{"body":" * it really does seem like you have to gate every public operation on \"the dispose getter has been called, and the resource is not yet disposed\" (in order to get the enforcement that motivates this proposal)","m.mentions":{},"m.new_content":{"body":"it really does seem like you have to gate every public operation on \"the dispose getter has been called, and the resource is not yet disposed\" (in order to get the enforcement that motivates this proposal)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$axqzqqJU0aReXndy-6o59E6bS1UlefTos9zMLvexIjY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856454972,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0DKfaTnM0MzTAJ6X7ucqXDNkLSWI2lfbI9wu0xHYZ_Q"},
{"content":{"body":"can... TS add [[nodiscard]]?","m.mentions":{},"msgtype":"m.text"},"ts":1712856473116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-E81n5_AfLIoXKZBorl4yGifkrPA2vfaFom4sQOIfjU"},
{"content":{"body":"not yet disposed? or not yet queued for disposal? because the former is the only time you want people to interact with the resource","m.mentions":{},"msgtype":"m.text"},"ts":1712856486638,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bjkWeZlI8XocfkjUuHqU9rHDxVvgfptSrhlGBPs8CNg"},
{"content":{"body":"https://github.com/microsoft/TypeScript/issues/8240","m.mentions":{},"msgtype":"m.text"},"ts":1712856492564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e5adbZJdy-qUwCdh-5z96umceJ3nou7sB4L5FK0RiHM"},
{"content":{"body":" * not yet disposed? or not yet queued for disposal? because the former true, and the latter false, is the only time you want people to interact with the resource, i'd think","m.mentions":{},"m.new_content":{"body":"not yet disposed? or not yet queued for disposal? because the former true, and the latter false, is the only time you want people to interact with the resource, i'd think","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$bjkWeZlI8XocfkjUuHqU9rHDxVvgfptSrhlGBPs8CNg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856496246,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-U4ua7YG8YL9qU-4t0RDUMxAQJX2IFzKJZ2fmDspP5k"},
{"content":{"body":"The userland solution might be a naming convention","m.mentions":{},"msgtype":"m.text"},"ts":1712856510647,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uYQsDQZcso2zUWCZ_rsR7jCWd3n5w_ERlB783tSMxIU"},
{"content":{"body":"like how in react all hooks are `use[A-Z...`","format":"org.matrix.custom.html","formatted_body":"like how in react all hooks are <code>use[A-Z...</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712856520258,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$kSlaOZoKhV7dY0EFMK47EpHzb2MuVIVdw1qaLGMqtag"},
{"content":{"body":"and linters enforce where they are allowed to be called from","m.mentions":{},"msgtype":"m.text"},"ts":1712856534498,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$AOnvcGAL3T3Ipv2NdIDIYA8O28dlBqwb1hfJ6sdZQoQ"},
{"content":{"body":"oof, that was such a poor choice by react tho","m.mentions":{},"msgtype":"m.text"},"ts":1712856536622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-MS8idq4n8opdV3dK1PcS_hMmq48pvQ_kMu_r2tSdFY"},
{"content":{"body":"unfortunately Ron wants to add it to existing things, which do not follow any naming convention","m.mentions":{},"msgtype":"m.text"},"ts":1712856545458,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ESFDavs3nRImEqQ_6xTFi84neRLhbtSZBiu39j05fsI"},
{"content":{"body":"i think they're still planning to name their new mega-hook \"use\", so RIP googling for things","m.mentions":{},"msgtype":"m.text"},"ts":1712856561018,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kZAkdAwVJdYhqTQ6enUKzJbLnu6tqwdps10QoEdsAXg"},
{"content":{"body":" * unfortunately Ron wants to add Symbol.dispose to existing things, which do not follow any naming convention","m.mentions":{},"m.new_content":{"body":"unfortunately Ron wants to add Symbol.dispose to existing things, which do not follow any naming convention","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ESFDavs3nRImEqQ_6xTFi84neRLhbtSZBiu39j05fsI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856561808,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-cRH7MwjNsVTgXz7z_ma7yzeUnpbMsfbawldvujiIDQ"},
{"content":{"body":"> <@bakkot:matrix.org> unfortunately Ron wants to add Symbol.dispose to existing things, which do not follow any naming convention\n\nthey'll have to be grandparented in to the set of names ;)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ESFDavs3nRImEqQ_6xTFi84neRLhbtSZBiu39j05fsI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>unfortunately Ron wants to add Symbol.dispose to existing things, which do not follow any naming convention</blockquote></mx-reply>they'll have to be grandparented in to the set of names ;)","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ESFDavs3nRImEqQ_6xTFi84neRLhbtSZBiu39j05fsI"}},"msgtype":"m.text"},"ts":1712856566930,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$SPUSTHCaC2D56FHOP1tkOf8znfiBYDKRxuiC09FIJC0"},
{"content":{"body":"inconsistent naming I think makes that naming not viable as a solution for saving people from errors here","m.mentions":{},"msgtype":"m.text"},"ts":1712856592272,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zFBUYS1NSXqlQlJwxrwBqh7P6EO4XvVG6GIQcDYuLBY"},
{"content":{"body":"It'd be nice if we can really nail down the full scope of these protocols before Stage 3. It'll make rollout of this solution slower to have this diversity of interpretations for using.","m.mentions":{},"msgtype":"m.text"},"ts":1712856616192,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lEn58R1nMJ6s9_DHWloA1FyBJQZqNTzPKza7wu-o6nI"},
{"content":{"body":"It's too bad that this proposal doesn't give strong enough guarantees to let us use it for AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1712856699409,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0"},
{"content":{"body":"I'm not sure I understand why adding strict enforcement will bifurcate the ecosystem. resource management doesn't exist currently; code wanting to use resource management needs to port, so why would strict enforcement be a burden that hinders adoption?","m.mentions":{},"msgtype":"m.text"},"ts":1712856735074,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$tVXIcBV4XFJCOi4IWGsF3DQh9NINT_UNd9YJPU14mNY"},
{"content":{"body":"rbuckton: to be clear I am not going to block further advancement of `using` on this feature existing: it is too late in the process","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: to be clear I am not going to block further advancement of <code>using</code> on this feature existing: it is too late in the process","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712856781130,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-J09PbAgIFUqoQt0O0xca7PpOzTPZQAYPNcEtxZPM3M"},
{"content":{"body":"_Mandatory_ strict enforcement could cause bifurcation. That's why this is an opt-in mechanism.","format":"org.matrix.custom.html","formatted_body":"<em>Mandatory</em> strict enforcement could cause bifurcation. That's why this is an opt-in mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1712856793120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wbUj1Wb4vJLSSWhWpxAchrep_RtjXEe1ttBszaqN-JI"},
{"content":{"body":"> <@littledan:matrix.org> It's too bad that this proposal doesn't give strong enough guarantees to let us use it for AsyncContext\n\nI opened an issue to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It&#39;s too bad that this proposal doesn&#39;t give strong enough guarantees to let us use it for AsyncContext</blockquote></mx-reply>I opened an issue to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0"}},"msgtype":"m.text"},"ts":1712856800643,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Ej0SwinjsL6Tk5qbM2W4pciU9HltvzBtJORLLjm1U3Y"},
{"content":{"body":"> <@littledan:matrix.org> It's too bad that this proposal doesn't give strong enough guarantees to let us use it for AsyncContext\n\n * I opened an issue yesterday to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It's too bad that this proposal doesn't give strong enough guarantees to let us use it for AsyncContext</blockquote></mx-reply> * I opened an issue yesterday to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","m.mentions":{},"m.new_content":{"body":"I opened an issue yesterday to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","format":"org.matrix.custom.html","formatted_body":"I opened an issue yesterday to discuss this: https://github.com/rbuckton/proposal-using-enforcement/issues/1","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ej0SwinjsL6Tk5qbM2W4pciU9HltvzBtJORLLjm1U3Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856812159,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kmNtaenZW4NCDaMFM_o1nhJ0RCFRulpXBnZMVwLOLOo"},
{"content":{"body":"> <@littledan:matrix.org> It's too bad that this proposal doesn't give strong enough guarantees to let us use it for AsyncContext\n\nwhy is it not sufficient?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It&#39;s too bad that this proposal doesn&#39;t give strong enough guarantees to let us use it for AsyncContext</blockquote></mx-reply>why is it not sufficient?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PI39dMEgSSHeKBGlU4AzZdUrS9X9VwFqiU6ekvBe3_0"}},"msgtype":"m.text"},"ts":1712856818191,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UyvfG5S7CpBH8gIB3LfrjwDNRSg49d6gVB9vkB3FY4k"},
{"content":{"body":"> <@pchimento:igalia.com> I'm not sure I understand why adding strict enforcement will bifurcate the ecosystem. resource management doesn't exist currently; code wanting to use resource management needs to port, so why would strict enforcement be a burden that hinders adoption?\n\nI think it means, if some transpilers/browsers ship the initial `using` semantics, and others ship the later semantics, then it's harder to start shipping APIs using strict enforcement (since it's not enough to check whether the syntax exists, you also have to check that users are updated)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$tVXIcBV4XFJCOi4IWGsF3DQh9NINT_UNd9YJPU14mNY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I&#39;m not sure I understand why adding strict enforcement will bifurcate the ecosystem. resource management doesn&#39;t exist currently; code wanting to use resource management needs to port, so why would strict enforcement be a burden that hinders adoption?</blockquote></mx-reply>I think it means, if some transpilers/browsers ship the initial <code>using</code> semantics, and others ship the later semantics, then it's harder to start shipping APIs using strict enforcement (since it's not enough to check whether the syntax exists, you also have to check that users are updated)","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tVXIcBV4XFJCOi4IWGsF3DQh9NINT_UNd9YJPU14mNY"}},"msgtype":"m.text"},"ts":1712856822496,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3iic4_In7SymyY5Ig0j7g_U8SWBvj0q3NG1oMWGCr-Q"},
{"content":{"body":"> <@mhofman:matrix.org> why is it not sufficient?\n\nyou can just call enter and not call dispose, so you'd have unbalanced use of the stack","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UyvfG5S7CpBH8gIB3LfrjwDNRSg49d6gVB9vkB3FY4k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>why is it not sufficient?</blockquote></mx-reply>you can just call enter and not call dispose, so you'd have unbalanced use of the stack","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UyvfG5S7CpBH8gIB3LfrjwDNRSg49d6gVB9vkB3FY4k"}},"msgtype":"m.text"},"ts":1712856846421,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Wtar4Jp6V9a8XKrrnLnMvDLyDqrtqCPVluj8rezUhZM"},
{"content":{"body":"> <@littledan:matrix.org> I think it means, if some transpilers/browsers ship the initial `using` semantics, and others ship the later semantics, then it's harder to start shipping APIs using strict enforcement (since it's not enough to check whether the syntax exists, you also have to check that users are updated)\n\nthat's the breaks of stage 3 though?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3iic4_In7SymyY5Ig0j7g_U8SWBvj0q3NG1oMWGCr-Q?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it means, if some transpilers/browsers ship the initial <code>using</code> semantics, and others ship the later semantics, then it's harder to start shipping APIs using strict enforcement (since it's not enough to check whether the syntax exists, you also have to check that users are updated)</blockquote></mx-reply>that's the breaks of stage 3 though?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3iic4_In7SymyY5Ig0j7g_U8SWBvj0q3NG1oMWGCr-Q"}},"msgtype":"m.text"},"ts":1712856851484,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$Iq-6-5-6WUhmsZ57j_dJ6MX6z63CqpGGjZotimNVKh0"},
{"content":{"body":"> <@pchimento:igalia.com> that's the breaks of stage 3 though?\n\nright, the part that makes this painful is that we knew about this part of the design space through the whole life of the `using` proposal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Iq-6-5-6WUhmsZ57j_dJ6MX6z63CqpGGjZotimNVKh0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>that's the breaks of stage 3 though?</blockquote></mx-reply>right, the part that makes this painful is that we knew about this part of the design space through the whole life of the <code>using</code> proposal.","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Iq-6-5-6WUhmsZ57j_dJ6MX6z63CqpGGjZotimNVKh0"}},"msgtype":"m.text"},"ts":1712856874497,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BkgoLj0-aSFkr4ZSV9C5tcV6lQTsTsVvtvQT8KTRnK4"},
{"content":{"body":"it is within our power to demote a proposal from stage 3 to 2","msgtype":"m.text"},"ts":1712856883293,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Rhjiq0qxI34e9IB2wUhjc-cqA2GgtbrmdqLhbked1AI"},
{"content":{"body":"> <@littledan:matrix.org> you can just call enter and not call dispose, so you'd have unbalanced use of the stack\n\nCalling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Wtar4Jp6V9a8XKrrnLnMvDLyDqrtqCPVluj8rezUhZM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>you can just call enter and not call dispose, so you'd have unbalanced use of the stack</blockquote></mx-reply>Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.","m.mentions":{"user_ids":["@littledan:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Wtar4Jp6V9a8XKrrnLnMvDLyDqrtqCPVluj8rezUhZM"}},"msgtype":"m.text"},"ts":1712856903357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk"},
{"content":{"body":"I've said elsewhere, I'd be fine with a `Symbol.enter_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`, or something less meme-y, to illustrate the unsafe nature of the operation.","format":"org.matrix.custom.html","formatted_body":"I've said elsewhere, I'd be fine with a <code>Symbol.enter_DO_NOT_USE_OR_YOU_WILL_BE_FIRED</code>, or something less meme-y, to illustrate the unsafe nature of the operation.","m.mentions":{},"msgtype":"m.text"},"ts":1712856942603,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WSSgkdXVVrP_2W4qzSYrCVIJ-8fUJT1twAKMN7y0R6M"},
{"content":{"body":"> <@rbuckton:matrix.org> Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.\n\nWe agree that if a user does this, their code is buggy. That's not in discussion. But some use cases need something stricter","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.</blockquote></mx-reply>We agree that if a user does this, their code is buggy. That's not in discussion. But some use cases need something stricter","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk"}},"msgtype":"m.text"},"ts":1712856957368,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038"},
{"content":{"body":"> <@rbuckton:matrix.org> Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.\n\n * We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.</blockquote></mx-reply> * We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter","m.mentions":{},"m.new_content":{"body":"We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter","format":"org.matrix.custom.html","formatted_body":"We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter","m.mentions":{"user_ids":["@rbuckton:matrix.org","@littledan:matrix.org","@mhofman:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856968894,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$TQNB05dvgWab9rlizIoz4SXcetYRb9yf0zfMXbWpGKY"},
{"content":{"body":"I'm going to guess that implementors are going to reject production work for the equivelent of a [[nodiscard]] attribute. I know I currently would.","m.mentions":{},"msgtype":"m.text"},"ts":1712856970350,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$KZdA8dm7f2Yxu3skbId5VqP4HCbqgpYimDT8TBtXRlc"},
{"content":{"body":"> <@rbuckton:matrix.org> Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.\n\nright, so in the rollout, people may find themselves wanting to do that more than would be optimal, to deal with the risk that their code will be transpired with an older version of `using`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Calling enter is an explicit action the user takes. They are opting out of strict enforcement, and thus must ensure they do the work themselves.</blockquote></mx-reply>right, so in the rollout, people may find themselves wanting to do that more than would be optimal, to deal with the risk that their code will be transpired with an older version of <code>using</code>.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EsEkI_X3SLM_RcwKqqrELcsGbllik6dwPfLtkUJjidk"}},"msgtype":"m.text"},"ts":1712856980275,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_9lArS8lpqE8K79oAnn4fyrbIgqPAezbMYe_YQfNIz0"},
{"content":{"body":" * I'm going to guess that implementors are going to reject production time work for the equivelent of a \\[\\[nodiscard\\]\\] attribute. I know I currently would.","format":"org.matrix.custom.html","formatted_body":" * I'm going to guess that implementors are going to reject production time work for the equivelent of a [[nodiscard]] attribute. I know I currently would.","m.mentions":{},"m.new_content":{"body":"I'm going to guess that implementors are going to reject production time work for the equivelent of a \\[\\[nodiscard\\]\\] attribute. I know I currently would.","format":"org.matrix.custom.html","formatted_body":"I'm going to guess that implementors are going to reject production time work for the equivelent of a [[nodiscard]] attribute. I know I currently would.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KZdA8dm7f2Yxu3skbId5VqP4HCbqgpYimDT8TBtXRlc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712856980968,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$HTNX5TmLha5RDauF5rGj5iMNP3pRjquSRZD07idc4l4"},
{"content":{"body":"> <@abotella:igalia.com> We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter\n\nWithout a compiler or type system, I'm not sure something stricter is entirely feasible in JS. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter</blockquote></mx-reply>Without a compiler or type system, I'm not sure something stricter is entirely feasible in JS.","m.mentions":{"user_ids":["@abotella:igalia.com","@littledan:matrix.org","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038"}},"msgtype":"m.text"},"ts":1712856999525,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CJKqLn9nF-B3rIzp599VBk7i5lOtJ7GL2fsnGJ1kHBg"},
{"content":{"body":"> <@rbuckton:matrix.org> Without a compiler or type system, I'm not sure something stricter is entirely feasible in JS.\n\nAsyncContext currently enforces stack discipline strictly by having a callback-based API.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CJKqLn9nF-B3rIzp599VBk7i5lOtJ7GL2fsnGJ1kHBg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Without a compiler or type system, I'm not sure something stricter is entirely feasible in JS.</blockquote></mx-reply>AsyncContext currently enforces stack discipline strictly by having a callback-based API.","m.mentions":{"user_ids":["@rbuckton:matrix.org","@abotella:igalia.com","@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CJKqLn9nF-B3rIzp599VBk7i5lOtJ7GL2fsnGJ1kHBg"}},"msgtype":"m.text"},"ts":1712857020935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IAf8YeGJboiaGZGDT4QipHflsWLJ7YuNEV8c9UY3Jps"},
{"content":{"body":"but there's real demand for having something \"flatter\"","m.mentions":{},"msgtype":"m.text"},"ts":1712857031512,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3zb0itUPFZygECN9oeuvuCuwX6JkT1ODjF8cquEOvxE"},
{"content":{"body":"you'd do it with a type-aware linter, like typescript-eslint","m.mentions":{},"msgtype":"m.text"},"ts":1712857031907,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EGixnkc9dnDD8DVwx1y7PuXSvw81-MIWzzlVSINg2qY"},
{"content":{"body":"unary plus is such a weird thing to have","msgtype":"m.text"},"ts":1712857051115,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$MUfmiDfSvmNuCnnvxTVKdsm8sFcMSgD585Qekvp4QnI"},
{"content":{"body":" * you'd do it with a type-aware linter, like typescript-eslint. that's already how people catch unawaited promises with the `no-floating-promises` rule.","format":"org.matrix.custom.html","formatted_body":" * you'd do it with a type-aware linter, like typescript-eslint. that's already how people catch unawaited promises with the <code>no-floating-promises</code> rule.","m.mentions":{},"m.new_content":{"body":"you'd do it with a type-aware linter, like typescript-eslint. that's already how people catch unawaited promises with the `no-floating-promises` rule.","format":"org.matrix.custom.html","formatted_body":"you'd do it with a type-aware linter, like typescript-eslint. that's already how people catch unawaited promises with the <code>no-floating-promises</code> rule.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EGixnkc9dnDD8DVwx1y7PuXSvw81-MIWzzlVSINg2qY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712857051225,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EGpi0XZocdrNmLUWKXOGRYDCmo8pHE2y4bNlHSHCig0"},
{"content":{"body":"what was the intention behind its inclusion?","msgtype":"m.text"},"ts":1712857058922,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$enOT0gVBt3ekmhG52tQXY4SIzZtv0ZvLRtiywUkBPP4"},
{"content":{"body":"> <@littledan:matrix.org> you can just call enter and not call dispose, so you'd have unbalanced use of the stack\n\nsure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Wtar4Jp6V9a8XKrrnLnMvDLyDqrtqCPVluj8rezUhZM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>you can just call enter and not call dispose, so you'd have unbalanced use of the stack</blockquote></mx-reply>sure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Wtar4Jp6V9a8XKrrnLnMvDLyDqrtqCPVluj8rezUhZM"}},"msgtype":"m.text"},"ts":1712857066591,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kcp3uyWUO-xge7ktQo5l63cNB1tu6yJ_tIl27uMT0c0"},
{"content":{"body":"I mean, I'm trying to understand how bad the burden of mandatory enforcement would be? I expect the vast majority of the potential future users of this feature have not ported their code yet (or written it, for that matter)","m.mentions":{},"msgtype":"m.text"},"ts":1712857068833,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$fnE6DpLCigVWr2BTH9ks-M8FMrVc8Qx_Xl_NwQrjHCE"},
{"content":{"body":"> <@mhofman:matrix.org> sure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose\n\nDo we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's not something I'm confortable with","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kcp3uyWUO-xge7ktQo5l63cNB1tu6yJ_tIl27uMT0c0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>sure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose</blockquote></mx-reply>Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's not something I'm confortable with","m.mentions":{"user_ids":["@mhofman:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kcp3uyWUO-xge7ktQo5l63cNB1tu6yJ_tIl27uMT0c0"}},"msgtype":"m.text"},"ts":1712857120564,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$priW-yf-oAfa5YTnrecTr_uwg2Klr0TnXpFm1MQ1peQ"},
{"content":{"body":"> <@abotella:igalia.com> We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter\n\nI still do not understand the use case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>We agree that if a user does this, their code is buggy. I don't think that's in discussion. But some use cases need something stricter</blockquote></mx-reply>I still do not understand the use case","m.mentions":{"user_ids":["@abotella:igalia.com","@rbuckton:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ol2U6rj2CPb0xy5vZ17IaIWoJ1_SU9ClvoyR7alF038"}},"msgtype":"m.text"},"ts":1712857123155,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$LIq_9sNI2uBFHJ-BPxb2B3USuzbkcq544Jqx9BhP-IM"},
{"content":{"body":"anyway is there a github issue where I can follow this? I'm splitting my attention between this discussion and Kevin's presentation and it's not working very well üòÑ","m.mentions":{},"msgtype":"m.text"},"ts":1712857136926,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$SXHyIdppt_BufswK6DiRgTycy_-XSu_H76kf_2pZnrk"},
{"content":{"body":"Yes, we can follow up in https://github.com/rbuckton/proposal-using-enforcement/issues/1","m.mentions":{},"msgtype":"m.text"},"ts":1712857165665,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iPJ6axdBWVFGg_QogNXBF0JPdcC6B4-3dzi7Vraakmo"},
{"content":{"body":"> <@pchimento:igalia.com> I mean, I'm trying to understand how bad the burden of mandatory enforcement would be? I expect the vast majority of the potential future users of this feature have not ported their code yet (or written it, for that matter)\n\nIt depends on the definition of mandatory enforcement. There are two approaches: some magic mechanism that indicates to the resource producer the user is initializing to a `using`, or that `using` and `DisposableStack` explicitly call `[Symbol.enter]` and throw if it doesn't exist.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fnE6DpLCigVWr2BTH9ks-M8FMrVc8Qx_Xl_NwQrjHCE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I mean, I&#39;m trying to understand how bad the burden of mandatory enforcement would be? I expect the vast majority of the potential future users of this feature have not ported their code yet (or written it, for that matter)</blockquote></mx-reply>It depends on the definition of mandatory enforcement. There are two approaches: some magic mechanism that indicates to the resource producer the user is initializing to a <code>using</code>, or that <code>using</code> and <code>DisposableStack</code> explicitly call <code>[Symbol.enter]</code> and throw if it doesn't exist.","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fnE6DpLCigVWr2BTH9ks-M8FMrVc8Qx_Xl_NwQrjHCE"}},"msgtype":"m.text"},"ts":1712857197156,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GiSEphiOnHdY-SmnOtAhDN0wyZPAmjTC7YoMZQ93Z0U"},
{"content":{"body":"> <@mhofman:matrix.org> sure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose\n\n * Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kcp3uyWUO-xge7ktQo5l63cNB1tu6yJ_tIl27uMT0c0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>sure, but just don't do that? disposables are not only used syntactically. If you call enter, you accept responsibility to call dispose</blockquote></mx-reply> * Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing","m.mentions":{},"m.new_content":{"body":"Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing","format":"org.matrix.custom.html","formatted_body":"Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing","m.mentions":{"user_ids":["@mhofman:matrix.org","@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$priW-yf-oAfa5YTnrecTr_uwg2Klr0TnXpFm1MQ1peQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712857211194,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-VC8HoCrR41my8mF0-V9_Mr6D-cszlqZsOleWMXv7IQ"},
{"content":{"body":"RequireObjectCoercible -> is an Object","msgtype":"m.text"},"ts":1712857253834,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AeBxDX31xFX_DEdLJ4G-y6C-uj6d27RMAeOazbpE9fI"},
{"content":{"body":"> <@abotella:igalia.com> Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing\n\nOk I think I now understand, and I have ideas on how to do this at the AsyncContext API layer","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$priW-yf-oAfa5YTnrecTr_uwg2Klr0TnXpFm1MQ1peQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>Do we want to allow that to effectively pollute the caller's scope, switching the current context at their function from under their feet? That's something the current AsyncContext proposal explicitly avoids doing</blockquote></mx-reply>Ok I think I now understand, and I have ideas on how to do this at the AsyncContext API layer","m.mentions":{"user_ids":["@abotella:igalia.com","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$priW-yf-oAfa5YTnrecTr_uwg2Klr0TnXpFm1MQ1peQ"}},"msgtype":"m.text"},"ts":1712857269590,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$tRfSYYOd2vpWa1yzGYTj7yhQE7Sz1YHeCwaKptZmLzE"},
{"content":{"body":"A magical mechanism doesn't work with `DisposableStack` and wouldn't allow user-defined resource management building blocks.","format":"org.matrix.custom.html","formatted_body":"A magical mechanism doesn't work with <code>DisposableStack</code> and wouldn't allow user-defined resource management building blocks.","m.mentions":{},"msgtype":"m.text"},"ts":1712857291129,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PUyJzPm3-J8QPiWB4dbHQ6X8eyI9atYgu-AR35O_-Dk"},
{"content":{"body":"lol, core-js used to make Number.prototype iterable","m.mentions":{},"msgtype":"m.text"},"ts":1712857336645,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rpRNQpPb-84nUo0sKmQzg8v8M-zapspKOEh5TDJ_jT8"},
{"content":{"body":"If `[Symbol.enter]` is mandatory, existing APIs would have to write `[Symbol.enter]() { return this; }`, or would need to duplicate the API to one that produces an object with a `[Symbol.enter]()`. API Bifurcation is a documentation and maintenance headache and would break the ability for tools to introduce simple refactors from `const res = ...; try { ... } finally { res.close(); }` to `using res = ...`","format":"org.matrix.custom.html","formatted_body":"If <code>[Symbol.enter]</code> is mandatory, existing APIs would have to write <code>[Symbol.enter]() { return this; }</code>, or would need to duplicate the API to one that produces an object with a <code>[Symbol.enter]()</code>. API Bifurcation is a documentation and maintenance headache and would break the ability for tools to introduce simple refactors from <code>const res = ...; try { ... } finally { res.close(); }</code> to <code>using res = ...</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712857483234,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$as-fLAVQ5h_UaFEp2AQT4C6wcCNBTbkNsAaI1WQ2WAY"},
{"content":{"body":"are we conflating two separate things? I don't think \"true strict enforcement\" necessarily means a mandatory `[Symbol.enter]`","format":"org.matrix.custom.html","formatted_body":"are we conflating two separate things? I don't think \"true strict enforcement\" necessarily means a mandatory <code>[Symbol.enter]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712857552718,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RxPyS7_5B1bDM27X6GSwBfW5HI0mU8uUn_aCYENe2jA"},
{"content":{"body":"For examples of existing APIs that could be adapted to support `[Symbol.dispose]`, see https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis and https://github.com/tc39/proposal-explicit-resource-management?tab=readme-ov-file#relation-to-nodejs-apis","format":"org.matrix.custom.html","formatted_body":"For examples of existing APIs that could be adapted to support <code>[Symbol.dispose]</code>, see https://github.com/tc39/proposal-explicit-resource-management#relation-to-dom-apis and https://github.com/tc39/proposal-explicit-resource-management?tab=readme-ov-file#relation-to-nodejs-apis","m.mentions":{},"msgtype":"m.text"},"ts":1712857597450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SApTeIkftWBrlO6VfvmsQ4D50rF_rYI6Lohi5Vcq0Tg"},
{"content":{"body":"> <@abotella:igalia.com> are we conflating two separate things? I don't think \"true strict enforcement\" necessarily means a mandatory `[Symbol.enter]`\n\nWhat would you consider to be \"true strict enforcement\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RxPyS7_5B1bDM27X6GSwBfW5HI0mU8uUn_aCYENe2jA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>are we conflating two separate things? I don't think \"true strict enforcement\" necessarily means a mandatory <code>[Symbol.enter]</code></blockquote></mx-reply>What would you consider to be \"true strict enforcement\"?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RxPyS7_5B1bDM27X6GSwBfW5HI0mU8uUn_aCYENe2jA"}},"msgtype":"m.text"},"ts":1712857610262,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8jxDcqWUoXM2DY8M8kN4psydxuS6VSjB7f5ohfJJ9uQ"},
{"content":{"body":"> <@rbuckton:matrix.org> A magical mechanism doesn't work with `DisposableStack` and wouldn't allow user-defined resource management building blocks.\n\n^ this \"magical mechanism\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PUyJzPm3-J8QPiWB4dbHQ6X8eyI9atYgu-AR35O_-Dk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>A magical mechanism doesn't work with <code>DisposableStack</code> and wouldn't allow user-defined resource management building blocks.</blockquote></mx-reply>^ this \"magical mechanism\"","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PUyJzPm3-J8QPiWB4dbHQ6X8eyI9atYgu-AR35O_-Dk"}},"msgtype":"m.text"},"ts":1712857634866,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$EYB-M3Va8Nw5Kj-o-RB64t9H1dR47s9dDa96wVhDw9I"},
{"content":{"body":"Can you conceive of a magical mechanism that works with both `using` and `DisposableStack` and user-defined resource management wrapper classes?","format":"org.matrix.custom.html","formatted_body":"Can you conceive of a magical mechanism that works with both <code>using</code> and <code>DisposableStack</code> and user-defined resource management wrapper classes?","m.mentions":{},"msgtype":"m.text"},"ts":1712857684742,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mDkP29cyPX0_IFqm2a7NF6ww5jAx2mCh6xAO1IrssfE"},
{"content":{"body":"I don't have an alternative, but I think that issue has been conflated with the mandatoryness of `[Symbol.enter]`","format":"org.matrix.custom.html","formatted_body":"I don't have an alternative, but I think that issue has been conflated with the mandatoryness of <code>[Symbol.enter]</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712857738458,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Aoao9RHfWxYCD-9tc4FCc5BDyk8K3mCjcp2CPEtpX8E"},
{"content":{"body":"for example, if there were a `function.using` meta-property accessible within a function that is only `true` when being initialized to a `using`, how would that work with `DisposableStack.prototype.use`?","format":"org.matrix.custom.html","formatted_body":"for example, if there were a <code>function.using</code> meta-property accessible within a function that is only <code>true</code> when being initialized to a <code>using</code>, how would that work with <code>DisposableStack.prototype.use</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712857762179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DkeA90RLW27F_P8gaNd4QnAELggBzfYmwjFBeHqx91M"},
{"content":{"body":"I wasn't trying to conflate strict enforcement with mandatory enforcement. They are mostly separate concerns.","m.mentions":{},"msgtype":"m.text"},"ts":1712857818926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N6JsVHqlHaOrw_Rvy9T5vegSMAMMuIykojdLSC8kBuk"},
{"content":{"body":"I'm bouncing between two different discussions","m.mentions":{},"msgtype":"m.text"},"ts":1712857856894,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D43CzokGBBIpWlJAIyg9wG4pN3yCmQP8-vke54_mZGM"},
{"content":{"body":"that was much faster than I was expecting!","m.mentions":{},"msgtype":"m.text"},"ts":1712857898093,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$phdOiGPyi7Ex88Nu-fSg6o6_F1ufdO2EkTv1u6QCDzw"},
{"content":{"body":"Mandatory enforcement is a concern for API bifurcation. In general I don't believe mandatory enforcement is necessary, API producers should be able to opt-in or opt-out of enforcement, as should API consumers. ","m.mentions":{},"msgtype":"m.text"},"ts":1712857970329,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5s9Xf2lu6uimwUXeGbgWALAuJYzomtLfMKD_YjE7fvo"},
{"content":{"body":"API producers need an opt-out mechanism for existing APIs or for APIs that don't require such a guarantee. API consumers need an opt-out mechanism so they can compose disposables in their own classes and extend resource management capabilities in userland.","m.mentions":{},"msgtype":"m.text"},"ts":1712858086119,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yknxPqdSXeWMNveAdrv57KpYrdAzTOsgzOxgBU09e_w"},
{"content":{"body":"Agree, mandatory use of `enter` is necessary.","format":"org.matrix.custom.html","formatted_body":"Agree, mandatory use of <code data-md=\"`\">enter</code> is necessary.","msgtype":"m.text"},"ts":1712858100130,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oMGr7YN90MyquiPeVapfelSvdUO1zzQJL6VcdqshP6k"},
{"content":{"body":"But for APIs that choose to have an `enter`, some require much stricter requirements.","format":"org.matrix.custom.html","formatted_body":"But for APIs that choose to have an <code data-md=\"`\">enter</code>, some require much stricter requirements.","msgtype":"m.text"},"ts":1712858116404,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Qkd9ZToiSxDa4NW-Cyna36TXt2BgVLJTnnFJ8Ww-xBU"},
{"content":{"body":"(I still need to read https://github.com/rbuckton/proposal-using-enforcement/issues/1)","msgtype":"m.text"},"ts":1712858123956,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LZaycUqEJrw6Zg6bpR_bXzIKlAQZ83v6EE7Rfv4CZis"},
{"content":{"body":"> <@jridgewell:matrix.org> Agree, mandatory use of `enter` is necessary.\n\nWhat are you agreeing with?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oMGr7YN90MyquiPeVapfelSvdUO1zzQJL6VcdqshP6k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Agree, mandatory use of <code data-md=\"`\">enter</code> is necessary.</blockquote></mx-reply>What are you agreeing with?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oMGr7YN90MyquiPeVapfelSvdUO1zzQJL6VcdqshP6k"}},"msgtype":"m.text"},"ts":1712858127853,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VOhAvg1ko4v5v_idVEQoBsCdLwVqGLrvRJLluPKWsUo"},
{"content":{"body":"But ideally we‚Äôd only allow syntatic `using`.","format":"org.matrix.custom.html","formatted_body":"But ideally we‚Äôd only allow syntatic <code data-md=\"`\">using</code>.","msgtype":"m.text"},"ts":1712858134756,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NyTcC6IJWt55SHRVpWPUI2vPbV-mjE8ek7sIBOUg8Fk"},
{"content":{"body":"> <@rbuckton:matrix.org> Mandatory enforcement is a concern for API bifurcation. In general I don't believe mandatory enforcement is necessary, API producers should be able to opt-in or opt-out of enforcement, as should API consumers. \n\nI was agreeing with this.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%245s9Xf2lu6uimwUXeGbgWALAuJYzomtLfMKD_YjE7fvo\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />Mandatory enforcement is a concern for API bifurcation. In general I don&#39;t believe mandatory enforcement is necessary, API producers should be able to opt-in or opt-out of enforcement, as should API consumers. </blockquote></mx-reply>I was agreeing with this.","m.relates_to":{"m.in_reply_to":{"event_id":"$5s9Xf2lu6uimwUXeGbgWALAuJYzomtLfMKD_YjE7fvo"}},"msgtype":"m.text"},"ts":1712858149940,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nBzh7Ep_TnSrZAuF0-0I50FwQLdWfulkmd7Du9ZaZgQ"},
{"content":{"body":"I believe `Symbol.enter` is optional, for those APIs that need it.","format":"org.matrix.custom.html","formatted_body":"I believe <code>Symbol.enter</code> is optional, for those APIs that need it.","m.mentions":{},"msgtype":"m.text"},"ts":1712858156411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IpC33to83_EBUP4m7tBd8KrKgltSBqybIcAT6ZBrGwA"},
{"content":{"body":"Syntactic super powers make me feel suspicious","m.mentions":{},"msgtype":"m.text"},"ts":1712858166915,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$s_zwhjfO_fydDYtf-8fs4JxR6y-6UxjKmxvInwnG1Hg"},
{"content":{"body":"We can't only have syntactic using.","m.mentions":{},"msgtype":"m.text"},"ts":1712858172180,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-wQVUVlJBxhdCgZNJMtnXwybNbqcQURO4UMXTmsBLlM"},
{"content":{"body":"You absolutely need composition.","m.mentions":{},"msgtype":"m.text"},"ts":1712858190206,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_OKrrVqIjMD8DGE4YwhCDBfLiZiDEPq1EjcQFuCfgxQ"},
{"content":{"body":"`AsyncContext` demands knowing whether you‚Äôre using `using` syntatically, using `DisposableStack` (bad), or manually calling (even worse).","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">AsyncContext</code> demands knowing whether you‚Äôre using <code data-md=\"`\">using</code> syntatically, using <code data-md=\"`\">DisposableStack</code> (bad), or manually calling (even worse).","msgtype":"m.text"},"ts":1712858217169,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ae9OD5XsWwMyA0jCnrdLruumd-o_W794wb60H1T3kwU"},
{"content":{"body":"I don't think this use case requires such a capability. I'll write down my idea after plenary","m.mentions":{},"msgtype":"m.text"},"ts":1712858241719,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ZRlHxDKU0-p580ERNb-tLpyD4Rmv55zgOzcM02n0P1A"},
{"content":{"body":"why is `DisposableStack` bad?","format":"org.matrix.custom.html","formatted_body":"why is <code>DisposableStack</code> bad?","m.mentions":{},"msgtype":"m.text"},"ts":1712858271147,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2S4Q6EkQBo8ytf2RIrauHYBz17Uun2M5dNUpJYqymjk"},
{"content":{"body":"Only syntatic `using` guarantees returning the context stack to the appropriate state.","format":"org.matrix.custom.html","formatted_body":"Only syntatic <code data-md=\"`\">using</code> guarantees returning the context stack to the appropriate state.","msgtype":"m.text"},"ts":1712858281682,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$afWyX0C9EGixyyW6XGmfIWxu-dS8WnG9DYJly-XyMhw"},
{"content":{"body":"Nope there are alternatives","m.mentions":{},"msgtype":"m.text"},"ts":1712858296796,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oxG2coHAnvNKPOWsMTiFNJzUJWEbmhVrW9QsN8DpYC8"},
{"content":{"body":"`DisposableStack` may not be disposed.","format":"org.matrix.custom.html","formatted_body":"<code data-md=\"`\">DisposableStack</code> may not be disposed.","msgtype":"m.text"},"ts":1712858299486,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2RVWUsHI2VvnV5eysFphyUgtsmLh3ixeIKXDg6hH9Wg"},
{"content":{"body":"Or it‚Äôs disposed later.","msgtype":"m.text"},"ts":1712858311003,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OBtYj_KUJvbd-b1XVFoPsB4pd-RU_bXmPkPRqM6Wd24"},
{"content":{"body":"In which case the caller has been polluted.","msgtype":"m.text"},"ts":1712858318183,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RYmpAjc7QLVxKUN3gHzR0wO84dQrTqElAU4xwUeL158"},
{"content":{"body":"you can do a hybrid by introducing a single new stack entry","m.mentions":{},"msgtype":"m.text"},"ts":1712858324443,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8op7ZG_ui9kDaP3-09mn17YZyiO3WnnuqEQebwrISkE"},
{"content":{"body":"Either way, it doesn‚Äôt work.","msgtype":"m.text"},"ts":1712858325539,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Srj2ICsks_vL8I0MBnpFzCetdyS5yQJbkFxFYAM0UV8"},
{"content":{"body":"My point with opening that issue is to point out that there are use cases that need something stricter. I would be fine with the proposal simply not supporting that, and using callbacks.","m.mentions":{},"msgtype":"m.text"},"ts":1712858373080,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6SP_MbYk68FYi0uFS_GBGAKs-LyyH01stt35pkRF8y8"},
{"content":{"body":"`DisposableStack`, or any other composition mechanism, is a necessity for building applications that work with resources.","format":"org.matrix.custom.html","formatted_body":"<code>DisposableStack</code>, or any other composition mechanism, is a necessity for building applications that work with resources.","m.mentions":{},"msgtype":"m.text"},"ts":1712858376656,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rFGDG554y7VBiCb4gEGiZaGhiukEhDKm60JczKp674I"},
{"content":{"body":"I‚Äôm not arguing against `DisposableStack` in general.","format":"org.matrix.custom.html","formatted_body":"I‚Äôm not arguing against <code data-md=\"`\">DisposableStack</code> in general.","msgtype":"m.text"},"ts":1712858394050,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wlOPt_Wq0jupceOTF5PrLIULh4LfT-KMLTDtc_nELeM"},
{"content":{"body":"But it‚Äôs not acceptable for `AsyncContext`.","format":"org.matrix.custom.html","formatted_body":"But it‚Äôs not acceptable for <code data-md=\"`\">AsyncContext</code>.","msgtype":"m.text"},"ts":1712858408286,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1ujaJnc7TjyQH3v4g4R-F00CLfCs3W3A5Yo6aqCCfn8"},
{"content":{"body":"I only have a very rough idea of the use case for `AsyncContext` you're concerned about.","format":"org.matrix.custom.html","formatted_body":"I only have a very rough idea of the use case for <code>AsyncContext</code> you're concerned about.","m.mentions":{},"msgtype":"m.text"},"ts":1712858462614,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Hu-qz6n8y9Nh9iWtIi_T93WVFuwdtG9SLP4ulKHqpV8"},
{"content":{"body":"ljharb: should `Array.zip` zip iterables or arrays or array-likes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: should <code>Array.zip</code> zip iterables or arrays or array-likes?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1712858467828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C5naovJiJw_XDL-xy6b8H4xc0bN_1D3CE2DFHN2yHok"},
{"content":{"body":"I think I need more context.","m.mentions":{},"msgtype":"m.text"},"ts":1712858472649,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QgCplxgkmmroP-ko23wEOrfVhvLSFZjs7KsTvPdBC6g"},
{"content":{"body":"presumably array-likes?","m.mentions":{},"msgtype":"m.text"},"ts":1712858483036,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$j-YPhAJY1p2eGwiKCa_mOARR4_wlHejmFsvg1YVZ1Q4"},
{"content":{"body":"iirc all the array things, except Array.from/fromAsync, take \"arraylikes\" only (which includes arrays)","m.mentions":{},"msgtype":"m.text"},"ts":1712858498158,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yFhV27FIdAlzZstX7Ois4Kc6UZcVpAtLJpziHcL035o"},
{"content":{"body":"and of course it will produce an array rather than an iterator","m.mentions":{},"msgtype":"m.text"},"ts":1712858504449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jc5_zXsnKOWrw_Rkdtf66LHTF0IBPHy4qkhb-yjUciY"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1712858514699,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DgEd2YJoiDyTrZS3BX6V3kS7GNcDNWrt4PvFA23mbpI"},
{"content":{"body":"The stack frame requirement comes from the use case (AsyncContext). It happens that `using` is a close concept: scope. I will provide an example of API that satisfies the use case without making `using` required","format":"org.matrix.custom.html","formatted_body":"The stack frame requirement comes from the use case (AsyncContext). It happens that <code>using</code> is a close concept: scope. I will provide an example of API that satisfies the use case without making <code>using</code> required","m.mentions":{},"msgtype":"m.text"},"ts":1712858524540,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KvVNcKoNRWs5HWgPMj0nIPLPcAbij5TxS5fz7Krf5vQ"},
{"content":{"body":"i don't *mind* if it takes iteratables, but at that point `Array.zip(iterable)` is just sugar for `Iterator.zip(iterable).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":"i don't <em>mind</em> if it takes iteratables, but at that point <code>Array.zip(iterable)</code> is just sugar for <code>Iterator.zip(iterable).toArray()</code> which isn't that valuable","m.mentions":{},"msgtype":"m.text"},"ts":1712858534366,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JewTBu02pUl6Bb1wIhV0II2j3H-3-8dSw5gg9Z6jMXc"},
{"content":{"body":" * i don't _mind_ if it takes iterables, but at that point `Array.zip(iterable)` is just sugar for `Iterator.zip(iterable).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":" * i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(iterable)</code> is just sugar for <code>Iterator.zip(iterable).toArray()</code> which isn't that valuable","m.mentions":{},"m.new_content":{"body":"i don't _mind_ if it takes iterables, but at that point `Array.zip(iterable)` is just sugar for `Iterator.zip(iterable).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":"i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(iterable)</code> is just sugar for <code>Iterator.zip(iterable).toArray()</code> which isn't that valuable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JewTBu02pUl6Bb1wIhV0II2j3H-3-8dSw5gg9Z6jMXc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712858538703,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GjanOFAof-9pU09ni5DuZYbqK_4GsCjX7uKosHWhTn0"},
{"content":{"body":" * i don't _mind_ if it takes iterables, but at that point `Array.zip(...iterables)` is just sugar for `Iterator.zip(...iterables).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":" * i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(...iterables)</code> is just sugar for <code>Iterator.zip(...iterables).toArray()</code> which isn't that valuable","m.mentions":{},"m.new_content":{"body":"i don't _mind_ if it takes iterables, but at that point `Array.zip(...iterables)` is just sugar for `Iterator.zip(...iterables).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":"i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(...iterables)</code> is just sugar for <code>Iterator.zip(...iterables).toArray()</code> which isn't that valuable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JewTBu02pUl6Bb1wIhV0II2j3H-3-8dSw5gg9Z6jMXc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712858554638,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K0RtG21qc58mArmiTz2Edy3jN_jN6xYO0PdlNWSs63E"},
{"content":{"body":"> <@rbuckton:matrix.org> I think I need more context.\n\nI‚Äôll provide details in the #1 issue later today","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24QgCplxgkmmroP-ko23wEOrfVhvLSFZjs7KsTvPdBC6g\">In reply to</a><a href=\"https://matrix.to/#/%40rbuckton%3Amatrix.org\">@rbuckton:matrix.org</a><br />I think I need more context.</blockquote></mx-reply>I‚Äôll provide details in the #1 issue later today","m.relates_to":{"m.in_reply_to":{"event_id":"$QgCplxgkmmroP-ko23wEOrfVhvLSFZjs7KsTvPdBC6g"}},"msgtype":"m.text"},"ts":1712858580142,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FB9qUNkUAY_nT3hdQ0sWZm3-wA-GYkXvPrPhv5OQ0tI"},
{"content":{"body":"(it's `.zip(iterables)` not a var-args, to be clear)","format":"org.matrix.custom.html","formatted_body":"(it's <code>.zip(iterables)</code> not a var-args, to be clear)","m.mentions":{},"msgtype":"m.text"},"ts":1712858622972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oAWfvMix-mVoktsAk_VZiQMixo-wq9YZkM9fY6JPtPY"},
{"content":{"body":" * i don't _mind_ if it takes iterables, but at that point `Array.zip(iterables)` is just sugar for `Iterator.zip(iterables).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":" * i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(iterables)</code> is just sugar for <code>Iterator.zip(iterables).toArray()</code> which isn't that valuable","m.mentions":{},"m.new_content":{"body":"i don't _mind_ if it takes iterables, but at that point `Array.zip(iterables)` is just sugar for `Iterator.zip(iterables).toArray()` which isn't that valuable","format":"org.matrix.custom.html","formatted_body":"i don't <em>mind</em> if it takes iterables, but at that point <code>Array.zip(iterables)</code> is just sugar for <code>Iterator.zip(iterables).toArray()</code> which isn't that valuable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JewTBu02pUl6Bb1wIhV0II2j3H-3-8dSw5gg9Z6jMXc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712858652045,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bL8mtV6llQc9BjCSW3yms6-ReE4FBwEC52VjOboR3Ck"},
{"content":{"body":"this seems like it will be a useful place to Stop Coercing Things, so that `{ optionsbag }` isn't treated as an array-like of length 0","format":"org.matrix.custom.html","formatted_body":"this seems like it will be a useful place to Stop Coercing Things, so that <code>{ optionsbag }</code> isn't treated as an array-like of length 0","m.mentions":{},"msgtype":"m.text"},"ts":1712858711712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BVZUZJdwqS__KLCX404rhYpzUSd-OAFARwEUQTZgM6M"},
{"content":{"body":"```\nlet x\n(a) = b;\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>let x\n(a) = b;\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712858969662,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$utvo70v92K8Ik3THUleCxTEzwt2sTu8UuV0Tvpi9Khc"},
{"content":{"body":" * WH's example:\n```\nlet x\n(a) = b;\n```","format":"org.matrix.custom.html","formatted_body":" * <p>WH's example:</p>\n<pre><code>let x\n(a) = b;\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"WH's example:\n```\nlet x\n(a) = b;\n```","format":"org.matrix.custom.html","formatted_body":"<p>WH's example:</p>\n<pre><code>let x\n(a) = b;\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$utvo70v92K8Ik3THUleCxTEzwt2sTu8UuV0Tvpi9Khc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712858992672,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r5woyDfhHuYNWwbEM9PIVHCzw-XHl46acscpPOy4n9M"},
{"content":{"body":"`let` strikes again, I hate it","format":"org.matrix.custom.html","formatted_body":"<code>let</code> strikes again, I hate it","m.mentions":{},"msgtype":"m.text"},"ts":1712859013660,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wk6fPcw56iw_OSOj2KNNPnrwhkWcg5s9kjnWX6yOr3E"},
{"content":{"body":"an NLTH between the identifier and the `(` seems fine to me","format":"org.matrix.custom.html","formatted_body":"an NLTH between the identifier and the <code>(</code> seems fine to me","m.mentions":{},"msgtype":"m.text"},"ts":1712859020753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1VN5RR-VlO0gBfEcDnueehmsNeyxEoavpLfAWmByk3I"},
{"content":{"body":" * an NLTH between the identifier and the `(` seems fine to me, just for extractors","format":"org.matrix.custom.html","formatted_body":" * an NLTH between the identifier and the <code>(</code> seems fine to me, just for extractors","m.mentions":{},"m.new_content":{"body":"an NLTH between the identifier and the `(` seems fine to me, just for extractors","format":"org.matrix.custom.html","formatted_body":"an NLTH between the identifier and the <code>(</code> seems fine to me, just for extractors","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1VN5RR-VlO0gBfEcDnueehmsNeyxEoavpLfAWmByk3I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712859028518,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$M4N2ejw0VNdkeEI2z6mohl9ZhoUOKnCBjjkZPAgNGA8"},
{"content":{"body":"the line break restriction is also bad, I want to write\n\n```\nlet Foo\n  (long extractor pattern) = RHS\n```","format":"org.matrix.custom.html","formatted_body":"<p>the line break restriction is also bad, I want to write</p>\n<pre><code>let Foo\n  (long extractor pattern) = RHS\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712859043818,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1klsxiBPJukV3XHWC67dbqqjXGS0Y2_M8DgaV-DsIh8"},
{"content":{"body":"i don't have empathy for folks who want to write calls like\n```\nfn\n(a, b)\n```","format":"org.matrix.custom.html","formatted_body":"<p>i don't have empathy for folks who want to write calls like</p>\n<pre><code>fn\n(a, b)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712859046630,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YsdbhwT9c9X1OQZ9YR1nGO71vm-YBRNkXMz_zNA6wBw"},
{"content":{"body":"lol","m.mentions":{},"msgtype":"m.text"},"ts":1712859050246,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Mni1H26BAxai6CaxeQpiGktKu_uRs_pTn_mQy2gyseo"},
{"content":{"body":"i'd expect there to see\n```\nlet Foo(\n  long extractor pattern\n) = RHS\n```","format":"org.matrix.custom.html","formatted_body":"<p>i'd expect there to see</p>\n<pre><code>let Foo(\n  long extractor pattern\n) = RHS\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712859066953,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fu5NWASV857jTDZ3n9p9VaSYtg8Gj7U0jkbJMNd-MlY"},
{"content":{"body":"extractors are extremely limited in their syntax; this seems way more minor than the other parts","m.mentions":{},"msgtype":"m.text"},"ts":1712859067812,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PRbI_4vceaAm2FTOdDJpEImMp0jsrT5_LxUQC8NdA_c"},
{"content":{"body":"> <@ljharb:matrix.org> i'd expect there to see\n> ```\n> let Foo(\n>   long extractor pattern\n> ) = RHS\n> ```\n\nI don't think Waldemar's case runs into that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Fu5NWASV857jTDZ3n9p9VaSYtg8Gj7U0jkbJMNd-MlY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>i'd expect there to see</p>\n<pre><code>let Foo(\n  long extractor pattern\n) = RHS\n</code></pre>\n</blockquote></mx-reply>I don't think Waldemar's case runs into that","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Fu5NWASV857jTDZ3n9p9VaSYtg8Gj7U0jkbJMNd-MlY"}},"msgtype":"m.text"},"ts":1712859079281,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M92vr53hoXtshp41gQaGizOqabagAsK_uTqf2Nx73W4"},
{"content":{"body":"I think we're just talking about between `Foo` and `)`","format":"org.matrix.custom.html","formatted_body":"I think we're just talking about between <code>Foo</code> and <code>)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712859106593,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fig9JiG3Yh3IWKsJDaqBoncYsWVvnpy2dpNAEbiGOIQ"},
{"content":{"body":"true, it's only if the extractor pattern looks like a valid parenthesized LHS?","m.mentions":{},"msgtype":"m.text"},"ts":1712859110926,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dQ2PltZn3ycpYkWN3e_ZpYq2oa0HTbMdyRG7vBS1fXc"},
{"content":{"body":"(I don't understand the question)","m.mentions":{},"msgtype":"m.text"},"ts":1712859139015,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ijGLMQ4c3NYsgQKRE48wA5xzVnaYRcEe73PTi1r1BIE"},
{"content":{"body":"man ASI is just the worst","m.mentions":{},"msgtype":"m.text"},"ts":1712859178527,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ"},
{"content":{"body":"like i think waldemar's ambiguity pops up only when the extractor pattern is a valid thing to be in a `(reference) =` usage","format":"org.matrix.custom.html","formatted_body":"like i think waldemar's ambiguity pops up only when the extractor pattern is a valid thing to be in a <code>(reference) =</code> usage","m.mentions":{},"msgtype":"m.text"},"ts":1712859179447,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$48OY_4c8NdIP-02ip8PJmwPwcKWYUPcFcpNRtGdOkHs"},
{"content":{"body":"eg, `(x) = 3` is currently valid, `(x, y) = 3` is not","format":"org.matrix.custom.html","formatted_body":"eg, <code>(x) = 3</code> is currently valid, <code>(x, y) = 3</code> is not","m.mentions":{},"msgtype":"m.text"},"ts":1712859192059,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$fRKMjzrntoxnfGoHVyamAF9TdW5_fCSFvohtj71SKzM"},
{"content":{"body":" * eg, `(x) = 3` is currently valid, `(x, y) = 3` is not, so only the former has the conflict","format":"org.matrix.custom.html","formatted_body":" * eg, <code>(x) = 3</code> is currently valid, <code>(x, y) = 3</code> is not, so only the former has the conflict","m.mentions":{},"m.new_content":{"body":"eg, `(x) = 3` is currently valid, `(x, y) = 3` is not, so only the former has the conflict","format":"org.matrix.custom.html","formatted_body":"eg, <code>(x) = 3</code> is currently valid, <code>(x, y) = 3</code> is not, so only the former has the conflict","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fRKMjzrntoxnfGoHVyamAF9TdW5_fCSFvohtj71SKzM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712859199741,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sAXk_RRS5Kut1XptWvZSnvXUG2AoEKqzOWPL2mJLy9I"},
{"content":{"body":"and we couldn't even agree to *suggest people avoid it*","format":"org.matrix.custom.html","formatted_body":"and we couldn't even agree to <em>suggest people avoid it</em>","m.mentions":{},"m.relates_to":{"event_id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712859214078,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HBbEk32GMk_dow8oqy5_qMQdnbeJisBSBuFCacYmy2I"},
{"content":{"body":" * eg, `(x) = 3` is currently valid, `(x, y) = 3` is not, so only the former has the conflict, afaict","format":"org.matrix.custom.html","formatted_body":" * eg, <code>(x) = 3</code> is currently valid, <code>(x, y) = 3</code> is not, so only the former has the conflict, afaict","m.mentions":{},"m.new_content":{"body":"eg, `(x) = 3` is currently valid, `(x, y) = 3` is not, so only the former has the conflict, afaict","format":"org.matrix.custom.html","formatted_body":"eg, <code>(x) = 3</code> is currently valid, <code>(x, y) = 3</code> is not, so only the former has the conflict, afaict","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fRKMjzrntoxnfGoHVyamAF9TdW5_fCSFvohtj71SKzM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712859232813,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lVA_gBb0A-KmbRSt342elljGDHMyPHKv4viS5ZJRcks"},
{"content":{"body":"we actually *did* agree to suggest people avoid it! and then took it back","format":"org.matrix.custom.html","formatted_body":"we actually <em>did</em> agree to suggest people avoid it! and then took it back","m.mentions":{},"m.relates_to":{"event_id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$HBbEk32GMk_dow8oqy5_qMQdnbeJisBSBuFCacYmy2I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712859241728,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X35vnzyVFLNlCgHT0Jzq2QolqDLa9tn08nX4kB4MPGY"},
{"content":{"body":"fax","m.mentions":{},"m.relates_to":{"event_id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$X35vnzyVFLNlCgHT0Jzq2QolqDLa9tn08nX4kB4MPGY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712859266202,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RerdWxZKAT-JCq13qsrbuZDtFC6p-rfF170KipWPTdQ"},
{"content":{"body":"i guess our decision got a second-pass","m.mentions":{},"m.relates_to":{"event_id":"$GtAlgx597A07yyKUZYXmpdcagzYGmfkhcXcP7_KsnGQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$RerdWxZKAT-JCq13qsrbuZDtFC6p-rfF170KipWPTdQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712859279826,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UXnY7swRuLBsspt_1x50uNl9hEzcmR9jDDWGsE_heFc"},
{"content":{"body":"I wish we required you to start your arrow functions with a `^` or something","format":"org.matrix.custom.html","formatted_body":"I wish we required you to start your arrow functions with a <code>^</code> or something","m.mentions":{},"msgtype":"m.text"},"ts":1712859281201,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MF-a4pUen_48md-h60SSOITDZdQ_5glD-Tm_sQIf6XE"},
{"content":{"body":" * eg, `(x) = 3` and `(x.y) = 3` are currently valid, `(x, y) = 3` is not, so only the former have the conflict, afaict","format":"org.matrix.custom.html","formatted_body":" * eg, <code>(x) = 3</code> and <code>(x.y) = 3</code> are currently valid, <code>(x, y) = 3</code> is not, so only the former have the conflict, afaict","m.mentions":{},"m.new_content":{"body":"eg, `(x) = 3` and `(x.y) = 3` are currently valid, `(x, y) = 3` is not, so only the former have the conflict, afaict","format":"org.matrix.custom.html","formatted_body":"eg, <code>(x) = 3</code> and <code>(x.y) = 3</code> are currently valid, <code>(x, y) = 3</code> is not, so only the former have the conflict, afaict","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fRKMjzrntoxnfGoHVyamAF9TdW5_fCSFvohtj71SKzM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712859292544,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MLqI_cViG9nu3SLEPTOFsNyHJEO0W4i6hqhu8b_TZXM"},
{"content":{"body":"but now I'm dreaming of other possible uses for prefix ^","m.mentions":{},"msgtype":"m.text"},"ts":1712859300392,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7wtPZdvB-Px0iV28010BTMZPx8ddI727KWoIdLOrdBE"},
{"content":{"body":"(parenthesized assignment LHS's are gross also)","m.mentions":{},"msgtype":"m.text"},"ts":1712859312886,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MmJRLMfuNjNL0UIptZVlor1jfgJkJx_QtvIH-A_IVu8"},
{"content":{"body":"`(x, y) = 3 technically doesn't but introducing a cover grammar which could distinguish those would be a nightmare","m.mentions":{},"msgtype":"m.text"},"ts":1712859363866,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tLobakDBJPhirPXUQVXftezPyXu571qbWC4QpBJLH14"},
{"content":{"body":" * `(x, y) = 3` technically doesn't but introducing a cover grammar which could distinguish those would be a nightmare","format":"org.matrix.custom.html","formatted_body":" * <code>(x, y) = 3</code> technically doesn't but introducing a cover grammar which could distinguish those would be a nightmare","m.mentions":{},"m.new_content":{"body":"`(x, y) = 3` technically doesn't but introducing a cover grammar which could distinguish those would be a nightmare","format":"org.matrix.custom.html","formatted_body":"<code>(x, y) = 3</code> technically doesn't but introducing a cover grammar which could distinguish those would be a nightmare","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$tLobakDBJPhirPXUQVXftezPyXu571qbWC4QpBJLH14","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712859367868,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PYQa7N2AgHUQnCk2sxEeRDi8R5Y2s3TMsTdcPXh4n2c"},
{"content":{"body":"but as long as we say that extractors are only an identifier followed by a no-newline `(`, then i think the problem's solved?","format":"org.matrix.custom.html","formatted_body":"but as long as we say that extractors are only an identifier followed by a no-newline <code>(</code>, then i think the problem's solved?","m.mentions":{},"msgtype":"m.text"},"ts":1712859451667,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$8txGGrTQpStMnCswzKbm1oDzFJquFdxVn23Zcah8Xxs"},
{"content":{"body":"As I understand it, Waldemar's concern is this:\n\n```\nlet a\n(b) = {};\n```","format":"org.matrix.custom.html","formatted_body":"<p>As I understand it, Waldemar's concern is this:</p>\n<pre><code>let a\n(b) = {};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712859473658,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BBJIiv8Gl3ugJIa-LuAkia_oYMP-SFNtYrsXcdDsHak"},
{"content":{"body":"Did Extractors advance to Stage 2? I wasn't clear if all blocking concerns were withdrawn.","m.mentions":{},"msgtype":"m.text"},"ts":1712859483202,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$o1w52geMMU5gfmWynDhAqYgybI3y5AbONSAFSVbbzco"},
{"content":{"body":"I don't believe it did, no.","m.mentions":{},"msgtype":"m.text"},"ts":1712859501395,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9WbM0lHnvaWSy9l6s3llXlGb4UshA5bMWzvSLpnr5wk"},
{"content":{"body":"> <@dminor:mozilla.org> Did Extractors advance to Stage 2? I wasn't clear if all blocking concerns were withdrawn.\n\nExtractors did not advance to Stage 2. The sole blocking concern was the NLT issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o1w52geMMU5gfmWynDhAqYgybI3y5AbONSAFSVbbzco?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>Did Extractors advance to Stage 2? I wasn&#39;t clear if all blocking concerns were withdrawn.</blockquote></mx-reply>Extractors did not advance to Stage 2. The sole blocking concern was the NLT issue.","m.mentions":{"user_ids":["@dminor:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o1w52geMMU5gfmWynDhAqYgybI3y5AbONSAFSVbbzco"}},"msgtype":"m.text"},"ts":1712859505798,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XZBhnpWOhGmtKhI1GSIen7ztT6-P1oe_NfKhp7o5EXc"},
{"content":{"body":"> <@littledan:matrix.org> I wish we required you to start your arrow functions with a `^` or something\n\nbackslash surely","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24MF-a4pUen_48md-h60SSOITDZdQ_5glD-Tm_sQIf6XE\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />I wish we required you to start your arrow functions with a <code>^</code> or something</blockquote></mx-reply>backslash surely","m.relates_to":{"m.in_reply_to":{"event_id":"$MF-a4pUen_48md-h60SSOITDZdQ_5glD-Tm_sQIf6XE"}},"msgtype":"m.text"},"ts":1712859508400,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gm4oLcC1Opejo0USFxykXHZgvzp93b_bk0-eMTIDXWU"},
{"content":{"body":"Ok, thank you.","m.mentions":{},"msgtype":"m.text"},"ts":1712859513052,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$WNq9-GU_P40UHdQZ07u8UfYBUJDz-onjwoI3mQXDANk"},
{"content":{"body":"> <@michaelficarra:matrix.org> backslash surely\n\n,\\","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gm4oLcC1Opejo0USFxykXHZgvzp93b_bk0-eMTIDXWU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>backslash surely</blockquote></mx-reply>,\\","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gm4oLcC1Opejo0USFxykXHZgvzp93b_bk0-eMTIDXWU"}},"msgtype":"m.text"},"ts":1712859526533,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K3DhjSOKIGVwUFponba3eKnMhh2S0vpt-pdyYHo_WYk"},
{"content":{"body":"It sounded like the cover grammar complexity might not be blocking, but the NLT issue is still a concern.","m.mentions":{},"msgtype":"m.text"},"ts":1712859527236,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AANE3E69F17hyhQdQOatNld0Bdc7JWAu3I7saA4oNuU"},
{"content":{"body":"> <@rbuckton:matrix.org> It sounded like the cover grammar complexity might not be blocking, but the NLT issue is still a concern.\n\nthe cover grammar complexity will be investigated during stage 2, to resolve before stage 2.7","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AANE3E69F17hyhQdQOatNld0Bdc7JWAu3I7saA4oNuU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It sounded like the cover grammar complexity might not be blocking, but the NLT issue is still a concern.</blockquote></mx-reply>the cover grammar complexity will be investigated during stage 2, to resolve before stage 2.7","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AANE3E69F17hyhQdQOatNld0Bdc7JWAu3I7saA4oNuU"}},"msgtype":"m.text"},"ts":1712859548928,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$s2l23tjaCnOne5M1ZGXrpJGEMD-ASpKWpeZvvu7WinM"},
{"content":{"body":"> <@ljharb:matrix.org> but as long as we say that extractors are only an identifier followed by a no-newline `(`, then i think the problem's solved?\n\nyeah, but waldemar didn't like that solution either","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8txGGrTQpStMnCswzKbm1oDzFJquFdxVn23Zcah8Xxs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but as long as we say that extractors are only an identifier followed by a no-newline <code>(</code>, then i think the problem's solved?</blockquote></mx-reply>yeah, but <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a> didn't like that solution either","m.mentions":{"user_ids":["@ljharb:matrix.org","@waldemarh:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8txGGrTQpStMnCswzKbm1oDzFJquFdxVn23Zcah8Xxs"}},"msgtype":"m.text"},"ts":1712859550207,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rpWrFOBlBJAEPvOrr5zq6quoOlVEi7d9qUD5kjQeEsI"},
{"content":{"body":"> <@rbuckton:matrix.org> It sounded like the cover grammar complexity might not be blocking, but the NLT issue is still a concern.\n\nnot blocking for stage 2. i need to do more work to figure out how blocking we consider it for 3","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AANE3E69F17hyhQdQOatNld0Bdc7JWAu3I7saA4oNuU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It sounded like the cover grammar complexity might not be blocking, but the NLT issue is still a concern.</blockquote></mx-reply>not blocking for stage 2. i need to do more work to figure out how blocking we consider it for 3","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AANE3E69F17hyhQdQOatNld0Bdc7JWAu3I7saA4oNuU"}},"msgtype":"m.text"},"ts":1712859552299,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BtwHp9Hm_apAY6ccsVQEhKne-QMy5tBCYcWkhT0MFnk"},
{"content":{"body":"(I would be fine with it)","m.mentions":{},"msgtype":"m.text"},"ts":1712859553250,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xWMTyTKCvDjF2Czdefl_YYDcpZxLlo6LQC7D35aWw4k"},
{"content":{"body":"> <@ljharb:matrix.org> (parenthesized assignment LHS's are gross also)\n\n`++((‚Ö†))`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MmJRLMfuNjNL0UIptZVlor1jfgJkJx_QtvIH-A_IVu8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>(parenthesized assignment LHS&#39;s are gross also)</blockquote></mx-reply><code>++((‚Ö†))</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MmJRLMfuNjNL0UIptZVlor1jfgJkJx_QtvIH-A_IVu8"}},"msgtype":"m.text"},"ts":1712859712310,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$WLEZsDlxHKPkskozqYFeo_APlxLcnF7L8qFeW-iJaF0"},
{"content":{"body":"We would need an NLT in binding patterns, which seems fine to me. The question is how easy is it to make the NLT conditional on whether we're parsing a `let`/`const`/`var` or not.","format":"org.matrix.custom.html","formatted_body":"We would need an NLT in binding patterns, which seems fine to me. The question is how easy is it to make the NLT conditional on whether we're parsing a <code>let</code>/<code>const</code>/<code>var</code> or not.","m.mentions":{},"msgtype":"m.text"},"ts":1712859723478,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kT8BfkXvSgDhkNtNcy_TYKV570E8-onWjt-FCl8Y3TY"},
{"content":{"body":"the first speaker (currently being referred to as JRA in the notes) is not assigned this abbreviation in https://github.com/tc39/notes/blob/main/delegates.txt","msgtype":"m.text"},"ts":1712859975706,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dn-uXCE1_G_Sti1vLx3Y4jEQLcQuunRtK81BAzw2L_4"},
{"content":{"body":"could someone reach out to them to create a PR?","msgtype":"m.text"},"ts":1712859989901,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$h5KE7aJx84lYopbqOCXkr9AvMFiO--7-Bm7fjsI_GQQ"},
{"content":{"body":"i did already https://github.com/tc39/notes/pull/318","m.mentions":{},"msgtype":"m.text"},"ts":1712860089534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pRR9eQeYFCKHpiMSI8YqB9ZjXXHblr12YMjosEWtPY0"},
{"content":{"body":"I'm having trouble understanding the syntax of the slides","m.mentions":{},"msgtype":"m.text"},"ts":1712860091816,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$_CLX6EyDwo2g8AycZnDl9oq77sIIdthmF6kQrS70Bl0"},
{"content":{"body":"oh okay thanks @shuyuguo:matrix.org","format":"org.matrix.custom.html","formatted_body":"oh okay thanks <a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a>","msgtype":"m.text"},"ts":1712860124487,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DzxfTtkApeZgrhlAYUmyXxZ9m7zDTW-E4kvWHeu9hfs"},
{"content":{"body":"What's ({{counter.parity}})?","m.mentions":{},"msgtype":"m.text"},"ts":1712860141832,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$rM_1phs7WVspkT6L0oC-WFI04ygM5Ty_LDYxoymTgEY"},
{"content":{"body":"literal parens, with a rendered JS value inside them","m.mentions":{},"msgtype":"m.text"},"ts":1712860187339,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$42a-6wwxHUntMXm_7wy9qNm8i6m6wFMZcjZLa6B4XhM"},
{"content":{"body":"@shuyuguo:matrix.org oh, it hasn't been merged because CI is failing due to you not adding them in the correct order","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a> oh, it hasn&#39;t been merged because CI is failing due to you not adding them in the correct order","msgtype":"m.text"},"ts":1712860189749,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JBC7-7QF1EyGUoCz2pOQLA5Up1lkrRaaI4-d-d7A5fo"},
{"content":{"body":"It's vue's templating mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1712860190521,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$74swzfn8CvNvBAdEdAdOXPOiX-Xvqm7OOf8mCqPOxPg"},
{"content":{"body":"> <@michaelficarra:matrix.org> @shuyuguo:matrix.org oh, it hasn't been merged because CI is failing due to you not adding them in the correct order\n\noh","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JBC7-7QF1EyGUoCz2pOQLA5Up1lkrRaaI4-d-d7A5fo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/%40shuyuguo%3Amatrix.org\">@shu</a> oh, it hasn't been merged because CI is failing due to you not adding them in the correct order</blockquote></mx-reply>oh","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JBC7-7QF1EyGUoCz2pOQLA5Up1lkrRaaI4-d-d7A5fo"}},"msgtype":"m.text"},"ts":1712860201051,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hclXYt6DcgnS55N1j9p7NyA30_YiYIUrqohJGUAwh5Y"},
{"content":{"body":"someone more inclined can fix","m.mentions":{},"msgtype":"m.text"},"ts":1712860269045,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kpHdASbXNhZ2SzwfTMhMO1GmGvwv2zpUdYt_Szf1OZg"},
{"content":{"body":"i'm confused, isn't the parity supposed to autoupdate with the counter?","m.mentions":{},"msgtype":"m.text"},"ts":1712860449576,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PsvwX5CzE-I3TfnEtpNNH7sfVGII6h7VqVks40iCiYQ"},
{"content":{"body":"Preact does recreate the vdom, but at least we didn't bother recalculating parity ","m.mentions":{},"msgtype":"m.text"},"ts":1712860454834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DK_dwFQm4oC_RSlU6899f0Tk3-75pshLZqvLhnJoU4k"},
{"content":{"body":"but 2 isn't odd","m.mentions":{},"msgtype":"m.text"},"ts":1712860469409,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10xasyHH18p4EwUs47H6e5qunaQH4N84MslyvkuQDy8"},
{"content":{"body":"and Preact may be able to save more work when you have nested components--Preact only has to re-render at the component level","m.mentions":{},"msgtype":"m.text"},"ts":1712860472522,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RObrf4CrIXZ3mIy5nbsfHQSxC8aheZEDBjitD_-FlhM"},
{"content":{"body":"> <@ljharb:matrix.org> i'm confused, isn't the parity supposed to autoupdate with the counter?\n\nin this case, because it incremented by 2, the parity bit stayed the same, so we didn't have to redo the expensive calculation to change 1/0 into odd/even","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PsvwX5CzE-I3TfnEtpNNH7sfVGII6h7VqVks40iCiYQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i&#39;m confused, isn&#39;t the parity supposed to autoupdate with the counter?</blockquote></mx-reply>in this case, because it incremented by 2, the parity bit stayed the same, so we didn't have to redo the expensive calculation to change 1/0 into odd/even","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PsvwX5CzE-I3TfnEtpNNH7sfVGII6h7VqVks40iCiYQ"}},"msgtype":"m.text"},"ts":1712860510690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qn9mgIx82ZzId46AvqAFUw4RpbOy4B1QRSyEgrCC9t8"},
{"content":{"body":" * but 2 isn't odd. the parity depends on the counter.","m.mentions":{},"m.new_content":{"body":"but 2 isn't odd. the parity depends on the counter.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$10xasyHH18p4EwUs47H6e5qunaQH4N84MslyvkuQDy8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712860513963,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TcJnF6d3XnopCaCpBGgeqwxhSM4kjL9SrNBvNbAr7dk"},
{"content":{"body":"> <@ljharb:matrix.org> but 2 isn't odd\n\n1 + 2 is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$10xasyHH18p4EwUs47H6e5qunaQH4N84MslyvkuQDy8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but 2 isn&#39;t odd</blockquote></mx-reply>1 + 2 is","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$10xasyHH18p4EwUs47H6e5qunaQH4N84MslyvkuQDy8"}},"msgtype":"m.text"},"ts":1712860517589,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2nmuDYOH6YwnV-uG9OvMPC4P-ZhN076ucpOzI0w4NmI"},
{"content":{"body":"ljharb: It's was X+2 so parity shouldn't change","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: It's was X+2 so parity shouldn't change","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1712860523366,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$HDcmR-OSGLut-RZol-eZ_T_RLETBO2PzpdzBm6l4vEI"},
{"content":{"body":"ahhh gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1712860525697,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$AVzAa64ienDQG6mrHGycLWtRfr8ZAMV1ILfyM9K70aM"},
{"content":{"body":"thanks","m.mentions":{},"msgtype":"m.text"},"ts":1712860542053,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kkT9Sxu6IBCKrDeC-eNt5OqSZoMah7_RwHL6hbkKbac"},
{"content":{"body":"so we memoize things in the data dependency graph so that we have to do minimal work to recompute based on changes","m.mentions":{},"msgtype":"m.text"},"ts":1712860558013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F5fLLVyXAlPpJfdjStxvWmfCwgfICDte_5XwktNfMgQ"},
{"content":{"body":"I'm confused is this some mechanism where at closure time we detect the captured variable is a Signal?","m.mentions":{},"msgtype":"m.text"},"ts":1712860572766,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$CRCktTR2wnMYw1C4vLbLWMoe2XQjw-mwTsGUQ8CXiZA"},
{"content":{"body":"> <@keith_miller:matrix.org> I'm confused is this some mechanism where at closure time we detect the captured variable is a Signal?\n\nthere's a hidden global variable that tracks all the signals read within the execution of the computed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CRCktTR2wnMYw1C4vLbLWMoe2XQjw-mwTsGUQ8CXiZA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I&#39;m confused is this some mechanism where at closure time we detect the captured variable is a Signal?</blockquote></mx-reply>there's a hidden global variable that tracks all the signals read within the execution of the computed","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CRCktTR2wnMYw1C4vLbLWMoe2XQjw-mwTsGUQ8CXiZA"}},"msgtype":"m.text"},"ts":1712860619343,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pXFrJdXJ8pLo_eBW1c3wbdRvzIuJyA4bvUlYwkqh55I"},
{"content":{"body":"I don't understand how we would know that `parity` doesn't need to be updated in general","format":"org.matrix.custom.html","formatted_body":"I don't understand how we would know that <code>parity</code> doesn't need to be updated in general","m.mentions":{},"msgtype":"m.text"},"ts":1712860630540,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$ucP7uU815rVmagTtr0_oeEFHXtddKx9LVAcKdVzXAyU"},
{"content":{"body":"what about signals that aren't unconditionally read?","m.mentions":{},"msgtype":"m.text"},"ts":1712860654366,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$203ZoM8O-KrQiDSDTOhyRGNxIuJ3qNAwC-wXN15vc9I"},
{"content":{"body":" * what about signals that aren't unconditionally read in the computation?","m.mentions":{},"m.new_content":{"body":"what about signals that aren't unconditionally read in the computation?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$203ZoM8O-KrQiDSDTOhyRGNxIuJ3qNAwC-wXN15vc9I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712860657211,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TToedudFUbFOBu9ZhyviF6mV7wHMrWSH8eYNhNgmook"},
{"content":{"body":"I expect the execution of `Computed`'s callback could record any `get` for a nested signal","format":"org.matrix.custom.html","formatted_body":"I expect the execution of <code>Computed</code>'s callback could record any <code>get</code> for a nested signal","m.mentions":{},"msgtype":"m.text"},"ts":1712860685106,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$syNzdUt_BDmmBwspAuRS2dCRBzUTtE1xCkDfzrJ98cc"},
{"content":{"body":"> <@ljharb:matrix.org> what about signals that aren't unconditionally read in the computation?\n\nTheir changes don't matter until the condition that made them unread changes?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$203ZoM8O-KrQiDSDTOhyRGNxIuJ3qNAwC-wXN15vc9I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>what about signals that aren&#39;t unconditionally read in the computation?</blockquote></mx-reply>Their changes don't matter until the condition that made them unread changes?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$203ZoM8O-KrQiDSDTOhyRGNxIuJ3qNAwC-wXN15vc9I"}},"msgtype":"m.text"},"ts":1712860713600,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3WiukIDTysePvRfjTqDFgH3BNKgLFjFWu7htjnE4rck"},
{"content":{"body":"this sounds like why react hooks force you via linter to always unconditionally run all hooks, which is super annoying and unergonomic","m.mentions":{},"msgtype":"m.text"},"ts":1712860726103,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YE-7F1t14B5aMim20v4vpGdfQE4P-UvqnK-N6K2USsc"},
{"content":{"body":"> <@rbuckton:matrix.org> Their changes don't matter until the condition that made them unread changes?\n\nright but you have to rerun the computation, then, to know if it's updated","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3WiukIDTysePvRfjTqDFgH3BNKgLFjFWu7htjnE4rck?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Their changes don't matter until the condition that made them unread changes?</blockquote></mx-reply>right but you have to rerun the computation, then, to know if it's updated","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3WiukIDTysePvRfjTqDFgH3BNKgLFjFWu7htjnE4rck"}},"msgtype":"m.text"},"ts":1712860739086,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Dspudnrbt56OqE4x8RD_3ddUWqN-j7jBqHz5rJbv4Oo"},
{"content":{"body":"which means doing the expensive thing","m.mentions":{},"msgtype":"m.text"},"ts":1712860747296,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XiWl5dHH09Tt7VbDNH1fnbb2Ob5_GFpUd8tbzJ2GBbI"},
{"content":{"body":"What if the condition isn't tracked by a Signal?","m.mentions":{},"msgtype":"m.text"},"ts":1712860773670,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$LB8wwx-YCoV54MEU-MXrYfIw8Ht6V4yu9HLb_n4tCHw"},
{"content":{"body":"Is that a bug?","m.mentions":{},"msgtype":"m.text"},"ts":1712860783175,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$GxCI0oYA5yPV70rwF1UDaW9baJVVtX7T4rDjkG4M2i0"},
{"content":{"body":"> <@keith_miller:matrix.org> I don't understand how we would know that `parity` doesn't need to be updated in general\n\nmy understanding from reading the readme was that the dependencies are dynamically re-computed per computation (per \"pull\")","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ucP7uU815rVmagTtr0_oeEFHXtddKx9LVAcKdVzXAyU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>I don't understand how we would know that <code>parity</code> doesn't need to be updated in general</blockquote></mx-reply>my understanding from reading the readme was that the dependencies are dynamically re-computed per computation (per \"pull\")","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ucP7uU815rVmagTtr0_oeEFHXtddKx9LVAcKdVzXAyU"}},"msgtype":"m.text"},"ts":1712860783226,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0CmitT4AkbnMn4uWTlQKjFZZZUiPYG9pFOiNXbquTc4"},
{"content":{"body":"No, you either record what signals were used and query whether they've changed, or when they change they notify any computations that depend on them.","m.mentions":{},"msgtype":"m.text"},"ts":1712860783868,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NGUipa1cVpUziNCKI55lZl3RNLs7qVJEv1RnGzvmap8"},
{"content":{"body":"oh dan is saying that right now","m.mentions":{},"msgtype":"m.text"},"ts":1712860795903,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZfM_9mkXfFCsmt827wDlIYX4lFkc6iDpoiuHe7ea_NI"},
{"content":{"body":"if your signal depends on values which can change which are not themselves signals, it's not going to be able to correctly track updates","m.mentions":{},"msgtype":"m.text"},"ts":1712860814146,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$V9CyGfPhC_ZGiXy0o2ixNrKxtQTnnC9Uea3Covftq4k"},
{"content":{"body":"but i mean... don't do that","m.mentions":{},"msgtype":"m.text"},"ts":1712860823618,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$u0eLG4ZhP72ZIhLWG3dCJY2hx2iXI_mnZRt6jRRSr9E"},
{"content":{"body":"ok so it doesn't prevent an expensive computation, it prevents *dependent* ones?","format":"org.matrix.custom.html","formatted_body":"ok so it doesn't prevent an expensive computation, it prevents <em>dependent</em> ones?","m.mentions":{},"msgtype":"m.text"},"ts":1712860823635,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$T5paksUqIBcRxq-t0N0_sxZkW3bsP25mD4SmE00w4p4"},
{"content":{"body":" * ok so it doesn't prevent an expensive computation, it prevents _dependent_ expensive ones?","format":"org.matrix.custom.html","formatted_body":" * ok so it doesn't prevent an expensive computation, it prevents <em>dependent</em> expensive ones?","m.mentions":{},"m.new_content":{"body":"ok so it doesn't prevent an expensive computation, it prevents _dependent_ expensive ones?","format":"org.matrix.custom.html","formatted_body":"ok so it doesn't prevent an expensive computation, it prevents <em>dependent</em> expensive ones?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$T5paksUqIBcRxq-t0N0_sxZkW3bsP25mD4SmE00w4p4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712860841165,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D-ygG_O2re1XwQ0MRTdHF4VznUkYKqZJj7pCapd4hxo"},
{"content":{"body":"I'm trying to think how this would work if multiple realms are involved‚Ä¶ Do they all need to share the hidden global?","m.mentions":{},"msgtype":"m.text"},"ts":1712860879916,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$jDpYujk7gJPkHLmkWibDsKrqUphqDnBsFVNZxoGv6xI"},
{"content":{"body":"i'd assume it's realm-specific, since we probably wouldn't want another cross-realm registry","m.mentions":{},"msgtype":"m.text"},"ts":1712860932521,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$d6Zqz2oSPlqnlHeteIHe27GvZDOqZ7DVTUJ9SDFY5q8"},
{"content":{"body":"I thought we didn't want per-realm state :D","m.mentions":{},"msgtype":"m.text"},"ts":1712861041558,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$n30Vlp0PtpPrDZSuRlbHTHt6_GW4d82ydHXXtC1zee4"},
{"content":{"body":"Observable global mutable state is definitely a concern we want to discuss with the champions.","m.mentions":{},"msgtype":"m.text"},"ts":1712861080393,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$9VT1vQTFK8zvhEfEec07V1syGCSyf1a6fIm7qH5bPSM"},
{"content":{"body":"it's fine to have internal global state, but it's not to make it observable to user code. It's a fine line that AsyncContext took a lot of pain to prove and satisfy","m.mentions":{},"msgtype":"m.text"},"ts":1712861148080,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MYdSMx7NSP2W741XbAbHHUsO6_ZtSWjk0XkzmQ_IHx0"},
{"content":{"body":"i mean, this would effectively just be closed-over variables","m.mentions":{},"msgtype":"m.text"},"ts":1712861188989,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7Z8z_nOkAxIi-wOUQ5ssYD6_VipnQWvbbkIYPUrRuYg"},
{"content":{"body":"it's not an object you can mutate","m.mentions":{},"msgtype":"m.text"},"ts":1712861196009,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SYzRurTfv_akM_IJYGnJcM7hNHXpQZAZWYlfCEkIr20"},
{"content":{"body":"I'm not sufficiently familiar with signals usages, but I'm wondering if there would be ways to implement this auto tracking without making this internal contextual state observable","m.mentions":{},"msgtype":"m.text"},"ts":1712861218651,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pZ1EIbpHvLwWThh8DwflliN8YbnljPq5nIkhHAbvoWg"},
{"content":{"body":"> <@mhofman:matrix.org> I'm not sufficiently familiar with signals usages, but I'm wondering if there would be ways to implement this auto tracking without making this internal contextual state observable\n\nYeah. It feels like the graph should have GC roots somewhere and shouldn't really need a separate global variable‚Ä¶ but I think I'd need some time and paper to work that out.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pZ1EIbpHvLwWThh8DwflliN8YbnljPq5nIkhHAbvoWg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I&#39;m not sufficiently familiar with signals usages, but I&#39;m wondering if there would be ways to implement this auto tracking without making this internal contextual state observable</blockquote></mx-reply>Yeah. It feels like the graph should have GC roots somewhere and shouldn't really need a separate global variable‚Ä¶ but I think I'd need some time and paper to work that out.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pZ1EIbpHvLwWThh8DwflliN8YbnljPq5nIkhHAbvoWg"}},"msgtype":"m.text"},"ts":1712861408368,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$3JSqpADSW3k61nIuXqDsX2UgC5Q6uaoQZbThv9iHL2w"},
{"content":{"body":"Seems like this could be done with weakly held pub/sub events rather than a global variable.","m.mentions":{},"msgtype":"m.text"},"ts":1712861418326,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VdokA18qmmrTQ0-Mov5qI-WYcbZlesGtHJZ8SuzJRj0"},
{"content":{"body":"> <@rbuckton:matrix.org> Seems like this could be done with weakly held pub/sub events rather than a global variable.\n\nThis is, if memory serves, closer to userland implementations I‚Äôve seen","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24VdokA18qmmrTQ0-Mov5qI-WYcbZlesGtHJZ8SuzJRj0\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Seems like this could be done with weakly held pub/sub events rather than a global variable.</blockquote></mx-reply>This is, if memory serves, closer to userland implementations I‚Äôve seen","m.relates_to":{"m.in_reply_to":{"event_id":"$VdokA18qmmrTQ0-Mov5qI-WYcbZlesGtHJZ8SuzJRj0"}},"msgtype":"m.text"},"ts":1712861466748,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$3nJqTFmCudGVP9LagNcr91qyU_WWoQjZ0iGJXiTzag0"},
{"content":{"body":"the benefit is that the code doesn't need to know that it's being tracked","m.mentions":{},"msgtype":"m.text"},"ts":1712861467638,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$-NEMpFUzlhq02I_SXrezvcZIuxhvYl6LU3kQdWQqMTw"},
{"content":{"body":"everything adding event observers manually is a lot of work","m.mentions":{},"msgtype":"m.text"},"ts":1712861482902,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4tl4CrnTFawIn1qIVieki6ZdJ1PDAhQq_vB773UxW48"},
{"content":{"body":"with signals, I can call functions and they don't need to know that the things they call to get data are getters that add to the tracking","m.mentions":{},"msgtype":"m.text"},"ts":1712861506646,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$3xE_F-k73MzjRV0UHKddBX4AjhraQAWaHPkWfbau6b8"},
{"content":{"body":"like `Promise`s","format":"org.matrix.custom.html","formatted_body":"like <code>Promise</code>s","m.mentions":{},"msgtype":"m.text"},"ts":1712861551849,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-8FeQJAHsqDnRGwdkmXoBmbFtpRT_0ihKvQ1K48VooM"},
{"content":{"body":"In FunctionalReactiveProgramming their are events and cells.\nSignals are much more like cells, than events","m.mentions":{},"msgtype":"m.text"},"ts":1712861552906,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$kRXod-eZWydvMcw8bHRnZvZSms-LHmDMCoX63Epqdlo"},
{"content":{"body":"the data does not need to know you're looking at it","m.mentions":{},"msgtype":"m.text"},"ts":1712861556722,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H7jTG1bXYUlZgPr2ics5rq-Th_1vkHtUWyNwV7z2YjI"},
{"content":{"body":"I understand the motivation, but this is effectively dynamic scoping, and I'm trying to understand if we can put it back within the limits of fluid scoping that AsyncContext offers","m.mentions":{},"msgtype":"m.text"},"ts":1712861561945,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$L_2IqybrficXKAs1CIPhNsZFpTBL04gLl3DnSYo-5B8"},
{"content":{"body":" * In FunctionalReactiveProgramming there are events and cells.\nSignals are much more like cells, than events","m.mentions":{},"m.new_content":{"body":"In FunctionalReactiveProgramming there are events and cells.\nSignals are much more like cells, than events","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kRXod-eZWydvMcw8bHRnZvZSms-LHmDMCoX63Epqdlo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712861640748,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Z558UeOHz98rB2G393IxYXcLuW_YmS6OyQp6lH51QuY"},
{"content":{"body":"There needs to be a tracking context/scope, and a way to access the underlying value without tracking.","msgtype":"m.text"},"ts":1712861806738,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$i31OO1iBpSA7_60B08mzxV5SrVoRwooPjD9YwXNbEdg"},
{"content":{"body":"this sounds like perfect incubation call material","msgtype":"m.text"},"ts":1712861809389,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_QzeD3X3yra4w1C324RRXXJzbkkDwhm6jnx5X-0c7ko"},
{"content":{"body":"Could there be a registry for each signal that's not an hidden global value? Not sure if that would be possible or cause other problems?","m.mentions":{},"msgtype":"m.text"},"ts":1712861834268,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$WRPH7gd6RAtMaEe2qpinIV-nyrCl-FAQw9BwKSLuQzM"},
{"content":{"body":"> <@michaelficarra:matrix.org> this sounds like perfect incubation call material\n\nthey already have other discussions going","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_QzeD3X3yra4w1C324RRXXJzbkkDwhm6jnx5X-0c7ko?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>this sounds like perfect incubation call material</blockquote></mx-reply>they already have other discussions going","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_QzeD3X3yra4w1C324RRXXJzbkkDwhm6jnx5X-0c7ko"}},"msgtype":"m.text"},"ts":1712861856475,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GDTUyn7ddRsWTIRySl6emweihNE5mx_1QtGDuA8pR4I"},
{"content":{"body":"I don't think an incubation call would help","m.mentions":{},"msgtype":"m.text"},"ts":1712861861968,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ng2UsOSO8fuaRD2tZRysCyQgPJOu7QLEXTZHYb8yyrs"},
{"content":{"body":"signals sounds like it has _way_ bigger scope than incubation calls","format":"org.matrix.custom.html","formatted_body":"signals sounds like it has <em>way</em> bigger scope than incubation calls","m.mentions":{},"msgtype":"m.text"},"ts":1712861866261,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VLapdMmru6Gpwwa49lvmUXsmF9Gqm_Fx5E-mofPSOF4"},
{"content":{"body":" * Could there be a registry for each batch of signals that's not an hidden global value? Not sure if that would be possible or cause other problems?","m.mentions":{},"m.new_content":{"body":"Could there be a registry for each batch of signals that's not an hidden global value? Not sure if that would be possible or cause other problems?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WRPH7gd6RAtMaEe2qpinIV-nyrCl-FAQw9BwKSLuQzM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712861866530,"senderName":"keith_miller","senderId":"@keith_miller:matrix.org","id":"$6OabIw2YhFdB9v17sCCXa_fGp4NLOciH4tV5t3OnbKM"},
{"content":{"body":"if you create the computed by providing all the signals it cares about explicitly, then you wouldn't need any global state, i think?","m.mentions":{},"msgtype":"m.text"},"ts":1712861874937,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ngk8hK5eJQ8clby_a0n0Duj9S0ojPwX4Rbhw-iPJMU4"},
{"content":{"body":"incubation calls are time set-aside for one-off smaller things that don't have regular side discussions","m.mentions":{},"msgtype":"m.text"},"ts":1712861875833,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-nVOn5WZUnmDIeHZZRCdUC9cDKiA2Q7kIi3AFmldXwI"},
{"content":{"body":"This is large enough they need a dedicated group call","msgtype":"m.text"},"ts":1712861877404,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_-zuSv5WqdgoDfvS8i-p3IpWk2NScn7hjk63yfAVrPY"},
{"content":{"body":"> <@keith_miller:matrix.org> Could there be a registry for each batch of signals that's not an hidden global value? Not sure if that would be possible or cause other problems?\n\nCouldn't that be on the signal itself?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WRPH7gd6RAtMaEe2qpinIV-nyrCl-FAQw9BwKSLuQzM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@keith_miller:matrix.org\">@keith_miller:matrix.org</a><br>Could there be a registry for each batch of signals that&#39;s not an hidden global value? Not sure if that would be possible or cause other problems?</blockquote></mx-reply>Couldn't that be on the signal itself?","m.mentions":{"user_ids":["@keith_miller:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WRPH7gd6RAtMaEe2qpinIV-nyrCl-FAQw9BwKSLuQzM"}},"msgtype":"m.text"},"ts":1712861882271,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$g2WMNPrgFtxTRHKQ7zYqoH0S46wasokLAWDgPaOsMgY"},
{"content":{"body":"like `Signal.Computed(fn, signals)`","format":"org.matrix.custom.html","formatted_body":"like <code>Signal.Computed(fn, signals)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712861886646,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$W1mwWtfZ6uJGhvqDSr6EevZsMD6GqP0lEKC_luV2DDc"},
{"content":{"body":"> <@jridgewell:matrix.org> This is large enough they need a dedicated group call\n\nsure, even better!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_-zuSv5WqdgoDfvS8i-p3IpWk2NScn7hjk63yfAVrPY\">In reply to</a><a href=\"https://matrix.to/#/%40jridgewell%3Amatrix.org\">@jridgewell:matrix.org</a><br />This is large enough they need a dedicated group call</blockquote></mx-reply>sure, even better!","m.relates_to":{"m.in_reply_to":{"event_id":"$_-zuSv5WqdgoDfvS8i-p3IpWk2NScn7hjk63yfAVrPY"}},"msgtype":"m.text"},"ts":1712861898966,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$TqPv5rZQmqChnm0D2EY_pE3NcBpljZfEJbnbx7B7P9g"},
{"content":{"body":"that would be static dependencies, not dynamic","m.mentions":{},"msgtype":"m.text"},"ts":1712861902179,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_5BGoTRio_A04agjlwxa7rcCVJS0AunGnTE3azGZLFs"},
{"content":{"body":"that's a pretty big reduction in expressivity","m.mentions":{},"msgtype":"m.text"},"ts":1712861908602,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$G4qRQ0L-uFcOidN_HaZL7sXI5nkWUuUNhhsbzWGTMEM"},
{"content":{"body":"(not arguing for one way or another, but it's pretty different)","m.mentions":{},"msgtype":"m.text"},"ts":1712861916320,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$raCAQ2rmktIMiXmdWft_dPhD0yOuFBKxa5gRF8A3IjQ"},
{"content":{"body":"yeah that API would not be worth having","m.mentions":{},"msgtype":"m.text"},"ts":1712861918556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$onnyjKHPKWSJ3O9UHRTbDITFqIrzoxzEGJ4CRVd_4wc"},
{"content":{"body":"then I think we should just go for stage 1 and provide all of this feedback in such a call","msgtype":"m.text"},"ts":1712861919352,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aLXGg6sjB9SgwBbATnE9n1APVJUHRj6PcRHOVZ0-Ai0"},
{"content":{"body":"right, i agree","m.mentions":{},"msgtype":"m.text"},"ts":1712861949132,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PZKjqUevYz9A4A9R9h2xV-B72SB18pDNdd-IcSBHWDo"},
{"content":{"body":" * right, i agree with that too","m.mentions":{},"m.new_content":{"body":"right, i agree with that too","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PZKjqUevYz9A4A9R9h2xV-B72SB18pDNdd-IcSBHWDo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712861959837,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K70AIUYCQ1bK9pwdwmkDiCu4qyVYBwWiz2seOs5xzcc"},
{"content":{"body":"Yes, these topics seem fair to discuss after stage 1.","m.mentions":{},"msgtype":"m.text"},"ts":1712861960391,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$nkNagsMlixYuOZ35qnFXlp1oMnxDndi1eeJcpJLMgKU"},
{"content":{"body":"> <@ljharb:matrix.org> if you create the computed by providing all the signals it cares about explicitly, then you wouldn't need any global state, i think?\n\nThis ruins a good amount of the ergonomics of this feature","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24Ngk8hK5eJQ8clby_a0n0Duj9S0ojPwX4Rbhw-iPJMU4\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>if you create the computed by providing all the signals it cares about explicitly, then you wouldn't need any global state, i think?</blockquote></mx-reply>This ruins a good amount of the ergonomics of this feature","m.relates_to":{"m.in_reply_to":{"event_id":"$Ngk8hK5eJQ8clby_a0n0Duj9S0ojPwX4Rbhw-iPJMU4"}},"msgtype":"m.text"},"ts":1712861978408,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$a-NOs9kH6PQbKwjcANyvbuKJlKDywnkFzY1RleYdiho"},
{"content":{"body":"Where did the term `Signal` itself come from? It feels like these are Signallers rather than Signals.","format":"org.matrix.custom.html","formatted_body":"Where did the term <code>Signal</code> itself come from? It feels like these are Signallers rather than Signals.","m.mentions":{},"msgtype":"m.text"},"ts":1712861979413,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$G_LdZFw9ac41ITxNF_8Wbhyqkji6VU83DS4GMV8fWDc"},
{"content":{"body":"> <@anthonybullard:matrix.org> This ruins a good amount of the ergonomics of this feature\n\nit certainly does","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$a-NOs9kH6PQbKwjcANyvbuKJlKDywnkFzY1RleYdiho?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>This ruins a good amount of the ergonomics of this feature</blockquote></mx-reply>it certainly does","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a-NOs9kH6PQbKwjcANyvbuKJlKDywnkFzY1RleYdiho"}},"msgtype":"m.text"},"ts":1712861989659,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w9ITpk9Q6TMniKWOtt1GX62bwnVDLfEqJipVheGJjI4"},
{"content":{"body":"I‚Äôm confused by the global state discussion, there shouldn‚Äôt be any.","msgtype":"m.text"},"ts":1712861995526,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$i4HmFMbs05tyVRgsFPjBe1g-Hs8ULCectLNpnwsCxiA"},
{"content":{"body":"It‚Äôs all on the Signal","msgtype":"m.text"},"ts":1712862010694,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TnVqGN5LXJJ4kyFpeGUi3DEEZF8qUEpplepyYiq6XSw"},
{"content":{"body":"While I don't consider it a blocking concern, my concern seemed wide reaching enough that it might be a concern for others who had not previously considered the implications.","m.mentions":{},"msgtype":"m.text"},"ts":1712862019309,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iXYj2LVcqRohovDjZobF12aBajZENEJg13EWZxvLrcg"},
{"content":{"body":" * While I don't consider it a Stage 1 blocking concern, my concern seemed wide reaching enough that it might be a concern for others who had not previously considered the implications.","m.mentions":{},"m.new_content":{"body":"While I don't consider it a Stage 1 blocking concern, my concern seemed wide reaching enough that it might be a concern for others who had not previously considered the implications.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iXYj2LVcqRohovDjZobF12aBajZENEJg13EWZxvLrcg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712862025186,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ilpOAcDXNRK4ETwNQYfkFV_XFBD8sK1E8lAmz8fXOaY"},
{"content":{"body":"but if the ergonomics are only achievable with weird unenforceable caveats like \"you must evaluate all signals unconditionally, in the callback\", i'm not sure it's worth striving for them (i dont think that's the case, to be clear)","m.mentions":{},"msgtype":"m.text"},"ts":1712862026841,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg"},
{"content":{"body":" * but if the ergonomics are only achievable with weird unenforceable caveats like \"you must evaluate all signals unconditionally, in the callback\" - like react has for hooks, i'm not sure it's worth striving for them (i dont think that's the case, to be clear)","m.mentions":{},"m.new_content":{"body":"but if the ergonomics are only achievable with weird unenforceable caveats like \"you must evaluate all signals unconditionally, in the callback\" - like react has for hooks, i'm not sure it's worth striving for them (i dont think that's the case, to be clear)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712862036326,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BRJYnvvbz1Pl_SDZDv1Hi76EZG4rwglDmcnVplf653s"},
{"content":{"body":"> <@jridgewell:matrix.org> It‚Äôs all on the Signal\n\nFrom what I understand it's used for auto-tracking and preventing notify footguns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TnVqGN5LXJJ4kyFpeGUi3DEEZF8qUEpplepyYiq6XSw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>It‚Äôs all on the Signal</blockquote></mx-reply>From what I understand it's used for auto-tracking and preventing notify footguns","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TnVqGN5LXJJ4kyFpeGUi3DEEZF8qUEpplepyYiq6XSw"}},"msgtype":"m.text"},"ts":1712862055555,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$W_ClbQQqDLgmksm3KlMMBHPSamXM71efKZXvE4mryVk"},
{"content":{"body":"> <@ljharb:matrix.org> but if the ergonomics are only achievable with weird unenforceable caveats like \"you must evaluate all signals unconditionally, in the callback\" - like react has for hooks, i'm not sure it's worth striving for them (i dont think that's the case, to be clear)\n\nYou don‚Äôt need to","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg\">In reply to</a><a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb:matrix.org</a><br />but if the ergonomics are only achievable with weird unenforceable caveats like &quot;you must evaluate all signals unconditionally, in the callback&quot; - like react has for hooks, i&#39;m not sure it&#39;s worth striving for them (i dont think that&#39;s the case, to be clear)</blockquote></mx-reply>You don‚Äôt need to","m.relates_to":{"m.in_reply_to":{"event_id":"$JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg"}},"msgtype":"m.text"},"ts":1712862060841,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ARRcaaRLN5L6L4LH9L_uTN_fbkFo2_BvOKK_wNJqZTE"},
{"content":{"body":"> <@jridgewell:matrix.org> I‚Äôm confused by the global state discussion, there shouldn‚Äôt be any.\n\nUsually there is a tracking context that coordinates updates of a set of signals","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24i4HmFMbs05tyVRgsFPjBe1g-Hs8ULCectLNpnwsCxiA\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I‚Äôm confused by the global state discussion, there shouldn‚Äôt be any.</blockquote></mx-reply>Usually there is a tracking context that coordinates updates of a set of signals","m.relates_to":{"m.in_reply_to":{"event_id":"$i4HmFMbs05tyVRgsFPjBe1g-Hs8ULCectLNpnwsCxiA"}},"msgtype":"m.text"},"ts":1712862072619,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$kezUxgqHpRGW7fRvnm-0rdCI5o4wJt54nUwpLhz5XQ0"},
{"content":{"body":"> <@ljharb:matrix.org> but if the ergonomics are only achievable with weird unenforceable caveats like \"you must evaluate all signals unconditionally, in the callback\" - like react has for hooks, i'm not sure it's worth striving for them (i dont think that's the case, to be clear)\n\nyou don't have to evaluate all signals unconditionally","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but if the ergonomics are only achievable with weird unenforceable caveats like &quot;you must evaluate all signals unconditionally, in the callback&quot; - like react has for hooks, i&#39;m not sure it&#39;s worth striving for them (i dont think that&#39;s the case, to be clear)</blockquote></mx-reply>you don't have to evaluate all signals unconditionally","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JpteAO5EitHAbeG8AWFWwjJifvPOScVqGfvj8D5udJg"}},"msgtype":"m.text"},"ts":1712862080880,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FUdCJ14seAuoziWNSlpqlEc-G4fbqYVLWnC2YizgZH4"},
{"content":{"body":"> <@mhofman:matrix.org> From what I understand it's used for auto-tracking and preventing notify footguns\n\nBut the state is stored on the Signal itself","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24W_ClbQQqDLgmksm3KlMMBHPSamXM71efKZXvE4mryVk\">In reply to</a><a href=\"https://matrix.to/#/%40mhofman%3Amatrix.org\">@mhofman:matrix.org</a><br />From what I understand it's used for auto-tracking and preventing notify footguns</blockquote></mx-reply>But the state is stored on the Signal itself","m.relates_to":{"m.in_reply_to":{"event_id":"$W_ClbQQqDLgmksm3KlMMBHPSamXM71efKZXvE4mryVk"}},"msgtype":"m.text"},"ts":1712862083784,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vAOLiNrYmRS35dsXj3MN_MNLw5uDCeb41gnD1-RvLOg"},
{"content":{"body":"i'd love to hear how a computed callback of `one.get() ? two.get() : three.get()` can deterministically track all three signals","format":"org.matrix.custom.html","formatted_body":"i'd love to hear how a computed callback of <code>one.get() ? two.get() : three.get()</code> can deterministically track all three signals","m.mentions":{},"msgtype":"m.text"},"ts":1712862097727,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$7RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ"},
{"content":{"body":"As Dan said, it's the last read that is tracked","m.mentions":{},"msgtype":"m.text"},"ts":1712862111083,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$CPgl4-kyJok_hEcn75OfU-on7EjA0AH5rgyYwhp_Whg"},
{"content":{"body":"> <@ljharb:matrix.org> i'd love to hear how a computed callback of `one.get() ? two.get() : three.get()` can deterministically track all three signals\n\nWhy would it need to?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd love to hear how a computed callback of <code>one.get() ? two.get() : three.get()</code> can deterministically track all three signals</blockquote></mx-reply>Why would it need to?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ"}},"msgtype":"m.text"},"ts":1712862116527,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZCpAyz_xycVYbBntfoFWQvy4Ey10sjTmJCwZztz-UI"},
{"content":{"body":"the last set of reads","m.mentions":{},"msgtype":"m.text"},"ts":1712862118895,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$b1kKrpzFJHElzWGu3naPoaoIYQ-c73oVVcSDMfx9Y6c"},
{"content":{"body":"> <@ljharb:matrix.org> i'd love to hear how a computed callback of `one.get() ? two.get() : three.get()` can deterministically track all three signals\n\nOne of those would not be tracked until called","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%247RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd love to hear how a computed callback of <code>one.get() ? two.get() : three.get()</code> can deterministically track all three signals</blockquote></mx-reply>One of those would not be tracked until called","m.relates_to":{"m.in_reply_to":{"event_id":"$7RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ"}},"msgtype":"m.text"},"ts":1712862122921,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$3zrCJf37D0cvQx8cFvaO4hnp_9yIndlDCtectQyzS_M"},
{"content":{"body":"> <@ljharb:matrix.org> i'd love to hear how a computed callback of `one.get() ? two.get() : three.get()` can deterministically track all three signals\n\nYou only need to track 2 of the 3, the third is irrelevant.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%247RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ\">In reply to</a><a href=\"https://matrix.to/#/%40ljharb%3Amatrix.org\">@ljharb:matrix.org</a><br />i'd love to hear how a computed callback of <code>one.get() ? two.get() : three.get()</code> can deterministically track all three signals</blockquote></mx-reply>You only need to track 2 of the 3, the third is irrelevant.","m.relates_to":{"m.in_reply_to":{"event_id":"$7RiDNUhrVRRyQ-TpQ1_7RKLXz6oGYNT9spXB3KYw1oQ"}},"msgtype":"m.text"},"ts":1712862125287,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$s5Dg5LHIUtqKbkjIWA5vw5UrelmBZNNPlVUjeWHRO4s"},
{"content":{"body":"It only needs to track `one.get()` and whichever branch was evaluated.","format":"org.matrix.custom.html","formatted_body":"It only needs to track <code>one.get()</code> and whichever branch was evaluated.","m.mentions":{},"msgtype":"m.text"},"ts":1712862131097,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6HUfDkaM_WgYE0Mj_mkUP_UmVUCUuH_t5H2FpLJ57xQ"},
{"content":{"body":"hm","m.mentions":{},"msgtype":"m.text"},"ts":1712862139835,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CxI24-bpl61H4mOAtQH889VkACsVLtGzj7GdFZn2uAk"},
{"content":{"body":"if `three.get()` changes it doesn't affect the computation.","format":"org.matrix.custom.html","formatted_body":"if <code>three.get()</code> changes it doesn't affect the computation.","m.mentions":{},"msgtype":"m.text"},"ts":1712862141933,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sPumRRh4DX4CZ5ODeaz3LIjNH7JOH8I-Zu4LMqQCjWU"},
{"content":{"body":"If `one.get()` changes, it evaluates the other branch.","format":"org.matrix.custom.html","formatted_body":"If <code>one.get()</code> changes, it evaluates the other branch.","m.mentions":{},"msgtype":"m.text"},"ts":1712862154599,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EhSLvwX5Wvgv-5iRmGNAxlqcIKDZnai7rTcEhg5Iqhg"},
{"content":{"body":"> <@jridgewell:matrix.org> But the state is stored on the Signal itself\n\nbut it's ambient during signal computation, which is currently exposed to any user code running during that time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vAOLiNrYmRS35dsXj3MN_MNLw5uDCeb41gnD1-RvLOg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>But the state is stored on the Signal itself</blockquote></mx-reply>but it's ambient during signal computation, which is currently exposed to any user code running during that time","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vAOLiNrYmRS35dsXj3MN_MNLw5uDCeb41gnD1-RvLOg"}},"msgtype":"m.text"},"ts":1712862169023,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KZh-QGUOtancQacgzHDWb8qcwVKjFegDrWW98XUR9Cw"},
{"content":{"body":"ok, so the list of tracked signals potentially shifts over time?","m.mentions":{},"msgtype":"m.text"},"ts":1712862170382,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo"},
{"content":{"body":"correct","m.mentions":{},"msgtype":"m.text"},"ts":1712862176452,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wEf0R6qTr_qF37Wssghs_-Kpl1R6Gkid2tMa5H8KS7s"},
{"content":{"body":"each time it's re-evaluated","m.mentions":{},"msgtype":"m.text"},"ts":1712862182066,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ft66TkfHROPmgtgQOr2PbfWsw4z_VrSQ_pgUDlWnS2A"},
{"content":{"body":"ljharb: yes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: yes","msgtype":"m.text"},"ts":1712862182351,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$wNw37RjTJ0iew260P2hXVzaAsiFaV5UHc5yECxQxqNs"},
{"content":{"body":"> <@ljharb:matrix.org> ok, so the list of tracked signals potentially shifts over time?\n\nIt would have to","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok, so the list of tracked signals potentially shifts over time?</blockquote></mx-reply>It would have to","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo"}},"msgtype":"m.text"},"ts":1712862182644,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GbZtZXLepEzTZ1h3_Vel4GsO--J4QRoxtXC50aLPvY8"},
{"content":{"body":"Which is why there is usually a hierarchy of tracking contexts","msgtype":"m.text"},"ts":1712862201558,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$bgXaEZNMZSVLxDqQdZOK6ZVaO2S4mL4nnaYW-XjV46Q"},
{"content":{"body":"That do the actually coordination and scheduling","msgtype":"m.text"},"ts":1712862223971,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$FOyDGX763iNU_o3ovoSNNIV6tMrmGkpvqWlbUSB08b0"},
{"content":{"body":"> <@ljharb:matrix.org> ok, so the list of tracked signals potentially shifts over time?\n\nexactly\n\n```\nif (false) {\n  readSignal();\n}\n```\n\ntracks nothing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok, so the list of tracked signals potentially shifts over time?</blockquote></mx-reply><p>exactly</p>\n<pre><code>if (false) {\n  readSignal();\n}\n</code></pre>\n<p>tracks nothing</p>\n","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo"}},"msgtype":"m.text"},"ts":1712862227735,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$hvZTAORBpP_TPUqr1G-povlj3Qutv-Pms9MYQsWTLGU"},
{"content":{"body":"> <@mhofman:matrix.org> but it's ambient during signal computation, which is currently exposed to any user code running during that time\n\nIt‚Äôs the same as an `AsyncContxt.Variable.run()` internally in a `computed()` call","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24KZh-QGUOtancQacgzHDWb8qcwVKjFegDrWW98XUR9Cw\">In reply to</a><a href=\"https://matrix.to/#/%40mhofman%3Amatrix.org\">@mhofman:matrix.org</a><br />but it's ambient during signal computation, which is currently exposed to any user code running during that time</blockquote></mx-reply>It‚Äôs the same as an <code data-md=\"`\">AsyncContxt.Variable.run()</code> internally in a <code data-md=\"`\">computed()</code> call","m.relates_to":{"m.in_reply_to":{"event_id":"$KZh-QGUOtancQacgzHDWb8qcwVKjFegDrWW98XUR9Cw"}},"msgtype":"m.text"},"ts":1712862229555,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$i4S-g0P56MGzkaKw5Xy6wehF8lISuw8sdmTuDpDZ1wg"},
{"content":{"body":"it appears we lost the transcriptionist","m.mentions":{},"msgtype":"m.text"},"ts":1712862234695,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$UVAmGLyCoirQGBO7IXJ0Qw2AXm1toA8Vg0FJ3Hhnl3Y"},
{"content":{"body":"My concern is how a `Computed` interacts with a weakly held `Signal`. Does it then strongly hold the `Signal`? that seems leaky.","format":"org.matrix.custom.html","formatted_body":"My concern is how a <code>Computed</code> interacts with a weakly held <code>Signal</code>. Does it then strongly hold the <code>Signal</code>? that seems leaky.","m.mentions":{},"msgtype":"m.text"},"ts":1712862240406,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L5QdShZPsEcJz37luzp62wJTP0HOob30f_qlhI8TnwA"},
{"content":{"body":"> <@jridgewell:matrix.org> It‚Äôs the same as an `AsyncContxt.Variable.run()` internally in a `computed()` call\n\nNot quite, there are APIs that effectively expose the `acVar.get()` value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i4S-g0P56MGzkaKw5Xy6wehF8lISuw8sdmTuDpDZ1wg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>It‚Äôs the same as an <code data-md=\"`\">AsyncContxt.Variable.run()</code> internally in a <code data-md=\"`\">computed()</code> call</blockquote></mx-reply>Not quite, there are APIs that effectively expose the <code>acVar.get()</code> value","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i4S-g0P56MGzkaKw5Xy6wehF8lISuw8sdmTuDpDZ1wg"}},"msgtype":"m.text"},"ts":1712862260115,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_r55M7FeTaYSZYj89sObgV8VaKPIIZQmSf0Cxy_my8I"},
{"content":{"body":"wouldn't the `Computed` strongly hold the signal in its closure?","format":"org.matrix.custom.html","formatted_body":"wouldn't the <code>Computed</code> strongly hold the signal in its closure?","m.mentions":{},"msgtype":"m.text"},"ts":1712862269102,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GOmf24vE65_oIczHodZAATeN6T294-U-AK54gVvVIR8"},
{"content":{"body":"> <@bakkot:matrix.org> wouldn't the `Computed` strongly hold the signal in its closure?\n\nNot if it's closure is `() => weakRef.get()?.get()`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GOmf24vE65_oIczHodZAATeN6T294-U-AK54gVvVIR8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>wouldn't the <code>Computed</code> strongly hold the signal in its closure?</blockquote></mx-reply>Not if it's closure is <code>() =&gt; weakRef.get()?.get()</code>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GOmf24vE65_oIczHodZAATeN6T294-U-AK54gVvVIR8"}},"msgtype":"m.text"},"ts":1712862286515,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tfr9YB_dKCHraHx2SdO8B3KK3XIw1nFY7GZ25LmEfOg"},
{"content":{"body":"> <@rbuckton:matrix.org> My concern is how a `Computed` interacts with a weakly held `Signal`. Does it then strongly hold the `Signal`? that seems leaky.\n\nIsn‚Äôt putting a weakly held anything in a closure potentially leaky?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24L5QdShZPsEcJz37luzp62wJTP0HOob30f_qlhI8TnwA\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My concern is how a <code>Computed</code> interacts with a weakly held <code>Signal</code>. Does it then strongly hold the <code>Signal</code>? that seems leaky.</blockquote></mx-reply>Isn‚Äôt putting a weakly held anything in a closure potentially leaky?","m.relates_to":{"m.in_reply_to":{"event_id":"$L5QdShZPsEcJz37luzp62wJTP0HOob30f_qlhI8TnwA"}},"msgtype":"m.text"},"ts":1712862292874,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$czGocSl4HYAdQhXjuLsDEopYAfewT8bGTxf5q_yd7uw"},
{"content":{"body":"oh, yeah, I would hope that this case wouldn't leak","m.mentions":{},"msgtype":"m.text"},"ts":1712862305231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BZAm7Sha2wE2NKFav3UZxyOrl1VE2wtBHJsjrna-Jcg"},
{"content":{"body":"Not if you're holding the weakRef.","m.mentions":{},"msgtype":"m.text"},"ts":1712862313595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6W0s2sVVBkW_LV6ED8oUPeFfyw9GfB_7A0JdwpYDKP0"},
{"content":{"body":"> <@mhofman:matrix.org> Not quite, there are APIs that effectively expose the `acVar.get()` value\n\nInternally the `Signal` can access the ambient Computed context‚Äôs var, but that‚Äôs not exposed?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24_r55M7FeTaYSZYj89sObgV8VaKPIIZQmSf0Cxy_my8I\">In reply to</a><a href=\"https://matrix.to/#/%40mhofman%3Amatrix.org\">@mhofman:matrix.org</a><br />Not quite, there are APIs that effectively expose the <code>acVar.get()</code> value</blockquote></mx-reply>Internally the <code data-md=\"`\">Signal</code> can access the ambient Computed context‚Äôs var, but that‚Äôs not exposed?","m.relates_to":{"m.in_reply_to":{"event_id":"$_r55M7FeTaYSZYj89sObgV8VaKPIIZQmSf0Cxy_my8I"}},"msgtype":"m.text"},"ts":1712862331660,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$f-D94Y0LJrMyLK4kYjs7oAa9Ytbo4OJ6IjF4iAoToGM"},
{"content":{"body":"though, a `weakRef` is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read by a Signal","format":"org.matrix.custom.html","formatted_body":"though, a <code>weakRef</code> is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read by a Signal","m.mentions":{},"msgtype":"m.text"},"ts":1712862348090,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ALbUsmjzNBCEfkPsYIUt53VFAGiwCQYgjxCRcuBw8Cw"},
{"content":{"body":"That‚Äôs still not global state any more than `AsyncContext` is.","format":"org.matrix.custom.html","formatted_body":"That‚Äôs still not global state any more than <code data-md=\"`\">AsyncContext</code> is.","msgtype":"m.text"},"ts":1712862350477,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc"},
{"content":{"body":" * though, a `weakRef` is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal","format":"org.matrix.custom.html","formatted_body":" * though, a <code>weakRef</code> is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal","m.mentions":{},"m.new_content":{"body":"though, a `weakRef` is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal","format":"org.matrix.custom.html","formatted_body":"though, a <code>weakRef</code> is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ALbUsmjzNBCEfkPsYIUt53VFAGiwCQYgjxCRcuBw8Cw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712862365265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HY6Si_fpSKaw9DxoXtaEBeWiOrbtTvgRDe3hCdAGhwY"},
{"content":{"body":"> <@ljharb:matrix.org> ok, so the list of tracked signals potentially shifts over time?\n\nYes, the dependency graph collected and re-formed by Signals is dynamic, as opposed to the number and indexes of Hooks, which are fixed in React. Therefore you don't need it to be unconditional and don't need a lint rule","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>ok, so the list of tracked signals potentially shifts over time?</blockquote></mx-reply>Yes, the dependency graph collected and re-formed by Signals is dynamic, as opposed to the number and indexes of Hooks, which are fixed in React. Therefore you don't need it to be unconditional and don't need a lint rule","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zxOy41hfPWfvgRo1AqLaULSjUeTpFFeyXlf9BpTxdQo"}},"msgtype":"m.text"},"ts":1712862375203,"senderName":"Xuan Huang (ÈªÑÁéÑ)","senderId":"@huxpro:matrix.org","id":"$CINW1xruv_7dhrk1QtloEdiU5lfmbn7slY1N_HSJg3Q"},
{"content":{"body":"> <@bakkot:matrix.org> though, a `weakRef` is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal\n\nSure, but its code someone could conceivably write. I'd just like to know what the behavior is. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ALbUsmjzNBCEfkPsYIUt53VFAGiwCQYgjxCRcuBw8Cw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though, a <code>weakRef</code> is kind of a scary thing to use in a signal - it's a thing whose state can change which is not being read via a Signal</blockquote></mx-reply>Sure, but its code someone could conceivably write. I'd just like to know what the behavior is.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ALbUsmjzNBCEfkPsYIUt53VFAGiwCQYgjxCRcuBw8Cw"}},"msgtype":"m.text"},"ts":1712862400352,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gjFaQluQqaPAaizimPxQDPDyVXcrTkt7y_74rkRLcOM"},
{"content":{"body":"> <@jridgewell:matrix.org> Internally the `Signal` can access the ambient Computed context‚Äôs var, but that‚Äôs not exposed?\n\nSee things like `currentComputed()` and notify guards","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f-D94Y0LJrMyLK4kYjs7oAa9Ytbo4OJ6IjF4iAoToGM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Internally the <code data-md=\"`\">Signal</code> can access the ambient Computed context‚Äôs var, but that‚Äôs not exposed?</blockquote></mx-reply>See things like <code>currentComputed()</code> and notify guards","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$f-D94Y0LJrMyLK4kYjs7oAa9Ytbo4OJ6IjF4iAoToGM"}},"msgtype":"m.text"},"ts":1712862402632,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eZFZS7FB4SQ5UAtUZpkYsxWh7E-ScOu_Ws7W-2mhZlQ"},
{"content":{"body":"In various signal implementations, there's the notion of a computed signal being \"connected\" to the graph. In other words, they are actively being watched by a an effect (via a Watcher) when you `get()` the comptued. If a signal reads a state signal, the state signal strongly holds a relationship with the computed signal. However, if the comptued is read outside an effect, then no strong connection is made, and instead we use a form of counter/version instead.","format":"org.matrix.custom.html","formatted_body":"In various signal implementations, there's the notion of a computed signal being \"connected\" to the graph. In other words, they are actively being watched by a an effect (via a Watcher) when you <code>get()</code> the comptued. If a signal reads a state signal, the state signal strongly holds a relationship with the computed signal. However, if the comptued is read outside an effect, then no strong connection is made, and instead we use a form of counter/version instead.","m.mentions":{},"msgtype":"m.text"},"ts":1712862445119,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo"},
{"content":{"body":"> <@softwarechris:matrix.org> it appears we lost the transcriptionist\n\nI'm guessing we only paid for up to the hour :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UVAmGLyCoirQGBO7IXJ0Qw2AXm1toA8Vg0FJ3Hhnl3Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>it appears we lost the transcriptionist</blockquote></mx-reply>I'm guessing we only paid for up to the hour :)","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UVAmGLyCoirQGBO7IXJ0Qw2AXm1toA8Vg0FJ3Hhnl3Y"}},"msgtype":"m.text"},"ts":1712862447605,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$zYV0kcFE1Z7v_SYGYmDGzplM-ICXuJsLi5RQ4FH5k8U"},
{"content":{"body":"üôÇ  they bill us after the fact","m.mentions":{},"msgtype":"m.text"},"ts":1712862471412,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$hTV-JO2Kf7pOpcTP3FBnyWXJ1fYvuAcN5Bjx8h98qiA"},
{"content":{"body":"So what can a Signal hold? How do we stop people putting something whose values can change unexpectedly?","m.mentions":{},"msgtype":"m.text"},"ts":1712862475608,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$3skxroQrXkKVTNVlMNKSVxYnc-IRMfKO7dWV0qITU4E"},
{"content":{"body":"> <@mhofman:matrix.org> See things like `currentComputed()` and notify guards\n\nOh, `subtle` exposes it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24eZFZS7FB4SQ5UAtUZpkYsxWh7E-ScOu_Ws7W-2mhZlQ\">In reply to</a><a href=\"https://matrix.to/#/%40mhofman%3Amatrix.org\">@mhofman:matrix.org</a><br />See things like <code>currentComputed()</code> and notify guards</blockquote></mx-reply>Oh, <code data-md=\"`\">subtle</code> exposes it.","m.relates_to":{"m.in_reply_to":{"event_id":"$eZFZS7FB4SQ5UAtUZpkYsxWh7E-ScOu_Ws7W-2mhZlQ"}},"msgtype":"m.text"},"ts":1712862476936,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XLySD7QQ3xaYGBvt2Me2lhYIfI4eQiCiu5Gx16dAJkk"},
{"content":{"body":"There is `Signal.subtle.currentComputed`","format":"org.matrix.custom.html","formatted_body":"There is <code>Signal.subtle.currentComputed</code>","m.mentions":{},"m.relates_to":{"event_id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc","is_falling_back":true,"m.in_reply_to":{"event_id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862492364,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$O6-RCbI7vPRHOF0CKKRLNcYMhFp4lc-CIzh6ec5WkME"},
{"content":{"body":"The computed will always have a strong connection to the state signals and other comptueds it depends on, but they might not have a relationship back to it.","m.mentions":{},"msgtype":"m.text"},"ts":1712862496585,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$MI_dE9PATVcsjT7Rm23A5Si7rlAW2NECxZd8vyL_gCg"},
{"content":{"body":"It's like an async context that everyone has a reference to","m.mentions":{},"m.relates_to":{"event_id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc","is_falling_back":true,"m.in_reply_to":{"event_id":"$O6-RCbI7vPRHOF0CKKRLNcYMhFp4lc-CIzh6ec5WkME"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862508006,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$E4LIi4njqRwRe7PZS9Z64sxeh3jWQQSeO16rZeM7ACs"},
{"content":{"body":"> <@aardvark179:matrix.org> So what can a Signal hold? How do we stop people putting something whose values can change unexpectedly?\n\nwhat does that mean? the developer has to update a Signal.State afaict","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3skxroQrXkKVTNVlMNKSVxYnc-IRMfKO7dWV0qITU4E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So what can a Signal hold? How do we stop people putting something whose values can change unexpectedly?</blockquote></mx-reply>what does that mean? the developer has to update a Signal.State afaict","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3skxroQrXkKVTNVlMNKSVxYnc-IRMfKO7dWV0qITU4E"}},"msgtype":"m.text"},"ts":1712862513446,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RFsSzrd0zqDLlvME_RDtVF_PoxLKGSK_goTo1TTkA80"},
{"content":{"body":"> <@aardvark179:matrix.org> So what can a Signal hold? How do we stop people putting something whose values can change unexpectedly?\n\nI state signal holds a value. a computed also holds a value and is memoized.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3skxroQrXkKVTNVlMNKSVxYnc-IRMfKO7dWV0qITU4E?via=matrix.org\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>So what can a Signal hold? How do we stop people putting something whose values can change unexpectedly?</blockquote></mx-reply>I state signal holds a value. a computed also holds a value and is memoized.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3skxroQrXkKVTNVlMNKSVxYnc-IRMfKO7dWV0qITU4E"}},"msgtype":"m.text"},"ts":1712862521497,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$nIc6pJ418-ztwbmC5uM1xfspiSoTygaEifwBA4DNuog"},
{"content":{"body":"I have a very mild concern over the name `Signal`. It could be conflated with `AbortSignal`. Many years ago it was indicated that WHATWG planned to eventually make more things called `Signal` that likely weren't this.","format":"org.matrix.custom.html","formatted_body":"I have a very mild concern over the name <code>Signal</code>. It could be conflated with <code>AbortSignal</code>. Many years ago it was indicated that WHATWG planned to eventually make more things called <code>Signal</code> that likely weren't this.","m.mentions":{},"msgtype":"m.text"},"ts":1712862531583,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c"},
{"content":{"body":"> <@rbuckton:matrix.org> I have a very mild concern over the name `Signal`. It could be conflated with `AbortSignal`. Many years ago it was indicated that WHATWG planned to eventually make more things called `Signal` that likely weren't this.\n\nI have many concerns with the name Signal, all of them mild but I think it overlaps existing terms that mean different things and doesn't quite express the concept they seem to be aiming for.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I have a very mild concern over the name <code>Signal</code>. It could be conflated with <code>AbortSignal</code>. Many years ago it was indicated that WHATWG planned to eventually make more things called <code>Signal</code> that likely weren't this.</blockquote></mx-reply>I have many concerns with the name Signal, all of them mild but I think it overlaps existing terms that mean different things and doesn't quite express the concept they seem to be aiming for.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c"}},"msgtype":"m.text"},"ts":1712862637740,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$YoGC6ZN0gPY7A-ECqD6NI-vzF-kR8kHfBt5H12_sWsM"},
{"content":{"body":"> <@rbuckton:matrix.org> I have a very mild concern over the name `Signal`. It could be conflated with `AbortSignal`. Many years ago it was indicated that WHATWG planned to eventually make more things called `Signal` that likely weren't this.\n\nYeah, but it is an omnipresent term in userland today, and always meaning something similar to this. A different term would be more confusing I think","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I have a very mild concern over the name <code>Signal</code>. It could be conflated with <code>AbortSignal</code>. Many years ago it was indicated that WHATWG planned to eventually make more things called <code>Signal</code> that likely weren't this.</blockquote></mx-reply>Yeah, but it is an omnipresent term in userland today, and always meaning something similar to this. A different term would be more confusing I think","m.relates_to":{"m.in_reply_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c"}},"msgtype":"m.text"},"ts":1712862641857,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$9n9IEAuV3sm6m5V56w_bseWaLlIpDuvrsoym-WDEAKY"},
{"content":{"body":"HI!","m.mentions":{},"msgtype":"m.text"},"ts":1712862647090,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$6k7GH27q9lHCKADhQuUNZGpiDO3CbIhLwGGMIadu0Gc"},
{"content":{"body":"Though this usage is only within the past few years","msgtype":"m.text"},"ts":1712862675254,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$MVEfSGw_XZ-1W8TZT8r0LZjOCMBhtx6DtrImp6ITz50"},
{"content":{"body":"This is valid. That said, `Signal` has a ton of momentum in the ecosystem right now to describe this effort, in part because the standardization effort was spurred by multiple shipped features called \"Signal.\" I have been happy to go with the name :)","format":"org.matrix.custom.html","formatted_body":"This is valid. That said, <code>Signal</code> has a ton of momentum in the ecosystem right now to describe this effort, in part because the standardization effort was spurred by multiple shipped features called \"Signal.\" I have been happy to go with the name :)","m.mentions":{},"m.relates_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c","is_falling_back":true,"m.in_reply_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862744042,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$O9BrceYs3_Kqhh63WxkQLfbmEesuiAfuKEqUysdIN0U"},
{"content":{"body":"> <@softwarechris:matrix.org> it appears we lost the transcriptionist\n\nwhisper transcript (linked on reflector) is still going","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UVAmGLyCoirQGBO7IXJ0Qw2AXm1toA8Vg0FJ3Hhnl3Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>it appears we lost the transcriptionist</blockquote></mx-reply>whisper transcript (linked on reflector) is still going","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UVAmGLyCoirQGBO7IXJ0Qw2AXm1toA8Vg0FJ3Hhnl3Y"}},"msgtype":"m.text"},"ts":1712862750575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rt3irZNF6koY9uKHz0_-UM9eKNTxXd8Oy1tH5jEd-7k"},
{"content":{"body":"I find it interesting that signals are gaining so much popularity right now, given that knockout existed ","m.mentions":{},"msgtype":"m.text"},"ts":1712862757852,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI"},
{"content":{"body":"Arguably, signals existed all the way back from Knockout.js and various other libraries, but the popularity of of the name \"signal\" has been in the last few years.","m.mentions":{},"msgtype":"m.text"},"ts":1712862770809,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$7fqbelAnIVetyXAHXj9ceTuPpgE7EydXYrWz4lScBZ0"},
{"content":{"body":"> <@bakkot:matrix.org> whisper transcript (linked on reflector) is still going\n\nsaved again by the kevbot!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Rt3irZNF6koY9uKHz0_-UM9eKNTxXd8Oy1tH5jEd-7k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>whisper transcript (linked on reflector) is still going</blockquote></mx-reply>saved again by the kevbot!","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rt3irZNF6koY9uKHz0_-UM9eKNTxXd8Oy1tH5jEd-7k"}},"msgtype":"m.text"},"ts":1712862771128,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$5sW4a6t5adQ_9yjo3XKwKB8ZXYbsrLFzOeZ9MSS9M64"},
{"content":{"body":"bakkotbot*","m.mentions":{},"msgtype":"m.text"},"ts":1712862779963,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$XI1n2IIDZ9G2g_UNo57yW2a5Cvzqm-sRPB24aQnVM8w"},
{"content":{"body":"Starbeam calls the primitives `Cell` and `Formula` as an Excel pun, which I like but I'm not that attached to these details :)","format":"org.matrix.custom.html","formatted_body":"Starbeam calls the primitives <code>Cell</code> and <code>Formula</code> as an Excel pun, which I like but I'm not that attached to these details :)","m.mentions":{},"m.relates_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c","is_falling_back":true,"m.in_reply_to":{"event_id":"$O9BrceYs3_Kqhh63WxkQLfbmEesuiAfuKEqUysdIN0U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862781211,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$r22l6URmj23lOWF7dk-pvyh1WDIxPRzQTn8qoISPfiE"},
{"content":{"body":"> <@rbuckton:matrix.org> I find it interesting that signals are gaining so much popularity right now, given that knockout existed \n\nRyan Carniato was a knockout dev. Sometimes things come back around","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I find it interesting that signals are gaining so much popularity right now, given that knockout existed </blockquote></mx-reply>Ryan Carniato was a knockout dev. Sometimes things come back around","m.relates_to":{"m.in_reply_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI"}},"msgtype":"m.text"},"ts":1712862783138,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$k4Wy4dRq-Sd110qscRF8wKfOTQydeRAdXZZsCq9fGj4"},
{"content":{"body":"Convergence around pull-based signals is a pretty important detail imo.","m.mentions":{},"m.relates_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI","is_falling_back":true,"m.in_reply_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862819435,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ROOnt7esLhH6po-fKt2phg_5ug097o0nbObAr22gKAM"},
{"content":{"body":"In .NET there is a somewhat similar mechanism called dependency properties.","m.mentions":{},"msgtype":"m.text"},"ts":1712862822084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SLXTHbtzVZkqrHahGVccJjNJ5LF3wq69s3OfIkdRPdA"},
{"content":{"body":"Though its tied to a property declaration, not an independent value.","m.mentions":{},"msgtype":"m.text"},"ts":1712862839320,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OmKGOhkvnvhr9h0_MDhiy8MXJNy-Y3yWQhj4QbZeTeE"},
{"content":{"body":"It's what makes them so abstractable and allows for the separation we were talking about. ","m.mentions":{},"m.relates_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI","is_falling_back":true,"m.in_reply_to":{"event_id":"$ROOnt7esLhH6po-fKt2phg_5ug097o0nbObAr22gKAM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862841760,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$uS_our7rrjKbEMUjT5DI871b7OzADkpGM-FMStiEKXs"},
{"content":{"body":"(not suggesting that as a name, \"dependency\" has an overloaded meaning in JS already)","m.mentions":{},"msgtype":"m.text"},"ts":1712862887004,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m8XGRwWSdTCg6cpmUNbcWR8i6o1WnjP0aE5KEBAOaec"},
{"content":{"body":"> <@bakkot:matrix.org> whisper transcript (linked on reflector) is still going\n\nlet me know next time!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Rt3irZNF6koY9uKHz0_-UM9eKNTxXd8Oy1tH5jEd-7k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>whisper transcript (linked on reflector) is still going</blockquote></mx-reply>let me know next time!","m.mentions":{"user_ids":["@bakkot:matrix.org","@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rt3irZNF6koY9uKHz0_-UM9eKNTxXd8Oy1tH5jEd-7k"}},"msgtype":"m.text"},"ts":1712862915394,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$IRAVY2ancZTmgmf6XiyG4sNkfDJynMfi0gQxKr-53CM"},
{"content":{"body":"Ultimately, for convergence/interop, it's pretty important that the shared primitive can support both arbitrarily interesting reactive objects built on the primitives *and* integrate deeply with the framework. ","format":"org.matrix.custom.html","formatted_body":"Ultimately, for convergence/interop, it's pretty important that the shared primitive can support both arbitrarily interesting reactive objects built on the primitives <em>and</em> integrate deeply with the framework.","m.mentions":{},"m.relates_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI","is_falling_back":true,"m.in_reply_to":{"event_id":"$uS_our7rrjKbEMUjT5DI871b7OzADkpGM-FMStiEKXs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862921348,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$3s-N_5LRBr56gYP01h0Oueol3ubJtHg5b-cobO-7b7I"},
{"content":{"body":":D","m.mentions":{},"msgtype":"m.text"},"ts":1712862940248,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$7X9Srt-cq48KbP1q4ScW7eZzN4lDKB6u1oEc54zKT84"},
{"content":{"body":"If either of those are missing, there's no real motivation to collaborate on a standard rather than build something well tuned for your framework's rendering needs","m.mentions":{},"m.relates_to":{"event_id":"$OKw9nj64UC_rm7rynE-AgUbLOQsIA8kQB9PIR1juttI","is_falling_back":true,"m.in_reply_to":{"event_id":"$3s-N_5LRBr56gYP01h0Oueol3ubJtHg5b-cobO-7b7I"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862964962,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$aWysZ1CEiRl8DsUVhteBvnWvvusJWQc1efQp6Ch4SdM"},
{"content":{"body":"also \"abortsignal\" isn't a great name anyways. the DOM _shouldn't_ build more \"signal\" things like it","format":"org.matrix.custom.html","formatted_body":"also \"abortsignal\" isn't a great name anyways. the DOM <em>shouldn't</em> build more \"signal\" things like it","m.mentions":{},"m.relates_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c","is_falling_back":true,"m.in_reply_to":{"event_id":"$r22l6URmj23lOWF7dk-pvyh1WDIxPRzQTn8qoISPfiE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712862988030,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ggzfDoQ5mCrdfc_MTP9yhaZTZQDdxiJVMrBe6KIiFKg"},
{"content":{"body":"I am willing to go with this narrative, but I personally don't believe in the strong version that implies a lost decade simply because people couldn't see what was in front of their faces ;)","m.mentions":{},"m.relates_to":{"event_id":"$7fqbelAnIVetyXAHXj9ceTuPpgE7EydXYrWz4lScBZ0","is_falling_back":true,"m.in_reply_to":{"event_id":"$7fqbelAnIVetyXAHXj9ceTuPpgE7EydXYrWz4lScBZ0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863044001,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$qiN2Wu-DVTkG8qXAQ8xrZUqcNKi9bgCryFsgnnwL09A"},
{"content":{"body":"üëçÔ∏è","m.mentions":{},"m.relates_to":{"event_id":"$k4Wy4dRq-Sd110qscRF8wKfOTQydeRAdXZZsCq9fGj4","is_falling_back":true,"m.in_reply_to":{"event_id":"$k4Wy4dRq-Sd110qscRF8wKfOTQydeRAdXZZsCq9fGj4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863070122,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$vdYr5_9YCk1wWCICLBnOFhJ9xvSlIXj3rsNmevaJjk0"},
{"content":{"body":"> <@rbuckton:matrix.org> (not suggesting that as a name, \"dependency\" has an overloaded meaning in JS already)\n\nPropagatedValue and PropagatingCalculation?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$m8XGRwWSdTCg6cpmUNbcWR8i6o1WnjP0aE5KEBAOaec?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>(not suggesting that as a name, &quot;dependency&quot; has an overloaded meaning in JS already)</blockquote></mx-reply>PropagatedValue and PropagatingCalculation?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$m8XGRwWSdTCg6cpmUNbcWR8i6o1WnjP0aE5KEBAOaec"}},"msgtype":"m.text"},"ts":1712863105206,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc"},
{"content":{"body":"Yeah we've definitely been making incremental progress the whole time","m.mentions":{},"m.relates_to":{"event_id":"$7fqbelAnIVetyXAHXj9ceTuPpgE7EydXYrWz4lScBZ0","is_falling_back":true,"m.in_reply_to":{"event_id":"$qiN2Wu-DVTkG8qXAQ8xrZUqcNKi9bgCryFsgnnwL09A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863117884,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vsTcsxNdEaApa3TI3Yf-13uJcf3YOZPtLAij-Xj0fIg"},
{"content":{"body":"\"propagate\" is too easy to misspell","m.mentions":{},"msgtype":"m.text"},"ts":1712863139054,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V8e1SnNV2EMkx9S8Hegg6oi4dFtqgaOqKLKTiMMERCo"},
{"content":{"body":"The signals proposal does something in between. There's always a counter that can be used for invalidation, and you can form a strong connection from state->effect (via a watcher). The invalidation itself works the same in both cases though (e.g. the cache is invalidated not via a watcher but via the counter)","m.mentions":{},"m.relates_to":{"event_id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo","is_falling_back":true,"m.in_reply_to":{"event_id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863211461,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$f9OgVUv2lAKHBuUbnH18esHyvHIrMjXVKoEmW8U8-dM"},
{"content":{"body":"I think I had this in my slides: the watcher is narrowly focused on notifying something that is going to flush the signal out into the real world. But then the actual flushing is a regular pull that works in the the way you described the \"no strong connection\" scenario.","m.mentions":{},"m.relates_to":{"event_id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo","is_falling_back":true,"m.in_reply_to":{"event_id":"$f9OgVUv2lAKHBuUbnH18esHyvHIrMjXVKoEmW8U8-dM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863304068,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$hSIXhbN6qzkJtoqcaNYFJioAoA9L_lOEPwM5c8osTQc"},
{"content":{"body":"> <@aardvark179:matrix.org> PropagatedValue and PropagatingCalculation?\n\nThat's decidedly worse.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>PropagatedValue and PropagatingCalculation?</blockquote></mx-reply>That's decidedly worse.","m.mentions":{"user_ids":["@aardvark179:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc"}},"msgtype":"m.text"},"ts":1712863418116,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UNMiyw0HFg5oG3Ue-ePJDFRTFecHJqVyjjcxyQDWob0"},
{"content":{"body":"> <@anthonybullard:matrix.org> Yeah, but it is an omnipresent term in userland today, and always meaning something similar to this. A different term would be more confusing I think\n\na counterexample is the GNOME platform, where \"Signal\" means pub-sub, and \"property notify\" is used for this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9n9IEAuV3sm6m5V56w_bseWaLlIpDuvrsoym-WDEAKY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Yeah, but it is an omnipresent term in userland today, and always meaning something similar to this. A different term would be more confusing I think</blockquote></mx-reply>a counterexample is the GNOME platform, where \"Signal\" means pub-sub, and \"property notify\" is used for this","m.mentions":{"user_ids":["@anthonybullard:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9n9IEAuV3sm6m5V56w_bseWaLlIpDuvrsoym-WDEAKY"}},"msgtype":"m.text"},"ts":1712863456036,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$FuTj3RhKOeZTWZcHK2NxmesugFS3UordMpYoWbNvQVM"},
{"content":{"body":"Maybe something using `Cell`? i.e., `ValueCell`, `DataCell`, etc.","format":"org.matrix.custom.html","formatted_body":"Maybe something using <code>Cell</code>? i.e., <code>ValueCell</code>, <code>DataCell</code>, etc.","m.mentions":{},"msgtype":"m.text"},"ts":1712863464710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE"},
{"content":{"body":"I have a weak aesthetic dislike for Signal for a similar reason as these rub me the wrong way: the mental model (and design) is really focused on pull-based patterns (i.e. normal JS access patterns). Propagating implies that there's a strong, semantically meaningful arrow from the state through intermediate computeds that lands on effects, and that that's how you think about invalidation.","m.mentions":{},"m.relates_to":{"event_id":"$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc","is_falling_back":true,"m.in_reply_to":{"event_id":"$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863517141,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$uquosVXAu33u3U-hah8fXV9euQGH8ptAZF28sk1Vm_E"},
{"content":{"body":"`CellLikeTheOneInExcel`","format":"org.matrix.custom.html","formatted_body":"<code>CellLikeTheOneInExcel</code>","m.mentions":{},"msgtype":"m.text"},"ts":1712863519139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Oxf7qPY1vhnMkRQrF-wl92Imivjr3Vy3tJuTQuDdtiQ"},
{"content":{"body":"What systems that use signals are aiming for is to make the whole end-to-end feel like a one-shot function that somehow is up to date, and one reason signals end up working so well across many different paradigms (and evolved independently) is that the pull-based model facilitates that design. ","m.mentions":{},"m.relates_to":{"event_id":"$gj_-ynm_15ym3icZw_K6_JFxCLPV9WPCFFugyrDd8nc","is_falling_back":true,"m.in_reply_to":{"event_id":"$uquosVXAu33u3U-hah8fXV9euQGH8ptAZF28sk1Vm_E"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863617644,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$l4UIcXDONdCYqPLkwG-XGTpAnfX8OPKeXt6pzuVbZRk"},
{"content":{"body":"If we had a native event mechanism, would we need `Watcher`?","format":"org.matrix.custom.html","formatted_body":"If we had a native event mechanism, would we need <code>Watcher</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1712863632731,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE"},
{"content":{"body":"Starbeam is `Cell` and `Formula` for this reason ü§∑","format":"org.matrix.custom.html","formatted_body":"Starbeam is <code>Cell</code> and <code>Formula</code> for this reason ü§∑","m.mentions":{},"m.relates_to":{"event_id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE","is_falling_back":true,"m.in_reply_to":{"event_id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863637427,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$Ocli-WBC6F-_61xOWIXZBgRh_w6Dd6B8aQSWOkqf-eM"},
{"content":{"body":"I just want to respect the ecosystem and my fellow framework collaborators and not turn the conversation into a rathole on this. And frankly I would be ecstatic to get framework interop with a name I don't love.","m.mentions":{},"m.relates_to":{"event_id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE","is_falling_back":true,"m.in_reply_to":{"event_id":"$Ocli-WBC6F-_61xOWIXZBgRh_w6Dd6B8aQSWOkqf-eM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863681214,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$O6sJ4-XJ1gsT4bCBaquX56rOb_2V0xv_C-qIJ4o6jLg"},
{"content":{"body":"`Watcher` is very careful to facilitate lossy consumption patterns (i.e. the notification itself is fairly simple, you're not allowed to read from the reactive value inside of it, and you can trivially and efficiently coalesce notifications into a consumer-specified scheduling mechanism)","format":"org.matrix.custom.html","formatted_body":"<code>Watcher</code> is very careful to facilitate lossy consumption patterns (i.e. the notification itself is fairly simple, you're not allowed to read from the reactive value inside of it, and you can trivially and efficiently coalesce notifications into a consumer-specified scheduling mechanism)","m.mentions":{},"m.relates_to":{"event_id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE","is_falling_back":true,"m.in_reply_to":{"event_id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863833653,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$yijmrZWPvdEPQ_A6uWfgEqzac2fj-Wc49cLI1EfgAMU"},
{"content":{"body":"> <@rbuckton:matrix.org> If we had a native event mechanism, would we need `Watcher`?\n\nI don't understand the question; what would a native event mechanism solve to simplify Watcher?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If we had a native event mechanism, would we need <code>Watcher</code>?</blockquote></mx-reply>I don't understand the question; what would a native event mechanism solve to simplify Watcher?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE"}},"msgtype":"m.text"},"ts":1712863844094,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_onNLKxhCpXJRH9278FKn8RxYb7iZ7fl75PhNdKfLk0"},
{"content":{"body":"The scheduling mechanism can include things like \"validation happens from the top-down in tree order\"","m.mentions":{},"m.relates_to":{"event_id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE","is_falling_back":true,"m.in_reply_to":{"event_id":"$yijmrZWPvdEPQ_A6uWfgEqzac2fj-Wc49cLI1EfgAMU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863853070,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$3XZKQZxH0-4CAFFW6rZx0fJ4hrberoT5oeSDXg7NgLA"},
{"content":{"body":"rbuckton: events and observables are really awesome for lossless streams of data, and have affordances and efficiency tradeoffs that are tuned for that.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: events and observables are really awesome for lossless streams of data, and have affordances and efficiency tradeoffs that are tuned for that.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"event_id":"$wQOyTo6F-5ZtFn-swvxif4WA_udi1gDCyAoKJbfwhoE","is_falling_back":true,"m.in_reply_to":{"event_id":"$3XZKQZxH0-4CAFFW6rZx0fJ4hrberoT5oeSDXg7NgLA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863898984,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$lxfu6osJ-qXGupJlbey9uhIF40ic12UehBQ10qo_0xY"},
{"content":{"body":"For example, I'd sketched out an idea awhile back about using a symbol-protocol for pub/sub events that could sit on top of `EventTarget`/`EventEmitter`/etc., and just add a very lightweight event primitive to JS. \n\nthen you do something like `cell::onchanged += () => {}` to watch for changes on a single cell.","format":"org.matrix.custom.html","formatted_body":"<p>For example, I'd sketched out an idea awhile back about using a symbol-protocol for pub/sub events that could sit on top of <code>EventTarget</code>/<code>EventEmitter</code>/etc., and just add a very lightweight event primitive to JS.</p>\n<p>then you do something like <code>cell::onchanged += () =&gt; {}</code> to watch for changes on a single cell.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712863900405,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WeuQRdhvVd8im5_OBI-EIfyZmqzRKWyOWmx3Fl2EdAw"},
{"content":{"body":"`stopImmediatePropagation` ü§¶","format":"org.matrix.custom.html","formatted_body":"<code>stopImmediatePropagation</code> ü§¶","m.mentions":{},"m.relates_to":{"event_id":"$V8e1SnNV2EMkx9S8Hegg6oi4dFtqgaOqKLKTiMMERCo","is_falling_back":true,"m.in_reply_to":{"event_id":"$V8e1SnNV2EMkx9S8Hegg6oi4dFtqgaOqKLKTiMMERCo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863919604,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$T6H5aAN8uudpNvL5Mmzi0VUeR3flFFS5PQFj59nxKZc"},
{"content":{"body":"Did I get it right?","m.mentions":{},"m.relates_to":{"event_id":"$V8e1SnNV2EMkx9S8Hegg6oi4dFtqgaOqKLKTiMMERCo","is_falling_back":true,"m.in_reply_to":{"event_id":"$T6H5aAN8uudpNvL5Mmzi0VUeR3flFFS5PQFj59nxKZc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712863922659,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ShWm_1epdT2MkR_EZmlaFhdnn1UbJ9oh1csRZvZnNz4"},
{"content":{"body":"I feel like I'm brushing you off a little too much here. I'd love to sync up and give enough time to hear you out. You've thought about this a lot and I would love to mind-meld :)","m.mentions":{},"m.relates_to":{"event_id":"$WeuQRdhvVd8im5_OBI-EIfyZmqzRKWyOWmx3Fl2EdAw","is_falling_back":true,"m.in_reply_to":{"event_id":"$WeuQRdhvVd8im5_OBI-EIfyZmqzRKWyOWmx3Fl2EdAw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864014831,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$vOmiygw46bFxFBP5LVY-6vxQcWlEUla2twwToua9bzM"},
{"content":{"body":"If the event mechanism is hookable (which it would have to be to work with `EventTarget`/`EventEmitter`), then you can be flexible in the underlying event notifaction mechanism.","format":"org.matrix.custom.html","formatted_body":"If the event mechanism is hookable (which it would have to be to work with <code>EventTarget</code>/<code>EventEmitter</code>), then you can be flexible in the underlying event notifaction mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1712864021352,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5CawzS1PnNLjgp6iMdkFWLY1qUHRdlwTgBZc2xd5VXM"},
{"content":{"body":"I think the important part of Watcher, vs events, is that is that signals are designed to be lossy. If you were to write to a signal multiple times, we'd only really care that the signal is dirty and when we get around to scheduling an update from the watcher we get the latest value. The intermediate signal state values wouldn't be important as we only \"pull\" the latest value when we're interested in it, vs being notified everytime a signal changes.","m.mentions":{},"msgtype":"m.text"},"ts":1712864032877,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$ZTD2fJxaJj7ODup_756vJEUSMLV-JMm48HFIxjBODNE"},
{"content":{"body":"> <@trueadm:matrix.org> I think the important part of Watcher, vs events, is that is that signals are designed to be lossy. If you were to write to a signal multiple times, we'd only really care that the signal is dirty and when we get around to scheduling an update from the watcher we get the latest value. The intermediate signal state values wouldn't be important as we only \"pull\" the latest value when we're interested in it, vs being notified everytime a signal changes.\n\nThat's perfectly fine. Events don't have to be lossless.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZTD2fJxaJj7ODup_756vJEUSMLV-JMm48HFIxjBODNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@trueadm:matrix.org\">@trueadm:matrix.org</a><br>I think the important part of Watcher, vs events, is that is that signals are designed to be lossy. If you were to write to a signal multiple times, we&#39;d only really care that the signal is dirty and when we get around to scheduling an update from the watcher we get the latest value. The intermediate signal state values wouldn&#39;t be important as we only &quot;pull&quot; the latest value when we&#39;re interested in it, vs being notified everytime a signal changes.</blockquote></mx-reply>That's perfectly fine. Events don't have to be lossless.","m.mentions":{"user_ids":["@trueadm:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZTD2fJxaJj7ODup_756vJEUSMLV-JMm48HFIxjBODNE"}},"msgtype":"m.text"},"ts":1712864099669,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY"},
{"content":{"body":"I can definitely imagine a foundation for events that allows things like the watcher API to fit neatly into it.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864139445,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$Cjdneh4fS2_GA74U2nttwNs4dgctJXkoaiTgn5sTdRA"},
{"content":{"body":"This use-case a good thing to keep in mind if people are going to try to nail down an events foundation","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$Cjdneh4fS2_GA74U2nttwNs4dgctJXkoaiTgn5sTdRA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864191814,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$2V2xYzujZp-jrmZOOzyIr0vAUv46qBzJtrlFI_XK3aM"},
{"content":{"body":"My main concern is adding Yet Another Subscription Mechanism to JS. I'll admit, I've done my fair share. `DisposableStack` can take callbacks and notify them, but that capability is a one shot notification and is primarily designed as an adapter for legacy code. ","format":"org.matrix.custom.html","formatted_body":"My main concern is adding Yet Another Subscription Mechanism to JS. I'll admit, I've done my fair share. <code>DisposableStack</code> can take callbacks and notify them, but that capability is a one shot notification and is primarily designed as an adapter for legacy code.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$2V2xYzujZp-jrmZOOzyIr0vAUv46qBzJtrlFI_XK3aM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864299721,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$roSQ_HRp2tsK5fRl2bh5H3vOLETVdP-U2Sy5gZlMVQY"},
{"content":{"body":"(I really wish Matrix had better threading support)28375256508519","m.mentions":{},"msgtype":"m.text"},"ts":1712864302986,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UC6l8Me7sfMN7d7aGRn1a-IG-TwKsTTeGR-xvoTgjxI"},
{"content":{"body":" * (I really wish Matrix had better threading support)","m.mentions":{},"m.new_content":{"body":"(I really wish Matrix had better threading support)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$UC6l8Me7sfMN7d7aGRn1a-IG-TwKsTTeGR-xvoTgjxI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712864310567,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$F4snDHHTK-iaHButjI9Xdb0IPnQs-XV-dBp_aMRj5Pc"},
{"content":{"body":"Same...","m.mentions":{},"msgtype":"m.text"},"ts":1712864322638,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EB-nOGiBuZmLLyo3j_JBGmtn57Unn30Z9C7K1zKOJSs"},
{"content":{"body":"rbuckton: that's a good framing for your feelings. It will help me remember your concern as we iterate the design :)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: that's a good framing for your feelings. It will help me remember your concern as we iterate the design :)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$roSQ_HRp2tsK5fRl2bh5H3vOLETVdP-U2Sy5gZlMVQY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864353149,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$4FzyVSjcrtUoWhzi4-VTGQlHMljYMRgVFfGnYg6aIUk"},
{"content":{"body":"bakkot: is the log bot down?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: is the log bot down?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1712864411109,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$n1CXKVhSPldXLehHatjuEPcJHoGTwm-dOrvN4dWlYFc"},
{"content":{"body":"But why can‚Äôt the unifying mechanism be ‚Äúcallbacks‚Äù?","msgtype":"m.text"},"ts":1712864446894,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-2b6CN2YaeTW6JUekMt1T_zXbRtAci3HW2ivsv2JA2k"},
{"content":{"body":"Regardless as to its internal implementation, `Watcher` is yet another in a long line of pub/sub mechanisms. One would be enough, two is pushing it, but we already have 5+ and some are for *very* niche events. I'd like us to stop that trend if possible.","format":"org.matrix.custom.html","formatted_body":"Regardless as to its internal implementation, <code>Watcher</code> is yet another in a long line of pub/sub mechanisms. One would be enough, two is pushing it, but we already have 5+ and some are for <em>very</em> niche events. I'd like us to stop that trend if possible.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$4FzyVSjcrtUoWhzi4-VTGQlHMljYMRgVFfGnYg6aIUk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864487118,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DjsXhiacGETovY7TyZ5Dr0yCK1mxpI36b4b8mSVbIBo"},
{"content":{"body":"I mean, that underlies all these other ones","msgtype":"m.text"},"ts":1712864556754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PlVLOg3_N_UZ6MbG81XLbE9jdJbeHliOcS-bt-0e74w"},
{"content":{"body":"That's not a unified mechanism. If you ask any JS developer if JS has events, I expect they'd say yes. Except, it doesn't. DOM has events, NodeJS has events, JS itself does not.","m.mentions":{},"msgtype":"m.text"},"ts":1712864567486,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EM83LGPjMepONRSmJR5K3HJsRYI5mQyHkP6efFdi2CE"},
{"content":{"body":"One thing to understand about the watcher mechanism is that it‚Äôs use should really be buried within the implementation of effects or rendering","msgtype":"m.text"},"ts":1712864609306,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XeTrvwHiAhvryZ_aACiVRLtj6CscvTvfRGXBkxFeh-c"},
{"content":{"body":"In an earlier design, we had the notion that you could pass a computed a callback function that would trigger when it was made dirty. The downside was that you had to pass this upon construction of the computed, which meant interoperability was impaired. However, it could be modelled differently. Is that better than having a watcher?","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$DjsXhiacGETovY7TyZ5Dr0yCK1mxpI36b4b8mSVbIBo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864639742,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$ZHaUTiK3jwFAjRMw9VexoE2rrQ3ykrG-Ja2OPx3rkas"},
{"content":{"body":"* One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs","m.new_content":{"body":"One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs","msgtype":"m.text"},"m.relates_to":{"event_id":"$XeTrvwHiAhvryZ_aACiVRLtj6CscvTvfRGXBkxFeh-c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712864731445,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k0GVUg6m9kXEuMn5fP52R9e_OL-c2mLx7DAImyNjNsE"},
{"content":{"body":"Maybe I didn't represent my position correctly when I asked if `Watcher` is needed. I agree it is needed, even with a native event mechanism, even if only as the event coordinator. I'm trying to ascertain which parts of `Watcher` are unique to `Watcher` as opposed to a generalized pub/sub mechanism.","format":"org.matrix.custom.html","formatted_body":"Maybe I didn't represent my position correctly when I asked if <code>Watcher</code> is needed. I agree it is needed, even with a native event mechanism, even if only as the event coordinator. I'm trying to ascertain which parts of <code>Watcher</code> are unique to <code>Watcher</code> as opposed to a generalized pub/sub mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1712864765759,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k"},
{"content":{"body":"rbuckton: I mostly defer to Dan and other deep in the implementation constraint space on the fine details. What I primarily care about is not turning it into yet another pipe for data to flow through","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I mostly defer to Dan and other deep in the implementation constraint space on the fine details. What I primarily care about is not turning it into yet another pipe for data to flow through","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZHaUTiK3jwFAjRMw9VexoE2rrQ3ykrG-Ja2OPx3rkas"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864793661,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$BsNvu-vPOdYFzklY2EjG7QYBXH_s_HeYmdo8NBSjcuk"},
{"content":{"body":"so I guess we're both worried about the same thing, it turns out? :)","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$BsNvu-vPOdYFzklY2EjG7QYBXH_s_HeYmdo8NBSjcuk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864809938,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$Se8EB9KjcHZEJnN939PNvTluEx-uduNAk66MjEg8eQY"},
{"content":{"body":"trueadm: doesn't that fly in the face of decoupling and abstraction goals?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@trueadm:matrix.org\">trueadm</a>: doesn't that fly in the face of decoupling and abstraction goals?","m.mentions":{"user_ids":["@trueadm:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$Se8EB9KjcHZEJnN939PNvTluEx-uduNAk66MjEg8eQY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864839751,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$b8AAfcMl7XNz_5rlyObzkMc-Ukicf2K8sT1LcZapgUQ"},
{"content":{"body":"I guess not, since you're always making a computed at the edge","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$b8AAfcMl7XNz_5rlyObzkMc-Ukicf2K8sT1LcZapgUQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864859504,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$hpyX7KMoBYU9nm48p1XWOWtOjRjOFOgirRjpIgB-Tc0"},
{"content":{"body":"Using .NET as an example (as I am oft to do), events aren't only defined using `Delegate` or `MulticastDelegate`, they are hookable. WPF has RoutedEvents which act similar to DOM events and are primarily used to work with dependency properties.","format":"org.matrix.custom.html","formatted_body":"Using .NET as an example (as I am oft to do), events aren't only defined using <code>Delegate</code> or <code>MulticastDelegate</code>, they are hookable. WPF has RoutedEvents which act similar to DOM events and are primarily used to work with dependency properties.","m.mentions":{},"msgtype":"m.text"},"ts":1712864866638,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KNCmORt49RNC4xSJPGZmn6YfcCaQxAk9758DC_1P2KQ"},
{"content":{"body":"however... it implies that the watcher is forever, no?","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$hpyX7KMoBYU9nm48p1XWOWtOjRjOFOgirRjpIgB-Tc0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864873162,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$5siLFBwCnIWkrSNTtraJ1wLCOxWjBWplrWFSnKQh544"},
{"content":{"body":"> <@wycats:matrix.org> however... it implies that the watcher is forever, no?\n\nWell back then the design allowed for effects to be detached from the graph. I was just seeing what the appetite was for an alternative approach.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5siLFBwCnIWkrSNTtraJ1wLCOxWjBWplrWFSnKQh544?via=matrix.org&via=igalia.com&via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>however... it implies that the watcher is forever, no?</blockquote></mx-reply>Well back then the design allowed for effects to be detached from the graph. I was just seeing what the appetite was for an alternative approach.","m.mentions":{"user_ids":["@wycats:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":false,"m.in_reply_to":{"event_id":"$5siLFBwCnIWkrSNTtraJ1wLCOxWjBWplrWFSnKQh544"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712864972345,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$LwAZuMfmkoG4U3IcZ2NVY5azAOs08sLlo42Q-izuc-s"},
{"content":{"body":"I think events might be fine. However, I do worry about the overhead in allocations from events and EventTarget. The signal graph is essential for performance so it needs to be as lean and optimal as possible to ensure it can scale well for complex UI cases.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$LwAZuMfmkoG4U3IcZ2NVY5azAOs08sLlo42Q-izuc-s"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865048759,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$-PZrMsJNgYtO3M8eF5OAmCnZ9_grr2kvPzdF4iIuoQg"},
{"content":{"body":"trueadm: I'm both pretty free-and-easy on the exact details of what's going on at the flushing edges *and* very committed to designing a feature that facilitates and supports \"it looks like one-shot but is magically up to date\" patterns.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@trueadm:matrix.org\">trueadm</a>: I'm both pretty free-and-easy on the exact details of what's going on at the flushing edges <em>and</em> very committed to designing a feature that facilitates and supports \"it looks like one-shot but is magically up to date\" patterns.","m.mentions":{"user_ids":["@trueadm:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$-PZrMsJNgYtO3M8eF5OAmCnZ9_grr2kvPzdF4iIuoQg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865068978,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ARsqNnRECH_wRPl6WiQ5ebXfJoEytEtIow_RFTY_hTA"},
{"content":{"body":"Preact and React get a lot of that \"for free\" (with some cost) from the JSX model.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$ARsqNnRECH_wRPl6WiQ5ebXfJoEytEtIow_RFTY_hTA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865085693,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$U8rn6oRvoiINPPJs-rWJgCg8Q5mtpd8RDbjFKg3pwvQ"},
{"content":{"body":"But the Watcher API should facilitate a way of thinking about Vue/Svelte/Ember/etc templates that are, more-or-less, like JSX.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$U8rn6oRvoiINPPJs-rWJgCg8Q5mtpd8RDbjFKg3pwvQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865111981,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$NeFVdUSlk0IZ6l8TUYRbV7y21zC0HrGaP8G1WrPtSqM"},
{"content":{"body":"It could be that `Watcher` ends up being a poor use case for events. I'm still concerned that we don't have events. Signals and events both belong to a similar class of observer-related mechanisms, and that we're catering to a niche use case without considering wider issues.","format":"org.matrix.custom.html","formatted_body":"It could be that <code>Watcher</code> ends up being a poor use case for events. I'm still concerned that we don't have events. Signals and events both belong to a similar class of observer-related mechanisms, and that we're catering to a niche use case without considering wider issues.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$NeFVdUSlk0IZ6l8TUYRbV7y21zC0HrGaP8G1WrPtSqM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865115813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fMva-4X3C7dOdcPA3yloE85bmEwu8VP5s_URci8jksY"},
{"content":{"body":"I think I see where you're coming from. I'm especially interested in the possibility of stripping away the affordances that have accreted onto the high-level EventEmitter and get down to the fundamentals","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865209025,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ghte38HrE8xW-N07OZBUeot6e5az3F_p7qGwisgXPeE"},
{"content":{"body":"What bothers me about \"why not use an event\" is that it implies a bunch of noise around the usage pattern when a much tinier pattern actually works. This is probably also why we keep getting more of these things.","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$ghte38HrE8xW-N07OZBUeot6e5az3F_p7qGwisgXPeE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865255491,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$XgVtxfCfDA5FTzVnjqESSHm59i8Y0kaOMYOFUIZRyZo"},
{"content":{"body":"FYI, I think the general consensus is that Matrix threads are a terrible UI. Replies are easier to follow when there aren't 5 conversations going on at once.","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$XgVtxfCfDA5FTzVnjqESSHm59i8Y0kaOMYOFUIZRyZo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865284329,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nK7ulys0wXjo_HtJjmHgEyaqYjLbRysJilQyUqPYh1M"},
{"content":{"body":"I guess I'm just used to it via work Slack. I have been keeping the threads pane open, but I'm probably swallowing a lot of cognitive overhead because I'm used to it.","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$nK7ulys0wXjo_HtJjmHgEyaqYjLbRysJilQyUqPYh1M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865371100,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$YsPPA_m3SNKdMb8g_5IgdAizPQEofcubQgcBGdWXAKs"},
{"content":{"body":"> <@wycats:matrix.org> What bothers me about \"why not use an event\" is that it implies a bunch of noise around the usage pattern when a much tinier pattern actually works. This is probably also why we keep getting more of these things.\n\nYes, but this becomes a death by a thousand papercuts. At some point we have to stop tacking on one-off \"similar but not the same\" mechanisms.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XgVtxfCfDA5FTzVnjqESSHm59i8Y0kaOMYOFUIZRyZo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>What bothers me about &quot;why not use an event&quot; is that it implies a bunch of noise around the usage pattern when a much tinier pattern actually works. This is probably also why we keep getting more of these things.</blockquote></mx-reply>Yes, but this becomes a death by a thousand papercuts. At some point we have to stop tacking on one-off \"similar but not the same\" mechanisms.","m.mentions":{"user_ids":["@wycats:matrix.org"]},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":false,"m.in_reply_to":{"event_id":"$XgVtxfCfDA5FTzVnjqESSHm59i8Y0kaOMYOFUIZRyZo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865377866,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VwBa_lpPz-e64Z9x68Y14PurvDgx0kzrttqrN8qj-dY"},
{"content":{"body":"I'm super into the design space of \"what's the minimal EventEmitter that would be ergonomic enough so people would use it instead of ad-hoc callbacks, and also serve as a foundation for the ones that exist\"","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$VwBa_lpPz-e64Z9x68Y14PurvDgx0kzrttqrN8qj-dY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865423637,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$SmEENcMLaCh6XLkyS4lrcknuDBnQA2P8LQNt0ktAOlc"},
{"content":{"body":"Does that characterize your position correctly?","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$SmEENcMLaCh6XLkyS4lrcknuDBnQA2P8LQNt0ktAOlc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865430722,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$gHrixcZVMFlbV4nqU6WT-b6VNAvi4hCh0ahfcViFkoA"},
{"content":{"body":"If `Watcher` is dissimilar enough, maybe I drop the concern, It just doesn't *feel* so dissimilar.","format":"org.matrix.custom.html","formatted_body":"If <code>Watcher</code> is dissimilar enough, maybe I drop the concern, It just doesn't <em>feel</em> so dissimilar.","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$SmEENcMLaCh6XLkyS4lrcknuDBnQA2P8LQNt0ktAOlc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865431915,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XNKfEt3ddAQF5xaG_1uA-c5Fqvj3Nk3VrY5CGTUVyk8"},
{"content":{"body":"> <@littledan:matrix.org> One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs\n\nljharb was quibbling with this point, but I really liked your point that the \"simple effects\" people intuit they want are a DOM feature, which keeps this point true.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XeTrvwHiAhvryZ_aACiVRLtj6CscvTvfRGXBkxFeh-c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs</blockquote></mx-reply><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, but I really liked your point that the \"simple effects\" people intuit they want are a DOM feature, which keeps this point true.","m.mentions":{"user_ids":["@littledan:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XeTrvwHiAhvryZ_aACiVRLtj6CscvTvfRGXBkxFeh-c"}},"msgtype":"m.text"},"ts":1712865494584,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM"},
{"content":{"body":"> <@wycats:matrix.org> Does that characterize your position correctly?\n\nThat and \"how do we make it compatible with the DOM and NodeJS\". I'm pretty sure there would be opposition to a wholly new event mechanism.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gHrixcZVMFlbV4nqU6WT-b6VNAvi4hCh0ahfcViFkoA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>Does that characterize your position correctly?</blockquote></mx-reply>That and \"how do we make it compatible with the DOM and NodeJS\". I'm pretty sure there would be opposition to a wholly new event mechanism.","m.mentions":{"user_ids":["@wycats:matrix.org"]},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":false,"m.in_reply_to":{"event_id":"$gHrixcZVMFlbV4nqU6WT-b6VNAvi4hCh0ahfcViFkoA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865547732,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$USoWWQf8HnrPbS9kStiRCA7ccJuwmNk3mhOeqSvE2xc"},
{"content":{"body":"> <@littledan:matrix.org> One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs\n\n * ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked what your point (the \"simple effects\" people intuit they want are a DOM feature). ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XeTrvwHiAhvryZ_aACiVRLtj6CscvTvfRGXBkxFeh-c?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>One thing to understand about the watcher mechanism is that its use should really be buried within the implementation of effects or rendering, not for direct use by JS devs</blockquote></mx-reply> * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked what your point (the \"simple effects\" people intuit they want are a DOM feature).","m.mentions":{},"m.new_content":{"body":"ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked what your point (the \"simple effects\" people intuit they want are a DOM feature). ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked what your point (the \"simple effects\" people intuit they want are a DOM feature).","m.mentions":{"user_ids":["@littledan:matrix.org","@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712865570846,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$B7vTfY-i9HnKaF1F3HGpIyW-EW8T0yaK0sAYBJNoqCU"},
{"content":{"body":" * ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).","m.mentions":{},"m.new_content":{"body":"ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).","m.mentions":{"user_ids":["@littledan:matrix.org","@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712865581535,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ugE9RlpI4brMwF-lVWiprH5xSuIs4zIgpv9nQYgbNbA"},
{"content":{"body":"`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N","format":"org.matrix.custom.html","formatted_body":"`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N","msgtype":"m.text"},"ts":1712865689691,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE"},
{"content":{"body":"* `Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers ","format":"org.matrix.custom.html","formatted_body":"* `Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers¬†","m.new_content":{"body":"`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers ","format":"org.matrix.custom.html","formatted_body":"`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers¬†","msgtype":"m.text"},"m.relates_to":{"event_id":"$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712865712178,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$haMM83wQufbSJ_55QfFLRwaYT8veTUdWWMA8P6QJ0Zs"},
{"content":{"body":"> <@aclaymore:matrix.org> `Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N\n\nGreat observation!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N</blockquote></mx-reply>Great observation!","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE"}},"msgtype":"m.text"},"ts":1712865713365,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$eaA1UMJWuqjzhw4Ss8LZ2ft6S__IvkyTGVkS8l6QvBY"},
{"content":{"body":"I would like to have proposed an events mechanism before, and have wanted one for years, but I'm already overcommitted to other work and I hadn't yet reached the proverbial \"last straw\".","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$USoWWQf8HnrPbS9kStiRCA7ccJuwmNk3mhOeqSvE2xc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712865729355,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZJ8cggCkQ8RR-pib0smcIGAYCBQKh9uTuWqR33QYr1s"},
{"content":{"body":"> <@aclaymore:matrix.org> `Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers\n\nMaybe it is, but Signals, Observables, Promises, and Events all belong to a similar category of observation mechanisms, even if they fill out different quadrants.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>`Watcher` is in someways like `FinalizationRegistry`, where its core purpose is to be notified. So taking a single callback as a constructor argument maybe does fit this pattern well. As opposed to EventEmitters which are fan out to a changing N observers¬†</blockquote></mx-reply>Maybe it is, but Signals, Observables, Promises, and Events all belong to a similar category of observation mechanisms, even if they fill out different quadrants.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$P9L433UFh0xxSxwOlX8uJRSyh8ACiqgpRNclR2lGDcE"}},"msgtype":"m.text"},"ts":1712865845624,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s6-N_MmQ7yT2tXVZIiui3YFVsnWQPGU28-z0_unnPKU"},
{"content":{"body":"True, but something grouping things hides how they should be approached differently ","format":"org.matrix.custom.html","formatted_body":"True, but something grouping things hides how they should be approached differently¬†","msgtype":"m.text"},"ts":1712865909152,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PYiTaF8ZldFuCakh4EWqir5SAkSkmh7ESEjnSDA7XR8"},
{"content":{"body":"Observables can model Promises and also synchronous return values. But when I worked on projects that used Observables in perhaps too many places it was hard to reason about them. \"Is this an observable of many values, or one. Is it async or sync\"  ","format":"org.matrix.custom.html","formatted_body":"Observables can model Promises and also synchronous return values. But when I worked on projects that used Observables in perhaps too many places it was hard to reason about them. \"Is this an observable of many values, or one. Is it async or sync\"¬†¬†","msgtype":"m.text"},"ts":1712866024899,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$04UjNRrSdWpSqrXjYFO9xaV7IEtBQxFQRIekbKWvaWQ"},
{"content":{"body":"The Watcher is more like a Sink than an Emitter. And has a different set of responsibilities ","format":"org.matrix.custom.html","formatted_body":"The Watcher is more like a Sink than an Emitter. And has a different set of responsibilities¬†","msgtype":"m.text"},"ts":1712866061284,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Nj_tFufN45gNbe6IxPJOsADmJ6a31S9aTM3lyWkRbig"},
{"content":{"body":"but I do see your point","format":"org.matrix.custom.html","formatted_body":"but I do see your point","msgtype":"m.text"},"ts":1712866078532,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$f0vmeNB5yVR4MaA_ourfwe01KT2Wdh8QM3ke1LfTwew"},
{"content":{"body":"Side question: How much of the Signals proposal is actually `Signal`/`Computed` vs `Watcher`? In other words, is `Watcher` the building block that both `Signal` and `Computed` are built on?","format":"org.matrix.custom.html","formatted_body":"Side question: How much of the Signals proposal is actually <code>Signal</code>/<code>Computed</code> vs <code>Watcher</code>? In other words, is <code>Watcher</code> the building block that both <code>Signal</code> and <code>Computed</code> are built on?","m.mentions":{},"msgtype":"m.text"},"ts":1712866089915,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bNahd-0k7KwrwakUy6p7cjpSCtFEaFIe6tpoE96P3Kw"},
{"content":{"body":"Signals and computed on their own work, but to be reactive without watcher that would be a polling system. Like how some hardware works where the main loop just keeps checking what is dirty ","format":"org.matrix.custom.html","formatted_body":"Signals and computed on their own work, but to be reactive without watcher that would be a polling system. Like how some hardware works where the main loop just keeps checking what is dirty¬†","msgtype":"m.text"},"ts":1712866205553,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$QqDyXdeluh-UYnhhMgziOQbCniqCYugyXCB0__OiFjQ"},
{"content":{"body":"on their own the caching still works ","format":"org.matrix.custom.html","formatted_body":"on their own the caching still works¬†","msgtype":"m.text"},"ts":1712866223569,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$HYZbFLf-SPOR7EvkHuJkz2-zFvRQAsOOEoT2z2lRtu4"},
{"content":{"body":"> <@rbuckton:matrix.org> Side question: How much of the Signals proposal is actually `Signal`/`Computed` vs `Watcher`? In other words, is `Watcher` the building block that both `Signal` and `Computed` are built on?\n\nNo, it's not","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bNahd-0k7KwrwakUy6p7cjpSCtFEaFIe6tpoE96P3Kw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Side question: How much of the Signals proposal is actually <code>Signal</code>/<code>Computed</code> vs <code>Watcher</code>? In other words, is <code>Watcher</code> the building block that both <code>Signal</code> and <code>Computed</code> are built on?</blockquote></mx-reply>No, it's not","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$bNahd-0k7KwrwakUy6p7cjpSCtFEaFIe6tpoE96P3Kw"}},"msgtype":"m.text"},"ts":1712866233731,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$i_n7OxLx4OiDqlXHBurrCnwZIhGCEY_7dA-EFePBXsA"},
{"content":{"body":"Reading a computed twice in a row is cached ","format":"org.matrix.custom.html","formatted_body":"Reading a computed twice in a row is cached¬†","msgtype":"m.text"},"ts":1712866236047,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2aidBjtz6CkJkq52OCr-rjAIupZ0QMZKZcxSvOl6Zqs"},
{"content":{"body":"> <@wycats:matrix.org> No, it's not\n\nEverything about reading computeds, having them cache, invalidation, etc can be described without reference to the `Watcher`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$i_n7OxLx4OiDqlXHBurrCnwZIhGCEY_7dA-EFePBXsA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>No, it's not</blockquote></mx-reply>Everything about reading computeds, having them cache, invalidation, etc can be described without reference to the <code>Watcher</code>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$i_n7OxLx4OiDqlXHBurrCnwZIhGCEY_7dA-EFePBXsA"}},"msgtype":"m.text"},"ts":1712866333377,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$VYi9o1JA9jboddGkzDEM_k5DNnj9Sjizhriv6fimTyA"},
{"content":{"body":"a `Watcher` allows you to say \"I am using this computed to populate a sink of some sort (usually a DOM node), and I need to know when any of its dependencies change so I can properly schedule it to update and read its value when I do that\"","format":"org.matrix.custom.html","formatted_body":"a <code>Watcher</code> allows you to say \"I am using this computed to populate a sink of some sort (usually a DOM node), and I need to know when any of its dependencies change so I can properly schedule it to update and read its value when I do that\"","m.mentions":{},"msgtype":"m.text"},"ts":1712866388132,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$BWn_U2yxaxNcRVdWsBwZKJVPdpSy6r7QPKJ1P2Ttf1I"},
{"content":{"body":"> <@aclaymore:matrix.org> The Watcher is more like a Sink than an Emitter. And has a different set of responsibilities\n\nThis is a fair point. I have to think more about my concerns and whether I might still consider them blocking for stage 2. Either way, I still think it is unfortunate that we might have this and yet still be missing events.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Nj_tFufN45gNbe6IxPJOsADmJ6a31S9aTM3lyWkRbig?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>The Watcher is more like a Sink than an Emitter. And has a different set of responsibilities¬†</blockquote></mx-reply>This is a fair point. I have to think more about my concerns and whether I might still consider them blocking for stage 2. Either way, I still think it is unfortunate that we might have this and yet still be missing events.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Nj_tFufN45gNbe6IxPJOsADmJ6a31S9aTM3lyWkRbig"}},"msgtype":"m.text"},"ts":1712866406551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3xwcAsPtCU_Aq8rUWwz1oj9YZxjzMm79rZU5XPBlABk"},
{"content":{"body":"> <@rbuckton:matrix.org> This is a fair point. I have to think more about my concerns and whether I might still consider them blocking for stage 2. Either way, I still think it is unfortunate that we might have this and yet still be missing events.\n\nI keep trying to nudge the term `Sink` into the explanations we give","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3xwcAsPtCU_Aq8rUWwz1oj9YZxjzMm79rZU5XPBlABk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This is a fair point. I have to think more about my concerns and whether I might still consider them blocking for stage 2. Either way, I still think it is unfortunate that we might have this and yet still be missing events.</blockquote></mx-reply>I keep trying to nudge the term <code>Sink</code> into the explanations we give","m.mentions":{"user_ids":["@rbuckton:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3xwcAsPtCU_Aq8rUWwz1oj9YZxjzMm79rZU5XPBlABk"}},"msgtype":"m.text"},"ts":1712866659173,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$SN5QTM4RzwntIQPJ2ubbXelJZ5PfspfycwYykQS-olE"},
{"content":{"body":"I think it's really good","m.mentions":{},"msgtype":"m.text"},"ts":1712866662109,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$K03nj8jZNHfLKJQqV--YbognPqMCJ045igHjcngcVjs"},
{"content":{"body":"Signals feels like we're giving everyone a chainsaw when they need a flathead screwdriver. Sure, that's great for the woodcutters, but that means the rest of us have to get by with a butter knife. Normally, I wouldn't conflate two proposals in this way were it not for the close similarities.","m.mentions":{},"msgtype":"m.text"},"ts":1712866675019,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uFRxicy1ajK0C-IaKR5TJaJEoEo202Hjm6RqfXqBVTA"},
{"content":{"body":"> <@rbuckton:matrix.org> Maybe it is, but Signals, Observables, Promises, and Events all belong to a similar category of observation mechanisms, even if they fill out different quadrants.\n\nI'm pretty open to filling out the table. Some formal-ish observations: Signals facilitate discrete updates, are pull-based, and have a lot in common with the incremental computation academic space","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$s6-N_MmQ7yT2tXVZIiui3YFVsnWQPGU28-z0_unnPKU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Maybe it is, but Signals, Observables, Promises, and Events all belong to a similar category of observation mechanisms, even if they fill out different quadrants.</blockquote></mx-reply>I'm pretty open to filling out the table. Some formal-ish observations: Signals facilitate discrete updates, are pull-based, and have a lot in common with the incremental computation academic space","m.mentions":{"user_ids":["@rbuckton:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s6-N_MmQ7yT2tXVZIiui3YFVsnWQPGU28-z0_unnPKU"}},"msgtype":"m.text"},"ts":1712866756317,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$r6MPPUZ52TJyS7K4YMe-VYwoZr4kn3y-wy6hMoCG3Sk"},
{"content":{"body":"And don't get me wrong, I like the idea of signals. I've used knockout and React and so many other systems with a similar concept, and I can see its utility in other places as well.","m.mentions":{},"msgtype":"m.text"},"ts":1712866779471,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G1cg___DIBF3c7pBCh0_QuQq8TND6hgs0YY06ccq8XQ"},
{"content":{"body":"> <@wycats:matrix.org> I'm pretty open to filling out the table. Some formal-ish observations: Signals facilitate discrete updates, are pull-based, and have a lot in common with the incremental computation academic space\n\nPeople want to tell me that they're push-pull, but signals do a pretty different thing than what people usually mean by push-pull, producing pretty different abstractability and interface outcomes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$r6MPPUZ52TJyS7K4YMe-VYwoZr4kn3y-wy6hMoCG3Sk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>I'm pretty open to filling out the table. Some formal-ish observations: Signals facilitate discrete updates, are pull-based, and have a lot in common with the incremental computation academic space</blockquote></mx-reply>People want to tell me that they're push-pull, but signals do a pretty different thing than what people usually mean by push-pull, producing pretty different abstractability and interface outcomes","m.mentions":{"user_ids":["@rbuckton:matrix.org","@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$r6MPPUZ52TJyS7K4YMe-VYwoZr4kn3y-wy6hMoCG3Sk"}},"msgtype":"m.text"},"ts":1712866812617,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$eBu-CwypO_kVTn0NI5t5uDTh_D87hlAN_goKYCrXm1o"},
{"content":{"body":"I could believe you want to make \"push-pull\" more subtle","m.mentions":{},"msgtype":"m.text"},"ts":1712866828306,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$Ln_Xbyy0mJ4EMUNOmineNPSo9FblQVF8_Paypm9iV9o"},
{"content":{"body":"\"Filling out the table\" was supposed to include Observable as well. I'm not certain why the proposal switched venues.","m.mentions":{},"msgtype":"m.text"},"ts":1712866880565,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_KUppve6z3wu1nBHh6LEXkvjF_1_fC92jSTeQZYW38I"},
{"content":{"body":"Can setting a signal trigger a UI update? If so, it's push based.","m.mentions":{},"msgtype":"m.text"},"ts":1712866905146,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0-_-WEXHeswF4dJBt20eNTveQtN4j__xkB504O3GWZg"},
{"content":{"body":"rbuckton: What, imo, is new from the FRP wikipedia page (or even the various attempts to nail this down in terms of promises and observables) is that we have a lot of existence proofs now that the theoretical issues people have with those choices are managable and efficient at scale in the context of web UIs.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: What, imo, is new from the FRP wikipedia page (or even the various attempts to nail this down in terms of promises and observables) is that we have a lot of existence proofs now that the theoretical issues people have with those choices are managable and efficient at scale in the context of web UIs.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712866907484,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$lmQgnzIZZFBIGjwGI7NoX46s8kilch4v7KuaxMkHs5U"},
{"content":{"body":" * Can setting a signal trigger a UI update? If so, it's _also_ push based.","format":"org.matrix.custom.html","formatted_body":" * Can setting a signal trigger a UI update? If so, it's <em>also</em> push based.","m.mentions":{},"m.new_content":{"body":"Can setting a signal trigger a UI update? If so, it's _also_ push based.","format":"org.matrix.custom.html","formatted_body":"Can setting a signal trigger a UI update? If so, it's <em>also</em> push based.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0-_-WEXHeswF4dJBt20eNTveQtN4j__xkB504O3GWZg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712866915172,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HTzFXUGCSMtWiRuwMVLyTgj-H1J4eRYeFkVOk9eDBVI"},
{"content":{"body":"> <@rbuckton:matrix.org> Can setting a signal trigger a UI update? If so, it's _also_ push based.\n\nSetting a signal sends a notification, but there's an all-signals read-write barrier in the notification, which prevents you from simply updating the UI right there","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0-_-WEXHeswF4dJBt20eNTveQtN4j__xkB504O3GWZg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Can setting a signal trigger a UI update? If so, it's <em>also</em> push based.</blockquote></mx-reply>Setting a signal sends a notification, but there's an all-signals read-write barrier in the notification, which prevents you from simply updating the UI right there","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0-_-WEXHeswF4dJBt20eNTveQtN4j__xkB504O3GWZg"}},"msgtype":"m.text"},"ts":1712866967958,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$ezs0LUdZ-t3gUKvIR7lR9ANCeBrGNO8uS2X8jqmiiFM"},
{"content":{"body":"it also doesn't need to propagate through computeds","m.mentions":{},"msgtype":"m.text"},"ts":1712866977435,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$f2c3l4XCmzagfqFanoV9_gLz-eucuJvZH2zUOgkyztg"},
{"content":{"body":"`Computed` is definitely pull only.","format":"org.matrix.custom.html","formatted_body":"<code>Computed</code> is definitely pull only.","m.mentions":{},"msgtype":"m.text"},"ts":1712866977790,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3Tw0h93aEdpcXhbPiq2xQpK2lfFH49UE_Y31FidrfHM"},
{"content":{"body":"At the extreme end, the original Ember model (which is spiritually equivalent) has a single microtask notification that coalesces any amount of signal updates","m.mentions":{},"msgtype":"m.text"},"ts":1712867042522,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$50mGaLRLB8vi2Ffq7uLFaVIJG20HGYJy8jYFoS2bTak"},
{"content":{"body":"and that causes a top-down revalidation uses pull-based revalidation to cut off subtrees, and which manages to be relatively efficient because of the natural logarithmic(ish) properties of output DOM trees","m.mentions":{},"msgtype":"m.text"},"ts":1712867137746,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$0l7oGoH7X1VnFq9DmPNnQDEqtm2VlFoR66v9-sDpInc"},
{"content":{"body":"You can call this a \"push\" but it's not really what people mean when they talk about \"push-pull\" models","m.mentions":{},"msgtype":"m.text"},"ts":1712867166256,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$swrw-YK6jcSu4TRl2ZCEqoi-jAbYuPj3Zwkvq-XvQuA"},
{"content":{"body":"I will withdraw my Stage 2 blocking concern. While I'd like to have a native event mechanism, `Watcher` does not seem like a fit for it and I don't think it's fair to block a proposal on the basis of the existence or non-existence of a separate proposal I do not have the capacity to champion myself. I am still concerned about the lack of events, but I'm willing to wait until the next push trigger to raise the concern, or for when I have less on my plate.","format":"org.matrix.custom.html","formatted_body":"I will withdraw my Stage 2 blocking concern. While I'd like to have a native event mechanism, <code>Watcher</code> does not seem like a fit for it and I don't think it's fair to block a proposal on the basis of the existence or non-existence of a separate proposal I do not have the capacity to champion myself. I am still concerned about the lack of events, but I'm willing to wait until the next push trigger to raise the concern, or for when I have less on my plate.","m.mentions":{},"msgtype":"m.text"},"ts":1712867344199,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fWduh7AaPm4yoRvTX3oBLVyQptKJBsts7Unanw2-WEY"},
{"content":{"body":"> <@wycats:matrix.org> You can call this a \"push\" but it's not really what people mean when they talk about \"push-pull\" models\n\nI suppose that's true in the broader sense","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$swrw-YK6jcSu4TRl2ZCEqoi-jAbYuPj3Zwkvq-XvQuA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>You can call this a &quot;push&quot; but it&#39;s not really what people mean when they talk about &quot;push-pull&quot; models</blockquote></mx-reply>I suppose that's true in the broader sense","m.mentions":{"user_ids":["@wycats:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$swrw-YK6jcSu4TRl2ZCEqoi-jAbYuPj3Zwkvq-XvQuA"}},"msgtype":"m.text"},"ts":1712867497080,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T3TzqWWXCSD5GI9E3Ts0w5bvQIc19ydkg0mB74MQ9k0"},
{"content":{"body":"I have an interesting observation, though in the end it is perhaps not relevant to signals. For a number of years I have also been considering a proposal to add `ref` (though potentially spelled `&`) for both reference passing and reified references, i.e.:\n\n```js\nfunction f(&x) { x = 1; } // reference passing\nfunction g(xref) { xref.value = 2; } // reified reference\n\nlet y = 0;\n\nf(&y); // pass reference to mutable binding\ny; // 1\n\nconst yref = &y; \ng(yref); // pass reified reference to mutable binding\n\ny; // 2\n\nlet &ym = yref; // dereference to mutable binding\nym = 3;\n\ny; // 3\n\nconst &yc = yref; // dereference to immutable (but live) binding\ny++;\nyc; // 4\n```\n\nI wonder how interesting it would be if you could treat state/computed as refs:\n\n```js\nlet &counter = new Signal.State(0);\ncounter; // 0\ncounter++;\ncounter; // 1\n\nconst &parity = new Signal.Computed(() => counter % 2 ? \"odd\" : \"even\");\n```","format":"org.matrix.custom.html","formatted_body":"<p>I have an interesting observation, though in the end it is perhaps not relevant to signals. For a number of years I have also been considering a proposal to add <code>ref</code> (though potentially spelled <code>&amp;</code>) for both reference passing and reified references, i.e.:</p>\n<pre><code class=\"language-js\">function f(&amp;x) { x = 1; } // reference passing\nfunction g(xref) { xref.value = 2; } // reified reference\n\nlet y = 0;\n\nf(&amp;y); // pass reference to mutable binding\ny; // 1\n\nconst yref = &amp;y; \ng(yref); // pass reified reference to mutable binding\n\ny; // 2\n\nlet &amp;ym = yref; // dereference to mutable binding\nym = 3;\n\ny; // 3\n\nconst &amp;yc = yref; // dereference to immutable (but live) binding\ny++;\nyc; // 4\n</code></pre>\n<p>I wonder how interesting it would be if you could treat state/computed as refs:</p>\n<pre><code class=\"language-js\">let &amp;counter = new Signal.State(0);\ncounter; // 0\ncounter++;\ncounter; // 1\n\nconst &amp;parity = new Signal.Computed(() =&gt; counter % 2 ? \"odd\" : \"even\");\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712868639539,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1_m2y2nA1FngKda7dk_tAdgUd-AjYkB8Lj8V16zm0RM"},
{"content":{"body":"I've been collecting use cases and this seems like an interesting one.","m.mentions":{},"msgtype":"m.text"},"ts":1712868688206,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WAVRLYCn_qZV956lwf14SyqquxF0E-JUKZCtyT_2miw"},
{"content":{"body":"Some of the other use cases include decorators (to handle circularity/TDZ)\n\n```js\n@Entity\nclass Parent {\n  @OneToMany(&Child) children;\n}\n\n@Entity\nclass Child {\n  @ManyToOne(&Parent) parent;\n}\n```\n\nand private state in shared structs\n\n```js\nshared struct AtomicValue {\n  #value; // do not allow unordered access to private field\n\n  load() { return Atomics.load(&this.#value); }\n  compareExchange(expected, replacement) { return Atomics.compareExchange(&this.#value, expected, replacement); }\n  ...\n}\n```\n\nPlus a few others.","format":"org.matrix.custom.html","formatted_body":"<p>Some of the other use cases include decorators (to handle circularity/TDZ)</p>\n<pre><code class=\"language-js\">@Entity\nclass Parent {\n  @OneToMany(&amp;Child) children;\n}\n\n@Entity\nclass Child {\n  @ManyToOne(&amp;Parent) parent;\n}\n</code></pre>\n<p>and private state in shared structs</p>\n<pre><code class=\"language-js\">shared struct AtomicValue {\n  #value; // do not allow unordered access to private field\n\n  load() { return Atomics.load(&amp;this.#value); }\n  compareExchange(expected, replacement) { return Atomics.compareExchange(&amp;this.#value, expected, replacement); }\n  ...\n}\n</code></pre>\n<p>Plus a few others.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712869021400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xkACQFFcY9gjnDB348l9tzbbkwMZmkOVhHbwikgNqNI"},
{"content":{"body":"To the runtime, `&` is more like a syntactic transformation, so the signals example ends up treated as something roughly like this:\n\n```js\nconst ref_mut_counter = new Signal.State(0);\nref_mut_counter.value; // 0\nref_mut_counter.value++;\nref_mut_counter.value; // 1\n\nconst ref_cnst_parity = new Signal.Computed(() => ref_mut_counter.value % 2 ? \"odd\" : \"even\");\n```\n\n","format":"org.matrix.custom.html","formatted_body":"<p>To the runtime, <code>&amp;</code> is more like a syntactic transformation, so the signals example ends up treated as something roughly like this:</p>\n<pre><code class=\"language-js\">const ref_mut_counter = new Signal.State(0);\nref_mut_counter.value; // 0\nref_mut_counter.value++;\nref_mut_counter.value; // 1\n\nconst ref_cnst_parity = new Signal.Computed(() =&gt; ref_mut_counter.value % 2 ? \"odd\" : \"even\");\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1712869324812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cukHFnrh-5JcyOryXJ2H5YxoeyieQFB3LXOKp-Dui0Q"},
{"content":{"body":"One benefit to having Signals as a built-in mechanism in ECMA-262 is that we could get away with specifying it as a reified reference.","m.mentions":{},"msgtype":"m.text"},"ts":1712869424763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-VTVPaxFvmWuN5O3NapV5XZZu4Ql-XCPxTlMr5xMSII"},
{"content":{"body":"or rather, a kind of reified reference.","m.mentions":{},"msgtype":"m.text"},"ts":1712869449775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2gHKzycA2WJsh_1z6o_aayqFZZNDLDieTe_bz29cfG8"},
{"content":{"body":"I had to suddenly switch back to work-work -- sorry for disappearing mid-convo :)","m.mentions":{},"msgtype":"m.text"},"ts":1712870363671,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$BnnKzvQUGitgUFpccvbhTkb5Qvpvzc5W1DTzUXLYO0c"},
{"content":{"body":"> <@rbuckton:matrix.org> To the runtime, `&` is more like a syntactic transformation, so the signals example ends up treated as something roughly like this:\n> \n> ```js\n> const ref_mut_counter = new Signal.State(0);\n> ref_mut_counter.value; // 0\n> ref_mut_counter.value++;\n> ref_mut_counter.value; // 1\n> \n> const ref_cnst_parity = new Signal.Computed(() => ref_mut_counter.value % 2 ? \"odd\" : \"even\");\n> ```\n\nfwiw, I am personally interested in exploring trimming down the portion of the API that really has to be a reference, ideally separating it from the value portion. This is roughly the Starbeam API, but I would need to float it by other framework authors to see whether there are incidental simplifying assumptions in Ember that let us get away with that design, but which prevent it from being fully general","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cukHFnrh-5JcyOryXJ2H5YxoeyieQFB3LXOKp-Dui0Q?via=matrix.org&via=igalia.com&via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>To the runtime, <code>&amp;</code> is more like a syntactic transformation, so the signals example ends up treated as something roughly like this:</p>\n<pre><code class=\"language-js\">const ref_mut_counter = new Signal.State(0);\nref_mut_counter.value; // 0\nref_mut_counter.value++;\nref_mut_counter.value; // 1\n\nconst ref_cnst_parity = new Signal.Computed(() =&gt; ref_mut_counter.value % 2 ? \"odd\" : \"even\");\n</code></pre>\n</blockquote></mx-reply>fwiw, I am personally interested in exploring trimming down the portion of the API that really has to be a reference, ideally separating it from the value portion. This is roughly the Starbeam API, but I would need to float it by other framework authors to see whether there are incidental simplifying assumptions in Ember that let us get away with that design, but which prevent it from being fully general","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cukHFnrh-5JcyOryXJ2H5YxoeyieQFB3LXOKp-Dui0Q"}},"msgtype":"m.text"},"ts":1712870492477,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$In_5tBl6zDk5apw9h9Bh6Tq0z8Kme9xNTJ329Hsr3rs"},
{"content":{"body":"> <@wycats:matrix.org> I had to suddenly switch back to work-work -- sorry for disappearing mid-convo :)\n\nAnd now I really do have to go! Please DM me with any follow-ups. The thoughtful feedback and questions were really invigorating :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BnnKzvQUGitgUFpccvbhTkb5Qvpvzc5W1DTzUXLYO0c?via=matrix.org&via=igalia.com&via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>I had to suddenly switch back to work-work -- sorry for disappearing mid-convo :)</blockquote></mx-reply>And now I really do have to go! Please DM me with any follow-ups. The thoughtful feedback and questions were really invigorating :)","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$BnnKzvQUGitgUFpccvbhTkb5Qvpvzc5W1DTzUXLYO0c"}},"msgtype":"m.text"},"ts":1712871031967,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$Y4mxP1WIMvl9AVSpFpHVrvjuXkqbBGMZSL249qFIvZI"},
{"content":{"body":"> <@rbuckton:matrix.org> I have an interesting observation, though in the end it is perhaps not relevant to signals. For a number of years I have also been considering a proposal to add `ref` (though potentially spelled `&`) for both reference passing and reified references, i.e.:\n> \n> ```js\n> function f(&x) { x = 1; } // reference passing\n> function g(xref) { xref.value = 2; } // reified reference\n> \n> let y = 0;\n> \n> f(&y); // pass reference to mutable binding\n> y; // 1\n> \n> const yref = &y; \n> g(yref); // pass reified reference to mutable binding\n> \n> y; // 2\n> \n> let &ym = yref; // dereference to mutable binding\n> ym = 3;\n> \n> y; // 3\n> \n> const &yc = yref; // dereference to immutable (but live) binding\n> y++;\n> yc; // 4\n> ```\n> \n> I wonder how interesting it would be if you could treat state/computed as refs:\n> \n> ```js\n> let &counter = new Signal.State(0);\n> counter; // 0\n> counter++;\n> counter; // 1\n> \n> const &parity = new Signal.Computed(() => counter % 2 ? \"odd\" : \"even\");\n> ```\n\nThat's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.\n\n```js\nlet counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 2\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1_m2y2nA1FngKda7dk_tAdgUd-AjYkB8Lj8V16zm0RM?via=matrix.org&via=igalia.com&via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I have an interesting observation, though in the end it is perhaps not relevant to signals. For a number of years I have also been considering a proposal to add <code>ref</code> (though potentially spelled <code>&amp;</code>) for both reference passing and reified references, i.e.:</p>\n<pre><code class=\"language-js\">function f(&amp;x) { x = 1; } // reference passing\nfunction g(xref) { xref.value = 2; } // reified reference\n\nlet y = 0;\n\nf(&amp;y); // pass reference to mutable binding\ny; // 1\n\nconst yref = &amp;y; \ng(yref); // pass reified reference to mutable binding\n\ny; // 2\n\nlet &amp;ym = yref; // dereference to mutable binding\nym = 3;\n\ny; // 3\n\nconst &amp;yc = yref; // dereference to immutable (but live) binding\ny++;\nyc; // 4\n</code></pre>\n<p>I wonder how interesting it would be if you could treat state/computed as refs:</p>\n<pre><code class=\"language-js\">let &amp;counter = new Signal.State(0);\ncounter; // 0\ncounter++;\ncounter; // 1\n\nconst &amp;parity = new Signal.Computed(() =&gt; counter % 2 ? \"odd\" : \"even\");\n</code></pre>\n</blockquote></mx-reply><p>That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.</p>\n<pre><code class=\"language-js\">let counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 2\n</code></pre>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1_m2y2nA1FngKda7dk_tAdgUd-AjYkB8Lj8V16zm0RM"}},"msgtype":"m.text"},"ts":1712871798761,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$OhS33Hc3jSjdkoqYIl4I2tertAniSMPP0VtZ64MP_Po"},
{"content":{"body":"> <@trueadm:matrix.org> That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.\n> \n> ```js\n> let counter = $state(0):\n> \n> counter++;\n> console.log(counter); // 2\n> ```\n\nit's also how Ember works with our precursor to signals and how Starbeam (our next generation reactivity system, which is my primary technical project on Ember these days) interacts with them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OhS33Hc3jSjdkoqYIl4I2tertAniSMPP0VtZ64MP_Po?via=matrix.org&via=igalia.com&via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@trueadm:matrix.org\">@trueadm:matrix.org</a><br><p>That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.</p>\n<pre><code class=\"language-js\">let counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 2\n</code></pre>\n</blockquote></mx-reply>it's also how Ember works with our precursor to signals and how Starbeam (our next generation reactivity system, which is my primary technical project on Ember these days) interacts with them.","m.mentions":{"user_ids":["@trueadm:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OhS33Hc3jSjdkoqYIl4I2tertAniSMPP0VtZ64MP_Po"}},"msgtype":"m.text"},"ts":1712871904339,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$VyOhgNw5OZF_aq5BJ6o2XBaaVneZ0PEyDp2yDQWEDZ8"},
{"content":{"body":" * That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.\n\n```js\nlet counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 1\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1_m2y2nA1FngKda7dk_tAdgUd-AjYkB8Lj8V16zm0RM?via=matrix.org&amp;via=igalia.com&amp;via=aelf.land\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I have an interesting observation, though in the end it is perhaps not relevant to signals. For a number of years I have also been considering a proposal to add <code>ref</code> (though potentially spelled <code>&amp;</code>) for both reference passing and reified references, i.e.:</p>\n<pre><code class=\"language-js\">function f(&amp;x) { x = 1; } // reference passing\nfunction g(xref) { xref.value = 2; } // reified reference\n\nlet y = 0;\n\nf(&amp;y); // pass reference to mutable binding\ny; // 1\n\nconst yref = &amp;y; \ng(yref); // pass reified reference to mutable binding\n\ny; // 2\n\nlet &amp;ym = yref; // dereference to mutable binding\nym = 3;\n\ny; // 3\n\nconst &amp;yc = yref; // dereference to immutable (but live) binding\ny++;\nyc; // 4\n</code></pre>\n<p>I wonder how interesting it would be if you could treat state/computed as refs:</p>\n<pre><code class=\"language-js\">let &amp;counter = new Signal.State(0);\ncounter; // 0\ncounter++;\ncounter; // 1\n\nconst &amp;parity = new Signal.Computed(() =&gt; counter % 2 ? \"odd\" : \"even\");\n</code></pre>\n</blockquote></mx-reply> * <p>That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.</p>\n<pre><code class=\"language-js\">let counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 1\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.\n\n```js\nlet counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 1\n```","format":"org.matrix.custom.html","formatted_body":"<p>That's pretty much how Svelte 5 works with signals. We don't actually expose Signal objects, instead they're hidden away by the compiler.</p>\n<pre><code class=\"language-js\">let counter = $state(0):\n\ncounter++;\nconsole.log(counter); // 1\n</code></pre>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OhS33Hc3jSjdkoqYIl4I2tertAniSMPP0VtZ64MP_Po","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712871905492,"senderName":"trueadm","senderId":"@trueadm:matrix.org","id":"$4b6nVoAMADxvll7WeD9t7NR4ZyVpLYUWvkkBHPPwTBg"},
{"content":{"body":"There's mostly a pretty close mapping between the concepts we use and signals.","m.mentions":{},"msgtype":"m.text"},"ts":1712871920872,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$UTCFpRW8wxpYWylvxenUh73joWo4CMYnjjq_AXAWUhs"},
{"content":{"body":"Also, turns out if I want to avoid nerd-sniping myself, I need to turn off notifications :P","m.mentions":{},"msgtype":"m.text"},"ts":1712871939175,"senderName":"Yehuda Katz","senderId":"@wycats:matrix.org","id":"$yc9JjV6MhluIef0ANYyon76XhOM0afGCFZlKQGn968U"}
]