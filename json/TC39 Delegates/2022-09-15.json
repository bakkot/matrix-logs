[
{"content":{"body":"> <@aclaymore:matrix.org> For me it’s also that the bot is slower than the stenographer. For me to be of any use taking notes I have to add a 5-10 second delay to my audio. Which further means I can’t interact with what is happening.\n\nI will tweak the bot a little for this evening to make it more eager at the cost of being a little less accurate, which be a good tradeoff; we'll have to see.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kCN0T0gZ8WaPsB_pFmv1zYIOkI1Ubhn9g3QuyljQzLI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>For me it’s also that the bot is slower than the stenographer. For me to be of any use taking notes I have to add a 5-10 second delay to my audio. Which further means I can’t interact with what is happening.</blockquote></mx-reply>I will tweak the bot a little for this evening to make it more eager at the cost of being a little less accurate, which be a good tradeoff; we'll have to see.","m.relates_to":{"m.in_reply_to":{"event_id":"$kCN0T0gZ8WaPsB_pFmv1zYIOkI1Ubhn9g3QuyljQzLI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@aclaymore:matrix.org> For me it’s also that the bot is slower than the stenographer. For me to be of any use taking notes I have to add a 5-10 second delay to my audio. Which further means I can’t interact with what is happening.\n\nI will tweak the bot a little for this evening to make it more eager at the cost of being a little less accurate, which be a good tradeoff; we'll have to see.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kCN0T0gZ8WaPsB_pFmv1zYIOkI1Ubhn9g3QuyljQzLI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>For me it’s also that the bot is slower than the stenographer. For me to be of any use taking notes I have to add a 5-10 second delay to my audio. Which further means I can’t interact with what is happening.</blockquote></mx-reply>I will tweak the bot a little for this evening to make it more eager at the cost of being a little less accurate, which be a good tradeoff; we'll have to see.","mimetype":"text/html"}]},"ts":1663202911682,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$waXXA7jV7UYKej7Eg9ZxD_J8Ol9ConZfsE6nCubOcF8"},
{"content":{"body":"no host again?","msgtype":"m.text","org.matrix.msc1767.text":"no host again?"},"ts":1663203430086,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aCyduP9j4YnkbC8NeWhQuRiq2AOJ0XIYwnPOHcN82bA"},
{"content":{"body":"Appears not","msgtype":"m.text","org.matrix.msc1767.text":"Appears not"},"ts":1663203529476,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$uEMWfgMfTG_lG4xzZNrcfwix-igxjFd3RePy7Qu-eXw"},
{"content":{"body":"I can start it,give me a few seconds","msgtype":"m.text"},"ts":1663203555375,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$e_Ssb53832FfaNI8VPP2VusuUolnH0Cu1c0bFRn7x_w"},
{"content":{"body":"I don't think it asked for the code","msgtype":"m.text","org.matrix.msc1767.text":"I don't think it asked for the code"},"ts":1663203653865,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m_-875Qzq5U2nGtsgkZh5nzX4vKl4zJzjhWUs6OPB-I"},
{"content":{"body":" * I don't think it asked for the code","m.new_content":{"body":"I don't think it asked for the code","msgtype":"m.text","org.matrix.msc1767.text":"I don't think it asked for the code"},"m.relates_to":{"event_id":"$m_-875Qzq5U2nGtsgkZh5nzX4vKl4zJzjhWUs6OPB-I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I don't think it asked for the code"},"ts":1663203665814,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Jf9HDkZ9i5flE3ccyvjNMAWs3G_eG_nyxa11xd7ctQM"},
{"content":{"body":"You may need to refresh now to get in","msgtype":"m.text"},"ts":1663203672237,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vYJo-6oNN7h-IwvaYyFmp9seqiB4wTk5E0CoKlbtaHE"},
{"content":{"body":"The meeting is started","msgtype":"m.text"},"ts":1663203677905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Uqf9jRFgoGEqF5Gm3Hu_YoykB90VUZX0dBCHEvY6Zj8"},
{"content":{"body":"one second","msgtype":"m.text","org.matrix.msc1767.text":"one second"},"ts":1663204395814,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ypy3AvvjGNPGcWw63aDFxe2kAIV3uPOtWvupp6LbnVU"},
{"content":{"body":"audio issue, will be sorted in a moment","msgtype":"m.text","org.matrix.msc1767.text":"audio issue, will be sorted in a moment"},"ts":1663204426521,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oDuO90DxILrS524LwWStfM_zNMDKNjTSVlVqtWVXB5Q"},
{"content":{"body":"Michael Ficarra: yes to your queue question, afaict","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: yes to your queue question, afaict","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Michael Ficarra: yes to your queue question, afaict","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a>: yes to your queue question, afaict","mimetype":"text/html"}]},"ts":1663205301292,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oQPLjvamyQbbVNcSLqFwVcLXTuyGeqhFSk3RYTNLvh4"},
{"content":{"body":"it is basically a const with some extra semantics","msgtype":"m.text","org.matrix.msc1767.text":"it is basically a const with some extra semantics"},"ts":1663205309652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qK4q92AWy0ydCqFiDVGb1hg6m26eqwAo23HIoqiveZI"},
{"content":{"body":"I figured, but want to confirm","msgtype":"m.text","org.matrix.msc1767.text":"I figured, but want to confirm"},"ts":1663205320502,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KPq10wf1_5UBLeXU_Zusxuo7toSnAniWFOZA6DNNmcU"},
{"content":{"body":"const bindings can be closed over and don't ever *become* TDZ once they are bound, this is kind of the opposite of consts","format":"org.matrix.custom.html","formatted_body":"const bindings can be closed over and don't ever <em>become</em> TDZ once they are bound, this is kind of the opposite of consts","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"const bindings can be closed over and don't ever *become* TDZ once they are bound, this is kind of the opposite of consts","mimetype":"text/plain"},{"body":"const bindings can be closed over and don't ever <em>become</em> TDZ once they are bound, this is kind of the opposite of consts","mimetype":"text/html"}]},"ts":1663205350082,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vc3cGbj8kCHGHRKwnIKk1700pK9YG3NmYwtwEZRZ6CM"},
{"content":{"body":"wait what","msgtype":"m.text","org.matrix.msc1767.text":"wait what"},"ts":1663205380994,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cZl7s9UFhFyfUxDi2lfN5QD3xkUfdoZyx4n7dH3l4PA"},
{"content":{"body":"how can `using` _become_ TDZ?","format":"org.matrix.custom.html","formatted_body":"how can <code>using</code> <em>become</em> TDZ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"how can `using` _become_ TDZ?","mimetype":"text/plain"},{"body":"how can <code>using</code> <em>become</em> TDZ?","mimetype":"text/html"}]},"ts":1663205387832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZjwEuRAqCM0h9Wyl1Ds1PFjIp653JZMT8z0gOGiwPVs"},
{"content":{"body":"after disposal I would assume that's what happens","msgtype":"m.text","org.matrix.msc1767.text":"after disposal I would assume that's what happens"},"ts":1663205416877,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Tasyqst4wBkRZi6t0M3inzhn2rHWqKRqF6qblqnRTqI"},
{"content":{"body":"what that would be crazy","msgtype":"m.text","org.matrix.msc1767.text":"what that would be crazy"},"ts":1663205428041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d2InehwGjwwalqXQvUaLdRB_ZWdAB19Q9QtNkHL99os"},
{"content":{"body":"does it just keep its current value?","msgtype":"m.text","org.matrix.msc1767.text":"does it just keep its current value?"},"ts":1663205431334,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qxPp2hROBm3dNZDwCRFQP4w1AUH0CeplV9zSwAYcMks"},
{"content":{"body":"i hope that doesn't happen, let me read spec draft again","msgtype":"m.text","org.matrix.msc1767.text":"i hope that doesn't happen, let me read spec draft again"},"ts":1663205433745,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hZTY6gf4I5ldC2iOS2LxvXqValFgcySwdTNJH8KBLBM"},
{"content":{"body":"it just calls @@dispose i thought","msgtype":"m.text","org.matrix.msc1767.text":"it just calls @@dispose i thought"},"ts":1663205437919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wyUonAHTQ90yRC1sBZQpOdvPX62ywF_OBbi4t1xCvNI"},
{"content":{"body":"it doesn't do any binding magic","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't do any binding magic"},"ts":1663205440868,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J6PtzWgs_D2LE95EgTG9CM4GxuaoJMSrLhjdMh1G-Ww"},
{"content":{"body":"it's probably more useful to developers to TDZ the binding","msgtype":"m.text","org.matrix.msc1767.text":"it's probably more useful to developers to TDZ the binding"},"ts":1663205480333,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Sg45x4hww2I3i0TWSb-7tgJ4t4-lBystSlMNRuvevCU"},
{"content":{"body":"doesn't `let` have this same syntactic quirk?","format":"org.matrix.custom.html","formatted_body":"doesn't <code>let</code> have this same syntactic quirk?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"doesn't `let` have this same syntactic quirk?","mimetype":"text/plain"},{"body":"doesn't <code>let</code> have this same syntactic quirk?","mimetype":"text/html"}]},"ts":1663205539682,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qyOdTVDVqiLe-wN4V0ft_e786RK1h6eCTgBoxWhagak"},
{"content":{"body":"i am strongly opposed uninitializing the binding after disposing","msgtype":"m.text","org.matrix.msc1767.text":"i am strongly opposed uninitializing the binding after disposing"},"ts":1663205545116,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3ZBroKoLoLJObGTE_C2nCaet6hDdxLeozeOmeAd3mv4"},
{"content":{"body":"i'm also pretty sure that's not what the current proposal does","msgtype":"m.text","org.matrix.msc1767.text":"i'm also pretty sure that's not what the current proposal does"},"ts":1663205563877,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KpG8RIb_IsZadtaZCso354zVWqsN3CSby4-bxfu9GDI"},
{"content":{"body":"this would be the first time we would move *to* a TDZ","format":"org.matrix.custom.html","formatted_body":"this would be the first time we would move <em>to</em> a TDZ","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this would be the first time we would move *to* a TDZ","mimetype":"text/plain"},{"body":"this would be the first time we would move <em>to</em> a TDZ","mimetype":"text/html"}]},"ts":1663205565608,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$H91i--WzfrSl1s0i5kV-jyEFuEl0cE0uNvnUv5VD2B4"},
{"content":{"body":"we're still a memory-safe language so I don't really see why this is an important thing to do","msgtype":"m.text","org.matrix.msc1767.text":"we're still a memory-safe language so I don't really see why this is an important thing to do"},"ts":1663205578665,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1yHFLLMyup__lG0R12qJbf0QZRaGcLl8Z_Zfg33UwAw"},
{"content":{"body":"it would just discourage accidental use of something that's been disposed","msgtype":"m.text","org.matrix.msc1767.text":"it would just discourage accidental use of something that's been disposed"},"ts":1663205600272,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mY9svo1YX43YCHS92XPhmq73lBDJhTL_uKlvBDLoDrQ"},
{"content":{"body":"it would be easier to identify bugs","msgtype":"m.text","org.matrix.msc1767.text":"it would be easier to identify bugs"},"ts":1663205606588,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AKWuRrzvO-S7EprfeXL5gsKZMgNrCW0sZucqeTBlurU"},
{"content":{"body":"I think it's not unreasoable to move it to TDZ, it would prevent you from using a variable which is already meant to not be used anymore","msgtype":"m.text","org.matrix.msc1767.text":"I think it's not unreasoable to move it to TDZ, it would prevent you from using a variable which is already meant to not be used anymore"},"ts":1663205612896,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9HyuXTarGv7vQkAPvLdpO-NCX7gwzkmPl-7GFLbwOyM"},
{"content":{"body":"it would complicate what little more hope we have of optimizing away TDZ","msgtype":"m.text","org.matrix.msc1767.text":"it would complicate what little more hope we have of optimizing away TDZ"},"ts":1663205625779,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$imLC6_Mjn8APMiaFcfVCtRTbfESopq9-7_L2HrGm5YY"},
{"content":{"body":"unless the disposal protocol is meant to be used on things that remain useful after disposal?","msgtype":"m.text","org.matrix.msc1767.text":"unless the disposal protocol is meant to be used on things that remain useful after disposal?"},"ts":1663205634925,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dgb7hU7Pfb-Op-k4x5-_C5JRr8VMv4Y_TXzfVesOh6c"},
{"content":{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","format":"org.matrix.custom.html","formatted_body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","mimetype":"text/plain"},{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","mimetype":"text/html"}]},"ts":1663205648463,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0"},
{"content":{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };","format":"org.matrix.custom.html","formatted_body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };","m.new_content":{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };","format":"org.matrix.custom.html","formatted_body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };","mimetype":"text/plain"},{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };","mimetype":"text/plain"},{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };","mimetype":"text/html"}]},"ts":1663205662375,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7MPHJO6JLic5xEry2nqTcl5JdySgtH3Fz4xWbKfjp_Q"},
{"content":{"body":"the bar for messing with bindings should be very high","msgtype":"m.text","org.matrix.msc1767.text":"the bar for messing with bindings should be very high"},"ts":1663205664855,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$11jwgGm04TasweFmA0c-BW1t_egOXGzA7wFdslWOW8A"},
{"content":{"body":"> <@littledan:matrix.org> the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };\n\nIMO this case is just not worth our design energy","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };</blockquote></mx-reply>IMO this case is just not worth our design energy","m.relates_to":{"m.in_reply_to":{"event_id":"$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding` \\*/ } };\n\nIMO this case is just not worth our design energy","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding</code> */ } };</blockquote></mx-reply>IMO this case is just not worth our design energy","mimetype":"text/html"}]},"ts":1663205675979,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5qrgsUqUI8XDXVwym9lkoVusx87AkWOMR_K2qkxstps"},
{"content":{"body":"littledan: no? a closure could escape","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: no? a closure could escape","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: no? a closure could escape","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: no? a closure could escape","mimetype":"text/html"}]},"ts":1663205676074,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9AsscsswlewWWmS19LC8ZC656bfWcAIf1pXBl5iDauA"},
{"content":{"body":"oh, oops","msgtype":"m.text","org.matrix.msc1767.text":"oh, oops"},"ts":1663205690470,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UXDHXx3abIUzZ-AIn-4yf9PIdnPNDeF5EjafI7eN6GQ"},
{"content":{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","format":"org.matrix.custom.html","formatted_body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","m.new_content":{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","format":"org.matrix.custom.html","formatted_body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","mimetype":"text/plain"},{"body":"the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$6Hn2ZGvbNk4qOVjoLpZ-NM4pI8UFWRnnXtiRORE1Gs0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did `using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };`","mimetype":"text/plain"},{"body":" * the accidental use case would need to be from someone's disposal callback, so it'd only come up if you did <code>using x = {[Symbol.dispose]() { /* variable which is closed over that is also a using binding \\*/ } };</code>","mimetype":"text/html"}]},"ts":1663205699620,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M5doAzfNNS34thiTkVAxNVY9uexQaT_QNbmIy0tCV8g"},
{"content":{"body":"```js\n{\n  using db = getConnection()\n  setTimeout(() => db.query(\"...\"), 100);\n} // disposes the connection  \n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">{\n  using db = getConnection()\n  setTimeout(() =&gt; db.query(&quot;...&quot;), 100);\n} // disposes the connection  \n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"```js\n{\n  using db = getConnection()\n  setTimeout(() => db.query(\"...\"), 100);\n} // disposes the connection  \n```","mimetype":"text/plain"},{"body":"<pre><code class=\"language-js\">{\n  using db = getConnection()\n  setTimeout(() =&gt; db.query(&quot;...&quot;), 100);\n} // disposes the connection  \n</code></pre>\n","mimetype":"text/html"}]},"ts":1663205716305,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OBJddq7BM0Ndyd8cJmcXv2ZAFaODUGwQvzgD56pa0vE"},
{"content":{"body":"why *do* we allow const there?","format":"org.matrix.custom.html","formatted_body":"why <em>do</em> we allow const there?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why *do* we allow const there?","mimetype":"text/plain"},{"body":"why <em>do</em> we allow const there?","mimetype":"text/html"}]},"ts":1663205762086,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pLmUYQiJ81yPwFOPHvS3M64vBNVn44hrx7MQzDMe9FM"},
{"content":{"body":" * why *do* we allow const there?","format":"org.matrix.custom.html","formatted_body":" * why <em>do</em> we allow const there?","m.new_content":{"body":"why *do* we allow const there?","format":"org.matrix.custom.html","formatted_body":"why <em>do</em> we allow const there?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"why *do* we allow const there?","mimetype":"text/plain"},{"body":"why <em>do</em> we allow const there?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$pLmUYQiJ81yPwFOPHvS3M64vBNVn44hrx7MQzDMe9FM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * why *do* we allow const there?","mimetype":"text/plain"},{"body":" * why <em>do</em> we allow const there?","mimetype":"text/html"}]},"ts":1663205767040,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oW6P8AFWOSAs4lqHEnP2sXSi9cceu0anzCV15opwmz8"},
{"content":{"body":"it kind of seems like something that'd be web compatible to disallow, since it'd be unlikely someone ships that code","msgtype":"m.text","org.matrix.msc1767.text":"it kind of seems like something that'd be web compatible to disallow, since it'd be unlikely someone ships that code"},"ts":1663205781185,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TD6aIj98hSD0Cj1j-ksLKy5jYaGVjChBpDrpJ-hi_Ro"},
{"content":{"body":"moving it back into tdz is super weird","msgtype":"m.text","org.matrix.msc1767.text":"moving it back into tdz is super weird"},"ts":1663205785410,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S3MOn9CmiWyot6mlCG8f849bAjC1_KuHxAPOKDj-tA8"},
{"content":{"body":"> <@shuyuguo:matrix.org> moving it back into tdz is super weird\n\npdz, \"permanent dead zone\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S3MOn9CmiWyot6mlCG8f849bAjC1_KuHxAPOKDj-tA8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>moving it back into tdz is super weird</blockquote></mx-reply>pdz, &quot;permanent dead zone&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$S3MOn9CmiWyot6mlCG8f849bAjC1_KuHxAPOKDj-tA8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> moving it back into tdz is super weird\n\npdz, \"permanent dead zone\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$S3MOn9CmiWyot6mlCG8f849bAjC1_KuHxAPOKDj-tA8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>moving it back into tdz is super weird</blockquote></mx-reply>pdz, &quot;permanent dead zone&quot;","mimetype":"text/html"}]},"ts":1663205808178,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fBRzuHOlDIwwTPNzQrtqSjLVf7-UxsK4tXN5Ed5Vq6Y"},
{"content":{"body":"I guess implementers of the disposal protocol need to handle `use-after-dispose` anyway; moving to TDZ could help if it removed that need for them but it wouldn't","format":"org.matrix.custom.html","formatted_body":"I guess implementers of the disposal protocol need to handle <code>use-after-dispose</code> anyway; moving to TDZ could help if it removed that need for them but it wouldn't","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess implementers of the disposal protocol need to handle `use-after-dispose` anyway; moving to TDZ could help if it removed that need for them but it wouldn't","mimetype":"text/plain"},{"body":"I guess implementers of the disposal protocol need to handle <code>use-after-dispose</code> anyway; moving to TDZ could help if it removed that need for them but it wouldn't","mimetype":"text/html"}]},"ts":1663205833947,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vyouMHkR1lqM_Sb171f54AzR1WG8QIvr7unIojYQ7og"},
{"content":{"body":"Uhm right, it wouldn't because the disposable value can still escape even if the binding doesn't","msgtype":"m.text","org.matrix.msc1767.text":"Uhm right, it wouldn't because the disposable value can still escape even if the binding doesn't"},"ts":1663205872111,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$wassN3y9Sl9vrUBhVB1t-uKOXb_5YclL9E8Ub7s0b7c"},
{"content":{"body":"You just have to reassign it to a variable","msgtype":"m.text","org.matrix.msc1767.text":"You just have to reassign it to a variable"},"ts":1663205880376,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$y8V4K71Uy5DnmSO1Mr38o7MZVvjZ0gN9ZCjgUvKCT4s"},
{"content":{"body":"poison pill the value 👿","msgtype":"m.text","org.matrix.msc1767.text":"poison pill the value 👿"},"ts":1663205930074,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9RkxS5RnbHzXIC1FnWB0JL-dFxFYz6dCHRf-JeiN2Mk"},
{"content":{"body":"who? what?","msgtype":"m.text","org.matrix.msc1767.text":"who? what?"},"ts":1663205966792,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZfTliSD_kiVqrorKvYqUEY1CfPOKD-JmySsuKrh79d4"},
{"content":{"body":"you can only `using` a revocable proxy, and disposal revokes it :-p","format":"org.matrix.custom.html","formatted_body":"you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can only `using` a revocable proxy, and disposal revokes it :-p","mimetype":"text/plain"},{"body":"you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","mimetype":"text/html"}]},"ts":1663205971855,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uvW02Sh1TLUZB5AS2xt37JnQDmYva35TmrFyMGqUkNE"},
{"content":{"body":" * you can only `using` a revocable proxy, and disposal revokes it :-p","format":"org.matrix.custom.html","formatted_body":" * you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","m.new_content":{"body":"you can only `using` a revocable proxy, and disposal revokes it :-p","format":"org.matrix.custom.html","formatted_body":"you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you can only `using` a revocable proxy, and disposal revokes it :-p","mimetype":"text/plain"},{"body":"you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$uvW02Sh1TLUZB5AS2xt37JnQDmYva35TmrFyMGqUkNE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * you can only `using` a revocable proxy, and disposal revokes it :-p","mimetype":"text/plain"},{"body":" * you can only <code>using</code> a revocable proxy, and disposal revokes it :-p","mimetype":"text/html"}]},"ts":1663205975746,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$B-DYdl7br9oMPj0Pf7U0tfykGYMEM2WRianlimCTQh0"},
{"content":{"body":"michael it sounds like you want a language that doesn't start with java and end with script","msgtype":"m.text","org.matrix.msc1767.text":"michael it sounds like you want a language that doesn't start with java and end with script"},"ts":1663206039840,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ccT6p6ScWSL7tYorhP_8ImXI_xjTJcVT2GxwfRLsAS4"},
{"content":{"body":"I really want to know whether it is ever reasonable to use a value after disposal","msgtype":"m.text","org.matrix.msc1767.text":"I really want to know whether it is ever reasonable to use a value after disposal"},"ts":1663206077946,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BKRbTz54tSZu8KRdrn9RrgRmaVW3QqUtvWGxUZ9KyhA"},
{"content":{"body":"or if our intent is that that is never appropriate","msgtype":"m.text","org.matrix.msc1767.text":"or if our intent is that that is never appropriate"},"ts":1663206088253,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$elmoomH0xrtmuxu2jgLkrQFTWhQwzNf5m2yTIvn6ThA"},
{"content":{"body":"a file handle could be reopened, or a DB connection?","msgtype":"m.text","org.matrix.msc1767.text":"a file handle could be reopened, or a DB connection?"},"ts":1663206109677,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$o-AvUPSdb_N6hQZUUX0Ra_6DxDnweC1VF0Ai57B8f2I"},
{"content":{"body":"i think it is reasonable","msgtype":"m.text","org.matrix.msc1767.text":"i think it is reasonable"},"ts":1663206110547,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cuMgmv92MWV5WfFtLrv9pvznNYO643yoVmO0WS1MEWY"},
{"content":{"body":"if it is not reasonable, we should do what we can to surface an error when that reuse happens","msgtype":"m.text","org.matrix.msc1767.text":"if it is not reasonable, we should do what we can to surface an error when that reuse happens"},"ts":1663206114926,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UcE_qol16UTn-hc5iF2vH8PZA4vTirxpsm4qx19uTOo"},
{"content":{"body":" * a file handle could be reopened, or a DB connection?","m.new_content":{"body":"a file handle could be reopened, or a DB connection?","msgtype":"m.text","org.matrix.msc1767.text":"a file handle could be reopened, or a DB connection?"},"m.relates_to":{"event_id":"$o-AvUPSdb_N6hQZUUX0Ra_6DxDnweC1VF0Ai57B8f2I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * a file handle could be reopened, or a DB connection?"},"ts":1663206122548,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lgKfpXyRljntMuSfXuMz7XFsoLPeBoc0qvgRX_c4r6c"},
{"content":{"body":"RAII doesn't always mean \"irrevocably unusable\"","msgtype":"m.text","org.matrix.msc1767.text":"RAII doesn't always mean \"irrevocably unusable\""},"ts":1663206124322,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5ww3SSK4hOTv3SeXA1nIM-3Do4479WaQ03k0ibGsJgo"},
{"content":{"body":"sometimes you just piggyback on RAII scope to do things like locking mutexes","msgtype":"m.text","org.matrix.msc1767.text":"sometimes you just piggyback on RAII scope to do things like locking mutexes"},"ts":1663206133346,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NNrPrrBuzdJygeOu2Ka3tKlXnJSLYH6IDhueUUhnnXI"},
{"content":{"body":"or temporarily unlocking","msgtype":"m.text","org.matrix.msc1767.text":"or temporarily unlocking"},"ts":1663206136092,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1OdOJTdQAGSYGafNZnsC2G6C2HYCV1PxoAfm1VEyy8s"},
{"content":{"body":"I think it's OK that this is the responsibility of the implementer of the disposal protocol","msgtype":"m.text","org.matrix.msc1767.text":"I think it's OK that this is the responsibility of the implementer of the disposal protocol"},"ts":1663206138762,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VBlA8GbqsoF3H6xmwtgvSVL3HSNjvOjqyR74yhx7uQE"},
{"content":{"body":"those values remain usable","msgtype":"m.text","org.matrix.msc1767.text":"those values remain usable"},"ts":1663206140802,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Od_8RHTRb7rjKDUsPdxhP_dUHTfIoCSkNCLvbzc5nBE"},
{"content":{"body":"objects with casual state machines are normal. double return on an iterator, double close, &c","msgtype":"m.text","org.matrix.msc1767.text":"objects with casual state machines are normal. double return on an iterator, double close, &c"},"ts":1663206161074,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$P75raFiwKdbmZoscrjykyaTpBPnyTenJclOtmmnQWgU"},
{"content":{"body":"hey, I must have missed this slide!","msgtype":"m.text","org.matrix.msc1767.text":"hey, I must have missed this slide!"},"ts":1663206171219,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$BqIJe9d5RgjatzmQ0ajMbe_uUfxnNLvUt0E0FS0ZnU0"},
{"content":{"body":"hot take: we should take everything in contextlib and explicitly avoid it","msgtype":"m.text","org.matrix.msc1767.text":"hot take: we should take everything in contextlib and explicitly avoid it"},"ts":1663206559191,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$h_sbI9qckWuwpLM6HaW7ltWo1QNyTmHNmDNzEf3pEWw"},
{"content":{"body":"we should normalize larger timeboxes for larger proposals","msgtype":"m.text","org.matrix.msc1767.text":"we should normalize larger timeboxes for larger proposals"},"ts":1663206795363,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v1ddmJA2WZeByGbLA_WA28jzdDq8T70fi3C8AQ7lElU"},
{"content":{"body":"I would be opposed to a timebox extension to discuss things we are not even considering at the moment","msgtype":"m.text","org.matrix.msc1767.text":"I would be opposed to a timebox extension to discuss things we are not even considering at the moment"},"ts":1663206997447,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$-g6n0oM_AniIAYgIBDIadocHUB4RVAuxt6fTcQLi9Z4"},
{"content":{"body":"yeah error cause seems weird since you'd need to mutate the other exception. AggregateError seems correct","msgtype":"m.text","org.matrix.msc1767.text":"yeah error cause seems weird since you'd need to mutate the other exception. AggregateError seems correct"},"ts":1663207397430,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qMw8GXt7KAYPtitZ9t7RWwoFXi5LhHCaKF9T9wtU29w"},
{"content":{"body":"love me some AV issues","msgtype":"m.text","org.matrix.msc1767.text":"love me some AV issues"},"ts":1663207485268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gYwGUzLTpPtHjsFZ3YEdwryUn_SVdEW2mJXURGL2Yjw"},
{"content":{"body":"> <@michaelficarra:matrix.org> I would be opposed to a timebox extension to discuss things we are not even considering at the moment\n\nIMO it is important that we give adequate time to this discussion, and most of that is on the proposal","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-g6n0oM_AniIAYgIBDIadocHUB4RVAuxt6fTcQLi9Z4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I would be opposed to a timebox extension to discuss things we are not even considering at the moment</blockquote></mx-reply>IMO it is important that we give adequate time to this discussion, and most of that is on the proposal","m.relates_to":{"m.in_reply_to":{"event_id":"$-g6n0oM_AniIAYgIBDIadocHUB4RVAuxt6fTcQLi9Z4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@michaelficarra:matrix.org> I would be opposed to a timebox extension to discuss things we are not even considering at the moment\n\nIMO it is important that we give adequate time to this discussion, and most of that is on the proposal","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-g6n0oM_AniIAYgIBDIadocHUB4RVAuxt6fTcQLi9Z4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>I would be opposed to a timebox extension to discuss things we are not even considering at the moment</blockquote></mx-reply>IMO it is important that we give adequate time to this discussion, and most of that is on the proposal","mimetype":"text/html"}]},"ts":1663207496938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QakRvheH_Z4Ddi7_VBTpoMqLso7YB9uTHMnc4hiCdd4"},
{"content":{"body":"(especially since this is for stage advancement, so it should be especially prioritized)","msgtype":"m.text","org.matrix.msc1767.text":"(especially since this is for stage advancement, so it should be especially prioritized)"},"ts":1663207517625,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1DYG-HRFk4t6CxyqpRMKQYJhmwHGzT1o6oxXT4l--KU"},
{"content":{"body":"I don't understand ljharb's comment about concurrent errors--is that explaining why this model does or doesn't make sense?","msgtype":"m.text","org.matrix.msc1767.text":"I don't understand ljharb's comment about concurrent errors--is that explaining why this model does or doesn't make sense?"},"ts":1663207592742,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zJdhAfle_nnTeW8Y73BOVh9XxNN245eyX4l3Rizzbeo"},
{"content":{"body":"also +1 to avoiding processing nested AggregateErrors by default","msgtype":"m.text","org.matrix.msc1767.text":"also +1 to avoiding processing nested AggregateErrors by default"},"ts":1663207626976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$75guoSrTf-eqVBejme8DBtM7NMLjHHLr4NHxqX8Ln0o"},
{"content":{"body":"it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me.","msgtype":"m.text","org.matrix.msc1767.text":"it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me."},"ts":1663207634090,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KrF4rCrHb1Av4FPW3cHjq7TeLoMuAaru4BG27Z-s6CQ"},
{"content":{"body":"btw I still feel `using [x] = iterable` being valid is quite the footgun. Can someone explain why it is not?","format":"org.matrix.custom.html","formatted_body":"btw I still feel <code>using [x] = iterable</code> being valid is quite the footgun. Can someone explain why it is not?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"btw I still feel `using [x] = iterable` being valid is quite the footgun. Can someone explain why it is not?","mimetype":"text/plain"},{"body":"btw I still feel <code>using [x] = iterable</code> being valid is quite the footgun. Can someone explain why it is not?","mimetype":"text/html"}]},"ts":1663207638193,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rXInpykrLSEf6GRet0n3rYnx2FN11EPJz6ofE80ubvg"},
{"content":{"body":"that will usually throw immediately, no?","msgtype":"m.text","org.matrix.msc1767.text":"that will usually throw immediately, no?"},"ts":1663207655805,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7wmOeb9xcOTyrSBAApmQ2mcxIUlTNc8mYPxtuaXWBmE"},
{"content":{"body":"because `using` will not be in scope?","format":"org.matrix.custom.html","formatted_body":"because <code>using</code> will not be in scope?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because `using` will not be in scope?","mimetype":"text/plain"},{"body":"because <code>using</code> will not be in scope?","mimetype":"text/html"}]},"ts":1663207659641,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z8vx86WABewfNlr4te2SsDkOPvnDyr-axfX2deFdxu4"},
{"content":{"body":" * it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me.","m.new_content":{"body":"it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me.","msgtype":"m.text","org.matrix.msc1767.text":"it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me."},"m.relates_to":{"event_id":"$KrF4rCrHb1Av4FPW3cHjq7TeLoMuAaru4BG27Z-s6CQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it's replying to kevin's statement about using cause instead of AE. kevin claimed something akin to \"AE is for errors that occur at roughly the same time\", and i was adding that i think \"at the same time\" isn't part of the mental model for me."},"ts":1663207662095,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XwcIGk0-vA91xMAbzetxnNkNnfoHaQWU7t-tJY0f0U8"},
{"content":{"body":" * because `using` will not be in scope?","format":"org.matrix.custom.html","formatted_body":" * because <code>using</code> will not be in scope?","m.new_content":{"body":"because `using` will not be in scope?","format":"org.matrix.custom.html","formatted_body":"because <code>using</code> will not be in scope?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"because `using` will not be in scope?","mimetype":"text/plain"},{"body":"because <code>using</code> will not be in scope?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Z8vx86WABewfNlr4te2SsDkOPvnDyr-axfX2deFdxu4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * because `using` will not be in scope?","mimetype":"text/plain"},{"body":" * because <code>using</code> will not be in scope?","mimetype":"text/html"}]},"ts":1663207671636,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XoHH8ItqT_t7cb4W1xiu8t01pCrhlSyYeLonJ2WPlt8"},
{"content":{"body":"🤔 hmm, okay","msgtype":"m.text","org.matrix.msc1767.text":"🤔 hmm, okay"},"ts":1663207683775,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bPkgDLZn2bNX_rPKNDN5wDmKivYAdaVoKK7cNMpQBno"},
{"content":{"body":"`Array.prototype[Symbol.dispose] = () => {}`","format":"org.matrix.custom.html","formatted_body":"<code>Array.prototype[Symbol.dispose] = () =&gt; {}</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Array.prototype[Symbol.dispose] = () => {}`","mimetype":"text/plain"},{"body":"<code>Array.prototype[Symbol.dispose] = () =&gt; {}</code>","mimetype":"text/html"}]},"ts":1663207717327,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F3UrjHxH7vDm7Ae1BuAwW-LPz9PHjoBKW6BqQ--C9Mg"},
{"content":{"body":"I guess a linter would help catch the unbound reference as well","msgtype":"m.text","org.matrix.msc1767.text":"I guess a linter would help catch the unbound reference as well"},"ts":1663207728961,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4VdoQYORjGZ-658uyIuKA2mK0O03w79wRkWN_AMj86c"},
{"content":{"body":"Don't we have plenty of experience in other GC'd languages which do something like `using` but don't introduce such a new form of TDZ?","format":"org.matrix.custom.html","formatted_body":"Don't we have plenty of experience in other GC'd languages which do something like <code>using</code> but don't introduce such a new form of TDZ?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Don't we have plenty of experience in other GC'd languages which do something like `using` but don't introduce such a new form of TDZ?","mimetype":"text/plain"},{"body":"Don't we have plenty of experience in other GC'd languages which do something like <code>using</code> but don't introduce such a new form of TDZ?","mimetype":"text/html"}]},"ts":1663207865818,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4avHxYHctQXfw6VkLY13TwWc7FHN0UQgnZxhqzMtqrE"},
{"content":{"body":"those languages don't create closures nearly as often","msgtype":"m.text","org.matrix.msc1767.text":"those languages don't create closures nearly as often"},"ts":1663207876231,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TAF6GtGWgJ4PD3VJYtFRHbORNSNClhKaVYxZMXeCcqA"},
{"content":{"body":"what is the new tdz, i missed it","msgtype":"m.text","org.matrix.msc1767.text":"what is the new tdz, i missed it"},"ts":1663207914730,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Lv0VUUk__9jQanuWhHipH8EPP-3Sl-ORfw8FWSUJuJw"},
{"content":{"body":"snek: scroll up, search for TDZ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: scroll up, search for TDZ","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: scroll up, search for TDZ","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: scroll up, search for TDZ","mimetype":"text/html"}]},"ts":1663207952120,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qB0ODSIlGTmjUWAx0gsFynP2gULYSu29Ow-gpb5fg3w"},
{"content":{"body":"> <@bakkot:matrix.org> those languages don't create closures nearly as often\n\nhuh, maybe we should go through this case-by-case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TAF6GtGWgJ4PD3VJYtFRHbORNSNClhKaVYxZMXeCcqA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>those languages don&#39;t create closures nearly as often</blockquote></mx-reply>huh, maybe we should go through this case-by-case","m.relates_to":{"m.in_reply_to":{"event_id":"$TAF6GtGWgJ4PD3VJYtFRHbORNSNClhKaVYxZMXeCcqA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> those languages don't create closures nearly as often\n\nhuh, maybe we should go through this case-by-case","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TAF6GtGWgJ4PD3VJYtFRHbORNSNClhKaVYxZMXeCcqA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>those languages don&#39;t create closures nearly as often</blockquote></mx-reply>huh, maybe we should go through this case-by-case","mimetype":"text/html"}]},"ts":1663207956455,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0Qg4Ph_UCFrNiepvczcnvxVplJzy-NLybCjEm0pTg4M"},
{"content":{"body":"> <@devsnek:matrix.org> what is the new tdz, i missed it\n\nit's that the `using` binding should *enter* a TDZ when the scope ends","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Lv0VUUk__9jQanuWhHipH8EPP-3Sl-ORfw8FWSUJuJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what is the new tdz, i missed it</blockquote></mx-reply>it's that the <code>using</code> binding should <em>enter</em> a TDZ when the scope ends","m.relates_to":{"m.in_reply_to":{"event_id":"$Lv0VUUk__9jQanuWhHipH8EPP-3Sl-ORfw8FWSUJuJw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> what is the new tdz, i missed it\n\nit's that the `using` binding should *enter* a TDZ when the scope ends","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Lv0VUUk__9jQanuWhHipH8EPP-3Sl-ORfw8FWSUJuJw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what is the new tdz, i missed it</blockquote></mx-reply>it's that the <code>using</code> binding should <em>enter</em> a TDZ when the scope ends","mimetype":"text/html"}]},"ts":1663207970722,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q_Aivgla1dMdUtEQ2QZrrHfK-s5JZAnOlFxqV6Hov5I"},
{"content":{"body":"like after the block executes it sets the binding to ~uninitialized~?","msgtype":"m.text","org.matrix.msc1767.text":"like after the block executes it sets the binding to ~uninitialized~?"},"ts":1663207999435,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VGx8oitsu-UV43CARaO_9YXiWIyJ64ErDlE858F1X7c"},
{"content":{"body":"snek: current slide","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: current slide","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: current slide","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: current slide","mimetype":"text/html"}]},"ts":1663208002853,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VIYjE1NuavyRhnwuyLgnonCMqeozA7XGOTQTC-ack9E"},
{"content":{"body":"i don't see slides","msgtype":"m.text","org.matrix.msc1767.text":"i don't see slides"},"ts":1663208007559,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2MsKXS3XzGorOdfi_enY62-Uvic7Sn1EHuig68Tfqjs"},
{"content":{"body":"i wlll reload","msgtype":"m.text","org.matrix.msc1767.text":"i wlll reload"},"ts":1663208019574,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QYAOtI5WOfH6wvb8OBc05QtfrqDY0YbSo7WtXyxwOes"},
{"content":{"body":"ok i see","msgtype":"m.text","org.matrix.msc1767.text":"ok i see"},"ts":1663208037229,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5wMgzgdTUvFrmDmlQWdcyiDcB8mtQEN2faCSkH5T18w"},
{"content":{"body":"console.group()/console.groupEnd()?","msgtype":"m.text","org.matrix.msc1767.text":"console.group()/console.groupEnd()?"},"ts":1663208047314,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$n01dFj8Ss_Ei2XcjEtlzqsNuxQgH7pKO487zWTYn40Q"},
{"content":{"body":"it's a fair point that it's weird to \"dispose\" of something and have it still be around - disposal implies chucking it into the trash forever","msgtype":"m.text","org.matrix.msc1767.text":"it's a fair point that it's weird to \"dispose\" of something and have it still be around - disposal implies chucking it into the trash forever"},"ts":1663208067280,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OCoIlZ8r7xrK1NOLlJqhegyyzKhu8D_sRvG7WDDps5k"},
{"content":{"body":"to be fair, the points are the slide are being made about the object reference, not the binding","msgtype":"m.text","org.matrix.msc1767.text":"to be fair, the points are the slide are being made about the object reference, not the binding"},"ts":1663208084300,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JUQFbT_VQaT1LA3slLLTukqFh_lc4SoRn8cyJ-lwhv4"},
{"content":{"body":"I agree with shu here; this isn't about freeing the memory","format":"org.matrix.custom.html","formatted_body":"I agree with <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> here; this isn't about freeing the memory","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree with shu here; this isn't about freeing the memory","mimetype":"text/plain"},{"body":"I agree with <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> here; this isn't about freeing the memory","mimetype":"text/html"}]},"ts":1663208085436,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Bg44sbj4oZMuzdGXCKoNm0jBF26EO5KDNyTmVyLPYCU"},
{"content":{"body":"This isn't C","msgtype":"m.text"},"ts":1663208095822,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$kY3AchNw1ngzBx8jzPWgT67VHIeaiFM5mqaapVTnd-U"},
{"content":{"body":" * to be fair, the points on the slide are being made about the object reference, not the binding","m.new_content":{"body":"to be fair, the points on the slide are being made about the object reference, not the binding","msgtype":"m.text","org.matrix.msc1767.text":"to be fair, the points on the slide are being made about the object reference, not the binding"},"m.relates_to":{"event_id":"$JUQFbT_VQaT1LA3slLLTukqFh_lc4SoRn8cyJ-lwhv4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * to be fair, the points on the slide are being made about the object reference, not the binding"},"ts":1663208106401,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1ZWv8JNdMSDjwvzIgDHrnNexZzFpDeQG900NLXHbaX0"},
{"content":{"body":"This is about the release of resources associated with an object","msgtype":"m.text"},"ts":1663208111430,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$O7p8BwhOBwmmeZuvd0HojZ_yZiKEUumRjbcjjs-b3ic"},
{"content":{"body":"this would be valid right? `using x = y(); let xEscape = x; setTimeout(() => consume(xEscape), 100)`","format":"org.matrix.custom.html","formatted_body":"this would be valid right? <code>using x = y(); let xEscape = x; setTimeout(() =&gt; consume(xEscape), 100)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this would be valid right? `using x = y(); let xEscape = x; setTimeout(() => consume(xEscape), 100)`","mimetype":"text/plain"},{"body":"this would be valid right? <code>using x = y(); let xEscape = x; setTimeout(() =&gt; consume(xEscape), 100)</code>","mimetype":"text/html"}]},"ts":1663208117996,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VPN0LX-R5h6Td14rx6ueRgunsLgce3UD0--8MTp7GvE"},
{"content":{"body":"What if I need disableable is a key in a map?","msgtype":"m.text","org.matrix.msc1767.text":"What if I need disableable is a key in a map?"},"ts":1663208118076,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$opKvSJusSea8X-GuVHhkpvD2Lqz90ssmeClzIJmnCJY"},
{"content":{"body":"I may need to clean the entry at a later point.","msgtype":"m.text","org.matrix.msc1767.text":"I may need to clean the entry at a later point."},"ts":1663208126824,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mFe1eyVEwm-LHT7MCj99kg1tmTjSfWS-j2V4c0lRfJM"},
{"content":{"body":"snek: that is the point about introducing a const alias on the slide","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: that is the point about introducing a const alias on the slide","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"snek: that is the point about introducing a const alias on the slide","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>: that is the point about introducing a const alias on the slide","mimetype":"text/html"}]},"ts":1663208145339,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hmNAMUGPICCP-LLqJpQC-k9sucAwoAqHAA5QpFFin8A"},
{"content":{"body":"Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","mimetype":"text/html"}]},"ts":1663208152213,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BgaKGdppu0eCtNU4ZhGeXxxp8ZjWFEGctkDgO8E3B7s"},
{"content":{"body":"ah i see yeah","msgtype":"m.text","org.matrix.msc1767.text":"ah i see yeah"},"ts":1663208155326,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uWZNDHECdCZihzxUytCv06eLlm2fLP85gXiwb0FBXLs"},
{"content":{"body":" * Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","m.new_content":{"body":"Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$BgaKGdppu0eCtNU4ZhGeXxxp8ZjWFEGctkDgO8E3B7s","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Justin Ridgewell: would `const x = <expr>; using x;` work? or would you need like `using y = x;` and just not use the y","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: would <code>const x = &lt;expr&gt;; using x;</code> work? or would you need like <code>using y = x;</code> and just not use the y","mimetype":"text/html"}]},"ts":1663208183090,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gdJqaiaYzmGPfjmSX2ZtJ1vcu0zK48cnjuta66Jch-E"},
{"content":{"body":"IMO the burden of proof for use cases is on the other side; bakkot should explain what important errors are prevented by this TDZ (since it's a lot of extra work at multiple levels to provide this)","msgtype":"m.text","org.matrix.msc1767.text":"IMO the burden of proof for use cases is on the other side; bakkot should explain what important errors are prevented by this TDZ (since it's a lot of extra work at multiple levels to provide this)"},"ts":1663208206798,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7kRDjF4amGYQkeh0DikZqaxHAsKGXotAhmD8_Vh-rSc"},
{"content":{"body":"attempting to use a file handle after closing it","msgtype":"m.text","org.matrix.msc1767.text":"attempting to use a file handle after closing it"},"ts":1663208221564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QU7fVOXsJFKAKyb9zg-JLROzM1051km1_-VosS5Ff-Y"},
{"content":{"body":"ljharb: just change the const to using, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: just change the const to using, right?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: just change the const to using, right?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: just change the const to using, right?","mimetype":"text/html"}]},"ts":1663208222094,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Q1UkefzpOLKtYh3ZXnRVkvBHEHqncAEA7mvYisyjlrU"},
{"content":{"body":"or literally anything else","msgtype":"m.text","org.matrix.msc1767.text":"or literally anything else"},"ts":1663208225293,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R2wIKgyiLimFYEoPcWZ3QgimEVk_cnlobKArsN4E_SA"},
{"content":{"body":"well, IMO this error should be given to you by the file implementation","msgtype":"m.text","org.matrix.msc1767.text":"well, IMO this error should be given to you by the file implementation"},"ts":1663208255397,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o8gyKiWBc5rpbAFFOHrWWQcbsP2NmG_uJUTVY1JmqKM"},
{"content":{"body":"(as we've been discussing)","msgtype":"m.text","org.matrix.msc1767.text":"(as we've been discussing)"},"ts":1663208262291,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eMXiWSNJpxKeCrWX2lZWhttakP7F3I1XxZyvJ_0M2ws"},
{"content":{"body":"i mean like if you need to use it as a key in the map, you'd just save it in a separate variable","m.relates_to":{"event_id":"$Q1UkefzpOLKtYh3ZXnRVkvBHEHqncAEA7mvYisyjlrU","is_falling_back":true,"m.in_reply_to":{"event_id":"$Q1UkefzpOLKtYh3ZXnRVkvBHEHqncAEA7mvYisyjlrU"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"i mean like if you need to use it as a key in the map, you'd just save it in a separate variable"},"ts":1663208264425,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bD3u03Qoed7z79Q34f6rmSzZb4epgkwTmEXMz9CSXgs"},
{"content":{"body":"so I'm very confused about what I've been missing. Maybe there could be a utility class bulit-in which implements this \"casual state machine\" as Kris put it","msgtype":"m.text","org.matrix.msc1767.text":"so I'm very confused about what I've been missing. Maybe there could be a utility class bulit-in which implements this \"casual state machine\" as Kris put it"},"ts":1663208286707,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TqVp8pyzTz7y2Qm5iNZOiRg0ILO-HqihtMjJ21UC3Kc"},
{"content":{"body":"ljharb: then yes, that or the other way around `using x = <expr>; const y = x;`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: then yes, that or the other way around <code>using x = &lt;expr&gt;; const y = x;</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: then yes, that or the other way around `using x = <expr>; const y = x;`","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: then yes, that or the other way around <code>using x = &lt;expr&gt;; const y = x;</code>","mimetype":"text/html"}]},"ts":1663208323941,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$yE35Hdhpdtl8mgRNAVeNCmGIf_tk36iKeKMwXzFbnuM"},
{"content":{"body":"i think i am convinced that we should do TDZ","msgtype":"m.text","org.matrix.msc1767.text":"i think i am convinced that we should do TDZ"},"ts":1663208365050,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QYnHvZN-AAOUckanQvsLdqozi1LDmlIUzE4ix8lPSUw"},
{"content":{"body":"maybe we should take a break from this topic and come back to `using` afterwards","format":"org.matrix.custom.html","formatted_body":"maybe we should take a break from this topic and come back to <code>using</code> afterwards","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"maybe we should take a break from this topic and come back to `using` afterwards","mimetype":"text/plain"},{"body":"maybe we should take a break from this topic and come back to <code>using</code> afterwards","mimetype":"text/html"}]},"ts":1663208414066,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h0k_Ek9UKNe77eiFQq6I9gEDJgfqmrLxviosDn0CIpw"},
{"content":{"body":"while also knowing that this requires prayers for implementors","msgtype":"m.text","org.matrix.msc1767.text":"while also knowing that this requires prayers for implementors"},"ts":1663208425520,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$C7lBfGdOILOIa7ABOc1OvqEMpQVjkkeS1OvSxyNEv1I"},
{"content":{"body":"yeah I'm leaning toward having TDZ as well, since the arguments of re-using the disposed object are about the object, and I don't see a good reason to re-use a disposed binding","msgtype":"m.text","org.matrix.msc1767.text":"yeah I'm leaning toward having TDZ as well, since the arguments of re-using the disposed object are about the object, and I don't see a good reason to re-use a disposed binding"},"ts":1663208457868,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xo4lwyHOFRh8p8PNAS-jKgd5lcvyXoJrcF1gm8ZCuAE"},
{"content":{"body":"it forces you to explicitly ref it if you want to reuse it which seems good","msgtype":"m.text","org.matrix.msc1767.text":"it forces you to explicitly ref it if you want to reuse it which seems good"},"ts":1663208482166,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$22oh3u_g0bhqu-CX6vQ-29QTaNYqL_Jcjtx_tmRd_fE"},
{"content":{"body":"bakkot: I agree it's better to avoid reference the disposed thing, but could linter solve the problem?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I agree it's better to avoid reference the disposed thing, but could linter solve the problem?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: I agree it's better to avoid reference the disposed thing, but could linter solve the problem?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I agree it's better to avoid reference the disposed thing, but could linter solve the problem?","mimetype":"text/html"}]},"ts":1663208497116,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$RXZWt9NM7ihb8ZiCyzftjSYYoW5niS9v_hP9EywNvEM"},
{"content":{"body":"i don't think a linter can solve that, it requires knowledge of the runtime behavior of the program","msgtype":"m.text","org.matrix.msc1767.text":"i don't think a linter can solve that, it requires knowledge of the runtime behavior of the program"},"ts":1663208515430,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$YOEpd_fNZJvNvOg5fFr3mi6w6Bd7EXT0xDZjuAwQTM4"},
{"content":{"body":"the linter can just say \"don't close over using\"","msgtype":"m.text","org.matrix.msc1767.text":"the linter can just say \"don't close over using\""},"ts":1663208525736,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RKZqf9J4YAtQhW3WdDtIB7kMGcrFD5zsSrbHFNa_E7M"},
{"content":{"body":"> <@littledan:matrix.org> well, IMO this error should be given to you by the file implementation\n\nit would be nice if it did but I don't see why we want the language to do that for you?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8gyKiWBc5rpbAFFOHrWWQcbsP2NmG_uJUTVY1JmqKM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, IMO this error should be given to you by the file implementation</blockquote></mx-reply>it would be nice if it did but I don't see why we want the language to do that for you?","m.relates_to":{"m.in_reply_to":{"event_id":"$o8gyKiWBc5rpbAFFOHrWWQcbsP2NmG_uJUTVY1JmqKM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> well, IMO this error should be given to you by the file implementation\n\nit would be nice if it did but I don't see why we want the language to do that for you?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$o8gyKiWBc5rpbAFFOHrWWQcbsP2NmG_uJUTVY1JmqKM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, IMO this error should be given to you by the file implementation</blockquote></mx-reply>it would be nice if it did but I don't see why we want the language to do that for you?","mimetype":"text/html"}]},"ts":1663208526642,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1M5Gcix85svC8LSPmjmhKnbgMUSbg1gOV3_sKLJl1Ok"},
{"content":{"body":"it doesn't need to be smart","msgtype":"m.text","org.matrix.msc1767.text":"it doesn't need to be smart"},"ts":1663208528461,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uUGtwi8h6EbFidGFXgZMkgQO307padn9XZIYFj2fSIQ"},
{"content":{"body":"for example `{ using x = y(); myArray.forEach(() => thingWith(x) }) }` this is valid","format":"org.matrix.custom.html","formatted_body":"for example <code>{ using x = y(); myArray.forEach(() =&gt; thingWith(x) }) }</code> this is valid","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example `{ using x = y(); myArray.forEach(() => thingWith(x) }) }` this is valid","mimetype":"text/plain"},{"body":"for example <code>{ using x = y(); myArray.forEach(() =&gt; thingWith(x) }) }</code> this is valid","mimetype":"text/html"}]},"ts":1663208534460,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Pk0eOCXhmXxc6caxgz4tKP1cBA44Ur33cUDtDNFPW6M"},
{"content":{"body":"yeah all of this \"TDZ\" stuff could be added to any version of this proposal that we've discussed over the past several years","msgtype":"m.text","org.matrix.msc1767.text":"yeah all of this \"TDZ\" stuff could be added to any version of this proposal that we've discussed over the past several years"},"ts":1663208535266,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tx8dOq8vfPh9ur1MAX0wmXnmMPieqmoJbYMpxLekMlA"},
{"content":{"body":"shu: but we have higher-order functions on arrays and iterators and such","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: but we have higher-order functions on arrays and iterators and such","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"shu: but we have higher-order functions on arrays and iterators and such","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: but we have higher-order functions on arrays and iterators and such","mimetype":"text/html"}]},"ts":1663208546718,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R-62dBvKOB7PrFjPJgmjGkxjm45rc4J13hYzdAVAXqE"},
{"content":{"body":"> <@devsnek:matrix.org> for example `{ using x = y(); myArray.forEach(() => thingWith(x) }) }` this is valid\n\nTS may have \"call immediate\" concept later? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Pk0eOCXhmXxc6caxgz4tKP1cBA44Ur33cUDtDNFPW6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>for example <code>{ using x = y(); myArray.forEach(() =&gt; thingWith(x) }) }</code> this is valid</blockquote></mx-reply>TS may have &quot;call immediate&quot; concept later?","m.relates_to":{"m.in_reply_to":{"event_id":"$Pk0eOCXhmXxc6caxgz4tKP1cBA44Ur33cUDtDNFPW6M"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> for example `{ using x = y(); myArray.forEach(() => thingWith(x) }) }` this is valid\n\nTS may have \"call immediate\" concept later? ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Pk0eOCXhmXxc6caxgz4tKP1cBA44Ur33cUDtDNFPW6M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>for example <code>{ using x = y(); myArray.forEach(() =&gt; thingWith(x) }) }</code> this is valid</blockquote></mx-reply>TS may have &quot;call immediate&quot; concept later?","mimetype":"text/html"}]},"ts":1663208567771,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$OYoOA5Vs1xLdi5szYZmM_PleBzXkgza_2QeIpzo0Rfs"},
{"content":{"body":"then your linter needs to do escape analysis","msgtype":"m.text","org.matrix.msc1767.text":"then your linter needs to do escape analysis"},"ts":1663208568369,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OPJIbAXcqut0HnRg8l2ol-Z60WluhgQKysu9SgHnRtw"},
{"content":{"body":"every linter is now also a symbolic interpreter","msgtype":"m.text","org.matrix.msc1767.text":"every linter is now also a symbolic interpreter"},"ts":1663208635119,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nfZIwuh9LeSSEgCLbyJZamHuAbmfDUSwLiNekG21Wu0"},
{"content":{"body":" * every linter is now also a symbolic interpreter","m.new_content":{"body":"every linter is now also a symbolic interpreter","msgtype":"m.text","org.matrix.msc1767.text":"every linter is now also a symbolic interpreter"},"m.relates_to":{"event_id":"$nfZIwuh9LeSSEgCLbyJZamHuAbmfDUSwLiNekG21Wu0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * every linter is now also a symbolic interpreter"},"ts":1663208638387,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$q0-JJkidZWKjJ_V-bVy6K1AmRccKY57NEVUaF1Ai1Xk"},
{"content":{"body":"> <@bakkot:matrix.org> it would be nice if it did but I don't see why we want the language to do that for you?\n\nso, in general, no? I don't want the language to have half-working state tracking mechanisms that libraries will need to duplicate.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1M5Gcix85svC8LSPmjmhKnbgMUSbg1gOV3_sKLJl1Ok?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it would be nice if it did but I don't see why we want the language to do that for you?</blockquote></mx-reply>so, in general, no? I don't want the language to have half-working state tracking mechanisms that libraries will need to duplicate.","m.relates_to":{"m.in_reply_to":{"event_id":"$1M5Gcix85svC8LSPmjmhKnbgMUSbg1gOV3_sKLJl1Ok"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> it would be nice if it did but I don't see why we want the language to do that for you?\n\nso, in general, no? I don't want the language to have half-working state tracking mechanisms that libraries will need to duplicate.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1M5Gcix85svC8LSPmjmhKnbgMUSbg1gOV3_sKLJl1Ok?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>it would be nice if it did but I don't see why we want the language to do that for you?</blockquote></mx-reply>so, in general, no? I don't want the language to have half-working state tracking mechanisms that libraries will need to duplicate.","mimetype":"text/html"}]},"ts":1663208660771,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CN1SIcAa5XrRQct-ao8TwRpryh8edKp-tm2oZ9HMlEo"},
{"content":{"body":"the duplication of state is *necessary* anyway for soundness","format":"org.matrix.custom.html","formatted_body":"the duplication of state is <em>necessary</em> anyway for soundness","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the duplication of state is *necessary* anyway for soundness","mimetype":"text/plain"},{"body":"the duplication of state is <em>necessary</em> anyway for soundness","mimetype":"text/html"}]},"ts":1663208683183,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7bIvcjucAm-uPTARUMYmbk9WQBGDLScV8-z8MkMqIs4"},
{"content":{"body":"what concept is this, and why would a possible future TS concept block a JS language feature?","m.relates_to":{"event_id":"$OYoOA5Vs1xLdi5szYZmM_PleBzXkgza_2QeIpzo0Rfs","is_falling_back":true,"m.in_reply_to":{"event_id":"$OYoOA5Vs1xLdi5szYZmM_PleBzXkgza_2QeIpzo0Rfs"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"what concept is this, and why would a possible future TS concept block a JS language feature?"},"ts":1663208694862,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$k_eQ50oJbCAzzyjJVgz-p5XhbW1D_o1IoNWRswbRK4Q"},
{"content":{"body":"there are two competing mental models here: 1) `using` being about single-use, and 2) `using` being about registering functions to call on lexical scope exit","format":"org.matrix.custom.html","formatted_body":"there are two competing mental models here: 1) <code>using</code> being about single-use, and 2) <code>using</code> being about registering functions to call on lexical scope exit","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"there are two competing mental models here: 1) `using` being about single-use, and 2) `using` being about registering functions to call on lexical scope exit","mimetype":"text/plain"},{"body":"there are two competing mental models here: 1) <code>using</code> being about single-use, and 2) <code>using</code> being about registering functions to call on lexical scope exit","mimetype":"text/html"}]},"ts":1663208700414,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YPVIm5qFaAIJQUGdeWF9Lvjd_mOuxyiZUPIpMDnapqU"},
{"content":{"body":"i don't see those are competing ","msgtype":"m.text","org.matrix.msc1767.text":"i don't see those are competing "},"ts":1663208722587,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$fEo2lhbItn39JnL6-hUGxkq51-vqUl39bgaA2oIwt8k"},
{"content":{"body":"one of those is the use case and the other is the mechanism ","msgtype":"m.text","org.matrix.msc1767.text":"one of those is the use case and the other is the mechanism "},"ts":1663208728905,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$AUiMsXbx1C1-m0wNvtjePdrgdc1yu7JKNlFQJYfBhgM"},
{"content":{"body":"> <@shuyuguo:matrix.org> there are two competing mental models here: 1) `using` being about single-use, and 2) `using` being about registering functions to call on lexical scope exit\n\nI think current proposal more close the 1, not 2, if 2, we should choose \"defer\" syntax like Go.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YPVIm5qFaAIJQUGdeWF9Lvjd_mOuxyiZUPIpMDnapqU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>there are two competing mental models here: 1) <code>using</code> being about single-use, and 2) <code>using</code> being about registering functions to call on lexical scope exit</blockquote></mx-reply>I think current proposal more close the 1, not 2, if 2, we should choose &quot;defer&quot; syntax like Go.","m.relates_to":{"m.in_reply_to":{"event_id":"$YPVIm5qFaAIJQUGdeWF9Lvjd_mOuxyiZUPIpMDnapqU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> there are two competing mental models here: 1) `using` being about single-use, and 2) `using` being about registering functions to call on lexical scope exit\n\nI think current proposal more close the 1, not 2, if 2, we should choose \"defer\" syntax like Go.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YPVIm5qFaAIJQUGdeWF9Lvjd_mOuxyiZUPIpMDnapqU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>there are two competing mental models here: 1) <code>using</code> being about single-use, and 2) <code>using</code> being about registering functions to call on lexical scope exit</blockquote></mx-reply>I think current proposal more close the 1, not 2, if 2, we should choose &quot;defer&quot; syntax like Go.","mimetype":"text/html"}]},"ts":1663208737220,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$s9LSRDdIWhak0f4YfWB5vj9pmpR3Vh2LNwqhvmCNtrM"},
{"content":{"body":"is this about naming?","msgtype":"m.text","org.matrix.msc1767.text":"is this about naming?"},"ts":1663208748379,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e5nkvle8a7Z6N8JuMUzOPlpoYAkR1RqLEqCPN3wdpB4"},
{"content":{"body":"is this because it's called @@dispose?","msgtype":"m.text","org.matrix.msc1767.text":"is this because it's called @@dispose?"},"ts":1663208752182,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KN0qJeboxpIehshocilHMPnkz2HgfWvbokOPh6K5hNI"},
{"content":{"body":"I'm in 100% agreement with all the arguments that Ron is making","msgtype":"m.text","org.matrix.msc1767.text":"I'm in 100% agreement with all the arguments that Ron is making"},"ts":1663208760618,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BMMVOGNEnbOF-ZJxArJO5NR8ma8rZeDg31dzCpFxqMI"},
{"content":{"body":"not for me","msgtype":"m.text","org.matrix.msc1767.text":"not for me"},"ts":1663208763569,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$GzU9rbIu1yMHKce7bDkXC9gCXXRw62RvHMlFo7XWepk"},
{"content":{"body":"yes, +1 to Ron","msgtype":"m.text","org.matrix.msc1767.text":"yes, +1 to Ron"},"ts":1663208764964,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vj5TifXkdaMzg9OI13sw4gGpYGpLcIn1BsiFuM-6Xu8"},
{"content":{"body":"function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?","msgtype":"m.text","org.matrix.msc1767.text":"function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?"},"ts":1663208776295,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k"},
{"content":{"body":"I don't think \"we have lamented TDZs\" speaks for all of us.","msgtype":"m.text","org.matrix.msc1767.text":"I don't think \"we have lamented TDZs\" speaks for all of us."},"ts":1663208794668,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$pd98Cj-IihSinHuIzqcC9dB7jBNPdu74E8BYY74sXqU"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?\n\nit'd be a TDZ error, like if you did `x; let x;`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>function f() { let x = 3; return () =&gt; x; }; f()(); is 3  == why would &quot;using x&quot; be different? I&#39;m missing something somewhere. Is KG saying &quot;x&quot; should become undefined after its dispose is called?</blockquote></mx-reply>it'd be a TDZ error, like if you did <code>x; let x;</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bradfordcsmith:matrix.org> function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?\n\nit'd be a TDZ error, like if you did `x; let x;`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>function f() { let x = 3; return () =&gt; x; }; f()(); is 3  == why would &quot;using x&quot; be different? I&#39;m missing something somewhere. Is KG saying &quot;x&quot; should become undefined after its dispose is called?</blockquote></mx-reply>it'd be a TDZ error, like if you did <code>x; let x;</code>","mimetype":"text/html"}]},"ts":1663208819545,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5vLBBN-gbQpI-mB3XEY8KHjTeOFLPPUYf1LBb8a7HBc"},
{"content":{"body":"so it would throw an error","msgtype":"m.text","org.matrix.msc1767.text":"so it would throw an error"},"ts":1663208851522,"senderName":"Bradford Smith","senderId":"@bradfordcsmith:matrix.org","id":"$Wu9VUH5RkOk1LjCilvA3hc3HoyxYzXYHvsFa_ZqNvZk"},
{"content":{"body":"> <@bradfordcsmith:matrix.org> function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?\n\nI am saying it should be _an error_, not undefined","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>function f() { let x = 3; return () =&gt; x; }; f()(); is 3  == why would &quot;using x&quot; be different? I&#39;m missing something somewhere. Is KG saying &quot;x&quot; should become undefined after its dispose is called?</blockquote></mx-reply>I am saying it should be <em>an error</em>, not undefined","m.relates_to":{"m.in_reply_to":{"event_id":"$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bradfordcsmith:matrix.org> function f() { let x = 3; return () => x; }; f()(); is 3  == why would \"using x\" be different? I'm missing something somewhere. Is KG saying \"x\" should become undefined after its dispose is called?\n\nI am saying it should be _an error_, not undefined","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JlQG1EhQCOS2vkkxwpCy4tInd6oLNwfwY_MlYtUsv1k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bradfordcsmith:matrix.org\">@bradfordcsmith:matrix.org</a><br>function f() { let x = 3; return () =&gt; x; }; f()(); is 3  == why would &quot;using x&quot; be different? I&#39;m missing something somewhere. Is KG saying &quot;x&quot; should become undefined after its dispose is called?</blockquote></mx-reply>I am saying it should be <em>an error</em>, not undefined","mimetype":"text/html"}]},"ts":1663208860079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c-DhZuerZQAsQ0JglmdS_e_ksrhTEUG1MUPcmfi7_KI"},
{"content":{"body":"and it should be an error because you are attempting to access a binding after the binding has been disposed","msgtype":"m.text","org.matrix.msc1767.text":"and it should be an error because you are attempting to access a binding after the binding has been disposed"},"ts":1663208876174,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dAc-x7cj3ndP6In796plWuFrMGujSQeUYt2psxIPsec"},
{"content":{"body":"I am confused by the \"not discoverable\" claim","msgtype":"m.text","org.matrix.msc1767.text":"I am confused by the \"not discoverable\" claim"},"ts":1663208901055,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3Em-oLbajGN1t_PjEoqbw7ii5EMkgW_WJLJL-t6NAkI"},
{"content":{"body":"that seems... super discoverable?","msgtype":"m.text","org.matrix.msc1767.text":"that seems... super discoverable?"},"ts":1663208904459,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UnEi8exJXaiECsFo1Krv_cwnJwzKII5eonKRmeS0uCg"},
{"content":{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","format":"org.matrix.custom.html","formatted_body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","mimetype":"text/plain"},{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$e5nkvle8a7Z6N8JuMUzOPlpoYAkR1RqLEqCPN3wdpB4"}}},"ts":1663208940130,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$f3dBs5hTUE2dMpsYOkWypFIS5ylZVXk6KUzMoc0OIo0"},
{"content":{"body":"> <@shuyuguo:matrix.org> is this about naming?\n\n * the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e5nkvle8a7Z6N8JuMUzOPlpoYAkR1RqLEqCPN3wdpB4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is this about naming?</blockquote></mx-reply> * the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","m.new_content":{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","format":"org.matrix.custom.html","formatted_body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","mimetype":"text/plain"},{"body":"the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$f3dBs5hTUE2dMpsYOkWypFIS5ylZVXk6KUzMoc0OIo0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> is this about naming?\n\n * the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a \"golang defer\" proposal)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$e5nkvle8a7Z6N8JuMUzOPlpoYAkR1RqLEqCPN3wdpB4?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>is this about naming?</blockquote></mx-reply> * the use case here (at least the use case i am interested in) is resource management. i think the tdz provides an important guard against misuse when taking advantage of that use case. (i would also not be interested in advancing a &quot;golang defer&quot; proposal)","mimetype":"text/html"}]},"ts":1663208954860,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$m6mPWyTolb_lSUCb-0IC6OlV6cyZis9cBeQYzZFbuJc"},
{"content":{"body":"i'm really not sure when i would want to use this without the tdz","msgtype":"m.text","org.matrix.msc1767.text":"i'm really not sure when i would want to use this without the tdz"},"ts":1663208979938,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$caBJymQ66_p7Tq4i1QNKLpPXdpbUJIH3oif2yFv-ESE"},
{"content":{"body":"if anyone has an example of when you would want to use this without a tdz i would be interested ","msgtype":"m.text","org.matrix.msc1767.text":"if anyone has an example of when you would want to use this without a tdz i would be interested "},"ts":1663209019000,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$QgfquVOwI9p8lxh03Gr7rGUjLlhRGF9c_TfAEDiGrlw"},
{"content":{"body":"To be honest, I like TDZ, but I can also live without TDZ. ","msgtype":"m.text","org.matrix.msc1767.text":"To be honest, I like TDZ, but I can also live without TDZ. "},"ts":1663209036223,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$mZdw_iE-HWucQEOAWoJ3qwqmM2MCrc2UHO85MliVwog"},
{"content":{"body":"If there was an \"use stricter\", I would like it have TDZ 😂","msgtype":"m.text","org.matrix.msc1767.text":"If there was an \"use stricter\", I would like it have TDZ 😂"},"ts":1663209125367,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$JQ03RH5pLB7NryNCsZQXZ0jXEHHKEjlOA3kpSgcOOhs"},
{"content":{"body":"> <@devsnek:matrix.org> i'm really not sure when i would want to use this without the tdz\n\nsame, and the only response given was \"aliasing bindings is hard\", which I do not buy in the slightest","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$caBJymQ66_p7Tq4i1QNKLpPXdpbUJIH3oif2yFv-ESE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i&#39;m really not sure when i would want to use this without the tdz</blockquote></mx-reply>same, and the only response given was &quot;aliasing bindings is hard&quot;, which I do not buy in the slightest","m.relates_to":{"m.in_reply_to":{"event_id":"$caBJymQ66_p7Tq4i1QNKLpPXdpbUJIH3oif2yFv-ESE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@devsnek:matrix.org> i'm really not sure when i would want to use this without the tdz\n\nsame, and the only response given was \"aliasing bindings is hard\", which I do not buy in the slightest","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$caBJymQ66_p7Tq4i1QNKLpPXdpbUJIH3oif2yFv-ESE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i&#39;m really not sure when i would want to use this without the tdz</blockquote></mx-reply>same, and the only response given was &quot;aliasing bindings is hard&quot;, which I do not buy in the slightest","mimetype":"text/html"}]},"ts":1663209235692,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$d1UZL9glvz07EN-eae27TAKU515goSregsC5d0h0Rz8"},
{"content":{"body":"This is a naive question:. Would it not be possible to throw on capturing the using binding instead of a TDZ?","msgtype":"m.text"},"ts":1663209260268,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$vx1zRfXUWlUowW4KZxpoOQV5QnmA_Yvb8yJcNkt7C_A"},
{"content":{"body":"i think throwing on capture would be too strict","msgtype":"m.text","org.matrix.msc1767.text":"i think throwing on capture would be too strict"},"ts":1663209275206,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$BzBU9w5INA5q2xAOXnfdWZZ10Hg0JCJFCMWTZHDkiC0"},
{"content":{"body":"for example if you use array.forEach","msgtype":"m.text","org.matrix.msc1767.text":"for example if you use array.forEach"},"ts":1663209284918,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WU4HsHriJ1379nk30Mb3oKqJ9B1FpArIWdacEWZEFpU"},
{"content":{"body":"that fulfills the requirement of completing within the block","msgtype":"m.text","org.matrix.msc1767.text":"that fulfills the requirement of completing within the block"},"ts":1663209294819,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$0tfcUTjzNfS58-jMIwXM-TTKUoTayMFuX9usr4LwuoM"},
{"content":{"body":"and actually ","msgtype":"m.text","org.matrix.msc1767.text":"and actually "},"ts":1663209313708,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$DmGfd7wr0s1_hwfsKuKl6YPUzj1dBihfdmQ-vM5YDX8"},
{"content":{"body":"if you had to alias for all captures","msgtype":"m.text","org.matrix.msc1767.text":"if you had to alias for all captures"},"ts":1663209318856,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$CeZ5Kz7-cwhn3g9Aku1MpgRxkGYjIj-6a6zgZGNwgpc"},
{"content":{"body":"you'd lose the ability to catch aliases that were too lenient ","msgtype":"m.text","org.matrix.msc1767.text":"you'd lose the ability to catch aliases that were too lenient "},"ts":1663209328311,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$JwxhLfWePcxKMgMTUmSq1PlUN64kJTTUH3qdMsceGq8"},
{"content":{"body":"unless you manually `undefined` all of them at the end of the scope","format":"org.matrix.custom.html","formatted_body":"unless you manually <code>undefined</code> all of them at the end of the scope","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"unless you manually `undefined` all of them at the end of the scope","mimetype":"text/plain"},{"body":"unless you manually <code>undefined</code> all of them at the end of the scope","mimetype":"text/html"}]},"ts":1663209345699,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UBKLl5U2wB3JRAinr5DVzz6DOH06TGGWoug3o-nbHEA"},
{"content":{"body":"True","msgtype":"m.text"},"ts":1663209356335,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$8KyZfJGWhsqK7gFjOcqPhHGJoH34KAgqBtbxbtiyPkk"},
{"content":{"body":"which is sort of a recursive loop back to \"i want to clean things up at the end of a scope\"","msgtype":"m.text","org.matrix.msc1767.text":"which is sort of a recursive loop back to \"i want to clean things up at the end of a scope\""},"ts":1663209356882,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vXun5xwxETlPJf_BTSQ0FtX-nCiPjU8TRMjayWX6x7Y"},
{"content":{"body":"Just running through my head other ways to solve the issues involved here","msgtype":"m.text"},"ts":1663209392101,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$UJgk1BIY0BKh3_89FJ11h0PYv2XU5pFF5SLCMBdKnsM"},
{"content":{"body":"yeah i think we should probably not advance the proposal today","msgtype":"m.text","org.matrix.msc1767.text":"yeah i think we should probably not advance the proposal today"},"ts":1663209470502,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Giq_9IPo6S4yNwelPNpPEx8W7lFlVNohr9TzG0zMrto"},
{"content":{"body":"lots of things for people to think about","msgtype":"m.text","org.matrix.msc1767.text":"lots of things for people to think about"},"ts":1663209476050,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qUsA9CRCjkJG7iBLUW_g_aJwRws14Xzm8F0yItiwNdE"},
{"content":{"body":"the concept is TS could have the type info that the function would be call immediately, so will not extend the lifetime of the bindings captured by the closure. I don't mean this should block something. Just want to discuss whether the argument could be solved by tools (not by language). ","m.relates_to":{"event_id":"$OYoOA5Vs1xLdi5szYZmM_PleBzXkgza_2QeIpzo0Rfs","is_falling_back":true,"m.in_reply_to":{"event_id":"$k_eQ50oJbCAzzyjJVgz-p5XhbW1D_o1IoNWRswbRK4Q"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"the concept is TS could have the type info that the function would be call immediately, so will not extend the lifetime of the bindings captured by the closure. I don't mean this should block something. Just want to discuss whether the argument could be solved by tools (not by language). "},"ts":1663209497943,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$cKAh15tAkw3jsV3PO-yA-n_1nq5A6GWxG4QHit45UH0"},
{"content":{"body":"i don't use TS though","msgtype":"m.text","org.matrix.msc1767.text":"i don't use TS though"},"ts":1663209516484,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MXZnqnrK2ltJPA1wJ5NpTdl_M2IzydPHxIUszVXHi9U"},
{"content":{"body":"except for at work","msgtype":"m.text","org.matrix.msc1767.text":"except for at work"},"ts":1663209528258,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$V2KBPOGYn3f5TI20GgVEdmVPDp-Gs_cHJX0sLLlyGi0"},
{"content":{"body":"bakkot: what if theoretically it was written as `use(resource, onDispose = undefined)`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what if theoretically it was written as <code>use(resource, onDispose = undefined)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: what if theoretically it was written as `use(resource, onDispose = undefined)`","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: what if theoretically it was written as <code>use(resource, onDispose = undefined)</code>","mimetype":"text/html"}]},"ts":1663209602276,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vvDjCRU9aZn3stMI_KyA_MNtPqbz3HYST1MkLfqvhWM"},
{"content":{"body":"Isn't the second form for passing resources that may not have a dispose method itself, and there is not a desire to wrap it?","msgtype":"m.text"},"ts":1663209634895,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$qbe7ZqRyDA7R_mOLjDzInfMhLg1AlK1aaj2JGU1eRl8"},
{"content":{"body":"personally i'd be fine with the proposal not having the disposablestack api","msgtype":"m.text","org.matrix.msc1767.text":"personally i'd be fine with the proposal not having the disposablestack api"},"ts":1663209667254,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HpG0S1KdfzzAPpCrXy5veQN5jBIjw8WiV83WK7_E2LI"},
{"content":{"body":"it seems trivially implementable in userland it think?","msgtype":"m.text","org.matrix.msc1767.text":"it seems trivially implementable in userland it think?"},"ts":1663209674830,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-pYyQ4MfLtzNrbHPjRD7gG-WRZjuXLcttHDWO_YdOi4"},
{"content":{"body":" * it seems trivially implementable in userland it think?","m.new_content":{"body":"it seems trivially implementable in userland it think?","msgtype":"m.text","org.matrix.msc1767.text":"it seems trivially implementable in userland it think?"},"m.relates_to":{"event_id":"$-pYyQ4MfLtzNrbHPjRD7gG-WRZjuXLcttHDWO_YdOi4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * it seems trivially implementable in userland it think?"},"ts":1663209676267,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zEv0LcUor8gpFS476SVhCDdYxUyCo9YZ4LqObzC7ugE"},
{"content":{"body":"> <@anthonybullard:matrix.org> This is a naive question:. Would it not be possible to throw on capturing the using binding instead of a TDZ?\n\nI think it's too strict, unless we have block param proposal advanced which might support syntactical call immediate semantic.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vx1zRfXUWlUowW4KZxpoOQV5QnmA_Yvb8yJcNkt7C_A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>This is a naive question:. Would it not be possible to throw on capturing the using binding instead of a TDZ?</blockquote></mx-reply>I think it's too strict, unless we have block param proposal advanced which might support syntactical call immediate semantic.","m.relates_to":{"m.in_reply_to":{"event_id":"$vx1zRfXUWlUowW4KZxpoOQV5QnmA_Yvb8yJcNkt7C_A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@anthonybullard:matrix.org> This is a naive question:. Would it not be possible to throw on capturing the using binding instead of a TDZ?\n\nI think it's too strict, unless we have block param proposal advanced which might support syntactical call immediate semantic.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vx1zRfXUWlUowW4KZxpoOQV5QnmA_Yvb8yJcNkt7C_A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>This is a naive question:. Would it not be possible to throw on capturing the using binding instead of a TDZ?</blockquote></mx-reply>I think it's too strict, unless we have block param proposal advanced which might support syntactical call immediate semantic.","mimetype":"text/html"}]},"ts":1663209682685,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$DwNL2xXBArKA6EWhlYMpMsQSJzNkI0hfDioGVDB89X8"},
{"content":{"body":"Second one could be `useWith`?","msgtype":"m.text"},"ts":1663209867461,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$4J4EUHzuQj-3p4AMliEutEHXFXXS_hohAjf1ndd4I-w"},
{"content":{"body":"the \"web platform collaboration\" queue item is also sort of a blocking issue that I want to get on the record","msgtype":"m.text","org.matrix.msc1767.text":"the \"web platform collaboration\" queue item is also sort of a blocking issue that I want to get on the record"},"ts":1663210667371,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_DlJW96tacFomJNy73HZGSlmW9W8W0-b5pGYFjWNq8M"},
{"content":{"body":"I already raised this issue in GitHub https://github.com/tc39/proposal-explicit-resource-management/issues/95 ; I hope this can be followed up on before Stage 3","msgtype":"m.text","org.matrix.msc1767.text":"I already raised this issue in GitHub https://github.com/tc39/proposal-explicit-resource-management/issues/95 ; I hope this can be followed up on before Stage 3"},"ts":1663210816005,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6A8FxTGPqHvKrT3-_tI21qaU08JVnY9Ogxco_8VrTcY"},
{"content":{"body":"dminor: I'd like to understand better why Mozilla is unconvinced by the need for syntax; I think this has been explained well since the beginning.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: I'd like to understand better why Mozilla is unconvinced by the need for syntax; I think this has been explained well since the beginning.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"dminor: I'd like to understand better why Mozilla is unconvinced by the need for syntax; I think this has been explained well since the beginning.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: I'd like to understand better why Mozilla is unconvinced by the need for syntax; I think this has been explained well since the beginning.","mimetype":"text/html"}]},"ts":1663211019206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nm89Jt8MHyJWQXgAyThwKwSgfn4LmxbsE_lduY0U4cQ"},
{"content":{"body":"The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases","msgtype":"m.text","org.matrix.msc1767.text":"The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases"},"ts":1663211181422,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4"},
{"content":{"body":"> <@ljharb:matrix.org> you can only `using` a revocable proxy, and disposal revokes it :-p\n\n... honestly I don't hate that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uvW02Sh1TLUZB5AS2xt37JnQDmYva35TmrFyMGqUkNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>you can only <code>using</code> a revocable proxy, and disposal revokes it :-p</blockquote></mx-reply>... honestly I don't hate that","m.relates_to":{"m.in_reply_to":{"event_id":"$uvW02Sh1TLUZB5AS2xt37JnQDmYva35TmrFyMGqUkNE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> you can only `using` a revocable proxy, and disposal revokes it :-p\n\n... honestly I don't hate that","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$uvW02Sh1TLUZB5AS2xt37JnQDmYva35TmrFyMGqUkNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>you can only <code>using</code> a revocable proxy, and disposal revokes it :-p</blockquote></mx-reply>... honestly I don't hate that","mimetype":"text/html"}]},"ts":1663211191483,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$aTkRHNU6AnZPxQUBXV574F-88X7N7ndu7hVWYtoRAcc"},
{"content":{"body":"I guess maybe I do hate that","msgtype":"m.text","org.matrix.msc1767.text":"I guess maybe I do hate that"},"ts":1663211194054,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_HfPmMgBuTsSZRqDXYxBpLvCeGgUlSdM-C0cnF7PlyI"},
{"content":{"body":"it's a fun idea though","msgtype":"m.text","org.matrix.msc1767.text":"it's a fun idea though"},"ts":1663211199683,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hVMmQB0vn6R4eEWpmdKf89_Gt8oGru2NXTqx-iSHmWM"},
{"content":{"body":"bad, but fun","msgtype":"m.text","org.matrix.msc1767.text":"bad, but fun"},"ts":1663211204505,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FGZqeCt4drDPMdR-oOlOrycdp_enj1Oo5dMx3y2f97U"},
{"content":{"body":"if anyone doesn't hate it, i made a terrible terrible mistake","msgtype":"m.text","org.matrix.msc1767.text":"if anyone doesn't hate it, i made a terrible terrible mistake"},"ts":1663211229127,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$c7zYfxOoS7YQhqmttFoDjbM4HFhsSrC0pjvmEQTazbo"},
{"content":{"body":"if it weren't for the identity discontinuity I would not hate that","msgtype":"m.text","org.matrix.msc1767.text":"if it weren't for the identity discontinuity I would not hate that"},"ts":1663211235852,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$akDzgxrDqSpU-F8fzkUJl-xg2hVqp5IAQQu7gax-wUo"},
{"content":{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nOne of my main motivations is related to how `try..finally` is *not* adequate to solve these cases given the complex nesting that needs to occur when working with multiple resources.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>One of my main motivations is related to how <code>try..finally</code> is <em>not</em> adequate to solve these cases given the complex nesting that needs to occur when working with multiple resources.","m.relates_to":{"m.in_reply_to":{"event_id":"$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nOne of my main motivations is related to how `try..finally` is *not* adequate to solve these cases given the complex nesting that needs to occur when working with multiple resources.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>One of my main motivations is related to how <code>try..finally</code> is <em>not</em> adequate to solve these cases given the complex nesting that needs to occur when working with multiple resources.","mimetype":"text/html"}]},"ts":1663211255297,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZCo7FsRYbYXffxcx63z42H2B4SfOG1EbdCJUxTD4LEI"},
{"content":{"body":"since not everyone even uses a linter, which is an uncontroversial best practice, let alone a type system, which is not an uncontroversial best practice, i don't think solving it with tooling is sufficient","m.relates_to":{"event_id":"$OYoOA5Vs1xLdi5szYZmM_PleBzXkgza_2QeIpzo0Rfs","is_falling_back":true,"m.in_reply_to":{"event_id":"$cKAh15tAkw3jsV3PO-yA-n_1nq5A6GWxG4QHit45UH0"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"since not everyone even uses a linter, which is an uncontroversial best practice, let alone a type system, which is not an uncontroversial best practice, i don't think solving it with tooling is sufficient"},"ts":1663211286590,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nFQQqx6wkqYAU_dn5ip0W2VCZRXPc3vPpS7IPlYJYgE"},
{"content":{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nI believe developers don't tend to make good enough use of try/finally since it's too wordy, and just leak things instead--I think this is why many other languages have added this construct despite also having try/finally (itself a validation)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>I believe developers don't tend to make good enough use of try/finally since it's too wordy, and just leak things instead--I think this is why many other languages have added this construct despite also having try/finally (itself a validation)","m.relates_to":{"m.in_reply_to":{"event_id":"$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nI believe developers don't tend to make good enough use of try/finally since it's too wordy, and just leak things instead--I think this is why many other languages have added this construct despite also having try/finally (itself a validation)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>I believe developers don't tend to make good enough use of try/finally since it's too wordy, and just leak things instead--I think this is why many other languages have added this construct despite also having try/finally (itself a validation)","mimetype":"text/html"}]},"ts":1663211322198,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GTgVW1CnvEXwoLbmysnFURDNQG2O_x29Ce9VvupvB_0"},
{"content":{"body":"it will be good to collate evidence here, I agree, but I think we can do that","msgtype":"m.text","org.matrix.msc1767.text":"it will be good to collate evidence here, I agree, but I think we can do that"},"ts":1663211339954,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$W_naJDiZNJ_MXWjegIRo3i3cxOLMTl_r3gmhpMZQN9o"},
{"content":{"body":"dminor: Is there an issue tracking your feedback, so we can collect this information there?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: Is there an issue tracking your feedback, so we can collect this information there?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"dminor: Is there an issue tracking your feedback, so we can collect this information there?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@dminor:mozilla.org\">dminor</a>: Is there an issue tracking your feedback, so we can collect this information there?","mimetype":"text/html"}]},"ts":1663211361963,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$01hqOXXnsIVaj1oYkI1dywhL97xaXnWseQ03rYSWixQ"},
{"content":{"body":"> <@ljharb:matrix.org> it kind of seems like something that'd be web compatible to disallow, since it'd be unlikely someone ships that code\n\nre the \"why do we allow const in for-loop heads\", https://github.com/tc39/proposal-explicit-resource-management/issues/96#issuecomment-1239940758","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TD6aIj98hSD0Cj1j-ksLKy5jYaGVjChBpDrpJ-hi_Ro?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it kind of seems like something that&#39;d be web compatible to disallow, since it&#39;d be unlikely someone ships that code</blockquote></mx-reply>re the &quot;why do we allow const in for-loop heads&quot;, https://github.com/tc39/proposal-explicit-resource-management/issues/96#issuecomment-1239940758","m.relates_to":{"m.in_reply_to":{"event_id":"$TD6aIj98hSD0Cj1j-ksLKy5jYaGVjChBpDrpJ-hi_Ro"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> it kind of seems like something that'd be web compatible to disallow, since it'd be unlikely someone ships that code\n\nre the \"why do we allow const in for-loop heads\", https://github.com/tc39/proposal-explicit-resource-management/issues/96#issuecomment-1239940758","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TD6aIj98hSD0Cj1j-ksLKy5jYaGVjChBpDrpJ-hi_Ro?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>it kind of seems like something that&#39;d be web compatible to disallow, since it&#39;d be unlikely someone ships that code</blockquote></mx-reply>re the &quot;why do we allow const in for-loop heads&quot;, https://github.com/tc39/proposal-explicit-resource-management/issues/96#issuecomment-1239940758","mimetype":"text/html"}]},"ts":1663211367480,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GTCPN5pFXp-hpUSWj0ekWzJYF6y8oS81I4LDdXUR45s"},
{"content":{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nI believe the README already give the solid motivations? For example, It's too hard to manage multiple resource correctly...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>I believe the README already give the solid motivations? For example, It's too hard to manage multiple resource correctly...","m.relates_to":{"m.in_reply_to":{"event_id":"$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@dminor:mozilla.org> The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases\n\nI believe the README already give the solid motivations? For example, It's too hard to manage multiple resource correctly...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6dQOyC9MC_GOhxlbKB4Yg9GLE0ub6Nzr4saEzgVY8u4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@dminor:mozilla.org\">@dminor:mozilla.org</a><br>The discussion we had is that we would like to see more evidence as to why try/finally is not adequate to solve these use cases</blockquote></mx-reply>I believe the README already give the solid motivations? For example, It's too hard to manage multiple resource correctly...","mimetype":"text/html"}]},"ts":1663211369614,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$hpjF2ItlXKMz6EPV-D8K7aCgyjS9b7qM4S77pk86fto"},
{"content":{"body":"`try..finally` also has the limitation of suppressing exceptions from the body, which are valuable for both logging and error recovery purposes.","format":"org.matrix.custom.html","formatted_body":"<code>try..finally</code> also has the limitation of suppressing exceptions from the body, which are valuable for both logging and error recovery purposes.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`try..finally` also has the limitation of suppressing exceptions from the body, which are valuable for both logging and error recovery purposes.","mimetype":"text/plain"},{"body":"<code>try..finally</code> also has the limitation of suppressing exceptions from the body, which are valuable for both logging and error recovery purposes.","mimetype":"text/html"}]},"ts":1663211393247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XiNUizk4SBfDyRJJFhuAxdidqQQrZcGRueWi6o3nz3Y"},
{"content":{"body":"so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n\nmy intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in _some_ way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)","format":"org.matrix.custom.html","formatted_body":"<p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n<p>my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in <em>some</em> way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n\nmy intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in _some_ way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)","mimetype":"text/plain"},{"body":"<p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n<p>my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in <em>some</em> way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)</p>\n","mimetype":"text/html"}]},"ts":1663211410248,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xHkigQH5OWIprKpSH3JwSzi6zseUVa5uCF3lxoMMlko"},
{"content":{"body":"> <@shuyuguo:matrix.org> so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n> \n> my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in _some_ way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)\n\nThis matches my intuition as well. Disposable objects should guard against use that is inconsistent with their state regardless as to whether you used `using` or `let/const`. However, such a guard is not *mandatory* as there are valid use cases for disposables that can be reused, such as re-opening a connection.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xHkigQH5OWIprKpSH3JwSzi6zseUVa5uCF3lxoMMlko?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n<p>my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in <em>some</em> way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)</p>\n</blockquote></mx-reply>This matches my intuition as well. Disposable objects should guard against use that is inconsistent with their state regardless as to whether you used <code>using</code> or <code>let/const</code>. However, such a guard is not <em>mandatory</em> as there are valid use cases for disposables that can be reused, such as re-opening a connection.","m.relates_to":{"m.in_reply_to":{"event_id":"$xHkigQH5OWIprKpSH3JwSzi6zseUVa5uCF3lxoMMlko"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@shuyuguo:matrix.org> so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n> \n> my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in _some_ way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)\n\nThis matches my intuition as well. Disposable objects should guard against use that is inconsistent with their state regardless as to whether you used `using` or `let/const`. However, such a guard is not *mandatory* as there are valid use cases for disposables that can be reused, such as re-opening a connection.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xHkigQH5OWIprKpSH3JwSzi6zseUVa5uCF3lxoMMlko?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n<p>my intuition here is that the usual extreme badness about closing over stack-lifetimed variables is memory safety, which is not the footgun here. so my expectation is that most objects would throw at runtime in <em>some</em> way after being disposed of anyways, instead, for example, accessing random memory. if TDZ throws a runtime error, i expect that to be net the same effect, except with extra implementation burden (at least the investigative portion, if not also the implementation complexity portion)</p>\n</blockquote></mx-reply>This matches my intuition as well. Disposable objects should guard against use that is inconsistent with their state regardless as to whether you used <code>using</code> or <code>let/const</code>. However, such a guard is not <em>mandatory</em> as there are valid use cases for disposables that can be reused, such as re-opening a connection.","mimetype":"text/html"}]},"ts":1663211571055,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2TxMqMSu5FAM9OoN5CRdd8kph8l70wjSb-efXJvfPmU"},
{"content":{"body":"Enforcing this both in the object itself and in the `using` binding (by introducing a new TDZ) seems excessive.","format":"org.matrix.custom.html","formatted_body":"Enforcing this both in the object itself and in the <code>using</code> binding (by introducing a new TDZ) seems excessive.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Enforcing this both in the object itself and in the `using` binding (by introducing a new TDZ) seems excessive.","mimetype":"text/plain"},{"body":"Enforcing this both in the object itself and in the <code>using</code> binding (by introducing a new TDZ) seems excessive.","mimetype":"text/html"}]},"ts":1663211629954,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0JZTSglMqiQX7Ww3ASINIfvYWY9nHgfwa1uKiGbEij4"},
{"content":{"body":"Could we have an example of reusing so I can understand it more easy? thank u!","msgtype":"m.text","org.matrix.msc1767.text":"Could we have an example of reusing so I can understand it more easy? thank u!"},"ts":1663211750968,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$iQuPqV60xF9VTlhiA4C4pk9crS_8gIQDTFgJ28V7aRc"},
{"content":{"body":"> so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n\nCan you write out the example there?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n</blockquote>\n<p>Can you write out the example there?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.\n\nCan you write out the example there?","mimetype":"text/plain"},{"body":"<blockquote>\n<p>so here's a use case where i don't want tdz: recursive mutexes. to be sure, it's expressible even in the case of a TDZ via additional aliasing but that is not something i want to type.</p>\n</blockquote>\n<p>Can you write out the example there?</p>\n","mimetype":"text/html"}]},"ts":1663211794458,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z9E39_gIcnSMpb8mMudBv3SSTnN20EVcasrzICYdYHc"},
{"content":{"body":"meh, i don't find that compelling at all","m.relates_to":{"event_id":"$GTCPN5pFXp-hpUSWj0ekWzJYF6y8oS81I4LDdXUR45s","is_falling_back":true,"m.in_reply_to":{"event_id":"$GTCPN5pFXp-hpUSWj0ekWzJYF6y8oS81I4LDdXUR45s"},"rel_type":"m.thread"},"msgtype":"m.text","org.matrix.msc1767.text":"meh, i don't find that compelling at all"},"ts":1663211964671,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6nXLkFHqEzIkGV1bwaXl8XzOX5p6As8nKpHCchrC8P8"},
{"content":{"body":"> <@haxjs:matrix.org> Could we have an example of reusing so I can understand it more easy? thank u!\n\nSince we don't have `using void`, essentially:\n```js\nconst connection = new Connection();\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iQuPqV60xF9VTlhiA4C4pk9crS_8gIQDTFgJ28V7aRc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Could we have an example of reusing so I can understand it more easy? thank u!</blockquote></mx-reply><p>Since we don't have <code>using void</code>, essentially:</p>\n<pre><code class=\"language-js\">const connection = new Connection();\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$iQuPqV60xF9VTlhiA4C4pk9crS_8gIQDTFgJ28V7aRc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@haxjs:matrix.org> Could we have an example of reusing so I can understand it more easy? thank u!\n\nSince we don't have `using void`, essentially:\n```js\nconst connection = new Connection();\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iQuPqV60xF9VTlhiA4C4pk9crS_8gIQDTFgJ28V7aRc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Could we have an example of reusing so I can understand it more easy? thank u!</blockquote></mx-reply><p>Since we don't have <code>using void</code>, essentially:</p>\n<pre><code class=\"language-js\">const connection = new Connection();\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\nconnection.open();\n{\n  using _ = connection;\n  ...\n} // connection is closed\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663211977247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D91fFZ1F37fxeRLRHLy-KeKVbg9vHfhSrR4MEH-Bdnw"},
{"content":{"body":"We want to guarantee the connection is closed in both the normal and exceptional cases, so that we can reopen it following the block.","msgtype":"m.text","org.matrix.msc1767.text":"We want to guarantee the connection is closed in both the normal and exceptional cases, so that we can reopen it following the block."},"ts":1663212020071,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ERgZBN9o1mnz7R3k86YMTPDuVRHV_oAdFfm0I1vu_30"},
{"content":{"body":"This is a bit contrived, for a more real world example I'll have to spend more time putting something together.","msgtype":"m.text","org.matrix.msc1767.text":"This is a bit contrived, for a more real world example I'll have to spend more time putting something together."},"ts":1663212052187,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JS47fo9u1_UDrzic-BIhTAgkxhyyc_hDlmCQn0-TyKk"},
{"content":{"body":"so in those case you aren't... reusing the binding","msgtype":"m.text","org.matrix.msc1767.text":"so in those case you aren't... reusing the binding"},"ts":1663212120472,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3AcC_UM2Vnywop-JrWAOrSXt8bE_hwK3i4jG8IWD8_A"},
{"content":{"body":"This example seems weird to me...","msgtype":"m.text","org.matrix.msc1767.text":"This example seems weird to me..."},"ts":1663212316317,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$3oqnliQB8-_7RUeBKs5kJW-yF-ehG8ziRqzz2B_34CA"},
{"content":{"body":"Why we can't write `using conn = Connection.open()` twice and let `Connection` class do the reusing of underlying connections?","format":"org.matrix.custom.html","formatted_body":"Why we can't write <code>using conn = Connection.open()</code> twice and let <code>Connection</code> class do the reusing of underlying connections?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Why we can't write `using conn = Connection.open()` twice and let `Connection` class do the reusing of underlying connections?","mimetype":"text/plain"},{"body":"Why we can't write <code>using conn = Connection.open()</code> twice and let <code>Connection</code> class do the reusing of underlying connections?","mimetype":"text/html"}]},"ts":1663212453458,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$BvTBsrGM1Rb3Jyn5M3mXnxtqt7R7HMkm8j1B54cPLnM"},
{"content":{"body":"bakkot: something like https://gist.github.com/syg/26e303748b5ebc3ed5206a2b875293fb","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: something like https://gist.github.com/syg/26e303748b5ebc3ed5206a2b875293fb","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: something like https://gist.github.com/syg/26e303748b5ebc3ed5206a2b875293fb","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: something like https://gist.github.com/syg/26e303748b5ebc3ed5206a2b875293fb","mimetype":"text/html"}]},"ts":1663212511238,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HMFy_8iOLRRRceNKWvG4xTTNyFn4FAs0I6zZWuLExK8"},
{"content":{"body":"err there's a typo there","msgtype":"m.text","org.matrix.msc1767.text":"err there's a typo there"},"ts":1663212539744,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cWhpnl0euhBgayRQyrhbT2ELOEsfPTVQsZq-C4YNgKU"},
{"content":{"body":"> <@bakkot:matrix.org> so in those case you aren't... reusing the binding\n\nNo, sorry. That example relates to general reuse of a disposable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3AcC_UM2Vnywop-JrWAOrSXt8bE_hwK3i4jG8IWD8_A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>so in those case you aren&#39;t... reusing the binding</blockquote></mx-reply>No, sorry. That example relates to general reuse of a disposable.","m.relates_to":{"m.in_reply_to":{"event_id":"$3AcC_UM2Vnywop-JrWAOrSXt8bE_hwK3i4jG8IWD8_A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> so in those case you aren't... reusing the binding\n\nNo, sorry. That example relates to general reuse of a disposable.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3AcC_UM2Vnywop-JrWAOrSXt8bE_hwK3i4jG8IWD8_A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>so in those case you aren&#39;t... reusing the binding</blockquote></mx-reply>No, sorry. That example relates to general reuse of a disposable.","mimetype":"text/html"}]},"ts":1663212596205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d2pSZmZpPv2IAjAnqW9vVz1_PfnKXpodTN-q6M9ebhY"},
{"content":{"body":"i'd also like to better understand what the badness is with closing over a disposed thing","msgtype":"m.text","org.matrix.msc1767.text":"i'd also like to better understand what the badness is with closing over a disposed thing"},"ts":1663212657068,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s3e-DbZ7x3rdfwNFhrqXGmx5wX1ZLTiRm-e9hxbO4eI"},
{"content":{"body":"like, what do you expect to happen, if it's not a runtime error, since that's what the TDZ gives you","msgtype":"m.text","org.matrix.msc1767.text":"like, what do you expect to happen, if it's not a runtime error, since that's what the TDZ gives you"},"ts":1663212667842,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PVPnM3Z4vnBzpzGxXIw5DH1erqrMBw9PmPS-lD5oZMM"},
{"content":{"body":"is it \"it might do some other stuff before getting to the error point\"?","msgtype":"m.text","org.matrix.msc1767.text":"is it \"it might do some other stuff before getting to the error point\"?"},"ts":1663212683893,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rvgFR84f9_ylBV-reE_zWX93dU46T2ICWErU0BfyPMw"},
{"content":{"body":"are your errors generally recoverable? is it bad that it did some other stuff?","msgtype":"m.text","org.matrix.msc1767.text":"are your errors generally recoverable? is it bad that it did some other stuff?"},"ts":1663212697885,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CebocQRHvTgHP_9eFCUG5VvcT-4xifHKMKBe1U9EEVM"},
{"content":{"body":"it is potentially bad that it did some other stuff, certainly","msgtype":"m.text","org.matrix.msc1767.text":"it is potentially bad that it did some other stuff, certainly"},"ts":1663212763670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$equk0Z3tWoQkx7X4X5w2GKopk9gSlZyXGWZydiCptus"},
{"content":{"body":"As far as binding reuse, the example is not much different than the example in your issue:\n```js\n{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() => cache.delete(x.url), 100);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>As far as binding reuse, the example is not much different than the example in your issue:</p>\n<pre><code class=\"language-js\">{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() =&gt; cache.delete(x.url), 100);\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As far as binding reuse, the example is not much different than the example in your issue:\n```js\n{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() => cache.delete(x.url), 100);\n}\n```","mimetype":"text/plain"},{"body":"<p>As far as binding reuse, the example is not much different than the example in your issue:</p>\n<pre><code class=\"language-js\">{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() =&gt; cache.delete(x.url), 100);\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1663212773666,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$weU5rypqg-vZnhF8E3RAQFF5-GRbeeFdT2uGiGqEgOM"},
{"content":{"body":"but more generally, the language should give you an error at the point at which it is obvious you have made a mistake","msgtype":"m.text","org.matrix.msc1767.text":"but more generally, the language should give you an error at the point at which it is obvious you have made a mistake"},"ts":1663212775453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$S1IVUw5MATTJn8b2Fj5jLpbi4hDqz33NF9YAs79iSII"},
{"content":{"body":"my contention is that in practice, it does, because most objects would throw in some fashion at runtime after having its internal resources disposed","msgtype":"m.text","org.matrix.msc1767.text":"my contention is that in practice, it does, because most objects would throw in some fashion at runtime after having its internal resources disposed"},"ts":1663212798794,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8jc1Xf2hpszVEWHwq-S-yyPq97Xle4MBYCfd-2QniI4"},
{"content":{"body":"if we had a static TDZ then i would not be of this opinion","msgtype":"m.text","org.matrix.msc1767.text":"if we had a static TDZ then i would not be of this opinion"},"ts":1663212816768,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XzBhjJSIerBVXZ6SAPRoHX14XUJ2sY7YczRJxC0D4Kk"},
{"content":{"body":"> <@rbuckton:matrix.org> As far as binding reuse, the example is not much different than the example in your issue:\n> ```js\n> {\n>   using x = foo();\n>   cache.set(x.url, data);\n>   ...\n>   setTimeout(() => cache.delete(x.url), 100);\n> }\n> ```\n\nthat seems like it is a mistake - you're using `x` after it's been disposed. it seems like the language should prevent you from doing that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$weU5rypqg-vZnhF8E3RAQFF5-GRbeeFdT2uGiGqEgOM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>As far as binding reuse, the example is not much different than the example in your issue:</p>\n<pre><code class=\"language-js\">{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() =&gt; cache.delete(x.url), 100);\n}\n</code></pre>\n</blockquote></mx-reply>that seems like it is a mistake - you're using <code>x</code> after it's been disposed. it seems like the language should prevent you from doing that.","m.relates_to":{"m.in_reply_to":{"event_id":"$weU5rypqg-vZnhF8E3RAQFF5-GRbeeFdT2uGiGqEgOM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> As far as binding reuse, the example is not much different than the example in your issue:\n> ```js\n> {\n>   using x = foo();\n>   cache.set(x.url, data);\n>   ...\n>   setTimeout(() => cache.delete(x.url), 100);\n> }\n> ```\n\nthat seems like it is a mistake - you're using `x` after it's been disposed. it seems like the language should prevent you from doing that.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$weU5rypqg-vZnhF8E3RAQFF5-GRbeeFdT2uGiGqEgOM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>As far as binding reuse, the example is not much different than the example in your issue:</p>\n<pre><code class=\"language-js\">{\n  using x = foo();\n  cache.set(x.url, data);\n  ...\n  setTimeout(() =&gt; cache.delete(x.url), 100);\n}\n</code></pre>\n</blockquote></mx-reply>that seems like it is a mistake - you're using <code>x</code> after it's been disposed. it seems like the language should prevent you from doing that.","mimetype":"text/html"}]},"ts":1663212831909,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gV3HUedQZcFZOyqMBkova3M7fRVSoD05nH9iUoJL-sw"},
{"content":{"body":"that's the philosophical difference","msgtype":"m.text","org.matrix.msc1767.text":"that's the philosophical difference"},"ts":1663212850378,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XDUZlhhrnTX8mUWlpNoEp105taYKLZ6UFKIEdSbYj6A"},
{"content":{"body":"if you explicitly want to use the object after it's been disposed, you should put it in a binding other than the one which is going to get disposed.","msgtype":"m.text","org.matrix.msc1767.text":"if you explicitly want to use the object after it's been disposed, you should put it in a binding other than the one which is going to get disposed."},"ts":1663212865222,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cHQe5cbCUEfcn56g4ZMvRk1RjP04JU3uHM8dggXeya4"},
{"content":{"body":"Yes, you can create another `const` to capture `x.url` to close over it, but that seems awkward just to enforce something via the binding that the disposable itself also needs to enforce internally.","format":"org.matrix.custom.html","formatted_body":"Yes, you can create another <code>const</code> to capture <code>x.url</code> to close over it, but that seems awkward just to enforce something via the binding that the disposable itself also needs to enforce internally.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yes, you can create another `const` to capture `x.url` to close over it, but that seems awkward just to enforce something via the binding that the disposable itself also needs to enforce internally.","mimetype":"text/plain"},{"body":"Yes, you can create another <code>const</code> to capture <code>x.url</code> to close over it, but that seems awkward just to enforce something via the binding that the disposable itself also needs to enforce internally.","mimetype":"text/html"}]},"ts":1663212869669,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$495tTaE1YNQSr2__jXki-fnSud0looet5e-UHRKurLI"},
{"content":{"body":"i do not think it is a mistake to reuse `x` after it's been \"disposed\", which i take to mean no more than \"had some scope exit function ran\"","format":"org.matrix.custom.html","formatted_body":"i do not think it is a mistake to reuse <code>x</code> after it's been &quot;disposed&quot;, which i take to mean no more than &quot;had some scope exit function ran&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i do not think it is a mistake to reuse `x` after it's been \"disposed\", which i take to mean no more than \"had some scope exit function ran\"","mimetype":"text/plain"},{"body":"i do not think it is a mistake to reuse <code>x</code> after it's been &quot;disposed&quot;, which i take to mean no more than &quot;had some scope exit function ran&quot;","mimetype":"text/html"}]},"ts":1663212870799,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m3_tYgN4YrH13JneeQDYwiD4V2LInmx4icHuGkbrz2k"},
{"content":{"body":"a scope exit function named `Symbol.dispose`, like from `DisposableStack`","format":"org.matrix.custom.html","formatted_body":"a scope exit function named <code>Symbol.dispose</code>, like from <code>DisposableStack</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"a scope exit function named `Symbol.dispose`, like from `DisposableStack`","mimetype":"text/plain"},{"body":"a scope exit function named <code>Symbol.dispose</code>, like from <code>DisposableStack</code>","mimetype":"text/html"}]},"ts":1663212891348,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Uw7_EbhBw-l6w_ElOX-jw29GoKB_2qbrwlRQ_3c5Pnc"},
{"content":{"body":"it's not like I am making up the word \"dispose\" here","msgtype":"m.text","org.matrix.msc1767.text":"it's not like I am making up the word \"dispose\" here"},"ts":1663212899184,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c2bpZD7a5x7AF9cCedSVddu1d80e-A6R_Pwx7D-r6xI"},
{"content":{"body":"that's why i asked is it a naming issue earlier","msgtype":"m.text","org.matrix.msc1767.text":"that's why i asked is it a naming issue earlier"},"ts":1663212906847,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OIkEa7C3zFZkQ08DEYvwil4EPByIf6ZOLkZOkjOEbnI"},
{"content":{"body":"i thought ron named it thus cribbing from C# terminology","msgtype":"m.text","org.matrix.msc1767.text":"i thought ron named it thus cribbing from C# terminology"},"ts":1663212917224,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nrW6qFXJMH9yG3n9FEoj8NCIUiY_UP9C3GOt3FtMGq8"},
{"content":{"body":"also the proposal is about resource management","msgtype":"m.text","org.matrix.msc1767.text":"also the proposal is about resource management"},"ts":1663212921442,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Up8KrUmrKPxt983KD2XYcwxwANRnlTAMGqKmeQVejiI"},
{"content":{"body":"> <@bakkot:matrix.org> that seems like it is a mistake - you're using `x` after it's been disposed. it seems like the language should prevent you from doing that.\n\nNot if `x.url` isn't related to the memory/native resource/etc. that `x` is holding.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gV3HUedQZcFZOyqMBkova3M7fRVSoD05nH9iUoJL-sw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that seems like it is a mistake - you're using <code>x</code> after it's been disposed. it seems like the language should prevent you from doing that.</blockquote></mx-reply>Not if <code>x.url</code> isn't related to the memory/native resource/etc. that <code>x</code> is holding.","m.relates_to":{"m.in_reply_to":{"event_id":"$gV3HUedQZcFZOyqMBkova3M7fRVSoD05nH9iUoJL-sw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> that seems like it is a mistake - you're using `x` after it's been disposed. it seems like the language should prevent you from doing that.\n\nNot if `x.url` isn't related to the memory/native resource/etc. that `x` is holding.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gV3HUedQZcFZOyqMBkova3M7fRVSoD05nH9iUoJL-sw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that seems like it is a mistake - you're using <code>x</code> after it's been disposed. it seems like the language should prevent you from doing that.</blockquote></mx-reply>Not if <code>x.url</code> isn't related to the memory/native resource/etc. that <code>x</code> is holding.","mimetype":"text/html"}]},"ts":1663212924249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DjaNofEOnMhmhsPdbnjQjp59_bLuvSHXV0uvQKN1dj4"},
{"content":{"body":"i am sorry to say i'm not sure how either side can be swayed here","msgtype":"m.text","org.matrix.msc1767.text":"i am sorry to say i'm not sure how either side can be swayed here"},"ts":1663212949177,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nmTX2WcGP8gA6eSRcOfBd14KN8Wpu5hSNjPz8B-AMs4"},
{"content":{"body":"if seems to boil down to i think this pattern isn't a mistake, while you do","msgtype":"m.text","org.matrix.msc1767.text":"if seems to boil down to i think this pattern isn't a mistake, while you do"},"ts":1663212966813,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$I7JVIQEuc5_ihIGPtFNY3_wibJTJNU4APVKReNQCORk"},
{"content":{"body":"> <@rbuckton:matrix.org> Not if `x.url` isn't related to the memory/native resource/etc. that `x` is holding.\n\nI mean that if I saw that code snippet in any codebase, I would assume it was a mistake and ask the author to rephrase it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DjaNofEOnMhmhsPdbnjQjp59_bLuvSHXV0uvQKN1dj4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Not if <code>x.url</code> isn't related to the memory/native resource/etc. that <code>x</code> is holding.</blockquote></mx-reply>I mean that if I saw that code snippet in any codebase, I would assume it was a mistake and ask the author to rephrase it","m.relates_to":{"m.in_reply_to":{"event_id":"$DjaNofEOnMhmhsPdbnjQjp59_bLuvSHXV0uvQKN1dj4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> Not if `x.url` isn't related to the memory/native resource/etc. that `x` is holding.\n\nI mean that if I saw that code snippet in any codebase, I would assume it was a mistake and ask the author to rephrase it","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DjaNofEOnMhmhsPdbnjQjp59_bLuvSHXV0uvQKN1dj4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Not if <code>x.url</code> isn't related to the memory/native resource/etc. that <code>x</code> is holding.</blockquote></mx-reply>I mean that if I saw that code snippet in any codebase, I would assume it was a mistake and ask the author to rephrase it","mimetype":"text/html"}]},"ts":1663212972493,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qShl2g5pejtt_fzeAxBaOnvxeUmzksHTyfZwTVsw8xo"},
{"content":{"body":"if i saw that in C++ or Java i would!","msgtype":"m.text","org.matrix.msc1767.text":"if i saw that in C++ or Java i would!"},"ts":1663212988385,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m6UZhT_n9PWOylhGbcFrJwcOkIkVt-OmPBK-4JpxL_g"},
{"content":{"body":"but memory safety isn't an issue here!","msgtype":"m.text","org.matrix.msc1767.text":"but memory safety isn't an issue here!"},"ts":1663212995186,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xef_KrEmrx5z1Qe5aOec5X7nqDGuksuwfSevxMTvB1I"},
{"content":{"body":"I'm concerned that introducing a new TDZ to enforce this is overkill. It will impact host implementations and introduce complexity for valid cases (by requiring a `const` alias), for almost no added benefit when disposables also need to guard themselves.","format":"org.matrix.custom.html","formatted_body":"I'm concerned that introducing a new TDZ to enforce this is overkill. It will impact host implementations and introduce complexity for valid cases (by requiring a <code>const</code> alias), for almost no added benefit when disposables also need to guard themselves.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm concerned that introducing a new TDZ to enforce this is overkill. It will impact host implementations and introduce complexity for valid cases (by requiring a `const` alias), for almost no added benefit when disposables also need to guard themselves.","mimetype":"text/plain"},{"body":"I'm concerned that introducing a new TDZ to enforce this is overkill. It will impact host implementations and introduce complexity for valid cases (by requiring a <code>const</code> alias), for almost no added benefit when disposables also need to guard themselves.","mimetype":"text/html"}]},"ts":1663213066588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rGsTp_0eC3g3e3SKP-X19p1JUsG-cC4SvKOlixNO1d8"},
{"content":{"body":"memory safety isn't an issue, but the whole concept of this proposal is that you are tying the lifetime of a resource to a specific binding. like, that's why it makes sense to have a thing happen at \"scope exit\" - because once you leave the scope, you are no longer able to use the binding.","msgtype":"m.text","org.matrix.msc1767.text":"memory safety isn't an issue, but the whole concept of this proposal is that you are tying the lifetime of a resource to a specific binding. like, that's why it makes sense to have a thing happen at \"scope exit\" - because once you leave the scope, you are no longer able to use the binding."},"ts":1663213092238,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-fwDEwbwWvSEcVwPDuTDsVBc9vUwOzCBExhxG1VBVy4"},
{"content":{"body":"except that you are, through closures which outlive the binding.","msgtype":"m.text","org.matrix.msc1767.text":"except that you are, through closures which outlive the binding."},"ts":1663213098114,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NXSEM-mZZ4k1iJaswnrpm4hotmzDAe99RIhWbsSbSEY"},
{"content":{"body":"i hear you, but i have it layered the opposite way in mind","msgtype":"m.text","org.matrix.msc1767.text":"i hear you, but i have it layered the opposite way in mind"},"ts":1663213113005,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3toekGmGuNBgEvM7jzSvQpSHB-qcM4l0RXIlzFLMPso"},
{"content":{"body":"but if you are able to reuse the binding after the scope has exited, it does not make sense to tie the lifetime of the resource to the scope","msgtype":"m.text","org.matrix.msc1767.text":"but if you are able to reuse the binding after the scope has exited, it does not make sense to tie the lifetime of the resource to the scope"},"ts":1663213119360,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tMDwKsU28jvlqeb6QARoNqSs5SGMwLBH9TcLCU93mNs"},
{"content":{"body":"Calling `x[Symbol.dispose]()` doesn't explicitly free memory. If you didn't have `using` the object would still be resident in memory. It merely informs the object it should dispose of any relevant resources it holds.","format":"org.matrix.custom.html","formatted_body":"Calling <code>x[Symbol.dispose]()</code> doesn't explicitly free memory. If you didn't have <code>using</code> the object would still be resident in memory. It merely informs the object it should dispose of any relevant resources it holds.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Calling `x[Symbol.dispose]()` doesn't explicitly free memory. If you didn't have `using` the object would still be resident in memory. It merely informs the object it should dispose of any relevant resources it holds.","mimetype":"text/plain"},{"body":"Calling <code>x[Symbol.dispose]()</code> doesn't explicitly free memory. If you didn't have <code>using</code> the object would still be resident in memory. It merely informs the object it should dispose of any relevant resources it holds.","mimetype":"text/html"}]},"ts":1663213131149,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$boU3q7b8GSblqvzR2AXaYjqGdRWjtyTCBfro3SsUHzs"},
{"content":{"body":"the useful thing of this proposal, regardless of its name and the name of `Symbol.dispose`, is to register a thing to happen at \"scope exit\", which IME extends beyond resource management","format":"org.matrix.custom.html","formatted_body":"the useful thing of this proposal, regardless of its name and the name of <code>Symbol.dispose</code>, is to register a thing to happen at &quot;scope exit&quot;, which IME extends beyond resource management","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the useful thing of this proposal, regardless of its name and the name of `Symbol.dispose`, is to register a thing to happen at \"scope exit\", which IME extends beyond resource management","mimetype":"text/plain"},{"body":"the useful thing of this proposal, regardless of its name and the name of <code>Symbol.dispose</code>, is to register a thing to happen at &quot;scope exit&quot;, which IME extends beyond resource management","mimetype":"text/html"}]},"ts":1663213146892,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oDet1ZdBQXGdlmpRcmBlG1_cKDBhGqhnbqqu9PNKwSM"},
{"content":{"body":"that would be Go's `defer`, which is a reasonable alternative to this proposal","format":"org.matrix.custom.html","formatted_body":"that would be Go's <code>defer</code>, which is a reasonable alternative to this proposal","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that would be Go's `defer`, which is a reasonable alternative to this proposal","mimetype":"text/plain"},{"body":"that would be Go's <code>defer</code>, which is a reasonable alternative to this proposal","mimetype":"text/html"}]},"ts":1663213166785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IHd8C705ayJtqlArAg1BkxHBVBUFwEpLOB0KuUrv2VA"},
{"content":{"body":"so i see no compelling reason to build in a hairshirt for resource management, because that's an enabled use case, not the sole value to me","msgtype":"m.text","org.matrix.msc1767.text":"so i see no compelling reason to build in a hairshirt for resource management, because that's an enabled use case, not the sole value to me"},"ts":1663213170628,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m44YfttPAr5s6HynrR5vjeTNIYus9vXlntN2XXDtNng"},
{"content":{"body":"however, that is not this proposal","msgtype":"m.text","org.matrix.msc1767.text":"however, that is not this proposal"},"ts":1663213170746,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xLuwHCKL8MpJjAsjdKwTc1A9daYGC7iKOhoUOzptzdw"},
{"content":{"body":"it is this proposal mechanically via an object method?","msgtype":"m.text","org.matrix.msc1767.text":"it is this proposal mechanically via an object method?"},"ts":1663213197851,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_wzfvcTEzLw83SLKRHHV3lBUttqZ8vajtdyKY9EGiIg"}
]