[
{"content":{"body":"re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","format":"org.matrix.custom.html","formatted_body":"re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","msgtype":"m.text"},"ts":1679529650826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"},
{"content":{"body":"re: Mark's comments now... when you see a ton of code that's accidentally serial instead of parallel, you really wish for a better syntax for all of this that doesn't encourage bad behavior","msgtype":"m.text"},"ts":1679529748457,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$5uuuQEdJxzFCeNS6chcFgscjQu_5sSOEiKbJHmHtDUg"},
{"content":{"body":"> <@bakkot:matrix.org> re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case\n\nbut it seems not have big benefit for simple case :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case</blockquote></mx-reply>but it seems not have big benefit for simple case :)","m.relates_to":{"m.in_reply_to":{"event_id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"}},"msgtype":"m.text"},"ts":1679530013813,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Tk0Hw_e-Wuhvvke8Uqq5fTUzwp-W0kamWEwyrWKhZSY"},
{"content":{"body":"I'm fairly certain a cover grammar is feasible for `await using`, the big question is whether what I have put together is correct. Given the NLT restrictions, an `await using` declaration must have the first identifier in the binding list on the same line as `await using`, and that is always a syntax error in the expression case. Binding patterns aren't permitted in `using`, so there is no ambiguity with `await using [x]`.","format":"org.matrix.custom.html","formatted_body":"I'm fairly certain a cover grammar is feasible for <code>await using</code>, the big question is whether what I have put together is correct. Given the NLT restrictions, an <code>await using</code> declaration must have the first identifier in the binding list on the same line as <code>await using</code>, and that is always a syntax error in the expression case. Binding patterns aren't permitted in <code>using</code>, so there is no ambiguity with <code>await using [x]</code>.","msgtype":"m.text"},"ts":1679530159062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GD2wrHVTHEs7DzV3aRnKKez2o3QeT9pIcFgaBoMa9N0"}
]