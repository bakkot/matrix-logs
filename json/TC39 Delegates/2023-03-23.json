[
{"content":{"body":"re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","format":"org.matrix.custom.html","formatted_body":"re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","msgtype":"m.text"},"ts":1679529650826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"},
{"content":{"body":"re: Mark's comments now... when you see a ton of code that's accidentally serial instead of parallel, you really wish for a better syntax for all of this that doesn't encourage bad behavior","msgtype":"m.text"},"ts":1679529748457,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$5uuuQEdJxzFCeNS6chcFgscjQu_5sSOEiKbJHmHtDUg"},
{"content":{"body":"> <@bakkot:matrix.org> re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case\n\nbut it seems not have big benefit for simple case :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case</blockquote></mx-reply>but it seems not have big benefit for simple case :)","m.relates_to":{"m.in_reply_to":{"event_id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"}},"msgtype":"m.text"},"ts":1679530013813,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Tk0Hw_e-Wuhvvke8Uqq5fTUzwp-W0kamWEwyrWKhZSY"},
{"content":{"body":"I'm fairly certain a cover grammar is feasible for `await using`, the big question is whether what I have put together is correct. Given the NLT restrictions, an `await using` declaration must have the first identifier in the binding list on the same line as `await using`, and that is always a syntax error in the expression case. Binding patterns aren't permitted in `using`, so there is no ambiguity with `await using [x]`.","format":"org.matrix.custom.html","formatted_body":"I'm fairly certain a cover grammar is feasible for <code>await using</code>, the big question is whether what I have put together is correct. Given the NLT restrictions, an <code>await using</code> declaration must have the first identifier in the binding list on the same line as <code>await using</code>, and that is always a syntax error in the expression case. Binding patterns aren't permitted in <code>using</code>, so there is no ambiguity with <code>await using [x]</code>.","msgtype":"m.text"},"ts":1679530159062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GD2wrHVTHEs7DzV3aRnKKez2o3QeT9pIcFgaBoMa9N0"},
{"content":{"body":"i'm gonna level with you rbuckton, i do not have enough brainpower left today to vet that cover grammar","format":"org.matrix.custom.html","formatted_body":"i'm gonna level with you <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>, i do not have enough brainpower left today to vet that cover grammar","msgtype":"m.text"},"ts":1679530206968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2HYWekTD2XfeX1NgmieFWskyNx6lurxVj3UnYZySTWw"},
{"content":{"body":"though i'm more interested in how hard it is to implement in a recursive-descent parser anyhow","msgtype":"m.text"},"ts":1679530219093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FopAnLatqvRSiZvppCtlUS7Z8ULNmTk5hKuUZRxKwes"},
{"content":{"body":"i'll try to put time aside before plenary tomorrow to look, but... i also have a presentation tomorrow first thing so also no promises","msgtype":"m.text"},"ts":1679530244542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Epn7bwU_g-UQlz-hbjbqPeQZfJPUbV5y4tpp0iNl6k0"},
{"content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpression","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpression","msgtype":"m.text"},"ts":1679530444630,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530473120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XbnQbrfbZybFG89463uYT4utQb1IeUMiDiAoPNUSRpY"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530500017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u8udsGPPjkJiwhoLRUAliqz_Ny0F3HHaOGRREO0CRfY"},
{"content":{"body":"that... sounds reasonable","msgtype":"m.text"},"ts":1679530580619,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d9yKVR1eH3rwQUxlR5YN4BHZwOsvlOx3sDyWqiMT-Gw"},
{"content":{"body":"Though I'll admit, cover grammars in the spec today sometimes seem a bit hand-wavy in a couple places.","msgtype":"m.text"},"ts":1679530587551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$54LbxC_nigxUIdC9DOlhQtX5VfaF3E6tCFEs9XK3w-o"},
{"content":{"body":"and i just do a bounded look ahead `await` `using` and see if it's an NLTH identifier","format":"org.matrix.custom.html","formatted_body":"and i just do a bounded look ahead <code>await</code> <code>using</code> and see if it's an NLTH identifier","msgtype":"m.text"},"ts":1679530613700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4qkbk64jtvDy5SaspJ8ftfM3qG8VDMbdS_foDcpNI8"},
{"content":{"body":"in +Await contexts","msgtype":"m.text"},"ts":1679530627341,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DbQ3Wse0uBSgzFsInAlnw6z6rsvMnQXebkYvONO6fYE"},
{"content":{"body":"In TS I'd just do two-token lookahead in +Await","msgtype":"m.text"},"ts":1679530640856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"},
{"content":{"body":"That is one benefit of `await using` over `async using`. For `await using`, both uses of the cover are in +Await, while for `async using`, only one is.","format":"org.matrix.custom.html","formatted_body":"That is one benefit of <code>await using</code> over <code>async using</code>. For <code>await using</code>, both uses of the cover are in +Await, while for <code>async using</code>, only one is.","msgtype":"m.text"},"ts":1679530673906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8gJhqDBfk0vN_B24IoBebtPUOsat7g5guTVoU34v0gA"},
{"content":{"body":"and `await using` without a binding list is unaffected?","format":"org.matrix.custom.html","formatted_body":"and <code>await using</code> without a binding list is unaffected?","msgtype":"m.text"},"ts":1679530736079,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"},
{"content":{"body":"well, is supposed to be, according to the cover","msgtype":"m.text"},"ts":1679530759664,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xP3GaRZmjr3brdUXven6sGd9MLvuW9K_cn7VivjzNiI"},
{"content":{"body":"> <@rbuckton:matrix.org> In TS I'd just do two-token lookahead in +Await\n\nIn fact, I've already done that in my current work on `using` (I was experimenting with all three syntax options).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In TS I&#39;d just do two-token lookahead in +Await</blockquote></mx-reply>In fact, I've already done that in my current work on <code>using</code> (I was experimenting with all three syntax options).","m.relates_to":{"m.in_reply_to":{"event_id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"}},"msgtype":"m.text"},"ts":1679530783601,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fDitWXjMbdwr-A8TvkL4KgqFsfvcfUVioYr3FwsoljU"},
{"content":{"body":"is TS a hand-written recursive-descent?","msgtype":"m.text"},"ts":1679530802874,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6sY5gEiyTstyl6Mbe1vimEK5PEW-Jov6MIKTaBzM030"},
{"content":{"body":"> <@shuyuguo:matrix.org> and `await using` without a binding list is unaffected?\n\nI'm not sure what you mean by this. `await using` on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and <code>await using</code> without a binding list is unaffected?</blockquote></mx-reply>I'm not sure what you mean by this. <code>await using</code> on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","m.relates_to":{"m.in_reply_to":{"event_id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"}},"msgtype":"m.text"},"ts":1679530923809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TC94ABL4a377AVVj0_yPrAU0AkMG_7xHWjUshR9nY2Q"},
{"content":{"body":" yes, that is what i meant","msgtype":"m.text"},"ts":1679530935127,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9u7EIyv6erTms6V6aRZQrWKfoLwm-LMRRvliCSTzdKM"},
{"content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`), and parse the remainder of the statement (e.g., ``[NLT] BindingList `;` ``)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>), and parse the remainder of the statement (e.g., <code>[NLT] BindingList `;` </code>)","msgtype":"m.text"},"ts":1679531106574,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8"},
{"content":{"body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","m.new_content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679531118947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t1abJbIhfOTwOXQqoYW2RIJcAyA4fMdtuP4yh1jUUDQ"},
{"content":{"body":"i am happy enough to go forward with stage 3","msgtype":"m.text"},"ts":1679531122761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bDfPVK5KNKiPNCPHjrpYg3pq1dcW3z5UjBw0PzGQtCE"},
{"content":{"body":"I will amend the slides with a summary of these changes and wait to see if Waldemar is able to provide feedback in the meantime.","msgtype":"m.text"},"ts":1679531261030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7GP65lv2pLbm0o4Fowhb45X0B2HZgQ4qDAy6A96ODAQ"},
{"content":{"body":"is there anything we need to do to get Decimal on the overflow, or will it be taken care of?","msgtype":"m.text"},"ts":1679540016073,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"},
{"content":{"body":"> <@michaelficarra:matrix.org> is there anything we need to do to get Decimal on the overflow, or will it be taken care of?\n\nIf there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>is there anything we need to do to get Decimal on the overflow, or will it be taken care of?</blockquote></mx-reply>If there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","m.relates_to":{"m.in_reply_to":{"event_id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"}},"msgtype":"m.text"},"ts":1679540981097,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gCjipbSxKpalxEQ3UWCW6qKycAyiUGfexlGQomZLsMM"},
{"content":{"body":"of course, I just wanted to record it on the list of overflow items","msgtype":"m.text"},"ts":1679541011598,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZCNlGIJAR1nqauWE2NlIbB_YRJV3EpKzyYoPsJlgYVg"},
{"content":{"body":"ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","msgtype":"m.text"},"ts":1679552101706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing\n\nnote the changes would need to be more substantive for dealing with [`v`-mode](https://github.com/tc39/ecma262/pull/2418), which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing</blockquote></mx-reply>note the changes would need to be more substantive for dealing with <a href=\"https://github.com/tc39/ecma262/pull/2418\"><code>v</code>-mode</a>, which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","m.relates_to":{"m.in_reply_to":{"event_id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"}},"msgtype":"m.text"},"ts":1679580082210,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU"},
{"content":{"body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already. ","format":"org.matrix.custom.html","formatted_body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already.","msgtype":"m.text"},"ts":1679582572841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D5fjYSBETzNi6sbpz4tOl8mEkztkUV_DXMNJGxxH-xk"},
{"content":{"body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding `\\-`, we could choose to escape it as `\\x2d`. Same for `\\=` (`\\x3d`) and `\\,` (`\\x2c`)","format":"org.matrix.custom.html","formatted_body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding <code>\\-</code>, we could choose to escape it as <code>\\x2d</code>. Same for <code>\\=</code> (<code>\\x3d</code>) and <code>\\,</code> (<code>\\x2c</code>)","msgtype":"m.text"},"ts":1679583207434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hGqa-OKRGbEN1pVw6A6br3V2M1LS484znH_Ag5vcCt0"},
{"content":{"body":"I'm not saying we shouldn't extend u-mode, but this is an option if we decide not to.","msgtype":"m.text"},"ts":1679583236876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OatJbAz6SNbg4yu00XCj70Ix385SZXEP8YtRYPqeNvM"},
{"content":{"body":"Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n- Modifiers: `(?imsx-imsx:...)`\n- Comments: `(?#...)`\n- `x`-mode line comments: `# ...`\n- Atomic Groups: `(?>...)`\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it me misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code></li>\n<li>Comments: <code>(?#...)</code></li>\n<li><code>x</code>-mode line comments: <code># ...</code></li>\n<li>Atomic Groups: <code>(?&gt;...)</code></li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it me misinterpreted in <code>x</code> mode.</p>\n","msgtype":"m.text"},"ts":1679584328586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sZdsTKh__xi-hyA2NpNMv3isG2MHR3vpl78q0xAPqzc"},
{"content":{"body":"If there's a chance we want `RegExp.escape` to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.","format":"org.matrix.custom.html","formatted_body":"If there's a chance we want <code>RegExp.escape</code> to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.","msgtype":"m.text"},"ts":1679584496862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg"},
{"content":{"body":"I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary was a nice help","msgtype":"m.text"},"ts":1679584554839,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$q0VNkPh2_s0L0Kz6GcKQ1Bk--uI0c2V7CMUDQXEdS7Q"},
{"content":{"body":" * I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary for each agenda item was a nice help","m.new_content":{"body":"I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary for each agenda item was a nice help","msgtype":"m.text"},"m.relates_to":{"event_id":"$q0VNkPh2_s0L0Kz6GcKQ1Bk--uI0c2V7CMUDQXEdS7Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679584565749,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$dSQdUNv6hrsZ5HWEnn0srMbo_6gBcUlS7mM5-z-Yr8E"},
{"content":{"body":" * Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n\n- Modifiers: `(?imsx-imsx:...)` (stage 3)\n- Comments: `(?#...)` (stage 1)\n- `x`-mode line comments: `# ...` (stage 1)\n- Atomic Groups: `(?>...)` (stage 1)\n- Conditionals: `(?(...)...|...)` (stage 0, though I'm still hoping we'll take it eventually)\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it be misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":" * <p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code> (stage 3)</li>\n<li>Comments: <code>(?#...)</code> (stage 1)</li>\n<li><code>x</code>-mode line comments: <code># ...</code> (stage 1)</li>\n<li>Atomic Groups: <code>(?&gt;...)</code> (stage 1)</li>\n<li>Conditionals: <code>(?(...)...|...)</code> (stage 0, though I'm still hoping we'll take it eventually)</li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it be misinterpreted in <code>x</code> mode.</p>\n","m.new_content":{"body":"Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n\n- Modifiers: `(?imsx-imsx:...)` (stage 3)\n- Comments: `(?#...)` (stage 1)\n- `x`-mode line comments: `# ...` (stage 1)\n- Atomic Groups: `(?>...)` (stage 1)\n- Conditionals: `(?(...)...|...)` (stage 0, though I'm still hoping we'll take it eventually)\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it be misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code> (stage 3)</li>\n<li>Comments: <code>(?#...)</code> (stage 1)</li>\n<li><code>x</code>-mode line comments: <code># ...</code> (stage 1)</li>\n<li>Atomic Groups: <code>(?&gt;...)</code> (stage 1)</li>\n<li>Conditionals: <code>(?(...)...|...)</code> (stage 0, though I'm still hoping we'll take it eventually)</li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it be misinterpreted in <code>x</code> mode.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sZdsTKh__xi-hyA2NpNMv3isG2MHR3vpl78q0xAPqzc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679584859198,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RVCExIvmqd7L4tT1z5nsKdW4d9UMYbg0Otv3rAWlaBY"},
{"content":{"body":"how does scheduling of overflow stuff happen? asking for a friend","msgtype":"m.text"},"ts":1679585026570,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY"},
{"content":{"body":"> <@gibson042:matrix.org> note the changes would need to be more substantive for dealing with [`v`-mode](https://github.com/tc39/ecma262/pull/2418), which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )\n\nThe changes are just a matter of including the punctuators which have meaning (or are reserved) in v-mode; the doubled punctuators don't actually end up mattering as long as the non-doubled versions are all escaped","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>note the changes would need to be more substantive for dealing with <a href=\"https://github.com/tc39/ecma262/pull/2418\"><code>v</code>-mode</a>, which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )</blockquote></mx-reply>The changes are just a matter of including the punctuators which have meaning (or are reserved) in v-mode; the doubled punctuators don't actually end up mattering as long as the non-doubled versions are all escaped","m.relates_to":{"m.in_reply_to":{"event_id":"$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU"}},"msgtype":"m.text"},"ts":1679585070435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_t7q6WIpKDUW5W0UY30mQ8WemCluJbAImE2DcQf-po0"},
{"content":{"body":"the list of reserved punctuators already includes `#`, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, which would cover <code>x</code>-mode comments too, thankfully","msgtype":"m.text"},"ts":1679585118841,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI"},
{"content":{"body":" * the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":" * the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode comments too, thankfully","m.new_content":{"body":"the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode comments too, thankfully","msgtype":"m.text"},"m.relates_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585131306,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ik3WgmKNoLHHv-vemcIQAo5BD-OojAJAHj-l2qmt7t0"},
{"content":{"body":" * the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully","format":"org.matrix.custom.html","formatted_body":" * the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully","m.new_content":{"body":"the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully","msgtype":"m.text"},"m.relates_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585140286,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hG2djc0pEqLzepi-VRlfCN9VwRS_0Ql4IVZ3JdUBuao"},
{"content":{"body":"> <@rbuckton:matrix.org> If there's a chance we want `RegExp.escape` to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.\n\nFor example, we may never do recursive matching, but it still might be a good idea to escape `&` (used in `(?&name)` for recursive named capture group matching, and `(?(R&name)A|B)` in conditionals to test for recursion of a group).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If there's a chance we want <code>RegExp.escape</code> to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.</blockquote></mx-reply>For example, we may never do recursive matching, but it still might be a good idea to escape <code>&amp;</code> (used in <code>(?&amp;name)</code> for recursive named capture group matching, and <code>(?(R&amp;name)A|B)</code> in conditionals to test for recursion of a group).","m.relates_to":{"m.in_reply_to":{"event_id":"$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg"}},"msgtype":"m.text"},"ts":1679585161277,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8"},
{"content":{"body":"> <@rbuckton:matrix.org> For example, we may never do recursive matching, but it still might be a good idea to escape `&` (used in `(?&name)` for recursive named capture group matching, and `(?(R&name)A|B)` in conditionals to test for recursion of a group).\n\n`&` needs to be escaped anyway for v-mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For example, we may never do recursive matching, but it still might be a good idea to escape <code>&amp;</code> (used in <code>(?&amp;name)</code> for recursive named capture group matching, and <code>(?(R&amp;name)A|B)</code> in conditionals to test for recursion of a group).</blockquote></mx-reply><code>&amp;</code> needs to be escaped anyway for v-mode","m.relates_to":{"m.in_reply_to":{"event_id":"$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8"}},"msgtype":"m.text"},"ts":1679585198181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T1F3ikQD3EBNY750SANj377Myuh91EaM3uwdly9QSRo"},
{"content":{"body":"> <@bakkot:matrix.org> the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully\n\nThat's not shown in the slides though, which only mentions `(){}[]|,.?*+-^$=<>\\`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully</blockquote></mx-reply>That's not shown in the slides though, which only mentions <code>(){}[]|,.?*+-^$=&lt;&gt;\\</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI"}},"msgtype":"m.text"},"ts":1679585200398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q_mTBbvoQZXxDzIai_g0raA7SRZzsjt8xPkSuZK0Yvk"},
{"content":{"body":"it does say \"etc\"","msgtype":"m.text"},"ts":1679585206298,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MH9mhU5kAyzeu1o5MpecuA-jH-vAg81Vyzm_k8-fCnU"},
{"content":{"body":"pull request to the agenda","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585238032,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$vAiVA8N9KGiRGRwnn0hx0a50HG1pHCyNxw-K_TrPxoU"},
{"content":{"body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is bt much chance of more overflow. ","format":"org.matrix.custom.html","formatted_body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is bt much chance of more overflow.","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$vAiVA8N9KGiRGRwnn0hx0a50HG1pHCyNxw-K_TrPxoU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585242965,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84"},
{"content":{"body":"* The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow. ","m.new_content":{"body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow. ","format":"org.matrix.custom.html","formatted_body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow.","msgtype":"m.text"},"m.relates_to":{"event_id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585259772,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$MditBbbfm3tiO97dbT83s8mpgZDrEbB8rgj6J4abMJY"},
{"content":{"body":"Yeah, but that's somewhat unclear. If it were to escape `A`, for example, that would be a problem for https://github.com/tc39/proposal-regexp-buffer-boundaries","format":"org.matrix.custom.html","formatted_body":"Yeah, but that's somewhat unclear. If it were to escape <code>A</code>, for example, that would be a problem for https://github.com/tc39/proposal-regexp-buffer-boundaries","msgtype":"m.text"},"ts":1679585262286,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Pb3OhttEn2nih-5K6cHUOYixgaMoXlvFVwW86KzLtFQ"},
{"content":{"body":"there's already o-f for async ex res mgmt.  is there an additional item from Ron?","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585307329,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg"},
{"content":{"body":" * there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","format":"org.matrix.custom.html","formatted_body":" * there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","m.new_content":{"body":"there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","format":"org.matrix.custom.html","formatted_body":"there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","msgtype":"m.text"},"m.relates_to":{"event_id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585322084,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$eOkdJ2ysHuM0FjGsa4V0xSlaKBJMtfrCNUok-Y7yFo4"},
{"content":{"body":"It does also say it's only including punctuators, which would not include `A`","format":"org.matrix.custom.html","formatted_body":"It does also say it's only including punctuators, which would not include <code>A</code>","msgtype":"m.text"},"ts":1679585342023,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$glFBlA6fcXjWpDOlCWwBK8W4eLYZD_WV-cdWAo64_eA"},
{"content":{"body":"oh... there was only a spare 25 minutes in the schedule to begin with","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585353921,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zE49LW8IHkj2HuNvrXMfnioPLU7zfE_oW0NDLASGcZY"},
{"content":{"body":"Plus that list doesn't match the explainer currently, so there doesn't seem to be a definitive source of truth. Maybe that's a stage 2 concern, but if the point of the slides is \"RegExp.escape is safe\", then its important to clarify how safe.","msgtype":"m.text"},"ts":1679585408963,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cFRLGA0KqYtYEtqvKNJ8Bg2OJTFJRc64QH6RbEie0w4"},
{"content":{"body":"Presumably it's sufficient to guarantee that `RegExp.escape()` safe for its own `RegExp`, rather than being safe forever.","format":"org.matrix.custom.html","formatted_body":"Presumably it's sufficient to guarantee that <code>RegExp.escape()</code> safe for its own <code>RegExp</code>, rather than being safe forever.","msgtype":"m.text"},"ts":1679586245170,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$JM9MLQLxYfyQHiEv5F_kWyto8OHX9Fq1-e7D-iat4SU"},
{"content":{"body":"Well, that depends on whether anyone starts depending on it _not_ escaping certain things","format":"org.matrix.custom.html","formatted_body":"Well, that depends on whether anyone starts depending on it <em>not</em> escaping certain things","msgtype":"m.text"},"ts":1679586335944,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MnP1-RLKTC7xEEzbEvERl79jicZDc-LP0P05FC8YV24"},
{"content":{"body":"rbuckton: Updated the slides to list proposed contexts as well, and went through all the ones you listed in your research doc as well","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Updated the slides to list proposed contexts as well, and went through all the ones you listed in your research doc as well","msgtype":"m.text"},"ts":1679586660465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ncrBIs5q-AS2X3XSJ4rfv_U_qRUanMfB06Qfl0mMeio"},
{"content":{"body":"I'm kinda tempted to just say it escapes _every_ ascii punctuator except `_`, since I've listed I think all of them except the two quotes and backtick at this point","format":"org.matrix.custom.html","formatted_body":"I'm kinda tempted to just say it escapes <em>every</em> ascii punctuator except <code>_</code>, since I've listed I think all of them except the two quotes and backtick at this point","msgtype":"m.text"},"ts":1679586696449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU"},
{"content":{"body":"I did also update it to include line terminators for `x`-mode line comments","format":"org.matrix.custom.html","formatted_body":"I did also update it to include line terminators for <code>x</code>-mode line comments","msgtype":"m.text"},"ts":1679586709340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0m8rnULvoE9ahQ5A3chX5wQY2ny1Mq9Q4WPEcq3x-9s"},
{"content":{"body":" * I did also update it to include line terminators so you can't break out of `x`-mode line comments, which is something I'd previously neglected","format":"org.matrix.custom.html","formatted_body":" * I did also update it to include line terminators so you can't break out of <code>x</code>-mode line comments, which is something I'd previously neglected","m.new_content":{"body":"I did also update it to include line terminators so you can't break out of `x`-mode line comments, which is something I'd previously neglected","format":"org.matrix.custom.html","formatted_body":"I did also update it to include line terminators so you can't break out of <code>x</code>-mode line comments, which is something I'd previously neglected","msgtype":"m.text"},"m.relates_to":{"event_id":"$0m8rnULvoE9ahQ5A3chX5wQY2ny1Mq9Q4WPEcq3x-9s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679586725147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HvYmW_82CrFzQiL0LUHXLiKwRSaGitH2klonNxCnO3c"},
{"content":{"body":"That's why I posed the questions earlier. Do we need to ensure `RegExp.escape()` is consistent for all time? If so, do we do that my making a best guess as to what potential syntax characters we might encounter in the future, and will that limit us in terms of what new syntax we can add? Or do we aggressively escape anything that is not alpha-numeric (or equivalent unicode characters)?","format":"org.matrix.custom.html","formatted_body":"That's why I posed the questions earlier. Do we need to ensure <code>RegExp.escape()</code> is consistent for all time? If so, do we do that my making a best guess as to what potential syntax characters we might encounter in the future, and will that limit us in terms of what new syntax we can add? Or do we aggressively escape anything that is not alpha-numeric (or equivalent unicode characters)?","msgtype":"m.text"},"ts":1679586789756,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KU22DUVDbEi_r9DuDSB7BXwRnE9XwRNuwrKkdxg_95c"},
{"content":{"body":"> <@bakkot:matrix.org> I'm kinda tempted to just say it escapes _every_ ascii punctuator except `_`, since I've listed I think all of them except the two quotes and backtick at this point\n\nI think that may be safer, though `_` might even be worth escaping since it has meaning as part of some control verbs in Perl.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I'm kinda tempted to just say it escapes <em>every</em> ascii punctuator except <code>_</code>, since I've listed I think all of them except the two quotes and backtick at this point</blockquote></mx-reply>I think that may be safer, though <code>_</code> might even be worth escaping since it has meaning as part of some control verbs in Perl.","m.relates_to":{"m.in_reply_to":{"event_id":"$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU"}},"msgtype":"m.text"},"ts":1679586858633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RtwbxlIfMq1yJhlC5mMceTQLmdVjlT120yaHYBK5Iu0"},
{"content":{"body":"I think we should commit to not using `_` for anything ever","format":"org.matrix.custom.html","formatted_body":"I think we should commit to not using <code>_</code> for anything ever","msgtype":"m.text"},"ts":1679586879255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ycilAG3faypy-04W-LHmvUMv3kHRWkHYBIbHDx4GBXk"},
{"content":{"body":"v-mode had that discussion already when they decided not to include it in the double-punctuator reservations","msgtype":"m.text"},"ts":1679586897792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$msMtnxSjeQ7AH2SwPtes1DHkY_uTUqr84yUp8-g08Xk"},
{"content":{"body":"Perl has `(*positive_lookahead: ... )`, for example","format":"org.matrix.custom.html","formatted_body":"Perl has <code>(*positive_lookahead: ... )</code>, for example","msgtype":"m.text"},"ts":1679586934337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3vrJ7VjgwzdgTMHi2TT_3rCPp8f4zAvd4iy8va6JCis"},
{"content":{"body":"ah, that seems more like it's being used as an identifier character, and doesn't need to be escaped any more than any other identifier character","msgtype":"m.text"},"ts":1679586978432,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BGAOx6bEvTOIPs3o52YPOHkeTVe7VVUtGrz0SKuTt0Q"},
{"content":{"body":"PCRE also uses `` ` ``, `'`, `\"`, and `%` for callouts.","format":"org.matrix.custom.html","formatted_body":"PCRE also uses <code>`</code>, <code>'</code>, <code>&quot;</code>, and <code>%</code> for callouts.","msgtype":"m.text"},"ts":1679587021762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE"},
{"content":{"body":"I'm not sure we'll ever do callouts, but you can never be certain.","msgtype":"m.text"},"ts":1679587038921,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wSvYShlINKzSTI5cCAOZ6wX711Gv85_jeiLiJ5yES7c"},
{"content":{"body":"ok I will just say every ascii punctuator","msgtype":"m.text"},"ts":1679587072928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$82Pj2BlvNHsIdKNKJBJ49OmGWeXp0-POvBkJCQasxIo"},
{"content":{"body":"except `_`","format":"org.matrix.custom.html","formatted_body":"except <code>_</code>","msgtype":"m.text"},"ts":1679587075696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rNF-dx_VHzaZgT03tIKy4Zqn3dczJmwZkL4urrSVHBc"},
{"content":{"body":"And note that we might be able to make it less aggressive","msgtype":"m.text"},"ts":1679587092655,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OGYras3U-xKbtz2ZYjMJcP5u5IYOKoWybcmiXBfnIBk"},
{"content":{"body":"That's fine with me.","msgtype":"m.text"},"ts":1679587100619,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BBGAwHGvqhDqem58anBZW8t-3GJELNiLJI6clCRYSdc"},
{"content":{"body":"re: future constraints, this does mean that we're committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose","msgtype":"m.text"},"ts":1679587142845,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE"},
{"content":{"body":"> <@rbuckton:matrix.org> PCRE also uses `` ` ``, `'`, `\"`, and `%` for callouts.\n\n`'` is actually used quite a bit across RegExp engines, primarily as an alternative to `<>` for named capture groups.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>PCRE also uses <code>`</code>, <code>'</code>, <code>\"</code>, and <code>%</code> for callouts.</blockquote></mx-reply><code>'</code> is actually used quite a bit across RegExp engines, primarily as an alternative to <code>&lt;&gt;</code> for named capture groups.","m.relates_to":{"m.in_reply_to":{"event_id":"$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE"}},"msgtype":"m.text"},"ts":1679587163921,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8TAIQQaTyIVaeMDb566DCyhmsc5lkrguQHVdbAFw5Q8"},
{"content":{"body":"> <@bakkot:matrix.org> re: future constraints, this does mean that we're committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose\n\nAs far as I can tell, no. The most likely engines that might have that would be Perl, PCRE, and Oniguruma, but I don't see anything like that so far.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: future constraints, this does mean that we&#39;re committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose</blockquote></mx-reply>As far as I can tell, no. The most likely engines that might have that would be Perl, PCRE, and Oniguruma, but I don't see anything like that so far.","m.relates_to":{"m.in_reply_to":{"event_id":"$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE"}},"msgtype":"m.text"},"ts":1679587399925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GR1w6ir1EXyCHK8RbcDRcfI_PMiLMP2WjpwhosrLyxg"},
{"content":{"body":"Sorry, by \"no\" do you mean \"no one uses backslash + punctuator to mean anything other than the punctuator\"?","msgtype":"m.text"},"ts":1679587465214,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE"},
{"content":{"body":"> <@bakkot:matrix.org> Sorry, by \"no\" do you mean \"no one uses backslash + punctuator to mean anything other than the punctuator\"?\n\nCorrect, though I'm still checking.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Sorry, by &quot;no&quot; do you mean &quot;no one uses backslash + punctuator to mean anything other than the punctuator&quot;?</blockquote></mx-reply>Correct, though I'm still checking.","m.relates_to":{"m.in_reply_to":{"event_id":"$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE"}},"msgtype":"m.text"},"ts":1679587483397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rjPdhDJydJ_YK2W5xanUWzs1afy5ALYEV9hDzTUZrgY"},
{"content":{"body":"I think it would be safe to say that we also would never consider `\\`+punctuator to mean anything other than the punctuator.","format":"org.matrix.custom.html","formatted_body":"I think it would be safe to say that we also would never consider <code>\\</code>+punctuator to mean anything other than the punctuator.","msgtype":"m.text"},"ts":1679587511137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gcKjnVeLJHJmjJ3p7-Ek2yveRBImd_coV0ysaaBwUwA"},
{"content":{"body":"There are other ways to introduce syntax that would be more meaningful than say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":"There are other ways to introduce syntax that would be more meaningful than say, whatever <code>\\~</code> might mean.","msgtype":"m.text"},"ts":1679587610627,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pgvnomn4rMuKrlOYC4Vh0ZcUs8DNqmTBr4--IKf3WoY"},
{"content":{"body":"chairs, am i still up first today? if so i'll be about 2-3 mins late","msgtype":"m.text"},"ts":1679590600347,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E"},
{"content":{"body":"> <@shuyuguo:matrix.org> chairs, am i still up first today? if so i'll be about 2-3 mins late\n\nyes -  Shared structs update","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>chairs, am i still up first today? if so i&#39;ll be about 2-3 mins late</blockquote></mx-reply>yes -  Shared structs update","m.relates_to":{"m.in_reply_to":{"event_id":"$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E"}},"msgtype":"m.text"},"ts":1679590649852,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$e79YnqMp2a-dsZE0DuMOMCnllnxkw6Ief7qlDZ6rqaM"},
{"content":{"body":"thanks for confirmation","msgtype":"m.text"},"ts":1679590671218,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s9eVn-c23F8zpq5CqJN3nTuHoF3XwQrbAj98gRQ0kK8"},
{"content":{"body":"(reason being i still don't have home internet and have to wait till 10 to kick people out of the meeting room i booked)","msgtype":"m.text"},"ts":1679590689252,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jWzE535iMSRN2bEZRmhWhZkYOkZApAn1J86mTAYwHz8"},
{"content":{"body":" * There are other ways to introduce syntax that would be more meaningful than, say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":" * There are other ways to introduce syntax that would be more meaningful than, say, whatever <code>\\~</code> might mean.","m.new_content":{"body":"There are other ways to introduce syntax that would be more meaningful than, say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":"There are other ways to introduce syntax that would be more meaningful than, say, whatever <code>\\~</code> might mean.","msgtype":"m.text"},"m.relates_to":{"event_id":"$pgvnomn4rMuKrlOYC4Vh0ZcUs8DNqmTBr4--IKf3WoY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679590696724,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_CkntQKrgQfgpmCEor-PFV8qsgnc6pwa0rhQdq1BA9U"},
{"content":{"body":"should be fine -- room still fairly empty over there","msgtype":"m.text"},"ts":1679590776688,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4VTUHHMsGym34wN3rVJVgwfnjlT7moTRyd3uPOk76GI"},
{"content":{"body":"I love this deck. ","msgtype":"m.text"},"ts":1679591131109,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$wqnSYWb_JheNUF_IosnmASJbo3zCdz0FHjxpqrXzoYk"},
{"content":{"body":"wait, at what stage is shared structs?","msgtype":"m.text"},"ts":1679591186991,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA"},
{"content":{"body":"Is that only me can't see shared screen?","msgtype":"m.text"},"ts":1679591193764,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4"},
{"content":{"body":"I can see it","msgtype":"m.text"},"ts":1679591200392,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RjofGcKQixnviBN9ZiPmWsJaWTeIr6_8t26hPj46MLs"},
{"content":{"body":"maybe you have something else pinned?","m.relates_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4","is_falling_back":true,"m.in_reply_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591258035,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$cCG1rMXOYPErgMWddbhd7n6-4plREnIix_FiZUVuTTo"},
{"content":{"body":"in top left, is there a button to switch to shared content?","m.relates_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4","is_falling_back":true,"m.in_reply_to":{"event_id":"$cCG1rMXOYPErgMWddbhd7n6-4plREnIix_FiZUVuTTo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591270929,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$vLP2WGBTeCEi-WIksj5c0BCLXt9dbUc-VFQ18votBIw"},
{"content":{"body":"exit and rejoin, still can't see shared screen 😭","msgtype":"m.text"},"ts":1679591327615,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs"},
{"content":{"body":"using app or browser?","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591366673,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$H-ophvpK81hzKmDxLdvtejamf5TulqsK7VvttnPvPFg"},
{"content":{"body":"> <@abotella:igalia.com> wait, at what stage is shared structs?\n\n1: https://github.com/tc39/proposal-structs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>wait, at what stage is shared structs?</blockquote></mx-reply>1: https://github.com/tc39/proposal-structs","m.relates_to":{"m.in_reply_to":{"event_id":"$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA"}},"msgtype":"m.text"},"ts":1679591373319,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Q9muQ5JibAe5vwiPyeg4TWazr6QTsiV3cnx9SKMYocY"},
{"content":{"body":"app","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$H-ophvpK81hzKmDxLdvtejamf5TulqsK7VvttnPvPFg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591389064,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$tRwFpofClQFgwgyfsHEitTTEHk2iMwmhyibOTTTBN0g"},
{"content":{"body":"oh, I was Ctrl+Fing for \"shared\" in the proposal lists","msgtype":"m.text"},"ts":1679591407021,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M"},
{"content":{"body":"it works now!","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$tRwFpofClQFgwgyfsHEitTTEHk2iMwmhyibOTTTBN0g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591410036,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Dte6qr_CYqCJ1PuDPfvuAgPXwt50tkU9PDtlMJFKBnk"},
{"content":{"body":" * oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it","m.new_content":{"body":"oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it","msgtype":"m.text"},"m.relates_to":{"event_id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591426470,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$N9zdzmgo_o4cMLDCxuXO229_G4Dn1-OflFOho8_ZEKI"},
{"content":{"body":"well, ideally that'd imply Stage 0 🙈","msgtype":"m.text"},"ts":1679591441847,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LFQzMD80KFBS8tjCOXHJGuHaZpfTB3N0CHzR-zMfil4"},
{"content":{"body":"it's missing from the proposals repo...","msgtype":"m.text"},"ts":1679591455303,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KPFRaPdUpm9NskIEK9LBAwsnYlJICRk12zv6jtOMqIs"},
{"content":{"body":"\"Shared structs\" have always been part of Shu's \"structs\" proposal.","msgtype":"m.text"},"ts":1679591458439,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UlGcOfyEWOFjq3wWctjxn_DlXcaeTZATZP0TH6MphO8"},
{"content":{"body":"ok, i can see the screen now. not sure what happened , may be just network issue.","msgtype":"m.text"},"ts":1679591458703,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$eDY462wwpNSvjQwxrL7pyNlLSUmntvgqtYMmeHv4pR8"},
{"content":{"body":"> <@abotella:igalia.com> oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it\n\nstage 1 proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>oh, I was Ctrl+Fing for &quot;shared&quot; in the proposal lists and couldn&#39;t find it</blockquote></mx-reply>stage 1 proposals are in a separate list","m.relates_to":{"m.in_reply_to":{"event_id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M"}},"msgtype":"m.text"},"ts":1679591504417,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OPPS5O0xODS3HrKAyYhTCqmj9IbrfU6twWccrDCz3d4"},
{"content":{"body":"> <@abotella:igalia.com> oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it\n\n * stage 1 (and zero) proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it</blockquote></mx-reply> * stage 1 (and zero) proposals are in a separate list","m.new_content":{"body":"stage 1 (and zero) proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"stage 1 (and zero) proposals are in a separate list","msgtype":"m.text"},"m.relates_to":{"event_id":"$OPPS5O0xODS3HrKAyYhTCqmj9IbrfU6twWccrDCz3d4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591510050,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JEBdiUBwS2LWhuZHBEwDdso1J-730KKTkjepd1xivRs"},
{"content":{"body":"yeah it;s still missing from the list","msgtype":"m.text"},"ts":1679591512111,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$NhZN1i4TJMojbhy-FgSFWXJziTh_jdEEtTKKUVp7ra4"},
{"content":{"body":"https://github.com/tc39/proposals/blob/main/stage-1-proposals.md","msgtype":"m.text"},"ts":1679591522861,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$MmFGrHZaSl5r7cTjy-J5GlbsdP44SViQSNB3yTGmjA4"},
{"content":{"body":"yeah, I was searching in all lists, but I was searching for \"shared\" and couldn't find it","msgtype":"m.text"},"ts":1679591527727,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ZUjyXfttX6EA3AugNSledDCHzBInvRbH4_Rrzheic0s"},
{"content":{"body":"\"fixed shape objects\" is in the list","msgtype":"m.text"},"ts":1679591532839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dqE9sBosW4__KSUc7SJLkBSLdUl9VKP1KsaaFJpbEbo"},
{"content":{"body":"that was what it was presented as when it got stage 1, i assume","msgtype":"m.text"},"ts":1679591544272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LlUcXkFLcA00pkXYbfyTxcxpbpIb_1CaBPqiaaCVbHA"},
{"content":{"body":"ohhhh","msgtype":"m.text"},"ts":1679591554954,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_O9dExx60tU80ZJytNFtbDCVwc-fJ32bbAOajA6UpEM"},
{"content":{"body":"quick PR incoming","msgtype":"m.text"},"ts":1679591560461,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$uX5lcqG4V_q4bopLaTq5O4a6X1Bzo1_4VUYC5RZi7LI"},
{"content":{"body":"Chris de Almeida: i'm not sure that's appropriate","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: i'm not sure that's appropriate","msgtype":"m.text"},"ts":1679591587362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jcSB6kVHszZCqe1j9hm7C6WWMY3ujcBpaCf2ZYI3nqM"},
{"content":{"body":"Maybe this is just me, but the name \"isolate\" shouldn't necessarily guide the direction of the language /s","msgtype":"m.text"},"ts":1679591588346,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA"},
{"content":{"body":"at stage 1 the proposal name should describe the problem, and \"shared structs\" is a solution","msgtype":"m.text"},"ts":1679591600116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU"},
{"content":{"body":" * at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me","m.new_content":{"body":"at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591645764,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JVuN6nhK8RvFLnA1bJLPk7w-ArMP2sHZMVrNTVsc2Q0"},
{"content":{"body":"> <@abotella:igalia.com> Maybe this is just me, but the name \"isolate\" shouldn't necessarily guide the direction of the language /s\n\nheh I guess this is more generally intelligible if you replace \"isolate\" with \"garbage collected heap\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>Maybe this is just me, but the name &quot;isolate&quot; shouldn&#39;t necessarily guide the direction of the language /s</blockquote></mx-reply>heh I guess this is more generally intelligible if you replace &quot;isolate&quot; with &quot;garbage collected heap&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA"}},"msgtype":"m.text"},"ts":1679591699838,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4aRKmVwU2tyHQcc5OlFtfAVyIhuvpJsIxMVqi0iHx14"},
{"content":{"body":"> <@ljharb:matrix.org> at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me\n\nI think we can afford champions some flexibility here, but Shu is clearly referring to this proposal as \"shared structs\" so it's fine to go with that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>at stage 1 the proposal name should describe the problem, and &quot;shared structs&quot; seems like a solution to me</blockquote></mx-reply>I think we can afford champions some flexibility here, but Shu is clearly referring to this proposal as &quot;shared structs&quot; so it's fine to go with that.","m.relates_to":{"m.in_reply_to":{"event_id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU"}},"msgtype":"m.text"},"ts":1679591728828,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X6XFxyLXOTSnMjSF0o9X2P5UZugorJVwmYVhEd06i3w"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1679591748967,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CN2kol4bWK632VL6E_oON6oaeN_Nj0n1FcQ96gbMqkM"},
{"content":{"body":"I think it's reasonable to expect better parity between the title in the tc39/proposals repo and the title on the proposal repo itself","msgtype":"m.text"},"ts":1679591835699,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4"},
{"content":{"body":"Note: I believe Shu is using the term \"closed\" in a mathematical sense, about how these graphs don't point to each other.","msgtype":"m.text"},"ts":1679591840678,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8Np9QOhDsdAmh_BP5karlY8VxyWhsxHNGvASWMfGeMk"},
{"content":{"body":"and \"mutators\" refers to the executing code (which mutates the heap--even if it's purely functional)","msgtype":"m.text"},"ts":1679591938493,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9THpwUlWQLp_vq-U9hh6eE5ycX51B0_b6QkDnIxyB1s"},
{"content":{"body":"i usually default to whatever's on the agenda at advancement time in the proposals table","m.relates_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4","is_falling_back":true,"m.in_reply_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592429551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$im5Sp1cZgNDTclAMGPF8FnyvB2BExIuo1vIVxOOSfXU"},
{"content":{"body":"but i agree that it would be nice if champions kept that in sync :-)","m.relates_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4","is_falling_back":true,"m.in_reply_to":{"event_id":"$im5Sp1cZgNDTclAMGPF8FnyvB2BExIuo1vIVxOOSfXU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592438579,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gGIfmPm1NqStL4J4UcEBmZKcvkkZG4ti2hGT1rfoQVo"},
{"content":{"body":"shu: The origin isolation is not really an issue for us in Deno, because our security model ensures that only a single tenant can execute code within a single process. Essentially the effect of cross origin isolation is the default for us. There are some server side runtimes, notably Cloudflare Workers, that run multiple tenants within a single process. They disallow all high precision timers and shared memory entirely.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: The origin isolation is not really an issue for us in Deno, because our security model ensures that only a single tenant can execute code within a single process. Essentially the effect of cross origin isolation is the default for us. There are some server side runtimes, notably Cloudflare Workers, that run multiple tenants within a single process. They disallow all high precision timers and shared memory entirely.","msgtype":"m.text"},"ts":1679593681551,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$WAlykhbaki3OWx5FIjcwv2fBC7rd5UlQ0uYFZ2pLJy4"},
{"content":{"body":"can't you treat a reference to a SAB from inside a shared struct as if it was a per-isolate SAB object","msgtype":"m.text"},"ts":1679593947362,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hrVEuTDoJs5U8Svfr_Zp3EPzbMZpWOBydymfBeOpmLc"},
{"content":{"body":"separate from any other SAB object pointing to the same backing store in the same isolate","msgtype":"m.text"},"ts":1679593963055,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$C5-rkqc5KOnFCvVFzFCLbL9SIa6ARSmsSPmxrys2fBk"},
{"content":{"body":" * different from any other SAB object pointing to the same backing store in the same isolate","m.new_content":{"body":"different from any other SAB object pointing to the same backing store in the same isolate","msgtype":"m.text"},"m.relates_to":{"event_id":"$C5-rkqc5KOnFCvVFzFCLbL9SIa6ARSmsSPmxrys2fBk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594022012,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$F6zXQVdDru__WJxxh2JojxSLLHVNU1rmKYPhK87jKaE"},
{"content":{"body":"Technically probably possible - the identity continuity seems pretty hard (but probably possible). I think the biggest problem is wether this _should_ work, because magic object cloning is not something we have right now. Also what if you have a custom class that extends SAB?","format":"org.matrix.custom.html","formatted_body":"Technically probably possible - the identity continuity seems pretty hard (but probably possible). I think the biggest problem is wether this <em>should</em> work, because magic object cloning is not something we have right now. Also what if you have a custom class that extends SAB?","msgtype":"m.text"},"ts":1679594195336,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$pEquZiMtc7Wll8U3bmVgvXzsfWTZVo5w_ApB919C4uk"},
{"content":{"body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with <code>structuredClone(sab)</code>","msgtype":"m.text"},"ts":1679594256581,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$aMZS-aJ4-PgOfuqdzAc8hRQRyfmyaH6HSfq3aqtP0C4"},
{"content":{"body":"But I guess it would be needed for some use cases","msgtype":"m.text"},"ts":1679594263606,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nDCkws5sRrpbaa1lMsSf8QHrO6ywS6hdegd-J5whWBY"},
{"content":{"body":" * Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":" * Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's <code>structuredClone(sab)</code>","m.new_content":{"body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's <code>structuredClone(sab)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$aMZS-aJ4-PgOfuqdzAc8hRQRyfmyaH6HSfq3aqtP0C4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594279008,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$GClRhBiWq0va8y6siULSLaYtpbO_4yya-OpDeZXwif0"},
{"content":{"body":"Yes, but there you have an explicit transfer","msgtype":"m.text"},"ts":1679594303731,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$7gmlv_OZZTnxnkyRJEes04xPq5VG0PJokjmJfEG1ZoQ"},
{"content":{"body":"Oh, right, this would be an assignment transforming into a clone behind the scenes","msgtype":"m.text"},"ts":1679594322106,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6onya_RzA9jV8fy2QRKe70AtnHmEO3rzeN1ROvxw93Y"},
{"content":{"body":"With shared structs, assignment is transfer/publish, which means there is no explicit action a user needs ot to take","msgtype":"m.text"},"ts":1679594325082,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$18MO5l-jAOA6truWCxXez6UeO3HS_-6BmeMqjsGOh3s"},
{"content":{"body":" * With shared structs, assignment is transfer/publish, which means there is no explicit call that needs to be made to transfer","m.new_content":{"body":"With shared structs, assignment is transfer/publish, which means there is no explicit call that needs to be made to transfer","msgtype":"m.text"},"m.relates_to":{"event_id":"$18MO5l-jAOA6truWCxXez6UeO3HS_-6BmeMqjsGOh3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594348377,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$bZJKOHzexsWLvM324zVyjmtDa0c-j4-ssmJydiOLsBw"},
{"content":{"body":"sounds confusing to users","msgtype":"m.text"},"ts":1679594357269,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$bpJaDaiRPETuCACU81HzedkXNuK8HW1FKysREiNfNnk"},
{"content":{"body":"Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcasrt","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcasrt","msgtype":"m.text"},"ts":1679595155140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OuHA5IIVxuggBMPm2rIkAj0KL6agcxi5-fIKUA2rpe8"},
{"content":{"body":" * Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","m.new_content":{"body":"Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","msgtype":"m.text"},"m.relates_to":{"event_id":"$OuHA5IIVxuggBMPm2rIkAj0KL6agcxi5-fIKUA2rpe8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679595159199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DIJYjNfPw-sS-8dAaXPoY9R1NG43pD4ESc6cssBvfO8"},
{"content":{"body":"you'd also want `struct.sab === struct.sab`, and that would require an extra per-isolate map","format":"org.matrix.custom.html","formatted_body":"you'd also want <code>struct.sab === struct.sab</code>, and that would require an extra per-isolate map","msgtype":"m.text"},"ts":1679595250508,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wY6w5BV9mmbpBqAQKAp_4dp03xKu8O2QnnCRTuizQLM"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1679595338997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3q0T-yNrA4W5s4uSdtqrWZRItoveF142d0UIzBcY8sc"},
{"content":{"body":"You could make the assigment assign the SAB backing store into the shared struct, and then make the property access on the SAB create the JS object on demand - but that sounds slow and ugly and likely difficult to integrate","msgtype":"m.text"},"ts":1679595382825,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$7Ot7FidihKWSR21fo1GyXAtGA8-Qv2glULWrJix98Pg"},
{"content":{"body":"But yeah, to fix identity discontinuity you'd need a backing store -> js object map per isolate","msgtype":"m.text"},"ts":1679595416177,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$135DqfDeEsawTN_Q3yK1rFlFMj0-OhZ571WBK9aIlco"},
{"content":{"body":"i think the DX of SAB objects themselves just don't matter","msgtype":"m.text"},"ts":1679595535707,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$97VrECk42a9KXtB5PmBJq1W8H07fgfwOX6Uj8icD6h8"},
{"content":{"body":"since you can only use them via TA objects","msgtype":"m.text"},"ts":1679595543651,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xq2ky6kcBoBL_Y211bCkurYoWp1mB2lkPAacyhdmM9o"},
{"content":{"body":"so to introduce a new kind of SAB object that can be put into shared structs seems the simplest solution to me","msgtype":"m.text"},"ts":1679595556334,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Pzbk9uMY7iuvTsCoVcO0437digYUSM7R87HbuknWA8M"},
{"content":{"body":"> <@lucacasonato:matrix.org> You could make the assigment assign the SAB backing store into the shared struct, and then make the property access on the SAB create the JS object on demand - but that sounds slow and ugly and likely difficult to integrate\n\nthe inability of SAB to point to JS values (with cycle collection) is a fundamental limitation. This is why I like how shared structs do *not* include the ability to be backed by SABs--it would be a completely different thing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7Ot7FidihKWSR21fo1GyXAtGA8-Qv2glULWrJix98Pg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>You could make the assigment assign the SAB backing store into the shared struct, and then make the property access on the SAB create the JS object on demand - but that sounds slow and ugly and likely difficult to integrate</blockquote></mx-reply>the inability of SAB to point to JS values (with cycle collection) is a fundamental limitation. This is why I like how shared structs do <em>not</em> include the ability to be backed by SABs--it would be a completely different thing.","m.relates_to":{"m.in_reply_to":{"event_id":"$7Ot7FidihKWSR21fo1GyXAtGA8-Qv2glULWrJix98Pg"}},"msgtype":"m.text"},"ts":1679595616084,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kwf3rRpup42lm_Y8J5VKXELG3T-upB-zk5EGhhJioeY"},
{"content":{"body":"> <@littledan:matrix.org> the inability of SAB to point to JS values (with cycle collection) is a fundamental limitation. This is why I like how shared structs do *not* include the ability to be backed by SABs--it would be a completely different thing.\n\nI don't understand. My comment was about engine internal code, not user code.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kwf3rRpup42lm_Y8J5VKXELG3T-upB-zk5EGhhJioeY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the inability of SAB to point to JS values (with cycle collection) is a fundamental limitation. This is why I like how shared structs do <em>not</em> include the ability to be backed by SABs--it would be a completely different thing.</blockquote></mx-reply>I don't understand. My comment was about engine internal code, not user code.","m.relates_to":{"m.in_reply_to":{"event_id":"$kwf3rRpup42lm_Y8J5VKXELG3T-upB-zk5EGhhJioeY"}},"msgtype":"m.text"},"ts":1679595728828,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$XX_hzENIDtGbF-0qflWmECxPjS9WH5FqSqC-DdunA1M"},
{"content":{"body":"oh sorry I was going on a random tangent because I misunderstood","msgtype":"m.text"},"ts":1679595747323,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v_401oGB5lrXuZu3O1nfnwDYL8E2XvIJnfViEp0xvlA"},
{"content":{"body":"mark: re `yield`. I'm not sure what the champion's position is on this, but I think my preference is that context _isn't_ preserved. If it isn't preserved, there's an opportunity for a userland runtime to set context when calling `.next()`, which could be useful for something like a dataflow library. ","format":"org.matrix.custom.html","formatted_body":"mark: re <code>yield</code>. I'm not sure what the champion's position is on this, but I think my preference is that context <em>isn't</em> preserved. If it isn't preserved, there's an opportunity for a userland runtime to set context when calling <code>.next()</code>, which could be useful for something like a dataflow library.","msgtype":"m.text"},"ts":1679595890597,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bJFxjv1P2Jo4fcQpWMrfTt0fM-EIk28gH2AOCp-EZtw"},
{"content":{"body":"(I have the opposite preference - `yield` should not be meaningfully different than `await` here)","format":"org.matrix.custom.html","formatted_body":"(I have the opposite preference - <code>yield</code> should not be meaningfully different than <code>await</code> here)","msgtype":"m.text"},"ts":1679595942643,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I3l9sLiuabC0Lc1kS0KQwbxRvrMjG0fSQciV9UMHM3o"},
{"content":{"body":"`yield` is meaningly different from `await` though.","format":"org.matrix.custom.html","formatted_body":"<code>yield</code> is meaningly different from <code>await</code> though.","msgtype":"m.text"},"ts":1679595956140,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QIb0G2D6k5_sCVsdNjoZ_Ic8CRAPfFO2ZgjyFAfkSpk"},
{"content":{"body":"Not for the purposes of this API","msgtype":"m.text"},"ts":1679595962772,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R87Sh18UF8IFjGJkRstCzKWk69i0RC_XjhcWa-zLDAY"},
{"content":{"body":"Both sides seems reasonable 😂","msgtype":"m.text"},"ts":1679595984451,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$PSCSza9-3q9-Y3IN6XHboBM3wV064saBE-mf3tEOz_Q"},
{"content":{"body":"In both cases the syntax is creating a continuation callback to be called at a future point, and that continuation should capture the current state","msgtype":"m.text"},"ts":1679595988429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5opFV8uUTBVF46J8NrMcwxquREhu070nxly4QfHltps"},
{"content":{"body":"it would probably be helpful to look into the experience in Node.js, where this feature has long existed *without* such support in yield. Has this led to bugs? We should be able to find out.","format":"org.matrix.custom.html","formatted_body":"it would probably be helpful to look into the experience in Node.js, where this feature has long existed <em>without</em> such support in yield. Has this led to bugs? We should be able to find out.","msgtype":"m.text"},"ts":1679596014335,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vuCwgsut1PmjxeTDvmzIGXyRY2Zk7_x3582alIIh0as"},
{"content":{"body":"> <@littledan:matrix.org> it would probably be helpful to look into the experience in Node.js, where this feature has long existed *without* such support in yield. Has this led to bugs? We should be able to find out.\n\nNo one uses yield so it doesn't come up","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vuCwgsut1PmjxeTDvmzIGXyRY2Zk7_x3582alIIh0as?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>it would probably be helpful to look into the experience in Node.js, where this feature has long existed <em>without</em> such support in yield. Has this led to bugs? We should be able to find out.</blockquote></mx-reply>No one uses yield so it doesn't come up","m.relates_to":{"m.in_reply_to":{"event_id":"$vuCwgsut1PmjxeTDvmzIGXyRY2Zk7_x3582alIIh0as"}},"msgtype":"m.text"},"ts":1679596029638,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8f2g7Rn7UsUAiuAeCX-DhWoIinj_cIQW28K3LZyaVNo"},
{"content":{"body":"> <@bakkot:matrix.org> No one uses yield so it doesn't come up\n\nshouldn't this show up in generators all the time?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8f2g7Rn7UsUAiuAeCX-DhWoIinj_cIQW28K3LZyaVNo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>No one uses yield so it doesn't come up</blockquote></mx-reply>shouldn't this show up in generators all the time?","m.relates_to":{"m.in_reply_to":{"event_id":"$8f2g7Rn7UsUAiuAeCX-DhWoIinj_cIQW28K3LZyaVNo"}},"msgtype":"m.text"},"ts":1679596044834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EFYNY9MVH2TYXARZnCVzyLo7-vfcL2blPx5hbaRkE34"},
{"content":{"body":"no one uses generators either","msgtype":"m.text"},"ts":1679596077310,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OOgosMl9VfCnK1hr59ZWC8cy7_CHsO2roQjOT94gUts"},
{"content":{"body":"> <@littledan:matrix.org> shouldn't this show up in generators all the time?\n\nI'd expect a lot of generators run to completion synchronously, so it wouldn't be observable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EFYNY9MVH2TYXARZnCVzyLo7-vfcL2blPx5hbaRkE34?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>shouldn't this show up in generators all the time?</blockquote></mx-reply>I'd expect a lot of generators run to completion synchronously, so it wouldn't be observable.","m.relates_to":{"m.in_reply_to":{"event_id":"$EFYNY9MVH2TYXARZnCVzyLo7-vfcL2blPx5hbaRkE34"}},"msgtype":"m.text"},"ts":1679596080154,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9F8xVjtWltLKNeF3MFuJH8AJHddSWbxkJkHah_5XvJI"},
{"content":{"body":"> <@bakkot:matrix.org> no one uses generators either\n\nno one is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OOgosMl9VfCnK1hr59ZWC8cy7_CHsO2roQjOT94gUts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>no one uses generators either</blockquote></mx-reply>no one is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","m.relates_to":{"m.in_reply_to":{"event_id":"$OOgosMl9VfCnK1hr59ZWC8cy7_CHsO2roQjOT94gUts"}},"msgtype":"m.text"},"ts":1679596121942,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fn1xHcu9CgCCfbZGplvJfProEtefdcmLK9DqsN8XGMo"},
{"content":{"body":"that's an exaggeration of course, but yeah like Ron says most uses of generators IME are simple enough that it doesn't end up being relevant. to see this in real life you have to do the `next` call on a subsequent turn","format":"org.matrix.custom.html","formatted_body":"that's an exaggeration of course, but yeah like Ron says most uses of generators IME are simple enough that it doesn't end up being relevant. to see this in real life you have to do the <code>next</code> call on a subsequent turn","msgtype":"m.text"},"ts":1679596133286,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cv1gtrjYCWeOUc1H2tYSG4oysr0TYNeV3xZykzWoc3E"},
{"content":{"body":"> <@bakkot:matrix.org> no one uses generators either\n\n * \"no one\" is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OOgosMl9VfCnK1hr59ZWC8cy7_CHsO2roQjOT94gUts?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>no one uses generators either</blockquote></mx-reply> * &quot;no one&quot; is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","m.new_content":{"body":"\"no one\" is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","format":"org.matrix.custom.html","formatted_body":"&quot;no one&quot; is far too strong. TypeScript uses them internally, and there are userland runtimes that rely on them.","msgtype":"m.text"},"m.relates_to":{"event_id":"$Fn1xHcu9CgCCfbZGplvJfProEtefdcmLK9DqsN8XGMo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679596135671,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WSVPyfVwU0ugpsoGRbsMy2nD7sIOPhF03zMmdK36GmU"},
{"content":{"body":"For generators that are resumed asynchronously, wouldn't the context be preserved by the async function used to resume the generator?","msgtype":"m.text"},"ts":1679596139157,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sKoPPCWBkWSN3Fb-rkJVo1P4tnrmLmI9wqNaj9Dd3UY"},
{"content":{"body":" * For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator?","m.new_content":{"body":"For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator?","msgtype":"m.text"},"m.relates_to":{"event_id":"$sKoPPCWBkWSN3Fb-rkJVo1P4tnrmLmI9wqNaj9Dd3UY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679596163751,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dzxCNN5FZlUQJWOEnrIbfEmcokq9isEB-OBuWmFX3C0"},
{"content":{"body":" * For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator (a callback, a `promise.then`, etc)?","format":"org.matrix.custom.html","formatted_body":" * For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator (a callback, a <code>promise.then</code>, etc)?","m.new_content":{"body":"For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator (a callback, a `promise.then`, etc)?","format":"org.matrix.custom.html","formatted_body":"For generators that are resumed asynchronously, wouldn't the context be preserved by the async helper used to resume the generator (a callback, a <code>promise.then</code>, etc)?","msgtype":"m.text"},"m.relates_to":{"event_id":"$sKoPPCWBkWSN3Fb-rkJVo1P4tnrmLmI9wqNaj9Dd3UY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679596188924,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_jpA5Xmyeh5vG3ZOFLiK2EiFLbgEnrMUmdRLZnpfOx8"},
{"content":{"body":"dumb question: there is no chance that \"context\" will be confused with the decorators context? Asking because I just heard context so many times and got reminded that it can be kind of meaningless because it can mean anything. Totally not a blocking concern but wondering if anyone else had the same thought","msgtype":"m.text"},"ts":1679596206732,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$BYmFSTmKO0P_bL-LoV23UC-sCEXzFsByGso-Rw_QlPs"},
{"content":{"body":"If `yield` _did_ preserve context, I'd argue we need a mechanism to turn this off on an as-need basis otherwise we'd block a number of valid use cases.","format":"org.matrix.custom.html","formatted_body":"If <code>yield</code> <em>did</em> preserve context, I'd argue we need a mechanism to turn this off on an as-need basis otherwise we'd block a number of valid use cases.","msgtype":"m.text"},"ts":1679596212585,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gNmitaNFJOa0lY9Q1K3Ng4YEoKrc8JGl43r0y7xy0Hw"},
{"content":{"body":"are beginner devs using node's async stuff now?","msgtype":"m.text"},"ts":1679596235137,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XN2MXxStOfRL875v7S2EQSvoHsA-hXc7sMJEibyMXfE"},
{"content":{"body":"I would be OK with a `yield.nocontext` or something I guess","format":"org.matrix.custom.html","formatted_body":"I would be OK with a <code>yield.nocontext</code> or something I guess","msgtype":"m.text"},"ts":1679596236471,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r81OkJSEt9aHKhi43sjZIXbXNt-Xsea1JYwW3EOQ7LU"},
{"content":{"body":"> <@yulia:mozilla.org> dumb question: there is no chance that \"context\" will be confused with the decorators context? Asking because I just heard context so many times and got reminded that it can be kind of meaningless because it can mean anything. Totally not a blocking concern but wondering if anyone else had the same thought\n\nsemi-serious: time to resurrect \"Conveyance\"!!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BYmFSTmKO0P_bL-LoV23UC-sCEXzFsByGso-Rw_QlPs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>dumb question: there is no chance that &quot;context&quot; will be confused with the decorators context? Asking because I just heard context so many times and got reminded that it can be kind of meaningless because it can mean anything. Totally not a blocking concern but wondering if anyone else had the same thought</blockquote></mx-reply>semi-serious: time to resurrect &quot;Conveyance&quot;!!","m.relates_to":{"m.in_reply_to":{"event_id":"$BYmFSTmKO0P_bL-LoV23UC-sCEXzFsByGso-Rw_QlPs"}},"msgtype":"m.text"},"ts":1679596252901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zfx66t12VpTCILXnt5uXwmo-XgpKWWiLYLJ1lrpTxz4"},
{"content":{"body":"> <@yulia:mozilla.org> dumb question: there is no chance that \"context\" will be confused with the decorators context? Asking because I just heard context so many times and got reminded that it can be kind of meaningless because it can mean anything. Totally not a blocking concern but wondering if anyone else had the same thought\n\nYeah it'd be great to have a name brainstorm here (in an issue, not during plenary). https://github.com/tc39/proposal-async-context/issues","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$BYmFSTmKO0P_bL-LoV23UC-sCEXzFsByGso-Rw_QlPs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">@yulia:mozilla.org</a><br>dumb question: there is no chance that &quot;context&quot; will be confused with the decorators context? Asking because I just heard context so many times and got reminded that it can be kind of meaningless because it can mean anything. Totally not a blocking concern but wondering if anyone else had the same thought</blockquote></mx-reply>Yeah it'd be great to have a name brainstorm here (in an issue, not during plenary). https://github.com/tc39/proposal-async-context/issues","m.relates_to":{"m.in_reply_to":{"event_id":"$BYmFSTmKO0P_bL-LoV23UC-sCEXzFsByGso-Rw_QlPs"}},"msgtype":"m.text"},"ts":1679596292349,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rBW-sotD9y4mdjW7-ipscmRKrBT2XJ3IgCxgwAUd2Y4"},
{"content":{"body":"> <@bakkot:matrix.org> I would be OK with a `yield.nocontext` or something I guess\n\nThat's the problem. In the cases I'm concerned with, the generator is provided by the user to a third party library. You want the library to handle the complexities involved with async context flow control, not the author of the genrator. You want them to not be concerned about choosing which `yield` variant to use.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$r81OkJSEt9aHKhi43sjZIXbXNt-Xsea1JYwW3EOQ7LU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I would be OK with a <code>yield.nocontext</code> or something I guess</blockquote></mx-reply>That's the problem. In the cases I'm concerned with, the generator is provided by the user to a third party library. You want the library to handle the complexities involved with async context flow control, not the author of the genrator. You want them to not be concerned about choosing which <code>yield</code> variant to use.","m.relates_to":{"m.in_reply_to":{"event_id":"$r81OkJSEt9aHKhi43sjZIXbXNt-Xsea1JYwW3EOQ7LU"}},"msgtype":"m.text"},"ts":1679596305088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7lRUEUeXQIDEFJQ4lnOCkoMKp_oolxRCDQRnZhdQMGE"},
{"content":{"body":"i don't have a concrete alternative and context isn't horrible. I don't know if the collision would really take place, just hadn't thought about it","msgtype":"m.text"},"ts":1679596334924,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$WVxbfnPTbaUPeFtq9auM_u63RYUvMGWVgx_NYE7TDkI"},
{"content":{"body":"A number of languages with an `AsyncContext`-like mechanism also have some mechanism of explicitly affecting async flow control.","format":"org.matrix.custom.html","formatted_body":"A number of languages with an <code>AsyncContext</code>-like mechanism also have some mechanism of explicitly affecting async flow control.","msgtype":"m.text"},"ts":1679596346094,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZAWS2Jx0z9To0WA9KwZIhajgNBGiqxPBC2-V7dXlWY"},
{"content":{"body":"i'll make an issue","msgtype":"m.text"},"ts":1679596346698,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$yf2QT2uf_atdq-yNWVq96SPIPY7mzQbJli323_BPGgo"},
{"content":{"body":"The thing is, an AsyncContext instance is more like a single *variable*","format":"org.matrix.custom.html","formatted_body":"The thing is, an AsyncContext instance is more like a single <em>variable</em>","msgtype":"m.text"},"ts":1679596351247,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K-wU5ADVXf2oBJ3gZZgFSqGoL-WvWgPWwg4KQMvBaLA"},
{"content":{"body":"> <@bakkot:matrix.org> I would be OK with a `yield.nocontext` or something I guess\n\n`yield.foo` will have diff semantic out of generator, don't like such syntax :P","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$r81OkJSEt9aHKhi43sjZIXbXNt-Xsea1JYwW3EOQ7LU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I would be OK with a <code>yield.nocontext</code> or something I guess</blockquote></mx-reply><code>yield.foo</code> will have diff semantic out of generator, don't like such syntax :P","m.relates_to":{"m.in_reply_to":{"event_id":"$r81OkJSEt9aHKhi43sjZIXbXNt-Xsea1JYwW3EOQ7LU"}},"msgtype":"m.text"},"ts":1679596358219,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Bt4HaA3ar0gauKb7SZkPtLRonu6902pbfwIWEKPs78s"},
{"content":{"body":"> <@rbuckton:matrix.org> A number of languages with an `AsyncContext`-like mechanism also have some mechanism of explicitly affecting async flow control.\n\nSee https://learn.microsoft.com/en-us/dotnet/api/system.threading.asyncflowcontrol?view=net-8.0, for example.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$IZAWS2Jx0z9To0WA9KwZIhajgNBGiqxPBC2-V7dXlWY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>A number of languages with an <code>AsyncContext</code>-like mechanism also have some mechanism of explicitly affecting async flow control.</blockquote></mx-reply>See https://learn.microsoft.com/en-us/dotnet/api/system.threading.asyncflowcontrol?view=net-8.0, for example.","m.relates_to":{"m.in_reply_to":{"event_id":"$IZAWS2Jx0z9To0WA9KwZIhajgNBGiqxPBC2-V7dXlWY"}},"msgtype":"m.text"},"ts":1679596390089,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DNmrCBuCC5YFF5JlP__Eo7OLDs5cCkRKfaumeVCokrU"},
{"content":{"body":"hm. I'll have to think more about `yield`.","format":"org.matrix.custom.html","formatted_body":"hm. I'll have to think more about <code>yield</code>.","msgtype":"m.text"},"ts":1679596458610,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rGV7J8KTkhLxKR1tk_VHqERmAApwL0Gmo-WS04J1MmM"},
{"content":{"body":"I could be convinced it should not preserve, probably","msgtype":"m.text"},"ts":1679596465754,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eeG8PqkhzdM0mOhiT3h2g4XZfUgSbMexq5s4YQ2WiBc"},
{"content":{"body":" * I could be convinced it should not wrap, probably","m.new_content":{"body":"I could be convinced it should not wrap, probably","msgtype":"m.text"},"m.relates_to":{"event_id":"$eeG8PqkhzdM0mOhiT3h2g4XZfUgSbMexq5s4YQ2WiBc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679596470676,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EazOLZ9jMhezXRgTWKAerLMRUeDDp_11BGYPpLMjRpA"},
{"content":{"body":"> <@littledan:matrix.org> The thing is, an AsyncContext instance is more like a single *variable*\n\n.NET calls this an `AsyncLocal<T>`, though that is backed by something called a \"Call Context\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$K-wU5ADVXf2oBJ3gZZgFSqGoL-WvWgPWwg4KQMvBaLA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The thing is, an AsyncContext instance is more like a single <em>variable</em></blockquote></mx-reply>.NET calls this an <code>AsyncLocal&lt;T&gt;</code>, though that is backed by something called a &quot;Call Context&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$K-wU5ADVXf2oBJ3gZZgFSqGoL-WvWgPWwg4KQMvBaLA"}},"msgtype":"m.text"},"ts":1679596472235,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-ap_BDQKrs4n44r4L1hku3cAYlbL4LZUUsRWLW0Od-I"},
{"content":{"body":"tbh \"context\" is a better name for this proposal than for the decorator property","msgtype":"m.text"},"ts":1679596672715,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cZyhuIY72EuK_VYOvjoyiRLr8f5KQ7NFDkQldZQC3a0"},
{"content":{"body":" * tbh \"context\" is a better name for this proposal than for the decorator property, if we had to pick one","m.new_content":{"body":"tbh \"context\" is a better name for this proposal than for the decorator property, if we had to pick one","msgtype":"m.text"},"m.relates_to":{"event_id":"$cZyhuIY72EuK_VYOvjoyiRLr8f5KQ7NFDkQldZQC3a0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679596682099,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hZypKS_UDj2kEjbXLMkkx5SQud0U-7NN3gPI36wUheg"},
{"content":{"body":"thats fair, up until today i was taking AsyncContext as a name for granted","msgtype":"m.text"},"ts":1679596756069,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$5sjouM8x9HL-MTey5lg-md75P20OCJlrzlTpg__XRtE"},
{"content":{"body":"let's call it \"util\"","msgtype":"m.text"},"ts":1679596774747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RIY2p8XTPgooM3vNtI8GaOkwHeR5FgV0eQsnRIxsZBM"},
{"content":{"body":"oh no, what have i done","msgtype":"m.text"},"ts":1679596781713,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$f81k2PpmA6djxAnDcmJmNEKH3eabQym7CGoOiShJy2I"},
{"content":{"body":"AsyncUtil","msgtype":"m.text"},"ts":1679596782042,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oVj1Sl0XtxPCR5cx4MkKUEo2nael1tqNvGSiuhLZUfw"},
{"content":{"body":"the meaning of \"context\" is highly context-dependent, unfortunately","msgtype":"m.text"},"ts":1679596811880,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$PhRCDWUTr55SmxXx19IT8U6H12B3keHJLqx4uA0i9hc"},
{"content":{"body":"`context` is a general purpose term, I'd hate for us to relegate it to a single purpose.","format":"org.matrix.custom.html","formatted_body":"<code>context</code> is a general purpose term, I'd hate for us to relegate it to a single purpose.","msgtype":"m.text"},"ts":1679596814328,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6_tyonnP7RcgMLB_ez1UUsAGmW3SAw48h6gE12d9VLg"},
{"content":{"body":"apaprocki: i believe you but BBG is a closed-shop ecosystem, so i wouldn't weigh it too much as predictive of ecosystem integration pains for JS at large","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@apaprocki:matrix.org\">apaprocki</a>: i believe you but BBG is a closed-shop ecosystem, so i wouldn't weigh it too much as predictive of ecosystem integration pains for JS at large","msgtype":"m.text"},"ts":1679596843492,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ilp7RnhtWSv4nEnUq_wu_eflj0uRhelw9o5WI8S3KY4"},
{"content":{"body":"understood, merely relaying experience that for the end users, who are really just writing JS, it wasn't confusing for them to understand why it wasn't working and how to fix it","msgtype":"m.text"},"ts":1679596891031,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$aRkuU0LkkpcoEmZOOekPuWBkOLwiUnKYeUdfNTeOhD8"},
{"content":{"body":"eemeli: pretty sure it's not polyfillable","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@eemeli:mozilla.org\">eemeli</a>: pretty sure it's not polyfillable","msgtype":"m.text"},"ts":1679597444388,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$y5nRjX1LsxiFJeKdiu9HKHe5x_8AfOzsct-X1mxMcCg"},
{"content":{"body":"> <@rbuckton:matrix.org> That's the problem. In the cases I'm concerned with, the generator is provided by the user to a third party library. You want the library to handle the complexities involved with async context flow control, not the author of the genrator. You want them to not be concerned about choosing which `yield` variant to use.\n\nso, \"the generator is provided by the user to a third party library\" seems like exactly the case where we want `yield` to preserve state. taking the example from the readme:\n\n```js\n  libraryTakingAnIterator(context.run('id', function* () {\n    log('starting');\n\n    yield 0;\n\n    // if the library `await`s before resuming, we've lost our id\n    log('done');\n  }));\n```\nMaybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7lRUEUeXQIDEFJQ4lnOCkoMKp_oolxRCDQRnZhdQMGE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That's the problem. In the cases I'm concerned with, the generator is provided by the user to a third party library. You want the library to handle the complexities involved with async context flow control, not the author of the genrator. You want them to not be concerned about choosing which <code>yield</code> variant to use.</blockquote></mx-reply><p>so, &quot;the generator is provided by the user to a third party library&quot; seems like exactly the case where we want <code>yield</code> to preserve state. taking the example from the readme:</p>\n<pre><code class=\"language-js\">  libraryTakingAnIterator(context.run('id', function* () {\n    log('starting');\n\n    yield 0;\n\n    // if the library `await`s before resuming, we've lost our id\n    log('done');\n  }));\n</code></pre>\n<p>Maybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$7lRUEUeXQIDEFJQ4lnOCkoMKp_oolxRCDQRnZhdQMGE"}},"msgtype":"m.text"},"ts":1679597543216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1KXsFvM4DAADfDQVuIhBxFP-bSqpQM7TNxUwXA_M2KE"},
{"content":{"body":"you could wrap `Generator.prototype.next`","format":"org.matrix.custom.html","formatted_body":"you could wrap <code>Generator.prototype.next</code>","msgtype":"m.text"},"ts":1679597568003,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6U_J-BLO1vA3zCdgcbwp9VeIZs3_9Hvg_q46zKfFLI8"},
{"content":{"body":" * strawdog idea: you could wrap `Generator.prototype.next`","format":"org.matrix.custom.html","formatted_body":" * strawdog idea: you could wrap <code>Generator.prototype.next</code>","m.new_content":{"body":"strawdog idea: you could wrap `Generator.prototype.next`","format":"org.matrix.custom.html","formatted_body":"strawdog idea: you could wrap <code>Generator.prototype.next</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$6U_J-BLO1vA3zCdgcbwp9VeIZs3_9Hvg_q46zKfFLI8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679597595428,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$A93pZiGqOE7KIV8v-2dI__IB7Z2HuAtxJmInTpEeEAM"},
{"content":{"body":"but how does the library it get the original context?","msgtype":"m.text"},"ts":1679597597404,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BVzgF4ZCgq8ak5ng8OV1c1r-4zqBzHIOzWys9I0l9vk"},
{"content":{"body":"when the queue opens back up, please feel free to ask questions about AsyncContext, even much more basic ones, about how it works at all.","msgtype":"m.text"},"ts":1679597597882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nY3IyLpM58qUM6dyLBCMBHQfF22LeL8j5u8sylZa_mU"},
{"content":{"body":"I'd expect, at least roughly, that the context value remains referenced until `run`'s callstack is exhausted and any `Promise` created is garbage collected.","format":"org.matrix.custom.html","formatted_body":"I'd expect, at least roughly, that the context value remains referenced until <code>run</code>'s callstack is exhausted and any <code>Promise</code> created is garbage collected.","msgtype":"m.text"},"ts":1679597599701,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nBUtEqX-042XrQWj6ENn_Y8XHwu6UmKq2pa6B_gNLK4"},
{"content":{"body":" * but how does the library get the original context?","m.new_content":{"body":"but how does the library get the original context?","msgtype":"m.text"},"m.relates_to":{"event_id":"$BVzgF4ZCgq8ak5ng8OV1c1r-4zqBzHIOzWys9I0l9vk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679597600958,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h3p7RdNS1J8TpLL3_89GXCLoNTlO0Tz_-g5GpPdDuTA"},
{"content":{"body":"> <@bakkot:matrix.org> so, \"the generator is provided by the user to a third party library\" seems like exactly the case where we want `yield` to preserve state. taking the example from the readme:\n> \n> ```js\n>   libraryTakingAnIterator(context.run('id', function* () {\n>     log('starting');\n> \n>     yield 0;\n> \n>     // if the library `await`s before resuming, we've lost our id\n>     log('done');\n>   }));\n> ```\n> Maybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?\n\nHmm. that example feels odd to me, since execution for the generator doesn't actually start until you call `.next()`. That said, I'm fine if context propagates over `yield` if we have a mechanism to affect async flow control.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1KXsFvM4DAADfDQVuIhBxFP-bSqpQM7TNxUwXA_M2KE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>so, \"the generator is provided by the user to a third party library\" seems like exactly the case where we want <code>yield</code> to preserve state. taking the example from the readme:</p>\n<pre><code class=\"language-js\">  libraryTakingAnIterator(context.run('id', function* () {\n    log('starting');\n\n    yield 0;\n\n    // if the library `await`s before resuming, we've lost our id\n    log('done');\n  }));\n</code></pre>\n<p>Maybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?</p>\n</blockquote></mx-reply>Hmm. that example feels odd to me, since execution for the generator doesn't actually start until you call <code>.next()</code>. That said, I'm fine if context propagates over <code>yield</code> if we have a mechanism to affect async flow control.","m.relates_to":{"m.in_reply_to":{"event_id":"$1KXsFvM4DAADfDQVuIhBxFP-bSqpQM7TNxUwXA_M2KE"}},"msgtype":"m.text"},"ts":1679597731932,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ds65vp7PBD3DW2a4VwGH5VoHWZBatyMZCCP-TwFMAEo"},
{"content":{"body":"note: we'll have to go upto 10m into lunch because of the delays ","msgtype":"m.text"},"ts":1679597807647,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$wxMRGfjJB7AaqISg8FGP_epm_scTF0iR8t1V3WEXL5U"},
{"content":{"body":"is anyone else not seeing the slides on Zoom?","msgtype":"m.text"},"ts":1679598087401,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$CfwIQwYPUhoii8_-g-8f-EGWaWRdv-uwL-bS-sxgh1A"},
{"content":{"body":"yeah","msgtype":"m.text"},"ts":1679598096142,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$TLZ8Sy_JWIUyqM4JGWyjR-M9utHfUi1HrnqxFM3wSxY"},
{"content":{"body":"oops, I mean, I am seeing the slides","msgtype":"m.text"},"ts":1679598102899,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$LR_7eDF-bhMR6ITxtrUVqAgunU692EhE_DkXxLmxw10"},
{"content":{"body":"quick refresh?","msgtype":"m.text"},"ts":1679598119793,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$34mWIjOlFMJKyaOvskYQ3arkG7tbyzYNwHZzgNayuSk"},
{"content":{"body":"ah, that did it","msgtype":"m.text"},"ts":1679598148103,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$_y3prJzJYDXfY5WPVX08NjbnagTnyV1tV9zF-by4smI"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1679598155638,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$0h2kEW8LszQ5Tvp86Fu6Xlg6eIpKp_aIhFLsk_r0U14"},
{"content":{"body":"i would like the conversation to come back to what littledan was proposing on \"whether we want this feature\"","format":"org.matrix.custom.html","formatted_body":"i would like the conversation to come back to what <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> was proposing on &quot;whether we want this feature&quot;","msgtype":"m.text"},"ts":1679598246115,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Rp6JG5bFmX2faymGj-bDPRV5Eu8CL5dnWoM4fyZUtYQ"},
{"content":{"body":"all these details beg the question of our already having consensus on that","msgtype":"m.text"},"ts":1679598260530,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dqI-YGFK13HdI4udQ5CjTqiagkqAPpApXygZ9j56LXM"},
{"content":{"body":"I do wish we had more examples yeah","msgtype":"m.text"},"ts":1679598271965,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UBcKjU1e8d-vlFAfIAqZionL29M7r-4uhxvuqam1Npw"},
{"content":{"body":"this is a big complex thing","msgtype":"m.text"},"ts":1679598279725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$O9nqq7F56wyasILBc5nbVhT_bbbQ1-gMLz-n1hbbXtI"},
{"content":{"body":"so I want to see it being useful for a bunch of things","msgtype":"m.text"},"ts":1679598289954,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sLASN4IpaOGxe3Q_bYwmy2evEkn2eJrl2UeJAeL_1Gk"},
{"content":{"body":"and I trust justin that it is useful for all the enumerated things, but I can't visualize how yet","msgtype":"m.text"},"ts":1679598300615,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$IljimtyO7YnEJVUpM_MokwITLI4NK4S2obEUCa6yr3c"},
{"content":{"body":"Chengzhong Wugave a good presentation in WebPerfWG about this","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>gave a good presentation in WebPerfWG about this","msgtype":"m.text"},"ts":1679598316388,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xz6m9uOJRfXweNkxsgCQIdiFswTjCMEzUJgeXYzMgc0"},
{"content":{"body":"> <@rbuckton:matrix.org> Hmm. that example feels odd to me, since execution for the generator doesn't actually start until you call `.next()`. That said, I'm fine if context propagates over `yield` if we have a mechanism to affect async flow control.\n\nActually, if `yield` propagates context then I'm not even sure a flow-control mechanism would help, since flow control would probably only affect entry to the generator, not reentry via `next()`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ds65vp7PBD3DW2a4VwGH5VoHWZBatyMZCCP-TwFMAEo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Hmm. that example feels odd to me, since execution for the generator doesn't actually start until you call <code>.next()</code>. That said, I'm fine if context propagates over <code>yield</code> if we have a mechanism to affect async flow control.</blockquote></mx-reply>Actually, if <code>yield</code> propagates context then I'm not even sure a flow-control mechanism would help, since flow control would probably only affect entry to the generator, not reentry via <code>next()</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ds65vp7PBD3DW2a4VwGH5VoHWZBatyMZCCP-TwFMAEo"}},"msgtype":"m.text"},"ts":1679598317818,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$975fsoq724qSfkF502PnqUIsGHzgjo05rnuXFVepNlw"},
{"content":{"body":"Maybe next meeting, this can be given to TC39 again","msgtype":"m.text"},"ts":1679598330966,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VUUXC_vI2ca807Vc-UlUDuMO8Tq2uccOuVBABYojXlk"},
{"content":{"body":"bakkot the most pressing issue I can think of at this time is in servers, where functions need to access stuff related to the current request. At this point it's an absolute pain of passing the current request context down and down and down in method arguments, and it's easily lost.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40bakkot%3Amatrix.org\">bakkot</a> the most pressing issue I can think of at this time is in servers, where functions need to access stuff related to the current request. At this point it's an absolute pain of passing the current request context down and down and down in method arguments, and it's easily lost.","msgtype":"m.text"},"ts":1679598436539,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$qU4SX2jrWDWq_UHhvp1tvT2visSn4PompoS5cVucLU4"},
{"content":{"body":"node has `AsyncLocalStorage` for that, but any framework that wants to support more platforms than that is at a loss at this time.","format":"org.matrix.custom.html","formatted_body":"node has <code>AsyncLocalStorage</code> for that, but any framework that wants to support more platforms than that is at a loss at this time.","msgtype":"m.text"},"ts":1679598479716,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$3KpU016VpPJfO6xWl8CzDMmz4LLxfeGa3xHiM-mBbeo"},
{"content":{"body":"Lenz Weber-Tronic (phryneas): I believe you but I need to see it written out","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@phryneas:matrix.org\">Lenz Weber-Tronic (phryneas)</a>: I believe you but I need to see it written out","msgtype":"m.text"},"ts":1679598550342,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HpE29wjN-Df_Qe9A7W2UnysHnsFEX9VANuXjQHSUupA"},
{"content":{"body":"there's both a question why it's useful, but why it's valuable as a language feature (which is the inability of userland code to correctly wrap all closure-storing APIs or intercept `await`)","format":"org.matrix.custom.html","formatted_body":"there's both a question why it's useful, but why it's valuable as a language feature (which is the inability of userland code to correctly wrap all closure-storing APIs or intercept <code>await</code>)","msgtype":"m.text"},"ts":1679598557286,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$mkrBdceR3m3s-2_PiHlo5b00UvOsMRrsWUxo1p8Fo2I"},
{"content":{"body":"bakkot: I've used to thread request context information for web requests, such as the current authenticated user, request message, etc. Similar to `HttpContext.Current` in .NET (which uses the same mechanisms)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: I've used to thread request context information for web requests, such as the current authenticated user, request message, etc. Similar to <code>HttpContext.Current</code> in .NET (which uses the same mechanisms)","msgtype":"m.text"},"ts":1679598564082,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qFpKjbWIrJNNylXVBn6LVf3OqfFHYeWeMoQsWhPfjiE"},
{"content":{"body":"Angular's zones.js problems with `await` as an example","format":"org.matrix.custom.html","formatted_body":"Angular's zones.js problems with <code>await</code> as an example","msgtype":"m.text"},"ts":1679598585841,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$pzGWEvzaJEqEccIKUiai3--BkaXLIcN26BiGjiJflP0"},
{"content":{"body":"shu: Chengzhong Wu and me are going to prototype a V8 implementation to see performance and integration with task attribution","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a> and me are going to prototype a V8 implementation to see performance and integration with task attribution","msgtype":"m.text"},"ts":1679598653365,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$2g_0Mn4vy4ZmNJhjMgYa1HLrmdfF5OA5N3OfWBvDXVw"},
{"content":{"body":"bakkot how exactly would \"written out\" look in this case? Just trying to figure out how to best give you the example.\nImagine you have a call stack that is 50 calls deep. Either you have a `, context` argument in every of those functions, or the one function at depth 50 can call `getCurrentRequest()` which wraps `requestContext.get()`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40bakkot%3Amatrix.org\">bakkot</a> how exactly would &quot;written out&quot; look in this case? Just trying to figure out how to best give you the example.<br/>\nImagine you have a call stack that is 50 calls deep. Either you have a <code>, context</code> argument in every of those functions, or the one function at depth 50 can call <code>getCurrentRequest()</code> which wraps <code>requestContext.get()</code>","msgtype":"m.text"},"ts":1679598672678,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$cAo4s7NxyJwCPrbqcD2_ZjYDiMfA7UdxC-2Y_O5MuQI"},
{"content":{"body":"Lenz Weber-Tronic (phryneas): written out meaning, like, code","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@phryneas:matrix.org\">Lenz Weber-Tronic (phryneas)</a>: written out meaning, like, code","msgtype":"m.text"},"ts":1679598682807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BoWXKsmurtXYt2FIvcMRTxgvKcoU0EPGA7A6zBRAW2Q"},
{"content":{"body":"Andreu Botella: in blink as well? any benchmarks in mind?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: in blink as well? any benchmarks in mind?","msgtype":"m.text"},"ts":1679598691309,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$33PRssq2YAdYyRXyKfZwhSF74u5B2sBIL1PDucg6EPA"},
{"content":{"body":"I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works \"in the abstract\". I wish there was a prototype so that we could have a sample in which it could be demonstrated:\n\n* \"now let's add logging\"\n* \"now let's add ...\"\n\nand see how that composes in practice. And I'm fine with discussing that in stage 2.","format":"org.matrix.custom.html","formatted_body":"<p>I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works &quot;in the abstract&quot;. I wish there was a prototype so that we could have a sample in which it could be demonstrated:</p>\n<ul>\n<li>&quot;now let's add logging&quot;</li>\n<li>&quot;now let's add ...&quot;</li>\n</ul>\n<p>and see how that composes in practice. And I'm fine with discussing that in stage 2.</p>\n","msgtype":"m.text"},"ts":1679598698105,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$60JBU0vGOTd8REY0ye1Wy-GMldKxiRUys7twRAm4CHA"},
{"content":{"body":"> <@shuyuguo:matrix.org> Andreu Botella: in blink as well? any benchmarks in mind?\n\nIn blink: Yes. Benchmarks: welcome.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$33PRssq2YAdYyRXyKfZwhSF74u5B2sBIL1PDucg6EPA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: in blink as well? any benchmarks in mind?</blockquote></mx-reply>In blink: Yes. Benchmarks: welcome.","m.relates_to":{"m.in_reply_to":{"event_id":"$33PRssq2YAdYyRXyKfZwhSF74u5B2sBIL1PDucg6EPA"}},"msgtype":"m.text"},"ts":1679598715367,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b-YN90g7AHV_Sp0Q348cJji-KUqafSysfjI81ipSxGs"},
{"content":{"body":"i.e. assume this API exists. what does code using it look like, concretely, that would run if it were in the language","msgtype":"m.text"},"ts":1679598722081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cej6Ox0sBWg2RZLHS0C6aymnHMI9B0cEsw8rOt_IndQ"},
{"content":{"body":" * I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works \"in the abstract\". I wish there was a prototype or sample codebase so that we could have a sample in which it could be demonstrated:\n\n- \"now let's add logging\"\n- \"now let's add ...\"\n\nand see how that composes in practice. And I'm fine with discussing that in stage 2.","format":"org.matrix.custom.html","formatted_body":" * <p>I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works &quot;in the abstract&quot;. I wish there was a prototype or sample codebase so that we could have a sample in which it could be demonstrated:</p>\n<ul>\n<li>&quot;now let's add logging&quot;</li>\n<li>&quot;now let's add ...&quot;</li>\n</ul>\n<p>and see how that composes in practice. And I'm fine with discussing that in stage 2.</p>\n","m.new_content":{"body":"I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works \"in the abstract\". I wish there was a prototype or sample codebase so that we could have a sample in which it could be demonstrated:\n\n- \"now let's add logging\"\n- \"now let's add ...\"\n\nand see how that composes in practice. And I'm fine with discussing that in stage 2.","format":"org.matrix.custom.html","formatted_body":"<p>I very much don't have expertise to weigh in on this API, so I can just give trust that in the current direction; but it sounds like the feature works &quot;in the abstract&quot;. I wish there was a prototype or sample codebase so that we could have a sample in which it could be demonstrated:</p>\n<ul>\n<li>&quot;now let's add logging&quot;</li>\n<li>&quot;now let's add ...&quot;</li>\n</ul>\n<p>and see how that composes in practice. And I'm fine with discussing that in stage 2.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$60JBU0vGOTd8REY0ye1Wy-GMldKxiRUys7twRAm4CHA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679598724104,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$zvuyr2j6RCOCc9F8-3hZacUuRN8Ldd-okRmppuwk_xU"},
{"content":{"body":"littledan: it can't be just \"welcome\", i'm asking how andreu plans to \"see performance\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: it can't be just &quot;welcome&quot;, i'm asking how andreu plans to &quot;see performance&quot;?","msgtype":"m.text"},"ts":1679598746133,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$19jG91WXQAwxgu5Ev1xhHrqSxMWWdi3YSUU1f9LIUxw"},
{"content":{"body":"we know it's possible to implement","msgtype":"m.text"},"ts":1679598777720,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AXfVXd35wLRs84S8SuU8yfdZJ04zH89zAM_zvHE-Pjg"},
{"content":{"body":"> <@bakkot:matrix.org> i.e. assume this API exists. what does code using it look like, concretely, that would run if it were in the language\n\nYou could survey usage of Node's API for example code, since it essentially provides the same functionality","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cej6Ox0sBWg2RZLHS0C6aymnHMI9B0cEsw8rOt_IndQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>i.e. assume this API exists. what does code using it look like, concretely, that would run if it were in the language</blockquote></mx-reply>You could survey usage of Node's API for example code, since it essentially provides the same functionality","m.relates_to":{"m.in_reply_to":{"event_id":"$cej6Ox0sBWg2RZLHS0C6aymnHMI9B0cEsw8rOt_IndQ"}},"msgtype":"m.text"},"ts":1679598785886,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$FjYI5pCdodgxehCuP8BYxDJqFnHrYt__4MNGz1m90Xw"},
{"content":{"body":"> <@shuyuguo:matrix.org> littledan: it can't be just \"welcome\", i'm asking how andreu plans to \"see performance\"?\n\nOK, well, yeah, this is a reasonable requirement, and we should look into it. Keeping performance good is a goal as Justin has repeatedly said. Bloomberg is sponsoring Igalia's involvement in implementation work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$19jG91WXQAwxgu5Ev1xhHrqSxMWWdi3YSUU1f9LIUxw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: it can't be just \"welcome\", i'm asking how andreu plans to \"see performance\"?</blockquote></mx-reply>OK, well, yeah, this is a reasonable requirement, and we should look into it. Keeping performance good is a goal as Justin has repeatedly said. Bloomberg is sponsoring Igalia's involvement in implementation work.","m.relates_to":{"m.in_reply_to":{"event_id":"$19jG91WXQAwxgu5Ev1xhHrqSxMWWdi3YSUU1f9LIUxw"}},"msgtype":"m.text"},"ts":1679598794030,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SObyFXab3MHj_mNguRl1KMpVvgCACOYP0Xtx7TqeWd0"},
{"content":{"body":"and yeah the burden should be on us to prove that it's good.","msgtype":"m.text"},"ts":1679598810238,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9dvJPxb8WkKvnzr_02xbXGEN1Qpdw8E919H5vDg4DgE"},
{"content":{"body":"Yeah, we'll be looking into that. We don't yet have any benchmarks in mind, but this is still very early on","msgtype":"m.text"},"ts":1679598816783,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xyCIYsbeNXvwBQLmRx30leHFvi0UkoZ3RCI2K53qrcM"},
{"content":{"body":"like, we were literally discussing this earlier today","msgtype":"m.text"},"ts":1679598830768,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lWmiwUAVI2tAxMnfDdfl81xxzX6KESx0KFmXFXwqJ8E"},
{"content":{"body":"bakkot it does exist, in some form, in node\n\nAn example would be the NextJs `headers` function. This functionality would not be able at all in React-land without this API:\nhttps://beta.nextjs.org/docs/api-reference/headers","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/%40bakkot%3Amatrix.org\">bakkot</a> it does exist, in some form, in node</p>\n<p>An example would be the NextJs <code>headers</code> function. This functionality would not be able at all in React-land without this API:<br/>\n<a href=\"https://beta.nextjs.org/docs/api-reference/headers\">https://beta.nextjs.org/docs/api-reference/headers</a></p>","msgtype":"m.text"},"ts":1679598834099,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$z2gU8b9G7fW1nuT_QWi4xhxVeJ4KYkmRiHSZb_IsPts"},
{"content":{"body":"it doesn't have to be a real benchmark","msgtype":"m.text"},"ts":1679598837206,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2pIKnLVuEsNvmPNVOuLE4ruvYfj34DM3w1rSdzC25y8"},
{"content":{"body":"i'm just wondering how you plan to verify anything","msgtype":"m.text"},"ts":1679598844762,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GFye_hSQ_GFaYB88VU2PwyLUBBHsehiGY3dxIfyKVi0"},
{"content":{"body":"(not being flippant if i sounded that way)","msgtype":"m.text"},"ts":1679598852795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sa4tvbrSNzLVktDLwIe59Ej4Ak3XvIfzVTG5kv_WQ4k"},
{"content":{"body":"In Node.js we have several micro-benchmarks that we can port to AsyncContext: https://github.com/nodejs/node/tree/main/benchmark/async_hooks","msgtype":"m.text"},"ts":1679598871416,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$eydUN-kMHEk_7t-Isa_xrRzhZJdwONGIpG9uCeRvI8g"},
{"content":{"body":"And we can adopt OpenTelemetry's real world use cases for benchmarking if needed.","msgtype":"m.text"},"ts":1679598945329,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$BUHIy7Ow5bxAOczRNWEAPfRVb5v3x1a_nozT6pVOOyY"},
{"content":{"body":"sorry let me be clearer","msgtype":"m.text"},"ts":1679598954246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9a5RZwne-N1C3XQjp5vFYLM14-1JJ1zQcDbt4ZV2_xo"},
{"content":{"body":"the performance concern is that AsyncContext _itself_ will be too slow","format":"org.matrix.custom.html","formatted_body":"the performance concern is that AsyncContext <em>itself</em> will be too slow","msgtype":"m.text"},"ts":1679598968495,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ykHzZgt032rprvFKPOlUXy5Gqdvur3YtV2Pou1euJoI"},
{"content":{"body":"it's fine for new features to be slow","msgtype":"m.text"},"ts":1679598971633,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qfpZ5CofsHZIM5hiqqHQ4NrAWk5exsiSbQlffnUW0Jc"},
{"content":{"body":"the way this feature must be implemented is In The Deep at the engine level","msgtype":"m.text"},"ts":1679598991376,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hYb2iLcYn0Y3ACSKSX5lujPYP9uc76vGwxi4xJLGBuM"},
{"content":{"body":"which means it affects performance of _all_ executions even if they don't use the feature","format":"org.matrix.custom.html","formatted_body":"which means it affects performance of <em>all</em> executions even if they don't use the feature","msgtype":"m.text"},"ts":1679598999584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ynFS0kvq_xFnTawv2enczVP_Plz3KYxNSUTGb6B4zbQ"},
{"content":{"body":"i would like to see things that suggest that this feature can in fact be pay-as-you-go (or close to it), and executions that don't use the feature don't suffer performance regressions","msgtype":"m.text"},"ts":1679599022887,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$embb14J3obE4pX2Cp1dtce9HLV_DeTKuZDAz4g6hR0Q"},
{"content":{"body":" * the performance concern is *not* that AsyncContext _itself_ will be too slow","format":"org.matrix.custom.html","formatted_body":" * the performance concern is <em>not</em> that AsyncContext <em>itself</em> will be too slow","m.new_content":{"body":"the performance concern is *not* that AsyncContext _itself_ will be too slow","format":"org.matrix.custom.html","formatted_body":"the performance concern is <em>not</em> that AsyncContext <em>itself</em> will be too slow","msgtype":"m.text"},"m.relates_to":{"event_id":"$ykHzZgt032rprvFKPOlUXy5Gqdvur3YtV2Pou1euJoI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679599032023,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uaYL2hXPZp6mq9qllTtlDyVk6HqgXUnto9kjf1n5bc8"},
{"content":{"body":"oops, missed an operative \"not\" above","msgtype":"m.text"},"ts":1679599036915,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DPFuojRYOvRUxpwoqTwPJw8ZHfuqhKzEzXfyQfMs5sM"},
{"content":{"body":"V8 is already saving/restoring the `v8::Context::{Get,Set}ContinuationPreservedEmbedderData` today, which is close to what this proposal needs","format":"org.matrix.custom.html","formatted_body":"V8 is already saving/restoring the <code>v8::Context::{Get,Set}ContinuationPreservedEmbedderData</code> today, which is close to what this proposal needs","msgtype":"m.text"},"ts":1679599049940,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$t404NasIXo1ik8ThqqQumghFmg3gNFy6BNWCrpuM5wA"},
{"content":{"body":"please, i know how V8 works","msgtype":"m.text"},"ts":1679599059757,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gZpCTY7V7qlSfnQ3lvXhkBhqupdCeemN3b74R8ZTDUk"},
{"content":{"body":"I know!","msgtype":"m.text"},"ts":1679599074615,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$E9ZRd8b0wPQNA1rAtnKNgxBDboEVJCSXXoHg6XwJnQk"},
{"content":{"body":"Yeah, it will be a clear requirement that this doesn't slow down V8. We can the existing public V8 benchmarks to verify (and I know you have CI that will also verify this after it lands).","msgtype":"m.text"},"ts":1679599105313,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BpngS19zmnIHr-71XnIJeMWIMSmAyipMjTDZXffEhMQ"},
{"content":{"body":"but that thing is set by the embedder in a very bounded way, in a way that V8 folks aren't 100% happy with anyway","msgtype":"m.text"},"ts":1679599110414,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cG4PUTTP8sjYnqisa7jsAEcV2pYD1UjID8ZymwXn5H4"},
{"content":{"body":"for this to become JS programmable opens up new unknowns we should understand","msgtype":"m.text"},"ts":1679599122842,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fdo_tO4j7jzbN4dK3Eysni-g_SdQ6ztUUi1p6oa1aL0"},
{"content":{"body":"I'm very encouraged by how TaskAttribution landed and is always on in Chrome, apparently without performance overhead","msgtype":"m.text"},"ts":1679599123176,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gQz6VmF-_fmxq4eJ85z_mDQCykZlOtn7hmMbPxLIf-M"},
{"content":{"body":"fair enough / good to know","msgtype":"m.text"},"ts":1679599124230,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$V0TgtqSMl8WB4CwyM0k679iw85oS75FhOUHP0BouE4c"},
{"content":{"body":"> <@shuyuguo:matrix.org> but that thing is set by the embedder in a very bounded way, in a way that V8 folks aren't 100% happy with anyway\n\nWould be great to learn in what way V8 folks aren't happy with it for now","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cG4PUTTP8sjYnqisa7jsAEcV2pYD1UjID8ZymwXn5H4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>but that thing is set by the embedder in a very bounded way, in a way that V8 folks aren&#39;t 100% happy with anyway</blockquote></mx-reply>Would be great to learn in what way V8 folks aren't happy with it for now","m.relates_to":{"m.in_reply_to":{"event_id":"$cG4PUTTP8sjYnqisa7jsAEcV2pYD1UjID8ZymwXn5H4"}},"msgtype":"m.text"},"ts":1679599138696,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oFQdd-8FmUzDAUz9ZLEsjIbw1pc1fc1evmf0xdTXTNk"},
{"content":{"body":"fair, i'll try to understand this unhappiness deeply so i can articulate it","msgtype":"m.text"},"ts":1679599159505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZyKkwP75VadgWHjQEk6qjF64P1BqvpsDN-4VPv_DfCU"},
{"content":{"body":"> <@littledan:matrix.org> Yeah it'd be great to have a name brainstorm here (in an issue, not during plenary). https://github.com/tc39/proposal-async-context/issues\n\nAs long as we don't call this `AsyncLocalStorage`, which is AsyncLocal-Storage and not Async-LocalStorage.      ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rBW-sotD9y4mdjW7-ipscmRKrBT2XJ3IgCxgwAUd2Y4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah it'd be great to have a name brainstorm here (in an issue, not during plenary). https://github.com/tc39/proposal-async-context/issues</blockquote></mx-reply>As long as we don't call this <code>AsyncLocalStorage</code>, which is AsyncLocal-Storage and not Async-LocalStorage.","m.relates_to":{"m.in_reply_to":{"event_id":"$rBW-sotD9y4mdjW7-ipscmRKrBT2XJ3IgCxgwAUd2Y4"}},"msgtype":"m.text"},"ts":1679599206335,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TiFuduoxDfy17Awq0E-nxpAasBBLoth8VaCueP3Hp3o"},
{"content":{"body":"I still like `AsyncLocal` which make the analog to `ThreadLocal` in other langauges.","format":"org.matrix.custom.html","formatted_body":"I still like <code>AsyncLocal</code> which make the analog to <code>ThreadLocal</code> in other langauges.","msgtype":"m.text"},"ts":1679599287505,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$7dAXI-5z-LB1MZUwKnIvjt5orE96vh3dE6L_a9iQjzk"},
{"content":{"body":"We don't have notes of current topic?","msgtype":"m.text"},"ts":1679599319996,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$1SQKQUe3Sie-n1dEqHM-un6o2YByWDljFh9T_j24EVA"},
{"content":{"body":"> <@bakkot:matrix.org> so, \"the generator is provided by the user to a third party library\" seems like exactly the case where we want `yield` to preserve state. taking the example from the readme:\n> \n> ```js\n>   libraryTakingAnIterator(context.run('id', function* () {\n>     log('starting');\n> \n>     yield 0;\n> \n>     // if the library `await`s before resuming, we've lost our id\n>     log('done');\n>   }));\n> ```\n> Maybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?\n\nI think the more natural is to do `context.run(libraryTakingAnIterator(…))`, in which case both call and init time would be equivalent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1KXsFvM4DAADfDQVuIhBxFP-bSqpQM7TNxUwXA_M2KE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><p>so, \"the generator is provided by the user to a third party library\" seems like exactly the case where we want <code>yield</code> to preserve state. taking the example from the readme:</p>\n<pre><code class=\"language-js\">  libraryTakingAnIterator(context.run('id', function* () {\n    log('starting');\n\n    yield 0;\n\n    // if the library `await`s before resuming, we've lost our id\n    log('done');\n  }));\n</code></pre>\n<p>Maybe we should say that any library which consumes iterators in this way needs to juggle contexts properly? but on the other hand it's not clear to me how that's even possible here - how would the library ensure that the second half of the generator runs in the correct context?</p>\n</blockquote></mx-reply>I think the more natural is to do <code>context.run(libraryTakingAnIterator(…))</code>, in which case both call and init time would be equivalent","m.relates_to":{"m.in_reply_to":{"event_id":"$1KXsFvM4DAADfDQVuIhBxFP-bSqpQM7TNxUwXA_M2KE"}},"msgtype":"m.text"},"ts":1679599327228,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$X0LLTFa9yz57T_DdUf1_rMszj8le0Xy3pK7PSDI75o0"},
{"content":{"body":"An \"async context\" in common parlance would seem to refer to the entire async-local map, rather than to an entry","msgtype":"m.text"},"ts":1679599328267,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hv4wgxu_3JW3GyTH5HXAn6KUnCf1iIgBnDIQrLHExM0"},
{"content":{"body":"so there's also that","msgtype":"m.text"},"ts":1679599337317,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$gO6Jo-iSisWLV4985OaTftYUr8uXlERUHy21NaIXBX0"},
{"content":{"body":"> <@haxjs:matrix.org> We don't have notes of current topic?\n\nIt's lunch, not an official presentation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1SQKQUe3Sie-n1dEqHM-un6o2YByWDljFh9T_j24EVA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>We don&#39;t have notes of current topic?</blockquote></mx-reply>It's lunch, not an official presentation","m.relates_to":{"m.in_reply_to":{"event_id":"$1SQKQUe3Sie-n1dEqHM-un6o2YByWDljFh9T_j24EVA"}},"msgtype":"m.text"},"ts":1679599354156,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Bb_lt4YgrwtIKFg6e_QPI1Trjjt0CsTgjWcL68BMFNM"},
{"content":{"body":"> <@jridgewell:matrix.org> It's lunch, not an official presentation\n\nok, though I would like it also have the notes (I use notes as subtitle :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Bb_lt4YgrwtIKFg6e_QPI1Trjjt0CsTgjWcL68BMFNM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>It's lunch, not an official presentation</blockquote></mx-reply>ok, though I would like it also have the notes (I use notes as subtitle :)","m.relates_to":{"m.in_reply_to":{"event_id":"$Bb_lt4YgrwtIKFg6e_QPI1Trjjt0CsTgjWcL68BMFNM"}},"msgtype":"m.text"},"ts":1679599489454,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$GqzHRy11Zlvus-mMcm0iHYe4wgwm6q22Sp6V3EdAyU0"},
{"content":{"body":"especially zoom do not have auto subtitle :(","msgtype":"m.text"},"ts":1679599513239,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$qmjF2dnxcZyd7_nWnykRXZgUDBhcztrDd5SDbXrfW58"},
{"content":{"body":"> <@abotella:igalia.com> shu: Chengzhong Wu and me are going to prototype a V8 implementation to see performance and integration with task attribution\n\nMy hope is that this will literally have 0 performance penalty for code not using `AsyncContext`, and be like 0.00001% slowdown for code that is.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2g_0Mn4vy4ZmNJhjMgYa1HLrmdfF5OA5N3OfWBvDXVw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: <a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a> and me are going to prototype a V8 implementation to see performance and integration with task attribution</blockquote></mx-reply>My hope is that this will literally have 0 performance penalty for code not using <code>AsyncContext</code>, and be like 0.00001% slowdown for code that is.","m.relates_to":{"m.in_reply_to":{"event_id":"$2g_0Mn4vy4ZmNJhjMgYa1HLrmdfF5OA5N3OfWBvDXVw"}},"msgtype":"m.text"},"ts":1679599552793,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7K2y8Wv5j4385gNwya8QTso6byy6gBHUpNfCG_hELZ4"},
{"content":{"body":"I believe the current node addon impl has that gurantee","msgtype":"m.text"},"ts":1679599577330,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SwNnAOspJ3d9H9mLLC2-SUS70qzGwoPJQ2fsHVpzrXk"},
{"content":{"body":"possible jargon to distinguish between whole-map and individual items: \"supertext\" (not a real word) and \"subtext\"?","m.relates_to":{"event_id":"$hv4wgxu_3JW3GyTH5HXAn6KUnCf1iIgBnDIQrLHExM0","is_falling_back":true,"m.in_reply_to":{"event_id":"$hv4wgxu_3JW3GyTH5HXAn6KUnCf1iIgBnDIQrLHExM0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679599588911,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$T29gIWj183ENOWUbMKNTAhWS6b09ugy1-M6Leo2T8hQ"},
{"content":{"body":"I agree this is a common ambiguity when talking about context, even at a linguistic level","m.relates_to":{"event_id":"$hv4wgxu_3JW3GyTH5HXAn6KUnCf1iIgBnDIQrLHExM0","is_falling_back":true,"m.in_reply_to":{"event_id":"$T29gIWj183ENOWUbMKNTAhWS6b09ugy1-M6Leo2T8hQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679599605011,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$lr8y7jXP3SMGVCIExXoYVA7ZjNFhZgGixu6cBIfEi1Q"},
{"content":{"body":" * I believe the current node addon impl has that guarantee","m.new_content":{"body":"I believe the current node addon impl has that guarantee","msgtype":"m.text"},"m.relates_to":{"event_id":"$SwNnAOspJ3d9H9mLLC2-SUS70qzGwoPJQ2fsHVpzrXk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679599841943,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9uM0yLjKzS_h9YcT6lhpdz6m1vCezFBP7o4cJNSOTsM"},
{"content":{"body":"Zoom does, but I don't know how to enable it","m.relates_to":{"event_id":"$qmjF2dnxcZyd7_nWnykRXZgUDBhcztrDd5SDbXrfW58","is_falling_back":true,"m.in_reply_to":{"event_id":"$qmjF2dnxcZyd7_nWnykRXZgUDBhcztrDd5SDbXrfW58"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679599894680,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QHKoiRreFiLm872Iq_jMh9weBs1pWjdZUmPYUFWVceM"},
{"content":{"body":"my hope goes with you","msgtype":"m.text"},"ts":1679600513905,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9JL9zVR_RbXaPrqON6PsxAVtm5XY4hDw5OIO4qZY1Vc"},
{"content":{"body":"waldemar: so, re: the C++ release fence. in short, you are correct that in the C++ memory model the release fence doesn't sync-with without a corresponding acquire operation on another thread.\n\nthe way V8 (and JVM) reason about this i think is more at the ISA level, per ISA. like, we think a store-store fence (`dmb` on ARM) or whatever is sufficient to publish. we need to ensure no store-store reorderings happen at both the codegen level and the CPU level.\n\nthe `dmb` guarantees that at the CPU level. a release fence seems to guarantee that at the codegen level, but strictly speaking may be incorrect.\n\nmaybe manual inline assembly is better here? idk\n","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>: so, re: the C++ release fence. in short, you are correct that in the C++ memory model the release fence doesn't sync-with without a corresponding acquire operation on another thread.</p>\n<p>the way V8 (and JVM) reason about this i think is more at the ISA level, per ISA. like, we think a store-store fence (<code>dmb</code> on ARM) or whatever is sufficient to publish. we need to ensure no store-store reorderings happen at both the codegen level and the CPU level.</p>\n<p>the <code>dmb</code> guarantees that at the CPU level. a release fence seems to guarantee that at the codegen level, but strictly speaking may be incorrect.</p>\n<p>maybe manual inline assembly is better here? idk</p>\n","msgtype":"m.text"},"ts":1679600704557,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PguF7_a6H0f4Gz1hE6WxCGXBhIE-uIVKOtaxjh7jCLY"},
{"content":{"body":"in any case V8 mixes C++ generated code and our own generated code liberally anyway, since it's a JIT","msgtype":"m.text"},"ts":1679600722982,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ffQ1KnwK3I5C4FIOevBkAHKFPWk95jLwcmjXWJMo7GY"},
{"content":{"body":"and i've never wrapped my head around reasoning at the C++ memory model level","msgtype":"m.text"},"ts":1679600734218,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0gtTRITQ9cL8EnQt_zYagS7ed1RitqZ3TObmogbILUk"},
{"content":{"body":"because of course taht doesn't exist for our own generated code","msgtype":"m.text"},"ts":1679600739435,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KtE2izUp6C7LwB46T-GRsK2zs_8MCstH1dTot6p1HpQ"},
{"content":{"body":"so i generally try to reason about it by divining what ARM guarantees, then trying to shape C++ to generate the right thing","msgtype":"m.text"},"ts":1679600757836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OuUuTO3Zhf8sLtCjTaiTQh6nwY9w5U3cIjkLrHpX2Ic"},
{"content":{"body":"(or what x86 guarantees etc)","msgtype":"m.text"},"ts":1679600775357,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oJpZtJ9KdRW7dcD7VgWM1_wx2TzfHD6b-PoY9bqVaBM"},
{"content":{"body":"in fact, V8 also does the even more un-specified thing around atomics where we just bitcast addresses to `std::atomic`s","format":"org.matrix.custom.html","formatted_body":"in fact, V8 also does the even more un-specified thing around atomics where we just bitcast addresses to <code>std::atomic</code>s","msgtype":"m.text"},"ts":1679600839050,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f7aEMGW5QZSBxvHef4VJ4DQVCIXEi5Bot27GmvIVcdM"},
{"content":{"body":"but i think that behavior may finally be getting specced?","msgtype":"m.text"},"ts":1679600844346,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kTWL1dicrQ_fBeoruy3hpJ8S6-v7su41RfNOUcxAJOQ"},
{"content":{"body":"omg it's this sub-thread that was keeping my notification at 1","m.relates_to":{"event_id":"$qmjF2dnxcZyd7_nWnykRXZgUDBhcztrDd5SDbXrfW58","is_falling_back":true,"m.in_reply_to":{"event_id":"$QHKoiRreFiLm872Iq_jMh9weBs1pWjdZUmPYUFWVceM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679601235071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iOJMUdTqDnP13OrhkvII0aZJoJqfeWYHq2NtTKQRViM"},
{"content":{"body":"and now i've made it worse for other people, sorry","m.relates_to":{"event_id":"$qmjF2dnxcZyd7_nWnykRXZgUDBhcztrDd5SDbXrfW58","is_falling_back":true,"m.in_reply_to":{"event_id":"$iOJMUdTqDnP13OrhkvII0aZJoJqfeWYHq2NtTKQRViM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679601249154,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o4LXK3MoM1X2Kvst29F1wDiGLlHyr0Wg5EkFPdyONDw"},
{"content":{"body":"I may be a minute or two late getting back. My dogs need a bio break and don't care about the plenary schedule. ","format":"org.matrix.custom.html","formatted_body":"I may be a minute or two late getting back. My dogs need a bio break and don't care about the plenary schedule.","msgtype":"m.text"},"ts":1679601558328,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2gnE9AE_p9WDyTt9Ha7x8-A_WmWyQWYiYpAVJMyxOMI"},
{"content":{"body":"> <@rbuckton:matrix.org> I may be a minute or two late getting back. My dogs need a bio break and don't care about the plenary schedule.\n\nI'm back","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2gnE9AE_p9WDyTt9Ha7x8-A_WmWyQWYiYpAVJMyxOMI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I may be a minute or two late getting back. My dogs need a bio break and don't care about the plenary schedule.</blockquote></mx-reply>I'm back","m.relates_to":{"m.in_reply_to":{"event_id":"$2gnE9AE_p9WDyTt9Ha7x8-A_WmWyQWYiYpAVJMyxOMI"}},"msgtype":"m.text"},"ts":1679601740763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RJ_EIvPWKj_hqzD43PY33HDUNq1kEzSUluFlbMHBmqY"},
{"content":{"body":"ljharb: was it es-shims which deletes it? for the notes","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: was it es-shims which deletes it? for the notes","msgtype":"m.text"},"ts":1679602124772,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pdjFXy8Jiu_n6r3O9STVVPd6i9H8Ent0A5MDk4zWdLY"},
{"content":{"body":"`es6-shim`, specifically. ","format":"org.matrix.custom.html","formatted_body":"<code>es6-shim</code>, specifically.","msgtype":"m.text"},"ts":1679602139588,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XeX1dNJb2KgXNfcTwo9z1Fqc386LdVKxG5wXVDqsHwc"},
{"content":{"body":"(I just missed the name)","msgtype":"m.text"},"ts":1679602141439,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-GA8l2aA0j62SbUOpK0Qhltee4bmMFRFIlrBnINFVfE"},
{"content":{"body":"> <@shuyuguo:matrix.org> my hope goes with you\n\nWorth also noting is that node is already eating performance with usage of `AsyncLocalStorage`, my apps are losing native `async`/`await` performance due to my need to polyfill","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9JL9zVR_RbXaPrqON6PsxAVtm5XY4hDw5OIO4qZY1Vc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>my hope goes with you</blockquote></mx-reply>Worth also noting is that node is already eating performance with usage of <code>AsyncLocalStorage</code>, my apps are losing native <code>async</code>/<code>await</code> performance due to my need to polyfill","m.relates_to":{"m.in_reply_to":{"event_id":"$9JL9zVR_RbXaPrqON6PsxAVtm5XY4hDw5OIO4qZY1Vc"}},"msgtype":"m.text"},"ts":1679602142615,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JNtuwxeIlVMctj_UvGNAwv2L-XmsvdD80yKX4dstGKw"},
{"content":{"body":" * `es6-shim`, specifically. core-js may, i'm not sure","format":"org.matrix.custom.html","formatted_body":" * <code>es6-shim</code>, specifically. core-js may, i'm not sure","m.new_content":{"body":"`es6-shim`, specifically. core-js may, i'm not sure","format":"org.matrix.custom.html","formatted_body":"<code>es6-shim</code>, specifically. core-js may, i'm not sure","msgtype":"m.text"},"m.relates_to":{"event_id":"$XeX1dNJb2KgXNfcTwo9z1Fqc386LdVKxG5wXVDqsHwc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679602143771,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IhGm1eBfyzv6djaLgfk4xHY_7KTEd-RpeQdsmIYIQFw"},
{"content":{"body":"> <@jridgewell:matrix.org> Worth also noting is that node is already eating performance with usage of `AsyncLocalStorage`, my apps are losing native `async`/`await` performance due to my need to polyfill\n\nSure, but we also need to make sure that this doesn't make websites slower","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JNtuwxeIlVMctj_UvGNAwv2L-XmsvdD80yKX4dstGKw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Worth also noting is that node is already eating performance with usage of <code>AsyncLocalStorage</code>, my apps are losing native <code>async</code>/<code>await</code> performance due to my need to polyfill</blockquote></mx-reply>Sure, but we also need to make sure that this doesn't make websites slower","m.relates_to":{"m.in_reply_to":{"event_id":"$JNtuwxeIlVMctj_UvGNAwv2L-XmsvdD80yKX4dstGKw"}},"msgtype":"m.text"},"ts":1679602162198,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hPgsTFzQi6De0X3GPGBLxIWGZgHhWQfr_juWvXOhxho"},
{"content":{"body":"We already live in a slow world, and this API should be much faster than the status quo","msgtype":"m.text"},"ts":1679602165331,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$H1R9CzmG70GdbNxR40_Scm-SNp9BmjQd0lSpRA0UpOY"},
{"content":{"body":"the hard line is \"no speedometer regressions\"","msgtype":"m.text"},"ts":1679602169496,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kokG8hnFH6OXY_AaRqgeHtmuAI88xOVXQvkkmgmWpzA"},
{"content":{"body":"hard-ish","msgtype":"m.text"},"ts":1679602175626,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ErOQHrQ_C4qPCN_s9pm4PIDIUGtDsHibzcKxQfxSJ_w"},
{"content":{"body":"> <@shuyuguo:matrix.org> the hard line is \"no speedometer regressions\"\n\nVery helpful to have this line--should be easy to develop against.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$kokG8hnFH6OXY_AaRqgeHtmuAI88xOVXQvkkmgmWpzA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>the hard line is &quot;no speedometer regressions&quot;</blockquote></mx-reply>Very helpful to have this line--should be easy to develop against.","m.relates_to":{"m.in_reply_to":{"event_id":"$kokG8hnFH6OXY_AaRqgeHtmuAI88xOVXQvkkmgmWpzA"}},"msgtype":"m.text"},"ts":1679602220610,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tziAFuxyx6QaQSItBYkFxa1GEfiMEAJ5YnmktNFy5dA"},
{"content":{"body":"godspeed you! async contexter","msgtype":"m.text"},"ts":1679602257112,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ"},
{"content":{"body":"what is this referencing?","m.relates_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679602283612,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WvrWbe29tKHKjARcPVENGVL0vhqcM8lSOXQjitpWOWs"},
{"content":{"body":"https://en.wikipedia.org/wiki/Godspeed_You!_Black_Emperor","m.relates_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$WvrWbe29tKHKjARcPVENGVL0vhqcM8lSOXQjitpWOWs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679602301218,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$emCM-KwEaaQBzmCNCN5DbZON51px5qUwSXo5oXV57fo"},
{"content":{"body":"great stuff","m.relates_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$emCM-KwEaaQBzmCNCN5DbZON51px5qUwSXo5oXV57fo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679602323508,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$wS6Lech_9mldry9NVfPXJRhep2Tn59j09xeQ4B4W1jA"},
{"content":{"body":"the ! placement triggered the memory for me","m.relates_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$wS6Lech_9mldry9NVfPXJRhep2Tn59j09xeQ4B4W1jA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679602325338,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6rkSJoVCzck1pS3y_V9bSJt4mcHHEigGFinuIhXQwBg"},
{"content":{"body":"does anyone have a link to these slides?","msgtype":"m.text"},"ts":1679602647148,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$apAyZGSUULU4kr7xzgnZWVcj-N6DGE2xshtU7cTNa7s"},
{"content":{"body":"> <@shuyuguo:matrix.org> does anyone have a link to these slides?\n\nhttps://docs.google.com/presentation/d/1b74GI-zHrG0wDzmwFs_yPWRli24KyVUNx3GeZt8JouA/edit#slide=id.g2227767b447_1_6","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$apAyZGSUULU4kr7xzgnZWVcj-N6DGE2xshtU7cTNa7s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>does anyone have a link to these slides?</blockquote></mx-reply>https://docs.google.com/presentation/d/1b74GI-zHrG0wDzmwFs_yPWRli24KyVUNx3GeZt8JouA/edit#slide=id.g2227767b447_1_6","m.relates_to":{"m.in_reply_to":{"event_id":"$apAyZGSUULU4kr7xzgnZWVcj-N6DGE2xshtU7cTNa7s"}},"msgtype":"m.text"},"ts":1679602677077,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Yv7g6nmMF5CwXJYElArXlTjuDJAhFHHr8XHFhM1MywI"},
{"content":{"body":"ty","msgtype":"m.text"},"ts":1679602693527,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JLNPlfBdFg3IL9laU81v2k8N5zydX9lfcWQXphi56UI"},
{"content":{"body":"I was always more into Explosions in the Sky","m.relates_to":{"event_id":"$H71SZyUKFmQMgY9sWTONUC7LPqvecNp9cmyrzXx4yBQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$wS6Lech_9mldry9NVfPXJRhep2Tn59j09xeQ4B4W1jA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679602731963,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ukUU8LNjaPT3XFKzJk7nI5c9Tm6lTKBYn0QgB9z0IAg"},
{"content":{"body":"< 10 mins for this item","msgtype":"m.text"},"ts":1679603024489,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$GDI-z6Bah-CloVzAxD2Jyq63xEvkD3fMSE4kbEUxnFc"},
{"content":{"body":"Is ns precision useful to scientific calculations, or are they more likely to depend on sub-nanosecond values?","msgtype":"m.text"},"ts":1679603279575,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vcfPZBebwqrRPcPV0SPN1GMRWahHVa4rXGFqFyghKlw"},
{"content":{"body":"re: nanoseconds and microseconds, https://www.youtube.com/watch?v=9eyFDBPk4Yw","msgtype":"m.text"},"ts":1679603295713,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DrZulovh5Ij0bcxD406cqoos1xNJFaDbAbooCy0LYCw"},
{"content":{"body":"More to the point that computer-derived wall clock time isn't the only source of time that `Temporal.Instant` and `.Duration` might be useful for.","format":"org.matrix.custom.html","formatted_body":"More to the point that computer-derived wall clock time isn't the only source of time that <code>Temporal.Instant</code> and <code>.Duration</code> might be useful for.","msgtype":"m.text"},"ts":1679603354012,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$flyNRK0qD6A5iUyLOArHvLvc8vcekrDT0doo3SiTDDg"},
{"content":{"body":"I think the interop case doesn't really relate to durations","msgtype":"m.text"},"ts":1679603397773,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NYq9xfw14H_QU62aA5n4FJRTIuKKmN65l30gyOMZaH4"},
{"content":{"body":"I'm sorry, _quarter_ nanoseconds?","format":"org.matrix.custom.html","formatted_body":"I'm sorry, <em>quarter</em> nanoseconds?","msgtype":"m.text"},"ts":1679603402722,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xtvSQgkDK9riF_IIY_eYy8LGPqBfjrx6xQGIqSApVU4"},
{"content":{"body":"_why_","format":"org.matrix.custom.html","formatted_body":"<em>why</em>","msgtype":"m.text"},"ts":1679603404872,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jst_PVx6MVSD566i13_Dt4rP_4eSNw_X04lCNUbL5bM"},
{"content":{"body":"it fit into the bits?","msgtype":"m.text"},"ts":1679603427689,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QjNL8SoOhWCQ4EU-90dPiIo375kl3EFPd7F92xLjyRE"},
{"content":{"body":"https://github.com/abseil/abseil-cpp/blob/b6de7b80325514018d38de2c4dee1254258c4b31/absl/time/duration.cc#L30-L31","msgtype":"m.text"},"ts":1679603436538,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ICuonE2837j2YGwKU6RfT6HRrDOsPNxyGrFiQerwbHo"},
{"content":{"body":"sigh","msgtype":"m.text"},"ts":1679603438004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3WX2nfYg-tU34w3VCfHXKqni3OzflSnPZfKU3oTBJTU"},
{"content":{"body":"yeah that's the reason","msgtype":"m.text"},"ts":1679603441816,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nknHq1VuBN46_85w1Yd9yShnEGun2LvD6fCkOBDQ2Hw"},
{"content":{"body":"yeah, they decided to do that.. in our equivalent class, we opted just for storing nanoseconds and not quarterns like abseil","msgtype":"m.text"},"ts":1679603505817,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$6ehSUxZS-SRniMnpr_xsk-VX-0KD_UjprvNpzHj_IkI"},
{"content":{"body":"That and the following two lines about calculating fractional nanoseconds, but I suppose that wouldn't matter if they didn't have fractional nanosecond sto begin with.","msgtype":"m.text"},"ts":1679603512120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WnyWtLnAQNoPEj9J43wY9N6OSHh629s3Ktu2W1TfwuQ"},
{"content":{"body":" * That and the following two lines about calculating fractional nanoseconds, but I suppose that wouldn't matter if they didn't have fractional nanoseconds to begin with.","m.new_content":{"body":"That and the following two lines about calculating fractional nanoseconds, but I suppose that wouldn't matter if they didn't have fractional nanoseconds to begin with.","msgtype":"m.text"},"m.relates_to":{"event_id":"$WnyWtLnAQNoPEj9J43wY9N6OSHh629s3Ktu2W1TfwuQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679603519882,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M7nIC-fb3Y4ilhIqtqIgMmU5iM1MnF3AHVqfaU4KJa0"},
{"content":{"body":"that abseil thing exactly characterizes where the interop argument falls down when you tug on the chain","msgtype":"m.text"},"ts":1679603549178,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fMz5sVGnXT39r37Yn5Sydc10l267o9yD9ICRflzcuZs"},
{"content":{"body":"\"why did they do it? well... because it fit\" is not a good first principles argument","msgtype":"m.text"},"ts":1679603560584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YYyZJcE_b288_0pGgy-fLyjrOWpjw2SklzemQe2yyIs"},
{"content":{"body":"but anyways we'll have ns","msgtype":"m.text"},"ts":1679603568289,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$H3Q_LHvz6JekU1IIsF3a0ALPZMYV-ZvVe4Et0p8nxfs"},
{"content":{"body":"does abseil _expose_ that data or just keep it internally for arithmetic?","format":"org.matrix.custom.html","formatted_body":"does abseil <em>expose</em> that data or just keep it internally for arithmetic?","msgtype":"m.text"},"ts":1679603581152,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$6jIG9csX6yLjpucXx2RaSMWziF8cQwrgi7iCKj__A5Q"},
{"content":{"body":"it wasn't just because it fit, but because they stated a need for 0.5 ns + 0.5 ns","msgtype":"m.text"},"ts":1679603604030,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$Y8GkR8o5aWlhC8fu4He00-FjnfgI2Hn7Zr1tz0niWtU"},
{"content":{"body":"they didn't explain *where* they have that requirement","format":"org.matrix.custom.html","formatted_body":"they didn't explain <em>where</em> they have that requirement","msgtype":"m.text"},"ts":1679603609417,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$um19zk1-wwDuJ6aZyJDhhzTaduQPQNy_m9O0tgAxpg0"},
{"content":{"body":"just that it exists","msgtype":"m.text"},"ts":1679603611192,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$zHGRkvKWQ4D6WpeCszAx5u5M7o-EOBf7csz24fzlAX0"},
{"content":{"body":"v8's position is there is no good reason, and certainly not on the web","msgtype":"m.text"},"ts":1679603637203,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$80sCr33o-Tni8qghoUHmwxYPkzCieJx9Y1YnwJaXMiQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> that abseil thing exactly characterizes where the interop argument falls down when you tug on the chain\n\nI think interop where there's no standard is the kind of case where you can choose a preponderance-of-the-evidence kind of thing. ns is \"good enough\" in this sense. That doesn't make it a reductio-ad-absurdum","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$fMz5sVGnXT39r37Yn5Sydc10l267o9yD9ICRflzcuZs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that abseil thing exactly characterizes where the interop argument falls down when you tug on the chain</blockquote></mx-reply>I think interop where there's no standard is the kind of case where you can choose a preponderance-of-the-evidence kind of thing. ns is &quot;good enough&quot; in this sense. That doesn't make it a reductio-ad-absurdum","m.relates_to":{"m.in_reply_to":{"event_id":"$fMz5sVGnXT39r37Yn5Sydc10l267o9yD9ICRflzcuZs"}},"msgtype":"m.text"},"ts":1679603644539,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rxeW1qRhVDF1Az-_6XmK37YSedHJpLcbfHTWjRyUJo4"},
{"content":{"body":"> <@shuyuguo:matrix.org> v8's position is there is no good reason, and certainly not on the web\n\nI think half-microseconds aren't really that implausible to be relevant. Anyway there are lots of times where you're *processing* date/times without measuring them locally.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$80sCr33o-Tni8qghoUHmwxYPkzCieJx9Y1YnwJaXMiQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>v8&#39;s position is there is no good reason, and certainly not on the web</blockquote></mx-reply>I think half-microseconds aren't really that implausible to be relevant. Anyway there are lots of times where you're <em>processing</em> date/times without measuring them locally.","m.relates_to":{"m.in_reply_to":{"event_id":"$80sCr33o-Tni8qghoUHmwxYPkzCieJx9Y1YnwJaXMiQ"}},"msgtype":"m.text"},"ts":1679603667916,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$v6tZuhRagrvXL8E9xZWNJM0x3yj-1G0RFEQ0daOC_Jk"},
{"content":{"body":"the philosophical objection is actually stronger than than \"there might be uses\"","msgtype":"m.text"},"ts":1679603695355,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tKc_IaeFg5_L4zt4npCKhYkbOGCtGIWseuRKtieq3c4"},
{"content":{"body":"it's \"where you think you should be using nanoseconds, you are fooling yourself with the extra precision, with very few exceptions\"","msgtype":"m.text"},"ts":1679603715326,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sGpLRyOVIYd0ZwjIpC0AizoO8t82v-_WYNyVaTZTiZw"},
{"content":{"body":"yeah I guess I see that and don't like the philosophy.","msgtype":"m.text"},"ts":1679603730265,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rokJODLTufrVWoWistgfeZJxJpPuf-t386wA78PxjXU"},
{"content":{"body":"yes, and we don't have consensus on it anyways","msgtype":"m.text"},"ts":1679603742836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0fhT7IXWa5W0cWdF5bkmJ1swcmslpZW--bY7_isr1cY"},
{"content":{"body":"> <@shuyuguo:matrix.org> it's \"where you think you should be using nanoseconds, you are fooling yourself with the extra precision, with very few exceptions\"\n\nexcept where law/regulations say they must be passed around... it's not about philosophy, but about preventing foot guns when moving values from one system to another through js","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sGpLRyOVIYd0ZwjIpC0AizoO8t82v-_WYNyVaTZTiZw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>it&#39;s &quot;where you think you should be using nanoseconds, you are fooling yourself with the extra precision, with very few exceptions&quot;</blockquote></mx-reply>except where law/regulations say they must be passed around... it's not about philosophy, but about preventing foot guns when moving values from one system to another through js","m.relates_to":{"m.in_reply_to":{"event_id":"$sGpLRyOVIYd0ZwjIpC0AizoO8t82v-_WYNyVaTZTiZw"}},"msgtype":"m.text"},"ts":1679603748599,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$zbW1N_JcjzrKLSyulgKREw0ONe3p3yNgmmP15P7ogxo"},
{"content":{"body":"that doesn't relate to temporal","msgtype":"m.text"},"ts":1679603759041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Assfw7X3FYHL_7Ux6zb1V3yog-0nBtDAuKCT2MIDsZE"},
{"content":{"body":"you can use BigInts","msgtype":"m.text"},"ts":1679603762270,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LZf8XR0cmn4R1tflXJye6XwdYApy_UkVVKogSbyfprM"},
{"content":{"body":"> <@shuyuguo:matrix.org> yes, and we don't have consensus on it anyways\n\nwell, I am glad you all brought the point up anyway, and that we were able to discuss it and come to a conclusion","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0fhT7IXWa5W0cWdF5bkmJ1swcmslpZW--bY7_isr1cY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>yes, and we don&#39;t have consensus on it anyways</blockquote></mx-reply>well, I am glad you all brought the point up anyway, and that we were able to discuss it and come to a conclusion","m.relates_to":{"m.in_reply_to":{"event_id":"$0fhT7IXWa5W0cWdF5bkmJ1swcmslpZW--bY7_isr1cY"}},"msgtype":"m.text"},"ts":1679603777016,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3JPYWFeUuW1TykZ_etX1P9uIT7-xwlbQUlV1Olzz5OU"},
{"content":{"body":"> <@apaprocki:matrix.org> except where law/regulations say they must be passed around... it's not about philosophy, but about preventing foot guns when moving values from one system to another through js\n\ni don't understand this argument, you and others have repeatedly brought this up. why... are people shoehorning everything that represents time into Temporal data types?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zbW1N_JcjzrKLSyulgKREw0ONe3p3yNgmmP15P7ogxo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br>except where law/regulations say they must be passed around... it's not about philosophy, but about preventing foot guns when moving values from one system to another through js</blockquote></mx-reply>i don't understand this argument, you and others have repeatedly brought this up. why... are people shoehorning everything that represents time into Temporal data types?","m.relates_to":{"m.in_reply_to":{"event_id":"$zbW1N_JcjzrKLSyulgKREw0ONe3p3yNgmmP15P7ogxo"}},"msgtype":"m.text"},"ts":1679603812725,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s5nggGrF0bJhKqRma6V4MpfJVh4Aqwvnv8LC50BPDhM"},
{"content":{"body":"like ns timestamps don't need the extra complexity of tepmoral","msgtype":"m.text"},"ts":1679603822710,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mq7XuzdxLA4bEePilBxnjYeZOWx_3l-EQDYsjt-kvTo"},
{"content":{"body":"sometimes it's formatting","msgtype":"m.text"},"ts":1679603828784,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$z4HJI9_EVEuhpOUCMJGoiz9xTXBSB-Jmgj0urAg4SDs"},
{"content":{"body":"which... is a different thing?","msgtype":"m.text"},"ts":1679603832198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qVa2jFDeAeQdYSBw3C_r0p3ozjqcOIdUijwUEk9mPhE"},
{"content":{"body":" * like ns timestamps don't need the extra complexity of temporal","m.new_content":{"body":"like ns timestamps don't need the extra complexity of temporal","msgtype":"m.text"},"m.relates_to":{"event_id":"$mq7XuzdxLA4bEePilBxnjYeZOWx_3l-EQDYsjt-kvTo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679603845789,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0LiHYlbUHWHG1jEiTdIpzVozAjIpCsobZhmO2_WpzKI"},
{"content":{"body":"because you are generically binding to typed database tables or schemas for services, etc. it's a giant foot gun if developers can't take a duration from Postgres and represent it as a duration in js without loss","msgtype":"m.text"},"ts":1679603858333,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$W5ZCtcHJXDaupUkuJi_8qC9eIX_-KqSiCHISo0R9dv8"},
{"content":{"body":"somehow knowing they need to *not* use the built-in type and use a string or unrelated type.. it's extremely not ergonomic","format":"org.matrix.custom.html","formatted_body":"somehow knowing they need to <em>not</em> use the built-in type and use a string or unrelated type.. it's extremely not ergonomic","msgtype":"m.text"},"ts":1679603879524,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$yWs3YXZWmZoVtCQ5fIln0Ei839HgzM7agM31zco-m4U"},
{"content":{"body":"this is one of the key reasons for it being in the standard library rather than just telling people to use Moment","msgtype":"m.text"},"ts":1679603910519,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rAWtuvN1tfu5o_nxmBJpciizN-6lKC0SG4r-foUNL5U"},
{"content":{"body":"first of all, postgres is ms precision?","msgtype":"m.text"},"ts":1679603923249,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w5oQDjdzEF70UPGVDCwyhBXjVLq2y68-E6t8PjaxHKU"},
{"content":{"body":"Indiana has (at least) 11 time zones: https://en.wikipedia.org/wiki/Time_in_Indiana","msgtype":"m.text"},"ts":1679603927382,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$Tsh-SaOkHFWPH_RP_J9CwpzxSBES4_Sx_qYLhJn1e9o"},
{"content":{"body":"> <@shuyuguo:matrix.org> first of all, postgres is ms precision?\n\nno, everything now uses ns","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$w5oQDjdzEF70UPGVDCwyhBXjVLq2y68-E6t8PjaxHKU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>first of all, postgres is ms precision?</blockquote></mx-reply>no, everything now uses ns","m.relates_to":{"m.in_reply_to":{"event_id":"$w5oQDjdzEF70UPGVDCwyhBXjVLq2y68-E6t8PjaxHKU"}},"msgtype":"m.text"},"ts":1679603942460,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$Ecap1xjQaXE2xV_EQINEqMnxKfXlTpY3Tb93JyrDf1E"},
{"content":{"body":"🙊","msgtype":"m.text"},"ts":1679603947599,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$xzMristlQS6Ihq2BTzq50vNegS536ToalJ3Njn1MvOw"},
{"content":{"body":"oh really?","msgtype":"m.text"},"ts":1679603948207,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tPvG-em3Vji2ffjMfeidgZwSLZ_6R9Scd42ow0-QLM8"},
{"content":{"body":"yes.. haven't found a modern system that hasn't already upgraded (if they didn't start out ns)","msgtype":"m.text"},"ts":1679603962827,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$EjXl3EqB_fnHp9XfKEwa-xpXyvVho_iUMdYS9joyTfE"},
{"content":{"body":"like rust had the benefit of starting with ns because it started much later, but python upgraded over time via PEPs","msgtype":"m.text"},"ts":1679603983073,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$zWkdiEUn2h4Gzv1tnyNL9OhB-HOoJVAdf3VsvKbFuEg"},
{"content":{"body":"anyway we're not going down microseconds road","msgtype":"m.text"},"ts":1679604013852,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lg2XNaY3kibxlNyDRbNRUlPWKnJYL7Cms3Qt_ctpU-w"},
{"content":{"body":"> <@apaprocki:matrix.org> no, everything now uses ns\n\nhm https://www.postgresql.org/docs/current/datatype-datetime.html","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Ecap1xjQaXE2xV_EQINEqMnxKfXlTpY3Tb93JyrDf1E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br>no, everything now uses ns</blockquote></mx-reply>hm https://www.postgresql.org/docs/current/datatype-datetime.html","m.relates_to":{"m.in_reply_to":{"event_id":"$Ecap1xjQaXE2xV_EQINEqMnxKfXlTpY3Tb93JyrDf1E"}},"msgtype":"m.text"},"ts":1679604015209,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pQFuKJ4nQWNw5ruM9DizmPC60p2onr8_HQAEVk6Tu5c"},
{"content":{"body":"and i would like to evict this conversation from my brain","msgtype":"m.text"},"ts":1679604027765,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$W1sJibhfY3oW4eDp2QC1UouFw8yq3-EkJuzFfGUG3xE"},
{"content":{"body":"shu: good good, gotta make room for the conversation about time zone name canonicalization differences between TZDB and CLDR","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: good good, gotta make room for the conversation about time zone name canonicalization differences between TZDB and CLDR","msgtype":"m.text"},"ts":1679604049285,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1D7yRoqln-uyW8odmNXVMqrxO-CBgMgHosCRn-R3EqE"},
{"content":{"body":"i am having lunch","msgtype":"m.text"},"ts":1679604056589,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jai7uXPxN6ApTBkKaSPlvvyG-fl_nyzBV4ZyiUhApUg"},
{"content":{"body":"> <@bakkot:matrix.org> hm https://www.postgresql.org/docs/current/datatype-datetime.html\n\n\"time, timestamp, and interval accept an optional precision value p which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of p is from 0 to 6.\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pQFuKJ4nQWNw5ruM9DizmPC60p2onr8_HQAEVk6Tu5c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>hm https://www.postgresql.org/docs/current/datatype-datetime.html</blockquote></mx-reply>&quot;time, timestamp, and interval accept an optional precision value p which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of p is from 0 to 6.&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$pQFuKJ4nQWNw5ruM9DizmPC60p2onr8_HQAEVk6Tu5c"}},"msgtype":"m.text"},"ts":1679604113716,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$Kf4Uzyjxo1vkwDTdZ70ZELz8O-Lssoz8MUFkNCR0nKo"},
{"content":{"body":"there is an extension that allows up to 9","msgtype":"m.text"},"ts":1679604190365,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$xCIYn-Z5j-V1GiI70Z8I_PztrkbySrVzSuMCPBMe4ok"},
{"content":{"body":"ah that's what I get for not reading past the table","msgtype":"m.text"},"ts":1679604192187,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dMlSwd1IvgRqMcdbmP5XgShPApJcl9ZRs5Zuupyk_Kg"},
{"content":{"body":"> <@apaprocki:matrix.org> there is an extension that allows up to 9\n\nhttps://github.com/fvannee/timestamp9","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$xCIYn-Z5j-V1GiI70Z8I_PztrkbySrVzSuMCPBMe4ok?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br>there is an extension that allows up to 9</blockquote></mx-reply>https://github.com/fvannee/timestamp9","m.relates_to":{"m.in_reply_to":{"event_id":"$xCIYn-Z5j-V1GiI70Z8I_PztrkbySrVzSuMCPBMe4ok"}},"msgtype":"m.text"},"ts":1679604285527,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$EqfGc9tEPAmvso2t57w-qV1oIZCFQDHRiSw1QiCcUxU"},
{"content":{"body":"there's a bit of drift between databases (unlike programming languages).. oracle supports ns fully, mssql is 100 ns precision iirc, but the point is that they are < 1us","msgtype":"m.text"},"ts":1679604394626,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$RVUNMSRaH1hqEVh4c5oOtj4dKfFZ19mSkRUHaFNFpcY"},
{"content":{"body":"10 mins on this item","msgtype":"m.text"},"ts":1679604783364,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Qs-o9Z2mK8kAAT69R9YqbHO2Vh_K4qejMc85ZP7YlBY"},
{"content":{"body":"justingrant: thanks for doing this! Literally just starting the 2023a firedrill right now... :D","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a>: thanks for doing this! Literally just starting the 2023a firedrill right now... :D","msgtype":"m.text"},"ts":1679605533092,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$ceWXhhY_d47D2cR8o5RRpBzCLr2zXucjaguiZR-OWFk"},
{"content":{"body":"how do people feel about parameter decorators","msgtype":"m.text"},"ts":1679605837755,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ"},
{"content":{"body":"cautiously... cautious","msgtype":"m.text"},"ts":1679605857300,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$J3C3aYRWxGsVMHWKfDXmqgxGHKSMfKSzP3-jTPw1zOc"},
{"content":{"body":"> <@apaprocki:matrix.org> justingrant: thanks for doing this! Literally just starting the 2023a firedrill right now... :D\n\nThanks!  Hopefully this proposal can reduce the firedrill pain in the future. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ceWXhhY_d47D2cR8o5RRpBzCLr2zXucjaguiZR-OWFk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@apaprocki:matrix.org\">@apaprocki:matrix.org</a><br><a href=\"https://matrix.to/#/@justingrant:matrix.org\">justingrant</a>: thanks for doing this! Literally just starting the 2023a firedrill right now... :D</blockquote></mx-reply>Thanks!  Hopefully this proposal can reduce the firedrill pain in the future.","m.relates_to":{"m.in_reply_to":{"event_id":"$ceWXhhY_d47D2cR8o5RRpBzCLr2zXucjaguiZR-OWFk"}},"msgtype":"m.text"},"ts":1679605927221,"senderName":"justingrant","senderId":"@justingrant:matrix.org","id":"$9NgpbGLNqnRCyHvof6xsKy0DghhL6lFbL9HngzUgw8s"},
{"content":{"body":"i feel a lot better about parameter decorators than i do about supporting DI patterns","msgtype":"m.text"},"ts":1679606039576,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bu8Vi1oV_VpW1zbkI4Od1Wob3l3OA4iSYpN9GOpIoQ0"},
{"content":{"body":"> <@bakkot:matrix.org> how do people feel about parameter decorators\n\nsomewhere between \"maybe okay if sufficiently restricted\" and \"i'm straight up not having a good time\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>how do people feel about parameter decorators</blockquote></mx-reply>somewhere between &quot;maybe okay if sufficiently restricted&quot; and &quot;i'm straight up not having a good time&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ"}},"msgtype":"m.text"},"ts":1679606039931,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DFBsDCAHEPWZcWlori4GIS8dDZTTfy5D4gKSUY4blZ8"},
{"content":{"body":" * i feel a lot better about parameter decorators than i do about supporting/encouraging DI patterns","m.new_content":{"body":"i feel a lot better about parameter decorators than i do about supporting/encouraging DI patterns","msgtype":"m.text"},"m.relates_to":{"event_id":"$bu8Vi1oV_VpW1zbkI4Od1Wob3l3OA4iSYpN9GOpIoQ0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679606048440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Pc2Ol2AR9ShexPLEd_Ktb7t5vygsGMEWOHtu_5bxPQY"},
{"content":{"body":"something i *do* want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose","format":"org.matrix.custom.html","formatted_body":"something i <em>do</em> want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose","msgtype":"m.text"},"ts":1679606254568,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js"},
{"content":{"body":"> <@ljharb:matrix.org> something i *do* want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose\n\nCould that class decorator know the *name* of those constructor parameters?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br/>something i <em>do</em> want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose</blockquote></mx-reply>Could that class decorator know the <em>name</em> of those constructor parameters?","im.nheko.relations.v1.relations":[{"event_id":"$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js"}},"msgtype":"m.text"},"ts":1679606303241,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$h_vy0VbLzW5hlAUetE3kOPtsbKVTU2EduUj205kV0Vc"},
{"content":{"body":"> <@bakkot:matrix.org> how do people feel about parameter decorators\n\nWe discussed it in JSCIG meeting and it seems many TS users like it .","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>how do people feel about parameter decorators</blockquote></mx-reply>We discussed it in JSCIG meeting and it seems many TS users like it .","m.relates_to":{"m.in_reply_to":{"event_id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ"}},"msgtype":"m.text"},"ts":1679606306532,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$_AVfKwrjIp-46V8qEOU2K5AAEStfcJofVDBm_RuSCMw"},
{"content":{"body":"> <@bakkot:matrix.org> how do people feel about parameter decorators\n\nThey seem kinda cool but I really want function decorators and, separately, extractors/pattern matching, which are kind of in adjacent spaces. Probably all of this eventually; I don't know how to prioritize.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>how do people feel about parameter decorators</blockquote></mx-reply>They seem kinda cool but I really want function decorators and, separately, extractors/pattern matching, which are kind of in adjacent spaces. Probably all of this eventually; I don't know how to prioritize.","m.relates_to":{"m.in_reply_to":{"event_id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ"}},"msgtype":"m.text"},"ts":1679606337904,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9Kh8bMOI2T4aGKDVPLvaRD-aeoefAQu4v-h3AckjeAM"},
{"content":{"body":"> <@phryneas:matrix.org> Could that class decorator know the *name* of those constructor parameters?\n\nin my ideal world an explicit constructor would be omitted, so the class decorator would define the names","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h_vy0VbLzW5hlAUetE3kOPtsbKVTU2EduUj205kV0Vc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@phryneas:matrix.org\">@phryneas:matrix.org</a><br>Could that class decorator know the <em>name</em> of those constructor parameters?</blockquote></mx-reply>in my ideal world an explicit constructor would be omitted, so the class decorator would define the names","m.relates_to":{"m.in_reply_to":{"event_id":"$h_vy0VbLzW5hlAUetE3kOPtsbKVTU2EduUj205kV0Vc"}},"msgtype":"m.text"},"ts":1679606378146,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oAihcWVUAI_-xrrbUublTvgXgG0hOXB7OOznIjyrOX4"},
{"content":{"body":"parameter decorators, or something else in this space, are definitely part of the program of, \"how do we find a standard, unified way to solve all of the problems that people are widely doing through language extensions\"","msgtype":"m.text"},"ts":1679606381495,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YPbmM6uKTqCUkZqrSB9KswC_GepkMrXUfBB05nLS2Wk"},
{"content":{"body":"as a general philosophy i do not want more and more metaprogramming needing to be supported at runtime","msgtype":"m.text"},"ts":1679606385365,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rgVOexrnyuT8wKeR1R0jgmoiLmFHCnDzcKKZ47W2OiI"},
{"content":{"body":"I also want function decorators. 😀 ","msgtype":"m.text"},"ts":1679606385383,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$kOU0nT3Z3iRZr1bWGmbcXjRKrmj7ipzvrz6IEilxvME"},
{"content":{"body":"> <@bakkot:matrix.org> how do people feel about parameter decorators\n\nThey are very commonly used in code I have touched over the last few years. I think the code would have been significantly more complicated without them.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br/>how do people feel about parameter decorators</blockquote></mx-reply>They are very commonly used in code I have touched over the last few years. I think the code would have been significantly more complicated without them.","im.nheko.relations.v1.relations":[{"event_id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$05SZeylhQ84nDJo24wNpynGteM9ENfFbrnt9VDFVYbQ"}},"msgtype":"m.text"},"ts":1679606391715,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$iq9ff2TWtl7ae1eZACHxPMnWOYgkwI1N-dnHPXx_EaA"},
{"content":{"body":"my hot take is that we need to standardize different phases of evaluation in JS","msgtype":"m.text"},"ts":1679606414050,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kLxOcLogz_ExYAV1mUL2JXTQuDcY7gB6vxc7dYO4tfo"},
{"content":{"body":"> <@phryneas:matrix.org> They are very commonly used in code I have touched over the last few years. I think the code would have been significantly more complicated without them.\n\nI have the exact opposite experience","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$iq9ff2TWtl7ae1eZACHxPMnWOYgkwI1N-dnHPXx_EaA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@phryneas:matrix.org\">@phryneas:matrix.org</a><br>They are very commonly used in code I have touched over the last few years. I think the code would have been significantly more complicated without them.</blockquote></mx-reply>I have the exact opposite experience","m.relates_to":{"m.in_reply_to":{"event_id":"$iq9ff2TWtl7ae1eZACHxPMnWOYgkwI1N-dnHPXx_EaA"}},"msgtype":"m.text"},"ts":1679606419270,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Igy7AeZMaCCjB1JBVCXFDdq8SdBcSZPPvZFFGVOzpc4"},
{"content":{"body":"> <@littledan:matrix.org> parameter decorators, or something else in this space, are definitely part of the program of, \"how do we find a standard, unified way to solve all of the problems that people are widely doing through language extensions\"\n\nwait I don't want that program","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YPbmM6uKTqCUkZqrSB9KswC_GepkMrXUfBB05nLS2Wk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>parameter decorators, or something else in this space, are definitely part of the program of, &quot;how do we find a standard, unified way to solve all of the problems that people are widely doing through language extensions&quot;</blockquote></mx-reply>wait I don't want that program","m.relates_to":{"m.in_reply_to":{"event_id":"$YPbmM6uKTqCUkZqrSB9KswC_GepkMrXUfBB05nLS2Wk"}},"msgtype":"m.text"},"ts":1679606473271,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$t5zDUWcnCACOoIewW4jeT8hoavrtiMHyR0y0qsi-kwk"},
{"content":{"body":"I never signed up for that program","msgtype":"m.text"},"ts":1679606476551,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SadEmPwCtlTrbsFA-RLvSq6TgdERUcRbovU8WIxO6Uo"},
{"content":{"body":"> <@shuyuguo:matrix.org> as a general philosophy i do not want more and more metaprogramming needing to be supported at runtime\n\nIt seems if we have class decorators, people eventually would ask for \"decorate everything\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rgVOexrnyuT8wKeR1R0jgmoiLmFHCnDzcKKZ47W2OiI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>as a general philosophy i do not want more and more metaprogramming needing to be supported at runtime</blockquote></mx-reply>It seems if we have class decorators, people eventually would ask for &quot;decorate everything&quot;.","m.relates_to":{"m.in_reply_to":{"event_id":"$rgVOexrnyuT8wKeR1R0jgmoiLmFHCnDzcKKZ47W2OiI"}},"msgtype":"m.text"},"ts":1679606488882,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$cqRUWIYieJ-3jjLKdNmi4fRwpAHOMvMGXEpctbj-apw"},
{"content":{"body":"I am explicitly opposed to solving all of the problems that people are doing through language extensions","msgtype":"m.text"},"ts":1679606493079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UZHBqG6hMEjH_WoXND9jdTmF97LuD7X7SWTxC7-vl5E"},
{"content":{"body":"showing me lots of code examples that are ExcessiveNounHavers doesn't make me feel good about the patterns :-/","msgtype":"m.text"},"ts":1679606495413,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P_NtlvRbh-fUIE_4n0JvLbGeYSelqa2OagLYZI6XBcs"},
{"content":{"body":"> <@haxjs:matrix.org> It seems if we have class decorators, people eventually would ask for \"decorate everything\".\n\nand?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cqRUWIYieJ-3jjLKdNmi4fRwpAHOMvMGXEpctbj-apw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>It seems if we have class decorators, people eventually would ask for \"decorate everything\".</blockquote></mx-reply>and?","m.relates_to":{"m.in_reply_to":{"event_id":"$cqRUWIYieJ-3jjLKdNmi4fRwpAHOMvMGXEpctbj-apw"}},"msgtype":"m.text"},"ts":1679606505358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9b11kMR7kB0-7gzeM_-L3DeeEHko3PlcNm7r9BbSzUY"},
{"content":{"body":"> <@bakkot:matrix.org> I am explicitly opposed to solving all of the problems that people are doing through language extensions\n\nnot all, just the good ones. And sometimes doing things differently, for sure.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UZHBqG6hMEjH_WoXND9jdTmF97LuD7X7SWTxC7-vl5E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I am explicitly opposed to solving all of the problems that people are doing through language extensions</blockquote></mx-reply>not all, just the good ones. And sometimes doing things differently, for sure.","m.relates_to":{"m.in_reply_to":{"event_id":"$UZHBqG6hMEjH_WoXND9jdTmF97LuD7X7SWTxC7-vl5E"}},"msgtype":"m.text"},"ts":1679606510121,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oWu0WIWTb7UIus_uDzpgrItCVQwn2sKOJNbxbujm_ek"},
{"content":{"body":" * showing me lots of code examples that are ExcessiveNounHavers doesn't make me feel good about the patterns :-/\n\njust because a lot of people write X code in JS doesn't mean JS should support patterns common in X codebases.","m.new_content":{"body":"showing me lots of code examples that are ExcessiveNounHavers doesn't make me feel good about the patterns :-/\n\njust because a lot of people write X code in JS doesn't mean JS should support patterns common in X codebases.","msgtype":"m.text"},"m.relates_to":{"event_id":"$P_NtlvRbh-fUIE_4n0JvLbGeYSelqa2OagLYZI6XBcs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679606531017,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GfCsUiWoXSYZJNLWfPnGYDpEfhnynZ8tEquJcEA9wUc"},
{"content":{"body":"I'm generally apprehensive about too much hidden magic that makes grok difficult for grug brain","msgtype":"m.text"},"ts":1679606533691,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$la1c-9FdQ-xcXLOiGVWKfdIf7vROsJn-msXkmkVjgOg"},
{"content":{"body":"sorry i'm being very flippant this meeting","msgtype":"m.text"},"ts":1679606541003,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Lt_joqSMlSRK32EtXKICtqu1lPHXZxkpHtSzyN8DhMo"},
{"content":{"body":"DI is the canonical example of hidden magic ime","msgtype":"m.text"},"ts":1679606547264,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dWulJV26rfF1yySUHFM-fuBNo-stSqD3bIc485K1bxQ"},
{"content":{"body":"> <@bakkot:matrix.org> I have the exact opposite experience\n\nNestJS has some very nice usages, fore example the `@Param` decorator in route handlers: https://docs.nestjs.com/controllers\n```js\n\n@Get(':id')\nfindOne(@Param('id') id: string): string {\n  return `This action returns a #${id} cat`;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Igy7AeZMaCCjB1JBVCXFDdq8SdBcSZPPvZFFGVOzpc4\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br/>I have the exact opposite experience</blockquote></mx-reply><p>NestJS has some very nice usages, fore example the <code>@Param</code> decorator in route handlers: <a href=\"https://docs.nestjs.com/controllers\">https://docs.nestjs.com/controllers</a></p>\n<pre><code class=\"language-js\">\n@Get(':id')\nfindOne(@Param('id') id: string): string {\n  return `This action returns a #${id} cat`;\n}\n</code></pre>","im.nheko.relations.v1.relations":[{"event_id":"$Igy7AeZMaCCjB1JBVCXFDdq8SdBcSZPPvZFFGVOzpc4","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$Igy7AeZMaCCjB1JBVCXFDdq8SdBcSZPPvZFFGVOzpc4"}},"msgtype":"m.text"},"ts":1679606556016,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$65hZo4itFdGOwqAe2dMo4iyHWE7NXbXt44A3BE5BzYc"},
{"content":{"body":"like I have used it in talks as an example of that thing","msgtype":"m.text"},"ts":1679606556225,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZuoyvugoYlX4I4guTKwgnb6yfTTK2nqAH7GZwa6TcAI"},
{"content":{"body":"yes","msgtype":"m.text"},"ts":1679606568082,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AMHd5FWBql6Rgsf41ebMdxEHDnHekteggedviu8-OQo"},
{"content":{"body":"> <@phryneas:matrix.org> NestJS has some very nice usages, fore example the `@Param` decorator in route handlers: https://docs.nestjs.com/controllers\n> ```js\n> \n> @Get(':id')\n> findOne(@Param('id') id: string): string {\n>   return `This action returns a #${id} cat`;\n> }\n> ```\n\nyou and I have a different understanding of what counts as \"nice\", I think","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$65hZo4itFdGOwqAe2dMo4iyHWE7NXbXt44A3BE5BzYc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@phryneas:matrix.org\">@phryneas:matrix.org</a><br><p>NestJS has some very nice usages, fore example the <code>@Param</code> decorator in route handlers: <a href=\"https://docs.nestjs.com/controllers\">https://docs.nestjs.com/controllers</a></p>\n<pre><code class=\"language-js\">\n@Get(':id')\nfindOne(@Param('id') id: string): string {\n  return `This action returns a #${id} cat`;\n}\n</code></pre></blockquote></mx-reply>you and I have a different understanding of what counts as &quot;nice&quot;, I think","m.relates_to":{"m.in_reply_to":{"event_id":"$65hZo4itFdGOwqAe2dMo4iyHWE7NXbXt44A3BE5BzYc"}},"msgtype":"m.text"},"ts":1679606569570,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$KaGNnEoP8kSTTLoYtfXUdi4XmsHAXTL1fVE80kYiz4A"},
{"content":{"body":"But I agree that there are very ugly examples as well","msgtype":"m.text"},"ts":1679606573631,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$HvXoCLtpBkTi_vCtawReqFHhBdSJ4sslAcGSXC4hLsU"},
{"content":{"body":"more generally this all strikes me as optimizing for the author","msgtype":"m.text"},"ts":1679606579202,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rURgUDUhnQSktVFG41Os1spzL3AGsKI0Lr7M7hXuU8Q"},
{"content":{"body":"> <@bakkot:matrix.org> DI is the canonical example of hidden magic ime\n\nwell, unfortunately for you (maybe), we already enabled Ember's instance field decorator-style DI through field decorators!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$dWulJV26rfF1yySUHFM-fuBNo-stSqD3bIc485K1bxQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>DI is the canonical example of hidden magic ime</blockquote></mx-reply>well, unfortunately for you (maybe), we already enabled Ember's instance field decorator-style DI through field decorators!","m.relates_to":{"m.in_reply_to":{"event_id":"$dWulJV26rfF1yySUHFM-fuBNo-stSqD3bIc485K1bxQ"}},"msgtype":"m.text"},"ts":1679606580468,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vDOe0G1l-nxeNytK8r8pulpV1Zza6yRgHly-tKMfIMw"},
{"content":{"body":"which is the wrong audience to optimize for","msgtype":"m.text"},"ts":1679606583027,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RdQX8M-yECnC4sBmZGCGKhQW5kRIQDbWpekiuFSfLUk"},
{"content":{"body":"sometimes it's, like, not too bad","msgtype":"m.text"},"ts":1679606596505,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SmKiRfcjwltTjAlR6MUxqOAgiqxc5KJ8sS5b2pklRWo"},
{"content":{"body":"in this case it is bad","msgtype":"m.text"},"ts":1679606598166,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n43fBZULErr3lDdFKQVo6SlNKT7gPtMlFXSVZOhEgTU"},
{"content":{"body":"I do have to admit that, with decorators evaluated at class evaluation time, they are sort of a better fit than extractors/pattern matching evaluated each time the function runs.","msgtype":"m.text"},"ts":1679606620313,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8l7wuJIpWC8Dmfvt0zlsPNgAG-X1YrEtcpJ_4EnCS5s"},
{"content":{"body":"i think param decorators and param pattern matching something are quite different","msgtype":"m.text"},"ts":1679606646285,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ox7yf4CHPOU9hwc13v8j2KS5-6kEaMVV1pJw_4DqIXE"},
{"content":{"body":"the use cases, anyways, even if the capabilities are similar","msgtype":"m.text"},"ts":1679606656672,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$nan0Qj6eeWXTcBdPJGOsgTHcRizIBZDXNHbgeoi9lh8"},
{"content":{"body":" * i think param decorators and param pattern matching/extractor \"something\" are quite different","m.new_content":{"body":"i think param decorators and param pattern matching/extractor \"something\" are quite different","msgtype":"m.text"},"m.relates_to":{"event_id":"$ox7yf4CHPOU9hwc13v8j2KS5-6kEaMVV1pJw_4DqIXE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679606673749,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ZzMMsCGjFkkke8DxlgvVW_KE5q0oshZnISXq5ZPCn1Y"},
{"content":{"body":"> <@shuyuguo:matrix.org> more generally this all strikes me as optimizing for the author\n\n??? isn't this sort of a core goal of programming language design? Like, if it's at the expense of the end user (e.g., for performance), then that's bad, but all else being equal, we do want to optimize for the author?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$rURgUDUhnQSktVFG41Os1spzL3AGsKI0Lr7M7hXuU8Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>more generally this all strikes me as optimizing for the author</blockquote></mx-reply>??? isn't this sort of a core goal of programming language design? Like, if it's at the expense of the end user (e.g., for performance), then that's bad, but all else being equal, we do want to optimize for the author?","m.relates_to":{"m.in_reply_to":{"event_id":"$rURgUDUhnQSktVFG41Os1spzL3AGsKI0Lr7M7hXuU8Q"}},"msgtype":"m.text"},"ts":1679606682870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8T8z1TDtFSVvBucbtWwC-zerR3NjhA8huSLbK63a6z8"},
{"content":{"body":"imo we want to optimize for the person reading/maintaining the code *after* the author produces it","format":"org.matrix.custom.html","formatted_body":"imo we want to optimize for the person reading/maintaining the code <em>after</em> the author produces it","msgtype":"m.text"},"ts":1679606705287,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$97xWotiwJ6WT_WMyZLm0RvezKSZep9xM4WwefAujgQQ"},
{"content":{"body":"> <@littledan:matrix.org> ??? isn't this sort of a core goal of programming language design? Like, if it's at the expense of the end user (e.g., for performance), then that's bad, but all else being equal, we do want to optimize for the author?\n\nno we mostly want to optimize for the reader","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8T8z1TDtFSVvBucbtWwC-zerR3NjhA8huSLbK63a6z8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>??? isn't this sort of a core goal of programming language design? Like, if it's at the expense of the end user (e.g., for performance), then that's bad, but all else being equal, we do want to optimize for the author?</blockquote></mx-reply>no we mostly want to optimize for the reader","m.relates_to":{"m.in_reply_to":{"event_id":"$8T8z1TDtFSVvBucbtWwC-zerR3NjhA8huSLbK63a6z8"}},"msgtype":"m.text"},"ts":1679606707670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CAUNswS2SyI5ZfRRbXdIPSwmcwBedKOyzXzBpWDnkkE"},
{"content":{"body":" * imo we want to optimize for the person reading/maintaining the code _after_ the author produces it\n\nthat's a far more frequent and important audience.","format":"org.matrix.custom.html","formatted_body":" * <p>imo we want to optimize for the person reading/maintaining the code <em>after</em> the author produces it</p>\n<p>that's a far more frequent and important audience.</p>\n","m.new_content":{"body":"imo we want to optimize for the person reading/maintaining the code _after_ the author produces it\n\nthat's a far more frequent and important audience.","format":"org.matrix.custom.html","formatted_body":"<p>imo we want to optimize for the person reading/maintaining the code <em>after</em> the author produces it</p>\n<p>that's a far more frequent and important audience.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$97xWotiwJ6WT_WMyZLm0RvezKSZep9xM4WwefAujgQQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679606715878,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-ydgdeJfqVDHeUKwA1SNg2C5goTI8sVnwgFrb6OOmqk"},
{"content":{"body":"iow, writability < < < readability","msgtype":"m.text"},"ts":1679606720533,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Xx7ttDDw1fPfEu3ooLG40uOmiYWUOTisZuHF9lrh92I"},
{"content":{"body":"oh you meant author at the expense of reader!","msgtype":"m.text"},"ts":1679606722053,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_7xxQrRwxxChinVZs8JpNiym-15TTopRLU9JVEd4Z50"},
{"content":{"body":"yes, correct","msgtype":"m.text"},"ts":1679606725190,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RJSctsHTBFuAuQDimg-V4n57nlzL1rueVj2JpFpaoc0"},
{"content":{"body":"I was also a little confused","msgtype":"m.text"},"ts":1679606735732,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$GXhFXpDyBMvwNPR0D9yhlN1DZo9RDecnPkJVrw7AoS4"},
{"content":{"body":"maybe all the Daniels were confused","msgtype":"m.text"},"ts":1679606742061,"senderName":"danielrosenwasser","senderId":"@danielrosenwasser:matrix.org","id":"$Oq78Wnq0OtrRAz1-yqkTMyi2W5xzGlvhm-5R_2wvee0"},
{"content":{"body":"> <@ljharb:matrix.org> imo we want to optimize for the person reading/maintaining the code _after_ the author produces it\n> \n> that's a far more frequent and important audience.\n\ncounterpoint:  that's often the same audience","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$97xWotiwJ6WT_WMyZLm0RvezKSZep9xM4WwefAujgQQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>imo we want to optimize for the person reading/maintaining the code <em>after</em> the author produces it</p>\n<p>that's a far more frequent and important audience.</p>\n</blockquote></mx-reply>counterpoint:  that's often the same audience","m.relates_to":{"m.in_reply_to":{"event_id":"$97xWotiwJ6WT_WMyZLm0RvezKSZep9xM4WwefAujgQQ"}},"msgtype":"m.text"},"ts":1679606748032,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$It2ISfE5AI4Qxec6z0QaKSXe0eMmccF8oml3s11-gTc"},
{"content":{"body":"code that's easy to write but hard to read is not what i would call good code","msgtype":"m.text"},"ts":1679606751118,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Nw4MwFDu5-w_MMOXDjyzoKT64PhBi-mkXK_BIiiXD38"},
{"content":{"body":"sorry, not author vis a vis user, but writer vs reader","msgtype":"m.text"},"ts":1679606755298,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4tSCqhmVJX_1FADgInsHH5SV87f-LGUoLVX4FR4hh8A"},
{"content":{"body":"> <@softwarechris:matrix.org> counterpoint:  that's often the same audience\n\n\"me\" and \"me in 6 months\" are not the same audience, and \"met in 6 months\" is often angry at the code i write","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$It2ISfE5AI4Qxec6z0QaKSXe0eMmccF8oml3s11-gTc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>counterpoint:  that's often the same audience</blockquote></mx-reply>&quot;me&quot; and &quot;me in 6 months&quot; are not the same audience, and &quot;met in 6 months&quot; is often angry at the code i write","m.relates_to":{"m.in_reply_to":{"event_id":"$It2ISfE5AI4Qxec6z0QaKSXe0eMmccF8oml3s11-gTc"}},"msgtype":"m.text"},"ts":1679606764965,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dW_vKRyBXPy1-zOFqSB3WoCJ39Ru3Meubqt-FTqCAEs"},
{"content":{"body":"Yeah, I mean, I wouldn't really be a fan of some of the decorators used in this presentation","msgtype":"m.text"},"ts":1679606767849,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zIyecjS2XHJ0zOIAlwq0eX6T16hQ1homvrXoXz7DzmY"},
{"content":{"body":"> <@shuyuguo:matrix.org> and?\n\nAnd I think it's reasonable to have param decorators, function decorators, etc. if we support class decorators...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9b11kMR7kB0-7gzeM_-L3DeeEHko3PlcNm7r9BbSzUY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and?</blockquote></mx-reply>And I think it's reasonable to have param decorators, function decorators, etc. if we support class decorators...","m.relates_to":{"m.in_reply_to":{"event_id":"$9b11kMR7kB0-7gzeM_-L3DeeEHko3PlcNm7r9BbSzUY"}},"msgtype":"m.text"},"ts":1679606776743,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$GpkkAAM8PFybb0eIjO749TGEk45He4-FzyCMDb0wLo4"},
{"content":{"body":"fair","m.relates_to":{"event_id":"$dW_vKRyBXPy1-zOFqSB3WoCJ39Ru3Meubqt-FTqCAEs","is_falling_back":true,"m.in_reply_to":{"event_id":"$dW_vKRyBXPy1-zOFqSB3WoCJ39Ru3Meubqt-FTqCAEs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679606781154,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$YazlpARor_xaRZb6SxCl3coxLY3YSGNQG5p59ZsN2cE"},
{"content":{"body":"what is the argument for it?","msgtype":"m.text"},"ts":1679606840530,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$06gnCRN8k9rW1liBPL0zeDYOZoJPNfL6oFnVzQJeOZk"},
{"content":{"body":"\"people ask for it\" is usually not sufficient","msgtype":"m.text"},"ts":1679606847255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zx8NIX8xw4NBv8h9S11iHP2XZcbLldVctlNvxeiUx64"},
{"content":{"body":"JS also is in a position where a ton of people come to it from different languages, and they write lots of code that matches the idioms of their source langs that does NOT match JS idiom","msgtype":"m.text"},"ts":1679606899216,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6mGP9To9XvrWdIMBsRaL_qzYFZjhNbDh0brtV4HameU"},
{"content":{"body":"ie the \"java devs write java in every language\" sentiment","msgtype":"m.text"},"ts":1679606911205,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY"},
{"content":{"body":"`ImplImplImplImplBuilderImpl`","format":"org.matrix.custom.html","formatted_body":"<code>ImplImplImplImplBuilderImpl</code>","m.relates_to":{"event_id":"$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY","is_falling_back":true,"m.in_reply_to":{"event_id":"$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679606930035,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$cKifuWGayqeN0OvLBokiPneaNr36To-Rm1_zNCk1rB8"},
{"content":{"body":" * ie the \"java devs write java in every language\" sentiment (not just picking on java here, ofc)","m.new_content":{"body":"ie the \"java devs write java in every language\" sentiment (not just picking on java here, ofc)","msgtype":"m.text"},"m.relates_to":{"event_id":"$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679606932261,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$hy0y4on-srZ2nA_-zBgWGpp5YEoiAM8mzmqOLw4LhsM"},
{"content":{"body":"excessive nouns, indeed","m.relates_to":{"event_id":"$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY","is_falling_back":true,"m.in_reply_to":{"event_id":"$cKifuWGayqeN0OvLBokiPneaNr36To-Rm1_zNCk1rB8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679606940311,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qOuadjAGxBZXvEt751aDHXj60P39w2jxcMBKOQf3_P4"},
{"content":{"body":"I'd say something like \"it allows you to easily reuse code that would otherwise be repeated (boilerplate), or, more importantly, *omitted* because the author doesn't want to bother due to the size of the boilerplate\"","format":"org.matrix.custom.html","formatted_body":"I'd say something like &quot;it allows you to easily reuse code that would otherwise be repeated (boilerplate), or, more importantly, <em>omitted</em> because the author doesn't want to bother due to the size of the boilerplate&quot;","msgtype":"m.text"},"ts":1679606964240,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$LJLwND_tzKvOx0iMwD7NnE5tSu00GrxnVOCBMvlaixM"},
{"content":{"body":"for things like standard parameter validation checks across a large codebase","msgtype":"m.text"},"ts":1679606973563,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$w8f1apZNUyqlkYEP8-u1vVg1EmHUbveYr_6K5tnxvF0"},
{"content":{"body":"validation checks i 100% agree - that's not the same thing as the extensive metaprogramming demonstrated in the preso","msgtype":"m.text"},"ts":1679606995202,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$c0CLj4YoGbZFhV0aETKLtqWHBHlLVR-aQvYA5MnHlTc"},
{"content":{"body":"> <@ljharb:matrix.org> JS also is in a position where a ton of people come to it from different languages, and they write lots of code that matches the idioms of their source langs that does NOT match JS idiom\n\nAnother way to frame this would be, \"The culture of how people write JS is diverse and influenced by other programming languages' culture\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6mGP9To9XvrWdIMBsRaL_qzYFZjhNbDh0brtV4HameU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>JS also is in a position where a ton of people come to it from different languages, and they write lots of code that matches the idioms of their source langs that does NOT match JS idiom</blockquote></mx-reply>Another way to frame this would be, &quot;The culture of how people write JS is diverse and influenced by other programming languages' culture&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$6mGP9To9XvrWdIMBsRaL_qzYFZjhNbDh0brtV4HameU"}},"msgtype":"m.text"},"ts":1679606996784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OBXIu_CNeFZlnSOeAgom9-1apE4sMp4LOm8jm9Pi4ms"},
{"content":{"body":"`valid(x)` is almost exactly the same amount of code as `@valid`, and as a bonus also works with destructured parameters","format":"org.matrix.custom.html","formatted_body":"<code>valid(x)</code> is almost exactly the same amount of code as <code>@valid</code>, and as a bonus also works with destructured parameters","msgtype":"m.text"},"ts":1679607005426,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W3NydIcK6vIe9EGPkrmEtIW7jf96FmdIQdcPjPIH4OQ"},
{"content":{"body":"sure. it's just not necessarily influenced for the better.","m.relates_to":{"event_id":"$OBXIu_CNeFZlnSOeAgom9-1apE4sMp4LOm8jm9Pi4ms","is_falling_back":true,"m.in_reply_to":{"event_id":"$OBXIu_CNeFZlnSOeAgom9-1apE4sMp4LOm8jm9Pi4ms"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607011724,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aVCNYW6LBpYYN1f3ftHw0lNxPpVmOWyYIi64B5A54kw"},
{"content":{"body":"> <@littledan:matrix.org> I do have to admit that, with decorators evaluated at class evaluation time, they are sort of a better fit than extractors/pattern matching evaluated each time the function runs.\n\nthe function returned by the decorator does run each time, so a bit like a cached extractor","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$8l7wuJIpWC8Dmfvt0zlsPNgAG-X1YrEtcpJ_4EnCS5s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I do have to admit that, with decorators evaluated at class evaluation time, they are sort of a better fit than extractors/pattern matching evaluated each time the function runs.</blockquote></mx-reply>the function returned by the decorator does run each time, so a bit like a cached extractor","m.relates_to":{"m.in_reply_to":{"event_id":"$8l7wuJIpWC8Dmfvt0zlsPNgAG-X1YrEtcpJ_4EnCS5s"}},"msgtype":"m.text"},"ts":1679607030562,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Z-SAcNqyCdmyqbj7OSMkkOc4C0b0LNBZfcu1KlkTMbc"},
{"content":{"body":"> <@ljharb:matrix.org> validation checks i 100% agree - that's not the same thing as the extensive metaprogramming demonstrated in the preso\n\nwell, people had 10 years to come up with stuff, the presentation is just showing what people are already doing - and I guess showing the obvious and boring would not make a good case that it is a flexible tool, right? :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$c0CLj4YoGbZFhV0aETKLtqWHBHlLVR-aQvYA5MnHlTc\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br/>validation checks i 100% agree - that's not the same thing as the extensive metaprogramming demonstrated in the preso</blockquote></mx-reply>well, people had 10 years to come up with stuff, the presentation is just showing what people are already doing - and I guess showing the obvious and boring would not make a good case that it is a flexible tool, right? :)","im.nheko.relations.v1.relations":[{"event_id":"$c0CLj4YoGbZFhV0aETKLtqWHBHlLVR-aQvYA5MnHlTc","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$c0CLj4YoGbZFhV0aETKLtqWHBHlLVR-aQvYA5MnHlTc"}},"msgtype":"m.text"},"ts":1679607049389,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$T2PEJuSXlRTjsjn2mnS_-TXqVrMKH_Az2ZzhjuHw490"},
{"content":{"body":"agree that validation seems reasonable as does ORM use case.. request mapping.. I have trouble imagining how the scope can be narrowed though","msgtype":"m.text"},"ts":1679607055609,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$pndnCoGa4-eGrc80BnjiRlNUZUZXKrijf0iiVTmSIWw"},
{"content":{"body":"i deeply hate ORM","msgtype":"m.text"},"ts":1679607068282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g"},
{"content":{"body":"but that's personal","msgtype":"m.text"},"ts":1679607069913,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PecWDms_8XiB3nftxniFv7BYkgY4wA-W1jWpgaTbc7c"},
{"content":{"body":"> <@danielrosenwasser:matrix.org> maybe all the Daniels were confused\n\nI was also confused.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Oq78Wnq0OtrRAz1-yqkTMyi2W5xzGlvhm-5R_2wvee0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@danielrosenwasser:matrix.org\">@danielrosenwasser:matrix.org</a><br>maybe all the Daniels were confused</blockquote></mx-reply>I was also confused.","m.relates_to":{"m.in_reply_to":{"event_id":"$Oq78Wnq0OtrRAz1-yqkTMyi2W5xzGlvhm-5R_2wvee0"}},"msgtype":"m.text"},"ts":1679607076227,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$QxrQlzMIp_Aize30liEjZoJUSMpXz9SUOkUyw1Lb-Eg"},
{"content":{"body":"> <@aclaymore:matrix.org> the function returned by the decorator does run each time, so a bit like a cached extractor\n\nright--it'd be nice if extractors could be cached, but that somehow doesn't make as much sense syntactically","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Z-SAcNqyCdmyqbj7OSMkkOc4C0b0LNBZfcu1KlkTMbc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>the function returned by the decorator does run each time, so a bit like a cached extractor</blockquote></mx-reply>right--it'd be nice if extractors could be cached, but that somehow doesn't make as much sense syntactically","m.relates_to":{"m.in_reply_to":{"event_id":"$Z-SAcNqyCdmyqbj7OSMkkOc4C0b0LNBZfcu1KlkTMbc"}},"msgtype":"m.text"},"ts":1679607085520,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8H9ESD7o9WjC0MMtZOXSzwA3f-Wr0KghFDL7RSaXfbk"},
{"content":{"body":"obligatory https://seldo.com/posts/orm_is_an_antipattern/","m.relates_to":{"event_id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g","is_falling_back":true,"m.in_reply_to":{"event_id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607093269,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L6ry1kuYQvX9ziixjanYRXf3rU-LPTwBCbpIkMN0kZQ"},
{"content":{"body":"sidebar: this is I think way too much detail for a stage 1 presentation","msgtype":"m.text"},"ts":1679607102708,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM"},
{"content":{"body":"i like the *idea* of ORM but have never found one that meshes with how I want it to work","format":"org.matrix.custom.html","formatted_body":"i like the <em>idea</em> of ORM but have never found one that meshes with how I want it to work","msgtype":"m.text"},"ts":1679607105199,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$_353ymUbGNS1-vtjApcFp_zn2Ay7VS2B7ymMdHOaStU"},
{"content":{"body":"what do you mean you don't like doing a complete 1-1 of your data model in the frontend?","m.relates_to":{"event_id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g","is_falling_back":true,"m.in_reply_to":{"event_id":"$L6ry1kuYQvX9ziixjanYRXf3rU-LPTwBCbpIkMN0kZQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607108711,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$E490jNeLuSN6Xqsh2PbGKuH7i9xRnakZ62Nyymlgay8"},
{"content":{"body":"stage 1 needs like 1 slide on potential API","msgtype":"m.text"},"ts":1679607127929,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zUY1fSgF-klJtGsmP6i-A5HxvgE5nmTAyinnPGExsmc"},
{"content":{"body":"i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!\n - \n - \n - ","format":"org.matrix.custom.html","formatted_body":"<h2>i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!</h2>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","m.relates_to":{"event_id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g","is_falling_back":true,"m.in_reply_to":{"event_id":"$E490jNeLuSN6Xqsh2PbGKuH7i9xRnakZ62Nyymlgay8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607134509,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9Df0pOSjJSGMQ8wRLLQ-nnrMUOW5-ZOWajZJ1tev2W8"},
{"content":{"body":" * ## i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!\n\n - \n - ","format":"org.matrix.custom.html","formatted_body":" * <h2>i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!</h2>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","m.new_content":{"body":"## i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!\n\n - \n - ","format":"org.matrix.custom.html","formatted_body":"<h2>i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!</h2>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$9Df0pOSjJSGMQ8wRLLQ-nnrMUOW5-ZOWajZJ1tev2W8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679607138022,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SGKl6I-OULtWvG5HC4FNu4-MmK65RVa5fhEkho5YhrU"},
{"content":{"body":"2 maybe","msgtype":"m.text"},"ts":1679607139060,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RspZz_FJ2qtu43WwwfnVDzbKnpmPEPd6C_ASKO1NaeQ"},
{"content":{"body":" * i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!\n\n- \n- ","format":"org.matrix.custom.html","formatted_body":" * <p>i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","m.new_content":{"body":"i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!\n\n- \n- ","format":"org.matrix.custom.html","formatted_body":"<p>i mean, look at all the times use of an ORM has allowed a seamless transition between backing databases!</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$9Df0pOSjJSGMQ8wRLLQ-nnrMUOW5-ZOWajZJ1tev2W8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679607140654,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$buWfiW50oUaJAxR8vjoLV80tTAABknVwfCv2Uf-5WQw"},
{"content":{"body":"> <@bakkot:matrix.org> sidebar: this is I think way too much detail for a stage 1 presentation\n\n+1, there are very high-level foundational concerns being raised in the matrix","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sidebar: this is I think way too much detail for a stage 1 presentation</blockquote></mx-reply>+1, there are very high-level foundational concerns being raised in the matrix","m.relates_to":{"m.in_reply_to":{"event_id":"$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM"}},"msgtype":"m.text"},"ts":1679607144150,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2plvGAkO3Wo20gWa5-Ci4IHrEqYl88_T2gFse3NO50E"},
{"content":{"body":"i should think that deserves discussion time more than detailed semantics","msgtype":"m.text"},"ts":1679607152652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Fc9WiiycuT7rCMhgBzcbUJUzpme7gsWWge2yqrby2Cg"},
{"content":{"body":"you've convinced me","m.relates_to":{"event_id":"$sg3d22e9B4A95KtHfZcqeRo57Ju4yzUVQH5Jj7mxW7g","is_falling_back":true,"m.in_reply_to":{"event_id":"$9Df0pOSjJSGMQ8wRLLQ-nnrMUOW5-ZOWajZJ1tev2W8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607155880,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$usHkOouUUn4OBoQf56QYTUi3lFjm6slj7-b54W4hrY4"},
{"content":{"body":"> <@bakkot:matrix.org> sidebar: this is I think way too much detail for a stage 1 presentation\n\nmy gut is telling me people are erring way more on the side of TMI to fend off potential motivation concerns up front","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sidebar: this is I think way too much detail for a stage 1 presentation</blockquote></mx-reply>my gut is telling me people are erring way more on the side of TMI to fend off potential motivation concerns up front","m.relates_to":{"m.in_reply_to":{"event_id":"$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM"}},"msgtype":"m.text"},"ts":1679607196807,"senderName":"apaprocki","senderId":"@apaprocki:matrix.org","id":"$VV6aUFP-vtZ1NMWqUpq1GC5sMGy6TgESMd53v72VmnQ"},
{"content":{"body":"I have probably been guilty of this too because I fall in love with proposals and flesh them all out in my head before bringing them to committee","msgtype":"m.text"},"ts":1679607216581,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zoEr2ms5-ts_m-Yg1YJcsTxHnMyPJ2uYXWBfc1ydlp4"},
{"content":{"body":"but that stuff mostly ought to go in the repo rather than the presentation","msgtype":"m.text"},"ts":1679607228153,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T0du_MzYTsvOP37sYPQHAqVsYZ6HaPGw0bwKhZRzW4o"},
{"content":{"body":"to be fair to Ron, this is 9 years coming; this is very thought out even if we are having a hard time processing it all at once.","msgtype":"m.text"},"ts":1679607246806,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ePlbijhic6zy5pILh4x5gE1liWdBu9BknHlry7lvFN0"},
{"content":{"body":"Does anyone else get a strong \"corporate java project\" vibe from the code?","msgtype":"m.text"},"ts":1679607349082,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7Iv5y6ZNlKg9fy2mvwqbQI0k0upoxUmIM-OLzZMYNxA"},
{"content":{"body":"I really need to catch up with this matrix logs","msgtype":"m.text"},"ts":1679607359102,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$R35k2bnATscWfUCOaBuLvK7-fD7E-Z9dSBVOz0PpHWw"},
{"content":{"body":"> <@bakkot:matrix.org> sidebar: this is I think way too much detail for a stage 1 presentation\n\nbut if not show many use cases people will refuse it because of no enough use cases??","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>sidebar: this is I think way too much detail for a stage 1 presentation</blockquote></mx-reply>but if not show many use cases people will refuse it because of no enough use cases??","m.relates_to":{"m.in_reply_to":{"event_id":"$sApi_b0Bovv80pYp-FOUazPj5ctYaybwSqh9mgm-QwM"}},"msgtype":"m.text"},"ts":1679607405900,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$NO9pX_Cwxc2eI4ykYxa03OZqibl6Mh8jsVxeyiPVDbk"},
{"content":{"body":"naive question: can you \"just like\" parse the parameters of the `toString()`'d original method in a method decorator, and... use that?","format":"org.matrix.custom.html","formatted_body":"naive question: can you &quot;just like&quot; parse the parameters of the <code>toString()</code>'d original method in a method decorator, and... use that?","msgtype":"m.text"},"ts":1679607406048,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3AQySGWDoEbe0EyaQgCU_NNFeszCPSDy4E9m8_S1XhY"},
{"content":{"body":"> <@haxjs:matrix.org> but if not show many use cases people will refuse it because of no enough use cases??\n\nthe use cases part was good and appropriate","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$NO9pX_Cwxc2eI4ykYxa03OZqibl6Mh8jsVxeyiPVDbk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>but if not show many use cases people will refuse it because of no enough use cases??</blockquote></mx-reply>the use cases part was good and appropriate","m.relates_to":{"m.in_reply_to":{"event_id":"$NO9pX_Cwxc2eI4ykYxa03OZqibl6Mh8jsVxeyiPVDbk"}},"msgtype":"m.text"},"ts":1679607420160,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Q8uLWltiW_sqvpvJUg55hI3N8Z5w1OXnBXpi38z0MqI"},
{"content":{"body":"the \"here is what the type of the `target` field\" part is less appropriate","format":"org.matrix.custom.html","formatted_body":"the &quot;here is what the type of the <code>target</code> field&quot; part is less appropriate","msgtype":"m.text"},"ts":1679607429536,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bRMrpKqbW1LSE2wmZe-59bA4gdHllOcAS6iavVWdXN8"},
{"content":{"body":" * the \"here is what the type of the `target` field should be\" part is less appropriate","format":"org.matrix.custom.html","formatted_body":" * the &quot;here is what the type of the <code>target</code> field should be&quot; part is less appropriate","m.new_content":{"body":"the \"here is what the type of the `target` field should be\" part is less appropriate","format":"org.matrix.custom.html","formatted_body":"the &quot;here is what the type of the <code>target</code> field should be&quot; part is less appropriate","msgtype":"m.text"},"m.relates_to":{"event_id":"$bRMrpKqbW1LSE2wmZe-59bA4gdHllOcAS6iavVWdXN8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679607433796,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yWmp6QobMwxCsMXExFsM8CRvX_Gekqxa3BCNlFCUVGw"},
{"content":{"body":"> <@shuyuguo:matrix.org> naive question: can you \"just like\" parse the parameters of the `toString()`'d original method in a method decorator, and... use that?\n\nyes, but that's what angular 1 did, and it's horrific and breaks whenever minification happens","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3AQySGWDoEbe0EyaQgCU_NNFeszCPSDy4E9m8_S1XhY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>naive question: can you \"just like\" parse the parameters of the <code>toString()</code>'d original method in a method decorator, and... use that?</blockquote></mx-reply>yes, but that's what angular 1 did, and it's horrific and breaks whenever minification happens","m.relates_to":{"m.in_reply_to":{"event_id":"$3AQySGWDoEbe0EyaQgCU_NNFeszCPSDy4E9m8_S1XhY"}},"msgtype":"m.text"},"ts":1679607434532,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x5t5ln1wL4hkllbX5z5ttHoVBeBUgUZhJ1r0oWoChKY"},
{"content":{"body":"ah, indeed, minification","msgtype":"m.text"},"ts":1679607443368,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jKvp3mnatBixPTDbGHGDzVHogCygFEFK5tva7f0WB5M"},
{"content":{"body":"thanks","msgtype":"m.text"},"ts":1679607443854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MNrZQtP32TctdmInNzWxSpd2QCPHOwFVTO-tdER9VwA"},
{"content":{"body":"> <@jridgewell:matrix.org> Does anyone else get a strong \"corporate java project\" vibe from the code?\n\nI mean I think DI is a very divisive programming technique? but IMO we should separate \"this proposal would enable X footgun\" and \"this proposal would enable X programming technique that I don't like\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7Iv5y6ZNlKg9fy2mvwqbQI0k0upoxUmIM-OLzZMYNxA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Does anyone else get a strong &quot;corporate java project&quot; vibe from the code?</blockquote></mx-reply>I mean I think DI is a very divisive programming technique? but IMO we should separate &quot;this proposal would enable X footgun&quot; and &quot;this proposal would enable X programming technique that I don't like&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$7Iv5y6ZNlKg9fy2mvwqbQI0k0upoxUmIM-OLzZMYNxA"}},"msgtype":"m.text"},"ts":1679607590318,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$gXCGr5ZaS-nvTk4-ac7Q7y5Lqf-8irmnbK_gxieolJo"},
{"content":{"body":"the latter is also a valid reason to not add something though","msgtype":"m.text"},"ts":1679607621425,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NvRuIx82X5EYtskydHTO4AN8QRRBJhWBb0S_sgGQWmg"},
{"content":{"body":"e.g., there are languages where constructing code at runtime and evaluating it is a core technique","msgtype":"m.text"},"ts":1679607656816,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eAyNVvajPo87lgSb1ozXVVVtwnexDCVG4mrp4hjcaI8"},
{"content":{"body":"I do not miss the era of DI being the new shiny","msgtype":"m.text"},"ts":1679607662245,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Cxqas2nV-09HineMCTFi2TQ-YdpJeALz9s009aWiodY"},
{"content":{"body":"but I don't want people to use that technique in JS and would actively oppose features which enabled it (though, of course, that ship has sailed)","msgtype":"m.text"},"ts":1679607695514,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc"},
{"content":{"body":"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ub45qHDXteYxSbmwfzPGXe-KTZXA2oRYer99mr5tPrY?via=matrix.org&via=igalia.com&via=mozilla.org","m.relates_to":{"event_id":"$7Iv5y6ZNlKg9fy2mvwqbQI0k0upoxUmIM-OLzZMYNxA","is_falling_back":true,"m.in_reply_to":{"event_id":"$7Iv5y6ZNlKg9fy2mvwqbQI0k0upoxUmIM-OLzZMYNxA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607696483,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SbwYL9X_Y4aW4mxzEJyXQofdaqwFAY73Wnl6jHF5k1E"},
{"content":{"body":"> <@pchimento:igalia.com> I mean I think DI is a very divisive programming technique? but IMO we should separate \"this proposal would enable X footgun\" and \"this proposal would enable X programming technique that I don't like\"\n\nI think bakkot's point is also spot on. Java has an overuse of classes for **everything**, and this is shoehorning a bunch into functionality into classes because we want it to be class method param decorators","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gXCGr5ZaS-nvTk4-ac7Q7y5Lqf-8irmnbK_gxieolJo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>I mean I think DI is a very divisive programming technique? but IMO we should separate \"this proposal would enable X footgun\" and \"this proposal would enable X programming technique that I don't like\"</blockquote></mx-reply>I think bakkot's point is also spot on. Java has an overuse of classes for <strong>everything</strong>, and this is shoehorning a bunch into functionality into classes because we want it to be class method param decorators","m.relates_to":{"m.in_reply_to":{"event_id":"$gXCGr5ZaS-nvTk4-ac7Q7y5Lqf-8irmnbK_gxieolJo"}},"msgtype":"m.text"},"ts":1679607819283,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ottxULOMvJ_anPGp_k1I-AHD_PVx8byF0-AGRiuIvk0"},
{"content":{"body":"I'm not blocking, but god I hope I never have to work on a codebase that uses this style.","msgtype":"m.text"},"ts":1679607899384,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hoWOH87d2sUTDQiJ5rn7IzsfJkfrG2IAkRgC02fhNg4"},
{"content":{"body":"> <@bakkot:matrix.org> but I don't want people to use that technique in JS and would actively oppose features which enabled it (though, of course, that ship has sailed)\n\nI'd say there are frameworks heavily based on that, and also frameworks for the same purpose not using this at all. You probably won't get happy working in a team that loves using these techniques, but that team would find ways of doing so either way - so why not make it easier for them? It will not eradicate the option of working without these features.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br/>but I don't want people to use that technique in JS and would actively oppose features which enabled it (though, of course, that ship has sailed)</blockquote></mx-reply>I'd say there are frameworks heavily based on that, and also frameworks for the same purpose not using this at all. You probably won't get happy working in a team that loves using these techniques, but that team would find ways of doing so either way - so why not make it easier for them? It will not eradicate the option of working without these features.","im.nheko.relations.v1.relations":[{"event_id":"$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc"}},"msgtype":"m.text"},"ts":1679607901984,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$AlfNDPIREMm_mjVm8__evZHsvqf1TJWuwYdMruG5cY0"},
{"content":{"body":"btw for function decorators can we just decide that decorated function declarations aren't hoisted? or is it more complex than that","msgtype":"m.text"},"ts":1679608079379,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1wX1OMJHP2oUPdsCn6U6u9qviiyzQxsYw2eh7pw82e0"},
{"content":{"body":"that would be extremely weirdf","msgtype":"m.text"},"ts":1679608100104,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$49kfa5Os75BAdIOZ45xGo7DFGBXxBIeU9zwt8idIYhA"},
{"content":{"body":" * that would be extremely weird","m.new_content":{"body":"that would be extremely weird","msgtype":"m.text"},"m.relates_to":{"event_id":"$49kfa5Os75BAdIOZ45xGo7DFGBXxBIeU9zwt8idIYhA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679608106102,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BUNyAd46zNuzglkil2LWHf_xNROjygpSQeOvpnGYANA"},
{"content":{"body":"that means decorated functions declarations become non-letrec'ed together","msgtype":"m.text"},"ts":1679608124241,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$B4wkdk3-nn-xLT44DHYjaeA1r2TEQOiK03_-bWAPIUo"},
{"content":{"body":"which is... extremely weird","msgtype":"m.text"},"ts":1679608127148,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r2LW1wkDiPC4v1CH3tNL8wA_cuhaFWWsS6AQX7awPvk"},
{"content":{"body":"I've used a lot of `function foo() { foo = function () {} }` memoized declaration wrappers, and I'd like to stop doing that.","format":"org.matrix.custom.html","formatted_body":"I've used a lot of <code>function foo() { foo = function () {} }</code> memoized declaration wrappers, and I'd like to stop doing that.","msgtype":"m.text"},"ts":1679608183390,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oiEbrEpolrzuwGKHP9Z5X7iCkiJEUf40ZfBkJ5CJbgQ"},
{"content":{"body":"> <@phryneas:matrix.org> I'd say there are frameworks heavily based on that, and also frameworks for the same purpose not using this at all. You probably won't get happy working in a team that loves using these techniques, but that team would find ways of doing so either way - so why not make it easier for them? It will not eradicate the option of working without these features.\n\nthe \"that technique\" in the bit you quoted was \"constructing code at runtime and evaluating it\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AlfNDPIREMm_mjVm8__evZHsvqf1TJWuwYdMruG5cY0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@phryneas:matrix.org\">@phryneas:matrix.org</a><br>I'd say there are frameworks heavily based on that, and also frameworks for the same purpose not using this at all. You probably won't get happy working in a team that loves using these techniques, but that team would find ways of doing so either way - so why not make it easier for them? It will not eradicate the option of working without these features.</blockquote></mx-reply>the &quot;that technique&quot; in the bit you quoted was &quot;constructing code at runtime and evaluating it&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$AlfNDPIREMm_mjVm8__evZHsvqf1TJWuwYdMruG5cY0"}},"msgtype":"m.text"},"ts":1679608272606,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DONlInOteT4cvJP14jrdkH4ke_AuLJGpGJ8Fw3Y2Kck"},
{"content":{"body":"and like","msgtype":"m.text"},"ts":1679608275760,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NSBBWlBKNu1Wh6yP0ICEMC152a0ST0aPhB79EPgsigo"},
{"content":{"body":"I think we should not make it easier for them so that they don't do it","msgtype":"m.text"},"ts":1679608283840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q64dRHws1f7Ib6bRGL04I-qX0oS7_Lbyyv2el2kIhXw"},
{"content":{"body":"> <@bakkot:matrix.org> the \"that technique\" in the bit you quoted was \"constructing code at runtime and evaluating it\"\n\nOh, sorry, I missed the first sentence of that message and assumed you still were talking about the current proposal.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$DONlInOteT4cvJP14jrdkH4ke_AuLJGpGJ8Fw3Y2Kck\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br/>the &quot;that technique&quot; in the bit you quoted was &quot;constructing code at runtime and evaluating it&quot;</blockquote></mx-reply>Oh, sorry, I missed the first sentence of that message and assumed you still were talking about the current proposal.","im.nheko.relations.v1.relations":[{"event_id":"$DONlInOteT4cvJP14jrdkH4ke_AuLJGpGJ8Fw3Y2Kck","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$DONlInOteT4cvJP14jrdkH4ke_AuLJGpGJ8Fw3Y2Kck"}},"msgtype":"m.text"},"ts":1679608378671,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$neCLOXg-4sdrrSZNv7eyY8l1fIvaGzJP6axE-aa1_t8"},
{"content":{"body":"yeah, the point was that sometimes features enable you to do things that we, as language designers, don't want to encourage you to do. that is how I feel about this style of DI.","msgtype":"m.text"},"ts":1679608433447,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DpNYTvuPHOqZqSV3nzXmQqieEx6QVwkrhFGfE4Id_tU"},
{"content":{"body":"TypeScript ≠ JavaScript.  They don't need to be the same.  I think that would be a false goal of the committee.  They serve different purposes.  Developers choose various tools and language extensions in solve their problems.","msgtype":"m.text"},"ts":1679608796274,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$DCGvBf1QN2Jpl_LHw5FYMY6Cq2c6hEdRvrW0DFpDNBo"},
{"content":{"body":"i think that's a 4d chess space that deals with developer mindshare and relative tech giants' soft power etc","msgtype":"m.text"},"ts":1679608927717,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rLVAWoS1c5YZ0pEQroHHMmSbi3e6Q11xvf1Leki2jzo"},
{"content":{"body":"i have a hard time, attractive as it is, to adopt a more absolutist line like TS and JS can and should just stay separate","msgtype":"m.text"},"ts":1679608951355,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UH0SoWoSu7ALqWX-oYnnd0DPF_x6B9l-OiS4dhenf7I"},
{"content":{"body":"My hope is that new projects don't adopt TS decorators","msgtype":"m.text"},"ts":1679608992795,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZmYoANvO0rihDm6nBVQ0tn5Nj0bFnh4D_K27vWEwJzk"},
{"content":{"body":" * i think that's a 4d chess space that deals with developer mindshare and respective tech giants' soft power etc","m.new_content":{"body":"i think that's a 4d chess space that deals with developer mindshare and respective tech giants' soft power etc","msgtype":"m.text"},"m.relates_to":{"event_id":"$rLVAWoS1c5YZ0pEQroHHMmSbi3e6Q11xvf1Leki2jzo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679609001276,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$N_smV0hmvUzWIplADmtZ9gxT5Dwf1fU4BJBBLKaZnDM"},
{"content":{"body":"Old projects staying on TS decorators I don't really have a problem with","msgtype":"m.text"},"ts":1679609003556,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7fLkNpLmZcNVNDDZVGmHkZeK5DANLPm6mSbNwNlmB00"},
{"content":{"body":"Maybe I should say that we shouldn't add something to JS because it is in TS, ...","msgtype":"m.text"},"ts":1679609019568,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$-UN0MTD5Bqvq0XWyNj9o-aInZ02gyO7gRn86B-wqfSc"},
{"content":{"body":"agreed","msgtype":"m.text"},"ts":1679609040925,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GzKy0wuMTiRJ5RRGG0pcszjkvdAWBjl2NF9TFn5_3Jg"},
{"content":{"body":"TS and JS are pretty aligned already, and this is important and valuable for Bloomberg. But yes I agree completely that we shouldn't just upstream TS features into JS uncritically.","msgtype":"m.text"},"ts":1679609059521,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9FPHh9upMRKgGxE5rAM7bTiq85bkFBa__R9q3AHFd7I"},
{"content":{"body":"i take msaboff's statement to be stronger than that","msgtype":"m.text"},"ts":1679609076007,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F-jNO2ELu0sNrgYhSf7P16P-nPSTdw6PrxnKC2AoeaA"},
{"content":{"body":"> <@msaboff:matrix.org> Maybe I should say that we shouldn't add something to JS because it is in TS, ...\n\nLuckily, there are only two TS features that are not JS features, decorators being one of them - so that's not a long-term concern :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-UN0MTD5Bqvq0XWyNj9o-aInZ02gyO7gRn86B-wqfSc\">In reply to</a> <a href=\"https://matrix.to/#/@msaboff:matrix.org\">@msaboff:matrix.org</a><br/>Maybe I should say that we shouldn't add something to JS because it is in TS, ...</blockquote></mx-reply>Luckily, there are only two TS features that are not JS features, decorators being one of them - so that's not a long-term concern :)","im.nheko.relations.v1.relations":[{"event_id":"$-UN0MTD5Bqvq0XWyNj9o-aInZ02gyO7gRn86B-wqfSc","rel_type":"im.nheko.relations.v1.in_reply_to"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$-UN0MTD5Bqvq0XWyNj9o-aInZ02gyO7gRn86B-wqfSc"}},"msgtype":"m.text"},"ts":1679609141766,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$hR1BAiY1HRgs70UBUauGpXAlQw8mwhZIqYDYYmn51DQ"},
{"content":{"body":"in your opinion, do you think that is a stable equilibrium","msgtype":"m.text"},"ts":1679609173453,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n4DMs1Ef_f3hgzv8oNKzQ_eZlps2Er3Hf-B0ub375S4"},
{"content":{"body":"* Luckily, there are only two TS runtime features that are not JS features, decorators being one of them - so that's not a long-term concern :)","im.nheko.relations.v1.relations":[{"event_id":"$-UN0MTD5Bqvq0XWyNj9o-aInZ02gyO7gRn86B-wqfSc","rel_type":"im.nheko.relations.v1.in_reply_to"},{"event_id":"$hR1BAiY1HRgs70UBUauGpXAlQw8mwhZIqYDYYmn51DQ","rel_type":"m.replace"}],"m.new_content":{"body":"Luckily, there are only two TS runtime features that are not JS features, decorators being one of them - so that's not a long-term concern :)","msgtype":"m.text"},"m.relates_to":{"event_id":"$hR1BAiY1HRgs70UBUauGpXAlQw8mwhZIqYDYYmn51DQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679609175387,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$Yd_nQszEW_lx5uxLKNDNd7oOKRKGU7hoXVqwf2vwGbM"},
{"content":{"body":"The TS team committed to not adding anything before ECMAScript Stage 3 half a decade ago, and so far they kept that","msgtype":"m.text"},"ts":1679609203601,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$dgRcB2PqJdORKfVB9iKjEZaybRo3jvDXvWQLHQIbscg"},
{"content":{"body":"> <@bakkot:matrix.org> but I don't want people to use that technique in JS and would actively oppose features which enabled it (though, of course, that ship has sailed)\n\nI agree, yes the ship has sailed. I would accept JS never have decorators, but if we already have class decorators, it's wrong to me to not having function decorators, param decorators, etc.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but I don&#39;t want people to use that technique in JS and would actively oppose features which enabled it (though, of course, that ship has sailed)</blockquote></mx-reply>I agree, yes the ship has sailed. I would accept JS never have decorators, but if we already have class decorators, it's wrong to me to not having function decorators, param decorators, etc.","m.relates_to":{"m.in_reply_to":{"event_id":"$clWbDahyntYqtl9JBsSemoWO3-XfbUxR2r2_V_bZ4Lc"}},"msgtype":"m.text"},"ts":1679609263554,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$BYbnTQbxLKqn3vIFGaN-Y3HBvGZB4l30kVN6rcw9fe0"},
{"content":{"body":"> <@shuyuguo:matrix.org> that would be extremely weird\n\nyeah, it's weird but JS have many such weirdness as prior arts 😂 ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$49kfa5Os75BAdIOZ45xGo7DFGBXxBIeU9zwt8idIYhA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>that would be extremely weird</blockquote></mx-reply>yeah, it's weird but JS have many such weirdness as prior arts 😂","m.relates_to":{"m.in_reply_to":{"event_id":"$49kfa5Os75BAdIOZ45xGo7DFGBXxBIeU9zwt8idIYhA"}},"msgtype":"m.text"},"ts":1679609430952,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$VuTA2XgkLvRx-hshNs1UJ7FhUITvDmRgkpb25U4q1AU"},
{"content":{"body":"Ashley Claymore: I would love if calling `Promise.all({ foo: bar })` just worked like MM suggests","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I would love if calling <code>Promise.all({ foo: bar })</code> just worked like MM suggests","msgtype":"m.text"},"ts":1679609513353,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$M0u1u-cWoDGtaqyadh_eD47JHIwXdcPIcxKFy0mlXeY"},
{"content":{"body":"Maybe I'm pushing back an a theme that seems to be prevalent during this meeting, and that is JS should unify the related ecosystems.  I think that is the wrong target.  We need to be about craeful evolution of the JS language and ensuring compatibility among the various implementations.\n\nThat requires saying NO to some proposals for a variety of valid reasons.","msgtype":"m.text"},"ts":1679609528347,"senderName":"msaboff","senderId":"@msaboff:matrix.org","id":"$7iW2cRCODeZY2f8Tg1Kqyv5LxeFIolenmjV-tbQwoGc"},
{"content":{"body":"> <@ljharb:matrix.org> something i *do* want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose\n\nI've experimented with this. Its easy to do on a simple class, but much harder to support an inherited class without injecting a function in between the super and subclass to perform initialization after `super()`. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>something i <em>do</em> want is the ability to mark constructor arguments as automatically stored in a public, or private, field. but that could be done potentially with a class decorator, i suppose</blockquote></mx-reply>I've experimented with this. Its easy to do on a simple class, but much harder to support an inherited class without injecting a function in between the super and subclass to perform initialization after <code>super()</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$EHms8xPhFGj2vVWeGD5fS0HXy-HsR0uGPyp2V66B3js"}},"msgtype":"m.text"},"ts":1679609876169,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iubS4IOcUMCN2wRi5CiwBQXMZkr6dmcn97PDyrlln2k"},
{"content":{"body":"> <@jridgewell:matrix.org> Ashley Claymore: I would love if calling `Promise.all({ foo: bar })` just worked like MM suggests\n\nI already suggest that in the issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M0u1u-cWoDGtaqyadh_eD47JHIwXdcPIcxKFy0mlXeY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: I would love if calling <code>Promise.all({ foo: bar })</code> just worked like MM suggests</blockquote></mx-reply>I already suggest that in the issue.","m.relates_to":{"m.in_reply_to":{"event_id":"$M0u1u-cWoDGtaqyadh_eD47JHIwXdcPIcxKFy0mlXeY"}},"msgtype":"m.text"},"ts":1679609940138,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$dDu1Kx5NpVqyzAXho34O8PW1CNa5drzU3t-iU9am3mk"},
{"content":{"body":"Oh it was closed, could champion reopen that ?","msgtype":"m.text"},"ts":1679609972318,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$fQm5JzaDux5X-nTzygn0wcTESIyFDCuYtPgBTJtr5FU"},
{"content":{"body":"I think there was an item above this","msgtype":"m.text"},"ts":1679609999076,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$Y9ZCc0RKfJDUCou0Ko6lw_BHgEsufu7tzCoaZhDwD6g"}
]