[
{"content":{"body":"re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","format":"org.matrix.custom.html","formatted_body":"re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","msgtype":"m.text"},"ts":1679529650826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"},
{"content":{"body":"re: Mark's comments now... when you see a ton of code that's accidentally serial instead of parallel, you really wish for a better syntax for all of this that doesn't encourage bad behavior","msgtype":"m.text"},"ts":1679529748457,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$5uuuQEdJxzFCeNS6chcFgscjQu_5sSOEiKbJHmHtDUg"},
{"content":{"body":"> <@bakkot:matrix.org> re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case\n\nbut it seems not have big benefit for simple case :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case</blockquote></mx-reply>but it seems not have big benefit for simple case :)","m.relates_to":{"m.in_reply_to":{"event_id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"}},"msgtype":"m.text"},"ts":1679530013813,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Tk0Hw_e-Wuhvvke8Uqq5fTUzwp-W0kamWEwyrWKhZSY"},
{"content":{"body":"I'm fairly certain a cover grammar is feasible for `await using`, the big question is whether what I have put together is correct. Given the NLT restrictions, an `await using` declaration must have the first identifier in the binding list on the same line as `await using`, and that is always a syntax error in the expression case. Binding patterns aren't permitted in `using`, so there is no ambiguity with `await using [x]`.","format":"org.matrix.custom.html","formatted_body":"I'm fairly certain a cover grammar is feasible for <code>await using</code>, the big question is whether what I have put together is correct. Given the NLT restrictions, an <code>await using</code> declaration must have the first identifier in the binding list on the same line as <code>await using</code>, and that is always a syntax error in the expression case. Binding patterns aren't permitted in <code>using</code>, so there is no ambiguity with <code>await using [x]</code>.","msgtype":"m.text"},"ts":1679530159062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GD2wrHVTHEs7DzV3aRnKKez2o3QeT9pIcFgaBoMa9N0"},
{"content":{"body":"i'm gonna level with you rbuckton, i do not have enough brainpower left today to vet that cover grammar","format":"org.matrix.custom.html","formatted_body":"i'm gonna level with you <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>, i do not have enough brainpower left today to vet that cover grammar","msgtype":"m.text"},"ts":1679530206968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2HYWekTD2XfeX1NgmieFWskyNx6lurxVj3UnYZySTWw"},
{"content":{"body":"though i'm more interested in how hard it is to implement in a recursive-descent parser anyhow","msgtype":"m.text"},"ts":1679530219093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FopAnLatqvRSiZvppCtlUS7Z8ULNmTk5hKuUZRxKwes"},
{"content":{"body":"i'll try to put time aside before plenary tomorrow to look, but... i also have a presentation tomorrow first thing so also no promises","msgtype":"m.text"},"ts":1679530244542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Epn7bwU_g-UQlz-hbjbqPeQZfJPUbV5y4tpp0iNl6k0"},
{"content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpression","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpression","msgtype":"m.text"},"ts":1679530444630,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530473120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XbnQbrfbZybFG89463uYT4utQb1IeUMiDiAoPNUSRpY"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530500017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u8udsGPPjkJiwhoLRUAliqz_Ny0F3HHaOGRREO0CRfY"},
{"content":{"body":"that... sounds reasonable","msgtype":"m.text"},"ts":1679530580619,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d9yKVR1eH3rwQUxlR5YN4BHZwOsvlOx3sDyWqiMT-Gw"},
{"content":{"body":"Though I'll admit, cover grammars in the spec today sometimes seem a bit hand-wavy in a couple places.","msgtype":"m.text"},"ts":1679530587551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$54LbxC_nigxUIdC9DOlhQtX5VfaF3E6tCFEs9XK3w-o"},
{"content":{"body":"and i just do a bounded look ahead `await` `using` and see if it's an NLTH identifier","format":"org.matrix.custom.html","formatted_body":"and i just do a bounded look ahead <code>await</code> <code>using</code> and see if it's an NLTH identifier","msgtype":"m.text"},"ts":1679530613700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4qkbk64jtvDy5SaspJ8ftfM3qG8VDMbdS_foDcpNI8"},
{"content":{"body":"in +Await contexts","msgtype":"m.text"},"ts":1679530627341,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DbQ3Wse0uBSgzFsInAlnw6z6rsvMnQXebkYvONO6fYE"},
{"content":{"body":"In TS I'd just do two-token lookahead in +Await","msgtype":"m.text"},"ts":1679530640856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"},
{"content":{"body":"That is one benefit of `await using` over `async using`. For `await using`, both uses of the cover are in +Await, while for `async using`, only one is.","format":"org.matrix.custom.html","formatted_body":"That is one benefit of <code>await using</code> over <code>async using</code>. For <code>await using</code>, both uses of the cover are in +Await, while for <code>async using</code>, only one is.","msgtype":"m.text"},"ts":1679530673906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8gJhqDBfk0vN_B24IoBebtPUOsat7g5guTVoU34v0gA"},
{"content":{"body":"and `await using` without a binding list is unaffected?","format":"org.matrix.custom.html","formatted_body":"and <code>await using</code> without a binding list is unaffected?","msgtype":"m.text"},"ts":1679530736079,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"},
{"content":{"body":"well, is supposed to be, according to the cover","msgtype":"m.text"},"ts":1679530759664,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xP3GaRZmjr3brdUXven6sGd9MLvuW9K_cn7VivjzNiI"},
{"content":{"body":"> <@rbuckton:matrix.org> In TS I'd just do two-token lookahead in +Await\n\nIn fact, I've already done that in my current work on `using` (I was experimenting with all three syntax options).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In TS I&#39;d just do two-token lookahead in +Await</blockquote></mx-reply>In fact, I've already done that in my current work on <code>using</code> (I was experimenting with all three syntax options).","m.relates_to":{"m.in_reply_to":{"event_id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"}},"msgtype":"m.text"},"ts":1679530783601,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fDitWXjMbdwr-A8TvkL4KgqFsfvcfUVioYr3FwsoljU"},
{"content":{"body":"is TS a hand-written recursive-descent?","msgtype":"m.text"},"ts":1679530802874,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6sY5gEiyTstyl6Mbe1vimEK5PEW-Jov6MIKTaBzM030"},
{"content":{"body":"> <@shuyuguo:matrix.org> and `await using` without a binding list is unaffected?\n\nI'm not sure what you mean by this. `await using` on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and <code>await using</code> without a binding list is unaffected?</blockquote></mx-reply>I'm not sure what you mean by this. <code>await using</code> on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","m.relates_to":{"m.in_reply_to":{"event_id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"}},"msgtype":"m.text"},"ts":1679530923809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TC94ABL4a377AVVj0_yPrAU0AkMG_7xHWjUshR9nY2Q"},
{"content":{"body":" yes, that is what i meant","msgtype":"m.text"},"ts":1679530935127,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9u7EIyv6erTms6V6aRZQrWKfoLwm-LMRRvliCSTzdKM"},
{"content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`), and parse the remainder of the statement (e.g., ``[NLT] BindingList `;` ``)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>), and parse the remainder of the statement (e.g., <code>[NLT] BindingList `;` </code>)","msgtype":"m.text"},"ts":1679531106574,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8"},
{"content":{"body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","m.new_content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679531118947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t1abJbIhfOTwOXQqoYW2RIJcAyA4fMdtuP4yh1jUUDQ"},
{"content":{"body":"i am happy enough to go forward with stage 3","msgtype":"m.text"},"ts":1679531122761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bDfPVK5KNKiPNCPHjrpYg3pq1dcW3z5UjBw0PzGQtCE"},
{"content":{"body":"I will amend the slides with a summary of these changes and wait to see if Waldemar is able to provide feedback in the meantime.","msgtype":"m.text"},"ts":1679531261030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7GP65lv2pLbm0o4Fowhb45X0B2HZgQ4qDAy6A96ODAQ"},
{"content":{"body":"is there anything we need to do to get Decimal on the overflow, or will it be taken care of?","msgtype":"m.text"},"ts":1679540016073,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"},
{"content":{"body":"> <@michaelficarra:matrix.org> is there anything we need to do to get Decimal on the overflow, or will it be taken care of?\n\nIf there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>is there anything we need to do to get Decimal on the overflow, or will it be taken care of?</blockquote></mx-reply>If there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","m.relates_to":{"m.in_reply_to":{"event_id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"}},"msgtype":"m.text"},"ts":1679540981097,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gCjipbSxKpalxEQ3UWCW6qKycAyiUGfexlGQomZLsMM"},
{"content":{"body":"of course, I just wanted to record it on the list of overflow items","msgtype":"m.text"},"ts":1679541011598,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZCNlGIJAR1nqauWE2NlIbB_YRJV3EpKzyYoPsJlgYVg"},
{"content":{"body":"ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","msgtype":"m.text"},"ts":1679552101706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing\n\nnote the changes would need to be more substantive for dealing with [`v`-mode](https://github.com/tc39/ecma262/pull/2418), which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing</blockquote></mx-reply>note the changes would need to be more substantive for dealing with <a href=\"https://github.com/tc39/ecma262/pull/2418\"><code>v</code>-mode</a>, which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","m.relates_to":{"m.in_reply_to":{"event_id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"}},"msgtype":"m.text"},"ts":1679580082210,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU"},
{"content":{"body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already. ","format":"org.matrix.custom.html","formatted_body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already.","msgtype":"m.text"},"ts":1679582572841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D5fjYSBETzNi6sbpz4tOl8mEkztkUV_DXMNJGxxH-xk"},
{"content":{"body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding `\\-`, we could choose to escape it as `\\x2d`. Same for `\\=` (`\\x3d`) and `\\,` (`\\x2c`)","format":"org.matrix.custom.html","formatted_body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding <code>\\-</code>, we could choose to escape it as <code>\\x2d</code>. Same for <code>\\=</code> (<code>\\x3d</code>) and <code>\\,</code> (<code>\\x2c</code>)","msgtype":"m.text"},"ts":1679583207434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hGqa-OKRGbEN1pVw6A6br3V2M1LS484znH_Ag5vcCt0"},
{"content":{"body":"I'm not saying we shouldn't extend u-mode, but this is an option if we decide not to.","msgtype":"m.text"},"ts":1679583236876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OatJbAz6SNbg4yu00XCj70Ix385SZXEP8YtRYPqeNvM"},
{"content":{"body":"Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n- Modifiers: `(?imsx-imsx:...)`\n- Comments: `(?#...)`\n- `x`-mode line comments: `# ...`\n- Atomic Groups: `(?>...)`\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it me misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code></li>\n<li>Comments: <code>(?#...)</code></li>\n<li><code>x</code>-mode line comments: <code># ...</code></li>\n<li>Atomic Groups: <code>(?&gt;...)</code></li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it me misinterpreted in <code>x</code> mode.</p>\n","msgtype":"m.text"},"ts":1679584328586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sZdsTKh__xi-hyA2NpNMv3isG2MHR3vpl78q0xAPqzc"},
{"content":{"body":"If there's a chance we want `RegExp.escape` to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.","format":"org.matrix.custom.html","formatted_body":"If there's a chance we want <code>RegExp.escape</code> to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.","msgtype":"m.text"},"ts":1679584496862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg"},
{"content":{"body":"I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary was a nice help","msgtype":"m.text"},"ts":1679584554839,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$q0VNkPh2_s0L0Kz6GcKQ1Bk--uI0c2V7CMUDQXEdS7Q"},
{"content":{"body":" * I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary for each agenda item was a nice help","m.new_content":{"body":"I've just had to reference the notes as I had to leave early yesterday, and the conclusion/summary for each agenda item was a nice help","msgtype":"m.text"},"m.relates_to":{"event_id":"$q0VNkPh2_s0L0Kz6GcKQ1Bk--uI0c2V7CMUDQXEdS7Q","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679584565749,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$dSQdUNv6hrsZ5HWEnn0srMbo_6gBcUlS7mM5-z-Yr8E"},
{"content":{"body":" * Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n\n- Modifiers: `(?imsx-imsx:...)` (stage 3)\n- Comments: `(?#...)` (stage 1)\n- `x`-mode line comments: `# ...` (stage 1)\n- Atomic Groups: `(?>...)` (stage 1)\n- Conditionals: `(?(...)...|...)` (stage 0, though I'm still hoping we'll take it eventually)\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it be misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":" * <p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code> (stage 3)</li>\n<li>Comments: <code>(?#...)</code> (stage 1)</li>\n<li><code>x</code>-mode line comments: <code># ...</code> (stage 1)</li>\n<li>Atomic Groups: <code>(?&gt;...)</code> (stage 1)</li>\n<li>Conditionals: <code>(?(...)...|...)</code> (stage 0, though I'm still hoping we'll take it eventually)</li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it be misinterpreted in <code>x</code> mode.</p>\n","m.new_content":{"body":"Regarding the \"exhaustive list of contexts\", keep in mind that several proposals add other contexts:\n\n- Modifiers: `(?imsx-imsx:...)` (stage 3)\n- Comments: `(?#...)` (stage 1)\n- `x`-mode line comments: `# ...` (stage 1)\n- Atomic Groups: `(?>...)` (stage 1)\n- Conditionals: `(?(...)...|...)` (stage 0, though I'm still hoping we'll take it eventually)\n\nAt a quick glance, I think this means that `#` may need to be escaped as well, lest it be misinterpreted in `x` mode.","format":"org.matrix.custom.html","formatted_body":"<p>Regarding the &quot;exhaustive list of contexts&quot;, keep in mind that several proposals add other contexts:</p>\n<ul>\n<li>Modifiers: <code>(?imsx-imsx:...)</code> (stage 3)</li>\n<li>Comments: <code>(?#...)</code> (stage 1)</li>\n<li><code>x</code>-mode line comments: <code># ...</code> (stage 1)</li>\n<li>Atomic Groups: <code>(?&gt;...)</code> (stage 1)</li>\n<li>Conditionals: <code>(?(...)...|...)</code> (stage 0, though I'm still hoping we'll take it eventually)</li>\n</ul>\n<p>At a quick glance, I think this means that <code>#</code> may need to be escaped as well, lest it be misinterpreted in <code>x</code> mode.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$sZdsTKh__xi-hyA2NpNMv3isG2MHR3vpl78q0xAPqzc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679584859198,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RVCExIvmqd7L4tT1z5nsKdW4d9UMYbg0Otv3rAWlaBY"},
{"content":{"body":"how does scheduling of overflow stuff happen? asking for a friend","msgtype":"m.text"},"ts":1679585026570,"senderName":"Jesse (TC39)","senderId":"@jesse:igalia.com","id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY"},
{"content":{"body":"> <@gibson042:matrix.org> note the changes would need to be more substantive for dealing with [`v`-mode](https://github.com/tc39/ecma262/pull/2418), which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )\n\nThe changes are just a matter of including the punctuators which have meaning (or are reserved) in v-mode; the doubled punctuators don't actually end up mattering as long as the non-doubled versions are all escaped","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br>note the changes would need to be more substantive for dealing with <a href=\"https://github.com/tc39/ecma262/pull/2418\"><code>v</code>-mode</a>, which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )</blockquote></mx-reply>The changes are just a matter of including the punctuators which have meaning (or are reserved) in v-mode; the doubled punctuators don't actually end up mattering as long as the non-doubled versions are all escaped","m.relates_to":{"m.in_reply_to":{"event_id":"$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU"}},"msgtype":"m.text"},"ts":1679585070435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_t7q6WIpKDUW5W0UY30mQ8WemCluJbAImE2DcQf-po0"},
{"content":{"body":"the list of reserved punctuators already includes `#`, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, which would cover <code>x</code>-mode comments too, thankfully","msgtype":"m.text"},"ts":1679585118841,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI"},
{"content":{"body":" * the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":" * the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode comments too, thankfully","m.new_content":{"body":"the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode comments too, thankfully","msgtype":"m.text"},"m.relates_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585131306,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ik3WgmKNoLHHv-vemcIQAo5BD-OojAJAHj-l2qmt7t0"},
{"content":{"body":" * the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully","format":"org.matrix.custom.html","formatted_body":" * the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully","m.new_content":{"body":"the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully","format":"org.matrix.custom.html","formatted_body":"the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully","msgtype":"m.text"},"m.relates_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585140286,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hG2djc0pEqLzepi-VRlfCN9VwRS_0Ql4IVZ3JdUBuao"},
{"content":{"body":"> <@rbuckton:matrix.org> If there's a chance we want `RegExp.escape` to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.\n\nFor example, we may never do recursive matching, but it still might be a good idea to escape `&` (used in `(?&name)` for recursive named capture group matching, and `(?(R&name)A|B)` in conditionals to test for recursion of a group).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If there's a chance we want <code>RegExp.escape</code> to always remain stable, it may be worth going over the RegExp syntax investigation I did at https://rbuckton.github.io/regexp-features/features/ to ensure we're future-proof against other syntax we may choose to adopt later. Though, I admit that's not a completely exhaustive list.</blockquote></mx-reply>For example, we may never do recursive matching, but it still might be a good idea to escape <code>&amp;</code> (used in <code>(?&amp;name)</code> for recursive named capture group matching, and <code>(?(R&amp;name)A|B)</code> in conditionals to test for recursion of a group).","m.relates_to":{"m.in_reply_to":{"event_id":"$EmtAqZUo7JJrTAyKIKfZ9YcwUdh3c8-Ce9sZsVT4Hvg"}},"msgtype":"m.text"},"ts":1679585161277,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8"},
{"content":{"body":"> <@rbuckton:matrix.org> For example, we may never do recursive matching, but it still might be a good idea to escape `&` (used in `(?&name)` for recursive named capture group matching, and `(?(R&name)A|B)` in conditionals to test for recursion of a group).\n\n`&` needs to be escaped anyway for v-mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For example, we may never do recursive matching, but it still might be a good idea to escape <code>&amp;</code> (used in <code>(?&amp;name)</code> for recursive named capture group matching, and <code>(?(R&amp;name)A|B)</code> in conditionals to test for recursion of a group).</blockquote></mx-reply><code>&amp;</code> needs to be escaped anyway for v-mode","m.relates_to":{"m.in_reply_to":{"event_id":"$5VKeY3d-GrXXNkLGPEo4LmtD4Sslk5jEcrDPYS7KKI8"}},"msgtype":"m.text"},"ts":1679585198181,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$T1F3ikQD3EBNY750SANj377Myuh91EaM3uwdly9QSRo"},
{"content":{"body":"> <@bakkot:matrix.org> the list of reserved punctuators already includes `#`, so it would be escaped also, which would cover `x`-mode line comments too, thankfully\n\nThat's not shown in the slides though, which only mentions `(){}[]|,.?*+-^$=<>\\`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the list of reserved punctuators already includes <code>#</code>, so it would be escaped also, which would cover <code>x</code>-mode line comments too, thankfully</blockquote></mx-reply>That's not shown in the slides though, which only mentions <code>(){}[]|,.?*+-^$=&lt;&gt;\\</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$GU4Cy-J2J11bSY--evL07mrjxOr1Kn7CA-T-3wSxVJI"}},"msgtype":"m.text"},"ts":1679585200398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q_mTBbvoQZXxDzIai_g0raA7SRZzsjt8xPkSuZK0Yvk"},
{"content":{"body":"it does say \"etc\"","msgtype":"m.text"},"ts":1679585206298,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MH9mhU5kAyzeu1o5MpecuA-jH-vAg81Vyzm_k8-fCnU"},
{"content":{"body":"pull request to the agenda","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585238032,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$vAiVA8N9KGiRGRwnn0hx0a50HG1pHCyNxw-K_TrPxoU"},
{"content":{"body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is bt much chance of more overflow. ","format":"org.matrix.custom.html","formatted_body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is bt much chance of more overflow.","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$vAiVA8N9KGiRGRwnn0hx0a50HG1pHCyNxw-K_TrPxoU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585242965,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84"},
{"content":{"body":"* The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow. ","m.new_content":{"body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow. ","format":"org.matrix.custom.html","formatted_body":"The best way is to PR the agenda as that guarantees all chairs will see it. But normally messaging the chairs in matrix is enough. I will say that after we add Ron's overflow, there is not much chance of more overflow.","msgtype":"m.text"},"m.relates_to":{"event_id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585259772,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$MditBbbfm3tiO97dbT83s8mpgZDrEbB8rgj6J4abMJY"},
{"content":{"body":"Yeah, but that's somewhat unclear. If it were to escape `A`, for example, that would be a problem for https://github.com/tc39/proposal-regexp-buffer-boundaries","format":"org.matrix.custom.html","formatted_body":"Yeah, but that's somewhat unclear. If it were to escape <code>A</code>, for example, that would be a problem for https://github.com/tc39/proposal-regexp-buffer-boundaries","msgtype":"m.text"},"ts":1679585262286,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Pb3OhttEn2nih-5K6cHUOYixgaMoXlvFVwW86KzLtFQ"},
{"content":{"body":"there's already o-f for async ex res mgmt.  is there an additional item from Ron?","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$MZCNyz09pA22aoVxnzuTtcPTuht_kB207vA9UD8X_84"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585307329,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg"},
{"content":{"body":" * there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","format":"org.matrix.custom.html","formatted_body":" * there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","m.new_content":{"body":"there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","format":"org.matrix.custom.html","formatted_body":"there's already o-f for async ex res mgmt - 30 mins.  is there an additional item from Ron?","msgtype":"m.text"},"m.relates_to":{"event_id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679585322084,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$eOkdJ2ysHuM0FjGsa4V0xSlaKBJMtfrCNUok-Y7yFo4"},
{"content":{"body":"It does also say it's only including punctuators, which would not include `A`","format":"org.matrix.custom.html","formatted_body":"It does also say it's only including punctuators, which would not include <code>A</code>","msgtype":"m.text"},"ts":1679585342023,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$glFBlA6fcXjWpDOlCWwBK8W4eLYZD_WV-cdWAo64_eA"},
{"content":{"body":"oh... there was only a spare 25 minutes in the schedule to begin with","m.relates_to":{"event_id":"$I62Hd1UgLbvu6DMN40rPGSiltDqa4eFl6gjLpZUgVtY","is_falling_back":true,"m.in_reply_to":{"event_id":"$AvoZrfoJc1Sth1NMLW0dYrP-8UHLJyO1v2IkkjBTFEg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679585353921,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$zE49LW8IHkj2HuNvrXMfnioPLU7zfE_oW0NDLASGcZY"},
{"content":{"body":"Plus that list doesn't match the explainer currently, so there doesn't seem to be a definitive source of truth. Maybe that's a stage 2 concern, but if the point of the slides is \"RegExp.escape is safe\", then its important to clarify how safe.","msgtype":"m.text"},"ts":1679585408963,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cFRLGA0KqYtYEtqvKNJ8Bg2OJTFJRc64QH6RbEie0w4"},
{"content":{"body":"Presumably it's sufficient to guarantee that `RegExp.escape()` safe for its own `RegExp`, rather than being safe forever.","format":"org.matrix.custom.html","formatted_body":"Presumably it's sufficient to guarantee that <code>RegExp.escape()</code> safe for its own <code>RegExp</code>, rather than being safe forever.","msgtype":"m.text"},"ts":1679586245170,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$JM9MLQLxYfyQHiEv5F_kWyto8OHX9Fq1-e7D-iat4SU"},
{"content":{"body":"Well, that depends on whether anyone starts depending on it _not_ escaping certain things","format":"org.matrix.custom.html","formatted_body":"Well, that depends on whether anyone starts depending on it <em>not</em> escaping certain things","msgtype":"m.text"},"ts":1679586335944,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MnP1-RLKTC7xEEzbEvERl79jicZDc-LP0P05FC8YV24"},
{"content":{"body":"rbuckton: Updated the slides to list proposed contexts as well, and went through all the ones you listed in your research doc as well","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: Updated the slides to list proposed contexts as well, and went through all the ones you listed in your research doc as well","msgtype":"m.text"},"ts":1679586660465,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ncrBIs5q-AS2X3XSJ4rfv_U_qRUanMfB06Qfl0mMeio"},
{"content":{"body":"I'm kinda tempted to just say it escapes _every_ ascii punctuator except `_`, since I've listed I think all of them except the two quotes and backtick at this point","format":"org.matrix.custom.html","formatted_body":"I'm kinda tempted to just say it escapes <em>every</em> ascii punctuator except <code>_</code>, since I've listed I think all of them except the two quotes and backtick at this point","msgtype":"m.text"},"ts":1679586696449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU"},
{"content":{"body":"I did also update it to include line terminators for `x`-mode line comments","format":"org.matrix.custom.html","formatted_body":"I did also update it to include line terminators for <code>x</code>-mode line comments","msgtype":"m.text"},"ts":1679586709340,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0m8rnULvoE9ahQ5A3chX5wQY2ny1Mq9Q4WPEcq3x-9s"},
{"content":{"body":" * I did also update it to include line terminators so you can't break out of `x`-mode line comments, which is something I'd previously neglected","format":"org.matrix.custom.html","formatted_body":" * I did also update it to include line terminators so you can't break out of <code>x</code>-mode line comments, which is something I'd previously neglected","m.new_content":{"body":"I did also update it to include line terminators so you can't break out of `x`-mode line comments, which is something I'd previously neglected","format":"org.matrix.custom.html","formatted_body":"I did also update it to include line terminators so you can't break out of <code>x</code>-mode line comments, which is something I'd previously neglected","msgtype":"m.text"},"m.relates_to":{"event_id":"$0m8rnULvoE9ahQ5A3chX5wQY2ny1Mq9Q4WPEcq3x-9s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679586725147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HvYmW_82CrFzQiL0LUHXLiKwRSaGitH2klonNxCnO3c"},
{"content":{"body":"That's why I posed the questions earlier. Do we need to ensure `RegExp.escape()` is consistent for all time? If so, do we do that my making a best guess as to what potential syntax characters we might encounter in the future, and will that limit us in terms of what new syntax we can add? Or do we aggressively escape anything that is not alpha-numeric (or equivalent unicode characters)?","format":"org.matrix.custom.html","formatted_body":"That's why I posed the questions earlier. Do we need to ensure <code>RegExp.escape()</code> is consistent for all time? If so, do we do that my making a best guess as to what potential syntax characters we might encounter in the future, and will that limit us in terms of what new syntax we can add? Or do we aggressively escape anything that is not alpha-numeric (or equivalent unicode characters)?","msgtype":"m.text"},"ts":1679586789756,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KU22DUVDbEi_r9DuDSB7BXwRnE9XwRNuwrKkdxg_95c"},
{"content":{"body":"> <@bakkot:matrix.org> I'm kinda tempted to just say it escapes _every_ ascii punctuator except `_`, since I've listed I think all of them except the two quotes and backtick at this point\n\nI think that may be safer, though `_` might even be worth escaping since it has meaning as part of some control verbs in Perl.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I'm kinda tempted to just say it escapes <em>every</em> ascii punctuator except <code>_</code>, since I've listed I think all of them except the two quotes and backtick at this point</blockquote></mx-reply>I think that may be safer, though <code>_</code> might even be worth escaping since it has meaning as part of some control verbs in Perl.","m.relates_to":{"m.in_reply_to":{"event_id":"$EEv-S_-D2YvmTmIjiSYFOxxXqLOmymUFVCckMYhOcQU"}},"msgtype":"m.text"},"ts":1679586858633,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RtwbxlIfMq1yJhlC5mMceTQLmdVjlT120yaHYBK5Iu0"},
{"content":{"body":"I think we should commit to not using `_` for anything ever","format":"org.matrix.custom.html","formatted_body":"I think we should commit to not using <code>_</code> for anything ever","msgtype":"m.text"},"ts":1679586879255,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ycilAG3faypy-04W-LHmvUMv3kHRWkHYBIbHDx4GBXk"},
{"content":{"body":"v-mode had that discussion already when they decided not to include it in the double-punctuator reservations","msgtype":"m.text"},"ts":1679586897792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$msMtnxSjeQ7AH2SwPtes1DHkY_uTUqr84yUp8-g08Xk"},
{"content":{"body":"Perl has `(*positive_lookahead: ... )`, for example","format":"org.matrix.custom.html","formatted_body":"Perl has <code>(*positive_lookahead: ... )</code>, for example","msgtype":"m.text"},"ts":1679586934337,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3vrJ7VjgwzdgTMHi2TT_3rCPp8f4zAvd4iy8va6JCis"},
{"content":{"body":"ah, that seems more like it's being used as an identifier character, and doesn't need to be escaped any more than any other identifier character","msgtype":"m.text"},"ts":1679586978432,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BGAOx6bEvTOIPs3o52YPOHkeTVe7VVUtGrz0SKuTt0Q"},
{"content":{"body":"PCRE also uses `` ` ``, `'`, `\"`, and `%` for callouts.","format":"org.matrix.custom.html","formatted_body":"PCRE also uses <code>`</code>, <code>'</code>, <code>&quot;</code>, and <code>%</code> for callouts.","msgtype":"m.text"},"ts":1679587021762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE"},
{"content":{"body":"I'm not sure we'll ever do callouts, but you can never be certain.","msgtype":"m.text"},"ts":1679587038921,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wSvYShlINKzSTI5cCAOZ6wX711Gv85_jeiLiJ5yES7c"},
{"content":{"body":"ok I will just say every ascii punctuator","msgtype":"m.text"},"ts":1679587072928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$82Pj2BlvNHsIdKNKJBJ49OmGWeXp0-POvBkJCQasxIo"},
{"content":{"body":"except `_`","format":"org.matrix.custom.html","formatted_body":"except <code>_</code>","msgtype":"m.text"},"ts":1679587075696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rNF-dx_VHzaZgT03tIKy4Zqn3dczJmwZkL4urrSVHBc"},
{"content":{"body":"And note that we might be able to make it less aggressive","msgtype":"m.text"},"ts":1679587092655,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OGYras3U-xKbtz2ZYjMJcP5u5IYOKoWybcmiXBfnIBk"},
{"content":{"body":"That's fine with me.","msgtype":"m.text"},"ts":1679587100619,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BBGAwHGvqhDqem58anBZW8t-3GJELNiLJI6clCRYSdc"},
{"content":{"body":"re: future constraints, this does mean that we're committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose","msgtype":"m.text"},"ts":1679587142845,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE"},
{"content":{"body":"> <@rbuckton:matrix.org> PCRE also uses `` ` ``, `'`, `\"`, and `%` for callouts.\n\n`'` is actually used quite a bit across RegExp engines, primarily as an alternative to `<>` for named capture groups.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>PCRE also uses <code>`</code>, <code>'</code>, <code>\"</code>, and <code>%</code> for callouts.</blockquote></mx-reply><code>'</code> is actually used quite a bit across RegExp engines, primarily as an alternative to <code>&lt;&gt;</code> for named capture groups.","m.relates_to":{"m.in_reply_to":{"event_id":"$oHIdYlOEjxHRUUFb_FxdqwNaV-K9vJsO5QMX1S4txaE"}},"msgtype":"m.text"},"ts":1679587163921,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8TAIQQaTyIVaeMDb566DCyhmsc5lkrguQHVdbAFw5Q8"},
{"content":{"body":"> <@bakkot:matrix.org> re: future constraints, this does mean that we're committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose\n\nAs far as I can tell, no. The most likely engines that might have that would be Perl, PCRE, and Oniguruma, but I don't see anything like that so far.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: future constraints, this does mean that we&#39;re committing that backslash + punctuator is only ever going to mean the punctuator, but that is I think a good limit to impose</blockquote></mx-reply>As far as I can tell, no. The most likely engines that might have that would be Perl, PCRE, and Oniguruma, but I don't see anything like that so far.","m.relates_to":{"m.in_reply_to":{"event_id":"$B8sdbH2g3bpCOyRiWjTyHZZG9HKfjcR0fBS4-fHYzWE"}},"msgtype":"m.text"},"ts":1679587399925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GR1w6ir1EXyCHK8RbcDRcfI_PMiLMP2WjpwhosrLyxg"},
{"content":{"body":"Sorry, by \"no\" do you mean \"no one uses backslash + punctuator to mean anything other than the punctuator\"?","msgtype":"m.text"},"ts":1679587465214,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE"},
{"content":{"body":"> <@bakkot:matrix.org> Sorry, by \"no\" do you mean \"no one uses backslash + punctuator to mean anything other than the punctuator\"?\n\nCorrect, though I'm still checking.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Sorry, by &quot;no&quot; do you mean &quot;no one uses backslash + punctuator to mean anything other than the punctuator&quot;?</blockquote></mx-reply>Correct, though I'm still checking.","m.relates_to":{"m.in_reply_to":{"event_id":"$RiJ1dK0wem_pwzNGdwD59T1vtfRh-7rbHAIpycBmLpE"}},"msgtype":"m.text"},"ts":1679587483397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rjPdhDJydJ_YK2W5xanUWzs1afy5ALYEV9hDzTUZrgY"},
{"content":{"body":"I think it would be safe to say that we also would never consider `\\`+punctuator to mean anything other than the punctuator.","format":"org.matrix.custom.html","formatted_body":"I think it would be safe to say that we also would never consider <code>\\</code>+punctuator to mean anything other than the punctuator.","msgtype":"m.text"},"ts":1679587511137,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gcKjnVeLJHJmjJ3p7-Ek2yveRBImd_coV0ysaaBwUwA"},
{"content":{"body":"There are other ways to introduce syntax that would be more meaningful than say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":"There are other ways to introduce syntax that would be more meaningful than say, whatever <code>\\~</code> might mean.","msgtype":"m.text"},"ts":1679587610627,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pgvnomn4rMuKrlOYC4Vh0ZcUs8DNqmTBr4--IKf3WoY"},
{"content":{"body":"chairs, am i still up first today? if so i'll be about 2-3 mins late","msgtype":"m.text"},"ts":1679590600347,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E"},
{"content":{"body":"> <@shuyuguo:matrix.org> chairs, am i still up first today? if so i'll be about 2-3 mins late\n\nyes -  Shared structs update","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>chairs, am i still up first today? if so i&#39;ll be about 2-3 mins late</blockquote></mx-reply>yes -  Shared structs update","m.relates_to":{"m.in_reply_to":{"event_id":"$QQufOJA-J7pjyO8JCkT0C9o6fnEMQfao75Woo8WmS6E"}},"msgtype":"m.text"},"ts":1679590649852,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$e79YnqMp2a-dsZE0DuMOMCnllnxkw6Ief7qlDZ6rqaM"},
{"content":{"body":"thanks for confirmation","msgtype":"m.text"},"ts":1679590671218,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s9eVn-c23F8zpq5CqJN3nTuHoF3XwQrbAj98gRQ0kK8"},
{"content":{"body":"(reason being i still don't have home internet and have to wait till 10 to kick people out of the meeting room i booked)","msgtype":"m.text"},"ts":1679590689252,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jWzE535iMSRN2bEZRmhWhZkYOkZApAn1J86mTAYwHz8"},
{"content":{"body":" * There are other ways to introduce syntax that would be more meaningful than, say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":" * There are other ways to introduce syntax that would be more meaningful than, say, whatever <code>\\~</code> might mean.","m.new_content":{"body":"There are other ways to introduce syntax that would be more meaningful than, say, whatever `\\~` might mean.","format":"org.matrix.custom.html","formatted_body":"There are other ways to introduce syntax that would be more meaningful than, say, whatever <code>\\~</code> might mean.","msgtype":"m.text"},"m.relates_to":{"event_id":"$pgvnomn4rMuKrlOYC4Vh0ZcUs8DNqmTBr4--IKf3WoY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679590696724,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_CkntQKrgQfgpmCEor-PFV8qsgnc6pwa0rhQdq1BA9U"},
{"content":{"body":"should be fine -- room still fairly empty over there","msgtype":"m.text"},"ts":1679590776688,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$4VTUHHMsGym34wN3rVJVgwfnjlT7moTRyd3uPOk76GI"},
{"content":{"body":"I love this deck. ","msgtype":"m.text"},"ts":1679591131109,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$wqnSYWb_JheNUF_IosnmASJbo3zCdz0FHjxpqrXzoYk"},
{"content":{"body":"wait, at what stage is shared structs?","msgtype":"m.text"},"ts":1679591186991,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA"},
{"content":{"body":"Is that only me can't see shared screen?","msgtype":"m.text"},"ts":1679591193764,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4"},
{"content":{"body":"I can see it","msgtype":"m.text"},"ts":1679591200392,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RjofGcKQixnviBN9ZiPmWsJaWTeIr6_8t26hPj46MLs"},
{"content":{"body":"maybe you have something else pinned?","m.relates_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4","is_falling_back":true,"m.in_reply_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591258035,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$cCG1rMXOYPErgMWddbhd7n6-4plREnIix_FiZUVuTTo"},
{"content":{"body":"in top left, is there a button to switch to shared content?","m.relates_to":{"event_id":"$bPMTN8nceO-simRfK78TOFV81iBJ9FqQqUBbGHEO8P4","is_falling_back":true,"m.in_reply_to":{"event_id":"$cCG1rMXOYPErgMWddbhd7n6-4plREnIix_FiZUVuTTo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591270929,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$vLP2WGBTeCEi-WIksj5c0BCLXt9dbUc-VFQ18votBIw"},
{"content":{"body":"exit and rejoin, still can't see shared screen 😭","msgtype":"m.text"},"ts":1679591327615,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs"},
{"content":{"body":"using app or browser?","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591366673,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$H-ophvpK81hzKmDxLdvtejamf5TulqsK7VvttnPvPFg"},
{"content":{"body":"> <@abotella:igalia.com> wait, at what stage is shared structs?\n\n1: https://github.com/tc39/proposal-structs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>wait, at what stage is shared structs?</blockquote></mx-reply>1: https://github.com/tc39/proposal-structs","m.relates_to":{"m.in_reply_to":{"event_id":"$M3fD6aAYYH7aOKkuFnWUSae2MeXOQKj6o_1qayj5TlA"}},"msgtype":"m.text"},"ts":1679591373319,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Q9muQ5JibAe5vwiPyeg4TWazr6QTsiV3cnx9SKMYocY"},
{"content":{"body":"app","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$H-ophvpK81hzKmDxLdvtejamf5TulqsK7VvttnPvPFg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591389064,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$tRwFpofClQFgwgyfsHEitTTEHk2iMwmhyibOTTTBN0g"},
{"content":{"body":"oh, I was Ctrl+Fing for \"shared\" in the proposal lists","msgtype":"m.text"},"ts":1679591407021,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M"},
{"content":{"body":"it works now!","m.relates_to":{"event_id":"$--fTpNJoSKH2Vi267tx33kkvbHwHKYKCJuELFYAprqs","is_falling_back":true,"m.in_reply_to":{"event_id":"$tRwFpofClQFgwgyfsHEitTTEHk2iMwmhyibOTTTBN0g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679591410036,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Dte6qr_CYqCJ1PuDPfvuAgPXwt50tkU9PDtlMJFKBnk"},
{"content":{"body":" * oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it","m.new_content":{"body":"oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it","msgtype":"m.text"},"m.relates_to":{"event_id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591426470,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$N9zdzmgo_o4cMLDCxuXO229_G4Dn1-OflFOho8_ZEKI"},
{"content":{"body":"well, ideally that'd imply Stage 0 🙈","msgtype":"m.text"},"ts":1679591441847,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$LFQzMD80KFBS8tjCOXHJGuHaZpfTB3N0CHzR-zMfil4"},
{"content":{"body":"it's missing from the proposals repo...","msgtype":"m.text"},"ts":1679591455303,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$KPFRaPdUpm9NskIEK9LBAwsnYlJICRk12zv6jtOMqIs"},
{"content":{"body":"\"Shared structs\" have always been part of Shu's \"structs\" proposal.","msgtype":"m.text"},"ts":1679591458439,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UlGcOfyEWOFjq3wWctjxn_DlXcaeTZATZP0TH6MphO8"},
{"content":{"body":"ok, i can see the screen now. not sure what happened , may be just network issue.","msgtype":"m.text"},"ts":1679591458703,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$eDY462wwpNSvjQwxrL7pyNlLSUmntvgqtYMmeHv4pR8"},
{"content":{"body":"> <@abotella:igalia.com> oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it\n\nstage 1 proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>oh, I was Ctrl+Fing for &quot;shared&quot; in the proposal lists and couldn&#39;t find it</blockquote></mx-reply>stage 1 proposals are in a separate list","m.relates_to":{"m.in_reply_to":{"event_id":"$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M"}},"msgtype":"m.text"},"ts":1679591504417,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OPPS5O0xODS3HrKAyYhTCqmj9IbrfU6twWccrDCz3d4"},
{"content":{"body":"> <@abotella:igalia.com> oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it\n\n * stage 1 (and zero) proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1AOlTnZJwkNaYEXe-yY23quUZq5lGXWT8bOCrbdsx2M?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>oh, I was Ctrl+Fing for \"shared\" in the proposal lists and couldn't find it</blockquote></mx-reply> * stage 1 (and zero) proposals are in a separate list","m.new_content":{"body":"stage 1 (and zero) proposals are in a separate list","format":"org.matrix.custom.html","formatted_body":"stage 1 (and zero) proposals are in a separate list","msgtype":"m.text"},"m.relates_to":{"event_id":"$OPPS5O0xODS3HrKAyYhTCqmj9IbrfU6twWccrDCz3d4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591510050,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JEBdiUBwS2LWhuZHBEwDdso1J-730KKTkjepd1xivRs"},
{"content":{"body":"yeah it;s still missing from the list","msgtype":"m.text"},"ts":1679591512111,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$NhZN1i4TJMojbhy-FgSFWXJziTh_jdEEtTKKUVp7ra4"},
{"content":{"body":"https://github.com/tc39/proposals/blob/main/stage-1-proposals.md","msgtype":"m.text"},"ts":1679591522861,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$MmFGrHZaSl5r7cTjy-J5GlbsdP44SViQSNB3yTGmjA4"},
{"content":{"body":"yeah, I was searching in all lists, but I was searching for \"shared\" and couldn't find it","msgtype":"m.text"},"ts":1679591527727,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ZUjyXfttX6EA3AugNSledDCHzBInvRbH4_Rrzheic0s"},
{"content":{"body":"\"fixed shape objects\" is in the list","msgtype":"m.text"},"ts":1679591532839,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dqE9sBosW4__KSUc7SJLkBSLdUl9VKP1KsaaFJpbEbo"},
{"content":{"body":"that was what it was presented as when it got stage 1, i assume","msgtype":"m.text"},"ts":1679591544272,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LlUcXkFLcA00pkXYbfyTxcxpbpIb_1CaBPqiaaCVbHA"},
{"content":{"body":"ohhhh","msgtype":"m.text"},"ts":1679591554954,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$_O9dExx60tU80ZJytNFtbDCVwc-fJ32bbAOajA6UpEM"},
{"content":{"body":"quick PR incoming","msgtype":"m.text"},"ts":1679591560461,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$uX5lcqG4V_q4bopLaTq5O4a6X1Bzo1_4VUYC5RZi7LI"},
{"content":{"body":"Chris de Almeida: i'm not sure that's appropriate","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@softwarechris:matrix.org\">Chris de Almeida</a>: i'm not sure that's appropriate","msgtype":"m.text"},"ts":1679591587362,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jcSB6kVHszZCqe1j9hm7C6WWMY3ujcBpaCf2ZYI3nqM"},
{"content":{"body":"Maybe this is just me, but the name \"isolate\" shouldn't necessarily guide the direction of the language /s","msgtype":"m.text"},"ts":1679591588346,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA"},
{"content":{"body":"at stage 1 the proposal name should describe the problem, and \"shared structs\" is a solution","msgtype":"m.text"},"ts":1679591600116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU"},
{"content":{"body":" * at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me","m.new_content":{"body":"at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me","msgtype":"m.text"},"m.relates_to":{"event_id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679591645764,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$JVuN6nhK8RvFLnA1bJLPk7w-ArMP2sHZMVrNTVsc2Q0"},
{"content":{"body":"> <@abotella:igalia.com> Maybe this is just me, but the name \"isolate\" shouldn't necessarily guide the direction of the language /s\n\nheh I guess this is more generally intelligible if you replace \"isolate\" with \"garbage collected heap\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>Maybe this is just me, but the name &quot;isolate&quot; shouldn&#39;t necessarily guide the direction of the language /s</blockquote></mx-reply>heh I guess this is more generally intelligible if you replace &quot;isolate&quot; with &quot;garbage collected heap&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$UPfslufGouunDBuAzQuACfEa7IDMDvmb8GzeabQD6rA"}},"msgtype":"m.text"},"ts":1679591699838,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4aRKmVwU2tyHQcc5OlFtfAVyIhuvpJsIxMVqi0iHx14"},
{"content":{"body":"> <@ljharb:matrix.org> at stage 1 the proposal name should describe the problem, and \"shared structs\" seems like a solution to me\n\nI think we can afford champions some flexibility here, but Shu is clearly referring to this proposal as \"shared structs\" so it's fine to go with that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>at stage 1 the proposal name should describe the problem, and &quot;shared structs&quot; seems like a solution to me</blockquote></mx-reply>I think we can afford champions some flexibility here, but Shu is clearly referring to this proposal as &quot;shared structs&quot; so it's fine to go with that.","m.relates_to":{"m.in_reply_to":{"event_id":"$zh9Cf0NK7VE0gWn2zXWpyrK5Dwr5uKujEbRPf74eFkU"}},"msgtype":"m.text"},"ts":1679591728828,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X6XFxyLXOTSnMjSF0o9X2P5UZugorJVwmYVhEd06i3w"},
{"content":{"body":"fair enough","msgtype":"m.text"},"ts":1679591748967,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CN2kol4bWK632VL6E_oON6oaeN_Nj0n1FcQ96gbMqkM"},
{"content":{"body":"I think it's reasonable to expect better parity between the title in the tc39/proposals repo and the title on the proposal repo itself","msgtype":"m.text"},"ts":1679591835699,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4"},
{"content":{"body":"Note: I believe Shu is using the term \"closed\" in a mathematical sense, about how these graphs don't point to each other.","msgtype":"m.text"},"ts":1679591840678,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8Np9QOhDsdAmh_BP5karlY8VxyWhsxHNGvASWMfGeMk"},
{"content":{"body":"and \"mutators\" refers to the executing code (which mutates the heap--even if it's purely functional)","msgtype":"m.text"},"ts":1679591938493,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9THpwUlWQLp_vq-U9hh6eE5ycX51B0_b6QkDnIxyB1s"},
{"content":{"body":"i usually default to whatever's on the agenda at advancement time in the proposals table","m.relates_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4","is_falling_back":true,"m.in_reply_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592429551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$im5Sp1cZgNDTclAMGPF8FnyvB2BExIuo1vIVxOOSfXU"},
{"content":{"body":"but i agree that it would be nice if champions kept that in sync :-)","m.relates_to":{"event_id":"$1mI7CuBvduzNnbFXd6uDmw4H2VM7N5_OmTwpL7ebqI4","is_falling_back":true,"m.in_reply_to":{"event_id":"$im5Sp1cZgNDTclAMGPF8FnyvB2BExIuo1vIVxOOSfXU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592438579,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gGIfmPm1NqStL4J4UcEBmZKcvkkZG4ti2hGT1rfoQVo"},
{"content":{"body":"shu: The origin isolation is not really an issue for us in Deno, because our security model ensures that only a single tenant can execute code within a single process. Essentially the effect of cross origin isolation is the default for us. There are some server side runtimes, notably Cloudflare Workers, that run multiple tenants within a single process. They disallow all high precision timers and shared memory entirely.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: The origin isolation is not really an issue for us in Deno, because our security model ensures that only a single tenant can execute code within a single process. Essentially the effect of cross origin isolation is the default for us. There are some server side runtimes, notably Cloudflare Workers, that run multiple tenants within a single process. They disallow all high precision timers and shared memory entirely.","msgtype":"m.text"},"ts":1679593681551,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$WAlykhbaki3OWx5FIjcwv2fBC7rd5UlQ0uYFZ2pLJy4"},
{"content":{"body":"can't you treat a reference to a SAB from inside a shared struct as if it was a per-isolate SAB object","msgtype":"m.text"},"ts":1679593947362,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hrVEuTDoJs5U8Svfr_Zp3EPzbMZpWOBydymfBeOpmLc"},
{"content":{"body":"separate from any other SAB object pointing to the same backing store in the same isolate","msgtype":"m.text"},"ts":1679593963055,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$C5-rkqc5KOnFCvVFzFCLbL9SIa6ARSmsSPmxrys2fBk"},
{"content":{"body":" * different from any other SAB object pointing to the same backing store in the same isolate","m.new_content":{"body":"different from any other SAB object pointing to the same backing store in the same isolate","msgtype":"m.text"},"m.relates_to":{"event_id":"$C5-rkqc5KOnFCvVFzFCLbL9SIa6ARSmsSPmxrys2fBk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594022012,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$F6zXQVdDru__WJxxh2JojxSLLHVNU1rmKYPhK87jKaE"},
{"content":{"body":"Technically probably possible - the identity continuity seems pretty hard (but probably possible). I think the biggest problem is wether this _should_ work, because magic object cloning is not something we have right now. Also what if you have a custom class that extends SAB?","format":"org.matrix.custom.html","formatted_body":"Technically probably possible - the identity continuity seems pretty hard (but probably possible). I think the biggest problem is wether this <em>should</em> work, because magic object cloning is not something we have right now. Also what if you have a custom class that extends SAB?","msgtype":"m.text"},"ts":1679594195336,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$pEquZiMtc7Wll8U3bmVgvXzsfWTZVo5w_ApB919C4uk"},
{"content":{"body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with <code>structuredClone(sab)</code>","msgtype":"m.text"},"ts":1679594256581,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$aMZS-aJ4-PgOfuqdzAc8hRQRyfmyaH6HSfq3aqtP0C4"},
{"content":{"body":"But I guess it would be needed for some use cases","msgtype":"m.text"},"ts":1679594263606,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nDCkws5sRrpbaa1lMsSf8QHrO6ywS6hdegd-J5whWBY"},
{"content":{"body":" * Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":" * Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's <code>structuredClone(sab)</code>","m.new_content":{"body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's `structuredClone(sab)`","format":"org.matrix.custom.html","formatted_body":"Is there a need for identity continuity? You can currently clone a SAB without identity continuity with HTML's <code>structuredClone(sab)</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$aMZS-aJ4-PgOfuqdzAc8hRQRyfmyaH6HSfq3aqtP0C4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594279008,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$GClRhBiWq0va8y6siULSLaYtpbO_4yya-OpDeZXwif0"},
{"content":{"body":"Yes, but there you have an explicit transfer","msgtype":"m.text"},"ts":1679594303731,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$7gmlv_OZZTnxnkyRJEes04xPq5VG0PJokjmJfEG1ZoQ"},
{"content":{"body":"Oh, right, this would be an assignment transforming into a clone behind the scenes","msgtype":"m.text"},"ts":1679594322106,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$6onya_RzA9jV8fy2QRKe70AtnHmEO3rzeN1ROvxw93Y"},
{"content":{"body":"With shared structs, assignment is transfer/publish, which means there is no explicit action a user needs ot to take","msgtype":"m.text"},"ts":1679594325082,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$18MO5l-jAOA6truWCxXez6UeO3HS_-6BmeMqjsGOh3s"},
{"content":{"body":" * With shared structs, assignment is transfer/publish, which means there is no explicit call that needs to be made to transfer","m.new_content":{"body":"With shared structs, assignment is transfer/publish, which means there is no explicit call that needs to be made to transfer","msgtype":"m.text"},"m.relates_to":{"event_id":"$18MO5l-jAOA6truWCxXez6UeO3HS_-6BmeMqjsGOh3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679594348377,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$bZJKOHzexsWLvM324zVyjmtDa0c-j4-ssmJydiOLsBw"},
{"content":{"body":"sounds confusing to users","msgtype":"m.text"},"ts":1679594357269,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$bpJaDaiRPETuCACU81HzedkXNuK8HW1FKysREiNfNnk"},
{"content":{"body":"Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcasrt","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcasrt","msgtype":"m.text"},"ts":1679595155140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OuHA5IIVxuggBMPm2rIkAj0KL6agcxi5-fIKUA2rpe8"},
{"content":{"body":" * Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","m.new_content":{"body":"Andreu Botella: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you can't make assignment a hidden clone anyway, because you need to clone it into a particular target realm, and a shared struct assignment is more like a broadcast","msgtype":"m.text"},"m.relates_to":{"event_id":"$OuHA5IIVxuggBMPm2rIkAj0KL6agcxi5-fIKUA2rpe8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679595159199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DIJYjNfPw-sS-8dAaXPoY9R1NG43pD4ESc6cssBvfO8"},
{"content":{"body":"you'd also want `struct.sab === struct.sab`, and that would require an extra per-isolate map","format":"org.matrix.custom.html","formatted_body":"you'd also want <code>struct.sab === struct.sab</code>, and that would require an extra per-isolate map","msgtype":"m.text"},"ts":1679595250508,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wY6w5BV9mmbpBqAQKAp_4dp03xKu8O2QnnCRTuizQLM"}
]