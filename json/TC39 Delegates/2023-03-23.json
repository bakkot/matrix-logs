[
{"content":{"body":"re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","format":"org.matrix.custom.html","formatted_body":"re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","msgtype":"m.text"},"ts":1679529650826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"},
{"content":{"body":"re: Mark's comments now... when you see a ton of code that's accidentally serial instead of parallel, you really wish for a better syntax for all of this that doesn't encourage bad behavior","msgtype":"m.text"},"ts":1679529748457,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$5uuuQEdJxzFCeNS6chcFgscjQu_5sSOEiKbJHmHtDUg"},
{"content":{"body":"> <@bakkot:matrix.org> re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case\n\nbut it seems not have big benefit for simple case :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case</blockquote></mx-reply>but it seems not have big benefit for simple case :)","m.relates_to":{"m.in_reply_to":{"event_id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"}},"msgtype":"m.text"},"ts":1679530013813,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Tk0Hw_e-Wuhvvke8Uqq5fTUzwp-W0kamWEwyrWKhZSY"},
{"content":{"body":"I'm fairly certain a cover grammar is feasible for `await using`, the big question is whether what I have put together is correct. Given the NLT restrictions, an `await using` declaration must have the first identifier in the binding list on the same line as `await using`, and that is always a syntax error in the expression case. Binding patterns aren't permitted in `using`, so there is no ambiguity with `await using [x]`.","format":"org.matrix.custom.html","formatted_body":"I'm fairly certain a cover grammar is feasible for <code>await using</code>, the big question is whether what I have put together is correct. Given the NLT restrictions, an <code>await using</code> declaration must have the first identifier in the binding list on the same line as <code>await using</code>, and that is always a syntax error in the expression case. Binding patterns aren't permitted in <code>using</code>, so there is no ambiguity with <code>await using [x]</code>.","msgtype":"m.text"},"ts":1679530159062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GD2wrHVTHEs7DzV3aRnKKez2o3QeT9pIcFgaBoMa9N0"},
{"content":{"body":"i'm gonna level with you rbuckton, i do not have enough brainpower left today to vet that cover grammar","format":"org.matrix.custom.html","formatted_body":"i'm gonna level with you <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>, i do not have enough brainpower left today to vet that cover grammar","msgtype":"m.text"},"ts":1679530206968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2HYWekTD2XfeX1NgmieFWskyNx6lurxVj3UnYZySTWw"},
{"content":{"body":"though i'm more interested in how hard it is to implement in a recursive-descent parser anyhow","msgtype":"m.text"},"ts":1679530219093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FopAnLatqvRSiZvppCtlUS7Z8ULNmTk5hKuUZRxKwes"},
{"content":{"body":"i'll try to put time aside before plenary tomorrow to look, but... i also have a presentation tomorrow first thing so also no promises","msgtype":"m.text"},"ts":1679530244542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Epn7bwU_g-UQlz-hbjbqPeQZfJPUbV5y4tpp0iNl6k0"},
{"content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpression","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpression","msgtype":"m.text"},"ts":1679530444630,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530473120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XbnQbrfbZybFG89463uYT4utQb1IeUMiDiAoPNUSRpY"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530500017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u8udsGPPjkJiwhoLRUAliqz_Ny0F3HHaOGRREO0CRfY"}
]