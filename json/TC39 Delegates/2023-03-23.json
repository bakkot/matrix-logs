[
{"content":{"body":"re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","format":"org.matrix.custom.html","formatted_body":"re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case","msgtype":"m.text"},"ts":1679529650826,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"},
{"content":{"body":"re: Mark's comments now... when you see a ton of code that's accidentally serial instead of parallel, you really wish for a better syntax for all of this that doesn't encourage bad behavior","msgtype":"m.text"},"ts":1679529748457,"senderName":"justinfagnani","senderId":"@justinfagnani:matrix.org","id":"$5uuuQEdJxzFCeNS6chcFgscjQu_5sSOEiKbJHmHtDUg"},
{"content":{"body":"> <@bakkot:matrix.org> re: waldemar's point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case\n\nbut it seems not have big benefit for simple case :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>re: <a href=\"https://matrix.to/#/@waldemarh:matrix.org\">waldemar</a>'s point, I agree that more general async dataflow would be great, and is something we should explore, though I think I'd still want this proposal for simple case</blockquote></mx-reply>but it seems not have big benefit for simple case :)","m.relates_to":{"m.in_reply_to":{"event_id":"$2u1UKXgZcq1pQ8TuZuNHAfPOn5CHYmxZic5AU_5D2TA"}},"msgtype":"m.text"},"ts":1679530013813,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Tk0Hw_e-Wuhvvke8Uqq5fTUzwp-W0kamWEwyrWKhZSY"},
{"content":{"body":"I'm fairly certain a cover grammar is feasible for `await using`, the big question is whether what I have put together is correct. Given the NLT restrictions, an `await using` declaration must have the first identifier in the binding list on the same line as `await using`, and that is always a syntax error in the expression case. Binding patterns aren't permitted in `using`, so there is no ambiguity with `await using [x]`.","format":"org.matrix.custom.html","formatted_body":"I'm fairly certain a cover grammar is feasible for <code>await using</code>, the big question is whether what I have put together is correct. Given the NLT restrictions, an <code>await using</code> declaration must have the first identifier in the binding list on the same line as <code>await using</code>, and that is always a syntax error in the expression case. Binding patterns aren't permitted in <code>using</code>, so there is no ambiguity with <code>await using [x]</code>.","msgtype":"m.text"},"ts":1679530159062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GD2wrHVTHEs7DzV3aRnKKez2o3QeT9pIcFgaBoMa9N0"},
{"content":{"body":"i'm gonna level with you rbuckton, i do not have enough brainpower left today to vet that cover grammar","format":"org.matrix.custom.html","formatted_body":"i'm gonna level with you <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>, i do not have enough brainpower left today to vet that cover grammar","msgtype":"m.text"},"ts":1679530206968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2HYWekTD2XfeX1NgmieFWskyNx6lurxVj3UnYZySTWw"},
{"content":{"body":"though i'm more interested in how hard it is to implement in a recursive-descent parser anyhow","msgtype":"m.text"},"ts":1679530219093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FopAnLatqvRSiZvppCtlUS7Z8ULNmTk5hKuUZRxKwes"},
{"content":{"body":"i'll try to put time aside before plenary tomorrow to look, but... i also have a presentation tomorrow first thing so also no promises","msgtype":"m.text"},"ts":1679530244542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Epn7bwU_g-UQlz-hbjbqPeQZfJPUbV5y4tpp0iNl6k0"},
{"content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpression","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpression","msgtype":"m.text"},"ts":1679530444630,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530473120,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XbnQbrfbZybFG89463uYT4utQb1IeUMiDiAoPNUSRpY"},
{"content":{"body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":" * The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","m.new_content":{"body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse `await using x` when `x` is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing `[no LineTerminator here] BindingList`, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","format":"org.matrix.custom.html","formatted_body":"The gist of it is, the cover is identical to AwaitExpression, but UnaryExpression would fail to parse <code>await using x</code> when <code>x</code> is on the same line.  AwaitUsingDeclaration however would be able to consume the cover along with a trailing <code>[no LineTerminator here] BindingList</code>, which seems pretty much equivalent to CoverParenthesizedExpressionAndArrowParameterList and CoverCallExpressionAndAsyncArrowHead","msgtype":"m.text"},"m.relates_to":{"event_id":"$TA-eyZqKj-Sf9hsSWSPhO4Qg5OMur3u5j50TbP7Riis","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679530500017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u8udsGPPjkJiwhoLRUAliqz_Ny0F3HHaOGRREO0CRfY"},
{"content":{"body":"that... sounds reasonable","msgtype":"m.text"},"ts":1679530580619,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$d9yKVR1eH3rwQUxlR5YN4BHZwOsvlOx3sDyWqiMT-Gw"},
{"content":{"body":"Though I'll admit, cover grammars in the spec today sometimes seem a bit hand-wavy in a couple places.","msgtype":"m.text"},"ts":1679530587551,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$54LbxC_nigxUIdC9DOlhQtX5VfaF3E6tCFEs9XK3w-o"},
{"content":{"body":"and i just do a bounded look ahead `await` `using` and see if it's an NLTH identifier","format":"org.matrix.custom.html","formatted_body":"and i just do a bounded look ahead <code>await</code> <code>using</code> and see if it's an NLTH identifier","msgtype":"m.text"},"ts":1679530613700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4qkbk64jtvDy5SaspJ8ftfM3qG8VDMbdS_foDcpNI8"},
{"content":{"body":"in +Await contexts","msgtype":"m.text"},"ts":1679530627341,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DbQ3Wse0uBSgzFsInAlnw6z6rsvMnQXebkYvONO6fYE"},
{"content":{"body":"In TS I'd just do two-token lookahead in +Await","msgtype":"m.text"},"ts":1679530640856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"},
{"content":{"body":"That is one benefit of `await using` over `async using`. For `await using`, both uses of the cover are in +Await, while for `async using`, only one is.","format":"org.matrix.custom.html","formatted_body":"That is one benefit of <code>await using</code> over <code>async using</code>. For <code>await using</code>, both uses of the cover are in +Await, while for <code>async using</code>, only one is.","msgtype":"m.text"},"ts":1679530673906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8gJhqDBfk0vN_B24IoBebtPUOsat7g5guTVoU34v0gA"},
{"content":{"body":"and `await using` without a binding list is unaffected?","format":"org.matrix.custom.html","formatted_body":"and <code>await using</code> without a binding list is unaffected?","msgtype":"m.text"},"ts":1679530736079,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"},
{"content":{"body":"well, is supposed to be, according to the cover","msgtype":"m.text"},"ts":1679530759664,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xP3GaRZmjr3brdUXven6sGd9MLvuW9K_cn7VivjzNiI"},
{"content":{"body":"> <@rbuckton:matrix.org> In TS I'd just do two-token lookahead in +Await\n\nIn fact, I've already done that in my current work on `using` (I was experimenting with all three syntax options).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In TS I&#39;d just do two-token lookahead in +Await</blockquote></mx-reply>In fact, I've already done that in my current work on <code>using</code> (I was experimenting with all three syntax options).","m.relates_to":{"m.in_reply_to":{"event_id":"$cd52seM6yU_Qh3-H0cuJUbk1LBH5k02VmIRpzCknB54"}},"msgtype":"m.text"},"ts":1679530783601,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fDitWXjMbdwr-A8TvkL4KgqFsfvcfUVioYr3FwsoljU"},
{"content":{"body":"is TS a hand-written recursive-descent?","msgtype":"m.text"},"ts":1679530802874,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6sY5gEiyTstyl6Mbe1vimEK5PEW-Jov6MIKTaBzM030"},
{"content":{"body":"> <@shuyuguo:matrix.org> and `await using` without a binding list is unaffected?\n\nI'm not sure what you mean by this. `await using` on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>and <code>await using</code> without a binding list is unaffected?</blockquote></mx-reply>I'm not sure what you mean by this. <code>await using</code> on its own, or anywhere else legal for a UnaryExpression, should end up treated as an AwaitExpression.","m.relates_to":{"m.in_reply_to":{"event_id":"$3YGfEGBp9r3E4fcRuO7BZMbDz-bD8UnHMjIWBjClX9Y"}},"msgtype":"m.text"},"ts":1679530923809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TC94ABL4a377AVVj0_yPrAU0AkMG_7xHWjUshR9nY2Q"},
{"content":{"body":" yes, that is what i meant","msgtype":"m.text"},"ts":1679530935127,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9u7EIyv6erTms6V6aRZQrWKfoLwm-LMRRvliCSTzdKM"},
{"content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`), and parse the remainder of the statement (e.g., ``[NLT] BindingList `;` ``)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>), and parse the remainder of the statement (e.g., <code>[NLT] BindingList `;` </code>)","msgtype":"m.text"},"ts":1679531106574,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8"},
{"content":{"body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":" * From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","m.new_content":{"body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., `await [NLT] using`)","format":"org.matrix.custom.html","formatted_body":"From my understanding of cover grammars, we would eagerly parse CoverAwaitExpressionAndAwaitUsingDeclarationHead, but fail to parse the rest of ExpressionStatement. We could then retry the parse as part of AwaitUsingDeclaration, reusing the cover, and be able to successfully continue to parse. Then static semantics kick in and validate that the CoverAwaitExpressionAndAwaitUsingDeclarationHead is a valid AwaitUsingDeclarationHead (e.g., <code>await [NLT] using</code>)","msgtype":"m.text"},"m.relates_to":{"event_id":"$JtOeMXYt7-mCqzcYYl_QSHibhWDjafb2Q4qofmcZOy8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679531118947,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t1abJbIhfOTwOXQqoYW2RIJcAyA4fMdtuP4yh1jUUDQ"},
{"content":{"body":"i am happy enough to go forward with stage 3","msgtype":"m.text"},"ts":1679531122761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bDfPVK5KNKiPNCPHjrpYg3pq1dcW3z5UjBw0PzGQtCE"},
{"content":{"body":"I will amend the slides with a summary of these changes and wait to see if Waldemar is able to provide feedback in the meantime.","msgtype":"m.text"},"ts":1679531261030,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7GP65lv2pLbm0o4Fowhb45X0B2HZgQ4qDAy6A96ODAQ"},
{"content":{"body":"is there anything we need to do to get Decimal on the overflow, or will it be taken care of?","msgtype":"m.text"},"ts":1679540016073,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"},
{"content":{"body":"> <@michaelficarra:matrix.org> is there anything we need to do to get Decimal on the overflow, or will it be taken care of?\n\nIf there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>is there anything we need to do to get Decimal on the overflow, or will it be taken care of?</blockquote></mx-reply>If there is time to go through the queue for decimal, that would be great, but we could also do that next meeting","m.relates_to":{"m.in_reply_to":{"event_id":"$jInqDvyf_SiSg5tMdrD7Sv0ouyudXyVbuxyoFkZVmzI"}},"msgtype":"m.text"},"ts":1679540981097,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gCjipbSxKpalxEQ3UWCW6qKycAyiUGfexlGQomZLsMM"},
{"content":{"body":"of course, I just wanted to record it on the list of overflow items","msgtype":"m.text"},"ts":1679541011598,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZCNlGIJAR1nqauWE2NlIbB_YRJV3EpKzyYoPsJlgYVg"},
{"content":{"body":"ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing","msgtype":"m.text"},"ts":1679552101706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing\n\nnote the changes would need to be more substantive for dealing with [`v`-mode](https://github.com/tc39/ecma262/pull/2418), which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I made some slides just for mark, if we have time tomorrow, PTAL: https://docs.google.com/presentation/d/1s1IZSo24JpMsI_NponP8vvIKUazld62lcleKF976Ppc/edit?usp=sharing</blockquote></mx-reply>note the changes would need to be more substantive for dealing with <a href=\"https://github.com/tc39/ecma262/pull/2418\"><code>v</code>-mode</a>, which has a wider set of reserved punctuators and semantics for doubled punctuators (https://github.com/tc39/proposal-regexp-v-flag#how-is-the-v-flag-different-from-the-u-flag and https://arai-a.github.io/ecma262-compare/snapshot.html?pr=2418#prod-ClassSetCharacter )","m.relates_to":{"m.in_reply_to":{"event_id":"$C91oHpcNFFZHlwlfD42NDPVxr4bCvGxVYW_1zpm9avA"}},"msgtype":"m.text"},"ts":1679580082210,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hHNfftEqn0UBWnU3VTAjJPhpnC6ZV9J6QeQGxprTuIU"},
{"content":{"body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already. ","format":"org.matrix.custom.html","formatted_body":"Are we ensuring that RegExp.escape is future proof against potential new syntax? Should we be concerned if the output changes in a later version if we have to escape something new? We could choose to be intentionally over-aggressive with escapes, if we're not already.","msgtype":"m.text"},"ts":1679582572841,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D5fjYSBETzNi6sbpz4tOl8mEkztkUV_DXMNJGxxH-xk"},
{"content":{"body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding `\\-`, we could choose to escape it as `\\x2d`. Same for `\\=` (`\\x3d`) and `\\,` (`\\x2c`)","format":"org.matrix.custom.html","formatted_body":"Also, rather than extending u-mode to allow other escapes, we could escape non-u-mode syntax characters using a hexadecimal representation that is legal in all modes. So, instead of adding <code>\\-</code>, we could choose to escape it as <code>\\x2d</code>. Same for <code>\\=</code> (<code>\\x3d</code>) and <code>\\,</code> (<code>\\x2c</code>)","msgtype":"m.text"},"ts":1679583207434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hGqa-OKRGbEN1pVw6A6br3V2M1LS484znH_Ag5vcCt0"},
{"content":{"body":"I'm not saying we shouldn't extend u-mode, but this is an option if we decide not to.","msgtype":"m.text"},"ts":1679583236876,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OatJbAz6SNbg4yu00XCj70Ix385SZXEP8YtRYPqeNvM"}
]