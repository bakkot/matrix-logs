[
{"content":{"body":"I will be happy to revisit it and add the omitted data properties as a proposal once the websites are fixed. I canâ€™t speak to chromes opinion on that tho.","msgtype":"m.text"},"ts":1701218642846,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},
{"content":{"body":"assuming it's web-compat to do so, which it may not be","m.mentions":{},"msgtype":"m.text"},"ts":1701218847336,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$klWkAMDs8cGXkCjO_RF9X4srknw7dK16gP5bbV-4jY8"},
{"content":{"body":"whereas it would almost certainly be web-compat to change the accessors to data properties as long as the people in this room agreed not to rely on them being accessors","m.mentions":{},"msgtype":"m.text"},"ts":1701218868283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H0tpJuB4kf-fqxAzGgaX5aTk7CDu_WdGIRk2MpHKVjA"},
{"content":{"body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up. ","format":"org.matrix.custom.html","formatted_body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up.","msgtype":"m.text"},"ts":1701221712606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EQOReIUIXmtKgUjsn_An35ZNTzg2a4RynLQuBqEjU_M"},
{"content":{"body":"I think that would be worse than just having a bunch of accessors.","m.mentions":{},"msgtype":"m.text"},"ts":1701224014964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r-yY4A55Th3q23piyWW5fibknrScQv-nSrfl8iWjW8Q"},
{"content":{"body":"FYI I will miss the first 90 minutes today","msgtype":"m.text"},"ts":1701278068936,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QtPw7NTtjWQ-lIoSXaqJbwghCFHF3l84QSYfDYBfyCI"},
{"content":{"body":"Rezvan: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rmahdav:matrix.org\">Rezvan</a>: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"m.relates_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU","is_falling_back":true,"m.in_reply_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701278533088,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mUjGSEDzUlqjrkFPgEl47IAMwKzBeNOq3ooRU3eGbEA"},
{"content":{"body":"#jsx:matrix.org ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/#jsx:matrix.org\">#jsx:matrix.org</a>","m.mentions":{},"msgtype":"m.text"},"ts":1701280938467,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HeV-fKEAUJzxeqFXDUv9iZ-9GAVrp8ZpyLQrakF0WPw"},
{"content":{"body":"I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing ","format":"org.matrix.custom.html","formatted_body":"I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing","m.mentions":{},"msgtype":"m.text"},"ts":1701281080900,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"},
{"content":{"body":"> <@rbuckton:matrix.org> I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing\n\ndefinitely, and similar to [CSS.supports](https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing</blockquote></mx-reply>definitely, and similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static\">CSS.supports</a>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"}},"msgtype":"m.text"},"ts":1701281353237,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UIX0NpikPpCl9B3kMJn8ZI-T-X7HUa_jQ4kMdcIVlkc"},
{"content":{"body":"how do people feel about\n```\nFunction.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n```\nas in\n```\nlet { success, value } = JSON.parse.try(string);\n```","format":"org.matrix.custom.html","formatted_body":"<p>how do people feel about</p>\n<pre><code>Function.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n</code></pre>\n<p>as in</p>\n<pre><code>let { success, value } = JSON.parse.try(string);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701281623010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_xZ4PVB2fRsFf0_NOqg48u9oT1S9RNkfmsC7gsDhdC0"},
{"content":{"body":"only works for functions not methods, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1701281668078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dRmT4n1Eo8EstQlsvuq7jDFnzJtbyx80WkUp7QpOaSI"},
{"content":{"body":"guess there could be a `tryWithThis` which would let you do `JSON.parse.try(JSON, string)`","format":"org.matrix.custom.html","formatted_body":"guess there could be a <code>tryWithThis</code> which would let you do <code>JSON.parse.try(JSON, string)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701281706922,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7qwiJkSliJQPyKEOwbzIXpDWlOPGf_d-nvxjGehW9eo"},
{"content":{"body":"i like that, it has the side benefit that it encourages use of standalone functions","m.mentions":{},"msgtype":"m.text"},"ts":1701281715663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rg3fAKqk4p7aaR5jpzbMto5_Y7YJuP4Vvzr9pmFbBk8"},
{"content":{"body":" * i like that (the non-method one), it has the side benefit that it encourages use of standalone functions","m.mentions":{},"m.new_content":{"body":"i like that (the non-method one), it has the side benefit that it encourages use of standalone functions","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Rg3fAKqk4p7aaR5jpzbMto5_Y7YJuP4Vvzr9pmFbBk8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281728935,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$H6jL3NosECzsNJ7dKCtWyTbLR1nztzJpN0PFAc8L7fo"},
{"content":{"body":"`let { success, value } = tryApply(target, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":"<code>let { success, value } = tryApply(target, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"msgtype":"m.text"},"ts":1701281829563,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F9l4b4JMWV776fzkzH0esu6Et32K8NTaqhDJvmpN6Ug"},
{"content":{"body":" * `let { success, value } = tryApply(fn, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":" * <code>let { success, value } = tryApply(fn, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"m.new_content":{"body":"`let { success, value } = tryApply(fn, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":"<code>let { success, value } = tryApply(fn, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$F9l4b4JMWV776fzkzH0esu6Et32K8NTaqhDJvmpN6Ug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281840259,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ub8f1G82bF_TBBUBNXUmkQ9vj5KzO-MDKHd8rD1AMgg"},
{"content":{"body":"`fn.tryApply` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":"<code>fn.tryApply</code> is at least as consistent, surely","m.mentions":{},"msgtype":"m.text"},"ts":1701281856205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wcnzFVRMSCOJ3lZQQ0znEKdxSIOGf-kQ-VF8H7FAP-4"},
{"content":{"body":" * `fn.tryApply(thisArgument, argumentsList)` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":" * <code>fn.tryApply(thisArgument, argumentsList)</code> is at least as consistent, surely","m.mentions":{},"m.new_content":{"body":"`fn.tryApply(thisArgument, argumentsList)` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":"<code>fn.tryApply(thisArgument, argumentsList)</code> is at least as consistent, surely","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wcnzFVRMSCOJ3lZQQ0znEKdxSIOGf-kQ-VF8H7FAP-4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281866874,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GJW7d7I9Pr1t-MtolXOCvM1Y1S2LjT8dxBV2i3M-tpI"},
{"content":{"body":"i'd swap those two but sure","m.mentions":{},"msgtype":"m.text"},"ts":1701281889714,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA"},
{"content":{"body":" * i'd swap those two but sure (`thisArg` goes last, just like all the array methods)","format":"org.matrix.custom.html","formatted_body":" * i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods)","m.mentions":{},"m.new_content":{"body":"i'd swap those two but sure (`thisArg` goes last, just like all the array methods)","format":"org.matrix.custom.html","formatted_body":"i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281902094,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DPvFYPhTodlm-nRLmQkyUG5Mse9brFGbSTJkeHGMxpg"},
{"content":{"body":"or I guess `fn.tryCall(thisArgument, ...args)`","format":"org.matrix.custom.html","formatted_body":"or I guess <code>fn.tryCall(thisArgument, ...args)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701281909437,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$bHfiwKl61fh44nMRdZOu4BODM6AXvUlDgpjQbw2zV7Q"},
{"content":{"body":" * i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)","format":"org.matrix.custom.html","formatted_body":" * i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)","m.mentions":{},"m.new_content":{"body":"i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)","format":"org.matrix.custom.html","formatted_body":"i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281910863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sjIeI5Q9Egj2V1WMwVrpvAxa4c5bl0cQMRaF4U15D6k"},
{"content":{"body":"> <@ljharb:matrix.org> i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)\n\nI disagree, `thisArg` should come first, like `call` and `apply`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)</blockquote></mx-reply>I disagree, <code>thisArg</code> should come first, like <code>call</code> and <code>apply</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA"}},"msgtype":"m.text"},"ts":1701281929703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aq4ObuVFf4Y0tFHQaWBYqFVQwZDEUkOiqiTH67w3L54"},
{"content":{"body":"oh hm, i guess i see that argument too","m.mentions":{},"msgtype":"m.text"},"ts":1701281942501,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aODpik9hEEk7iqzmLC_UHy2yar02Sy8zM-vjGjg70Uc"},
{"content":{"body":"but also I would want a version that doesn't take `this` at all","format":"org.matrix.custom.html","formatted_body":"but also I would want a version that doesn't take <code>this</code> at all","m.mentions":{},"msgtype":"m.text"},"ts":1701281942593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZrYCwOgO4YX-KZfB1OlUndxVc7hd339Lnd3bsJg5QaQ"},
{"content":{"body":"i get this feeling that like","m.mentions":{},"msgtype":"m.text"},"ts":1701281963310,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lsnP-n6_wsusk6NULyPF7plDGAWL77iTyNfTMMIIx2s"},
{"content":{"body":"so specifically I think I like best `.try`, which is only useful for non-methods, and `.tryCall`, which adds an initial `this` parameter","format":"org.matrix.custom.html","formatted_body":"so specifically I think I like best <code>.try</code>, which is only useful for non-methods, and <code>.tryCall</code>, which adds an initial <code>this</code> parameter","m.mentions":{},"msgtype":"m.text"},"ts":1701281963831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HdMD63f5BrYJlvxn0mzP8UQcMjUiRpOHOQAA3nxbYYM"},
{"content":{"body":"yeah if the thisArg has to come first in a call/apply variant then i'd def want yet another one that omitted the receiver entirely","m.mentions":{},"msgtype":"m.text"},"ts":1701281966264,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5vLN5d9XipfoLfK09tv_HqSXXoItuf9cTPHZUiVLWNs"},
{"content":{"body":"async modules are some sort of fundamental failure","m.mentions":{},"msgtype":"m.text"},"ts":1701281971304,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eMo4uXSfe_AWsuUGJbfcSF5PnbqIfmlzQJCMjODHbAY"},
{"content":{"body":"yeah, that's the friction point","m.mentions":{},"msgtype":"m.text"},"ts":1701281972369,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$j4e3-AuU5svPa-Y20dzSQgTPttLyaad_AuYCcFSkZYw"},
{"content":{"body":"because everyone keeps trying to build ways to disable them","m.mentions":{},"msgtype":"m.text"},"ts":1701281976815,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dEc-gym8NttMEbYPwe18qHdvqlGjQE4-gWXHlw9IwWI"},
{"content":{"body":"but i don't want them to be some sort of fundamental failure","m.mentions":{},"msgtype":"m.text"},"ts":1701281991444,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$42vnADhl0RQvOKWIlr8s8TYAwAKmYJ7n632qECrCayY"},
{"content":{"body":"i really like them","m.mentions":{},"msgtype":"m.text"},"ts":1701281993299,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3jD8K8BPc6LyT0C2vTRGcw3KSAa1LIN4r64oR1Y8S64"},
{"content":{"body":"agreed on both points","m.mentions":{},"msgtype":"m.text"},"ts":1701282013915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZJ9buAihVHjUbXewNhqvVyvy7iza8AHvn_Hn8c17cd4"},
{"content":{"body":"another place where async modules were no longer used https://github.com/WebAssembly/esm-integration/pull/76","m.mentions":{},"msgtype":"m.text"},"ts":1701282191894,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pDmG_0GvfgCV7-QEsups9dDzjF0oy1h5Q37SUk2Ydb0"},
{"content":{"body":"lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore","m.mentions":{},"msgtype":"m.text"},"ts":1701282284348,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM"},
{"content":{"body":"eh, I think directives which either evaluate normally or cause errors aren't really new modes","m.mentions":{},"msgtype":"m.text"},"ts":1701282312042,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxqSC0A7g7fxpaXsWOK-RfHvuo7E4h-50wM1Vgfn8h4"},
{"content":{"body":"> <@ljharb:matrix.org> lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore\n\nThis directive wouldn't be a new mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>lol if we end up doing a directive, there&#39;s going to be a deluge of pragma/directive proposals once &quot;no more modes&quot; isn&#39;t a law anymore</blockquote></mx-reply>This directive wouldn't be a new mode","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM"}},"msgtype":"m.text"},"ts":1701282315737,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0OPFQOLZqtUcMAq0k55lYn3r3j7ILvVicEk6jKfHX2c"},
{"content":{"body":"> <@ljharb:matrix.org> lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore\n\n * This directive wouldn't be a new mode like strict vs sloppy","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore</blockquote></mx-reply> * This directive wouldn't be a new mode like strict vs sloppy","m.mentions":{},"m.new_content":{"body":"This directive wouldn't be a new mode like strict vs sloppy","format":"org.matrix.custom.html","formatted_body":"This directive wouldn't be a new mode like strict vs sloppy","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0OPFQOLZqtUcMAq0k55lYn3r3j7ILvVicEk6jKfHX2c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701282321742,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vMYMEJleM-X-w44U1qYCLQc_WSHVe0mA_IaNK6fbEP4"},
{"content":{"body":"It doesn't introduce a new \"language version\"","m.mentions":{},"msgtype":"m.text"},"ts":1701282336642,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dBs_O-hPFCxWiL4julXkatgIv8QHvpJqLS9umPx2a6g"},
{"content":{"body":"No more than doing the same through any other syntax","m.mentions":{},"msgtype":"m.text"},"ts":1701282348341,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$webZ9aIQl7kDQaBHzGPT87d9GF0soDkGYqXMfO28Dxc"},
{"content":{"body":"lol yeah i understand the nuance, but i don't think it will come across","m.mentions":{},"msgtype":"m.text"},"ts":1701282350896,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-8DGmqolB7DLqxPZfJ56ZZ1o_DfFfKxwSJOPk9TROLA"},
{"content":{"body":"`export with { sync: true }`? Not a huge fan of how it reads though.","format":"org.matrix.custom.html","formatted_body":"<code>export with { sync: true }</code>? Not a huge fan of how it reads though.","m.mentions":{},"msgtype":"m.text"},"ts":1701282563021,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DovOAfeNDr9keiOF0HacLJzTk0YAO3bmPtVIe9Ec7IY"},
{"content":{"body":"ps here's a relevant snippet from the notes from 2018 related to this exact problem: https://github.com/tc39/notes/blob/df1449925841bc77574e8e127611234670275575/meetings/2019-03/mar-28.md?plain=1#L507-L519","m.mentions":{},"msgtype":"m.text"},"ts":1701282574787,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a35ydVPQ2fCgn1uS_YhJwVcN6_n_cvfyRHIKkzOIrPc"},
{"content":{"body":"oh man i would hate if nodejs was another reason for people to not use async modules","m.mentions":{},"msgtype":"m.text"},"ts":1701282966499,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9pjw2xYj6_pBOnHxr2iohjkiMx5sou441-dyz-qBvJs"},
{"content":{"body":"that would kill me","m.mentions":{},"msgtype":"m.text"},"ts":1701282968367,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$um2kk3K_6T8GAmRapNE87RsOj5oEZl_31XdxZ_-2ADw"},
{"content":{"body":"what about a function or bit of syntax that {tells you whether/asserts !} you've hit the event loop? i feel like that's always what you really care about in these worker listener cases","m.mentions":{},"msgtype":"m.text"},"ts":1701283214062,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$8Abo-rrYjKe7vA01nND6rnTjiElMFWZKl23LT7H6nLg"},
{"content":{"body":"If you have multiple script tags the event loop will start spinning before that the module even starts running, so it would always say \"yes\"","msgtype":"m.text"},"ts":1701283727959,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jREOaXeqgvXyc3hsWQ2R6Xa0vY8aF-igIBUjCYK0k5U"},
{"content":{"body":"Example: you load an analytics script and your main entry point module, and the analytics script already spins the event loop","msgtype":"m.text"},"ts":1701283804270,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dJcut8WtboXRXy8F8W7e5yt61la5_Cfr1WZ-xNV6ECs"},
{"content":{"body":"then that would be the correct result right?","m.mentions":{},"msgtype":"m.text"},"ts":1701284171098,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$Wt6lrfZ39YMxLYlUmLZxAJxVwD7EfRDsYUmtWQVH0xE"},
{"content":{"body":"if you are a worker and you need to register listeners to handle messages then you absolutely must register them before you hit the event loop","m.mentions":{},"msgtype":"m.text"},"ts":1701284214370,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$E5zjxAVxGDQUPhrdLkn1eEjQn1XaXfurrVyZd1sI-o4"},
{"content":{"body":"I see a barrel library","m.mentions":{},"msgtype":"m.text"},"ts":1701284282312,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$M030d53aG1r98fRRTrwJv9uvvGr3CGrG3gNrZKbv6Pc"},
{"content":{"body":"deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice.","format":"org.matrix.custom.html","formatted_body":"deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice.","m.mentions":{},"msgtype":"m.text"},"ts":1701284421037,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iplQMfo1OaYsbaLwGGIfzJe0Cy7T-OVOlXo8fXMCusQ"},
{"content":{"body":" * deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","format":"org.matrix.custom.html","formatted_body":" * deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","m.mentions":{},"m.new_content":{"body":"deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","format":"org.matrix.custom.html","formatted_body":"deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iplQMfo1OaYsbaLwGGIfzJe0Cy7T-OVOlXo8fXMCusQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284511697,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SGzwMgaGR_Xc8lp3Yt0MdVUxLVjQl6Cj35mGt25rMmQ"},
{"content":{"body":"It's like runtime treeshaking.  You only get the bits of the barrel you need.","m.mentions":{},"msgtype":"m.text"},"ts":1701284550637,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$5kq2_v92bcq9zvm2wiW3skmrOtDq-w8AbEJTaHSKPHw"},
{"content":{"body":"... treeshaking seems like a pretty reliable mechanism in the current world in fact?","m.mentions":{},"msgtype":"m.text"},"ts":1701284582276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA"},
{"content":{"body":"And it can progressively load more of the barrel just-in-time","m.mentions":{},"msgtype":"m.text"},"ts":1701284584286,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$2jVbHTPeAA4e2YhilZrGN-6WhYD7_DmM_kZqq4L74T8"},
{"content":{"body":"> <@bakkot:matrix.org> ... treeshaking seems like a pretty reliable mechanism in the current world in fact?\n\nnot in every codebase i've worked in; changing to deep imports and prohibiting barrel files has consistently produced MASSIVE savings","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>... treeshaking seems like a pretty reliable mechanism in the current world in fact?</blockquote></mx-reply>not in every codebase i've worked in; changing to deep imports and prohibiting barrel files has consistently produced MASSIVE savings","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA"}},"msgtype":"m.text"},"ts":1701284627304,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$td0jiNQCWw5d0wP7eEY4lW8eZy092faCiomyhy4uUp0"},
{"content":{"body":"coinbase's react native app size dropped by 71% with that change.","m.mentions":{},"msgtype":"m.text"},"ts":1701284635956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw"},
{"content":{"body":"it should really make defer become default back when tc39 design ES module in ES6","m.mentions":{},"msgtype":"m.text"},"ts":1701284656672,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MMyPjcKQzBsC6aZaaMEtJNIBNaLb5YnfrdDZt9Ziw6s"},
{"content":{"body":" * coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change","m.mentions":{},"m.new_content":{"body":"coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284690956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bspUiVeW2FPwyEjuAPnytpP1KU-DwTxz4FYFc6evbH4"},
{"content":{"body":"Tree-shaking only works when the compiler can see the full-scope of the program. That's not always possible in dynamically linked systems.","m.mentions":{},"msgtype":"m.text"},"ts":1701284696220,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$z-P5V69AfUEwsvX7mU9e5hw2dV0plH4H91-wgy74jVU"},
{"content":{"body":"The perf issues of barrel files are well-documented\nhttps://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7/","m.mentions":{},"msgtype":"m.text"},"ts":1701284731342,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$oxEdX3GqiKHPVZ7A6IUovrNSdyWt8TO9sD-FpK-5HkM"},
{"content":{"body":"even then, my statement holds. coinbase's RN app had no dynamic linking.","m.mentions":{},"msgtype":"m.text"},"ts":1701284738490,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vpxiLXu1fXI_hB9DB0je_ssiyePhpmpCxbU_KWNhiqQ"},
{"content":{"body":"and requires `\"sideEffects: false\"` in your package.json which is not everyone remembers to add","format":"org.matrix.custom.html","formatted_body":"and requires <code>\"sideEffects: false\"</code> in your package.json which is not everyone remembers to add","m.mentions":{},"msgtype":"m.text"},"ts":1701284752930,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ide_kB1P4orwW3_PbfFsjtOMzboqTBbwq8mnYiXVdDA"},
{"content":{"body":"and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths","m.mentions":{},"msgtype":"m.text"},"ts":1701284793564,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8"},
{"content":{"body":" * and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg","m.mentions":{},"m.new_content":{"body":"and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284810247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$06a3k7ZH3tYQNj4ruaoDc4c2Caa3qMSmiUM8A-hgyQ0"},
{"content":{"body":"i can confirm, importing fewer things is faster","m.mentions":{},"msgtype":"m.text"},"ts":1701284875023,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rl692NsjEos-xk9zclE7C1bxd12jHdFsW52qu7y9PQY"},
{"content":{"body":"> <@ljharb:matrix.org> and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg\n\nactually it supports, you can write `\"sideEffects\": [\"./src/init/**\"]`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and which isn&#39;t granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg</blockquote></mx-reply>actually it supports, you can write <code>\"sideEffects\": [\"./src/init/**\"]</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8"}},"msgtype":"m.text"},"ts":1701284973665,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$iL1HaZD4XiVd2LnWOABPqvtaG3OxruEgc_DNNlhv91Q"},
{"content":{"body":"ooh, TIL, thanks","m.mentions":{},"msgtype":"m.text"},"ts":1701285035554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wxf8BawX8tVUi39sywjotUppnsBomkRipIENhGOR4jA"},
{"content":{"body":"> <@ljharb:matrix.org> coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change\n\nthat is wild to me. they just... had a bunch of side effects? for some reason?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>coinbase&#39;s react native app size dropped by 71% (seventy-one, not a typo) with that change</blockquote></mx-reply>that is wild to me. they just... had a bunch of side effects? for some reason?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw"}},"msgtype":"m.text"},"ts":1701285140595,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-2LrdY1L7y711_lH271UzthFK2IEKiybtxfPhdds_GU"},
{"content":{"body":"no, it's that treeshaking simply isn't capable of safely judging that, and so the necessary heuristics leave behind way more code than is actually used","m.mentions":{},"msgtype":"m.text"},"ts":1701285181698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f9bWYlznSF6DM5_QsB3q44mn7pvjHaqKtYj5VAepHug"},
{"content":{"body":"in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months","m.mentions":{},"msgtype":"m.text"},"ts":1701285214393,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BjM-Wi6qTV2vxVY1MI83P5Rcoi9SQM5SfoX7V1gxQlU"},
{"content":{"body":" * in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months, so it's a really hard line to walk","m.mentions":{},"m.new_content":{"body":"in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months, so it's a really hard line to walk","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BjM-Wi6qTV2vxVY1MI83P5Rcoi9SQM5SfoX7V1gxQlU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285222964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K1fMxV9ym_X3FS-ivd9uXeyhEwNx_l37jMb0nZysJLU"},
{"content":{"body":"that has not been my experience at all; do you have an example where the heuristics fail?","m.mentions":{},"msgtype":"m.text"},"ts":1701285225588,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpmOBv2CBxeFs8vc20m6C1osvLjYVX_EX1IDYb2109k"},
{"content":{"body":"tbf i haven't dived into treeshaking tools to know exactly what it is; that's just the sense i have seeing the empirical results","m.mentions":{},"msgtype":"m.text"},"ts":1701285248381,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zYJehKVSZYY8IbDHnKlnL0CSvz2M2YOGZV85DsL3kqY"},
{"content":{"body":"Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remote.  This is why treeshaking is not always effective.","m.mentions":{},"msgtype":"m.text"},"ts":1701285310783,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y"},
{"content":{"body":"the lesson here should be just don't use side effects","m.mentions":{},"msgtype":"m.text"},"ts":1701285320468,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs"},
{"content":{"body":"i wonder if this js code halts","m.mentions":{},"msgtype":"m.text"},"ts":1701285332070,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kjnr1eYtwhIC7PNlSgqrOSGuXctC_URudqhQVDqUikU"},
{"content":{"body":" * Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.","m.mentions":{},"m.new_content":{"body":"Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285333543,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JQ6oj1Fdwr1zlikhfzOHmAi4aVnF5xQZokj6RrePR-o"},
{"content":{"body":"the lesson most of us have taken is, don't use barrel files :-)","m.mentions":{},"msgtype":"m.text"},"ts":1701285343625,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"},
{"content":{"body":"i wish prepack was still a thing","m.mentions":{},"msgtype":"m.text"},"ts":1701285380719,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nUG5Coo9RmptC6wxFILXX-nDzTs5QOyf59y5wASdG2w"},
{"content":{"body":"> <@ljharb:matrix.org> the lesson most of us have taken is, don't use barrel files :-)\n\nand with this proposal, barrel files suddenly becomes a performance benefit","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the lesson most of us have taken is, don&#39;t use barrel files :-)</blockquote></mx-reply>and with this proposal, barrel files suddenly becomes a performance benefit","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"}},"msgtype":"m.text"},"ts":1701285537909,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jSftkMp1RGbGwMxYJutmDrLzXVMCmNdkoohuk5IHtmA"},
{"content":{"body":"thankfully 0% of my code has side-effects, it's all overhead","m.mentions":{},"m.relates_to":{"event_id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs","is_falling_back":true,"m.in_reply_to":{"event_id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285543026,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4v82I4wswQ1D5zVX8FjNwGdRXQ7pt_bn-wi16lfj36I"},
{"content":{"body":"> <@robpalme:matrix.org> Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.\n\nRight but only if you're writing code in such a way that it's hard to analyze; my experience has been, dependencies which I consider of adequate quality to add to my projects are, in general, written in such a way that this is trivial to analyze","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.</blockquote></mx-reply>Right but only if you're writing code in such a way that it's hard to analyze; my experience has been, dependencies which I consider of adequate quality to add to my projects are, in general, written in such a way that this is trivial to analyze","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y"}},"msgtype":"m.text"},"ts":1701285560511,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Go_4OQ1Ai9dyVtwyYjOvoW4t98EXrtXu-9rQMN55mxY"},
{"content":{"body":"I am surprised to learn this is not everyone's experience","m.mentions":{},"msgtype":"m.text"},"ts":1701285567799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dCbCJadv2nDWVZ3rCrSGr-VdT_NyYEthEPzRTw5_i4c"},
{"content":{"body":"tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback","m.mentions":{},"msgtype":"m.text"},"ts":1701285618248,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6CcwY6A4_rgC98WhUs60UyLdqmbyYRzOhj0HOFB7xAM"},
{"content":{"body":" * tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback that i saw","m.mentions":{},"m.new_content":{"body":"tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback that i saw","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6CcwY6A4_rgC98WhUs60UyLdqmbyYRzOhj0HOFB7xAM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285623397,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uQac5M2JjVNHZq8cTYwxGYodcjoSlYQWu9sSnlL-g_w"},
{"content":{"body":"after reading the article on what these are, I feel like this should have been obvious from the beginning","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285624355,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bhfSs-3oSBeDiKiPaw7wpBvRmxBS_pHxDrcelb_dJTM"},
{"content":{"body":"people be crazy","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$bhfSs-3oSBeDiKiPaw7wpBvRmxBS_pHxDrcelb_dJTM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285627549,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZBvsJYv8F-0pP9521WM1CzyFIPqRdPGAoPyabtzAFjc"},
{"content":{"body":"the article above was only talking runtime, not treeshaking","m.mentions":{},"msgtype":"m.text"},"ts":1701285664575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c9OCIf5VEhhZx0i6cDDoWgIFTvmtDdkWg7YRsihRLaA"},
{"content":{"body":"in fact it specifically says \"treeshaking solves this\"","m.mentions":{},"msgtype":"m.text"},"ts":1701285671837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJgOLcJkcMeeBdxojgqRIClY4xaKsHux6omAa88JtQU"},
{"content":{"body":"> you then run the bundled file to repeat the experiment and voilÃ¡, it finishes in a blink of an eye. Out of curiosity, you measure the time it takes to run esbuild and run the bundled file together and notice that both of them combined are still quicker than running the original source code. Huh? What is going on?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>you then run the bundled file to repeat the experiment and voilÃ¡, it finishes in a blink of an eye. Out of curiosity, you measure the time it takes to run esbuild and run the bundled file together and notice that both of them combined are still quicker than running the original source code. Huh? What is going on?</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701285684299,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hv3iNoXxcn9eIwofWyDCyR0phvo51eTpuHkMnfgjc-I"},
{"content":{"body":"\"waah, I want one import line instead of five, I'm going to *blindly merge others' namespaces*, that seems like an okay trade-off\"","format":"org.matrix.custom.html","formatted_body":"\"waah, I want one import line instead of five, I'm going to <em>blindly merge others' namespaces</em>, that seems like an okay trade-off\"","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZBvsJYv8F-0pP9521WM1CzyFIPqRdPGAoPyabtzAFjc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285716213,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6Oil8GIdcAD6r1ITFjTisCl-mWrrsnftPDhFn3QZc0Y"},
{"content":{"body":"ðŸ¤®","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$6Oil8GIdcAD6r1ITFjTisCl-mWrrsnftPDhFn3QZc0Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285729885,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vhsi_sVNW1HXmXgzAMY99gwFFzTfcT40tqz2q1T5khw"},
{"content":{"body":"ah fair, i was remembering some twitter discussion then i guess, not the article","m.mentions":{},"msgtype":"m.text"},"ts":1701285888622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MgjwB7TsAhWLrERKfq3kjQTY2TCrjXFFB15jF-vacM4"},
{"content":{"body":"multiple exports was a mistake","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Vhsi_sVNW1HXmXgzAMY99gwFFzTfcT40tqz2q1T5khw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701286005389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L8vtaDQZeSW-ZWMu7x0G3fo0cyBl38l3IQFCLDPA8cI"}
]