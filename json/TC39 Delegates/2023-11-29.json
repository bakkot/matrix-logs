[
{"content":{"body":"I will be happy to revisit it and add the omitted data properties as a proposal once the websites are fixed. I canâ€™t speak to chromes opinion on that tho.","msgtype":"m.text"},"ts":1701218642846,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},
{"content":{"body":"assuming it's web-compat to do so, which it may not be","m.mentions":{},"msgtype":"m.text"},"ts":1701218847336,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$klWkAMDs8cGXkCjO_RF9X4srknw7dK16gP5bbV-4jY8"},
{"content":{"body":"whereas it would almost certainly be web-compat to change the accessors to data properties as long as the people in this room agreed not to rely on them being accessors","m.mentions":{},"msgtype":"m.text"},"ts":1701218868283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H0tpJuB4kf-fqxAzGgaX5aTk7CDu_WdGIRk2MpHKVjA"},
{"content":{"body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up. ","format":"org.matrix.custom.html","formatted_body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up.","msgtype":"m.text"},"ts":1701221712606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EQOReIUIXmtKgUjsn_An35ZNTzg2a4RynLQuBqEjU_M"},
{"content":{"body":"I think that would be worse than just having a bunch of accessors.","m.mentions":{},"msgtype":"m.text"},"ts":1701224014964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r-yY4A55Th3q23piyWW5fibknrScQv-nSrfl8iWjW8Q"},
{"content":{"body":"FYI I will miss the first 90 minutes today","msgtype":"m.text"},"ts":1701278068936,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QtPw7NTtjWQ-lIoSXaqJbwghCFHF3l84QSYfDYBfyCI"},
{"content":{"body":"Rezvan: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rmahdav:matrix.org\">Rezvan</a>: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"m.relates_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU","is_falling_back":true,"m.in_reply_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701278533088,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mUjGSEDzUlqjrkFPgEl47IAMwKzBeNOq3ooRU3eGbEA"},
{"content":{"body":"#jsx:matrix.org ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/#jsx:matrix.org\">#jsx:matrix.org</a>","m.mentions":{},"msgtype":"m.text"},"ts":1701280938467,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HeV-fKEAUJzxeqFXDUv9iZ-9GAVrp8ZpyLQrakF0WPw"},
{"content":{"body":"I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing ","format":"org.matrix.custom.html","formatted_body":"I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing","m.mentions":{},"msgtype":"m.text"},"ts":1701281080900,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"},
{"content":{"body":"> <@rbuckton:matrix.org> I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing\n\ndefinitely, and similar to [CSS.supports](https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing</blockquote></mx-reply>definitely, and similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static\">CSS.supports</a>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"}},"msgtype":"m.text"},"ts":1701281353237,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UIX0NpikPpCl9B3kMJn8ZI-T-X7HUa_jQ4kMdcIVlkc"},
{"content":{"body":"how do people feel about\n```\nFunction.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n```\nas in\n```\nlet { success, value } = JSON.parse.try(string);\n```","format":"org.matrix.custom.html","formatted_body":"<p>how do people feel about</p>\n<pre><code>Function.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n</code></pre>\n<p>as in</p>\n<pre><code>let { success, value } = JSON.parse.try(string);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701281623010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_xZ4PVB2fRsFf0_NOqg48u9oT1S9RNkfmsC7gsDhdC0"},
{"content":{"body":"only works for functions not methods, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1701281668078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dRmT4n1Eo8EstQlsvuq7jDFnzJtbyx80WkUp7QpOaSI"},
{"content":{"body":"guess there could be a `tryWithThis` which would let you do `JSON.parse.try(JSON, string)`","format":"org.matrix.custom.html","formatted_body":"guess there could be a <code>tryWithThis</code> which would let you do <code>JSON.parse.try(JSON, string)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701281706922,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7qwiJkSliJQPyKEOwbzIXpDWlOPGf_d-nvxjGehW9eo"},
{"content":{"body":"i like that, it has the side benefit that it encourages use of standalone functions","m.mentions":{},"msgtype":"m.text"},"ts":1701281715663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rg3fAKqk4p7aaR5jpzbMto5_Y7YJuP4Vvzr9pmFbBk8"}
]