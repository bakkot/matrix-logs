[
{"content":{"body":"I will be happy to revisit it and add the omitted data properties as a proposal once the websites are fixed. I can’t speak to chromes opinion on that tho.","msgtype":"m.text"},"ts":1701218642846,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},
{"content":{"body":"assuming it's web-compat to do so, which it may not be","m.mentions":{},"msgtype":"m.text"},"ts":1701218847336,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$klWkAMDs8cGXkCjO_RF9X4srknw7dK16gP5bbV-4jY8"},
{"content":{"body":"whereas it would almost certainly be web-compat to change the accessors to data properties as long as the people in this room agreed not to rely on them being accessors","m.mentions":{},"msgtype":"m.text"},"ts":1701218868283,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H0tpJuB4kf-fqxAzGgaX5aTk7CDu_WdGIRk2MpHKVjA"},
{"content":{"body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up. ","format":"org.matrix.custom.html","formatted_body":"Do we just need to spec a special data property flag that allows assignment of the property on an instance even if the prototype is non-writable/non-configurable? It seems to me this isn't the last time this will come up.","msgtype":"m.text"},"ts":1701221712606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EQOReIUIXmtKgUjsn_An35ZNTzg2a4RynLQuBqEjU_M"},
{"content":{"body":"I think that would be worse than just having a bunch of accessors.","m.mentions":{},"msgtype":"m.text"},"ts":1701224014964,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$r-yY4A55Th3q23piyWW5fibknrScQv-nSrfl8iWjW8Q"},
{"content":{"body":"FYI I will miss the first 90 minutes today","msgtype":"m.text"},"ts":1701278068936,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QtPw7NTtjWQ-lIoSXaqJbwghCFHF3l84QSYfDYBfyCI"},
{"content":{"body":"Rezvan: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rmahdav:matrix.org\">Rezvan</a>: Does Chrome have a position here? If these properties are omitted for now, would you consider attempting to add data properties again in the future, or are accessors the only option?","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"m.relates_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU","is_falling_back":true,"m.in_reply_to":{"event_id":"$vhWVk8MhZyZMSJzovGsng8pffmKshnrt4jKHOxPHtrU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701278533088,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mUjGSEDzUlqjrkFPgEl47IAMwKzBeNOq3ooRU3eGbEA"},
{"content":{"body":"#jsx:matrix.org ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/#jsx:matrix.org\">#jsx:matrix.org</a>","m.mentions":{},"msgtype":"m.text"},"ts":1701280938467,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$HeV-fKEAUJzxeqFXDUv9iZ-9GAVrp8ZpyLQrakF0WPw"},
{"content":{"body":"I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing ","format":"org.matrix.custom.html","formatted_body":"I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing","m.mentions":{},"msgtype":"m.text"},"ts":1701281080900,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"},
{"content":{"body":"> <@rbuckton:matrix.org> I wonder if a generalized `canParse` solution for JS would be viable as an alternative to using `eval` or `Function` for syntactic feature testing\n\ndefinitely, and similar to [CSS.supports](https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I wonder if a generalized <code>canParse</code> solution for JS would be viable as an alternative to using <code>eval</code> or <code>Function</code> for syntactic feature testing</blockquote></mx-reply>definitely, and similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports_static\">CSS.supports</a>","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sKO99dCsEEAYs5Tk-WCctU8cIZsg9YEC0eMT3AnO-QA"}},"msgtype":"m.text"},"ts":1701281353237,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UIX0NpikPpCl9B3kMJn8ZI-T-X7HUa_jQ4kMdcIVlkc"},
{"content":{"body":"how do people feel about\n```\nFunction.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n```\nas in\n```\nlet { success, value } = JSON.parse.try(string);\n```","format":"org.matrix.custom.html","formatted_body":"<p>how do people feel about</p>\n<pre><code>Function.prototype.try = function(...args) {\n  try {\n    return { success: true, value: this.apply(null, args) };\n  } catch {\n    return { success: false, value: undefined };\n  }\n}\n</code></pre>\n<p>as in</p>\n<pre><code>let { success, value } = JSON.parse.try(string);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701281623010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_xZ4PVB2fRsFf0_NOqg48u9oT1S9RNkfmsC7gsDhdC0"},
{"content":{"body":"only works for functions not methods, I guess","m.mentions":{},"msgtype":"m.text"},"ts":1701281668078,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dRmT4n1Eo8EstQlsvuq7jDFnzJtbyx80WkUp7QpOaSI"},
{"content":{"body":"guess there could be a `tryWithThis` which would let you do `JSON.parse.try(JSON, string)`","format":"org.matrix.custom.html","formatted_body":"guess there could be a <code>tryWithThis</code> which would let you do <code>JSON.parse.try(JSON, string)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701281706922,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7qwiJkSliJQPyKEOwbzIXpDWlOPGf_d-nvxjGehW9eo"},
{"content":{"body":"i like that, it has the side benefit that it encourages use of standalone functions","m.mentions":{},"msgtype":"m.text"},"ts":1701281715663,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Rg3fAKqk4p7aaR5jpzbMto5_Y7YJuP4Vvzr9pmFbBk8"},
{"content":{"body":" * i like that (the non-method one), it has the side benefit that it encourages use of standalone functions","m.mentions":{},"m.new_content":{"body":"i like that (the non-method one), it has the side benefit that it encourages use of standalone functions","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Rg3fAKqk4p7aaR5jpzbMto5_Y7YJuP4Vvzr9pmFbBk8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281728935,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$H6jL3NosECzsNJ7dKCtWyTbLR1nztzJpN0PFAc8L7fo"},
{"content":{"body":"`let { success, value } = tryApply(target, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":"<code>let { success, value } = tryApply(target, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"msgtype":"m.text"},"ts":1701281829563,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F9l4b4JMWV776fzkzH0esu6Et32K8NTaqhDJvmpN6Ug"},
{"content":{"body":" * `let { success, value } = tryApply(fn, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":" * <code>let { success, value } = tryApply(fn, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"m.new_content":{"body":"`let { success, value } = tryApply(fn, thisArgument, argumentsList)` would be language-consistent but less ergonomic","format":"org.matrix.custom.html","formatted_body":"<code>let { success, value } = tryApply(fn, thisArgument, argumentsList)</code> would be language-consistent but less ergonomic","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$F9l4b4JMWV776fzkzH0esu6Et32K8NTaqhDJvmpN6Ug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281840259,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$ub8f1G82bF_TBBUBNXUmkQ9vj5KzO-MDKHd8rD1AMgg"},
{"content":{"body":"`fn.tryApply` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":"<code>fn.tryApply</code> is at least as consistent, surely","m.mentions":{},"msgtype":"m.text"},"ts":1701281856205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wcnzFVRMSCOJ3lZQQ0znEKdxSIOGf-kQ-VF8H7FAP-4"},
{"content":{"body":" * `fn.tryApply(thisArgument, argumentsList)` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":" * <code>fn.tryApply(thisArgument, argumentsList)</code> is at least as consistent, surely","m.mentions":{},"m.new_content":{"body":"`fn.tryApply(thisArgument, argumentsList)` is at least as consistent, surely","format":"org.matrix.custom.html","formatted_body":"<code>fn.tryApply(thisArgument, argumentsList)</code> is at least as consistent, surely","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wcnzFVRMSCOJ3lZQQ0znEKdxSIOGf-kQ-VF8H7FAP-4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281866874,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GJW7d7I9Pr1t-MtolXOCvM1Y1S2LjT8dxBV2i3M-tpI"},
{"content":{"body":"i'd swap those two but sure","m.mentions":{},"msgtype":"m.text"},"ts":1701281889714,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA"},
{"content":{"body":" * i'd swap those two but sure (`thisArg` goes last, just like all the array methods)","format":"org.matrix.custom.html","formatted_body":" * i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods)","m.mentions":{},"m.new_content":{"body":"i'd swap those two but sure (`thisArg` goes last, just like all the array methods)","format":"org.matrix.custom.html","formatted_body":"i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281902094,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DPvFYPhTodlm-nRLmQkyUG5Mse9brFGbSTJkeHGMxpg"},
{"content":{"body":"or I guess `fn.tryCall(thisArgument, ...args)`","format":"org.matrix.custom.html","formatted_body":"or I guess <code>fn.tryCall(thisArgument, ...args)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701281909437,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$bHfiwKl61fh44nMRdZOu4BODM6AXvUlDgpjQbw2zV7Q"},
{"content":{"body":" * i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)","format":"org.matrix.custom.html","formatted_body":" * i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)","m.mentions":{},"m.new_content":{"body":"i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)","format":"org.matrix.custom.html","formatted_body":"i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701281910863,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sjIeI5Q9Egj2V1WMwVrpvAxa4c5bl0cQMRaF4U15D6k"},
{"content":{"body":"> <@ljharb:matrix.org> i'd swap those two but sure (`thisArg` goes last, just like all the array methods, since it's more optional than args)\n\nI disagree, `thisArg` should come first, like `call` and `apply`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i'd swap those two but sure (<code>thisArg</code> goes last, just like all the array methods, since it's more optional than args)</blockquote></mx-reply>I disagree, <code>thisArg</code> should come first, like <code>call</code> and <code>apply</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wGlrtk8z_h2VKR8QAsUEjOtqWxul4A5qy5MePMmwmPA"}},"msgtype":"m.text"},"ts":1701281929703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aq4ObuVFf4Y0tFHQaWBYqFVQwZDEUkOiqiTH67w3L54"},
{"content":{"body":"oh hm, i guess i see that argument too","m.mentions":{},"msgtype":"m.text"},"ts":1701281942501,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aODpik9hEEk7iqzmLC_UHy2yar02Sy8zM-vjGjg70Uc"},
{"content":{"body":"but also I would want a version that doesn't take `this` at all","format":"org.matrix.custom.html","formatted_body":"but also I would want a version that doesn't take <code>this</code> at all","m.mentions":{},"msgtype":"m.text"},"ts":1701281942593,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZrYCwOgO4YX-KZfB1OlUndxVc7hd339Lnd3bsJg5QaQ"},
{"content":{"body":"i get this feeling that like","m.mentions":{},"msgtype":"m.text"},"ts":1701281963310,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lsnP-n6_wsusk6NULyPF7plDGAWL77iTyNfTMMIIx2s"},
{"content":{"body":"so specifically I think I like best `.try`, which is only useful for non-methods, and `.tryCall`, which adds an initial `this` parameter","format":"org.matrix.custom.html","formatted_body":"so specifically I think I like best <code>.try</code>, which is only useful for non-methods, and <code>.tryCall</code>, which adds an initial <code>this</code> parameter","m.mentions":{},"msgtype":"m.text"},"ts":1701281963831,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HdMD63f5BrYJlvxn0mzP8UQcMjUiRpOHOQAA3nxbYYM"},
{"content":{"body":"yeah if the thisArg has to come first in a call/apply variant then i'd def want yet another one that omitted the receiver entirely","m.mentions":{},"msgtype":"m.text"},"ts":1701281966264,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5vLN5d9XipfoLfK09tv_HqSXXoItuf9cTPHZUiVLWNs"},
{"content":{"body":"async modules are some sort of fundamental failure","m.mentions":{},"msgtype":"m.text"},"ts":1701281971304,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eMo4uXSfe_AWsuUGJbfcSF5PnbqIfmlzQJCMjODHbAY"},
{"content":{"body":"yeah, that's the friction point","m.mentions":{},"msgtype":"m.text"},"ts":1701281972369,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$j4e3-AuU5svPa-Y20dzSQgTPttLyaad_AuYCcFSkZYw"},
{"content":{"body":"because everyone keeps trying to build ways to disable them","m.mentions":{},"msgtype":"m.text"},"ts":1701281976815,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dEc-gym8NttMEbYPwe18qHdvqlGjQE4-gWXHlw9IwWI"},
{"content":{"body":"but i don't want them to be some sort of fundamental failure","m.mentions":{},"msgtype":"m.text"},"ts":1701281991444,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$42vnADhl0RQvOKWIlr8s8TYAwAKmYJ7n632qECrCayY"},
{"content":{"body":"i really like them","m.mentions":{},"msgtype":"m.text"},"ts":1701281993299,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3jD8K8BPc6LyT0C2vTRGcw3KSAa1LIN4r64oR1Y8S64"},
{"content":{"body":"agreed on both points","m.mentions":{},"msgtype":"m.text"},"ts":1701282013915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZJ9buAihVHjUbXewNhqvVyvy7iza8AHvn_Hn8c17cd4"},
{"content":{"body":"another place where async modules were no longer used https://github.com/WebAssembly/esm-integration/pull/76","m.mentions":{},"msgtype":"m.text"},"ts":1701282191894,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pDmG_0GvfgCV7-QEsups9dDzjF0oy1h5Q37SUk2Ydb0"},
{"content":{"body":"lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore","m.mentions":{},"msgtype":"m.text"},"ts":1701282284348,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM"},
{"content":{"body":"eh, I think directives which either evaluate normally or cause errors aren't really new modes","m.mentions":{},"msgtype":"m.text"},"ts":1701282312042,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DxqSC0A7g7fxpaXsWOK-RfHvuo7E4h-50wM1Vgfn8h4"},
{"content":{"body":"> <@ljharb:matrix.org> lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore\n\nThis directive wouldn't be a new mode","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>lol if we end up doing a directive, there&#39;s going to be a deluge of pragma/directive proposals once &quot;no more modes&quot; isn&#39;t a law anymore</blockquote></mx-reply>This directive wouldn't be a new mode","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM"}},"msgtype":"m.text"},"ts":1701282315737,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0OPFQOLZqtUcMAq0k55lYn3r3j7ILvVicEk6jKfHX2c"},
{"content":{"body":"> <@ljharb:matrix.org> lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore\n\n * This directive wouldn't be a new mode like strict vs sloppy","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yFHTGIFIIFQPMs9owOznJiAUH0yHTbLry2SdmnBCVPM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>lol if we end up doing a directive, there's going to be a deluge of pragma/directive proposals once \"no more modes\" isn't a law anymore</blockquote></mx-reply> * This directive wouldn't be a new mode like strict vs sloppy","m.mentions":{},"m.new_content":{"body":"This directive wouldn't be a new mode like strict vs sloppy","format":"org.matrix.custom.html","formatted_body":"This directive wouldn't be a new mode like strict vs sloppy","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0OPFQOLZqtUcMAq0k55lYn3r3j7ILvVicEk6jKfHX2c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701282321742,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vMYMEJleM-X-w44U1qYCLQc_WSHVe0mA_IaNK6fbEP4"},
{"content":{"body":"It doesn't introduce a new \"language version\"","m.mentions":{},"msgtype":"m.text"},"ts":1701282336642,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dBs_O-hPFCxWiL4julXkatgIv8QHvpJqLS9umPx2a6g"},
{"content":{"body":"No more than doing the same through any other syntax","m.mentions":{},"msgtype":"m.text"},"ts":1701282348341,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$webZ9aIQl7kDQaBHzGPT87d9GF0soDkGYqXMfO28Dxc"},
{"content":{"body":"lol yeah i understand the nuance, but i don't think it will come across","m.mentions":{},"msgtype":"m.text"},"ts":1701282350896,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-8DGmqolB7DLqxPZfJ56ZZ1o_DfFfKxwSJOPk9TROLA"},
{"content":{"body":"`export with { sync: true }`? Not a huge fan of how it reads though.","format":"org.matrix.custom.html","formatted_body":"<code>export with { sync: true }</code>? Not a huge fan of how it reads though.","m.mentions":{},"msgtype":"m.text"},"ts":1701282563021,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DovOAfeNDr9keiOF0HacLJzTk0YAO3bmPtVIe9Ec7IY"},
{"content":{"body":"ps here's a relevant snippet from the notes from 2018 related to this exact problem: https://github.com/tc39/notes/blob/df1449925841bc77574e8e127611234670275575/meetings/2019-03/mar-28.md?plain=1#L507-L519","m.mentions":{},"msgtype":"m.text"},"ts":1701282574787,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$a35ydVPQ2fCgn1uS_YhJwVcN6_n_cvfyRHIKkzOIrPc"},
{"content":{"body":"oh man i would hate if nodejs was another reason for people to not use async modules","m.mentions":{},"msgtype":"m.text"},"ts":1701282966499,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9pjw2xYj6_pBOnHxr2iohjkiMx5sou441-dyz-qBvJs"},
{"content":{"body":"that would kill me","m.mentions":{},"msgtype":"m.text"},"ts":1701282968367,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$um2kk3K_6T8GAmRapNE87RsOj5oEZl_31XdxZ_-2ADw"},
{"content":{"body":"what about a function or bit of syntax that {tells you whether/asserts !} you've hit the event loop? i feel like that's always what you really care about in these worker listener cases","m.mentions":{},"msgtype":"m.text"},"ts":1701283214062,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$8Abo-rrYjKe7vA01nND6rnTjiElMFWZKl23LT7H6nLg"},
{"content":{"body":"If you have multiple script tags the event loop will start spinning before that the module even starts running, so it would always say \"yes\"","msgtype":"m.text"},"ts":1701283727959,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jREOaXeqgvXyc3hsWQ2R6Xa0vY8aF-igIBUjCYK0k5U"},
{"content":{"body":"Example: you load an analytics script and your main entry point module, and the analytics script already spins the event loop","msgtype":"m.text"},"ts":1701283804270,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dJcut8WtboXRXy8F8W7e5yt61la5_Cfr1WZ-xNV6ECs"},
{"content":{"body":"then that would be the correct result right?","m.mentions":{},"msgtype":"m.text"},"ts":1701284171098,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$Wt6lrfZ39YMxLYlUmLZxAJxVwD7EfRDsYUmtWQVH0xE"},
{"content":{"body":"if you are a worker and you need to register listeners to handle messages then you absolutely must register them before you hit the event loop","m.mentions":{},"msgtype":"m.text"},"ts":1701284214370,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$E5zjxAVxGDQUPhrdLkn1eEjQn1XaXfurrVyZd1sI-o4"},
{"content":{"body":"I see a barrel library","m.mentions":{},"msgtype":"m.text"},"ts":1701284282312,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$M030d53aG1r98fRRTrwJv9uvvGr3CGrG3gNrZKbv6Pc"},
{"content":{"body":"deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice.","format":"org.matrix.custom.html","formatted_body":"deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice.","m.mentions":{},"msgtype":"m.text"},"ts":1701284421037,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iplQMfo1OaYsbaLwGGIfzJe0Cy7T-OVOlXo8fXMCusQ"},
{"content":{"body":" * deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","format":"org.matrix.custom.html","formatted_body":" * deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","m.mentions":{},"m.new_content":{"body":"deferred imports make me very nervous; a keyword on `export` that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","format":"org.matrix.custom.html","formatted_body":"deferred imports make me very nervous; a keyword on <code>export</code> that's a lazily evaluated thing on the first import seems pretty nice - it might turn treeshaking from a half-assed hack into a reliable mechanism","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$iplQMfo1OaYsbaLwGGIfzJe0Cy7T-OVOlXo8fXMCusQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284511697,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SGzwMgaGR_Xc8lp3Yt0MdVUxLVjQl6Cj35mGt25rMmQ"},
{"content":{"body":"It's like runtime treeshaking.  You only get the bits of the barrel you need.","m.mentions":{},"msgtype":"m.text"},"ts":1701284550637,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$5kq2_v92bcq9zvm2wiW3skmrOtDq-w8AbEJTaHSKPHw"},
{"content":{"body":"... treeshaking seems like a pretty reliable mechanism in the current world in fact?","m.mentions":{},"msgtype":"m.text"},"ts":1701284582276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA"},
{"content":{"body":"And it can progressively load more of the barrel just-in-time","m.mentions":{},"msgtype":"m.text"},"ts":1701284584286,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$2jVbHTPeAA4e2YhilZrGN-6WhYD7_DmM_kZqq4L74T8"},
{"content":{"body":"> <@bakkot:matrix.org> ... treeshaking seems like a pretty reliable mechanism in the current world in fact?\n\nnot in every codebase i've worked in; changing to deep imports and prohibiting barrel files has consistently produced MASSIVE savings","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>... treeshaking seems like a pretty reliable mechanism in the current world in fact?</blockquote></mx-reply>not in every codebase i've worked in; changing to deep imports and prohibiting barrel files has consistently produced MASSIVE savings","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$riUqONinZxEJLoyMHKh3HG9i7wVrYLFg7a1Et4bYFHA"}},"msgtype":"m.text"},"ts":1701284627304,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$td0jiNQCWw5d0wP7eEY4lW8eZy092faCiomyhy4uUp0"},
{"content":{"body":"coinbase's react native app size dropped by 71% with that change.","m.mentions":{},"msgtype":"m.text"},"ts":1701284635956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw"},
{"content":{"body":"it should really make defer become default back when tc39 design ES module in ES6","m.mentions":{},"msgtype":"m.text"},"ts":1701284656672,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MMyPjcKQzBsC6aZaaMEtJNIBNaLb5YnfrdDZt9Ziw6s"},
{"content":{"body":" * coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change","m.mentions":{},"m.new_content":{"body":"coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284690956,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bspUiVeW2FPwyEjuAPnytpP1KU-DwTxz4FYFc6evbH4"},
{"content":{"body":"Tree-shaking only works when the compiler can see the full-scope of the program. That's not always possible in dynamically linked systems.","m.mentions":{},"msgtype":"m.text"},"ts":1701284696220,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$z-P5V69AfUEwsvX7mU9e5hw2dV0plH4H91-wgy74jVU"},
{"content":{"body":"The perf issues of barrel files are well-documented\nhttps://marvinh.dev/blog/speeding-up-javascript-ecosystem-part-7/","m.mentions":{},"msgtype":"m.text"},"ts":1701284731342,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$oxEdX3GqiKHPVZ7A6IUovrNSdyWt8TO9sD-FpK-5HkM"},
{"content":{"body":"even then, my statement holds. coinbase's RN app had no dynamic linking.","m.mentions":{},"msgtype":"m.text"},"ts":1701284738490,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vpxiLXu1fXI_hB9DB0je_ssiyePhpmpCxbU_KWNhiqQ"},
{"content":{"body":"and requires `\"sideEffects: false\"` in your package.json which is not everyone remembers to add","format":"org.matrix.custom.html","formatted_body":"and requires <code>\"sideEffects: false\"</code> in your package.json which is not everyone remembers to add","m.mentions":{},"msgtype":"m.text"},"ts":1701284752930,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$ide_kB1P4orwW3_PbfFsjtOMzboqTBbwq8mnYiXVdDA"},
{"content":{"body":"and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths","m.mentions":{},"msgtype":"m.text"},"ts":1701284793564,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8"},
{"content":{"body":" * and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg","m.mentions":{},"m.new_content":{"body":"and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701284810247,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$06a3k7ZH3tYQNj4ruaoDc4c2Caa3qMSmiUM8A-hgyQ0"},
{"content":{"body":"i can confirm, importing fewer things is faster","m.mentions":{},"msgtype":"m.text"},"ts":1701284875023,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rl692NsjEos-xk9zclE7C1bxd12jHdFsW52qu7y9PQY"},
{"content":{"body":"> <@ljharb:matrix.org> and which isn't granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg\n\nactually it supports, you can write `\"sideEffects\": [\"./src/init/**\"]`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and which isn&#39;t granular enough to support packages with one side-effecting code path and many non-side-effecting code paths, eg</blockquote></mx-reply>actually it supports, you can write <code>\"sideEffects\": [\"./src/init/**\"]</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6KMMboxzX5awkf_QmGKZWPTrKpE7UsptBpiX13WdqI8"}},"msgtype":"m.text"},"ts":1701284973665,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$iL1HaZD4XiVd2LnWOABPqvtaG3OxruEgc_DNNlhv91Q"},
{"content":{"body":"ooh, TIL, thanks","m.mentions":{},"msgtype":"m.text"},"ts":1701285035554,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Wxf8BawX8tVUi39sywjotUppnsBomkRipIENhGOR4jA"},
{"content":{"body":"> <@ljharb:matrix.org> coinbase's react native app size dropped by 71% (seventy-one, not a typo) with that change\n\nthat is wild to me. they just... had a bunch of side effects? for some reason?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>coinbase&#39;s react native app size dropped by 71% (seventy-one, not a typo) with that change</blockquote></mx-reply>that is wild to me. they just... had a bunch of side effects? for some reason?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YSpGx4cmbQPIkiV2KZQ5c38CAU4xFxv-w1xAR2T_MCw"}},"msgtype":"m.text"},"ts":1701285140595,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-2LrdY1L7y711_lH271UzthFK2IEKiybtxfPhdds_GU"},
{"content":{"body":"no, it's that treeshaking simply isn't capable of safely judging that, and so the necessary heuristics leave behind way more code than is actually used","m.mentions":{},"msgtype":"m.text"},"ts":1701285181698,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f9bWYlznSF6DM5_QsB3q44mn7pvjHaqKtYj5VAepHug"},
{"content":{"body":"in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months","m.mentions":{},"msgtype":"m.text"},"ts":1701285214393,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BjM-Wi6qTV2vxVY1MI83P5Rcoi9SQM5SfoX7V1gxQlU"},
{"content":{"body":" * in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months, so it's a really hard line to walk","m.mentions":{},"m.new_content":{"body":"in the past, rollup's heuristics (when rollup was the only treeshaker) were too aggressive, and it broke airbnb.com in IE for months, so it's a really hard line to walk","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BjM-Wi6qTV2vxVY1MI83P5Rcoi9SQM5SfoX7V1gxQlU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285222964,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K1fMxV9ym_X3FS-ivd9uXeyhEwNx_l37jMb0nZysJLU"},
{"content":{"body":"that has not been my experience at all; do you have an example where the heuristics fail?","m.mentions":{},"msgtype":"m.text"},"ts":1701285225588,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xpmOBv2CBxeFs8vc20m6C1osvLjYVX_EX1IDYb2109k"},
{"content":{"body":"tbf i haven't dived into treeshaking tools to know exactly what it is; that's just the sense i have seeing the empirical results","m.mentions":{},"msgtype":"m.text"},"ts":1701285248381,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zYJehKVSZYY8IbDHnKlnL0CSvz2M2YOGZV85DsL3kqY"},
{"content":{"body":"Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remote.  This is why treeshaking is not always effective.","m.mentions":{},"msgtype":"m.text"},"ts":1701285310783,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y"},
{"content":{"body":"the lesson here should be just don't use side effects","m.mentions":{},"msgtype":"m.text"},"ts":1701285320468,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs"},
{"content":{"body":"i wonder if this js code halts","m.mentions":{},"msgtype":"m.text"},"ts":1701285332070,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$kjnr1eYtwhIC7PNlSgqrOSGuXctC_URudqhQVDqUikU"},
{"content":{"body":" * Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.","m.mentions":{},"m.new_content":{"body":"Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285333543,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JQ6oj1Fdwr1zlikhfzOHmAi4aVnF5xQZokj6RrePR-o"},
{"content":{"body":"the lesson most of us have taken is, don't use barrel files :-)","m.mentions":{},"msgtype":"m.text"},"ts":1701285343625,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"},
{"content":{"body":"i wish prepack was still a thing","m.mentions":{},"msgtype":"m.text"},"ts":1701285380719,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nUG5Coo9RmptC6wxFILXX-nDzTs5QOyf59y5wASdG2w"},
{"content":{"body":"> <@ljharb:matrix.org> the lesson most of us have taken is, don't use barrel files :-)\n\nand with this proposal, barrel files suddenly becomes a performance benefit","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>the lesson most of us have taken is, don&#39;t use barrel files :-)</blockquote></mx-reply>and with this proposal, barrel files suddenly becomes a performance benefit","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"}},"msgtype":"m.text"},"ts":1701285537909,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$jSftkMp1RGbGwMxYJutmDrLzXVMCmNdkoohuk5IHtmA"},
{"content":{"body":"thankfully 0% of my code has side-effects, it's all overhead","m.mentions":{},"m.relates_to":{"event_id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs","is_falling_back":true,"m.in_reply_to":{"event_id":"$hW0_0TR1A-HdgJYR9wXnbADLg0S9IM_Iss88v2GCMWs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285543026,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$4v82I4wswQ1D5zVX8FjNwGdRXQ7pt_bn-wi16lfj36I"},
{"content":{"body":"> <@robpalme:matrix.org> Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.\n\nRight but only if you're writing code in such a way that it's hard to analyze; my experience has been, dependencies which I consider of adequate quality to add to my projects are, in general, written in such a way that this is trivial to analyze","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Statically judging whether JS code has side-effects is hard - probably impossible - so compilers take a safety-first approach and bail out unless they are really sure dead code is safe to remove.  This is why treeshaking is not always effective.</blockquote></mx-reply>Right but only if you're writing code in such a way that it's hard to analyze; my experience has been, dependencies which I consider of adequate quality to add to my projects are, in general, written in such a way that this is trivial to analyze","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1QsvvtdAEmzW-AuRWqpRB0Wx-9DUhe7vkI5HATACS3Y"}},"msgtype":"m.text"},"ts":1701285560511,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Go_4OQ1Ai9dyVtwyYjOvoW4t98EXrtXu-9rQMN55mxY"},
{"content":{"body":"I am surprised to learn this is not everyone's experience","m.mentions":{},"msgtype":"m.text"},"ts":1701285567799,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$dCbCJadv2nDWVZ3rCrSGr-VdT_NyYEthEPzRTw5_i4c"},
{"content":{"body":"tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback","m.mentions":{},"msgtype":"m.text"},"ts":1701285618248,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6CcwY6A4_rgC98WhUs60UyLdqmbyYRzOhj0HOFB7xAM"},
{"content":{"body":" * tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback that i saw","m.mentions":{},"m.new_content":{"body":"tbh i'm surprised it's anyone's. the above article got quite a lot of +1s on twitter and virtually no pushback that i saw","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6CcwY6A4_rgC98WhUs60UyLdqmbyYRzOhj0HOFB7xAM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701285623397,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uQac5M2JjVNHZq8cTYwxGYodcjoSlYQWu9sSnlL-g_w"},
{"content":{"body":"after reading the article on what these are, I feel like this should have been obvious from the beginning","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285624355,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bhfSs-3oSBeDiKiPaw7wpBvRmxBS_pHxDrcelb_dJTM"},
{"content":{"body":"people be crazy","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$bhfSs-3oSBeDiKiPaw7wpBvRmxBS_pHxDrcelb_dJTM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285627549,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ZBvsJYv8F-0pP9521WM1CzyFIPqRdPGAoPyabtzAFjc"},
{"content":{"body":"the article above was only talking runtime, not treeshaking","m.mentions":{},"msgtype":"m.text"},"ts":1701285664575,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$c9OCIf5VEhhZx0i6cDDoWgIFTvmtDdkWg7YRsihRLaA"},
{"content":{"body":"in fact it specifically says \"treeshaking solves this\"","m.mentions":{},"msgtype":"m.text"},"ts":1701285671837,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gJgOLcJkcMeeBdxojgqRIClY4xaKsHux6omAa88JtQU"},
{"content":{"body":"> you then run the bundled file to repeat the experiment and voilá, it finishes in a blink of an eye. Out of curiosity, you measure the time it takes to run esbuild and run the bundled file together and notice that both of them combined are still quicker than running the original source code. Huh? What is going on?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>you then run the bundled file to repeat the experiment and voilá, it finishes in a blink of an eye. Out of curiosity, you measure the time it takes to run esbuild and run the bundled file together and notice that both of them combined are still quicker than running the original source code. Huh? What is going on?</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701285684299,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Hv3iNoXxcn9eIwofWyDCyR0phvo51eTpuHkMnfgjc-I"},
{"content":{"body":"\"waah, I want one import line instead of five, I'm going to *blindly merge others' namespaces*, that seems like an okay trade-off\"","format":"org.matrix.custom.html","formatted_body":"\"waah, I want one import line instead of five, I'm going to <em>blindly merge others' namespaces</em>, that seems like an okay trade-off\"","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZBvsJYv8F-0pP9521WM1CzyFIPqRdPGAoPyabtzAFjc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285716213,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$6Oil8GIdcAD6r1ITFjTisCl-mWrrsnftPDhFn3QZc0Y"},
{"content":{"body":"🤮","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$6Oil8GIdcAD6r1ITFjTisCl-mWrrsnftPDhFn3QZc0Y"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701285729885,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Vhsi_sVNW1HXmXgzAMY99gwFFzTfcT40tqz2q1T5khw"},
{"content":{"body":"ah fair, i was remembering some twitter discussion then i guess, not the article","m.mentions":{},"msgtype":"m.text"},"ts":1701285888622,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MgjwB7TsAhWLrERKfq3kjQTY2TCrjXFFB15jF-vacM4"},
{"content":{"body":"multiple exports was a mistake","m.mentions":{},"m.relates_to":{"event_id":"$snNaCTRh98teLNt_ls2Dydt2EwBJbcjxbRHDR0JHAz4","is_falling_back":true,"m.in_reply_to":{"event_id":"$Vhsi_sVNW1HXmXgzAMY99gwFFzTfcT40tqz2q1T5khw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701286005389,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$L8vtaDQZeSW-ZWMu7x0G3fo0cyBl38l3IQFCLDPA8cI"},
{"content":{"body":"ugh we have a bug in PerformEval: it doesn't ever ToString its argument https://tc39.es/ecma262/#sec-performeval","m.mentions":{},"msgtype":"m.text"},"ts":1701286591476,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Yhcx3Zo5MoE3JEizD7PHj4Salh-7Kph7Bwh9XIXSL9Q"},
{"content":{"body":"oh wait, never mind, it just can't reach that point without being a String","m.mentions":{},"msgtype":"m.text"},"ts":1701286654078,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$X9_20w160RyZ6lcRNuDJUjfA-AOOWhIpZNiFBIM3JmI"},
{"content":{"body":"I got it","m.mentions":{},"msgtype":"m.text"},"ts":1701286654962,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rp0Zj-cTf-890ZmoOKI5YycnwI2DYLCzWrFgMDem6Xs"},
{"content":{"body":"the thing where `eval` is the identity function on non-string arguments is... very strange","format":"org.matrix.custom.html","formatted_body":"the thing where <code>eval</code> is the identity function on non-string arguments is... very strange","m.mentions":{},"msgtype":"m.text"},"ts":1701286880802,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ"},
{"content":{"body":"I prefer option 2 because it will extend to TT better","msgtype":"m.text"},"ts":1701287126006,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lhKK7CbUUVp35ZubZrylqF8f6ZD1_uq-XrJleY0ejmg"},
{"content":{"body":"```\nfunction unsafeMaybeNotAString(v) {\n  return Object.is(v, eval(v));\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>function unsafeMaybeNotAString(v) {\n  return Object.is(v, eval(v));\n}\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287314734,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BYzIr6cNZwDzxdoYTmgW9kong980yWb78cme2rVYyC8"},
{"content":{"body":"ljharb: we need to figure out what we're going to do with iterator helpers ASAP","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: we need to figure out what we're going to do with iterator helpers ASAP","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1701287318918,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cuyoR73OrJ1nhnqnd0qhuP31vkXpwNLNEvj-WaxZByk"},
{"content":{"body":"the accessors approach seems safest to me, even if it makes us feel a little bit gross","m.mentions":{},"msgtype":"m.text"},"ts":1701287343456,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Y_BgHYX1hrozK0FesScqhFK9i8QQb5pe1eznOAR3Svs"},
{"content":{"body":"i'd love to hear v8's position on the two options, but i still don't feel that accessors are safer","m.mentions":{},"msgtype":"m.text"},"ts":1701287357746,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uLtkMwPsA3Pw0h_DrOPq9z8PrvZ8k9QbWrVGMf976S8"},
{"content":{"body":"I won't die on that hill though; either solution works for now","m.mentions":{},"msgtype":"m.text"},"ts":1701287359993,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sa30qRpmqqutzK6gtlLQH_T1UF93SVcqo3JTtcdqWMY"},
{"content":{"body":"if we go with \"omit\" i will be happy to immediately make a new proposal to reintroduce them, and will coordinate with the person from the issue to track upgrading those sites, fwiw","m.mentions":{},"msgtype":"m.text"},"ts":1701287407365,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ttoVFRjumbMydVh8RvRos1XNVLbBBUxHuzDA6xYK0zE"},
{"content":{"body":"that doesn't mean you'll have engine support to experiment with shipping them though","m.mentions":{},"msgtype":"m.text"},"ts":1701287430227,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VUKzmzSjET1EEL5h-kHfyCCyzcauKkZE_dcYOCHiSig"},
{"content":{"body":"right, which is why i want to hear v8's position first","m.mentions":{},"msgtype":"m.text"},"ts":1701287440586,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KRf5xy7tTRWa-y3PpAismVU--Fi1LI9bpFoDxAN8KF4"},
{"content":{"body":"Rezvan is the V8 rep at this meeting","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rmahdav:matrix.org\">Rezvan</a> is the V8 rep at this meeting","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"msgtype":"m.text"},"ts":1701287454232,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$h2oujcgZ-89nftKKujCtGh17zxvshLkYutt915vq9ng"},
{"content":{"body":"`unsafeMaybeNotAString(\"v\")`","format":"org.matrix.custom.html","formatted_body":"<code>unsafeMaybeNotAString(\"v\")</code>","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$BYzIr6cNZwDzxdoYTmgW9kong980yWb78cme2rVYyC8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287503709,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xXbh6wKqyBCSEeCBPfQd0RHbeam1lODzYmAPRGghYaw"},
{"content":{"body":"```\nfunction unsafeMaybeNotAString(v) {\n  return Object.is(v, (0, eval(v)));\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>function unsafeMaybeNotAString(v) {\n  return Object.is(v, (0, eval(v)));\n}\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$xXbh6wKqyBCSEeCBPfQd0RHbeam1lODzYmAPRGghYaw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287583683,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$FNrtgwi9KSDP5VQG4BJaQg2J6GEaZJpSsBKNrRsNEFA"},
{"content":{"body":"Level 2","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$FNrtgwi9KSDP5VQG4BJaQg2J6GEaZJpSsBKNrRsNEFA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287615135,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UT2pqkn8uajkkMPxYMdeRR6KFLylR_Z3JO6StcwSJHE"},
{"content":{"body":"I'm generally partial to \"omit\" as well. While I understand bakkot's concerns around `x.constructor === whatever`, I think there is a fairly low likelihood of that becoming a problem if there is a short turnaround on a follow-on proposal and the outstanding sites being fixed.","format":"org.matrix.custom.html","formatted_body":"I'm generally partial to \"omit\" as well. While I understand bakkot's concerns around <code>x.constructor === whatever</code>, I think there is a fairly low likelihood of that becoming a problem if there is a short turnaround on a follow-on proposal and the outstanding sites being fixed.","m.mentions":{},"msgtype":"m.text"},"ts":1701287643682,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0enTxfnhnUk2Quuiqz_IFjbZDTdW9I-McHczClcAwwg"},
{"content":{"body":"can strings be quines","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$UT2pqkn8uajkkMPxYMdeRR6KFLylR_Z3JO6StcwSJHE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287644045,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$_QoIqI76ZQIL_jD9kILXJLiyuBjNdU-nI80R7ji3W6M"},
{"content":{"body":"```\nunsafeMaybeNotAString(`(function _(){return'('+_+')()'})()`)\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>unsafeMaybeNotAString(`(function _(){return'('+_+')()'})()`)\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$e1REw6i1wH3W_YHo-8vMUYccseyIRxdLmeBGExrndiQ","is_falling_back":true,"m.in_reply_to":{"event_id":"$_QoIqI76ZQIL_jD9kILXJLiyuBjNdU-nI80R7ji3W6M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701287765873,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$xl_Jlq4khfFBCLkEfACh70E4rKF0oZOEOwtFkaFPjzc"},
{"content":{"body":"also the `toString` of an Iterator will change","format":"org.matrix.custom.html","formatted_body":"also the <code>toString</code> of an Iterator will change","m.mentions":{},"msgtype":"m.text"},"ts":1701287780733,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OZIgWWmvCBjz_5BD1tV8cSp7GUXuXdCRkbhqXDCLyW0"},
{"content":{"body":"Though I still think there's potential for a general solution to the \"override mistake\", such as adding a new PropertyDescriptor flag to opt-in to a behavior that allows setting on an instance even if the property is frozen on the prototype.","m.mentions":{},"msgtype":"m.text"},"ts":1701287784686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-Bt1avwi5RkaRA_RtGx_5fpit8ShJuzaCAS9wuIgvbk"},
{"content":{"body":"> <@michaelficarra:matrix.org> also the `toString` of an Iterator will change\n\nFrom what it is in the spec, or do you mean from what it is on `%IteratorPrototype%` currently?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OZIgWWmvCBjz_5BD1tV8cSp7GUXuXdCRkbhqXDCLyW0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>also the <code>toString</code> of an Iterator will change</blockquote></mx-reply>From what it is in the spec, or do you mean from what it is on <code>%IteratorPrototype%</code> currently?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OZIgWWmvCBjz_5BD1tV8cSp7GUXuXdCRkbhqXDCLyW0"}},"msgtype":"m.text"},"ts":1701287812670,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KfVCnRTD8AWW04Sghz8sj_BU0sWoeq--j-MJPk2OGe0"},
{"content":{"body":"> <@michaelficarra:matrix.org> also the `toString` of an Iterator will change\n\n * From what it is in the proposal spec, or do you mean from what it is on `%IteratorPrototype%` currently?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OZIgWWmvCBjz_5BD1tV8cSp7GUXuXdCRkbhqXDCLyW0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>also the <code>toString</code> of an Iterator will change</blockquote></mx-reply> * From what it is in the proposal spec, or do you mean from what it is on <code>%IteratorPrototype%</code> currently?","m.mentions":{},"m.new_content":{"body":"From what it is in the proposal spec, or do you mean from what it is on `%IteratorPrototype%` currently?","format":"org.matrix.custom.html","formatted_body":"From what it is in the proposal spec, or do you mean from what it is on <code>%IteratorPrototype%</code> currently?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KfVCnRTD8AWW04Sghz8sj_BU0sWoeq--j-MJPk2OGe0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701287825909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pAP2owN-BtR5zBv8oTZzrT-S5ythldqZP4mi4_5EnlM"},
{"content":{"body":"from what's in the draft spec as of now","m.mentions":{},"msgtype":"m.text"},"ts":1701287836290,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WUfjGfI2JdWiT80gsjdacFmG5nb-n-ef-39u1SBQv7A"},
{"content":{"body":"it is proposed as \"[object Iterator]\" and will be \"[object Object]\" temporarily","m.mentions":{},"msgtype":"m.text"},"ts":1701287869605,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$SOy9zBStF8WQH-Z8eWjOhDMuK0pWC13sEWs44J2W-68"},
{"content":{"body":"like... why do that?","m.mentions":{},"msgtype":"m.text"},"ts":1701287881287,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$v3Hpkxp-77GRsJaVHBa3LYBg8bw3E7ABcBJ51agHJ-c"},
{"content":{"body":"this is just unnecessary risk and I really don't see the upside other than warm fuzzies","m.mentions":{},"msgtype":"m.text"},"ts":1701287902462,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$7ISpx-Oc61v-ofsdT_X2iU-e_rSTAWQ_NqvuFbta8F4"},
{"content":{"body":"I don't have a preference regarding toString/toStringTag, tbh. I generally wouldn't recommend relying it for anything other than a debugging aid, so its presence or absence isn't that concerning to me.","m.mentions":{},"msgtype":"m.text"},"ts":1701288106234,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4DeIDoMw1EflBrp16HoApbwUwFDi-XFBfwz4k7R9l_0"},
{"content":{"body":" * I don't have a preference regarding toString/toStringTag, tbh. I generally wouldn't recommend relying on it for anything other than a debugging aid, so its presence or absence isn't that concerning to me.","m.mentions":{},"m.new_content":{"body":"I don't have a preference regarding toString/toStringTag, tbh. I generally wouldn't recommend relying on it for anything other than a debugging aid, so its presence or absence isn't that concerning to me.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$4DeIDoMw1EflBrp16HoApbwUwFDi-XFBfwz4k7R9l_0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701288120390,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xUl81LEwejgMjcziZWs2qv3ZgJOcULooseFsulevayQ"},
{"content":{"body":"> <@ljharb:matrix.org> right, which is why i want to hear v8's position first\n\nV8 is supporting the PR (https://github.com/tc39/proposal-iterator-helpers/pull/287) Michael talked about yesterday. This incompatibility blocked us for shipping iterator helpers. The solution provided in the PR seems to be the best way to resolve the issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$KRf5xy7tTRWa-y3PpAismVU--Fi1LI9bpFoDxAN8KF4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>right, which is why i want to hear v8&#39;s position first</blockquote></mx-reply>V8 is supporting the PR (https://github.com/tc39/proposal-iterator-helpers/pull/287) Michael talked about yesterday. This incompatibility blocked us for shipping iterator helpers. The solution provided in the PR seems to be the best way to resolve the issue.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KRf5xy7tTRWa-y3PpAismVU--Fi1LI9bpFoDxAN8KF4"}},"msgtype":"m.text"},"ts":1701289945762,"senderName":"Rezvan","senderId":"@rmahdav:matrix.org","id":"$TmQm62RMZCEwlHeRIwvxz4ezCObVDsgJvHzILDqX780"},
{"content":{"body":"> <@rmahdav:matrix.org> V8 is supporting the PR (https://github.com/tc39/proposal-iterator-helpers/pull/287) Michael talked about yesterday. This incompatibility blocked us for shipping iterator helpers. The solution provided in the PR seems to be the best way to resolve the issue.\n\nthanks; and does v8 have an opinion about, instead of the PR, just not implementing the constructor and Symbol.toStringTag properties for the time being?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TmQm62RMZCEwlHeRIwvxz4ezCObVDsgJvHzILDqX780?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rmahdav:matrix.org\">@rmahdav:matrix.org</a><br>V8 is supporting the PR (https://github.com/tc39/proposal-iterator-helpers/pull/287) Michael talked about yesterday. This incompatibility blocked us for shipping iterator helpers. The solution provided in the PR seems to be the best way to resolve the issue.</blockquote></mx-reply>thanks; and does v8 have an opinion about, instead of the PR, just not implementing the constructor and Symbol.toStringTag properties for the time being?","m.mentions":{"user_ids":["@rmahdav:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TmQm62RMZCEwlHeRIwvxz4ezCObVDsgJvHzILDqX780"}},"msgtype":"m.text"},"ts":1701289973779,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Suos7bCAQiP9j-hFK40kzfgdFZmBk5Y8fp_V6oF5QH4"},
{"content":{"body":"and additionally, with either approach, is Chrome willing to try to ship them as normal data properties in the future once the incompatible websites have finished upgrading?","m.mentions":{},"msgtype":"m.text"},"ts":1701290011713,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ErbLoB0z3Ropi195_8IkFrzd-dK3oDGDv245n49ieL0"},
{"content":{"body":"> <@ljharb:matrix.org> thanks; and does v8 have an opinion about, instead of the PR, just not implementing the constructor and Symbol.toStringTag properties for the time being?\n\nI am not sure about this. I do not remember anything related to this in our discussions with Shu. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Suos7bCAQiP9j-hFK40kzfgdFZmBk5Y8fp_V6oF5QH4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>thanks; and does v8 have an opinion about, instead of the PR, just not implementing the constructor and Symbol.toStringTag properties for the time being?</blockquote></mx-reply>I am not sure about this. I do not remember anything related to this in our discussions with Shu.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Suos7bCAQiP9j-hFK40kzfgdFZmBk5Y8fp_V6oF5QH4"}},"msgtype":"m.text"},"ts":1701291098430,"senderName":"Rezvan","senderId":"@rmahdav:matrix.org","id":"$NKzcxrVmPUNKnif0dyVbfqXzEOBuCK458DBExghvIm8"},
{"content":{"body":"> <@ljharb:matrix.org> and additionally, with either approach, is Chrome willing to try to ship them as normal data properties in the future once the incompatible websites have finished upgrading?\n\nAbout this one, I think the answer is yes. Michael Ficarra Since you had discussions with Shu, what do you think about it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ErbLoB0z3Ropi195_8IkFrzd-dK3oDGDv245n49ieL0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>and additionally, with either approach, is Chrome willing to try to ship them as normal data properties in the future once the incompatible websites have finished upgrading?</blockquote></mx-reply>About this one, I think the answer is yes. <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> Since you had discussions with Shu, what do you think about it?","m.mentions":{"user_ids":["@ljharb:matrix.org","@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ErbLoB0z3Ropi195_8IkFrzd-dK3oDGDv245n49ieL0"}},"msgtype":"m.text"},"ts":1701291142117,"senderName":"Rezvan","senderId":"@rmahdav:matrix.org","id":"$mdX4d8-yutQOdDyXkT9FdluQJV6wcp_zz4sgPhhQ8YQ"},
{"content":{"body":"slide link of next topic: https://johnhax.net/2023/slice/slide","m.mentions":{},"msgtype":"m.text"},"ts":1701291575923,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$OkFGnDwupAUi6UDN8BJ4Uk4DR2JanbfwQ5mB1wZSlzc"},
{"content":{"body":"Rezvan ljharb we didn't talk about that","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rmahdav:matrix.org\">Rezvan</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> we didn't talk about that","m.mentions":{"user_ids":["@rmahdav:matrix.org","@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1701291625600,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$f77kvmOHANConRSfm_fYhzwlUs8x4bILHr8z2i_nJbo"},
{"content":{"body":"So, my answer was my opinion. Not sure if Shu thinks the same.","m.mentions":{},"msgtype":"m.text"},"ts":1701291773552,"senderName":"Rezvan","senderId":"@rmahdav:matrix.org","id":"$GXzwoDrHlsC5YX-NxSL42vHa1m3x-1ZhN7-wECYqBuA"},
{"content":{"body":"I've never met anyone who knows the parameter meaning and order for both slice and splice off the top of their head","m.mentions":{},"msgtype":"m.text"},"ts":1701292384580,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$JiWGKMoXkKvCQk-aguh3CpkV7UJM-ptjZiEBZ5ipelY"},
{"content":{"body":"other than `slice(n)`, I look them up every time","format":"org.matrix.custom.html","formatted_body":"other than <code>slice(n)</code>, I look them up every time","m.mentions":{},"msgtype":"m.text"},"ts":1701292411096,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$G1_yPDKtpjKHydiEkyHBSXuBmC9-oJi0wG_4K9whIOE"},
{"content":{"body":"mdn. every time","m.mentions":{},"msgtype":"m.text"},"ts":1701292419877,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$obFQdy3yc9vSAKCtLI02okIH0MgofLubP-CcxW4sTGA"},
{"content":{"body":"> <@softwarechris:matrix.org> mdn. every time\n\nQuick-info in VS Code :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$obFQdy3yc9vSAKCtLI02okIH0MgofLubP-CcxW4sTGA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>mdn. every time</blockquote></mx-reply>Quick-info in VS Code :)","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$obFQdy3yc9vSAKCtLI02okIH0MgofLubP-CcxW4sTGA"}},"msgtype":"m.text"},"ts":1701292444343,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z1DSRAtpCvqV5eu9R6zz2XYY4ufPAW-ZAEITu5xhWOI"},
{"content":{"body":"my vscode-fu need polishing for sure","m.mentions":{},"msgtype":"m.text"},"ts":1701292475351,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$9bSPszHqzACtPpp5IQ5KAp7Seu4V6uHxMQS1nCt7WdE"},
{"content":{"body":"i know slice but only because i've trained myself to see the \"p\" so hard, at which point i immediately have to look it up every time","m.mentions":{},"msgtype":"m.text"},"ts":1701292494186,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-uWsl0yBZasvuflMvtT361_l9rEemmtc95Fbnrtprjw"},
{"content":{"body":"> <@softwarechris:matrix.org> my vscode-fu need polishing for sure\n\nUsually just `array.slice(` is enough assuming the language service knows `array` is an array type","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$9bSPszHqzACtPpp5IQ5KAp7Seu4V6uHxMQS1nCt7WdE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@softwarechris:matrix.org\">@softwarechris:matrix.org</a><br>my vscode-fu need polishing for sure</blockquote></mx-reply>Usually just <code>array.slice(</code> is enough assuming the language service knows <code>array</code> is an array type","m.mentions":{"user_ids":["@softwarechris:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9bSPszHqzACtPpp5IQ5KAp7Seu4V6uHxMQS1nCt7WdE"}},"msgtype":"m.text"},"ts":1701292516844,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ke3zTylWnJSH63f-QNhz_qUmNUrpAFZjLBIm-nr1nVg"},
{"content":{"body":"I can never remember which of the string methods support negative indices.","m.mentions":{},"msgtype":"m.text"},"ts":1701292522865,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$1yznQlKXFB4wm5Y-d3fxQWt5mddu4ZhcNrUDZtUV5xg"},
{"content":{"body":"> <@rbuckton:matrix.org> Usually just `array.slice(` is enough assuming the language service knows `array` is an array type\n\noh true.. I guess I start thinking about it before I start writing the code.. like I don't get to slice( and then start wondering","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ke3zTylWnJSH63f-QNhz_qUmNUrpAFZjLBIm-nr1nVg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Usually just <code>array.slice(</code> is enough assuming the language service knows <code>array</code> is an array type</blockquote></mx-reply>oh true.. I guess I start thinking about it before I start writing the code.. like I don't get to slice( and then start wondering","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ke3zTylWnJSH63f-QNhz_qUmNUrpAFZjLBIm-nr1nVg"}},"msgtype":"m.text"},"ts":1701292588965,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$UmYuzgEIItwp_p35fcw11xqV8f0EdR7S1glzYrEh_QA"},
{"content":{"body":"this vscode example doesn't look like a bug to me","m.mentions":{},"msgtype":"m.text"},"ts":1701292595917,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$uzOSlJjCwMyb4KrG4iQzTDef-wXvxj0QRvmWF9UjtPI"},
{"content":{"body":"Yeah, not a bug. ","m.mentions":{},"msgtype":"m.text"},"ts":1701292603425,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Hf-DYwHKlv3JnTtNT2hjqHeyBmMj_Mc7ieElu2HzpQM"},
{"content":{"body":"The line assumes `subcommand` exists as an element, because that's the only way you can get to that line to begin with.","format":"org.matrix.custom.html","formatted_body":"The line assumes <code>subcommand</code> exists as an element, because that's the only way you can get to that line to begin with.","m.mentions":{},"msgtype":"m.text"},"ts":1701292646254,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H_2NCnq8de-w1J4g-N6SrbvPkBkm_pF8Q44EH4cCk0c"},
{"content":{"body":"that's what I figured","m.mentions":{},"msgtype":"m.text"},"ts":1701292712201,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$cYZfD6EKW3CwMvAETQ4Ck7ZuGgz-RVQQCz6yllkvzVI"},
{"content":{"body":":-( my queue reply was skipped","m.mentions":{},"msgtype":"m.text"},"ts":1701293396347,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$aVE9u7mGloBYqYLVnMxMsYKIV_Jlqw7Us2IJ1j148qY"},
{"content":{"body":"apologies Michael Ficarra didn't see your reply in time","format":"org.matrix.custom.html","formatted_body":"apologies <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">Michael Ficarra</a> didn't see your reply in time","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"msgtype":"m.text"},"ts":1701293398894,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$01XrH9kun0TAoZt80DfNDJdRQwoZtZHgq__zQWyLblo"},
{"content":{"body":"this is why we need https://github.com/bterlson/tcq/issues/65","m.mentions":{},"msgtype":"m.text"},"ts":1701293426404,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$b2FXdLHKPxiI1hbcnmxYbfb63HtBVzTXoe-NWjuDtCA"},
{"content":{"body":"by \"reified\" do we mean like, a noun that represents a kind of \"view\" on an array/string?","m.mentions":{},"msgtype":"m.text"},"ts":1701293509015,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$44lSNa86JYxitIMvm98K5QXhAeFvfthjQ4srNy0CifE"},
{"content":{"body":"anyway, I was trying to point Ron to the https://github.com/tc39/proposal-iterator.range proposal where we have discussed having a reified range","m.mentions":{},"msgtype":"m.text"},"ts":1701293509891,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$oQKfe_T1P06GfYUOf4r6fACUk4X-_RDs9f04paG0AJM"},
{"content":{"body":"I personally support it, but most others seemed to reject it","m.mentions":{},"msgtype":"m.text"},"ts":1701293521921,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ig1Eghzjcd0x-Zrxn6qc_D5ty8oIx16bbe9MmhH6GEQ"},
{"content":{"body":"ljharb: basically a data structure that holds bounds and can be passed between the `[]` to do the slice","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: basically a data structure that holds bounds and can be passed between the <code>[]</code> to do the slice","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1701293555366,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qzKhPHRDNk-YD_08nOPlT4CR9621sbJ0vfLk4VM84WY"},
{"content":{"body":"yeah that sounds super unjavascripty to me","m.mentions":{},"msgtype":"m.text"},"ts":1701293594825,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5EXDID5839Av3bPulSCkBxuUWzViaU3KW3lbAHs0B9E"},
{"content":{"body":"My suggestion for reification is the introduction of \"inverted\" get/set/has/delete via symbols that could be looked up on an Object in lieu of ToPrimitive:\n\n```js\nclass Index { \n   offset;\n   fromEnd;\n   [Symbol.geti](value) { \n     return this.fromEnd ? value[value.length - this.offset] : value[value.length];\n   }\n}\n\nconst x = new Index(1, /*fromEnd*/ true);\nar[x] // -> x[Symbol.geti](ar)\n```\n\nWhich has a general utility for custom indexes, such as turning a `WeakMap` into a scoped pseudo-private name:\n\n```js\nWeakMap.prototype[Symbol.geti] = function (key) { return this.get(key); }\nWeakMap.prototype[Symbol.seti] = function (key, value) { this.set(key, value); }\nconst key = new WeakMap();\nconst obj = {};\nobj[key] = 1; // key[Symbol.geti](obj);\n```","format":"org.matrix.custom.html","formatted_body":"<p>My suggestion for reification is the introduction of \"inverted\" get/set/has/delete via symbols that could be looked up on an Object in lieu of ToPrimitive:</p>\n<pre><code class=\"language-js\">class Index { \n   offset;\n   fromEnd;\n   [Symbol.geti](value) { \n     return this.fromEnd ? value[value.length - this.offset] : value[value.length];\n   }\n}\n\nconst x = new Index(1, /*fromEnd*/ true);\nar[x] // -&gt; x[Symbol.geti](ar)\n</code></pre>\n<p>Which has a general utility for custom indexes, such as turning a <code>WeakMap</code> into a scoped pseudo-private name:</p>\n<pre><code class=\"language-js\">WeakMap.prototype[Symbol.geti] = function (key) { return this.get(key); }\nWeakMap.prototype[Symbol.seti] = function (key, value) { this.set(key, value); }\nconst key = new WeakMap();\nconst obj = {};\nobj[key] = 1; // key[Symbol.geti](obj);\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701293678571,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AzgdTvhlzF8h6HH_bFZivgl5tvZ_skatXIQ8RAcBJBk"},
{"content":{"body":"making an actual thing vs just typing `x => x[a, b](y)` doesn't seem worth adding","format":"org.matrix.custom.html","formatted_body":"making an actual thing vs just typing <code>x =&gt; x[a, b](y)</code> doesn't seem worth adding","m.mentions":{},"msgtype":"m.text"},"ts":1701293694466,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6Y1-dfQLrdUQb-ehmcXFW2R5T18vqAZx8ZJHiL5fu3k"},
{"content":{"body":"I would definitely not want that to work with normal `obj[key]` access, but could see using the `obj[^key]` syntax or something","format":"org.matrix.custom.html","formatted_body":"I would definitely not want that to work with normal <code>obj[key]</code> access, but could see using the <code>obj[^key]</code> syntax or something","m.mentions":{},"msgtype":"m.text"},"ts":1701293762968,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ifTM64F7jLTuz6m0Ct1bpHJj6w54a6q3EttA7e0XrUQ"},
{"content":{"body":"That can't be unwrapped though","m.mentions":{},"msgtype":"m.text"},"ts":1701293765827,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DPhpmFkuUV6tcacuJIYAIPAh6WMPiBuDaHnueKhWZ0s"},
{"content":{"body":"and while i see ron's point that making a special kind of value and a special protocol to go with it would be a logical generalization, that's a ton of complexity that it'd be a hard sell to justify","m.mentions":{},"msgtype":"m.text"},"ts":1701293769448,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TLKaunI2FQEoPA4q1iVEhi1T7OkYWnffkcxLP3xNWEM"},
{"content":{"body":"though I don't see why you want to do it in this inverted way - it seems like usually containers know how to use an index, rather than an index knowing how to use a container?","m.mentions":{},"msgtype":"m.text"},"ts":1701293797366,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JKX3qBRqCeUf3XdsStnp0s7LYfuvqQ-n2ScPl1IOmjM"},
{"content":{"body":"i.e., `x => x[a, b]` doesn't let you extract `a` and `b` as there's no associated data model.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>x =&gt; x[a, b]</code> doesn't let you extract <code>a</code> and <code>b</code> as there's no associated data model.","m.mentions":{},"msgtype":"m.text"},"ts":1701293806154,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ucOlC6y2Ho3Yfq2VBKgsXCvn8XuAK4YvgcvgKPdPRP0"},
{"content":{"body":"so would we also have a PropertyKey that represents a property, takes an object, and does an inverted lookup?","m.mentions":{},"msgtype":"m.text"},"ts":1701293828569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$utO5D8V2Ndv1p0R7zmdNpEK2AHJ0PCgf_-PQj2a_52c"},
{"content":{"body":"> <@rbuckton:matrix.org> i.e., `x => x[a, b]` doesn't let you extract `a` and `b` as there's no associated data model.\n\noh lol yeah sorry `x.slice(a, b)` in this case, i mistyped","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ucOlC6y2Ho3Yfq2VBKgsXCvn8XuAK4YvgcvgKPdPRP0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>i.e., <code>x =&gt; x[a, b]</code> doesn't let you extract <code>a</code> and <code>b</code> as there's no associated data model.</blockquote></mx-reply>oh lol yeah sorry <code>x.slice(a, b)</code> in this case, i mistyped","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ucOlC6y2Ho3Yfq2VBKgsXCvn8XuAK4YvgcvgKPdPRP0"}},"msgtype":"m.text"},"ts":1701293842708,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0K-ohpmCEFEZ35jC9IqY4gitsPrmK6vm-VDWP-nFa6M"},
{"content":{"body":"> <@rbuckton:matrix.org> i.e., `x => x[a, b]` doesn't let you extract `a` and `b` as there's no associated data model.\n\n * oh lol yeah sorry `x.slice(a, b)` in this case, i mistyped. but yes it doesn't let you get at the a and b, which seems like a benefit? (to make it an opaque lens)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ucOlC6y2Ho3Yfq2VBKgsXCvn8XuAK4YvgcvgKPdPRP0?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>i.e., <code>x =&gt; x[a, b]</code> doesn't let you extract <code>a</code> and <code>b</code> as there's no associated data model.</blockquote></mx-reply> * oh lol yeah sorry <code>x.slice(a, b)</code> in this case, i mistyped. but yes it doesn't let you get at the a and b, which seems like a benefit? (to make it an opaque lens)","m.mentions":{},"m.new_content":{"body":"oh lol yeah sorry `x.slice(a, b)` in this case, i mistyped. but yes it doesn't let you get at the a and b, which seems like a benefit? (to make it an opaque lens)","format":"org.matrix.custom.html","formatted_body":"oh lol yeah sorry <code>x.slice(a, b)</code> in this case, i mistyped. but yes it doesn't let you get at the a and b, which seems like a benefit? (to make it an opaque lens)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$0K-ohpmCEFEZ35jC9IqY4gitsPrmK6vm-VDWP-nFa6M","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701293864112,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qECwEprMI0H_nMSp1U94CA5X2pOgZNA3hKK2HQ52mIc"},
{"content":{"body":"I think my preference here would be to leave `obj[x]` alone, and to add a new `obj[^x]` which invokes a symbol-named method on `obj` passing it `x` (uncoerced). there could then be a `slice(a, b)` function which returns a reified Slice, and the symbol-named method on Array could know how to deal with that","format":"org.matrix.custom.html","formatted_body":"I think my preference here would be to leave <code>obj[x]</code> alone, and to add a new <code>obj[^x]</code> which invokes a symbol-named method on <code>obj</code> passing it <code>x</code> (uncoerced). there could then be a <code>slice(a, b)</code> function which returns a reified Slice, and the symbol-named method on Array could know how to deal with that","m.mentions":{},"msgtype":"m.text"},"ts":1701293926854,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ppCA-XPd8GiS5r5Rw4OyJLlSMUOBvXW19eGxR8C_S8Q"},
{"content":{"body":"also you could have the symbol-named method on Map be an alias for `get`, and that sort of thing","format":"org.matrix.custom.html","formatted_body":"also you could have the symbol-named method on Map be an alias for <code>get</code>, and that sort of thing","m.mentions":{},"msgtype":"m.text"},"ts":1701293940937,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Rjts7MK3rzrn1tosy0GTSXZcD9ijhswEi-CUeKfwesk"},
{"content":{"body":"> <@bakkot:matrix.org> though I don't see why you want to do it in this inverted way - it seems like usually containers know how to use an index, rather than an index knowing how to use a container?\n\nExcept `[]` is only useful for strings and symbols (i.e., via toPrimitive). You can't put anything else meaningful in there that isn't either. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$JKX3qBRqCeUf3XdsStnp0s7LYfuvqQ-n2ScPl1IOmjM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>though I don&#39;t see why you want to do it in this inverted way - it seems like usually containers know how to use an index, rather than an index knowing how to use a container?</blockquote></mx-reply>Except <code>[]</code> is only useful for strings and symbols (i.e., via toPrimitive). You can't put anything else meaningful in there that isn't either.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JKX3qBRqCeUf3XdsStnp0s7LYfuvqQ-n2ScPl1IOmjM"}},"msgtype":"m.text"},"ts":1701293949154,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ai0bmMc2G6eSifL77F8z1rM_K3h83ojnSpRiqm2LRMA"},
{"content":{"body":"and of course have a similarly named method to be invoked when doing `obj[^x] = y`","format":"org.matrix.custom.html","formatted_body":"and of course have a similarly named method to be invoked when doing <code>obj[^x] = y</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701293953110,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HM9JVPAlqi_A7zU9Iw1K3CvggMVsZqWaJaTq9yjNiSc"},
{"content":{"body":"yeah I would also not want `a[b]` delegating to a protocol","format":"org.matrix.custom.html","formatted_body":"yeah I would also not want <code>a[b]</code> delegating to a protocol","m.mentions":{},"msgtype":"m.text"},"ts":1701293960172,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$1BzV1ikgSBk8knAMmKkbmNDhkBlhAT_nvJLEsMWFXxc"},
{"content":{"body":"I'm surprised the `WeakMap` example isn't a stronger motivator?","format":"org.matrix.custom.html","formatted_body":"I'm surprised the <code>WeakMap</code> example isn't a stronger motivator?","m.mentions":{},"msgtype":"m.text"},"ts":1701294007722,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q1OWUYxls-JcKGS7Ste43P1t0JOHFoPPPX6OhtKbTMI"},
{"content":{"body":"weak things are used so rarely i don't think it'd motivate any ergonomic changes?","m.mentions":{},"msgtype":"m.text"},"ts":1701294037299,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$PBJ-dIc9eXcLF8cFqHtQ1Si1aFIcFpohnd7a3R3Pzb0"},
{"content":{"body":"the WeakMap example seems actively bad to me? if I see `obj[key] = 1` I am really expecting to set a property on `obj`. if it does something other than that this is bad.","format":"org.matrix.custom.html","formatted_body":"the WeakMap example seems actively bad to me? if I see <code>obj[key] = 1</code> I am really expecting to set a property on <code>obj</code>. if it does something other than that this is bad.","m.mentions":{},"msgtype":"m.text"},"ts":1701294173807,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G4U1-eDvaf3iIt7BdbwVQZKurnPhms9wwBKGqgCj7D4"},
{"content":{"body":"Could someone clarify if we're talking about just the slice `1:2` proposal now, or also the `^` one?","format":"org.matrix.custom.html","formatted_body":"Could someone clarify if we're talking about just the slice <code>1:2</code> proposal now, or also the <code>^</code> one?","m.mentions":{},"msgtype":"m.text"},"ts":1701294186123,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$YIM5aGzM6gT1wb6qMcGfRFJLsGDujxZR26rYmO1dApQ"},
{"content":{"body":"whereas `map[^key] = value` seems nice","format":"org.matrix.custom.html","formatted_body":"whereas <code>map[^key] = value</code> seems nice","m.mentions":{},"msgtype":"m.text"},"ts":1701294197136,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$x-7N6OPZo1QZZ67jQDPJkSssVAqBxWtB7gXDTZ2U9jc"},
{"content":{"body":" * whereas `map[^key] = value` seems nice (altho i'm not sure how it'd work with set)","format":"org.matrix.custom.html","formatted_body":" * whereas <code>map[^key] = value</code> seems nice (altho i'm not sure how it'd work with set)","m.mentions":{},"m.new_content":{"body":"whereas `map[^key] = value` seems nice (altho i'm not sure how it'd work with set)","format":"org.matrix.custom.html","formatted_body":"whereas <code>map[^key] = value</code> seems nice (altho i'm not sure how it'd work with set)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x-7N6OPZo1QZZ67jQDPJkSssVAqBxWtB7gXDTZ2U9jc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701294209840,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ryns0MzcevxqhNGFCD0D-UgUsPe72WaIm69ljPB4KAI"},
{"content":{"body":"> <@bakkot:matrix.org> the WeakMap example seems actively bad to me? if I see `obj[key] = 1` I am really expecting to set a property on `obj`. if it does something other than that this is bad.\n\nThe WeakMap thing was a way to implement the \"Private Symbol\" mechanism championed by Alex Russel (I think?) without the need to introduce new syntax.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$G4U1-eDvaf3iIt7BdbwVQZKurnPhms9wwBKGqgCj7D4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the WeakMap example seems actively bad to me? if I see <code>obj[key] = 1</code> I am really expecting to set a property on <code>obj</code>. if it does something other than that this is bad.</blockquote></mx-reply>The WeakMap thing was a way to implement the \"Private Symbol\" mechanism championed by Alex Russel (I think?) without the need to introduce new syntax.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G4U1-eDvaf3iIt7BdbwVQZKurnPhms9wwBKGqgCj7D4"}},"msgtype":"m.text"},"ts":1701294266920,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a6Ri4YLHezmfJcl4nPPvKfWI-1tP63DG0O7VSxKAi5o"},
{"content":{"body":"ljharb: I am imagining that `map[^key] = value` is sugar for `map[Symbol.set](key, value)`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I am imagining that <code>map[^key] = value</code> is sugar for <code>map[Symbol.set](key, value)</code>","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1701294278995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CrpcDZ39b5b6ZrrERaE29q4_4S3Ol57ZwjZZyAZrs18"},
{"content":{"body":"i would agree","m.mentions":{},"msgtype":"m.text"},"ts":1701294290712,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DWNZXMg98j4R9jkip9JpCiSl1YFPM0WgYaeFNVKnuVE"},
{"content":{"body":"> <@eemeli:mozilla.org> Could someone clarify if we're talking about just the slice `1:2` proposal now, or also the `^` one?\n\nIt's ambiguous.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$YIM5aGzM6gT1wb6qMcGfRFJLsGDujxZR26rYmO1dApQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br>Could someone clarify if we're talking about just the slice <code>1:2</code> proposal now, or also the <code>^</code> one?</blockquote></mx-reply>It's ambiguous.","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YIM5aGzM6gT1wb6qMcGfRFJLsGDujxZR26rYmO1dApQ"}},"msgtype":"m.text"},"ts":1701294295339,"senderName":"waldemar","senderId":"@waldemarh:matrix.org","id":"$-fmM7Zbk-vm_8pUc_AUB_mGWaoS8aLEAk46Hou5XCk8"},
{"content":{"body":"> <@bakkot:matrix.org> ljharb: I am imagining that `map[^key] = value` is sugar for `map[Symbol.set](key, value)`\n\nThat is at odds with the proposal for `[^x]` to mean index-from-end.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CrpcDZ39b5b6ZrrERaE29q4_4S3Ol57ZwjZZyAZrs18?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: I am imagining that <code>map[^key] = value</code> is sugar for <code>map[Symbol.set](key, value)</code></blockquote></mx-reply>That is at odds with the proposal for <code>[^x]</code> to mean index-from-end.","m.mentions":{"user_ids":["@bakkot:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CrpcDZ39b5b6ZrrERaE29q4_4S3Ol57ZwjZZyAZrs18"}},"msgtype":"m.text"},"ts":1701294314160,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bJWDzw__4OY-W2hBFW1ppCJScJGe4wg3CWKOcCx2BzI"},
{"content":{"body":"right, we've been talking about a new imagined proposal for `[^x]` to not necessarily mean from end","format":"org.matrix.custom.html","formatted_body":"right, we've been talking about a new imagined proposal for <code>[^x]</code> to not necessarily mean from end","m.mentions":{},"msgtype":"m.text"},"ts":1701294333854,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DZtaqEay6m-9-6nPU9JAAL_vAINFCK8kI48gfc6RaNc"},
{"content":{"body":"however `arr[^-1]` could map to `.slice`, solving that problem","format":"org.matrix.custom.html","formatted_body":"however <code>arr[^-1]</code> could map to <code>.slice</code>, solving that problem","m.mentions":{},"msgtype":"m.text"},"ts":1701294346095,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GqGH0AC0-I4i4xfNdEhTZ_LvNu13UIb5VQWSW5ptElk"},
{"content":{"body":"rbuckton: not if `Array.prototype[Symbol.set] = function(key, value) { this[-key] = value }`!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: not if <code>Array.prototype[Symbol.set] = function(key, value) { this[-key] = value }</code>!","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701294351327,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nagCTlnNMQ39L3WDrsBK3Be_AAJGaWGr_j66I4na3Ug"},
{"content":{"body":"> <@bakkot:matrix.org> the WeakMap example seems actively bad to me? if I see `obj[key] = 1` I am really expecting to set a property on `obj`. if it does something other than that this is bad.\n\nI disagree. We *already* special case objects for indexed access. We just special case them via `Symbol.toPrimitive`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$G4U1-eDvaf3iIt7BdbwVQZKurnPhms9wwBKGqgCj7D4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>the WeakMap example seems actively bad to me? if I see <code>obj[key] = 1</code> I am really expecting to set a property on <code>obj</code>. if it does something other than that this is bad.</blockquote></mx-reply>I disagree. We <em>already</em> special case objects for indexed access. We just special case them via <code>Symbol.toPrimitive</code>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G4U1-eDvaf3iIt7BdbwVQZKurnPhms9wwBKGqgCj7D4"}},"msgtype":"m.text"},"ts":1701294355916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IjRQsPlPpu5N1IAFTu0BZEbJHK0yvcaUkpujTdXhDDg"},
{"content":{"body":" * however `arr[^-1]` could map to `.slice` or `.at`, solving that problem","format":"org.matrix.custom.html","formatted_body":" * however <code>arr[^-1]</code> could map to <code>.slice</code> or <code>.at</code>, solving that problem","m.mentions":{},"m.new_content":{"body":"however `arr[^-1]` could map to `.slice` or `.at`, solving that problem","format":"org.matrix.custom.html","formatted_body":"however <code>arr[^-1]</code> could map to <code>.slice</code> or <code>.at</code>, solving that problem","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GqGH0AC0-I4i4xfNdEhTZ_LvNu13UIb5VQWSW5ptElk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701294356764,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$NOhqwkaSBrLXF9-KKqYCtwW_Dow6o89QBYntIKf7uuU"},
{"content":{"body":" * rbuckton: not if `Array.prototype[Symbol.set] = function(key, value) { key < 0 ? this[this.length + key] = value : this[key] = value }`!","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: not if <code>Array.prototype[Symbol.set] = function(key, value) { key &lt; 0 ? this[this.length + key] = value : this[key] = value }</code>!","m.mentions":{},"m.new_content":{"body":"rbuckton: not if `Array.prototype[Symbol.set] = function(key, value) { key < 0 ? this[this.length + key] = value : this[key] = value }`!","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: not if <code>Array.prototype[Symbol.set] = function(key, value) { key &lt; 0 ? this[this.length + key] = value : this[key] = value }</code>!","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nagCTlnNMQ39L3WDrsBK3Be_AAJGaWGr_j66I4na3Ug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701294380026,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WXiLyLao8811EtCHFTYnhdDxmqP3n0SIo8cfl5DqNV8"},
{"content":{"body":"And an explicit `Symbol.geti` seems directly in line with \"stop coercing things\". ","format":"org.matrix.custom.html","formatted_body":"And an explicit <code>Symbol.geti</code> seems directly in line with \"stop coercing things\".","m.mentions":{},"msgtype":"m.text"},"ts":1701294381001,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NDmqd5SShUz32tLvneVYKza4ohmmMHCsGa8p6VYlRTQ"},
{"content":{"body":"\"stop coercing things\" is mainly intended to apply to new APIs, not to change the meaning of existing things","m.mentions":{},"msgtype":"m.text"},"ts":1701294438820,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0hBkp7tyoF5BbUNvzXjtjgnZ3sj5izsx1Y31iTiIwTg"},
{"content":{"body":"I don't want to change the meaning of existing things as a rule","m.mentions":{},"msgtype":"m.text"},"ts":1701294445574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8qHqX0lNVboiswQua-iMTmChnVswL19AG5JEwMSNpXc"},
{"content":{"body":"but also, even in a world where I thought changing the meaning of `obj[key]` was a good idea, I would still think that it would invoke a method on `obj`, not a method on `key`","format":"org.matrix.custom.html","formatted_body":"but also, even in a world where I thought changing the meaning of <code>obj[key]</code> was a good idea, I would still think that it would invoke a method on <code>obj</code>, not a method on <code>key</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701294560214,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Yq2HN6hfdloj_Uc0omp8U3ZaxyVXYlg2Gf_LotFMzQQ"},
{"content":{"body":"Honestly, I'd love to be able to hook `a[x]` directly to better support custom collections. Indexing with things other than string/number is fairly common in many languages, and is extremely limiting in JS. `Symbol.geti` avoids hooking all of `a[x]` for a specific class of key-like things.","format":"org.matrix.custom.html","formatted_body":"Honestly, I'd love to be able to hook <code>a[x]</code> directly to better support custom collections. Indexing with things other than string/number is fairly common in many languages, and is extremely limiting in JS. <code>Symbol.geti</code> avoids hooking all of <code>a[x]</code> for a specific class of key-like things.","m.mentions":{},"msgtype":"m.text"},"ts":1701294578175,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1zTgzYiiLvv9UKH3sRazN0NMXtKyWXA6Nd2AIyVynTI"},
{"content":{"body":"My suggestion is to add a new syntax for such cases.","m.mentions":{},"msgtype":"m.text"},"ts":1701294619670,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qDJVP4qUOHCsgobUrTDzLRxoYvRWVqXVDG4aQ-p6fKU"},
{"content":{"body":"rbuckton: `a[b]` needs to have simple semantics","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>a[b]</code> needs to have simple semantics","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701294623516,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$qP0aOVgldwZxgeaFgTcpRwUD3z5HYG5ky70mNVJkWRU"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: `a[b]` needs to have simple semantics\n\nI don't agree.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qP0aOVgldwZxgeaFgTcpRwUD3z5HYG5ky70mNVJkWRU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>a[b]</code> needs to have simple semantics</blockquote></mx-reply>I don't agree.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qP0aOVgldwZxgeaFgTcpRwUD3z5HYG5ky70mNVJkWRU"}},"msgtype":"m.text"},"ts":1701294638270,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aNru1Xv2q_8RB7vqaY3W0450kTOibp0m2f12k9opg1c"},
{"content":{"body":"I don't think we should change `a[x]`, but I think we could reasonably introduce `a[^x]`, which would allow `a` to define how it should be indexed by arbitrary `x`","format":"org.matrix.custom.html","formatted_body":"I don't think we should change <code>a[x]</code>, but I think we could reasonably introduce <code>a[^x]</code>, which would allow <code>a</code> to define how it should be indexed by arbitrary <code>x</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701294641947,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-Kn46QA3Od2KeRD4wN1cF4yjMYB9FkFAnn76ZOR9lek"},
{"content":{"body":"> <@bakkot:matrix.org> My suggestion is to add a new syntax for such cases.\n\nThis feels extremely wasteful, imo.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$qDJVP4qUOHCsgobUrTDzLRxoYvRWVqXVDG4aQ-p6fKU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>My suggestion is to add a new syntax for such cases.</blockquote></mx-reply>This feels extremely wasteful, imo.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qDJVP4qUOHCsgobUrTDzLRxoYvRWVqXVDG4aQ-p6fKU"}},"msgtype":"m.text"},"ts":1701294649295,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xf6FOQvQHHxcRZaY9tTEhAVNmJJuyMr8hqPcuuaJQTU"},
{"content":{"body":"sorry, a better thing to say would be \"there needs to be property access with simple semantics; `a[b]` serves that purpose already\"","format":"org.matrix.custom.html","formatted_body":"sorry, a better thing to say would be \"there needs to be property access with simple semantics; <code>a[b]</code> serves that purpose already\"","m.mentions":{},"msgtype":"m.text"},"ts":1701294665475,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jSRJ599w0TtzccVkATfJ1OqqnMql44I4t9Dm7X8PhI8"},
{"content":{"body":"put more strongly, changing `a[x]` would likely break a lot of assumptions in existing code and in the minds of existing devs, and i doubt there would ever be consensus for that, such that i think it's a waste of time to pursue it.","format":"org.matrix.custom.html","formatted_body":"put more strongly, changing <code>a[x]</code> would likely break a lot of assumptions in existing code and in the minds of existing devs, and i doubt there would ever be consensus for that, such that i think it's a waste of time to pursue it.","m.mentions":{},"msgtype":"m.text"},"ts":1701294691728,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uzXgEjLaEExq_LrzPER10nnjmvDkdo5CvSAI2Emu8nA"},
{"content":{"body":"yeah, changing that is almost certainly dead in the water","m.mentions":{},"msgtype":"m.text"},"ts":1701294717820,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$groUlvX4lQNwG5VcIQbpS0xzpQMHbo-gjTSOJMtkVTw"},
{"content":{"body":"> <@bakkot:matrix.org> I don't think we should change `a[x]`, but I think we could reasonably introduce `a[^x]`, which would allow `a` to define how it should be indexed by arbitrary `x`\n\nIf we introduced a new syntax for indexing, I'd be opposed to `a[^x]` specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$-Kn46QA3Od2KeRD4wN1cF4yjMYB9FkFAnn76ZOR9lek?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>I don't think we should change <code>a[x]</code>, but I think we could reasonably introduce <code>a[^x]</code>, which would allow <code>a</code> to define how it should be indexed by arbitrary <code>x</code></blockquote></mx-reply>If we introduced a new syntax for indexing, I'd be opposed to <code>a[^x]</code> specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-Kn46QA3Od2KeRD4wN1cF4yjMYB9FkFAnn76ZOR9lek"}},"msgtype":"m.text"},"ts":1701294723087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QKaU73pDQ-TPDEoh4lY5EYVHP3enw9sbJInbp8KK3QM"},
{"content":{"body":"if that were possible then i would assume we'd have added objects as object keys and not symbols","m.mentions":{},"msgtype":"m.text"},"ts":1701294725727,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jtBoUvjat2wHrQP13Jc79pbDTdv9UD2TY0vXHU3yJpk"},
{"content":{"body":"> <@rbuckton:matrix.org> If we introduced a new syntax for indexing, I'd be opposed to `a[^x]` specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)\n\nif it's a protocol, then that's inherently unavoidable. no?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QKaU73pDQ-TPDEoh4lY5EYVHP3enw9sbJInbp8KK3QM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If we introduced a new syntax for indexing, I'd be opposed to <code>a[^x]</code> specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)</blockquote></mx-reply>if it's a protocol, then that's inherently unavoidable. no?","m.mentions":{"user_ids":["@rbuckton:matrix.org","@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QKaU73pDQ-TPDEoh4lY5EYVHP3enw9sbJInbp8KK3QM"}},"msgtype":"m.text"},"ts":1701294744586,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Z7bfxGxt3EcBXgBJCT9KScTuF1A7KbroECXgYbRxxg8"},
{"content":{"body":"Especially given the prior art for the `^x` syntax in C#.","format":"org.matrix.custom.html","formatted_body":"Especially given the prior art for the <code>^x</code> syntax in C#.","m.mentions":{},"msgtype":"m.text"},"ts":1701294750363,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QQOMsZXmZB1pxSQy4dC4ZN4fBA630ylHPUMvRqxIHU8"},
{"content":{"body":"I was hoping that we could save prefix ^ for something more interesting, e.g., shorthand for zero-parameter arrow functions","m.mentions":{},"msgtype":"m.text"},"ts":1701294754247,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wAwLM3KJqmKH9o05kZXH62CM3lCJwnkt0B4157jZG4I"},
{"content":{"body":"> <@rbuckton:matrix.org> If we introduced a new syntax for indexing, I'd be opposed to `a[^x]` specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)\n\nsure, `[^x]` was just an idea. `[@x]` or something also fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$QKaU73pDQ-TPDEoh4lY5EYVHP3enw9sbJInbp8KK3QM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If we introduced a new syntax for indexing, I'd be opposed to <code>a[^x]</code> specifically as I'd really like it to not mean different things in different places (negative index on Arrays, something else somewhere else, etc)</blockquote></mx-reply>sure, <code>[^x]</code> was just an idea. <code>[@x]</code> or something also fine.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QKaU73pDQ-TPDEoh4lY5EYVHP3enw9sbJInbp8KK3QM"}},"msgtype":"m.text"},"ts":1701294762946,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tN3BlSTB7lvyAO4YXjRFdQgJCzPyfLMWPG3A8O89eAU"},
{"content":{"body":"hax (HE Shi-Jun): I will definitely help, but I don't think I can sign up for co-championing","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">hax (HE Shi-Jun)</a>: I will definitely help, but I don't think I can sign up for co-championing","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"msgtype":"m.text"},"ts":1701294797656,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R8RRFeCmWhcrXk0dKQ7VVRQd7IOOV9KZM6KcHXMzSMk"},
{"content":{"body":"or `obj@[x]`, we could be creative","format":"org.matrix.custom.html","formatted_body":"or <code>obj@[x]</code>, we could be creative","m.mentions":{},"msgtype":"m.text"},"ts":1701294805336,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kF02soYnMUrBw6W6sXoG_Gr0OZfGZQ3p0QkrI4tlQts"},
{"content":{"body":"there's only so much time I have to dedicate to TC39 stuff and I need to prioritise things","m.mentions":{},"msgtype":"m.text"},"ts":1701294813973,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0"},
{"content":{"body":"(like protocols)","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701294823250,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Mpw-ssrN5KXjlY4NuH3Q1OxIqyt6NSBr5q83-hdtlis"},
{"content":{"body":"For partial application I'd considered an infix `~` as an indicator, i.e. `a~()`. I could see `a~[x]` as an option for custom syntax, but I still don't think custom syntax is merited if we could easily hook `a[x]` for a very specific set of things.","format":"org.matrix.custom.html","formatted_body":"For partial application I'd considered an infix <code>~</code> as an indicator, i.e. <code>a~()</code>. I could see <code>a~[x]</code> as an option for custom syntax, but I still don't think custom syntax is merited if we could easily hook <code>a[x]</code> for a very specific set of things.","m.mentions":{},"msgtype":"m.text"},"ts":1701294841721,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y1qpCljg_IiCXjapvaLBCuLh7-FJK7GDHQKAl8B3aK0"},
{"content":{"body":"lol tell me about it","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$Mpw-ssrN5KXjlY4NuH3Q1OxIqyt6NSBr5q83-hdtlis"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701294862527,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$XwBR6HVuc06vyjnbAcs2_1O-31xkiDmup4JISbyOiDM"},
{"content":{"body":"it's very very important that that syntax not be more hookable than it already is, getters are bad enough","m.mentions":{},"msgtype":"m.text"},"ts":1701294873602,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sN_ehDwzuNuGYaMA7Gs7RO-sXsuAyFeLIyc8BGygP54"},
{"content":{"body":"if iterator helpers and follow-ons weren't so damn useful and popular...","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$XwBR6HVuc06vyjnbAcs2_1O-31xkiDmup4JISbyOiDM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701294878413,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$IatAiknSNz_4pliXlFbrFeN_KdfXTWs8SDceHlGUJm0"},
{"content":{"body":"> <@michaelficarra:matrix.org> there's only so much time I have to dedicate to TC39 stuff and I need to prioritise things\n\nThank you !  I just try to advance it it the simple form which I believe is the best solution on these problems. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>there&#39;s only so much time I have to dedicate to TC39 stuff and I need to prioritise things</blockquote></mx-reply>Thank you !  I just try to advance it it the simple form which I believe is the best solution on these problems.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0"}},"msgtype":"m.text"},"ts":1701294885602,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$7Y2XWNuoCc2OwDu7FH8JlS9QEXJmSIc-ulnvJ2S9SrE"},
{"content":{"body":"You could imagine `Symbol` as being implemented this way, and the addition of `Symbol` to `x[a]` was a change to an existing thing back in 2015","format":"org.matrix.custom.html","formatted_body":"You could imagine <code>Symbol</code> as being implemented this way, and the addition of <code>Symbol</code> to <code>x[a]</code> was a change to an existing thing back in 2015","m.mentions":{},"msgtype":"m.text"},"ts":1701294889077,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5OgnIKA1m5fqN-WXBRLc1hQhBVEP-RqT_lAhOU-nJWw"},
{"content":{"body":"or if someone else was working on them","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$IatAiknSNz_4pliXlFbrFeN_KdfXTWs8SDceHlGUJm0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701294889473,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hyD7pUu2M9r9fnjnTbWFkQheAH8LxYgGoCEzDnI6owY"},
{"content":{"body":"in the next half year i may have time to help with some of those, fwiw","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$hyD7pUu2M9r9fnjnTbWFkQheAH8LxYgGoCEzDnI6owY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701294911993,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-pBqMAIHzhWrpUl07kZZA3rr4xEnrczcrcBoxmqFRpE"},
{"content":{"body":"I'm ok with other syntax, but to be honest I don't see how diff with `a[^i]`.","format":"org.matrix.custom.html","formatted_body":"I'm ok with other syntax, but to be honest I don't see how diff with <code>a[^i]</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1701294915153,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$AKaqCkiDdA4gWjF2xrWOqOm-OGq81CyldnMyL_B-Cg4"},
{"content":{"body":"> <@haxjs:matrix.org> Thank you !  I just try to advance it it the simple form which I believe is the best solution on these problems.\n\nI agree. I think simple slicing can be added on its own, with consideration for how it might fit into the generalisation in the future.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$7Y2XWNuoCc2OwDu7FH8JlS9QEXJmSIc-ulnvJ2S9SrE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Thank you !  I just try to advance it it the simple form which I believe is the best solution on these problems.</blockquote></mx-reply>I agree. I think simple slicing can be added on its own, with consideration for how it might fit into the generalisation in the future.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$7Y2XWNuoCc2OwDu7FH8JlS9QEXJmSIc-ulnvJ2S9SrE"}},"msgtype":"m.text"},"ts":1701294946218,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$hOU5vxi_tTsJUZEIBJt4EaWdsC7VLZeoyGbwmTrRV-8"},
{"content":{"body":"So it seems I have nothing could do...","m.mentions":{},"msgtype":"m.text"},"ts":1701294985856,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$QFNxWep4RdI3pnzhdyyd615Si9svb01MCVLWqR0MiWc"},
{"content":{"body":"No more `('b' + 'a' + + 'a' + 'a').toLowerCase()`?","format":"org.matrix.custom.html","formatted_body":"No more <code>('b' + 'a' + + 'a' + 'a').toLowerCase()</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1701294986245,"senderName":"ethanarrowood","senderId":"@ethanarrowood:matrix.org","id":"$tY-gnIaZxzWF4mLELLRJ6AcUD1idIoCVljciJ5S1Cuo"},
{"content":{"body":"As a counterpoint to `a[@x]` or whatever. if `x` is a reified slice, I would want a way to _explicitly_ throw when it is used via `a[x]`, since that would be a mistake.","format":"org.matrix.custom.html","formatted_body":"As a counterpoint to <code>a[@x]</code> or whatever. if <code>x</code> is a reified slice, I would want a way to <em>explicitly</em> throw when it is used via <code>a[x]</code>, since that would be a mistake.","m.mentions":{},"msgtype":"m.text"},"ts":1701294992862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0h2TnluAZDeC3STb7EHxrDERwjf0T78SXrShW6jldGo"},
{"content":{"body":"reified properties/indexes/object operations don't sound like a great direction to me personally, we have functions for that.","m.mentions":{},"msgtype":"m.text"},"ts":1701295023440,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WmvClVlTm9bnXg9UHcnQPiaSEt8ZYI6plI2DTlflUkc"},
{"content":{"body":"If the things we want to use with `a[@x]` shouldn't be used with `a[x]`, then we have two mutually exclusive syntaxes that arguably do the same thing depending on their inputs.","format":"org.matrix.custom.html","formatted_body":"If the things we want to use with <code>a[@x]</code> shouldn't be used with <code>a[x]</code>, then we have two mutually exclusive syntaxes that arguably do the same thing depending on their inputs.","m.mentions":{},"msgtype":"m.text"},"ts":1701295034984,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eaguKkZzM1SXP9lXBgIpVgt7oxv_-gN7mztqtkg2P0A"},
{"content":{"body":"And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just `a[x]`/","format":"org.matrix.custom.html","formatted_body":"And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just <code>a[x]</code>/","m.mentions":{},"msgtype":"m.text"},"ts":1701295063472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5_nS19R-0SnT8pAg0Z8XWvlpl_1oBZdIzet-GISf45k"},
{"content":{"body":" * And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just `a[x]`.","format":"org.matrix.custom.html","formatted_body":" * And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just <code>a[x]</code>.","m.mentions":{},"m.new_content":{"body":"And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just `a[x]`.","format":"org.matrix.custom.html","formatted_body":"And that doesn't seem like a valuable use of our syntactic budget if we could merge them into just <code>a[x]</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5_nS19R-0SnT8pAg0Z8XWvlpl_1oBZdIzet-GISf45k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701295065643,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9bIn0NGz9GlUVTtyRVAtEHQ7bpbxLY7jZ1wRgc4GSwU"},
{"content":{"body":"robustness of existing syntax > > > preserving syntax budget","m.mentions":{},"msgtype":"m.text"},"ts":1701295081518,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$XB_5QD27ymzPcgc99RzYygKcS6JpUMXQn9NjeW-JQS4"},
{"content":{"body":" * imo robustness of existing syntax > > > preserving syntax budget","m.mentions":{},"m.new_content":{"body":"imo robustness of existing syntax > > > preserving syntax budget","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XB_5QD27ymzPcgc99RzYygKcS6JpUMXQn9NjeW-JQS4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701295088427,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uEtQPrQLm36chpfbBUxpU5RlRr6pni7b-GXDnCAG0lE"},
{"content":{"body":"rbuckton: `a[b]` delegating to a symbol is just *not* going to happen","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: <code>a[b]</code> delegating to a symbol is just <em>not</em> going to happen","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701295096871,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$UgwrzumchLQR1-ulY4grjAofJcXRybql_z_tntXBTr8"},
{"content":{"body":"`a[x]` isn't robust, its wasteful","format":"org.matrix.custom.html","formatted_body":"<code>a[x]</code> isn't robust, its wasteful","m.mentions":{},"msgtype":"m.text"},"ts":1701295108925,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-qleipF1cDbl_F7KVb4dBzX1HaLMAjfm-ktenEtZ0ks"},
{"content":{"body":"lol what's wasteful about it as-is?","m.mentions":{},"msgtype":"m.text"},"ts":1701295120551,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$joDL89Nly8c6xY6H_89lytZmYsPYdetQtQWO5vnjNKQ"},
{"content":{"body":"(other than that getters exist)","m.mentions":{},"msgtype":"m.text"},"ts":1701295125844,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$l1cjAtY3Pxs5wdgzq6gyFGFqaevdLyynLeDXueCAfzA"},
{"content":{"body":"engines will not let that *highly-optimised*, *extremely common* operation become slow","format":"org.matrix.custom.html","formatted_body":"engines will not let that <em>highly-optimised</em>, <em>extremely common</em> operation become slow","m.mentions":{},"msgtype":"m.text"},"ts":1701295135662,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AYKHL7_2jh7rIs48ruJJSMpDVPCZlmG3w6trqsnuo9U"},
{"content":{"body":"That you can't use non-string, non-symbol values as keys withing them being stringified.","m.mentions":{},"msgtype":"m.text"},"ts":1701295155427,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$z32Bhok_sdYMA9oOzLD3USYW58PgYWd3oCwX5KFa-jw"},
{"content":{"body":"> <@michaelficarra:matrix.org> engines will not let that *highly-optimised*, *extremely common* operation become slow\n\nThey would be deoptimized in the same way for `a[{}]` today, since they already have to patch in a call to `Symbol.toPrimitive`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$AYKHL7_2jh7rIs48ruJJSMpDVPCZlmG3w6trqsnuo9U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>engines will not let that <em>highly-optimised</em>, <em>extremely common</em> operation become slow</blockquote></mx-reply>They would be deoptimized in the same way for <code>a[{}]</code> today, since they already have to patch in a call to <code>Symbol.toPrimitive</code>.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AYKHL7_2jh7rIs48ruJJSMpDVPCZlmG3w6trqsnuo9U"}},"msgtype":"m.text"},"ts":1701295195295,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZGOMiK16Wkcfme7Hdmf1gdEvRCvGsTeztocb5-L56Pc"},
{"content":{"body":"they may all be done by then 💪","m.mentions":{},"m.relates_to":{"event_id":"$bI4uctYnpodaItUbIJprBmPcurTe40iwgZRDDOpSEG0","is_falling_back":true,"m.in_reply_to":{"event_id":"$-pBqMAIHzhWrpUl07kZZA3rr4xEnrczcrcBoxmqFRpE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1701295197070,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$WTgzbWKFWh1ngT216FFB1i7aMWg80kUeXKMEAwA_eh8"},
{"content":{"body":"So I don't imagine it would affect performance at all in the common case.","m.mentions":{},"msgtype":"m.text"},"ts":1701295226819,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Tsdtnr6r3Po5FZT3fBw1dIUewWwvpoaCLp5cG6ZOlsc"},
{"content":{"body":"only if anyone anywhere has ever touched `Symbol.toPrimitive`, which they usually haven't","format":"org.matrix.custom.html","formatted_body":"only if anyone anywhere has ever touched <code>Symbol.toPrimitive</code>, which they usually haven't","m.mentions":{},"msgtype":"m.text"},"ts":1701295238013,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$zCK3vKYOBOQssCvLS1gNRepezr-pspKYfgupSpOx8as"},
{"content":{"body":"> <@michaelficarra:matrix.org> only if anyone anywhere has ever touched `Symbol.toPrimitive`, which they usually haven't\n\nThere is plenty of code in the wild that is just depending on `.toString()` for the same thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$zCK3vKYOBOQssCvLS1gNRepezr-pspKYfgupSpOx8as?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>only if anyone anywhere has ever touched <code>Symbol.toPrimitive</code>, which they usually haven't</blockquote></mx-reply>There is plenty of code in the wild that is just depending on <code>.toString()</code> for the same thing","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zCK3vKYOBOQssCvLS1gNRepezr-pspKYfgupSpOx8as"}},"msgtype":"m.text"},"ts":1701295263334,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M-NC0H-LhzvM_PODNFJlxKAgbxgWafTbmzX_rQ43YIM"},
{"content":{"body":"I'm using `Symbol.toPrimitive` as a general placeholder for all the things `ToPropertyKey` does for Object values","format":"org.matrix.custom.html","formatted_body":"I'm using <code>Symbol.toPrimitive</code> as a general placeholder for all the things <code>ToPropertyKey</code> does for Object values","m.mentions":{},"msgtype":"m.text"},"ts":1701295299216,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w584MSer3EHiJu-r8SvfcrumCinnfCYjgp2P5FKsGOI"},
{"content":{"body":"🤷‍♂️ well it'll be up to you to convince engines of that then","m.mentions":{},"msgtype":"m.text"},"ts":1701295304122,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$urx8dsSeA0dmoYIH80juMlELWHyraTA3Sqz4_kPPP48"},
{"content":{"body":"To be clear, I haven't proposed `geti` because I think there are better solutions, though I do think `geti` has some interesting value on its own (i.e., using a `WeakMap` into a reified pseudo-private name). In general I'd love to be able to hook `a[x]` for custom collections, even if that were limited to only numeric string indexes as they are interpreted by Array and _TypedArray_, though that limitation wouldn't solve the same case as `geti`.\n\nIn lieu of `geti`/`seti`/etc., I'd be happy with a reified `Slice` and `Index` object that had specific, explicit handling by property evaluation to call a `Symbol.slice`/`Symbol.splice` or `Symbol.indexGet`/`Symbol.indexSet` on the object, such that `x:y` could produce a `new Slice(x, y)` and `^x` could produce a `new Index(x, /*fromEnd*/ true)`. Having reified slices and indexes is extremely convenient as they have a data model that can be interrogated and can thus be composed and reused in user code.","format":"org.matrix.custom.html","formatted_body":"<p>To be clear, I haven't proposed <code>geti</code> because I think there are better solutions, though I do think <code>geti</code> has some interesting value on its own (i.e., using a <code>WeakMap</code> into a reified pseudo-private name). In general I'd love to be able to hook <code>a[x]</code> for custom collections, even if that were limited to only numeric string indexes as they are interpreted by Array and <em>TypedArray</em>, though that limitation wouldn't solve the same case as <code>geti</code>.</p>\n<p>In lieu of <code>geti</code>/<code>seti</code>/etc., I'd be happy with a reified <code>Slice</code> and <code>Index</code> object that had specific, explicit handling by property evaluation to call a <code>Symbol.slice</code>/<code>Symbol.splice</code> or <code>Symbol.indexGet</code>/<code>Symbol.indexSet</code> on the object, such that <code>x:y</code> could produce a <code>new Slice(x, y)</code> and <code>^x</code> could produce a <code>new Index(x, /*fromEnd*/ true)</code>. Having reified slices and indexes is extremely convenient as they have a data model that can be interrogated and can thus be composed and reused in user code.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701295887249,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NOGOnOI_BPv_QxDEq1LuUoKmEv_vi7K2vW29kqAF50M"},
{"content":{"body":"rbuckton: I encourage you to participate in the Iterator.range issue tracker","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I encourage you to participate in the Iterator.range issue tracker","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701296113739,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$RG2Gwlsc7Ngsx5OCGZwzglCrEzLXYz3IG54b6C8tsdI"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I encourage you to participate in the Iterator.range issue tracker\n\nHow does this apply to `Iterator.range`? Do you have a particular issue this applies to? Ranges and slices are subtly different. I think I did bring up reified slices when `Iterator.range` was proposed, but I haven't had much time to follow the range proposal since then.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RG2Gwlsc7Ngsx5OCGZwzglCrEzLXYz3IG54b6C8tsdI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I encourage you to participate in the Iterator.range issue tracker</blockquote></mx-reply>How does this apply to <code>Iterator.range</code>? Do you have a particular issue this applies to? Ranges and slices are subtly different. I think I did bring up reified slices when <code>Iterator.range</code> was proposed, but I haven't had much time to follow the range proposal since then.","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RG2Gwlsc7Ngsx5OCGZwzglCrEzLXYz3IG54b6C8tsdI"}},"msgtype":"m.text"},"ts":1701296310481,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PN_GUTjAoWrrudi3RXXryqcT-9-MTG3D9wN5gFTyCfo"},
{"content":{"body":"reified ranges seem just as unjavascripty to me as reified slices","m.mentions":{},"msgtype":"m.text"},"ts":1701296328901,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$vqcxEAphWVj7Ia5HeFFEqKwNqwxTgY19E5yLO0Q6dqs"},
{"content":{"body":"rbuckton: I don't see how they are different","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't see how they are different","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1701296346714,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$jfZvlV9l3DMPdk8UDAS_ohxhiCbBuCXk_z9jzJItbhU"},
{"content":{"body":"It's very pythony, and python and JS share many similarities.","m.mentions":{},"msgtype":"m.text"},"ts":1701296351375,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sGCJvyvfNiNKdamzwxkbXGW0Lj99a0XwotFRlixE7_8"},
{"content":{"body":"string enums are nice until a change results in garbage like step 24 in https://tc39.es/ecma402/#sec-initializenumberformat","m.mentions":{},"msgtype":"m.text"},"ts":1701296363388,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F_a2eCLgReMtoKdWvzoUcTSByW9dBJfB4mooO5DC-_U"},
{"content":{"body":"> <@michaelficarra:matrix.org> rbuckton: I don't see how they are different\n\nRanges produce values, slices represent ordinal positions from which to read and write chunks. There is a lot of similarity, but a Range that produces values can't really have a meaningful notion of \"3 elements from the end\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jfZvlV9l3DMPdk8UDAS_ohxhiCbBuCXk_z9jzJItbhU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: I don't see how they are different</blockquote></mx-reply>Ranges produce values, slices represent ordinal positions from which to read and write chunks. There is a lot of similarity, but a Range that produces values can't really have a meaningful notion of \"3 elements from the end\"","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jfZvlV9l3DMPdk8UDAS_ohxhiCbBuCXk_z9jzJItbhU"}},"msgtype":"m.text"},"ts":1701296469574,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KqKZy21HE7HfN-XOacKk0_MvlcincZ9FTPOqorfB0iI"},
{"content":{"body":"Hence why I said they are subtly different","m.mentions":{},"msgtype":"m.text"},"ts":1701296486278,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JT_fMMPrI8fliOXPV8RGGzsLoygv74N5-HEJnIvomcU"},
{"content":{"body":"I hadn't considered that a reified slice would try to represent relative indexing","m.mentions":{},"msgtype":"m.text"},"ts":1701296515831,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$OC3rOfMK0GJvArMo97kuo7XNGbWFpAymwhp1x2vBPQM"},
{"content":{"body":"That was in the slides.","m.mentions":{},"msgtype":"m.text"},"ts":1701296526916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mQ0mgWWrd67LV9yNI00HpmwSzxd6rNhBZB7AELlDlWo"},
{"content":{"body":"`x:^y`","format":"org.matrix.custom.html","formatted_body":"<code>x:^y</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701296532704,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$prfzUUUifYJkzq2qNjrA4ELXLV5YxwSuIgFfZsSRHKQ"},
{"content":{"body":"lol sure, there was a lot of things in the slides","m.mentions":{},"msgtype":"m.text"},"ts":1701296546745,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$4DOn6Z-xGP5IuYJuM6x3Nznu_LlgLNnu7wspkzNgyfg"},
{"content":{"body":"The slice syntax is essentially `expr:expr`, so `0:1` or `x:y`. If you want to represent `.slice(0, -1)`, you use `x:^y`","format":"org.matrix.custom.html","formatted_body":"The slice syntax is essentially <code>expr:expr</code>, so <code>0:1</code> or <code>x:y</code>. If you want to represent <code>.slice(0, -1)</code>, you use <code>x:^y</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701296601012,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TfOVcP4Ws0gFQq6OnSOFY1rb7KizAZSkCW8c2W6bgo0"},
{"content":{"body":"Mostly to avoid the disparity with `a[-1]`, and to align with `a[^1]`. It also keeps them visually similar:","format":"org.matrix.custom.html","formatted_body":"Mostly to avoid the disparity with <code>a[-1]</code>, and to align with <code>a[^1]</code>. It also keeps them visually similar:","m.mentions":{},"msgtype":"m.text"},"ts":1701296646188,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KfsXKtgGrIcWt8wTNKkGTUtqlAucMUPyyfbKdqxEj48"},
{"content":{"body":" * Mostly to avoid the disparity with `a[-1]`, and to align with `a[^1]`. It also keeps them visually similar:\n```\na[0:^1]\na[0]\na[^1]\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Mostly to avoid the disparity with <code>a[-1]</code>, and to align with <code>a[^1]</code>. It also keeps them visually similar:</p>\n<pre><code>a[0:^1]\na[0]\na[^1]\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Mostly to avoid the disparity with `a[-1]`, and to align with `a[^1]`. It also keeps them visually similar:\n```\na[0:^1]\na[0]\na[^1]\n```","format":"org.matrix.custom.html","formatted_body":"<p>Mostly to avoid the disparity with <code>a[-1]</code>, and to align with <code>a[^1]</code>. It also keeps them visually similar:</p>\n<pre><code>a[0:^1]\na[0]\na[^1]\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KfsXKtgGrIcWt8wTNKkGTUtqlAucMUPyyfbKdqxEj48","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701296674719,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NFW-wf7PSLVVbw-trl25jDNgIR26feEgOtMj1GEW1Zg"},
{"content":{"body":"Thus, a `Slice(x, y)` is actually a pair of Index objects. `x:^y` would be reified as `new Slice(new Index(x, false), new Index(y, true))`. At least, that's how it works in C#.","format":"org.matrix.custom.html","formatted_body":"Thus, a <code>Slice(x, y)</code> is actually a pair of Index objects. <code>x:^y</code> would be reified as <code>new Slice(new Index(x, false), new Index(y, true))</code>. At least, that's how it works in C#.","m.mentions":{},"msgtype":"m.text"},"ts":1701296733681,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QQq0m_EC2nMXftKSpcVozXlQFLw3t8g8Pi5Ts2izUpc"},
{"content":{"body":"Refication of index/range are good I believe, the problem is we never have such things in js, all js current methods are just calculate eaglely, for example, this is how resizeable  typedarray deal with negative index. ","m.mentions":{},"msgtype":"m.text"},"ts":1701296794164,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$EGfiFjqnAOBdjWoORYNHFP-vI7FYpwa-IOhRgHTo_3M"},
{"content":{"body":"That also ensures the types are consistent and the object model is more user friendly if you want to do something like:\n```\nconst x = foo ? 0 : ^1;\nconst s = x:^y;\ns.start; // an Index, no need to do a typeof test\ns.end; // also an Index\n```","format":"org.matrix.custom.html","formatted_body":"<p>That also ensures the types are consistent and the object model is more user friendly if you want to do something like:</p>\n<pre><code>const x = foo ? 0 : ^1;\nconst s = x:^y;\ns.start; // an Index, no need to do a typeof test\ns.end; // also an Index\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701296850839,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J4oRfMiHN4Vz8Rlcj7b4LQFCMrCWV-JB-e2Rqmdc_VI"},
{"content":{"body":"Another problem, if there will be index/range I will really hope they are new primitive types. But it seems very impossible as current status.","m.mentions":{},"msgtype":"m.text"},"ts":1701296877802,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$_XKpw8SLxF-00N6Xe61hDJT64eY7UzIgyBVkCRVBEVg"},
{"content":{"body":"> <@haxjs:matrix.org> Refication of index/range are good I believe, the problem is we never have such things in js, all js current methods are just calculate eaglely, for example, this is how resizeable  typedarray deal with negative index.\n\nI could see a reified slice of `x:y`, and a reified range like `x..y` as two distinct things.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$EGfiFjqnAOBdjWoORYNHFP-vI7FYpwa-IOhRgHTo_3M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Refication of index/range are good I believe, the problem is we never have such things in js, all js current methods are just calculate eaglely, for example, this is how resizeable  typedarray deal with negative index. </blockquote></mx-reply>I could see a reified slice of <code>x:y</code>, and a reified range like <code>x..y</code> as two distinct things.","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EGfiFjqnAOBdjWoORYNHFP-vI7FYpwa-IOhRgHTo_3M"}},"msgtype":"m.text"},"ts":1701296895686,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HSfwWEev5_Gk2xbzzBL6Yi1LQWYX6gOHWFx6qVqkfD0"},
{"content":{"body":"> <@haxjs:matrix.org> Another problem, if there will be index/range I will really hope they are new primitive types. But it seems very impossible as current status.\n\nPrimitives aren't really necessary for this. Regular expression literals produce Objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_XKpw8SLxF-00N6Xe61hDJT64eY7UzIgyBVkCRVBEVg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@haxjs:matrix.org\">@haxjs:matrix.org</a><br>Another problem, if there will be index/range I will really hope they are new primitive types. But it seems very impossible as current status.</blockquote></mx-reply>Primitives aren't really necessary for this. Regular expression literals produce Objects","m.mentions":{"user_ids":["@haxjs:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_XKpw8SLxF-00N6Xe61hDJT64eY7UzIgyBVkCRVBEVg"}},"msgtype":"m.text"},"ts":1701296923994,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vJYlDogG01RiM0PezJa1vREvOtgyoFWFaq_DxSVfbTo"},
{"content":{"body":"Though `==` and `!==` might be nice, most other operators don't apply to slices and indexes.","format":"org.matrix.custom.html","formatted_body":"Though <code>==</code> and <code>!==</code> might be nice, most other operators don't apply to slices and indexes.","m.mentions":{},"msgtype":"m.text"},"ts":1701296959228,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sE87wbq5jQyOej_--31g61jNznzldbZAwuy4yTnk8qk"},
{"content":{"body":"You can't really compare `^0` and `^1` using `<` or `>` as they may point to the same element if the array only has a single element.","format":"org.matrix.custom.html","formatted_body":"You can't really compare <code>^0</code> and <code>^1</code> using <code>&lt;</code> or <code>&gt;</code> as they may point to the same element if the array only has a single element.","m.mentions":{},"msgtype":"m.text"},"ts":1701296997777,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aWuk3ErPdpL4zcmVB6c4YLP-1q5BW0VLsX8tUns96WU"},
{"content":{"body":"> <@rbuckton:matrix.org> Primitives aren't really necessary for this. Regular expression literals produce Objects\n\nyeah. of coz we can always use object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vJYlDogG01RiM0PezJa1vREvOtgyoFWFaq_DxSVfbTo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Primitives aren't really necessary for this. Regular expression literals produce Objects</blockquote></mx-reply>yeah. of coz we can always use object.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vJYlDogG01RiM0PezJa1vREvOtgyoFWFaq_DxSVfbTo"}},"msgtype":"m.text"},"ts":1701297058518,"senderName":"hax (HE Shi-Jun)","senderId":"@haxjs:matrix.org","id":"$jbyktzEbtIlOPyDyM1yuFHa8X51wkik_LZJTeL6IUFk"},
{"content":{"body":"Also,  `range` might accept floats, while a slice should only accept `number/bigint/Index` (and not coerce)","format":"org.matrix.custom.html","formatted_body":"Also,  <code>range</code> might accept floats, while a slice should only accept <code>number/bigint/Index</code> (and not coerce)","m.mentions":{},"msgtype":"m.text"},"ts":1701297090906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uY-JS4LAm21OJDExP8ohQT4Mxv-RH9XN4xGhT6eAfyA"},
{"content":{"body":"Also, a slice of `x:y` could theoretically hold a non-primitive, so it can't be a primitive.","format":"org.matrix.custom.html","formatted_body":"Also, a slice of <code>x:y</code> could theoretically hold a non-primitive, so it can't be a primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1701297130560,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$T4CArcLNEPQZJD6QZfdk884jQs08sSnwwDeSwJKv76Y"},
{"content":{"body":"does this not fall under the \"don't coerce objects to primitives\"?","m.mentions":{},"msgtype":"m.text"},"ts":1701297179340,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$R1lSScb27GSNhoGFI2BzOJdTpnVr_nk7YGyULdmNcck"},
{"content":{"body":"> <@michaelficarra:matrix.org> does this not fall under the \"don't coerce objects to primitives\"?\n\nAre you asking me, regarding Slice/Index, or something else?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$R1lSScb27GSNhoGFI2BzOJdTpnVr_nk7YGyULdmNcck?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>does this not fall under the &quot;don&#39;t coerce objects to primitives&quot;?</blockquote></mx-reply>Are you asking me, regarding Slice/Index, or something else?","m.mentions":{"user_ids":["@michaelficarra:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$R1lSScb27GSNhoGFI2BzOJdTpnVr_nk7YGyULdmNcck"}},"msgtype":"m.text"},"ts":1701297233542,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H9zbNHWWL6GiWVc7-2NCYImSrKb9QMj5GoY9r5WsvQQ"},
{"content":{"body":"no, I'm talking about the coercion slides","m.mentions":{},"msgtype":"m.text"},"ts":1701297252822,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$gxFWmARh-qK1O6c1zLKZH_z-DdPAa8ECm7w7KFBMCyE"},
{"content":{"body":"null -> some primitive","m.mentions":{},"msgtype":"m.text"},"ts":1701297264013,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$sDHJ2kNZlTZa470lY3CczAH9h0W56xLIHm18i5dMbVM"},
{"content":{"body":" * Also,  `range` might accept floats, while a slice should only accept `number/bigint` integral values and `Index` and not coerce","format":"org.matrix.custom.html","formatted_body":" * Also,  <code>range</code> might accept floats, while a slice should only accept <code>number/bigint</code> integral values and <code>Index</code> and not coerce","m.mentions":{},"m.new_content":{"body":"Also,  `range` might accept floats, while a slice should only accept `number/bigint` integral values and `Index` and not coerce","format":"org.matrix.custom.html","formatted_body":"Also,  <code>range</code> might accept floats, while a slice should only accept <code>number/bigint</code> integral values and <code>Index</code> and not coerce","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uY-JS4LAm21OJDExP8ohQT4Mxv-RH9XN4xGhT6eAfyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701297344000,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hvbit5y_wOmme7E9BX9r47WCRbE_fjFmfWWpIZ6NjZQ"},
{"content":{"body":" * Also,  `range` might accept floats, while a slice should only accept integral `number` values, `bigint`, and `Index`, and not coerce","format":"org.matrix.custom.html","formatted_body":" * Also,  <code>range</code> might accept floats, while a slice should only accept integral <code>number</code> values, <code>bigint</code>, and <code>Index</code>, and not coerce","m.mentions":{},"m.new_content":{"body":"Also,  `range` might accept floats, while a slice should only accept integral `number` values, `bigint`, and `Index`, and not coerce","format":"org.matrix.custom.html","formatted_body":"Also,  <code>range</code> might accept floats, while a slice should only accept integral <code>number</code> values, <code>bigint</code>, and <code>Index</code>, and not coerce","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uY-JS4LAm21OJDExP8ohQT4Mxv-RH9XN4xGhT6eAfyA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701297365244,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5a64bZN3O_B7UURlFgfAjypfEEPCJo--maYW8dEuNXA"},
{"content":{"body":"these tables are soooooo helpful","m.mentions":{},"msgtype":"m.text"},"ts":1701297370009,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$DSfMiBIBz9Ng0tzOZdv_EFyKvxG_tUrk7GEapkJBRNM"},
{"content":{"body":"\"you haveundefined notifications to review\"","m.mentions":{},"msgtype":"m.text"},"ts":1701298407429,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n5_Ql8ctyd0NfWas4dykfS0UuhRGK9efoLewG1mWNH4"},
{"content":{"body":"(or NaN)","m.mentions":{},"msgtype":"m.text"},"ts":1701298412604,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kpTC_-O7GO9tzJEzpilbDWKgF4UjrR8D7lWJuJO9mAs"},
{"content":{"body":"IIRC, the value for Numbers and BigInts taking strings makes sense given the DOM return value rationale","m.mentions":{},"msgtype":"m.text"},"ts":1701298547745,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gxiKPUxAVMqtG37bHA146-jAN_OYF2osp4WA5CWpEhg"},
{"content":{"body":" * IMO, the value for Numbers and BigInts taking strings makes sense given the DOM return value rationale","m.mentions":{},"m.new_content":{"body":"IMO, the value for Numbers and BigInts taking strings makes sense given the DOM return value rationale","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gxiKPUxAVMqtG37bHA146-jAN_OYF2osp4WA5CWpEhg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701298566230,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Av6MDyvbUWsvW3A4lCPZEa8tAFk1JePb-joNYjfnErA"},
{"content":{"body":"yeah numeric strings are all over the place in the DOM, and JS kinda has to work nicely with the DOM or people will get mad","m.mentions":{},"msgtype":"m.text"},"ts":1701298733132,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$_mk8TCXC5kWtXvE1xOypbPS1lTQk4rzHhSXZQwGw2CM"},
{"content":{"body":"> <@rbuckton:matrix.org> \"you haveundefined notifications to review\"\n\nHopefully in an Intl.MessageFormat world, that message would read:\n```\nyou have {$count} notifications to review\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$n5_Ql8ctyd0NfWas4dykfS0UuhRGK9efoLewG1mWNH4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>&quot;you haveundefined notifications to review&quot;</blockquote></mx-reply><p>Hopefully in an Intl.MessageFormat world, that message would read:</p>\n<pre><code>you have {$count} notifications to review\n</code></pre>\n","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n5_Ql8ctyd0NfWas4dykfS0UuhRGK9efoLewG1mWNH4"}},"msgtype":"m.text"},"ts":1701298776816,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$gtddfeOjiYO9cBSW1TBFWuB78HRWZuh2VtZTF8n5exU"},
{"content":{"body":"> <@eemeli:mozilla.org> Hopefully in an Intl.MessageFormat world, that message would read:\n> ```\n> you have {$count} notifications to review\n> ```\n\nIn an ideal world, yeah maybe. In the current world, messages like that are so commonplace they're a meme ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gtddfeOjiYO9cBSW1TBFWuB78HRWZuh2VtZTF8n5exU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a><br><p>Hopefully in an Intl.MessageFormat world, that message would read:</p>\n<pre><code>you have {$count} notifications to review\n</code></pre>\n</blockquote></mx-reply>In an ideal world, yeah maybe. In the current world, messages like that are so commonplace they're a meme","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gtddfeOjiYO9cBSW1TBFWuB78HRWZuh2VtZTF8n5exU"}},"msgtype":"m.text"},"ts":1701298824080,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PgMpEeT-J63P5_qHBnynk83xJ4h9Xrh8Fd8tdQ1aQgs"},
{"content":{"body":"> <@rbuckton:matrix.org> As a counterpoint to `a[@x]` or whatever. if `x` is a reified slice, I would want a way to _explicitly_ throw when it is used via `a[x]`, since that would be a mistake.\n\njust make the Symbol.toPrimitive method on the Slice class throw?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$0h2TnluAZDeC3STb7EHxrDERwjf0T78SXrShW6jldGo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>As a counterpoint to <code>a[@x]</code> or whatever. if <code>x</code> is a reified slice, I would want a way to <em>explicitly</em> throw when it is used via <code>a[x]</code>, since that would be a mistake.</blockquote></mx-reply>just make the Symbol.toPrimitive method on the Slice class throw?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0h2TnluAZDeC3STb7EHxrDERwjf0T78SXrShW6jldGo"}},"msgtype":"m.text"},"ts":1701299352236,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OhiVash0Q2LP0VNRAgriFvDZ9sUFgqCr-VrO2YSZt8E"},
{"content":{"body":"that seems fairly straightforward to me, not really a counterpoint","m.mentions":{},"msgtype":"m.text"},"ts":1701299360725,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mpbksg5TlmdG0zN-csUC41lBowv96L98ueKudDIO6xI"},
{"content":{"body":"but, I also don't see why it would be a mistake?","m.mentions":{},"msgtype":"m.text"},"ts":1701299381576,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$CtgV9z81yBQ5jebowCpUtdbzLDFr0BED-sWe-9TYEyA"},
{"content":{"body":"like if the class knows how to handle slices, like Array, then it would just give you the slice","m.mentions":{},"msgtype":"m.text"},"ts":1701299395738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$8hc34a1Dm4R7vKFUThsF_jB3wluwp_HlwiIdavzgoys"},
{"content":{"body":"from its `Symbol.get` method","format":"org.matrix.custom.html","formatted_body":"from its <code>Symbol.get</code> method","m.mentions":{},"msgtype":"m.text"},"ts":1701299410738,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JQ4-XMRbe0rVZ0oFJo0KOR-GHr9i8H4i3KTCthtZdpc"},
{"content":{"body":"> <@bakkot:matrix.org> but, I also don't see why it would be a mistake?\n\nIf `Slice` needs to be used with `a[@x]`, then using it with `a[x]` is 100% a bug.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$CtgV9z81yBQ5jebowCpUtdbzLDFr0BED-sWe-9TYEyA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>but, I also don&#39;t see why it would be a mistake?</blockquote></mx-reply>If <code>Slice</code> needs to be used with <code>a[@x]</code>, then using it with <code>a[x]</code> is 100% a bug.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CtgV9z81yBQ5jebowCpUtdbzLDFr0BED-sWe-9TYEyA"}},"msgtype":"m.text"},"ts":1701299462484,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$723KPQ-itY3j1_BEDzIiW3-lr7eb8tXfZ65M8B45yvI"},
{"content":{"body":"oh, sorry, I misread","m.mentions":{},"msgtype":"m.text"},"ts":1701299585977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GP8gAoMU4kSo20VDosRa4jbJvADsGNP1kLfWmJ3MfpM"},
{"content":{"body":"yes, using with `a[x]` is a bug, and would be covered by having slice's `Symbol.toPrimitive` throw","format":"org.matrix.custom.html","formatted_body":"yes, using with <code>a[x]</code> is a bug, and would be covered by having slice's <code>Symbol.toPrimitive</code> throw","m.mentions":{},"msgtype":"m.text"},"ts":1701299598312,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7MMkcmdXJKKScUQAX0eJlp-ugzf7kJo4kynmmFILuaA"},
{"content":{"body":"> <@bakkot:matrix.org> just make the Symbol.toPrimitive method on the Slice class throw?\n\nYes, that's what I'm getting at. This message leads into the point I was trying to make in the subsequent message. What you use in `a[x]` and what you would use in `a[@x]` would be mutually exclusive to avoid bugs. If they are mutually exclusive, then just having `a[x]` do both would avoid the concern about trying to pick the right one to avoid a bug.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$OhiVash0Q2LP0VNRAgriFvDZ9sUFgqCr-VrO2YSZt8E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>just make the Symbol.toPrimitive method on the Slice class throw?</blockquote></mx-reply>Yes, that's what I'm getting at. This message leads into the point I was trying to make in the subsequent message. What you use in <code>a[x]</code> and what you would use in <code>a[@x]</code> would be mutually exclusive to avoid bugs. If they are mutually exclusive, then just having <code>a[x]</code> do both would avoid the concern about trying to pick the right one to avoid a bug.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OhiVash0Q2LP0VNRAgriFvDZ9sUFgqCr-VrO2YSZt8E"}},"msgtype":"m.text"},"ts":1701299604002,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$53Y5Wq9uOOxodnS-KLp779uIg0nAxdr66kG7UTXHysY"},
{"content":{"body":"ah, well, they would not be totally mutually exclusive","m.mentions":{},"msgtype":"m.text"},"ts":1701299629079,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jY-xJyHYsqjyaocYcN2vlQy17-F_drCAGFRT37Lt4L4"},
{"content":{"body":"because Array could have `a[^-1]` do negative indexing","format":"org.matrix.custom.html","formatted_body":"because Array could have <code>a[^-1]</code> do negative indexing","m.mentions":{},"msgtype":"m.text"},"ts":1701299639532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$h4NV-hCfJOe7PiYXuuM0yxQh3v94vf8F_ZrHpCs4kcY"},
{"content":{"body":"> <@bakkot:matrix.org> ah, well, they would not be totally mutually exclusive\n\nThey should be.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$jY-xJyHYsqjyaocYcN2vlQy17-F_drCAGFRT37Lt4L4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>ah, well, they would not be totally mutually exclusive</blockquote></mx-reply>They should be.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jY-xJyHYsqjyaocYcN2vlQy17-F_drCAGFRT37Lt4L4"}},"msgtype":"m.text"},"ts":1701299644259,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_J7xP1jGpppZ5saAPcm3Cx0iHuQkKdx_4ZEjz-dTX6A"},
{"content":{"body":"they would be mutually exclusive for object types though, yes","m.mentions":{},"msgtype":"m.text"},"ts":1701299647558,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N3S1wy7RFCJiUqNtYQRHEC8vZtxcvyCEdk0pPeoFe0Q"},
{"content":{"body":" * because Array could have `a[@-1]` do negative indexing","format":"org.matrix.custom.html","formatted_body":" * because Array could have <code>a[@-1]</code> do negative indexing","m.mentions":{},"m.new_content":{"body":"because Array could have `a[@-1]` do negative indexing","format":"org.matrix.custom.html","formatted_body":"because Array could have <code>a[@-1]</code> do negative indexing","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h4NV-hCfJOe7PiYXuuM0yxQh3v94vf8F_ZrHpCs4kcY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701299659323,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HKaxR9INYidXAM4s1odRxiyKkNXFU0wVq-ehbYZwKUQ"},
{"content":{"body":"why? if I do `map[@\"string\"]`, that can do a map lookup","format":"org.matrix.custom.html","formatted_body":"why? if I do <code>map[@\"string\"]</code>, that can do a map lookup","m.mentions":{},"msgtype":"m.text"},"ts":1701299675789,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ksLImvKQYdtJXzBoQCBQJUQSAW6LUQ6XfeK8xLzvqNU"},
{"content":{"body":"> <@bakkot:matrix.org> because Array could have `a[@-1]` do negative indexing\n\nAnd `a[-1]` would not, thus its still a potential bug","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$h4NV-hCfJOe7PiYXuuM0yxQh3v94vf8F_ZrHpCs4kcY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>because Array could have <code>a[@-1]</code> do negative indexing</blockquote></mx-reply>And <code>a[-1]</code> would not, thus its still a potential bug","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$h4NV-hCfJOe7PiYXuuM0yxQh3v94vf8F_ZrHpCs4kcY"}},"msgtype":"m.text"},"ts":1701299677751,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hOFxkFWO39CKLNhcXKwgUeBk-wEPaORIIvxtLCuFlc0"},
{"content":{"body":"Well, yes, `a[-1]` would be a bug but in general passing things to the wrong place is a bug","format":"org.matrix.custom.html","formatted_body":"Well, yes, <code>a[-1]</code> would be a bug but in general passing things to the wrong place is a bug","m.mentions":{},"msgtype":"m.text"},"ts":1701299699234,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tumQhCm-u8ry8OIPD_oDEjqqZXfQuzbRbklcyG9bWV8"},
{"content":{"body":"> <@bakkot:matrix.org> why? if I do `map[@\"string\"]`, that can do a map lookup\n\nBecause its too easy to write `map[\"string\"]` and it mean something different. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ksLImvKQYdtJXzBoQCBQJUQSAW6LUQ6XfeK8xLzvqNU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>why? if I do <code>map[@\"string\"]</code>, that can do a map lookup</blockquote></mx-reply>Because its too easy to write <code>map[\"string\"]</code> and it mean something different.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ksLImvKQYdtJXzBoQCBQJUQSAW6LUQ6XfeK8xLzvqNU"}},"msgtype":"m.text"},"ts":1701299723196,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OiYlT5e_7AiUHXkliTxfTfyonzoQ72clwIt-Gf9WgeQ"},
{"content":{"body":"If that's true it applies to any special syntax for indexing a map. I don't agree.","m.mentions":{},"msgtype":"m.text"},"ts":1701299746180,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JY_068nHtVxc4_VolLJzU4eb9PQAagbHV7ZXwmaqlds"},
{"content":{"body":"I'm not advocating for indexing a map using `[]`.","format":"org.matrix.custom.html","formatted_body":"I'm not advocating for indexing a map using <code>[]</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1701299761454,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qOZ_KeGVacEKXZ78olHVQLsVku-zcMHnzbDNJirRZ8U"},
{"content":{"body":"Right, but I am","m.mentions":{},"msgtype":"m.text"},"ts":1701299767949,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$G4TMyca_W6uvdmb6W-fv7AFPrTfw1hJq8JLn7vS5I6I"},
{"content":{"body":"and above you were advocating for a way to index collection types by non-string values; Map seems like the obvious collection type you'd most want to index by non-string values","m.mentions":{},"msgtype":"m.text"},"ts":1701299797017,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0dIzOvHKsCwGlITXlzfdPgOc984unOlVpfFh3uXPEYg"},
{"content":{"body":"I'm advocating for doing something meaningful with objects in `a[x]` aside from just ToString(). ","format":"org.matrix.custom.html","formatted_body":"I'm advocating for doing something meaningful with objects in <code>a[x]</code> aside from just ToString().","m.mentions":{},"msgtype":"m.text"},"ts":1701299830585,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gdFaB3BoPvQ_P4drVNxbO_AizZ5PaE9_EclomHHOOvc"},
{"content":{"body":"What problems does that solve?","m.mentions":{},"msgtype":"m.text"},"ts":1701299893919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Oip2Cf_r_Q-kTexMNsuk4erKnhbJFMMwwZVIco1H3DE"},
{"content":{"body":"My suggestion is, introduce a new `obj[@x]` syntax which invokes a symbol-named method on `obj` with `x`, and also `obj[@x] = y` which invokes a symbol-named method on `obj` with `x` and `y`, which solves\n- you can do negative indexing on arrays\n- you can _assign_ at negative indexes on arrays\n- if we have a `slice` type, you can slice arrays with syntax\n- you can do Map read/writes with syntax\n- other collection types can defining indexing behavior for non-string values\n\nso it gives you a lot of stuff!","format":"org.matrix.custom.html","formatted_body":"<p>My suggestion is, introduce a new <code>obj[@x]</code> syntax which invokes a symbol-named method on <code>obj</code> with <code>x</code>, and also <code>obj[@x] = y</code> which invokes a symbol-named method on <code>obj</code> with <code>x</code> and <code>y</code>, which solves</p>\n<ul>\n<li>you can do negative indexing on arrays</li>\n<li>you can <em>assign</em> at negative indexes on arrays</li>\n<li>if we have a <code>slice</code> type, you can slice arrays with syntax</li>\n<li>you can do Map read/writes with syntax</li>\n<li>other collection types can defining indexing behavior for non-string values</li>\n</ul>\n<p>so it gives you a lot of stuff!</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701300008801,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$otujei1W8AIEqW20g63ql44gelfqxMcGTNJJxhXMuYM"},
{"content":{"body":"It solves reified `Slice`, reified `Index`, `WeakMap` as a scoped private name, plus a number of other approaches such as a \"pick\" object, i.e.:\n\n```js\nconst obj = { x: 1, y: 2, z: 3, w: 4 };\nconst obj2 = obj[new Pick(\"x\", \"y\", \"z\")];\nobj2; // { x: 1, y: 2, z: 3 }\n```","format":"org.matrix.custom.html","formatted_body":"<p>It solves reified <code>Slice</code>, reified <code>Index</code>, <code>WeakMap</code> as a scoped private name, plus a number of other approaches such as a \"pick\" object, i.e.:</p>\n<pre><code class=\"language-js\">const obj = { x: 1, y: 2, z: 3, w: 4 };\nconst obj2 = obj[new Pick(\"x\", \"y\", \"z\")];\nobj2; // { x: 1, y: 2, z: 3 }\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701300020973,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OaFJx12plDlj_wb4zdtQHboWdUEMl_8_RqTa1vIAqEM"},
{"content":{"body":"Your suggestion only solves reified `Index` if either there is also an \"indexing\" protocol collection types can opt into, or the `Index` type knows about every single kind of collection","format":"org.matrix.custom.html","formatted_body":"Your suggestion only solves reified <code>Index</code> if either there is also an \"indexing\" protocol collection types can opt into, or the <code>Index</code> type knows about every single kind of collection","m.mentions":{},"msgtype":"m.text"},"ts":1701300082787,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OkreTwaa_MYgch2vO7ZQlpEv7jCQypwUDm7ALnzBhR0"},
{"content":{"body":"I was also considering `geti` as an approach to handling concurrent reads/writes in multithreaded javascript with Worker and shared structs, though I'm also looking into `.{` notation as a solution","format":"org.matrix.custom.html","formatted_body":"I was also considering <code>geti</code> as an approach to handling concurrent reads/writes in multithreaded javascript with Worker and shared structs, though I'm also looking into <code>.{</code> notation as a solution","m.mentions":{},"msgtype":"m.text"},"ts":1701300086726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cDpUiQb6Sv1dvcZAWHIu4WZJhqI4opPt28T0Ggmua0M"},
{"content":{"body":"Ditto `pick`, etc","format":"org.matrix.custom.html","formatted_body":"Ditto <code>pick</code>, etc","m.mentions":{},"msgtype":"m.text"},"ts":1701300111205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NgFXR7bMHbXISIOKEYZrcBoc3tJGRp1ekjeSjxG0pYI"},
{"content":{"body":"Yes, I expected there would also be an indexing protocol, just like slice notation added a slice protocol.","m.mentions":{},"msgtype":"m.text"},"ts":1701300114820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Rt0Vj-RmGs8KVQgXD88OZk1CAIZXU2L7-pROd-BiZnU"},
{"content":{"body":"and `slice`","format":"org.matrix.custom.html","formatted_body":"and <code>slice</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701300115923,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lQnjxLhtLZZG58en4ZGNxPS9pRvGgkimRZr9w0cBaQY"},
{"content":{"body":"Pick, not so much.","m.mentions":{},"msgtype":"m.text"},"ts":1701300122568,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$y8-hfQI3ObXVZBCDSZCRQ-Bd5QyGT-6iT8XJ4EYipOw"},
{"content":{"body":"Slice depends on knowing something about the size of a collection. Pick does not.","m.mentions":{},"msgtype":"m.text"},"ts":1701300132813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u0jTjXK0Q5orREXmFHM4TsXF3PmwCmK4LrI6hEMenk4"},
{"content":{"body":"OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a `slice` type, and a `pick` type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something. That seems better.","format":"org.matrix.custom.html","formatted_body":"OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a <code>slice</code> type, and a <code>pick</code> type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something. That seems better.","m.mentions":{},"msgtype":"m.text"},"ts":1701300165125,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Qzt4QH-Wk-SCFm4Htge4_5t3M-rKXYi2oYllsxsITp4"},
{"content":{"body":" * OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a `slice` type, and a `pick` type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something, without needing a protocol. That seems better.","format":"org.matrix.custom.html","formatted_body":" * OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a <code>slice</code> type, and a <code>pick</code> type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something, without needing a protocol. That seems better.","m.mentions":{},"m.new_content":{"body":"OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a `slice` type, and a `pick` type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something, without needing a protocol. That seems better.","format":"org.matrix.custom.html","formatted_body":"OK, so, my proposal does not require having an indexing protocol, or a slice protocol. If there is a <code>slice</code> type, and a <code>pick</code> type, then collections can define for themselves what to do when asked to \"slice\" or \"pick\" something, without needing a protocol. That seems better.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Qzt4QH-Wk-SCFm4Htge4_5t3M-rKXYi2oYllsxsITp4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701300177172,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ihCH2v_Egh66mQmMO5lSCgNBibsf9Hv5Ghtbnzt4r1s"},
{"content":{"body":"I don't agree that it's better.","m.mentions":{},"msgtype":"m.text"},"ts":1701300193997,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xr1ZD77GziMno39TVAkivarkWo9Shr-ORi9SpoxPrOE"},
{"content":{"body":"Slice and index-from-end have a well-defined protocol that multiple different objects could implement.","m.mentions":{},"msgtype":"m.text"},"ts":1701300226007,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pD3UvCmwtLjg-wM2gguy1UCDTwinBAXhSB04X__euCg"},
{"content":{"body":"The way I am suggesting they implement that is, they define a `Symbol.get` method which has specific behavior for the reified `slice` values.","format":"org.matrix.custom.html","formatted_body":"The way I am suggesting they implement that is, they define a <code>Symbol.get</code> method which has specific behavior for the reified <code>slice</code> values.","m.mentions":{},"msgtype":"m.text"},"ts":1701300270182,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xA4T_zKkbRNWbqVvaRWWnKd5oKGK0Mm3tmZIKE2rBIk"},
{"content":{"body":"If I have a `Slice` and use it on an array via `a[@x]`, I get a slice. If I used it on a Map via `a[@x]`, it might just act as a key, thus it's not interpreted as a slice. That means that `a[@x:y]` would do something strange on a Map.","format":"org.matrix.custom.html","formatted_body":"If I have a <code>Slice</code> and use it on an array via <code>a[@x]</code>, I get a slice. If I used it on a Map via <code>a[@x]</code>, it might just act as a key, thus it's not interpreted as a slice. That means that <code>a[@x:y]</code> would do something strange on a Map.","m.mentions":{},"msgtype":"m.text"},"ts":1701300282056,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ro4Nq7Bjp_zahDKjbFuUItLeAZEpqNDicd6MAM4OiLg"},
{"content":{"body":"Yes, if you use a key with a type of collection which does not know how to interpret that key, you're going to have a bad time. But this is also true in your inverted world if you use a key with a type of collection where the key does not know how to interpret that type of collection.","m.mentions":{},"msgtype":"m.text"},"ts":1701300337892,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_8Q-xCVs2n6nt45Plgmrh2Y6cszsNA7eXXwdC7mOJ9k"},
{"content":{"body":"Ignoring the `@` for a second, `a[x:y]` and `a[^x]` should always be interpreted as \"take a slice from `a`\" and \"get the element from `a` relative from its end\". ","format":"org.matrix.custom.html","formatted_body":"Ignoring the <code>@</code> for a second, <code>a[x:y]</code> and <code>a[^x]</code> should always be interpreted as \"take a slice from <code>a</code>\" and \"get the element from <code>a</code> relative from its end\".","m.mentions":{},"msgtype":"m.text"},"ts":1701300386918,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gQcMsikD4B6RZuj3wO-Monb9gkq4SKc4g5kiZbyteK8"},
{"content":{"body":"> <@bakkot:matrix.org> Yes, if you use a key with a type of collection which does not know how to interpret that key, you're going to have a bad time. But this is also true in your inverted world if you use a key with a type of collection where the key does not know how to interpret that type of collection.\n\nThat's why I'm not proposing a general indexing hook. I'm proposing a very specific indexing hook.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$_8Q-xCVs2n6nt45Plgmrh2Y6cszsNA7eXXwdC7mOJ9k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Yes, if you use a key with a type of collection which does not know how to interpret that key, you&#39;re going to have a bad time. But this is also true in your inverted world if you use a key with a type of collection where the key does not know how to interpret that type of collection.</blockquote></mx-reply>That's why I'm not proposing a general indexing hook. I'm proposing a very specific indexing hook.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_8Q-xCVs2n6nt45Plgmrh2Y6cszsNA7eXXwdC7mOJ9k"}},"msgtype":"m.text"},"ts":1701300444000,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XeniG5W2spT7inovHjT8_p5hD9aT8J3gVqiPJYj1QlU"},
{"content":{"body":"> <@rbuckton:matrix.org> Ignoring the `@` for a second, `a[x:y]` and `a[^x]` should always be interpreted as \"take a slice from `a`\" and \"get the element from `a` relative from its end\".\n\nI am proposing not to have either `a[x:y]` or negative-indexing `a[^x]`. I think that having only a general `a[@x]` hook would solve the use cases for both `a[x:y]` and `a[^x]`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$gQcMsikD4B6RZuj3wO-Monb9gkq4SKc4g5kiZbyteK8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Ignoring the <code>@</code> for a second, <code>a[x:y]</code> and <code>a[^x]</code> should always be interpreted as \"take a slice from <code>a</code>\" and \"get the element from <code>a</code> relative from its end\".</blockquote></mx-reply>I am proposing not to have either <code>a[x:y]</code> or negative-indexing <code>a[^x]</code>. I think that having only a general <code>a[@x]</code> hook would solve the use cases for both <code>a[x:y]</code> and <code>a[^x]</code>.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gQcMsikD4B6RZuj3wO-Monb9gkq4SKc4g5kiZbyteK8"}},"msgtype":"m.text"},"ts":1701300492494,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ff1hm2mmQ4ig6bca95Lz-te0Qi5Vp58ASHptXDXxRR0"},
{"content":{"body":"With `geti`, `Slice` has a very specific and well-defined interaction with something like `Array`:\n\n```js\nSlice.prototype[Symbol.geti] = function (value) {\n  return value[Symbol.slice](this.start.getIndex(value), this.end.getIndex(value));\n}\nArray.prototype[Symbol.slice] = function (start, end) {\n  return this.slice(start, end);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>With <code>geti</code>, <code>Slice</code> has a very specific and well-defined interaction with something like <code>Array</code>:</p>\n<pre><code class=\"language-js\">Slice.prototype[Symbol.geti] = function (value) {\n  return value[Symbol.slice](this.start.getIndex(value), this.end.getIndex(value));\n}\nArray.prototype[Symbol.slice] = function (start, end) {\n  return this.slice(start, end);\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701300532957,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qev_vfHOmAAZxbeKPtcMQpAo2HqcVwA4eAqtkH9vOow"},
{"content":{"body":"The same goes for `Index`:\n```js\nIndex.prototype[Symbol.geti] = function (value) {\n  return value[Symbol.indexGet](this.getIndex(value));\n}\nArray.prototype[Symbol.indexGet] = function (index) {\n  return this[index];\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The same goes for <code>Index</code>:</p>\n<pre><code class=\"language-js\">Index.prototype[Symbol.geti] = function (value) {\n  return value[Symbol.indexGet](this.getIndex(value));\n}\nArray.prototype[Symbol.indexGet] = function (index) {\n  return this[index];\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701300656313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7IfZFfxKAbaLwTsVFICLOUmkwDEmvKQWRJgP4ldTsSM"},
{"content":{"body":"(or something to that effect)","m.mentions":{},"msgtype":"m.text"},"ts":1701300663179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jikWtqpk5HdIVvL-jrc2iTuAFagm6cyqgxYpoN_8JRI"},
{"content":{"body":"With my proposal also: `Array.prototype[Symbol.get] = function(v) { if (Slice.isSlice(v)) return this.slice(v.start, v.end); /*...*/ }`","format":"org.matrix.custom.html","formatted_body":"With my proposal also: <code>Array.prototype[Symbol.get] = function(v) { if (Slice.isSlice(v)) return this.slice(v.start, v.end); /*...*/ }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1701300696107,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pgom5gzZOdBYBq1zT-fDDNqBgcOyT_iyRMTd7JgfN5k"},
{"content":{"body":"And it only requires a single protocol, not two.","m.mentions":{},"msgtype":"m.text"},"ts":1701300710065,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3we6NJASVyzZ9HvqlRE4kl77Sh1Dt5NSkojZrRPi3UI"},
{"content":{"body":"But a `WeakMap` could do:\n```js\nWeakMap.prototype[Symbol.geti] = function (value) {\n  return this.get(value);\n}\n```\nand a `Pick` might look like:\n```js\nclass Pick {\n  keys;\n  constructor(...keys) {\n    this.keys = keys;\n  }\n  [Symbol.geti](value) {\n    var obj = {};\n    for (var p of Reflect.ownKeys(value)) {\n     if (this.keys.includes(p)) obj[p] = value;\n    }\n    return obj;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>But a <code>WeakMap</code> could do:</p>\n<pre><code class=\"language-js\">WeakMap.prototype[Symbol.geti] = function (value) {\n  return this.get(value);\n}\n</code></pre>\n<p>and a <code>Pick</code> might look like:</p>\n<pre><code class=\"language-js\">class Pick {\n  keys;\n  constructor(...keys) {\n    this.keys = keys;\n  }\n  [Symbol.geti](value) {\n    var obj = {};\n    for (var p of Reflect.ownKeys(value)) {\n     if (this.keys.includes(p)) obj[p] = value;\n    }\n    return obj;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1701300781310,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hnhNYl_6ollcGJ1B-H0HK5bvkuCK_41RSDwgP1fN18U"},
{"content":{"body":"(I really do not think it makes sense for keys to define how they interact with collections, rather than collections defining how they interact with keys.)","m.mentions":{},"msgtype":"m.text"},"ts":1701300858294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TnJt4_PBDVQRDqKgJFGZ_2gBup7jfx3f44J5rpLLASA"},
{"content":{"body":"> <@bakkot:matrix.org> With my proposal also: `Array.prototype[Symbol.get] = function(v) { if (Slice.isSlice(v)) return this.slice(v.start, v.end); /*...*/ }`\n\nThat doesn't solve `a[@x:y]` potentially not returning a Slice and maybe doing something else instead of erroring in the case of a `Map`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$pgom5gzZOdBYBq1zT-fDDNqBgcOyT_iyRMTd7JgfN5k?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>With my proposal also: <code>Array.prototype[Symbol.get] = function(v) { if (Slice.isSlice(v)) return this.slice(v.start, v.end); /*...*/ }</code></blockquote></mx-reply>That doesn't solve <code>a[@x:y]</code> potentially not returning a Slice and maybe doing something else instead of erroring in the case of a <code>Map</code>.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pgom5gzZOdBYBq1zT-fDDNqBgcOyT_iyRMTd7JgfN5k"}},"msgtype":"m.text"},"ts":1701300865394,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kwUtmHN11lH-N-no2mTEDkWrl3Py9RKhcEKZDqqmO3E"},
{"content":{"body":"I am specifically not proposing to have `a[@x:y]` syntax","format":"org.matrix.custom.html","formatted_body":"I am specifically not proposing to have <code>a[@x:y]</code> syntax","m.mentions":{},"msgtype":"m.text"},"ts":1701300949776,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$32Q6XwabwaBHVs2zDtqP9NBprR3thEdVqGOBN7VfA84"},
{"content":{"body":"> <@bakkot:matrix.org> (I really do not think it makes sense for keys to define how they interact with collections, rather than collections defining how they interact with keys.)\n\nI would much rather be able to hook indexing, but not at the cost of the cognitive overhead of picking the correct indexing operator or introducing subtle bugs.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$TnJt4_PBDVQRDqKgJFGZ_2gBup7jfx3f44J5rpLLASA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(I really do not think it makes sense for keys to define how they interact with collections, rather than collections defining how they interact with keys.)</blockquote></mx-reply>I would much rather be able to hook indexing, but not at the cost of the cognitive overhead of picking the correct indexing operator or introducing subtle bugs.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TnJt4_PBDVQRDqKgJFGZ_2gBup7jfx3f44J5rpLLASA"}},"msgtype":"m.text"},"ts":1701300951712,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_qY0l9Q8QwDbAGpRH0sHaVqFxSdHHc2lDvtIUD2xVpY"},
{"content":{"body":"But yes, if you have a reified slice type, and you try to index a map by that, the appropriate behavior is to look up the slice instance in the map. That's how maps work.","m.mentions":{},"msgtype":"m.text"},"ts":1701300990823,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hFVA547oRfxlTzwotXDaugoG2nN_rz9qXa3I2hPBQSY"},
{"content":{"body":"And as I said, I'd be happy to have `Slice` and `Index` have special handling in indexers even without the symbols. That's what C# does. I just feel that `geti` adds a bit more flexibility.","format":"org.matrix.custom.html","formatted_body":"And as I said, I'd be happy to have <code>Slice</code> and <code>Index</code> have special handling in indexers even without the symbols. That's what C# does. I just feel that <code>geti</code> adds a bit more flexibility.","m.mentions":{},"msgtype":"m.text"},"ts":1701301031790,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6dswjGLmzm3xj4tLu7uatV4RQZMApqmkAEeBcYMWq-8"},
{"content":{"body":"But I don't think leveraging a general indexing hook to handle `Slice` and `Index` is a good idea.","format":"org.matrix.custom.html","formatted_body":"But I don't think leveraging a general indexing hook to handle <code>Slice</code> and <code>Index</code> is a good idea.","m.mentions":{},"msgtype":"m.text"},"ts":1701301063288,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LJrmIqzPo6fthlWBSr59D01YR48RSuud_u3a_m0hGL0"},
{"content":{"body":"> <@bakkot:matrix.org> But yes, if you have a reified slice type, and you try to index a map by that, the appropriate behavior is to look up the slice instance in the map. That's how maps work.\n\nNo. The appropriate behavior for `a[x:y]` (or `a[@x:y]`) on a Map that doesn't undertand how to handle a slice should be to throw. Not silently do the wrong thing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$hFVA547oRfxlTzwotXDaugoG2nN_rz9qXa3I2hPBQSY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>But yes, if you have a reified slice type, and you try to index a map by that, the appropriate behavior is to look up the slice instance in the map. That&#39;s how maps work.</blockquote></mx-reply>No. The appropriate behavior for <code>a[x:y]</code> (or <code>a[@x:y]</code>) on a Map that doesn't undertand how to handle a slice should be to throw. Not silently do the wrong thing.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hFVA547oRfxlTzwotXDaugoG2nN_rz9qXa3I2hPBQSY"}},"msgtype":"m.text"},"ts":1701301113922,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JtFRIKlFEYcxilfyUsmw-sv4K0xlA3-058XKtVWPGpo"},
{"content":{"body":"Or if you expect `a[@x:y]` to just be a generalized map, then I'd still strongly prefer we have specific handling for `a[x:y]` and `a[^x]`, such that slicing with the correct syntax is _always_ slicing, and that `a[@x]` just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to `a[x:y]`, and it should never be recommended that you abuse something like `Symbol.get`/`a[@x]` to handle slicing. It's just a bug farm and a source of confusion.","format":"org.matrix.custom.html","formatted_body":"Or if you expect <code>a[@x:y]</code> to just be a generalized map, then I'd still strongly prefer we have specific handling for <code>a[x:y]</code> and <code>a[^x]</code>, such that slicing with the correct syntax is <em>always</em> slicing, and that <code>a[@x]</code> just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to <code>a[x:y]</code>, and it should never be recommended that you abuse something like <code>Symbol.get</code>/<code>a[@x]</code> to handle slicing. It's just a bug farm and a source of confusion.","m.mentions":{},"msgtype":"m.text"},"ts":1701301335477,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fyceFE2c3i3OBJGwECQ0o2FwRzGHSKv57wmofCuc6CE"},
{"content":{"body":" * Or if you expect `a[@x:y]` to just be a generalized map indexer, then I'd still strongly prefer we have specific handling for `a[x:y]` and `a[^x]`, such that slicing with the correct syntax is _always_ slicing, and that `a[@x]` just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to `a[x:y]`, and it should never be recommended that you abuse something like `Symbol.get`/`a[@x]` to handle slicing. It's just a bug farm and a source of confusion.","format":"org.matrix.custom.html","formatted_body":" * Or if you expect <code>a[@x:y]</code> to just be a generalized map indexer, then I'd still strongly prefer we have specific handling for <code>a[x:y]</code> and <code>a[^x]</code>, such that slicing with the correct syntax is <em>always</em> slicing, and that <code>a[@x]</code> just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to <code>a[x:y]</code>, and it should never be recommended that you abuse something like <code>Symbol.get</code>/<code>a[@x]</code> to handle slicing. It's just a bug farm and a source of confusion.","m.mentions":{},"m.new_content":{"body":"Or if you expect `a[@x:y]` to just be a generalized map indexer, then I'd still strongly prefer we have specific handling for `a[x:y]` and `a[^x]`, such that slicing with the correct syntax is _always_ slicing, and that `a[@x]` just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to `a[x:y]`, and it should never be recommended that you abuse something like `Symbol.get`/`a[@x]` to handle slicing. It's just a bug farm and a source of confusion.","format":"org.matrix.custom.html","formatted_body":"Or if you expect <code>a[@x:y]</code> to just be a generalized map indexer, then I'd still strongly prefer we have specific handling for <code>a[x:y]</code> and <code>a[^x]</code>, such that slicing with the correct syntax is <em>always</em> slicing, and that <code>a[@x]</code> just doesn't care at all what you put into it. Documentation that describes slicing with syntax should always refer to <code>a[x:y]</code>, and it should never be recommended that you abuse something like <code>Symbol.get</code>/<code>a[@x]</code> to handle slicing. It's just a bug farm and a source of confusion.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fyceFE2c3i3OBJGwECQ0o2FwRzGHSKv57wmofCuc6CE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701301346648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X7KIO4fQBewm8xV-qN7F-cuusymwSuDRSzm1pmMbvio"},
{"content":{"body":"C# lets you write `map[0..1]` as a key, but C# is typed and thus you know that the input/output is the key type. JS isn't typed, so its far easier to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":"C# lets you write <code>map[0..1]</code> as a key, but C# is typed and thus you know that the input/output is the key type. JS isn't typed, so its far easier to do the wrong thing.","m.mentions":{},"msgtype":"m.text"},"ts":1701301651606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m7zaWurKwLCXBDg93U6W2Ml00gd-0hTySJpRRT93GbA"},
{"content":{"body":" * C# lets you write `map[0..1]` as a key, but C# is typed and thus you know that the input/output is for the key type. JS isn't typed, so its far easier to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":" * C# lets you write <code>map[0..1]</code> as a key, but C# is typed and thus you know that the input/output is for the key type. JS isn't typed, so its far easier to do the wrong thing.","m.mentions":{},"m.new_content":{"body":"C# lets you write `map[0..1]` as a key, but C# is typed and thus you know that the input/output is for the key type. JS isn't typed, so its far easier to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":"C# lets you write <code>map[0..1]</code> as a key, but C# is typed and thus you know that the input/output is for the key type. JS isn't typed, so its far easier to do the wrong thing.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$m7zaWurKwLCXBDg93U6W2Ml00gd-0hTySJpRRT93GbA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701301670157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZW7DuAcyVcdaCX7213AeqAC9Dp6W63m_hAyhd4xrKmo"},
{"content":{"body":" * C# lets you write `map[0..1]` as a key, but C# is typed and thus you know that the input/output is when indexing using the key type. JS isn't typed, so its far easier to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":" * C# lets you write <code>map[0..1]</code> as a key, but C# is typed and thus you know that the input/output is when indexing using the key type. JS isn't typed, so its far easier to do the wrong thing.","m.mentions":{},"m.new_content":{"body":"C# lets you write `map[0..1]` as a key, but C# is typed and thus you know that the input/output is when indexing using the key type. JS isn't typed, so its far easier to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":"C# lets you write <code>map[0..1]</code> as a key, but C# is typed and thus you know that the input/output is when indexing using the key type. JS isn't typed, so its far easier to do the wrong thing.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$m7zaWurKwLCXBDg93U6W2Ml00gd-0hTySJpRRT93GbA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1701301683277,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HoN8GamVwA2002ObnXorTxhgKD2tzVcR5voUZHJ3aF0"}
]