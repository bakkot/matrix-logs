[
{"content":{"body":"Watcher is about notifying \"something may be going on with something in this set of things that I care about\", and then letting you (later) access that going-on subset. I haven't heard of a pub-sub thing with a requirement like that. Using the signals directly to represent themselves, as opposed to a subscription object, saves lots of allocations in a hot path. And there's no payload--also unusual for pub/sub systems (since you get the payload by reading the computed, and computeds are not pub/sub)","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712881064426,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_F35mQczVArzslxmbckn_39wrkBoAw7wd-D8j2nUdoY"},
{"content":{"body":"> <@wycats:matrix.org> ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).\n\nYes, I am sympathetic with this inevitability of direct use... I would like to improve the ergonomics as much as possible, as long as the proposal still works (e.g., not introducing too much runtime overhead).\n\nThe main thing that's relevant here is, you shouldn't use Watcher objects as if they represent a subscription to a Computed. You *can* sort of do this, but we  want to discourage that usage style--Computeds are supposed to exist within a lazily evaluated dependency graph.\n\nOverusing Watchers moves you back towards push-based reactivity. It causes more \"loops\" until all the values \"settle\". It's like overusing `useEffect` in React.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).</blockquote></mx-reply><p>Yes, I am sympathetic with this inevitability of direct use... I would like to improve the ergonomics as much as possible, as long as the proposal still works (e.g., not introducing too much runtime overhead).</p>\n<p>The main thing that's relevant here is, you shouldn't use Watcher objects as if they represent a subscription to a Computed. You <em>can</em> sort of do this, but we  want to discourage that usage style--Computeds are supposed to exist within a lazily evaluated dependency graph.</p>\n<p>Overusing Watchers moves you back towards push-based reactivity. It causes more \"loops\" until all the values \"settle\". It's like overusing <code>useEffect</code> in React.</p>\n","m.mentions":{"user_ids":["@wycats:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM"}},"msgtype":"m.text"},"ts":1712881335039,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MDfJk9x2cfzDni9nfiMDiDl1CscGzM_K7YO3euS-Z0k"},
{"content":{"body":"I would strongly support rbuckton's suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.","format":"org.matrix.custom.html","formatted_body":"I would strongly support <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>'s suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1712916413712,"senderName":"Duncan MacGregor","senderId":"@aardvark179:matrix.org","id":"$Cgy32br8lSQIfzSoAtVgRdRDU7h8zFGGYqKmID61-jc"},
{"content":{"body":"> <@aardvark179:matrix.org> I would strongly support rbuckton's suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.\n\nThere was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Cgy32br8lSQIfzSoAtVgRdRDU7h8zFGGYqKmID61-jc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>I would strongly support <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>'s suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.</blockquote></mx-reply>There was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?","m.mentions":{"user_ids":["@aardvark179:matrix.org","@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Cgy32br8lSQIfzSoAtVgRdRDU7h8zFGGYqKmID61-jc"}},"msgtype":"m.text"},"ts":1712926683504,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A64pRXvF-jf8NAr9tUww-y3tClMBdk0BwnHjsb1sknI"},
{"content":{"body":"(I think they'd be cool, personally)","m.mentions":{},"msgtype":"m.text"},"ts":1712926706759,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xP4PFvEgovAU4wPniVRs1NWXDIZ7a1-cK8Dv_2PuXUg"},
{"content":{"body":"Was something similar ever presented? I haven't proposed it yet","msgtype":"m.text"},"ts":1712926759040,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vxS9LivDW5aLWoEGF4Ag1thMgmjrB0rtl4Cn7imwP48"},
{"content":{"body":"I've briefly mentioned them on occasion, but nothing formal as of yet","msgtype":"m.text"},"ts":1712926798447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H25oEbBJ0qulhf3KXUQNvwBeUMVKzXXTysGJ33J8Zhc"},
{"content":{"body":"oh sorry I got confused... probably I'm thinking of when I floated the idea of variable decorators... sorry for the confusion on my part!","m.mentions":{},"msgtype":"m.text"},"ts":1712927045119,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ixGxYMip6OwEvp4HloHTh7pES7r5R04gHlUzOjKtpN0"},
{"content":{"body":"> <@aardvark179:matrix.org> I would strongly support rbuckton's suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.\n\n * <del>There was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?</del> (I was hallucinating) I'm pretty worried that the committee would be really negative about that idea.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$Cgy32br8lSQIfzSoAtVgRdRDU7h8zFGGYqKmID61-jc?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@aardvark179:matrix.org\">@aardvark179:matrix.org</a><br>I would strongly support <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>'s suggestion of adding a better idea of references, and then building signals on top of that as a type of reference. References feel like they carry their own weight as a feature much better than Signals do on their own.</blockquote></mx-reply> * <del>There was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?</del> (I was hallucinating) I'm pretty worried that the committee would be really negative about that idea.","m.mentions":{},"m.new_content":{"body":"<del>There was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?</del> (I was hallucinating) I'm pretty worried that the committee would be really negative about that idea.","format":"org.matrix.custom.html","formatted_body":"<del>There was a lot of skepticism to the idea of references when they were introduced to committee previously. What should be the next steps there?</del> (I was hallucinating) I'm pretty worried that the committee would be really negative about that idea.","m.mentions":{"user_ids":["@aardvark179:matrix.org","@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$A64pRXvF-jf8NAr9tUww-y3tClMBdk0BwnHjsb1sknI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712927068480,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c8v9klCgBf_3x32oPbme4mHAohIR_DJn85uW3C7Wqlk"},
{"content":{"body":"actually I'm not sure if I actually brought that to committee either","m.mentions":{},"msgtype":"m.text"},"ts":1712927082632,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gZqf3-xpM-eS-dOqVof7h1ZBu0tm-d71ZN1T49LV_wA"},
{"content":{"body":"but, I really don't want to block signals (which are perfectly expressible within JS as it is today) on something fundamental about how variables work (which might be nice but also IMO would compose well \"on top\")","m.mentions":{},"msgtype":"m.text"},"ts":1712927140245,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WLWF9jTBY_hhJ5KL1NuQRgOOG1brw0wyEIGq1Z1JqTw"},
{"content":{"body":"> <@trueadm:matrix.org> In an earlier design, we had the notion that you could pass a computed a callback function that would trigger when it was made dirty. The downside was that you had to pass this upon construction of the computed, which meant interoperability was impaired. However, it could be modelled differently. Is that better than having a watcher?\n\nand this was a special computed which we called an \"effect\" -- normal computeds would definitely not work this way; it's just not the programming model for computeds.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$ZHaUTiK3jwFAjRMw9VexoE2rrQ3ykrG-Ja2OPx3rkas?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@trueadm:matrix.org\">@trueadm:matrix.org</a><br>In an earlier design, we had the notion that you could pass a computed a callback function that would trigger when it was made dirty. The downside was that you had to pass this upon construction of the computed, which meant interoperability was impaired. However, it could be modelled differently. Is that better than having a watcher?</blockquote></mx-reply>and this was a special computed which we called an \"effect\" -- normal computeds would definitely not work this way; it's just not the programming model for computeds.","m.mentions":{"user_ids":["@trueadm:matrix.org"]},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":false,"m.in_reply_to":{"event_id":"$ZHaUTiK3jwFAjRMw9VexoE2rrQ3ykrG-Ja2OPx3rkas"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712927222396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Sy-160LSHapnhdcSOXb8cy1j3y5sOtxmJETjKDUxHfE"},
{"content":{"body":"I don't think there's anything in signals which is pub/sub.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$Sy-160LSHapnhdcSOXb8cy1j3y5sOtxmJETjKDUxHfE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712927337036,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zhzHDIA__n0C33y8620VzQCYJpIYPiW2yCK7P87kM14"},
{"content":{"body":"At least I think of \"sub\" as subscribing to the data which is published--signals, even the watcher, doesn't have an API like this.","m.mentions":{},"m.relates_to":{"event_id":"$z7Tb8DeukfVGzRS6hnlaNnLLQOtyeVWLZPJolvr2PvY","is_falling_back":true,"m.in_reply_to":{"event_id":"$zhzHDIA__n0C33y8620VzQCYJpIYPiW2yCK7P87kM14"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928044566,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yGzsLl-D7uhKuCrib9aR6njIAzAUSOQFc7CTZk7muh8"},
{"content":{"body":"I wanted to go with Signal/State/Computed because they approximated ecosystem consensus for terms, so I though they'd be the most straightforward reference point","m.mentions":{},"m.relates_to":{"event_id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE","is_falling_back":true,"m.in_reply_to":{"event_id":"$CM8KoNRv2yTo423ELV5w0nch52fQ8oSAh53lw7CSquE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928151951,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LStD1EcgZAZnsPiacB8AXa513s7oYPxqvaEiPegTPJg"},
{"content":{"body":"> <@wycats:matrix.org> The signals proposal does something in between. There's always a counter that can be used for invalidation, and you can form a strong connection from state->effect (via a watcher). The invalidation itself works the same in both cases though (e.g. the cache is invalidated not via a watcher but via the counter)\n\nthe counter is kinda an implementation detail, and implementations can drop it while a signal is connected, if they want to","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$f9OgVUv2lAKHBuUbnH18esHyvHIrMjXVKoEmW8U8-dM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br>The signals proposal does something in between. There&#39;s always a counter that can be used for invalidation, and you can form a strong connection from state-&gt;effect (via a watcher). The invalidation itself works the same in both cases though (e.g. the cache is invalidated not via a watcher but via the counter)</blockquote></mx-reply>the counter is kinda an implementation detail, and implementations can drop it while a signal is connected, if they want to","m.mentions":{"user_ids":["@wycats:matrix.org"]},"m.relates_to":{"event_id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo","is_falling_back":false,"m.in_reply_to":{"event_id":"$f9OgVUv2lAKHBuUbnH18esHyvHIrMjXVKoEmW8U8-dM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928193001,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7QYC2iocHtslme6VLOTTeS2y9UkL5QK3HjnPFELWQTg"},
{"content":{"body":"my mental model matches trueadm's","m.mentions":{},"m.relates_to":{"event_id":"$E_D1XAlPwxQVeAwJn0BpfG3wS6x3CavHysMva-edGOo","is_falling_back":true,"m.in_reply_to":{"event_id":"$7QYC2iocHtslme6VLOTTeS2y9UkL5QK3HjnPFELWQTg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928217714,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OY6tbQDZf_6n8qrWXReNlU8ulCYhx4n7KW__peUcN-M"},
{"content":{"body":"definitely not more things with Abort in them, at least","m.mentions":{},"m.relates_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c","is_falling_back":true,"m.in_reply_to":{"event_id":"$ggzfDoQ5mCrdfc_MTP9yhaZTZQDdxiJVMrBe6KIiFKg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928386014,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lIBacIgrnbZgdXbeKnTcay5m8-TzjIRubF4SNM-ujg4"},
{"content":{"body":"somehow the terrible naming there (plus the high level of difficulty of using AbortSignal/AbortController correctly without leaks) makes me feel like, uniquely, we actually *could* make another cancellation API","format":"org.matrix.custom.html","formatted_body":"somehow the terrible naming there (plus the high level of difficulty of using AbortSignal/AbortController correctly without leaks) makes me feel like, uniquely, we actually <em>could</em> make another cancellation API","m.mentions":{},"m.relates_to":{"event_id":"$PA33kRIdexm9AbS838dc6Xx8HNfO7zI58D4uzAJgJ1c","is_falling_back":true,"m.in_reply_to":{"event_id":"$lIBacIgrnbZgdXbeKnTcay5m8-TzjIRubF4SNM-ujg4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928439548,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cZggOA2Ooga622vYAZOdbTEi3bEYxuSXIRKpUQk0Nf8"},
{"content":{"body":"Yeah the question is whether the state is \"well-behaved\"","m.mentions":{},"m.relates_to":{"event_id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc","is_falling_back":true,"m.in_reply_to":{"event_id":"$YDeQ3zfH-yJYGcdbRPd1iUit8vKwttoqb8UNWA6cikc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712928466092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZoWLILFzNdEFtto5bPJ4diy07g3MVbDolHkvWxg3MzU"},
{"content":{"body":"fwiw i think references would be a very dangerous concept to add to the language","msgtype":"m.text"},"ts":1712932889797,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$1gT_zwg5zv_RG4_6gT-0F8v2yCmEj1Kko2XUPsN847A"},
{"content":{"body":"> <@ljharb:matrix.org> fwiw i think references would be a very dangerous concept to add to the language\n\nWhy?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$1gT_zwg5zv_RG4_6gT-0F8v2yCmEj1Kko2XUPsN847A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>fwiw i think references would be a very dangerous concept to add to the language</blockquote></mx-reply>Why?","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1gT_zwg5zv_RG4_6gT-0F8v2yCmEj1Kko2XUPsN847A"}},"msgtype":"m.text"},"ts":1712934613130,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MKsFvuHPuvXiu10a4Nd1xk3KLk_aYFi1mpJjeJH3KTw"},
{"content":{"body":"they’re hard to understand and can be an easy footgun. people already misunderstand object mutation behavior in terms of references.","msgtype":"m.text"},"ts":1712934660353,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YleZkUslcIPsAZh5S7C0jwHmJYQD8tpkRkG16nGChUo"},
{"content":{"body":"if you want a live version of a value, we already have functions and getters (and I’ve often heard live export bindings described as a mistake)","msgtype":"m.text"},"ts":1712934706699,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SmVydasFUy_yzM8Ara7F9P_xTBb1KrwPArkVNnrmoSU"},
{"content":{"body":"Specifying arrows to handle both read and write, or an object with getters and setters, is a lot of boilerplate that could be reduced down to a single character. Decorators could sorely use them and are the reason I drafted a proposal for refs ages ago. The repetition of `() =>` for every relationship in an ORM and for DI binding gets quite exhausting after awhile.","format":"org.matrix.custom.html","formatted_body":"Specifying arrows to handle both read and write, or an object with getters and setters, is a lot of boilerplate that could be reduced down to a single character. Decorators could sorely use them and are the reason I drafted a proposal for refs ages ago. The repetition of <code>() =&gt;</code> for every relationship in an ORM and for DI binding gets quite exhausting after awhile.","m.mentions":{},"msgtype":"m.text"},"ts":1712935185175,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5uggfa952IAGq18OIHZUqqe6McSbY_WrkOUm5SVOOlo"},
{"content":{"body":"And long term I think there will be sufficient motivation for private fields in shared structs, such as to ensure you use methods on the struct to ensure reads and writes to the field are atomic. To support that scenario, though, you need to be able to pass some kind of reference to `Atomics.load`/`Atomics.store`/`Atomics.compareExchange`/etc., and there's no other way to do that presently.","format":"org.matrix.custom.html","formatted_body":"And long term I think there will be sufficient motivation for private fields in shared structs, such as to ensure you use methods on the struct to ensure reads and writes to the field are atomic. To support that scenario, though, you need to be able to pass some kind of reference to <code>Atomics.load</code>/<code>Atomics.store</code>/<code>Atomics.compareExchange</code>/etc., and there's no other way to do that presently.","m.mentions":{},"msgtype":"m.text"},"ts":1712935449857,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ugoPo43axWT7FNCTrmAMCvbxDQ1NseMCkNnCli7E-9c"}
]