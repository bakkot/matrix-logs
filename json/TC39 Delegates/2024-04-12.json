[
{"content":{"body":"Watcher is about notifying \"something may be going on with something in this set of things that I care about\", and then letting you (later) access that going-on subset. I haven't heard of a pub-sub thing with a requirement like that. Using the signals directly to represent themselves, as opposed to a subscription object, saves lots of allocations in a hot path. And there's no payload--also unusual for pub/sub systems (since you get the payload by reading the computed, and computeds are not pub/sub)","m.mentions":{},"m.relates_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k","is_falling_back":true,"m.in_reply_to":{"event_id":"$QW0Dznl1h4vXdhmHCSLEG-civ5qKmd_thJsDt2-v11k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1712881064426,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_F35mQczVArzslxmbckn_39wrkBoAw7wd-D8j2nUdoY"},
{"content":{"body":"> <@wycats:matrix.org> ljharb was quibbling with this point, and he's not wrong about the  `fetch` precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).\n\nYes, I am sympathetic with this inevitability of direct use... I would like to improve the ergonomics as much as possible, as long as the proposal still works (e.g., not introducing too much runtime overhead).\n\nThe main thing that's relevant here is, you shouldn't use Watcher objects as if they represent a subscription to a Computed. You *can* sort of do this, but we  want to discourage that usage style--Computeds are supposed to exist within a lazily evaluated dependency graph.\n\nOverusing Watchers moves you back towards push-based reactivity. It causes more \"loops\" until all the values \"settle\". It's like overusing `useEffect` in React.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@wycats:matrix.org\">@wycats:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> was quibbling with this point, and he's not wrong about the  <code>fetch</code> precedent. That said, I really liked your point (the \"simple effects\" people intuit they want are a DOM feature).</blockquote></mx-reply><p>Yes, I am sympathetic with this inevitability of direct use... I would like to improve the ergonomics as much as possible, as long as the proposal still works (e.g., not introducing too much runtime overhead).</p>\n<p>The main thing that's relevant here is, you shouldn't use Watcher objects as if they represent a subscription to a Computed. You <em>can</em> sort of do this, but we  want to discourage that usage style--Computeds are supposed to exist within a lazily evaluated dependency graph.</p>\n<p>Overusing Watchers moves you back towards push-based reactivity. It causes more \"loops\" until all the values \"settle\". It's like overusing <code>useEffect</code> in React.</p>\n","m.mentions":{"user_ids":["@wycats:matrix.org","@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XoHPBKKeLjxqLaxd-alTsC_ZWuuYEi8eUqeZ616s7mM"}},"msgtype":"m.text"},"ts":1712881335039,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MDfJk9x2cfzDni9nfiMDiDl1CscGzM_K7YO3euS-Z0k"}
]