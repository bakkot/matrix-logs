[
{"content":{"body":"I have an appointment immediately before the meeting today, and Eemeli is out as well, so there'll be no Mozilla representative for the first half hour or so. From the agenda, I don't think there's anything that needs our feedback, but please ping me if something comes up.","msgtype":"m.text"},"ts":1684415847845,"senderName":"dminor","senderId":"@dminor:mozilla.org","id":"$WX7cP6TIEvVRtOpA8DC8z6-DYNJk3oEUhFFhP9_zeUg"},
{"content":{"body":"aww the decimal item got removed","msgtype":"m.text"},"ts":1684421235596,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WNt2vX0GLJxzqJWbtE7Gp1VWo1T-P8jhfscN4WlRw10"},
{"content":{"body":"I would not have added my async iterators item if I'd thought it would be the only thing on the fourth day","msgtype":"m.text"},"ts":1684421254995,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4RNM4Lfd6TWgEEuxoRkgHT-KQGawvOzAf32U28TThGw"},
{"content":{"body":"the presenter is sick, unfortunately. I'm looking forward to it next meeting!","msgtype":"m.text"},"ts":1684421259351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MPpChM93vOMHA5KfEFMGEJ7sY82KT1cmjLVQAdrXbo0"},
{"content":{"body":"I guess we have other stuff now though","msgtype":"m.text"},"ts":1684421259815,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FMD0BprDwuEQKgp20Koefye5g0-Y4T2OgyTdG0ZldNg"},
{"content":{"body":"also source maps overflow is today","msgtype":"m.text"},"ts":1684421265868,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lkE7C1lrL5VahDfFu_Bs2iwTQJrFPZv9ptmwMAof9Ew"},
{"content":{"body":"if anyone has decimal feedback, it'd be good to take that asynchronously","msgtype":"m.text"},"ts":1684421293804,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yXM7NQ_oZh1m5RzXCLBpzXssDHLKXSi8Nok_5B3UaY4"},
{"content":{"body":"@room 3 mins to go!","msgtype":"m.text"},"ts":1684421848512,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$Gr3Bih4ovjQukdgMUuaJ2sNK-kvQiOPVM5SjnetRRvo"},
{"content":{"body":"Morning conflict, be there after.","msgtype":"m.text"},"ts":1684421937409,"senderName":"Rick Markins","senderId":"@rxmarbles:matrix.org","id":"$cMLRAkyGE6HrelL_cKOyNwSMuYeawiYdo95k01RJup0"},
{"content":{"body":"`.bufferAhead(Infinity)` sounds like someone wanted `.toArray()`","format":"org.matrix.custom.html","formatted_body":"<code>.bufferAhead(Infinity)</code> sounds like someone wanted <code>.toArray()</code>","msgtype":"m.text"},"ts":1684422770007,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$73noj8dpL8pDbCtMhnkGUBqC7CJFYSSx5NmWI9AcXMA"},
{"content":{"body":"> <@bakkot:matrix.org> aww the decimal item got removed\n\nwhy removed? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$WNt2vX0GLJxzqJWbtE7Gp1VWo1T-P8jhfscN4WlRw10?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>aww the decimal item got removed</blockquote></mx-reply>why removed?","m.relates_to":{"m.in_reply_to":{"event_id":"$WNt2vX0GLJxzqJWbtE7Gp1VWo1T-P8jhfscN4WlRw10"}},"msgtype":"m.text"},"ts":1684422915008,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ZFqz1gxxFrNeFWaVQ0mlku4yI-tp2XDSxYvZig-E5jM"},
{"content":{"body":"because the presenter is sick today","msgtype":"m.text"},"ts":1684422929218,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wx8ucas4axnf5W_nA57rIHlWRBkIPVFfaMZO_UhyIMk"},
{"content":{"body":"> <@littledan:matrix.org> the presenter is sick, unfortunately. I'm looking forward to it next meeting!\n\noh ...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$MPpChM93vOMHA5KfEFMGEJ7sY82KT1cmjLVQAdrXbo0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>the presenter is sick, unfortunately. I&#39;m looking forward to it next meeting!</blockquote></mx-reply>oh ...","m.relates_to":{"m.in_reply_to":{"event_id":"$MPpChM93vOMHA5KfEFMGEJ7sY82KT1cmjLVQAdrXbo0"}},"msgtype":"m.text"},"ts":1684422935879,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$46hkLUdTpWT9VS6c4b8VyYLKAawEljhmaHDUAznZmBA"},
{"content":{"body":"> <@littledan:matrix.org> if anyone has decimal feedback, it'd be good to take that asynchronously\n\nThe current plan is decimal128 or bigdecimal?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$yXM7NQ_oZh1m5RzXCLBpzXssDHLKXSi8Nok_5B3UaY4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>if anyone has decimal feedback, it&#39;d be good to take that asynchronously</blockquote></mx-reply>The current plan is decimal128 or bigdecimal?","m.relates_to":{"m.in_reply_to":{"event_id":"$yXM7NQ_oZh1m5RzXCLBpzXssDHLKXSi8Nok_5B3UaY4"}},"msgtype":"m.text"},"ts":1684423012403,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$0pSdSFJ6qjj1B3s-TZrG5xMtgqOTsDJ0RLubUHlyw-E"},
{"content":{"body":"HE Shi-Jun: we don't have that decided yet","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@haxjs:matrix.org\">HE Shi-Jun</a>: we don't have that decided yet","msgtype":"m.text"},"ts":1684423047025,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$rQyoRtgIpBz2T8WyJ9QDEoG-K_crDeWKO7hDExK9mMs"},
{"content":{"body":"The champion proposed decimal128, and using objects with methods rather than primitives with operator overloading","msgtype":"m.text"},"ts":1684423076190,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0Dk3nFBBv8pDSODafBhKtHX9z8oGk7_EzAX8Oh6wNLA"},
{"content":{"body":"(last meeting)","msgtype":"m.text"},"ts":1684423080077,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_5v0S-OB7eucce26cwx1K2J4oCO4HOl2KKRE24ejjsA"},
{"content":{"body":"but nothing is decided","msgtype":"m.text"},"ts":1684423082539,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d4zXHIhL4OfwgTZ7PRDYyXbllMPsRIIP_fPPyBEl5ZQ"},
{"content":{"body":"this choice was based on feedback from implementers about R&T","msgtype":"m.text"},"ts":1684423104329,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9rdQuIxxkI8Q5VmDe9rYoB8Uba5OiHnpnUwp9jqchbs"},
{"content":{"body":"it'd be great to hear feedback on these decisions between now and the next meeting","msgtype":"m.text"},"ts":1684423116015,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$boXX6YQ38XQTiTeFPSixuQutfqJjsTq-Li7jgqbh7xw"},
{"content":{"body":" * it'd be great to hear feedback on these proposals between now and the next meeting","m.new_content":{"body":"it'd be great to hear feedback on these proposals between now and the next meeting","msgtype":"m.text"},"m.relates_to":{"event_id":"$boXX6YQ38XQTiTeFPSixuQutfqJjsTq-Li7jgqbh7xw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684423122967,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hlEFU6HU_ZoB-4xWs8eItguPMURuissOCCPNtsB1DbI"},
{"content":{"body":"When we discussed it in wechat group, it seems people would prefer decimal128, with the assumption that it might have hardware support in the future. And if BigDecimal, some people might prefer Rational because it could cover more cases (at least theoretically? )","msgtype":"m.text"},"ts":1684423214093,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$sCLUzaUBgBvk-hRquSl4K13HuKKzWXhj799WJtYB2_8"},
{"content":{"body":"(I never understood why the conversation died down in the WeChat group I started for this outreach, and then there's this other group that I wasn't invited to...)","msgtype":"m.text"},"ts":1684423244158,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YxLJjtfa9WY5KuUTdnvjdb9y6l2oOloB3dzTQRA4Dhs"},
{"content":{"body":"(when we make subgroups of TC39, the general principle is that they're open to anyone in the committee who wants to join them)","msgtype":"m.text"},"ts":1684423288806,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RcnBdlRxyrF_prD7nmhJUv-L5_VeZA9FVko5Wwvwupc"},
{"content":{"body":"It's just my personal chat groups...","msgtype":"m.text"},"ts":1684423334131,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$TRFezFSF113BCxXb6oZ_LUnelRJgz_fjOJ6pMk_bVUM"},
{"content":{"body":"who is \"we\" then?","msgtype":"m.text"},"ts":1684423341725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$49AyU9UtWsJ3HXAtQeuG6jJiTq7_MwOSbdYSk4ClkhM"},
{"content":{"body":"is it JSCIG or just your personal contacts?","msgtype":"m.text"},"ts":1684423351958,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a3fKG_QXKciz5WaUj2fXNHeFkfk1OKyyvblvGqiuefw"},
{"content":{"body":"Many chinese programmers , some are also in JSCIG group, but last JSCIG meeting we don't have enough time to cover decimal topic.","msgtype":"m.text"},"ts":1684423411977,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$VGDm1xokheh4abdka9JyR2CpIO00J2QfmmeypykGvuQ"},
{"content":{"body":"It seems like the transcriptionist is lagging far behind – and while the transcription seems accurate, it's far enough behind that it's very hard for me as a note-takers to keep track of what was said","msgtype":"m.text"},"ts":1684423425777,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lv2rdLQ3LksYINH6A0zeyyd6e04Ma5rWhaWP6Qpj_qg"},
{"content":{"body":"yes I'm seeing that as well (I refreshed the notes a couple times to check if the error was on my side)","msgtype":"m.text"},"ts":1684423447972,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1BtPlGEFWaF0ExOkE1L1HcGMC3TRO37M9JcnMc_MXvM"},
{"content":{"body":"I wonder if it's that the presentation is too fast","msgtype":"m.text"},"ts":1684423458882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Tz0thTU1KSjTKrbI4AExZ3slTuYf9F5b9L0fJWjGuUU"},
{"content":{"body":"> <@littledan:matrix.org> (when we make subgroups of TC39, the general principle is that they're open to anyone in the committee who wants to join them)\n\nJSCIG meetings are open to anyone (check github.com/JSCIG/es-discuss/issues for meeting schedule). The only problem might be, we use only chinese in the meeting :-)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$RcnBdlRxyrF_prD7nmhJUv-L5_VeZA9FVko5Wwvwupc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>(when we make subgroups of TC39, the general principle is that they&#39;re open to anyone in the committee who wants to join them)</blockquote></mx-reply>JSCIG meetings are open to anyone (check github.com/JSCIG/es-discuss/issues for meeting schedule). The only problem might be, we use only chinese in the meeting :-)","m.relates_to":{"m.in_reply_to":{"event_id":"$RcnBdlRxyrF_prD7nmhJUv-L5_VeZA9FVko5Wwvwupc"}},"msgtype":"m.text"},"ts":1684423759567,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$ZKihmWvXMJeifbbRzDc0wAue1lQwpFLFkxJydmgv-cc"},
{"content":{"body":"heh, I definitely won't be able to participate in a meeting, but I can participate in a text chat","msgtype":"m.text"},"ts":1684423793915,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KdIHaN6HDiSt7KVga4zH6QWhi41uraE-zRaaxoy4zMs"},
{"content":{"body":"but if it's a personal group that's fine, I don't need to be involved.","msgtype":"m.text"},"ts":1684423810036,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2RzI3BodXyR3THs62vR0gsME_iqsErH6pTwoK5bBVFs"},
{"content":{"body":"littledan: I don't think there is any official TC39 wechat group... do we have such wechat group?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I don't think there is any official TC39 wechat group... do we have such wechat group?","msgtype":"m.text"},"ts":1684423966088,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$FbHyoNe6nzOdVn8yJwljfp44A_sDfz71pEaOzIfs-UE"},
{"content":{"body":"well, I formed one in 2019 but I wasn't really able to generate much conversation (and now WeChat won't really let me log in). You were in it.","msgtype":"m.text"},"ts":1684424008394,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YzKpjyPa1nraDVqefJxHICOS31N1w_-fSf1HBtgZVkY"},
{"content":{"body":"maybe because I was writing in English? but I would've been fine if people chatted in Chinese there","msgtype":"m.text"},"ts":1684424045550,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QMGw5A0bM3DsOoVI41hxOAbGgBBHH6k60p3n8uI25ng"},
{"content":{"body":"Oh, I find it. It's not have messages from March 2020.","msgtype":"m.text"},"ts":1684424153099,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$Q-uglCpQmfA5r2MnE4WtRL1HyxZid6i_pBZ-XPz1MRs"},
{"content":{"body":"Never mind, this isn't so important; we can discuss it after plenary","msgtype":"m.text"},"ts":1684424190585,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DEL_ZsgsdxJfoYxl08qr9mvjZBUPXA8UEapZVhSrebI"},
{"content":{"body":"I think that's just the ordered semantics that Kevin is proposing?","msgtype":"m.text"},"ts":1684424245505,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$2FdPcDOu0YrbXj88o8yDkpqGqKvG0cSeC4errBI-7Ek"},
{"content":{"body":"we don't need some extra method to have these semantics","msgtype":"m.text"},"ts":1684424270666,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Dyt4hQP6wWfJYLMXb4MX_p4difafez3B3tVB9BLwm1M"},
{"content":{"body":"did i miss how you opt in/out of concurrency overall? is there an options bag or something?","msgtype":"m.text"},"ts":1684424406494,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$wQUOA8uzsJHZuwzHQ-QeleX-7hHPsMI6vSyNPuCX77s"},
{"content":{"body":"littledan: in response to your topic, yes, this is all going to have to abandon the async generator mental model","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in response to your topic, yes, this is all going to have to abandon the async generator mental model","msgtype":"m.text"},"ts":1684424430091,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$koT_LZZYlusOPLbsYAVJk-5QAXzi0aDl4nY8VGHymfo"},
{"content":{"body":"> <@michaelficarra:matrix.org> littledan: in response to your topic, yes, this is all going to have to abandon the async generator mental model\n\nI do not see this as a bad thing for iterator helpers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$koT_LZZYlusOPLbsYAVJk-5QAXzi0aDl4nY8VGHymfo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in response to your topic, yes, this is all going to have to abandon the async generator mental model</blockquote></mx-reply>I do not see this as a bad thing for iterator helpers","m.relates_to":{"m.in_reply_to":{"event_id":"$koT_LZZYlusOPLbsYAVJk-5QAXzi0aDl4nY8VGHymfo"}},"msgtype":"m.text"},"ts":1684424450857,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AX6v_hjzMtkVzreXKC2OfMZ1e14l_wcMzqW7xBXPNpY"},
{"content":{"body":"littledan: me either","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: me either","msgtype":"m.text"},"ts":1684424467742,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$thjzdbWelXmBB4q61SJ5eak1sSIrUVIc7cMtMtm4by4"},
{"content":{"body":"peetk: you just pull more than you need, and `bufferAhead` is a helper to do that for you","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a>: you just pull more than you need, and <code>bufferAhead</code> is a helper to do that for you","msgtype":"m.text"},"ts":1684424498795,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q"},
{"content":{"body":"Maybe I'm not thinking of a complex enough test case, but I think something like `ints.map(subtractTwo).map(timesFour)`","format":"org.matrix.custom.html","formatted_body":"Maybe I'm not thinking of a complex enough test case, but I think something like <code>ints.map(subtractTwo).map(timesFour)</code>","msgtype":"m.text"},"ts":1684424899313,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z8Xpr65W57KW29ZKfQXAI2MqMgKRqccGfQMY5QBOZ70"},
{"content":{"body":"bakkot: yes it can, let me explain","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yes it can, let me explain","msgtype":"m.text"},"ts":1684424910561,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$x_5Qb6HHNNNhV_ymEbXaq3pUqdcO-XiIKgywYz9aJCM"},
{"content":{"body":"If the returned promises settle in any order, we can add `cap` and `capOOO` methods to fix the settlement order, and rearrange the resolutions","format":"org.matrix.custom.html","formatted_body":"If the returned promises settle in any order, we can add <code>cap</code> and <code>capOOO</code> methods to fix the settlement order, and rearrange the resolutions","msgtype":"m.text"},"ts":1684424956687,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-To6uNBiDESasyeBbhRwQ7VDAZ5uOMAZX49jErcd4D0"},
{"content":{"body":"the queue doesn't seem to be advancing properly for me","msgtype":"m.text"},"ts":1684425093890,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8LrzW20UPny38aiPGsupClS2BQvvO3XydRwW8hYWWME"},
{"content":{"body":"refreshing fixed it 🤷‍♂️","msgtype":"m.text"},"ts":1684425196707,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$of9WJaA4Q6G1eHbum1SDw3Q0XlZ7c_jAEeFm3WDh570"},
{"content":{"body":"so -- just to clarify -- bufferAhead is the way to opt into concurrency?","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425315332,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$rJdSulwQjlZe-FMybQ64YqLEeZYDQF0E68Eve1v62sU"},
{"content":{"body":"a limited for, yes","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$rJdSulwQjlZe-FMybQ64YqLEeZYDQF0E68Eve1v62sU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425358630,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3FWReIUx69_TYcsb5VQN_eyo-MFHAgvN-Onc6CqrGfg"},
{"content":{"body":"the out-of-order bit is what we're talking about to enable it completely unrestricted","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$3FWReIUx69_TYcsb5VQN_eyo-MFHAgvN-Onc6CqrGfg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425379061,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$AwJ7TZYiFSlfEqURIPUnXeMPgqahccQW-4ykOe4HXv8"},
{"content":{"body":" * a limited form, yes","format":"org.matrix.custom.html","formatted_body":" * a limited form, yes","m.new_content":{"body":"a limited form, yes","format":"org.matrix.custom.html","formatted_body":"a limited form, yes","msgtype":"m.text"},"m.relates_to":{"event_id":"$3FWReIUx69_TYcsb5VQN_eyo-MFHAgvN-Onc6CqrGfg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684425389278,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$tpakqk2LOzm_1rGjOaRPmxS4DTCdY18kXBsCSSmOSMg"},
{"content":{"body":"you can also just call `next` as much as you want for unlimited concurrency manually","format":"org.matrix.custom.html","formatted_body":"you can also just call <code>next</code> as much as you want for unlimited concurrency manually","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$AwJ7TZYiFSlfEqURIPUnXeMPgqahccQW-4ykOe4HXv8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425444919,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KHI53bRYVqHgAl5tRLY555bZlv1DebvQ2-dl84qfjKU"},
{"content":{"body":"right","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$KHI53bRYVqHgAl5tRLY555bZlv1DebvQ2-dl84qfjKU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425450658,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$rUBipbBYmegKKruwosPfTXQ7mWjN2mwrpdorC1Wl4jo"},
{"content":{"body":"ok thank you!","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$rUBipbBYmegKKruwosPfTXQ7mWjN2mwrpdorC1Wl4jo"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425452621,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$Meo6jZHowFzLex5NLzM9MD5584VaOLtLIA8oA7P2r9k"},
{"content":{"body":"no problem","m.relates_to":{"event_id":"$NrZ-9Gz_nRhDMhIKIF7wzCXX1Rg_xxrSfQc1E8LCQ3Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$Meo6jZHowFzLex5NLzM9MD5584VaOLtLIA8oA7P2r9k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425459255,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$P1mj7CbzrLjfe7IfSGy7rHDBZimHidRS2T6PhbfCRIY"},
{"content":{"body":"async iterators in particular really don't feel like they need to be sequential to me","msgtype":"m.text"},"ts":1684425578746,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$VtwGCIDILixzukD7WMWYPraFURO9fRKsjqV0Pyi3VOc"},
{"content":{"body":"when people do async stuff, they know that the default state of things is out-of-order and that there needs to be explicit coordination to bring order back","msgtype":"m.text"},"ts":1684425606350,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$dgV-TyvR9UJRq3D3v3dffMovMX1DO7J1pGkA1MJ-Dw0"},
{"content":{"body":"idk Promise.all() keeps order","msgtype":"m.text"},"ts":1684425646189,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yFbxElC1Yoz_MEOs1mZeQZ8GYcWJCu7oD_pZrr71zMs"},
{"content":{"body":"I think it's a bit of a refactoring hazard if I have to change something to be async because I add a new call","msgtype":"m.text"},"ts":1684425648368,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G9BK2ZDSa4T1JgAoE2MMCfCC147I_SLnfSTHlLaoYAw"},
{"content":{"body":"@Michael That’s not really true though.","msgtype":"m.text"},"ts":1684425653619,"senderName":"pipobscure","senderId":"@pipobscure:matrix.org","id":"$FS4SWg5jNzZBIo6UUF61qK7Gx0TFo469F19ATSjl4dU"},
{"content":{"body":"yeah it's doing explicit coordination, that's its job","m.relates_to":{"event_id":"$yFbxElC1Yoz_MEOs1mZeQZ8GYcWJCu7oD_pZrr71zMs","is_falling_back":true,"m.in_reply_to":{"event_id":"$yFbxElC1Yoz_MEOs1mZeQZ8GYcWJCu7oD_pZrr71zMs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684425766958,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$QXfk0IXgLWTosIEWsvrxCRuI_LOS89iMkEn-JUuZmOE"},
{"content":{"body":" * yeah it's doing coordination, that's its job","format":"org.matrix.custom.html","formatted_body":" * yeah it's doing coordination, that's its job","m.new_content":{"body":"yeah it's doing coordination, that's its job","format":"org.matrix.custom.html","formatted_body":"yeah it's doing coordination, that's its job","msgtype":"m.text"},"m.relates_to":{"event_id":"$QXfk0IXgLWTosIEWsvrxCRuI_LOS89iMkEn-JUuZmOE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684425777665,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xe-ShtdjN23LoTeGUkjC5n7U33_WirThWvzFvYA8VQE"},
{"content":{"body":"the \"values being lost\" thing is a core implication of anything concurrent _or_ parallel i think, don't think there's another choice","format":"org.matrix.custom.html","formatted_body":"the &quot;values being lost&quot; thing is a core implication of anything concurrent <em>or</em> parallel i think, don't think there's another choice","msgtype":"m.text"},"ts":1684425818973,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OiUBOvgSmoOP0Sy1f-Nor2qAR4hdfIHVL-C1_gAoh5w"},
{"content":{"body":"like, you try to improve throughput or whatever by doing a larger-than-necessary amount of work at a time, so if you want to impose some kind of serialization of results after the fact you'll have to discard stuff","msgtype":"m.text"},"ts":1684425973477,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3LV_o5Q_cdXuRC6ml9zm_pDncjV4MzKcCeOTs_5JMI8"},
{"content":{"body":"yeah but we have effects and exceptions and you can't just roll those back","msgtype":"m.text"},"ts":1684426085011,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$xR25tse91WdY7RvSEoJspYdN10jJ2ixwU1v_0pJfFhQ"},
{"content":{"body":"Happy to join an async-iterator call","msgtype":"m.text"},"ts":1684426283802,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cK2nNVRbaxUlgnGS5ApRp_ZreZCsFmP2hzQlpFcD_vw"},
{"content":{"body":"same","msgtype":"m.text"},"ts":1684426306660,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mPvvF0oQ4GCnSGygr4dcYQUoo5-z_xoS2-wxnJSEVNU"},
{"content":{"body":"I’m willing to be part of the call as well. ","format":"org.matrix.custom.html","formatted_body":"I’m willing to be part of the call as well.","msgtype":"m.text"},"ts":1684426320066,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$Pgm5JWJI59KzHYmD0LAL1cWf9pWIf1gLQJR2lXUR5BU"},
{"content":{"body":"> <@shuyuguo:matrix.org> like, you try to improve throughput or whatever by doing a larger-than-necessary amount of work at a time, so if you want to impose some kind of serialization of results after the fact you'll have to discard stuff\n\nonly if you are going to stop consuming results conditionally - if you want to consume everything you don't have to lose anything, e.g. `let results = Promise.allSettled(array.map(asyncMapper))` doesn't lose anything","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$3LV_o5Q_cdXuRC6ml9zm_pDncjV4MzKcCeOTs_5JMI8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like, you try to improve throughput or whatever by doing a larger-than-necessary amount of work at a time, so if you want to impose some kind of serialization of results after the fact you&#39;ll have to discard stuff</blockquote></mx-reply>only if you are going to stop consuming results conditionally - if you want to consume everything you don't have to lose anything, e.g. <code>let results = Promise.allSettled(array.map(asyncMapper))</code> doesn't lose anything","m.relates_to":{"m.in_reply_to":{"event_id":"$3LV_o5Q_cdXuRC6ml9zm_pDncjV4MzKcCeOTs_5JMI8"}},"msgtype":"m.text"},"ts":1684426436750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H0G06EE8BLhFGpxpa7TU9P3hUKOncfyTTGRFnuRtpqg"},
{"content":{"body":"bakkot: yes, right, but i thought your point was that `filter` and `reduce` are fundamentally conditional consumption","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: yes, right, but i thought your point was that <code>filter</code> and <code>reduce</code> are fundamentally conditional consumption","msgtype":"m.text"},"ts":1684426485853,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QCjlpBq6mhPflUGCZdjQFK65UG5WOeZeEf3I_mK9-uU"},
{"content":{"body":"which i agree with, we shouldn't just do the embarrassingly parallel things","msgtype":"m.text"},"ts":1684426520006,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VPHVBjW83TamgHyLuG1-OyGKzz5ZIYBd6BOJ32v-Jsw"},
{"content":{"body":"iterator helpers are fundamentally conditional yeah","msgtype":"m.text"},"ts":1684426540188,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yn-4lz-MS6C5hYSEPqA8xz7c1kItUSGQiM6eFnGCQAU"},
{"content":{"body":"but we could decide that this problem is bad enough that iterator helpers should not be the place for concurrency, and just make these work like generators","msgtype":"m.text"},"ts":1684426556377,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hqBEWpvWLe6jRdL8m3R0dO1F6pwTkurwTUEc4-wjvVs"},
{"content":{"body":"and say you have to do something else for concurrency so that you don't lose values","msgtype":"m.text"},"ts":1684426570264,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$W2o1HXiMPAm0vxhsdityZLbUmjpl0isWDdQ4yvzXsfQ"},
{"content":{"body":"right, fair, and that's not my position","msgtype":"m.text"},"ts":1684426575397,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K7y6aSeANYQC9vRL8pAuhXl5GtkVs3viqHdoB0glDvs"},
{"content":{"body":"not my preferred option but it is an option","msgtype":"m.text"},"ts":1684426576187,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wZoiQYEwt95TuY8AImjy47vBZoTTNW2k__FtO2yTJgg"},
{"content":{"body":"because i think losing-values is just a core part of the bargain for general concurrency","msgtype":"m.text"},"ts":1684426592621,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oUbNboWnTDE9bS-AtpnWw7v6IsOQgX7mheSdtYq1ccY"},
{"content":{"body":"(in an exception case)","msgtype":"m.text"},"ts":1684426612461,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$-L3FdVugvqnZGbSA3G9Wc1a00N6dAcg4uF13v6dAVwo"},
{"content":{"body":"to elaborate on why `filter` is weird:\n\nlet's say you do\n```\nlet it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n```\n\nand let's sa your predicate returns `true` for the second call instantly, but takes a minute to finish for the first call.\n\nif you are trying to preserve order at all, you can't resolve _either_ promise until the first call settles, because if the first call settles with `true` then the first promise needs to get `{ done: false, value: 1 }` and if it settles with `false` then the first promise needs to get `{ done: false, value: 2 }`.\n\nthe only way to get things earlier than that is to give up on order _entirely_, so that in the case your predicate returns `false` for `1` then the first line prints `{ done: true }` and the second prints `{ done: false, value: 2 }`.","format":"org.matrix.custom.html","formatted_body":"<p>to elaborate on why <code>filter</code> is weird:</p>\n<p>let's say you do</p>\n<pre><code>let it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n</code></pre>\n<p>and let's sa your predicate returns <code>true</code> for the second call instantly, but takes a minute to finish for the first call.</p>\n<p>if you are trying to preserve order at all, you can't resolve <em>either</em> promise until the first call settles, because if the first call settles with <code>true</code> then the first promise needs to get <code>{ done: false, value: 1 }</code> and if it settles with <code>false</code> then the first promise needs to get <code>{ done: false, value: 2 }</code>.</p>\n<p>the only way to get things earlier than that is to give up on order <em>entirely</em>, so that in the case your predicate returns <code>false</code> for <code>1</code> then the first line prints <code>{ done: true }</code> and the second prints <code>{ done: false, value: 2 }</code>.</p>\n","msgtype":"m.text"},"ts":1684427417739,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qlyUlLCaOtXKYZ3sh6M-dY8JSgOvKBVW4btMLBNxzMo"},
{"content":{"body":"yes, good example, the done-ness signal further reinforces my mental model of iterators being inherently ordered things","msgtype":"m.text"},"ts":1684427483146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FDWQRtiDo1rO3Bjbr9bDaQfbDhJlGOHsVDy2BCjo5ts"},
{"content":{"body":" * to elaborate on why `filter` is weird:\n\nlet's say you do\n\n```\nlet it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n```\n\nand let's say your predicate returns `true` for the second call instantly, but takes a minute to finish for the first call.\n\nif you are trying to preserve order at all, you can't resolve _either_ promise until the first call settles, because if the first call settles with `true` then the first promise needs to get `{ done: false, value: 1 }` and if it settles with `false` then the first promise needs to get `{ done: false, value: 2 }`.\n\nthe only way to get things earlier than that is to give up on order _entirely_, so that in the case your predicate returns `false` for `1` then the first line prints `{ done: true }` and the second prints `{ done: false, value: 2 }`.","format":"org.matrix.custom.html","formatted_body":" * <p>to elaborate on why <code>filter</code> is weird:</p>\n<p>let's say you do</p>\n<pre><code>let it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n</code></pre>\n<p>and let's say your predicate returns <code>true</code> for the second call instantly, but takes a minute to finish for the first call.</p>\n<p>if you are trying to preserve order at all, you can't resolve <em>either</em> promise until the first call settles, because if the first call settles with <code>true</code> then the first promise needs to get <code>{ done: false, value: 1 }</code> and if it settles with <code>false</code> then the first promise needs to get <code>{ done: false, value: 2 }</code>.</p>\n<p>the only way to get things earlier than that is to give up on order <em>entirely</em>, so that in the case your predicate returns <code>false</code> for <code>1</code> then the first line prints <code>{ done: true }</code> and the second prints <code>{ done: false, value: 2 }</code>.</p>\n","m.new_content":{"body":"to elaborate on why `filter` is weird:\n\nlet's say you do\n\n```\nlet it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n```\n\nand let's say your predicate returns `true` for the second call instantly, but takes a minute to finish for the first call.\n\nif you are trying to preserve order at all, you can't resolve _either_ promise until the first call settles, because if the first call settles with `true` then the first promise needs to get `{ done: false, value: 1 }` and if it settles with `false` then the first promise needs to get `{ done: false, value: 2 }`.\n\nthe only way to get things earlier than that is to give up on order _entirely_, so that in the case your predicate returns `false` for `1` then the first line prints `{ done: true }` and the second prints `{ done: false, value: 2 }`.","format":"org.matrix.custom.html","formatted_body":"<p>to elaborate on why <code>filter</code> is weird:</p>\n<p>let's say you do</p>\n<pre><code>let it = [1, 2].toAsync().filter(pred);\nit.next().then(console.log);\nit.next().then(console.log);\n</code></pre>\n<p>and let's say your predicate returns <code>true</code> for the second call instantly, but takes a minute to finish for the first call.</p>\n<p>if you are trying to preserve order at all, you can't resolve <em>either</em> promise until the first call settles, because if the first call settles with <code>true</code> then the first promise needs to get <code>{ done: false, value: 1 }</code> and if it settles with <code>false</code> then the first promise needs to get <code>{ done: false, value: 2 }</code>.</p>\n<p>the only way to get things earlier than that is to give up on order <em>entirely</em>, so that in the case your predicate returns <code>false</code> for <code>1</code> then the first line prints <code>{ done: true }</code> and the second prints <code>{ done: false, value: 2 }</code>.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$qlyUlLCaOtXKYZ3sh6M-dY8JSgOvKBVW4btMLBNxzMo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684427501763,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wChao3nwaTzwIM689BE91S_osMfKQDr4lJaOz5Fl_oA"},
{"content":{"body":"It seems `done` should be also a promise 😅","format":"org.matrix.custom.html","formatted_body":"It seems <code>done</code> should be also a promise 😅","msgtype":"m.text"},"ts":1684427526461,"senderName":"HE Shi-Jun","senderId":"@haxjs:matrix.org","id":"$CkoHyQwQzpmhtzoOxRWO0MYArqnfVKV98h2CMkY1P7Q"},
{"content":{"body":"shu: I still don't think so. It doesn't mean that any iterator derived from this one will be done. It's just used as a signal to the consumer to not pull anymore.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I still don't think so. It doesn't mean that any iterator derived from this one will be done. It's just used as a signal to the consumer to not pull anymore.","msgtype":"m.text"},"ts":1684427623059,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$8WAv8qYIiqvy0DgigpEFw5mSiJnqNYBrDPXMMNAWcOY"},
{"content":{"body":"that strikes me as not the prevalent intuition","msgtype":"m.text"},"ts":1684427678948,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yquqsx9q4yj2xIGMFEgqYP7z7DsA5ntq_PQdPRfley0"},
{"content":{"body":"and will be confusing for the majority programmer if we adopted it","msgtype":"m.text"},"ts":1684427701222,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XBCGNxsae1aB-yK8teOsmZsaJY1vnD07AXy7p28w_lI"},
{"content":{"body":"RxJS can make observables from async iterators, and also is async iterable","msgtype":"m.text"},"ts":1684427777559,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6TC0j0rnYfQoLL9eWUVybCVnmWp7yL9LIrnIO1BnLMc"},
{"content":{"body":"and has `map` etc helpers which are obviously out of order","format":"org.matrix.custom.html","formatted_body":"and has <code>map</code> etc helpers which are obviously out of order","msgtype":"m.text"},"ts":1684427792453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ecfR-gxfjIIvU9wd1Ua4ET4HI50EknDAFRB0A6ANTLw"},
{"content":{"body":" * and has `map` etc helpers which are out of order","format":"org.matrix.custom.html","formatted_body":" * and has <code>map</code> etc helpers which are out of order","m.new_content":{"body":"and has `map` etc helpers which are out of order","format":"org.matrix.custom.html","formatted_body":"and has <code>map</code> etc helpers which are out of order","msgtype":"m.text"},"m.relates_to":{"event_id":"$ecfR-gxfjIIvU9wd1Ua4ET4HI50EknDAFRB0A6ANTLw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684427802399,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XTHZBOcJw33A5Uc_09ipVihAaUo4imhdMnFNiLdxQ80"},
{"content":{"body":"I wonder how they handle this case","msgtype":"m.text"},"ts":1684427808051,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oHmBlmj8mTmTxCZTQgQX28RENCcbe12qD0WNOWEqbFw"},
{"content":{"body":"anyway my understanding of async iterator helpers right now is to provide \"data concurrent\" algorithms on generic collections, via the iterator interface","msgtype":"m.text"},"ts":1684427822133,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uMraAcmxKbd-8p_0r_TPJeBCje1XLC_zUjNSl44zAXM"},
{"content":{"body":"but in general, data parallel algorithms require chunking and need to know the collection size ahead of time to chunk","msgtype":"m.text"},"ts":1684427849558,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$obU00d_nUNofBt_Ii6ll_G9BpqR3LjXgjiMwsp4BYJ4"},
{"content":{"body":"I'm kind of inclined to say that if you want to give up on preserving order you should switch to a different thing which is not inherently ordered, i.e. observables","msgtype":"m.text"},"ts":1684427855552,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_hg76qS16JWRwPthwg2TkgZA0tzuTOPFFcWS0a7uVfQ"},
{"content":{"body":"I think having two sets of methods with an opt-in that moves you from in-order to out-of-order is a fair compromise here","msgtype":"m.text"},"ts":1684427865313,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$bkJX9kW8GnrbCSpan1Nn2YQJtd30rxGXLXXB_mYezpo"},
{"content":{"body":"thus my suggestion for bufferAheadOOO(N) method to recover the collection size","msgtype":"m.text"},"ts":1684427875682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w2CZc0LV5Sn5-Xb0WQzszBc9OQ0bYCnWwvlDGO3rdPU"},
{"content":{"body":"and lets you do full OOO concurrency","msgtype":"m.text"},"ts":1684427885583,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aodLkSTqL1ySCI3DhQwZCDXik6vhgNXGal-uw43ozqo"},
{"content":{"body":"yeah I think we're in agreement","msgtype":"m.text"},"ts":1684427892341,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ar22a9Ulx4vFXPhVMjga-Lq4x9ntY59woTUAqQt2uyo"},
{"content":{"body":"If we're going to have to sets of methods I would be inclined to just have differently-named methods on the same prototype","msgtype":"m.text"},"ts":1684427924511,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qZpBB2I1JIk5nyVrlL9QwoDcIuaaQJcxIfWIhL_B1cI"},
{"content":{"body":"now question: should the OoO prototype have a similar-named method that's a no-op?","msgtype":"m.text"},"ts":1684427931323,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$EifzPw-plUx-0y8n8y-3tppIQJwxSAfOKSbCXres2rQ"},
{"content":{"body":"I don't know how the proposed `bufferAheadOOO` would work","format":"org.matrix.custom.html","formatted_body":"I don't know how the proposed <code>bufferAheadOOO</code> would work","msgtype":"m.text"},"ts":1684427947257,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cbi0oXmxzIhf7yayW52QkynvLh5KYVYoxBL6TnLcTzs"},
{"content":{"body":"bakkot: no, switching is better, since you don't have to add OOO to 10 method calls in a chain, and you don't accidentally in-order after some OOO method","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: no, switching is better, since you don't have to add OOO to 10 method calls in a chain, and you don't accidentally in-order after some OOO method","msgtype":"m.text"},"ts":1684427982303,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$HWX2Qvzieh7j6XJoiQC4M557Mp6fivrg6fvZHksxxjc"},
{"content":{"body":"bakkot: we should pair on a prototype impl to see if it would work","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: we should pair on a prototype impl to see if it would work","msgtype":"m.text"},"ts":1684428018759,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$KzXZeZ4GhOiL-UHvEpslY8rvD84ofNxz8OFQGSRApUw"},
{"content":{"body":"yeah but if you're reading it you have to notice the call at the the start of the chain to see that this `.filter` is unlike other `.filter`s","format":"org.matrix.custom.html","formatted_body":"yeah but if you're reading it you have to notice the call at the the start of the chain to see that this <code>.filter</code> is unlike other <code>.filter</code>s","msgtype":"m.text"},"ts":1684428024551,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pqWSdYqUb8xFvI9CRWK67Pn1IubEaxmAkl7N6r5zQHk"},
{"content":{"body":"and if it gets passed around first that might be lost entirely","msgtype":"m.text"},"ts":1684428031143,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$gFFDyFXMUpOcBN1ylJZufPk1I38fEGqHUHTRggS58ag"},
{"content":{"body":"seems bad","msgtype":"m.text"},"ts":1684428032163,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-XrtY_osLyFRkXZRmxcftjYCRhdBEEo6ohj5qiOU9m8"},
{"content":{"body":"that's the case for all data structures?","msgtype":"m.text"},"ts":1684428055394,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$mm0-LLNbiaHWLgSrG2I5PXDOwxN87fnHU3tM4UF89fI"},
{"content":{"body":"virtual dispatch baby","msgtype":"m.text"},"ts":1684428063932,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$pEtOyn1omSgwAodzY-KSmr6eIk6SuZ2AOFS5BOJTbX0"},
{"content":{"body":"\"async iterator\" and \"async iterator but the methods are unordered\" doesn't seem like really a different data structure","msgtype":"m.text"},"ts":1684428085396,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b71hu_4NrKPHAv5yBoOaLbB2vmCpNESj33Q5q4Vi_IE"},
{"content":{"body":"hm. so. also, how do you consume one of these?","msgtype":"m.text"},"ts":1684428095688,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$5fY9xE-wLjD1_eVI08HqumkIfNYfxCuX_C5YzD_D5Xw"},
{"content":{"body":"like in my `filter` example","format":"org.matrix.custom.html","formatted_body":"like in my <code>filter</code> example","msgtype":"m.text"},"ts":1684428099473,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xbOnhJ0bKMWoR74QZjB0FqGRDs7RrmDEUBAlGHb1Yd8"},
{"content":{"body":"what's the thing you actually do with it","msgtype":"m.text"},"ts":1684428102866,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-_HZdIlDWY6yknEsOppSR4gkiNyna7SlKiGNVE_2XuM"},
{"content":{"body":"it's a different monad","m.relates_to":{"event_id":"$b71hu_4NrKPHAv5yBoOaLbB2vmCpNESj33Q5q4Vi_IE","is_falling_back":true,"m.in_reply_to":{"event_id":"$b71hu_4NrKPHAv5yBoOaLbB2vmCpNESj33Q5q4Vi_IE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684428110824,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$ae1xBcBrk8dMG0We_xeAMJ-gkGMM4wjBgx7b-IQ27ic"},
{"content":{"body":"you can't for-await over it because for-await stops at the first `done`","format":"org.matrix.custom.html","formatted_body":"you can't for-await over it because for-await stops at the first <code>done</code>","msgtype":"m.text"},"ts":1684428113207,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM"},
{"content":{"body":"ditto `forEach` etc","format":"org.matrix.custom.html","formatted_body":"ditto <code>forEach</code> etc","msgtype":"m.text"},"ts":1684428125919,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uscmLcf_WV5IpL87Utpd7JjznJaOCtLKL2mu54RWsc8"},
{"content":{"body":" * hm. so. also, how do you consume one of these out-of-order things?","m.new_content":{"body":"hm. so. also, how do you consume one of these out-of-order things?","msgtype":"m.text"},"m.relates_to":{"event_id":"$5fY9xE-wLjD1_eVI08HqumkIfNYfxCuX_C5YzD_D5Xw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684428141253,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gcm3XzWFdzudVLB3rQPDgavMS83gHiwWD3U-7YYDbAQ"},
{"content":{"body":"Confidence in the ability to use the alternative license affects Ecma's ability to attract work and expand scope - even though we know informally it's highly likely to be approved. It's a matter for Ecma's organizational development.  I guess this is best discussed in the GA or ExeCom since it's not a TC39-specific thing.","msgtype":"m.text"},"ts":1684428151506,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$UJ4ZKWak1jk5sFQSUVM5M2RQKK3x0Q4QsKhd7M8znTw"},
{"content":{"body":"any explanation which requires the use of the word \"monad\" is inherently not suitable for actual users","m.relates_to":{"event_id":"$b71hu_4NrKPHAv5yBoOaLbB2vmCpNESj33Q5q4Vi_IE","is_falling_back":true,"m.in_reply_to":{"event_id":"$ae1xBcBrk8dMG0We_xeAMJ-gkGMM4wjBgx7b-IQ27ic"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684428191213,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$auPlyRLw2rRama8yvinPytvGsnliOlazR07U3ul5SVU"},
{"content":{"body":"> <@bakkot:matrix.org> and has `map` etc helpers which are obviously out of order\n\nFor rxjs flatMap is out of order, concatMap preserves order ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24ecfR-gxfjIIvU9wd1Ua4ET4HI50EknDAFRB0A6ANTLw\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and has <code>map</code> etc helpers which are obviously out of order</blockquote></mx-reply>For rxjs flatMap is out of order, concatMap preserves order","m.relates_to":{"m.in_reply_to":{"event_id":"$ecfR-gxfjIIvU9wd1Ua4ET4HI50EknDAFRB0A6ANTLw"}},"msgtype":"m.text"},"ts":1684428197401,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UQN3ZcQdzVE0L9nwEJvVkrvf228HYPGP6G0guLrXZiE"},
{"content":{"body":"they renamed flatMap to mergeMap IIRC","msgtype":"m.text"},"ts":1684428259901,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$0-RmRVTXrcnJ5cQaRo8jrFRZMgl16yMce0GDJMQyR-w"},
{"content":{"body":"to make that clearer","msgtype":"m.text"},"ts":1684428263709,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jo5tpu7faOCNY_jayqjK3xu93xGu47bPPJDUsXzygi0"},
{"content":{"body":"there is also switchMap","msgtype":"m.text"},"ts":1684428282080,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4PyjkJSDerOReJGryYMVb0tfpEWFwskz8yZooNatoVo"},
{"content":{"body":"Yeah which was flatMapLatest","msgtype":"m.text"},"ts":1684428320450,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$SkIiL7gkmHAVpyn7TnpgYm0qbo7K2xWidDxOfbFgcXw"},
{"content":{"body":"but yes there are several different notions of \"out of order\" for flatMap","msgtype":"m.text"},"ts":1684428321628,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Y5I_ZHzatBNkkcH511GXJCn0SdxRMUfQEwo2gBrllUQ"},
{"content":{"body":"chairs: we need to revisit decorator metadata as well","msgtype":"m.text"},"ts":1684428474662,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7aqh3IWr_GGpV-hhdoE6d5sPorHS4a-74sxaxsHeU9c"},
{"content":{"body":"sorry I didn't notice it was not on the agenda","msgtype":"m.text"},"ts":1684428481972,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AI4RRHLgTRMxOlKyMfiMYOYnl-q6FxP0PZhBtGZZghg"},
{"content":{"body":" * sorry I didn't notice it was not on the draft schedule","m.new_content":{"body":"sorry I didn't notice it was not on the draft schedule","msgtype":"m.text"},"m.relates_to":{"event_id":"$AI4RRHLgTRMxOlKyMfiMYOYnl-q6FxP0PZhBtGZZghg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684428486706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$K3k97H09wMG4qN0-P9-jsUtcueo_WDzhJC5UtbQII1g"},
{"content":{"body":"should only take 5 minutes","msgtype":"m.text"},"ts":1684428490828,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lf4paeLW6QHtFF7R5aGGXkB_D5QYWx9q3vHCD-YEqDw"},
{"content":{"body":"https://github.com/tc39/proposal-array-grouping/pull/47/files","msgtype":"m.text"},"ts":1684428498142,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$QcNPG4YOoHJrXrlELGZx9TJQheVZbIsF-hnR78b-q2Q"},
{"content":{"body":"hold back `done: true` until all underlying iterator yields settle?","format":"org.matrix.custom.html","formatted_body":"hold back <code>done: true</code> until all underlying iterator yields settle?","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684428536402,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$5wvep0LVJ6A6CnfPagcqyQXJ78ZJpKhqcfAobEAcMKg"},
{"content":{"body":"again, we should try to actually implement this to tease out these details","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$5wvep0LVJ6A6CnfPagcqyQXJ78ZJpKhqcfAobEAcMKg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684428565475,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$3VzmKKP3X_i5rZUTTGCHk05kixKYRVD7juEdjkmWtHQ"},
{"content":{"body":"peetk: https://github.com/tc39/proposal-array-grouping/issues/51#issuecomment-1372786948","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a>: https://github.com/tc39/proposal-array-grouping/issues/51#issuecomment-1372786948","msgtype":"m.text"},"ts":1684428743977,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zq7OLiN71Y27sfhny9udebH92OJAaNeWjMcUXEfvjHY"},
{"content":{"body":"(sorry if that's the wrong handle to ping)","msgtype":"m.text"},"ts":1684428750338,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$R1dkmpKoguxlatsHyMWlg3jfBt0-v7xEVsvPoHDtVng"},
{"content":{"body":"(he means contiguous)","msgtype":"m.text"},"ts":1684428777968,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$av9q_4-8WqqKCGw_-LIhoamwfMxxD7xhXI2ZyiwxJvU"},
{"content":{"body":"you can't hold back anything without giving up on order entirely","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$3VzmKKP3X_i5rZUTTGCHk05kixKYRVD7juEdjkmWtHQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429095077,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_UTvEBic8IMDF3u8fRD5Gh6Az1UGHO-VnVPyI4xMyh0"},
{"content":{"body":" * you can't hold back anything without giving up on out-of-order entirely","format":"org.matrix.custom.html","formatted_body":" * you can't hold back anything without giving up on out-of-order entirely","m.new_content":{"body":"you can't hold back anything without giving up on out-of-order entirely","format":"org.matrix.custom.html","formatted_body":"you can't hold back anything without giving up on out-of-order entirely","msgtype":"m.text"},"m.relates_to":{"event_id":"$_UTvEBic8IMDF3u8fRD5Gh6Az1UGHO-VnVPyI4xMyh0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684429103532,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9GW0k9H72Yx-pU9genZgdwNW8Zqgu9jp1UQOjGzETYg"},
{"content":{"body":"well, maybe you can hold back `done` but not worry about exceptions?","format":"org.matrix.custom.html","formatted_body":"well, maybe you can hold back <code>done</code> but not worry about exceptions?","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$_UTvEBic8IMDF3u8fRD5Gh6Az1UGHO-VnVPyI4xMyh0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429128059,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1396Hwkz6LU5_Q8zBNc0fM7CdzJdeg5R7sdrgzP0SSQ"},
{"content":{"body":"anyway yes we can pair on it","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$1396Hwkz6LU5_Q8zBNc0fM7CdzJdeg5R7sdrgzP0SSQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429138510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oGrzFyMPVsnISle9vpqCYC7OTRSReb7a2RLRS0D3kcI"},
{"content":{"body":"wait the holding back doesn't fix anything in my example","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$oGrzFyMPVsnISle9vpqCYC7OTRSReb7a2RLRS0D3kcI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429209184,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$lUlM8PVI5uSPnyHo0_4yoRFGp31053UIFPxfBBQj18M"},
{"content":{"body":"with `filter`","format":"org.matrix.custom.html","formatted_body":"with <code>filter</code>","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$lUlM8PVI5uSPnyHo0_4yoRFGp31053UIFPxfBBQj18M"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429212692,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$smKPJm1wxYr3SXswbeMRXkkw1Icm5NLENcv2tPA-GZA"},
{"content":{"body":"giving up on order in that case means: that the first promise settles second, and it settles with `{ done: true }`. that means for-await is never going to see the second promise at all.","format":"org.matrix.custom.html","formatted_body":"giving up on order in that case means: that the first promise settles second, and it settles with <code>{ done: true }</code>. that means for-await is never going to see the second promise at all.","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$smKPJm1wxYr3SXswbeMRXkkw1Icm5NLENcv2tPA-GZA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429275260,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sgzzhE-hkqIcyVpKg7r2QRVWmXkrP6QwHnwJgaK8pZs"},
{"content":{"body":"i.e. in my example it's already settling last, so there's nothing to hold back","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$sgzzhE-hkqIcyVpKg7r2QRVWmXkrP6QwHnwJgaK8pZs"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429285696,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$v4b8sR9sHvGeugN4mt8tQGHzQyWOHpfJVcc87VePO94"},
{"content":{"body":"Who was the first Stage 3 reviewer?","msgtype":"m.text"},"ts":1684429433585,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cPUKpcOyjc-TyhNpirz5EhtNVrHo6nkIxu1Nw4gXhXo"},
{"content":{"body":"We had someone who MS will recruit from Safari, and someone else","msgtype":"m.text"},"ts":1684429440952,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l21yX8LrqLRcvf-9vqzUO_rsYCWPo7aGTD3enKXEQvc"},
{"content":{"body":"littledan: shu","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: shu","msgtype":"m.text"},"ts":1684429534817,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ot4ZE41bPGneYX6TYwY-HVowHDOh_eRk__Sgr-6qKsA"},
{"content":{"body":"yes?","msgtype":"m.text"},"ts":1684429550457,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3_cgQOESByYD2G5Vni7gmbe96UyUxeF2bRWhd8R_k0c"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1684429589345,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kSECUhqbnvM2aqKi72GzO7d70w_76GhtaKp_MeAIKNE"},
{"content":{"body":"yes, i'm the first reviewer","msgtype":"m.text"},"ts":1684429593154,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9f53YIFCaQ8JJzgZsTIAJC42e6OJHI_DQ2XlBw_odJ0"},
{"content":{"body":"Justin Ridgewell: you should open an issue on the repo just in case though","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: you should open an issue on the repo just in case though","msgtype":"m.text"},"ts":1684429796755,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EvJM06FUz-Vh7o2OilblQcQXNEP8HmlyUo9_dgWNsKg"},
{"content":{"body":"Will do","msgtype":"m.text"},"ts":1684429806569,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lmnIDlEhtauAlPXN3nMP6e16HHxjMoDpBw7tfdzw5nQ"},
{"content":{"body":"I read your comment like 10 times and I still don't get the issue. Did you mistype something?","m.relates_to":{"event_id":"$_x_8JbX_Pk7xMSS1HpSnKfsvH-Zm7I1-v_9FCxSHkgM","is_falling_back":true,"m.in_reply_to":{"event_id":"$v4b8sR9sHvGeugN4mt8tQGHzQyWOHpfJVcc87VePO94"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1684429861492,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$Ay5nspDkfhHxSnv2RT4MaAwZmttW3YBUnhSblwW193w"},
{"content":{"body":"a question for practitioners who want to use decorators natively in browsers: do you want metadata to ship at the same time as the rest of the decorators proposal?","msgtype":"m.text"},"ts":1684430036044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vG0RU4Cdspwa_VBU9tT_mABw_IgcmmVeIkLpXS-z-ds"},
{"content":{"body":"pzuraq: metadata is now stage 3","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@pzura:matrix.org\">pzuraq</a>: metadata is now stage 3","msgtype":"m.text"},"ts":1684430062001,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$A_dcBJdLEDsS1h7DpdJlOOp7vUB9fTxqfORKjy5gTDg"}
]