[
{"content":{"body":"am I missing something or does `parseInt` not say that it should handle lowercase hex digits in base 16? https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix","format":"org.matrix.custom.html","formatted_body":"am I missing something or does <code>parseInt</code> not say that it should handle lowercase hex digits in base 16? https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix","msgtype":"m.text"},"ts":1682570690395,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a0IEXgM8RTIrVigFCIkcxYGVE6IeW6M94PYwfoKnBKA"},
{"content":{"body":"oh, wait, I just can't read, never mind","msgtype":"m.text"},"ts":1682570932265,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$65x2X4fA5gZzHbXpniQs7deWQK-emYWxv7WUm2LZ1EA"},
{"content":{"body":"it's just a little unclear","msgtype":"m.text"},"ts":1682570936115,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$iefUNRirvp272kg2Aow6r_bMm7V6fEeQUYvZ95wBUyE"},
{"content":{"body":"Could the function be passed as an argument to the decorator itself? Would need to be a `function` style one so the decorator can call it with the instance as `this`","format":"org.matrix.custom.html","formatted_body":"Could the function be passed as an argument to the decorator itself? Would need to be a <code>function</code> style one so the decorator can call it with the instance as <code>this</code>","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682580252686,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZPldBy_ZEBe6quz6kyrbyXF0OOA7LMVs1mB_Nno6Klk"},
{"content":{"body":"An earlier version of the decorators proposal had this auto thunking behavior. It was removed for regularity with normal fields and especially static “shape” goals","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZPldBy_ZEBe6quz6kyrbyXF0OOA7LMVs1mB_Nno6Klk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682601252483,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LQUZrJvLm0rFHueswTeCTBUWeAN3fCev9TusRot6JhE"},
{"content":{"body":"The type problem is probably something TS will need to figure out. It should chain the transforms produced by decorators to infer the resulting type.","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$LQUZrJvLm0rFHueswTeCTBUWeAN3fCev9TusRot6JhE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682605458238,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$als4of20Bn8PNzbSNGqE8-MBaRu5g56xWh_Z5oyZnrM"},
{"content":{"body":"I meant in user land `@lazy(function() { return this.x * 10 })`","format":"org.matrix.custom.html","formatted_body":"I meant in user land <code>@lazy(function() { return this.x * 10 })</code>","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$als4of20Bn8PNzbSNGqE8-MBaRu5g56xWh_Z5oyZnrM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682609024436,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$jQHGj0fZ6l2WWeIbG4hCM77_aKhMJAbHBAqoBmVz8rU"},
{"content":{"body":"As a workaround for the TS types (personally right now I kinda like that decorators can't change the type of something, seems like a simpler starting point while we see what patterns emerge)","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$jQHGj0fZ6l2WWeIbG4hCM77_aKhMJAbHBAqoBmVz8rU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682609116000,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$m-BgIjHbtpIXHrKnMMCTmB3aLvJxjhV3WT05iWzHmLg"},
{"content":{"body":"I think what Jack is asking for makes sense: a nicer way to write that without functions. Some other languages have this in their notion of field decorators ","format":"org.matrix.custom.html","formatted_body":"I think what Jack is asking for makes sense: a nicer way to write that without functions. Some other languages have this in their notion of field decorators","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$m-BgIjHbtpIXHrKnMMCTmB3aLvJxjhV3WT05iWzHmLg"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614299332,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$q0rT4uOlKajvJC56CNsymqiEleFbmg2-XiGJlQKl8yY"},
{"content":{"body":"The goal of a static shape (the reason the original stage 2 decorators didn’t make the cut) means that we should always or never “thunkify” the rhs","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$q0rT4uOlKajvJC56CNsymqiEleFbmg2-XiGJlQKl8yY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614383339,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cuqMZu_YJjCpMyOEcPMY6fCaY1YMnHg1xME8SbPob4c"},
{"content":{"body":"Because a lot of use cases don’t require this, it seems to be unfortunately punishing their performance if the answer is “always”","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$cuqMZu_YJjCpMyOEcPMY6fCaY1YMnHg1xME8SbPob4c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614412518,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GV5aQ-LTJprTxg3-dLHriwGiabAq0zJpGXRot22UuG4"},
{"content":{"body":"Yehuda originally did include thunkifying, very much on purpose, both for this laziness feature and (more importantly) for computed reactive stuff","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$GV5aQ-LTJprTxg3-dLHriwGiabAq0zJpGXRot22UuG4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614454123,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PbfsjXAz7qehuBdOA4T4WhH6ciYidf_N7ki8fyxvQLM"},
{"content":{"body":"In the static shape model, we would have an additional keyword to trigger thunkifying, analogous to accessor","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$PbfsjXAz7qehuBdOA4T4WhH6ciYidf_N7ki8fyxvQLM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614478194,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QSKrKq8JhdLcy0-zqfR6HXytkKiJPhVScn_LcwsJVHQ"},
{"content":{"body":"But at that point, you might as well write ()=>","format":"org.matrix.custom.html","formatted_body":"But at that point, you might as well write ()=&gt;","m.relates_to":{"event_id":"$LsXbz8iGI6gh6zwNJuYoB2MFy9rDPalNvJi9lXJAdKI","is_falling_back":true,"m.in_reply_to":{"event_id":"$QSKrKq8JhdLcy0-zqfR6HXytkKiJPhVScn_LcwsJVHQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1682614492785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LgSLWeRat4GwwFhEW-H34iIaZIe9kI9ZcNSStM4k0dM"},
{"content":{"body":"we gotta get https://github.com/tc39/ecma262/pull/2600 merged","msgtype":"m.text"},"ts":1682637989840,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$laUFyb9lRHdCX5G196TXuMJ8p6uAuS33BXvj7UCKtvw"},
{"content":{"body":"it's waiting on tests, is all","msgtype":"m.text"},"ts":1682637992723,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$a0rwfZgKn87N_oIqKB8YU_LFFwLZQQCZnTPsbKu6hZQ"},
{"content":{"body":"if anyone is excited to write some tests that's a good option","msgtype":"m.text"},"ts":1682638000111,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kD6BnyGq8YTj-wvMR8MGtN7232G_kBdiL_-TS-6QCzY"}
]