[
{"content":{"body":"And I do think there's a world where `enum` could be extended to support ADTs, e.g.:\n```ts\nenum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And I do think there's a world where <code>enum</code> could be extended to support ADTs, e.g.:</p>\n<pre><code class=\"language-ts\">enum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096079107,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$icQsLLkhUOdHYW3wCH70wGVr6HJTPR-fjqYNCXLKMkc"},
{"content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1740096093260,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o"},
{"content":{"body":"* Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"* <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{},"m.new_content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740096161373,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$3D5QpfklUfNM94mfghDXu-O9Nt22X9_TvUXnPKkcX8A"},
{"content":{"body":"did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0vrnzqsOCPbnqX9Zl8d_pc0hA-r111287KbDERAdHXk"}},"msgtype":"m.text"},"ts":1740096280515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"},
{"content":{"body":"📣 come back to the main plenary room for a summary of breakouts","m.mentions":{},"msgtype":"m.text"},"ts":1740096488286,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$DxmXOAxlyrttu2INzdqqc1GFvgTtKR2y0TzqbnRAZ6M"},
{"content":{"body":"> <@bakkot:matrix.org> did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?\n\nAnother reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?</blockquote></mx-reply>Another reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","m.relates_to":{"m.in_reply_to":{"event_id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"}},"msgtype":"m.text"},"ts":1740096540955,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$pw2vfR6bSREr2bUZ3kEnWRJ31EOEjqRYSAfetC1EnxA"},
{"content":{"body":"I'll take notes of the summaries of the presentatoins in https://docs.google.com/document/d/17u9l-TRdEasF5cKHJnTmcBUNRqGQpsYxLNraV8sChfw/edit?tab=t.0","m.mentions":{},"msgtype":"m.text"},"ts":1740096620907,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$z4g4ZFGfcJ_tufvTadHX7biVdCmVjF5KcQoGKwgMu_8"},
{"content":{"body":"> <@anthonybullard:matrix.org> Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)\n\n+1, although current TS enums have some nice properties, they are ultimately inessential","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)</blockquote></mx-reply>+1, although current TS enums have some nice properties, they are ultimately inessential","m.relates_to":{"m.in_reply_to":{"event_id":"$0MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E"}},"msgtype":"m.text"},"ts":1740096797013,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$FYdHgtBn4qMJPclg0q5wadGZx8b0vjtFUM4hyrwdhGU"},
{"content":{"body":"I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding `enum`? The two things I've heard have been:\n- Don't use `enum` in TS because it's not in ES\n- `enum` defaulting to numbers and not something like `Symbol()`\n\n","format":"org.matrix.custom.html","formatted_body":"<p>I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding <code>enum</code>? The two things I've heard have been:</p>\n<ul>\n<li>Don't use <code>enum</code> in TS because it's not in ES</li>\n<li><code>enum</code> defaulting to numbers and not something like <code>Symbol()</code></li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096977072,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kq6L0IwUifHyu2XHnbo6TrZU9BljDGNQaUmoBgiL5P0"},
{"content":{"body":"(considering the alternative is manually defining a fixed set of forgeable strings, or unforgeable but inconvenient objects or symbols, and manually validating those)","m.mentions":{},"msgtype":"m.text"},"ts":1740097025948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sCpxc7SD0KyTyMMdy8-QZyi9jGTeTWZcjkmB_KbOdQk"},
{"content":{"body":"Maybe the merging too?","m.mentions":{},"msgtype":"m.text"},"ts":1740097026281,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WyTV1pCLH-jOhqGKIP-89GIueD5AngcfgpBDC1tRUzg"},
{"content":{"body":"Merging? as in `enum A { ... } enum A { ... }`?","format":"org.matrix.custom.html","formatted_body":"Merging? as in <code>enum A { ... } enum A { ... }</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740097042741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3U_Vjbn2HGc1Fv5xfRqwzLtKMGTjRBw5qXPKMkFTp0"},
{"content":{"body":"I'd be suprised if a 262 version had that","m.mentions":{},"msgtype":"m.text"},"ts":1740097065374,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$svS1bBpnHk1h0NU1Zs2HEG3gfm6TUxwof2etHhDZiGA"},
{"content":{"body":"I agree that's an anti-pattern and is something we probably wouldn't want to carry forward.","m.mentions":{},"msgtype":"m.text"},"ts":1740097104163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$crWcQG8b5Nwpdaub5QlkmU0U_HublMx7_4cp7tGLak0"},
{"content":{"body":"enums being numbers is also bad, in my opinion","m.mentions":{},"msgtype":"m.text"},"ts":1740097275585,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vLt4elVqOZ_BhNWXBHGm3JLpWCFortfVMiAYv7dfjRw"},
{"content":{"body":"it makes it too easy for adding new values to accidentally be a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1740097358574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$alRvHg1EEHqmz0e3leGOy2VHS4bq1s5vSD2HFX4Aeik"},
{"content":{"body":"Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:\n\n```ts\nenum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n << 0n,\n  Flag2 = 1n << 1n,\n}\n\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:</p>\n<pre><code class=\"language-ts\">enum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n &lt;&lt; 0n,\n  Flag2 = 1n &lt;&lt; 1n,\n}\n\n// etc.\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740097380495,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0kTQIAPqGr7X-5r29ZktkqnkC1n0Cg7hpObnT1a_m9g"},
{"content":{"body":"I would be ok with them being strings but at that point you might as well just use strings","m.mentions":{},"msgtype":"m.text"},"ts":1740097390501,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$823a98JLAi0KQdcWMfUk6bTFChzO47P3UiHFNFMbhKs"},
{"content":{"body":"it's still helpful to simplify validation and enumeration","m.mentions":{},"msgtype":"m.text"},"ts":1740097406363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EjB6YwQvQU9tSOpdBFAhISM0dfKwmN0FgWHie8sWuaY"},
{"content":{"body":"Numeric enums are the most common in C-like languages, and being numbers might be necessary for TS compat. ","m.mentions":{},"msgtype":"m.text"},"ts":1740097440820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9ScWdwpVO3PkGYDnKxgD_J-bMq9MyLUsrD98kL76klY"},
{"content":{"body":"yeah the experience from C-like languages is one of the main reasons I am opposed to them being numbers","m.mentions":{},"msgtype":"m.text"},"ts":1740097464510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7-saBXaVziB18-Imm2gQqBPLpi8vSyl02_ijpb2qtuc"},
{"content":{"body":"Due to how existing .d.ts files work, it would be almost impossible to change that default behavior for TS.","m.mentions":{},"msgtype":"m.text"},"ts":1740097490752,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XYNudyQhI2uXo8X5otvCQ63DeoTy-jFMiPd0G-on194"},
{"content":{"body":"understandable, and I wouldn't want to add enums which conflicted with TS, but the conclusion I'd draw is that we should not add enums to JS at all","m.mentions":{},"msgtype":"m.text"},"ts":1740097525010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tG846D-wldFO3FB_x5ztLCpOIM2rfr2zeRG6Fd2pHtI"},
{"content":{"body":"would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it","m.mentions":{},"msgtype":"m.text"},"ts":1740097625333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"},
{"content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"ts":1740097641021,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"},
{"content":{"body":"> <@ljharb:matrix.org> would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it\n\nIME no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it</blockquote></mx-reply>IME no","m.relates_to":{"m.in_reply_to":{"event_id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"}},"msgtype":"m.text"},"ts":1740097843480,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Juk7G_9Se5UZGuTzAv2cG9OQYcQg7TApuchEUylRdLs"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nNote that I can’t replicate the enum type unsafety example in this and have not encountered it previously","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br>Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Note that I can’t replicate the enum type unsafety example in this and have not encountered it previously","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740097921144,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Ko703uVdkIhX8CIdMqNuZtHiYM-Cet_1frDo3axxysE"},
{"content":{"body":"* Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","m.new_content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"m.relates_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740097993836,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$ixGXaLZwhQ4yQkAnLWMqoep8BPe1Z9stnOmko6feezE"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nSome of those reasons are no longer true. I'll read through and follow up after dinner. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br />Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Some of those reasons are no longer true. I'll read through and follow up after dinner.","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740098256398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N6R02LGF85Edtj9jQLpXrMm_OFvOwoXykJ3sx9ydoV4"},
{"content":{"body":"https://github.com/linusg/ecmascript-wiki","m.mentions":{},"msgtype":"m.text"},"ts":1740098486705,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$aL4WEMShOG1HKFGbtnx5EBg4GeLun5go4Vln3-A2zmk"},
{"content":{"body":"1. Enum's emit code - is irrelevant if `enum` exists natively\n2. Numeric types unsafe - this has since been fixed\n3. String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum\n\nThere is an issue with TS `enum` where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Enum's emit code - is irrelevant if <code>enum</code> exists natively</li>\n<li>Numeric types unsafe - this has since been fixed</li>\n<li>String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum</li>\n</ol>\n<p>There is an issue with TS <code>enum</code> where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.</p>\n","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740099423720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$horCq_IFEjZt3dtl3vWyW4xQO0HA1xT7mzYgSgen8Q8"},
{"content":{"body":"Also, I still think `Number` values make the most sense for the default, especially when working with `Atomics` (e.g., `.load()`, `.xor()`, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with `switch`. Numbers generally just work in most places.","format":"org.matrix.custom.html","formatted_body":"Also, I still think <code>Number</code> values make the most sense for the default, especially when working with <code>Atomics</code> (e.g., <code>.load()</code>, <code>.xor()</code>, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with <code>switch</code>. Numbers generally just work in most places.","m.mentions":{},"msgtype":"m.text"},"ts":1740099739357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1nLJaAF_ZamJTTh82MT7hHCvvxB4lhnbkX8l3MuN6pM"},
{"content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might *require* the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS.","m.mentions":{},"msgtype":"m.text"},"ts":1740099849028,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE"},
{"content":{"body":"* One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"* One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"m.new_content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740100158514,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KLFwkNx2b8Fj3t0nW-JprDjg2CpxaPylbrMDq3Ifsv4"},
{"content":{"body":"do we need the `of Type` ? If an MVP was that the values had to be explicitly assigned, no auto-increment.\n\n```\nconst MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A & enum.B\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>do we need the <code>of Type</code> ? If an MVP was that the values had to be explicitly assigned, no auto-increment.</p>\n<pre><code>const MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A &amp; enum.B\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740102323941,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cOxMb8wT7rHDQSQtCmQRivkxbfW_I4g9312BjHYYZA0"},
{"content":{"body":"as ADT wouldn't need them right?","m.mentions":{},"msgtype":"m.text"},"ts":1740102521612,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$o6_QJVmUSTfid7n6cXXqarVkYQL6J6KKprJo4I6SUBk"},
{"content":{"body":"The `of Type` syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of `enum E { A = Symbol(), B = Symbol(), ... }` would be unnecessarily unwieldy.","format":"org.matrix.custom.html","formatted_body":"The <code>of Type</code> syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of <code>enum E { A = Symbol(), B = Symbol(), ... }</code> would be unnecessarily unwieldy.","m.mentions":{},"msgtype":"m.text"},"ts":1740102528927,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-DVHX5yR8-9DMu4CdAcyT6XjMtg6nVkbcKt8Jk_NZ3k"},
{"content":{"body":"It also provides a convenient way to describe the defaulting behavior for both auto numbered enums as well as string and numeric enums: https://github.com/rbuckton/proposal-enum?tab=readme-ov-file#evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1740102590739,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KmxRaFqYfrtJrBPhRpysH6ff0rpN9H79k6f-4kpZ1vU"}
]