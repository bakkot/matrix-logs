[
{"content":{"body":"And I do think there's a world where `enum` could be extended to support ADTs, e.g.:\n```ts\nenum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And I do think there's a world where <code>enum</code> could be extended to support ADTs, e.g.:</p>\n<pre><code class=\"language-ts\">enum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096079107,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$icQsLLkhUOdHYW3wCH70wGVr6HJTPR-fjqYNCXLKMkc"},
{"content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1740096093260,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o"},
{"content":{"body":"* Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"* <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{},"m.new_content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740096161373,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$3D5QpfklUfNM94mfghDXu-O9Nt22X9_TvUXnPKkcX8A"},
{"content":{"body":"did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0vrnzqsOCPbnqX9Zl8d_pc0hA-r111287KbDERAdHXk"}},"msgtype":"m.text"},"ts":1740096280515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"},
{"content":{"body":"📣 come back to the main plenary room for a summary of breakouts","m.mentions":{},"msgtype":"m.text"},"ts":1740096488286,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$DxmXOAxlyrttu2INzdqqc1GFvgTtKR2y0TzqbnRAZ6M"},
{"content":{"body":"> <@bakkot:matrix.org> did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?\n\nAnother reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?</blockquote></mx-reply>Another reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","m.relates_to":{"m.in_reply_to":{"event_id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"}},"msgtype":"m.text"},"ts":1740096540955,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$pw2vfR6bSREr2bUZ3kEnWRJ31EOEjqRYSAfetC1EnxA"},
{"content":{"body":"I'll take notes of the summaries of the presentatoins in https://docs.google.com/document/d/17u9l-TRdEasF5cKHJnTmcBUNRqGQpsYxLNraV8sChfw/edit?tab=t.0","m.mentions":{},"msgtype":"m.text"},"ts":1740096620907,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$z4g4ZFGfcJ_tufvTadHX7biVdCmVjF5KcQoGKwgMu_8"},
{"content":{"body":"> <@anthonybullard:matrix.org> Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)\n\n+1, although current TS enums have some nice properties, they are ultimately inessential","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)</blockquote></mx-reply>+1, although current TS enums have some nice properties, they are ultimately inessential","m.relates_to":{"m.in_reply_to":{"event_id":"$0MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E"}},"msgtype":"m.text"},"ts":1740096797013,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$FYdHgtBn4qMJPclg0q5wadGZx8b0vjtFUM4hyrwdhGU"},
{"content":{"body":"I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding `enum`? The two things I've heard have been:\n- Don't use `enum` in TS because it's not in ES\n- `enum` defaulting to numbers and not something like `Symbol()`\n\n","format":"org.matrix.custom.html","formatted_body":"<p>I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding <code>enum</code>? The two things I've heard have been:</p>\n<ul>\n<li>Don't use <code>enum</code> in TS because it's not in ES</li>\n<li><code>enum</code> defaulting to numbers and not something like <code>Symbol()</code></li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096977072,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kq6L0IwUifHyu2XHnbo6TrZU9BljDGNQaUmoBgiL5P0"},
{"content":{"body":"(considering the alternative is manually defining a fixed set of forgeable strings, or unforgeable but inconvenient objects or symbols, and manually validating those)","m.mentions":{},"msgtype":"m.text"},"ts":1740097025948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sCpxc7SD0KyTyMMdy8-QZyi9jGTeTWZcjkmB_KbOdQk"},
{"content":{"body":"Maybe the merging too?","m.mentions":{},"msgtype":"m.text"},"ts":1740097026281,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WyTV1pCLH-jOhqGKIP-89GIueD5AngcfgpBDC1tRUzg"},
{"content":{"body":"Merging? as in `enum A { ... } enum A { ... }`?","format":"org.matrix.custom.html","formatted_body":"Merging? as in <code>enum A { ... } enum A { ... }</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740097042741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3U_Vjbn2HGc1Fv5xfRqwzLtKMGTjRBw5qXPKMkFTp0"},
{"content":{"body":"I'd be suprised if a 262 version had that","m.mentions":{},"msgtype":"m.text"},"ts":1740097065374,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$svS1bBpnHk1h0NU1Zs2HEG3gfm6TUxwof2etHhDZiGA"},
{"content":{"body":"I agree that's an anti-pattern and is something we probably wouldn't want to carry forward.","m.mentions":{},"msgtype":"m.text"},"ts":1740097104163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$crWcQG8b5Nwpdaub5QlkmU0U_HublMx7_4cp7tGLak0"},
{"content":{"body":"enums being numbers is also bad, in my opinion","m.mentions":{},"msgtype":"m.text"},"ts":1740097275585,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vLt4elVqOZ_BhNWXBHGm3JLpWCFortfVMiAYv7dfjRw"},
{"content":{"body":"it makes it too easy for adding new values to accidentally be a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1740097358574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$alRvHg1EEHqmz0e3leGOy2VHS4bq1s5vSD2HFX4Aeik"},
{"content":{"body":"Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:\n\n```ts\nenum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n << 0n,\n  Flag2 = 1n << 1n,\n}\n\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:</p>\n<pre><code class=\"language-ts\">enum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n &lt;&lt; 0n,\n  Flag2 = 1n &lt;&lt; 1n,\n}\n\n// etc.\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740097380495,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0kTQIAPqGr7X-5r29ZktkqnkC1n0Cg7hpObnT1a_m9g"},
{"content":{"body":"I would be ok with them being strings but at that point you might as well just use strings","m.mentions":{},"msgtype":"m.text"},"ts":1740097390501,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$823a98JLAi0KQdcWMfUk6bTFChzO47P3UiHFNFMbhKs"},
{"content":{"body":"it's still helpful to simplify validation and enumeration","m.mentions":{},"msgtype":"m.text"},"ts":1740097406363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EjB6YwQvQU9tSOpdBFAhISM0dfKwmN0FgWHie8sWuaY"},
{"content":{"body":"Numeric enums are the most common in C-like languages, and being numbers might be necessary for TS compat. ","m.mentions":{},"msgtype":"m.text"},"ts":1740097440820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9ScWdwpVO3PkGYDnKxgD_J-bMq9MyLUsrD98kL76klY"},
{"content":{"body":"yeah the experience from C-like languages is one of the main reasons I am opposed to them being numbers","m.mentions":{},"msgtype":"m.text"},"ts":1740097464510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7-saBXaVziB18-Imm2gQqBPLpi8vSyl02_ijpb2qtuc"},
{"content":{"body":"Due to how existing .d.ts files work, it would be almost impossible to change that default behavior for TS.","m.mentions":{},"msgtype":"m.text"},"ts":1740097490752,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XYNudyQhI2uXo8X5otvCQ63DeoTy-jFMiPd0G-on194"},
{"content":{"body":"understandable, and I wouldn't want to add enums which conflicted with TS, but the conclusion I'd draw is that we should not add enums to JS at all","m.mentions":{},"msgtype":"m.text"},"ts":1740097525010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tG846D-wldFO3FB_x5ztLCpOIM2rfr2zeRG6Fd2pHtI"},
{"content":{"body":"would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it","m.mentions":{},"msgtype":"m.text"},"ts":1740097625333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"},
{"content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"ts":1740097641021,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"},
{"content":{"body":"> <@ljharb:matrix.org> would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it\n\nIME no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it</blockquote></mx-reply>IME no","m.relates_to":{"m.in_reply_to":{"event_id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"}},"msgtype":"m.text"},"ts":1740097843480,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Juk7G_9Se5UZGuTzAv2cG9OQYcQg7TApuchEUylRdLs"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nNote that I can’t replicate the enum type unsafety example in this and have not encountered it previously","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br>Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Note that I can’t replicate the enum type unsafety example in this and have not encountered it previously","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740097921144,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Ko703uVdkIhX8CIdMqNuZtHiYM-Cet_1frDo3axxysE"},
{"content":{"body":"* Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","m.new_content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"m.relates_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740097993836,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$ixGXaLZwhQ4yQkAnLWMqoep8BPe1Z9stnOmko6feezE"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nSome of those reasons are no longer true. I'll read through and follow up after dinner. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br />Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Some of those reasons are no longer true. I'll read through and follow up after dinner.","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740098256398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N6R02LGF85Edtj9jQLpXrMm_OFvOwoXykJ3sx9ydoV4"},
{"content":{"body":"https://github.com/linusg/ecmascript-wiki","m.mentions":{},"msgtype":"m.text"},"ts":1740098486705,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$aL4WEMShOG1HKFGbtnx5EBg4GeLun5go4Vln3-A2zmk"},
{"content":{"body":"1. Enum's emit code - is irrelevant if `enum` exists natively\n2. Numeric types unsafe - this has since been fixed\n3. String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum\n\nThere is an issue with TS `enum` where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Enum's emit code - is irrelevant if <code>enum</code> exists natively</li>\n<li>Numeric types unsafe - this has since been fixed</li>\n<li>String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum</li>\n</ol>\n<p>There is an issue with TS <code>enum</code> where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.</p>\n","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740099423720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$horCq_IFEjZt3dtl3vWyW4xQO0HA1xT7mzYgSgen8Q8"},
{"content":{"body":"Also, I still think `Number` values make the most sense for the default, especially when working with `Atomics` (e.g., `.load()`, `.xor()`, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with `switch`. Numbers generally just work in most places.","format":"org.matrix.custom.html","formatted_body":"Also, I still think <code>Number</code> values make the most sense for the default, especially when working with <code>Atomics</code> (e.g., <code>.load()</code>, <code>.xor()</code>, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with <code>switch</code>. Numbers generally just work in most places.","m.mentions":{},"msgtype":"m.text"},"ts":1740099739357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1nLJaAF_ZamJTTh82MT7hHCvvxB4lhnbkX8l3MuN6pM"},
{"content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might *require* the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS.","m.mentions":{},"msgtype":"m.text"},"ts":1740099849028,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE"},
{"content":{"body":"* One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"* One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"m.new_content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740100158514,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KLFwkNx2b8Fj3t0nW-JprDjg2CpxaPylbrMDq3Ifsv4"},
{"content":{"body":"do we need the `of Type` ? If an MVP was that the values had to be explicitly assigned, no auto-increment.\n\n```\nconst MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A & enum.B\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>do we need the <code>of Type</code> ? If an MVP was that the values had to be explicitly assigned, no auto-increment.</p>\n<pre><code>const MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A &amp; enum.B\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740102323941,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cOxMb8wT7rHDQSQtCmQRivkxbfW_I4g9312BjHYYZA0"},
{"content":{"body":"as ADT wouldn't need them right?","m.mentions":{},"msgtype":"m.text"},"ts":1740102521612,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$o6_QJVmUSTfid7n6cXXqarVkYQL6J6KKprJo4I6SUBk"},
{"content":{"body":"The `of Type` syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of `enum E { A = Symbol(), B = Symbol(), ... }` would be unnecessarily unwieldy.","format":"org.matrix.custom.html","formatted_body":"The <code>of Type</code> syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of <code>enum E { A = Symbol(), B = Symbol(), ... }</code> would be unnecessarily unwieldy.","m.mentions":{},"msgtype":"m.text"},"ts":1740102528927,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-DVHX5yR8-9DMu4CdAcyT6XjMtg6nVkbcKt8Jk_NZ3k"},
{"content":{"body":"It also provides a convenient way to describe the defaulting behavior for both auto numbered enums as well as string and numeric enums: https://github.com/rbuckton/proposal-enum?tab=readme-ov-file#evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1740102590739,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KmxRaFqYfrtJrBPhRpysH6ff0rpN9H79k6f-4kpZ1vU"},
{"content":{"body":"if it's a connivence could it be a follow on?","m.mentions":{},"msgtype":"m.text"},"ts":1740102652196,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$L0Zb5Z3yGwGLao4wo1r_DYtYJOjMbAS9PVoE-QKQ4Y0"},
{"content":{"body":"IMO, the above syntax is a non-starter. `const x = enum` certainly doesn't help the \"erasable syntax\" case for TS, and `enum.A` would prevent future use of `enum` for any other metaproperty, which was a blocking issue for the the `class.x` syntax as well.","format":"org.matrix.custom.html","formatted_body":"IMO, the above syntax is a non-starter. <code>const x = enum</code> certainly doesn't help the \"erasable syntax\" case for TS, and <code>enum.A</code> would prevent future use of <code>enum</code> for any other metaproperty, which was a blocking issue for the the <code>class.x</code> syntax as well.","m.mentions":{},"msgtype":"m.text"},"ts":1740102704429,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s6eRgBuObnoRr9kG5t-_zqbCUAih_AjwfLP_GQ4EJnM"},
{"content":{"body":"I'd personally be ok with the bare `A` resolving the the member","format":"org.matrix.custom.html","formatted_body":"I'd personally be ok with the bare <code>A</code> resolving the the member","m.mentions":{},"msgtype":"m.text"},"ts":1740102751505,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MjmAZ9mrxNk-piug-BpqmyiE7M_bUklkRPq9GLAJ3bg"},
{"content":{"body":"* I'd personally be ok with the bare `A` resolving to the member","format":"org.matrix.custom.html","formatted_body":"* I'd personally be ok with the bare <code>A</code> resolving to the member","m.mentions":{},"m.new_content":{"body":"I'd personally be ok with the bare `A` resolving to the member","format":"org.matrix.custom.html","formatted_body":"I'd personally be ok with the bare <code>A</code> resolving to the member","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MjmAZ9mrxNk-piug-BpqmyiE7M_bUklkRPq9GLAJ3bg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740102758653,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$qS25xAu2gj2Z33V0fqxEVL0YJJsJPt5wiSE3oh1pTG0"},
{"content":{"body":"I would not, unfotunately.","m.mentions":{},"msgtype":"m.text"},"ts":1740102761425,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fT7xl0Vd2aTWF-uIiui21Ybi8AvD9NmfTKlpV9m3yvI"},
{"content":{"body":"how comes? you're early example had it bare","m.mentions":{},"msgtype":"m.text"},"ts":1740102789237,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LNaGfdzupNCgmwR7lodKNtb6kLSeY3_6kfEcYI14PYQ"},
{"content":{"body":"`enum.A` would have the exact same issue as `class.A`, and I've come around to agreeing with that position.","format":"org.matrix.custom.html","formatted_body":"<code>enum.A</code> would have the exact same issue as <code>class.A</code>, and I've come around to agreeing with that position.","m.mentions":{},"msgtype":"m.text"},"ts":1740102790248,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6Hpupn-cdQmMbBjw4qJkazdbEoD-AULL8Z7G4U-81Y"},
{"content":{"body":"* how comes? your early example had it bare","m.mentions":{},"m.new_content":{"body":"how comes? your early example had it bare","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LNaGfdzupNCgmwR7lodKNtb6kLSeY3_6kfEcYI14PYQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740102794264,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$s3AOB-PzCG5CHZWV1j65qnNAW57KIioTkOlKMVyx0kU"},
{"content":{"body":"One of the motivations for an `enum` proposal would be to reduce the runtime syntax friction between TS and ES. Proposing a wholly different syntax does not address that concern and would make adoption very difficult.","format":"org.matrix.custom.html","formatted_body":"One of the motivations for an <code>enum</code> proposal would be to reduce the runtime syntax friction between TS and ES. Proposing a wholly different syntax does not address that concern and would make adoption very difficult.","m.mentions":{},"msgtype":"m.text"},"ts":1740102843610,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AlaaDOucaPT1JylRclpirO6iEhvozV7AnW7BxGGa-2M"},
{"content":{"body":"makes sense. but we potentially need the syntax to be at least slightly different  if the semantics are not identical?","m.mentions":{},"msgtype":"m.text"},"ts":1740103032057,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cBpoNmxLHum2NuDdMumzINbNkTy4YKghX87QHhBh7C8"},
{"content":{"body":"Also, the mechanism for explicit autonumbering as part of emit ends up not being truly \"eraseable\" as it requires the introduction of temporaries to handle initializers, i.e.:\n\n```ts\nimport { x } from \"./other.js\";\nenum E {\n  A = x,\n  B,\n  C\n}\n```\nThis is also an example of the problematic type-directed emit in TS today that I hope to fix in the future. I cannot statically know what the value of `x` is without type checking, and thus could not reliably emit the auto-incremented values for B and C without additional overhead, i.e.:\n\n```js\nvar _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Also, the mechanism for explicit autonumbering as part of emit ends up not being truly \"eraseable\" as it requires the introduction of temporaries to handle initializers, i.e.:</p>\n<pre><code class=\"language-ts\">import { x } from \"./other.js\";\nenum E {\n  A = x,\n  B,\n  C\n}\n</code></pre>\n<p>This is also an example of the problematic type-directed emit in TS today that I hope to fix in the future. I cannot statically know what the value of <code>x</code> is without type checking, and thus could not reliably emit the auto-incremented values for B and C without additional overhead, i.e.:</p>\n<pre><code class=\"language-js\">var _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103044435,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5f9NS_vKcVj66_CHddDKJ3plt0on_7OVijnzxXnzMJY"},
{"content":{"body":"The `of` syntax is an invocation of an explicit mapper function that handles defining the default initializer of each value.","format":"org.matrix.custom.html","formatted_body":"The <code>of</code> syntax is an invocation of an explicit mapper function that handles defining the default initializer of each value.","m.mentions":{},"msgtype":"m.text"},"ts":1740103086765,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u1Zv68D0rdE2H4XsYy3Pl_MkNbNmWLmPgzdEfWflPkU"},
{"content":{"body":"Ideally, I would prefer a native syntax where `enum E {}` is the equivalent of `enum E of Number {}`, and thus the syntax could be identical in both cases.","format":"org.matrix.custom.html","formatted_body":"Ideally, I would prefer a native syntax where <code>enum E {}</code> is the equivalent of <code>enum E of Number {}</code>, and thus the syntax could be identical in both cases.","m.mentions":{},"msgtype":"m.text"},"ts":1740103128157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2L5lXVGbmlxDuAwRS7i46UaQGfb1h6gNTR0GQSqbUrM"},
{"content":{"body":"This would also allow those who have a specific preference around using strings or symbols to express that via, e.g., a linter, while preserving the predominant base case of using numbers.","m.mentions":{},"msgtype":"m.text"},"ts":1740103199339,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DkPALrTZtqdhJfPy90rQS80uU1DkHcsq4NbLJvcfcgw"},
{"content":{"body":"I'm probably in the minority, I prefer the values being explicit. Even if it is repetitive","m.mentions":{},"msgtype":"m.text"},"ts":1740103335197,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$teSNV4B5dTQw_qvsZq8u52bC_g2oDRYwrrv8meTdcwg"},
{"content":{"body":"are there other languages where the enum delegates to a runtime protocol to construct the values?","m.mentions":{},"msgtype":"m.text"},"ts":1740103405759,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"},
{"content":{"body":"The other caveat of TS vs ES enums to address would be the reverse mapping aspect of TS enums, which is great for diagnostics purposes but unreliable for serialization/deserialization use cases. That's why my version of the enum proposal offloads reverse mappings to a symbol protocol and is made accessible via the `Enum` API. It introduces a more reliable and formal mechanism for parsing and serializing.","format":"org.matrix.custom.html","formatted_body":"The other caveat of TS vs ES enums to address would be the reverse mapping aspect of TS enums, which is great for diagnostics purposes but unreliable for serialization/deserialization use cases. That's why my version of the enum proposal offloads reverse mappings to a symbol protocol and is made accessible via the <code>Enum</code> API. It introduces a more reliable and formal mechanism for parsing and serializing.","m.mentions":{},"msgtype":"m.text"},"ts":1740103408028,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$58W96cpyTp_x4HQNzMrZv32eA3MXvJlEwraFm7cb8mY"},
{"content":{"body":"Python does","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"}},"msgtype":"m.text"},"ts":1740103431807,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NW1csgTS6z1d48C6u4Zznq1EPTn5BsRlgmQ12Pz7eS0"},
{"content":{"body":"thanks, I'll check that out","m.mentions":{},"msgtype":"m.text"},"ts":1740103444615,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$1cXWtmaAExrWLNb6F3Xev7778PJp2fpm3GGPyujxB6U"},
{"content":{"body":"```py\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">class E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103512912,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NG4h_sTHNA6jPJzjGoPZpDx7zfUDGAbYiekU_ExAntE"},
{"content":{"body":"the parts I like the most about the proposal is the self reference during initialisation, and the object being frozen.","m.mentions":{},"msgtype":"m.text"},"ts":1740103521227,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cn2z9Ne7M-XayBsvuEmK3oftlcET_HBvX-BetLr6bv0"},
{"content":{"body":"Also, while not quite runtime, Go uses `iota`. C# enums use a similar auto-numbering mechanism to the one defined in TypeScript, but are also handled at compile-time.","format":"org.matrix.custom.html","formatted_body":"Also, while not quite runtime, Go uses <code>iota</code>. C# enums use a similar auto-numbering mechanism to the one defined in TypeScript, but are also handled at compile-time.","m.mentions":{},"msgtype":"m.text"},"ts":1740103555626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HmnrIboygl7PMLlz1MeNV8tbMKtI4PBRhEWbjkNNUVI"},
{"content":{"body":"The other benefit to a syntactic `enum` type would be future support for decorators for things like control over serialization, formatting, and marshalling, e.g.:\n\n```ts\nenum Position of Symbol {\n  @JSONSerializer.Alias(\"emp\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Employee,\n\n  @JSONSerializer.Alias(\"mgr\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Manager,\n\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The other benefit to a syntactic <code>enum</code> type would be future support for decorators for things like control over serialization, formatting, and marshalling, e.g.:</p>\n<pre><code class=\"language-ts\">enum Position of Symbol {\n  @JSONSerializer.Alias(\"emp\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Employee,\n\n  @JSONSerializer.Alias(\"mgr\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Manager,\n\n  ...\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103788145,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EUCUvhFeVCZemiIRjU0ho9xFnYBzMZ84BvbWEgWBpik"},
{"content":{"body":"* ```py\nfrom enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"* <pre><code class=\"language-py\">from enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```py\nfrom enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">from enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NG4h_sTHNA6jPJzjGoPZpDx7zfUDGAbYiekU_ExAntE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740103880563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iBwvEbPejW60K0JOUunw6XUy2BEnaC6_BY7Usi2OHlY"},
{"content":{"body":"This is also a hard comparison to make, considering the ratio of dynamic to static languages. By nature of JS being dynamic, more things often need to be done at runtime or are expressed via runtime operations (i.e., `Object.defineProperty`, `Reflect.*`, etc.).","format":"org.matrix.custom.html","formatted_body":"This is also a hard comparison to make, considering the ratio of dynamic to static languages. By nature of JS being dynamic, more things often need to be done at runtime or are expressed via runtime operations (i.e., <code>Object.defineProperty</code>, <code>Reflect.*</code>, etc.).","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"}},"msgtype":"m.text"},"ts":1740104083785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bv3G13Gczsxb0iVxlWR2DPRhCeISNyY2_5awksJ54kI"},
{"content":{"body":"I also hold out hope that a syntactic `enum` might be able to establish an object shape for the enum declaration that could eventually be used by bytecode generators for specific performance tuning, much like how we hope the fixed shape nature of `struct` could be utilized. For example, a `switch` over cases of `E.A`, `E.B` could potentially inline those values if it is known that `E` is an enum with a fixed shape, and thus convert the `switch` to a jump table.","format":"org.matrix.custom.html","formatted_body":"I also hold out hope that a syntactic <code>enum</code> might be able to establish an object shape for the enum declaration that could eventually be used by bytecode generators for specific performance tuning, much like how we hope the fixed shape nature of <code>struct</code> could be utilized. For example, a <code>switch</code> over cases of <code>E.A</code>, <code>E.B</code> could potentially inline those values if it is known that <code>E</code> is an enum with a fixed shape, and thus convert the <code>switch</code> to a jump table.","m.mentions":{},"msgtype":"m.text"},"ts":1740104276192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iNX7xWsqH-NVm2ZL1RwSmTpntS0lGzgIX8AkYFbicRI"},
{"content":{"body":"As mentioned in one of the talks today, that's not something we can depend on, but its potentially feasible w/o needing any kind of whole program optimization on the part of the bytecode generator.","m.mentions":{},"msgtype":"m.text"},"ts":1740104342785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bgY6jnEmk4dJzbIjYk85Wvl1eV4eUs85oRfQTdk1LtU"},
{"content":{"body":"if enums are mostly static I can see minifiers being able to inline the values","m.mentions":{},"msgtype":"m.text"},"ts":1740104362867,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5mhxhc_Tf7fMF0_RdZqn7OtlCCYwUbQDBv_Yef1yo7c"},
{"content":{"body":"the constructs might make that too hard","m.mentions":{},"msgtype":"m.text"},"ts":1740104376962,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RRPhPSeYpGmgSOSs4UoS3phh-Ltl1etIuEezzgVpChE"},
{"content":{"body":"* the constructors might make that too hard","m.mentions":{},"m.new_content":{"body":"the constructors might make that too hard","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RRPhPSeYpGmgSOSs4UoS3phh-Ltl1etIuEezzgVpChE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740104380061,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KnxdyXcfeG1hmBVpzIYYnSE--xGCEBoHGdOjonveLjg"},
{"content":{"body":"That's already the case in tools like `esbuild`","format":"org.matrix.custom.html","formatted_body":"That's already the case in tools like <code>esbuild</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740104381809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-4KDJF7xCVnMrQ8W4fiUSGC933fbGPNqyjHiAKh6T-A"},
{"content":{"body":"right, but there isn't a symbol protocol today","m.mentions":{},"msgtype":"m.text"},"ts":1740104397442,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WwxO1W1tgItl1Q9i8PxL7XiGveSdFP-acEi9XGhZHJg"},
{"content":{"body":"But that depends on whole program optimization. The `enum`-ness of `E` could be encoded into its map/shape and is thus available when collecting type feedback on a `switch` case","format":"org.matrix.custom.html","formatted_body":"But that depends on whole program optimization. The <code>enum</code>-ness of <code>E</code> could be encoded into its map/shape and is thus available when collecting type feedback on a <code>switch</code> case","m.mentions":{},"msgtype":"m.text"},"ts":1740104442022,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vF9bXBZFNcd_eMIqLxnhBmPxLaAeqqfaVOd4JWerkFc"},
{"content":{"body":"doesn't need to be whole program, only need to see the two modules","m.mentions":{},"msgtype":"m.text"},"ts":1740104512002,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$scWy6YF4kQuRVF5eny-K37oSueLO-1R6pQbllQNVYHQ"},
{"content":{"body":"follow the import and look at the export","m.mentions":{},"msgtype":"m.text"},"ts":1740104520271,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$th06gGnBCyIl_MebOmVUBfqODcFPpIc8gBf9XF7l0iw"},
{"content":{"body":"Are you referring to the `@@toEnum` symbol? ","format":"org.matrix.custom.html","formatted_body":"Are you referring to the <code>@@toEnum</code> symbol?","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WwxO1W1tgItl1Q9i8PxL7XiGveSdFP-acEi9XGhZHJg"}},"msgtype":"m.text"},"ts":1740104548975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h0mou4b3poyedjQk_8dqDqgUJGkYo3ZZA7pIN67qq58"},
{"content":{"body":"I'm not sure if the proposal changed since I last looked","m.mentions":{},"msgtype":"m.text"},"ts":1740104585377,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$P5Msk5RynncP8OmUo9cEGt8uRdpYVbNRYU-kH6lSSr0"},
{"content":{"body":"I thought the `of T` looked up a symbol on T","format":"org.matrix.custom.html","formatted_body":"I thought the <code>of T</code> looked up a symbol on T","m.mentions":{},"msgtype":"m.text"},"ts":1740104591613,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lgQTMeU34HFRfnB9lv_RuM0NY1EsaeDllm8SCvJuCZU"},
{"content":{"body":"We could make those frozen on built-in constructors, so for the most common use cases it can be determined statically. Edge cases using a custom `@@toEnum` would be slower, but thats pay-to-play. Also, the performance cost is only during startup.","format":"org.matrix.custom.html","formatted_body":"We could make those frozen on built-in constructors, so for the most common use cases it can be determined statically. Edge cases using a custom <code>@@toEnum</code> would be slower, but thats pay-to-play. Also, the performance cost is only during startup.","m.mentions":{},"msgtype":"m.text"},"ts":1740104618295,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uRtNGep7ZKA-1d3GxMIKT-qhZNq07HzeTIrT705bLf4"},
{"content":{"body":"I thought we had a rule that we couldn't freeze intrinsics","m.mentions":{},"msgtype":"m.text"},"ts":1740104672955,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$GJo-U6BCdqtdCDsw3BCnGbcAzS8ZWjtG1KHwsRoWHpY"},
{"content":{"body":"I mean `{ writable: false, configurable: false }`","format":"org.matrix.custom.html","formatted_body":"I mean <code>{ writable: false, configurable: false }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740104695602,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kX-xmbBCrrFFjwMRSnCA1N-jrP7_kd5f5wcFBiKDyEY"},
{"content":{"body":"I'd have to defer to TG3 if that fits their model","m.mentions":{},"msgtype":"m.text"},"ts":1740104718030,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$QEzL0LKL3Woenp3FA3MNgbUn8m8yntNjD2lYNSzcHrk"},
{"content":{"body":"And if that's not viable, then an opt-out if it differs from the expected value.","m.mentions":{},"msgtype":"m.text"},"ts":1740104719992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ettscp5j4TpRjL5IK_CVCbylIF1b_FCmqU15Q_1YJQs"},
{"content":{"body":"I'd personally be Ok with the possible patterns being baked in statically, without ways to create custom constructors. For strings if someone wanted a constructor that created lowercase or uppercase strings for example doesn't feel like enough of a motivation to introduce the dynamic lookup","m.mentions":{},"msgtype":"m.text"},"ts":1740104838855,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$oSs88ftWwYXd2ZXF3JudBN02aRJDJAvQMFE5vXyEszc"},
{"content":{"body":"number+string+symbol sounds more than enough :)","m.mentions":{},"msgtype":"m.text"},"ts":1740104855055,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mOn_l7Ul7n9hjsC-tZdlehThqogKI-x4ojcwtyRHQeg"},
{"content":{"body":"Also bigint","m.mentions":{},"msgtype":"m.text"},"ts":1740104871532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xn_oTUOG9kgbtJcc19OUQui-MykNQPL9LnK0u4bW4Ns"},
{"content":{"body":"interesting","m.mentions":{},"msgtype":"m.text"},"ts":1740104880074,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Yfdp0hG9HW_D70-rqgz4HUp0RB3SFXEyk7fUuERIVPQ"},
{"content":{"body":"Also flags, and eventually ADT enums","m.mentions":{},"msgtype":"m.text"},"ts":1740104886312,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vrGNMQ0VEq8xHhPvccaZvs4HlFFdVDcSWrwHHUP4INg"},
{"content":{"body":"flags are numbers though right","m.mentions":{},"msgtype":"m.text"},"ts":1740104894737,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$85EvQ9eNCYYPyPIVsWbA5mC-5EBuVuqto17bnH8AKps"},
{"content":{"body":"Yes, but the auto-numbering behavior differs","m.mentions":{},"msgtype":"m.text"},"ts":1740104920590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7R7y_PaGcHrVNiqg9EIfVYYyY0bSwmV10Ol5RmRb8aw"},
{"content":{"body":"is bigint for when needing a larger domain of possible flags?","m.mentions":{},"msgtype":"m.text"},"ts":1740104921151,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$umUztuWwzAk7lCSaj3v3gJ2f5JknG2ErZnsyXlph3BE"},
{"content":{"body":"Yes, if bigint were fast enough I'd have plenty of TS `enum`s that I'd make into bigints. In TS we regularly have to worry about running out of space in an SMI","format":"org.matrix.custom.html","formatted_body":"Yes, if bigint were fast enough I'd have plenty of TS <code>enum</code>s that I'd make into bigints. In TS we regularly have to worry about running out of space in an SMI","m.mentions":{},"msgtype":"m.text"},"ts":1740104966780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ow3vIypAdYclMT1kkUj8RohieB5V0cgeFPZoq5sIEwo"},
{"content":{"body":"I do see the wins, but I also feel like explicit assignment is unambiguious as to what will happen. It's \"just JavaScript\" :D","m.mentions":{},"msgtype":"m.text"},"ts":1740104978071,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NsQGExbUCkFgYT-lSsKN1v2MXtRR8gyRyfjcvF_6qrQ"},
{"content":{"body":"and the repeitiveness feels like a small price to pay","m.mentions":{},"msgtype":"m.text"},"ts":1740104995825,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$j_WmBBOQ4QPyFa8Ydy14-wdbqWd_hZOm0QcwRY-GMBM"},
{"content":{"body":"Flags enums would autonumber as `0`, `1 << 0`, `1 << 1`, `1 << 2`, ...","format":"org.matrix.custom.html","formatted_body":"Flags enums would autonumber as <code>0</code>, <code>1 &lt;&lt; 0</code>, <code>1 &lt;&lt; 1</code>, <code>1 &lt;&lt; 2</code>, ...","m.mentions":{},"msgtype":"m.text"},"ts":1740105008389,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aQbu1zSqOAqGXj71tYofZZdzLKSafY_OCLLN1nWXPRs"},
{"content":{"body":"I really hope we get the enum proposal and it feels like that's more likely to happen if it's kept simpler","m.mentions":{},"msgtype":"m.text"},"ts":1740105022481,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nSIlBsc6rYYo95dbfboIdV3GdynKu6wdZ6hfxsy3p1k"},
{"content":{"body":"Explicit assignment just isn't backwards compatible with TS, unfortunately.","m.mentions":{},"msgtype":"m.text"},"ts":1740105037204,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$abKuyd229P2nO5dk9oBLS7-UpskV_vepcQnWRM8r81Y"},
{"content":{"body":"could tooling help here, I'd happily write the codemod!","m.mentions":{},"msgtype":"m.text"},"ts":1740105064957,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ZuOXFfrSN_BxraryU_wH67m_YiPcMI2ncKlGmP420ZM"},
{"content":{"body":"also thanks for helping answer my queries, much appreciated","m.mentions":{},"msgtype":"m.text"},"ts":1740105126124,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KEPEJGt4TxdDGVMKGmb3DnIQobSRdnXPLWHpSu0cjrI"},
{"content":{"body":"The problem is the thousands of existing .d.ts files. Hand-generated .d.ts files can contain `enum E { A, B }` even though we normally emit them with hardcoded initializers.","format":"org.matrix.custom.html","formatted_body":"The problem is the thousands of existing .d.ts files. Hand-generated .d.ts files can contain <code>enum E { A, B }</code> even though we normally emit them with hardcoded initializers.","m.mentions":{},"msgtype":"m.text"},"ts":1740105142809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i6slVPYLyWZvERKCiMcJEUrZYeH2Ne-wTj2Yypl4sHM"},
{"content":{"body":"gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1740105154662,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$n8h6vt61IB-NJNcBi0T2XWsPdgmy1T8nU-w-GiJYHc4"},
{"content":{"body":"We have over a decade of legacy to deal with that ties our hands in many ways.","m.mentions":{},"msgtype":"m.text"},"ts":1740105173214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UmyUw5gDWujq4aqvV2ExvXvceTMDK7zfDp3DWLoqY08"},
{"content":{"body":"so would need a way to mark the 'new' enums when generating `.d.ts`","format":"org.matrix.custom.html","formatted_body":"so would need a way to mark the 'new' enums when generating <code>.d.ts</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740105182555,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$zZDbXiQrjre5vM4_r0AnnRkbbzYWlWEoMaw9oPjZiTo"},
{"content":{"body":"No, *generating* a .d.ts is fine since we always generate with hard-coded initializers.","format":"org.matrix.custom.html","formatted_body":"No, <em>generating</em> a .d.ts is fine since we always generate with hard-coded initializers.","m.mentions":{},"msgtype":"m.text"},"ts":1740105202822,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YUghHiIUIMYOPMCwJ0hCMlf5an935tixzQxbnTAVfyY"},
{"content":{"body":"We have no control over hand-rolled .d.ts files","m.mentions":{},"msgtype":"m.text"},"ts":1740105216219,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hnSIBiFV_8u9638We0fdBRQkAEM6coseHNnOIlIvbLo"},
{"content":{"body":"I mean we'd preserve the auto-increment type inference for existing `.d.ts` ","format":"org.matrix.custom.html","formatted_body":"I mean we'd preserve the auto-increment type inference for existing <code>.d.ts</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740105252631,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MjZAhgAkH9FbMUZWlJVXRo9KFgnSp3Ek-LskrmmoRLw"},
{"content":{"body":"i.e., much of DefinitelyTyped, any code that's behind the firewall, etc.","m.mentions":{},"msgtype":"m.text"},"ts":1740105258217,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uworY4l22nW0dC94Rfk-AphnEpUTtFC4BExmsfh7me0"},
{"content":{"body":"JS enums could be `enum E # {}` to differentiate? ","format":"org.matrix.custom.html","formatted_body":"JS enums could be <code>enum E # {}</code> to differentiate?","m.mentions":{},"msgtype":"m.text"},"ts":1740105342446,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$VkOuUmoDUbAsU3K-V8VRLr_Wl4CmcVh_9bvqx07PUrQ"},
{"content":{"body":"* JS enums could be `enum E #{}` to differentiate?","format":"org.matrix.custom.html","formatted_body":"* JS enums could be <code>enum E #{}</code> to differentiate?","m.mentions":{},"m.new_content":{"body":"JS enums could be `enum E #{}` to differentiate?","format":"org.matrix.custom.html","formatted_body":"JS enums could be <code>enum E #{}</code> to differentiate?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VkOuUmoDUbAsU3K-V8VRLr_Wl4CmcVh_9bvqx07PUrQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740105347450,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nFFcHWuUr6hzvoChgRBJ4Br3yi81muX91VRZ7Qqh0Oc"},
{"content":{"body":"That's only possible if we preserve auto-incrementing numbers for native enums by default.\\","format":"org.matrix.custom.html","formatted_body":"That&#39;s only possible if we preserve auto-incrementing numbers for native enums by default.\\","m.mentions":{},"msgtype":"m.text"},"ts":1740105348988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a0PMQR1YUvxZ1uqZ68tP0S7iYp4q7PavmYkUXdQuGvY"},
{"content":{"body":"Why though? What value does that bring? `of T` at least has some benefits.","format":"org.matrix.custom.html","formatted_body":"Why though? What value does that bring? <code>of T</code> at least has some benefits.","m.mentions":{},"msgtype":"m.text"},"ts":1740105372799,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4oL4wEgr9YubDLPt-IGbN50fUIoSBD8c9RgO9UbKmw8"},
{"content":{"body":"* That's only possible if we preserve auto-incrementing numbers for native enums by default.","m.mentions":{},"m.new_content":{"body":"That's only possible if we preserve auto-incrementing numbers for native enums by default.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$a0PMQR1YUvxZ1uqZ68tP0S7iYp4q7PavmYkUXdQuGvY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740105381368,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2twcyxlSz5OIf8NfNK32m1xGFqxW8Klh8FfVbNAcVKE"},
{"content":{"body":"it's simpler","m.mentions":{},"msgtype":"m.text"},"ts":1740105386872,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$nhhviusHQB2PMeVKooTS7cOjKxlS9bW2db6uvLJ2tdE"},
{"content":{"body":"no dynamic lookup","m.mentions":{},"msgtype":"m.text"},"ts":1740105401997,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$sow9_wNxQshd5d1JnWu63buZKQPqu_-cvVYfwGxQ9R8"},
{"content":{"body":"Why is dynamic lookup bad for `enum E of T {}` but ok for `class C of B {}`?","format":"org.matrix.custom.html","formatted_body":"Why is dynamic lookup bad for <code>enum E of T {}</code> but ok for <code>class C of B {}</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740105422388,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MLukt4oCDdavdcCIcHV7Ff_aZDlxQZAtzKbHfzG7vcA"},
{"content":{"body":"* Why is dynamic lookup bad for `enum E of T {}` but ok for `class C extends B {}`?","format":"org.matrix.custom.html","formatted_body":"* Why is dynamic lookup bad for <code>enum E of T {}</code> but ok for <code>class C extends B {}</code>?","m.mentions":{},"m.new_content":{"body":"Why is dynamic lookup bad for `enum E of T {}` but ok for `class C extends B {}`?","format":"org.matrix.custom.html","formatted_body":"Why is dynamic lookup bad for <code>enum E of T {}</code> but ok for <code>class C extends B {}</code>?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MLukt4oCDdavdcCIcHV7Ff_aZDlxQZAtzKbHfzG7vcA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740105448316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vzFdewseGNACeTaBkGvY35UilZ0aXbw2W_CZAe_bZHY"},
{"content":{"body":"I'd put forth that `class C extends B` is worse because it requires dynamic lookup during `new`","format":"org.matrix.custom.html","formatted_body":"I'd put forth that <code>class C extends B</code> is worse because it requires dynamic lookup during <code>new</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740105472008,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qp7c46borKh8va6uyGqKQqUXsXmMAxvxhIV38VUHdys"},
{"content":{"body":"because classes need to extend from an infinite set","m.mentions":{},"msgtype":"m.text"},"ts":1740105477957,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$02l23LDvMJFYs1jQA2vTi8l8QpXL5l36htCEk9pHoH4"},
{"content":{"body":"`Number` is an infinite set.","format":"org.matrix.custom.html","formatted_body":"<code>Number</code> is an infinite set.","m.mentions":{},"msgtype":"m.text"},"ts":1740105491214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$trv_oF4caiQVjmILpTlAqL8q8p_7rgnNsOsHDUQHs8w"},
{"content":{"body":"enums can be a few built in types","m.mentions":{},"msgtype":"m.text"},"ts":1740105492756,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$fDvuLhdcS7045FfhOx8ukXKrxx9DbkRABnKQ4t3YVOw"},
{"content":{"body":"I mean the set of types","m.mentions":{},"msgtype":"m.text"},"ts":1740105498125,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uAjZR8qrlBz3Maj6OEHQ2Vr-xI8kb8Rb06oYmgds0YQ"},
{"content":{"body":"not the set of values","m.mentions":{},"msgtype":"m.text"},"ts":1740105501105,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$aiOcps2IR5UrpKGmu5a-PRloSfXevm2g7UR6VGRP8b4"},
{"content":{"body":"we can't hard code that classes can only extend from number/string/symbol","m.mentions":{},"msgtype":"m.text"},"ts":1740105520027,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Er0aqYGQ8sqWcKTEt0jKfX3zTZ288eRNqYrjRompiv8"},
{"content":{"body":"we can for enum","m.mentions":{},"msgtype":"m.text"},"ts":1740105526101,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MEo1zI3PHEiZHkw8uCOejIqLjIUdAPVXNrmoytm6VhQ"},
{"content":{"body":"What good does hard coding it do? `of T` doesn't enforce any constraints on the values of each enum member, it only affects auto-numbering.","format":"org.matrix.custom.html","formatted_body":"What good does hard coding it do? <code>of T</code> doesn't enforce any constraints on the values of each enum member, it only affects auto-numbering.","m.mentions":{},"msgtype":"m.text"},"ts":1740105566473,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GZeTyXeIdnp0ZG9U9t7--vDvvUuF4_v1MAUYSQ_PnW8"},
{"content":{"body":"it's simpler","m.mentions":{},"msgtype":"m.text"},"ts":1740105576941,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$C7jjvQWngGkPIyBUVYJtqvF1BiMpDE9IXBZt0juOd1U"},
{"content":{"body":"You could say `enum E of Number { A = \"foo\" }`","format":"org.matrix.custom.html","formatted_body":"You could say <code>enum E of Number { A = \"foo\" }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740105579741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6ZPl1zPZwmdfmd4iILRTUVd3r2AS24Zfoh6Jx4dTUUc"},
{"content":{"body":"I don't think this kind of simpler will pass muster for others on the committee.","m.mentions":{},"msgtype":"m.text"},"ts":1740105604197,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qw0zueEo4MHJyQr0nZ_3hYKym8auphbnZ0w6KoKQqSk"},
{"content":{"body":"I think the complexity of `of` is also not aligned with the feedback we are currently getting in committee to keep proposals simpler","format":"org.matrix.custom.html","formatted_body":"I think the complexity of <code>of</code> is also not aligned with the feedback we are currently getting in committee to keep proposals simpler","m.mentions":{},"msgtype":"m.text"},"ts":1740105632935,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UdfmiAME0vHa-Rs7yxXIXnOQzTOTHx4rat_uj8Y9Glg"},
{"content":{"body":"for other proposals","m.mentions":{},"msgtype":"m.text"},"ts":1740105639362,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lNpWn9zb9GsqoS5IHcUZQu-hNwR-ZVnyg0UetfbtEg8"},
{"content":{"body":"\"simpler\" would be `enum E { A, B }` produces auto-numbered values. That is a tried and true implementation that matches what TS has been doing for a decade","format":"org.matrix.custom.html","formatted_body":"\"simpler\" would be <code>enum E { A, B }</code> produces auto-numbered values. That is a tried and true implementation that matches what TS has been doing for a decade","m.mentions":{},"msgtype":"m.text"},"ts":1740105640659,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4aQd6N_V13ySvruB4ONamJ4njukJv84zsQp8MH_SrDA"},
{"content":{"body":"Lots of code uses plain object literals for enums today, the biggest downside is not being able to self reference","m.mentions":{},"msgtype":"m.text"},"ts":1740105721413,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UQ1zvLM5357IHXNV9mf6knDOTGaSfsRH9ZYMafcYcOs"},
{"content":{"body":"IMO, auto-numbering is a very important part of the feature and is something a large number of existing TS developers rely on.","m.mentions":{},"msgtype":"m.text"},"ts":1740105723129,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$orFypndwpyFTonIqRBQI8_95kc_Uw_qCGgXQb7xK53o"},
{"content":{"body":"And without some form of auto-numbering, we have no way of making `enum` work with a pure \"erasable types\" solution as it would still require additional downlevel emit.","format":"org.matrix.custom.html","formatted_body":"And without some form of auto-numbering, we have no way of making <code>enum</code> work with a pure \"erasable types\" solution as it would still require additional downlevel emit.","m.mentions":{},"msgtype":"m.text"},"ts":1740105816626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7zmJb_2cBpZD3oRRIv0gyH6FYc4jWDoSMVR7rmZ50Vg"},
{"content":{"body":"I'd be OK if un-initalized names were auto-incrementing","m.mentions":{},"msgtype":"m.text"},"ts":1740105821513,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$V6zLQ5_iaW83w7zn70InlP1VUtQ8PxOTkpK8nqNWE-k"},
{"content":{"body":"strings would need explicit assignment","m.mentions":{},"msgtype":"m.text"},"ts":1740105836277,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$2QT0swS3pGjYHrWkjalBzRHHZ70Cx6HL54sWVI8XDUE"},
{"content":{"body":"Yes, but ljharb and bakkot would not.","format":"org.matrix.custom.html","formatted_body":"Yes, but <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> and <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> would not.","m.mentions":{"user_ids":["@ljharb:matrix.org","@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1740105847697,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_ejMW5YfyIF0IFJFQ17bz3D0LeCQcm8jy0dCz61G8Bo"},
{"content":{"body":"`of` is designed to find a compromise between those positions.","format":"org.matrix.custom.html","formatted_body":"<code>of</code> is designed to find a compromise between those positions.","m.mentions":{},"msgtype":"m.text"},"ts":1740105874001,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6pFFe16626W_ZXtdgsBr3RzBHf1JN5e-86Su_OST_AI"},
{"content":{"body":"i don’t mind auto increment. But i mildly prefer only explicit","msgtype":"m.text"},"ts":1740105882317,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$CzUQh4ZN6Zq04p8VdveqJxhBgBeFGe69s_Frm9y2a5U"},
{"content":{"body":"if `of` is the only way to resolve the comittee's constraints I get that. But I'd really like to be sure we've exhausted 'simpler' options.","format":"org.matrix.custom.html","formatted_body":"if <code>of</code> is the only way to resolve the comittee's constraints I get that. But I'd really like to be sure we've exhausted 'simpler' options.","m.mentions":{},"msgtype":"m.text"},"ts":1740105935450,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5JN0VkWrI71sYyV7dYGRBMxAYcsL5RI8DQwEfPfOH7c"},
{"content":{"body":"The other benefit to `of` is to specify the backing type for auto-increment behavior, such that you could have `enum E of BigInt { None, A, B }` produce bigints instead of numbers.","format":"org.matrix.custom.html","formatted_body":"The other benefit to <code>of</code> is to specify the backing type for auto-increment behavior, such that you could have <code>enum E of BigInt { None, A, B }</code> produce bigints instead of numbers.","m.mentions":{},"msgtype":"m.text"},"ts":1740105956813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a6c53vlUBTb055_Qb9FowlQ2X7eXSllhVzPAozk3kjg"},
{"content":{"body":"the value is imo in covering enumeration and validation, i don’t care about the one time that might have to be explicitly written. read > write and all that","format":"org.matrix.custom.html","formatted_body":"the value is imo in covering enumeration and validation, i don’t care about the one time that might have to be explicitly written. read &gt; write and all that","msgtype":"m.text"},"ts":1740105973823,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$10yL3dboWntohQPOcqdhoYW6v5Oe761a527NwYAr33A"},
{"content":{"body":"that benefit seems small","m.mentions":{},"msgtype":"m.text"},"ts":1740105977690,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6pijzESd0e5TFCNcbqW_NuHLuwUOvpQIABgYfH1R7vw"},
{"content":{"body":"* that benefit seems small (incrementing bigint)","m.mentions":{},"m.new_content":{"body":"that benefit seems small (incrementing bigint)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6pijzESd0e5TFCNcbqW_NuHLuwUOvpQIABgYfH1R7vw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740105993497,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$gZFYz0Xfw5_u5MyaACn5MMS2oAvjyUMA8_BkdGEQGBc"},
{"content":{"body":"enumeration and validation are important, but only a small piece of the pie.","m.mentions":{},"msgtype":"m.text"},"ts":1740106009673,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OFUqxqyUN8Y3zu8XvhkzNThIMhohSbAyrQmePggd0_Q"},
{"content":{"body":"for me it’s like 99% of it","msgtype":"m.text"},"ts":1740106021060,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$oSrV7POc05ZhCzMgac2pavGb2i-u7yCqQotwKgv3f6Q"},
{"content":{"body":"My preference continues to be not having enums, rather than trying to rationalize TS enums as a JS feature.","msgtype":"m.text"},"ts":1740106022628,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$AGmEcCwWW0qpk8-E1cD3nrxBDNFpwiRKWek6PeIYVt8"},
{"content":{"body":"Yes, but for me its maybe like 40% of it.","m.mentions":{},"msgtype":"m.text"},"ts":1740106040351,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pmPjS5N5BjElWt_QAKcICqdOvo638H-tRmkNJm97Bcw"},
{"content":{"body":"what’s the rest? Surely it’s not “not having to type out a few numbers and/or strings”","msgtype":"m.text"},"ts":1740106062673,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$brVeqxEc24fX5zPjyq_NaaA9O6RQxZdxdYs5wmfLqVQ"},
{"content":{"body":"types i guess, but im assuming a JS context here :-)","msgtype":"m.text"},"ts":1740106101443,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$HcamO6OdyStaOFhR9ebbCF_oFn9CzmWuy_nMV6axw8k"},
{"content":{"body":"My major use cases have been ordered ranges, bitflags/bitmasks, and binary serialization formats (network I/O, binary file/section headers, etc.)","m.mentions":{},"msgtype":"m.text"},"ts":1740106139681,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ulR76QDDJNcQE_5wdAo_qEroJiL1HpNl9KSGKAtsTxU"},
{"content":{"body":"bitflags only work if you can increment by powers of two, and i don’t see how that’s doable automatically ","format":"org.matrix.custom.html","formatted_body":"bitflags only work if you can increment by powers of two, and i don’t see how that’s doable automatically","msgtype":"m.text"},"ts":1740106181397,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$E6le3MVMN5igeYQyxF8gv8TczIdVPK789CbxgGq-GkI"},
{"content":{"body":"`SyntaxKind`, for example, uses auto-numbering and pre-defined ranges for fast comparison of AST node kinds.","format":"org.matrix.custom.html","formatted_body":"<code>SyntaxKind</code>, for example, uses auto-numbering and pre-defined ranges for fast comparison of AST node kinds.","m.mentions":{},"msgtype":"m.text"},"ts":1740106185520,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Dur0iMFeC2Y-pwdHBSHZ3W8WT7gyCkzpdx8b_n62RIk"},
{"content":{"body":"and formats are strings which are explicit","msgtype":"m.text"},"ts":1740106189857,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$za_I-tdUiHSppvhOIfHxy1_ip1-VV6t_EJT2eGG5i-s"},
{"content":{"body":"Its doable with `of`.","format":"org.matrix.custom.html","formatted_body":"Its doable with <code>of</code>.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$E6le3MVMN5igeYQyxF8gv8TczIdVPK789CbxgGq-GkI"}},"msgtype":"m.text"},"ts":1740106232036,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l5BIjYJErRJNLY6pdw3qlcMj5q3XVUBbnnnoytGSow4"},
{"content":{"body":"auto numbering does seem like it make unintentional breaking changes highly likely ","format":"org.matrix.custom.html","formatted_body":"auto numbering does seem like it make unintentional breaking changes highly likely","msgtype":"m.text"},"ts":1740106234160,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qxJKi2YAkQ1of0tJfMYmUTd7ZksBGMlHmk6sM0QmPEU"},
{"content":{"body":"I would be enthusiastic about a native BitSet, possibly backed by an arraybuffer ","msgtype":"m.text"},"ts":1740106235203,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TamX-UNfrhpoq9-T7z-OtyRsp49znJMx4znnoXoKozg"},
{"content":{"body":"(not with syntax though)","msgtype":"m.text"},"ts":1740106279160,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$L4sArf2T-CuFFmVuHK4MCNtWKQn8gwe0qjw4ec4SiUI"},
{"content":{"body":"You can do something similar in Go a well: \n```go\ntype Foo int32\nconst (\n  FooA E = 1 << iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n```","format":"org.matrix.custom.html","formatted_body":"<p>You can do something similar in Go a well:</p>\n<pre><code class=\"language-go\">type Foo int32\nconst (\n  FooA E = 1 &lt;&lt; iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740106303652,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Kia7v8wve4bbBw_JBK6Bwu8IyhxjdGEkFTRxm4Wsu9Y"},
{"content":{"body":"* You can do something similar in Go as well:\n\n```go\ntype Foo int32\nconst (\n  FooA E = 1 << iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n```","format":"org.matrix.custom.html","formatted_body":"* <p>You can do something similar in Go as well:</p>\n<pre><code class=\"language-go\">type Foo int32\nconst (\n  FooA E = 1 &lt;&lt; iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"You can do something similar in Go as well:\n\n```go\ntype Foo int32\nconst (\n  FooA E = 1 << iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n```","format":"org.matrix.custom.html","formatted_body":"<p>You can do something similar in Go as well:</p>\n<pre><code class=\"language-go\">type Foo int32\nconst (\n  FooA E = 1 &lt;&lt; iota // E(1)\n  FooB // E(2)\n  FooC // E(4)\n)\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Kia7v8wve4bbBw_JBK6Bwu8IyhxjdGEkFTRxm4Wsu9Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740106333966,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hAV_HKxeQ7U_PVowRhsjxCceYvpK9vxLJKA2GgNkWcU"},
{"content":{"body":"As would any unintentional change to your public API.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qxJKi2YAkQ1of0tJfMYmUTd7ZksBGMlHmk6sM0QmPEU"}},"msgtype":"m.text"},"ts":1740106423518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YHJmMFUeQSiO4EaWTiSjAQyr7OOPGqJaU-OMf1GwRXg"},
{"content":{"body":"sure. But those are harder to do by accident.","msgtype":"m.text"},"ts":1740106445021,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$arqiK0agJOIYs-su2Tk32NkmEL0umxWUgLyTVAHcJ2U"},
{"content":{"body":"Zig's support for fixed-width ints of any width, with packing into binary representations, is quite nice","msgtype":"m.text"},"ts":1740106447555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_ANoTZjwygLSAsWDgX-A5KKoBLj5A0CFlZWdxY69vHo"},
{"content":{"body":"I would argue that banning auto-numbering, or requiring `of String` or `of Symbol`, is something a lint rule could handle, but it isn't a rule I would enforce by default.","format":"org.matrix.custom.html","formatted_body":"I would argue that banning auto-numbering, or requiring <code>of String</code> or <code>of Symbol</code>, is something a lint rule could handle, but it isn't a rule I would enforce by default.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$arqiK0agJOIYs-su2Tk32NkmEL0umxWUgLyTVAHcJ2U"}},"msgtype":"m.text"},"ts":1740106529875,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a6YyWdK1_92z6seUQZ0oSKBG0xnn8bt6pSIG4xZh49o"},
{"content":{"body":"implicitness should be either allowed or prohibited, it shouldn’t be pushed to linters","msgtype":"m.text"},"ts":1740106604421,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Avd3ZFLHESDqRgjNtQ59Kzm3r6LTYoG2Be0fOiVC_2I"},
{"content":{"body":"I would, in general, be fine with a MVP version that has no `@@toEnum` and explicitly checks if the expression passed to `of` is one of the built-in `Number`, `String`, `Symbol`, or `BigInt` constructors, as that leaves room for future extensibility (i.e., `of Enum.BitFlags`, `of Enum.ADT`, etc.)","format":"org.matrix.custom.html","formatted_body":"I would, in general, be fine with a MVP version that has no <code>@@toEnum</code> and explicitly checks if the expression passed to <code>of</code> is one of the built-in <code>Number</code>, <code>String</code>, <code>Symbol</code>, or <code>BigInt</code> constructors, as that leaves room for future extensibility (i.e., <code>of Enum.BitFlags</code>, <code>of Enum.ADT</code>, etc.)","m.mentions":{},"msgtype":"m.text"},"ts":1740106688214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8tKWSIjrcEHOVA9CeZ4g0m8Vpb3GI7OkRzDaREB3kys"},
{"content":{"body":"stuff it’s ok to push to linters is when it’s a preference; this is different imo. Autonumbering is either fine, or a footgun, so we’d have to make a call","msgtype":"m.text"},"ts":1740106719229,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$egt-KgR3Yry5KuISkzg_WW_rYgSz2ZqB0cbU7gzoFSs"},
{"content":{"body":"I believe the implicitness should be allowed, and is essential for compatibility.","m.mentions":{},"msgtype":"m.text"},"ts":1740106737191,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xf9QgvmGjbZktZXyt-n9FmPFOgUysI1HqpupXcdRxuQ"},
{"content":{"body":"Even without `of`, you can always enforce explicitness if you need, but `enum E { A, B }` producing numbers would be essential for compatibility.","format":"org.matrix.custom.html","formatted_body":"Even without <code>of</code>, you can always enforce explicitness if you need, but <code>enum E { A, B }</code> producing numbers would be essential for compatibility.","m.mentions":{},"msgtype":"m.text"},"ts":1740106773300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QDbOw72VfiUN30uJnXdKHEOVfhxBjd_GvsT4kXGwP9A"},
{"content":{"body":"what kind of compatibility?","msgtype":"m.text"},"ts":1740106784151,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w7uM5erxYaxpolDuRE1n3gXiBVe6UkbrDOFOzMgXoLE"},
{"content":{"body":"TS can transpile to explicit numbers","msgtype":"m.text"},"ts":1740106795321,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ILqArDG5PvLfzFcZi3_SDkeiTWahy__NAoz0pQ3FCaU"},
{"content":{"body":"Not without running into problems with \"legacy\" .d.ts files hand written before native enums existed.","m.mentions":{},"msgtype":"m.text"},"ts":1740106825271,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x0dfI9GNyNfBQ9plu1TYCJPzkbZ5LmKxT75B5oBWiwc"},
{"content":{"body":"Its the TS version of \"this is already legal JS\"","m.mentions":{},"msgtype":"m.text"},"ts":1740106842930,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sRgEn-ij5qvbhbNfQ61GeI2oTItnd_1uxwukw4dOHq4"},
{"content":{"body":"You also can't transpile to explicit numbers without either whole program analysis or introducing temporary variables.","m.mentions":{},"msgtype":"m.text"},"ts":1740106954400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1hhTU_jZ9paLbOcpRxV1Anm_yuBHCFyVLj8M1rgH2rY"},
{"content":{"body":"I'm not following this bit still. Legacy `.d.ts` would only impact the types, not the emit right?","format":"org.matrix.custom.html","formatted_body":"I'm not following this bit still. Legacy <code>.d.ts</code> would only impact the types, not the emit right?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x0dfI9GNyNfBQ9plu1TYCJPzkbZ5LmKxT75B5oBWiwc"}},"msgtype":"m.text"},"ts":1740107007296,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NHG5khKSDNUjDsvlSCUPcePA9MQxWjmk9HrfOfdOIlI"},
{"content":{"body":"The types describe the runtime behavior. ","m.mentions":{},"msgtype":"m.text"},"ts":1740107101617,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lns-JF87omIL4zzqFJwereiVTAIA5Pl3_25lUDN6MJQ"},
{"content":{"body":"I mean, the exiting interpretation of those files doesn't need to change","m.mentions":{},"msgtype":"m.text"},"ts":1740107146176,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$AtHh4RCSskfP5vVfiOpW4Ec6YFkEVPB67p9FelaKN_4"},
{"content":{"body":"It does if we adopt an interpretation of `enum` for ES that requires explicit initializers, and then adopts some other behavior for auto-initialization later. ","format":"org.matrix.custom.html","formatted_body":"It does if we adopt an interpretation of <code>enum</code> for ES that requires explicit initializers, and then adopts some other behavior for auto-initialization later.","m.mentions":{},"msgtype":"m.text"},"ts":1740107284654,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H2rZ_JLDwYMULEKqMuJn29Nvp3Vxn_U76ebZFeWPy68"},
{"content":{"body":"* I mean, the existing interpretation of those files doesn't need to change","m.mentions":{},"m.new_content":{"body":"I mean, the existing interpretation of those files doesn't need to change","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AtHh4RCSskfP5vVfiOpW4Ec6YFkEVPB67p9FelaKN_4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740107286585,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$tQy6ZDHD9jH67_cskNdUMKr1O3PUBHxpPIHVecxziqs"},
{"content":{"body":"Either way, not having auto numbering is incompatible with \"erasable types\" (i.e., such as ts-blank-space) as we have to inject initializers, or manually auto-number as in the example I mentioned above:\n\n```js\nvar _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Either way, not having auto numbering is incompatible with \"erasable types\" (i.e., such as ts-blank-space) as we have to inject initializers, or manually auto-number as in the example I mentioned above:</p>\n<pre><code class=\"language-js\">var _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740107375070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zKevEzwG8gG51VF_r9cFIDTwwnRwdX9YeCTR_hUxD8c"},
{"content":{"body":"`ts-blank-space` only erases the parts with no runtime semantics. So it would preserve enums as written","format":"org.matrix.custom.html","formatted_body":"<code>ts-blank-space</code> only erases the parts with no runtime semantics. So it would preserve enums as written","m.mentions":{},"msgtype":"m.text"},"ts":1740107409848,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KM0Oy_D-BEnrBo2JN8fQ3iL0ZmYNmcgMugbWnLp__ms"},
{"content":{"body":"as they would be valid 262","m.mentions":{},"msgtype":"m.text"},"ts":1740107420161,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$uuLK1mrhM_I8mCkQwXzF287Mlz_kpKVJvHN1S32FS8o"},
{"content":{"body":"Maybe it gets us half way, and if you run with `--erasableSyntaxOnly` you have to explicitly number your enum values, but I'd still prefer to have auto-numbering.","format":"org.matrix.custom.html","formatted_body":"Maybe it gets us half way, and if you run with <code>--erasableSyntaxOnly</code> you have to explicitly number your enum values, but I'd still prefer to have auto-numbering.","m.mentions":{},"msgtype":"m.text"},"ts":1740107466126,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GINRl0CGxEUzm3IxkBvGQD-GnEuoGawLJNCe7TZA2uY"},
{"content":{"body":"right, the point is to make enums non erasable","msgtype":"m.text"},"ts":1740107485080,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WK4zKIFiQ5_sRJ8t5hdJTGaZ_UpTHF4Kc6eW3JFeTF4"},
{"content":{"body":"It would not be pleasant to introduce a new `*Keyword` entry into `SyntaxKind` and have to shift 250+ entries up one integer.","format":"org.matrix.custom.html","formatted_body":"It would not be pleasant to introduce a new <code>*Keyword</code> entry into <code>SyntaxKind</code> and have to shift 250+ entries up one integer.","m.mentions":{},"msgtype":"m.text"},"ts":1740107516794,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JluNjsSEBFF6VX3qovRzV9mOEJNxbnjyHJs7DMl_d70"},
{"content":{"body":"prefer is fine, but then it’s not a compat issue?","msgtype":"m.text"},"ts":1740107521004,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$r-fpxpv1RGq9N7OA7ZjDaFsDjj1MATWRMrD12C0vpHA"},
{"content":{"body":"> <@rbuckton:matrix.org> It would not be pleasant to introduce a new `*Keyword` entry into `SyntaxKind` and have to shift 250+ entries up one integer.\n\nbreaking changes are supposed to be unpleasant to add","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24JluNjsSEBFF6VX3qovRzV9mOEJNxbnjyHJs7DMl_d70\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It would not be pleasant to introduce a new <code>*Keyword</code> entry into <code>SyntaxKind</code> and have to shift 250+ entries up one integer.</blockquote></mx-reply>breaking changes are supposed to be unpleasant to add","m.relates_to":{"m.in_reply_to":{"event_id":"$JluNjsSEBFF6VX3qovRzV9mOEJNxbnjyHJs7DMl_d70"}},"msgtype":"m.text"},"ts":1740107533706,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3nfuWPD9R4mQrDW-zTK8oZK-vFJhv6iuUsTQWKbsIuo"},
{"content":{"body":"feature not bug","msgtype":"m.text"},"ts":1740107547413,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$TJg79gzI-HliwOvN1kNEugK3XsTZCNmu62e-rCl7wJw"},
{"content":{"body":"I wholeheartedly disagree","m.mentions":{},"msgtype":"m.text"},"ts":1740107556942,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CAnfi-NNBsQkpQad81GzIDCjJrm5VqFZYbJnMA5YyM4"},
{"content":{"body":"why would it be relevant what number backs the ast nodes?","msgtype":"m.text"},"ts":1740107573103,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b011o628KlCuB0r4z7WTZQyoioD3IbVsGLKWwzE4Jbk"},
{"content":{"body":"Because we group those nodes for fast comparisons.","m.mentions":{},"msgtype":"m.text"},"ts":1740107586771,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bSbI2D7EABcIrcWrIJoCksiby4nvyft3-Cc5gvKSUZY"},
{"content":{"body":"other than to consumers who wouldn’t want the numbers to shift","msgtype":"m.text"},"ts":1740107590346,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bZWsGxnk7CjcHkOmBDri9pNW7mLRnTSTvtG3g8arIj8"},
{"content":{"body":"you’re implying that neighboring integers compare faster in engines?","msgtype":"m.text"},"ts":1740107609807,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6X_h-Y0neUg2ZoLXbQby1FaUuuDjqewx24mEUjjTgPw"},
{"content":{"body":"i.e., `node.kind >= SyntaxKind.FirstKeyword && node.kind <= SyntaxKind.LastKeyword`","format":"org.matrix.custom.html","formatted_body":"i.e., <code>node.kind &gt;= SyntaxKind.FirstKeyword &amp;&amp; node.kind &lt;= SyntaxKind.LastKeyword</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740107612566,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7yIAPaxtETDfdnKnQDtg7pC1adhJ0QbLzJErOBraxuE"},
{"content":{"body":"ah","msgtype":"m.text"},"ts":1740107617200,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$27yIQwfbAyU_1pnmVTR8ijIX6Oce1KzpbDawTP7Bn-M"},
{"content":{"body":"how comes we need a new syntax kind?","m.mentions":{},"msgtype":"m.text"},"ts":1740107630179,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$FFk6IxkWBYJUfV_7xEB9QVwipmds34VNj3fLUDkew9I"},
{"content":{"body":"so, good api design would suggest designing groups initially that had enough gaps to never run into that problem?","msgtype":"m.text"},"ts":1740107639284,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BEOYfyJ_VRQtFpg-GyWSp2ZC2cS-HhdxB7PVB_cI-Ng"},
{"content":{"body":"I think the SyntaxKind use case is quite specific to TS's code base","msgtype":"m.text"},"ts":1740107644615,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$D4wWL7JmsiMCiV50X1q0h4dRcTPe8W4jRBiAY2CoM5w"},
{"content":{"body":"Years ago it was suggested to write a function that converts them to ints, but that's only making the problem 100% worse and killing the performance of that check.","m.mentions":{},"msgtype":"m.text"},"ts":1740107651650,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FCjoHbvWpNP1lA38jMHN77X97eKUupmo5VD4RgamW7M"},
{"content":{"body":"I assure you it isn't.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$D4wWL7JmsiMCiV50X1q0h4dRcTPe8W4jRBiAY2CoM5w"}},"msgtype":"m.text"},"ts":1740107662924,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7ow65wLx1jTg59xR0m2Qoimj0Kf2Y7fPeAPoeJnBu8A"},
{"content":{"body":"alternative would be to add a new flag to the existing syntax kind","m.mentions":{},"msgtype":"m.text"},"ts":1740107673944,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$9NcRBFGP6pBFyFtP4DpBN3KS0Ui6ukz6P0Z06Zsqwo4"},
{"content":{"body":"* alternative would be to add a new flag to the existing syntax kind node","m.mentions":{},"m.new_content":{"body":"alternative would be to add a new flag to the existing syntax kind node","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9NcRBFGP6pBFyFtP4DpBN3KS0Ui6ukz6P0Z06Zsqwo4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740107676865,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$6Aaak7k1X2Ih3hXYdt9r9PpbvHdV6M4SvBYMlt4k5t0"},
{"content":{"body":"That is terrible for memory usage. ","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9NcRBFGP6pBFyFtP4DpBN3KS0Ui6ukz6P0Z06Zsqwo4"}},"msgtype":"m.text"},"ts":1740107695002,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UV1RLaMT0upBeSYhauv5KrY_w3haJAl9ZynM_UR2wbM"},
{"content":{"body":"How many programs are making more than a dozen different tagged variants of one kind of thing?","msgtype":"m.text"},"ts":1740107831553,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ls9b3cXhIP4RW7PhJkHoCuPkj9xYlWSHVvjPHWCRHdQ"},
{"content":{"body":"I have literally only ever done that when writing parsers or general purpose binary formats.","msgtype":"m.text"},"ts":1740107857502,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Gib1bNNOg5ISfMsTLt4NyBkly9nnWPypojaO5NLgeyk"},
{"content":{"body":"Anything using `jsdom`?","format":"org.matrix.custom.html","formatted_body":"Anything using <code>jsdom</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740107883170,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pOiPy-LktZEfmk65lpCzfHYi4gnPaiSlmXvCP9tc8QI"},
{"content":{"body":"Any DSL involving a tree of disjoint nodes? ","m.mentions":{},"msgtype":"m.text"},"ts":1740107906716,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NI9jP5Zt8SPA1tsHs2FvrdaO-N8nhyTNBxDJyN71xpc"},
{"content":{"body":"Jsdom itself, yes. Things using it, no.","msgtype":"m.text"},"ts":1740107908767,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$H8KZTCAMgcGS7iF-iJ4irTev5lga7xFtMzCaSoJDUJI"},
{"content":{"body":"How many programs are making DSLs?","msgtype":"m.text"},"ts":1740107928710,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$128xDKcXn64G8dsD10zxzHTmFW4AFO8Uttd76Rq0tV8"},
{"content":{"body":"Games in Unity, or any other JS framework?","m.mentions":{},"msgtype":"m.text"},"ts":1740107928778,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ocbxPZvDeZ1cakF3U_AiS_FjmliavISE_vrsRr9ZEM4"},
{"content":{"body":"most programs don’t deal with a DSL or a tree in first party code","msgtype":"m.text"},"ts":1740107934600,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$e_j_LrefAkR5Dp0d5NlAg9TJEuFJzyTNHD9eOVWrI2g"},
{"content":{"body":"wouldn't it only be an extra 64bits * number of enums in program? i.e. orders of magnitudes less impact than adding a prop to the identifier nodes","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UV1RLaMT0upBeSYhauv5KrY_w3haJAl9ZynM_UR2wbM"}},"msgtype":"m.text"},"ts":1740107937570,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$BuvNDU8RGH6SNgSuVcUhwcNqHfA4G5mk-Q6BuIOiFqU"},
{"content":{"body":"Storing an extra field on every Node just to group the kind of node? This is empirically terrible. We're regularly trying to claw back memory by removing fields we can infer rather than store.","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BuvNDU8RGH6SNgSuVcUhwcNqHfA4G5mk-Q6BuIOiFqU"}},"msgtype":"m.text"},"ts":1740107996648,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hinyTMVTV-zjKLjv0ASQRDnqqy0Cx4watUlX7VhJZ3w"},
{"content":{"body":"And how would you store something like that on the enum itself without having to do some kind of comparison/hashtable lookup just to pull out the group? ","m.mentions":{},"msgtype":"m.text"},"ts":1740108042094,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6qGverio4YxLcDllt7ayWd37ifoNvo-v6SSW08mIRck"},
{"content":{"body":"it's not every node, I think I'm not following the original issue","m.mentions":{},"msgtype":"m.text"},"ts":1740108049635,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$l4tmHRRXKoZ3h7JXD983u-_yv-HqPFY3F9W11XjzrFk"},
{"content":{"body":"At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on `node.kind` is essential. That would apply to any application focusing on performance optimization, not just TS.","format":"org.matrix.custom.html","formatted_body":"At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on <code>node.kind</code> is essential. That would apply to any application focusing on performance optimization, not just TS.","m.mentions":{},"msgtype":"m.text"},"ts":1740108209119,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$G0wSCuaDKJxjzcBDeW35tVgjArhNlx3rwKANwg6XMzA"},
{"content":{"body":"* At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on `node.kind` is essential. That would apply to any application focusing on performance optimization, not just the TS compiler.","format":"org.matrix.custom.html","formatted_body":"* At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on <code>node.kind</code> is essential. That would apply to any application focusing on performance optimization, not just the TS compiler.","m.mentions":{},"m.new_content":{"body":"At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on `node.kind` is essential. That would apply to any application focusing on performance optimization, not just the TS compiler.","format":"org.matrix.custom.html","formatted_body":"At least in TypeScript's case, ordered integer enum values are a major performance feature. Being able to do fast math on <code>node.kind</code> is essential. That would apply to any application focusing on performance optimization, not just the TS compiler.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$G0wSCuaDKJxjzcBDeW35tVgjArhNlx3rwKANwg6XMzA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740108227682,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ia9b2SGqwhNSCr7O6y3RbZjArmOGRa5-77wx3sxBucg"},
{"content":{"body":"That does not apply to any application for using on performance, just those with dozens of variants of one kind. Which is very very unusual outside of a parser, which most JS programs do not contain.","msgtype":"m.text"},"ts":1740108265004,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m8wFSLhsGlviHbjCQcQRaigC6AhJoMnwF1-KJxjBz6s"},
{"content":{"body":"also even if the TS codebase can’t use native enums, that doesn’t mean it’s not a valuable feature for the majority of programs","msgtype":"m.text"},"ts":1740108291094,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jHya-7G902Yy-bxVgV9fOu6fVNikjUJAU3ECzM2Uhww"},
{"content":{"body":"nicolo-ribaudo: explained it to me. I thought the new syntaxKind was to represent these new enum syntax.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: explained it to me. I thought the new syntaxKind was to represent these new enum syntax.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1740108357574,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$UM0OOAYv885mZDFQLEHmhKz64F2ky17w_FHieRCrPdM"},
{"content":{"body":"as opposed to just the general TS change of needing to add any new syntax","m.mentions":{},"msgtype":"m.text"},"ts":1740108370401,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$rUOb4SO7jWEt_rgz36U30dZzI-jmn-BWBaDLnT1gS5g"},
{"content":{"body":"caught up. sorry for confusion","m.mentions":{},"msgtype":"m.text"},"ts":1740108379156,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lDkPAqyjmnR_6-Y4wWrMNYf5nMK4Xc5fsWcdxRJwQbk"},
{"content":{"body":"I don't disagree, but I'm trying to thread the needle of:\n- convenient syntax\n- avoiding unnecessary compat risks\n- aligning with \"erasable types\"\n- fast math\n- allowing non-numeric enumerated values","format":"org.matrix.custom.html","formatted_body":"<p>I don't disagree, but I'm trying to thread the needle of:</p>\n<ul>\n<li>convenient syntax</li>\n<li>avoiding unnecessary compat risks</li>\n<li>aligning with \"erasable types\"</li>\n<li>fast math</li>\n<li>allowing non-numeric enumerated values</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740108406394,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Onap4QVnvfsiGlJHEB8bH1niNlzsA_2Q8OHLkXvYQAM"},
{"content":{"body":"if all can be achieved then great. But some of those don’t matter to the majority of codebases, so they should be the first to be sacrificed if needed","msgtype":"m.text"},"ts":1740108440921,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$aZJblFiY8ocvCx391lmVfUZsBUTFpujFCDSVannQglw"},
{"content":{"body":"auto-increment in userland with AOT inlining could be done with a magic comment :D","m.mentions":{},"msgtype":"m.text"},"ts":1740108482579,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$XmKWX3-JowWkB5PD-dEG7E36rc0-4mqlKMkcMLyKbIg"},
{"content":{"body":"I agree not lovely to build a custom tool for the project","m.mentions":{},"msgtype":"m.text"},"ts":1740108511337,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$eRMSz_bpvK0fp46eFiBLVDAYg9_3BRqz9yJ9qWc84yk"},
{"content":{"body":"but I think the case of these huge enums with 100s of values is rare","m.mentions":{},"msgtype":"m.text"},"ts":1740108523255,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pDunRANU4UCwxJRQN0jGRtYK-dckPBBWmHIz37KUYmA"},
{"content":{"body":"Extremely rare","msgtype":"m.text"},"ts":1740108559081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$3PaFDhb6GX4qTTcSE6CN0ik14lePAdkJ4GG7ps3weeY"},
{"content":{"body":"All of those bullets are currently satisfied by the *current* TS enum syntax. The only case that would not be would be something like \"Symbol by default\" or \"String by default\", which would break all but the last bullet point.","format":"org.matrix.custom.html","formatted_body":"All of those bullets are currently satisfied by the <em>current</em> TS enum syntax. The only case that would not be would be something like \"Symbol by default\" or \"String by default\", which would break all but the last bullet point.","m.mentions":{},"msgtype":"m.text"},"ts":1740108573788,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aY3gEOr11tutHdP_C73jWGN7l4FfJBUu20w9ac77t9E"},
{"content":{"body":"the `of T` syntax was suggested to make \"Symbol by default\" or \"String by default\" far easier.","format":"org.matrix.custom.html","formatted_body":"the <code>of T</code> syntax was suggested to make \"Symbol by default\" or \"String by default\" far easier.","m.mentions":{},"msgtype":"m.text"},"ts":1740108602944,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I4c4zLwUOaYqU7vkF9Do6C0JTkYd04dmr6zcHOrRSY0"},
{"content":{"body":"of T seems fine to me fwiw","msgtype":"m.text"},"ts":1740108629237,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$u5_9bDGr6cAtYtZ1CVsTRRkVwGS6mlPe4CF6zqh1Eas"},
{"content":{"body":"symbol and strings needing to be explicit assignment seems like an OK compromise","m.mentions":{},"msgtype":"m.text"},"ts":1740108640426,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$0E1M52gwTgJHEoyGylpdX53AZdvi61EJJj6U3lEuO80"},
{"content":{"body":"And that's exactly how current TS enums work (for String, at least. Symbol isn't currently supported, but could be)","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0E1M52gwTgJHEoyGylpdX53AZdvi61EJJj6U3lEuO80"}},"msgtype":"m.text"},"ts":1740108681820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kbal-VshAWe3rYpNezyofh58kfMizsIHWlhPIaRik_4"},
{"content":{"body":"(implicit strings is actually fine with me too, there’s no footgun there)","msgtype":"m.text"},"ts":1740108688971,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xbD_60SOTsxcAnGFF-PotE3iLimz4cKg-rmbtfXsIIc"},
{"content":{"body":"For almost all programs, the benefit of having something which does not make it trivial to introduce breaking changes outweighs the benefit of auto-incrementing values. So the default should not be auto incrementing integers.","msgtype":"m.text"},"ts":1740108709865,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ZqE9ogMV_vJ4xJ8Q6-XfUrEiijSbksLKu_5hDHg89Y0"},
{"content":{"body":"I like current TS enums! (minus the merging and not being 262)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kbal-VshAWe3rYpNezyofh58kfMizsIHWlhPIaRik_4"}},"msgtype":"m.text"},"ts":1740108747837,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$xVmrf_tZ-vVk52_vYnA9TKrzv3_oxfahP_brP_h6ZZY"},
{"content":{"body":"In a world where you had, say Symbol by default, how would that differ from auto-incrementing integers if you never explicitly tried to hard code the value of an enum?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZqE9ogMV_vJ4xJ8Q6-XfUrEiijSbksLKu_5hDHg89Y0"}},"msgtype":"m.text"},"ts":1740108798351,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ge3ItXh0GEkqkFsUaULjvPSOOEL1bDHvv3Yl7b3YvBg"},
{"content":{"body":"* In a world where you had Symbol by default how would that differ from auto-incrementing integers if you never explicitly tried to hard code the value of an enum?","m.mentions":{},"m.new_content":{"body":"In a world where you had Symbol by default how would that differ from auto-incrementing integers if you never explicitly tried to hard code the value of an enum?","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ge3ItXh0GEkqkFsUaULjvPSOOEL1bDHvv3Yl7b3YvBg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740108806515,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5wxupq6j6XfVv_yS_KSUpbzUW1QR9iMckwIIUcr9i7c"},
{"content":{"body":"because the symbols and strings aren’t ordered ","format":"org.matrix.custom.html","formatted_body":"because the symbols and strings aren’t ordered","msgtype":"m.text"},"ts":1740108815506,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MqgmnK6A6BP7nvkDNv2z-ZFb1DdH8weRyjfLWv84o_g"},
{"content":{"body":"That doesn't matter","m.mentions":{},"msgtype":"m.text"},"ts":1740108823195,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EMCvt0oSi1abTveFAbPfOpSLwxzO4Li-V-tWwNVTY5I"},
{"content":{"body":"The very ordering/grouping property you went with numbers is why it’s a footgun","msgtype":"m.text"},"ts":1740108827851,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OfG-Xa4NN18N__olLvEjkPJbkJ_Ufgbuzxi4GgvoeRs"},
{"content":{"body":"it’s the only thing that matters afaict?","msgtype":"m.text"},"ts":1740108836673,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$iGiIVUIG4bZ1zpstyOCnvpw76ocQ-AYTGuY3Bhknaz8"},
{"content":{"body":"If you consider the value to be a black box, which is what Symbol by default implies, then whether the integers are ordered is irrelevant.","m.mentions":{},"msgtype":"m.text"},"ts":1740108847647,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PSSgFspu0C57JmuGDZJnjKDah-nNUPNdNUGhJj0EtFs"},
{"content":{"body":"adding a thing shouldn’t change other things","msgtype":"m.text"},"ts":1740108853489,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cti2shr914iwkn4VWOgXfQYaNxLujfntDMluXdWjagE"},
{"content":{"body":"that’s the concern","msgtype":"m.text"},"ts":1740108867148,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$tsEgTejlN1nmU_3sE_oB7Wd2CN7dObFfHGKIOMY1HM8"},
{"content":{"body":"that concern only exists with auto increment, not with implicit values","msgtype":"m.text"},"ts":1740108884897,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$MQ-dLetRooOuMnMaYZErhOo6T4UB49YTYUlr2kZ0XoY"},
{"content":{"body":"the ordering/grouping property is a performance optimization, not a footgun. If they were Symbols by default, there is no way I could have the same performance optimizaiton.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OfG-Xa4NN18N__olLvEjkPJbkJ_Ufgbuzxi4GgvoeRs"}},"msgtype":"m.text"},"ts":1740108896674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XE9vvoPlhO2DnLHJuuh6olvV2vilc8jgFvqAMLLVkOk"},
{"content":{"body":"* the ordering/grouping property is a performance optimization, not a footgun. If they were Symbols by default, there is no way I could have the same performance optimization.","m.mentions":{},"m.new_content":{"body":"the ordering/grouping property is a performance optimization, not a footgun. If they were Symbols by default, there is no way I could have the same performance optimization.","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XE9vvoPlhO2DnLHJuuh6olvV2vilc8jgFvqAMLLVkOk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740108902917,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_9-FT93FBLtavmV_msa2su2ls9trODggnSe71im9AAg"},
{"content":{"body":"it’s both","msgtype":"m.text"},"ts":1740108914173,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$WFjLiQrJ33bo6UUCQBRJjjI6mpKkh57g1Vj6-AQqJw8"},
{"content":{"body":"For \"Symbol by default\", the initialized values change on every application startup","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Cti2shr914iwkn4VWOgXfQYaNxLujfntDMluXdWjagE"}},"msgtype":"m.text"},"ts":1740108930646,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hHzXED92APrQ8txnRcuBJ9gn2_AkE3Hvj7cHPdGc2VQ"},
{"content":{"body":"nobody objects to the perf part from what i can tell, but it’s inseparable from the footgun part.","msgtype":"m.text"},"ts":1740108933096,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EoqT9j0FWIKUWImrc1GYI6BTVPAgu61m-1gJ6ib7YF4"},
{"content":{"body":"> <@rbuckton:matrix.org> For \"Symbol by default\", the initialized values change on every application startup\n\nthat’s in observable tho since it’s just identity. So it’s fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24hHzXED92APrQ8txnRcuBJ9gn2_AkE3Hvj7cHPdGc2VQ\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For \"Symbol by default\", the initialized values change on every application startup</blockquote></mx-reply>that’s in observable tho since it’s just identity. So it’s fine.","m.relates_to":{"m.in_reply_to":{"event_id":"$hHzXED92APrQ8txnRcuBJ9gn2_AkE3Hvj7cHPdGc2VQ"}},"msgtype":"m.text"},"ts":1740108950459,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rO4qII2R1JUBR6Y2SpF2qgwMTkpUxLN9VpwVxcwZ4F0"},
{"content":{"body":"> <@rbuckton:matrix.org> For \"Symbol by default\", the initialized values change on every application startup\n\n * that’s unobservable tho since it’s just identity. So it’s fine.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24hHzXED92APrQ8txnRcuBJ9gn2_AkE3Hvj7cHPdGc2VQ\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For \"Symbol by default\", the initialized values change on every application startup</blockquote></mx-reply> * that’s unobservable tho since it’s just identity. So it’s fine.","m.new_content":{"body":"that’s unobservable tho since it’s just identity. So it’s fine.","msgtype":"m.text"},"m.relates_to":{"event_id":"$rO4qII2R1JUBR6Y2SpF2qgwMTkpUxLN9VpwVxcwZ4F0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740108957568,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lZxVIDqTfzFpeLyPbbQQeJnJ9HCtbeFBGHsEM-EJG8Y"},
{"content":{"body":"> <@rbuckton:matrix.org> the ordering/grouping property is a performance optimization, not a footgun. If they were Symbols by default, there is no way I could have the same performance optimization.\n\nSure there would! It just wouldn't be the default.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$XE9vvoPlhO2DnLHJuuh6olvV2vilc8jgFvqAMLLVkOk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />the ordering/grouping property is a performance optimization, not a footgun. If they were Symbols by default, there is no way I could have the same performance optimization.</blockquote></mx-reply>Sure there would! It just wouldn't be the default.","m.relates_to":{"m.in_reply_to":{"event_id":"$XE9vvoPlhO2DnLHJuuh6olvV2vilc8jgFvqAMLLVkOk"}},"msgtype":"m.text"},"ts":1740108962676,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RcRjrdGS3TOmSMC7Ck07Cw2alyUxmpMl9_PofN4LJvU"},
{"content":{"body":"Even without enums you could do what I do and have a generated file with the mapping of kinda to integers and regenerate whenever it changes.","msgtype":"m.text"},"ts":1740109033934,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EKJnTG6uY1y6JZxuEE7BGEf4M9VwNhGXlcWk-cps6vw"},
{"content":{"body":"This is such a specialized use case.","msgtype":"m.text"},"ts":1740109042512,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JhJIOaGUhjY2YXY7LjeGZjo1kpy92-c03xXCGXNyDAs"},
{"content":{"body":"Symbol by default wouldn't work with shared memory multithreading, though Auto-numbering and strings by default would.","m.mentions":{},"msgtype":"m.text"},"ts":1740109058496,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Jvo3ph2laSBX8zLhTLxWsvHazxaGlX5clCFOsLv2qm0"},
{"content":{"body":"*kinds not kinda","msgtype":"m.text"},"ts":1740109058953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rKuy00YeddhaEkoOQBvVYD8Y0R8bT_MO-Q7TdaUt9a8"},
{"content":{"body":"Auto-numbering works because the nature of `shared struct` correlation depends on the module resolution cache, so you can be fairly confident that the enum is evaluated in the same way in both the main and worker threads. Strings work because they would be the same. Symbols would not because they would result in unique values in each thread.","format":"org.matrix.custom.html","formatted_body":"Auto-numbering works because the nature of <code>shared struct</code> correlation depends on the module resolution cache, so you can be fairly confident that the enum is evaluated in the same way in both the main and worker threads. Strings work because they would be the same. Symbols would not because they would result in unique values in each thread.","m.mentions":{},"msgtype":"m.text"},"ts":1740109177711,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PRZk2LN2teprWGRHX9R4bFLXcKYb2GbUa93Y_uYU4Jo"},
{"content":{"body":"This requires something like a hashtable lookup to produce the integer for comparison, which has a major impact on performance. It wouldn't be a solution for this case.","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EKJnTG6uY1y6JZxuEE7BGEf4M9VwNhGXlcWk-cps6vw"}},"msgtype":"m.text"},"ts":1740109271867,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jWY_WulIz1i9K25YpcgqMt1PigBMpi1RP8Kh97dmwQI"},
{"content":{"body":"e.g., you go from something that is essentially `5 >= 1 && 5 <= 15` to `map[sym] >= 1 && map[sym] <= 15`, or `x = map[sym]; x >= 1 && x <= 15`, which requires more steps and more stack space in a tight loop/hot path","format":"org.matrix.custom.html","formatted_body":"e.g., you go from something that is essentially <code>5 &gt;= 1 &amp;&amp; 5 &lt;= 15</code> to <code>map[sym] &gt;= 1 &amp;&amp; map[sym] &lt;= 15</code>, or <code>x = map[sym]; x &gt;= 1 &amp;&amp; x &lt;= 15</code>, which requires more steps and more stack space in a tight loop/hot path","m.mentions":{},"msgtype":"m.text"},"ts":1740109380520,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vUCPzifmFkxBr6dnhlrl_6JCeRoehLAY7zDghyBkLAw"},
{"content":{"body":"I think you misunderstand. The mapping is just like `export const DECL_KIND = 12`","msgtype":"m.text"},"ts":1740109428484,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XqGcFloSRjGRpugZ31WK0cBX7e5J3syl9pGqOsXUP7M"},
{"content":{"body":"That's a compatibility issue, and again blows up the first four bullet points above.","m.mentions":{},"msgtype":"m.text"},"ts":1740109480081,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UxgiwRwxdUX8Bb3fbe3N85YRunxHY3x0YX-6hVWHMyA"},
{"content":{"body":"Right. It only satisfies TS's very niche use case. But other use cases do not have the auto-incrementing constraint.","msgtype":"m.text"},"ts":1740109542662,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$q4XDsL3npG2PtrEQLEYwJJiNoRKjs2mX43BV4jDJI00"},
{"content":{"body":"Auto-incrementing is a very unusual thing to want and is harmful to most programs. We should not make it easy to reach for.","msgtype":"m.text"},"ts":1740109603212,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$n0ZLqJcAUR0WQGedmbB7rLsbhsKhWHJT4imHQaj8ynI"},
{"content":{"body":"It's getting late. I need to think on this more and chat with my team tomorrow. Unfortunately, the auto-numbering concern has been the biggest blocker for years, IMO.","m.mentions":{},"msgtype":"m.text"},"ts":1740109937031,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMXCPlKfKnSuqzs5_OZ8w7hoPTH00OPfY_7h3gZAo40"},
{"content":{"body":"oh man, it hurts that someone has chosen REK for their signifier, given that those are my actual initials 😆","m.mentions":{},"msgtype":"m.text"},"ts":1740115074156,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$381alOzAG37Fy9D0gD4iuHoo749DDZioNQjayK-RytM"}
]