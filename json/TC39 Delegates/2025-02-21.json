[
{"content":{"body":"And I do think there's a world where `enum` could be extended to support ADTs, e.g.:\n```ts\nenum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And I do think there's a world where <code>enum</code> could be extended to support ADTs, e.g.:</p>\n<pre><code class=\"language-ts\">enum Message {\n  Quit,\n  Write(text),\n  Move({x, y}),\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096079107,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$icQsLLkhUOdHYW3wCH70wGVr6HJTPR-fjqYNCXLKMkc"},
{"content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes?","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"ts":1740096093260,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o"},
{"content":{"body":"* Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"* <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{},"m.new_content":{"body":"Rob Palmer: do you have the link to the stdlib breakout session notes? nvm","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a>: do you have the link to the stdlib breakout session notes? nvm","m.mentions":{"user_ids":["@robpalme:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kSfjyhGdcMml71nMPgto0JY7Gz6fI460BiBV8nifA_o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740096161373,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$3D5QpfklUfNM94mfghDXu-O9Nt22X9_TvUXnPKkcX8A"},
{"content":{"body":"did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0vrnzqsOCPbnqX9Zl8d_pc0hA-r111287KbDERAdHXk"}},"msgtype":"m.text"},"ts":1740096280515,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"},
{"content":{"body":"📣 come back to the main plenary room for a summary of breakouts","m.mentions":{},"msgtype":"m.text"},"ts":1740096488286,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$DxmXOAxlyrttu2INzdqqc1GFvgTtKR2y0TzqbnRAZ6M"},
{"content":{"body":"> <@bakkot:matrix.org> did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?\n\nAnother reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>did you mean https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-rc/#the---erasablesyntaxonly-option ?</blockquote></mx-reply>Another reason I love TypeScript is that they frequently know what I want—and give it to me—before I do","m.relates_to":{"m.in_reply_to":{"event_id":"$rB32KC-J3G_pc5WlwiF868xMalB755ptrwh3BVOYeyk"}},"msgtype":"m.text"},"ts":1740096540955,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$pw2vfR6bSREr2bUZ3kEnWRJ31EOEjqRYSAfetC1EnxA"},
{"content":{"body":"I'll take notes of the summaries of the presentatoins in https://docs.google.com/document/d/17u9l-TRdEasF5cKHJnTmcBUNRqGQpsYxLNraV8sChfw/edit?tab=t.0","m.mentions":{},"msgtype":"m.text"},"ts":1740096620907,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$z4g4ZFGfcJ_tufvTadHX7biVdCmVjF5KcQoGKwgMu_8"},
{"content":{"body":"> <@anthonybullard:matrix.org> Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)\n\n+1, although current TS enums have some nice properties, they are ultimately inessential","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%240MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E\">In reply to</a> <a href=\"https://matrix.to/#/@anthonybullard:matrix.org\">@anthonybullard:matrix.org</a><br>Enum with its current TS implementation is considered an anti-pattern today, not to say that a native enum implementation in ES would not be much better (since most C-like languages have them)</blockquote></mx-reply>+1, although current TS enums have some nice properties, they are ultimately inessential","m.relates_to":{"m.in_reply_to":{"event_id":"$0MW0lA30ZrzMCHS88ZA5QA5ALXb0KyWKj49uCxuBB5E"}},"msgtype":"m.text"},"ts":1740096797013,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$FYdHgtBn4qMJPclg0q5wadGZx8b0vjtFUM4hyrwdhGU"},
{"content":{"body":"I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding `enum`? The two things I've heard have been:\n- Don't use `enum` in TS because it's not in ES\n- `enum` defaulting to numbers and not something like `Symbol()`\n\n","format":"org.matrix.custom.html","formatted_body":"<p>I'd still like to hear feedback as to what exactly is considered an anti-pattern regarding <code>enum</code>? The two things I've heard have been:</p>\n<ul>\n<li>Don't use <code>enum</code> in TS because it's not in ES</li>\n<li><code>enum</code> defaulting to numbers and not something like <code>Symbol()</code></li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740096977072,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kq6L0IwUifHyu2XHnbo6TrZU9BljDGNQaUmoBgiL5P0"},
{"content":{"body":"(considering the alternative is manually defining a fixed set of forgeable strings, or unforgeable but inconvenient objects or symbols, and manually validating those)","m.mentions":{},"msgtype":"m.text"},"ts":1740097025948,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sCpxc7SD0KyTyMMdy8-QZyi9jGTeTWZcjkmB_KbOdQk"},
{"content":{"body":"Maybe the merging too?","m.mentions":{},"msgtype":"m.text"},"ts":1740097026281,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WyTV1pCLH-jOhqGKIP-89GIueD5AngcfgpBDC1tRUzg"},
{"content":{"body":"Merging? as in `enum A { ... } enum A { ... }`?","format":"org.matrix.custom.html","formatted_body":"Merging? as in <code>enum A { ... } enum A { ... }</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1740097042741,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3U_Vjbn2HGc1Fv5xfRqwzLtKMGTjRBw5qXPKMkFTp0"},
{"content":{"body":"I'd be suprised if a 262 version had that","m.mentions":{},"msgtype":"m.text"},"ts":1740097065374,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$svS1bBpnHk1h0NU1Zs2HEG3gfm6TUxwof2etHhDZiGA"},
{"content":{"body":"I agree that's an anti-pattern and is something we probably wouldn't want to carry forward.","m.mentions":{},"msgtype":"m.text"},"ts":1740097104163,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$crWcQG8b5Nwpdaub5QlkmU0U_HublMx7_4cp7tGLak0"},
{"content":{"body":"enums being numbers is also bad, in my opinion","m.mentions":{},"msgtype":"m.text"},"ts":1740097275585,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vLt4elVqOZ_BhNWXBHGm3JLpWCFortfVMiAYv7dfjRw"},
{"content":{"body":"it makes it too easy for adding new values to accidentally be a breaking change","m.mentions":{},"msgtype":"m.text"},"ts":1740097358574,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$alRvHg1EEHqmz0e3leGOy2VHS4bq1s5vSD2HFX4Aeik"},
{"content":{"body":"Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:\n\n```ts\nenum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n << 0n,\n  Flag2 = 1n << 1n,\n}\n\n// etc.\n```","format":"org.matrix.custom.html","formatted_body":"<p>Regarding Number vs String vs Symbol, my version of the proposal had a solution to that:</p>\n<pre><code class=\"language-ts\">enum Color of String {\n  Red, // \"Red\"\n  Green, // \"Geen\"\n  Blue, // \"Blue\"\n}\n\nenum Kind of Symbol {\n  A, // Symbol(\"A')\n  B, // Symbol(\"B\")\n}\n\nenum BigFlags of BigInt {\n  None, // 0n\n  Flag1 = 1n &lt;&lt; 0n,\n  Flag2 = 1n &lt;&lt; 1n,\n}\n\n// etc.\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740097380495,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0kTQIAPqGr7X-5r29ZktkqnkC1n0Cg7hpObnT1a_m9g"},
{"content":{"body":"I would be ok with them being strings but at that point you might as well just use strings","m.mentions":{},"msgtype":"m.text"},"ts":1740097390501,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$823a98JLAi0KQdcWMfUk6bTFChzO47P3UiHFNFMbhKs"},
{"content":{"body":"it's still helpful to simplify validation and enumeration","m.mentions":{},"msgtype":"m.text"},"ts":1740097406363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$EjB6YwQvQU9tSOpdBFAhISM0dfKwmN0FgWHie8sWuaY"},
{"content":{"body":"Numeric enums are the most common in C-like languages, and being numbers might be necessary for TS compat. ","m.mentions":{},"msgtype":"m.text"},"ts":1740097440820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9ScWdwpVO3PkGYDnKxgD_J-bMq9MyLUsrD98kL76klY"},
{"content":{"body":"yeah the experience from C-like languages is one of the main reasons I am opposed to them being numbers","m.mentions":{},"msgtype":"m.text"},"ts":1740097464510,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7-saBXaVziB18-Imm2gQqBPLpi8vSyl02_ijpb2qtuc"},
{"content":{"body":"Due to how existing .d.ts files work, it would be almost impossible to change that default behavior for TS.","m.mentions":{},"msgtype":"m.text"},"ts":1740097490752,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XYNudyQhI2uXo8X5otvCQ63DeoTy-jFMiPd0G-on194"},
{"content":{"body":"understandable, and I wouldn't want to add enums which conflicted with TS, but the conclusion I'd draw is that we should not add enums to JS at all","m.mentions":{},"msgtype":"m.text"},"ts":1740097525010,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tG846D-wldFO3FB_x5ztLCpOIM2rfr2zeRG6Fd2pHtI"},
{"content":{"body":"would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it","m.mentions":{},"msgtype":"m.text"},"ts":1740097625333,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"},
{"content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"ts":1740097641021,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"},
{"content":{"body":"> <@ljharb:matrix.org> would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it\n\nIME no","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>would a TS user notice the value of the enum in typical usage? or is it just that a JS consumer would be using it</blockquote></mx-reply>IME no","m.relates_to":{"m.in_reply_to":{"event_id":"$mDXjNf8g5vmtintA0ZdKNe6BmNjZ86I6DBodDZZElvM"}},"msgtype":"m.text"},"ts":1740097843480,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Juk7G_9Se5UZGuTzAv2cG9OQYcQg7TApuchEUylRdLs"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nNote that I can’t replicate the enum type unsafety example in this and have not encountered it previously","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br>Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Note that I can’t replicate the enum type unsafety example in this and have not encountered it previously","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740097921144,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$Ko703uVdkIhX8CIdMqNuZtHiYM-Cet_1frDo3axxysE"},
{"content":{"body":"* Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","m.new_content":{"body":"Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh","msgtype":"m.text"},"m.relates_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740097993836,"senderName":"rekmarks","senderId":"@rekmarks:matrix.org","id":"$ixGXaLZwhQ4yQkAnLWMqoep8BPe1Z9stnOmko6feezE"},
{"content":{"body":"> <@rekmarks:matrix.org> Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh\n\nSome of those reasons are no longer true. I'll read through and follow up after dinner. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rekmarks:matrix.org\">@rekmarks:matrix.org</a><br />Re: “enums are an antipattern”, I haven’t verified all of the claims in this myself (and it’s a bit sensationalist) but have experienced / agree with a plurality of them: https://dev.to/ivanzm123/dont-use-enums-in-typescript-they-are-very-dangerous-57bh</blockquote></mx-reply>Some of those reasons are no longer true. I'll read through and follow up after dinner.","m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740098256398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N6R02LGF85Edtj9jQLpXrMm_OFvOwoXykJ3sx9ydoV4"},
{"content":{"body":"https://github.com/linusg/ecmascript-wiki","m.mentions":{},"msgtype":"m.text"},"ts":1740098486705,"senderName":"canadahonk","senderId":"@canadahonk:matrix.org","id":"$aL4WEMShOG1HKFGbtnx5EBg4GeLun5go4Vln3-A2zmk"},
{"content":{"body":"1. Enum's emit code - is irrelevant if `enum` exists natively\n2. Numeric types unsafe - this has since been fixed\n3. String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum\n\nThere is an issue with TS `enum` where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>Enum's emit code - is irrelevant if <code>enum</code> exists natively</li>\n<li>Numeric types unsafe - this has since been fixed</li>\n<li>String ENUM's are named types - this does seem to be an odd behavior, though its specific to TS type checking and would be irrelevant to an ES enum</li>\n</ol>\n<p>There is an issue with TS <code>enum</code> where there are a few cases where an enum member value's emit can be type-directed, but I think that's fixable in TS and wouldn't impact an ES enum.</p>\n","m.mentions":{"user_ids":["@rekmarks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GB4DhtgOKdLlaiyPyNawmHuXIDtDoqdRPAYL29sP8Q8"}},"msgtype":"m.text"},"ts":1740099423720,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$horCq_IFEjZt3dtl3vWyW4xQO0HA1xT7mzYgSgen8Q8"},
{"content":{"body":"Also, I still think `Number` values make the most sense for the default, especially when working with `Atomics` (e.g., `.load()`, `.xor()`, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with `switch`. Numbers generally just work in most places.","format":"org.matrix.custom.html","formatted_body":"Also, I still think <code>Number</code> values make the most sense for the default, especially when working with <code>Atomics</code> (e.g., <code>.load()</code>, <code>.xor()</code>, etc.) and I/O (protocols, headers, etc.), not to mention bitmasks. I also imagine number comparisons to be generally more efficient than string comparisons. I imagine they're also more readily inlineable into something like a jump table for use with <code>switch</code>. Numbers generally just work in most places.","m.mentions":{},"msgtype":"m.text"},"ts":1740099739357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1nLJaAF_ZamJTTh82MT7hHCvvxB4lhnbkX8l3MuN6pM"},
{"content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might *require* the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS.","m.mentions":{},"msgtype":"m.text"},"ts":1740099849028,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE"},
{"content":{"body":"* One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"* One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"m.new_content":{"body":"One \"compatible\" approach I've also considered is that an ES `enum` might _require_ the `of` clause if there are any members that are missing initializers. TS `enum` could elide it (as it does today), but emit `enum E of Number {}` to JS, or in the case of auto-numbering, emit `enum E { A = 0, B = 1, ... }` and populate the auto-numbered enums during emit.","format":"org.matrix.custom.html","formatted_body":"One \"compatible\" approach I've also considered is that an ES <code>enum</code> might <em>require</em> the <code>of</code> clause if there are any members that are missing initializers. TS <code>enum</code> could elide it (as it does today), but emit <code>enum E of Number {}</code> to JS, or in the case of auto-numbering, emit <code>enum E { A = 0, B = 1, ... }</code> and populate the auto-numbered enums during emit.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$g3QO8rc8ECmYKdG5gE9NxFwTagPQn8Yh3W6DPdzq9bE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740100158514,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KLFwkNx2b8Fj3t0nW-JprDjg2CpxaPylbrMDq3Ifsv4"},
{"content":{"body":"do we need the `of Type` ? If an MVP was that the values had to be explicitly assigned, no auto-increment.\n\n```\nconst MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A & enum.B\n};\n```","format":"org.matrix.custom.html","formatted_body":"<p>do we need the <code>of Type</code> ? If an MVP was that the values had to be explicitly assigned, no auto-increment.</p>\n<pre><code>const MyFlags = enum {\n   None: 0,\n   A: 1,\n   B: 2,\n   AB: enum.A &amp; enum.B\n};\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740102323941,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cOxMb8wT7rHDQSQtCmQRivkxbfW_I4g9312BjHYYZA0"},
{"content":{"body":"as ADT wouldn't need them right?","m.mentions":{},"msgtype":"m.text"},"ts":1740102521612,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$o6_QJVmUSTfid7n6cXXqarVkYQL6J6KKprJo4I6SUBk"},
{"content":{"body":"The `of Type` syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of `enum E { A = Symbol(), B = Symbol(), ... }` would be unnecessarily unwieldy.","format":"org.matrix.custom.html","formatted_body":"The <code>of Type</code> syntax is a convenience for those who specifically prefer something like a string or symbol by default for enums. In those cases, the repetition of <code>enum E { A = Symbol(), B = Symbol(), ... }</code> would be unnecessarily unwieldy.","m.mentions":{},"msgtype":"m.text"},"ts":1740102528927,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-DVHX5yR8-9DMu4CdAcyT6XjMtg6nVkbcKt8Jk_NZ3k"},
{"content":{"body":"It also provides a convenient way to describe the defaulting behavior for both auto numbered enums as well as string and numeric enums: https://github.com/rbuckton/proposal-enum?tab=readme-ov-file#evaluation","m.mentions":{},"msgtype":"m.text"},"ts":1740102590739,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KmxRaFqYfrtJrBPhRpysH6ff0rpN9H79k6f-4kpZ1vU"},
{"content":{"body":"if it's a connivence could it be a follow on?","m.mentions":{},"msgtype":"m.text"},"ts":1740102652196,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$L0Zb5Z3yGwGLao4wo1r_DYtYJOjMbAS9PVoE-QKQ4Y0"},
{"content":{"body":"IMO, the above syntax is a non-starter. `const x = enum` certainly doesn't help the \"erasable syntax\" case for TS, and `enum.A` would prevent future use of `enum` for any other metaproperty, which was a blocking issue for the the `class.x` syntax as well.","format":"org.matrix.custom.html","formatted_body":"IMO, the above syntax is a non-starter. <code>const x = enum</code> certainly doesn't help the \"erasable syntax\" case for TS, and <code>enum.A</code> would prevent future use of <code>enum</code> for any other metaproperty, which was a blocking issue for the the <code>class.x</code> syntax as well.","m.mentions":{},"msgtype":"m.text"},"ts":1740102704429,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$s6eRgBuObnoRr9kG5t-_zqbCUAih_AjwfLP_GQ4EJnM"},
{"content":{"body":"I'd personally be ok with the bare `A` resolving the the member","format":"org.matrix.custom.html","formatted_body":"I'd personally be ok with the bare <code>A</code> resolving the the member","m.mentions":{},"msgtype":"m.text"},"ts":1740102751505,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$MjmAZ9mrxNk-piug-BpqmyiE7M_bUklkRPq9GLAJ3bg"},
{"content":{"body":"* I'd personally be ok with the bare `A` resolving to the member","format":"org.matrix.custom.html","formatted_body":"* I'd personally be ok with the bare <code>A</code> resolving to the member","m.mentions":{},"m.new_content":{"body":"I'd personally be ok with the bare `A` resolving to the member","format":"org.matrix.custom.html","formatted_body":"I'd personally be ok with the bare <code>A</code> resolving to the member","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MjmAZ9mrxNk-piug-BpqmyiE7M_bUklkRPq9GLAJ3bg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740102758653,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$qS25xAu2gj2Z33V0fqxEVL0YJJsJPt5wiSE3oh1pTG0"},
{"content":{"body":"I would not, unfotunately.","m.mentions":{},"msgtype":"m.text"},"ts":1740102761425,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fT7xl0Vd2aTWF-uIiui21Ybi8AvD9NmfTKlpV9m3yvI"},
{"content":{"body":"how comes? you're early example had it bare","m.mentions":{},"msgtype":"m.text"},"ts":1740102789237,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LNaGfdzupNCgmwR7lodKNtb6kLSeY3_6kfEcYI14PYQ"},
{"content":{"body":"`enum.A` would have the exact same issue as `class.A`, and I've come around to agreeing with that position.","format":"org.matrix.custom.html","formatted_body":"<code>enum.A</code> would have the exact same issue as <code>class.A</code>, and I've come around to agreeing with that position.","m.mentions":{},"msgtype":"m.text"},"ts":1740102790248,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$d6Hpupn-cdQmMbBjw4qJkazdbEoD-AULL8Z7G4U-81Y"},
{"content":{"body":"* how comes? your early example had it bare","m.mentions":{},"m.new_content":{"body":"how comes? your early example had it bare","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LNaGfdzupNCgmwR7lodKNtb6kLSeY3_6kfEcYI14PYQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740102794264,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$s3AOB-PzCG5CHZWV1j65qnNAW57KIioTkOlKMVyx0kU"},
{"content":{"body":"One of the motivations for an `enum` proposal would be to reduce the runtime syntax friction between TS and ES. Proposing a wholly different syntax does not address that concern and would make adoption very difficult.","format":"org.matrix.custom.html","formatted_body":"One of the motivations for an <code>enum</code> proposal would be to reduce the runtime syntax friction between TS and ES. Proposing a wholly different syntax does not address that concern and would make adoption very difficult.","m.mentions":{},"msgtype":"m.text"},"ts":1740102843610,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AlaaDOucaPT1JylRclpirO6iEhvozV7AnW7BxGGa-2M"},
{"content":{"body":"makes sense. but we potentially need the syntax to be at least slightly different  if the semantics are not identical?","m.mentions":{},"msgtype":"m.text"},"ts":1740103032057,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cBpoNmxLHum2NuDdMumzINbNkTy4YKghX87QHhBh7C8"},
{"content":{"body":"Also, the mechanism for explicit autonumbering as part of emit ends up not being truly \"eraseable\" as it requires the introduction of temporaries to handle initializers, i.e.:\n\n```ts\nimport { x } from \"./other.js\";\nenum E {\n  A = x,\n  B,\n  C\n}\n```\nThis is also an example of the problematic type-directed emit in TS today that I hope to fix in the future. I cannot statically know what the value of `x` is without type checking, and thus could not reliably emit the auto-incremented values for B and C without additional overhead, i.e.:\n\n```js\nvar _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Also, the mechanism for explicit autonumbering as part of emit ends up not being truly \"eraseable\" as it requires the introduction of temporaries to handle initializers, i.e.:</p>\n<pre><code class=\"language-ts\">import { x } from \"./other.js\";\nenum E {\n  A = x,\n  B,\n  C\n}\n</code></pre>\n<p>This is also an example of the problematic type-directed emit in TS today that I hope to fix in the future. I cannot statically know what the value of <code>x</code> is without type checking, and thus could not reliably emit the auto-incremented values for B and C without additional overhead, i.e.:</p>\n<pre><code class=\"language-js\">var _a;\nenum E {\n  A = _a = x,\n  B = ++_a,\n  C = ++_a,\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103044435,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5f9NS_vKcVj66_CHddDKJ3plt0on_7OVijnzxXnzMJY"},
{"content":{"body":"The `of` syntax is an invocation of an explicit mapper function that handles defining the default initializer of each value.","format":"org.matrix.custom.html","formatted_body":"The <code>of</code> syntax is an invocation of an explicit mapper function that handles defining the default initializer of each value.","m.mentions":{},"msgtype":"m.text"},"ts":1740103086765,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u1Zv68D0rdE2H4XsYy3Pl_MkNbNmWLmPgzdEfWflPkU"},
{"content":{"body":"Ideally, I would prefer a native syntax where `enum E {}` is the equivalent of `enum E of Number {}`, and thus the syntax could be identical in both cases.","format":"org.matrix.custom.html","formatted_body":"Ideally, I would prefer a native syntax where <code>enum E {}</code> is the equivalent of <code>enum E of Number {}</code>, and thus the syntax could be identical in both cases.","m.mentions":{},"msgtype":"m.text"},"ts":1740103128157,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2L5lXVGbmlxDuAwRS7i46UaQGfb1h6gNTR0GQSqbUrM"},
{"content":{"body":"This would also allow those who have a specific preference around using strings or symbols to express that via, e.g., a linter, while preserving the predominant base case of using numbers.","m.mentions":{},"msgtype":"m.text"},"ts":1740103199339,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DkPALrTZtqdhJfPy90rQS80uU1DkHcsq4NbLJvcfcgw"},
{"content":{"body":"I'm probably in the minority, I prefer the values being explicit. Even if it is repetitive","m.mentions":{},"msgtype":"m.text"},"ts":1740103335197,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$teSNV4B5dTQw_qvsZq8u52bC_g2oDRYwrrv8meTdcwg"},
{"content":{"body":"are there other languages where the enum delegates to a runtime protocol to construct the values?","m.mentions":{},"msgtype":"m.text"},"ts":1740103405759,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"},
{"content":{"body":"The other caveat of TS vs ES enums to address would be the reverse mapping aspect of TS enums, which is great for diagnostics purposes but unreliable for serialization/deserialization use cases. That's why my version of the enum proposal offloads reverse mappings to a symbol protocol and is made accessible via the `Enum` API. It introduces a more reliable and formal mechanism for parsing and serializing.","format":"org.matrix.custom.html","formatted_body":"The other caveat of TS vs ES enums to address would be the reverse mapping aspect of TS enums, which is great for diagnostics purposes but unreliable for serialization/deserialization use cases. That's why my version of the enum proposal offloads reverse mappings to a symbol protocol and is made accessible via the <code>Enum</code> API. It introduces a more reliable and formal mechanism for parsing and serializing.","m.mentions":{},"msgtype":"m.text"},"ts":1740103408028,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$58W96cpyTp_x4HQNzMrZv32eA3MXvJlEwraFm7cb8mY"},
{"content":{"body":"Python does","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"}},"msgtype":"m.text"},"ts":1740103431807,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NW1csgTS6z1d48C6u4Zznq1EPTn5BsRlgmQ12Pz7eS0"},
{"content":{"body":"thanks, I'll check that out","m.mentions":{},"msgtype":"m.text"},"ts":1740103444615,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$1cXWtmaAExrWLNb6F3Xev7778PJp2fpm3GGPyujxB6U"},
{"content":{"body":"```py\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">class E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103512912,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NG4h_sTHNA6jPJzjGoPZpDx7zfUDGAbYiekU_ExAntE"},
{"content":{"body":"the parts I like the most about the proposal is the self reference during initialisation, and the object being frozen.","m.mentions":{},"msgtype":"m.text"},"ts":1740103521227,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$cn2z9Ne7M-XayBsvuEmK3oftlcET_HBvX-BetLr6bv0"},
{"content":{"body":"Also, while not quite runtime, Go uses `iota`. C# enums use a similar auto-numbering mechanism to the one defined in TypeScript, but are also handled at compile-time.","format":"org.matrix.custom.html","formatted_body":"Also, while not quite runtime, Go uses <code>iota</code>. C# enums use a similar auto-numbering mechanism to the one defined in TypeScript, but are also handled at compile-time.","m.mentions":{},"msgtype":"m.text"},"ts":1740103555626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HmnrIboygl7PMLlz1MeNV8tbMKtI4PBRhEWbjkNNUVI"},
{"content":{"body":"The other benefit to a syntactic `enum` type would be future support for decorators for things like control over serialization, formatting, and marshalling, e.g.:\n\n```ts\nenum Position of Symbol {\n  @JSONSerializer.Alias(\"emp\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Employee,\n\n  @JSONSerializer.Alias(\"mgr\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Manager,\n\n  ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>The other benefit to a syntactic <code>enum</code> type would be future support for decorators for things like control over serialization, formatting, and marshalling, e.g.:</p>\n<pre><code class=\"language-ts\">enum Position of Symbol {\n  @JSONSerializer.Alias(\"emp\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Employee,\n\n  @JSONSerializer.Alias(\"mgr\")\n  @JSONSerializer.SerializeAs(\"employee\")\n  Manager,\n\n  ...\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1740103788145,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EUCUvhFeVCZemiIRjU0ho9xFnYBzMZ84BvbWEgWBpik"},
{"content":{"body":"* ```py\nfrom enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"* <pre><code class=\"language-py\">from enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```py\nfrom enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-py\">from enum import Enum, auto\nclass E(Enum):\n  A = auto()\n  B = auto()\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$NG4h_sTHNA6jPJzjGoPZpDx7zfUDGAbYiekU_ExAntE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740103880563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iBwvEbPejW60K0JOUunw6XUy2BEnaC6_BY7Usi2OHlY"},
{"content":{"body":"This is also a hard comparison to make, considering the ratio of dynamic to static languages. By nature of JS being dynamic, more things often need to be done at runtime or are expressed via runtime operations (i.e., `Object.defineProperty`, `Reflect.*`, etc.).","format":"org.matrix.custom.html","formatted_body":"This is also a hard comparison to make, considering the ratio of dynamic to static languages. By nature of JS being dynamic, more things often need to be done at runtime or are expressed via runtime operations (i.e., <code>Object.defineProperty</code>, <code>Reflect.*</code>, etc.).","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ILn-d3RAZnxnhtQ-hzCzVIy28xCcafxjkTCAEx4cWoI"}},"msgtype":"m.text"},"ts":1740104083785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bv3G13Gczsxb0iVxlWR2DPRhCeISNyY2_5awksJ54kI"},
{"content":{"body":"I also hold out hope that a syntactic `enum` might be able to establish an object shape for the enum declaration that could eventually be used by bytecode generators for specific performance tuning, much like how we hope the fixed shape nature of `struct` could be utilized. For example, a `switch` over cases of `E.A`, `E.B` could potentially inline those values if it is known that `E` is an enum with a fixed shape, and thus convert the `switch` to a jump table.","format":"org.matrix.custom.html","formatted_body":"I also hold out hope that a syntactic <code>enum</code> might be able to establish an object shape for the enum declaration that could eventually be used by bytecode generators for specific performance tuning, much like how we hope the fixed shape nature of <code>struct</code> could be utilized. For example, a <code>switch</code> over cases of <code>E.A</code>, <code>E.B</code> could potentially inline those values if it is known that <code>E</code> is an enum with a fixed shape, and thus convert the <code>switch</code> to a jump table.","m.mentions":{},"msgtype":"m.text"},"ts":1740104276192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iNX7xWsqH-NVm2ZL1RwSmTpntS0lGzgIX8AkYFbicRI"},
{"content":{"body":"As mentioned in one of the talks today, that's not something we can depend on, but its potentially feasible w/o needing any kind of whole program optimization on the part of the bytecode generator.","m.mentions":{},"msgtype":"m.text"},"ts":1740104342785,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bgY6jnEmk4dJzbIjYk85Wvl1eV4eUs85oRfQTdk1LtU"},
{"content":{"body":"if enums are mostly static I can see minifiers being able to inline the values","m.mentions":{},"msgtype":"m.text"},"ts":1740104362867,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$5mhxhc_Tf7fMF0_RdZqn7OtlCCYwUbQDBv_Yef1yo7c"},
{"content":{"body":"the constructs might make that too hard","m.mentions":{},"msgtype":"m.text"},"ts":1740104376962,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$RRPhPSeYpGmgSOSs4UoS3phh-Ltl1etIuEezzgVpChE"},
{"content":{"body":"* the constructors might make that too hard","m.mentions":{},"m.new_content":{"body":"the constructors might make that too hard","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RRPhPSeYpGmgSOSs4UoS3phh-Ltl1etIuEezzgVpChE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1740104380061,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$KnxdyXcfeG1hmBVpzIYYnSE--xGCEBoHGdOjonveLjg"},
{"content":{"body":"That's already the case in tools like `esbuild`","format":"org.matrix.custom.html","formatted_body":"That's already the case in tools like <code>esbuild</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740104381809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-4KDJF7xCVnMrQ8W4fiUSGC933fbGPNqyjHiAKh6T-A"},
{"content":{"body":"right, but there isn't a symbol protocol today","m.mentions":{},"msgtype":"m.text"},"ts":1740104397442,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$WwxO1W1tgItl1Q9i8PxL7XiGveSdFP-acEi9XGhZHJg"},
{"content":{"body":"But that depends on whole program optimization. The `enum`-ness of `E` could be encoded into its map/shape and is thus available when collecting type feedback on a `switch` case","format":"org.matrix.custom.html","formatted_body":"But that depends on whole program optimization. The <code>enum</code>-ness of <code>E</code> could be encoded into its map/shape and is thus available when collecting type feedback on a <code>switch</code> case","m.mentions":{},"msgtype":"m.text"},"ts":1740104442022,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vF9bXBZFNcd_eMIqLxnhBmPxLaAeqqfaVOd4JWerkFc"},
{"content":{"body":"doesn't need to be whole program, only need to see the two modules","m.mentions":{},"msgtype":"m.text"},"ts":1740104512002,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$scWy6YF4kQuRVF5eny-K37oSueLO-1R6pQbllQNVYHQ"},
{"content":{"body":"follow the import and look at the export","m.mentions":{},"msgtype":"m.text"},"ts":1740104520271,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$th06gGnBCyIl_MebOmVUBfqODcFPpIc8gBf9XF7l0iw"},
{"content":{"body":"Are you referring to the `@@toEnum` symbol? ","format":"org.matrix.custom.html","formatted_body":"Are you referring to the <code>@@toEnum</code> symbol?","m.mentions":{"user_ids":["@aclaymore:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WwxO1W1tgItl1Q9i8PxL7XiGveSdFP-acEi9XGhZHJg"}},"msgtype":"m.text"},"ts":1740104548975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h0mou4b3poyedjQk_8dqDqgUJGkYo3ZZA7pIN67qq58"},
{"content":{"body":"I'm not sure if the proposal changed since I last looked","m.mentions":{},"msgtype":"m.text"},"ts":1740104585377,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$P5Msk5RynncP8OmUo9cEGt8uRdpYVbNRYU-kH6lSSr0"},
{"content":{"body":"I thought the `of T` looked up a symbol on T","format":"org.matrix.custom.html","formatted_body":"I thought the <code>of T</code> looked up a symbol on T","m.mentions":{},"msgtype":"m.text"},"ts":1740104591613,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$lgQTMeU34HFRfnB9lv_RuM0NY1EsaeDllm8SCvJuCZU"},
{"content":{"body":"We could make those frozen on built-in constructors, so for the most common use cases it can be determined statically. Edge cases using a custom `@@toEnum` would be slower, but thats pay-to-play. Also, the performance cost is only during startup.","format":"org.matrix.custom.html","formatted_body":"We could make those frozen on built-in constructors, so for the most common use cases it can be determined statically. Edge cases using a custom <code>@@toEnum</code> would be slower, but thats pay-to-play. Also, the performance cost is only during startup.","m.mentions":{},"msgtype":"m.text"},"ts":1740104618295,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uRtNGep7ZKA-1d3GxMIKT-qhZNq07HzeTIrT705bLf4"},
{"content":{"body":"I thought we had a rule that we couldn't freeze intrinsics","m.mentions":{},"msgtype":"m.text"},"ts":1740104672955,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$GJo-U6BCdqtdCDsw3BCnGbcAzS8ZWjtG1KHwsRoWHpY"},
{"content":{"body":"I mean `{ writable: false, configurable: false }`","format":"org.matrix.custom.html","formatted_body":"I mean <code>{ writable: false, configurable: false }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1740104695602,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kX-xmbBCrrFFjwMRSnCA1N-jrP7_kd5f5wcFBiKDyEY"},
{"content":{"body":"I'd have to defer to TG3 if that fits their model","m.mentions":{},"msgtype":"m.text"},"ts":1740104718030,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$QEzL0LKL3Woenp3FA3MNgbUn8m8yntNjD2lYNSzcHrk"},
{"content":{"body":"And if that's not viable, then an opt-out if it differs from the expected value.","m.mentions":{},"msgtype":"m.text"},"ts":1740104719992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ettscp5j4TpRjL5IK_CVCbylIF1b_FCmqU15Q_1YJQs"},
{"content":{"body":"I'd personally be Ok with the possible patterns being baked in statically, without ways to create custom constructors. For strings if someone wanted a constructor that created lowercase or uppercase strings for example doesn't feel like enough of a motivation to introduce the dynamic lookup","m.mentions":{},"msgtype":"m.text"},"ts":1740104838855,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$oSs88ftWwYXd2ZXF3JudBN02aRJDJAvQMFE5vXyEszc"},
{"content":{"body":"number+string+symbol sounds more than enough :)","m.mentions":{},"msgtype":"m.text"},"ts":1740104855055,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mOn_l7Ul7n9hjsC-tZdlehThqogKI-x4ojcwtyRHQeg"},
{"content":{"body":"Also bigint","m.mentions":{},"msgtype":"m.text"},"ts":1740104871532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xn_oTUOG9kgbtJcc19OUQui-MykNQPL9LnK0u4bW4Ns"},
{"content":{"body":"interesting","m.mentions":{},"msgtype":"m.text"},"ts":1740104880074,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Yfdp0hG9HW_D70-rqgz4HUp0RB3SFXEyk7fUuERIVPQ"},
{"content":{"body":"Also flags, and eventually ADT enums","m.mentions":{},"msgtype":"m.text"},"ts":1740104886312,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vrGNMQ0VEq8xHhPvccaZvs4HlFFdVDcSWrwHHUP4INg"},
{"content":{"body":"flags are numbers though right","m.mentions":{},"msgtype":"m.text"},"ts":1740104894737,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$85EvQ9eNCYYPyPIVsWbA5mC-5EBuVuqto17bnH8AKps"},
{"content":{"body":"Yes, but the auto-numbering behavior differs","m.mentions":{},"msgtype":"m.text"},"ts":1740104920590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7R7y_PaGcHrVNiqg9EIfVYYyY0bSwmV10Ol5RmRb8aw"},
{"content":{"body":"is bigint for when needing a larger domain of possible flags?","m.mentions":{},"msgtype":"m.text"},"ts":1740104921151,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$umUztuWwzAk7lCSaj3v3gJ2f5JknG2ErZnsyXlph3BE"},
{"content":{"body":"Yes, if bigint were fast enough I'd have plenty of TS `enum`s that I'd make into bigints. In TS we regularly have to worry about running out of space in an SMI","format":"org.matrix.custom.html","formatted_body":"Yes, if bigint were fast enough I'd have plenty of TS <code>enum</code>s that I'd make into bigints. In TS we regularly have to worry about running out of space in an SMI","m.mentions":{},"msgtype":"m.text"},"ts":1740104966780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ow3vIypAdYclMT1kkUj8RohieB5V0cgeFPZoq5sIEwo"},
{"content":{"body":"I do see the wins, but I also feel like explicit assignment is unambiguious as to what will happen. It's \"just JavaScript\" :D","m.mentions":{},"msgtype":"m.text"},"ts":1740104978071,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$NsQGExbUCkFgYT-lSsKN1v2MXtRR8gyRyfjcvF_6qrQ"},
{"content":{"body":"and the repeitiveness feels like a small price to pay","m.mentions":{},"msgtype":"m.text"},"ts":1740104995825,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$j_WmBBOQ4QPyFa8Ydy14-wdbqWd_hZOm0QcwRY-GMBM"},
{"content":{"body":"Flags enums would autonumber as `0`, `1 << 0`, `1 << 1`, `1 << 2`, ...","format":"org.matrix.custom.html","formatted_body":"Flags enums would autonumber as <code>0</code>, <code>1 &lt;&lt; 0</code>, <code>1 &lt;&lt; 1</code>, <code>1 &lt;&lt; 2</code>, ...","m.mentions":{},"msgtype":"m.text"},"ts":1740105008389,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aQbu1zSqOAqGXj71tYofZZdzLKSafY_OCLLN1nWXPRs"}
]