[
{"content":{"body":"> <@pchimento:igalia.com> would be interested in your take on what shifts in the ecosystem if V8 just stops doing that work; not that I advocate for that outcome, but I assume you've gamed that scenario out?\n\nsure, ping me some time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$vHvgb_xb9ZphbQY5I60RIVcJxJdMTM-czyLfVjglVsU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@pchimento:igalia.com\">@pchimento:igalia.com</a><br>would be interested in your take on what shifts in the ecosystem if V8 just stops doing that work; not that I advocate for that outcome, but I assume you've gamed that scenario out?</blockquote></mx-reply>sure, ping me some time","m.mentions":{"user_ids":["@pchimento:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vHvgb_xb9ZphbQY5I60RIVcJxJdMTM-czyLfVjglVsU"}},"msgtype":"m.text"},"ts":1728605549392,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cUu-V7UWI5wumetFfmT-cRlGvlz0Y0tKKuOpf5B1oF4"},
{"content":{"body":"> <@littledan:matrix.org> We have been trying to identify any real slowdowns and don’t see one in V8. If anyone is experiencing a slowdown of private compared to public in V8, I would love to hear from you; maybe we could sponsor work to do the appropriate optimization.\n\nwhat kind of measurements / benchmarks did you use for this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw:matrix.org/$GTqdv8_uJqfP1Rr6JGoALngAG1a6kkeiSjWJc-b7OX0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>We have been trying to identify any real slowdowns and don’t see one in V8. If anyone is experiencing a slowdown of private compared to public in V8, I would love to hear from you; maybe we could sponsor work to do the appropriate optimization.</blockquote></mx-reply>what kind of measurements / benchmarks did you use for this?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$GTqdv8_uJqfP1Rr6JGoALngAG1a6kkeiSjWJc-b7OX0"}},"msgtype":"m.text"},"ts":1728608571066,"senderName":"Marja Hölttä (not here, use marja@google.com)","senderId":"@marjakh:matrix.org","id":"$iP_rvEJgOmFPngNcnJOGJeDWh4EcPO3iFcSROwOH7zY"},
{"content":{"body":"Well if regulators force Chrome to be spun off Google I expect the funding economics of the Web would drastically shift too","m.mentions":{},"msgtype":"m.text"},"ts":1728609752029,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dMt_H9wM6YcDPFkcCPFkF3w_OONv8RFV8atkLSEBtUA"},
{"content":{"body":"Do we keep a list of what we consider a stage 4-eligible implementation?","m.mentions":{},"msgtype":"m.text"},"ts":1728613918472,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$8hFyUUEPzqZcZPjgvwITMbUHj2Shkcma2YdE--paP0o"},
{"content":{"body":"> shipping implementations, such as that provided by two independent VMs\n\nI feel like this is one of those \"has a very concrete meaning in practice and needs to be kept abstract on paper\" things","msgtype":"m.text"},"ts":1728614112988,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$NGYrpaBSCDw2_-9DcS3C37IAmoFE_O7R09ltZsaL3ao"},
{"content":{"body":"(also why tf does Element for Android not all typing formatted text)","msgtype":"m.text"},"ts":1728614249312,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$x0BItpqneFwO4H3ec-_s-zjxiqtUGTPrqNUwccCFf80"},
{"content":{"body":"* (also why tf does Element for Android not allow typing formatted text)","m.new_content":{"body":"(also why tf does Element for Android not allow typing formatted text)","msgtype":"m.text"},"m.relates_to":{"event_id":"$x0BItpqneFwO4H3ec-_s-zjxiqtUGTPrqNUwccCFf80","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728614258123,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$nMN1Wua6pvhdcqibdP_VVvMdMI5y0IybbxuCerbKyPc"},
{"content":{"body":"So in practice, JSC, SpiderMonkey, or V8 and that's that?","m.mentions":{},"msgtype":"m.text"},"ts":1728614347973,"senderName":"Aki","senderId":"@akirose:matrix.org","id":"$G_bAMNMsi4GEYCXheVosX4UQRZJJBVUAtifp5QlKKto"},
{"content":{"body":"in theory others like XS should count but the shipping experience as \"proof that the web didn't break\" is so important ","msgtype":"m.text"},"ts":1728614568584,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$d4M-ToFAGoWu3mUgLdRlHNbCZwt_mWlvakEsMIsk-LM"},
{"content":{"body":"they do count when web compat isn’t a concern","msgtype":"m.text"},"ts":1728628216835,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bXUmP_mgiqg4gctzRXRnRftdRqxONR5t85Cm230XpMA"},
{"content":{"body":"i have an open PR on the process doc that suggests we should define “risk areas” for each proposal, and use those to inform what counts - ie, what reassurances are most needed","msgtype":"m.text"},"ts":1728628270041,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_Hifxle5go6QUOIJnLx3wI4JKmavfERB4GSVq8z9FOE"},
{"content":{"body":"Process proposal to make a proposal's title blink it it changes Array.prototype","m.relates_to":{"event_id":"$_Hifxle5go6QUOIJnLx3wI4JKmavfERB4GSVq8z9FOE","is_falling_back":true,"m.in_reply_to":{"event_id":"$_Hifxle5go6QUOIJnLx3wI4JKmavfERB4GSVq8z9FOE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728628384868,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-u2rWgVQGiuco69QmEIq7ZYeA9-3x5UOjwn20OGclfs"},
{"content":{"body":"* Process proposal to make a proposal's title blink if it changes Array.prototype","m.new_content":{"body":"Process proposal to make a proposal's title blink if it changes Array.prototype","msgtype":"m.text"},"m.relates_to":{"event_id":"$-u2rWgVQGiuco69QmEIq7ZYeA9-3x5UOjwn20OGclfs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728628391205,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DcomsOp1qrDzQSfyNmcKd9ad-5Ve7w9KHMuZM3HmOU4"},
{"content":{"body":"`Weak{Set,Map}.prototype.clone()` -- does anybody see any obvious problem with the idea?\n\nMy use case is that I need an immutable weakset. For `Set` it's easy (just do `new Set(oldSet).add(newElement)`, but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs","format":"org.matrix.custom.html","formatted_body":"<p><code>Weak{Set,Map}.prototype.clone()</code> -- does anybody see any obvious problem with the idea?</p>\n<p>My use case is that I need an immutable weakset. For <code>Set</code> it's easy (just do <code>new Set(oldSet).add(newElement)</code>, but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728637288440,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA"},
{"content":{"body":" * `Weak{Set,Map}.prototype.clone()` -- does anybody see any obvious problem with the idea?\n\nMy use case is that I need an immutable weakset. For `Set` it's easy (just do `new Set(oldSet).add(newElement)`), but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs","format":"org.matrix.custom.html","formatted_body":" * <p><code>Weak{Set,Map}.prototype.clone()</code> -- does anybody see any obvious problem with the idea?</p>\n<p>My use case is that I need an immutable weakset. For <code>Set</code> it's easy (just do <code>new Set(oldSet).add(newElement)</code>), but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs</p>\n","m.mentions":{},"m.new_content":{"body":"`Weak{Set,Map}.prototype.clone()` -- does anybody see any obvious problem with the idea?\n\nMy use case is that I need an immutable weakset. For `Set` it's easy (just do `new Set(oldSet).add(newElement)`), but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs","format":"org.matrix.custom.html","formatted_body":"<p><code>Weak{Set,Map}.prototype.clone()</code> -- does anybody see any obvious problem with the idea?</p>\n<p>My use case is that I need an immutable weakset. For <code>Set</code> it's easy (just do <code>new Set(oldSet).add(newElement)</code>), but for weak collections it's quite complex to do it and it involves manually duplicating the contents in a list of WeakRefs</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728637307112,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QLX4rkqm2xcONQX2UMGKSVPSWSNAqfo31HLLvg4TdRA"},
{"content":{"body":"My `ClonableWeakSet` implementation:\n\n```js\nclass ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() => {\n    if (Math.random() < 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex < this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.has(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref => {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My <code>ClonableWeakSet</code> implementation:</p>\n<pre><code class=\"language-js\">class ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() =&gt; {\n    if (Math.random() &lt; 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex &lt; this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.has(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref =&gt; {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n</code></pre>\n","m.mentions":{},"m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728637348076,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5DotCtB4q1HP3FG-2ERmVzZx2tAob1RvHvJNIdk0ouQ"},
{"content":{"body":" * My `ClonableWeakSet` implementation:\n\n```js\nclass ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() => {\n    if (Math.random() < 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex < this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.get(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref => {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":" * <p>My <code>ClonableWeakSet</code> implementation:</p>\n<pre><code class=\"language-js\">class ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() =&gt; {\n    if (Math.random() &lt; 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex &lt; this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.get(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref =&gt; {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"My `ClonableWeakSet` implementation:\n\n```js\nclass ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() => {\n    if (Math.random() < 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex < this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.get(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref => {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>My <code>ClonableWeakSet</code> implementation:</p>\n<pre><code class=\"language-js\">class ClonableWeakSet extends WeakSet {\n  #contents = [];\n    \n  #indexes = new WeakMap();\n\n  #cleanup = new FinalizationRegistry(() =&gt; {\n    if (Math.random() &lt; 0.1) this.#compact();\n  });\n\n  #compact() {\n    let oldIndex = 0, newIndex = 0;\n    while (oldIndex &lt; this.#contents.length) {\n      const obj = this.#contents[oldIndex]?.deref();\n      if (obj !== undefined) {\n        this.#contents[newIndex] = this.#contents[oldIndex];\n        this.#indexes.set(obj, newIndex);\n        newIndex++;\n      }\n      oldIndex++;\n    }\n    this.#contents.length = newIndex;\n  }\n\n  add(value) {\n    super.add(value);\n    if (!this.#indexes.has(value)) {\n      this.#indexes.set(value, this.#contents.length);\n      this.#contents.push(new WeakRef(value))\n      this.#cleanup.register(value);\n    }\n    return this;\n  }\n\n  delete(value) {\n    const res = super.delete(value);\n    if (this.#indexes.has(value)) {\n      this.#contents[this.#indexes.get(value)] = null;\n      this.#indexes.delete(value);\n      this.#cleanup.unregister(value);\n    }\n    return res;\n  }\n\n  clone() {\n    const cloned = new ClonableWeakSet();\n    this.#contents.forEach(ref =&gt; {\n      const obj = ref.deref();\n      if (obj !== undefined) cloned.add(obj);\n    });\n    return cloned;\n  }\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5DotCtB4q1HP3FG-2ERmVzZx2tAob1RvHvJNIdk0ouQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728637450081,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$dZMk0hB7sIGH7nveys62viSle8m-t8dR3c0vXYcR7M8"},
{"content":{"body":"how would the values be \"cloned\"? or would it just put the same === items in both WMs/WSs?","m.mentions":{},"m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$5DotCtB4q1HP3FG-2ERmVzZx2tAob1RvHvJNIdk0ouQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728638321793,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$dUsV9cwsdfFzQNqprRCHnqjUerju-YdzwBuEAdcKkVw"},
{"content":{"body":"Yes ","m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$dUsV9cwsdfFzQNqprRCHnqjUerju-YdzwBuEAdcKkVw"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728638342744,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$lK-pWy2OOMONxCMkJOKe7J0waKvXjqyZpnxy8mTHWko"},
{"content":{"body":"It's like doing `new Set(oldSet)`, except that you cannot do this with WeakSets because they are not iterable ","m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$lK-pWy2OOMONxCMkJOKe7J0waKvXjqyZpnxy8mTHWko"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728638389917,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$s-Iw925gNDC7KPi1MqrMdikQfIAdZ9Gzg0TsRstSVxM"},
{"content":{"body":"* Yes, same items","m.new_content":{"body":"Yes, same items","msgtype":"m.text"},"m.relates_to":{"event_id":"$lK-pWy2OOMONxCMkJOKe7J0waKvXjqyZpnxy8mTHWko","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728638399168,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$WZiGhFfFLns_knvBUbcod8bgamlFR8YXyiER8cPAi1o"},
{"content":{"body":" * It's like doing `new Set(oldSet)`, except that you cannot do this with WeakSets because they are not iterable ","format":"org.matrix.custom.html","formatted_body":" * It's like doing <code>new Set(oldSet)</code>, except that you cannot do this with WeakSets because they are not iterable","m.mentions":{},"m.new_content":{"body":"It's like doing `new Set(oldSet)`, except that you cannot do this with WeakSets because they are not iterable ","format":"org.matrix.custom.html","formatted_body":"It's like doing <code>new Set(oldSet)</code>, except that you cannot do this with WeakSets because they are not iterable","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$s-Iw925gNDC7KPi1MqrMdikQfIAdZ9Gzg0TsRstSVxM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728638448951,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vAbL4nDIn-HygiITMKRwwRNl9BnWXoJIlrsnxBJrFd8"},
{"content":{"body":"And this would be much easier to implement in engines than in userland, because engines can iterate over `WeakSet` contents","format":"org.matrix.custom.html","formatted_body":"And this would be much easier to implement in engines than in userland, because engines can iterate over <code>WeakSet</code> contents","m.mentions":{},"m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$s-Iw925gNDC7KPi1MqrMdikQfIAdZ9Gzg0TsRstSVxM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728638498336,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$m3YUpdSLqzx2q0NSYuqLp2jZzK35-fhZCHFnDPcPoN0"},
{"content":{"body":"Why not build a wrapper over a `WeakSet` that prevents writes?","format":"org.matrix.custom.html","formatted_body":"Why not build a wrapper over a <code data-md=\"`\">WeakSet</code> that prevents writes?","msgtype":"m.text"},"ts":1728639116039,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$c1jOJ3-IWbPgn6A6aJ8PnHHCJ8d_et-9I49BRBKP0gY"},
{"content":{"body":"I trust my code to not mutate the `WeakSet`, so I don't need to prevent writes","format":"org.matrix.custom.html","formatted_body":"I trust my code to not mutate the <code>WeakSet</code>, so I don't need to prevent writes","m.mentions":{},"msgtype":"m.text"},"ts":1728639176912,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oHP311zT3vzfpBL00fMxWEnRQV5a6QTMIRt3tbo5Ang"},
{"content":{"body":"I need to keep around both the old one and the new one","m.mentions":{},"msgtype":"m.text"},"ts":1728639227042,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vBtjUcTZCjotwBHX316qzhl4MDODuyPayr-7NLsGFbo"},
{"content":{"body":"Oh, I found https://github.com/tc39/proposal-readonly-collections/issues/2. `WeakSet.prototype.diverge()` is exactly what I need","format":"org.matrix.custom.html","formatted_body":"Oh, I found https://github.com/tc39/proposal-readonly-collections/issues/2. <code>WeakSet.prototype.diverge()</code> is exactly what I need","m.mentions":{},"msgtype":"m.text"},"ts":1728639407787,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$InLEMYUT6rBExySEkgbyikPF8Lpyd8T-6iJBDyXUakI"},
{"content":{"body":"not all implementations can iterate over WeakSet contents; XS in particular uses an inverted approach that would not support this","m.mentions":{},"m.relates_to":{"event_id":"$-oPowYL4xoxQoMpgbwziiYMxgj5b1LhRHTB2ojUaMsA","is_falling_back":true,"m.in_reply_to":{"event_id":"$m3YUpdSLqzx2q0NSYuqLp2jZzK35-fhZCHFnDPcPoN0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1728649114238,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$jUfUT7ERgpFyqD_cB1OeONtA8k5rXQ3p0TCIeuhEmvY"},
{"content":{"body":"Tg5 workshop photo","msgtype":"m.text"},"ts":1728649255973,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$USuywkaM_jNDY8gCTnzQLsgn723QsOqC0965ll84YKQ"}
]