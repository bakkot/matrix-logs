[
{"content":{"body":"> <@rbuckton:matrix.org> For anyone interested in `_` vs `void` for Discards, I've created https://github.com/tc39/proposal-discard-binding/issues/11 to discuss further.\n\nI know we’ve talked a lot about void discards, but one thing I can’t remember if you’ve evaluated is `()`.  I spent about 5 minutes right now on my phone thinking about it, so please be kind if I’m forgetting something obvious.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%24BWnLTm0kW7MZcJV6bMk2V-f89AvhnvHO0tk57bUuQf4\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For anyone interested in <code>_</code> vs <code>void</code> for Discards, I've created https://github.com/tc39/proposal-discard-binding/issues/11 to discuss further.</blockquote></mx-reply>I know we’ve talked a lot about void discards, but one thing I can’t remember if you’ve evaluated is <code>()</code>.  I spent about 5 minutes right now on my phone thinking about it, so please be kind if I’m forgetting something obvious.","m.relates_to":{"m.in_reply_to":{"event_id":"$BWnLTm0kW7MZcJV6bMk2V-f89AvhnvHO0tk57bUuQf4"}},"msgtype":"m.text"},"ts":1718413964873,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$ROHoI1XsJBYW_DbayqmbAb95h58L5vQ9zYP-64bYSKo"},
{"content":{"body":"That syntax is used for the Unit type in functional languages, so might make some intuitive sense, it’s not an operator, and should be unambiguous in all binding contexts, including pattern matching and extractors","msgtype":"m.text"},"ts":1718414107345,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$7kZaQ6Q_22jsVEsdHyENtg3ufLTXDmXfpA5YCXuAes0"},
{"content":{"body":"`()` is not an option. One of the major motivators for discards is `using` declarations, and `using() = foo` would be interpreted as an Extractor in an assignment pattern, and it's already interpreted as an illegal assignment to a call expression.","format":"org.matrix.custom.html","formatted_body":"<code>()</code> is not an option. One of the major motivators for discards is <code>using</code> declarations, and <code>using() = foo</code> would be interpreted as an Extractor in an assignment pattern, and it's already interpreted as an illegal assignment to a call expression.","m.mentions":{},"msgtype":"m.text"},"ts":1718415591034,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DF1leFLcZbnQWlTcyEZ3LkQlfb9ODgOwYBhMF-_mQ1s"},
{"content":{"body":"See https://github.com/tc39/proposal-discard-binding/issues/10","m.mentions":{},"msgtype":"m.text"},"ts":1718415637699,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1CW1bvHKn6AAh6lm-S8grIrChhDXF9T84WLWpaRS98U"},
{"content":{"body":"> <@rbuckton:matrix.org> See https://github.com/tc39/proposal-discard-binding/issues/10\n\nSorry, I guess I missed this. Seems like we have been backed into a syntactic corner.  I still hold that a four letter keyword for a discard pattern feels very gross, and many people will likely just use _ or some other one letter identifier maybe preceded by _","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%241CW1bvHKn6AAh6lm-S8grIrChhDXF9T84WLWpaRS98U\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>See https://github.com/tc39/proposal-discard-binding/issues/10</blockquote></mx-reply>Sorry, I guess I missed this. Seems like we have been backed into a syntactic corner.  I still hold that a four letter keyword for a discard pattern feels very gross, and many people will likely just use _ or some other one letter identifier maybe preceded by _","m.relates_to":{"m.in_reply_to":{"event_id":"$1CW1bvHKn6AAh6lm-S8grIrChhDXF9T84WLWpaRS98U"}},"msgtype":"m.text"},"ts":1718416706479,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$N_8W4bZa1tOUD78DY3K8uN0Ldcox4gG171atdEjdIS8"},
{"content":{"body":"Also, can I say I wish we could have eliminated space separated call syntax in strict mode at least. I’ve never understood the argument for it","msgtype":"m.text"},"ts":1718417019066,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$X1atslbwHMLm5twLW5hbZocp9Bsy65yUfoCME0aBku8"},
{"content":{"body":"are there any languages that use postfix parens for function calls and *don't* allow spaces in all the same spots we do?","format":"org.matrix.custom.html","formatted_body":"are there any languages that use postfix parens for function calls and <i data-md=\"*\">don&#39;t</i> allow spaces in all the same spots we do?","msgtype":"m.text"},"ts":1718417866015,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$9zbzp18_WtRVrk3lZjdwXZiW_rMk4bCiOaDKET4hTPQ"},
{"content":{"body":"while I don't think you should format your code like that, I think it would be very strange from a parser perspective to disallow it","msgtype":"m.text"},"ts":1718417900881,"senderName":"Michael Ficarra","senderId":"@michaelficarra:matrix.org","id":"$falZt6TuFKL8XNnuQNGpNSKsdyPlqWVDP7YZIoKPAPA"},
{"content":{"body":"> <@michaelficarra:matrix.org> are there any languages that use postfix parens for function calls and *don't* allow spaces in all the same spots we do?\n\nI’ve never seen a language where if that were allowed it was considered good style, and I’ve never implemented a language that allowed for it.  Maybe when you use a parser generator that tokenizes first you can have some parsing performance improvements from it?  I guess I’d have to check the syntax of a wide variety of C-like languages","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!WgJwmjBNZEXhJnXHXw%3Amatrix.org/%249zbzp18_WtRVrk3lZjdwXZiW_rMk4bCiOaDKET4hTPQ\">In reply to</a> <a href=\"https://matrix.to/#/@michaelficarra:matrix.org\">@michaelficarra:matrix.org</a><br>are there any languages that use postfix parens for function calls and <i data-md=\"*\">don&#39;t</i> allow spaces in all the same spots we do?</blockquote></mx-reply>I’ve never seen a language where if that were allowed it was considered good style, and I’ve never implemented a language that allowed for it.  Maybe when you use a parser generator that tokenizes first you can have some parsing performance improvements from it?  I guess I’d have to check the syntax of a wide variety of C-like languages","m.relates_to":{"m.in_reply_to":{"event_id":"$9zbzp18_WtRVrk3lZjdwXZiW_rMk4bCiOaDKET4hTPQ"}},"msgtype":"m.text"},"ts":1718418619371,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$qb8aU-qnlj0-dE1brZOTEgmpMpI-czuY90CUbAVIjXk"},
{"content":{"body":"I guess I am forgetting about Allman style C","msgtype":"m.text"},"ts":1718418810892,"senderName":"Anthony Bullard","senderId":"@anthonybullard:matrix.org","id":"$Z9-H80k2ZwZkKg61kkSidqXQnrQYQwrwIhm4Osce0i8"}
]