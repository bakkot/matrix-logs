[
{"content":{"body":"> <@gibson042:matrix.org> ryzokuken ðŸ‡¬ðŸ‡· sffc I've been thinking about Temporal, and would like to be more specific about the relationship between ECMA-262 and ECMA-402 in general. What are your feelings on proposing something formal like the following at the upcoming plenary?\n> > 1. Any behavior specified in ECMA-402 (including circumstances that require throwing an exception) must be valid in an ECMA-262 implementation that does not support ECMA-402, allowing any ECMA-262 implementation to adopt it incrementally.\n> > 2. ECMA-402 must not prohibit any behavior that is specified in ECMA-262 as available to implementations other than introduction of new built-in values and use of reserved function parameters, allowing any ECMA-262 implementation to adopt it without introducing backwards incompatibility.\n\nhttps://github.com/tc39/ecma402/pull/690","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!pGTjbcoTUqwfzHcRaW:matrix.org/$69qLclthEoIpaEgNKrp3TTIQKWRJ7qxgeQo8ablgfS4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p><a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken ðŸ‡¬ðŸ‡·</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a> I've been thinking about Temporal, and would like to be more specific about the relationship between ECMA-262 and ECMA-402 in general. What are your feelings on proposing something formal like the following at the upcoming plenary?</p>\n<blockquote>\n<ol>\n<li>Any behavior specified in ECMA-402 (including circumstances that require throwing an exception) must be valid in an ECMA-262 implementation that does not support ECMA-402, allowing any ECMA-262 implementation to adopt it incrementally.</li>\n<li>ECMA-402 must not prohibit any behavior that is specified in ECMA-262 as available to implementations other than introduction of new built-in values and use of reserved function parameters, allowing any ECMA-262 implementation to adopt it without introducing backwards incompatibility.</li>\n</ol>\n</blockquote>\n</blockquote></mx-reply>https://github.com/tc39/ecma402/pull/690","m.relates_to":{"m.in_reply_to":{"event_id":"$69qLclthEoIpaEgNKrp3TTIQKWRJ7qxgeQo8ablgfS4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> ryzokuken ðŸ‡¬ðŸ‡· sffc I've been thinking about Temporal, and would like to be more specific about the relationship between ECMA-262 and ECMA-402 in general. What are your feelings on proposing something formal like the following at the upcoming plenary?\n> > 1. Any behavior specified in ECMA-402 (including circumstances that require throwing an exception) must be valid in an ECMA-262 implementation that does not support ECMA-402, allowing any ECMA-262 implementation to adopt it incrementally.\n> > 2. ECMA-402 must not prohibit any behavior that is specified in ECMA-262 as available to implementations other than introduction of new built-in values and use of reserved function parameters, allowing any ECMA-262 implementation to adopt it without introducing backwards incompatibility.\n\nhttps://github.com/tc39/ecma402/pull/690","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!pGTjbcoTUqwfzHcRaW:matrix.org/$69qLclthEoIpaEgNKrp3TTIQKWRJ7qxgeQo8ablgfS4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p><a href=\"https://matrix.to/#/@usharma:igalia.com\">ryzokuken ðŸ‡¬ðŸ‡·</a> <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a> I've been thinking about Temporal, and would like to be more specific about the relationship between ECMA-262 and ECMA-402 in general. What are your feelings on proposing something formal like the following at the upcoming plenary?</p>\n<blockquote>\n<ol>\n<li>Any behavior specified in ECMA-402 (including circumstances that require throwing an exception) must be valid in an ECMA-262 implementation that does not support ECMA-402, allowing any ECMA-262 implementation to adopt it incrementally.</li>\n<li>ECMA-402 must not prohibit any behavior that is specified in ECMA-262 as available to implementations other than introduction of new built-in values and use of reserved function parameters, allowing any ECMA-262 implementation to adopt it without introducing backwards incompatibility.</li>\n</ol>\n</blockquote>\n</blockquote></mx-reply>https://github.com/tc39/ecma402/pull/690","mimetype":"text/html"}]},"ts":1654297620138,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$qgEzWVoE1lPApZzsAj_YiPAQZ-lA6PQesYKsOfo9m4Q"}
]