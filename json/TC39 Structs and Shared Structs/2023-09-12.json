[
{"content":{"body":"I've used https://nodejs.org/download/v8-canary/ successfully before","msgtype":"m.text"},"ts":1694535208069,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$r2EM6c9jMIbM5OCGHQQKF6teTkqReZLUsRKDLzgi6JI"},
{"content":{"body":"Built from https://github.com/nodejs/node-v8","msgtype":"m.text"},"ts":1694535275250,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o"},
{"content":{"body":"> <@mhofman:matrix.org> Built from https://github.com/nodejs/node-v8\n\nThanks! This works perfectly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Built from https://github.com/nodejs/node-v8</blockquote></mx-reply>Thanks! This works perfectly","m.relates_to":{"m.in_reply_to":{"event_id":"$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o"}},"msgtype":"m.text"},"ts":1694550559844,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dz7Am3Pg0uPLhQKhUZuSfZxXaxdrpn8G0p4R0k05QQg"},
{"content":{"body":"`instanceof` for Mutex/Condition/SharedArray is great. I see that it works for instances of instances of `SharedStructType` as well, though there's still no fast way to see if a value is *any* shared struct (i.e., without access to its specific constructor)","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> for Mutex/Condition/SharedArray is great. I see that it works for instances of instances of <code>SharedStructType</code> as well, though there's still no fast way to see if a value is <em>any</em> shared struct (i.e., without access to its specific constructor)","msgtype":"m.text"},"ts":1694550762538,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ly2Ew_33CjVm1wDz9FGRZAivuXgl8sk-IAJ0g9IS2E8"},
{"content":{"body":"rbuckton: there is, i also added `SharedStructType.isSharedStruct` iirc","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: there is, i also added <code>SharedStructType.isSharedStruct</code> iirc","msgtype":"m.text"},"ts":1694550827149,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kh7QdT2qfXMuEEjbgI-0uokJYBRMREVgeMlGDGUoaEM"},
{"content":{"body":"Ah, great","msgtype":"m.text"},"ts":1694550952909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aa-mGMWtSh80AZ6881oJuA4MfzMHx_tVJ0qWEO3TedQ"},
{"content":{"body":"Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.","format":"org.matrix.custom.html","formatted_body":"Hmm. I was hoping I could use <code>SharedStructType</code> to emulate <code>SharedArray</code> when I also need extra fields, but its significantly slower so that's a no-go.","msgtype":"m.text"},"ts":1694551274625,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA"},
{"content":{"body":"yes -- that's a possible optimization that's not implemented due to complexity/effort","msgtype":"m.text"},"ts":1694551458721,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3XWdC-kPvaTZ4yyWZa30n6I8uAkZAbW1FMpbD6WEbno"},
{"content":{"body":"if you use indexed fields in SharedStructTypes, those are _always_ backed by \"dictionary elements\", i.e. a hash table","format":"org.matrix.custom.html","formatted_body":"if you use indexed fields in SharedStructTypes, those are <em>always</em> backed by \"dictionary elements\", i.e. a hash table","msgtype":"m.text"},"ts":1694551477995,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$euPrhYUJ4oN1Y5LJf-4XmD4q7rQ-OQfWmc1A7cm6QmQ"},
{"content":{"body":"SharedArrays are contiguous arrays","msgtype":"m.text"},"ts":1694551481700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YAA_VbVp39bo0eay9GHvRTJi6HspgkSErbD3Ne0ElWc"},
{"content":{"body":"we can optimize SharedStructTypes to use fast elements when those indexes are all packed, or something","msgtype":"m.text"},"ts":1694551509605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3HB6912ZhL72Rt5VJVse2_STHT_YCchNxGQeKrel5g0"},
{"content":{"body":"i could put it on the queue if it's a blocker","msgtype":"m.text"},"ts":1694551522754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RKYXQMM5xL8W1MIIrub8d2vRRR3SNxUadeML3jHmnkw"},
{"content":{"body":"> <@rbuckton:matrix.org> Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.\n\nCould the N extra fields be hidden at the start of the sharedarray? Their names map to fixed indexes 0,1,2 etc, and all array looping logic knows to start index at N? Or too big a refactor?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Hmm. I was hoping I could use <code>SharedStructType</code> to emulate <code>SharedArray</code> when I also need extra fields, but its significantly slower so that's a no-go.</blockquote></mx-reply>Could the N extra fields be hidden at the start of the sharedarray? Their names map to fixed indexes 0,1,2 etc, and all array looping logic knows to start index at N? Or too big a refactor?","m.relates_to":{"m.in_reply_to":{"event_id":"$OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA"}},"msgtype":"m.text"},"ts":1694551628594,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LRB1uWdONsft54K3FGolQugg1vdael3jAnTd2VqoAoA"},
{"content":{"body":"Thats just as much of a refactor as what I was doing, which was stashing a SharedArray in an `items` field in another struct. The biggest issue with that approach is that every function that expected a `NodeArray` with indexable elements has to check if it's instead a `SharedNodeArray` to use its `items` field.","format":"org.matrix.custom.html","formatted_body":"Thats just as much of a refactor as what I was doing, which was stashing a SharedArray in an <code>items</code> field in another struct. The biggest issue with that approach is that every function that expected a <code>NodeArray</code> with indexable elements has to check if it's instead a <code>SharedNodeArray</code> to use its <code>items</code> field.","msgtype":"m.text"},"ts":1694551734852,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MxOHa1asKkYDPRvjuTBen_msvJyxn9dM4OaX1gf_-yc"},
{"content":{"body":"rbuckton: what's the full list of field names you'd like to be fast?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: what's the full list of field names you'd like to be fast?","msgtype":"m.text"},"ts":1694551762691,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TBu6IA421BgFbIpK6sMapzDXwoooXgHh0tSYbpj_utw"},
{"content":{"body":"might not be too bad, i'll see if i have time next week","msgtype":"m.text"},"ts":1694551769585,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WSktOJvYMqKTGQNIjdCcvMx3qJ_MyBZPyu5hwGX2FcE"},
{"content":{"body":"I'm not sure how to answer that. What's \"slow\" is that I'm trying to emulate a `SharedArray` with fields named `\"length\"`, `\"0\"`, `\"1\"`, etc. as well as attach a few extra fields that we normally stash on a `NodeArray`, which looks something like this:\n\n```ts\ninterface NodeArray<T extends Node> extends Array<T> {\n  pos: number;\n  end: number;\n  hasTrailingComma: boolean;\n  transformFlags: TransformFlags; // number\n}\n```\nIf you're asking about other fields, the most frequently hit fields on our AST are `pos`, `end`, `kind`, `id`, `transformFlags`, and `parent`:\n\n```ts\ninterface Node {\n  pos: number;\n  end: number;\n  kind: SyntaxKind; // number\n  transformFlags: TransformFlags; // number\n  id: number | undefined;\n  parent: Node | undefined;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'm not sure how to answer that. What's \"slow\" is that I'm trying to emulate a <code>SharedArray</code> with fields named <code>\"length\"</code>, <code>\"0\"</code>, <code>\"1\"</code>, etc. as well as attach a few extra fields that we normally stash on a <code>NodeArray</code>, which looks something like this:</p>\n<pre><code class=\"language-ts\">interface NodeArray&lt;T extends Node&gt; extends Array&lt;T&gt; {\n  pos: number;\n  end: number;\n  hasTrailingComma: boolean;\n  transformFlags: TransformFlags; // number\n}\n</code></pre>\n<p>If you're asking about other fields, the most frequently hit fields on our AST are <code>pos</code>, <code>end</code>, <code>kind</code>, <code>id</code>, <code>transformFlags</code>, and <code>parent</code>:</p>\n<pre><code class=\"language-ts\">interface Node {\n  pos: number;\n  end: number;\n  kind: SyntaxKind; // number\n  transformFlags: TransformFlags; // number\n  id: number | undefined;\n  parent: Node | undefined;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1694552133222,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$py5BkjtUFRGUgobGax37AAuw9ggJZgQkBhZzHS0FDL0"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1694552346786,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$97oc8Bp4FqNUAj3vmcdGUNveyQTcgffys4BNFAiYcpg"},
{"content":{"body":"is the length of these nodes known AOT per Node?","msgtype":"m.text"},"ts":1694552369420,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gm8ONFO8R_GrH7T3-WRP4PXflaBnxqCrtahSKh-PyNA"},
{"content":{"body":"(and are contiguous?)","msgtype":"m.text"},"ts":1694552382062,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tUCvXdMmQaZD2XH3fAaFGurqh18Oi35em1ePLeKOkrY"},
{"content":{"body":"Can you clarify what you mean by contiguous?","msgtype":"m.text"},"ts":1694552859068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZLdPLCtd4N898lOJquOMSgjmMZ0z4G1lV6W0hVEosjM"},
{"content":{"body":"I've essentially mirrored our AST structure into shared struct definitions, so I could tell you exactly how many fields are attached to a given node, though I'd need a bit if you want something like the average field count.","msgtype":"m.text"},"ts":1694552981068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2wD1o9hG4-elkSCfSfllIdOoPIQZaKkJCs_z5Aq3cA8"},
{"content":{"body":"by contiguous i mean if a node type's length is N, then the node always has indexed properties 0 to N-1, inclusive, with no holes","msgtype":"m.text"},"ts":1694553222627,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XD_2yHuxpEyueRddOdvdOdBAenJkWRKvI_nxtIPtbLU"},
{"content":{"body":"hole in the usual JS sense","msgtype":"m.text"},"ts":1694553232378,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5k0WjYqp6KBCzndWplUFOW21JxPx7rN6dIrkEpJ5GL0"},
{"content":{"body":"and no, not looking for an average field count","msgtype":"m.text"},"ts":1694553266808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fZce1sxzrpjMJFnzQLv4mdgNaGO6yXWQzDjog_04NBk"},
{"content":{"body":"by AOT i mean is the length fixed per node _type_ instead of per node _instance_","format":"org.matrix.custom.html","formatted_body":"by AOT i mean is the length fixed per node <em>type</em> instead of per node <em>instance</em>","msgtype":"m.text"},"ts":1694553282845,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$94xoHhWviuHTpiBV2hg0CeVuY_qgpihhVPn_84ZeqcY"},
{"content":{"body":"since all shared arrays are fixed length","msgtype":"m.text"},"ts":1694553292565,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pGw5c9MSlirpbUHhpuuBtR5KriAEiJQu-OtXncL3M_g"},
{"content":{"body":"A `Node`? No. A `NodeArray`, yes. There are no holes in `NodeArray`s, though they could be filled with different kinds of `Node` subtypes.","format":"org.matrix.custom.html","formatted_body":"A <code>Node</code>? No. A <code>NodeArray</code>, yes. There are no holes in <code>NodeArray</code>s, though they could be filled with different kinds of <code>Node</code> subtypes.","msgtype":"m.text"},"ts":1694553299053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pdSW9Ix-zRuoVdswboWELN44hhFe1rY8SkOO3NWykAg"},
{"content":{"body":"oh, my bad, i think i misread","msgtype":"m.text"},"ts":1694553345316,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4LmizHI_lZuBIYTOoa60Gkyik2a5hhycVU2PTGrRBP0"},
{"content":{"body":"you're not saying you want Nodes to have some elements in addition to some properties","msgtype":"m.text"},"ts":1694553354561,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$La1vVUiznUUeKPQfUVyhPh61wPpBGk-KsVVXc2clYhI"},
{"content":{"body":"you're saying you're trying to convert NodeArrays, which are arrays + some string-named properties that you listed above","msgtype":"m.text"},"ts":1694553377820,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RoeFphyogpBv7RFElVaXDXE8JuIze0ngo2Qq9scdNTc"},
{"content":{"body":"that points to another direction, which is...","msgtype":"m.text"},"ts":1694553410246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RC9Vg0Yyo3u0luUGRTcAbwCgCoBefUQ3siZfBGkktBA"},
{"content":{"body":"perhaps the dev trial should unify the notions of SharedStructType and SharedArray and just let SharedStructTypes specify \"i want N indexed properties\"","msgtype":"m.text"},"ts":1694553464991,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BfeSgtuK4GFAJ3592_IaI5GQfzN9D2w-N8CAbNK-kuQ"},
{"content":{"body":"but even then a SharedArray constructor is probably helpful","msgtype":"m.text"},"ts":1694553474769,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OyNTlh1cns8GtwUoIk9e4XgqfxkQh0KEuNeYsb_l-DI"},
{"content":{"body":"in any case i hear the feedback now and i'll push it on the queue","msgtype":"m.text"},"ts":1694553486952,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$slgCtDRlEQ78gDCMTZKM8F4kI7l0joT9PAdq2KDtJzQ"},
{"content":{"body":"Yes. I have two choices for a shared struct implementation of a `NodeArray`:\n\n1. I use a Shared Struct with a small set of string-named fields (like `pos`/`end`), as well a `length` and a number of indexed fields with no holes. This would emulate `NodeArray` except for functionality from array prototype as I can just use `length` and indices instead. This provides enough overlap between `NodeArray` and `SharedNodeArray` that I don't need to special case every single function that works with `NodeArray`.\n\n2. I use a Shared Struct with the same set of string-named fields as well as an `items` field that holds a `SharedArray`. In this case, I need to add branching cases in every function that works with `NodeArray`.","format":"org.matrix.custom.html","formatted_body":"<p>Yes. I have two choices for a shared struct implementation of a <code>NodeArray</code>:</p>\n<ol>\n<li>\n<p>I use a Shared Struct with a small set of string-named fields (like <code>pos</code>/<code>end</code>), as well a <code>length</code> and a number of indexed fields with no holes. This would emulate <code>NodeArray</code> except for functionality from array prototype as I can just use <code>length</code> and indices instead. This provides enough overlap between <code>NodeArray</code> and <code>SharedNodeArray</code> that I don't need to special case every single function that works with <code>NodeArray</code>.</p>\n</li>\n<li>\n<p>I use a Shared Struct with the same set of string-named fields as well as an <code>items</code> field that holds a <code>SharedArray</code>. In this case, I need to add branching cases in every function that works with <code>NodeArray</code>.</p>\n</li>\n</ol>\n","msgtype":"m.text"},"ts":1694553678770,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tppr3S5l5pNPkjGDkh1kuDDIn4EVG0lIAPJ9wCg6hT4"},
{"content":{"body":"i try to allow (1) to be more easily expressed and be faster","msgtype":"m.text"},"ts":1694553783624,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IIL5XAM9RbWEhQqtVf4HgYqq0piot1vpVPFTo02Sf9U"},
{"content":{"body":"Another option would be the ability to add extra fields to a `SharedArray`, such that integer indexed properties go through the current fast path for `SharedArray` and other string properties go the slow path.","format":"org.matrix.custom.html","formatted_body":"Another option would be the ability to add extra fields to a <code>SharedArray</code>, such that integer indexed properties go through the current fast path for <code>SharedArray</code> and other string properties go the slow path.","msgtype":"m.text"},"ts":1694553790251,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_WDrRDeh20Nm93uWqTn3l-J9GR7qUWKHM9oTlko0YEc"},
{"content":{"body":" * i'll try to allow (1) to be more easily expressed and be faster","m.new_content":{"body":"i'll try to allow (1) to be more easily expressed and be faster","msgtype":"m.text"},"m.relates_to":{"event_id":"$IIL5XAM9RbWEhQqtVf4HgYqq0piot1vpVPFTo02Sf9U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694553790888,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rm7PNngtKfspx0ubBjCO8Wgo1jFttqOajKftH2lj7OY"},
{"content":{"body":"Though I assume that could be handled by unification as you suggested above.","msgtype":"m.text"},"ts":1694553820379,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hrhjWl6ZPLwHwEZM7JkCwBVW94apmxBGDh4atTIozFc"},
{"content":{"body":"something like `SharedStructType(fields, { alsoGiveMeElementsUpTo: N })` or whatever","format":"org.matrix.custom.html","formatted_body":"something like <code>SharedStructType(fields, { alsoGiveMeElementsUpTo: N })</code> or whatever","msgtype":"m.text"},"ts":1694553837693,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OjKbBICGrYdhDHjIbSfftb3yf8mOOZa2eJpah_G0sTw"},
{"content":{"body":"Yeah, or the `SharedStructType` constructor could just test `fields` for interger-indexed field names that start from `0` and go to `N` with no holes, and optimize those (unless you need to optimize `length` as well.","format":"org.matrix.custom.html","formatted_body":"Yeah, or the <code>SharedStructType</code> constructor could just test <code>fields</code> for interger-indexed field names that start from <code>0</code> and go to <code>N</code> with no holes, and optimize those (unless you need to optimize <code>length</code> as well.","msgtype":"m.text"},"ts":1694553932934,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fi9QLT_EKJZ3mJuesAfTNYe_xZMrSIEcipwxHf6ufgk"},
{"content":{"body":" * Yeah, or the `SharedStructType` constructor could just test `fields` for interger-indexed field names that start from `0` and go to `N` with no holes, and optimize those (unless you need to optimize `length` as well).","format":"org.matrix.custom.html","formatted_body":" * Yeah, or the <code>SharedStructType</code> constructor could just test <code>fields</code> for interger-indexed field names that start from <code>0</code> and go to <code>N</code> with no holes, and optimize those (unless you need to optimize <code>length</code> as well).","m.new_content":{"body":"Yeah, or the `SharedStructType` constructor could just test `fields` for interger-indexed field names that start from `0` and go to `N` with no holes, and optimize those (unless you need to optimize `length` as well).","format":"org.matrix.custom.html","formatted_body":"Yeah, or the <code>SharedStructType</code> constructor could just test <code>fields</code> for interger-indexed field names that start from <code>0</code> and go to <code>N</code> with no holes, and optimize those (unless you need to optimize <code>length</code> as well).","msgtype":"m.text"},"m.relates_to":{"event_id":"$fi9QLT_EKJZ3mJuesAfTNYe_xZMrSIEcipwxHf6ufgk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694553942727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$j1RcRG1BweA3whI8i0bhpTQDSns3uCsNtyN6RhhYUxs"},
{"content":{"body":"For the purposes of the trial, I don't necessarily need convenience, I just need capability. I can work around inconveniences if the capabilities are there.","msgtype":"m.text"},"ts":1694553983812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6DMY6Zy_9YcgJ6gLzU6WlkZH98TZMOEG5VPUy5KomCg"},
{"content":{"body":"Quick update on the parallel parsing front, after tinkering with how I batch source files to send to background threads, I went from parse time being 6x slower than single threaded, to only 1.5x slower.","msgtype":"m.text"},"ts":1694555304575,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BEFwPRReFsPiP6kXR41gl46I0cai35ZIcT7LYQuThDM"},
{"content":{"body":"ah interesting, would love to dig in at some point, should be faster after all :)","msgtype":"m.text"},"ts":1694555342433,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m1N12FnO9l0w8ZmNwWMaJd1zxA-7TBVhK9tAfG_KwPQ"},
{"content":{"body":"TypeScript normally does a depth-first parse of source files: for each root file, we parse the file, collect its imports and `/// <reference>` directives, and then parse those files. The order in which we parse files affects signature overload resolution when we merge types for global scope and module augmentations. Depth first isn't very efficient for parallelization though, so I'm having to rewrite it to be breadth-first instead, which will (of course) affect overload resolution. I was trying a batching approach to minimize that affect, but it wasn't successful. In the end I'm probably just going to \"fix it in post\" and reorder the file list based on what we *would* have generated prior to batching.","format":"org.matrix.custom.html","formatted_body":"TypeScript normally does a depth-first parse of source files: for each root file, we parse the file, collect its imports and <code>/// &lt;reference&gt;</code> directives, and then parse those files. The order in which we parse files affects signature overload resolution when we merge types for global scope and module augmentations. Depth first isn't very efficient for parallelization though, so I'm having to rewrite it to be breadth-first instead, which will (of course) affect overload resolution. I was trying a batching approach to minimize that affect, but it wasn't successful. In the end I'm probably just going to \"fix it in post\" and reorder the file list based on what we <em>would</em> have generated prior to batching.","msgtype":"m.text"},"ts":1694555777112,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PbQZ7ruilBwlQIRUZOl8KScPtQ7XnpFpfiZzsecuQB8"}
]