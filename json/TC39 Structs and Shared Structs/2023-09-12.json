[
{"content":{"body":"I've used https://nodejs.org/download/v8-canary/ successfully before","msgtype":"m.text"},"ts":1694535208069,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$r2EM6c9jMIbM5OCGHQQKF6teTkqReZLUsRKDLzgi6JI"},
{"content":{"body":"Built from https://github.com/nodejs/node-v8","msgtype":"m.text"},"ts":1694535275250,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o"},
{"content":{"body":"> <@mhofman:matrix.org> Built from https://github.com/nodejs/node-v8\n\nThanks! This works perfectly","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Built from https://github.com/nodejs/node-v8</blockquote></mx-reply>Thanks! This works perfectly","m.relates_to":{"m.in_reply_to":{"event_id":"$x1q49eip2BXXlqYDhPTaVGu3Ehk7vc-hnWVVE7Qxp8o"}},"msgtype":"m.text"},"ts":1694550559844,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dz7Am3Pg0uPLhQKhUZuSfZxXaxdrpn8G0p4R0k05QQg"},
{"content":{"body":"`instanceof` for Mutex/Condition/SharedArray is great. I see that it works for instances of instances of `SharedStructType` as well, though there's still no fast way to see if a value is *any* shared struct (i.e., without access to its specific constructor)","format":"org.matrix.custom.html","formatted_body":"<code>instanceof</code> for Mutex/Condition/SharedArray is great. I see that it works for instances of instances of <code>SharedStructType</code> as well, though there's still no fast way to see if a value is <em>any</em> shared struct (i.e., without access to its specific constructor)","msgtype":"m.text"},"ts":1694550762538,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ly2Ew_33CjVm1wDz9FGRZAivuXgl8sk-IAJ0g9IS2E8"},
{"content":{"body":"rbuckton: there is, i also added `SharedStructType.isSharedStruct` iirc","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: there is, i also added <code>SharedStructType.isSharedStruct</code> iirc","msgtype":"m.text"},"ts":1694550827149,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kh7QdT2qfXMuEEjbgI-0uokJYBRMREVgeMlGDGUoaEM"},
{"content":{"body":"Ah, great","msgtype":"m.text"},"ts":1694550952909,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aa-mGMWtSh80AZ6881oJuA4MfzMHx_tVJ0qWEO3TedQ"},
{"content":{"body":"Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.","format":"org.matrix.custom.html","formatted_body":"Hmm. I was hoping I could use <code>SharedStructType</code> to emulate <code>SharedArray</code> when I also need extra fields, but its significantly slower so that's a no-go.","msgtype":"m.text"},"ts":1694551274625,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA"},
{"content":{"body":"yes -- that's a possible optimization that's not implemented due to complexity/effort","msgtype":"m.text"},"ts":1694551458721,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3XWdC-kPvaTZ4yyWZa30n6I8uAkZAbW1FMpbD6WEbno"},
{"content":{"body":"if you use indexed fields in SharedStructTypes, those are _always_ backed by \"dictionary elements\", i.e. a hash table","format":"org.matrix.custom.html","formatted_body":"if you use indexed fields in SharedStructTypes, those are <em>always</em> backed by \"dictionary elements\", i.e. a hash table","msgtype":"m.text"},"ts":1694551477995,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$euPrhYUJ4oN1Y5LJf-4XmD4q7rQ-OQfWmc1A7cm6QmQ"},
{"content":{"body":"SharedArrays are contiguous arrays","msgtype":"m.text"},"ts":1694551481700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YAA_VbVp39bo0eay9GHvRTJi6HspgkSErbD3Ne0ElWc"},
{"content":{"body":"we can optimize SharedStructTypes to use fast elements when those indexes are all packed, or something","msgtype":"m.text"},"ts":1694551509605,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3HB6912ZhL72Rt5VJVse2_STHT_YCchNxGQeKrel5g0"},
{"content":{"body":"i could put it on the queue if it's a blocker","msgtype":"m.text"},"ts":1694551522754,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RKYXQMM5xL8W1MIIrub8d2vRRR3SNxUadeML3jHmnkw"},
{"content":{"body":"> <@rbuckton:matrix.org> Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.\n\nCould the N extra fields be hidden at the start of the sharedarray? Their names map to fixed indexes 0,1,2 etc, and all array looping logic knows to start index at N? Or too big a refactor?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Hmm. I was hoping I could use <code>SharedStructType</code> to emulate <code>SharedArray</code> when I also need extra fields, but its significantly slower so that's a no-go.</blockquote></mx-reply>Could the N extra fields be hidden at the start of the sharedarray? Their names map to fixed indexes 0,1,2 etc, and all array looping logic knows to start index at N? Or too big a refactor?","m.relates_to":{"m.in_reply_to":{"event_id":"$OlwsOSXPXaDIwFDKY4wUMHJLUQITRo3zDkoPPSnhmCA"}},"msgtype":"m.text"},"ts":1694551628594,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$LRB1uWdONsft54K3FGolQugg1vdael3jAnTd2VqoAoA"},
{"content":{"body":"Thats just as much of a refactor as what I was doing, which was stashing a SharedArray in an `items` field in another struct. The biggest issue with that approach is that every function that expected a `NodeArray` with indexable elements has to check if it's instead a `SharedNodeArray` to use its `items` field.","format":"org.matrix.custom.html","formatted_body":"Thats just as much of a refactor as what I was doing, which was stashing a SharedArray in an <code>items</code> field in another struct. The biggest issue with that approach is that every function that expected a <code>NodeArray</code> with indexable elements has to check if it's instead a <code>SharedNodeArray</code> to use its <code>items</code> field.","msgtype":"m.text"},"ts":1694551734852,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MxOHa1asKkYDPRvjuTBen_msvJyxn9dM4OaX1gf_-yc"},
{"content":{"body":"rbuckton: what's the full list of field names you'd like to be fast?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: what's the full list of field names you'd like to be fast?","msgtype":"m.text"},"ts":1694551762691,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TBu6IA421BgFbIpK6sMapzDXwoooXgHh0tSYbpj_utw"},
{"content":{"body":"might not be too bad, i'll see if i have time next week","msgtype":"m.text"},"ts":1694551769585,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WSktOJvYMqKTGQNIjdCcvMx3qJ_MyBZPyu5hwGX2FcE"},
{"content":{"body":"I'm not sure how to answer that. What's \"slow\" is that I'm trying to emulate a `SharedArray` with fields named `\"length\"`, `\"0\"`, `\"1\"`, etc. as well as attach a few extra fields that we normally stash on a `NodeArray`, which looks something like this:\n\n```ts\ninterface NodeArray<T extends Node> extends Array<T> {\n  pos: number;\n  end: number;\n  hasTrailingComma: boolean;\n  transformFlags: TransformFlags; // number\n}\n```\nIf you're asking about other fields, the most frequently hit fields on our AST are `pos`, `end`, `kind`, `id`, `transformFlags`, and `parent`:\n\n```ts\ninterface Node {\n  pos: number;\n  end: number;\n  kind: SyntaxKind; // number\n  transformFlags: TransformFlags; // number\n  id: number | undefined;\n  parent: Node | undefined;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I'm not sure how to answer that. What's \"slow\" is that I'm trying to emulate a <code>SharedArray</code> with fields named <code>\"length\"</code>, <code>\"0\"</code>, <code>\"1\"</code>, etc. as well as attach a few extra fields that we normally stash on a <code>NodeArray</code>, which looks something like this:</p>\n<pre><code class=\"language-ts\">interface NodeArray&lt;T extends Node&gt; extends Array&lt;T&gt; {\n  pos: number;\n  end: number;\n  hasTrailingComma: boolean;\n  transformFlags: TransformFlags; // number\n}\n</code></pre>\n<p>If you're asking about other fields, the most frequently hit fields on our AST are <code>pos</code>, <code>end</code>, <code>kind</code>, <code>id</code>, <code>transformFlags</code>, and <code>parent</code>:</p>\n<pre><code class=\"language-ts\">interface Node {\n  pos: number;\n  end: number;\n  kind: SyntaxKind; // number\n  transformFlags: TransformFlags; // number\n  id: number | undefined;\n  parent: Node | undefined;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1694552133222,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$py5BkjtUFRGUgobGax37AAuw9ggJZgQkBhZzHS0FDL0"},
{"content":{"body":"ah i see","msgtype":"m.text"},"ts":1694552346786,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$97oc8Bp4FqNUAj3vmcdGUNveyQTcgffys4BNFAiYcpg"},
{"content":{"body":"is the length of these nodes known AOT per Node?","msgtype":"m.text"},"ts":1694552369420,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gm8ONFO8R_GrH7T3-WRP4PXflaBnxqCrtahSKh-PyNA"},
{"content":{"body":"(and are contiguous?)","msgtype":"m.text"},"ts":1694552382062,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tUCvXdMmQaZD2XH3fAaFGurqh18Oi35em1ePLeKOkrY"},
{"content":{"body":"Can you clarify what you mean by contiguous?","msgtype":"m.text"},"ts":1694552859068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZLdPLCtd4N898lOJquOMSgjmMZ0z4G1lV6W0hVEosjM"},
{"content":{"body":"I've essentially mirrored our AST structure into shared struct definitions, so I could tell you exactly how many fields are attached to a given node, though I'd need a bit if you want something like the average field count.","msgtype":"m.text"},"ts":1694552981068,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2wD1o9hG4-elkSCfSfllIdOoPIQZaKkJCs_z5Aq3cA8"},
{"content":{"body":"by contiguous i mean if a node type's length is N, then the node always has indexed properties 0 to N-1, inclusive, with no holes","msgtype":"m.text"},"ts":1694553222627,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XD_2yHuxpEyueRddOdvdOdBAenJkWRKvI_nxtIPtbLU"},
{"content":{"body":"hole in the usual JS sense","msgtype":"m.text"},"ts":1694553232378,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5k0WjYqp6KBCzndWplUFOW21JxPx7rN6dIrkEpJ5GL0"},
{"content":{"body":"and no, not looking for an average field count","msgtype":"m.text"},"ts":1694553266808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fZce1sxzrpjMJFnzQLv4mdgNaGO6yXWQzDjog_04NBk"},
{"content":{"body":"by AOT i mean is the length fixed per node _type_ instead of per node _instance_","format":"org.matrix.custom.html","formatted_body":"by AOT i mean is the length fixed per node <em>type</em> instead of per node <em>instance</em>","msgtype":"m.text"},"ts":1694553282845,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$94xoHhWviuHTpiBV2hg0CeVuY_qgpihhVPn_84ZeqcY"},
{"content":{"body":"since all shared arrays are fixed length","msgtype":"m.text"},"ts":1694553292565,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pGw5c9MSlirpbUHhpuuBtR5KriAEiJQu-OtXncL3M_g"},
{"content":{"body":"A `Node`? No. A `NodeArray`, yes. There are no holes in `NodeArray`s, though they could be filled with different kinds of `Node` subtypes.","format":"org.matrix.custom.html","formatted_body":"A <code>Node</code>? No. A <code>NodeArray</code>, yes. There are no holes in <code>NodeArray</code>s, though they could be filled with different kinds of <code>Node</code> subtypes.","msgtype":"m.text"},"ts":1694553299053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pdSW9Ix-zRuoVdswboWELN44hhFe1rY8SkOO3NWykAg"}
]