[
{"content":{"body":"i understand that it is proposed to require an unsafe scope to access shared values, but what does unsafe actually mean? like what is the model we are using to categorize things as safe or unsafe.","msgtype":"m.text"},"ts":1720890390034,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$OsTSVTC1pcJLW2HMsbebanHDFfPFdDLzH1B2ONrpcuc"},
{"content":{"body":" * i understand that it is proposed to require an unsafe scope to access shared values, but what does unsafe actually mean? like what is the model we are using to categorize things as safe or unsafe. and i guess in particular i'm curious if things we categorize as unsafe really justify the syntax. in rust and c# (i think?), unsafe marks a place where you can actually violate some fundamental model of the language, which i'm hoping you cannot do inside a js unsafe block?","m.mentions":{},"m.new_content":{"body":"i understand that it is proposed to require an unsafe scope to access shared values, but what does unsafe actually mean? like what is the model we are using to categorize things as safe or unsafe. and i guess in particular i'm curious if things we categorize as unsafe really justify the syntax. in rust and c# (i think?), unsafe marks a place where you can actually violate some fundamental model of the language, which i'm hoping you cannot do inside a js unsafe block?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OsTSVTC1pcJLW2HMsbebanHDFfPFdDLzH1B2ONrpcuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720890873654,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$2sOtFSfA5S5S6Yxe01XtNakxN2Az_YCEnHc3rsUSgMs"},
{"content":{"body":" * i understand that it is proposed to require an unsafe scope to access shared values, but what does unsafe actually mean? like what is the model we are using to categorize things as safe or unsafe. and i guess in particular i'm curious if things we categorize as unsafe really justify the syntax. in rust (and c# i think?), unsafe marks a place where you can actually violate some fundamental model of the language, which i'm hoping you cannot do inside a js unsafe block?","m.mentions":{},"m.new_content":{"body":"i understand that it is proposed to require an unsafe scope to access shared values, but what does unsafe actually mean? like what is the model we are using to categorize things as safe or unsafe. and i guess in particular i'm curious if things we categorize as unsafe really justify the syntax. in rust (and c# i think?), unsafe marks a place where you can actually violate some fundamental model of the language, which i'm hoping you cannot do inside a js unsafe block?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$OsTSVTC1pcJLW2HMsbebanHDFfPFdDLzH1B2ONrpcuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720891309453,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XKCdoT2f0-5q19Q9gT_ORmpvrxKbHQVispYsC0t8y7I"},
{"content":{"body":"My impression from Mark's previous comments is that's evacuate what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). `unsafe` in this context is about JS code accessing data structures held in shared memory. ","format":"org.matrix.custom.html","formatted_body":"My impression from Mark's previous comments is that's evacuate what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). <code>unsafe</code> in this context is about JS code accessing data structures held in shared memory.","msgtype":"m.text"},"ts":1720897901489,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qdJVKHzXdwYFFTavlMNKdW_Dci2K5sLIyYD_CwPLt58"},
{"content":{"body":"* My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). \nunsafe in this context is about JS code accessing data structures held in shared memory.","m.new_content":{"body":"My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). \nunsafe in this context is about JS code accessing data structures held in shared memory.","format":"org.matrix.custom.html","formatted_body":"My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside).<br />unsafe in this context is about JS code accessing data structures held in shared memory.","msgtype":"m.text"},"m.relates_to":{"event_id":"$qdJVKHzXdwYFFTavlMNKdW_Dci2K5sLIyYD_CwPLt58","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720897915904,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bTofv--mHvSZgbmjxbHBEZ4B4bW9uBzSbb4ZJvUkJ1k"},
{"content":{"body":"* My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). `unsafe` in this context is about JS code accessing data structures held in shared memory.","m.new_content":{"body":"My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). `unsafe` in this context is about JS code accessing data structures held in shared memory.","format":"org.matrix.custom.html","formatted_body":"My impression from Mark's previous comments is that's exactly what this is. Single-threaded, exclusive memory access is the fundamental model of JS (SAB aside). <code>unsafe</code> in this context is about JS code accessing data structures held in shared memory.","msgtype":"m.text"},"m.relates_to":{"event_id":"$qdJVKHzXdwYFFTavlMNKdW_Dci2K5sLIyYD_CwPLt58","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720897935608,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5qwT69c_B4mAkM9vMdwa9nhquHbVj7QGbIr1C9UlO-I"},
{"content":{"body":"you're saying that inside unsafe you can put the js vm into a state that prevents it from continuing to evaluate javascript in the way that it expects?","m.mentions":{},"msgtype":"m.text"},"ts":1720898026269,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qiSpj_sw2Idbfmh87JOlba3MSGSHmtnEBqAViuIDVMU"},
{"content":{"body":"While I don't imagine we'd ever add much else to `unsafe` in JS (e.g., pointers), we could if necessary. ","format":"org.matrix.custom.html","formatted_body":"While I don't imagine we'd ever add much else to <code>unsafe</code> in JS (e.g., pointers), we could if necessary.","msgtype":"m.text"},"ts":1720898104809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JoZ2MTHZvwtt1i1gn6HO9zyvXQPJ7Ni_YxVK80AYZUo"}
]