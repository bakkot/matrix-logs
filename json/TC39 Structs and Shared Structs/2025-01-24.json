[
{"content":{"body":"> <@kriskowal:aelf.land> I’ve captured my reasoning about shared struct constructor and prototype registration, as I understand nicolo-ribaudo’s revelation, and how we expect shared struct semantics to compose or intersect with modules and evaluators, which would give users a level to designate a cohort of shared structs for purposes of evaluating some set of modules. https://gist.github.com/kriskowal/7f56e3bd5a634f1ca828fb3e571e3c7b\n\n\"// tangentially, because these primitives are bytewise equal\nnew alfa() === new bravo();\"\n\nsurprised me, they are separately mutable so their bytes can diverge ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%2466VszgZpjCQY7z7qkNsM0qcXi4wNWBQBpnIQK2o9ank\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>I’ve captured my reasoning about shared struct constructor and prototype registration, as I understand <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>’s revelation, and how we expect shared struct semantics to compose or intersect with modules and evaluators, which would give users a level to designate a cohort of shared structs for purposes of evaluating some set of modules. https://gist.github.com/kriskowal/7f56e3bd5a634f1ca828fb3e571e3c7b</blockquote></mx-reply>\"// tangentially, because these primitives are bytewise equal<br />new alfa() === new bravo();\"<br /><br />surprised me, they are separately mutable so their bytes can diverge ","m.relates_to":{"m.in_reply_to":{"event_id":"$66VszgZpjCQY7z7qkNsM0qcXi4wNWBQBpnIQK2o9ank"}},"msgtype":"m.text"},"ts":1737731849141,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yvgtMhPeEjN8qfycL1PKNaFvNSBpoWnZt5yZTgAh91w"}
]