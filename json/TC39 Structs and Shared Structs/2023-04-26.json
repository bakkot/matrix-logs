[
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: i applaud the scope of \"shared modules\" but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.\n> \n> put another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs _is_ that opt-in. to have \"shared modules\" seems to require the capability to write code that is actual parallel and threadsafe _in general_, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?\n\nI'm coming at this from two different directions, with two different outcomes:\n\n1. Design something transformative for the language, adding cohesive and comprehensive new capabilities.\n2. Design something tacked on to the language, adding a minimal set of capabilities necessary to solve a specific problem.\n\nOption 1 is complex, takes longer, and requires a fair amount of \"big design upfront\", all to support capabilities we may or may not need. However, the end goal is to have something cohesive that is future-leaning with few \"warts\". That's what \"shared modules\" is, or is intended to be.\n\nOption 2 is far simpler (though not trivial), shorter term, and focused. While this approach allows for incremental change, we may in the future find that related capabilities are harder to implement in the future because of design decisions we make now, potentially leaving more \"warts\" in the design over time.\n\nI'm not opposed to either direction, but its worth considering the former even if only to inform the latter.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$w39BitZZMffCTWMo7mpjgzR4CDACjr6rEhPhH-HlD9o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><p><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i applaud the scope of \"shared modules\" but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.</p>\n<p>put another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs <em>is</em> that opt-in. to have \"shared modules\" seems to require the capability to write code that is actual parallel and threadsafe <em>in general</em>, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?</p>\n</blockquote></mx-reply><p>I'm coming at this from two different directions, with two different outcomes:</p>\n<ol>\n<li>Design something transformative for the language, adding cohesive and comprehensive new capabilities.</li>\n<li>Design something tacked on to the language, adding a minimal set of capabilities necessary to solve a specific problem.</li>\n</ol>\n<p>Option 1 is complex, takes longer, and requires a fair amount of &quot;big design upfront&quot;, all to support capabilities we may or may not need. However, the end goal is to have something cohesive that is future-leaning with few &quot;warts&quot;. That's what &quot;shared modules&quot; is, or is intended to be.</p>\n<p>Option 2 is far simpler (though not trivial), shorter term, and focused. While this approach allows for incremental change, we may in the future find that related capabilities are harder to implement in the future because of design decisions we make now, potentially leaving more &quot;warts&quot; in the design over time.</p>\n<p>I'm not opposed to either direction, but its worth considering the former even if only to inform the latter.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$w39BitZZMffCTWMo7mpjgzR4CDACjr6rEhPhH-HlD9o"}},"msgtype":"m.text"},"ts":1682510410709,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fb-Q5gMmhfaGgEBBjmcjF0VXPxsDBUCxuoil83rBx08"},
{"content":{"body":"> <@shuyuguo:matrix.org> more i think about it, i think the non-threadsafe stdlib thing is the actual showstopper for me\n\nThe \"shared modules\" approach would have required a threadsafe stdlib subset (i.e., make operations threadsafe if possible, and throw when not).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$NOkexxLcfhaP0YD70_4_A1LsESbGJBHlDVD4Nqizwx4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>more i think about it, i think the non-threadsafe stdlib thing is the actual showstopper for me</blockquote></mx-reply>The &quot;shared modules&quot; approach would have required a threadsafe stdlib subset (i.e., make operations threadsafe if possible, and throw when not).","m.relates_to":{"m.in_reply_to":{"event_id":"$NOkexxLcfhaP0YD70_4_A1LsESbGJBHlDVD4Nqizwx4"}},"msgtype":"m.text"},"ts":1682510489557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7DP4Lk-MEB-4hKfL2tNarGf5UG3TuGpKplb2zsi5MMM"},
{"content":{"body":"I find the \"only share data, but register per-thread behavior\" approach acceptable, so long as we have a reasonable way to register per-thread behavior.","msgtype":"m.text"},"ts":1682510562059,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$raLkVMFgWM3GR4Ih7sQKdJQwGujhGdrpS9oGNzDQBTg"},
{"content":{"body":"That's the approach I took with https://esfx.js.org/esfx/api/struct-type.html?tabs=ts, though it's not so much \"registration\" and is more of a \"wrap an ArrayBuffer with a DataView\"-like approach.","msgtype":"m.text"},"ts":1682510698534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TteGV1aboCay_5kBXWqO11TmRpe2Mm4Po0WQrMUv_Ek"},
{"content":{"body":"i'm saying something stronger for (1). my intuition is that \"transformative\" for JS actually means \"not adoptable and unrealistic\"","msgtype":"m.text"},"ts":1682519450550,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eXpq-MDlROrcuzwehhtK1eZRXuSwdo5FlzWXZ3Wf2SI"},
{"content":{"body":"Yeah, I think it's good to *consider* 1, but after years of considering it, I haven't seen a realistic path for it. Do you? This informs my agreement with Shu's choice of 2.","format":"org.matrix.custom.html","formatted_body":"Yeah, I think it's good to <em>consider</em> 1, but after years of considering it, I haven't seen a realistic path for it. Do you? This informs my agreement with Shu's choice of 2.","msgtype":"m.text"},"ts":1682530979088,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pM9W7st6GnU4ZrS3Qi5pFVIQ2vChcpf5GO5YMQKCKfg"},
{"content":{"body":"Are there other things about it we should consider? Other potential takeaways to inform things further?","msgtype":"m.text"},"ts":1682531000356,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TWTS1DJKXkRFqrmR1NYKi5ReIVduqszWXUYEvD2DMr8"}
]