[
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: i applaud the scope of \"shared modules\" but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.\n> \n> put another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs _is_ that opt-in. to have \"shared modules\" seems to require the capability to write code that is actual parallel and threadsafe _in general_, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?\n\nI'm coming at this from two different directions, with two different outcomes:\n\n1. Design something transformative for the language, adding cohesive and comprehensive new capabilities.\n2. Design something tacked on to the language, adding a minimal set of capabilities necessary to solve a specific problem.\n\nOption 1 is complex, takes longer, and requires a fair amount of \"big design upfront\", all to support capabilities we may or may not need. However, the end goal is to have something cohesive that is future-leaning with few \"warts\". That's what \"shared modules\" is, or is intended to be.\n\nOption 2 is far simpler (though not trivial), shorter term, and focused. While this approach allows for incremental change, we may in the future find that related capabilities are harder to implement in the future because of design decisions we make now, potentially leaving more \"warts\" in the design over time.\n\nI'm not opposed to either direction, but its worth considering the former even if only to inform the latter.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$w39BitZZMffCTWMo7mpjgzR4CDACjr6rEhPhH-HlD9o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><p><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i applaud the scope of \"shared modules\" but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.</p>\n<p>put another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs <em>is</em> that opt-in. to have \"shared modules\" seems to require the capability to write code that is actual parallel and threadsafe <em>in general</em>, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?</p>\n</blockquote></mx-reply><p>I'm coming at this from two different directions, with two different outcomes:</p>\n<ol>\n<li>Design something transformative for the language, adding cohesive and comprehensive new capabilities.</li>\n<li>Design something tacked on to the language, adding a minimal set of capabilities necessary to solve a specific problem.</li>\n</ol>\n<p>Option 1 is complex, takes longer, and requires a fair amount of &quot;big design upfront&quot;, all to support capabilities we may or may not need. However, the end goal is to have something cohesive that is future-leaning with few &quot;warts&quot;. That's what &quot;shared modules&quot; is, or is intended to be.</p>\n<p>Option 2 is far simpler (though not trivial), shorter term, and focused. While this approach allows for incremental change, we may in the future find that related capabilities are harder to implement in the future because of design decisions we make now, potentially leaving more &quot;warts&quot; in the design over time.</p>\n<p>I'm not opposed to either direction, but its worth considering the former even if only to inform the latter.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$w39BitZZMffCTWMo7mpjgzR4CDACjr6rEhPhH-HlD9o"}},"msgtype":"m.text"},"ts":1682510410709,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Fb-Q5gMmhfaGgEBBjmcjF0VXPxsDBUCxuoil83rBx08"},
{"content":{"body":"> <@shuyuguo:matrix.org> more i think about it, i think the non-threadsafe stdlib thing is the actual showstopper for me\n\nThe \"shared modules\" approach would have required a threadsafe stdlib subset (i.e., make operations threadsafe if possible, and throw when not).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$NOkexxLcfhaP0YD70_4_A1LsESbGJBHlDVD4Nqizwx4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>more i think about it, i think the non-threadsafe stdlib thing is the actual showstopper for me</blockquote></mx-reply>The &quot;shared modules&quot; approach would have required a threadsafe stdlib subset (i.e., make operations threadsafe if possible, and throw when not).","m.relates_to":{"m.in_reply_to":{"event_id":"$NOkexxLcfhaP0YD70_4_A1LsESbGJBHlDVD4Nqizwx4"}},"msgtype":"m.text"},"ts":1682510489557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7DP4Lk-MEB-4hKfL2tNarGf5UG3TuGpKplb2zsi5MMM"},
{"content":{"body":"I find the \"only share data, but register per-thread behavior\" approach acceptable, so long as we have a reasonable way to register per-thread behavior.","msgtype":"m.text"},"ts":1682510562059,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$raLkVMFgWM3GR4Ih7sQKdJQwGujhGdrpS9oGNzDQBTg"},
{"content":{"body":"That's the approach I took with https://esfx.js.org/esfx/api/struct-type.html?tabs=ts, though it's not so much \"registration\" and is more of a \"wrap an ArrayBuffer with a DataView\"-like approach.","msgtype":"m.text"},"ts":1682510698534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TteGV1aboCay_5kBXWqO11TmRpe2Mm4Po0WQrMUv_Ek"},
{"content":{"body":"i'm saying something stronger for (1). my intuition is that \"transformative\" for JS actually means \"not adoptable and unrealistic\"","msgtype":"m.text"},"ts":1682519450550,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eXpq-MDlROrcuzwehhtK1eZRXuSwdo5FlzWXZ3Wf2SI"},
{"content":{"body":"Yeah, I think it's good to *consider* 1, but after years of considering it, I haven't seen a realistic path for it. Do you? This informs my agreement with Shu's choice of 2.","format":"org.matrix.custom.html","formatted_body":"Yeah, I think it's good to <em>consider</em> 1, but after years of considering it, I haven't seen a realistic path for it. Do you? This informs my agreement with Shu's choice of 2.","msgtype":"m.text"},"ts":1682530979088,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pM9W7st6GnU4ZrS3Qi5pFVIQ2vChcpf5GO5YMQKCKfg"},
{"content":{"body":"Are there other things about it we should consider? Other potential takeaways to inform things further?","msgtype":"m.text"},"ts":1682531000356,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TWTS1DJKXkRFqrmR1NYKi5ReIVduqszWXUYEvD2DMr8"},
{"content":{"body":"I remain convinced that sharing initialization code between realms, and in this case between agents, is also a general problem that is relevant for this proposal and for others (extensible cloning for example, or recursive initialization of ShadowRealms). I believe this problem can be solved without being transformative to the language, just with targeted API additions and relying on other proposals in progress like module expressions. So going towards (2) does not mean the solution has to be specific to this proposal.","msgtype":"m.text"},"ts":1682540974496,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cz6TmaGvyvN98C9fcOlRLZQXpbDKI3vUBhvfXfJXNTI"},
{"content":{"body":"We're all agreed on sharing code, the question is whether to has to be the same copy of the code or not","msgtype":"m.text"},"ts":1682541015475,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DkdBweboFWVsmDiQDcNsSFvQiERhoBFRBsobOdv_Wy0"},
{"content":{"body":"my idea with module expressions has always been, it's the same code but different copies of it; different instances of the same module","msgtype":"m.text"},"ts":1682541051930,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4j668AzDMz2DKwGd2kcSYla0zVTbUCX8yhxE9AKL0uY"},
{"content":{"body":"Right I agree. I think multiple copies is sufficient, we just need to solve the registration ergonomics, which has different approaches possible, and where rbuckton and I disagree on.","format":"org.matrix.custom.html","formatted_body":"Right I agree. I think multiple copies is sufficient, we just need to solve the registration ergonomics, which has different approaches possible, and where <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> and I disagree on.","msgtype":"m.text"},"ts":1682541162755,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OfnuZKFPICBcdGEbw09f00iDOASLeIemQ84g2R6xaRM"},
{"content":{"body":"yeah I agree registration economics is fraught. Could you elaborate on the disagreement?","msgtype":"m.text"},"ts":1682541220643,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wPWFsJGcTAN8J2oDW8OZvIew0EgFUs3ks_S8VGwdJn4"},
{"content":{"body":"bterlson: I think I saw you typing?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@bterlson:matrix.org\">bterlson</a>: I think I saw you typing?","msgtype":"m.text"},"ts":1682541226510,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kGXBGO2olM7xcGD83MSixSZsf8Yu6ol7zmNWWg4MD5E"},
{"content":{"body":" * yeah I agree registration ergonomics is fraught. Could you elaborate on the disagreement?","m.new_content":{"body":"yeah I agree registration ergonomics is fraught. Could you elaborate on the disagreement?","msgtype":"m.text"},"m.relates_to":{"event_id":"$wPWFsJGcTAN8J2oDW8OZvIew0EgFUs3ks_S8VGwdJn4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682541248120,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Lj5uVSZzzZjocAygAsWgsOQjJWe3WumR6y8Q7RHia84"},
{"content":{"body":"Basically Ron suggested an implicit shared cross agent registry, which is a non starter in my book.","msgtype":"m.text"},"ts":1682541269946,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5V1U4n6cseSPqqKJgJDu9e4BpGJy5dcduaLIf74jDyU"},
{"content":{"body":"littledan: I was just catching up and typed a bit :-D Just got back from paternity and have been out for many an eon, have no idea whats going on","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: I was just catching up and typed a bit :-D Just got back from paternity and have been out for many an eon, have no idea whats going on","msgtype":"m.text"},"ts":1682541270836,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$hMvp0wcUNSccWvUx7oMLX853Wn_MRzxUbGMMhRrDkZg"},
{"content":{"body":"(and I want this feature in my project I'm working on)","msgtype":"m.text"},"ts":1682541294868,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$8Z1-ZlXRJIO8s5_4UXeYlN1cap15OvklAHlVCeag4lY"},
{"content":{"body":"> <@mhofman:matrix.org> Basically Ron suggested an implicit shared cross agent registry, which is a non starter in my book.\n\nHuh, I don't see why we'd bother with a new registry when we already have the module map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$5V1U4n6cseSPqqKJgJDu9e4BpGJy5dcduaLIf74jDyU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Basically Ron suggested an implicit shared cross agent registry, which is a non starter in my book.</blockquote></mx-reply>Huh, I don't see why we'd bother with a new registry when we already have the module map","m.relates_to":{"m.in_reply_to":{"event_id":"$5V1U4n6cseSPqqKJgJDu9e4BpGJy5dcduaLIf74jDyU"}},"msgtype":"m.text"},"ts":1682541319248,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o7bW7MX0rjYmbh3kJwy2JGP6SPruWP14JflCasbOKh4"},
{"content":{"body":"> <@bterlson:matrix.org> (and I want this feature in my project I'm working on)\n\nOh! Could you say more?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8Z1-ZlXRJIO8s5_4UXeYlN1cap15OvklAHlVCeag4lY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bterlson:matrix.org\">@bterlson:matrix.org</a><br>(and I want this feature in my project I&#39;m working on)</blockquote></mx-reply>Oh! Could you say more?","m.relates_to":{"m.in_reply_to":{"event_id":"$8Z1-ZlXRJIO8s5_4UXeYlN1cap15OvklAHlVCeag4lY"}},"msgtype":"m.text"},"ts":1682541327429,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PSzmDDe84telW3BoUKZ6X0WLBXVBhzuLqRpS8Fpn7Jg"},
{"content":{"body":"wasm stuff, can't say more yet :P","msgtype":"m.text"},"ts":1682541397767,"senderName":"bterlson","senderId":"@bterlson:matrix.org","id":"$k3ckgebZde_T7fMnXu-AWrL3Jh-4oe121DKFZkI56Q4"},
{"content":{"body":"are we going to start living the multithreaded wasm gc dream?","msgtype":"m.text"},"ts":1682541434012,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qEvYjHmjFTYj3uLZ9RuIKY1JkZ8WSfmXEJQRKXx_0Hk"},
{"content":{"body":"The module map is agent specific, different agents may have a different module map. The main question is independent initialization and what happens when you receive a shared struct from another agent, whether there is a relation to the \"same\" shared struct that may have been declared in the local agent","msgtype":"m.text"},"ts":1682541446568,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Vm654FAfWWwsb2GFUe9kmxfQqF2LT_Pzo7jjvXIYz5Q"},
{"content":{"body":"basically identity discontinuity","msgtype":"m.text"},"ts":1682541488225,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2qK3FTlJUKhr2GLj4dHJsMiPzfPTVTf2zWm69zFQWSY"},
{"content":{"body":"wait, I thought a limited form of \"identity discontinuity\" was a given: We're taking that we have different *copies* of the functions and prototype (which ideally do the same thing)","format":"org.matrix.custom.html","formatted_body":"wait, I thought a limited form of &quot;identity discontinuity&quot; was a given: We're taking that we have different <em>copies</em> of the functions and prototype (which ideally do the same thing)","msgtype":"m.text"},"ts":1682541543630,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jAPaJYIT3IPyIyzbeB69TNCIquUKGIFam4evknQhTzA"},
{"content":{"body":"do you mean, the risk that it won't just be identity discontinuity, but a greater level where the actual behavior won't match up?","msgtype":"m.text"},"ts":1682541579513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aWPmrBU5hmxE00v6KRdPY3iacgPMZH4YMPBcTu8SJlU"},
{"content":{"body":"for example, I imagined that each thread has its own global object which is mutable and all, and so different prototypes on different threads will access different things and experience different behavior","msgtype":"m.text"},"ts":1682541619958,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zENjT06OTEN5RMhSqgzoxAnX_jFQLKNswWNINsx6QDo"},
{"content":{"body":"but that this is smoothed over because [[GetPrototype]]() finds the \"current\" prototype given your agent","format":"org.matrix.custom.html","formatted_body":"but that this is smoothed over because <a href>[GetPrototype]</a> finds the &quot;current&quot; prototype given your agent","msgtype":"m.text"},"ts":1682541649113,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tcr5-6DmQ2SdZEyZR5wlp1eM6jjd5Wqgh2Pf9fxVKKg"},
{"content":{"body":" * but that this is smoothed over because `[[GetPrototype]]()` finds the \"current\" prototype given your agent","format":"org.matrix.custom.html","formatted_body":" * but that this is smoothed over because <code>[[GetPrototype]]()</code> finds the &quot;current&quot; prototype given your agent","m.new_content":{"body":"but that this is smoothed over because `[[GetPrototype]]()` finds the \"current\" prototype given your agent","format":"org.matrix.custom.html","formatted_body":"but that this is smoothed over because <code>[[GetPrototype]]()</code> finds the &quot;current&quot; prototype given your agent","msgtype":"m.text"},"m.relates_to":{"event_id":"$tcr5-6DmQ2SdZEyZR5wlp1eM6jjd5Wqgh2Pf9fxVKKg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682541666102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R2TG42qTaFEAAK-lyvoqKoCbWEQSLIlcWvnbwTmKISM"},
{"content":{"body":"if you receive Vector for agent 1, and yourself define and instantiate Vector, should these 2 objects share the same implementation locally?","msgtype":"m.text"},"ts":1682541681559,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vjzSifSMqKudvH7VWvCq3VThIM2mQfSoOPvDvCaLOs8"},
{"content":{"body":" * if you receive Vector from agent 1, and yourself define and instantiate Vector, should these 2 objects share the same implementation locally?","m.new_content":{"body":"if you receive Vector from agent 1, and yourself define and instantiate Vector, should these 2 objects share the same implementation locally?","msgtype":"m.text"},"m.relates_to":{"event_id":"$vjzSifSMqKudvH7VWvCq3VThIM2mQfSoOPvDvCaLOs8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682541711650,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$v762TWx854_Qx5td1ReGk7y_p59aGQr84KlggRewBxg"},
{"content":{"body":"they *should*, but defining \"same implementation\" is a bit complicated","format":"org.matrix.custom.html","formatted_body":"they <em>should</em>, but defining &quot;same implementation&quot; is a bit complicated","msgtype":"m.text"},"ts":1682541712907,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IzXEJYeGixCMQxl7DMX9BRw4Hyr0aBA5y1p4TquP5QY"},
{"content":{"body":"and I guess it's a question of whether \"should\" or \"must\" is what we're going for","msgtype":"m.text"},"ts":1682541725011,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7ncvzE2LPvYm_RCy1l72_WG8LVrwQDcKqWqPoWgMU2A"},
{"content":{"body":"should you see the same prototype object ?","msgtype":"m.text"},"ts":1682541732212,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$szbwfxfqmmAk2Aycltk6k7AEkuroDh7ngqfStCdqkLg"},
{"content":{"body":"oh sorry I misread the question... yes they should have the identical prototype identity IMO","msgtype":"m.text"},"ts":1682541757351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$br4VYCn4puqEa3Wsq0azpmJMjFejgEBukL5b4Vig77s"},
{"content":{"body":"or is it acceptable for these 2 objects to have equivalent prototype objects that are not the same","msgtype":"m.text"},"ts":1682541764802,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1mZY2wJR8TCfK3wBXJ-HYsB25-0lkaEBfunJLxXu_Pc"},
{"content":{"body":"what difficulties would we have in getting there?","msgtype":"m.text"},"ts":1682541778889,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gB1HNa_sCMM7ivEGiF1gZGNht5EoLHOurEgf-EeKATA"},
{"content":{"body":"How do you make that happen when both agents have independently defined their own `Vector` shared struct. I suppose how did they define the behavior of those shared structs is the question ","format":"org.matrix.custom.html","formatted_body":"How do you make that happen when both agents have independently defined their own <code>Vector</code> shared struct. I suppose how did they define the behavior of those shared structs is the question","msgtype":"m.text"},"ts":1682541878030,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-QULpPwMHmmGmNhPcWn49tWfwl71Z0IGhDXUjjBDvUY"},
{"content":{"body":"what is the identity used to say they're the \"same\"","msgtype":"m.text"},"ts":1682541902329,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Kyh-h54dbFxrOIDezq3Pw10oDr0QrNCHq5PzE_A717s"},
{"content":{"body":"I think this identity could be keyed by a module specifier. This could be either a string specifier or module block","msgtype":"m.text"},"ts":1682541932786,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Dvp9Jz_r0dv1hqxgT5AQEuwIf3Fxgh63uOraAyotMvQ"},
{"content":{"body":"that is, if you want to make a shared struct with a non-null prototype, it has to be exported from a module","msgtype":"m.text"},"ts":1682541944404,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IZhFDLVuWzutCVLKAZEnL8FJVm9FkF1kCyT4oFVxb3U"},
{"content":{"body":"the pair of the (absolute) module specifier + export name is the key","msgtype":"m.text"},"ts":1682541962676,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l5wnE_OjJQ-v6NI2wICx7Iksx9utn89eJAbbmEBzBq4"},
{"content":{"body":"if it's a string, you're dealing with module maps that may not resolve the same way between agents","msgtype":"m.text"},"ts":1682541976206,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$rzkjaXGQbmCdQm8uEivpmfspRZOIkQqrAwF55zwwXp8"},
{"content":{"body":"module blocks do not currently preserve their identity through structured cloning","msgtype":"m.text"},"ts":1682541994509,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ev6sLM5K0Ib10qkMGh_ctlBHUn8fR0EbNorYDffZOEg"},
{"content":{"body":"both good points","msgtype":"m.text"},"ts":1682542002542,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K70Kppuwko0ZnjRw8banciX98rTLm28V72lm76wNQFw"},
{"content":{"body":"> <@mhofman:matrix.org> module blocks do not currently preserve their identity through structured cloning\n\nwe would have to switch this attribute of module blocks if we wanted to enable this usage","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Ev6sLM5K0Ib10qkMGh_ctlBHUn8fR0EbNorYDffZOEg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>module blocks do not currently preserve their identity through structured cloning</blockquote></mx-reply>we would have to switch this attribute of module blocks if we wanted to enable this usage","m.relates_to":{"m.in_reply_to":{"event_id":"$Ev6sLM5K0Ib10qkMGh_ctlBHUn8fR0EbNorYDffZOEg"}},"msgtype":"m.text"},"ts":1682542015526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B7P16VQBGtoqrWjgq88dsM_KUfHrAC40cixeSROn44Y"},
{"content":{"body":"> <@mhofman:matrix.org> if it's a string, you're dealing with module maps that may not resolve the same way between agents\n\nI'm willing to take this risk, but it's a value judgement","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$rzkjaXGQbmCdQm8uEivpmfspRZOIkQqrAwF55zwwXp8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>if it&#39;s a string, you&#39;re dealing with module maps that may not resolve the same way between agents</blockquote></mx-reply>I'm willing to take this risk, but it's a value judgement","m.relates_to":{"m.in_reply_to":{"event_id":"$rzkjaXGQbmCdQm8uEivpmfspRZOIkQqrAwF55zwwXp8"}},"msgtype":"m.text"},"ts":1682542026384,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nqq79lc4etdwfFqgBx20kl23y36ZdIeUkd6t0nPtU00"},
{"content":{"body":"I'm curious where we imagine the module loading would be awaited","msgtype":"m.text"},"ts":1682542058144,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$vRCabcMkLy74VpLLzbMB2_5ZvfhVax_Y3QLUbHYobP4"},
{"content":{"body":"re: the string risk, this is *not* a risk for meeting this property of the shared struct prototypes not matching. It just means different methods would be available on the different sides of the boundary","format":"org.matrix.custom.html","formatted_body":"re: the string risk, this is <em>not</em> a risk for meeting this property of the shared struct prototypes not matching. It just means different methods would be available on the different sides of the boundary","msgtype":"m.text"},"ts":1682542059855,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cy6Ip6LIQFpDz9tpkNdi1tURsqBenKM1IdZtm1xbBmw"},
{"content":{"body":"> <@aclaymore:matrix.org> I'm curious where we imagine the module loading would be awaited\n\nthis is also an important problem. My suggestion would be, [[GetPrototype]]() throws if the module isn't already loaded.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$vRCabcMkLy74VpLLzbMB2_5ZvfhVax_Y3QLUbHYobP4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I&#39;m curious where we imagine the module loading would be awaited</blockquote></mx-reply>this is also an important problem. My suggestion would be, <a href>[GetPrototype]</a> throws if the module isn't already loaded.","m.relates_to":{"m.in_reply_to":{"event_id":"$vRCabcMkLy74VpLLzbMB2_5ZvfhVax_Y3QLUbHYobP4"}},"msgtype":"m.text"},"ts":1682542081708,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NlDpTsHrUcKnxEWEPLmb483idd1XLhwbbJDb4o08obc"},
{"content":{"body":"module blocks is however my suggestion, and it doesn't solve the independent initialization use case. By definition one agent has to init first, and share the module block definition through postMessage, then agent 2 has to define the shared struct","msgtype":"m.text"},"ts":1682542085967,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_eoUlPtkEiW5XecyqAjBcxe_Mz0_CYH8e1IAdE57fhA"},
{"content":{"body":"> <@aclaymore:matrix.org> I'm curious where we imagine the module loading would be awaited\n\n * this is also an important problem. My suggestion would be, `[[GetPrototype]]()` throws if the module isn't already loaded.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$vRCabcMkLy74VpLLzbMB2_5ZvfhVax_Y3QLUbHYobP4?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@aclaymore:matrix.org\">@aclaymore:matrix.org</a><br>I'm curious where we imagine the module loading would be awaited</blockquote></mx-reply> * this is also an important problem. My suggestion would be, <code>[[GetPrototype]]()</code> throws if the module isn't already loaded.","m.new_content":{"body":"this is also an important problem. My suggestion would be, `[[GetPrototype]]()` throws if the module isn't already loaded.","format":"org.matrix.custom.html","formatted_body":"this is also an important problem. My suggestion would be, <code>[[GetPrototype]]()</code> throws if the module isn't already loaded.","msgtype":"m.text"},"m.relates_to":{"event_id":"$NlDpTsHrUcKnxEWEPLmb483idd1XLhwbbJDb4o08obc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682542094389,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AIZHUMV_iHAibutWt2KXoFoyGasDRC9QYVEjtDdDawc"},
{"content":{"body":"> <@mhofman:matrix.org> module blocks is however my suggestion, and it doesn't solve the independent initialization use case. By definition one agent has to init first, and share the module block definition through postMessage, then agent 2 has to define the shared struct\n\nwell, what if agent 1 doesn't bother sending over the module block, and just starts by sending the shared struct?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$_eoUlPtkEiW5XecyqAjBcxe_Mz0_CYH8e1IAdE57fhA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>module blocks is however my suggestion, and it doesn&#39;t solve the independent initialization use case. By definition one agent has to init first, and share the module block definition through postMessage, then agent 2 has to define the shared struct</blockquote></mx-reply>well, what if agent 1 doesn't bother sending over the module block, and just starts by sending the shared struct?","m.relates_to":{"m.in_reply_to":{"event_id":"$_eoUlPtkEiW5XecyqAjBcxe_Mz0_CYH8e1IAdE57fhA"}},"msgtype":"m.text"},"ts":1682542160687,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a2nkxKGFjad8HJ4Lwu7ul7mqyyDr8gYuhe4lLWfiXkY"},
{"content":{"body":"I believe however that having the same prototype object is not strictly necessary for most use cases","msgtype":"m.text"},"ts":1682542169947,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4piSzlU8-aY_YQsl-J9SpxRR18k231QG7rU1zXw6ZBk"},
{"content":{"body":"I worry that *forcing* module blocks rather than also allowing string specifiers will make initialization of programs too awkward and therefore impractical","format":"org.matrix.custom.html","formatted_body":"I worry that <em>forcing</em> module blocks rather than also allowing string specifiers will make initialization of programs too awkward and therefore impractical","msgtype":"m.text"},"ts":1682542191829,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qAbioLmu_ov8ilZa1WvjEjrXDfKZpd-Ah4Q8zHuqxzI"},
{"content":{"body":"it's possible that the answer is indeed to do both","msgtype":"m.text"},"ts":1682542282639,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zC0A6B3TkijDTtzFaTLE8cgm2KjZcqm9ZHoUZm4NsHo"},
{"content":{"body":"> <@mhofman:matrix.org> The module map is agent specific, different agents may have a different module map. The main question is independent initialization and what happens when you receive a shared struct from another agent, whether there is a relation to the \"same\" shared struct that may have been declared in the local agent\n\nI'm not so concerned about identity discontinuity. If each agent/realm is required to load its own copy of the behavior for a struct, the code defining that behavior could be different per agent/realm because of bundling/minification/tree shaking.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Vm654FAfWWwsb2GFUe9kmxfQqF2LT_Pzo7jjvXIYz5Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />The module map is agent specific, different agents may have a different module map. The main question is independent initialization and what happens when you receive a shared struct from another agent, whether there is a relation to the &quot;same&quot; shared struct that may have been declared in the local agent</blockquote></mx-reply>I'm not so concerned about identity discontinuity. If each agent/realm is required to load its own copy of the behavior for a struct, the code defining that behavior could be different per agent/realm because of bundling/minification/tree shaking.","m.relates_to":{"m.in_reply_to":{"event_id":"$Vm654FAfWWwsb2GFUe9kmxfQqF2LT_Pzo7jjvXIYz5Q"}},"msgtype":"m.text"},"ts":1682542325752,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i3LuKM-rcDaqeD4oPlDw5DSN6sv01bvCmLzN3anEPL8"},
{"content":{"body":"How is it a problem that it's different?","msgtype":"m.text"},"ts":1682542394103,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$o43eWDIcIiuwmM9fcgSfTSRRqcHYdLUUSovQ9AJfjpg"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm not so concerned about identity discontinuity. If each agent/realm is required to load its own copy of the behavior for a struct, the code defining that behavior could be different per agent/realm because of bundling/minification/tree shaking.\n\nI may have misinterpreted \"identity discontinuity\". I'm thinking about behavior, not identity. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$i3LuKM-rcDaqeD4oPlDw5DSN6sv01bvCmLzN3anEPL8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />I'm not so concerned about identity discontinuity. If each agent/realm is required to load its own copy of the behavior for a struct, the code defining that behavior could be different per agent/realm because of bundling/minification/tree shaking.</blockquote></mx-reply>I may have misinterpreted &quot;identity discontinuity&quot;. I'm thinking about behavior, not identity.","m.relates_to":{"m.in_reply_to":{"event_id":"$i3LuKM-rcDaqeD4oPlDw5DSN6sv01bvCmLzN3anEPL8"}},"msgtype":"m.text"},"ts":1682542413674,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wxYFePWIROekDMdnfMhfV10sAplXiqSkUBIlmm0BhzE"},
{"content":{"body":"Good, we are all trying to accomplish the same thing then","msgtype":"m.text"},"ts":1682542471938,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_SmZOuVTbwRzRm4zLWf3mh3McyCCkHHxbCRwJidgPtc"},
{"content":{"body":"by identity discontinuity I meant that the prototype object for a vector received from another agent may not be the same as the prototype object for a vector object defined and instantiated in the local agent.","msgtype":"m.text"},"ts":1682542525543,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h7vZqX07SshpvByxprLo9rKrvonsERjfXOLtpL105hI"},
{"content":{"body":"What matters to me is that there is a way to define `Vector` in two threads (A and B) such that a `Vector` created in A is also a `Vector` in B, and vise versa. Also, that a `Vector` created in A, sent to B, and then sent back to A is still a `Vector` in A.","format":"org.matrix.custom.html","formatted_body":"What matters to me is that there is a way to define <code>Vector</code> in two threads (A and B) such that a <code>Vector</code> created in A is also a <code>Vector</code> in B, and vise versa. Also, that a <code>Vector</code> created in A, sent to B, and then sent back to A is still a <code>Vector</code> in A.","msgtype":"m.text"},"ts":1682542604472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W_P8dYAcMcRZAi_CXbpBTVwCjJxVyQ6RqSZgWrrZkOQ"},
{"content":{"body":"A and B may have subtly different implementations of `Vector` (due to tree shaking), so there needs to be some way for A and B to coordinate what a `Vector` is.","format":"org.matrix.custom.html","formatted_body":"A and B may have subtly different implementations of <code>Vector</code> (due to tree shaking), so there needs to be some way for A and B to coordinate what a <code>Vector</code> is.","msgtype":"m.text"},"ts":1682542662719,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9NN_OGLXPt8_tL-I0kU6emDmhmYhem-Q4Q8RZ90NLfk"},
{"content":{"body":" * A and B may have subtly different implementations of `Vector` (due to tree shaking, etc.), so there needs to be some way for A and B to coordinate what a `Vector` is.","format":"org.matrix.custom.html","formatted_body":" * A and B may have subtly different implementations of <code>Vector</code> (due to tree shaking, etc.), so there needs to be some way for A and B to coordinate what a <code>Vector</code> is.","m.new_content":{"body":"A and B may have subtly different implementations of `Vector` (due to tree shaking, etc.), so there needs to be some way for A and B to coordinate what a `Vector` is.","format":"org.matrix.custom.html","formatted_body":"A and B may have subtly different implementations of <code>Vector</code> (due to tree shaking, etc.), so there needs to be some way for A and B to coordinate what a <code>Vector</code> is.","msgtype":"m.text"},"m.relates_to":{"event_id":"$9NN_OGLXPt8_tL-I0kU6emDmhmYhem-Q4Q8RZ90NLfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682542677456,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jOzC4QU2kUaLBb81--xFjAruP3VC2KvmWkJEuZEKH20"},
{"content":{"body":"The tree shaking concern isn't conjecture either. If \"the way\" to do multithreading in JS is going to require duplicating runtime code in each thread, developers are going to want to find ways to minimize the memory footprint of short-lived threads by tree shaking away unused functionality.","msgtype":"m.text"},"ts":1682542759740,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_12Fl3SpP84FFbOSI9keWmbBnAFoHA9I7FnKk6VFVsw"},
{"content":{"body":"Right, but the main question is whether this should be possible without an explicit \"synchronization\" message between A and B","msgtype":"m.text"},"ts":1682542763741,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Zar4tEEHdQREVMygq5xBrN00yI4Jnfbf-vNvMb4aajs"}
]