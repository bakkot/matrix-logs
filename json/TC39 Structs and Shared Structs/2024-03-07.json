[
{"content":{"body":"Are we still meeting today?","m.mentions":{},"msgtype":"m.text"},"ts":1709838140848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RnMYk0oxn4XIc5OzaUY8cDlcceenREAxNXldOtmPaUc"},
{"content":{"body":"I'm in the waiting room","m.mentions":{},"msgtype":"m.text"},"ts":1709838233790,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8n6cN8_f-2WqPbcewnIDtlbhnSp2wuz3H6QhnPPynWA"},
{"content":{"body":"maybe Shu is looking for a room","m.mentions":{},"msgtype":"m.text"},"ts":1709838240541,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$WKLR5ndUD7LnwEun0AyoKjoJXmKIdgbZw9ijwebAEcQ"},
{"content":{"body":"no we're already in the room","m.mentions":{},"msgtype":"m.text"},"ts":1709838307696,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tWPhiVrbvyCk27dvJrHIyLwffUdYKYMVKXBz_ec9Heo"},
{"content":{"body":"i don't see any people waiting to be admitted","m.mentions":{},"msgtype":"m.text"},"ts":1709838314795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kHbUFDu7iSpD3xaM8a9eWtqc7oPjQAeaf3N0tt2zwvE"},
{"content":{"body":"hmm","m.mentions":{},"msgtype":"m.text"},"ts":1709838315523,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TaYJ6-Kqh7FesmPf0AjqX-o9bjA0lLL2b-96xM0OwJU"},
{"content":{"body":"let me DM you the code","m.mentions":{},"msgtype":"m.text"},"ts":1709838320596,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vi5kSK4-LGbRqY2kVmgK2hq6xukSo6Pe1rNXHeQ2Qyg"},
{"content":{"body":"It occurred to me that we don't necessarily need thread local prototypes for shared structs, per se, if we're willing to live with the prototypes themselves leaking (i.e., remaining resident in memory until the app/thread shuts down). Back when I was exploring constructor/prototype correlation via handshake, those prototypes would have leaked anyways. Lets assume a given shared struct instance is tagged with a type identity representing the constructor that produced it and that type identity is itself shared across threads. Maintaining a per-agent registry of prototypes associated with those type identities is not unlike the idea of a thread-local WASM syscall table. Within a given agent we could have [[GetPrototypeOf]] look up the prototype associated with a struct instance's type identity not unlike how we look up the prototype for `1` or `\"foo\"`. That, at least, would be enough to experiment with attached behavior without requiring additional GC complexity.","format":"org.matrix.custom.html","formatted_body":"It occurred to me that we don't necessarily need thread local prototypes for shared structs, per se, if we're willing to live with the prototypes themselves leaking (i.e., remaining resident in memory until the app/thread shuts down). Back when I was exploring constructor/prototype correlation via handshake, those prototypes would have leaked anyways. Lets assume a given shared struct instance is tagged with a type identity representing the constructor that produced it and that type identity is itself shared across threads. Maintaining a per-agent registry of prototypes associated with those type identities is not unlike the idea of a thread-local WASM syscall table. Within a given agent we could have [[GetPrototypeOf]] look up the prototype associated with a struct instance's type identity not unlike how we look up the prototype for <code>1</code> or <code>\"foo\"</code>. That, at least, would be enough to experiment with attached behavior without requiring additional GC complexity.","m.mentions":{},"msgtype":"m.text"},"ts":1709843095353,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ITLYD4eFF-3P2AkZjp3IRCRh6rG09gqDrYhfVodjI9U"}
]