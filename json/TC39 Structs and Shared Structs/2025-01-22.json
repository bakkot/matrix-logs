[
{"content":{"body":"thoughts on prohibiting computed property names in struct bodies? with structs positioned as \"restricted classes that trade expressivity for performance and analyzability\", prohibiting computed property names furthers the analyzability goal","m.mentions":{},"msgtype":"m.text"},"ts":1737507820296,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bB7gQQaX4fMaiBhM_eazobRL_3inGb_tmIXa3Y1T4VI"},
{"content":{"body":"I would support it. If I'd had to guess without looking, I'd have assumed they were already prohibited.","m.mentions":{},"msgtype":"m.text"},"ts":1737508740372,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$eHXj-XCjpAJJr-Ew9z5emCyiEqkr_Q13KoOcFtUNb0g"},
{"content":{"body":"they are currently allowed, but not really intentionally","m.mentions":{},"msgtype":"m.text"},"ts":1737512592511,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LmsQHjHL6Gp992MzvqVx6L1cmWvUEUGmBQ2kQaNdQ2Y"},
{"content":{"body":"Would this then prohibit using symbol named properties like `Symbol.dispose`? If so, I am not in favor. ","format":"org.matrix.custom.html","formatted_body":"Would this then prohibit using symbol named properties like <code>Symbol.dispose</code>? If so, I am not in favor.","msgtype":"m.text"},"ts":1737522649989,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jnTm4LuDqzDd4DYyJXDrzlt3B83iNss2FI70LKz9bd4"},
{"content":{"body":"the principle is statically analyzable name","m.mentions":{},"msgtype":"m.text"},"ts":1737526472219,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cddzyf3bGqmRv5XljUJvCh5az-2NxFnG7_IDulzck6s"},
{"content":{"body":"i wonder if there's a way to recover well-known symbol names and retaining analyzability","m.mentions":{},"msgtype":"m.text"},"ts":1737526483818,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sTqEhk9VeqKC127aG87kU20gg5OacuXIjcAcWRRqQQg"},
{"content":{"body":"then you also wouldn't be able to have a string property name?","m.mentions":{},"msgtype":"m.text"},"ts":1737526644491,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$zRL9euARU4VLiPjmgPdzGaJzcXulSpgNZ7bb8n_4bj4"},
{"content":{"body":"Was going to say: Well known `Symbol` fields are non-writable&non-configurable.\nso `[Symbol.iterator]` is statically known.\n expect Symbol itself could be replaced","format":"org.matrix.custom.html","formatted_body":"Was going to say: Well known `Symbol` fields are non-writable&amp;non-configurable.<br />so `[Symbol.iterator]` is statically known.<br />Â expect Symbol itself could be replaced","msgtype":"m.text"},"ts":1737555003124,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$yscvke-6cIfNTR3XdU8dTrT7sx1KjUaBi3NWlM_Pefg"},
{"content":{"body":"Allowing `[Symbol.dispose]` but not `[x]` would be inconsistent and a source of confusion for users.","format":"org.matrix.custom.html","formatted_body":"Allowing <code>[Symbol.dispose]</code> but not <code>[x]</code> would be inconsistent and a source of confusion for users.","msgtype":"m.text"},"ts":1737558089678,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9V5qINsx65RjabNYITv9yaj8vn9kSBTOPJx7utAyeUc"},
{"content":{"body":"Why is this static analyzability necessary? The shape will be locked down when the definition is evaluated. I'd be fine with implementations having fast paths for statically analyzable definitions, but not with disallowing them entirely. ","format":"org.matrix.custom.html","formatted_body":"Why is this static analyzability necessary? The shape will be locked down when the definition is evaluated. I'd be fine with implementations having fast paths for statically analyzable definitions, but not with disallowing them entirely.","msgtype":"m.text"},"ts":1737558237133,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FnptcoMJ52HZRZgNGbJxRZSJLAOXTn2pijPS_5JFf4M"}
]