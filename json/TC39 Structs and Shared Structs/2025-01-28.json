[
{"content":{"body":"I do wonder if it would make sense to have structs have a unique `typeof`. Since implementations have been somewhat opposed to new primitives (i.e., decimal) as they require considerable changes to the implementation, introducing a single new \"user-defined primitive\" type a la `struct` might be the answer. If we were to ever introduce operator overloading, we could hang it off of a user-defined \"primitive\" like a `struct` has some similarities to other primitives (i.e., per-realm/per-compartment prototype lookup). We could define `new Decimal()` to return an object, but later define `Decimal()` as returning a `struct`/`shared struct` instance so that it could work with shared memory (treating the object form as a boxed primitive). If we ever did introduce operator overloading to structs we could extend the `struct` version `Decimal` to support operators.","format":"org.matrix.custom.html","formatted_body":"I do wonder if it would make sense to have structs have a unique <code>typeof</code>. Since implementations have been somewhat opposed to new primitives (i.e., decimal) as they require considerable changes to the implementation, introducing a single new \"user-defined primitive\" type a la <code>struct</code> might be the answer. If we were to ever introduce operator overloading, we could hang it off of a user-defined \"primitive\" like a <code>struct</code> has some similarities to other primitives (i.e., per-realm/per-compartment prototype lookup). We could define <code>new Decimal()</code> to return an object, but later define <code>Decimal()</code> as returning a <code>struct</code>/<code>shared struct</code> instance so that it could work with shared memory (treating the object form as a boxed primitive). If we ever did introduce operator overloading to structs we could extend the <code>struct</code> version <code>Decimal</code> to support operators.","m.mentions":{},"msgtype":"m.text"},"ts":1738079960403,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K9PvZ6uERNn5-LXE_Cmo_VRcbzDFtU7rG1RCPFxfmUk"},
{"content":{"body":"I will reiterate, it is probably important for compatibility that primitive (i.e., `typeof x !== \"object\" || x !== null`) ⇒ immutable. IOW, new `typeof` values are not acceptable for mutable values.","format":"org.matrix.custom.html","formatted_body":"I will reiterate, it is probably important for compatibility that primitive (i.e., <code>typeof x !== \"object\" || x !== null</code>) ⇒ immutable. IOW, new <code>typeof</code> values are not acceptable for mutable values.","m.mentions":{},"msgtype":"m.text"},"ts":1738080372642,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$bgRodLkxNp1E0iYdkNDkFTp80QzJli7Txxm4-uTIGS8"}
]