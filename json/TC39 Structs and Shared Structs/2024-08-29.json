[
{"content":{"body":"I seem to have bludgeoned the Join button enough times for Matrix to acknowledge my presence.","m.mentions":{},"msgtype":"m.text"},"ts":1724957728663,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$L1cvPm4U_6yI1kZDzp0mztdByi-CWTtVjITVR6I83A4"},
{"content":{"body":"Welcome","msgtype":"m.text"},"ts":1724957826457,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$r7Znagq3Yd4WzPWZ_66xwv2NGXwtUzqh4kEuq7iN170"},
{"content":{"body":"kriskowal: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:\n\nFor reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62 \nAlternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kriskowal:aelf.land\">kriskowal</a>: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:</p>\n<p>For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62<br>Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9</p>\n","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"msgtype":"m.text"},"ts":1724957909501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A"},
{"content":{"body":"> <@rbuckton:matrix.org> kriskowal: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:\n> \n> For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62 \n> Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9\n\nYeah, Matrix isn’t good at chat. One cannot simply start up a new Matrix instance with friends and migrate their identity, much less convince Matrix the old one is gone, especially when matrix.org has forgotten its side of the credentials for it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p><a href=\"https://matrix.to/#/@kriskowal:aelf.land\">kriskowal</a>: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:</p>\n<p>For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62<br />Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9</p>\n</blockquote></mx-reply>Yeah, Matrix isn’t good at chat. One cannot simply start up a new Matrix instance with friends and migrate their identity, much less convince Matrix the old one is gone, especially when matrix.org has forgotten its side of the credentials for it.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A"}},"msgtype":"m.text"},"ts":1724957993523,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$YYmg11xfUikYdFLerGWRAphpaLR_oSasRWfqL7TZWpc"},
{"content":{"body":"By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:\n```\nstruct Foo {}\naddEventListener('message', event => {\n  const foo = new Foo(event.data.foo);\n});\n```\nWherein, `Foo` is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &c, `event.data.foo` is an opaque handle on shared memory without behavior, and `new Foo(event.data.foo)` unites the data and behavior.","format":"org.matrix.custom.html","formatted_body":"<p>By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:</p>\n<pre><code>struct Foo {}\naddEventListener('message', event =&gt; {\n  const foo = new Foo(event.data.foo);\n});\n</code></pre>\n<p>Wherein, <code>Foo</code> is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &amp;c, <code>event.data.foo</code> is an opaque handle on shared memory without behavior, and <code>new Foo(event.data.foo)</code> unites the data and behavior.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724958293579,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$WfuO7QDjdTxJbCl-DVsZRWgrbDs6RzOvcwTMn4AJs5U"},
{"content":{"body":"And, of course `Foo.prototype` captures the behavior side.","format":"org.matrix.custom.html","formatted_body":"And, of course <code>Foo.prototype</code> captures the behavior side.","m.mentions":{},"msgtype":"m.text"},"ts":1724958350783,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$1u_QqLU2gAgjxwLNpForE82QMXoosMRVIsqzz2M3rmE"},
{"content":{"body":"what would this union do","m.mentions":{},"msgtype":"m.text"},"ts":1724958551957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jICV9CcXz0MBlZ21FOkA4v5bDIkadCKDAm7lMMJy8IE"},
{"content":{"body":"one of the primary goal here is to actually share the objects, not just share the payload","m.mentions":{},"msgtype":"m.text"},"ts":1724958573669,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OZpUSBhnKmi-wy_02VMd6pC8dGWEYfzju_7kRrL1u_o"},
{"content":{"body":"this is because application state, by volume, is a lot of pointers. recreating your object graph from payloads per thread means you are not scaling with the number of threads","m.mentions":{},"msgtype":"m.text"},"ts":1724958610432,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jpzcSVbIrRVmbAstrPPrODXnU9TpekkMFyq0rkVI2Bk"},
{"content":{"body":"so any solution that requires creating wrapper objects per-thread is a nonstarter","m.mentions":{},"msgtype":"m.text"},"ts":1724958622050,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SJ8b7O-GSyvAMmztdcFTrf9REVbQuudzzdrjgEFO5YA"},
{"content":{"body":"i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms","m.mentions":{},"msgtype":"m.text"},"ts":1724958625905,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA"},
{"content":{"body":"yes, payload and backing memory are interchangeable for what i said","m.mentions":{},"msgtype":"m.text"},"ts":1724958650009,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7HqQFlkVEPSZ2GymeU47xjhGJCLNC29QAhsef3ZcHrc"},
{"content":{"body":"a related question is \"why not create object overlays on top of SABs\"","m.mentions":{},"msgtype":"m.text"},"ts":1724958666354,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gc2tmJoq6v2BNtuIGwOMrTcv-LVxqnVAzH4qKpQrPqw"},
{"content":{"body":"> <@kriskowal:aelf.land> i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms\n\nIf objects don't capture any realm-specific state, you can actually share the objects ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br />i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms</blockquote></mx-reply>If objects don't capture any realm-specific state, you can actually share the objects","m.relates_to":{"m.in_reply_to":{"event_id":"$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA"}},"msgtype":"m.text"},"ts":1724958671362,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OxsxgwcSWDuWSiL-I2ga2OOl5eEvDAv1In_P2_r13UA"},
{"content":{"body":"oh, right, we’re talking about a new primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1724958715117,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok"},
{"content":{"body":"This would be different from SharedArrayBuffer, where there is a per-thread wrapper pointing to the same memory","msgtype":"m.text"},"ts":1724958752722,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9EhTq3HN0ieUyWfMMlkzs0w61vEdl4ewBLZG24TwqFQ"},
{"content":{"body":"> <@kriskowal:aelf.land> oh, right, we’re talking about a new primitive.\n\nwell, they're objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>oh, right, we’re talking about a new primitive.</blockquote></mx-reply>well, they're objects","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok"}},"msgtype":"m.text"},"ts":1724958794543,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5yJ_qo9vAfT869K5yHeqSqdnMPGEKd4O_AuMpzjmjtk"},
{"content":{"body":"but yes, internally you can think of them as new primitives","m.mentions":{},"msgtype":"m.text"},"ts":1724958809562,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BYmUn2347rcSGVAytEhCl5P7dl2GzvOhlcCPNQxm0Zs"},
{"content":{"body":"they're objects with special behavior","m.mentions":{},"msgtype":"m.text"},"ts":1724958814464,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w6MNOPCWGgh3QJGnqB1imgFSWRA_6W4b8dzyhDxqQis"},
{"content":{"body":"alright, so the crux of this is that the _value_ capturing the union of the shared memory and behavior must also be a primitive.","format":"org.matrix.custom.html","formatted_body":"alright, so the crux of this is that the <em>value</em> capturing the union of the shared memory and behavior must also be a primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1724958825831,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$LeaDSxJ3GWSlN_kllRWvS_u9cK3vNdOalvlApb2hup4"},
{"content":{"body":"sorry, having trouble parsing that sentence","m.mentions":{},"msgtype":"m.text"},"ts":1724958851842,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e00_2ER3r9jjxV-Vp6p0ZJL-ElTH4hKr5ceEIYyT3jE"},
{"content":{"body":"i now better understand how we arrive at the prototype walk algorithm","m.mentions":{},"msgtype":"m.text"},"ts":1724958861525,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$N9u51ZpObKuFXnpfCYWwiKC_7SjOffGcxjujFJpV4P8"},
{"content":{"body":"there's another alternative that was dismissed, which is actually thread-safe functions","m.mentions":{},"msgtype":"m.text"},"ts":1724958900147,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-cmB1-b274DoyxTAd6A-pwGII6ifK0SYxGWS0gXvXe0"},
{"content":{"body":"there’s no per-worker object that points to the local prototype and shared data","m.mentions":{},"msgtype":"m.text"},"ts":1724958904960,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$oF-dQgHigpq0j8DtI_2L8qUs340-CSwl9QxXjq34R5s"},
{"content":{"body":"that is just too much a can of worms, and nobody wants a new callable type","m.mentions":{},"msgtype":"m.text"},"ts":1724958908604,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xdYGeDdv8WpFMy-WBSfsSoki3ix46E5rCgzj9ROnesg"},
{"content":{"body":"> <@kriskowal:aelf.land> there’s no per-worker object that points to the local prototype and shared data\n\nyeah","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$oF-dQgHigpq0j8DtI_2L8qUs340-CSwl9QxXjq34R5s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>there’s no per-worker object that points to the local prototype and shared data</blockquote></mx-reply>yeah","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oF-dQgHigpq0j8DtI_2L8qUs340-CSwl9QxXjq34R5s"}},"msgtype":"m.text"},"ts":1724958916204,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9SWnzcGX420P4KY3kbOsSw653iEc1dn8POalUf8ab54"},
{"content":{"body":"this seems cursed","m.mentions":{},"msgtype":"m.text"},"ts":1724958938368,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xZudu6pGZr_bhDFtsnj95hYTlm8KGWGo9aNUnAauGuY"},
{"content":{"body":"heh, in what way?","m.mentions":{},"msgtype":"m.text"},"ts":1724958954723,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ke5DZ-CJrc_ZpdEhbwU_GMP8lY7bX-9yW-PH8NfMiPw"},
{"content":{"body":"i can see why this design direction forces today’s debate about where to put the global state","m.mentions":{},"msgtype":"m.text"},"ts":1724958999527,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$d6gZZ4XvZp-gZVU4nrJmzLNQyjkOqnUKhjzn5QTzjTM"},
{"content":{"body":"ah, yeah","m.mentions":{},"msgtype":"m.text"},"ts":1724959011946,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6oTMkwf83lc5bc_htDrmuOZdlKawhczUjgS_DylIfU0"},
{"content":{"body":"For the record, I think it would be good to explore the thread-safe functions option at least a little bit. ","m.mentions":{},"msgtype":"m.text"},"ts":1724959066350,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$WXhJA_QEAVYLKLHYVqywClwUp9n1TFQA6sm8Fc4huF8"},
{"content":{"body":"i agree, as long as in parallel","m.mentions":{},"msgtype":"m.text"},"ts":1724959082220,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7pept7zJYIBFwka419P5ZPOp-HRQ0RhlCgrV0NNFUFk"},
{"content":{"body":"but identity discontinuity makes it _really_ difficult","format":"org.matrix.custom.html","formatted_body":"but identity discontinuity makes it <em>really</em> difficult","m.mentions":{},"msgtype":"m.text"},"ts":1724959104084,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VYxXerzpV4WjvI0zcM1Qu7lcShsTx12evvD48C7PJh4"},
{"content":{"body":"the Moddable folks would be good to involve in a conversation about thread-safe functions.","m.mentions":{},"msgtype":"m.text"},"ts":1724959104604,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$82bF9jDMuPZTvgTy_4dbSVLFN4PeniLBFDOlbdI-ZN4"},
{"content":{"body":"XS is a bit unique in its design constraints, but does have thread-safe functions and can sense when a subgraph can be safely captured in ROM.","m.mentions":{},"msgtype":"m.text"},"ts":1724959171704,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$E_RlEptBBGbw7qbrqlwIMvunVNJGKQIzP-c73-3zp80"},
{"content":{"body":"There are many parts of this proposal that make big changes; I'm not convinced that new callables would be worse than some of the other proposed changes","m.mentions":{},"msgtype":"m.text"},"ts":1724959185410,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$kBmKyvYIju3QRpKe8c0XVcfrekh2GyKtijqDbgvsB9c"},
{"content":{"body":"What do you mean by identity discontinuity?","m.mentions":{},"msgtype":"m.text"},"ts":1724959193941,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$wqSCRQoJK8O0SSofwAt3CizE_Oi2x5Eghgg2xiqVC5A"},
{"content":{"body":"> <@iain:mozilla.org> There are many parts of this proposal that make big changes; I'm not convinced that new callables would be worse than some of the other proposed changes\n\ni am","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$kBmKyvYIju3QRpKe8c0XVcfrekh2GyKtijqDbgvsB9c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>There are many parts of this proposal that make big changes; I&#39;m not convinced that new callables would be worse than some of the other proposed changes</blockquote></mx-reply>i am","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kBmKyvYIju3QRpKe8c0XVcfrekh2GyKtijqDbgvsB9c"}},"msgtype":"m.text"},"ts":1724959210026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bi9qxzAbjTvjBXmUdD1qzm1c3RftMuM4iN5pkBzN0xg"},
{"content":{"body":"i'm gonna need something more specific than \"this is already large, therefore it has room for other large changes\"","m.mentions":{},"msgtype":"m.text"},"ts":1724959233315,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$baYU1ZAxy-tVGFe4GPS0N086JbhGSEYvB7eArwOUVfA"},
{"content":{"body":"Identity discontinuity is `const source = '{}', eval(source) !== eval(source)`.","format":"org.matrix.custom.html","formatted_body":"Identity discontinuity is <code>const source = '{}', eval(source) !== eval(source)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1724959240140,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$WboV6C1Yiipo5kdKxg3nsiV9AjbCGQG7YcVjA8ihjtI"},
{"content":{"body":"Which is not an interesting example, but `const source = 'class Foo { #p }'` is more interesting.","format":"org.matrix.custom.html","formatted_body":"Which is not an interesting example, but <code>const source = 'class Foo { #p }'</code> is more interesting.","m.mentions":{},"msgtype":"m.text"},"ts":1724959276799,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$8GI8Crq9ubiAlbcPeBGrII8dfWb2ruMgmZ5SHu6N310"},
{"content":{"body":"> <@iain:mozilla.org> What do you mean by identity discontinuity?\n\nspecifically, i'm talking about how each global has its own set of Math, Object, Function, etc, that have distinct identity","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$wqSCRQoJK8O0SSofwAt3CizE_Oi2x5Eghgg2xiqVC5A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>What do you mean by identity discontinuity?</blockquote></mx-reply>specifically, i'm talking about how each global has its own set of Math, Object, Function, etc, that have distinct identity","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wqSCRQoJK8O0SSofwAt3CizE_Oi2x5Eghgg2xiqVC5A"}},"msgtype":"m.text"},"ts":1724959305190,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$y_p2O_KiQSkS2TWG9xryphvTqvq3dpw0VFUfZOF7MvI"},
{"content":{"body":"JS functions are closures very deep down, not just the JS user code closed-over stuff","m.mentions":{},"msgtype":"m.text"},"ts":1724959339987,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F53RCTHHOYfFUwNIZpggolrxc39RTV6TVyGT6iffPH0"},
{"content":{"body":"so we'd have to answer the question of what does that mean for thread-safe functions","m.mentions":{},"msgtype":"m.text"},"ts":1724959352249,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZidNIok9UiA-12Z0FP-g4pfDZAE_5-He38XPHJmOGE4"},
{"content":{"body":"do they become more dynamically scoped?","m.mentions":{},"msgtype":"m.text"},"ts":1724959355632,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$m3HF9ikyV_vlygjF6K0qSGknLXvZaxfoaBuVQ3UOuqw"},
{"content":{"body":"Without having thought it through much, I would want to say that they can't capture anything other than global variables, and global variables are always looked up in the local global.","m.mentions":{},"msgtype":"m.text"},"ts":1724959447288,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$fOTMCTIjUhd6euJYhYG28B3wDrG9E6CJp2J7kLKnep8"},
{"content":{"body":"okay, so dynamically scoped to the caller global","m.mentions":{},"msgtype":"m.text"},"ts":1724959497200,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mm83TE5OwB8L4nCqYjPATvkJKw9ugfi5KBzKXdEhGps"},
{"content":{"body":"Yes. If there were a clean way to distinguish between `shared function foo() { return Math; }` and `var x; shared function foo() { return x; }`, I would also like to prohibit the latter.","format":"org.matrix.custom.html","formatted_body":"Yes. If there were a clean way to distinguish between <code>shared function foo() { return Math; }</code> and <code>var x; shared function foo() { return x; }</code>, I would also like to prohibit the latter.","m.mentions":{},"msgtype":"m.text"},"ts":1724959529676,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$aN6WcHNkSmha1fVGrxDXDxpAGIvsVsMBzy7b8rmDbEI"},
{"content":{"body":"is it basically this thing i wrote up a while ago","m.mentions":{},"msgtype":"m.text"},"ts":1724959619634,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dxKyD_llbMdR1h7iIbANiSJyDlfGngwvQtSM7KbJjDU"},
{"content":{"body":"https://github.com/tc39/proposal-structs/blob/main/CODE-SHARING-IDEAS.md","m.mentions":{},"msgtype":"m.text"},"ts":1724959620158,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6ED1g8CwpVdGXJpWRDgBboOlL9P8sTNwKEJVIDeC0hQ"},
{"content":{"body":"So that modulo monkey-patching, all the \"dynamically scoped\" stuff you're closing over is basically the same between realms","m.mentions":{},"msgtype":"m.text"},"ts":1724959656042,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$I-RXj4N9chu0jgfCpGZ9tyw-vHdToM5xjRQ9p2V6jCc"},
{"content":{"body":"That looks like a better thought out version of my vague notion, yes","m.mentions":{},"msgtype":"m.text"},"ts":1724959674960,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$p01nCpD1fdjqH4r2gzvaw4TDEG0Hm0bxVy5OatY_A_g"},
{"content":{"body":"my conclusion is that i think it's a lot of work and a lot of complexity for the language for not as much gain as you might think","m.mentions":{},"msgtype":"m.text"},"ts":1724959747184,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zn2-Nb5zpya2EzOhlM3BLW4osHsYMptZZl6QVabFC_E"},
{"content":{"body":"like, people are gonna want to close over state in a thread-local way during computation","m.mentions":{},"msgtype":"m.text"},"ts":1724959769440,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2r-wMSYraSDy8nONWfjjX8jPrSaOywdwoN9yznH5N-k"},
{"content":{"body":"and i think that's fine","m.mentions":{},"msgtype":"m.text"},"ts":1724959772070,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rCfoVc-7LXVrks_0u7y1CzzjN2mASh5HfUHWHEdINSw"},
{"content":{"body":"It it imagined that every get/set of an individual property on a shared struct is implicitly an atomic on that individual field?","m.mentions":{},"msgtype":"m.text"},"ts":1724959823964,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$TQlR3ix1NDT7h36cqTHaWa1QNM0oNM23sF605vrgaOM"},
{"content":{"body":"and i believe more and more that we actually get more mileage out of letting people use the functions we have today on shared data, but make that ergonomic","m.mentions":{},"msgtype":"m.text"},"ts":1724959828247,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lfOtBy2R3Q1T7aKfDFcybaCBBliWzlFaNJJwgkHEM2w"},
{"content":{"body":"My hope is that doing something like this would let us significantly simplify the prototype problem","m.mentions":{},"msgtype":"m.text"},"ts":1724959856669,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$_CNwgzJnMQx2I_ed9xivV7t83BN7eCKNaZpaHErIvuw"},
{"content":{"body":"> <@kriskowal:aelf.land> It it imagined that every get/set of an individual property on a shared struct is implicitly an atomic on that individual field?\n\nyes, Unordered by default. Atomics.load/store and friends are extended to be able to operate on struct fields should you want sequentially consistent atomic access","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$TQlR3ix1NDT7h36cqTHaWa1QNM0oNM23sF605vrgaOM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>It it imagined that every get/set of an individual property on a shared struct is implicitly an atomic on that individual field?</blockquote></mx-reply>yes, Unordered by default. Atomics.load/store and friends are extended to be able to operate on struct fields should you want sequentially consistent atomic access","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TQlR3ix1NDT7h36cqTHaWa1QNM0oNM23sF605vrgaOM"}},"msgtype":"m.text"},"ts":1724959878874,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b1KP7K-3sQI4Y-Q8DelMWSTcm0iGmws5qQRFmiS-OV0"},
{"content":{"body":"the guarantee is the same as bare reads/writes on SABs via TypedArrays: if you have races, you can observe any of the written values, but they shall never tear","m.mentions":{},"msgtype":"m.text"},"ts":1724959908421,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1hvBwfUhAjIHN-O_tFb4oD2q1fhdr04J3PHjQVrb0eI"},
{"content":{"body":"i.e. you can't observe half of one write composed with half of another write","m.mentions":{},"msgtype":"m.text"},"ts":1724959922773,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bQ7_KlvUzl5-YSC8SErEpNHFz7i_iqDKHgyOUCUVhxo"},
{"content":{"body":"I gather from the requirements, that it’s imagined that incrementally replacing a `class` with a `shared struct` is a delicate-but-possible performance improving refactor that doesn’t require changes from the consuming code","format":"org.matrix.custom.html","formatted_body":"I gather from the requirements, that it’s imagined that incrementally replacing a <code>class</code> with a <code>shared struct</code> is a delicate-but-possible performance improving refactor that doesn’t require changes from the consuming code","m.mentions":{},"msgtype":"m.text"},"ts":1724959981239,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$MRzRcaLcuw7fFgrOLi7WjyIX7kAo4Jl5Oz1gVin9Xfs"},
{"content":{"body":"I’m much more familiar with these shenanigans in other languages. I see that CAS is `Atomics.compareExchange`. Alright.","format":"org.matrix.custom.html","formatted_body":"I’m much more familiar with these shenanigans in other languages. I see that CAS is <code>Atomics.compareExchange</code>. Alright.","m.mentions":{},"msgtype":"m.text"},"ts":1724960044200,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$iXOPqtCkfJ57L1phzoAcnlHLZiCyVcV-ZUJGJksm-tQ"},
{"content":{"body":"that's not a hard requirement for me, but is certainly a goal. i believe that's harder requirement for Ron perhaps","m.mentions":{},"msgtype":"m.text"},"ts":1724960045793,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NeVgNE5PYMHV3doJFmujQvrDir3G0qxs07wwnAXhHwk"},
{"content":{"body":"i said in the beginning of the call, before you joined, that i can live in a world where we don't solve the correlation problem because on net there's still enough value here for the power apps","m.mentions":{},"msgtype":"m.text"},"ts":1724960081580,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$l-RoNGydC1dNlmehbdycEEDqxHAtf-UWC_pNKxMTyt8"},
{"content":{"body":"but if we can solve the correlation problem, we unlock things like incremental adoption that helps a larger amount of apps","m.mentions":{},"msgtype":"m.text"},"ts":1724960104391,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kA-5JLppNPvRJaxsRLXIXHBPXECvH7JiJLHEVQHcf48"},
{"content":{"body":"So, you’d personally be satisfied with the data-only subset?","m.mentions":{},"msgtype":"m.text"},"ts":1724960109352,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$dcfUegDw3HX8zSEWbhV1uf8W3VbGoiVjg2qFgsegZQw"},
{"content":{"body":"i wouldn't equate \"satisfied\" with \"can live with\"","m.mentions":{},"msgtype":"m.text"},"ts":1724960122683,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ITC5HHsuIdLOZqPMnsp101xNbOV2MOetnjIjVc8KjQM"},
{"content":{"body":"Or rather, on behalf of the economic interests your represent.","m.mentions":{},"msgtype":"m.text"},"ts":1724960127677,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Q59t3C6mzew86L4Sbfutaoiw7LnRkbiJhzkDs3l67ok"},
{"content":{"body":"by \"can live with\" as, if it was the only thing holding the rest of the proposal up, i'd drop it","m.mentions":{},"msgtype":"m.text"},"ts":1724960143008,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n2KiNVAqwZkVHIQFVdp1PQQIYb0DZAqv3DyUQeHghJ4"},
{"content":{"body":"and iterate on it after the initial proposal","m.mentions":{},"msgtype":"m.text"},"ts":1724960159140,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o6FUCJuf1hbqmQg0VIyYZ86jiCoVbj7i_akP-xQ2k8E"},
{"content":{"body":"> <@kriskowal:aelf.land> Or rather, on behalf of the economic interests your represent.\n\nspeaking only for myself, yes. i still think we'd be doing a disservice for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes _harder_ to encapsulate","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Q59t3C6mzew86L4Sbfutaoiw7LnRkbiJhzkDs3l67ok?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>Or rather, on behalf of the economic interests your represent.</blockquote></mx-reply>speaking only for myself, yes. i still think we'd be doing a disservice for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes <em>harder</em> to encapsulate","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q59t3C6mzew86L4Sbfutaoiw7LnRkbiJhzkDs3l67ok"}},"msgtype":"m.text"},"ts":1724960248929,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BmSYRMdL0vhQi3wt63PSZKR_mqHKrR5nOHWh59QPaAg"},
{"content":{"body":"which ron and i think will result in higher likelihood of thread unsafe code being written","m.mentions":{},"msgtype":"m.text"},"ts":1724960266898,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LTuOZ0tLWH1LPdSTuHI3932AScMQ5wOI1BPI2irMJxs"},
{"content":{"body":"> <@kriskowal:aelf.land> Or rather, on behalf of the economic interests your represent.\n\n * speaking only for myself, yes. i still think we'd be doing a disservice to the language for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes _harder_ to encapsulate","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Q59t3C6mzew86L4Sbfutaoiw7LnRkbiJhzkDs3l67ok?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>Or rather, on behalf of the economic interests your represent.</blockquote></mx-reply> * speaking only for myself, yes. i still think we'd be doing a disservice to the language for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes <em>harder</em> to encapsulate","m.mentions":{},"m.new_content":{"body":"speaking only for myself, yes. i still think we'd be doing a disservice to the language for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes _harder_ to encapsulate","format":"org.matrix.custom.html","formatted_body":"speaking only for myself, yes. i still think we'd be doing a disservice to the language for many of the reasons we've gone into with Mark in the past. the most salient of which, i think, is that without ergonomically correlated methods, we're inviting people to use free functions, and it becomes <em>harder</em> to encapsulate","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$BmSYRMdL0vhQi3wt63PSZKR_mqHKrR5nOHWh59QPaAg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724960300446,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Zgkz-j9nN_crJAxds2u5_51y9JezeX1XAs5l37edoFs"},
{"content":{"body":"So, the cursed fork has tines:\n1. manual union of data and behavior (untenable because it obviates shared memory and reduces to a shared array buffer proxy membrane we can already do)\n2. per-realm registry of prototypes (which requires some mitigation so such prototypes can be safely shared between compartments, maybe pure functions, freezing isn’t enough, but pure could be shared by threads)\n3. dynamic scope and a per-module/evaluator hook to virtualize get-prototype-of (toward addressing compartment isolation—i think it unlikely that it does)\n4. deniable global registry of token->prototype mappings (i can’t speak for Mathieu Hofman’s proposal, which might preserve sub-realm sandboxing, but i’m not convinced)","format":"org.matrix.custom.html","formatted_body":"<p>So, the cursed fork has tines:</p>\n<ol>\n<li>manual union of data and behavior (untenable because it obviates shared memory and reduces to a shared array buffer proxy membrane we can already do)</li>\n<li>per-realm registry of prototypes (which requires some mitigation so such prototypes can be safely shared between compartments, maybe pure functions, freezing isn’t enough, but pure could be shared by threads)</li>\n<li>dynamic scope and a per-module/evaluator hook to virtualize get-prototype-of (toward addressing compartment isolation—i think it unlikely that it does)</li>\n<li>deniable global registry of token-&gt;prototype mappings (i can’t speak for <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>’s proposal, which might preserve sub-realm sandboxing, but i’m not convinced)</li>\n</ol>\n","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"msgtype":"m.text"},"ts":1724960554587,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$vzbWQRYNT8tnh_7BO5I2aDEn8CVQq7wXmTNBo_obYVc"},
{"content":{"body":"what's difference between 3 and 4?","m.mentions":{},"msgtype":"m.text"},"ts":1724960621908,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CuN4-EemUjJeJO8WUFM1yt2RSHAdoIjbp9srQGcZYrM"},
{"content":{"body":"An outcome to avoid is order-dependence of evaluations of the same source, or a composition hazard where a system explodes if you evaluate a struct definition twice.","m.mentions":{},"msgtype":"m.text"},"ts":1724960661504,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$4ZlSJUqEpfvh9ccPRuaPZwUqLXmYujVmlaVTsHeIWQA"},
{"content":{"body":"> <@shuyuguo:matrix.org> what's difference between 3 and 4?\n\n3. Hooking get-prototype-of looks like `new Module(source, getStructPrototype(source, identifier) {maybeReturnPrototype()})`\n4. Looks like `new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})` and `struct Foo with structRegistry.something() {}`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$CuN4-EemUjJeJO8WUFM1yt2RSHAdoIjbp9srQGcZYrM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what&#39;s difference between 3 and 4?</blockquote></mx-reply><ol start=\"3\">\n<li>Hooking get-prototype-of looks like <code>new Module(source, getStructPrototype(source, identifier) {maybeReturnPrototype()})</code></li>\n<li>Looks like <code>new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})</code> and <code>struct Foo with structRegistry.something() {}</code></li>\n</ol>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CuN4-EemUjJeJO8WUFM1yt2RSHAdoIjbp9srQGcZYrM"}},"msgtype":"m.text"},"ts":1724960787324,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$6HMHQKT4i3o4O8pyaIbvojaGtDkjF38furRXrKFgWF8"},
{"content":{"body":"> <@shuyuguo:matrix.org> what's difference between 3 and 4?\n\n * 3. Hooking get-prototype-of looks like `new Module(source, {getStructPrototype(source, identifier) {maybeReturnPrototype()}})`\n4. Looks like `new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})` and `struct Foo with structRegistry.something() {}`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$CuN4-EemUjJeJO8WUFM1yt2RSHAdoIjbp9srQGcZYrM?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>what's difference between 3 and 4?</blockquote></mx-reply> * <ol start=\"3\">\n<li>Hooking get-prototype-of looks like <code>new Module(source, {getStructPrototype(source, identifier) {maybeReturnPrototype()}})</code></li>\n<li>Looks like <code>new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})</code> and <code>struct Foo with structRegistry.something() {}</code></li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"3. Hooking get-prototype-of looks like `new Module(source, {getStructPrototype(source, identifier) {maybeReturnPrototype()}})`\n4. Looks like `new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})` and `struct Foo with structRegistry.something() {}`","format":"org.matrix.custom.html","formatted_body":"<ol start=\"3\">\n<li>Hooking get-prototype-of looks like <code>new Module(source, {getStructPrototype(source, identifier) {maybeReturnPrototype()}})</code></li>\n<li>Looks like <code>new Evaluators({ globalThis: { structRegistry: new StructRegistry() }})</code> and <code>struct Foo with structRegistry.something() {}</code></li>\n</ol>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6HMHQKT4i3o4O8pyaIbvojaGtDkjF38furRXrKFgWF8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724960810859,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$3386cueieMbTrVFIRqTzl1u58e1lorhGs7EOJ1lxNqc"},
{"content":{"body":"In the prototype hook, the “identifier” would necessarily come from the text of the module source.","m.mentions":{},"msgtype":"m.text"},"ts":1724960875203,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$rEZfxEORmcN8vMpU43E1rYsadIbzsMEFqRxVkUbSug0"},
{"content":{"body":"given that neither of those things exist i don't really know the proposals well enough to understand","m.mentions":{},"msgtype":"m.text"},"ts":1724960900918,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IeRYAhosuB3g-jkp3WlUd9toJzL6KUOODAGlLNPT76k"},
{"content":{"body":" * given that neither of those things exist today i don't really know the proposals well enough to understand","m.mentions":{},"m.new_content":{"body":"given that neither of those things exist today i don't really know the proposals well enough to understand","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IeRYAhosuB3g-jkp3WlUd9toJzL6KUOODAGlLNPT76k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724960911230,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qXcay2K1FoYk9ed5d_pRvNDf1Y-J0AftZShPFAGdBpg"},
{"content":{"body":"i just wanna do something naive and simple man","m.mentions":{},"msgtype":"m.text"},"ts":1724960990827,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iRLZwzezOkfHbVmfreXXVTKdhx2dvZEgsDSJiDZQFGI"},
{"content":{"body":"I think we’re unlikely to converge on either 3 or 4.","m.mentions":{},"msgtype":"m.text"},"ts":1724960996613,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$62Ddfsnt8ViSt2NL1P1vx1xjUY3bxfTJwi8Koq6uqtk"},
{"content":{"body":"can we pass a nonce to Realm (Worker?) construction that determines which registry they'll use?","m.mentions":{},"msgtype":"m.text"},"ts":1724961066700,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YreIOFONt7dQO_uQP1G3L-6QNrv-1FPIIhXsqOUGSYs"},
{"content":{"body":"> <@shuyuguo:matrix.org> i just wanna do something naive and simple man\n\nshared memory concurrency","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$iRLZwzezOkfHbVmfreXXVTKdhx2dvZEgsDSJiDZQFGI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i just wanna do something naive and simple man</blockquote></mx-reply>shared memory concurrency","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iRLZwzezOkfHbVmfreXXVTKdhx2dvZEgsDSJiDZQFGI"}},"msgtype":"m.text"},"ts":1724961069048,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$ucf4lzn7eWv4hVJq11_tfgORfvqaZKkID-NajBQccfA"},
{"content":{"body":"> <@shuyuguo:matrix.org> i just wanna do something naive and simple man\n\n * shared memory parallelism","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$iRLZwzezOkfHbVmfreXXVTKdhx2dvZEgsDSJiDZQFGI?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>i just wanna do something naive and simple man</blockquote></mx-reply> * shared memory parallelism","m.mentions":{},"m.new_content":{"body":"shared memory parallelism","format":"org.matrix.custom.html","formatted_body":"shared memory parallelism","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ucf4lzn7eWv4hVJq11_tfgORfvqaZKkID-NajBQccfA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724961079295,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$kd26IPs-v8GpOHDiIl9dNyCLgiBOtuQozvSVOgZ72DM"},
{"content":{"body":"like script nonces, these are supposed to be generated afresh per load","m.mentions":{},"msgtype":"m.text"},"ts":1724961086508,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J4D_luELyDIhJTesmAl-2Caa_sNhxMiD58pefZGwBBU"},
{"content":{"body":"but you'd express constraints like, these workers are conceptually in the same package and should share the nonce","m.mentions":{},"msgtype":"m.text"},"ts":1724961095936,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xUPIemia3agzgmrf-5sly7wEJocbOyIpCY6WxGhih9Y"},
{"content":{"body":"and these other workers aren't","m.mentions":{},"msgtype":"m.text"},"ts":1724961100474,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ej_varTuzo0VVsqbncJSsSkD04enP08doX6Seev3XB8"},
{"content":{"body":"and those with the same nonce have the same implicit, ambiently available registry","m.mentions":{},"msgtype":"m.text"},"ts":1724961121745,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DsBTbWm-ED7srKPt3a-sjGEoWGc0NyltImGXag85Hf0"},
{"content":{"body":"so by default you don't get any correlation at all","m.mentions":{},"msgtype":"m.text"},"ts":1724961131090,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aqtrQ2jR4xAn1irgijieTG9HVwoiIQ22ybH5FJh5s5Q"},
{"content":{"body":"> <@kriskowal:aelf.land> shared memory parallelism\n\nyou telling me stores and loads are complicated? :)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ucf4lzn7eWv4hVJq11_tfgORfvqaZKkID-NajBQccfA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>shared memory parallelism</blockquote></mx-reply>you telling me stores and loads are complicated? :)","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ucf4lzn7eWv4hVJq11_tfgORfvqaZKkID-NajBQccfA"}},"msgtype":"m.text"},"ts":1724961160676,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kQVWLQaweta7XKSOdRMi6AI4aW2-P7CUh7WxKEGWvOM"},
{"content":{"body":"Yes","m.mentions":{},"msgtype":"m.text"},"ts":1724961176394,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$uP7wgtGJ5ZGE6w3pG40OP1iS0Kv1RAKg1-GmncxKfPc"},
{"content":{"body":"i think it goes without saying that shared structs have very narrow field of applicability. not even “all notions of worker” and certainly “not every postMessage”","m.mentions":{},"msgtype":"m.text"},"ts":1724961195541,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xQQnHNzltUvncwO51V4o0z3was6cAP_7o_Cq6uRxF58"},
{"content":{"body":"clarifying question: is `new Worker()` consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate process pipeline sidechannels”?","format":"org.matrix.custom.html","formatted_body":"clarifying question: is <code>new Worker()</code> consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate process pipeline sidechannels”?","m.mentions":{},"msgtype":"m.text"},"ts":1724961332177,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$LAGKwD2PDcj2ALm1rtW1Z0NRCKH87o6vPO6iMG5xRWw"},
{"content":{"body":"are you inviting me to defend the motivation or...?","m.mentions":{},"msgtype":"m.text"},"ts":1724961336805,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QHmRsPmspz2_-1NUZQe3IlnpYCXvz7NiWLH6GWaFWC4"},
{"content":{"body":" * clarifying question: is `new Worker()` consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate pipeline sidechannels”?","format":"org.matrix.custom.html","formatted_body":" * clarifying question: is <code>new Worker()</code> consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate pipeline sidechannels”?","m.mentions":{},"m.new_content":{"body":"clarifying question: is `new Worker()` consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate pipeline sidechannels”?","format":"org.matrix.custom.html","formatted_body":"clarifying question: is <code>new Worker()</code> consistently an OS thread or sometimes an OS process across all browsers? Do we currently have a place to stand to say “this worker must be in another process to mitigate pipeline sidechannels”?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$LAGKwD2PDcj2ALm1rtW1Z0NRCKH87o6vPO6iMG5xRWw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724961337773,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Yi5U42DNpE2wPOJnI7ygtSr7T12ABXxOVPmJRF6VzQc"},
{"content":{"body":"No, just clarification, I’m wondering whether this proposal implies other web changes like distinguished Worker constructor signatures.","m.mentions":{},"msgtype":"m.text"},"ts":1724961380119,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$3wmzaAa7_EH5Hd73TFYPsRKWX6wpIkAdFrgTKAECROo"},
{"content":{"body":"Did all browsers follow V8’s lead with isolates?","m.mentions":{},"msgtype":"m.text"},"ts":1724961427980,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$DKHj5oxazQaDFpNNvP51jB7WUtiqZP0DkYMD5UFm4Xw"},
{"content":{"body":"I like that pure functions obviate the correlation and identity discontinuity problems.","m.mentions":{},"msgtype":"m.text"},"ts":1724961529406,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Rqq9GJSYQuzjhWSaPuqsvrI8CkS2ylq0ElsZlsBdFCY"},
{"content":{"body":"so while the HTML spec doesn't define threads vs processes, it follows 262's lead in \"agent\" and \"agent cluster\", with the understanding that an agent is a thread, and an agent cluster constitutes an abstract process boundary","m.mentions":{},"msgtype":"m.text"},"ts":1724961533026,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5EdRn3tzTCBH7hsvc_JxWmcmbaWJTyfKY57LcmG_lAc"},
{"content":{"body":"And that’s a design direction you can follow from the just-data subset.","m.mentions":{},"msgtype":"m.text"},"ts":1724961543728,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$EfNxGx4iQfwRN5kaKHiWlgmS_Pys0OBezRl4tEn_Dtc"},
{"content":{"body":"i'd rather just not have it for the initial proposal then","m.mentions":{},"msgtype":"m.text"},"ts":1724961558904,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FLrj1ou6-7zQX2C7YlDavxan_ofZAUD_Ivbl3eXnEnA"},
{"content":{"body":"> <@kriskowal:aelf.land> No, just clarification, I’m wondering whether this proposal implies other web changes like distinguished Worker constructor signatures.\n\nit doesn't","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$3wmzaAa7_EH5Hd73TFYPsRKWX6wpIkAdFrgTKAECROo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>No, just clarification, I’m wondering whether this proposal implies other web changes like distinguished Worker constructor signatures.</blockquote></mx-reply>it doesn't","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3wmzaAa7_EH5Hd73TFYPsRKWX6wpIkAdFrgTKAECROo"}},"msgtype":"m.text"},"ts":1724961630611,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tbda06BFMm9HoUFTd9f2bf3NNEQcY0ar33ezwIGjhPM"},
{"content":{"body":"Doing shared memory GC between threads is already scary enough; I don't think anybody would be especially interested in implementing cross-process GC between different-process worker threads.","m.mentions":{},"msgtype":"m.text"},"ts":1724961641448,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$T6KdXAdKaz87M2w_VzVm1cFeYVc9sxrG83F2AeTSQS0"},
{"content":{"body":"there is already the notion of \"agent cluster\" being the set of agents that can access shared memory, which is currently SABs","m.mentions":{},"msgtype":"m.text"},"ts":1724961662294,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HebJSmonEN1n0eYiM7igOhSyNCAxp6wojpVlP3l4SlI"},
{"content":{"body":"So, I gather it’s the case that Worker is always agent and there isn’t a mechanism for a process boundary.","m.mentions":{},"msgtype":"m.text"},"ts":1724961677341,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$_hgu5vErLfcQmVTQqFqQUYdeHAvERgp5fUG74Uz70aY"},
{"content":{"body":" * there is already the notion of \"agent cluster\" being the set of agents that can access the same shared memory, which is currently SABs","m.mentions":{},"m.new_content":{"body":"there is already the notion of \"agent cluster\" being the set of agents that can access the same shared memory, which is currently SABs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HebJSmonEN1n0eYiM7igOhSyNCAxp6wojpVlP3l4SlI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724961679400,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5vAC5jRoffrXC6uZDpVekaS-m_iC5sGnvNVhS0T2RDc"},
{"content":{"body":"there is the notion of an agent cluster, but it is not reified","m.mentions":{},"msgtype":"m.text"},"ts":1724961690459,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_W100ywbf7u1-IpUCGcanNrxU42C3cb-72YAL8uCDeo"},
{"content":{"body":" * So, I gather it’s the case that Worker is always agent [edit: agent cluster] and there isn’t a mechanism for a process boundary.","m.mentions":{},"m.new_content":{"body":"So, I gather it’s the case that Worker is always agent [edit: agent cluster] and there isn’t a mechanism for a process boundary.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_hgu5vErLfcQmVTQqFqQUYdeHAvERgp5fUG74Uz70aY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724961693495,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$y_n93-BY4USUsJJfsKosleRPSeaIFFL9_1dvjN-WS9Q"},
{"content":{"body":"no, a Worker is an agent","m.mentions":{},"msgtype":"m.text"},"ts":1724961703599,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ji6XP98VenTTLi5zxUXjHT_cVahX6ug5yLEXCgI6zd4"},
{"content":{"body":"a set of workers + the main page constitutes an agent cluster","m.mentions":{},"msgtype":"m.text"},"ts":1724961711135,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UPnEHPy58uRyoPyzEm9OXCSIJv5esKm_ad427nB4XvQ"},
{"content":{"body":" * So, I gather it’s the case that Worker is always agent and there isn’t a mechanism for a process boundary.","m.mentions":{},"m.new_content":{"body":"So, I gather it’s the case that Worker is always agent and there isn’t a mechanism for a process boundary.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_hgu5vErLfcQmVTQqFqQUYdeHAvERgp5fUG74Uz70aY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724961717303,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$svOXvRZaEtIRtyLwVBccXPtYjrkG41WjEd4eiqearL0"},
{"content":{"body":"because they are in the same cluster, they can pass SABs to each other","m.mentions":{},"msgtype":"m.text"},"ts":1724961718556,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kdGqFK0IkDzt9EONB5n-9ahUQvt2Ddau6zsYQVflLNo"},
{"content":{"body":"alright, so there isn’t a web API for a process boundary.","m.mentions":{},"msgtype":"m.text"},"ts":1724961740942,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$AXBpR4l8Kr-ls4iRtgHhh3mUCNeA7-yXLbpj4PeX-CI"},
{"content":{"body":"correct","m.mentions":{},"msgtype":"m.text"},"ts":1724961746968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aPnp8uZh1z2qBs9G69HiHy6EYkYYNKjJwXFNw7iV4tQ"},
{"content":{"body":"thanks, that helps my grokery","m.mentions":{},"msgtype":"m.text"},"ts":1724961757994,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$iSK7C0ClfrDD6JLS-izRSI0T3vOBJ5xeNtvEUJ4X3ZY"},
{"content":{"body":"the decision Chrome took was, roughly, to put each tab into its own individual process","m.mentions":{},"msgtype":"m.text"},"ts":1724961769840,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$l97cYmwvZdU2AstxInEMxfC3tHMgBG-ddPMAJGUuAO8"},
{"content":{"body":"the more important process boundary is between \"content\" or \"renderer\" processes that run JS and display web content, and the \"browser\" process that is much more higly privileged","m.mentions":{},"msgtype":"m.text"},"ts":1724961845801,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lB8r9TSnzUELn8XNtNkg2LPcai_sV9-YR5Dd16MOo_8"},
{"content":{"body":"but as far as user content goes on the web, they all run in renderer processes","m.mentions":{},"msgtype":"m.text"},"ts":1724961866318,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4NBIKvFzwtFOd5P6BYOXApd02keLz-y1Ext6hOdojg"},
{"content":{"body":"> <@kriskowal:aelf.land> alright, so there isn’t a web API for a process boundary.\n\nthere is no API access, but you can basically request process boundaries via https://web.dev/articles/why-coop-coep","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$AXBpR4l8Kr-ls4iRtgHhh3mUCNeA7-yXLbpj4PeX-CI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>alright, so there isn’t a web API for a process boundary.</blockquote></mx-reply>there is no API access, but you can basically request process boundaries via https://web.dev/articles/why-coop-coep","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AXBpR4l8Kr-ls4iRtgHhh3mUCNeA7-yXLbpj4PeX-CI"}},"msgtype":"m.text"},"ts":1724962148362,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S4MpMcl7xwecii9LH9yPdaF2eGtnju19INX5WJ4aJqw"},
{"content":{"body":"there’s a very old cartoon about a company that relocates to the north pole so they can hire penguins for cheap labor. my mental model for plugin systems on the web was until this moment that you get to choose whether to endow your plugins with either timers or confine them in a worker so you get a process boundary.","m.mentions":{},"msgtype":"m.text"},"ts":1724962157484,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$mKNElE_hBzOsKRg1h3P14zPKNgYBgSkmXZjwZf8ud08"},
{"content":{"body":"i think you're still misunderstanding. Workers are not a process boundary","m.mentions":{},"msgtype":"m.text"},"ts":1724962178198,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JdiKgDmvqH4UHDsjy0yunZa4pCE11dshPAgVvZdf4Q4"},
{"content":{"body":"Workers are threads","m.mentions":{},"msgtype":"m.text"},"ts":1724962181915,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bsps9pixSW1pUCzWNFqg-TPPDMX_lvEmA1DbEkEve2s"},
{"content":{"body":"no, i’m following you.","m.mentions":{},"msgtype":"m.text"},"ts":1724962190738,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$4aGtII2reYICPAwXFByjhJebxSkYchu7g2LDKuCtmHg"},
{"content":{"body":"was responding to \"confine them in a worker so you get a process boundary\"","m.mentions":{},"msgtype":"m.text"},"ts":1724962209128,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$87B4GJLCrco2wMIaW1S4Vz3Ti3IJZ-YFqNx7ImpoF2Y"},
{"content":{"body":"thank you for correcting my mental landscape :-)","m.mentions":{},"msgtype":"m.text"},"ts":1724962219361,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$QmB5zkGT-f6WxAzF8UnT1H8wek9UkcOLPgaKKD-2hag"},
{"content":{"body":"so, since the web security model is built on same-origin","m.mentions":{},"msgtype":"m.text"},"ts":1724962239612,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UfZnzmVKOalZggjBwpl6sUJ1pktrg7IQSyUbX7X4Uqk"},
{"content":{"body":"yeah, i’m the MBA who thought there are penguins at the north pole in this metaphor.","m.mentions":{},"msgtype":"m.text"},"ts":1724962241391,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$VMiFhquxeUdXDvc0pRtsqCWbOGPZeyBV8UsuHhd4GAc"},
{"content":{"body":"there are these headers that let the page say \"i want different origins to be isolated (read: process boundary)\"","m.mentions":{},"msgtype":"m.text"},"ts":1724962285810,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JRwQHS3_7i5mEOyxuXx3YIRH2khC7eiyulq3mNVCsKc"},
{"content":{"body":"oh, alright, i see i was not wrong, just `new Worker` isn’t sufficient. You need a separate origin and maybe COOP COEP, which I ought to learn more about before I make a web platform.","format":"org.matrix.custom.html","formatted_body":"oh, alright, i see i was not wrong, just <code>new Worker</code> isn’t sufficient. You need a separate origin and maybe COOP COEP, which I ought to learn more about before I make a web platform.","m.mentions":{},"msgtype":"m.text"},"ts":1724962298310,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$CWvWVKt0dnWNB3ZPZWJPCKilxRFW4D7fKyLoLRi3jO8"},
{"content":{"body":"and if you serve your page with these headers, _then_ we enable shared memory","format":"org.matrix.custom.html","formatted_body":"and if you serve your page with these headers, <em>then</em> we enable shared memory","m.mentions":{},"msgtype":"m.text"},"ts":1724962303314,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8TXQUZ06sB1_s2pAF4zTTAyeDOC-giFkscwsXuza0Uo"},
{"content":{"body":"kk, same page.","m.mentions":{},"msgtype":"m.text"},"ts":1724962328908,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$R97yJaFLMi7xYDkj3jb-17xrs09jHTDi5okAcir7JOI"},
{"content":{"body":"this proposal of course follows that policy, not that we have a choice :)","m.mentions":{},"msgtype":"m.text"},"ts":1724962376744,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tsxjsBaDCLnWGcfFwmQHCdxkT_jGtJ557wOuSC5R4fM"},
{"content":{"body":"this is coherent.","m.mentions":{},"msgtype":"m.text"},"ts":1724962387282,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Ag71Le1qOdZ9rEqADT-4FfnYWriwmU43Cjwm1JWW4j8"},
{"content":{"body":"I assume postMessage that crosses a process boundary would be in a position to throw if you attempted to share a struct.","m.mentions":{},"msgtype":"m.text"},"ts":1724962442553,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$YSLKLk6nz_M13IV-p9eVnb9oZC30daQgKFMKgyBeers"},
{"content":{"body":"exactly right, same as for SABs","m.mentions":{},"msgtype":"m.text"},"ts":1724962456459,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$27GMDRlzqacms5TQVi5jhfvtfCugcdyhkdxYeVoH6U0"},
{"content":{"body":"> <@kriskowal:aelf.land> By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:\n> ```\n> struct Foo {}\n> addEventListener('message', event => {\n>   const foo = new Foo(event.data.foo);\n> });\n> ```\n> Wherein, `Foo` is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &c, `event.data.foo` is an opaque handle on shared memory without behavior, and `new Foo(event.data.foo)` unites the data and behavior.\n\nThis is similar to what I do for `@esfx/struct-type`, which is more like the old \"typed objects\" proposal and uses objects backed by `SharedArrayBuffer`. In the end, this doesn't work unless the objects are typed as you must know the type of everything in the object graph. `new Foo(event.data.foo)` just isn't sufficient on its own.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WfuO7QDjdTxJbCl-DVsZRWgrbDs6RzOvcwTMn4AJs5U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br><p>By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:</p>\n<pre><code>struct Foo {}\naddEventListener('message', event =&gt; {\n  const foo = new Foo(event.data.foo);\n});\n</code></pre>\n<p>Wherein, <code>Foo</code> is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &amp;c, <code>event.data.foo</code> is an opaque handle on shared memory without behavior, and <code>new Foo(event.data.foo)</code> unites the data and behavior.</p>\n</blockquote></mx-reply>This is similar to what I do for <code>@esfx/struct-type</code>, which is more like the old \"typed objects\" proposal and uses objects backed by <code>SharedArrayBuffer</code>. In the end, this doesn't work unless the objects are typed as you must know the type of everything in the object graph. <code>new Foo(event.data.foo)</code> just isn't sufficient on its own.","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WfuO7QDjdTxJbCl-DVsZRWgrbDs6RzOvcwTMn4AJs5U"}},"msgtype":"m.text"},"ts":1724962482494,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PXxfWn4fOLwgTgxWHGArxZDVLvAYSk9zmoRIelvtbF8"},
{"content":{"body":"Right, I assumed `new Foo` would entrain its transitive reachable struct definitions.","format":"org.matrix.custom.html","formatted_body":"Right, I assumed <code>new Foo</code> would entrain its transitive reachable struct definitions.","m.mentions":{},"msgtype":"m.text"},"ts":1724962529101,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$HDiPSCropgjnpkgvGlolAqPcALzWtbw1Nh-4v526vhI"},
{"content":{"body":"In any case, it’s moot because you have a stated position that you don’t want per-agent wrapper objects.","m.mentions":{},"msgtype":"m.text"},"ts":1724962557892,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Z8R6hDto4qOXwH32hj6dYkrAr-LTwaI5yLvwRsfzUJA"},
{"content":{"body":"And my proposal was specifically to enable >1 wrapper object per agent.","m.mentions":{},"msgtype":"m.text"},"ts":1724962581119,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Z4qIvVWfaWSM0SWQt0Z_0iK2mhKrw7m3MvksKApxfzs"},
{"content":{"body":"Such that different compartments might have different prototypes for the same struct.","m.mentions":{},"msgtype":"m.text"},"ts":1724962594359,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$pSEJowai_OyG7wjcUTFU1t2I2szKbS8SgC7fHmJEI3g"},
{"content":{"body":"With that off the table, I can see the appeal of not having to solve sub-realm isolation.","m.mentions":{},"msgtype":"m.text"},"ts":1724962646551,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2PC2N0TDytOJd8CboUWGV5WmKJ_NCvoHdLrMefUxrmA"},
{"content":{"body":"this is what I suggested before but it was dismissed because shared structs may be nested, so it's hard to wrap each layer","msgtype":"m.text"},"ts":1724962687096,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FpP1rFJUrKBGQ8oMKeh-vREb2W7h6KPs-2-w18fmlZw"},
{"content":{"body":"let me expand on the stated position: the goal is that the order of the number of wrapper objects should either not grow with the number of threads, or grow very slowly with the number of threads","m.mentions":{},"msgtype":"m.text"},"ts":1724962692584,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cWMq15LWfXUTAgMppYlOqALu9owMADKUdw7XlWBeYv4"},
{"content":{"body":"per-realm prototypes of course already violates \"not grow with the number of threads\", but it seems okay because O(number of struct types) should be << O(number of struct instances)","m.mentions":{},"msgtype":"m.text"},"ts":1724962724971,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vhqYdfPK-0PvFiXMJ5lUfz_dZYgnokf-nVEG7UJmxU4"},
{"content":{"body":"sub-realm prototypes is probably also fine, so long as that inequality roughly holds","m.mentions":{},"msgtype":"m.text"},"ts":1724962737008,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1mJM-_20DhAu-I-t38NllQouT8BQmcFSleTNmAWxvvw"},
{"content":{"body":"> <@shuyuguo:matrix.org> sub-realm prototypes is probably also fine, so long as that inequality roughly holds\n\nThat’s likely.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1mJM-_20DhAu-I-t38NllQouT8BQmcFSleTNmAWxvvw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>sub-realm prototypes is probably also fine, so long as that inequality roughly holds</blockquote></mx-reply>That’s likely.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1mJM-_20DhAu-I-t38NllQouT8BQmcFSleTNmAWxvvw"}},"msgtype":"m.text"},"ts":1724962766202,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2AhOOzFakwLpAiPonHo0juFaEeO8HrgkGFX_fkfh8tc"},
{"content":{"body":"> <@kriskowal:aelf.land> I gather from the requirements, that it’s imagined that incrementally replacing a `class` with a `shared struct` is a delicate-but-possible performance improving refactor that doesn’t require changes from the consuming code\n\ndelicate-but-possible sounds like an apt description. For something like TypeScript, our AST nodes are *essentially* immutable (though only enforced via design-time checking, not at runtime), so it is very feasible that we could convert our AST nodes to be shared structs, so long as we can attach behavior. That would allow us to efficiently parallelize parse and emit without the need to duplicate the entire AST in memory for each thread, while still enabling our customers to use our language service API to produce and consume these nodes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$MRzRcaLcuw7fFgrOLi7WjyIX7kAo4Jl5Oz1gVin9Xfs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>I gather from the requirements, that it’s imagined that incrementally replacing a <code>class</code> with a <code>shared struct</code> is a delicate-but-possible performance improving refactor that doesn’t require changes from the consuming code</blockquote></mx-reply>delicate-but-possible sounds like an apt description. For something like TypeScript, our AST nodes are <em>essentially</em> immutable (though only enforced via design-time checking, not at runtime), so it is very feasible that we could convert our AST nodes to be shared structs, so long as we can attach behavior. That would allow us to efficiently parallelize parse and emit without the need to duplicate the entire AST in memory for each thread, while still enabling our customers to use our language service API to produce and consume these nodes.","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MRzRcaLcuw7fFgrOLi7WjyIX7kAo4Jl5Oz1gVin9Xfs"}},"msgtype":"m.text"},"ts":1724962775607,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9XT5LYuKRGjm3snLagIAtXP3ZkDeJvJknue_cbejQc8"},
{"content":{"body":"cause you buy into the pain of shared memory for two reasons, right: one is CPU time, one is to actually share memory and save memory than duplicating per-thread. so our solution can't preclude the second reason","m.mentions":{},"msgtype":"m.text"},"ts":1724962826470,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7xExMX65DND5tJPc0ah2Qyl2kQ_C2s6t1j4vAUQxyaY"},
{"content":{"body":"In the long term, it would be better to have the nodes be *actually* immutable, but that would require either shared private fields or some operation to atomically freeze a shared struct instance.","format":"org.matrix.custom.html","formatted_body":"In the long term, it would be better to have the nodes be <em>actually</em> immutable, but that would require either shared private fields or some operation to atomically freeze a shared struct instance.","m.mentions":{},"msgtype":"m.text"},"ts":1724962843818,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zfl1o9_Jq9V40I5Zy5D8BLHJBvPHMv5_6jqmY6EqLyM"},
{"content":{"body":"yeah, if we think of structs as \"declarative sealing\", we should also have \"declarative freezing\"","m.mentions":{},"msgtype":"m.text"},"ts":1724962870367,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pmJkeVeSU4VEbOD_LIHJh23Zwc8WsWlbEsx9pSbKyyg"},
{"content":{"body":"though i don't want to bite off that now","m.mentions":{},"msgtype":"m.text"},"ts":1724962875678,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ACyr-yq2e5bI8VbpDM8fZ5cfrjqV1il_oZGJnQ-xzDA"},
{"content":{"body":"I really like the design direction where you start with data and work your way out to thread-safe shared behavior too.","m.mentions":{},"msgtype":"m.text"},"ts":1724962941426,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$HAzXdv3gEJRhncaWZBN-ZxUvV_u8P83ULn4bI3eDyUA"},
{"content":{"body":"It would be limiting, but also enabling.","m.mentions":{},"msgtype":"m.text"},"ts":1724962957848,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$wv-WHsh9Ov94tKnD_yKLEG5QpTVCi_WCm5A3Rk7cDRA"},
{"content":{"body":"You wouldn’t even need to replicate the prototypes.","m.mentions":{},"msgtype":"m.text"},"ts":1724962972916,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$A3zfMoKZTC-i100Tz16t6aWJzVocpJCyDvot-Qb6iYg"},
{"content":{"body":"in a different life, without this being demand-driven, i would love to agree","m.mentions":{},"msgtype":"m.text"},"ts":1724962982070,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8u-RYK9PLCeDoaxh8rqVwPjMK1ItmlITOtSqu8dAXiw"},
{"content":{"body":"demand-driven meaning we started from actual partners wanting more performance and expressivity out of the web platform","m.mentions":{},"msgtype":"m.text"},"ts":1724963025509,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pza-xZkdWDJtcyMJ7x_SZvkTtDFA5icopYghKUoO4y8"},
{"content":{"body":"> <@kriskowal:aelf.land> I really like the design direction where you start with data and work your way out to thread-safe shared behavior too.\n\ni want to reiterate we _started that way_","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HAzXdv3gEJRhncaWZBN-ZxUvV_u8P83ULn4bI3eDyUA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>I really like the design direction where you start with data and work your way out to thread-safe shared behavior too.</blockquote></mx-reply>i want to reiterate we <em>started that way</em>","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HAzXdv3gEJRhncaWZBN-ZxUvV_u8P83ULn4bI3eDyUA"}},"msgtype":"m.text"},"ts":1724963132589,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8XNCYMs7Dm6Jczts93aXLWzOAo9cr7RSMbINqIVfWVU"},
{"content":{"body":"we all wanted to go that way, for the same reasons","m.mentions":{},"msgtype":"m.text"},"ts":1724963138246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uPDnthhvVdZALXIBMFHlby8dj_9JFldYf4tqCCVIwfc"},
{"content":{"body":"but we're here now because of experience","m.mentions":{},"msgtype":"m.text"},"ts":1724963155550,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c0oLx365l53OwB_u7mFXBuHLC07DaIn08Y02R2ofYLk"},
{"content":{"body":"One direction I'd suggested for shared functions was to entertain the notion of a single frozen shared realm that all shared things live in, but then shared structs cannot close over or use anything in the current realm, only other shared things, but that's a lot to bite off and wasn't well received.","m.mentions":{},"msgtype":"m.text"},"ts":1724963177371,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JAgM76S1bjTXn83_SpMpQn42pSOKDOp9rzyLjwThQWo"},
{"content":{"body":"Yeah, please pardon me for replaying a great deal of history to catch up. It was my hope not to get drawn in :-)","m.mentions":{},"msgtype":"m.text"},"ts":1724963178752,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$CaVFKZYwTGo6hlSDeI4k_SLxUToICd-ulsomRHqhkYM"},
{"content":{"body":"bbl, will catch up after labor day","m.mentions":{},"msgtype":"m.text"},"ts":1724963302062,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f04v0nmdOHecgY15T1hQmvIhhccLX40T4h6_Geu5zfA"},
{"content":{"body":"Down the pure behavior road is also the possibility of JIT to shader.","m.mentions":{},"msgtype":"m.text"},"ts":1724963311773,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Id_g-pVLe_KzH75U3VZBJuDztGVfvVGgjVYBo7DP7wo"},
{"content":{"body":"Data-only shared structs would be fine for green field projects, but for something like TypeScript we'd essentially need to create a wrapper/proxy layer over a shared AST that we would have to rehydrate in every thread, which eats up all of the memory/performance gains you would hope to gain.","m.mentions":{},"msgtype":"m.text"},"ts":1724963331476,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$diSL9bj1RptIvwK_TEMWSu8dKwlyfd_hMknLGaM0g-c"},
{"content":{"body":"Without making the claim that this is actually taking place: in the abstract, I think it would be unfortunate if we locked in a suboptimal design for shared behaviour out of an urge to have something that we can ship sooner. Specifically: if we think we could eventually work out a design for thread-safe shared behaviour, and it would be more performant than the current thread-local prototype approach, then it would be better not to lock ourselves into a local maximum.","m.mentions":{},"msgtype":"m.text"},"ts":1724963359044,"senderName":"iain","senderId":"@iain:mozilla.org","id":"$IAleKEOXY_7rWczbxtTI3KrEEWs25-im5qHL4sxE3r0"},
{"content":{"body":"But I digress, it seems that the remaining options both involve more elaborate mitigations for sub-realm confinement and I’ll have to be here to evaluate those options.","m.mentions":{},"msgtype":"m.text"},"ts":1724963361308,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$aH2jZlt4UZAypXONV2eG8I6rVX9gywp08e_5SQvy0O0"},
{"content":{"body":" * But I digress, it seems that the remaining options both involve more elaborate mitigations for sub-realm confinement and I’ll have to be here to help evaluate those options.","m.mentions":{},"m.new_content":{"body":"But I digress, it seems that the remaining options both involve more elaborate mitigations for sub-realm confinement and I’ll have to be here to help evaluate those options.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aH2jZlt4UZAypXONV2eG8I6rVX9gywp08e_5SQvy0O0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724963399542,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$zeUBWztNDePYPr9BxmWhUWdrNg6NRCHfiISHtN4wjtk"}
]