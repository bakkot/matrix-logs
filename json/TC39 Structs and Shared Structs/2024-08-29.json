[
{"content":{"body":"I seem to have bludgeoned the Join button enough times for Matrix to acknowledge my presence.","m.mentions":{},"msgtype":"m.text"},"ts":1724957728663,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$L1cvPm4U_6yI1kZDzp0mztdByi-CWTtVjITVR6I83A4"},
{"content":{"body":"Welcome","msgtype":"m.text"},"ts":1724957826457,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$r7Znagq3Yd4WzPWZ_66xwv2NGXwtUzqh4kEuq7iN170"},
{"content":{"body":"kriskowal: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:\n\nFor reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62 \nAlternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kriskowal:aelf.land\">kriskowal</a>: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:</p>\n<p>For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62<br>Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9</p>\n","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"msgtype":"m.text"},"ts":1724957909501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A"},
{"content":{"body":"> <@rbuckton:matrix.org> kriskowal: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:\n> \n> For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62 \n> Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9\n\nYeah, Matrix isn’t good at chat. One cannot simply start up a new Matrix instance with friends and migrate their identity, much less convince Matrix the old one is gone, especially when matrix.org has forgotten its side of the credentials for it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p><a href=\"https://matrix.to/#/@kriskowal:aelf.land\">kriskowal</a>: I tried to DM you the link I mentioned, but there are two matrix identities for you in the delegates chat and I may have sent them to the wrong one. Here's what I sent, in any case:</p>\n<p>For reference, this Gist contains a brief analysis of an earlier proposed handshaking mechanism: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62<br />Alternatively, this other gist details possible mechanisms to grant/deny correlation as well as to support bundlers when correlating by source location: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9</p>\n</blockquote></mx-reply>Yeah, Matrix isn’t good at chat. One cannot simply start up a new Matrix instance with friends and migrate their identity, much less convince Matrix the old one is gone, especially when matrix.org has forgotten its side of the credentials for it.","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$hhis7MT12VF3UveVkmJR371h4FstYIVA3CwpZA00d9A"}},"msgtype":"m.text"},"ts":1724957993523,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$YYmg11xfUikYdFLerGWRAphpaLR_oSasRWfqL7TZWpc"},
{"content":{"body":"By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:\n```\nstruct Foo {}\naddEventListener('message', event => {\n  const foo = new Foo(event.data.foo);\n});\n```\nWherein, `Foo` is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &c, `event.data.foo` is an opaque handle on shared memory without behavior, and `new Foo(event.data.foo)` unites the data and behavior.","format":"org.matrix.custom.html","formatted_body":"<p>By a glance, it looks like this design direction hasn’t been considered or was dismissed out-of-hand:</p>\n<pre><code>struct Foo {}\naddEventListener('message', event =&gt; {\n  const foo = new Foo(event.data.foo);\n});\n</code></pre>\n<p>Wherein, <code>Foo</code> is an opaque struct definition closing over the vm-specific vagaries of padding, alignment, embedding, dereferencing, &amp;c, <code>event.data.foo</code> is an opaque handle on shared memory without behavior, and <code>new Foo(event.data.foo)</code> unites the data and behavior.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724958293579,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$WfuO7QDjdTxJbCl-DVsZRWgrbDs6RzOvcwTMn4AJs5U"},
{"content":{"body":"And, of course `Foo.prototype` captures the behavior side.","format":"org.matrix.custom.html","formatted_body":"And, of course <code>Foo.prototype</code> captures the behavior side.","m.mentions":{},"msgtype":"m.text"},"ts":1724958350783,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$1u_QqLU2gAgjxwLNpForE82QMXoosMRVIsqzz2M3rmE"},
{"content":{"body":"what would this union do","m.mentions":{},"msgtype":"m.text"},"ts":1724958551957,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jICV9CcXz0MBlZ21FOkA4v5bDIkadCKDAm7lMMJy8IE"},
{"content":{"body":"one of the primary goal here is to actually share the objects, not just share the payload","m.mentions":{},"msgtype":"m.text"},"ts":1724958573669,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OZpUSBhnKmi-wy_02VMd6pC8dGWEYfzju_7kRrL1u_o"},
{"content":{"body":"this is because application state, by volume, is a lot of pointers. recreating your object graph from payloads per thread means you are not scaling with the number of threads","m.mentions":{},"msgtype":"m.text"},"ts":1724958610432,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jpzcSVbIrRVmbAstrPPrODXnU9TpekkMFyq0rkVI2Bk"},
{"content":{"body":"so any solution that requires creating wrapper objects per-thread is a nonstarter","m.mentions":{},"msgtype":"m.text"},"ts":1724958622050,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SJ8b7O-GSyvAMmztdcFTrf9REVbQuudzzdrjgEFO5YA"},
{"content":{"body":"i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms","m.mentions":{},"msgtype":"m.text"},"ts":1724958625905,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA"},
{"content":{"body":"yes, payload and backing memory are interchangeable for what i said","m.mentions":{},"msgtype":"m.text"},"ts":1724958650009,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7HqQFlkVEPSZ2GymeU47xjhGJCLNC29QAhsef3ZcHrc"},
{"content":{"body":"a related question is \"why not create object overlays on top of SABs\"","m.mentions":{},"msgtype":"m.text"},"ts":1724958666354,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gc2tmJoq6v2BNtuIGwOMrTcv-LVxqnVAzH4qKpQrPqw"},
{"content":{"body":"> <@kriskowal:aelf.land> i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms\n\nIf objects don't capture any realm-specific state, you can actually share the objects ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br />i’m assuming you mean sharing the backing memory, since the objects are necessarily in different realms</blockquote></mx-reply>If objects don't capture any realm-specific state, you can actually share the objects","m.relates_to":{"m.in_reply_to":{"event_id":"$s0vGxy5v2hq0mYJYKATAuhHgwRrbGql17_50Ta-tXXA"}},"msgtype":"m.text"},"ts":1724958671362,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OxsxgwcSWDuWSiL-I2ga2OOl5eEvDAv1In_P2_r13UA"},
{"content":{"body":"oh, right, we’re talking about a new primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1724958715117,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok"},
{"content":{"body":"This would be different from SharedArrayBuffer, where there is a per-thread wrapper pointing to the same memory","msgtype":"m.text"},"ts":1724958752722,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9EhTq3HN0ieUyWfMMlkzs0w61vEdl4ewBLZG24TwqFQ"},
{"content":{"body":"> <@kriskowal:aelf.land> oh, right, we’re talking about a new primitive.\n\nwell, they're objects","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>oh, right, we’re talking about a new primitive.</blockquote></mx-reply>well, they're objects","m.mentions":{"user_ids":["@kriskowal:aelf.land"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WuPKkEATN3rcZv-SlkIvDxgZzjnFvZNbablAo-Lz1ok"}},"msgtype":"m.text"},"ts":1724958794543,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5yJ_qo9vAfT869K5yHeqSqdnMPGEKd4O_AuMpzjmjtk"},
{"content":{"body":"but yes, internally you can think of them as new primitives","m.mentions":{},"msgtype":"m.text"},"ts":1724958809562,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BYmUn2347rcSGVAytEhCl5P7dl2GzvOhlcCPNQxm0Zs"},
{"content":{"body":"they're objects with special behavior","m.mentions":{},"msgtype":"m.text"},"ts":1724958814464,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w6MNOPCWGgh3QJGnqB1imgFSWRA_6W4b8dzyhDxqQis"},
{"content":{"body":"alright, so the crux of this is that the _value_ capturing the union of the shared memory and behavior must also be a primitive.","format":"org.matrix.custom.html","formatted_body":"alright, so the crux of this is that the <em>value</em> capturing the union of the shared memory and behavior must also be a primitive.","m.mentions":{},"msgtype":"m.text"},"ts":1724958825831,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$LeaDSxJ3GWSlN_kllRWvS_u9cK3vNdOalvlApb2hup4"},
{"content":{"body":"sorry, having trouble parsing that sentence","m.mentions":{},"msgtype":"m.text"},"ts":1724958851842,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e00_2ER3r9jjxV-Vp6p0ZJL-ElTH4hKr5ceEIYyT3jE"},
{"content":{"body":"i now better understand how we arrive at the prototype walk algorithm","m.mentions":{},"msgtype":"m.text"},"ts":1724958861525,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$N9u51ZpObKuFXnpfCYWwiKC_7SjOffGcxjujFJpV4P8"},
{"content":{"body":"there's another alternative that was dismissed, which is actually thread-safe functions","m.mentions":{},"msgtype":"m.text"},"ts":1724958900147,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-cmB1-b274DoyxTAd6A-pwGII6ifK0SYxGWS0gXvXe0"},
{"content":{"body":"there’s no per-worker object that points to the local prototype and shared data","m.mentions":{},"msgtype":"m.text"},"ts":1724958904960,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$oF-dQgHigpq0j8DtI_2L8qUs340-CSwl9QxXjq34R5s"}
]