[
{"content":{"body":"> <@shuyuguo:matrix.org> though those restriction just as well applies to shared structs\n\nMakes sense but do these things work with non-shared structs?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24DP_PsKzcpYWEkYaBoAAYJhxXYYdGl3WibkM6_rX6iQQ\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>though those restriction just as well applies to shared structs</blockquote></mx-reply>Makes sense but do these things work with non-shared structs?","m.relates_to":{"m.in_reply_to":{"event_id":"$DP_PsKzcpYWEkYaBoAAYJhxXYYdGl3WibkM6_rX6iQQ"}},"msgtype":"m.text"},"ts":1705799160673,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Nrv3AnIhvm3aXAqFkAdenFk2JguHx2wkxzutK3h7E7o"},
{"content":{"body":"> <@shuyuguo:matrix.org> one idea that was raised was additional restrictions on methods declared within structs, like making them always throw on instances of different types, and making them unbindable (unrelated ideas)\n\nWhy is the unbindable restriction an optimization?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24nfG8yzWSa6v4CMCf_OTBxJlN5e2E3hFHSne0il8_g4g\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>one idea that was raised was additional restrictions on methods declared within structs, like making them always throw on instances of different types, and making them unbindable (unrelated ideas)</blockquote></mx-reply>Why is the unbindable restriction an optimization?","m.relates_to":{"m.in_reply_to":{"event_id":"$nfG8yzWSa6v4CMCf_OTBxJlN5e2E3hFHSne0il8_g4g"}},"msgtype":"m.text"},"ts":1705799228607,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JXztJ2J6yikKF-Q6VvFy_LrD28AVqVK4LSF2iKohcmU"}
]