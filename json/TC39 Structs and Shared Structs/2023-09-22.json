[
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: will you be in tokyo btw?\n\nNo, I will be attending remotely","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$LW5jRtzKxOMCV3XzYtoDlFLoMud4bOU67gPRLiuc71s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: will you be in tokyo btw?</blockquote></mx-reply>No, I will be attending remotely","m.relates_to":{"m.in_reply_to":{"event_id":"$LW5jRtzKxOMCV3XzYtoDlFLoMud4bOU67gPRLiuc71s"}},"msgtype":"m.text"},"ts":1695342227938,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GcRFzxjWPmO26ZnQ3w6wHPzmjgfuO_CZZAefanB2HAs"},
{"content":{"body":"> <@shuyuguo:matrix.org> wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the _combination_ of source location + `with identity 'UUID'`\n\nIf you already have the source location, why would you need the UUID?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$_2pkCbonx3rLPeCM6_8cBuoGU5cG--EjpBSvEVsYFq4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the <em>combination</em> of source location + <code>with identity 'UUID'</code></blockquote></mx-reply>If you already have the source location, why would you need the UUID?","m.relates_to":{"m.in_reply_to":{"event_id":"$_2pkCbonx3rLPeCM6_8cBuoGU5cG--EjpBSvEVsYFq4"}},"msgtype":"m.text"},"ts":1695342283496,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6wlIrcsqjY0gjKbz5J_vmiv4W9nqUXCyp9Sr5xsaRX0"},
{"content":{"body":"Or are you just talking about the path to the file, not position within the source text.","msgtype":"m.text"},"ts":1695342317179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM"},
{"content":{"body":" * Or are you just talking about the path to the file, not position within the source text?","m.new_content":{"body":"Or are you just talking about the path to the file, not position within the source text?","msgtype":"m.text"},"m.relates_to":{"event_id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342319210,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kb-YRkMAH0lJen0bygrbfzMbJG5xKJNfXuXPjmh2_R4"},
{"content":{"body":"> <@shuyuguo:matrix.org> can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a `with identity 'UUID'` modifier is present?\n\nI have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location. The point of the user-defined identity is to override that step.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a <code>with identity 'UUID'</code> modifier is present?</blockquote></mx-reply>I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location. The point of the user-defined identity is to override that step.","m.relates_to":{"m.in_reply_to":{"event_id":"$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE"}},"msgtype":"m.text"},"ts":1695342556762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8"},
{"content":{"body":"> <@shuyuguo:matrix.org> can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a `with identity 'UUID'` modifier is present?\n\n * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a <code>with identity 'UUID'</code> modifier is present?</blockquote></mx-reply> * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","m.new_content":{"body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","msgtype":"m.text"},"m.relates_to":{"event_id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342572516,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q2xhd0R1myfL9SkbJpZtTcL5UWJhNYOzzHPcBlo7Ui4"},
{"content":{"body":" * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":" * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","m.new_content":{"body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","msgtype":"m.text"},"m.relates_to":{"event_id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342581501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9AG7QNP1KKmRyB6lXWRniKgDAfwOQx6BYUivstKD9Q4"},
{"content":{"body":"> <@rbuckton:matrix.org> Or are you just talking about the path to the file, not position within the source text?\n\nyeah i guess that's right. so... why is it a communication channel at all if we have a global registry where the key is source location? you can't observe it then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Or are you just talking about the path to the file, not position within the source text?</blockquote></mx-reply>yeah i guess that's right. so... why is it a communication channel at all if we have a global registry where the key is source location? you can't observe it then","m.relates_to":{"m.in_reply_to":{"event_id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM"}},"msgtype":"m.text"},"ts":1695342889762,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M9VmJxmQz0nJl1-FTaEWs6iQqplZJ5GWXXDSgyBBDAI"},
{"content":{"body":"like just change the semantics of the `registered` modifier or `with registered` or whatever we choose to key off of location, add the caveat about bundling, done","format":"org.matrix.custom.html","formatted_body":"like just change the semantics of the <code>registered</code> modifier or <code>with registered</code> or whatever we choose to key off of location, add the caveat about bundling, done","msgtype":"m.text"},"ts":1695342920013,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0"},
{"content":{"body":"seems totally reasonable to me to have the bundling guidance to be \"source location is meaningful for these things, like template strings\"","msgtype":"m.text"},"ts":1695343006358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oz-kwSkI9QtgjAWL5Y0vGwJuYgKOUpez1o3LwNumpIU"},
{"content":{"body":"If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. `with identity` is difficult to forge if you don't allow it to be used in `eval`, since it has to be encoded as source text.","format":"org.matrix.custom.html","formatted_body":"If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. <code>with identity</code> is difficult to forge if you don't allow it to be used in <code>eval</code>, since it has to be encoded as source text.","msgtype":"m.text"},"ts":1695343073300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZjCPThppznVuV4FyHs5XblfaeGtPVhEUYAhJJNuST8A"},
{"content":{"body":"> <@shuyuguo:matrix.org> like just change the semantics of the `registered` modifier or `with registered` or whatever we choose to key off of location, add the caveat about bundling, done\n\nI think this would heavily depend on feedback from bundler developers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like just change the semantics of the <code>registered</code> modifier or <code>with registered</code> or whatever we choose to key off of location, add the caveat about bundling, done</blockquote></mx-reply>I think this would heavily depend on feedback from bundler developers.","m.relates_to":{"m.in_reply_to":{"event_id":"$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0"}},"msgtype":"m.text"},"ts":1695343124563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yfJF8IHZobD_LT-fL5rwfFTilpSwe4son6W6jiaYldU"},
{"content":{"body":"how do they deal with template strings?","msgtype":"m.text"},"ts":1695343138388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YhcriZsGWVStZDIx0b6jfRiDKnuprhIxo8QockioqPk"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1695343145183,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HR7G9VlO4UnMwZJjp069L3ghzM1TRNrbdvDbsh7wGSs"},
{"content":{"body":"anyway i remain steadfast of the opinion this is not a design blocker","msgtype":"m.text"},"ts":1695343226761,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vXWV-g8WpAC3SklhyOytKHKXDDwe6gBtHYab35TkejU"},
{"content":{"body":"> <@rbuckton:matrix.org> If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. `with identity` is difficult to forge if you don't allow it to be used in `eval`, since it has to be encoded as source text.\n\nseems in practice unforgeable. like, this attacker can trigger re-evaluation of scripts it doesn't own? if it can do that, seems like the threat model has bigger things to worry about than leaking bits via this registry","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ZjCPThppznVuV4FyHs5XblfaeGtPVhEUYAhJJNuST8A?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. <code>with identity</code> is difficult to forge if you don't allow it to be used in <code>eval</code>, since it has to be encoded as source text.</blockquote></mx-reply>seems in practice unforgeable. like, this attacker can trigger re-evaluation of scripts it doesn't own? if it can do that, seems like the threat model has bigger things to worry about than leaking bits via this registry","m.relates_to":{"m.in_reply_to":{"event_id":"$ZjCPThppznVuV4FyHs5XblfaeGtPVhEUYAhJJNuST8A"}},"msgtype":"m.text"},"ts":1695343279438,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jCPHfewHJuiHmM-vgOfzKxaxkwdeZm_9e98LNgHVlJM"},
{"content":{"body":"> <@shuyuguo:matrix.org> how do they deal with template strings?\n\nWhich part? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$YhcriZsGWVStZDIx0b6jfRiDKnuprhIxo8QockioqPk?via=matrix.org&via=igalia.com&via=tzchat.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />how do they deal with template strings?</blockquote></mx-reply>Which part?","m.relates_to":{"m.in_reply_to":{"event_id":"$YhcriZsGWVStZDIx0b6jfRiDKnuprhIxo8QockioqPk"}},"msgtype":"m.text"},"ts":1695343322586,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WeaijSdKolqNLr7nvVk1BGwVkKn_N6PSzs7Mkb8SL_s"},
{"content":{"body":"rbuckton: the part where they are keyed off of their location: https://tc39.es/ecma262/#sec-gettemplateobject","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the part where they are keyed off of their location: https://tc39.es/ecma262/#sec-gettemplateobject","msgtype":"m.text"},"ts":1695343377484,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5r86hS883sjnnQ_EYSJV_0qXgZVFy46sEnV2MO4N4Os"},
{"content":{"body":"so if you, like, inline the contents of a function that uses a template object into two different call sites, now you have different semantics","msgtype":"m.text"},"ts":1695343471253,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BPr_i0eWUMLLoQSdXoPfsUJOA-jahZ_TpPpauFf_Hxw"},
{"content":{"body":"i'm just pointing it out as an example of a thing we have already that is keyed off of location, that bundlers need to be aware of","msgtype":"m.text"},"ts":1695343482165,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oecsW1YEDp4UFIrR5CprOTd5qBgyh0Ve99cFlz-7CYA"},
{"content":{"body":"this will be another thing, but it's not new-in-kind","msgtype":"m.text"},"ts":1695343487791,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$F0vQN3jMODTcxg_3EH0Owbmy1J8QqPi8uzSIK987StI"},
{"content":{"body":"Not sure? It's a bit of an esoteric thing to depend on, other than it not being reevaluated each time. It's be surprised if it's that common to address it","msgtype":"m.text"},"ts":1695343526113,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gG_zuqcwfAHJ6ooSisluU-5vK-9XbIjj-GIoPN77b-c"},
{"content":{"body":"well, okay. i feel pretty good about providing bundling guidance instead of treating it as a hard design constraint","msgtype":"m.text"},"ts":1695343571271,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$i_J2FSyKADwayQQ_uWyzUulxIV-rti2aw5_JOddhEPQ"},
{"content":{"body":"that is, i feel pretty good now about the overall package of an unforgeable-in-practice (unless you trigger reevaluations) registry that uses locations to auto-correlate + bundling guidance as the leading solution","msgtype":"m.text"},"ts":1695343616730,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2ivJuTBZbIMe7bHRSimz_RD1CCVa2J4u9MC0_uK0zvQ"},
{"content":{"body":"okay gotta sign off, been working since 7am, be back tomorrow","msgtype":"m.text"},"ts":1695343637906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BwwFdMk5_y4BRBe4XzrpzhQ5t0sIcLLrKI91MWU0v0w"},
{"content":{"body":"An incorrect reference identity for a template strings array doesn't come up anywhere near as often as i imagine use of methods on shared structs will.","msgtype":"m.text"},"ts":1695343653503,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EGiKTXMNprQURPHE1xl26UuVm-F761QoBBxEGWSovmA"},
{"content":{"body":"yeah, bundlers need to lift all those definitions to a different file, and tree shake the ones that are only ever used in a single thread and thus never need correlation","msgtype":"m.text"},"ts":1695343703095,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Ym1G6gp_8zdxLrey5sSqXFAdOZshnwVnhyR8HEhxD8Y"},
{"content":{"body":"i do not hear a counterargument that that is somehow a dealbreaker","msgtype":"m.text"},"ts":1695343723824,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$su_Xi_YNiKhnVI-UkkBMGi7i9X1EBT7nlIRTR4G5e_s"},
{"content":{"body":"> <@rbuckton:matrix.org> My point is more that, if we actually baked multithreading into the language, such that you don't have to spin up a copy of your application and could just use existing references, then we wouldn't have the correlation issue. We'd have other issues instead, but they are the pretty much the same issues as any other language with multithreading.\n\nWhile clearly a challenge; I like that JS starts from isolated memory and builds message passing and shared memory on top as opt-in and scoped.\ncompared to languages that instead share everything from the start.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24yK3gLSBL5QaSVdD2Mn_cYmLavhttspB9dKwDdy1brdA\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My point is more that, if we actually baked multithreading into the language, such that you don't have to spin up a copy of your application and could just use existing references, then we wouldn't have the correlation issue. We'd have other issues instead, but they are the pretty much the same issues as any other language with multithreading.</blockquote></mx-reply><p>While clearly a challenge; I like that JS starts from isolated memory and builds message passing and shared memory on top as opt-in and scoped.</p><p>compared to languages that instead share everything from the start.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$yK3gLSBL5QaSVdD2Mn_cYmLavhttspB9dKwDdy1brdA"}},"msgtype":"m.text"},"ts":1695362216746,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$olm26YQ9xuU9Ba6Fl3z8iKtQptLSoE7dDjx6MZbHQ5E"},
{"content":{"body":"If `Object` (and basically everything) itself wasn't mutable would maybe have made things like sharing closures more tenable, but that bridge has closed","format":"org.matrix.custom.html","formatted_body":"If `Object` (and basically everything) itself wasn't mutable would maybe have made things like sharing closures more tenable, but that bridge has closed","msgtype":"m.text"},"ts":1695362360098,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$o44FciDiQJxjRd2730e0i_fxP7ZihCo_Qi45BPWuWYU"},
{"content":{"body":"Has it? Moddable's XS shows some behavior sharing is possible with their marshalling.","msgtype":"m.text"},"ts":1695385399157,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UZj8LcMxlMh2sJzg2mEAWxKB99vz0nJ21HKJ8dN4WYA"},
{"content":{"body":"* Has it? Moddable's XS shows some behavior sharing is possible with their full marshalling between frozen realms","m.new_content":{"body":"Has it? Moddable's XS shows some behavior sharing is possible with their full marshalling between frozen realms","msgtype":"m.text"},"m.relates_to":{"event_id":"$UZj8LcMxlMh2sJzg2mEAWxKB99vz0nJ21HKJ8dN4WYA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695385512695,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$H6bZkppQjaAiVMvIKg0jfSZh9cTPxuITctATBQK_ypE"},
{"content":{"body":"I mean for the most common places. Things definitely get a bit simpler if everything can be frozen!","format":"org.matrix.custom.html","formatted_body":"I mean for the most common places. Things definitely get a bit simpler if everything can be frozen!","msgtype":"m.text"},"ts":1695389146290,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$PMFr0OHoobhu_Bse7Z_vrfyRgZS59UpNEsbEUQnJKUs"},
{"content":{"body":"Lots of XS is in ROM, that's the easiest thing to share ;)","format":"org.matrix.custom.html","formatted_body":"Lots of XS is in ROM, that's the easiest thing to share ;)","msgtype":"m.text"},"ts":1695389185741,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$mLDfBXhCx_9rO3mmq3DCrCiZYBBqcIvkoqgxoY0h9UQ"},
{"content":{"body":"What I'm wondering is if the use cases for shared struct with behavior are compatible with frozen realms. Setup your realm and shared behaviors, freeze, then fork","msgtype":"m.text"},"ts":1695389657842,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xkv8zoN3rUGMRi9j4-0zGS3ghfH8_M1RLn2kS3yjmQk"},
{"content":{"body":"frozen realms is a not a mass adoptable strategy, but i see no reason why shared structs cannot compose with frozen realms","msgtype":"m.text"},"ts":1695396110956,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gqj8lqtNsUr7PPvuy5xIyPAbWVKTllky7C2cWnw_kWI"}
]