[
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: will you be in tokyo btw?\n\nNo, I will be attending remotely","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$LW5jRtzKxOMCV3XzYtoDlFLoMud4bOU67gPRLiuc71s?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: will you be in tokyo btw?</blockquote></mx-reply>No, I will be attending remotely","m.relates_to":{"m.in_reply_to":{"event_id":"$LW5jRtzKxOMCV3XzYtoDlFLoMud4bOU67gPRLiuc71s"}},"msgtype":"m.text"},"ts":1695342227938,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GcRFzxjWPmO26ZnQ3w6wHPzmjgfuO_CZZAefanB2HAs"},
{"content":{"body":"> <@shuyuguo:matrix.org> wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the _combination_ of source location + `with identity 'UUID'`\n\nIf you already have the source location, why would you need the UUID?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$_2pkCbonx3rLPeCM6_8cBuoGU5cG--EjpBSvEVsYFq4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the <em>combination</em> of source location + <code>with identity 'UUID'</code></blockquote></mx-reply>If you already have the source location, why would you need the UUID?","m.relates_to":{"m.in_reply_to":{"event_id":"$_2pkCbonx3rLPeCM6_8cBuoGU5cG--EjpBSvEVsYFq4"}},"msgtype":"m.text"},"ts":1695342283496,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6wlIrcsqjY0gjKbz5J_vmiv4W9nqUXCyp9Sr5xsaRX0"},
{"content":{"body":"Or are you just talking about the path to the file, not position within the source text.","msgtype":"m.text"},"ts":1695342317179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM"},
{"content":{"body":" * Or are you just talking about the path to the file, not position within the source text?","m.new_content":{"body":"Or are you just talking about the path to the file, not position within the source text?","msgtype":"m.text"},"m.relates_to":{"event_id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342319210,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kb-YRkMAH0lJen0bygrbfzMbJG5xKJNfXuXPjmh2_R4"},
{"content":{"body":"> <@shuyuguo:matrix.org> can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a `with identity 'UUID'` modifier is present?\n\nI have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location. The point of the user-defined identity is to override that step.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a <code>with identity 'UUID'</code> modifier is present?</blockquote></mx-reply>I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location. The point of the user-defined identity is to override that step.","m.relates_to":{"m.in_reply_to":{"event_id":"$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE"}},"msgtype":"m.text"},"ts":1695342556762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8"},
{"content":{"body":"> <@shuyuguo:matrix.org> can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a `with identity 'UUID'` modifier is present?\n\n * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a <code>with identity 'UUID'</code> modifier is present?</blockquote></mx-reply> * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","m.new_content":{"body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. the point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","msgtype":"m.text"},"m.relates_to":{"event_id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342572516,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q2xhd0R1myfL9SkbJpZtTcL5UWJhNYOzzHPcBlo7Ui4"},
{"content":{"body":" * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":" * I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","m.new_content":{"body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of `with identity` was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something _other_ than source location.","format":"org.matrix.custom.html","formatted_body":"I have to think more on that. When I raised the suggestion it was to key purely off of source location (path + line/character). This makes them non-bundleable however. The point of <code>with identity</code> was to allow a bundler with whole program knowledge and a list of entrypoints to be able to perform tree shaking, concatenation, module hoisting, and all of the other various tricks they do, and have two optimally minimized bundle files be able to identify the same shared struct using something <em>other</em> than source location.","msgtype":"m.text"},"m.relates_to":{"event_id":"$aLdkkLAI6ir2nDAp6xX_u5vDySIMcq48_jhfEdw5vA8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695342581501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9AG7QNP1KKmRyB6lXWRniKgDAfwOQx6BYUivstKD9Q4"},
{"content":{"body":"> <@rbuckton:matrix.org> Or are you just talking about the path to the file, not position within the source text?\n\nyeah i guess that's right. so... why is it a communication channel at all if we have a global registry where the key is source location? you can't observe it then","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Or are you just talking about the path to the file, not position within the source text?</blockquote></mx-reply>yeah i guess that's right. so... why is it a communication channel at all if we have a global registry where the key is source location? you can't observe it then","m.relates_to":{"m.in_reply_to":{"event_id":"$YjZveA9oUls3ZePZCx7_72Cq0VNo8P64Fb97n-k2OmM"}},"msgtype":"m.text"},"ts":1695342889762,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M9VmJxmQz0nJl1-FTaEWs6iQqplZJ5GWXXDSgyBBDAI"},
{"content":{"body":"like just change the semantics of the `registered` modifier or `with registered` or whatever we choose to key off of location, add the caveat about bundling, done","format":"org.matrix.custom.html","formatted_body":"like just change the semantics of the <code>registered</code> modifier or <code>with registered</code> or whatever we choose to key off of location, add the caveat about bundling, done","msgtype":"m.text"},"ts":1695342920013,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0"},
{"content":{"body":"seems totally reasonable to me to have the bundling guidance to be \"source location is meaningful for these things, like template strings\"","msgtype":"m.text"},"ts":1695343006358,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oz-kwSkI9QtgjAWL5Y0vGwJuYgKOUpez1o3LwNumpIU"},
{"content":{"body":"If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. `with identity` is difficult to forge if you don't allow it to be used in `eval`, since it has to be encoded as source text.","format":"org.matrix.custom.html","formatted_body":"If the key is the source location and the module itself cannot be reevaluated (NodeJS does some shenanigans here in CJS), then it would be unforgeable. <code>with identity</code> is difficult to forge if you don't allow it to be used in <code>eval</code>, since it has to be encoded as source text.","msgtype":"m.text"},"ts":1695343073300,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZjCPThppznVuV4FyHs5XblfaeGtPVhEUYAhJJNuST8A"},
{"content":{"body":"> <@shuyuguo:matrix.org> like just change the semantics of the `registered` modifier or `with registered` or whatever we choose to key off of location, add the caveat about bundling, done\n\nI think this would heavily depend on feedback from bundler developers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>like just change the semantics of the <code>registered</code> modifier or <code>with registered</code> or whatever we choose to key off of location, add the caveat about bundling, done</blockquote></mx-reply>I think this would heavily depend on feedback from bundler developers.","m.relates_to":{"m.in_reply_to":{"event_id":"$6hfM6n2w8j7VKEGVh6TmA8_1tbNjOL408OuZY5O6CC0"}},"msgtype":"m.text"},"ts":1695343124563,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yfJF8IHZobD_LT-fL5rwfFTilpSwe4son6W6jiaYldU"},
{"content":{"body":"how do they deal with template strings?","msgtype":"m.text"},"ts":1695343138388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YhcriZsGWVStZDIx0b6jfRiDKnuprhIxo8QockioqPk"},
{"content":{"body":"brb","msgtype":"m.text"},"ts":1695343145183,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HR7G9VlO4UnMwZJjp069L3ghzM1TRNrbdvDbsh7wGSs"}
]