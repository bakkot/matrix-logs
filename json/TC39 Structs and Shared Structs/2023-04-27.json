[
{"content":{"body":"* This makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported `const` or some such. ","m.new_content":{"body":"> <@mhofman:matrix.org> I don't see how it creates more potential for mistakes. it just moves the knowledge of string identifiers to the application layer\n\nThis makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported `const` or some such. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$IOvLQ__p3BX_-S2HrGRJf0_w0QImYft3FCazf-yimR4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a><br />I don't see how it creates more potential for mistakes. it just moves the knowledge of string identifiers to the application layer</blockquote></mx-reply>This makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported <code>const</code> or some such.","msgtype":"m.text"},"m.relates_to":{"event_id":"$11LRclpEBNj0XIMMLZueIFWOpiK-MOu8MDXfWYheFIg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682553616556,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vIL48VsGJLXJP3fwgLtvRdtlEcZfVq_HoIuux1VfnxY"},
{"content":{"body":"App developers don't like to copy paste protocol definitions, they like to reuse them (see protobuf and other packages). This design adds completely that is likely to result in someone in the ecosystem wrapping it with something easier to use that promotes reuse. ","format":"org.matrix.custom.html","formatted_body":"App developers don't like to copy paste protocol definitions, they like to reuse them (see protobuf and other packages). This design adds completely that is likely to result in someone in the ecosystem wrapping it with something easier to use that promotes reuse.","msgtype":"m.text"},"ts":1682553844134,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZOgirvJ7IskFlp_jUYO4eQSpP3nQzoEQ-3-Jo9ulxo"},
{"content":{"body":"maybe, but I'm opposed to a shared registry keyed on forgeable values, even just at \"init\". That approach also doesn't solve the use case of structs defined after init.","msgtype":"m.text"},"ts":1682554071715,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g-bSM4Cjf9PNZJHQ2GpItWQ-n_Bsrx7B_3Atp99hdx8"},
{"content":{"body":"> <@shuyuguo:matrix.org> oh creating an empty proto is an interesting alternative i hadn't thought about before\n\nI actually wasn’t suggesting this myself but it is an interesting idea!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ZxC0tT31kznNAwezS_6ZY9dTttZyYgkKtpKRvNn_tzs\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>oh creating an empty proto is an interesting alternative i hadn't thought about before</blockquote></mx-reply>I actually wasn’t suggesting this myself but it is an interesting idea!","m.relates_to":{"m.in_reply_to":{"event_id":"$ZxC0tT31kznNAwezS_6ZY9dTttZyYgkKtpKRvNn_tzs"}},"msgtype":"m.text"},"ts":1682555207677,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yWglaIA44uSeklcFB0RR2NIQaJkUo6AeKfcCgIJdo9Y"},
{"content":{"body":"Should there be a `constructor` on that created \"empty\" proto ?","format":"org.matrix.custom.html","formatted_body":"Should there be a <code>constructor</code> on that created &quot;empty&quot; proto ?","msgtype":"m.text"},"ts":1682555697753,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA"},
{"content":{"body":"I think there should","msgtype":"m.text"},"ts":1682555771604,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TuE5iqyd5uuvj6bmVZYop9P6JtXdCFlCueZVjD76nWs"},
{"content":{"body":"I think not? Others can set that later. But this is bike shedding and not fundamental","msgtype":"m.text"},"ts":1682555794319,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_jvRtl7MrJ3m0A0hzVrT5xS-Kk9A74Oh16pXYCflcOI"},
{"content":{"body":"The main issue as ron pointed out is the ergonomic of access to proto methods that haven't been defined","msgtype":"m.text"},"ts":1682555810826,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fBN6sjwrpGcx0-gU1SfQRutJz4FNV08dxKrDQGqRs7M"},
{"content":{"body":"Without an initial `constructor` property on this proto, I don't know how you could construct an instance of that struct in the receiver realm","format":"org.matrix.custom.html","formatted_body":"Without an initial <code>constructor</code> property on this proto, I don't know how you could construct an instance of that struct in the receiver realm","msgtype":"m.text"},"ts":1682555879443,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m1GmFq52QpW6IXvzgi5rh8zA6OsPs6fKu9Hh7BdujZA"},
{"content":{"body":"Oh I see what you mean","msgtype":"m.text"},"ts":1682555956961,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TaTIeL2XjOqRcxKYuz2FU2Y2tXnfeaRyNQXCMR6JzLs"},
{"content":{"body":"But… maybe this is a separate capability from being able to handle instances","msgtype":"m.text"},"ts":1682556093882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F3aKk7Al-9r_moNuK7f7enpQNCI8IBRhVfQBgZUTGVU"},
{"content":{"body":"> <@mhofman:matrix.org> Should there be a `constructor` on that created \"empty\" proto ?\n\nNo, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />Should there be a <code>constructor</code> on that created &quot;empty&quot; proto ?</blockquote></mx-reply>No, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.","m.relates_to":{"m.in_reply_to":{"event_id":"$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA"}},"msgtype":"m.text"},"ts":1682556274754,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h0wL-A9k8JiTv3Kjm7N9ekjh4tLqX4C9HCZ-LLW7rns"},
{"content":{"body":"We could make a “clone” method on the prototype instead :)","msgtype":"m.text"},"ts":1682556371964,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$34_yg9GZPZiKa79b7Yc2zuWTJEQUrzRdFXH5WLXNf3Q"},
{"content":{"body":"This would not imply the same ","format":"org.matrix.custom.html","formatted_body":"This would not imply the same","msgtype":"m.text"},"ts":1682556382870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GAzojDEmUKVMOciTQRN_ihcT4He726bKVMRouRreZBw"},
{"content":{"body":"> <@mhofman:matrix.org> Without an initial `constructor` property on this proto, I don't know how you could construct an instance of that struct in the receiver realm\n\nI would say that you shouldn't be able to. If the original definition had validation logic for its inputs, the synthetic constructor would not. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$m1GmFq52QpW6IXvzgi5rh8zA6OsPs6fKu9Hh7BdujZA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />Without an initial <code>constructor</code> property on this proto, I don't know how you could construct an instance of that struct in the receiver realm</blockquote></mx-reply>I would say that you shouldn't be able to. If the original definition had validation logic for its inputs, the synthetic constructor would not.","m.relates_to":{"m.in_reply_to":{"event_id":"$m1GmFq52QpW6IXvzgi5rh8zA6OsPs6fKu9Hh7BdujZA"}},"msgtype":"m.text"},"ts":1682556404463,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dc0_Q6FaE1Lar9FZHKkhpF7nlVQetS_IE9_OmLa36b4"},
{"content":{"body":"Anyway I think this new idea which we somehow collectively came up with—to make an empty prototype in each agent which is magically nominally tracked by the engine—is a natural MVP, on top of which most other things are ergonomics (or capabilities like construction, or transmitting appropriate metadata to the other side to be able to select the right methods)","msgtype":"m.text"},"ts":1682556496754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qkW0JeNe2TtUd6suKAEVnqn3IP61UgoejhePSlkkMqw"},
{"content":{"body":"This is a basis on top of which JS code can implement Ron’s registry","msgtype":"m.text"},"ts":1682556523609,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dO7hmaSyeXPybFtfDXj7tGRvxDF5wcF8wm1rtAExGMM"},
{"content":{"body":"> <@rbuckton:matrix.org> No, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.\n\nWhat do you mean it wouldn't have the construction logic? Why can't it create an instance?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$h0wL-A9k8JiTv3Kjm7N9ekjh4tLqX4C9HCZ-LLW7rns?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>No, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.</blockquote></mx-reply>What do you mean it wouldn't have the construction logic? Why can't it create an instance?","m.relates_to":{"m.in_reply_to":{"event_id":"$h0wL-A9k8JiTv3Kjm7N9ekjh4tLqX4C9HCZ-LLW7rns"}},"msgtype":"m.text"},"ts":1682556530260,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QBHaxNVMRuXM6_g3Ud0AT6w804kIw8oK2_VwRdJhRZk"},
{"content":{"body":"> <@mhofman:matrix.org> What do you mean it wouldn't have the construction logic? Why can't it create an instance?\n\nThe constructor might do something other than just set the fields in order","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24QBHaxNVMRuXM6_g3Ud0AT6w804kIw8oK2_VwRdJhRZk\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>What do you mean it wouldn't have the construction logic? Why can't it create an instance?</blockquote></mx-reply>The constructor might do something other than just set the fields in order","m.relates_to":{"m.in_reply_to":{"event_id":"$QBHaxNVMRuXM6_g3Ud0AT6w804kIw8oK2_VwRdJhRZk"}},"msgtype":"m.text"},"ts":1682556549330,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kRTC8WdOh1Gaubzz4dLQrZtD6ZKwFOM8_f6aN5pj67I"},
{"content":{"body":"> <@littledan:matrix.org> We could make a “clone” method on the prototype instead :)\n\nI'd like for shared structs to someday have private state, but I don't see that working well with a synthetic constructor either. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$34_yg9GZPZiKa79b7Yc2zuWTJEQUrzRdFXH5WLXNf3Q?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />We could make a “clone” method on the prototype instead :)</blockquote></mx-reply>I'd like for shared structs to someday have private state, but I don't see that working well with a synthetic constructor either.","m.relates_to":{"m.in_reply_to":{"event_id":"$34_yg9GZPZiKa79b7Yc2zuWTJEQUrzRdFXH5WLXNf3Q"}},"msgtype":"m.text"},"ts":1682556562017,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I7EqB9UyzqftUM_TtsYEXh0OPiHDrpzCe0CealdwhIE"},
{"content":{"body":"> <@mhofman:matrix.org> The main issue as ron pointed out is the ergonomic of access to proto methods that haven't been defined\n\nSorry what issue is this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24fBN6sjwrpGcx0-gU1SfQRutJz4FNV08dxKrDQGqRs7M\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>The main issue as ron pointed out is the ergonomic of access to proto methods that haven't been defined</blockquote></mx-reply>Sorry what issue is this?","m.relates_to":{"m.in_reply_to":{"event_id":"$fBN6sjwrpGcx0-gU1SfQRutJz4FNV08dxKrDQGqRs7M"}},"msgtype":"m.text"},"ts":1682556575358,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8zTy-hEXRdFkbTTYhWqX7S-A174lJVVtdWm6XHqSUu8"},
{"content":{"body":"Constructor behavior would be added on top of a base construct of the instance, which literally just does a construct","msgtype":"m.text"},"ts":1682556606344,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$1ZA8uoy9JfhhITfOtM6aLxbEQB1T2fE1Vf1J_LtZL4I"},
{"content":{"body":"> <@rbuckton:matrix.org> I'd like for shared structs to someday have private state, but I don't see that working well with a synthetic constructor either. \n\nYeah I would like that too, but there are so many problems…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24I7EqB9UyzqftUM_TtsYEXh0OPiHDrpzCe0CealdwhIE\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I'd like for shared structs to someday have private state, but I don't see that working well with a synthetic constructor either.</blockquote></mx-reply>Yeah I would like that too, but there are so many problems…","m.relates_to":{"m.in_reply_to":{"event_id":"$I7EqB9UyzqftUM_TtsYEXh0OPiHDrpzCe0CealdwhIE"}},"msgtype":"m.text"},"ts":1682556610351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hXZMcHTrKExB5lfS8fZs-PKck4ir2JlODmZMVvTrQJ4"},
{"content":{"body":"> <@littledan:matrix.org> Sorry what issue is this?\n\nProviding a useful error if you try to access a method on a foreign struct value that has no associated behavior. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8zTy-hEXRdFkbTTYhWqX7S-A174lJVVtdWm6XHqSUu8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Sorry what issue is this?</blockquote></mx-reply>Providing a useful error if you try to access a method on a foreign struct value that has no associated behavior.","m.relates_to":{"m.in_reply_to":{"event_id":"$8zTy-hEXRdFkbTTYhWqX7S-A174lJVVtdWm6XHqSUu8"}},"msgtype":"m.text"},"ts":1682556622811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qf5uAIb-MvwvoumVQRdySJg8S05VYvAVkTP_ekJA1PU"},
{"content":{"body":"> <@rbuckton:matrix.org> Providing a useful error if you try to access a method on a foreign struct value that has no associated behavior. \n\nOh, I think that would work out well. You would do `strct.method()` and the system would say, undefined is not a function. What is the problem?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24qf5uAIb-MvwvoumVQRdySJg8S05VYvAVkTP_ekJA1PU\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Providing a useful error if you try to access a method on a foreign struct value that has no associated behavior.</blockquote></mx-reply>Oh, I think that would work out well. You would do <code>strct.method()</code> and the system would say, undefined is not a function. What is the problem?","m.relates_to":{"m.in_reply_to":{"event_id":"$qf5uAIb-MvwvoumVQRdySJg8S05VYvAVkTP_ekJA1PU"}},"msgtype":"m.text"},"ts":1682556683645,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KkCLWgm0s0hL9Z-3kCR5nydJmUMkpdLOMRcYxIO_odA"},
{"content":{"body":"too obscure","msgtype":"m.text"},"ts":1682556704600,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2-IheAOUEF8aYIRiKQt9jxbtqidKJiFSKv80EZdQs2M"},
{"content":{"body":"> <@mhofman:matrix.org> Constructor behavior would be added on top of a base construct of the instance, which literally just does a construct\n\nThat behavior makes sense but we should maybe call it something other than constructor","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%241ZA8uoy9JfhhITfOtM6aLxbEQB1T2fE1Vf1J_LtZL4I\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Constructor behavior would be added on top of a base construct of the instance, which literally just does a construct</blockquote></mx-reply>That behavior makes sense but we should maybe call it something other than constructor","m.relates_to":{"m.in_reply_to":{"event_id":"$1ZA8uoy9JfhhITfOtM6aLxbEQB1T2fE1Vf1J_LtZL4I"}},"msgtype":"m.text"},"ts":1682556719364,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HEIC4KDnM8QOCu-lavg4kbiz7gvb1HFKO1g_BH6Ma5Q"},
{"content":{"body":"> <@littledan:matrix.org> Oh, I think that would work out well. You would do `strct.method()` and the system would say, undefined is not a function. What is the problem?\n\nThe setup for sharing behavior is complicated, so a better error would help to diagnose the issue. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$KkCLWgm0s0hL9Z-3kCR5nydJmUMkpdLOMRcYxIO_odA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Oh, I think that would work out well. You would do <code>strct.method()</code> and the system would say, undefined is not a function. What is the problem?</blockquote></mx-reply>The setup for sharing behavior is complicated, so a better error would help to diagnose the issue.","m.relates_to":{"m.in_reply_to":{"event_id":"$KkCLWgm0s0hL9Z-3kCR5nydJmUMkpdLOMRcYxIO_odA"}},"msgtype":"m.text"},"ts":1682556732935,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sMwyLpPWIolDGA56tNNrvPs9QdkyLvhRTdqnxXuSFAM"},
{"content":{"body":"* The setup for sharing behavior is complicated, so a better error would help to diagnose issues","m.new_content":{"body":"> <@littledan:matrix.org> Oh, I think that would work out well. You would do `strct.method()` and the system would say, undefined is not a function. What is the problem?\n\nThe setup for sharing behavior is complicated, so a better error would help to diagnose issues","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$KkCLWgm0s0hL9Z-3kCR5nydJmUMkpdLOMRcYxIO_odA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a><br />Oh, I think that would work out well. You would do <code>strct.method()</code> and the system would say, undefined is not a function. What is the problem?</blockquote></mx-reply>The setup for sharing behavior is complicated, so a better error would help to diagnose issues","msgtype":"m.text"},"m.relates_to":{"event_id":"$sMwyLpPWIolDGA56tNNrvPs9QdkyLvhRTdqnxXuSFAM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682556750393,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$g8ZzpEVqUpRMhmMsSJdevz-rfm_LvhVAp3u_3hgK7Cs"},
{"content":{"body":"Maybe it will be possible for the engine to notice that this case is happening and say so with a better message (with no change in actual semantics)","msgtype":"m.text"},"ts":1682556771497,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ks6Tt4ojQbvfYWcWnbD-EEbMrQ6oN_LsH4VWFlHMQFM"},
{"content":{"body":"> <@mhofman:matrix.org> Constructor behavior would be added on top of a base construct of the instance, which literally just does a construct\n\nFor the origin trial, maybe, but I don't know if that's how we want it to work by the time we hit Stage 2 and have syntax","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1ZA8uoy9JfhhITfOtM6aLxbEQB1T2fE1Vf1J_LtZL4I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />Constructor behavior would be added on top of a base construct of the instance, which literally just does a construct</blockquote></mx-reply>For the origin trial, maybe, but I don't know if that's how we want it to work by the time we hit Stage 2 and have syntax","m.relates_to":{"m.in_reply_to":{"event_id":"$1ZA8uoy9JfhhITfOtM6aLxbEQB1T2fE1Vf1J_LtZL4I"}},"msgtype":"m.text"},"ts":1682556826132,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kBVNcGTt3XbT5Xp586nYBkfYe0upEqRdCzeIn2IWCx4"},
{"content":{"body":"That's actually _definitely_ not the way I want it to work by Stage 2","format":"org.matrix.custom.html","formatted_body":"That's actually <em>definitely</em> not the way I want it to work by Stage 2","msgtype":"m.text"},"ts":1682556946245,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$p9ma28-09cuQJU0jV84cuy6Nx30VisJc4wiQPQ6mse0"},
{"content":{"body":"Ok but whatever syntactic sugar you put on top for the constructor, at the end of the day, it constructs an instance of your shared struct (not of Object), and then runs the constructor behavior with that object as `this`. The `constructor` that would show up as the default would simply be an explicit way to construct the base instance.","format":"org.matrix.custom.html","formatted_body":"Ok but whatever syntactic sugar you put on top for the constructor, at the end of the day, it constructs an instance of your shared struct (not of Object), and then runs the constructor behavior with that object as <code>this</code>. The <code>constructor</code> that would show up as the default would simply be an explicit way to construct the base instance.","msgtype":"m.text"},"ts":1682557113316,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UDI-W9sFFFMROz70zgbJv2bGcOW_XXukX2zffZLS5Rc"},
{"content":{"body":"You can replace the `constructor` on the prototype with that behavior enhance constructor you defined that captured the base constructor","format":"org.matrix.custom.html","formatted_body":"You can replace the <code>constructor</code> on the prototype with that behavior enhance constructor you defined that captured the base constructor","msgtype":"m.text"},"ts":1682557161220,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$G2UZoFFN6b6dCcPM64-ZJynQHFyXuvKSPHiwt_ZcxPw"},
{"content":{"body":" * You can replace the `constructor` on the prototype with that behavior enhanced constructor you defined that captured the base constructor","format":"org.matrix.custom.html","formatted_body":" * You can replace the <code>constructor</code> on the prototype with that behavior enhanced constructor you defined that captured the base constructor","m.new_content":{"body":"You can replace the `constructor` on the prototype with that behavior enhanced constructor you defined that captured the base constructor","format":"org.matrix.custom.html","formatted_body":"You can replace the <code>constructor</code> on the prototype with that behavior enhanced constructor you defined that captured the base constructor","msgtype":"m.text"},"m.relates_to":{"event_id":"$G2UZoFFN6b6dCcPM64-ZJynQHFyXuvKSPHiwt_ZcxPw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682557168614,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Dk6XiRy_gfTiJvcAdlAy3XvbxP3r5-ddkTq-TfHmY0Q"},
{"content":{"body":" * You can replace the `constructor` on the prototype with a behavior enhanced constructor you define that captured the base constructor","format":"org.matrix.custom.html","formatted_body":" * You can replace the <code>constructor</code> on the prototype with a behavior enhanced constructor you define that captured the base constructor","m.new_content":{"body":"You can replace the `constructor` on the prototype with a behavior enhanced constructor you define that captured the base constructor","format":"org.matrix.custom.html","formatted_body":"You can replace the <code>constructor</code> on the prototype with a behavior enhanced constructor you define that captured the base constructor","msgtype":"m.text"},"m.relates_to":{"event_id":"$G2UZoFFN6b6dCcPM64-ZJynQHFyXuvKSPHiwt_ZcxPw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682557181977,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sXpjnsuac84_A-lBzqhzeWK0PmbV4W81PQ1hOkJuavU"},
{"content":{"body":"We need to keep in mind this is an advanced feature, and I personally don't think we need the ergonomics to be that polished","msgtype":"m.text"},"ts":1682557259653,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$r8enRowoTBSKP2No9JZ3XJa938tyXUzPufo5ukdg33k"},
{"content":{"body":"I understand the mechanics of what you're describing. I'm saying that I'm opposed to that. Lets say I want to define a shared struct called `Range`, and in the constructor I want to ensure that `start` is equal to or less than `end`. I can either validate or swap the arguments in the user-defined constructor to create the struct in a normalized representation. However, the worker thread could just do `new someRange.constructor(10, 0)` and wouldn't get that normalization.","format":"org.matrix.custom.html","formatted_body":"I understand the mechanics of what you're describing. I'm saying that I'm opposed to that. Lets say I want to define a shared struct called <code>Range</code>, and in the constructor I want to ensure that <code>start</code> is equal to or less than <code>end</code>. I can either validate or swap the arguments in the user-defined constructor to create the struct in a normalized representation. However, the worker thread could just do <code>new someRange.constructor(10, 0)</code> and wouldn't get that normalization.","msgtype":"m.text"},"ts":1682557411006,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ytnw_ROm3PknEVUiDuTjDtXgS4VcCtg0rETAyCP-Pow"},
{"content":{"body":"That's even more important if we are able to have private state in a struct, where inputs and accesses are guarded. I wouldn't want someone to do `new someForeignValue.constructor(incorrectState)` and return it to the main thread which would assume it is a correct value.","format":"org.matrix.custom.html","formatted_body":"That's even more important if we are able to have private state in a struct, where inputs and accesses are guarded. I wouldn't want someone to do <code>new someForeignValue.constructor(incorrectState)</code> and return it to the main thread which would assume it is a correct value.","msgtype":"m.text"},"ts":1682557533041,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3GoHdVJrQxLEmqytFI5yfAvLQ6rpPVJoQw-MzeQ0yKE"},
{"content":{"body":"That becomes a potential attack vector, whereas if construction is unavailable you could pass a shared struct through untrusted code (with no associated behavior) and back into trusted code","msgtype":"m.text"},"ts":1682557618562,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3g-scj5KLkmdE9_IfAk7WKHFmG7-JhJTQWm-jj4z-GE"},
{"content":{"body":"I honestly don't see how you can prevent that in the face of arbitrary registration of behavior for existing struct. Your only control is to register the correct behavior at init. Whether you do that through your registry, or by grabbing and overriding the original constructor, it's the same thing.","msgtype":"m.text"},"ts":1682557680742,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-GYGnpSEYJnlKHwjC87II73-iwYGuZ2JhhSPv3PqcE8"},
{"content":{"body":"If preload/init is isolated from the regular worker script, you can chose what you want to associate and what you don't want to associate. The regular worker script then wouldn't be able to construct things it shouldn't.","msgtype":"m.text"},"ts":1682557767590,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0vRkmASX30QFUH-MXgL1Tdc7e-RTzM82drTV2fWfPAs"},
{"content":{"body":"of course the prototype showing up at unexpected times is the problem, and one also solved by my explicit type handle suggestion","msgtype":"m.text"},"ts":1682557793405,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$YnwFuWWAnxsZdAz4mU2tKdSYFflii06fMLtWbTkqjWA"}
]