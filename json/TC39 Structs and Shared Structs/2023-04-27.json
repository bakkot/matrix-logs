[
{"content":{"body":"* This makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported `const` or some such. ","m.new_content":{"body":"> <@mhofman:matrix.org> I don't see how it creates more potential for mistakes. it just moves the knowledge of string identifiers to the application layer\n\nThis makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported `const` or some such. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$IOvLQ__p3BX_-S2HrGRJf0_w0QImYft3FCazf-yimR4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a><br />I don't see how it creates more potential for mistakes. it just moves the knowledge of string identifiers to the application layer</blockquote></mx-reply>This makes it hard for multiple packages to share a common shared struct definition without that common definition also enshrining the key as an exported <code>const</code> or some such.","msgtype":"m.text"},"m.relates_to":{"event_id":"$11LRclpEBNj0XIMMLZueIFWOpiK-MOu8MDXfWYheFIg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1682553616556,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vIL48VsGJLXJP3fwgLtvRdtlEcZfVq_HoIuux1VfnxY"},
{"content":{"body":"App developers don't like to copy paste protocol definitions, they like to reuse them (see protobuf and other packages). This design adds completely that is likely to result in someone in the ecosystem wrapping it with something easier to use that promotes reuse. ","format":"org.matrix.custom.html","formatted_body":"App developers don't like to copy paste protocol definitions, they like to reuse them (see protobuf and other packages). This design adds completely that is likely to result in someone in the ecosystem wrapping it with something easier to use that promotes reuse.","msgtype":"m.text"},"ts":1682553844134,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZOgirvJ7IskFlp_jUYO4eQSpP3nQzoEQ-3-Jo9ulxo"},
{"content":{"body":"maybe, but I'm opposed to a shared registry keyed on forgeable values, even just at \"init\". That approach also doesn't solve the use case of structs defined after init.","msgtype":"m.text"},"ts":1682554071715,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g-bSM4Cjf9PNZJHQ2GpItWQ-n_Bsrx7B_3Atp99hdx8"},
{"content":{"body":"> <@shuyuguo:matrix.org> oh creating an empty proto is an interesting alternative i hadn't thought about before\n\nI actually wasn’t suggesting this myself but it is an interesting idea!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ZxC0tT31kznNAwezS_6ZY9dTttZyYgkKtpKRvNn_tzs\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>oh creating an empty proto is an interesting alternative i hadn't thought about before</blockquote></mx-reply>I actually wasn’t suggesting this myself but it is an interesting idea!","m.relates_to":{"m.in_reply_to":{"event_id":"$ZxC0tT31kznNAwezS_6ZY9dTttZyYgkKtpKRvNn_tzs"}},"msgtype":"m.text"},"ts":1682555207677,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yWglaIA44uSeklcFB0RR2NIQaJkUo6AeKfcCgIJdo9Y"},
{"content":{"body":"Should there be a `constructor` on that created \"empty\" proto ?","format":"org.matrix.custom.html","formatted_body":"Should there be a <code>constructor</code> on that created &quot;empty&quot; proto ?","msgtype":"m.text"},"ts":1682555697753,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA"},
{"content":{"body":"I think there should","msgtype":"m.text"},"ts":1682555771604,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$TuE5iqyd5uuvj6bmVZYop9P6JtXdCFlCueZVjD76nWs"},
{"content":{"body":"I think not? Others can set that later. But this is bike shedding and not fundamental","msgtype":"m.text"},"ts":1682555794319,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_jvRtl7MrJ3m0A0hzVrT5xS-Kk9A74Oh16pXYCflcOI"},
{"content":{"body":"The main issue as ron pointed out is the ergonomic of access to proto methods that haven't been defined","msgtype":"m.text"},"ts":1682555810826,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fBN6sjwrpGcx0-gU1SfQRutJz4FNV08dxKrDQGqRs7M"},
{"content":{"body":"Without an initial `constructor` property on this proto, I don't know how you could construct an instance of that struct in the receiver realm","format":"org.matrix.custom.html","formatted_body":"Without an initial <code>constructor</code> property on this proto, I don't know how you could construct an instance of that struct in the receiver realm","msgtype":"m.text"},"ts":1682555879443,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$m1GmFq52QpW6IXvzgi5rh8zA6OsPs6fKu9Hh7BdujZA"},
{"content":{"body":"Oh I see what you mean","msgtype":"m.text"},"ts":1682555956961,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TaTIeL2XjOqRcxKYuz2FU2Y2tXnfeaRyNQXCMR6JzLs"},
{"content":{"body":"But… maybe this is a separate capability from being able to handle instances","msgtype":"m.text"},"ts":1682556093882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F3aKk7Al-9r_moNuK7f7enpQNCI8IBRhVfQBgZUTGVU"},
{"content":{"body":"> <@mhofman:matrix.org> Should there be a `constructor` on that created \"empty\" proto ?\n\nNo, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br />Should there be a <code>constructor</code> on that created &quot;empty&quot; proto ?</blockquote></mx-reply>No, it might lead someone to think they can use it to construct an instance, but it wouldn't have the necessary construction logic that the original struct had.","m.relates_to":{"m.in_reply_to":{"event_id":"$jC8EEbO_6GnsNcaG_aDwgXoOVdkcWAUyj8Hx_kd_2cA"}},"msgtype":"m.text"},"ts":1682556274754,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h0wL-A9k8JiTv3Kjm7N9ekjh4tLqX4C9HCZ-LLW7rns"}
]