[
{"content":{"body":"> WASM integration: I doubt an FFI style approach and wasm having to go through JS would be acceptable for every shared field access?\n\nprivacy is a source-language level concept, not a target language level concept. how JS structs are reflected in wasm is just an independent discussion IMO.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WASM integration: I doubt an FFI style approach and wasm having to go through JS would be acceptable for every shared field access?</p>\n</blockquote>\n<p>privacy is a source-language level concept, not a target language level concept. how JS structs are reflected in wasm is just an independent discussion IMO.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728605602770,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uN8sHsahbNFIGLpMESOYTsKn5j1PnlhzuDrrKXsO7Wc"},
{"content":{"body":"> shared struct extend: the semantics of privates in JS is lexical. I think we may need a notion of protected here. Or at least a way to extract and represent the power to access private fields (which could be used to solve the wasm issue as well)\n\nyes, the existing semantics of #-names binds us in a way. i don't have a good answer","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>shared struct extend: the semantics of privates in JS is lexical. I think we may need a notion of protected here. Or at least a way to extract and represent the power to access private fields (which could be used to solve the wasm issue as well)</p>\n</blockquote>\n<p>yes, the existing semantics of #-names binds us in a way. i don't have a good answer</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728605643684,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8t2xYQBSbCMTxhp5bNKgx11abm6H_JUMlzsB9Knjbjo"},
{"content":{"body":"like wasmgc structs don't have names, just offsets, right?","m.mentions":{},"msgtype":"m.text"},"ts":1728605661753,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u4xKW3ge7pv4djQTfYXZkb-yfPYaly-ejAPSNHPeYJo"},
{"content":{"body":"privacy is just not a question there","m.mentions":{},"msgtype":"m.text"},"ts":1728605667402,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rCBaFEQU4ozvfZfHJ19eEAxTat-_PNmwkNrzk83ZudM"},
{"content":{"body":"> <@shuyuguo:matrix.org> for unsafe {}, mark is also happy with \"all shared struct fields always private\", then we don't need unsafe {}, because the idea is the public API must be written by the developer, which should be threadsafe\n> \n> the implementation constraint for me with that world is that we must be able to compile #-names in shared structs just as normal property slots. because of the \"#-names have different identities depending on the evaluation of the class declaration\" thing, they are wildly inefficient in engines. this problem might not exist at all if we have the restriction that struct decls are top-level only and thus can't be reevaluated anyways\n> \n> so that sounds like a promising thing for us to explore\n\nIf struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$7JwPed5zxSVPN3-azCmGxtxB6P858zkxYlR2GXQb1Ys?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>for unsafe {}, mark is also happy with &quot;all shared struct fields always private&quot;, then we don&#39;t need unsafe {}, because the idea is the public API must be written by the developer, which should be threadsafe<br/><br/>the implementation constraint for me with that world is that we must be able to compile #-names in shared structs just as normal property slots. because of the &quot;#-names have different identities depending on the evaluation of the class declaration&quot; thing, they are wildly inefficient in engines. this problem might not exist at all if we have the restriction that struct decls are top-level only and thus can&#39;t be reevaluated anyways<br/><br/>so that sounds like a promising thing for us to explore</blockquote></mx-reply>If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7JwPed5zxSVPN3-azCmGxtxB6P858zkxYlR2GXQb1Ys"}},"msgtype":"m.text"},"ts":1728606622020,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI"},
{"content":{"body":"> <@rbuckton:matrix.org> If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.\n\nyou expose methods that does the atomics thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.</blockquote></mx-reply>you expose methods that does the atomics thing","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI"}},"msgtype":"m.text"},"ts":1728608315909,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM"},
{"content":{"body":"the \"always private\" direction has a strong dependency on per-realm prototypes with methods","m.mentions":{},"msgtype":"m.text"},"ts":1728608339102,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SUznxp8AopAQ5NUS0j5WkBTRBlhl5ICee2tbwFU72uQ"},
{"content":{"body":"oh you mean, like, you can't reify #-names so how do you even call Atomics.load","m.mentions":{},"msgtype":"m.text"},"ts":1728608357929,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vWzGARXVyy4bEEKBTSfHTQGkW_3M0rWeQ0oNzQSQSPI"},
{"content":{"body":"i misunderstood","m.mentions":{},"msgtype":"m.text"},"ts":1728608359694,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iLA9qpDYcFeveCa6FHW7hxztd9tsOw4GzXg-uttqA8o"},
{"content":{"body":"yeah idk","m.mentions":{},"msgtype":"m.text"},"ts":1728608386652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DW6-gvY8PrJA-kO0dGP1Ux_DGkLGB1Z8IVUKKNcrntQ"},
{"content":{"body":"we're gonna need to come up with something there","m.mentions":{},"msgtype":"m.text"},"ts":1728608391965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oJN5zHJKhsKEo9W8AQNDId_zx-CV_eq9zxGX4RMGUHs"},
{"content":{"body":"i am of course more than happy with a direction with neither unsafe{} _nor_ always private, but i think agoric still can't live with that","format":"org.matrix.custom.html","formatted_body":"i am of course more than happy with a direction with neither unsafe{} <em>nor</em> always private, but i think agoric still can't live with that","m.mentions":{},"msgtype":"m.text"},"ts":1728608426844,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pBmchXxlnlJacEReq8X3qUbCFM2Vf7mcpdo7MtvmasI"},
{"content":{"body":"the atomics thing is one to be solved regardless of always-private, i suppose, because rbuckton you wanted to be able to use private state eventually anyway","format":"org.matrix.custom.html","formatted_body":"the atomics thing is one to be solved regardless of always-private, i suppose, because <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> you wanted to be able to use private state eventually anyway","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728608628225,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fCrVctHx7fRxAeIqtIVyjIViP68G2UtmPyOWzGR8XGo"},
{"content":{"body":"> <@shuyuguo:matrix.org> you expose methods that does the atomics thing\n\nThis doesn't make sense. Atomics requires a field name, but you cannot reference a private field","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you expose methods that does the atomics thing</blockquote></mx-reply>This doesn't make sense. Atomics requires a field name, but you cannot reference a private field","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM"}},"msgtype":"m.text"},"ts":1728608658397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eCNJ3VC46WewUs7o0DvxbaHmX-QypxkK84Aw67xmd6Q"},
{"content":{"body":"i know, i misunderstood the question","m.mentions":{},"msgtype":"m.text"},"ts":1728608670625,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$76tDy7Eq4DO0wrHGJyOr9N5ZvmVBslP69f7JcmWekC0"}
]