[
{"content":{"body":"> WASM integration: I doubt an FFI style approach and wasm having to go through JS would be acceptable for every shared field access?\n\nprivacy is a source-language level concept, not a target language level concept. how JS structs are reflected in wasm is just an independent discussion IMO.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>WASM integration: I doubt an FFI style approach and wasm having to go through JS would be acceptable for every shared field access?</p>\n</blockquote>\n<p>privacy is a source-language level concept, not a target language level concept. how JS structs are reflected in wasm is just an independent discussion IMO.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728605602770,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uN8sHsahbNFIGLpMESOYTsKn5j1PnlhzuDrrKXsO7Wc"},
{"content":{"body":"> shared struct extend: the semantics of privates in JS is lexical. I think we may need a notion of protected here. Or at least a way to extract and represent the power to access private fields (which could be used to solve the wasm issue as well)\n\nyes, the existing semantics of #-names binds us in a way. i don't have a good answer","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>shared struct extend: the semantics of privates in JS is lexical. I think we may need a notion of protected here. Or at least a way to extract and represent the power to access private fields (which could be used to solve the wasm issue as well)</p>\n</blockquote>\n<p>yes, the existing semantics of #-names binds us in a way. i don't have a good answer</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728605643684,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8t2xYQBSbCMTxhp5bNKgx11abm6H_JUMlzsB9Knjbjo"},
{"content":{"body":"like wasmgc structs don't have names, just offsets, right?","m.mentions":{},"msgtype":"m.text"},"ts":1728605661753,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u4xKW3ge7pv4djQTfYXZkb-yfPYaly-ejAPSNHPeYJo"},
{"content":{"body":"privacy is just not a question there","m.mentions":{},"msgtype":"m.text"},"ts":1728605667402,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rCBaFEQU4ozvfZfHJ19eEAxTat-_PNmwkNrzk83ZudM"},
{"content":{"body":"> <@shuyuguo:matrix.org> for unsafe {}, mark is also happy with \"all shared struct fields always private\", then we don't need unsafe {}, because the idea is the public API must be written by the developer, which should be threadsafe\n> \n> the implementation constraint for me with that world is that we must be able to compile #-names in shared structs just as normal property slots. because of the \"#-names have different identities depending on the evaluation of the class declaration\" thing, they are wildly inefficient in engines. this problem might not exist at all if we have the restriction that struct decls are top-level only and thus can't be reevaluated anyways\n> \n> so that sounds like a promising thing for us to explore\n\nIf struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$7JwPed5zxSVPN3-azCmGxtxB6P858zkxYlR2GXQb1Ys?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>for unsafe {}, mark is also happy with &quot;all shared struct fields always private&quot;, then we don&#39;t need unsafe {}, because the idea is the public API must be written by the developer, which should be threadsafe<br/><br/>the implementation constraint for me with that world is that we must be able to compile #-names in shared structs just as normal property slots. because of the &quot;#-names have different identities depending on the evaluation of the class declaration&quot; thing, they are wildly inefficient in engines. this problem might not exist at all if we have the restriction that struct decls are top-level only and thus can&#39;t be reevaluated anyways<br/><br/>so that sounds like a promising thing for us to explore</blockquote></mx-reply>If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7JwPed5zxSVPN3-azCmGxtxB6P858zkxYlR2GXQb1Ys"}},"msgtype":"m.text"},"ts":1728606622020,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI"},
{"content":{"body":"> <@rbuckton:matrix.org> If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.\n\nyou expose methods that does the atomics thing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If struct fields are always private, how would you even use them with Atomics? I'm not sure I'm in favor of that direction, for more reasons than that.</blockquote></mx-reply>you expose methods that does the atomics thing","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CVlXzniu2VJmBLtTQJMNFHg5wL89dpcmiotmGK4f0eI"}},"msgtype":"m.text"},"ts":1728608315909,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM"},
{"content":{"body":"the \"always private\" direction has a strong dependency on per-realm prototypes with methods","m.mentions":{},"msgtype":"m.text"},"ts":1728608339102,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SUznxp8AopAQ5NUS0j5WkBTRBlhl5ICee2tbwFU72uQ"},
{"content":{"body":"oh you mean, like, you can't reify #-names so how do you even call Atomics.load","m.mentions":{},"msgtype":"m.text"},"ts":1728608357929,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vWzGARXVyy4bEEKBTSfHTQGkW_3M0rWeQ0oNzQSQSPI"},
{"content":{"body":"i misunderstood","m.mentions":{},"msgtype":"m.text"},"ts":1728608359694,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iLA9qpDYcFeveCa6FHW7hxztd9tsOw4GzXg-uttqA8o"},
{"content":{"body":"yeah idk","m.mentions":{},"msgtype":"m.text"},"ts":1728608386652,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DW6-gvY8PrJA-kO0dGP1Ux_DGkLGB1Z8IVUKKNcrntQ"},
{"content":{"body":"we're gonna need to come up with something there","m.mentions":{},"msgtype":"m.text"},"ts":1728608391965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oJN5zHJKhsKEo9W8AQNDId_zx-CV_eq9zxGX4RMGUHs"},
{"content":{"body":"i am of course more than happy with a direction with neither unsafe{} _nor_ always private, but i think agoric still can't live with that","format":"org.matrix.custom.html","formatted_body":"i am of course more than happy with a direction with neither unsafe{} <em>nor</em> always private, but i think agoric still can't live with that","m.mentions":{},"msgtype":"m.text"},"ts":1728608426844,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pBmchXxlnlJacEReq8X3qUbCFM2Vf7mcpdo7MtvmasI"},
{"content":{"body":"the atomics thing is one to be solved regardless of always-private, i suppose, because rbuckton you wanted to be able to use private state eventually anyway","format":"org.matrix.custom.html","formatted_body":"the atomics thing is one to be solved regardless of always-private, i suppose, because <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> you wanted to be able to use private state eventually anyway","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1728608628225,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fCrVctHx7fRxAeIqtIVyjIViP68G2UtmPyOWzGR8XGo"},
{"content":{"body":"> <@shuyuguo:matrix.org> you expose methods that does the atomics thing\n\nThis doesn't make sense. Atomics requires a field name, but you cannot reference a private field","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>you expose methods that does the atomics thing</blockquote></mx-reply>This doesn't make sense. Atomics requires a field name, but you cannot reference a private field","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bU-yp4LCKkXqeGriFNDX-KDvhPkNnkHDFyZPs-btZeM"}},"msgtype":"m.text"},"ts":1728608658397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eCNJ3VC46WewUs7o0DvxbaHmX-QypxkK84Aw67xmd6Q"},
{"content":{"body":"i know, i misunderstood the question","m.mentions":{},"msgtype":"m.text"},"ts":1728608670625,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$76tDy7Eq4DO0wrHGJyOr9N5ZvmVBslP69f7JcmWekC0"},
{"content":{"body":"> <@shuyuguo:matrix.org> we're gonna need to come up with something there\n\nI agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly. IMO, that is not a great solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$oJN5zHJKhsKEo9W8AQNDId_zx-CV_eq9zxGX4RMGUHs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we&#39;re gonna need to come up with something there</blockquote></mx-reply>I agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly. IMO, that is not a great solution.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$oJN5zHJKhsKEo9W8AQNDId_zx-CV_eq9zxGX4RMGUHs"}},"msgtype":"m.text"},"ts":1728608788421,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sUhgjrmLqhOZotel6rvPjsdfDnR9WXAGjOV5QkRDdIA"},
{"content":{"body":"> <@shuyuguo:matrix.org> we're gonna need to come up with something there\n\n * I agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly through accessors? IMO, that is not a great solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$oJN5zHJKhsKEo9W8AQNDId_zx-CV_eq9zxGX4RMGUHs?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>we're gonna need to come up with something there</blockquote></mx-reply> * I agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly through accessors? IMO, that is not a great solution.","m.mentions":{},"m.new_content":{"body":"I agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly through accessors? IMO, that is not a great solution.","format":"org.matrix.custom.html","formatted_body":"I agree, and I already have a solution for this, but I also am not partial to private fields only as a direction. I could have multiple structs representing a complex data structure that are fully guarded, but I would always have to access their fields indirectly through accessors? IMO, that is not a great solution.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sUhgjrmLqhOZotel6rvPjsdfDnR9WXAGjOV5QkRDdIA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728608810759,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K4dASx6vYf8nd61Fc4D6Zbpr9-cMFI_yBZmuYpz00hc"},
{"content":{"body":"i think if you have a bunch of friend classes, i agree friend classes ought to be able to see each other somehow, but i don't know how complex we wanna make it","m.mentions":{},"msgtype":"m.text"},"ts":1728608837552,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Zv-7Uok_7pOMLVL4z7HmQJZDtO81yjgescaL_5i8NoY"},
{"content":{"body":"but we still need to thread the needle between a guardrail that Agoric requires for this to progress","m.mentions":{},"msgtype":"m.text"},"ts":1728608858232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8shmpDW3NCJtW3MiUM98giJXfT7QTKgThsEL8MOEPuU"},
{"content":{"body":"that's the most viable option i see, if choosing between this and no guardrails at all","m.mentions":{},"msgtype":"m.text"},"ts":1728608880265,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yhLcERSrPnwpeMnCeHezNtzJMoE8f5Skv3x8J-HFmRE"},
{"content":{"body":"are there other ideas?","m.mentions":{},"msgtype":"m.text"},"ts":1728608883542,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9BakeytBkY35M0invOVVdJqBT0vub-breBLTzvs1gNg"},
{"content":{"body":"(assuming unsafe{} is dead in the water, given how much opposition we heard during plenary)","m.mentions":{},"msgtype":"m.text"},"ts":1728608923533,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BWGa6ffUkDAOycZUnhvOzGDl6dXhnLsLT1s5D95-1Q0"},
{"content":{"body":"We're making this so much more complicated than it needs to be","m.mentions":{},"msgtype":"m.text"},"ts":1728609003372,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$mcV8kgZOMY2W-RWSRmuwnOZ599gD-Cm3FKfQ_mDZWxg"},
{"content":{"body":"i agree personally","m.mentions":{},"msgtype":"m.text"},"ts":1728609024561,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XGHk63l4iXGFqo1oPWAFc9G2DzXVHefufnbtILnftHY"},
{"content":{"body":"What opposition, aside from Waldemar's?","m.mentions":{},"msgtype":"m.text"},"ts":1728609042751,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ea7hXeVsd1-uXx5vRah4rJ3CZ02EgTVBUkwYuV8OG7g"},
{"content":{"body":"oh, your preference is to _have_ unsafe{}?","format":"org.matrix.custom.html","formatted_body":"oh, your preference is to <em>have</em> unsafe{}?","m.mentions":{},"msgtype":"m.text"},"ts":1728609053345,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b5L_ej26wsQP7YvTqZpRuqjqvG2QQeR1Qe0OOx_FjB4"},
{"content":{"body":"I'd much rather have no guardrails than only private fields.","m.mentions":{},"msgtype":"m.text"},"ts":1728609062794,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z4Kv5j3XVQRC3BVInFewHzSN2ToIBFoS_9mGQVq0K58"},
{"content":{"body":"I'd rather have `unsafe` than only private fields.","format":"org.matrix.custom.html","formatted_body":"I'd rather have <code>unsafe</code> than only private fields.","m.mentions":{},"msgtype":"m.text"},"ts":1728609080975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$F7-547Q6rV_88GAYtis7xCegdupO4WaNfpaVU_1cDTE"},
{"content":{"body":"not just Waldemar, you also said TS gave negative feedback (i saw ryanc hating on it for the same reasons), i saw matrix conversations that were very much against the idea","m.mentions":{},"msgtype":"m.text"},"ts":1728609094919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wKfUlKDBo6dWC6sp0oFhEfiCdFzNDmosCgUUdb110RI"},
{"content":{"body":"okay, it'd be good to get a ranking and take stock of the options at the next meeting. i've invited Waldemar but i don't know if he'll attend","m.mentions":{},"msgtype":"m.text"},"ts":1728609123266,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jZIAP7eILP4J3NgO9cuEx7C6qIWJb7jq-Uj8m6aDTYw"},
{"content":{"body":"the known options so far are:\n\n1. no guardrails at all\n2. volatile {} (people definitely hated unsafe)\n3. private only","format":"org.matrix.custom.html","formatted_body":"<p>the known options so far are:</p>\n<ol>\n<li>no guardrails at all</li>\n<li>volatile {} (people definitely hated unsafe)</li>\n<li>private only</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1728609158679,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_TZPIbMVcpAo1wTqx5n77qr-ke6NeRs36akDE0T7wKA"},
{"content":{"body":"One suggestion that seemed interesting was using a different punctuator for field access. Something like `obj->x`, but maybe without the pointer dereferencing baggage.","format":"org.matrix.custom.html","formatted_body":"One suggestion that seemed interesting was using a different punctuator for field access. Something like <code>obj-&gt;x</code>, but maybe without the pointer dereferencing baggage.","m.mentions":{},"msgtype":"m.text"},"ts":1728609164518,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$r7jcDWDTpExMnNZ-aCtEWPZr_6cUFRvu7Uio4_CnEhU"},
{"content":{"body":"Like, we have `.id` and `.#id` we could just have something else","format":"org.matrix.custom.html","formatted_body":"Like, we have <code>.id</code> and <code>.#id</code> we could just have something else","m.mentions":{},"msgtype":"m.text"},"ts":1728609200385,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h3_2XvBDIbkDRmwo8r5z_Z8WkCdkVCrA3vnFxg9ALLI"},
{"content":{"body":"that seems also like a lot of complexity to me","m.mentions":{},"msgtype":"m.text"},"ts":1728609203631,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RzC9sv5I8PQolTmlkMIWdjoWfa312SwDy96XU92RLg4"},
{"content":{"body":"but sure, we can also talk about it","m.mentions":{},"msgtype":"m.text"},"ts":1728609208512,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cmdtAtfZx25aQSWBPeF87YK0XSJugi6yamXFPBSt0dU"},
{"content":{"body":"my preference is 1 > 3 > 2, ron's is 1 > 2 > 3, agoric's AFAIU is 2 = 3 (?) > 1","m.mentions":{},"msgtype":"m.text"},"ts":1728609235008,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ro3upsgadjU72QqUcQoJinXyywptZP7307Y9CDM6JcQ"},
{"content":{"body":"I think private only is a non-starter because it requires so much additional complexity. ","m.mentions":{},"msgtype":"m.text"},"ts":1728609269521,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RGceNknWR90M9mEWPL1qaPNiAsGZNTaxq6pKUQnVTYw"},
{"content":{"body":"As far as atomic access to privates, there's always https://github.com/rbuckton/proposal-ref","m.mentions":{},"msgtype":"m.text"},"ts":1728609300348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MNJFU15_DSQPap6PCwzXmg33YyLeKxlFPljFQdcyy2Y"},
{"content":{"body":" * As far as atomic access to privates, there's always https://github.com/rbuckton/proposal-refs","m.mentions":{},"m.new_content":{"body":"As far as atomic access to privates, there's always https://github.com/rbuckton/proposal-refs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MNJFU15_DSQPap6PCwzXmg33YyLeKxlFPljFQdcyy2Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728609310411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JSuiJoogL2zUIZcD1UTEeTtcICE6KjFpTkmiz7wU7jw"},
{"content":{"body":"one advantage of new syntax is that it opens up the possibility of not allowing access to these fields through reflection, the same way private fields cannot be accessed through reflection","m.mentions":{},"msgtype":"m.text"},"ts":1728609311424,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_v6H7xU9LMM5pv0Z-m9Whd5FbsWfGAt2fhMVsgnaPNA"},
{"content":{"body":"I haven't proposed it, but I've been thinking about it for years.","m.mentions":{},"msgtype":"m.text"},"ts":1728609338979,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HG33u_glJS0ZZswUffLG6ZlJ-nwdbkA7Ge2cKjT3EUc"},
{"content":{"body":"it also means that private shared fields don't need to have exactly the same semantics as private fields","m.mentions":{},"msgtype":"m.text"},"ts":1728609348471,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pERY5H_-v3LNm94m9s2u6QibV4vXlL_DU-ZMPqbFvR8"},
{"content":{"body":"> <@mhofman:matrix.org> it also means that private shared fields don't need to have exactly the same semantics as private fields\n\nthe Atomics methods problem is a hard requirement though","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$pERY5H_-v3LNm94m9s2u6QibV4vXlL_DU-ZMPqbFvR8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>it also means that private shared fields don&#39;t need to have exactly the same semantics as private fields</blockquote></mx-reply>the Atomics methods problem is a hard requirement though","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pERY5H_-v3LNm94m9s2u6QibV4vXlL_DU-ZMPqbFvR8"}},"msgtype":"m.text"},"ts":1728609368246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IXYpn2NYT80dEufPxXjJN-xBiIo2og_EuyWlRYN6RJs"},
{"content":{"body":"to not be able to do seq-cst, or acq/rel (as waldemar is proposing now) on those fields would be fatal","m.mentions":{},"msgtype":"m.text"},"ts":1728609386064,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P_N2gdKwLCLff5YvUH6HMAWi7fR5Ww1GNNm44PnsK_c"},
{"content":{"body":"This is supposed to be a perf-critical feature. Routing everything through accessors is antithetical to that","m.mentions":{},"msgtype":"m.text"},"ts":1728609388980,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IZLUe6C4UCCrZR4TwuC_GupUQ3-2pP56rHUrm_QbAkg"},
{"content":{"body":"well, it's only via public use is the point","m.mentions":{},"msgtype":"m.text"},"ts":1728609403367,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OfiAITcJZCW7gKAT5n6grZL5i1k9JE2UJktw85idP0o"},
{"content":{"body":"i'm actually not super concerned for routing through accessors because that only happens externally to the class's methods","m.mentions":{},"msgtype":"m.text"},"ts":1728609417721,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LGjDmwqFQqtLTodwQuS0Z8T_4LXFTBNlTXh2IkGn9nc"},
{"content":{"body":"yeah Atomics becomes difficult to explain with new syntax if there is no reflection","m.mentions":{},"msgtype":"m.text"},"ts":1728609419518,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h-DGfJ7Upqc3a-LBxu5eDw7CKZ4z37dpWl6xIpWOQYA"},
{"content":{"body":"which would only be a perf problem in your cluster-of-friends case","m.mentions":{},"msgtype":"m.text"},"ts":1728609424581,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a-HR56PSHq1WeGFSqNSUt0tjRWr8BkumC1ccZWQe1i0"},
{"content":{"body":"accessors on fixed shape objects, especially if they're possibly autogenerated, don't have to have any overhead, right ?","m.mentions":{},"msgtype":"m.text"},"ts":1728609460407,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3SitEAZ__wHqHt1vmskoFudx4yj31RbR1vGta-4pnfM"},
{"content":{"body":"the refs proposal would introduce a mechanism for reified References.","m.mentions":{},"msgtype":"m.text"},"ts":1728609462096,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$foR0v6QZMpakgxmImsEGyLp3TG2ED4sOJj1wazP2cO0"},
{"content":{"body":"> <@mhofman:matrix.org> accessors on fixed shape objects, especially if they're possibly autogenerated, don't have to have any overhead, right ?\n\noh they have super overhead as a function call","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$3SitEAZ__wHqHt1vmskoFudx4yj31RbR1vGta-4pnfM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>accessors on fixed shape objects, especially if they&#39;re possibly autogenerated, don&#39;t have to have any overhead, right ?</blockquote></mx-reply>oh they have super overhead as a function call","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3SitEAZ__wHqHt1vmskoFudx4yj31RbR1vGta-4pnfM"}},"msgtype":"m.text"},"ts":1728609470613,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3pjep-hM67X3XcQIClr57ln-0o6KwnPHm7QqtJR1vVU"},
{"content":{"body":"So you could do `Atomics.load(ref struct.#x)`","format":"org.matrix.custom.html","formatted_body":"So you could do <code>Atomics.load(ref struct.#x)</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728609475357,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Jl2mlEJ_xPTASMmhlejb8dzNsPjr3qnHjn47i-rE9lU"},
{"content":{"body":"that is a huge overhead compared to a load on a struct","m.mentions":{},"msgtype":"m.text"},"ts":1728609477674,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qu--RbhmtZlDm2umS_sy9seRMkYUapszh3utzW5CE1U"},
{"content":{"body":"but i can live with it if it's for public users only","m.mentions":{},"msgtype":"m.text"},"ts":1728609491089,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gPKQKMUquJkFCwxxqaiVur3OpX6X8SLOMUCw7eGCSXQ"},
{"content":{"body":"because that shouldn't happen frequently for public users","m.mentions":{},"msgtype":"m.text"},"ts":1728609497436,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mgCuAvcCEgmnR-7DCddyPYr8horFMeO3HCyjLULte0Q"},
{"content":{"body":"> <@rbuckton:matrix.org> the refs proposal would introduce a mechanism for reified References.\n\nthat's a big dependency to take :(","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$foR0v6QZMpakgxmImsEGyLp3TG2ED4sOJj1wazP2cO0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>the refs proposal would introduce a mechanism for reified References.</blockquote></mx-reply>that's a big dependency to take :(","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$foR0v6QZMpakgxmImsEGyLp3TG2ED4sOJj1wazP2cO0"}},"msgtype":"m.text"},"ts":1728609572524,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HOoDM7W6K3X-FLS7WYCex33rn4ORPv6dmDlfMIbgrW4"},
{"content":{"body":"> <@shuyuguo:matrix.org> which would only be a perf problem in your cluster-of-friends case\n\nWhich is something I'm already doing in the TS experiment to build the lock free data structures I need to actually get work done.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$a-HR56PSHq1WeGFSqNSUt0tjRWr8BkumC1ccZWQe1i0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>which would only be a perf problem in your cluster-of-friends case</blockquote></mx-reply>Which is something I'm already doing in the TS experiment to build the lock free data structures I need to actually get work done.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$a-HR56PSHq1WeGFSqNSUt0tjRWr8BkumC1ccZWQe1i0"}},"msgtype":"m.text"},"ts":1728609581269,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xTDbLaQalB_2NywTYaKwlhBj3Xnfs2P2fGlUAXX8cqc"},
{"content":{"body":"interesting, what is your cluster of friend classes in that case?","m.mentions":{},"msgtype":"m.text"},"ts":1728609596643,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$b-eI5LhydKb-A1dJXS44hUenm4uVR7SUZ7guRopd4Pg"},
{"content":{"body":"I agree, but it has other uses. It's had use cases since Decorators was proposed.","m.mentions":{},"msgtype":"m.text"},"ts":1728609603429,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cUMLq-WZRnCUkNeEXmcTHZIYBzQBh7J825JxhUDyLtU"},
{"content":{"body":"just pick a concrete one, just curious","m.mentions":{},"msgtype":"m.text"},"ts":1728609604441,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CruRKK4unr4A8Qw1AHDNwteiYqPlin378tfkWJt0T90"},
{"content":{"body":"Writing a Deque","m.mentions":{},"msgtype":"m.text"},"ts":1728609611556,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3uYPTk0oEcU5Hli-Ynd6qseUZNfaAg7Jpr2HMc4mGaY"},
{"content":{"body":"and the subclasses that comprise it that need to see each others' state?","m.mentions":{},"msgtype":"m.text"},"ts":1728609627159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$M4jOuVmHLb95NnWZ3jqcAc9MUuHcXQNaGIWVYtwF_Mw"},
{"content":{"body":"there are about 4-5 data structures that are all interrelated. ","m.mentions":{},"msgtype":"m.text"},"ts":1728609627598,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wWHlQjiFI5aDZnWlQIyFG5JvEGRePeYVn4m00BgUUNM"},
{"content":{"body":"The `Deque` needs to be able to access the ring buffer's state. ","format":"org.matrix.custom.html","formatted_body":"The <code>Deque</code> needs to be able to access the ring buffer's state.","m.mentions":{},"msgtype":"m.text"},"ts":1728609647516,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J4EpXQ_hwaAiuqXs8EKlfFDEgz35x8EELty7C2y2N18"},
{"content":{"body":"This is all lock free, so only the Deque public methods need to be guarded.","m.mentions":{},"msgtype":"m.text"},"ts":1728609660873,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LlTA9F-j_d8qVFb6y7ty2vMJdX_11E5XctladIV2AxE"},
{"content":{"body":"okay so you have like a RingBuffer and you want Deque to just get ._buffer, not RingBuffer.p.getBufferElementAt(n) or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1728609689968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1p6jKgli8atcYd7dfDDV7-i6ZEocoWXh_puwRkRC9rY"},
{"content":{"body":"And you need to use objects for ringbuffer entries for appropriate CAS operations.","m.mentions":{},"msgtype":"m.text"},"ts":1728609693334,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EF1Tgs5wn1kfVE2cHydL4XHuKe7DjjWOCJQmEp7z9PU"},
{"content":{"body":"roughly.","m.mentions":{},"msgtype":"m.text"},"ts":1728609702403,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E2M4gFjE5aYEXPdAhZb14nSogSnm5blbw0WSQ8GzLKE"},
{"content":{"body":"right, or .compareExchangeElementAt","m.mentions":{},"msgtype":"m.text"},"ts":1728609707044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9dM9Yv3lz38MtJ9SZ_2k-SSz1PV9Fmm1v-EgNrnreHM"},
{"content":{"body":"https://github.com/microsoft/TypeScript/blob/shared-struct-test/src/compiler/sharing/collections/deque.ts","m.mentions":{},"msgtype":"m.text"},"ts":1728609740695,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hwfKl7BoCoa5_pAM5Masoy0q_aYp-upjMmmlsZHZwFY"},
{"content":{"body":"right, if we take alway-private to mean literal #-names with their semantics today, this works very poorly","m.mentions":{},"msgtype":"m.text"},"ts":1728609742675,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qBXu6dgJN2-VN19C5R4yG66l9PVSucGAOOcVn06crDI"},
{"content":{"body":"(though that's using `class` and TS legacy decorators to give me something to attach types to, the constructors actually return structs) ","format":"org.matrix.custom.html","formatted_body":"(though that's using <code>class</code> and TS legacy decorators to give me something to attach types to, the constructors actually return structs)","m.mentions":{},"msgtype":"m.text"},"ts":1728609806801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$afFy5NqgZoAFuyN1Xj-9DAuYUQ1alqqkVYdd2LxE74Y"},
{"content":{"body":"man why is this so hard","m.mentions":{},"msgtype":"m.text"},"ts":1728609838634,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n6ktNo3foGSOtquZ95J1MWgNVNrcfstmtJrJGqN5ZPI"},
{"content":{"body":"i am _really_ skeptical about adding a new kind of property after private names","format":"org.matrix.custom.html","formatted_body":"i am <em>really</em> skeptical about adding a new kind of property after private names","m.mentions":{},"msgtype":"m.text"},"ts":1728609856135,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S1Gx-PiYNjCDeoCrf3AYMwtfRJP4_f7w27MLyyna4-Y"},
{"content":{"body":"also for a new pointer-field-access syntax, but i'd need to see the specifics i guess","m.mentions":{},"msgtype":"m.text"},"ts":1728609872644,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cT3XrT_vsD0T67wMdelZXhLcn5iuA7gywn6bE3WU8GQ"},
{"content":{"body":"Everyone I've spoken to on my team seems to be in agreement that this additional guardrail is wholly unnecessary.","m.mentions":{},"msgtype":"m.text"},"ts":1728609904717,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WTfX8SX16avpD0lGPnykdTDDQI5r0oShBpGb8xrDaD4"},
{"content":{"body":"JS has getters and setters, so an object's properties can change underneath you unexpectedly already, and reads and writes don't tear.","m.mentions":{},"msgtype":"m.text"},"ts":1728609962435,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XWomEpitRk-2U0eLtQXmbLHLjjvOEVufKQJt5Tv97-4"},
{"content":{"body":"this was waldemar's core point iirc","m.mentions":{},"msgtype":"m.text"},"ts":1728610001244,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J6YCQfmWe18P7yas_uICdQ5jNiwlGWx3PIcv_M0Hf0A"},
{"content":{"body":"i confess i am also confused _why_ data races are categorically different from \"wacky getters\". mark's explanation to me in the hallway was, getters are the public API of the class designer, so it is intentional by the designer. whereas fields are just fields, so i guess to expose racy access on them by default without additional signal of intent is the contagion he wants to prevent","format":"org.matrix.custom.html","formatted_body":"i confess i am also confused <em>why</em> data races are categorically different from \"wacky getters\". mark's explanation to me in the hallway was, getters are the public API of the class designer, so it is intentional by the designer. whereas fields are just fields, so i guess to expose racy access on them by default without additional signal of intent is the contagion he wants to prevent","m.mentions":{},"msgtype":"m.text"},"ts":1728610073588,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KDYswAWeQKP0xpADolETjRXyhv76VXUxl502YFw-Jbo"},
{"content":{"body":"i didn't have time to really dig in, but a struct designer still has to type `foo;`","format":"org.matrix.custom.html","formatted_body":"i didn't have time to really dig in, but a struct designer still has to type <code>foo;</code>","m.mentions":{},"msgtype":"m.text"},"ts":1728610099013,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PHcfwH0H-cdgvWICpGFJre4TJ7k9eK232k7h8O4aPug"},
{"content":{"body":" * i didn't have time to really dig in, but a struct designer still has to type `fieldName;`","format":"org.matrix.custom.html","formatted_body":" * i didn't have time to really dig in, but a struct designer still has to type <code>fieldName;</code>","m.mentions":{},"m.new_content":{"body":"i didn't have time to really dig in, but a struct designer still has to type `fieldName;`","format":"org.matrix.custom.html","formatted_body":"i didn't have time to really dig in, but a struct designer still has to type <code>fieldName;</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$PHcfwH0H-cdgvWICpGFJre4TJ7k9eK232k7h8O4aPug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1728610104071,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Wb_mun9yy-3TN-spEGQ9jP5amc8QLDEjjWkw-tr21-I"},
{"content":{"body":"`shared struct` is in the public API of the struct author as well. I don't see how this is different.","format":"org.matrix.custom.html","formatted_body":"<code>shared struct</code> is in the public API of the struct author as well. I don't see how this is different.","m.mentions":{},"msgtype":"m.text"},"ts":1728610214640,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XNL9X9_tgFcNTR764NTRA0Jgf6u21tXMP9pTw7iE_j8"},
{"content":{"body":"it would be good to dig into more there, for sure","m.mentions":{},"msgtype":"m.text"},"ts":1728610238701,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jnyFeEj9Q4S_R7WgCbULZPxT8YuIF6QF6zbU_9thfss"},
{"content":{"body":"What's *not* in the public API of the class designer are Proxies, and Proxies can change values on you even for *fields*","format":"org.matrix.custom.html","formatted_body":"What's <em>not</em> in the public API of the class designer are Proxies, and Proxies can change values on you even for <em>fields</em>","m.mentions":{},"msgtype":"m.text"},"ts":1728610239772,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IFd1ri1yOf74UAVsBHwq4CCJF2H0tyfzF1xiWHCIS4s"},
{"content":{"body":"because mark's actual goal as articulated is \"how do we better ensure a world where by default devs interact with shared structs only via their public interface, which should be threadsafe\"","m.mentions":{},"msgtype":"m.text"},"ts":1728610277688,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OOlwhivDgGVNGPgEa2V8XkUrnF6SGm5_gL7WRTcO-i0"},
{"content":{"body":"If you don't have COOP/COEP enabled, then it is threadsafe because you can't actually share it?","m.mentions":{},"msgtype":"m.text"},"ts":1728610392186,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8oAmG4L98FS228GM5N4a0fbePJo79lZ1QYrN2gutsNk"}
]