[
{"content":{"body":"- When A handshakes with M:\n  - M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.\n  - A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.\n- When B handshakes with M:\n  - M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.\n  - B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.\n\nAs such:\n- M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.\n- B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.\n- A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>When A handshakes with M:\n<ul>\n<li>M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.</li>\n<li>A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.</li>\n</ul>\n</li>\n<li>When B handshakes with M:\n<ul>\n<li>M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.</li>\n<li>B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.</li>\n</ul>\n</li>\n</ul>\n<p>As such:</p>\n<ul>\n<li>M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.</li>\n<li>B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.</li>\n<li>A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171668855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HS0y6CUJFfulqtRL9L2OcgfY5tSBNGHpCYZly957_qU"},
{"content":{"body":"However, if you use the same registry RAB with A and B:\n- B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.\n- A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.","format":"org.matrix.custom.html","formatted_body":"<p>However, if you use the same registry RAB with A and B:</p>\n<ul>\n<li>B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.</li>\n<li>A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171791500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iH_SKy4Db-c6Ut52lbeCmsrHPr7BVP8495tzMzfkSGQ"},
{"content":{"body":"If such a prototype is initialized lazily in `[[GetPrototypeOf]]`, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","format":"org.matrix.custom.html","formatted_body":"If such a prototype is initialized lazily in <code>[[GetPrototypeOf]]</code>, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","msgtype":"m.text"},"ts":1695171989576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9sHMvYsrX12hKrMZ4eVUjV1c-sfRweFv64o1smhunsg"},
{"content":{"body":"Now, we could theoretically have a global registry instead, with the `structs: {}` map only used to correlate PointM and PointA when A is established. Workers will always be part of a tree that points back to some root agent, so there's always a way to collect these things. If the handshake establishes the relationship without the ability to pass messages, would that be sufficient to address concerns about a global registry?","format":"org.matrix.custom.html","formatted_body":"Now, we could theoretically have a global registry instead, with the <code>structs: {}</code> map only used to correlate PointM and PointA when A is established. Workers will always be part of a tree that points back to some root agent, so there's always a way to collect these things. If the handshake establishes the relationship without the ability to pass messages, would that be sufficient to address concerns about a global registry?","msgtype":"m.text"},"ts":1695172399398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Yb14-RUWWWm1TRT-STKWnZpMPIGXe1Z_ydukyqaDLUw"},
{"content":{"body":"Especially if the worker can't actually observe the exemplar during handshake, since the handshake process is handled by the runtime. We wouldn't even need communicate the actual exemplars through the handshake process, just the type identities of the exemplars. ","msgtype":"m.text"},"ts":1695172612891,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bxx9bKqbyxmNNaRcX6sZwD2o9nYv8E1i5BBstOb37d4"},
{"content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars you send during the handshake must have been created by a type created in M's Agent.","msgtype":"m.text"},"ts":1695172875759,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg"},
{"content":{"body":" * Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent.","m.new_content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172893339,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m0IQQ3IpFh4Muo0ZQSdb-Ave7xmIU-4MDmRlse2Z8r8"},
{"content":{"body":" * Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent","m.new_content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent","msgtype":"m.text"},"m.relates_to":{"event_id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172907742,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-gtvAasjyry0aOJR7CEpgzcN9yiXpwz8um_s3r3Tk4I"},
{"content":{"body":"and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplar as one of its own.","msgtype":"m.text"},"ts":1695172974815,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$515_z1tSgS935DJcsmWclJ6vHtH6UK72txO_AMpqVQQ"},
{"content":{"body":" * and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplars as one of its own.","m.new_content":{"body":"and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplars as one of its own.","msgtype":"m.text"},"m.relates_to":{"event_id":"$515_z1tSgS935DJcsmWclJ6vHtH6UK72txO_AMpqVQQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172983400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E5IgTu_vuU-PnoArLzAgWmxn1TtjKykOV3Fqb69BBe4"},
{"content":{"body":"Right I think an agent based registry can only work if:\n- the internal agent wide registry is an association from type to local behavior definition\n- there is a unique connection registry between 2 agents, and preparing a connection registry mapping (as creator or as a worker setting up), associates a connection specific string to a locally defined type only\n- you can only populate the agent wide registry through connection registries.\n\nthat means a worker A connected to a worker B through M but not sharing the same connection registry will not be able share behavior throughout. I'm still wondering about the special parent - child relationship these connection based registries seem to have, and how you can only have one connection registry between 2 agents or things fall apart. I can't explain why exactly right now, but this all feels awkward.","format":"org.matrix.custom.html","formatted_body":"<p>Right I think an agent based registry can only work if:</p>\n<ul>\n<li>the internal agent wide registry is an association from type to local behavior definition</li>\n<li>there is a unique connection registry between 2 agents, and preparing a connection registry mapping (as creator or as a worker setting up), associates a connection specific string to a locally defined type only</li>\n<li>you can only populate the agent wide registry through connection registries.</li>\n</ul>\n<p>that means a worker A connected to a worker B through M but not sharing the same connection registry will not be able share behavior throughout. I'm still wondering about the special parent - child relationship these connection based registries seem to have, and how you can only have one connection registry between 2 agents or things fall apart. I can't explain why exactly right now, but this all feels awkward.</p>\n","msgtype":"m.text"},"ts":1695179131028,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$th-UFWSdXkegxitZUoKzHWwt1lg72y0hqYbgRKXqY_s"},
{"content":{"body":"I'm wondering if we even need a connection-based registry if we can devise a global registry strategy that addresses Agoric's concerns about security. You'd discussed how a mutable global registry is a possible side channel for data exfiltration? I'm curious how serious the concern is and if you have a link to a paper or something else that could provide additional context? Is the concern related to how a Worker could abuse such a global registry, or how a script or module in the same Agent could abuse such a registry?","msgtype":"m.text"},"ts":1695213493361,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ob1ulvj0elSC9trzwwPF2OFw4W1yJNPed4rqXh7Vv6A"},
{"content":{"body":"> <@shuyuguo:matrix.org> the two choices are:\n> \n> 1. a shared struct instance's [[Prototype]] is a shared field and holds a shared struct, with `nonshared` fields, into which you assign methods\n> 2. a shared struct instance's [[Prototype]] is a `nonshared` field and points to a per-agent local struct\n\nrbuckton: after chatting with some other V8 engineers i'm coming back to the idea that perhaps (2) is better","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HTj3amOy9ic6346qUM25tQy0JsCrTg3J9KwgjiRxuIo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><p>the two choices are:</p>\n<ol>\n<li>a shared struct instance's [[Prototype]] is a shared field and holds a shared struct, with <code>nonshared</code> fields, into which you assign methods</li>\n<li>a shared struct instance's [[Prototype]] is a <code>nonshared</code> field and points to a per-agent local struct</li>\n</ol>\n</blockquote></mx-reply><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: after chatting with some other V8 engineers i'm coming back to the idea that perhaps (2) is better","m.relates_to":{"m.in_reply_to":{"event_id":"$HTj3amOy9ic6346qUM25tQy0JsCrTg3J9KwgjiRxuIo"}},"msgtype":"m.text"},"ts":1695227563898,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fEo6I5ZgqR5gDOyP8Gp1RoklPWuxkiXQTa-h7YvNdmg"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm wondering if we even need a connection-based registry if we can devise a global registry strategy that addresses Agoric's concerns about security. You'd discussed how a mutable global registry is a possible side channel for data exfiltration? I'm curious how serious the concern is and if you have a link to a paper or something else that could provide additional context? Is the concern related to how a Worker could abuse such a global registry, or how a script or module in the same Agent could abuse such a registry?\n\nThe concern has usually manifested itself in the form of Realm-wide or Agent-wide state, but it's conceivable that the same concern could manifest for Agent cluster-wide state. The problem is that such global mutable state allows 2 parties that do not share any references besides the primordials objects to communicate. In JavaScript today, you can freeze all the intrinsics, and it's not possible for 2 pieces of code to communicate unless they're explicitly provided a reference to each other, or to a shared mutable object.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Ob1ulvj0elSC9trzwwPF2OFw4W1yJNPed4rqXh7Vv6A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I&#39;m wondering if we even need a connection-based registry if we can devise a global registry strategy that addresses Agoric&#39;s concerns about security. You&#39;d discussed how a mutable global registry is a possible side channel for data exfiltration? I&#39;m curious how serious the concern is and if you have a link to a paper or something else that could provide additional context? Is the concern related to how a Worker could abuse such a global registry, or how a script or module in the same Agent could abuse such a registry?</blockquote></mx-reply>The concern has usually manifested itself in the form of Realm-wide or Agent-wide state, but it's conceivable that the same concern could manifest for Agent cluster-wide state. The problem is that such global mutable state allows 2 parties that do not share any references besides the primordials objects to communicate. In JavaScript today, you can freeze all the intrinsics, and it's not possible for 2 pieces of code to communicate unless they're explicitly provided a reference to each other, or to a shared mutable object.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ob1ulvj0elSC9trzwwPF2OFw4W1yJNPed4rqXh7Vv6A"}},"msgtype":"m.text"},"ts":1695228812186,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GmbkFyB0O4EvzGffL0gwcYX3s4sFohz7W3r--8w0hqs"},
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: after chatting with some other V8 engineers i'm coming back to the idea that perhaps (2) is better\n\nWould this affect subclassing or no? I imagine in a subclassing case, we would just collect all of the shared fields up front and put them on the instance, much like we do for private fields today, so I don't imagine it would.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$fEo6I5ZgqR5gDOyP8Gp1RoklPWuxkiXQTa-h7YvNdmg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: after chatting with some other V8 engineers i'm coming back to the idea that perhaps (2) is better</blockquote></mx-reply>Would this affect subclassing or no? I imagine in a subclassing case, we would just collect all of the shared fields up front and put them on the instance, much like we do for private fields today, so I don't imagine it would.","m.relates_to":{"m.in_reply_to":{"event_id":"$fEo6I5ZgqR5gDOyP8Gp1RoklPWuxkiXQTa-h7YvNdmg"}},"msgtype":"m.text"},"ts":1695228933136,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oGP9_EGgiMCWsGmV5D7nnN042KUfmuqStY4bVgmt99A"},
{"content":{"body":"rbuckton: that's not clear to me yet. one challenge here is how to express the thread-localness of a superclass","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: that's not clear to me yet. one challenge here is how to express the thread-localness of a superclass","msgtype":"m.text"},"ts":1695229051402,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gBTW4rJOaRMSLtNrB26Dm3b8LGNF_72fIL9-frTjPv4"},
{"content":{"body":"we want the fixed layout invariant to hold, so do you say like \"shared struct A extends per-agent B\", but what is B? it could be itself a shared struct but its layout gets copied into a thread-local version of the struct the first time [[Prototype]] is accessed in a thread","msgtype":"m.text"},"ts":1695229131232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EWAE9X_Kh84FHoUqFDOBXD-lxXCjTdLv43qikfoj4yI"},
{"content":{"body":"should it be a non-shared struct declaration?","msgtype":"m.text"},"ts":1695229139250,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DNKSASWQFW4fh9DfRbziynlMtwJFANyvExf01VtO9Lg"},
{"content":{"body":"(but it gets that layout copy behavior)","msgtype":"m.text"},"ts":1695229145060,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c4fyEeBfb2IIRc1nqDbDuyOh2CALwONp4VfNemgugAY"},
{"content":{"body":"> <@mhofman:matrix.org> The concern has usually manifested itself in the form of Realm-wide or Agent-wide state, but it's conceivable that the same concern could manifest for Agent cluster-wide state. The problem is that such global mutable state allows 2 parties that do not share any references besides the primordials objects to communicate. In JavaScript today, you can freeze all the intrinsics, and it's not possible for 2 pieces of code to communicate unless they're explicitly provided a reference to each other, or to a shared mutable object.\n\nDo you imagine such communication is possible in this case? ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$GmbkFyB0O4EvzGffL0gwcYX3s4sFohz7W3r--8w0hqs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>The concern has usually manifested itself in the form of Realm-wide or Agent-wide state, but it's conceivable that the same concern could manifest for Agent cluster-wide state. The problem is that such global mutable state allows 2 parties that do not share any references besides the primordials objects to communicate. In JavaScript today, you can freeze all the intrinsics, and it's not possible for 2 pieces of code to communicate unless they're explicitly provided a reference to each other, or to a shared mutable object.</blockquote></mx-reply>Do you imagine such communication is possible in this case?","m.relates_to":{"m.in_reply_to":{"event_id":"$GmbkFyB0O4EvzGffL0gwcYX3s4sFohz7W3r--8w0hqs"}},"msgtype":"m.text"},"ts":1695230817411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AOts5ehWSb6EKC8O2Tm19Mw46rA72de6q3vLYplv3Gw"},
{"content":{"body":"Lets assume you can't use the exemplar values themselves to communicate, i.e., the actual exemplars aren't exposed to user code on the other Agent.","msgtype":"m.text"},"ts":1695231010975,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dgDTfxJOScNcIaBNO4SgDPKqfzxXJ0y7DxrIg34wNec"},
{"content":{"body":"The child thread can't send or receive structs to the parent thread during handshake, and by the time handshake has completed all correlation between the parent and child is frozen.","msgtype":"m.text"},"ts":1695231136501,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I_6BHT_vT5jTgWqTs3P7XZflCP4oj_EJNKEsI440LVk"},
{"content":{"body":"By the time A can observe a struct from B, the correlation between M, A, and B has already occurred and is frozen. You cannot dynamically attach new behavior, but we do lazily resolve the prototype based on correlation.","msgtype":"m.text"},"ts":1695231284868,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HAGHepkhQd0b5xvg12Ha_-6MpdRwMxg6z0Ffyg8EKP0"},
{"content":{"body":"Maybe there's a small possibility of a timing related exploit if I can somehow spin up multiple additional workers on M and send an existing corelated struct to A to indicate `0` and new correlated struct to A indicating `1` and somehow measure the timing? That might be mitigated if correlation happens before normal communication can occur and prototype lookup always follows the same path, but you could potentially use structs who have narrow and wide correlation sets and measure timing that way, or update an agent-local correlation registry when two agent's communicate for the first time so that you pay that cost once. ","format":"org.matrix.custom.html","formatted_body":"Maybe there's a small possibility of a timing related exploit if I can somehow spin up multiple additional workers on M and send an existing corelated struct to A to indicate <code>0</code> and new correlated struct to A indicating <code>1</code> and somehow measure the timing? That might be mitigated if correlation happens before normal communication can occur and prototype lookup always follows the same path, but you could potentially use structs who have narrow and wide correlation sets and measure timing that way, or update an agent-local correlation registry when two agent's communicate for the first time so that you pay that cost once.","msgtype":"m.text"},"ts":1695231622205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CL-qRnjV_AMaBii8egzgkEHyp0H83dS7ZTgV389QDNA"},
{"content":{"body":"There are possibly other ways to mitigate that as well.","msgtype":"m.text"},"ts":1695231790393,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$J8k1yxrsI5gJ73S8b09y-_TFSH5QbzblsWlvqKzL6G4"},
{"content":{"body":"Within a single Agent, when worker's aren't involved, you wouldn't be able to use this registry for communication because it would be inaccessible. You can also use CSP to lock down Worker to specific scripts, or disable it entirely.","msgtype":"m.text"},"ts":1695231987824,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$o9Ib1hxb3oy-L2ywjhuZV8jYX2S_a6YiiV8q56kC1ck"},
{"content":{"body":"If `Worker` is locked down via CSP, the only way you could leverage these for a timing attack would to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","format":"org.matrix.custom.html","formatted_body":"If <code>Worker</code> is locked down via CSP, the only way you could leverage these for a timing attack would to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","msgtype":"m.text"},"ts":1695232161856,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nkh_7Bxuw7HNNSkotDK-PvxoiTUqgaz1lul-QjFG5ZA"},
{"content":{"body":" * If `Worker` is locked down via CSP, the only way you could leverage these for a timing attack would be to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","format":"org.matrix.custom.html","formatted_body":" * If <code>Worker</code> is locked down via CSP, the only way you could leverage these for a timing attack would be to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","m.new_content":{"body":"If `Worker` is locked down via CSP, the only way you could leverage these for a timing attack would be to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","format":"org.matrix.custom.html","formatted_body":"If <code>Worker</code> is locked down via CSP, the only way you could leverage these for a timing attack would be to be handed a reference to a shared struct, which I would argue qualifies for being provided a reference to a shared mutable object.","msgtype":"m.text"},"m.relates_to":{"event_id":"$nkh_7Bxuw7HNNSkotDK-PvxoiTUqgaz1lul-QjFG5ZA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695232526727,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LERntAEnEENQm-NhWNIyHyIeUhl0sonA1MHXhK3-UVA"},
{"content":{"body":"If you have two isolated pieces of code in the same Agent that both have access to an unrestricted `Worker`, its possible they could already communicate with each other via resource starvation and timing attacks. ","format":"org.matrix.custom.html","formatted_body":"If you have two isolated pieces of code in the same Agent that both have access to an unrestricted <code>Worker</code>, its possible they could already communicate with each other via resource starvation and timing attacks.","msgtype":"m.text"},"ts":1695232839908,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M61_ZMA_d2kuJU_NWpfBbk24-1JbF847whPtOA7CLcc"},
{"content":{"body":"For same realm/agent, if the registry is string keyed, Alice can register \"foo\". If Bob can somehow figure out that \"foo\" is already registered, this is a one bit communication channel. There are likely multiple ways Bob could sense whether \"foo\" is registered.","msgtype":"m.text"},"ts":1695236812909,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$X4plMHlNsLYatXoHv2DlB1twMWueZpJID3XjwXhwNJE"},
{"content":{"body":"With the global registry concept, all registration within a single Agent would happen via `new SharedStructType` (or via `shared struct Foo {}`). No errors would be reported except for running out of heap space (and crashing). When setting up a `Worker`, there is a correlation step to correlate the registrations within both Agents, but this only occurs at the time of the Worker handshake and should only be observable by interacting with that Worker or a shared struct provided to the worker.","format":"org.matrix.custom.html","formatted_body":"With the global registry concept, all registration within a single Agent would happen via <code>new SharedStructType</code> (or via <code>shared struct Foo {}</code>). No errors would be reported except for running out of heap space (and crashing). When setting up a <code>Worker</code>, there is a correlation step to correlate the registrations within both Agents, but this only occurs at the time of the Worker handshake and should only be observable by interacting with that Worker or a shared struct provided to the worker.","msgtype":"m.text"},"ts":1695237653936,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZPCiUAEx1EdYnJ6a_BYDZqTfbp68F6P_5sxahdDPTc"},
{"content":{"body":"As far as I can tell, there's no way to observe that within a single Agent/realm. You can't check if something is \"registered\" because all \"registration\" happens before the thing you would test exists.","msgtype":"m.text"},"ts":1695237758122,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ORPVJmRDAaUMTDn1GyvYZahqGIDV4nUA8wa3zgt8nxY"},
{"content":{"body":"The only way to observe correlation would be to use a Worker and a shared reference, which still only observes correlation between those two Agents.","msgtype":"m.text"},"ts":1695237840255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$W0BIfIVIeOPx-FO5rnw_QxasoB6ZvmDS0I8nKmUfjiQ"},
{"content":{"body":"There should be no way to get at the registry itself, and the only way to establish correlation is to already have a reference to the shared struct type. ","msgtype":"m.text"},"ts":1695237918716,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XWL1b_DUGxmdqMWL9ZM1FeJIkPurZdbBNLupq7m0DSU"},
{"content":{"body":"You could observe whether A and B share correlation with M, but only if you already have access to shared data from A and B","msgtype":"m.text"},"ts":1695237962406,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TfI_vbMMipI7KafMX6leEOFvDHpbHIu4Zl_nyCD3Brw"},
{"content":{"body":"There would be no error upon registration, because there is no addressable identity to forge, nor a way to forge it. Every shared struct type would have its own type identity, defined at the time of creation.","msgtype":"m.text"},"ts":1695238060153,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Gjy_Omo12RhCtl9dVs_vhMyo0Y4KGCP619yKcyHVBWY"},
{"content":{"body":"I think it depends on how the global registry works, how it handles collisions? Any mechanism that uses a forgeable value as key is likely observable, whether it errors, or first / last win. In the latter case, as you mention starting a worker and asking it to send you that type, and seeing what behavior you get, yours or the other one registered in the same realm. I really cannot imagine any way where a registry with forgeable keys can be made unobservable.\nYou do mention \"no way to get at the registry itself\", which instead sounds like design we were talking about yesterday, not an agent wide string keyed registry, but instead a connection based string-keyed mapper. I agree that it may be possible to make that work, but I think it requires the \"correlation registry\" between 2 agents to be unique and immutable after start.","msgtype":"m.text"},"ts":1695239779091,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KR2trNZom5w5_s5ks32T0zhi3gH2bi-bQ7aQkft7hms"},
{"content":{"body":"rbuckton: actually how _do_ you think we can syntactically express the shape of a shared struct's prototype, if that prototype is to be fixed layout but per-thread?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: actually how <em>do</em> you think we can syntactically express the shape of a shared struct's prototype, if that prototype is to be fixed layout but per-thread?","msgtype":"m.text"},"ts":1695239853255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4kgEp1IKqayDRYOCi8mrqbZ0GC2vjS0MSyr7xh5mTuY"},
{"content":{"body":"there's not a good precedent to fall back on in `class` syntax","format":"org.matrix.custom.html","formatted_body":"there's not a good precedent to fall back on in <code>class</code> syntax","msgtype":"m.text"},"ts":1695239866088,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$paCYoMERy5TRvG45XOx1s1SaWlo303qm4r73Zm58y4c"},
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: actually how _do_ you think we can syntactically express the shape of a shared struct's prototype, if that prototype is to be fixed layout but per-thread?\n\nHow important is it that the prototype be fixed shape, especially if we're not actually sharing the prototype around anywhere?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$4kgEp1IKqayDRYOCi8mrqbZ0GC2vjS0MSyr7xh5mTuY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: actually how <em>do</em> you think we can syntactically express the shape of a shared struct's prototype, if that prototype is to be fixed layout but per-thread?</blockquote></mx-reply>How important is it that the prototype be fixed shape, especially if we're not actually sharing the prototype around anywhere?","m.relates_to":{"m.in_reply_to":{"event_id":"$4kgEp1IKqayDRYOCi8mrqbZ0GC2vjS0MSyr7xh5mTuY"}},"msgtype":"m.text"},"ts":1695240065463,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L_Ox0eZzF2XTLamRiQ5uMFiQUbdCtkgx4krwZpop6Ng"},
{"content":{"body":"it's not _as_ important but i feel it is still important","format":"org.matrix.custom.html","formatted_body":"it's not <em>as</em> important but i feel it is still important","msgtype":"m.text"},"ts":1695240096883,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wCboWteiN8kEvC34SU2KSDR-hMCY1-7-7676kp5gtjM"},
{"content":{"body":"part of my mental model of structs (shared or not) over ordinary objects is \"the shape doesn't change\", and that transitively applies via the prototype chain","msgtype":"m.text"},"ts":1695240182404,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RsKmJhRdM368stwF-95kqIgso3dnf34ub0J2q7uwN2M"},
{"content":{"body":"> <@mhofman:matrix.org> I think it depends on how the global registry works, how it handles collisions? Any mechanism that uses a forgeable value as key is likely observable, whether it errors, or first / last win. In the latter case, as you mention starting a worker and asking it to send you that type, and seeing what behavior you get, yours or the other one registered in the same realm. I really cannot imagine any way where a registry with forgeable keys can be made unobservable.\n> You do mention \"no way to get at the registry itself\", which instead sounds like design we were talking about yesterday, not an agent wide string keyed registry, but instead a connection based string-keyed mapper. I agree that it may be possible to make that work, but I think it requires the \"correlation registry\" between 2 agents to be unique and immutable after start.\n\nWhat collisions? What is forgeable? The only thing user-provided is the correlation token used to explain what prototype to choose for a foreign struct within an Agent, and that only affects that Agent's view of the struct, not any other agent.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$KR2trNZom5w5_s5ks32T0zhi3gH2bi-bQ7aQkft7hms?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I think it depends on how the global registry works, how it handles collisions? Any mechanism that uses a forgeable value as key is likely observable, whether it errors, or first / last win. In the latter case, as you mention starting a worker and asking it to send you that type, and seeing what behavior you get, yours or the other one registered in the same realm. I really cannot imagine any way where a registry with forgeable keys can be made unobservable.<br/>You do mention &quot;no way to get at the registry itself&quot;, which instead sounds like design we were talking about yesterday, not an agent wide string keyed registry, but instead a connection based string-keyed mapper. I agree that it may be possible to make that work, but I think it requires the &quot;correlation registry&quot; between 2 agents to be unique and immutable after start.</blockquote></mx-reply>What collisions? What is forgeable? The only thing user-provided is the correlation token used to explain what prototype to choose for a foreign struct within an Agent, and that only affects that Agent's view of the struct, not any other agent.","m.relates_to":{"m.in_reply_to":{"event_id":"$KR2trNZom5w5_s5ks32T0zhi3gH2bi-bQ7aQkft7hms"}},"msgtype":"m.text"},"ts":1695240193963,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_zouxl7D2WphEqfXD6sZgcsOxEAXJKi7UCerZuh-Sug"},
{"content":{"body":"> <@shuyuguo:matrix.org> part of my mental model of structs (shared or not) over ordinary objects is \"the shape doesn't change\", and that transitively applies via the prototype chain\n\nWay back when I'd thought to have structs act as value objects, my intuition was that the prototype would be looked up during ToObject just like we do for `Number`, `String`, etc. so it had no bearing on the shape of struct's runtime representation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$RsKmJhRdM368stwF-95kqIgso3dnf34ub0J2q7uwN2M?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>part of my mental model of structs (shared or not) over ordinary objects is &quot;the shape doesn&#39;t change&quot;, and that transitively applies via the prototype chain</blockquote></mx-reply>Way back when I'd thought to have structs act as value objects, my intuition was that the prototype would be looked up during ToObject just like we do for <code>Number</code>, <code>String</code>, etc. so it had no bearing on the shape of struct's runtime representation.","m.relates_to":{"m.in_reply_to":{"event_id":"$RsKmJhRdM368stwF-95kqIgso3dnf34ub0J2q7uwN2M"}},"msgtype":"m.text"},"ts":1695240269313,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cLDxrSRwertgIGrhFVpS2IdN7t9cbh6NM0xXdXF4Yts"},
{"content":{"body":"yes, that is a competing model","msgtype":"m.text"},"ts":1695240295883,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XE7iiwhpBSF3DRjs4bWV_hlh_elvZ807v5A8FW-xBCA"},
{"content":{"body":"That's not the case now, but I still don't find see the necessity for a fixed shape for the prototype.","msgtype":"m.text"},"ts":1695240311552,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JunI-q2YQ-zV35b_6LcHPTqR0_aNhT0wLdBUJSzBbqA"},
{"content":{"body":"and i am open to be convinced of that competing model","msgtype":"m.text"},"ts":1695240322482,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gzAn1OMdCcZYk0ofS-oqvF1DwpT_4yAbL2m1ysTBldw"},
{"content":{"body":"it has some attractive properties, like, the dynamism feels more at home with the rest of the language","msgtype":"m.text"},"ts":1695240340764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$i2tXNKyC8sZ2Tst5rSPzhWJg2jvPmgi5euh7vQAXxQ4"},
{"content":{"body":"it has an exact parallel to primitive prototype wrapping, as you've pointed out","msgtype":"m.text"},"ts":1695240349063,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lQnA5AoWCuNxDHqx7J1TKdBAt5EitIxLpWcXhbcoahg"},
{"content":{"body":"The caveat is that it doesn't translate well to multiple realms in the same Agent","msgtype":"m.text"},"ts":1695240370852,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$i8AmER-Dy_GhqHzQbq1f0iT3GdsLxtMt99OiJrKeRg4"},
{"content":{"body":"Unless you need to somehow define behavior independently per realm.","msgtype":"m.text"},"ts":1695240394116,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Cf0CG-xq-YyibLyASTaLC49ESCBwl1rBjIlF2afHP_M"},
{"content":{"body":"Which would be another spanner to throw into the behavior assignment discussion :)","msgtype":"m.text"},"ts":1695240428224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$h-vwKW6yzpA0FvNL_561HFhSK6mJ-6yBxDddL58Ojhc"},
{"content":{"body":"the downside to the primitive-like wrapping model is i had harbored some hopes \"fixed layout\" would translate to \"easy\" static analyzability of static property access on struct instances","msgtype":"m.text"},"ts":1695240457748,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RfXDkh_qTihvRXsrbzMJGozZE3HUjpuEGMHZBOGfVo0"},
{"content":{"body":"but if for knowing the location `s.p` requires giving up if `p` is from the prototype, that's too bad","format":"org.matrix.custom.html","formatted_body":"but if for knowing the location <code>s.p</code> requires giving up if <code>p</code> is from the prototype, that's too bad","msgtype":"m.text"},"ts":1695240486670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lqFdc_rYEnqRtzBidcg5uAYYijOyC0lCbsPSpXg7aPU"},
{"content":{"body":"it's not the end of the world or anything","msgtype":"m.text"},"ts":1695240491194,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5oYN06zAJMYj5ttey9yHVFpi9q6e6QwOZFH5gs7FBx4"},
{"content":{"body":"> <@rbuckton:matrix.org> The caveat is that it doesn't translate well to multiple realms in the same Agent\n\neh, i don't think it's a big stretch to choose per-realm instead of per-agent. in the p95 case i imagine apps have 1 realm per agent","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$i8AmER-Dy_GhqHzQbq1f0iT3GdsLxtMt99OiJrKeRg4?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The caveat is that it doesn&#39;t translate well to multiple realms in the same Agent</blockquote></mx-reply>eh, i don't think it's a big stretch to choose per-realm instead of per-agent. in the p95 case i imagine apps have 1 realm per agent","m.relates_to":{"m.in_reply_to":{"event_id":"$i8AmER-Dy_GhqHzQbq1f0iT3GdsLxtMt99OiJrKeRg4"}},"msgtype":"m.text"},"ts":1695240551360,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$szpeL4yXfG-XVBxHonskSYmGBgWB7jipGPspU2On8AE"},
{"content":{"body":"i'm pretty neutral on whether to choose per-realm or per-agent. agent is not a notion we expose right now, but realms are, so that's more natural","msgtype":"m.text"},"ts":1695240587518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g6cBSWBw01aNo34nbQl7MPIBOAMxZZ1sJwOmoZnETrE"}
]