[
{"content":{"body":"- When A handshakes with M:\n  - M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.\n  - A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.\n- When B handshakes with M:\n  - M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.\n  - B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.\n\nAs such:\n- M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.\n- B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.\n- A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>When A handshakes with M:\n<ul>\n<li>M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.</li>\n<li>A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.</li>\n</ul>\n</li>\n<li>When B handshakes with M:\n<ul>\n<li>M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.</li>\n<li>B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.</li>\n</ul>\n</li>\n</ul>\n<p>As such:</p>\n<ul>\n<li>M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.</li>\n<li>B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.</li>\n<li>A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171668855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HS0y6CUJFfulqtRL9L2OcgfY5tSBNGHpCYZly957_qU"},
{"content":{"body":"However, if you use the same registry RAB with A and B:\n- B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.\n- A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.","format":"org.matrix.custom.html","formatted_body":"<p>However, if you use the same registry RAB with A and B:</p>\n<ul>\n<li>B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.</li>\n<li>A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171791500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iH_SKy4Db-c6Ut52lbeCmsrHPr7BVP8495tzMzfkSGQ"},
{"content":{"body":"If such a prototype is initialized lazily in `[[GetPrototypeOf]]`, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","format":"org.matrix.custom.html","formatted_body":"If such a prototype is initialized lazily in <code>[[GetPrototypeOf]]</code>, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","msgtype":"m.text"},"ts":1695171989576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9sHMvYsrX12hKrMZ4eVUjV1c-sfRweFv64o1smhunsg"}
]