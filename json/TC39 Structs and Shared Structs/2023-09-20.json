[
{"content":{"body":"- When A handshakes with M:\n  - M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.\n  - A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.\n- When B handshakes with M:\n  - M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.\n  - B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.\n\nAs such:\n- M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.\n- B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.\n- A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>When A handshakes with M:\n<ul>\n<li>M is able to establish that a PointA should have a PointM prototype and it will apply to every PointA it receives, from anywhere, within the scope of M's Agent.</li>\n<li>A is able to establish that a PointM should have a PointA prototype and it will apply to every PointM it receives, from anywhere, within the scope of A's Agent.</li>\n</ul>\n</li>\n<li>When B handshakes with M:\n<ul>\n<li>M is able to establish that a PointB should have a PointM prototype and it will apply to every PointB it receives, from anywhere, within the scope of M's Agent.</li>\n<li>B is able to establish that a PointM should have a PointB prototype and it will apply to every PointM it receives, from anywhere, within the scope of B's Agent.</li>\n</ul>\n</li>\n</ul>\n<p>As such:</p>\n<ul>\n<li>M will be able to find behavior for both rect1.topLeft and rect1.topRight, because the handshake between M-A and M-B established that.</li>\n<li>B will not be able to find a behavior for rect1.topLeft because registries RA and RB are independent.</li>\n<li>A will not be able to find a behavior for rect1.bottomRight because registries RA and RB are independent.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171668855,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HS0y6CUJFfulqtRL9L2OcgfY5tSBNGHpCYZly957_qU"},
{"content":{"body":"However, if you use the same registry RAB with A and B:\n- B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.\n- A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.","format":"org.matrix.custom.html","formatted_body":"<p>However, if you use the same registry RAB with A and B:</p>\n<ul>\n<li>B is able to establish that a PointA should have a PointB prototype because the registry correlates both PointA and PointB with PointM.</li>\n<li>A is able to establish that a PointB should have a PointA prototype because the registry correlates both PointA and PointB with PointM.</li>\n</ul>\n","msgtype":"m.text"},"ts":1695171791500,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iH_SKy4Db-c6Ut52lbeCmsrHPr7BVP8495tzMzfkSGQ"},
{"content":{"body":"If such a prototype is initialized lazily in `[[GetPrototypeOf]]`, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","format":"org.matrix.custom.html","formatted_body":"If such a prototype is initialized lazily in <code>[[GetPrototypeOf]]</code>, by the time B can receive a PointA, or that A can receive a PointB, both agents will have completed their handshake with M, so all information is known. This is another reason why my proposal uses a preload script. The preload script performs the worker side of the handshake before any other data can be shared between the worker and M, so you cannot have a stray PointA sent to B, or PointB sent to A, prior to a completed handshake on both sides.","msgtype":"m.text"},"ts":1695171989576,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9sHMvYsrX12hKrMZ4eVUjV1c-sfRweFv64o1smhunsg"},
{"content":{"body":"Now, we could theoretically have a global registry instead, with the `structs: {}` map only used to correlate PointM and PointA when A is established. Workers will always be part of a tree that points back to some root agent, so there's always a way to collect these things. If the handshake establishes the relationship without the ability to pass messages, would that be sufficient to address concerns about a global registry?","format":"org.matrix.custom.html","formatted_body":"Now, we could theoretically have a global registry instead, with the <code>structs: {}</code> map only used to correlate PointM and PointA when A is established. Workers will always be part of a tree that points back to some root agent, so there's always a way to collect these things. If the handshake establishes the relationship without the ability to pass messages, would that be sufficient to address concerns about a global registry?","msgtype":"m.text"},"ts":1695172399398,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Yb14-RUWWWm1TRT-STKWnZpMPIGXe1Z_ydukyqaDLUw"},
{"content":{"body":"Especially if the worker can't actually observe the exemplar during handshake, since the handshake process is handled by the runtime. We wouldn't even need communicate the actual exemplars through the handshake process, just the type identities of the exemplars. ","msgtype":"m.text"},"ts":1695172612891,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bxx9bKqbyxmNNaRcX6sZwD2o9nYv8E1i5BBstOb37d4"},
{"content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars you send during the handshake must have been created by a type created in M's Agent.","msgtype":"m.text"},"ts":1695172875759,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg"},
{"content":{"body":" * Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent.","m.new_content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent.","msgtype":"m.text"},"m.relates_to":{"event_id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172893339,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m0IQQ3IpFh4Muo0ZQSdb-Ave7xmIU-4MDmRlse2Z8r8"},
{"content":{"body":" * Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent","m.new_content":{"body":"Though there is the caveat that M could try to pass off a PointA as an exemplar to B's Rect, but we could probably just make that an error, i.e. the exemplars M sends during the handshake must have been created by a type created in M's Agent","msgtype":"m.text"},"m.relates_to":{"event_id":"$xWuIFCyWb_mVwftQlKv4jkzhApT04mLu7S3B3anBEJg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172907742,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-gtvAasjyry0aOJR7CEpgzcN9yiXpwz8um_s3r3Tk4I"},
{"content":{"body":"and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplar as one of its own.","msgtype":"m.text"},"ts":1695172974815,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$515_z1tSgS935DJcsmWclJ6vHtH6UK72txO_AMpqVQQ"},
{"content":{"body":" * and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplars as one of its own.","m.new_content":{"body":"and the same thing goes for A (or B) spinning up a Worker (A2) during handshake and passing off one A2's exemplars as one of its own.","msgtype":"m.text"},"m.relates_to":{"event_id":"$515_z1tSgS935DJcsmWclJ6vHtH6UK72txO_AMpqVQQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695172983400,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E5IgTu_vuU-PnoArLzAgWmxn1TtjKykOV3Fqb69BBe4"}
]