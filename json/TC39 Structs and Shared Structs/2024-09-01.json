[
{"content":{"body":"> <@littledan:matrix.org> Didn't V8 also initially consider banning shared to local edges? Do we know more about what led V8 to change their minds?\n\nthere are two things you get out of banning *all* shared->local edges:\n\n1. language-level correctness/safety\n2. independent GCs of separate threads","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$BTdZTunGbq7doZkrQLY0N1OjbAX5k-Rwi0oImircdv0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Didn&#39;t V8 also initially consider banning shared to local edges? Do we know more about what led V8 to change their minds?</blockquote></mx-reply><p>there are two things you get out of banning <em>all</em> shared-&gt;local edges:</p>\n<ol>\n<li>language-level correctness/safety</li>\n<li>independent GCs of separate threads</li>\n</ol>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BTdZTunGbq7doZkrQLY0N1OjbAX5k-Rwi0oImircdv0"}},"msgtype":"m.text"},"ts":1725231584179,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$S2J7Ek0p1eH2wg7AJDuJyxto-H_PORwuBrSYuLOUK_g"},
{"content":{"body":"as we experimented more, we realized that 2) wasn't possible. as part of the shared WasmGC proposal, it's very clear from the partner feedback that we can't get away with banning *all* shared->local edges. Flutter, among a bunch of other Google partners, have been clear that they need either thread-bound (i.e. a shared struct can hold a reference to some unshared thing, but it is an error to access that reference from another thread), or thread-local data","format":"org.matrix.custom.html","formatted_body":"as we experimented more, we realized that 2) wasn't possible. as part of the shared WasmGC proposal, it's very clear from the partner feedback that we can't get away with banning <em>all</em> shared-&gt;local edges. Flutter, among a bunch of other Google partners, have been clear that they need either thread-bound (i.e. a shared struct can hold a reference to some unshared thing, but it is an error to access that reference from another thread), or thread-local data","m.mentions":{},"msgtype":"m.text"},"ts":1725231750693,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rBXAS77zpDZ0nSh17UcZWeff_vizWtllDiKb2U8ApZw"},
{"content":{"body":"implementing support for thread-bound or thread-local data in almost all cases, boil down to the same work required in the GC as implementing support for shared things as keys in WeakMaps","m.mentions":{},"msgtype":"m.text"},"ts":1725231788524,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r_kEB5vDg3zD6ls0YhCVT7tFRqneyS3Bg8yIH6eHoac"},
{"content":{"body":"the WeakMap itself isn't shared and is local to a particular thread, so you still have the correctness property (1) above. but it asks extra complexity of the GC because you now have a local things whose liveness depends on a shared thing","m.mentions":{},"msgtype":"m.text"},"ts":1725231833571,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fkfyNwJEa2gc5z7s4-Y1nTqbjeT5azYzCLF3HNNIrxk"},
{"content":{"body":"the bulk of this discussion has been happening on the Wasm side","m.mentions":{},"msgtype":"m.text"},"ts":1725231865721,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$44GO0PAg3FjsGzOwEnLLCczvL3KqmrZoeQC4IE1-C_8"},
{"content":{"body":"the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -> T2 -> T1, nobody's GC is set up to detect and collect that without significant work.\n\nthe main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak *everything*. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done","format":"org.matrix.custom.html","formatted_body":"<p>the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -&gt; T2 -&gt; T1, nobody's GC is set up to detect and collect that without significant work.</p>\n<p>the main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak <em>everything</em>. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1725232067267,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q_PAg7HzNyvHFuaACwWIACTuU7m_c3h1RG_K2-3VDjk"},
{"content":{"body":"there is also another counteproposal which is to push manual memory management to the user: some kind of `dispose()` or `drop()` or whatever to manually break cycles","format":"org.matrix.custom.html","formatted_body":"there is also another counteproposal which is to push manual memory management to the user: some kind of <code>dispose()</code> or <code>drop()</code> or whatever to manually break cycles","m.mentions":{},"msgtype":"m.text"},"ts":1725232102731,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LPPQ7Jlbt9NJN8Y8QvXaecHCo49JoJUA33W5EBVM28g"},
{"content":{"body":" * the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -> T2 -> T1, nobody's GC is set up to detect and collect that without significant work.\n\nthe main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak _everything_. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done. acyclic entries can be collected without additional work","format":"org.matrix.custom.html","formatted_body":" * <p>the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -&gt; T2 -&gt; T1, nobody's GC is set up to detect and collect that without significant work.</p>\n<p>the main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak <em>everything</em>. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done. acyclic entries can be collected without additional work</p>\n","m.mentions":{},"m.new_content":{"body":"the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -> T2 -> T1, nobody's GC is set up to detect and collect that without significant work.\n\nthe main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak _everything_. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done. acyclic entries can be collected without additional work","format":"org.matrix.custom.html","formatted_body":"<p>the high-level recap for folks here is that the difficulty in the GC is in collecting cycles that span multiple threads. if you have a reference cycle T1 -&gt; T2 -&gt; T1, nobody's GC is set up to detect and collect that without significant work.</p>\n<p>the main counterproposal is to say, don't support shared structs as WeakMap keys. instead let the toolchains and compilers figure it out. my counterargument to that counterproposal is, that means toolchains will use strong Maps, which means in practice applications will leak <em>everything</em>. that seems strictly worse to me than supporting shared structs as WeakMap keys, but leak the cycles in the meantime until the GC work can be done. acyclic entries can be collected without additional work</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$q_PAg7HzNyvHFuaACwWIACTuU7m_c3h1RG_K2-3VDjk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1725232134933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VglhVZR-C032I8gus-3FweQXW0uxerDS9zDT43o76yA"},
{"content":{"body":"i gave a presentation of this like a year ago in TC39","m.mentions":{},"msgtype":"m.text"},"ts":1725232198166,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3YV0If6nnZ0TPHJJLmY1G5rD9NRVCo0_1uRXF074XD4"},
{"content":{"body":"but i don't think people were paying attention","m.mentions":{},"msgtype":"m.text"},"ts":1725232202262,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YMK8YZTrteXUX6haPGl-XFMyPZs1xigSXwy4u7Dj50w"},
{"content":{"body":"the highest order bit here i think is, from the shared WasmGC side, WeakMap support is a hard requirement from our partners","m.mentions":{},"msgtype":"m.text"},"ts":1725232275788,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$37_2OKC_nEPzw3ZALKX_puiv51JvfghoIHQBeZwzduY"},
{"content":{"body":"debates about language feature compositionality and implementation difficulty are both downstream from that","m.mentions":{},"msgtype":"m.text"},"ts":1725232337828,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$pcK_xkw1RKR8wmNSjjZ5y4kkqw9NyjMFZtz5ba7zXWs"},
{"content":{"body":"that is, arguments against WeakMap support without an alternative that the partners can live with won't be compelling","m.mentions":{},"msgtype":"m.text"},"ts":1725232383424,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3JHyb49C698ZejbSVnD5qtTavl58NK8iug-hWtJT5YE"},
{"content":{"body":"> <@iain:mozilla.org> I am not convinced that it makes incremental adoption so much harder that it outweighs the benefit of being able to ship something sooner.\n\nit's not even incremental adoption, it's initial adoption","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$komyByZH_KEl_iX8gDbYZFYvF-Z-1fjo0qZ-10JckB8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@iain:mozilla.org\">@iain:mozilla.org</a><br>I am not convinced that it makes incremental adoption so much harder that it outweighs the benefit of being able to ship something sooner.</blockquote></mx-reply>it's not even incremental adoption, it's initial adoption","m.mentions":{"user_ids":["@iain:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$komyByZH_KEl_iX8gDbYZFYvF-Z-1fjo0qZ-10JckB8"}},"msgtype":"m.text"},"ts":1725232508232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zyJEsb6vkymRLh0UizfsEuTSIv_rWyasOhZoSvWWGpM"},
{"content":{"body":"perhaps incremental in the JS space, but \"initial\" when taking both JS+WasmGC into account given what i said above","m.mentions":{},"msgtype":"m.text"},"ts":1725232547349,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wSG28batgHGkkPusARMa7B2P9LbO93zLjailDQYNVlw"},
{"content":{"body":"i think that's why we were talking past each other about the shipping timeline","m.mentions":{},"msgtype":"m.text"},"ts":1725232681681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZV-wjQ6j5kdl1ag5cJL-LwvovrZIAMelhqBnHmM7R30"},
{"content":{"body":"if this is the thing that delays shipping, then... yeah, it's gonna have to, because the folks the V8 team have been talking to who're most interested in the feature need it even for the MVP","m.mentions":{},"msgtype":"m.text"},"ts":1725232722931,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XoOjIOGGUNu91cfyM0dzT9FT_5wjm65t7Dn1CvYn8pA"}
]