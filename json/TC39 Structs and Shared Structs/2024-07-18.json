[
{"content":{"body":"With shu out, depending on who is in attendance today I'd like to spend some time discussing correlation. I have a rough sketch of a very simple correlation mechanism I've put together here: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9, though I'd like to hear more about other approaches.","m.mentions":{},"msgtype":"m.text"},"ts":1721321633035,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Iru-qBHo9ANPuEd0hhVROeKfebipy4y2gZ8nWbAdrtU"},
{"content":{"body":"I'd also like to present my idea for re-using modules for correlation -- I have some drawings/images but unfortunately not something in written form","m.mentions":{},"msgtype":"m.text"},"ts":1721321850603,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sZ8CehahKZXyEZsyK21t78Vpp-T216NL8iPwe2C2WEU"},
{"content":{"body":"Meeting starting now, https://meet.google.com/kth-mssd-uqw","m.mentions":{},"msgtype":"m.text"},"ts":1721322133635,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1TzM6oglW8Q5lwoMxlAdL0m1Lf_rKNZK-V_Qc8k9w8M"},
{"content":{"body":"Since Shu is the host and is not present, I've created a new meet for this instance of the meeting: https://meet.google.com/iwo-weak-rfn","m.mentions":{},"msgtype":"m.text"},"ts":1721322335916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$brPbyC72wxPWYPhQSSiN-IAQ03PnCPH2amO82fpSTl4"},
{"content":{"body":"Gist about booststrapping a Worker: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62","m.mentions":{},"msgtype":"m.text"},"ts":1721325815241,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ryZh7bZvokRr25w19DtomPO57Sn3YMXHPOS1873_7x0"},
{"content":{"body":"The point of the `shared struct S \"identity-key\"` syntax is that the key is statically known, which makes it unforgeable dynamically (outside of an evaluator). I mentioned CSP as it offers a way to set limits on dynamic evaluation, but we could also impose such limits without CSP by introducing opt-in mechanisms to enable correlation, just as I demonstrated with `new Worker(..., { correlate: true })`. We could, for example, forbid user-defined identities in `eval`/`new Function`/etc. by default and require some type of opt-in mechanism to enable it. While this is not as granular as, say, passing a capability token to each individual declaration, it does establish a trust boundary by requiring an explicit grant when running an evaluator.","format":"org.matrix.custom.html","formatted_body":"The point of the <code>shared struct S \"identity-key\"</code> syntax is that the key is statically known, which makes it unforgeable dynamically (outside of an evaluator). I mentioned CSP as it offers a way to set limits on dynamic evaluation, but we could also impose such limits without CSP by introducing opt-in mechanisms to enable correlation, just as I demonstrated with <code>new Worker(..., { correlate: true })</code>. We could, for example, forbid user-defined identities in <code>eval</code>/<code>new Function</code>/etc. by default and require some type of opt-in mechanism to enable it. While this is not as granular as, say, passing a capability token to each individual declaration, it does establish a trust boundary by requiring an explicit grant when running an evaluator.","m.mentions":{},"msgtype":"m.text"},"ts":1721326553750,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ndw6kbc6KJAegJk2jxVdOhe0Ckeredg6cyXeNQXdzfI"},
{"content":{"body":"> We could, for example, forbid user-defined identities\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We could, for example, forbid user-defined identities<br>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721326608536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AgTzTkWNe5O4lkiHyCwGP-hsyGa4xMQTUpbYhS62rYw"},
{"content":{"body":" * > We could, for example, forbid user-defined identities\n\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>We could, for example, forbid user-defined identities</p>\n</blockquote>\n<p>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n","m.mentions":{},"m.new_content":{"body":"> We could, for example, forbid user-defined identities\n\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We could, for example, forbid user-defined identities</p>\n</blockquote>\n<p>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AgTzTkWNe5O4lkiHyCwGP-hsyGa4xMQTUpbYhS62rYw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721326613386,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IoV6AFrNNJrCX_FdniWGQRZW1sCU8tQ7vAgM8IQ4pGc"},
{"content":{"body":"In this model, rather than handing the capability to the `shared struct` declaration, you're handing the capability to the evaluator. If you need to execute or communicate with untrusted code, then you need to establish a trust boundary around it, and only grant the correlation capability to trusted code.","format":"org.matrix.custom.html","formatted_body":"In this model, rather than handing the capability to the <code>shared struct</code> declaration, you're handing the capability to the evaluator. If you need to execute or communicate with untrusted code, then you need to establish a trust boundary around it, and only grant the correlation capability to trusted code.","m.mentions":{},"msgtype":"m.text"},"ts":1721326756969,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dl5u2pJp6phtLDE_M4zEdaHYpNCaF8YyohESFt8bQVo"}
]