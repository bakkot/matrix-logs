[
{"content":{"body":"With shu out, depending on who is in attendance today I'd like to spend some time discussing correlation. I have a rough sketch of a very simple correlation mechanism I've put together here: https://gist.github.com/rbuckton/b00ca9660fb888486da07b22e38dd1e9, though I'd like to hear more about other approaches.","m.mentions":{},"msgtype":"m.text"},"ts":1721321633035,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Iru-qBHo9ANPuEd0hhVROeKfebipy4y2gZ8nWbAdrtU"},
{"content":{"body":"I'd also like to present my idea for re-using modules for correlation -- I have some drawings/images but unfortunately not something in written form","m.mentions":{},"msgtype":"m.text"},"ts":1721321850603,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$sZ8CehahKZXyEZsyK21t78Vpp-T216NL8iPwe2C2WEU"},
{"content":{"body":"Meeting starting now, https://meet.google.com/kth-mssd-uqw","m.mentions":{},"msgtype":"m.text"},"ts":1721322133635,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1TzM6oglW8Q5lwoMxlAdL0m1Lf_rKNZK-V_Qc8k9w8M"},
{"content":{"body":"Since Shu is the host and is not present, I've created a new meet for this instance of the meeting: https://meet.google.com/iwo-weak-rfn","m.mentions":{},"msgtype":"m.text"},"ts":1721322335916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$brPbyC72wxPWYPhQSSiN-IAQ03PnCPH2amO82fpSTl4"},
{"content":{"body":"Gist about booststrapping a Worker: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62","m.mentions":{},"msgtype":"m.text"},"ts":1721325815241,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ryZh7bZvokRr25w19DtomPO57Sn3YMXHPOS1873_7x0"},
{"content":{"body":"The point of the `shared struct S \"identity-key\"` syntax is that the key is statically known, which makes it unforgeable dynamically (outside of an evaluator). I mentioned CSP as it offers a way to set limits on dynamic evaluation, but we could also impose such limits without CSP by introducing opt-in mechanisms to enable correlation, just as I demonstrated with `new Worker(..., { correlate: true })`. We could, for example, forbid user-defined identities in `eval`/`new Function`/etc. by default and require some type of opt-in mechanism to enable it. While this is not as granular as, say, passing a capability token to each individual declaration, it does establish a trust boundary by requiring an explicit grant when running an evaluator.","format":"org.matrix.custom.html","formatted_body":"The point of the <code>shared struct S \"identity-key\"</code> syntax is that the key is statically known, which makes it unforgeable dynamically (outside of an evaluator). I mentioned CSP as it offers a way to set limits on dynamic evaluation, but we could also impose such limits without CSP by introducing opt-in mechanisms to enable correlation, just as I demonstrated with <code>new Worker(..., { correlate: true })</code>. We could, for example, forbid user-defined identities in <code>eval</code>/<code>new Function</code>/etc. by default and require some type of opt-in mechanism to enable it. While this is not as granular as, say, passing a capability token to each individual declaration, it does establish a trust boundary by requiring an explicit grant when running an evaluator.","m.mentions":{},"msgtype":"m.text"},"ts":1721326553750,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ndw6kbc6KJAegJk2jxVdOhe0Ckeredg6cyXeNQXdzfI"},
{"content":{"body":"> We could, for example, forbid user-defined identities\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We could, for example, forbid user-defined identities<br>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721326608536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AgTzTkWNe5O4lkiHyCwGP-hsyGa4xMQTUpbYhS62rYw"},
{"content":{"body":" * > We could, for example, forbid user-defined identities\n\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>We could, for example, forbid user-defined identities</p>\n</blockquote>\n<p>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n","m.mentions":{},"m.new_content":{"body":"> We could, for example, forbid user-defined identities\n\nOr rather than forbid, we just don't correlate between the outside world and the evaluator.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>We could, for example, forbid user-defined identities</p>\n</blockquote>\n<p>Or rather than forbid, we just don't correlate between the outside world and the evaluator.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AgTzTkWNe5O4lkiHyCwGP-hsyGa4xMQTUpbYhS62rYw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721326613386,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$IoV6AFrNNJrCX_FdniWGQRZW1sCU8tQ7vAgM8IQ4pGc"},
{"content":{"body":"In this model, rather than handing the capability to the `shared struct` declaration, you're handing the capability to the evaluator. If you need to execute or communicate with untrusted code, then you need to establish a trust boundary around it, and only grant the correlation capability to trusted code.","format":"org.matrix.custom.html","formatted_body":"In this model, rather than handing the capability to the <code>shared struct</code> declaration, you're handing the capability to the evaluator. If you need to execute or communicate with untrusted code, then you need to establish a trust boundary around it, and only grant the correlation capability to trusted code.","m.mentions":{},"msgtype":"m.text"},"ts":1721326756969,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dl5u2pJp6phtLDE_M4zEdaHYpNCaF8YyohESFt8bQVo"},
{"content":{"body":"> <@rbuckton:matrix.org> Gist about booststrapping a Worker: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62\n\nApps could also maybe do something similar to how React components can all add something to the `<head>` tag, collecting them all up as they are evaluated. And also Custom html elements.\nA library could provide a decorator which users can add to their structs, which collects them. And then the place that starts the worker can ask the library for the list of all decorated structs.\nI wonder if it should also be possible to register structs lazily to avoid having to import everything eagerly just in case they are used ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ryZh7bZvokRr25w19DtomPO57Sn3YMXHPOS1873_7x0\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Gist about booststrapping a Worker: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62</blockquote></mx-reply>Apps could also maybe do something similar to how React components can all add something to the `&lt;head&gt;` tag, collecting them all up as they are evaluated. And also Custom html elements.<br />A library could provide a decorator which users can add to their structs, which collects them. And then the place that starts the worker can ask the library for the list of all decorated structs.<br />I wonder if it should also be possible to register structs lazily to avoid having to import everything eagerly just in case they are usedÂ ","m.relates_to":{"m.in_reply_to":{"event_id":"$ryZh7bZvokRr25w19DtomPO57Sn3YMXHPOS1873_7x0"}},"msgtype":"m.text"},"ts":1721327010561,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$rIUe8RYInF8JxzK8ej5dxazh4jpAP9aGht9ke9GV42A"},
{"content":{"body":"So I was mistaken when I said it was fine to have a use once unforgeable token. At the end of the day if it's used as a key in a global/per realm registry, and the user code can sense whether that key has been used before or not, it becomes a global communication channel, which simply holding an immutable key value shouldn't enable (regardless of the forgeability of said value). Because the prototype registration is per realm, we cannot use a simple immutable value as correlation key where the user is in a position to provide a conflicting definition.","m.mentions":{},"msgtype":"m.text"},"ts":1721328904828,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$p_YcJl1KzcfMBEiVSM6HJOtBEDwSPfsSj55VVrPZv_o"},
{"content":{"body":"I think this observation may apply to the module source proposal as well, as technically a module source is considered an immutable \"safe to share\" value, but because it could be linked to different modules or in different evaluators/compartments, different evaluations of the module source in the same realm would result in different prototype behaviors for the same shared struct type.","m.mentions":{},"msgtype":"m.text"},"ts":1721328925056,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ZH1wDetZBsIVFp8klak9hMTMeiY7WpMhhrLkfx5ceb4"},
{"content":{"body":"Finally, a similar problem occurs with bundlers and string correlation tokens. Lets assume library \"shared-awesomeness\" is used by library \"cool-helpers\" and \"nice-tools\", and my app uses both. Even if both these libraries use the same version of \"shared-awesomeness\", the package manager could have installed separate copies, which would be evaluated separately. The correlation token would attempt to collapse the independent declarations, which would cause issues. Even if we don't fail the multiple definition, you would end up with one of the 2 definitions being ignored, which is a problem if there is any kind of shared state surrounding the definition.","m.mentions":{},"msgtype":"m.text"},"ts":1721328933165,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fY1qxwAdAsAsxidRUI5o4ND1Rp-yvw3D33AE9MRM6Vw"},
{"content":{"body":"> <@mhofman:matrix.org> Finally, a similar problem occurs with bundlers and string correlation tokens. Lets assume library \"shared-awesomeness\" is used by library \"cool-helpers\" and \"nice-tools\", and my app uses both. Even if both these libraries use the same version of \"shared-awesomeness\", the package manager could have installed separate copies, which would be evaluated separately. The correlation token would attempt to collapse the independent declarations, which would cause issues. Even if we don't fail the multiple definition, you would end up with one of the 2 definitions being ignored, which is a problem if there is any kind of shared state surrounding the definition.\n\nIn this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, `iframe`, etc.)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$fY1qxwAdAsAsxidRUI5o4ND1Rp-yvw3D33AE9MRM6Vw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Finally, a similar problem occurs with bundlers and string correlation tokens. Lets assume library &quot;shared-awesomeness&quot; is used by library &quot;cool-helpers&quot; and &quot;nice-tools&quot;, and my app uses both. Even if both these libraries use the same version of &quot;shared-awesomeness&quot;, the package manager could have installed separate copies, which would be evaluated separately. The correlation token would attempt to collapse the independent declarations, which would cause issues. Even if we don&#39;t fail the multiple definition, you would end up with one of the 2 definitions being ignored, which is a problem if there is any kind of shared state surrounding the definition.</blockquote></mx-reply>In this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, <code>iframe</code>, etc.)","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fY1qxwAdAsAsxidRUI5o4ND1Rp-yvw3D33AE9MRM6Vw"}},"msgtype":"m.text"},"ts":1721329087973,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zqrn6IaoOEMvXxxmRHGSlm03iAMuJGv8p9Gx8aSkhao"},
{"content":{"body":"In the unforgeable token case, a way around this may be to reify the mutable aspect onto the object itself. E.g. having an exotic data property that exposes the currently registered prototype in the realm. It would make it clear the object is a direct \"proxy\" for the realm's registration of that type","m.mentions":{},"msgtype":"m.text"},"ts":1721329175754,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$xB_LW28_cks0ITvHDNRxFMW6aoCD8oCz3SnN100Monc"},
{"content":{"body":"> <@rbuckton:matrix.org> In this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, `iframe`, etc.)\n\nwhat do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position a second one is coming with the same token ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Zqrn6IaoOEMvXxxmRHGSlm03iAMuJGv8p9Gx8aSkhao?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, <code>iframe</code>, etc.)</blockquote></mx-reply>what do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position a second one is coming with the same token","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Zqrn6IaoOEMvXxxmRHGSlm03iAMuJGv8p9Gx8aSkhao"}},"msgtype":"m.text"},"ts":1721329241153,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mFupWLLMoSjVdzukAvnxggVs2akbgNu_JgHUDpIiGfk"},
{"content":{"body":"> <@rbuckton:matrix.org> In this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, `iframe`, etc.)\n\n * what do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position to know a second one is coming with the same token","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Zqrn6IaoOEMvXxxmRHGSlm03iAMuJGv8p9Gx8aSkhao?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>In this case I would say this means neither are valid, not one or the other. If the concern is detecting 1 vs 2+, that would require you to grant the permission to an evaluator for malicious code to use it, which is why you would want to isolate untrusted code behind a separate trust boundary (i.e., a shadow realm, <code>iframe</code>, etc.)</blockquote></mx-reply> * what do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position to know a second one is coming with the same token","m.mentions":{},"m.new_content":{"body":"what do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position to know a second one is coming with the same token","format":"org.matrix.custom.html","formatted_body":"what do you mean \"neither\" are valid. one declaration is evaluated before the other. When evaluating the first one, the engine is not in a position to know a second one is coming with the same token","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$mFupWLLMoSjVdzukAvnxggVs2akbgNu_JgHUDpIiGfk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721329262580,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dkeOl4iyBbmr6xzcWtHRP_TTdevS45uNvuvaD0cNvpU"},
{"content":{"body":"Fair, but my point about detection remains. If you are evaluating untrusted code, you should put something between you and the untrusted code. If we require that a static identity must be laid down in an actual file, then untrusted code can't just produce new files on demand (if it can, you have far greater problems). If you want to allow an evaluator to correlate on a static identity, you must explicitly grant it the permission to do so. \nHow I'd imagined this working is that whatever \"registry\" a Realm uses for this correlation is only passed down to child Realms (or evaluators) by an explicit grant. If not that is not provided, the child Realm/evaluator only gets its own \"registry\" (and we could theoretically also deny the ability for a child Realm/evaluator to have a registry at all). However, if you run your untrusted code in the same Realm, it would share your registry. Thus, you really want to be able to isolate untrusted code into a different Realm.","m.mentions":{},"msgtype":"m.text"},"ts":1721329894096,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DwcNHoZoff29YOpCGz1PdEBGMbKu32kpLiUe1lZnABY"}
]