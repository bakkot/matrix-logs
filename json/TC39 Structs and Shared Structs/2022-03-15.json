[
{"content":{"body":"> <@rbuckton:matrix.org> One of the uses for `compareExchange` is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use `compareExchange` kind of defeats the purpose.\n\nagreed","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$P7-Tg3qB1ZRBaRB7G72UdTB_g64mOXTwwRp4TFkPu-U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>One of the uses for <code>compareExchange</code> is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use <code>compareExchange</code> kind of defeats the purpose.</blockquote></mx-reply>agreed","m.relates_to":{"m.in_reply_to":{"event_id":"$P7-Tg3qB1ZRBaRB7G72UdTB_g64mOXTwwRp4TFkPu-U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> One of the uses for `compareExchange` is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use `compareExchange` kind of defeats the purpose.\n\nagreed","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$P7-Tg3qB1ZRBaRB7G72UdTB_g64mOXTwwRp4TFkPu-U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>One of the uses for <code>compareExchange</code> is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use <code>compareExchange</code> kind of defeats the purpose.</blockquote></mx-reply>agreed","mimetype":"text/html"}]},"ts":1647367928839,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kOvoUuOHPb_Sm6kfnG6XCL-CvCOVBjHOdOL2kY9x1bc"},
{"content":{"body":"> <@atakikawa:igalia.com> That's interesting, so then `compareExchange`, `add`, `sub`, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?\n\nno, the issue is that there are no CPU instructions to do this in a way without locking it with an actual mutex, which as Ron said above, kinda defeats the purpose","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$rLugoHA6_n9btACbJIjrHsxr1Re0adXWyljjOy0O2G8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@atakikawa:igalia.com\">@atakikawa:igalia.com</a><br>That's interesting, so then <code>compareExchange</code>, <code>add</code>, <code>sub</code>, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?</blockquote></mx-reply>no, the issue is that there are no CPU instructions to do this in a way without locking it with an actual mutex, which as Ron said above, kinda defeats the purpose","m.relates_to":{"m.in_reply_to":{"event_id":"$rLugoHA6_n9btACbJIjrHsxr1Re0adXWyljjOy0O2G8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@atakikawa:igalia.com> That's interesting, so then `compareExchange`, `add`, `sub`, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?\n\nno, the issue is that there are no CPU instructions to do this in a way without locking it with an actual mutex, which as Ron said above, kinda defeats the purpose","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$rLugoHA6_n9btACbJIjrHsxr1Re0adXWyljjOy0O2G8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@atakikawa:igalia.com\">@atakikawa:igalia.com</a><br>That's interesting, so then <code>compareExchange</code>, <code>add</code>, <code>sub</code>, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?</blockquote></mx-reply>no, the issue is that there are no CPU instructions to do this in a way without locking it with an actual mutex, which as Ron said above, kinda defeats the purpose","mimetype":"text/html"}]},"ts":1647367960688,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yITKJIcmj-JouBy3Qg_dOUpbhsqVFNUgDRn1UxEgaDE"},
{"content":{"body":"`add` and `sub` will just error without field types, yes","format":"org.matrix.custom.html","formatted_body":"<code>add</code> and <code>sub</code> will just error without field types, yes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`add` and `sub` will just error without field types, yes","mimetype":"text/plain"},{"body":"<code>add</code> and <code>sub</code> will just error without field types, yes","mimetype":"text/html"}]},"ts":1647367981912,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h20E-QeGEmBnXFuhm8HhgU08LzkEr2gD39Ozqs0Eisg"},
{"content":{"body":"`compareExchange` would work _only_ for things with identity, like objects","format":"org.matrix.custom.html","formatted_body":"<code>compareExchange</code> would work <em>only</em> for things with identity, like objects","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`compareExchange` would work _only_ for things with identity, like objects","mimetype":"text/plain"},{"body":"<code>compareExchange</code> would work <em>only</em> for things with identity, like objects","mimetype":"text/html"}]},"ts":1647368006105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AbA3EksgAywdrCArDwMwl2A5iYvamFoBlHp1AhIWr8g"},
{"content":{"body":"i don't know how to make `compareExchange` work for e.g. numbers","format":"org.matrix.custom.html","formatted_body":"i don't know how to make <code>compareExchange</code> work for e.g. numbers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't know how to make `compareExchange` work for e.g. numbers","mimetype":"text/plain"},{"body":"i don't know how to make <code>compareExchange</code> work for e.g. numbers","mimetype":"text/html"}]},"ts":1647368015362,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gdP9hGu0Ie71wHUi_uhQhsKTWkdMbhXfws6i_sZvdyM"},
{"content":{"body":" * i don't know how to make `compareExchange` work for e.g. numbers","format":"org.matrix.custom.html","formatted_body":" * i don't know how to make <code>compareExchange</code> work for e.g. numbers","m.new_content":{"body":"i don't know how to make `compareExchange` work for e.g. numbers","format":"org.matrix.custom.html","formatted_body":"i don't know how to make <code>compareExchange</code> work for e.g. numbers","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't know how to make `compareExchange` work for e.g. numbers","mimetype":"text/plain"},{"body":"i don't know how to make <code>compareExchange</code> work for e.g. numbers","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$gdP9hGu0Ie71wHUi_uhQhsKTWkdMbhXfws6i_sZvdyM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * i don't know how to make `compareExchange` work for e.g. numbers","mimetype":"text/plain"},{"body":" * i don't know how to make <code>compareExchange</code> work for e.g. numbers","mimetype":"text/html"}]},"ts":1647368023672,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dqRz7-ClBqFc5lH9zJ8flZtVOHfakFaLaNSVycMeNJs"},
{"content":{"body":"specifically for cmpxcg i think that's probably fine","msgtype":"m.text","org.matrix.msc1767.text":"specifically for cmpxcg i think that's probably fine"},"ts":1647368080032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FFIRLDFpD9Q-4EifOoSXJ-CP0yS-j3StDbcJIK4BCWw"},
{"content":{"body":"most cmpxchg in my experience are for lock-free updates of state, and the workaround in this case is to wrap it in an Object so you can do pointer comparison on the Object pointer","msgtype":"m.text","org.matrix.msc1767.text":"most cmpxchg in my experience are for lock-free updates of state, and the workaround in this case is to wrap it in an Object so you can do pointer comparison on the Object pointer"},"ts":1647368117171,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vf8RgrADqOEl5ADUDTO39dMwgmnqSeOzvdA_mxLYq5A"},
{"content":{"body":"it's a bit annoying if you have a fixed number of states, like what you might use a int enum for in C++, since this means you'd need to make a few constant Objects ahead of time like","msgtype":"m.text","org.matrix.msc1767.text":"it's a bit annoying if you have a fixed number of states, like what you might use a int enum for in C++, since this means you'd need to make a few constant Objects ahead of time like"},"ts":1647368160943,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Bfj3UVlPgAZ_VQN6z-AEgIYx0Te0aCRSsAsYnLr5Ask"},
{"content":{"body":"for example, if you were writing a mutex yourself","msgtype":"m.text","org.matrix.msc1767.text":"for example, if you were writing a mutex yourself"},"ts":1647368167989,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TlH93UfdZ4dabp4baXJMY8dclSDVCZUKaR4yzwmExiY"},
{"content":{"body":"`const LOCKED_STATE = {}; const UNLOCKED_STATE = {}; const CONTENDED_LOCKED_STATE = {};` and use those objects for the cmpxchgs","format":"org.matrix.custom.html","formatted_body":"<code>const LOCKED_STATE = {}; const UNLOCKED_STATE = {}; const CONTENDED_LOCKED_STATE = {};</code> and use those objects for the cmpxchgs","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`const LOCKED_STATE = {}; const UNLOCKED_STATE = {}; const CONTENDED_LOCKED_STATE = {};` and use those objects for the cmpxchgs","mimetype":"text/plain"},{"body":"<code>const LOCKED_STATE = {}; const UNLOCKED_STATE = {}; const CONTENDED_LOCKED_STATE = {};</code> and use those objects for the cmpxchgs","mimetype":"text/html"}]},"ts":1647368199681,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WHfcAg3FWHyRRGoPFVBpOdGjTOT_1m0cdX77N4TPJUM"},
{"content":{"body":"it is kind of annoying but also fundamental, we don't have ints in the language outside of TAs...","msgtype":"m.text","org.matrix.msc1767.text":"it is kind of annoying but also fundamental, we don't have ints in the language outside of TAs..."},"ts":1647368231607,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SJlRuDGU5dihGt8Of3bUwLBgdSlohmNwN-gA3ecsD6E"},
{"content":{"body":"another way to say this restriction is: i know how to make atomics work for pointers. the only values guaranteed to be implemented with pointers in all implementations are things with identity. values without identity won't work with atomics because the implementations strategies differ, and there's no way to make the atomics work without the use of expensive mutexes in all implementations. and if you were using mutexes, you might as well use mutexes in the user code to do your synchronization, since the point of `Atomics` is fast, non-blocking, lock-free operations","format":"org.matrix.custom.html","formatted_body":"another way to say this restriction is: i know how to make atomics work for pointers. the only values guaranteed to be implemented with pointers in all implementations are things with identity. values without identity won't work with atomics because the implementations strategies differ, and there's no way to make the atomics work without the use of expensive mutexes in all implementations. and if you were using mutexes, you might as well use mutexes in the user code to do your synchronization, since the point of <code>Atomics</code> is fast, non-blocking, lock-free operations","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"another way to say this restriction is: i know how to make atomics work for pointers. the only values guaranteed to be implemented with pointers in all implementations are things with identity. values without identity won't work with atomics because the implementations strategies differ, and there's no way to make the atomics work without the use of expensive mutexes in all implementations. and if you were using mutexes, you might as well use mutexes in the user code to do your synchronization, since the point of `Atomics` is fast, non-blocking, lock-free operations","mimetype":"text/plain"},{"body":"another way to say this restriction is: i know how to make atomics work for pointers. the only values guaranteed to be implemented with pointers in all implementations are things with identity. values without identity won't work with atomics because the implementations strategies differ, and there's no way to make the atomics work without the use of expensive mutexes in all implementations. and if you were using mutexes, you might as well use mutexes in the user code to do your synchronization, since the point of <code>Atomics</code> is fast, non-blocking, lock-free operations","mimetype":"text/html"}]},"ts":1647368441351,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XZcxLSGXN0UumlhAiDrLgW4U1c6Ht3zFz9PhoXgU48k"},
{"content":{"body":"and if we were to extend structs with field types in the future, we _could_ make `Atomics` work on fields with integer field types, but that would also basically require that all implementations must implement those fields as unboxed","format":"org.matrix.custom.html","formatted_body":"and if we were to extend structs with field types in the future, we <em>could</em> make <code>Atomics</code> work on fields with integer field types, but that would also basically require that all implementations must implement those fields as unboxed","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and if we were to extend structs with field types in the future, we _could_ make `Atomics` work on fields with integer field types, but that would also basically require that all implementations must implement those fields as unboxed","mimetype":"text/plain"},{"body":"and if we were to extend structs with field types in the future, we <em>could</em> make <code>Atomics</code> work on fields with integer field types, but that would also basically require that all implementations must implement those fields as unboxed","mimetype":"text/html"}]},"ts":1647368510677,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0rp4G1gBqbg2UBPQgqDqwAdmlRj_wzZMsWIpvlLmuUI"},
{"content":{"body":"Though I don't think `{}` works as you describe, since a normal JS object isn't shared. ","format":"org.matrix.custom.html","formatted_body":"Though I don't think <code>{}</code> works as you describe, since a normal JS object isn't shared.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Though I don't think `{}` works as you describe, since a normal JS object isn't shared. ","mimetype":"text/plain"},{"body":"Though I don't think <code>{}</code> works as you describe, since a normal JS object isn't shared.","mimetype":"text/html"}]},"ts":1647382466837,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_UsYp5o9gSw_5d1rWlrF7VVqr0-gxWyZBF6lUfSUm80"},
{"content":{"body":"So, my understanding is that in V8, numbers are boxed and stored on the heap, and those heap-allocated boxes are per isolate? ","msgtype":"m.text","org.matrix.msc1767.text":"So, my understanding is that in V8, numbers are boxed and stored on the heap, and those heap-allocated boxes are per isolate? "},"ts":1647383064355,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BOZTaDnPK9inCb89-UKHp0YC_o8uJhHhExCR0dVeoQs"},
{"content":{"body":"rbuckton: quite right, needed to be shared objects","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: quite right, needed to be shared objects","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: quite right, needed to be shared objects","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: quite right, needed to be shared objects","mimetype":"text/html"}]},"ts":1647386875815,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r-Vlc8cZYTgV65YeXySL6I8PnzPj5KvmM7ZkgkSBC10"},
{"content":{"body":"rbuckton: in V8, non-Smi numbers (for simplicity in this conversation assume Smis are 31-bit ints) are boxed and stored on the heap","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: in V8, non-Smi numbers (for simplicity in this conversation assume Smis are 31-bit ints) are boxed and stored on the heap","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rbuckton: in V8, non-Smi numbers (for simplicity in this conversation assume Smis are 31-bit ints) are boxed and stored on the heap","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: in V8, non-Smi numbers (for simplicity in this conversation assume Smis are 31-bit ints) are boxed and stored on the heap","mimetype":"text/html"}]},"ts":1647386915227,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yWduHpgrjRmKgVljGYEotHg315fHv3t0_Njaazk31v4"},
{"content":{"body":"they can be allocated in a shared heap that can be shared across Isolates, but the problem is that the sensible semantics for `cmpxchg`ing a number isn't box equality but actual numeric equality","format":"org.matrix.custom.html","formatted_body":"they can be allocated in a shared heap that can be shared across Isolates, but the problem is that the sensible semantics for <code>cmpxchg</code>ing a number isn't box equality but actual numeric equality","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"they can be allocated in a shared heap that can be shared across Isolates, but the problem is that the sensible semantics for `cmpxchg`ing a number isn't box equality but actual numeric equality","mimetype":"text/plain"},{"body":"they can be allocated in a shared heap that can be shared across Isolates, but the problem is that the sensible semantics for <code>cmpxchg</code>ing a number isn't box equality but actual numeric equality","mimetype":"text/html"}]},"ts":1647386950764,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tQMYrV8LK3mzwsnDCVAlQxND0giH4MEnm1Ej43IK0vc"},
{"content":{"body":"and the only way to do that and use an underlying boxing implementation strategy is to have an internalization table for all shared numbers, so you can ensure there is a single canonical heap allocation for a particular number","msgtype":"m.text","org.matrix.msc1767.text":"and the only way to do that and use an underlying boxing implementation strategy is to have an internalization table for all shared numbers, so you can ensure there is a single canonical heap allocation for a particular number"},"ts":1647386993796,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-F3LG4jRuKfRZlptbLW-Z4DMXkK8QfhXX3fG84C962s"},
{"content":{"body":"and i haven't been able to think of a way to apply that canonicalization lazily, i.e. only canonicalize the fields that you want to `cmpxchg`","format":"org.matrix.custom.html","formatted_body":"and i haven't been able to think of a way to apply that canonicalization lazily, i.e. only canonicalize the fields that you want to <code>cmpxchg</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and i haven't been able to think of a way to apply that canonicalization lazily, i.e. only canonicalize the fields that you want to `cmpxchg`","mimetype":"text/plain"},{"body":"and i haven't been able to think of a way to apply that canonicalization lazily, i.e. only canonicalize the fields that you want to <code>cmpxchg</code>","mimetype":"text/html"}]},"ts":1647387022571,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h8tRBKtKNP31i-9SmvXkomSM4QiWWV0HCeI6KUYCwb0"},
{"content":{"body":"because to replace a non-canonical copy with a canonical copy of a boxed number is of course a separate write that might become observable to other threads","msgtype":"m.text","org.matrix.msc1767.text":"because to replace a non-canonical copy with a canonical copy of a boxed number is of course a separate write that might become observable to other threads"},"ts":1647387047195,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZU9Yi_P_VZjxJnXERjmTZbqtTzgaKUYxz04nZ0q-gXA"},
{"content":{"body":"but also having a \"number table\" like an interned string table is complex and may make number performance rather strange","msgtype":"m.text","org.matrix.msc1767.text":"but also having a \"number table\" like an interned string table is complex and may make number performance rather strange"},"ts":1647387111487,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jAT9rxDxnMn-nPMXq15ZIz0NJJHNp75vONencAkFQ0E"},
{"content":{"body":"for other atomic operations like `add`, the boxing itself makes the operations unimplementable","format":"org.matrix.custom.html","formatted_body":"for other atomic operations like <code>add</code>, the boxing itself makes the operations unimplementable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for other atomic operations like `add`, the boxing itself makes the operations unimplementable","mimetype":"text/plain"},{"body":"for other atomic operations like <code>add</code>, the boxing itself makes the operations unimplementable","mimetype":"text/html"}]},"ts":1647387414020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6UpiLhDYVPWQ3K1D4B_GquO6_BO1AGxA6V0j1RrbOHY"},
{"content":{"body":"they'd end up being need to be implemented as \"fetch original box, unbox, add, re-box, cmpxchg with original box\" loops","msgtype":"m.text","org.matrix.msc1767.text":"they'd end up being need to be implemented as \"fetch original box, unbox, add, re-box, cmpxchg with original box\" loops"},"ts":1647387466802,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-g19gLyl7skGhDPYsWHX-IsgLYUoLppsP10PNemenQw"},
{"content":{"body":"which seems undesirable?","msgtype":"m.text","org.matrix.msc1767.text":"which seems undesirable?"},"ts":1647387471712,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OkC3JYrpU2PlY72F9dcNHoR1s7gxk-IcRlFv-MyLXV8"},
{"content":{"body":"something to discuss at this week's call :)","msgtype":"m.text","org.matrix.msc1767.text":"something to discuss at this week's call :)"},"ts":1647387510826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ziRPKyyDuHo6vkFbrzPejByTGDja2Hu9REgZFyFPNuo"}
]