[
{"content":{"body":"Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:\n- There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.\n- Reflect.getUnsafe/setUnsafe expose these ops\n- inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe\n- Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)\n- Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.\n- if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:</p>\n<ul>\n<li>There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.</li>\n<li>Reflect.getUnsafe/setUnsafe expose these ops</li>\n<li>inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe</li>\n<li>Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)</li>\n<li>Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.</li>\n<li>if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.</li>\n</ul>","msgtype":"m.text"},"ts":1720915668433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BU_VgHa-0iqyn9sFTRRDpLunFyypTmwA88dofeXNtzU"},
{"content":{"body":"The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. ","format":"org.matrix.custom.html","formatted_body":"The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.","msgtype":"m.text"},"ts":1720919437743,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"},
{"content":{"body":"Though [[Get]] and [[Set]] would throw","msgtype":"m.text"},"ts":1720919527932,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FhMN5U5ApIgIlE0yYYJxMxtLOCKJ5glI8ounVqrFlmg"},
{"content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `umsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>umsafe</code> block at all","msgtype":"m.text"},"ts":1720919674328,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"},
{"content":{"body":"* What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","m.new_content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all","msgtype":"m.text"},"m.relates_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720919900291,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$261oOvwkMVpcBwNyg9xrTDiauhY-R5rk0Ri6kahI1TM"},
{"content":{"body":"> <@rbuckton:matrix.org> What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all\n\nI think we are saying the same thing ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all</blockquote></mx-reply>I think we are saying the same thing","m.relates_to":{"m.in_reply_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"}},"msgtype":"m.text"},"ts":1720920144856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KbCuv_XY72xtIJwD-_SmlEt5XVVQM7G6EDC80YLiM8"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1720920149811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bvQZFOPwKe7wZhvYJP_t8wTil9MTTlXL-iOTpoctoCU"},
{"content":{"body":"> <@rbuckton:matrix.org> The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. \n\nSure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.</blockquote></mx-reply>Sure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","m.relates_to":{"m.in_reply_to":{"event_id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"}},"msgtype":"m.text"},"ts":1720920186280,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nTFGtpyqrT8bkXqtRuBNYhLZlSrDlQn469Rfh5QYXNM"},
{"content":{"body":"The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want","msgtype":"m.text"},"ts":1720920202214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"},
{"content":{"body":"> <@rbuckton:matrix.org> The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want\n\nNot sure what you mean. It is still strings (or maybe symbols)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want</blockquote></mx-reply>Not sure what you mean. It is still strings (or maybe symbols)","m.relates_to":{"m.in_reply_to":{"event_id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"}},"msgtype":"m.text"},"ts":1720920225668,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aP-WZlu37x19qmqBArcSysaT7Qe7dMz9JsFAgk5SOBI"},
{"content":{"body":"I am not especially attached to the idea I wrote above, it is just the simplest thing I can imagine. How do you think unsafe blocks should work with respect to the MOP?","msgtype":"m.text"},"ts":1720920258648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gNcmuXsALFDKc0heqAghRv-6uSqeoiQ9DIHMVOAWtvg"},
{"content":{"body":"It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct","msgtype":"m.text"},"ts":1720920289226,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E"},
{"content":{"body":"> <@rbuckton:matrix.org> It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct\n\nNot transparent, just missing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%247fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct</blockquote></mx-reply>Not transparent, just missing","m.relates_to":{"m.in_reply_to":{"event_id":"$7fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E"}},"msgtype":"m.text"},"ts":1720920311699,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lrEgKSi6JUrpovd7YicCaccSU7JvtP-VwLJHfkf1Zgw"},
{"content":{"body":"Maybe that is what you meant","msgtype":"m.text"},"ts":1720920339950,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bSQKjlbB1vHxmU2zHB0C3jCRqugLhfpbrSTU7u2FmOc"},
{"content":{"body":"Yes, thats what I meant","m.mentions":{},"msgtype":"m.text"},"ts":1720920345225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Pq8HciGkArIX1SZ9VgMgztrwr4hrL-_c0Tttd44K6Uo"},
{"content":{"body":"they cannot be missing","m.mentions":{},"msgtype":"m.text"},"ts":1720920348412,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E17Kw2zMXt-C_OP6c6IMUWpzF7szgvNuzaD6xxqbcN8"},
{"content":{"body":"You cannot have a [[Get]] outside of `unsafe` return a prototype property if there was a struct field of the same name.","format":"org.matrix.custom.html","formatted_body":"You cannot have a [[Get]] outside of <code>unsafe</code> return a prototype property if there was a struct field of the same name.","m.mentions":{},"msgtype":"m.text"},"ts":1720920378953,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c"},
{"content":{"body":"Can you explain how you think it should work?","msgtype":"m.text"},"ts":1720920388074,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SA_BAqQJXycY0_ZSiXs2xl00koay0_fwxgb3LZRdvuI"},
{"content":{"body":"They have to treat them like normal properties, except that [[Get]] and [[Set]] throws.","m.mentions":{},"msgtype":"m.text"},"ts":1720920399929,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KQS6Gvij-FmHR-r8GImciTGM-BVjkq8ajiEv9hxrCNE"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1720920408147,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y7qcK25vgKrQFNnLsyCR65-VNMf437-9xLypJLyt-jA"},
{"content":{"body":"You override [[Get]] and [[Set]] for shared struct objects. ","m.mentions":{},"msgtype":"m.text"},"ts":1720920423961,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b4SyByIZqgG99Icl1NdqW1jt-g0aeIegMw2wYtuWaM4"},
{"content":{"body":"Those are abstract.","m.mentions":{},"msgtype":"m.text"},"ts":1720920431257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Px2mBpD4fR6eEpoEHy78yAiCBNeGaQ5qKJBX0_dvt9o"},
{"content":{"body":"Will GetOwnPropertyDescriptor throw?","msgtype":"m.text"},"ts":1720920483827,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RjhsBEs0Hgc3jIZIhBmtdHey4j2xINFdafpnU1ZY2xE"},
{"content":{"body":"Lets say you have [[Get]], [[Set]], [[UnsafeGet]], and [[UnsafeSet]]. On all objects, [[UnsafeGet]]/[[UnsafeSet]] just forwards on to the ordinary get/set behavior.","m.mentions":{},"msgtype":"m.text"},"ts":1720920499055,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrotfukffLgN5DK5SDF5cQ0lRFBGapBjcfhaiUsYLpE"},
{"content":{"body":"What happens in the unsafe blocks?","msgtype":"m.text"},"ts":1720920508213,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RIJBkeMuL3oWfi68v1czhCUQkkf7zl2zQ2IY-WiWams"},
{"content":{"body":"But shared structs have a [[Get]] and [[Set]] that throw.","m.mentions":{},"msgtype":"m.text"},"ts":1720920510988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fCRTbsgEgdkEHuu0DqP5F0kazVSCVh2Gzlhl_Ums8lc"},
{"content":{"body":"In an unsafe block, get operations use [[UnsafeGet]]/[[UnsafeSet]] instead of [[Get]]/[[Set]]","m.mentions":{},"msgtype":"m.text"},"ts":1720920529179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zgv96cgrkKbjrj4b2Tr6zBQtk4CrjzSByrtmyWSRtyQ"},
{"content":{"body":"Even without `unsafe` we need to do something similar to handle shared memory access for shared struct fields in [[Get]] and [[Set]], so we already expect to pay this cost.","format":"org.matrix.custom.html","formatted_body":"Even without <code>unsafe</code> we need to do something similar to handle shared memory access for shared struct fields in [[Get]] and [[Set]], so we already expect to pay this cost.","m.mentions":{},"msgtype":"m.text"},"ts":1720920590003,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XRsy-vxgbOfYsUTvu5dHEbBM7EHbJipLTjTIvhewZ6E"},
{"content":{"body":"GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: false, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":"GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: false, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"msgtype":"m.text"},"ts":1720920661615,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dhC_4Bt4M_FOdGpqJh3NG2dBwme1H2OfYoG9dIckAec"},
{"content":{"body":"OK, so how does Object.getOwnPropertyDescriptor know if it’s in an unsafe block?","msgtype":"m.text"},"ts":1720920701513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ciVl-2orWc0xRCnoZHTBoebSVem90M_qayzmG9mcaE8"},
{"content":{"body":"But `in` and `Reflect.has` et al should work outside of unsafe because for a given reference to a shared struct, it will still have a fixed shape.","format":"org.matrix.custom.html","formatted_body":"But <code>in</code> and <code>Reflect.has</code> et al should work outside of unsafe because for a given reference to a shared struct, it will still have a fixed shape.","m.mentions":{},"msgtype":"m.text"},"ts":1720920707525,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GDp0YsQMAysAqLDmvb342T_fjw5qV4fzOn00WNZx7JE"},
{"content":{"body":"I was trying to avoid functions changing behavior based on their caller","msgtype":"m.text"},"ts":1720920741828,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QEKJ6o8Vx_-sz13LhpCeQcpl_zg7dlBsKL9g3sAdBbA"},
{"content":{"body":"> <@rbuckton:matrix.org> You cannot have a [[Get]] outside of `unsafe` return a prototype property if there was a struct field of the same name.\n\nI think this problem can be fixed in my suggestion without making any new MOP ops or anything","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You cannot have a [[Get]] outside of <code>unsafe</code> return a prototype property if there was a struct field of the same name.</blockquote></mx-reply>I think this problem can be fixed in my suggestion without making any new MOP ops or anything","m.relates_to":{"m.in_reply_to":{"event_id":"$ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c"}},"msgtype":"m.text"},"ts":1720920818739,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sBpIruMl-u9rLNe0w_UfyXnvwSOHeo7XhAYvG9iSA7Y"},
{"content":{"body":"We could have gOPD return a new kind of descriptor both in and out of `unsafe`, and an `Reflect.unsafeGetOwnPropertyDescriptor` that has the same magic that `Reflect.unsafeGet`/`Reflect.unsafeSet` would have (if any).","format":"org.matrix.custom.html","formatted_body":"We could have gOPD return a new kind of descriptor both in and out of <code>unsafe</code>, and an <code>Reflect.unsafeGetOwnPropertyDescriptor</code> that has the same magic that <code>Reflect.unsafeGet</code>/<code>Reflect.unsafeSet</code> would have (if any).","m.mentions":{},"msgtype":"m.text"},"ts":1720920824042,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZEIG3T2hT2mEo6SXe5m_1D1-RzMZ1Yordh5sOG8SBc4"},
{"content":{"body":"Maybe gOPD would throw if you don’t call the unsafe one?","msgtype":"m.text"},"ts":1720920889920,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XtwisCZpdJKfJVEG-FtvsECPfAhPeYCIajLLqArSNUI"},
{"content":{"body":"You need MOP operations to be reliable. What happens if I do `Object.create(sharedStruct)`? Now I have a normal JS object with a shared struct prototype. If I call [[Get]] on the result it should still throw if it tries to read a prototype field outside of `unsafe`.","format":"org.matrix.custom.html","formatted_body":"You need MOP operations to be reliable. What happens if I do <code>Object.create(sharedStruct)</code>? Now I have a normal JS object with a shared struct prototype. If I call [[Get]] on the result it should still throw if it tries to read a prototype field outside of <code>unsafe</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720920901125,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DGuun7I33mq8ank15dq10fmuZxbdk8cFxin13UK3JCU"},
{"content":{"body":"Do we have unsafeDefineProperty?","msgtype":"m.text"},"ts":1720920911468,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mgAR8WnXR6jFk3yY7ZRWDQQP3dCLhTE3Gg-ipTTfWO4"},
{"content":{"body":"getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.","m.mentions":{},"msgtype":"m.text"},"ts":1720920922775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs"},
{"content":{"body":"No. You can't call defineProperty on a shared struct, it would fail.","m.mentions":{},"msgtype":"m.text"},"ts":1720920934236,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AYChz8Kk2zd5bbQrUnQQggJdaikfu-mjSNIgAQR-KfE"},
{"content":{"body":"Shared struct instances are sealed.","m.mentions":{},"msgtype":"m.text"},"ts":1720920939595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aSsbLSTt2X8Ih19NHO0yHK130MxmdccvUtfVzEzYoKs"},
{"content":{"body":"No new properties, no deleting properties.","m.mentions":{},"msgtype":"m.text"},"ts":1720920946820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4DojDe-GilD81QELxyqxAFoFXK80PTl8sofC1PLzFGU"},
{"content":{"body":"Even if the property descriptor matches what’s already there?","msgtype":"m.text"},"ts":1720920957754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oyb3FWgXsQleiULv37j2wU_m1jxn69uoAvO5Oomklj4"},
{"content":{"body":"> <@rbuckton:matrix.org> getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.\n\nProxy can ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.</blockquote></mx-reply>Proxy can","m.relates_to":{"m.in_reply_to":{"event_id":"$wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs"}},"msgtype":"m.text"},"ts":1720920966907,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QReWu_p-NfYVWh2d7z0Iw0pYYO5qt-QQylQKR746mhg"},
{"content":{"body":"Normal defineProperty would just fail because of the existing integrity checks","m.mentions":{},"msgtype":"m.text"},"ts":1720920968243,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js"},
{"content":{"body":"> <@rbuckton:matrix.org> Normal defineProperty would just fail because of the existing integrity checks\n\nI don’t think that’s the case if you define it as what it’s already defined to be, but with a different value ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Normal defineProperty would just fail because of the existing integrity checks</blockquote></mx-reply>I don’t think that’s the case if you define it as what it’s already defined to be, but with a different value","m.relates_to":{"m.in_reply_to":{"event_id":"$DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js"}},"msgtype":"m.text"},"ts":1720921003066,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L-Y0ZfRa-Y2Vs2aoCkTJ7NV9EJRDTFji-OmO8un32tc"},
{"content":{"body":"AFAIK, no developers code defensively against gOPD failing. ","m.mentions":{},"msgtype":"m.text"},"ts":1720921004363,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qp4_LvIiuml2CG5rompbIoEydhFr-3TGqWYocZ03WlA"},
{"content":{"body":"That's fair","m.mentions":{},"msgtype":"m.text"},"ts":1720921014908,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$__gd4lBT3Jss1E-2JOX_NcD8ZapqfKjJbQHvt3lJpt4"},
{"content":{"body":" * GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: ?, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":" * GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: ?, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"m.new_content":{"body":"GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: ?, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":"GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: ?, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dhC_4Bt4M_FOdGpqJh3NG2dBwme1H2OfYoG9dIckAec","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720921030588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C12hay0R0qIkT5zXzoFYFNiXj3q2FEBFubjMf3E_LqI"},
{"content":{"body":"Maybe we do need `unsafeDefineProperty`. I do want to be able to change `writable`","format":"org.matrix.custom.html","formatted_body":"Maybe we do need <code>unsafeDefineProperty</code>. I do want to be able to change <code>writable</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720921058616,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ahbuGAAUd4FBIw4wsZOWMsRaHVDZsfmmkQ7vUJcHRvI"},
{"content":{"body":"But you can't create new properties with it, ","m.mentions":{},"msgtype":"m.text"},"ts":1720921070780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X8-1YOq7vqtRTddXetGjgSSqph2e5fRD6d0gpJAANZU"},
{"content":{"body":" * But you can't create new properties with it.","m.mentions":{},"m.new_content":{"body":"But you can't create new properties with it.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$X8-1YOq7vqtRTddXetGjgSSqph2e5fRD6d0gpJAANZU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720921075905,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rHNd9pc4RDx7i3EIslEjB2nSXgvLOTK27SBUDa4xvvE"},
{"content":{"body":"Maybe instead of `Reflect.unsafeX` we have `Reflect.unsafe.X` which just mirrors `Reflect`","format":"org.matrix.custom.html","formatted_body":"Maybe instead of <code>Reflect.unsafeX</code> we have <code>Reflect.unsafe.X</code> which just mirrors <code>Reflect</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720921146279,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI"},
{"content":{"body":"I would start simple and omit unsafeGOPD and unsafeDP, letting these always throw on shared struct data props. That might be the only observable difference between the ways we are thinking about this.","msgtype":"m.text"},"ts":1720921150058,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PwEcZI3JMRU8Hvc0wa6ReXCAMSMdUxxUExkvzZ1R2zY"},
{"content":{"body":"(except for `deleteProperty` since that will never work?)","format":"org.matrix.custom.html","formatted_body":"(except for <code>deleteProperty</code> since that will never work?)","m.mentions":{},"msgtype":"m.text"},"ts":1720921159738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hfxOnhXFo86kZ4S6zlJPqG4MV896TVeNbpxZ1r8HsVY"},
{"content":{"body":"> <@rbuckton:matrix.org> Maybe instead of `Reflect.unsafeX` we have `Reflect.unsafe.X` which just mirrors `Reflect`\n\nI am a fan of namespace objects, but I don’t know how much of this we need to fill in","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Maybe instead of <code>Reflect.unsafeX</code> we have <code>Reflect.unsafe.X</code> which just mirrors <code>Reflect</code></blockquote></mx-reply>I am a fan of namespace objects, but I don’t know how much of this we need to fill in","m.relates_to":{"m.in_reply_to":{"event_id":"$Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI"}},"msgtype":"m.text"},"ts":1720921198617,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ge4-39iSqPNxSbJoz3VFzO-ZNl125v1RmmF_l5dmqks"},
{"content":{"body":"I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.","m.mentions":{},"msgtype":"m.text"},"ts":1720921218053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw"},
{"content":{"body":"> <@rbuckton:matrix.org> I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.\n\nYeah I don’t think nonwritable is a good solution for this. We would need initializer lists. Anyway I imagined shared struct fields would be nonconfigurable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.</blockquote></mx-reply>Yeah I don’t think nonwritable is a good solution for this. We would need initializer lists. Anyway I imagined shared struct fields would be nonconfigurable","m.relates_to":{"m.in_reply_to":{"event_id":"$geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw"}},"msgtype":"m.text"},"ts":1720921278267,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CxzJUjtlkleckxB-1sVGkYH0vuUdoZq_OGCXoW9tTn0"},
{"content":{"body":"But we probably should have some kind of `getOwnPropertyDescriptor` support at some point.","format":"org.matrix.custom.html","formatted_body":"But we probably should have some kind of <code>getOwnPropertyDescriptor</code> support at some point.","m.mentions":{},"msgtype":"m.text"},"ts":1720921291569,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI"},
{"content":{"body":"Yes, they are non-configurable","m.mentions":{},"msgtype":"m.text"},"ts":1720921298103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9C7e_m8biiKobKOO9RUmXeNxy6lJNtNhPNXUXTVEj2I"},
{"content":{"body":"So… no particular use for defineProperty then","msgtype":"m.text"},"ts":1720921340974,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$smy-BvMPaxW_VKHMaMLvd0ODuQ-FX-MenZ4YWFk9kUs"},
{"content":{"body":"> <@rbuckton:matrix.org> But we probably should have some kind of `getOwnPropertyDescriptor` support at some point.\n\nSome kind of introspection would be good, but maybe this should be focused on the class level","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%240AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But we probably should have some kind of <code>getOwnPropertyDescriptor</code> support at some point.</blockquote></mx-reply>Some kind of introspection would be good, but maybe this should be focused on the class level","m.relates_to":{"m.in_reply_to":{"event_id":"$0AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI"}},"msgtype":"m.text"},"ts":1720921372020,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I5pkFLsesZ8fn0VopzmFL2TlcsmcHmRx7wHrXlVjj5c"},
{"content":{"body":"Even if we don't have gOPD, I want to make sure we can still do `{ ...sharedStruct }` inside of an `unsafe` block as it could be an efficient way to copy the properties off of the struct while in a lock.","format":"org.matrix.custom.html","formatted_body":"Even if we don't have gOPD, I want to make sure we can still do <code>{ ...sharedStruct }</code> inside of an <code>unsafe</code> block as it could be an efficient way to copy the properties off of the struct while in a lock.","m.mentions":{},"msgtype":"m.text"},"ts":1720921380703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g"},
{"content":{"body":"> <@rbuckton:matrix.org> Even if we don't have gOPD, I want to make sure we can still do `{ ...sharedStruct }` inside of an `unsafe` block as it could be an efficient way to copy the properties off of the struct while in a lock.\n\nHuh, how do you attach the right cross realm prototype identifier?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Even if we don't have gOPD, I want to make sure we can still do <code>{ ...sharedStruct }</code> inside of an <code>unsafe</code> block as it could be an efficient way to copy the properties off of the struct while in a lock.</blockquote></mx-reply>Huh, how do you attach the right cross realm prototype identifier?","m.relates_to":{"m.in_reply_to":{"event_id":"$aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g"}},"msgtype":"m.text"},"ts":1720921449788,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Atxk8z_ZKcZEDX4wStLdDRiDwNcwgmSvvCcFlyQhzMM"},
{"content":{"body":"you don't? You're not creating a shared struct instance, just a normal object.","m.mentions":{},"msgtype":"m.text"},"ts":1720921470211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ktxpzli3ixcj1JvCB-LsY0IVI8ZakgkqP6XOSKpkHAE"},
{"content":{"body":"Shared struct instances can only be created via a constructor.","m.mentions":{},"msgtype":"m.text"},"ts":1720921486447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U2Acs5QJzspKQ_LHTF3kAxQH5_hL_8NvnTasskoNc3Y"},
{"content":{"body":"Oic. Yes that should be handled like . Access","msgtype":"m.text"},"ts":1720921503597,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RcfmPfThq_-KIbRXHounMcQitxMjw6bqE5QIFPVXz8E"},
{"content":{"body":"`{ ...sharedStruct }` is \"give me a normal object that is a copy of the struct fields\"","format":"org.matrix.custom.html","formatted_body":"<code>{ ...sharedStruct }</code> is \"give me a normal object that is a copy of the struct fields\"","m.mentions":{},"msgtype":"m.text"},"ts":1720921511808,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uQG5mWUmTQ8YHsAhDAg9QcA6fMbU7krAtC-GM1os89A"},
{"content":{"body":"I skipped a lot of the discussion, but do shared properties have to appear as data properties, or could they appear as own accessors?","msgtype":"m.text"},"ts":1720921667410,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_0S4jIY-it3VTv0pMGzgMmMXzcT2eO3qRFcfKLzD26A"},
{"content":{"body":"I guess accessors would be a significant overhead and that engines wouldn't always be able to optimize the same as data props?","msgtype":"m.text"},"ts":1720921738743,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SfEmEOSKhlG7uE8zdDrTn56cEyHAkbM32x5G6Ke4W4s"},
{"content":{"body":"The problem we are trying to solve is how to explain unsafe blocks. I don’t see how accessors help.","msgtype":"m.text"},"ts":1720922113487,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uidzLo5OWmfeihF9F_3TyqgxqVACsUyI8IXi0xxhaK8"},
{"content":{"body":"Well accessors means there are no issues with any of the MOP and no special property descriptions ","msgtype":"m.text"},"ts":1720922308599,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g8MJXFu--MNDHaSoBgYQANxLYBXQzTmKJNYDqmVC9CA"},
{"content":{"body":"get *already* has a lexical rule for `\"use strict\"`. We could just encode [[Unsafe]] on a Reference Record just as we do [[Strict]], and just have the relevant operations check [[Unsafe]] when resolving the reference.","format":"org.matrix.custom.html","formatted_body":"get <em>already</em> has a lexical rule for <code>\"use strict\"</code>. We could just encode [[Unsafe]] on a Reference Record just as we do [[Strict]], and just have the relevant operations check [[Unsafe]] when resolving the reference.","m.mentions":{},"msgtype":"m.text"},"ts":1720922310700,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jCILp4wZOwTW_mWsaZ9SVdbq7Q7781Ybl2q9D00YYNY"},
{"content":{"body":"* Well accessors means there are no issues with any of the MOP and no special property descriptors","m.new_content":{"body":"Well accessors means there are no issues with any of the MOP and no special property descriptors","msgtype":"m.text"},"m.relates_to":{"event_id":"$g8MJXFu--MNDHaSoBgYQANxLYBXQzTmKJNYDqmVC9CA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720922321766,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$bULOH3F3KeeVkGs-kWUKa5Yo4UDDgh1XllyMzzMfRRI"},
{"content":{"body":"i.e., `GetValue` checks for [[Strict]] for variable references. We could modify Step 3.d to check for [[Unsafe]] and call baseObj.[[UnsafeGet]] in that case.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>GetValue</code> checks for [[Strict]] for variable references. We could modify Step 3.d to check for [[Unsafe]] and call baseObj.[[UnsafeGet]] in that case.","m.mentions":{},"msgtype":"m.text"},"ts":1720922429055,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ai29mVGBD4pnvk-965gmj6_9tC-P8nZ_jGZqTp1YO2g"},
{"content":{"body":"Of course we're just pushing the problem down into a problem of function invocation working differently depending on the context where the call occurs, sometimes nested in the case of Reflect.get calling an \"accessors\"","msgtype":"m.text"},"ts":1720922467161,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jzG020V4XanP9jC8Yg7CCfeBRAv0UKYwXZFLyMlMd0g"},
{"content":{"body":"Adding an [[UnsafeGet]] slot on objects seems to mesh better with the current spec than an UnsafeGet AO  ","m.mentions":{},"msgtype":"m.text"},"ts":1720922495371,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5-aW-pZ7lPUKuq8uu7nDUTIYp5LVBzT7kdTKhiYIW50"},
{"content":{"body":"It really feels that function coloring actually explains all this much better","msgtype":"m.text"},"ts":1720922554304,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ebirVYCGjy2w3IRdzAl0jXu4yPSv96AHuJ8pRFqqYsY"},
{"content":{"body":"If we don't have function coloring, we could just allow you to call the `Reflect.unsafeX` outside of an `unsafe` block. Its in the name, so it's already labeled unsafe.","format":"org.matrix.custom.html","formatted_body":"If we don't have function coloring, we could just allow you to call the <code>Reflect.unsafeX</code> outside of an <code>unsafe</code> block. Its in the name, so it's already labeled unsafe.","m.mentions":{},"msgtype":"m.text"},"ts":1720922565992,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BAER_yvsLgIa5pGfmixf2UThRYbtHoQgzX-kAa4cVPg"},
{"content":{"body":"> <@mhofman:matrix.org> Well accessors means there are no issues with any of the MOP and no special property descriptors\n\nHow are accessors supposed to know whether they are in an unsafe block?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24g8MJXFu--MNDHaSoBgYQANxLYBXQzTmKJNYDqmVC9CA\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Well accessors means there are no issues with any of the MOP and no special property descriptors</blockquote></mx-reply>How are accessors supposed to know whether they are in an unsafe block?","m.relates_to":{"m.in_reply_to":{"event_id":"$g8MJXFu--MNDHaSoBgYQANxLYBXQzTmKJNYDqmVC9CA"}},"msgtype":"m.text"},"ts":1720922603175,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K7EOKZzDoXAbICmpF_U39jt-0RthnASVWQoN6scuoqs"},
{"content":{"body":"> <@littledan:matrix.org> How are accessors supposed to know whether they are in an unsafe block?\n\nYes that's the problem. Accessor simply reduce to a single kind of problem: function calls, instead of also dealing with the other meta ops. But it remains a problem that it's hard to explain the behavior without function coloring ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$K7EOKZzDoXAbICmpF_U39jt-0RthnASVWQoN6scuoqs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />How are accessors supposed to know whether they are in an unsafe block?</blockquote></mx-reply>Yes that's the problem. Accessor simply reduce to a single kind of problem: function calls, instead of also dealing with the other meta ops. But it remains a problem that it's hard to explain the behavior without function coloring","m.relates_to":{"m.in_reply_to":{"event_id":"$K7EOKZzDoXAbICmpF_U39jt-0RthnASVWQoN6scuoqs"}},"msgtype":"m.text"},"ts":1720922713988,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y68X5SXhrkiyLANN93xv3fgtKTIFvcR1EfRFDewCFqM"},
{"content":{"body":"Could you describe how you picture function coloring to work?","msgtype":"m.text"},"ts":1720922772655,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BLfl6w_cbysKTJ5ukQcgH7ON0XfmRKJ0ttL8BG8I5pM"},
{"content":{"body":"e.g., something like this but with proper support for `receiver`\n```js\nReflect.unsafeGet = (obj, key) => {\n  if ({}.hasOwnProperty.call(obj, key)) {\n    unsafe {\n      return obj[key];\n    }\n  }\n  return Reflect.get(obj, key);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>e.g., something like this but with proper support for <code>receiver</code></p>\n<pre><code class=\"language-js\">Reflect.unsafeGet = (obj, key) =&gt; {\n  if ({}.hasOwnProperty.call(obj, key)) {\n    unsafe {\n      return obj[key];\n    }\n  }\n  return Reflect.get(obj, key);\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720922798697,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7qSpqzyumGVAgp-Co6HsQ6BE5i7HxNzgySeKbDM-zqc"},
{"content":{"body":"> <@littledan:matrix.org> How are accessors supposed to know whether they are in an unsafe block?\n\nAccessors like `get foo() { }`? They don't? They're just a function. If you expose a getter/setter on your struct you need to do your due diligence to make it safe to outside callers.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$K7EOKZzDoXAbICmpF_U39jt-0RthnASVWQoN6scuoqs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>How are accessors supposed to know whether they are in an unsafe block?</blockquote></mx-reply>Accessors like <code>get foo() { }</code>? They don't? They're just a function. If you expose a getter/setter on your struct you need to do your due diligence to make it safe to outside callers.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$K7EOKZzDoXAbICmpF_U39jt-0RthnASVWQoN6scuoqs"}},"msgtype":"m.text"},"ts":1720922877255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vPJX2En8tLlnMWjM_ffjhJ1xvRdD5b0QYczS0hdYJKw"},
{"content":{"body":"```js\nshared struct S {\n  #mut = new Atomics.Mutex();\n  #x;\n  get x() {\n    unsafe {\n      using lck = new Atomics.UniqueLock(this.#mut);\n      return this.#x;\n    }\n  }\n}\n```\nIt's nasty, but I suppose that's the point?","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">shared struct S {\n  #mut = new Atomics.Mutex();\n  #x;\n  get x() {\n    unsafe {\n      using lck = new Atomics.UniqueLock(this.#mut);\n      return this.#x;\n    }\n  }\n}\n</code></pre>\n<p>It's nasty, but I suppose that's the point?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720922965858,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fTyr5iKW7X01l3mozrz09AR1vfcSTUqpEBJsZv1U_R0"},
{"content":{"body":"Although, without function coloring I don't see how `accessor x;` could ever work. At least, not without doing `unsafe accessor x;` or `accessor x unsafe;` or something","format":"org.matrix.custom.html","formatted_body":"Although, without function coloring I don't see how <code>accessor x;</code> could ever work. At least, not without doing <code>unsafe accessor x;</code> or <code>accessor x unsafe;</code> or something","m.mentions":{},"msgtype":"m.text"},"ts":1720923097503,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PabQs89iCVIe_4rLEKRRWLWJPtZQDyPlSKHRu3eygIQ"},
{"content":{"body":"The way I picture function coloring is that every callable now has 2 ops: `[[Call]]` and `[[CallUnsafe]]`. If you are in an unsafe block, it's CallUnsafe that gets executed. For normal functions, CallUnsafe is the same as Call (maybe it's missing and it falls back to Call when missing?). For shared functions, Call throws (can only be called from unsafe blocks). Reflect and other intrinsics can have different Call and CallUnsafe behaviors, that effectively \"forward\" the unsafe state of the call site.","msgtype":"m.text"},"ts":1720923196506,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pkrBES5UkjkPAOry5wkOkHKMY-CkDUPEYFaPPx1XOZM"},
{"content":{"body":"this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like `struct Public(Mutex<Shared>)`, rather than `struct Public { mutex: Mutex<()>, shared: Shared }`","format":"org.matrix.custom.html","formatted_body":"this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like <code>struct Public(Mutex&lt;Shared&gt;)</code>, rather than <code>struct Public { mutex: Mutex&lt;()&gt;, shared: Shared }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720923223125,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ySXUbajSBiDt3Fmw4yvuTceMSrqgFZ6uV32AAgg75uA"},
{"content":{"body":"I'll have to follow up on any other discussion on Monday.","m.mentions":{},"msgtype":"m.text"},"ts":1720923241696,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c8DaQih8PobTAp3dtLmCqVql0hBOKC8cA5_tQ3BcoXM"},
{"content":{"body":" * this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like `struct Public(Mutex<Shared>)`, rather than `struct Shared { mutex: Mutex<()>, ...Shared }`","format":"org.matrix.custom.html","formatted_body":" * this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like <code>struct Public(Mutex&lt;Shared&gt;)</code>, rather than <code>struct Shared { mutex: Mutex&lt;()&gt;, ...Shared }</code>","m.mentions":{},"m.new_content":{"body":"this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like `struct Public(Mutex<Shared>)`, rather than `struct Shared { mutex: Mutex<()>, ...Shared }`","format":"org.matrix.custom.html","formatted_body":"this example makes me wonder something... should a shared struct even be exposed? in rust for example you'd write your code like <code>struct Public(Mutex&lt;Shared&gt;)</code>, rather than <code>struct Shared { mutex: Mutex&lt;()&gt;, ...Shared }</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ySXUbajSBiDt3Fmw4yvuTceMSrqgFZ6uV32AAgg75uA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720923244005,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$U_QHALKs7rdaopUUYn5jzhRqHNaOt1gzJt5ljaUjEyQ"},
{"content":{"body":"That example I gave is a bad one ","m.mentions":{},"msgtype":"m.text"},"ts":1720923322594,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yYzvUfLcbqhQ8g00YdF-Pj75wcdOTTJwvU5C6rOgkDc"},
{"content":{"body":"> <@mhofman:matrix.org> The way I picture function coloring is that every callable now has 2 ops: `[[Call]]` and `[[CallUnsafe]]`. If you are in an unsafe block, it's CallUnsafe that gets executed. For normal functions, CallUnsafe is the same as Call (maybe it's missing and it falls back to Call when missing?). For shared functions, Call throws (can only be called from unsafe blocks). Reflect and other intrinsics can have different Call and CallUnsafe behaviors, that effectively \"forward\" the unsafe state of the call site.\n\nthis sounds coherent to me, but it's not what I would call \"function coloring\", which would apply recursively somehow, like async/await","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$pkrBES5UkjkPAOry5wkOkHKMY-CkDUPEYFaPPx1XOZM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>The way I picture function coloring is that every callable now has 2 ops: `[[Call]]` and `[[CallUnsafe]]`. If you are in an unsafe block, it&#39;s CallUnsafe that gets executed. For normal functions, CallUnsafe is the same as Call (maybe it&#39;s missing and it falls back to Call when missing?). For shared functions, Call throws (can only be called from unsafe blocks). Reflect and other intrinsics can have different Call and CallUnsafe behaviors, that effectively &quot;forward&quot; the unsafe state of the call site.</blockquote></mx-reply>this sounds coherent to me, but it's not what I would call \"function coloring\", which would apply recursively somehow, like async/await","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pkrBES5UkjkPAOry5wkOkHKMY-CkDUPEYFaPPx1XOZM"}},"msgtype":"m.text"},"ts":1720923335083,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2hXqV0uT013_wKJwHepB6f68mCMVNXe_fiD3qIdbpYc"},
{"content":{"body":"But yes, we think a shared struct should be exposed. Mutex and shared struct are not strongly tied to each other.","m.mentions":{},"msgtype":"m.text"},"ts":1720923357369,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RPvRH4dRAvC9VM1obp4vuKnc8Ed1eXJ_-j9zEF0p12M"},
{"content":{"body":"Function coloring does not imply recursive application. Async/await poisoning occurs because you are taking an inherently sequential, synchronous operation and want to turn it into a sequential asynchronous operation.","m.mentions":{},"msgtype":"m.text"},"ts":1720923432247,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zxDyawyh3k79yQtY2e_Mzj_QLpAKeci2qaWwHbqjoHg"},
{"content":{"body":"> <@littledan:matrix.org> this sounds coherent to me, but it's not what I would call \"function coloring\", which would apply recursively somehow, like async/await\n\nRight, technically you can have an `CallUnsafe` implementation that is not itself an unsafe scope ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$2hXqV0uT013_wKJwHepB6f68mCMVNXe_fiD3qIdbpYc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />this sounds coherent to me, but it's not what I would call \"function coloring\", which would apply recursively somehow, like async/await</blockquote></mx-reply>Right, technically you can have an <code>CallUnsafe</code> implementation that is not itself an unsafe scope","m.relates_to":{"m.in_reply_to":{"event_id":"$2hXqV0uT013_wKJwHepB6f68mCMVNXe_fiD3qIdbpYc"}},"msgtype":"m.text"},"ts":1720923469191,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Mehzmnw8Wjw0c_Kxv39y66uge3t0f7Bw9r22si1OLa8"},
{"content":{"body":"Async/await has function coloring (of a sort), but function coloring is not async/await.","m.mentions":{},"msgtype":"m.text"},"ts":1720923478110,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GFxwom1mfCZfRDui-81c4zdoH0vtWnPbMZclya1GiVU"},
{"content":{"body":"no i don't mean you should have to use mutex specifically, that's just the example here.","m.mentions":{},"msgtype":"m.text"},"ts":1720923492050,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wQ1bP509hGOI1Nnf2KC4JyL7GSi96Ov0AiS1K7oUUsY"},
{"content":{"body":"(I'm not criticizing the approach, it's just drastically different from what I expected when people started using the term \"function coloring\")","m.mentions":{},"msgtype":"m.text"},"ts":1720923509852,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZZcUEdNX_8Rr-DP3n5-7CdyBOvfsRFltRGKhIbHgPlU"},
{"content":{"body":"> <@devsnek:matrix.org> no i don't mean you should have to use mutex specifically, that's just the example here.\n\nyou can organize your code however you want. My use cases have entire object graphs of shared objects with any coordination being through  lock-free concurrent collections.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$wQ1bP509hGOI1Nnf2KC4JyL7GSi96Ov0AiS1K7oUUsY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>no i don&#39;t mean you should have to use mutex specifically, that&#39;s just the example here.</blockquote></mx-reply>you can organize your code however you want. My use cases have entire object graphs of shared objects with any coordination being through  lock-free concurrent collections.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wQ1bP509hGOI1Nnf2KC4JyL7GSi96Ov0AiS1K7oUUsY"}},"msgtype":"m.text"},"ts":1720923593814,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FX2FI71zY2h9vfOstrkTKJm6BSHgeA7Bh2o0m_btRm4"},
{"content":{"body":"> <@littledan:matrix.org> (I'm not criticizing the approach, it's just drastically different from what I expected when people started using the term \"function coloring\")\n\nIt's possible I also misunderstood what people had in mind, but that is what I understood could work","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ZZcUEdNX_8Rr-DP3n5-7CdyBOvfsRFltRGKhIbHgPlU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />(I'm not criticizing the approach, it's just drastically different from what I expected when people started using the term &quot;function coloring&quot;)</blockquote></mx-reply>It's possible I also misunderstood what people had in mind, but that is what I understood could work","m.relates_to":{"m.in_reply_to":{"event_id":"$ZZcUEdNX_8Rr-DP3n5-7CdyBOvfsRFltRGKhIbHgPlU"}},"msgtype":"m.text"},"ts":1720923647723,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cQVrxcFk11phUiWxRUD1ZJBzpRPzhk_yb31QBViw-H4"},
{"content":{"body":"I was never concerned about function coloring, just that we didn't repeat async/await poisoning by essentially requiring your entire application to be inside of an `unsafe {}` block to use the feature. ","format":"org.matrix.custom.html","formatted_body":"I was never concerned about function coloring, just that we didn't repeat async/await poisoning by essentially requiring your entire application to be inside of an <code>unsafe {}</code> block to use the feature.","m.mentions":{},"msgtype":"m.text"},"ts":1720923758199,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q4hmd_-3AWv2tmgdcjSRyidTS7Z45M3Q0aPcJKdH6Fo"},
{"content":{"body":"I think it would even be possible to make proxies work that way. As well as let user land do the same as intrinsics by having functions that have dual safe and unsafe behaviors","msgtype":"m.text"},"ts":1720923765614,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$bhXlNOlnXbqCl6wGgSLaQTBQl5ndm04j5WryqCv1ts8"},
{"content":{"body":"keeping `unsafe` localized to just the code that is actually unsafe is important. ","format":"org.matrix.custom.html","formatted_body":"keeping <code>unsafe</code> localized to just the code that is actually unsafe is important.","m.mentions":{},"msgtype":"m.text"},"ts":1720923792534,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qTScx-jCmcFI85cM24TGbiZH2ON0s54cM8m6_OD1228"},
{"content":{"body":"Having functions that are aware of the context with which they are invoked is nothing new. `unsafe` is more like `this` than `async`/`await`, to be honest. `async` functions don't care how you call them and its up to the callers to determine if they want to use `await` or `.then`.","format":"org.matrix.custom.html","formatted_body":"Having functions that are aware of the context with which they are invoked is nothing new. <code>unsafe</code> is more like <code>this</code> than <code>async</code>/<code>await</code>, to be honest. <code>async</code> functions don't care how you call them and its up to the callers to determine if they want to use <code>await</code> or <code>.then</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720923858212,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ekTWQnUoWTQJaEi3q3gpad0JWeWjE--9LH4H4OFY-lI"},
{"content":{"body":"> <@rbuckton:matrix.org> I was never concerned about function coloring, just that we didn't repeat async/await poisoning by essentially requiring your entire application to be inside of an `unsafe {}` block to use the feature. \n\nYeah I think that's accomplished by letting you start an unsafe block without modifying the signature of the surrounding function ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$q4hmd_-3AWv2tmgdcjSRyidTS7Z45M3Q0aPcJKdH6Fo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br />I was never concerned about function coloring, just that we didn't repeat async/await poisoning by essentially requiring your entire application to be inside of an <code>unsafe {}</code> block to use the feature.</blockquote></mx-reply>Yeah I think that's accomplished by letting you start an unsafe block without modifying the signature of the surrounding function","m.relates_to":{"m.in_reply_to":{"event_id":"$q4hmd_-3AWv2tmgdcjSRyidTS7Z45M3Q0aPcJKdH6Fo"}},"msgtype":"m.text"},"ts":1720923877871,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mdIzPIYxAH0J5vBJWZGtJmEE5Y8CWMW8OYvSB8Fcf0k"},
{"content":{"body":"Having an operation that throws outside of `unsafe` is more like having a function that throws if you give it the wrong `this`.","format":"org.matrix.custom.html","formatted_body":"Having an operation that throws outside of <code>unsafe</code> is more like having a function that throws if you give it the wrong <code>this</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720923884573,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$c5q6U-QBFzh2y_4ZAAohBBWSmNHFlX9sl9xf-Nyqkms"},
{"content":{"body":"From a spec perspective, we just have to carry along this extra bit of information that indicates whether you were inside or outside of an `unsafe` block before you get/set.","format":"org.matrix.custom.html","formatted_body":"From a spec perspective, we just have to carry along this extra bit of information that indicates whether you were inside or outside of an <code>unsafe</code> block before you get/set.","m.mentions":{},"msgtype":"m.text"},"ts":1720923982128,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bnlrfwRABcqWagZgYtC2MXXyoGZ2ELWd-F6J1K9o4y4"},
{"content":{"body":"Aside from whatever we decide for `Reflect`, we could just ship with `unsafe {}` and add \"function coloring\" later if needs be.","format":"org.matrix.custom.html","formatted_body":"Aside from whatever we decide for <code>Reflect</code>, we could just ship with <code>unsafe {}</code> and add \"function coloring\" later if needs be.","m.mentions":{},"msgtype":"m.text"},"ts":1720924041658,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$f6fbD-uf3nx4uGjBJOFGQDs5ajITUuUnFnSEGNqrAYE"},
{"content":{"body":"For something like `unsafe function f() {}` I was less concerned with \"function coloring\" and more about improving the DX by moving the `unsafe` out of the block to cover the contents of the whole function (including parameter lists). I think the fact I proposed it as a prefix keyword led to the \"function coloring\" implication of unsafe functions in Rust, that the function itself is somehow unsafe. But it could just as easily have been `function f() unsafe { }` (and is an alternative I mentioned in the related issue on the repo).","format":"org.matrix.custom.html","formatted_body":"For something like <code>unsafe function f() {}</code> I was less concerned with \"function coloring\" and more about improving the DX by moving the <code>unsafe</code> out of the block to cover the contents of the whole function (including parameter lists). I think the fact I proposed it as a prefix keyword led to the \"function coloring\" implication of unsafe functions in Rust, that the function itself is somehow unsafe. But it could just as easily have been <code>function f() unsafe { }</code> (and is an alternative I mentioned in the related issue on the repo).","m.mentions":{},"msgtype":"m.text"},"ts":1720924183535,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Tk3nuuKMiplPR_nP0LJAUNL_kBFeILqCH0n7tEd71g0"},
{"content":{"body":"I'm just not a fan of the C++ namespace nesting style. It looks terrible and there's no reason we should repeat that approach.","m.mentions":{},"msgtype":"m.text"},"ts":1720924250083,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$uHu-jo9EYvcJH-KPb90DdWt-Etrt-ozWL0XCoqV9nVQ"},
{"content":{"body":"what if you want a function that should be unsafe to call","m.mentions":{},"msgtype":"m.text"},"ts":1720924263944,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$gIGbYYCFy0OjGTVnlTQXY9Ee-aH3MX0zVf5fJIC-Isc"},
{"content":{"body":" * what if you want a function that should be unsafe to call, `unsafe` on the declaration referring to the body seems inverted to the expectation of someone using that function.","format":"org.matrix.custom.html","formatted_body":" * what if you want a function that should be unsafe to call, <code>unsafe</code> on the declaration referring to the body seems inverted to the expectation of someone using that function.","m.mentions":{},"m.new_content":{"body":"what if you want a function that should be unsafe to call, `unsafe` on the declaration referring to the body seems inverted to the expectation of someone using that function.","format":"org.matrix.custom.html","formatted_body":"what if you want a function that should be unsafe to call, <code>unsafe</code> on the declaration referring to the body seems inverted to the expectation of someone using that function.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$gIGbYYCFy0OjGTVnlTQXY9Ee-aH3MX0zVf5fJIC-Isc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720924339612,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$eonY8rueD8GD9G5xJsKquci-tFKNDVHnDbsLomDMpHI"},
{"content":{"body":"> <@devsnek:matrix.org> what if you want a function that should be unsafe to call, `unsafe` on the declaration referring to the body seems inverted to the expectation of someone using that function.\n\nThen we reserve the prefix position for that, where `unsafe <x> ...` means \"x is unsafe and does unsafe things\" while `<x> unsafe ...` means \"x is safe, but does unsafe things\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$gIGbYYCFy0OjGTVnlTQXY9Ee-aH3MX0zVf5fJIC-Isc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>what if you want a function that should be unsafe to call, <code>unsafe</code> on the declaration referring to the body seems inverted to the expectation of someone using that function.</blockquote></mx-reply>Then we reserve the prefix position for that, where <code>unsafe &lt;x&gt; ...</code> means \"x is unsafe and does unsafe things\" while <code>&lt;x&gt; unsafe ...</code> means \"x is safe, but does unsafe things\".","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gIGbYYCFy0OjGTVnlTQXY9Ee-aH3MX0zVf5fJIC-Isc"}},"msgtype":"m.text"},"ts":1720924355960,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$e_-Cuya4yttuLmqgiAluC877yHb2AGHaxZ5xQUcTDg4"},
{"content":{"body":"i.e., `function f() unsafe {}` is just shorthand for `function f() { unsafe { } }`. You use that for functions in your API that are at the safe/unsafe boundary. `unsafe function f() {}`, if we added it, would only be intended to be used for functions inside of your library/app that don't perform any locking as they expect to be called from code that has already done any necessary coordination.","format":"org.matrix.custom.html","formatted_body":"i.e., <code>function f() unsafe {}</code> is just shorthand for <code>function f() { unsafe { } }</code>. You use that for functions in your API that are at the safe/unsafe boundary. <code>unsafe function f() {}</code>, if we added it, would only be intended to be used for functions inside of your library/app that don't perform any locking as they expect to be called from code that has already done any necessary coordination.","m.mentions":{},"msgtype":"m.text"},"ts":1720924514995,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bxwrh16m3sBvuhoElRvuTrPEG4P6gEk5U_iUyNuXGps"},
{"content":{"body":"that sounds reasonable","m.mentions":{},"msgtype":"m.text"},"ts":1720924583923,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$5KXPKpQesx-z7R1pAii5Mp3sxTV-l23amQretXdDfB8"},
{"content":{"body":"i like composing with block syntax everywhere","m.mentions":{},"msgtype":"m.text"},"ts":1720924592359,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$wH6vo4CCCvSwEwA5boy4qxZ9dJtvA_s6z8ZeOa5wBlE"},
{"content":{"body":"`unsafe` should be as narrow as reasonable, while being as broad as is useful. I like the idea of being able to write `shared struct S unsafe {}` and have the whole body be unsafe, but also having `shared struct S { foo() unsafe { } }` when I want to limit exposure at the edges of a public API.","format":"org.matrix.custom.html","formatted_body":"<code>unsafe</code> should be as narrow as reasonable, while being as broad as is useful. I like the idea of being able to write <code>shared struct S unsafe {}</code> and have the whole body be unsafe, but also having <code>shared struct S { foo() unsafe { } }</code> when I want to limit exposure at the edges of a public API.","m.mentions":{},"msgtype":"m.text"},"ts":1720924661348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x6X-vyF_vzz5lJpHCqY-FXBskydWmPHYUlohccIY3EA"},
{"content":{"body":" * `unsafe` should be as narrow as is reasonable, while being as broad as is useful. I like the idea of being able to write `shared struct S unsafe {}` and have the whole body be unsafe, but also having `shared struct S { foo() unsafe { } }` when I want to limit exposure at the edges of a public API.","format":"org.matrix.custom.html","formatted_body":" * <code>unsafe</code> should be as narrow as is reasonable, while being as broad as is useful. I like the idea of being able to write <code>shared struct S unsafe {}</code> and have the whole body be unsafe, but also having <code>shared struct S { foo() unsafe { } }</code> when I want to limit exposure at the edges of a public API.","m.mentions":{},"m.new_content":{"body":"`unsafe` should be as narrow as is reasonable, while being as broad as is useful. I like the idea of being able to write `shared struct S unsafe {}` and have the whole body be unsafe, but also having `shared struct S { foo() unsafe { } }` when I want to limit exposure at the edges of a public API.","format":"org.matrix.custom.html","formatted_body":"<code>unsafe</code> should be as narrow as is reasonable, while being as broad as is useful. I like the idea of being able to write <code>shared struct S unsafe {}</code> and have the whole body be unsafe, but also having <code>shared struct S { foo() unsafe { } }</code> when I want to limit exposure at the edges of a public API.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$x6X-vyF_vzz5lJpHCqY-FXBskydWmPHYUlohccIY3EA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720924673234,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4S-cIxnDPcINi0QVPO5ID2zT8GT7Th9cMK7QM8BGPe0"},
{"content":{"body":"for example, I might have a `shared struct ConcurrentDeque<T> { ... }` whose public methods are safe to use and whose contents are private and encapsulated. But I might also want to have a `shared struct RingBuffer<T> unsafe { ... }` because the whole body will contain unsafe code and the struct won't be exposed outside of my API.","format":"org.matrix.custom.html","formatted_body":"for example, I might have a <code>shared struct ConcurrentDeque&lt;T&gt; { ... }</code> whose public methods are safe to use and whose contents are private and encapsulated. But I might also want to have a <code>shared struct RingBuffer&lt;T&gt; unsafe { ... }</code> because the whole body will contain unsafe code and the struct won't be exposed outside of my API.","m.mentions":{},"msgtype":"m.text"},"ts":1720924802602,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qUALVp-M8Wl7GNxi4O2PLL68Q-kuygMnuCuI_TIeGlo"},
{"content":{"body":"We can defer \"function coloring\" till later. For example, we could add `Reflect.unsafeGet` now, which internally applies `unsafe` and thus can be used outside of an `unsafe {}` block, and if we add \"function coloring\" we could possibly modify `Reflect.get` to have some way to know. Maybe even add a `function.unsafe` metaproperty that lets you know if you were called from an unsafe context (which better explains a `Reflect.get` that works conditionally based on invocation context)","format":"org.matrix.custom.html","formatted_body":"We can defer \"function coloring\" till later. For example, we could add <code>Reflect.unsafeGet</code> now, which internally applies <code>unsafe</code> and thus can be used outside of an <code>unsafe {}</code> block, and if we add \"function coloring\" we could possibly modify <code>Reflect.get</code> to have some way to know. Maybe even add a <code>function.unsafe</code> metaproperty that lets you know if you were called from an unsafe context (which better explains a <code>Reflect.get</code> that works conditionally based on invocation context)","m.mentions":{},"msgtype":"m.text"},"ts":1720924946661,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HW4YwzoBAaMdXMbH7UQqX80t2rTZeKa5-kyvZvs5Uvg"},
{"content":{"body":" * We can defer \"function coloring\" 'til later. For example, we could add `Reflect.unsafeGet` now, which internally applies `unsafe` and thus can be used outside of an `unsafe {}` block, and if we add \"function coloring\" we could possibly modify `Reflect.get` to have some way to know. Maybe even add a `function.unsafe` metaproperty that lets you know if you were called from an unsafe context (which better explains a `Reflect.get` that works conditionally based on invocation context)","format":"org.matrix.custom.html","formatted_body":" * We can defer \"function coloring\" 'til later. For example, we could add <code>Reflect.unsafeGet</code> now, which internally applies <code>unsafe</code> and thus can be used outside of an <code>unsafe {}</code> block, and if we add \"function coloring\" we could possibly modify <code>Reflect.get</code> to have some way to know. Maybe even add a <code>function.unsafe</code> metaproperty that lets you know if you were called from an unsafe context (which better explains a <code>Reflect.get</code> that works conditionally based on invocation context)","m.mentions":{},"m.new_content":{"body":"We can defer \"function coloring\" 'til later. For example, we could add `Reflect.unsafeGet` now, which internally applies `unsafe` and thus can be used outside of an `unsafe {}` block, and if we add \"function coloring\" we could possibly modify `Reflect.get` to have some way to know. Maybe even add a `function.unsafe` metaproperty that lets you know if you were called from an unsafe context (which better explains a `Reflect.get` that works conditionally based on invocation context)","format":"org.matrix.custom.html","formatted_body":"We can defer \"function coloring\" 'til later. For example, we could add <code>Reflect.unsafeGet</code> now, which internally applies <code>unsafe</code> and thus can be used outside of an <code>unsafe {}</code> block, and if we add \"function coloring\" we could possibly modify <code>Reflect.get</code> to have some way to know. Maybe even add a <code>function.unsafe</code> metaproperty that lets you know if you were called from an unsafe context (which better explains a <code>Reflect.get</code> that works conditionally based on invocation context)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HW4YwzoBAaMdXMbH7UQqX80t2rTZeKa5-kyvZvs5Uvg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720924960596,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$VHTgynbR-6QRfk4kwopF7EQOXl0IGClg6SU5ra4mlkk"},
{"content":{"body":" * We can defer \"function coloring\" 'til later. For example, we could add `Reflect.unsafeGet` now, which internally applies `unsafe` and thus can be used outside of an `unsafe {}` block, and have `Reflect.get` always throw on shared struct fields. If we add \"function coloring\" later we could possibly modify `Reflect.get` to have some way to know. Maybe even add a `function.unsafe` metaproperty that lets you know if you were called from an unsafe context (which better explains a `Reflect.get` that works conditionally based on invocation context)","format":"org.matrix.custom.html","formatted_body":" * We can defer \"function coloring\" 'til later. For example, we could add <code>Reflect.unsafeGet</code> now, which internally applies <code>unsafe</code> and thus can be used outside of an <code>unsafe {}</code> block, and have <code>Reflect.get</code> always throw on shared struct fields. If we add \"function coloring\" later we could possibly modify <code>Reflect.get</code> to have some way to know. Maybe even add a <code>function.unsafe</code> metaproperty that lets you know if you were called from an unsafe context (which better explains a <code>Reflect.get</code> that works conditionally based on invocation context)","m.mentions":{},"m.new_content":{"body":"We can defer \"function coloring\" 'til later. For example, we could add `Reflect.unsafeGet` now, which internally applies `unsafe` and thus can be used outside of an `unsafe {}` block, and have `Reflect.get` always throw on shared struct fields. If we add \"function coloring\" later we could possibly modify `Reflect.get` to have some way to know. Maybe even add a `function.unsafe` metaproperty that lets you know if you were called from an unsafe context (which better explains a `Reflect.get` that works conditionally based on invocation context)","format":"org.matrix.custom.html","formatted_body":"We can defer \"function coloring\" 'til later. For example, we could add <code>Reflect.unsafeGet</code> now, which internally applies <code>unsafe</code> and thus can be used outside of an <code>unsafe {}</code> block, and have <code>Reflect.get</code> always throw on shared struct fields. If we add \"function coloring\" later we could possibly modify <code>Reflect.get</code> to have some way to know. Maybe even add a <code>function.unsafe</code> metaproperty that lets you know if you were called from an unsafe context (which better explains a <code>Reflect.get</code> that works conditionally based on invocation context)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HW4YwzoBAaMdXMbH7UQqX80t2rTZeKa5-kyvZvs5Uvg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720925025912,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Bzhi_a7_mcdgR5E18-0x5EqvvK688unHFqPgIAmioWQ"},
{"content":{"body":"e.g., evolve in steps:\n1. `unsafe {}` and _maybe_ postfix-`unsafe` for block declaration bodies. `Reflect.unsafeX` methods where necessary that can be used from normal code since they're labeled \"unsafe\".\n2. `function.unsafe` metaproperty so you can explicitly check whether you're being called from `unsafe` code. Modify `Reflect.X` functions to conditionally work inside of `unsafe` using the same context.\n3. prefix-`unsafe` keywords for functions/methods that essentially check `function.unsafe` for you and whose contents are implicitly `unsafe`.","format":"org.matrix.custom.html","formatted_body":"<p>e.g., evolve in steps:</p>\n<ol>\n<li><code>unsafe {}</code> and <em>maybe</em> postfix-<code>unsafe</code> for block declaration bodies. <code>Reflect.unsafeX</code> methods where necessary that can be used from normal code since they're labeled \"unsafe\".</li>\n<li><code>function.unsafe</code> metaproperty so you can explicitly check whether you're being called from <code>unsafe</code> code. Modify <code>Reflect.X</code> functions to conditionally work inside of <code>unsafe</code> using the same context.</li>\n<li>prefix-<code>unsafe</code> keywords for functions/methods that essentially check <code>function.unsafe</code> for you and whose contents are implicitly <code>unsafe</code>.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720925237809,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nA4-BudAxlOOPduiVgoB2FZDxogWCTCINJZ-bbBRyYM"},
{"content":{"body":" * e.g., evolve in steps:\n\n1. `unsafe {}` . `Reflect.unsafeX` methods where necessary that can be used from normal code since they're labeled \"unsafe\".\n2. postfix-`unsafe` keyword for block declaration bodies to improve DX.\n3. `function.unsafe` metaproperty so you can explicitly check whether you're being called from `unsafe` code. Modify `Reflect.X` functions to conditionally work inside of `unsafe` using the same context.\n4. prefix-`unsafe` keyword for functions/methods that essentially check `function.unsafe` for you and whose contents are implicitly `unsafe`.","format":"org.matrix.custom.html","formatted_body":" * <p>e.g., evolve in steps:</p>\n<ol>\n<li><code>unsafe {}</code> . <code>Reflect.unsafeX</code> methods where necessary that can be used from normal code since they're labeled \"unsafe\".</li>\n<li>postfix-<code>unsafe</code> keyword for block declaration bodies to improve DX.</li>\n<li><code>function.unsafe</code> metaproperty so you can explicitly check whether you're being called from <code>unsafe</code> code. Modify <code>Reflect.X</code> functions to conditionally work inside of <code>unsafe</code> using the same context.</li>\n<li>prefix-<code>unsafe</code> keyword for functions/methods that essentially check <code>function.unsafe</code> for you and whose contents are implicitly <code>unsafe</code>.</li>\n</ol>\n","m.mentions":{},"m.new_content":{"body":"e.g., evolve in steps:\n\n1. `unsafe {}` . `Reflect.unsafeX` methods where necessary that can be used from normal code since they're labeled \"unsafe\".\n2. postfix-`unsafe` keyword for block declaration bodies to improve DX.\n3. `function.unsafe` metaproperty so you can explicitly check whether you're being called from `unsafe` code. Modify `Reflect.X` functions to conditionally work inside of `unsafe` using the same context.\n4. prefix-`unsafe` keyword for functions/methods that essentially check `function.unsafe` for you and whose contents are implicitly `unsafe`.","format":"org.matrix.custom.html","formatted_body":"<p>e.g., evolve in steps:</p>\n<ol>\n<li><code>unsafe {}</code> . <code>Reflect.unsafeX</code> methods where necessary that can be used from normal code since they're labeled \"unsafe\".</li>\n<li>postfix-<code>unsafe</code> keyword for block declaration bodies to improve DX.</li>\n<li><code>function.unsafe</code> metaproperty so you can explicitly check whether you're being called from <code>unsafe</code> code. Modify <code>Reflect.X</code> functions to conditionally work inside of <code>unsafe</code> using the same context.</li>\n<li>prefix-<code>unsafe</code> keyword for functions/methods that essentially check <code>function.unsafe</code> for you and whose contents are implicitly <code>unsafe</code>.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nA4-BudAxlOOPduiVgoB2FZDxogWCTCINJZ-bbBRyYM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720925306058,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-deuxzUrEuNfWDuVKzgHQ3TwdpmkCwKdZzv6lHjWl0o"},
{"content":{"body":"prefix should probably not make the body unsafe. rust is in the process of undoing that right now 😄","m.mentions":{},"msgtype":"m.text"},"ts":1720925542812,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$9dcAEc03QiZCxhFQ0VmFvnqVbf1zTkbm-SF8f9_gFIw"},
{"content":{"body":"Why would it not? What would be the point otherwise? ","msgtype":"m.text"},"ts":1720925842874,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$czLbdVcDlpe3kR7n55dMyZxD_21Tqp0zrS8qP5VcUOo"},
{"content":{"body":"I definitely don't want to have to write `unsafe function f() unsafe {}`, that's repetitive and redundant and likely to confuse developers. ","format":"org.matrix.custom.html","formatted_body":"I definitely don't want to have to write <code>unsafe function f() unsafe {}</code>, that's repetitive and redundant and likely to confuse developers.","msgtype":"m.text"},"ts":1720925933553,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N2okpxBxagRxt7TgOLq5L5SrgxT_AMTDnXsVgSPsKSs"},
{"content":{"body":"it prevents you from scoping unsafe code within the function","m.mentions":{},"msgtype":"m.text"},"ts":1720926012771,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6lnuz_TSYwebiy6-vtX425I1ewhvCKfhtlGPk3G4gX0"},
{"content":{"body":"i feel like unsafe as a concept is large enough to be its own proposal 😄","m.mentions":{},"msgtype":"m.text"},"ts":1720926198872,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_xOHYjO_aciqotVjDOBRsUX71z8UwJaoVV2k_oWTgiU"},
{"content":{"body":"If you are limiting the unsafe scope in the function, why would you Cecelia the function unsafe? ","msgtype":"m.text"},"ts":1720926288937,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$BVdCEb5EuuGXlKsArxvgGWbqOYZv6megfemu2qiQgns"},
{"content":{"body":"* If you are limiting the unsafe scope in the function, why would you declare the function unsafe? ","m.new_content":{"body":"If you are limiting the unsafe scope in the function, why would you declare the function unsafe? ","msgtype":"m.text"},"m.relates_to":{"event_id":"$BVdCEb5EuuGXlKsArxvgGWbqOYZv6megfemu2qiQgns","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720926299867,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yK-iNQ84_yx-9hk9O3fvivH_rcEQxdB-oIoBY9ja39M"},
{"content":{"body":"(on phone and autocorrect failed me)","msgtype":"m.text"},"ts":1720926323824,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E9iG5Wn8AMxebfcF6Rpw3RL8MujxyDxv_X2FgdmD4ms"},
{"content":{"body":"perhaps the function itself does not perform locking, and relies on the caller for that","m.mentions":{},"msgtype":"m.text"},"ts":1720926404291,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$X56i81VscWFCMD8ehiWDSuRvYl6lSJmjjpAwxDU_xkY"},
{"content":{"body":"If we decided to add a `function.unsafe` metaproperty, then we could handle the case of limiting scope while still \"coloring the function\" ","format":"org.matrix.custom.html","formatted_body":"If we decided to add a <code>function.unsafe</code> metaproperty, then we could handle the case of limiting scope while still &quot;coloring the function&quot;","msgtype":"m.text"},"ts":1720926435158,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q6XXJ1TpCixR4HLw1uGc0Hjval4MwFTvQH9QCPFz8YU"},
{"content":{"body":"i don't think function color is actually a problem here, it just exists to control how you think about your program. you can always write a safe wrapper around any function regardless of what color it is.","m.mentions":{},"msgtype":"m.text"},"ts":1720926561770,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$4sbjVAJjfu67GaYiahPZ26IiLx8sKA9oc6XQc7J7jxU"},
{"content":{"body":"Ooh, better idea `in.unsafe` 🤔","format":"org.matrix.custom.html","formatted_body":"Ooh, better idea <code>in.unsafe</code> 🤔","msgtype":"m.text"},"ts":1720926598606,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$RQO31j-z5Cpwp_jqQFEyeo54Zoh7fwf0YKJ9XvnJe_M"},
{"content":{"body":"i feel like the reason for unsafe existing and making unsafe a magic property you can control flow on are kind of ad odds with each other","m.mentions":{},"msgtype":"m.text"},"ts":1720926696624,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$dKi3M845o6Tb3MWz5g-4WzMpT7JYyzzUl4TnWd0-aHU"},
{"content":{"body":"Well, maybe not better.","m.mentions":{},"msgtype":"m.text"},"ts":1720926702384,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Yk2WL4jOowY7QJ4FbCLTKC_lcX6p9ZgqbKGz82pDDvM"},
{"content":{"body":" * i feel like the reason for unsafe existing and making unsafe a magic property you can control flow on are kind of at odds with each other","m.mentions":{},"m.new_content":{"body":"i feel like the reason for unsafe existing and making unsafe a magic property you can control flow on are kind of at odds with each other","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dKi3M845o6Tb3MWz5g-4WzMpT7JYyzzUl4TnWd0-aHU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720926704666,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$55ovOIDHXHVMIJacbkoVSdA15JL_NKa7nSYPefP1QMM"},
{"content":{"body":"I think having `unsafe function f()` only color the function but not mark the body as `unsafe` would be terribly confusing.","format":"org.matrix.custom.html","formatted_body":"I think having <code>unsafe function f()</code> only color the function but not mark the body as <code>unsafe</code> would be terribly confusing.","m.mentions":{},"msgtype":"m.text"},"ts":1720926793561,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_SJQ_wKQyub-Oe-rHfGLG4waq6HFzhp2uBqjejHLGZg"},
{"content":{"body":"i think it makes a lot of sense, unless you require that every statement in an unsafe function is itself unsafe","m.mentions":{},"msgtype":"m.text"},"ts":1720926840727,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3GzqNxcxXb8RYz4dR85sYrMaFRYfkLvGJxKVMSjVpyw"},
{"content":{"body":"But if we wanted to have `Reflect.get` only work on shared structs inside of `unsafe`, that is more dependent on a `function.unsafe`-like control flow operation than function coloring.","format":"org.matrix.custom.html","formatted_body":"But if we wanted to have <code>Reflect.get</code> only work on shared structs inside of <code>unsafe</code>, that is more dependent on a <code>function.unsafe</code>-like control flow operation than function coloring.","m.mentions":{},"msgtype":"m.text"},"ts":1720926858415,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Rul4QQ1s6ToOZQMml2LnGhwp9wqAxW6KPFyjC8qK6Tg"},
{"content":{"body":"> <@devsnek:matrix.org> i think it makes a lot of sense, unless you require that every statement in an unsafe function is itself unsafe\n\nThat doesn't seem feasible or sensible.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$3GzqNxcxXb8RYz4dR85sYrMaFRYfkLvGJxKVMSjVpyw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>i think it makes a lot of sense, unless you require that every statement in an unsafe function is itself unsafe</blockquote></mx-reply>That doesn't seem feasible or sensible.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$3GzqNxcxXb8RYz4dR85sYrMaFRYfkLvGJxKVMSjVpyw"}},"msgtype":"m.text"},"ts":1720926920710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ypwHDuKM8YH6nioIbqGzeD8QEjxWJlES9wpfUGUGse8"},
{"content":{"body":"yeah i mean that's sort of my point. the implementation of the function is probably a mix of safe and unsafe, and you're likely interested in calling attention to certain parts of it without allowing more unsafe code to slip in unnoticed.","m.mentions":{},"msgtype":"m.text"},"ts":1720926965124,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$issr3ZI31Jisaa_NGrt7Nf2hUAQzB1Y3eTlrgbAD9Dk"},
{"content":{"body":"I absolutely don't want people to have to write dozens of `unsafe {}` blocks in a single function if they don't need to.","format":"org.matrix.custom.html","formatted_body":"I absolutely don't want people to have to write dozens of <code>unsafe {}</code> blocks in a single function if they don't need to.","m.mentions":{},"msgtype":"m.text"},"ts":1720927063272,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$q6WkaR1FBRh6Eqv3ffQJN-EBNP2ygFhEKK4Hhi4qVbY"},
{"content":{"body":"and wrt reflect.get... if a struct wanted to participate in some existing code that uses reflect.get somewhere internally, it would have to expose a getter that enforces that access of that property is safe, so that the `reflect.get` is not unsafe. having an `unsafe` somewhere above it does not enforce the constraint that the `reflect.get` was written with reasonable intent.","format":"org.matrix.custom.html","formatted_body":"and wrt reflect.get... if a struct wanted to participate in some existing code that uses reflect.get somewhere internally, it would have to expose a getter that enforces that access of that property is safe, so that the <code>reflect.get</code> is not unsafe. having an <code>unsafe</code> somewhere above it does not enforce the constraint that the <code>reflect.get</code> was written with reasonable intent.","m.mentions":{},"msgtype":"m.text"},"ts":1720927076241,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Ah_jNwvsZ50O8LHdOvPFibKvneiiRYB_y1uKY2UE4fQ"},
{"content":{"body":"They can if they want to, obviously, but that shouldn't be a requirement.","m.mentions":{},"msgtype":"m.text"},"ts":1720927096968,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$40fv_jzf455M_eyzt6J6-revgBNs_8FhTFAQKRu0EdM"},
{"content":{"body":"> they don't need to.\nwhat does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>they don't need to.<br>what does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720927144604,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$1UYN7I7CDZa-B9IupyVhXSDYVbzdz9EQ0wQOowZfzCQ"},
{"content":{"body":" * > they don't need to.\n\nwhat does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>they don't need to.</p>\n</blockquote>\n<p>what does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.</p>\n","m.mentions":{},"m.new_content":{"body":"> they don't need to.\n\nwhat does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>they don't need to.</p>\n</blockquote>\n<p>what does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1UYN7I7CDZa-B9IupyVhXSDYVbzdz9EQ0wQOowZfzCQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720927152530,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MUwuby7ujF74w3oqiQukQqzFKFA8M0peUTxUs2LB-dM"},
{"content":{"body":"If we had the ability to mark a shared struct property as `writable: false`, then it could potentially become safe to read outside of an `unsafe {}` block since it can no longer change.","format":"org.matrix.custom.html","formatted_body":"If we had the ability to mark a shared struct property as <code>writable: false</code>, then it could potentially become safe to read outside of an <code>unsafe {}</code> block since it can no longer change.","m.mentions":{},"msgtype":"m.text"},"ts":1720927159442,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4HLLBwF7q_HXgyEDKPqi7lb4_coo4v3Yn00FJGWHbvw"},
{"content":{"body":"it could also just be readable from [[Get]] in that case","m.mentions":{},"msgtype":"m.text"},"ts":1720927192928,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$y6NHABWTzOl8LepUoA7cwUcGyWIV273xDW0mVchRLDY"},
{"content":{"body":"> <@devsnek:matrix.org> > they don't need to.\n> \n> what does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.\n\nI think I was taking your \"only write unsafe statements in `unsafe {}` blocks\" to the extreme. There are a lot of JS operations that are \"safe\" and juggling `unsafe {}` blocks to work around that would be a nightmare. The reality is more that `unsafe {}` should be scoped to the level that you, as a developer, need it to be.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1UYN7I7CDZa-B9IupyVhXSDYVbzdz9EQ0wQOowZfzCQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br><blockquote>\n<p>they don't need to.</p>\n</blockquote>\n<p>what does need to mean? if the point of unsafe existing is to call your attention to certain code, i'd say the \"need\" is making each occurrence as targeted as possible.</p>\n</blockquote></mx-reply>I think I was taking your \"only write unsafe statements in <code>unsafe {}</code> blocks\" to the extreme. There are a lot of JS operations that are \"safe\" and juggling <code>unsafe {}</code> blocks to work around that would be a nightmare. The reality is more that <code>unsafe {}</code> should be scoped to the level that you, as a developer, need it to be.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1UYN7I7CDZa-B9IupyVhXSDYVbzdz9EQ0wQOowZfzCQ"}},"msgtype":"m.text"},"ts":1720927379167,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZaCDR1SrdCgO7mNLCK8-lYFyKQjupkGOieZ5ji6omaY"},
{"content":{"body":"But having `unsafe function f() {}` not making the body unsafe would break with existing JS paradigms like `async` and `function*`.","format":"org.matrix.custom.html","formatted_body":"But having <code>unsafe function f() {}</code> not making the body unsafe would break with existing JS paradigms like <code>async</code> and <code>function*</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720927429774,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FXWt6xD5UH_0Ivzf2Tf2yeYCudt3mjvLr4KOFOSL0bM"},
{"content":{"body":"wdym break","m.mentions":{},"msgtype":"m.text"},"ts":1720927449612,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$VAGQiO5a3ok71l-0dDju7qxFofXI7puPoB1LPSRlin0"},
{"content":{"body":"break with, as in differ from in a way that could be confusing.","m.mentions":{},"msgtype":"m.text"},"ts":1720927468049,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8QosL_Xu5AqbI8E1FhC3cgJ2avH2LzuhzhZ3ONGCfKc"},
{"content":{"body":"break away from, deviate","m.mentions":{},"msgtype":"m.text"},"ts":1720927485324,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WgkkRMLks1EPXlv8X-cGRoNuEViOQcQllUn4rqWG8bc"},
{"content":{"body":"I'd like to argue for the principle of least surprise here. If I say a function is `unsafe`, then I expect it to be unsafe.","format":"org.matrix.custom.html","formatted_body":"I'd like to argue for the principle of least surprise here. If I say a function is <code>unsafe</code>, then I expect it to be unsafe.","m.mentions":{},"msgtype":"m.text"},"ts":1720927559238,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9wj1emRfX6UicJKahM2hgjbrf8MA8OQA_Ng2pphlgDs"},
{"content":{"body":"oh i see. i don't think i've seen any evidence that similar constructs are confusing in other languages. `unsafe`/`extern`/etc in rust and c++ and c and on and on are good prior art there","format":"org.matrix.custom.html","formatted_body":"oh i see. i don't think i've seen any evidence that similar constructs are confusing in other languages. <code>unsafe</code>/<code>extern</code>/etc in rust and c++ and c and on and on are good prior art there","m.mentions":{},"msgtype":"m.text"},"ts":1720927565674,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TOec72o8ktFy-RilEEpod-q5shBsfOYP0FQNikTLsec"},
{"content":{"body":"i lack hard data one way or another though","m.mentions":{},"msgtype":"m.text"},"ts":1720927585809,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$877LOFUxBl-tfUUUW2E8K8-KAeL2fEMOzBuqaYhsPw8"},
{"content":{"body":"If unsafe only colors the function and does not apply to the body, then it differs from `async` or `*` in that regard.","format":"org.matrix.custom.html","formatted_body":"If unsafe only colors the function and does not apply to the body, then it differs from <code>async</code> or <code>*</code> in that regard.","m.mentions":{},"msgtype":"m.text"},"ts":1720927590185,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2kTxkL1Zia9SEfmkw4-8YfJ8-7OSvqd1t5XgdRmVyf8"},
{"content":{"body":"its also not a dangerous confusion. if you expect the body to be unsafe and it isn't, you haven't done anything unsafe accidentally","m.mentions":{},"msgtype":"m.text"},"ts":1720927655285,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$HghRR6X1Xd_M4LNdN5v1WW5blFsG-ibudLcPTykdFOM"},
{"content":{"body":"If we wanted to give a way to just color a function without marking the lexical scope, we could offer up a decorator for that purpose.","m.mentions":{},"msgtype":"m.text"},"ts":1720927669519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-G2bTMHTofJt3yFDrH7OUAoux6TJUi-wU0u4yhxF4WY"},
{"content":{"body":"But to back up for a bit, If we wanted `Reflect.get` to have different behavior inside or outside of `unsafe`, or for proxies to be able to convey whether their hooks are evaluated in unsafe code, that is not actually something that is solved by function coloring.","format":"org.matrix.custom.html","formatted_body":"But to back up for a bit, If we wanted <code>Reflect.get</code> to have different behavior inside or outside of <code>unsafe</code>, or for proxies to be able to convey whether their hooks are evaluated in unsafe code, that is not actually something that is solved by function coloring.","m.mentions":{},"msgtype":"m.text"},"ts":1720927788003,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WwdIbeB0ub_Qc3B56-SJkBVac9s0Tn7K_Ms6auVVTMo"},
{"content":{"body":"Function coloring seems more of a binary state. You are either safe to call, or you are not. Conditional behavior based on context is different.","m.mentions":{},"msgtype":"m.text"},"ts":1720927839092,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PosLczgvV9Wsho7l1fXoMCtLKn9BrcoxqBuWLodMeF0"},
{"content":{"body":"`function.unsafe` would explain that and would be accessible to proxies.","format":"org.matrix.custom.html","formatted_body":"<code>function.unsafe</code> would explain that and would be accessible to proxies.","m.mentions":{},"msgtype":"m.text"},"ts":1720927884088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LbzCC3GzPe0m3Y1kYvGP0vBPzdolxMbLJ9UTjzxL22Y"},
{"content":{"body":"the conditional behavior makes me feel uncomfortable ","m.mentions":{},"msgtype":"m.text"},"ts":1720927888096,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$URRL6pVdWwEgTzakFvJNdBsMYZ9o2nmbRhy9c2RWxwo"},
{"content":{"body":"also why would proxies need it, isn't this already disambiguated to them via get vs getUnsafe?","m.mentions":{},"msgtype":"m.text"},"ts":1720927902823,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_8YNJPWCfCM3bDU010K_jrxL5xMHzgBI_NMXFDNgH0k"},
{"content":{"body":" * also why would proxies need it, isn't this already disambiguated to them via [[Get]] vs [[GetUnsafe]]?","m.mentions":{},"m.new_content":{"body":"also why would proxies need it, isn't this already disambiguated to them via [[Get]] vs [[GetUnsafe]]?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_8YNJPWCfCM3bDU010K_jrxL5xMHzgBI_NMXFDNgH0k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720927926939,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$iW0q-ObxnjC_ebxp7BpDfUrWRh0XhUypQErI-qzVJRw"},
{"content":{"body":"The question is more, do we need a separate `getUnsafe` hook?","format":"org.matrix.custom.html","formatted_body":"The question is more, do we need a separate <code>getUnsafe</code> hook?","m.mentions":{},"msgtype":"m.text"},"ts":1720927954257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wdQXkj5OPyknWPkDBe6yqk0__JxboStyLYQP6sC8k4o"},
{"content":{"body":"if we represent this as a new mop operation then i think that is sort of implied right","m.mentions":{},"msgtype":"m.text"},"ts":1720927979850,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6qEC1UxpHza7ZYe7mQHx-NxCP6-pZq2DoGTlkxn2THY"},
{"content":{"body":"The [[Get]] vs [[GetUnsafe]] is more of a design we were initially discussing for implementations. It could also just be an argument passed to the MOP operation","m.mentions":{},"msgtype":"m.text"},"ts":1720928004626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cvhLclLA2cLqSfc8jEr1cDuq5W6YFSWC886hrO8IQvc"},
{"content":{"body":"then it would be an argument passed to the get method of the proxy","m.mentions":{},"msgtype":"m.text"},"ts":1720928023047,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$PYGiXA7o-DmeFa2Cim21FAzz3u8Bv7XVlEwQSXDQdUA"},
{"content":{"body":" * The \\[\\[Get\\]\\] vs \\[\\[GetUnsafe\\]\\] is more of a design we were initially discussing for implementations. It could also just be an argument passed to the MOP operation as far as the spec is concerned.","format":"org.matrix.custom.html","formatted_body":" * The [[Get]] vs [[GetUnsafe]] is more of a design we were initially discussing for implementations. It could also just be an argument passed to the MOP operation as far as the spec is concerned.","m.mentions":{},"m.new_content":{"body":"The \\[\\[Get\\]\\] vs \\[\\[GetUnsafe\\]\\] is more of a design we were initially discussing for implementations. It could also just be an argument passed to the MOP operation as far as the spec is concerned.","format":"org.matrix.custom.html","formatted_body":"The [[Get]] vs [[GetUnsafe]] is more of a design we were initially discussing for implementations. It could also just be an argument passed to the MOP operation as far as the spec is concerned.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cvhLclLA2cLqSfc8jEr1cDuq5W6YFSWC886hrO8IQvc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720928027543,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$izky7faMuRsoHooa6GKHlxn5cil7xQkY0au1wl7ztyw"},
{"content":{"body":"That's also an option, but then it would be something only a Proxy could observe but couldn't be observed from user code. Then again, so would an `unsafeGet` hook","format":"org.matrix.custom.html","formatted_body":"That's also an option, but then it would be something only a Proxy could observe but couldn't be observed from user code. Then again, so would an <code>unsafeGet</code> hook","m.mentions":{},"msgtype":"m.text"},"ts":1720928115716,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QZfCmRGcbpeLv7U39l9MC-AjBTpV5UDy8hitKmSznWA"},
{"content":{"body":"what does \"observed from user code\" mean? you already can't observe what operator something used to reach your function, you have to trap it with a proxy.","m.mentions":{},"msgtype":"m.text"},"ts":1720928173648,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$MpP3SwA_VjX08RSGNSHRMkwmDrXjwQiWKw_TIKGexbY"},
{"content":{"body":"Having a set of `get`/`unsafeGet`, `set`/`unsafeSet`, `apply`/`unsafeApply`, etc. hooks is just as conditional as `function.unsafe`","format":"org.matrix.custom.html","formatted_body":"Having a set of <code>get</code>/<code>unsafeGet</code>, <code>set</code>/<code>unsafeSet</code>, <code>apply</code>/<code>unsafeApply</code>, etc. hooks is just as conditional as <code>function.unsafe</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720928176161,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Xh4e4O6wnTeXbWUd0gopqJ0Jr70XvSJlRcMDYWBiw_c"},
{"content":{"body":"yes... function calls are a form of control flow. that's not what i meant earlier though...","m.mentions":{},"msgtype":"m.text"},"ts":1720928403277,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cGZNBgKTmqgEs-b-NauAt9jWNbUEXTs_m0AALcGL-Ps"},
{"content":{"body":"We have `new.target` to differentiate between `Reflect.apply`/`f()` and `Reflect.construct`/`new`","format":"org.matrix.custom.html","formatted_body":"We have <code>new.target</code> to differentiate between <code>Reflect.apply</code>/<code>f()</code> and <code>Reflect.construct</code>/<code>new</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720928453769,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rOu4W0CynF_K7uHV8-J5raf5wPPrwQG4iaGfbfC6zl0"},
{"content":{"body":"in class constructors it does not represent that. and using it in normal functions is not a common pattern anymore.","m.mentions":{},"msgtype":"m.text"},"ts":1720928590645,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$s4ynQs89FfPNv-bxVJIQecmyes4ZLY17s1Fym6uZ-_Y"},
{"content":{"body":"I think we're getting into the weeds with this discussion. I can understand the perspective that you might want to color the function without making the body `unsafe`, I'm just not sure I agree with it. There are *many* C++ idioms I'd rather not repeat in JS, and as much as I want to increase the flexibility of the language, I prefer to find ways that are in keeping with the current design of the language where possible.","format":"org.matrix.custom.html","formatted_body":"I think we're getting into the weeds with this discussion. I can understand the perspective that you might want to color the function without making the body <code>unsafe</code>, I'm just not sure I agree with it. There are <em>many</em> C++ idioms I'd rather not repeat in JS, and as much as I want to increase the flexibility of the language, I prefer to find ways that are in keeping with the current design of the language where possible.","m.mentions":{},"msgtype":"m.text"},"ts":1720928696556,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eX0j_GvcNa3J0Wal3KmLiFoSfryKDfSn7CjVBMYUNQk"},
{"content":{"body":"> <@devsnek:matrix.org> in class constructors it does not represent that. and using it in normal functions is not a common pattern anymore.\n\nThat is a product of class constructors having an intentionally broken `[[Call]]`, not a product of the design of `new.target`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$s4ynQs89FfPNv-bxVJIQecmyes4ZLY17s1Fym6uZ-_Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>in class constructors it does not represent that. and using it in normal functions is not a common pattern anymore.</blockquote></mx-reply>That is a product of class constructors having an intentionally broken <code>[[Call]]</code>, not a product of the design of <code>new.target</code>.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s4ynQs89FfPNv-bxVJIQecmyes4ZLY17s1Fym6uZ-_Y"}},"msgtype":"m.text"},"ts":1720928740048,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gk4NJMXZJtVoqhatVr92bxDitbteuIze_VXkDQ1ORO0"},
{"content":{"body":"In fact, `new.target` is a way that decorators could be used to easily define \"callbale classes\", which had their own proposal at one point.","format":"org.matrix.custom.html","formatted_body":"In fact, <code>new.target</code> is a way that decorators could be used to easily define \"callbale classes\", which had their own proposal at one point.","m.mentions":{},"msgtype":"m.text"},"ts":1720928783545,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$S16YqcnvZskj11uwGiqGm7BSsrA0qO8XFGRTgjZuMnw"},
{"content":{"body":" * In fact, `new.target` is a way that decorators could be used to easily define \"callable classes\", which had their own proposal at one point.","format":"org.matrix.custom.html","formatted_body":" * In fact, <code>new.target</code> is a way that decorators could be used to easily define \"callable classes\", which had their own proposal at one point.","m.mentions":{},"m.new_content":{"body":"In fact, `new.target` is a way that decorators could be used to easily define \"callable classes\", which had their own proposal at one point.","format":"org.matrix.custom.html","formatted_body":"In fact, <code>new.target</code> is a way that decorators could be used to easily define \"callable classes\", which had their own proposal at one point.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$S16YqcnvZskj11uwGiqGm7BSsrA0qO8XFGRTgjZuMnw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720928797786,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m8FjuIKdmWI4tkT4DwBchfiJfbpv1kihEZ8Ev6iYNTM"},
{"content":{"body":"In any case, it does exist and is a precedent.","m.mentions":{},"msgtype":"m.text"},"ts":1720928842345,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cIJSmQQpOWjFayj1VjPptVROR0Bt1uzlBHPEENO7vIo"},
{"content":{"body":"new.target exists therefore in.unsafe must also exist?","m.mentions":{},"msgtype":"m.text"},"ts":1720929003422,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-a65w48q-58UgjZalDjLYBYqitgpB1ShmPOYEG_1VYM"},
{"content":{"body":"`unsafe function f() unsafe {}` (or `unsafe function f() { unsafe { } }`) is aesthetically unpleasant and overly pedantic. ","format":"org.matrix.custom.html","formatted_body":"<code>unsafe function f() unsafe {}</code> (or <code>unsafe function f() { unsafe { } }</code>) is aesthetically unpleasant and overly pedantic.","m.mentions":{},"msgtype":"m.text"},"ts":1720929008695,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3T8cNUAtTCdGXO2hfbJoLgaeFqHOjttpkB_ZxGGMoFA"},
{"content":{"body":"Not `in.unsafe`, after I said that I realized that's pretty useless as you don't need to query if you're *in* an `unsafe` block, that's established lexically. `function.unsafe` is clearer as its tied to the invocation of the function/getter/constructor/etc., not the lexical context.","format":"org.matrix.custom.html","formatted_body":"Not <code>in.unsafe</code>, after I said that I realized that's pretty useless as you don't need to query if you're <em>in</em> an <code>unsafe</code> block, that's established lexically. <code>function.unsafe</code> is clearer as its tied to the invocation of the function/getter/constructor/etc., not the lexical context.","m.mentions":{},"msgtype":"m.text"},"ts":1720929073658,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OdRWlbHDOyw7ttvqzOOgyvn7Rx5EECBAeUJVzuoyQtQ"},
{"content":{"body":"replace my message with function.unsafe then","m.mentions":{},"msgtype":"m.text"},"ts":1720929101847,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$b4BTBpUmMI_JmZqHERvulLDQUgD51qAA9nL5a9hoe_k"},
{"content":{"body":"Not *must*, but it sets a precedent we could/should follow if we introduce something similar.","format":"org.matrix.custom.html","formatted_body":"Not <em>must</em>, but it sets a precedent we could/should follow if we introduce something similar.","m.mentions":{},"msgtype":"m.text"},"ts":1720929112671,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R83WVsoQEE6keKSHJXP-Fd_ftJxH8P3a8wKJM_8uL6o"},
{"content":{"body":" * replace my message with function.unsafe then, i don't care what its called","m.mentions":{},"m.new_content":{"body":"replace my message with function.unsafe then, i don't care what its called","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$b4BTBpUmMI_JmZqHERvulLDQUgD51qAA9nL5a9hoe_k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720929115187,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jtdTeke3eD-TPDa5gSCLg5AclGlh3dPlCDhdJclLkMo"},
{"content":{"body":"`apply`/`construct` are dual hooks that indicate whether a function was called without or with `new`, and can be observed in the function itself via `new.target`.","format":"org.matrix.custom.html","formatted_body":"<code>apply</code>/<code>construct</code> are dual hooks that indicate whether a function was called without or with <code>new</code>, and can be observed in the function itself via <code>new.target</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720929179755,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C2i4e8q8GCJba_4vCmA2v30Pkqu15wXgtzV5WIYLOdM"},
{"content":{"body":"should we add `function.async` too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal ","format":"org.matrix.custom.html","formatted_body":"should we add <code>function.async</code> too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal","m.mentions":{},"msgtype":"m.text"},"ts":1720929222982,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XTOk2B5tdsnwF8O5V6g5TJ6XsAffBcHRQu-qUZGeeMo"},
{"content":{"body":"Similarly, `get`/`unsafeGet` are dual hooks that indicate whether a field or accessor was accessed outside or inside an `unsafe` block, an can be observed within the accessor via `function.unsafe`. There are direct parallels","format":"org.matrix.custom.html","formatted_body":"Similarly, <code>get</code>/<code>unsafeGet</code> are dual hooks that indicate whether a field or accessor was accessed outside or inside an <code>unsafe</code> block, an can be observed within the accessor via <code>function.unsafe</code>. There are direct parallels","m.mentions":{},"msgtype":"m.text"},"ts":1720929235090,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Tthz9M_8Nc_bS2OkeRcYfzbT0gx1sM16WbaqkN-La5Q"},
{"content":{"body":"> <@devsnek:matrix.org> should we add `function.async` too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal\n\nNo because `await f()` are two distinct operations (call and then `await`). In `new f()` and `unsafe { f() }`, the context is intrinsically linked to the invocation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XTOk2B5tdsnwF8O5V6g5TJ6XsAffBcHRQu-qUZGeeMo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>should we add <code>function.async</code> too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal</blockquote></mx-reply>No because <code>await f()</code> are two distinct operations (call and then <code>await</code>). In <code>new f()</code> and <code>unsafe { f() }</code>, the context is intrinsically linked to the invocation.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XTOk2B5tdsnwF8O5V6g5TJ6XsAffBcHRQu-qUZGeeMo"}},"msgtype":"m.text"},"ts":1720929435359,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ii9JSIWpvqLS4-w248L5xeIOukpS7gYuvJu_WN9ino8"},
{"content":{"body":"> <@devsnek:matrix.org> should we add `function.async` too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal\n\n * No because `await f()` consists of two distinct operations (call and then `await`). In `new f()` and `unsafe { f() }`, the context is intrinsically linked to the invocation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XTOk2B5tdsnwF8O5V6g5TJ6XsAffBcHRQu-qUZGeeMo?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>should we add <code>function.async</code> too since it might've been awaited? i don't feel like this argument is self-consistent or based in any real goal</blockquote></mx-reply> * No because <code>await f()</code> consists of two distinct operations (call and then <code>await</code>). In <code>new f()</code> and <code>unsafe { f() }</code>, the context is intrinsically linked to the invocation.","m.mentions":{},"m.new_content":{"body":"No because `await f()` consists of two distinct operations (call and then `await`). In `new f()` and `unsafe { f() }`, the context is intrinsically linked to the invocation.","format":"org.matrix.custom.html","formatted_body":"No because <code>await f()</code> consists of two distinct operations (call and then <code>await</code>). In <code>new f()</code> and <code>unsafe { f() }</code>, the context is intrinsically linked to the invocation.","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ii9JSIWpvqLS4-w248L5xeIOukpS7gYuvJu_WN9ino8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720929451412,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OYfeS9cvgPDtNc0qSll64awsSID5EiRwkZ_tuDxVsuc"},
{"content":{"body":"called in an async function then, it doesn't really matter. my point is that we can expose any random detail of execution as an inspectable property, but the actual thing to discuss is whether doing so is meaningful, not whether its possible.","m.mentions":{},"msgtype":"m.text"},"ts":1720929547536,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$nksT-gShVS0q90HLF8e9zY5yo0Z-IIfXUJtRgWLnzzg"},
{"content":{"body":"The point of `function.sent` is it explains a world where `Reflect.get` has conditional behavior based on `unsafe {}`, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as `unsafe` but doesn't have an `unsafe` body\" ","format":"org.matrix.custom.html","formatted_body":"The point of <code>function.sent</code> is it explains a world where <code>Reflect.get</code> has conditional behavior based on <code>unsafe {}</code>, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as <code>unsafe</code> but doesn't have an <code>unsafe</code> body\"","m.mentions":{},"msgtype":"m.text"},"ts":1720929647512,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QJx8RG6eQ9FMcIo-9l6HV-RLw09qEXhH-IcG08sxu1w"},
{"content":{"body":" * The point of `function.unsafe` is it explains a world where `Reflect.get` has conditional behavior based on `unsafe {}`, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as `unsafe` but doesn't have an `unsafe` body\"","format":"org.matrix.custom.html","formatted_body":" * The point of <code>function.unsafe</code> is it explains a world where <code>Reflect.get</code> has conditional behavior based on <code>unsafe {}</code>, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as <code>unsafe</code> but doesn't have an <code>unsafe</code> body\"","m.mentions":{},"m.new_content":{"body":"The point of `function.unsafe` is it explains a world where `Reflect.get` has conditional behavior based on `unsafe {}`, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as `unsafe` but doesn't have an `unsafe` body\"","format":"org.matrix.custom.html","formatted_body":"The point of <code>function.unsafe</code> is it explains a world where <code>Reflect.get</code> has conditional behavior based on <code>unsafe {}</code>, and acts as a carve-out for the pedantic case of \"I want a function that acts like its colored as <code>unsafe</code> but doesn't have an <code>unsafe</code> body\"","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QJx8RG6eQ9FMcIo-9l6HV-RLw09qEXhH-IcG08sxu1w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720929652263,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q1wub29vkfU7ORPuYQQmHQRBX7mg3meYt1cM2F_ZZdY"},
{"content":{"body":"That doesn't have to be the answer, but I'm not a fan of repetition for the common case, especially when it diverges from other stylistic norms in JS like `async` and `*`","format":"org.matrix.custom.html","formatted_body":"That doesn't have to be the answer, but I'm not a fan of repetition for the common case, especially when it diverges from other stylistic norms in JS like <code>async</code> and <code>*</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720929717109,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oRtoS5xhe3P1XD8oD7wCfdBh0x-CQgHZxXnQVlqDELs"},
{"content":{"body":"Maybe we have an `unsafe function f() safe { }` for the pedantic case","format":"org.matrix.custom.html","formatted_body":"Maybe we have an <code>unsafe function f() safe { }</code> for the pedantic case","m.mentions":{},"msgtype":"m.text"},"ts":1720929751906,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rGNwEpjdaXssoohJJWtItQzjsv-OBJTrbmBCeItBPf8"},
{"content":{"body":"not that I really want two opposing keywords","m.mentions":{},"msgtype":"m.text"},"ts":1720929770383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hhK8Vo-T7o0wAVJ44YIQ0CbTVemG_DjPV1Yk8znMyNI"},
{"content":{"body":"it certainly does explain that, but what i was questioning above was not how to explain such behavior. it was whether such behavior should exist.","m.mentions":{},"msgtype":"m.text"},"ts":1720929777714,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$_6ZuWGpoWbG_vvCwYLco1azCVL0oDBqovQtaXrC4fwQ"},
{"content":{"body":"If we have split hooks, then conditional behavior exists so long as you use a Proxy, but if you need to use a Proxy just to only apply function coloring, that means you probably cannot use such a function in performance critical code. That's not a dealbreaker, as there are other ways to achieve \"colored-unsafe-but-not-unsafe\", such as \n```js\nunsafe function f() { return g(); }\nfunction g() {}\n```\nor\n```js\n@(t => unsafe function() { return t.apply(this, arguments); })\nfunction f() {\n}\n```\nor\n```js\n@MarkUnsafe function f() {}\n```\nor\n```js\nconst f = markUnsafe(function() {});\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>If we have split hooks, then conditional behavior exists so long as you use a Proxy, but if you need to use a Proxy just to only apply function coloring, that means you probably cannot use such a function in performance critical code. That's not a dealbreaker, as there are other ways to achieve \"colored-unsafe-but-not-unsafe\", such as</p>\n<pre><code class=\"language-js\">unsafe function f() { return g(); }\nfunction g() {}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-js\">@(t =&gt; unsafe function() { return t.apply(this, arguments); })\nfunction f() {\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-js\">@MarkUnsafe function f() {}\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-js\">const f = markUnsafe(function() {});\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720930265932,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$um7QIptAZZk8jevkU5FHgwDw6pqFIP-o248s3IJJNY0"},
{"content":{"body":"So we don't necessarily *need* `function.unsafe`, it just happens to check a number of boxes in the design.","format":"org.matrix.custom.html","formatted_body":"So we don't necessarily <em>need</em> <code>function.unsafe</code>, it just happens to check a number of boxes in the design.","m.mentions":{},"msgtype":"m.text"},"ts":1720930321885,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Z6xhIBnko5IayLnkH8A7mPP3iKtArRVn64egp5bsOUs"},
{"content":{"body":"what are the boxes that it checks","m.mentions":{},"msgtype":"m.text"},"ts":1720930385935,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$18x6jXiAvKrebzUkLMbdxWss1PMAFChEVB43l7CXc2I"},
{"content":{"body":"- Explains the behavior of a `Reflect.get` et al that differ based on whether they are called inside of `unsafe {}`\n- Allows user code to also emulate conditional behavior of `Reflect.get`, et al, performantly (i.e., not through a `Proxy`)\n- Provides an escape hatch for \"colored-unsafe-but-not-unsafe\" via `function f() { if (!function.unsafe) throw ...; }`\n- Thematically aligned with existing concepts in JS (in this case, `new.target`)","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Explains the behavior of a <code>Reflect.get</code> et al that differ based on whether they are called inside of <code>unsafe {}</code></li>\n<li>Allows user code to also emulate conditional behavior of <code>Reflect.get</code>, et al, performantly (i.e., not through a <code>Proxy</code>)</li>\n<li>Provides an escape hatch for \"colored-unsafe-but-not-unsafe\" via <code>function f() { if (!function.unsafe) throw ...; }</code></li>\n<li>Thematically aligned with existing concepts in JS (in this case, <code>new.target</code>)</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720930603577,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7uleb3dxYapkwg7u5JRpwosZ4kYdQgE9DwdZsbT-MzI"},
{"content":{"body":"sorry please believe me that i'm trying to engage in good faith here. but i feel like we just went in a circle. i asked why reflect.get should have magic behavior instead of requiring the shared struct to expose a safe property and you responded with \"this enables reflect.get to have magic behavior\" which doesn't answer my question.","m.mentions":{},"msgtype":"m.text"},"ts":1720930670306,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$M3o_FXpXfjmdZnjTVAsC7f_baJMTouu4BESiJu-uw64"},
{"content":{"body":"I thought this was about whether `unsafe function f() {}` marks the block unsafe? I was using the `function.unsafe` metaproperty as an escape hatch for anyone who needs a pedantic \"colored-unsafe-but-not-unsafe\" function, with examples of how such a metaproperty would explain various behaviors we've been discussing.","format":"org.matrix.custom.html","formatted_body":"I thought this was about whether <code>unsafe function f() {}</code> marks the block unsafe? I was using the <code>function.unsafe</code> metaproperty as an escape hatch for anyone who needs a pedantic \"colored-unsafe-but-not-unsafe\" function, with examples of how such a metaproperty would explain various behaviors we've been discussing.","m.mentions":{},"msgtype":"m.text"},"ts":1720930819397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WEirNctNDQxAJdPAn1rAMLuoHEDMkFAKc82sRzXBH30"},
{"content":{"body":"If we decide any of the bullets above aren't a goal, that obviously weakens `function.unsafe`. I'm also not arguing as a steadfast supporter of such a metaproperty, I honestly don't have a strong opinion on it. ","format":"org.matrix.custom.html","formatted_body":"If we decide any of the bullets above aren't a goal, that obviously weakens <code>function.unsafe</code>. I'm also not arguing as a steadfast supporter of such a metaproperty, I honestly don't have a strong opinion on it.","m.mentions":{},"msgtype":"m.text"},"ts":1720930893695,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3vaAzUhjlh4yJZqURCxC10cbYwGbb3uO6sxBtTdZnzY"},
{"content":{"body":"ah. i apologize for the confusiong.","m.mentions":{},"msgtype":"m.text"},"ts":1720930895999,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$R2txLOA_3F8c9be-NO1aymdr-Z5lDRXoQWX6PYLhd6g"},
{"content":{"body":" * ah. i apologize for the confusion.","m.mentions":{},"m.new_content":{"body":"ah. i apologize for the confusion.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$R2txLOA_3F8c9be-NO1aymdr-Z5lDRXoQWX6PYLhd6g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720930898247,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$lfVpyVkRaemZmyir7iaQFmmvqZgHlyCpADOSdAnp-j8"},
{"content":{"body":"My position is that `unsafe function f() { unsafe {} }` is a terrible design and we shouldn't need to do that.","format":"org.matrix.custom.html","formatted_body":"My position is that <code>unsafe function f() { unsafe {} }</code> is a terrible design and we shouldn't need to do that.","m.mentions":{},"msgtype":"m.text"},"ts":1720930956802,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KHzQXn49ozHJXhVJOqDe911e-Iczdklx1N0XXg4XEnw"},
{"content":{"body":"my experience from other languages is that it would not be that comically repetitive in practice. but perhaps we should write up some examples","m.mentions":{},"msgtype":"m.text"},"ts":1720931063758,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$cYtBTwG4MF07TVR4oSJ_dYpWAu-KDdCgBtKmsQa9Ui4"},
{"content":{"body":"The Rust language has very specific design goals in mind, and this kind of pedantry is part and parcel of that approach.","m.mentions":{},"msgtype":"m.text"},"ts":1720931078088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$D-FX9uUWLwTXtuj7HbDcie8c7Yl36v1o39ezfO9XXYI"},
{"content":{"body":"I've written several thousand lines of TypeScript code using the dev trial version of shared structs, and a lot of my concern comes from where I expect the boundaries would be if I had to litter that code with `unsafe {}`. I also strongly prefer language designs that cut down on excess ceremony and have consistent syntax and mechanics.","format":"org.matrix.custom.html","formatted_body":"I've written several thousand lines of TypeScript code using the dev trial version of shared structs, and a lot of my concern comes from where I expect the boundaries would be if I had to litter that code with <code>unsafe {}</code>. I also strongly prefer language designs that cut down on excess ceremony and have consistent syntax and mechanics.","m.mentions":{},"msgtype":"m.text"},"ts":1720931302536,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YFrnkFYeK2SvhFybSvMd-7dBCQvlnHjvc6I8IUHJiGg"},
{"content":{"body":"`unsafe {}` is already a compromise, I'd like to make it as unobtrusive as is feasible.","format":"org.matrix.custom.html","formatted_body":"<code>unsafe {}</code> is already a compromise, I'd like to make it as unobtrusive as is feasible.","m.mentions":{},"msgtype":"m.text"},"ts":1720931356847,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MoFWalf4DZFgCY45ykXTL3PiPwJNXMSzClOId577OX4"},
{"content":{"body":"In general, I'd prefer no function coloring at all. Have `Reflect.get` throw for shared struct fields and `Reflect.unsafeGet` work in or out of an `unsafe` block, or even just have `Reflect.get` always work on unsafe things since you're already reaching for something more complicated than `a.b`.","format":"org.matrix.custom.html","formatted_body":"In general, I'd prefer no function coloring at all. Have <code>Reflect.get</code> throw for shared struct fields and <code>Reflect.unsafeGet</code> work in or out of an <code>unsafe</code> block, or even just have <code>Reflect.get</code> always work on unsafe things since you're already reaching for something more complicated than <code>a.b</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720931471599,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ho6yNkIdwCmuxwjyxyc1NYuOpIl4uBdKn8EfLWF0qaI"},
{"content":{"body":"My initial proposal for `unsafe function f() {}` wasn't intended to imply coloring at all.","format":"org.matrix.custom.html","formatted_body":"My initial proposal for <code>unsafe function f() {}</code> wasn't intended to imply coloring at all.","m.mentions":{},"msgtype":"m.text"},"ts":1720931505167,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3qx01HktdydPMzIT4XMM6VbPsPOIqiE24aZiYfVVc9M"},
{"content":{"body":"i'm also fine with unsafe as a concept not existing. but if it must exist then i want us to at least get something with a reasonable usage model out of it 😄","m.mentions":{},"msgtype":"m.text"},"ts":1720931531819,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$6OGFPfG--Wpvibx4D4qRtzooJezcyMZ7JEaDs32q19Y"},
{"content":{"body":"So far as I understand it, it (or something much like it) must exist to achieve consensus. The less we have to go over and above that the better, but _whatever_ we choose to do with it beyond that, we must endeavor to align it with the rest of the JS language and follow from the same design choices and principles we've followed in the past. I don't want to add function coloring for function coloring's sake. I don't want it to become a repeat of `async`/`await` poisoning. I don't want it to have so much scope creep that the proposal never advances purely because we've tacked too many things on. If we have ways to leave space to incrementally adopt other functionality in the future, that's fine, but I've seen too many proposals take on too much and stagnate.","format":"org.matrix.custom.html","formatted_body":"So far as I understand it, it (or something much like it) must exist to achieve consensus. The less we have to go over and above that the better, but <em>whatever</em> we choose to do with it beyond that, we must endeavor to align it with the rest of the JS language and follow from the same design choices and principles we've followed in the past. I don't want to add function coloring for function coloring's sake. I don't want it to become a repeat of <code>async</code>/<code>await</code> poisoning. I don't want it to have so much scope creep that the proposal never advances purely because we've tacked too many things on. If we have ways to leave space to incrementally adopt other functionality in the future, that's fine, but I've seen too many proposals take on too much and stagnate.","m.mentions":{},"msgtype":"m.text"},"ts":1720932025539,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ESf4YnU6MVKWf2m1toppte3Vl3_xvYpH591QeFqKMlg"},
{"content":{"body":"well at the very least it won't be a repeat of async/await, because it is not viral ","m.mentions":{},"msgtype":"m.text"},"ts":1720932071273,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$qk2Pgl2BzBnjBYfi2XzMKoHADzHXqNhNOGsC-xkmHDU"},
{"content":{"body":" * well at the very least it won't be a repeat of async/await, because it is not viral, thank god","m.mentions":{},"m.new_content":{"body":"well at the very least it won't be a repeat of async/await, because it is not viral, thank god","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qk2Pgl2BzBnjBYfi2XzMKoHADzHXqNhNOGsC-xkmHDU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720932079336,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$TKaoY2EDHS8Ixb0Gz4Rs0xVw_0vQ0TB-neIjjNurgBo"},
{"content":{"body":"If we have strong motivations and clear rationale for why we need function coloring, then by all means lets find a solution for that. But if we can find an alternative that doesn't require it, I'm going to favor the alternative.","m.mentions":{},"msgtype":"m.text"},"ts":1720932126208,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yAzShFyuSQvz82PTMAwhEZz72dSjN6H_rwvoFMcwrds"}
]