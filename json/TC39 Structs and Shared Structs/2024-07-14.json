[
{"content":{"body":"Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:\n- There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.\n- Reflect.getUnsafe/setUnsafe expose these ops\n- inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe\n- Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)\n- Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.\n- if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:</p>\n<ul>\n<li>There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.</li>\n<li>Reflect.getUnsafe/setUnsafe expose these ops</li>\n<li>inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe</li>\n<li>Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)</li>\n<li>Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.</li>\n<li>if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.</li>\n</ul>","msgtype":"m.text"},"ts":1720915668433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BU_VgHa-0iqyn9sFTRRDpLunFyypTmwA88dofeXNtzU"},
{"content":{"body":"The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. ","format":"org.matrix.custom.html","formatted_body":"The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.","msgtype":"m.text"},"ts":1720919437743,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"},
{"content":{"body":"Though [[Get]] and [[Set]] would throw","msgtype":"m.text"},"ts":1720919527932,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FhMN5U5ApIgIlE0yYYJxMxtLOCKJ5glI8ounVqrFlmg"},
{"content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `umsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>umsafe</code> block at all","msgtype":"m.text"},"ts":1720919674328,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"},
{"content":{"body":"* What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","m.new_content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all","msgtype":"m.text"},"m.relates_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720919900291,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$261oOvwkMVpcBwNyg9xrTDiauhY-R5rk0Ri6kahI1TM"},
{"content":{"body":"> <@rbuckton:matrix.org> What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all\n\nI think we are saying the same thing ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all</blockquote></mx-reply>I think we are saying the same thing","m.relates_to":{"m.in_reply_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"}},"msgtype":"m.text"},"ts":1720920144856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KbCuv_XY72xtIJwD-_SmlEt5XVVQM7G6EDC80YLiM8"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1720920149811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bvQZFOPwKe7wZhvYJP_t8wTil9MTTlXL-iOTpoctoCU"},
{"content":{"body":"> <@rbuckton:matrix.org> The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. \n\nSure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.</blockquote></mx-reply>Sure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","m.relates_to":{"m.in_reply_to":{"event_id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"}},"msgtype":"m.text"},"ts":1720920186280,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nTFGtpyqrT8bkXqtRuBNYhLZlSrDlQn469Rfh5QYXNM"},
{"content":{"body":"The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want","msgtype":"m.text"},"ts":1720920202214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"},
{"content":{"body":"> <@rbuckton:matrix.org> The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want\n\nNot sure what you mean. It is still strings (or maybe symbols)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want</blockquote></mx-reply>Not sure what you mean. It is still strings (or maybe symbols)","m.relates_to":{"m.in_reply_to":{"event_id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"}},"msgtype":"m.text"},"ts":1720920225668,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aP-WZlu37x19qmqBArcSysaT7Qe7dMz9JsFAgk5SOBI"},
{"content":{"body":"I am not especially attached to the idea I wrote above, it is just the simplest thing I can imagine. How do you think unsafe blocks should work with respect to the MOP?","msgtype":"m.text"},"ts":1720920258648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gNcmuXsALFDKc0heqAghRv-6uSqeoiQ9DIHMVOAWtvg"},
{"content":{"body":"It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct","msgtype":"m.text"},"ts":1720920289226,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E"},
{"content":{"body":"> <@rbuckton:matrix.org> It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct\n\nNot transparent, just missing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%247fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct</blockquote></mx-reply>Not transparent, just missing","m.relates_to":{"m.in_reply_to":{"event_id":"$7fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E"}},"msgtype":"m.text"},"ts":1720920311699,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lrEgKSi6JUrpovd7YicCaccSU7JvtP-VwLJHfkf1Zgw"},
{"content":{"body":"Maybe that is what you meant","msgtype":"m.text"},"ts":1720920339950,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bSQKjlbB1vHxmU2zHB0C3jCRqugLhfpbrSTU7u2FmOc"},
{"content":{"body":"Yes, thats what I meant","m.mentions":{},"msgtype":"m.text"},"ts":1720920345225,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Pq8HciGkArIX1SZ9VgMgztrwr4hrL-_c0Tttd44K6Uo"},
{"content":{"body":"they cannot be missing","m.mentions":{},"msgtype":"m.text"},"ts":1720920348412,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$E17Kw2zMXt-C_OP6c6IMUWpzF7szgvNuzaD6xxqbcN8"},
{"content":{"body":"You cannot have a [[Get]] outside of `unsafe` return a prototype property if there was a struct field of the same name.","format":"org.matrix.custom.html","formatted_body":"You cannot have a [[Get]] outside of <code>unsafe</code> return a prototype property if there was a struct field of the same name.","m.mentions":{},"msgtype":"m.text"},"ts":1720920378953,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c"},
{"content":{"body":"Can you explain how you think it should work?","msgtype":"m.text"},"ts":1720920388074,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SA_BAqQJXycY0_ZSiXs2xl00koay0_fwxgb3LZRdvuI"},
{"content":{"body":"They have to treat them like normal properties, except that [[Get]] and [[Set]] throws.","m.mentions":{},"msgtype":"m.text"},"ts":1720920399929,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KQS6Gvij-FmHR-r8GImciTGM-BVjkq8ajiEv9hxrCNE"},
{"content":{"body":"How?","msgtype":"m.text"},"ts":1720920408147,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y7qcK25vgKrQFNnLsyCR65-VNMf437-9xLypJLyt-jA"},
{"content":{"body":"You override [[Get]] and [[Set]] for shared struct objects. ","m.mentions":{},"msgtype":"m.text"},"ts":1720920423961,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b4SyByIZqgG99Icl1NdqW1jt-g0aeIegMw2wYtuWaM4"},
{"content":{"body":"Those are abstract.","m.mentions":{},"msgtype":"m.text"},"ts":1720920431257,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Px2mBpD4fR6eEpoEHy78yAiCBNeGaQ5qKJBX0_dvt9o"},
{"content":{"body":"Will GetOwnPropertyDescriptor throw?","msgtype":"m.text"},"ts":1720920483827,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RjhsBEs0Hgc3jIZIhBmtdHey4j2xINFdafpnU1ZY2xE"},
{"content":{"body":"Lets say you have [[Get]], [[Set]], [[UnsafeGet]], and [[UnsafeSet]]. On all objects, [[UnsafeGet]]/[[UnsafeSet]] just forwards on to the ordinary get/set behavior.","m.mentions":{},"msgtype":"m.text"},"ts":1720920499055,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OrotfukffLgN5DK5SDF5cQ0lRFBGapBjcfhaiUsYLpE"},
{"content":{"body":"What happens in the unsafe blocks?","msgtype":"m.text"},"ts":1720920508213,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RIJBkeMuL3oWfi68v1czhCUQkkf7zl2zQ2IY-WiWams"},
{"content":{"body":"But shared structs have a [[Get]] and [[Set]] that throw.","m.mentions":{},"msgtype":"m.text"},"ts":1720920510988,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fCRTbsgEgdkEHuu0DqP5F0kazVSCVh2Gzlhl_Ums8lc"},
{"content":{"body":"In an unsafe block, get operations use [[UnsafeGet]]/[[UnsafeSet]] instead of [[Get]]/[[Set]]","m.mentions":{},"msgtype":"m.text"},"ts":1720920529179,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Zgv96cgrkKbjrj4b2Tr6zBQtk4CrjzSByrtmyWSRtyQ"},
{"content":{"body":"Even without `unsafe` we need to do something similar to handle shared memory access for shared struct fields in [[Get]] and [[Set]], so we already expect to pay this cost.","format":"org.matrix.custom.html","formatted_body":"Even without <code>unsafe</code> we need to do something similar to handle shared memory access for shared struct fields in [[Get]] and [[Set]], so we already expect to pay this cost.","m.mentions":{},"msgtype":"m.text"},"ts":1720920590003,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XRsy-vxgbOfYsUTvu5dHEbBM7EHbJipLTjTIvhewZ6E"},
{"content":{"body":"GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: false, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":"GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: false, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"msgtype":"m.text"},"ts":1720920661615,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dhC_4Bt4M_FOdGpqJh3NG2dBwme1H2OfYoG9dIckAec"},
{"content":{"body":"OK, so how does Object.getOwnPropertyDescriptor know if it’s in an unsafe block?","msgtype":"m.text"},"ts":1720920701513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ciVl-2orWc0xRCnoZHTBoebSVem90M_qayzmG9mcaE8"},
{"content":{"body":"But `in` and `Reflect.has` et al should work outside of unsafe because for a given reference to a shared struct, it will still have a fixed shape.","format":"org.matrix.custom.html","formatted_body":"But <code>in</code> and <code>Reflect.has</code> et al should work outside of unsafe because for a given reference to a shared struct, it will still have a fixed shape.","m.mentions":{},"msgtype":"m.text"},"ts":1720920707525,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GDp0YsQMAysAqLDmvb342T_fjw5qV4fzOn00WNZx7JE"},
{"content":{"body":"I was trying to avoid functions changing behavior based on their caller","msgtype":"m.text"},"ts":1720920741828,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QEKJ6o8Vx_-sz13LhpCeQcpl_zg7dlBsKL9g3sAdBbA"},
{"content":{"body":"> <@rbuckton:matrix.org> You cannot have a [[Get]] outside of `unsafe` return a prototype property if there was a struct field of the same name.\n\nI think this problem can be fixed in my suggestion without making any new MOP ops or anything","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>You cannot have a [[Get]] outside of <code>unsafe</code> return a prototype property if there was a struct field of the same name.</blockquote></mx-reply>I think this problem can be fixed in my suggestion without making any new MOP ops or anything","m.relates_to":{"m.in_reply_to":{"event_id":"$ZSUg7tOOp8MwYdwUu6T8erBJ8IWkjLc_SFvFYYLLd6c"}},"msgtype":"m.text"},"ts":1720920818739,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sBpIruMl-u9rLNe0w_UfyXnvwSOHeo7XhAYvG9iSA7Y"},
{"content":{"body":"We could have gOPD return a new kind of descriptor both in and out of `unsafe`, and an `Reflect.unsafeGetOwnPropertyDescriptor` that has the same magic that `Reflect.unsafeGet`/`Reflect.unsafeSet` would have (if any).","format":"org.matrix.custom.html","formatted_body":"We could have gOPD return a new kind of descriptor both in and out of <code>unsafe</code>, and an <code>Reflect.unsafeGetOwnPropertyDescriptor</code> that has the same magic that <code>Reflect.unsafeGet</code>/<code>Reflect.unsafeSet</code> would have (if any).","m.mentions":{},"msgtype":"m.text"},"ts":1720920824042,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZEIG3T2hT2mEo6SXe5m_1D1-RzMZ1Yordh5sOG8SBc4"},
{"content":{"body":"Maybe gOPD would throw if you don’t call the unsafe one?","msgtype":"m.text"},"ts":1720920889920,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XtwisCZpdJKfJVEG-FtvsECPfAhPeYCIajLLqArSNUI"},
{"content":{"body":"You need MOP operations to be reliable. What happens if I do `Object.create(sharedStruct)`? Now I have a normal JS object with a shared struct prototype. If I call [[Get]] on the result it should still throw if it tries to read a prototype field outside of `unsafe`.","format":"org.matrix.custom.html","formatted_body":"You need MOP operations to be reliable. What happens if I do <code>Object.create(sharedStruct)</code>? Now I have a normal JS object with a shared struct prototype. If I call [[Get]] on the result it should still throw if it tries to read a prototype field outside of <code>unsafe</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1720920901125,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DGuun7I33mq8ank15dq10fmuZxbdk8cFxin13UK3JCU"},
{"content":{"body":"Do we have unsafeDefineProperty?","msgtype":"m.text"},"ts":1720920911468,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mgAR8WnXR6jFk3yY7ZRWDQQP3dCLhTE3Gg-ipTTfWO4"},
{"content":{"body":"getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.","m.mentions":{},"msgtype":"m.text"},"ts":1720920922775,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs"},
{"content":{"body":"No. You can't call defineProperty on a shared struct, it would fail.","m.mentions":{},"msgtype":"m.text"},"ts":1720920934236,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$AYChz8Kk2zd5bbQrUnQQggJdaikfu-mjSNIgAQR-KfE"},
{"content":{"body":"Shared struct instances are sealed.","m.mentions":{},"msgtype":"m.text"},"ts":1720920939595,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aSsbLSTt2X8Ih19NHO0yHK130MxmdccvUtfVzEzYoKs"},
{"content":{"body":"No new properties, no deleting properties.","m.mentions":{},"msgtype":"m.text"},"ts":1720920946820,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4DojDe-GilD81QELxyqxAFoFXK80PTl8sofC1PLzFGU"},
{"content":{"body":"Even if the property descriptor matches what’s already there?","msgtype":"m.text"},"ts":1720920957754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oyb3FWgXsQleiULv37j2wU_m1jxn69uoAvO5Oomklj4"},
{"content":{"body":"> <@rbuckton:matrix.org> getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.\n\nProxy can ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>getOPD shouldn't throw. Nothing causes it to throw today, to my knowledge.</blockquote></mx-reply>Proxy can","m.relates_to":{"m.in_reply_to":{"event_id":"$wz-nUn3v4mYbEy7mNvjkgPAUxUj6kYSfpB5URBdqFcs"}},"msgtype":"m.text"},"ts":1720920966907,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QReWu_p-NfYVWh2d7z0Iw0pYYO5qt-QQylQKR746mhg"},
{"content":{"body":"Normal defineProperty would just fail because of the existing integrity checks","m.mentions":{},"msgtype":"m.text"},"ts":1720920968243,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js"},
{"content":{"body":"> <@rbuckton:matrix.org> Normal defineProperty would just fail because of the existing integrity checks\n\nI don’t think that’s the case if you define it as what it’s already defined to be, but with a different value ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Normal defineProperty would just fail because of the existing integrity checks</blockquote></mx-reply>I don’t think that’s the case if you define it as what it’s already defined to be, but with a different value","m.relates_to":{"m.in_reply_to":{"event_id":"$DU1vzqt4NggrPbXG-Danlr6iD8oX1zRvG0DpPeJ34Js"}},"msgtype":"m.text"},"ts":1720921003066,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L-Y0ZfRa-Y2Vs2aoCkTJ7NV9EJRDTFji-OmO8un32tc"},
{"content":{"body":"AFAIK, no developers code defensively against gOPD failing. ","m.mentions":{},"msgtype":"m.text"},"ts":1720921004363,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Qp4_LvIiuml2CG5rompbIoEydhFr-3TGqWYocZ03WlA"},
{"content":{"body":"That's fair","m.mentions":{},"msgtype":"m.text"},"ts":1720921014908,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$__gd4lBT3Jss1E-2JOX_NcD8ZapqfKjJbQHvt3lJpt4"},
{"content":{"body":" * GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: ?, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":" * GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: ?, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"m.new_content":{"body":"GetOwnPropertyDescriptor would probably throw outside of `unsafe`, or possibly would return a new descriptor that is `{ enumerable: ?, writable: ?, configurable: false, shared: true }` with no `value` property.","format":"org.matrix.custom.html","formatted_body":"GetOwnPropertyDescriptor would probably throw outside of <code>unsafe</code>, or possibly would return a new descriptor that is <code>{ enumerable: ?, writable: ?, configurable: false, shared: true }</code> with no <code>value</code> property.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dhC_4Bt4M_FOdGpqJh3NG2dBwme1H2OfYoG9dIckAec","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720921030588,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$C12hay0R0qIkT5zXzoFYFNiXj3q2FEBFubjMf3E_LqI"},
{"content":{"body":"Maybe we do need `unsafeDefineProperty`. I do want to be able to change `writable`","format":"org.matrix.custom.html","formatted_body":"Maybe we do need <code>unsafeDefineProperty</code>. I do want to be able to change <code>writable</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720921058616,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ahbuGAAUd4FBIw4wsZOWMsRaHVDZsfmmkQ7vUJcHRvI"},
{"content":{"body":"But you can't create new properties with it, ","m.mentions":{},"msgtype":"m.text"},"ts":1720921070780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$X8-1YOq7vqtRTddXetGjgSSqph2e5fRD6d0gpJAANZU"},
{"content":{"body":" * But you can't create new properties with it.","m.mentions":{},"m.new_content":{"body":"But you can't create new properties with it.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$X8-1YOq7vqtRTddXetGjgSSqph2e5fRD6d0gpJAANZU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720921075905,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rHNd9pc4RDx7i3EIslEjB2nSXgvLOTK27SBUDa4xvvE"},
{"content":{"body":"Maybe instead of `Reflect.unsafeX` we have `Reflect.unsafe.X` which just mirrors `Reflect`","format":"org.matrix.custom.html","formatted_body":"Maybe instead of <code>Reflect.unsafeX</code> we have <code>Reflect.unsafe.X</code> which just mirrors <code>Reflect</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720921146279,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI"},
{"content":{"body":"I would start simple and omit unsafeGOPD and unsafeDP, letting these always throw on shared struct data props. That might be the only observable difference between the ways we are thinking about this.","msgtype":"m.text"},"ts":1720921150058,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PwEcZI3JMRU8Hvc0wa6ReXCAMSMdUxxUExkvzZ1R2zY"},
{"content":{"body":"(except for `deleteProperty` since that will never work?)","format":"org.matrix.custom.html","formatted_body":"(except for <code>deleteProperty</code> since that will never work?)","m.mentions":{},"msgtype":"m.text"},"ts":1720921159738,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hfxOnhXFo86kZ4S6zlJPqG4MV896TVeNbpxZ1r8HsVY"},
{"content":{"body":"> <@rbuckton:matrix.org> Maybe instead of `Reflect.unsafeX` we have `Reflect.unsafe.X` which just mirrors `Reflect`\n\nI am a fan of namespace objects, but I don’t know how much of this we need to fill in","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Maybe instead of <code>Reflect.unsafeX</code> we have <code>Reflect.unsafe.X</code> which just mirrors <code>Reflect</code></blockquote></mx-reply>I am a fan of namespace objects, but I don’t know how much of this we need to fill in","m.relates_to":{"m.in_reply_to":{"event_id":"$Km9ylXGJ2E2SqeZ0T0uiAX9YUGeu-aUN8300NTzFBvI"}},"msgtype":"m.text"},"ts":1720921198617,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ge4-39iSqPNxSbJoz3VFzO-ZNl125v1RmmF_l5dmqks"},
{"content":{"body":"I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.","m.mentions":{},"msgtype":"m.text"},"ts":1720921218053,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw"},
{"content":{"body":"> <@rbuckton:matrix.org> I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.\n\nYeah I don’t think nonwritable is a good solution for this. We would need initializer lists. Anyway I imagined shared struct fields would be nonconfigurable","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I really would like to make fields non-writable, though I've been thinking we some kind of \"init-only\" modifier for fields that can only be initialized in the constructor.</blockquote></mx-reply>Yeah I don’t think nonwritable is a good solution for this. We would need initializer lists. Anyway I imagined shared struct fields would be nonconfigurable","m.relates_to":{"m.in_reply_to":{"event_id":"$geIYcujuEjeLYhKV1UJD-J7XyhzeiNH4WMV30iMjzjw"}},"msgtype":"m.text"},"ts":1720921278267,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CxzJUjtlkleckxB-1sVGkYH0vuUdoZq_OGCXoW9tTn0"},
{"content":{"body":"But we probably should have some kind of `getOwnPropertyDescriptor` support at some point.","format":"org.matrix.custom.html","formatted_body":"But we probably should have some kind of <code>getOwnPropertyDescriptor</code> support at some point.","m.mentions":{},"msgtype":"m.text"},"ts":1720921291569,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI"},
{"content":{"body":"Yes, they are non-configurable","m.mentions":{},"msgtype":"m.text"},"ts":1720921298103,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9C7e_m8biiKobKOO9RUmXeNxy6lJNtNhPNXUXTVEj2I"},
{"content":{"body":"So… no particular use for defineProperty then","msgtype":"m.text"},"ts":1720921340974,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$smy-BvMPaxW_VKHMaMLvd0ODuQ-FX-MenZ4YWFk9kUs"},
{"content":{"body":"> <@rbuckton:matrix.org> But we probably should have some kind of `getOwnPropertyDescriptor` support at some point.\n\nSome kind of introspection would be good, but maybe this should be focused on the class level","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%240AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>But we probably should have some kind of <code>getOwnPropertyDescriptor</code> support at some point.</blockquote></mx-reply>Some kind of introspection would be good, but maybe this should be focused on the class level","m.relates_to":{"m.in_reply_to":{"event_id":"$0AFwwZlwW1ZfQQZNPkOtn2zwDPF_nmltluQ8wegd9cI"}},"msgtype":"m.text"},"ts":1720921372020,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I5pkFLsesZ8fn0VopzmFL2TlcsmcHmRx7wHrXlVjj5c"},
{"content":{"body":"Even if we don't have gOPD, I want to make sure we can still do `{ ...sharedStruct }` inside of an `unsafe` block as it could be an efficient way to copy the properties off of the struct while in a lock.","format":"org.matrix.custom.html","formatted_body":"Even if we don't have gOPD, I want to make sure we can still do <code>{ ...sharedStruct }</code> inside of an <code>unsafe</code> block as it could be an efficient way to copy the properties off of the struct while in a lock.","m.mentions":{},"msgtype":"m.text"},"ts":1720921380703,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g"},
{"content":{"body":"> <@rbuckton:matrix.org> Even if we don't have gOPD, I want to make sure we can still do `{ ...sharedStruct }` inside of an `unsafe` block as it could be an efficient way to copy the properties off of the struct while in a lock.\n\nHuh, how do you attach the right cross realm prototype identifier?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Even if we don't have gOPD, I want to make sure we can still do <code>{ ...sharedStruct }</code> inside of an <code>unsafe</code> block as it could be an efficient way to copy the properties off of the struct while in a lock.</blockquote></mx-reply>Huh, how do you attach the right cross realm prototype identifier?","m.relates_to":{"m.in_reply_to":{"event_id":"$aqrfv_GuSzdq1gYOq8eRqGcSGQF9ILkzj8EMtbTd73g"}},"msgtype":"m.text"},"ts":1720921449788,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Atxk8z_ZKcZEDX4wStLdDRiDwNcwgmSvvCcFlyQhzMM"},
{"content":{"body":"you don't? You're not creating a shared struct instance, just a normal object.","m.mentions":{},"msgtype":"m.text"},"ts":1720921470211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ktxpzli3ixcj1JvCB-LsY0IVI8ZakgkqP6XOSKpkHAE"},
{"content":{"body":"Shared struct instances can only be created via a constructor.","m.mentions":{},"msgtype":"m.text"},"ts":1720921486447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$U2Acs5QJzspKQ_LHTF3kAxQH5_hL_8NvnTasskoNc3Y"},
{"content":{"body":"Oic. Yes that should be handled like . Access","msgtype":"m.text"},"ts":1720921503597,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RcfmPfThq_-KIbRXHounMcQitxMjw6bqE5QIFPVXz8E"}
]