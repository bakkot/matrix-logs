[
{"content":{"body":"Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:\n- There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.\n- Reflect.getUnsafe/setUnsafe expose these ops\n- inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe\n- Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)\n- Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.\n- if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.","format":"org.matrix.custom.html","formatted_body":"<p>Here’s an idea for the semantic details for unsafe, Reflect, Atomics, and MOP for shared structs:</p>\n<ul>\n<li>There is an abstract op, GetUnsafe(obj, propKey), which checks whether the obj is a shared struct, if so tries to get the propKey, if it is missing or if it isn’t a shared struct, fall back to Get. Analogously for SetUnsafe.</li>\n<li>Reflect.getUnsafe/setUnsafe expose these ops</li>\n<li>inside of an unsafe {} block, all direct property access is interpreted as GetUnsafe/SetUnsafe</li>\n<li>Get and Set on shared structs are missing their own data properties. Those props don’t show up for any other MOP things either. But the thread-local prototype is present (it isn’t unsafe; a method might call an unsafe thing as an implementation detail though)</li>\n<li>Atomics are always unsafe (that’s literally the point) so they are just overloaded for shared struct properties regardless of where they come from.</li>\n<li>if we were doing SAB today, we might also consider this same unsafe restriction, but what’s done is done. This only applies for shared structs.</li>\n</ul>","msgtype":"m.text"},"ts":1720915668433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BU_VgHa-0iqyn9sFTRRDpLunFyypTmwA88dofeXNtzU"},
{"content":{"body":"The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. ","format":"org.matrix.custom.html","formatted_body":"The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.","msgtype":"m.text"},"ts":1720919437743,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"},
{"content":{"body":"Though [[Get]] and [[Set]] would throw","msgtype":"m.text"},"ts":1720919527932,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FhMN5U5ApIgIlE0yYYJxMxtLOCKJ5glI8ounVqrFlmg"},
{"content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `umsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>umsafe</code> block at all","msgtype":"m.text"},"ts":1720919674328,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"},
{"content":{"body":"* What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","m.new_content":{"body":"What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all","format":"org.matrix.custom.html","formatted_body":"What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all","msgtype":"m.text"},"m.relates_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720919900291,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$261oOvwkMVpcBwNyg9xrTDiauhY-R5rk0Ri6kahI1TM"},
{"content":{"body":"> <@rbuckton:matrix.org> What do you mean by \"Atomics are always unsafe?\" my perspective is that Atomics should not need an `unsafe` block at all\n\nI think we are saying the same thing ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>What do you mean by &quot;Atomics are always unsafe?&quot; my perspective is that Atomics should not need an <code>unsafe</code> block at all</blockquote></mx-reply>I think we are saying the same thing","m.relates_to":{"m.in_reply_to":{"event_id":"$JeE6T36L9ZtRNUVlaYK_3GEn3P7Yuk0bYkaKkjaElUs"}},"msgtype":"m.text"},"ts":1720920144856,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5KbCuv_XY72xtIJwD-_SmlEt5XVVQM7G6EDC80YLiM8"},
{"content":{"body":"OK","msgtype":"m.text"},"ts":1720920149811,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bvQZFOPwKe7wZhvYJP_t8wTil9MTTlXL-iOTpoctoCU"},
{"content":{"body":"> <@rbuckton:matrix.org> The property keys need to show up in MOP operations. `in` and `hasOwnProperty` and `Reflect.has` are safe because structs have a fixed layout. \n\nSure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The property keys need to show up in MOP operations. <code>in</code> and <code>hasOwnProperty</code> and <code>Reflect.has</code> are safe because structs have a fixed layout.</blockquote></mx-reply>Sure, that makes sense. The important thing is that normal MOP operations can’t get at the contents, it’s just this other operation that can","m.relates_to":{"m.in_reply_to":{"event_id":"$voHl4CZjelWVhlK2rM83LKq_pUrBn4iW1Fwb_s8qa34"}},"msgtype":"m.text"},"ts":1720920186280,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nTFGtpyqrT8bkXqtRuBNYhLZlSrDlQn469Rfh5QYXNM"},
{"content":{"body":"The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want","msgtype":"m.text"},"ts":1720920202214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"},
{"content":{"body":"> <@rbuckton:matrix.org> The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want\n\nNot sure what you mean. It is still strings (or maybe symbols)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>The rest of what you describe sounds like another namespace (like private names) which we absolutely do not want</blockquote></mx-reply>Not sure what you mean. It is still strings (or maybe symbols)","m.relates_to":{"m.in_reply_to":{"event_id":"$ljVnIOl_zGl1u1679E8eyGdP63rubyED5HfNEjUEi3I"}},"msgtype":"m.text"},"ts":1720920225668,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aP-WZlu37x19qmqBArcSysaT7Qe7dMz9JsFAgk5SOBI"},
{"content":{"body":"I am not especially attached to the idea I wrote above, it is just the simplest thing I can imagine. How do you think unsafe blocks should work with respect to the MOP?","msgtype":"m.text"},"ts":1720920258648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gNcmuXsALFDKc0heqAghRv-6uSqeoiQ9DIHMVOAWtvg"},
{"content":{"body":"It sounded like you were saying that shared struct properties are transparent to MOP operations, which would not be correct","msgtype":"m.text"},"ts":1720920289226,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7fEy3XbM73DPnYCEejt7yDdajygcQ30t-S9k1HYSt1E"}
]