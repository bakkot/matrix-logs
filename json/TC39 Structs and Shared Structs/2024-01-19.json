[
{"content":{"body":"Thanks. With the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as `class`, except with the keywords `struct` or `shared struct` to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes. ","format":"org.matrix.custom.html","formatted_body":"Thanks. With the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as <code>class</code>, except with the keywords <code>struct</code> or <code>shared struct</code> to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes.","m.mentions":{},"msgtype":"m.text"},"ts":1705684467916,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$lLKlgoH3DjS4nncwiVzjE2ltzdn53LoDs2nqoxkQ7ec"},
{"content":{"body":"I'd also like to include support for Decorators in the actual final grammar as the same rationale for decorators on classes applies to structs. The caveat being that we would need to decide how we would solve for private fields to be able to support `accessor` as a construct. If structs are to have behavior, I feel it is important that the MVP for this proposal not ignore Decorators.","format":"org.matrix.custom.html","formatted_body":"I'd also like to include support for Decorators in the actual final grammar as the same rationale for decorators on classes applies to structs. The caveat being that we would need to decide how we would solve for private fields to be able to support <code>accessor</code> as a construct. If structs are to have behavior, I feel it is important that the MVP for this proposal not ignore Decorators.","m.mentions":{},"msgtype":"m.text"},"ts":1705684706084,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SmAcukx_iDpoRTOPZGfNLQeaFMsqDj0VaqZodE45OvY"},
{"content":{"body":" * Thanks. Starting with the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as `class`, except with the keywords `struct` or `shared struct` to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes.","format":"org.matrix.custom.html","formatted_body":" * Thanks. Starting with the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as <code>class</code>, except with the keywords <code>struct</code> or <code>shared struct</code> to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes.","m.mentions":{},"m.new_content":{"body":"Thanks. Starting with the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as `class`, except with the keywords `struct` or `shared struct` to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes.","format":"org.matrix.custom.html","formatted_body":"Thanks. Starting with the syntax sketch I boiled down https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53 to the things we actually need. In essence, it uses the same syntax as <code>class</code>, except with the keywords <code>struct</code> or <code>shared struct</code> to indicate how both definition evaluation and instantiation will fundamentally differ from regular classes.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lLKlgoH3DjS4nncwiVzjE2ltzdn53LoDs2nqoxkQ7ec","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705684755016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3wVwkPk2IPqGPWbHV8b5KfUbxSCCBbK4fxciOREf2dk"}
]