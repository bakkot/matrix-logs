[
{"content":{"body":"I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into code shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a \"shared\" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.","m.mentions":{},"msgtype":"m.text"},"ts":1717036786642,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$srVXPXHm2oj4GYlugBDqaCpXctib3BLBBGt0vGQ0rVE"},
{"content":{"body":" * I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a \"shared\" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.","m.mentions":{},"m.new_content":{"body":"I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a \"shared\" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$srVXPXHm2oj4GYlugBDqaCpXctib3BLBBGt0vGQ0rVE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717036809203,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GXTIebIoYZp8TNlyxlkzuHHKY0f_q_cgP4qhu3SAk_k"},
{"content":{"body":"> <@mhofman:matrix.org> I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a \"shared\" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.\n\nis that in reference to `static` ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$srVXPXHm2oj4GYlugBDqaCpXctib3BLBBGt0vGQ0rVE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I chatted with Mark this afternoon. First he&#39;s sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you&#39;re roughly a &quot;shared&quot; keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.</blockquote></mx-reply>is that in reference to <code>static</code> ?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$srVXPXHm2oj4GYlugBDqaCpXctib3BLBBGt0vGQ0rVE"}},"msgtype":"m.text"},"ts":1717041286505,"senderName":"Chris de Almeida","senderId":"@softwarechris:matrix.org","id":"$rrDvuNzmIR2vfvzJpVvSqXXzyycj1yjxgzoR_4aaiKY"},
{"content":{"body":"static?","m.mentions":{},"msgtype":"m.text"},"ts":1717041322120,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VpzkEVFXHctU9P9LAR5JCJqfrk1pudMkcBC_RfZaMbc"}
]