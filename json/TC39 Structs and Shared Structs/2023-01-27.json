[
{"content":{"body":"So a shared struct instance has a stable identity across `postMessage`, right? To expand on my earlier idea, I think we don't need any stable identity for module blocks or even symbols, we can just use shared structs themselves to dynamically attach behavior to a shared struct kind, given some built-in wiring. Here is a gist where I explore that approach: https://gist.github.com/mhofman/aa23fcc88e1ccd031a3c34f88577eaf7\n\nIt does not require any new syntax, or extra magic in postMessage (like module blocks, or symbol identities being preserved). It only requires an automatically generated static property on shared struct classes that represent the kind, and some built-in behavior, plus the dynamic prototype lookup we discussed of course. I'm actually wondering if this could be prototyped (pun intented) in the current experiment.","format":"org.matrix.custom.html","formatted_body":"<p>So a shared struct instance has a stable identity across <code>postMessage</code>, right? To expand on my earlier idea, I think we don't need any stable identity for module blocks or even symbols, we can just use shared structs themselves to dynamically attach behavior to a shared struct kind, given some built-in wiring. Here is a gist where I explore that approach: https://gist.github.com/mhofman/aa23fcc88e1ccd031a3c34f88577eaf7</p>\n<p>It does not require any new syntax, or extra magic in postMessage (like module blocks, or symbol identities being preserved). It only requires an automatically generated static property on shared struct classes that represent the kind, and some built-in behavior, plus the dynamic prototype lookup we discussed of course. I'm actually wondering if this could be prototyped (pun intented) in the current experiment.</p>\n","msgtype":"m.text"},"ts":1674782260197,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-uuI3KEqPrIQ_hFWvtbvtQ-FZSD0-ztDNtuRDLkY6sM"},
{"content":{"body":"Right, that would be similar to having 'known' static functions that operate on the type and each agent individually imports the module to use those functions, except with the power to per-realm/per-agent register those functions as the prototype to use for that 'type'.\n'type' here being the identity created by the `shared struct class` syntax (the fan-out case).\nFor the fan-in case, where a farm of workers start up on their own, each creating their own separate `shared struct class` (from the same module URL), as they are sent to a sink, the sink would need to register that one 'prototype' with the multiple 'type's that are received from each worker. ","format":"org.matrix.custom.html","formatted_body":"Right, that would be similar to having 'known' static functions that operate on the type and each agent individually imports the module to use those functions, except with the power to per-realm/per-agent register those functions as the prototype to use for that 'type'.<br>'type' here being the identity created by the <code>shared struct class</code> syntax (the fan-out case).<br>For the fan-in case, where a farm of workers start up on their own, each creating their own separate <code>shared struct class</code> (from the same module URL), as they are sent to a sink, the sink would need to register that one 'prototype' with the multiple 'type's that are received from each worker.","msgtype":"m.text"},"ts":1674815953491,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$Qr9M_P68WAnrPBa5u7RhRsl3u-NN_aAhyW4Au6mUakg"}
]