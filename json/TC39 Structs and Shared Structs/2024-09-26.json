[
{"content":{"body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the `[[Get]]` behavior? Also have proxies implement an `[[UnsafeGet]]` that triggers the `get` trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","format":"org.matrix.custom.html","formatted_body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the <code>[[Get]]</code> behavior? Also have proxies implement an <code>[[UnsafeGet]]</code> that triggers the <code>get</code> trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","m.mentions":{},"msgtype":"m.text"},"ts":1727387780833,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KnNFVtt48uQ5EVjZZtvQa0kuOkhKr_q9rA_78IS4uU0"},
{"content":{"body":"Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.","format":"org.matrix.custom.html","formatted_body":"Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.","m.mentions":{},"msgtype":"m.text"},"ts":1727389843132,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"},
{"content":{"body":"(though I've refactored `[[UnsafeGet]]` and `[[UnsafeSet]]` out now, so its just an `unsafe` parameter passed to `[[Get]]`).","format":"org.matrix.custom.html","formatted_body":"(though I've refactored <code>[[UnsafeGet]]</code> and <code>[[UnsafeSet]]</code> out now, so its just an <code>unsafe</code> parameter passed to <code>[[Get]]</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1727389973468,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OT4bIuAFofGDEv-wsJkyOwyOeKNcUN-JXIm3r4g4djk"},
{"content":{"body":"well, IIRC the idea is that inside `unsafe {}`, we compile `.` and `[ ]` to a different bytecode (say, `UnsafeGet` vs `Get`)","format":"org.matrix.custom.html","formatted_body":"well, IIRC the idea is that inside <code>unsafe {}</code>, we compile <code>.</code> and <code>[ ]</code> to a different bytecode (say, <code>UnsafeGet</code> vs <code>Get</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1727391169533,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KD9i-xMUcAtP04TN5jsACGOB2RTmwlq5lWyC-YaJQ8o"},
{"content":{"body":"that should be orthogonal to what API calls do","m.mentions":{},"msgtype":"m.text"},"ts":1727391182159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CwUFyjiTzZ8f3novz-PLwS4iYfpwdMUDmbz5kgdCplQ"},
{"content":{"body":"if `Reflect.get` wants to always be equivalent to a `Get` i don't think that slows down anything","format":"org.matrix.custom.html","formatted_body":"if <code>Reflect.get</code> wants to always be equivalent to a <code>Get</code> i don't think that slows down anything","m.mentions":{},"msgtype":"m.text"},"ts":1727391212182,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fLQ2647Se8SWOa5n1S_6g-LSRtruxGkQYccopzeDVNg"},
{"content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _somethign_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>somethign</em>","m.mentions":{},"msgtype":"m.text"},"ts":1727391240290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78"},
{"content":{"body":" * for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":" * for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"m.new_content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391246167,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$18U3IVe6YWolP7FmTS7MWlz-DnXo5OaWkArO68W42l8"},
{"content":{"body":"> <@rbuckton:matrix.org> Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.\n\nI don't see how that's relevant to the question I asked. Afaik, the default `[[UnsafeGet]]` behavior is to execute the `[[Get]]` steps, no ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.</blockquote></mx-reply>I don't see how that's relevant to the question I asked. Afaik, the default <code>[[UnsafeGet]]</code> behavior is to execute the <code>[[Get]]</code> steps, no ?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"}},"msgtype":"m.text"},"ts":1727391301479,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zMxTR_ZFQrxUbR3_yAle3hbZ5_W3__YMULdpiaH2qSg"},
{"content":{"body":"i feel like the degree to which `Reflect.get` is always [[Get]] is unacceptable comes down to language compositionality concerns","format":"org.matrix.custom.html","formatted_body":"i feel like the degree to which <code>Reflect.get</code> is always [[Get]] is unacceptable comes down to language compositionality concerns","m.mentions":{},"msgtype":"m.text"},"ts":1727391332943,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LWS6iNbcFphP0NLlUkVCHWn6jijFuWZ6hO4rF1DtyBI"},
{"content":{"body":"Not quite. It carries the `[[UnsafeGet]]` down through the prototype walk in case you have someone who did `Object.create(sharedStructInstance)`.","format":"org.matrix.custom.html","formatted_body":"Not quite. It carries the <code>[[UnsafeGet]]</code> down through the prototype walk in case you have someone who did <code>Object.create(sharedStructInstance)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727391341632,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tenTak5_7tzpQdp87O0Yjb3NKZmJIw3ow0RxRr8J4n0"},
{"content":{"body":"but that's still like, internal MOP operations","m.mentions":{},"msgtype":"m.text"},"ts":1727391378695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GA_jKb-v7b5D17fJOEZ-2gtZyxFOutx4l1trxlmylvk"},
{"content":{"body":"> <@shuyuguo:matrix.org> for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_\n\nI'm suggesting it would just trigger the `get` trap as normal, which wouldn't be able to access the target's field unless the get trap uses syntax and an unsafe block","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em></blockquote></mx-reply>I'm suggesting it would just trigger the <code>get</code> trap as normal, which wouldn't be able to access the target's field unless the get trap uses syntax and an unsafe block","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78"}},"msgtype":"m.text"},"ts":1727391382292,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lQRMqZF3bR5Q2sS-nJx_R7rJ4_eGM14Dp8miF64osvg"},
{"content":{"body":"so yeah a proxy would break that \"carry through\"","m.mentions":{},"msgtype":"m.text"},"ts":1727391414156,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CSLt_SoogeL8-AVvKEttyEZqCu1GNUq8ngmyml7eELk"},
{"content":{"body":"As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and suppot for a receiver when working with objects. ","m.mentions":{},"msgtype":"m.text"},"ts":1727391437387,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hC2DZAV0rZE36Th8rpKhDXR2hcXIAQODHtDfDSRWjCU"},
{"content":{"body":"We do expect shared structs will have prototypes, so I'd like for this to work.","m.mentions":{},"msgtype":"m.text"},"ts":1727391453087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0"},
{"content":{"body":" * As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and support for a receiver when working with objects. ","m.mentions":{},"m.new_content":{"body":"As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and support for a receiver when working with objects. ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hC2DZAV0rZE36Th8rpKhDXR2hcXIAQODHtDfDSRWjCU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391471296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zVCJQMEYtV4zjN_5iZn1v0PWK18f_H7yq_J9zdFCaZI"},
{"content":{"body":"i don't think that slows anything down AFAICT, but it's a sharp corner and i'd rather avoid because (unless i'm still missing something, Ron seems to have thought much more about this):\n\n- Atomics methods are always [[UnsafeGet]]\n- so if Reflect methods and Proxy methods are always [[Get]]...\n\nthat just feels non-compositional and bad? like you're just gonna have to memorize some API entry points are unsafe, some are safe?","format":"org.matrix.custom.html","formatted_body":"<p>i don't think that slows anything down AFAICT, but it's a sharp corner and i'd rather avoid because (unless i'm still missing something, Ron seems to have thought much more about this):</p>\n<ul>\n<li>Atomics methods are always [[UnsafeGet]]</li>\n<li>so if Reflect methods and Proxy methods are always [[Get]]...</li>\n</ul>\n<p>that just feels non-compositional and bad? like you're just gonna have to memorize some API entry points are unsafe, some are safe?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727391486843,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7LoUoRXBx5RkKRZ1CoWwu4AruvcFo7bLmfStRKXxD4U"},
{"content":{"body":"> <@rbuckton:matrix.org> We do expect shared structs will have prototypes, so I'd like for this to work.\n\ndo we expect shared structs to be used as prototypes is the question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We do expect shared structs will have prototypes, so I&#39;d like for this to work.</blockquote></mx-reply>do we expect shared structs to be used as prototypes is the question","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0"}},"msgtype":"m.text"},"ts":1727391505780,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dSis0EyTcXTnjUK_nLx1pST3qjvAzycZugydScm7rks"},
{"content":{"body":"probably not the common case but i don't see why not","m.mentions":{},"msgtype":"m.text"},"ts":1727391523044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RkFOHJfyqtvRQ4oMAMEv-fUvPaQjBdmIRK4pbT4SDho"},
{"content":{"body":"if you prohibit shared structs from being usable as prototypes that's really introducing a big new prohibition to work around a niche API","m.mentions":{},"msgtype":"m.text"},"ts":1727391563933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AFlqItxvPVcGUNrB6xPbT6X70dFIRpvq0GNKzk6Ryhg"},
{"content":{"body":"like what objects can't be used as prototypes?","m.mentions":{},"msgtype":"m.text"},"ts":1727391576199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dsVTZ9CIDwfjCbeGfMk4ePkbJZbYrc8XTExnop9P4Sg"},
{"content":{"body":"Yes. We've even discussed shared prototypes in the past as well, and would likely want them if we ever have shared functions.","m.mentions":{},"msgtype":"m.text"},"ts":1727391582205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$93B_iqmZ-gQCfRwuOi71vPopRUstOcl2LlgF5PJunjs"},
{"content":{"body":"again, this is not an airtight defense against racy access because SABs exist","m.mentions":{},"msgtype":"m.text"},"ts":1727391627518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s2DZdb7vVDJ5SVXdaN3ZE4BQl63VqT_QW1P9YsxMBAk"},
{"content":{"body":"don't rathole","m.mentions":{},"msgtype":"m.text"},"ts":1727391629267,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MUKgvlceV6HJnas4Nh2zgxXQulrLlxofPzadUe3_jFk"},
{"content":{"body":"Btw, I forgot to mention this morning, but yesterday some people were under the impression that shared struct could somehow be primitives. I think because of their \"only contain other shared structs\", and the time when this was presented, it somehow got confused with records/tuples. Just an FYI for your presentation, making clear these are mutable objects.","m.mentions":{},"msgtype":"m.text"},"ts":1727391694654,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MTSLjJ1QqHf-_kIonNiRp2dgwlf0IjnTnTs_THKxfoU"},
{"content":{"body":"thanks for the heads up","m.mentions":{},"msgtype":"m.text"},"ts":1727391708522,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yNPUlm7507BOg5ypNu7mU2LSo7-97r0Lz31bwjDi11k"},
{"content":{"body":"who was confused?","m.mentions":{},"msgtype":"m.text"},"ts":1727391716001,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$74dp9yaEmRnDh7_St_g3bZYeO4yH3b2UY8aOCpVJD-w"},
{"content":{"body":"Jordan","m.mentions":{},"msgtype":"m.text"},"ts":1727391721766,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GnaInz32BtO5mLyCuKsWHPFbYGNQM7NaKIc2i-2J46k"},
{"content":{"body":"rbuckton: help me understand the cons of making `Reflect.get()` always [[Get]], and adding `Reflect.unsafeGet` as always [[UnsafeGet]]","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: help me understand the cons of making <code>Reflect.get()</code> always [[Get]], and adding <code>Reflect.unsafeGet</code> as always [[UnsafeGet]]","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1727391812947,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Wu0xHldzsieXcQ1IYNiGJC69gU61OG-DqaGLfLLrl5s"},
{"content":{"body":"that doesn't reproduce the coloring problem does it?","m.mentions":{},"msgtype":"m.text"},"ts":1727391831156,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9ywB6VJapRh1LyKEYWMi6whDGtobAB3_e0i1N1ffbP8"},
{"content":{"body":"If a Proxy cannot trap an unsafeGet, then it cannot realistically know whether it should forward on the operation via `Reflect.get` or `Reflect.unsafeGet`.","format":"org.matrix.custom.html","formatted_body":"If a Proxy cannot trap an unsafeGet, then it cannot realistically know whether it should forward on the operation via <code>Reflect.get</code> or <code>Reflect.unsafeGet</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727391879913,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iQNNhrljP04YSikot6gOz-FAg075GFwjiCBRgFNT39Q"},
{"content":{"body":"is that the only downside?","m.mentions":{},"msgtype":"m.text"},"ts":1727391893873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gvgWD4OeadA3yic3WRqmn6Ejw0s4ItLQlI4iJxjm5xg"},
{"content":{"body":"no","m.mentions":{},"msgtype":"m.text"},"ts":1727391900255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FU75-NR1IIBkdrh5SaOrePwmEkUBR_cnfQcwjozazB8"}
]