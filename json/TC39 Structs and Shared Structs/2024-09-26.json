[
{"content":{"body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the `[[Get]]` behavior? Also have proxies implement an `[[UnsafeGet]]` that triggers the `get` trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","format":"org.matrix.custom.html","formatted_body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the <code>[[Get]]</code> behavior? Also have proxies implement an <code>[[UnsafeGet]]</code> that triggers the <code>get</code> trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","m.mentions":{},"msgtype":"m.text"},"ts":1727387780833,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KnNFVtt48uQ5EVjZZtvQa0kuOkhKr_q9rA_78IS4uU0"},
{"content":{"body":"Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.","format":"org.matrix.custom.html","formatted_body":"Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.","m.mentions":{},"msgtype":"m.text"},"ts":1727389843132,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"},
{"content":{"body":"(though I've refactored `[[UnsafeGet]]` and `[[UnsafeSet]]` out now, so its just an `unsafe` parameter passed to `[[Get]]`).","format":"org.matrix.custom.html","formatted_body":"(though I've refactored <code>[[UnsafeGet]]</code> and <code>[[UnsafeSet]]</code> out now, so its just an <code>unsafe</code> parameter passed to <code>[[Get]]</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1727389973468,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OT4bIuAFofGDEv-wsJkyOwyOeKNcUN-JXIm3r4g4djk"},
{"content":{"body":"well, IIRC the idea is that inside `unsafe {}`, we compile `.` and `[ ]` to a different bytecode (say, `UnsafeGet` vs `Get`)","format":"org.matrix.custom.html","formatted_body":"well, IIRC the idea is that inside <code>unsafe {}</code>, we compile <code>.</code> and <code>[ ]</code> to a different bytecode (say, <code>UnsafeGet</code> vs <code>Get</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1727391169533,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KD9i-xMUcAtP04TN5jsACGOB2RTmwlq5lWyC-YaJQ8o"},
{"content":{"body":"that should be orthogonal to what API calls do","m.mentions":{},"msgtype":"m.text"},"ts":1727391182159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CwUFyjiTzZ8f3novz-PLwS4iYfpwdMUDmbz5kgdCplQ"},
{"content":{"body":"if `Reflect.get` wants to always be equivalent to a `Get` i don't think that slows down anything","format":"org.matrix.custom.html","formatted_body":"if <code>Reflect.get</code> wants to always be equivalent to a <code>Get</code> i don't think that slows down anything","m.mentions":{},"msgtype":"m.text"},"ts":1727391212182,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fLQ2647Se8SWOa5n1S_6g-LSRtruxGkQYccopzeDVNg"},
{"content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _somethign_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>somethign</em>","m.mentions":{},"msgtype":"m.text"},"ts":1727391240290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78"},
{"content":{"body":" * for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":" * for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"m.new_content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391246167,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$18U3IVe6YWolP7FmTS7MWlz-DnXo5OaWkArO68W42l8"},
{"content":{"body":"> <@rbuckton:matrix.org> Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.\n\nI don't see how that's relevant to the question I asked. Afaik, the default `[[UnsafeGet]]` behavior is to execute the `[[Get]]` steps, no ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.</blockquote></mx-reply>I don't see how that's relevant to the question I asked. Afaik, the default <code>[[UnsafeGet]]</code> behavior is to execute the <code>[[Get]]</code> steps, no ?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"}},"msgtype":"m.text"},"ts":1727391301479,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zMxTR_ZFQrxUbR3_yAle3hbZ5_W3__YMULdpiaH2qSg"}
]