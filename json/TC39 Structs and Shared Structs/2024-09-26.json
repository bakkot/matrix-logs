[
{"content":{"body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the `[[Get]]` behavior? Also have proxies implement an `[[UnsafeGet]]` that triggers the `get` trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","format":"org.matrix.custom.html","formatted_body":"Can someone remind me, why is disallowing Reflect.get / Reflect.set from accessing shared struct fields not acceptable? Aka always triggering the <code>[[Get]]</code> behavior? Also have proxies implement an <code>[[UnsafeGet]]</code> that triggers the <code>get</code> trap as is (no extra arg)? From what I gather it would just prevent using proxies or reflect to access shared fields on shared structs, but not prevent access to non-shared behavior. Is that really unacceptable?","m.mentions":{},"msgtype":"m.text"},"ts":1727387780833,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KnNFVtt48uQ5EVjZZtvQa0kuOkhKr_q9rA_78IS4uU0"},
{"content":{"body":"Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.","format":"org.matrix.custom.html","formatted_body":"Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.","m.mentions":{},"msgtype":"m.text"},"ts":1727389843132,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"},
{"content":{"body":"(though I've refactored `[[UnsafeGet]]` and `[[UnsafeSet]]` out now, so its just an `unsafe` parameter passed to `[[Get]]`).","format":"org.matrix.custom.html","formatted_body":"(though I've refactored <code>[[UnsafeGet]]</code> and <code>[[UnsafeSet]]</code> out now, so its just an <code>unsafe</code> parameter passed to <code>[[Get]]</code>).","m.mentions":{},"msgtype":"m.text"},"ts":1727389973468,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OT4bIuAFofGDEv-wsJkyOwyOeKNcUN-JXIm3r4g4djk"},
{"content":{"body":"well, IIRC the idea is that inside `unsafe {}`, we compile `.` and `[ ]` to a different bytecode (say, `UnsafeGet` vs `Get`)","format":"org.matrix.custom.html","formatted_body":"well, IIRC the idea is that inside <code>unsafe {}</code>, we compile <code>.</code> and <code>[ ]</code> to a different bytecode (say, <code>UnsafeGet</code> vs <code>Get</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1727391169533,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KD9i-xMUcAtP04TN5jsACGOB2RTmwlq5lWyC-YaJQ8o"},
{"content":{"body":"that should be orthogonal to what API calls do","m.mentions":{},"msgtype":"m.text"},"ts":1727391182159,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CwUFyjiTzZ8f3novz-PLwS4iYfpwdMUDmbz5kgdCplQ"},
{"content":{"body":"if `Reflect.get` wants to always be equivalent to a `Get` i don't think that slows down anything","format":"org.matrix.custom.html","formatted_body":"if <code>Reflect.get</code> wants to always be equivalent to a <code>Get</code> i don't think that slows down anything","m.mentions":{},"msgtype":"m.text"},"ts":1727391212182,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fLQ2647Se8SWOa5n1S_6g-LSRtruxGkQYccopzeDVNg"},
{"content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _somethign_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>somethign</em>","m.mentions":{},"msgtype":"m.text"},"ts":1727391240290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78"},
{"content":{"body":" * for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":" * for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"m.new_content":{"body":"for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_","format":"org.matrix.custom.html","formatted_body":"for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391246167,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$18U3IVe6YWolP7FmTS7MWlz-DnXo5OaWkArO68W42l8"},
{"content":{"body":"> <@rbuckton:matrix.org> Inside of an `unsafe` block, *every* get is an `[[UnsafeGet]]`. Otherwise implementations would need to check the type of the object on every get/set, which would slow down *every* get/set operation even outside of an `unsafe {}` block. This was deemed an unacceptable performance regression.\n\nI don't see how that's relevant to the question I asked. Afaik, the default `[[UnsafeGet]]` behavior is to execute the `[[Get]]` steps, no ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Inside of an <code>unsafe</code> block, <em>every</em> get is an <code>[[UnsafeGet]]</code>. Otherwise implementations would need to check the type of the object on every get/set, which would slow down <em>every</em> get/set operation even outside of an <code>unsafe {}</code> block. This was deemed an unacceptable performance regression.</blockquote></mx-reply>I don't see how that's relevant to the question I asked. Afaik, the default <code>[[UnsafeGet]]</code> behavior is to execute the <code>[[Get]]</code> steps, no ?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-cqC1ijfXcsGtZS7Ko5E9mAw57ihSL-X21qr0Q4h5As"}},"msgtype":"m.text"},"ts":1727391301479,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zMxTR_ZFQrxUbR3_yAle3hbZ5_W3__YMULdpiaH2qSg"},
{"content":{"body":"i feel like the degree to which `Reflect.get` is always [[Get]] is unacceptable comes down to language compositionality concerns","format":"org.matrix.custom.html","formatted_body":"i feel like the degree to which <code>Reflect.get</code> is always [[Get]] is unacceptable comes down to language compositionality concerns","m.mentions":{},"msgtype":"m.text"},"ts":1727391332943,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LWS6iNbcFphP0NLlUkVCHWn6jijFuWZ6hO4rF1DtyBI"},
{"content":{"body":"Not quite. It carries the `[[UnsafeGet]]` down through the prototype walk in case you have someone who did `Object.create(sharedStructInstance)`.","format":"org.matrix.custom.html","formatted_body":"Not quite. It carries the <code>[[UnsafeGet]]</code> down through the prototype walk in case you have someone who did <code>Object.create(sharedStructInstance)</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727391341632,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tenTak5_7tzpQdp87O0Yjb3NKZmJIw3ow0RxRr8J4n0"},
{"content":{"body":"but that's still like, internal MOP operations","m.mentions":{},"msgtype":"m.text"},"ts":1727391378695,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GA_jKb-v7b5D17fJOEZ-2gtZyxFOutx4l1trxlmylvk"},
{"content":{"body":"> <@shuyuguo:matrix.org> for proxies i'm not entirely clear, since the `.` access in an `unsafe {}` gotta do _something_\n\nI'm suggesting it would just trigger the `get` trap as normal, which wouldn't be able to access the target's field unless the get trap uses syntax and an unsafe block","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>for proxies i'm not entirely clear, since the <code>.</code> access in an <code>unsafe {}</code> gotta do <em>something</em></blockquote></mx-reply>I'm suggesting it would just trigger the <code>get</code> trap as normal, which wouldn't be able to access the target's field unless the get trap uses syntax and an unsafe block","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8G_He9vmO0Jl2NDKkO7DZqCkVqRh4eglEUT52FzoM78"}},"msgtype":"m.text"},"ts":1727391382292,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lQRMqZF3bR5Q2sS-nJx_R7rJ4_eGM14Dp8miF64osvg"},
{"content":{"body":"so yeah a proxy would break that \"carry through\"","m.mentions":{},"msgtype":"m.text"},"ts":1727391414156,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CSLt_SoogeL8-AVvKEttyEZqCu1GNUq8ngmyml7eELk"},
{"content":{"body":"As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and suppot for a receiver when working with objects. ","m.mentions":{},"msgtype":"m.text"},"ts":1727391437387,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hC2DZAV0rZE36Th8rpKhDXR2hcXIAQODHtDfDSRWjCU"},
{"content":{"body":"We do expect shared structs will have prototypes, so I'd like for this to work.","m.mentions":{},"msgtype":"m.text"},"ts":1727391453087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0"},
{"content":{"body":" * As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and support for a receiver when working with objects. ","m.mentions":{},"m.new_content":{"body":"As to why disallowing Reflect.get/set on shared structs, I'd like to be able to benefit from Reflect.get/set's prototype walking behavior and support for a receiver when working with objects. ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hC2DZAV0rZE36Th8rpKhDXR2hcXIAQODHtDfDSRWjCU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391471296,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zVCJQMEYtV4zjN_5iZn1v0PWK18f_H7yq_J9zdFCaZI"},
{"content":{"body":"i don't think that slows anything down AFAICT, but it's a sharp corner and i'd rather avoid because (unless i'm still missing something, Ron seems to have thought much more about this):\n\n- Atomics methods are always [[UnsafeGet]]\n- so if Reflect methods and Proxy methods are always [[Get]]...\n\nthat just feels non-compositional and bad? like you're just gonna have to memorize some API entry points are unsafe, some are safe?","format":"org.matrix.custom.html","formatted_body":"<p>i don't think that slows anything down AFAICT, but it's a sharp corner and i'd rather avoid because (unless i'm still missing something, Ron seems to have thought much more about this):</p>\n<ul>\n<li>Atomics methods are always [[UnsafeGet]]</li>\n<li>so if Reflect methods and Proxy methods are always [[Get]]...</li>\n</ul>\n<p>that just feels non-compositional and bad? like you're just gonna have to memorize some API entry points are unsafe, some are safe?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727391486843,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7LoUoRXBx5RkKRZ1CoWwu4AruvcFo7bLmfStRKXxD4U"},
{"content":{"body":"> <@rbuckton:matrix.org> We do expect shared structs will have prototypes, so I'd like for this to work.\n\ndo we expect shared structs to be used as prototypes is the question","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>We do expect shared structs will have prototypes, so I&#39;d like for this to work.</blockquote></mx-reply>do we expect shared structs to be used as prototypes is the question","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1mHUMtCECnNdZDiU4HpG4RVkGflTzsKhXZjAXfj_mU0"}},"msgtype":"m.text"},"ts":1727391505780,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dSis0EyTcXTnjUK_nLx1pST3qjvAzycZugydScm7rks"},
{"content":{"body":"probably not the common case but i don't see why not","m.mentions":{},"msgtype":"m.text"},"ts":1727391523044,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RkFOHJfyqtvRQ4oMAMEv-fUvPaQjBdmIRK4pbT4SDho"},
{"content":{"body":"if you prohibit shared structs from being usable as prototypes that's really introducing a big new prohibition to work around a niche API","m.mentions":{},"msgtype":"m.text"},"ts":1727391563933,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AFlqItxvPVcGUNrB6xPbT6X70dFIRpvq0GNKzk6Ryhg"},
{"content":{"body":"like what objects can't be used as prototypes?","m.mentions":{},"msgtype":"m.text"},"ts":1727391576199,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dsVTZ9CIDwfjCbeGfMk4ePkbJZbYrc8XTExnop9P4Sg"},
{"content":{"body":"Yes. We've even discussed shared prototypes in the past as well, and would likely want them if we ever have shared functions.","m.mentions":{},"msgtype":"m.text"},"ts":1727391582205,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$93B_iqmZ-gQCfRwuOi71vPopRUstOcl2LlgF5PJunjs"},
{"content":{"body":"again, this is not an airtight defense against racy access because SABs exist","m.mentions":{},"msgtype":"m.text"},"ts":1727391627518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s2DZdb7vVDJ5SVXdaN3ZE4BQl63VqT_QW1P9YsxMBAk"},
{"content":{"body":"don't rathole","m.mentions":{},"msgtype":"m.text"},"ts":1727391629267,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MUKgvlceV6HJnas4Nh2zgxXQulrLlxofPzadUe3_jFk"},
{"content":{"body":"Btw, I forgot to mention this morning, but yesterday some people were under the impression that shared struct could somehow be primitives. I think because of their \"only contain other shared structs\", and the time when this was presented, it somehow got confused with records/tuples. Just an FYI for your presentation, making clear these are mutable objects.","m.mentions":{},"msgtype":"m.text"},"ts":1727391694654,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MTSLjJ1QqHf-_kIonNiRp2dgwlf0IjnTnTs_THKxfoU"},
{"content":{"body":"thanks for the heads up","m.mentions":{},"msgtype":"m.text"},"ts":1727391708522,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yNPUlm7507BOg5ypNu7mU2LSo7-97r0Lz31bwjDi11k"},
{"content":{"body":"who was confused?","m.mentions":{},"msgtype":"m.text"},"ts":1727391716001,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$74dp9yaEmRnDh7_St_g3bZYeO4yH3b2UY8aOCpVJD-w"},
{"content":{"body":"Jordan","m.mentions":{},"msgtype":"m.text"},"ts":1727391721766,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GnaInz32BtO5mLyCuKsWHPFbYGNQM7NaKIc2i-2J46k"},
{"content":{"body":"rbuckton: help me understand the cons of making `Reflect.get()` always [[Get]], and adding `Reflect.unsafeGet` as always [[UnsafeGet]]","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: help me understand the cons of making <code>Reflect.get()</code> always [[Get]], and adding <code>Reflect.unsafeGet</code> as always [[UnsafeGet]]","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1727391812947,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Wu0xHldzsieXcQ1IYNiGJC69gU61OG-DqaGLfLLrl5s"},
{"content":{"body":"that doesn't reproduce the coloring problem does it?","m.mentions":{},"msgtype":"m.text"},"ts":1727391831156,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9ywB6VJapRh1LyKEYWMi6whDGtobAB3_e0i1N1ffbP8"},
{"content":{"body":"If a Proxy cannot trap an unsafeGet, then it cannot realistically know whether it should forward on the operation via `Reflect.get` or `Reflect.unsafeGet`.","format":"org.matrix.custom.html","formatted_body":"If a Proxy cannot trap an unsafeGet, then it cannot realistically know whether it should forward on the operation via <code>Reflect.get</code> or <code>Reflect.unsafeGet</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727391879913,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iQNNhrljP04YSikot6gOz-FAg075GFwjiCBRgFNT39Q"},
{"content":{"body":"is that the only downside?","m.mentions":{},"msgtype":"m.text"},"ts":1727391893873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gvgWD4OeadA3yic3WRqmn6Ejw0s4ItLQlI4iJxjm5xg"},
{"content":{"body":"no","m.mentions":{},"msgtype":"m.text"},"ts":1727391900255,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$FU75-NR1IIBkdrh5SaOrePwmEkUBR_cnfQcwjozazB8"},
{"content":{"body":"Also, committee reticence for having any methods on Reflect that aren't related to the proxy traps.","m.mentions":{},"msgtype":"m.text"},"ts":1727391927290,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zSGrutLOdmtHlQmqjhNRlQnni0COkeCmPSdLv84W7V0"},
{"content":{"body":"the proxy downside sounds to me like \"you can't proxy shared structs and be aware of `unsafe {}` blocks\"","format":"org.matrix.custom.html","formatted_body":"the proxy downside sounds to me like \"you can't proxy shared structs and be aware of <code>unsafe {}</code> blocks\"","m.mentions":{},"msgtype":"m.text"},"ts":1727391933000,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PmZyzYuS-pWeeHVNV3HWXwaHQ2slfTV3Ddt0glIVbA8"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, committee reticence for having any methods on Reflect that aren't related to the proxy traps.\n\nthis is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zSGrutLOdmtHlQmqjhNRlQnni0COkeCmPSdLv84W7V0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, committee reticence for having any methods on Reflect that aren&#39;t related to the proxy traps.</blockquote></mx-reply>this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zSGrutLOdmtHlQmqjhNRlQnni0COkeCmPSdLv84W7V0"}},"msgtype":"m.text"},"ts":1727391983088,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jzXBLYEw2NFSBryHpfULDWimlv_4CB6aJ1uYAUroaK0"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, committee reticence for having any methods on Reflect that aren't related to the proxy traps.\n\n * fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zSGrutLOdmtHlQmqjhNRlQnni0COkeCmPSdLv84W7V0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, committee reticence for having any methods on Reflect that aren't related to the proxy traps.</blockquote></mx-reply> * fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","m.mentions":{},"m.new_content":{"body":"fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","format":"org.matrix.custom.html","formatted_body":"fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jzXBLYEw2NFSBryHpfULDWimlv_4CB6aJ1uYAUroaK0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727391999853,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$UA9jTt5ql-dF31Zo0ySD4e3DSG9lnW7L2Fb2E2vgiIo"},
{"content":{"body":"ljharb: so no these aren't new primitives, they're exotic objects","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: so no these aren't new primitives, they're exotic objects","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"msgtype":"m.text"},"ts":1727392007319,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GGQcSURVKecqTpetAEc91yHYnbS_1zcWOTVrrEHyFKo"},
{"content":{"body":"If a Proxy *can* trap `unsafeGet` and we always forward GetValue through unsafe get inside of an `unsafe` block, then Proxies stop working for regular objects inside of `unsafe`.","format":"org.matrix.custom.html","formatted_body":"If a Proxy <em>can</em> trap <code>unsafeGet</code> and we always forward GetValue through unsafe get inside of an <code>unsafe</code> block, then Proxies stop working for regular objects inside of <code>unsafe</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727392028762,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w91qPykyuU7mLl3i9rTgAIHtxgonzTmkuFLLtgIdFQg"},
{"content":{"body":"yeah i had some picture in my mind of them as immutable one-shit-init structs","m.mentions":{},"msgtype":"m.text"},"ts":1727392031291,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$DKA2gJuYXAxaRz28B8yuxdOnZB_FFIOCMT1NzG6Vs-E"},
{"content":{"body":" * yeah i had some picture in my mind of them as immutable one-shot-init structs","m.mentions":{},"m.new_content":{"body":"yeah i had some picture in my mind of them as immutable one-shot-init structs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DKA2gJuYXAxaRz28B8yuxdOnZB_FFIOCMT1NzG6Vs-E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392036666,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kefbGgk81CMkdBCxM2qERoD194s6qL6so2PCwy6_S80"},
{"content":{"body":" * yeah i had some picture in my mind of them as immutable one-shot-init structs that can only contain primitives","m.mentions":{},"m.new_content":{"body":"yeah i had some picture in my mind of them as immutable one-shot-init structs that can only contain primitives","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DKA2gJuYXAxaRz28B8yuxdOnZB_FFIOCMT1NzG6Vs-E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392044983,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$wqx53lnXwMI0zm10OtqngVstIq4Ggis3b5_meMS6am0"},
{"content":{"body":"they are one-shot-init `sealed` objects","format":"org.matrix.custom.html","formatted_body":"they are one-shot-init <code>sealed</code> objects","m.mentions":{},"msgtype":"m.text"},"ts":1727392049451,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K4nuqSWWwVI_RYozcG5b7ZGbhzVUFnMM1QvOFiOVbuE"},
{"content":{"body":"but i guess that's what Records are","m.mentions":{},"msgtype":"m.text"},"ts":1727392051785,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$2i11KPVUpH2MqFslaofl_INa9hSoF3GB2o-jYebXxSY"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1727392059885,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_36z5o15IBjPy2TgtpAkYJ9DLh6pGj9aXxmTHT_wZ68"},
{"content":{"body":"Structs aren't immutable, no. That's half the point.","m.mentions":{},"msgtype":"m.text"},"ts":1727392083279,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0cIRZ5z1nBIk18zyFBPDpOlTGf5MAYN2IwgtvYKy3po"},
{"content":{"body":"rbuckton: so i can live with proxy traps passing a bool i think?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: so i can live with proxy traps passing a bool i think?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1727392177576,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AykzWe6vt3a-85sJbO2PVDM-G1XsENdOYN7lxZy7nxM"},
{"content":{"body":"like that'd solve everyone's problems wouldn't it?","m.mentions":{},"msgtype":"m.text"},"ts":1727392182832,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fbIbQO8Wsq7YYO5BKM9cZ3Aj5uKvD7g-C6rZPQ_U3RA"},
{"content":{"body":"i don't feel like that actually slows down anything either?","m.mentions":{},"msgtype":"m.text"},"ts":1727392192051,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4FUa-jFMZVZnpRUVVSXwnt2fobGucaRhFeABrvgzyw"},
{"content":{"body":"> <@ljharb:matrix.org> fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates\n\nIn the call today it was mentioned that some people do `new Proxy(obj, { ...Reflect, <whatever traps> })` for some reason, and IMO that seems like a very bad practice","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$jzXBLYEw2NFSBryHpfULDWimlv_4CB6aJ1uYAUroaK0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>fwiw this is no longer the case, as we explicitly decided last year wrt getIntrinsic and the symbol predicates</blockquote></mx-reply>In the call today it was mentioned that some people do <code>new Proxy(obj, { ...Reflect, &lt;whatever traps&gt; })</code> for some reason, and IMO that seems like a very bad practice","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jzXBLYEw2NFSBryHpfULDWimlv_4CB6aJ1uYAUroaK0"}},"msgtype":"m.text"},"ts":1727392200552,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9gXmmu7CfLOik4j_k2JMBmG-vEkhUOKqPriF7CVqBzY"},
{"content":{"body":" * rbuckton: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?","m.mentions":{},"m.new_content":{"body":"rbuckton: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AykzWe6vt3a-85sJbO2PVDM-G1XsENdOYN7lxZy7nxM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392213065,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wl5ivX_3cbjdBSF3bDDTubYOg9QfZ6T1uOQLZRY2gcI"},
{"content":{"body":"it is, and it's fine if new additions break them, but i also don't think \"extra\" handler methods would throw?","m.mentions":{},"msgtype":"m.text"},"ts":1727392219188,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5m5KjpZTTlw7RzIbpZYNT45-XZCeEkqvSlef_gRPpzY"},
{"content":{"body":"> <@shuyuguo:matrix.org> rbuckton: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?\n\nI mean, that's one of the three options we discussed, yes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$AykzWe6vt3a-85sJbO2PVDM-G1XsENdOYN7lxZy7nxM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: so i can live with proxy traps passing a bool i think and Reflect.get/set taking a bool?</blockquote></mx-reply>I mean, that's one of the three options we discussed, yes.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AykzWe6vt3a-85sJbO2PVDM-G1XsENdOYN7lxZy7nxM"}},"msgtype":"m.text"},"ts":1727392221159,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$52yVix9Ft51ZtIK5N4wXbaCMSjNO2adH6ZuyVvvyV3M"},
{"content":{"body":"yeah i think that seems doable","m.mentions":{},"msgtype":"m.text"},"ts":1727392228645,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0KNocdtltlPZf63CWINhgYEZNLr-cKHwjmIEdHFfeW4"},
{"content":{"body":"(btw presumably there's a way to brand-check both kinds of structs?)","m.mentions":{},"msgtype":"m.text"},"ts":1727392237569,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$SanliZmzy-M5aj3hBrPmz41s0-j-oXV3sH8nniZZlkY"},
{"content":{"body":"there's no way to brand-check non-shared structs","m.mentions":{},"msgtype":"m.text"},"ts":1727392252877,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gogg1mDkUNGBgNmFQNW1m3ikqEpViMrZqnulvhrmuTM"},
{"content":{"body":"because they are \"just\" sealed objects","m.mentions":{},"msgtype":"m.text"},"ts":1727392256450,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kLY4-syE0ptnd10oaza86tyjVFLqgFkSG5LKHjMNwFk"},
{"content":{"body":"so i don't know why you'd want to brand check them","m.mentions":{},"msgtype":"m.text"},"ts":1727392267768,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZpxydJ5tkqfiOHQimaFGCha_Eeodjm3WWLnO5Nlf1q0"},
{"content":{"body":"for shared structs, the spec draft doesn't have a predicate but you can actually write one that's kinda funny","m.mentions":{},"msgtype":"m.text"},"ts":1727392294101,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x6U1QiiN_P2bQDOochif_gArV9-s6jL5Q9AFbz5fb6g"},
{"content":{"body":"1. `Proxy`/`Reflect` is permissive: treats all get/set as if in `unsafe {}`\n2. `Proxy`/`Reflect` is restrictive: treats all get/set as if outside of `unsafe {}`, so they don't work in `unsafe {}` at all\n3. `Proxy`/`Reflect` accept/pass an `unsafe` boolean argument: Existing implementations will continue to work in `unsafe {}` with normal objects, need to opt in to work with shared structs.","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li><code>Proxy</code>/<code>Reflect</code> is permissive: treats all get/set as if in <code>unsafe {}</code></li>\n<li><code>Proxy</code>/<code>Reflect</code> is restrictive: treats all get/set as if outside of <code>unsafe {}</code>, so they don't work in <code>unsafe {}</code> at all</li>\n<li><code>Proxy</code>/<code>Reflect</code> accept/pass an <code>unsafe</code> boolean argument: Existing implementations will continue to work in <code>unsafe {}</code> with normal objects, need to opt in to work with shared structs.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1727392376204,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tdTCTxL_miVwUMAQN17w9QB-QnYMZqNhqjSIM92Z9lY"},
{"content":{"body":"`shared struct Tester { field; }; function IsSharedStruct(x) { let tester = new Tester(); try { unsafe { tester.field = x; } } catch (e) { return false; } return typeof x === 'object'; }`","format":"org.matrix.custom.html","formatted_body":"<code>shared struct Tester { field; }; function IsSharedStruct(x) { let tester = new Tester(); try { unsafe { tester.field = x; } } catch (e) { return false; } return typeof x === 'object'; }</code>","m.mentions":{},"msgtype":"m.text"},"ts":1727392408338,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PGjeFFJVbufvTVIAoB01eJM1lH1a47aGwaxE1C3f8n4"},
{"content":{"body":"> <@shuyuguo:matrix.org> for shared structs, the spec draft doesn't have a predicate but you can actually write one that's kinda funny\n\nSpec draft doesn't have one, but we did need to add one in the dev trial so we should probably add it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$x6U1QiiN_P2bQDOochif_gArV9-s6jL5Q9AFbz5fb6g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>for shared structs, the spec draft doesn&#39;t have a predicate but you can actually write one that&#39;s kinda funny</blockquote></mx-reply>Spec draft doesn't have one, but we did need to add one in the dev trial so we should probably add it.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$x6U1QiiN_P2bQDOochif_gArV9-s6jL5Q9AFbz5fb6g"}},"msgtype":"m.text"},"ts":1727392429218,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4vKjeFgBZxHKkAPMdAlOJkK43S3Dx0EPornpe8MCsaA"},
{"content":{"body":"i dunno where to put it","m.mentions":{},"msgtype":"m.text"},"ts":1727392446022,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n5zrkqKXrKC4YL6KOsRnOyXsfwLeeriwtdA0GoZm7L8"},
{"content":{"body":"> <@rbuckton:matrix.org> If a Proxy *can* trap `unsafeGet` and we always forward GetValue through unsafe get inside of an `unsafe` block, then Proxies stop working for regular objects inside of `unsafe`.\n\nUnless we specify the behavior of a missing `unsafeGet` trap to call the `get` trap and its target `[[Get]]` fallback (instead of falling back on the target's `[[UnsafeGet]]`)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$w91qPykyuU7mLl3i9rTgAIHtxgonzTmkuFLLtgIdFQg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If a Proxy <em>can</em> trap <code>unsafeGet</code> and we always forward GetValue through unsafe get inside of an <code>unsafe</code> block, then Proxies stop working for regular objects inside of <code>unsafe</code>.</blockquote></mx-reply>Unless we specify the behavior of a missing <code>unsafeGet</code> trap to call the <code>get</code> trap and its target <code>[[Get]]</code> fallback (instead of falling back on the target's <code>[[UnsafeGet]]</code>)","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w91qPykyuU7mLl3i9rTgAIHtxgonzTmkuFLLtgIdFQg"}},"msgtype":"m.text"},"ts":1727392450067,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XsIKRFSpTABrYajPD5aYXIe56tXRbuAsCI3is2CqzZ0"},
{"content":{"body":"On `Reflect` or `Atomics`, I suppose.","format":"org.matrix.custom.html","formatted_body":"On <code>Reflect</code> or <code>Atomics</code>, I suppose.","m.mentions":{},"msgtype":"m.text"},"ts":1727392461848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$03htuwylWawdKz9Kfw7yufOf-k3FMyXP67O3ntow9Wo"},
{"content":{"body":"hm yeah maybe `Reflect.canBeSharedAcrossAgents`?","format":"org.matrix.custom.html","formatted_body":"hm yeah maybe <code>Reflect.canBeSharedAcrossAgents</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1727392480364,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DCXvbcnKknC1O1iRqwBMCfCSq3hCf2Dho1-flNY3ejE"},
{"content":{"body":"> <@mhofman:matrix.org> Unless we specify the behavior of a missing `unsafeGet` trap to call the `get` trap and its target `[[Get]]` fallback (instead of falling back on the target's `[[UnsafeGet]]`)\n\nThat again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XsIKRFSpTABrYajPD5aYXIe56tXRbuAsCI3is2CqzZ0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Unless we specify the behavior of a missing <code>unsafeGet</code> trap to call the <code>get</code> trap and its target <code>[[Get]]</code> fallback (instead of falling back on the target's <code>[[UnsafeGet]]</code>)</blockquote></mx-reply>That again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XsIKRFSpTABrYajPD5aYXIe56tXRbuAsCI3is2CqzZ0"}},"msgtype":"m.text"},"ts":1727392486557,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_GXPU4jqTcwgLvIDXRO4zVmjlBY_p-lErCk-hgSpJgE"},
{"content":{"body":"and then you can use that in conjunction with typeof == object?","m.mentions":{},"msgtype":"m.text"},"ts":1727392487349,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ygfdbeR3yKUhQyK0Gg-k_2cHnS8PSfJ7yY-zHDz2wcI"},
{"content":{"body":"> <@rbuckton:matrix.org> That again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype\n\nI think there is no case where supporting existing proxies that implement a `get` trap can transparently forward to the unsafe behavior up the prototype chain. You just need to update your proxy implementation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$_GXPU4jqTcwgLvIDXRO4zVmjlBY_p-lErCk-hgSpJgE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype</blockquote></mx-reply>I think there is no case where supporting existing proxies that implement a <code>get</code> trap can transparently forward to the unsafe behavior up the prototype chain. You just need to update your proxy implementation","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_GXPU4jqTcwgLvIDXRO4zVmjlBY_p-lErCk-hgSpJgE"}},"msgtype":"m.text"},"ts":1727392557699,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uLdqw15gUjb42jDYjx9lNiRGqNQrfKHztQ8pm3rsfwQ"},
{"content":{"body":"> <@rbuckton:matrix.org> That again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype\n\n * I think there is no case where supporting existing proxies that implement a `get` trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$_GXPU4jqTcwgLvIDXRO4zVmjlBY_p-lErCk-hgSpJgE?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That again breaks the prototype walk behavior of [[Get]] if you have a shared struct prototype</blockquote></mx-reply> * I think there is no case where supporting existing proxies that implement a <code>get</code> trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation","m.mentions":{},"m.new_content":{"body":"I think there is no case where supporting existing proxies that implement a `get` trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation","format":"org.matrix.custom.html","formatted_body":"I think there is no case where supporting existing proxies that implement a <code>get</code> trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uLdqw15gUjb42jDYjx9lNiRGqNQrfKHztQ8pm3rsfwQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392578081,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-AV3kjIKorhnPU_C7cc6Gao0C-vFgJ3Vukcv11puOto"},
{"content":{"body":"> <@mhofman:matrix.org> I think there is no case where supporting existing proxies that implement a `get` trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation\n\nExcept for option (1) where Proxy/Reflect is permissive","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$uLdqw15gUjb42jDYjx9lNiRGqNQrfKHztQ8pm3rsfwQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I think there is no case where supporting existing proxies that implement a <code>get</code> trap can transparently forward to the unsafe behavior up the prototype chain is possible. You just need to update your proxy implementation</blockquote></mx-reply>Except for option (1) where Proxy/Reflect is permissive","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uLdqw15gUjb42jDYjx9lNiRGqNQrfKHztQ8pm3rsfwQ"}},"msgtype":"m.text"},"ts":1727392591383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1QaWSGvaA0Zkok41gXJu4dd7tbibYkv1bjaMvlbhUFY"},
{"content":{"body":"> <@shuyuguo:matrix.org> so i don't know why you'd want to brand check them\n\nfair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ZpxydJ5tkqfiOHQimaFGCha_Eeodjm3WWLnO5Nlf1q0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>so i don&#39;t know why you&#39;d want to brand check them</blockquote></mx-reply>fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZpxydJ5tkqfiOHQimaFGCha_Eeodjm3WWLnO5Nlf1q0"}},"msgtype":"m.text"},"ts":1727392606128,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kG6v8ze_Kzp48UoUWXZ6AiipwzzCXdrKWgiPlv5U9zQ"},
{"content":{"body":"> <@shuyuguo:matrix.org> so i don't know why you'd want to brand check them\n\n * fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ZpxydJ5tkqfiOHQimaFGCha_Eeodjm3WWLnO5Nlf1q0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>so i don't know why you'd want to brand check them</blockquote></mx-reply> * fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)","m.mentions":{},"m.new_content":{"body":"fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)","format":"org.matrix.custom.html","formatted_body":"fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$kG6v8ze_Kzp48UoUWXZ6AiipwzzCXdrKWgiPlv5U9zQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392631831,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$OlxWKZHtkSHEICux1RjRkB--CCBlM-xuTZY5ajdaA30"},
{"content":{"body":"but for this you'd want to brand check if it's an instance of a _particular_ struct declaration","format":"org.matrix.custom.html","formatted_body":"but for this you'd want to brand check if it's an instance of a <em>particular</em> struct declaration","m.mentions":{},"msgtype":"m.text"},"ts":1727392640952,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NKlOsX00zNu_wl_XGHsEQjEPXl-zKm4zcQGPGJKU_vs"},
{"content":{"body":"not that it is a struct","m.mentions":{},"msgtype":"m.text"},"ts":1727392646102,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5zRnNNmJTorLB3V4k7HSPE0PHeJTGbEuiKRESLLSV24"},
{"content":{"body":"> <@rbuckton:matrix.org> Except for option (1) where Proxy/Reflect is permissive\n\nNot really, that's just taking the opposite approach, any access from \"safe\" code becomes unsafe when going through a proxy","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$1QaWSGvaA0Zkok41gXJu4dd7tbibYkv1bjaMvlbhUFY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Except for option (1) where Proxy/Reflect is permissive</blockquote></mx-reply>Not really, that's just taking the opposite approach, any access from \"safe\" code becomes unsafe when going through a proxy","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1QaWSGvaA0Zkok41gXJu4dd7tbibYkv1bjaMvlbhUFY"}},"msgtype":"m.text"},"ts":1727392652358,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$i7TNWPy2gxMEg65ZhqQ9T2X952zIDWJCGdgrh-ejIV8"},
{"content":{"body":"because an unshared struct has no additional exotic behavior, unlike shared structs","m.mentions":{},"msgtype":"m.text"},"ts":1727392659757,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zoJ__l_er2SlfLWH7idJ-IouLWbXtnC0siKBsMSCoyA"},
{"content":{"body":"Mathieu Hofman: rbuckton it sounds like we won't get agreement on either the completely permission (1) or the completely restrictive (2)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> it sounds like we won't get agreement on either the completely permission (1) or the completely restrictive (2)","m.mentions":{"user_ids":["@mhofman:matrix.org","@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1727392702335,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ThAeGxa2_LRSLkoaCAO7ClergYTM484OF_XdqOWBvos"},
{"content":{"body":"> <@mhofman:matrix.org> Not really, that's just taking the opposite approach, any access from \"safe\" code becomes unsafe when going through a proxy\n\nregular objects with a regular prototype chain wouldn't care.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$i7TNWPy2gxMEg65ZhqQ9T2X952zIDWJCGdgrh-ejIV8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Not really, that's just taking the opposite approach, any access from \"safe\" code becomes unsafe when going through a proxy</blockquote></mx-reply>regular objects with a regular prototype chain wouldn't care.","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i7TNWPy2gxMEg65ZhqQ9T2X952zIDWJCGdgrh-ejIV8"}},"msgtype":"m.text"},"ts":1727392704110,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ABfDbhyHgwoinbr6mKzFmA9nILM3ie8DuoaXSWMY7r0"},
{"content":{"body":"and the only hiccup for a boolean-passing (3) is possibly implementation/performance difficulty, which i personally can't think of right now but maybe one of the other engines have something more concrete","m.mentions":{},"msgtype":"m.text"},"ts":1727392727994,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lyORfom-ab6TcbcB4Y2MQOW-pwOJNwX61pmHVe82LkQ"},
{"content":{"body":"if that's the case why don't we focus our energy on (3)?","m.mentions":{},"msgtype":"m.text"},"ts":1727392733642,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t5hfvPSM3bdDXROhbcoDwgh_5pebIZHHP7KIw8eTQUU"},
{"content":{"body":" * Mathieu Hofman: rbuckton it sounds like we won't get agreement on either the completely permissive (1) or the completely restrictive (2)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> it sounds like we won't get agreement on either the completely permissive (1) or the completely restrictive (2)","m.mentions":{},"m.new_content":{"body":"Mathieu Hofman: rbuckton it sounds like we won't get agreement on either the completely permissive (1) or the completely restrictive (2)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> it sounds like we won't get agreement on either the completely permissive (1) or the completely restrictive (2)","m.mentions":{"user_ids":["@mhofman:matrix.org","@rbuckton:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ThAeGxa2_LRSLkoaCAO7ClergYTM484OF_XdqOWBvos","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392743175,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r4SbKba2jlmQsf-eKzaRwrDQoqzBb9a_jSwJDaYEqEM"},
{"content":{"body":"> <@ljharb:matrix.org> fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)\n\nso for brand-checking for instances of a _particular_ struct declaration, struct methods are non-generic, so every method already includes a brand check","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$kG6v8ze_Kzp48UoUWXZ6AiipwzzCXdrKWgiPlv5U9zQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>fair, altho the \"why\" is \"for debugging\", a reason you'd want to brand-check anything (not the only reason, but certainly one of them)</blockquote></mx-reply>so for brand-checking for instances of a <em>particular</em> struct declaration, struct methods are non-generic, so every method already includes a brand check","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kG6v8ze_Kzp48UoUWXZ6AiipwzzCXdrKWgiPlv5U9zQ"}},"msgtype":"m.text"},"ts":1727392805729,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nooBW_dTQjzpHYA2hIZ5LAJPttBYOOpvlwl3eoEFtrQ"},
{"content":{"body":"ok, that works","m.mentions":{},"msgtype":"m.text"},"ts":1727392821693,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$46Vn2OJhML87YBPUw-_-6J1be8VwRGHJx-PhmsEqqdg"},
{"content":{"body":" * ok, that kindof works","m.mentions":{},"m.new_content":{"body":"ok, that kindof works","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$46Vn2OJhML87YBPUw-_-6J1be8VwRGHJx-PhmsEqqdg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727392828412,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Nki47agW8CG66dRmdLi4q-8sRBWvR5jDeSwBq7pnkxw"},
{"content":{"body":"What if we had [[SafeGet]]/[[Get]] instead of [[Get]]/[[UnsafeGet]], so that Reflect.get can be unsafe and we can add a Reflect.safeGet for when you want to be safe","msgtype":"m.text"},"ts":1727392844312,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3QR9Lj9lbJ94F6CWolM9ZG1iFD-9YhVgvFglgqdqXPY"},
{"content":{"body":"but yeah i'd want some kind of `isSharedStruct` method or similar for any of them","format":"org.matrix.custom.html","formatted_body":"but yeah i'd want some kind of <code>isSharedStruct</code> method or similar for any of them","m.mentions":{},"msgtype":"m.text"},"ts":1727392857649,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sZz6NT8Bj5lz1qIfXzGSOmoUKVjJ8iSL1oqkYp2rZH0"},
{"content":{"body":"> <@ljharb:matrix.org> but yeah i'd want some kind of `isSharedStruct` method or similar for any of them\n\nwhat about `Reflect.canBeSharedAcrossAgents()` that returns true for shared structs + primitives","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$sZz6NT8Bj5lz1qIfXzGSOmoUKVjJ8iSL1oqkYp2rZH0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but yeah i'd want some kind of <code>isSharedStruct</code> method or similar for any of them</blockquote></mx-reply>what about <code>Reflect.canBeSharedAcrossAgents()</code> that returns true for shared structs + primitives","m.mentions":{"user_ids":["@ljharb:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sZz6NT8Bj5lz1qIfXzGSOmoUKVjJ8iSL1oqkYp2rZH0"}},"msgtype":"m.text"},"ts":1727392879835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9OZzbM1RA5bLb3fdJct_db2MephUbZQgiuKGxYi6Dg4"},
{"content":{"body":"and you'd use that in conjunction with checking for non-primitive to know it's a shared struct","m.mentions":{},"msgtype":"m.text"},"ts":1727392889497,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bOMkVBJ1xk8QhUDOw3sgWNEEhtAoqbq4VpRY9ZT0Lfk"},
{"content":{"body":"SGTM","m.mentions":{},"msgtype":"m.text"},"ts":1727392891634,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$FlK72gHWxEGOgyfjWn67Ki-_3jQfqjPnQvr-1yBUgTM"},
{"content":{"body":"not in love with adding the word \"agent\" to observable JS, but the semantics are fine","m.mentions":{},"msgtype":"m.text"},"ts":1727392908284,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ME0HVPlBDNGZu6sl1-DXd7DlJ5EvHNpm_XBXoUe92oM"},
{"content":{"body":"well i mean","m.mentions":{},"msgtype":"m.text"},"ts":1727392913000,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SupsLCLFDVIx_45npyiapxmD2F1_6lfZxZ9_DcDJuGk"},
{"content":{"body":"i'd like it to be just canBeShared","m.mentions":{},"msgtype":"m.text"},"ts":1727392916469,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ouQBi7Wneyuc4D3PY8_SDw2FCtJXKObDeYI0zogb6i8"},
{"content":{"body":"better :-)","m.mentions":{},"msgtype":"m.text"},"ts":1727392923384,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RiDXoGFng6gyZTEGqiF4uPJPytqsNxvHo0KlyjjBGPM"},
{"content":{"body":"i was gonna say maybe \"shared\" is confusing but maybe not","m.mentions":{},"msgtype":"m.text"},"ts":1727392927762,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$48IoKgRTC47PYDLxy16NvomVlqsGwWRcQqodWSX2r2Q"},
{"content":{"body":"since we already call it SharedArrayBuffer","m.mentions":{},"msgtype":"m.text"},"ts":1727392930853,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gYqR3jBxNO_0mobBa803CT3rPHrPODwezRcg3h3BH6Y"},
{"content":{"body":"I think `Reflect.isShareable` is probably good enough. I'm in favor of concise names.","format":"org.matrix.custom.html","formatted_body":"I think <code>Reflect.isShareable</code> is probably good enough. I'm in favor of concise names.","m.mentions":{},"msgtype":"m.text"},"ts":1727392945003,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b_rXmddGehUrnY9j_0l0eh3PYnF_eV2VcFrS7lCjw0w"},
{"content":{"body":"That `SharedArrayBuffer` isn't shareable is unfortunate","format":"org.matrix.custom.html","formatted_body":"That <code>SharedArrayBuffer</code> isn't shareable is unfortunate","m.mentions":{},"msgtype":"m.text"},"ts":1727392961453,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$2U4Gv8TjIT5I8L_VT5y4aB4G0bahF2BDhtLWZoZfUZE"},
{"content":{"body":"ehhh ok","m.mentions":{},"msgtype":"m.text"},"ts":1727392962322,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Wu8eCgRQWSVMkoGrbAI9RGXfWF_JS6W3WfhhVY9T5s4"},
{"content":{"body":"lol right","m.mentions":{},"msgtype":"m.text"},"ts":1727392966283,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eKElcZmGScagUHYSQfUREoxfQ1KpjzwQluHQ4DFgJnQ"},
{"content":{"body":"i don't think we can win a fight on distinguishing the nuanced meaning between Shareable and Shared","m.mentions":{},"msgtype":"m.text"},"ts":1727392980780,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4krVSbnOH-BEnm6Ry3dXou60IHhZtgR7_m60wxbg8R0"},
{"content":{"body":"We do probably want a way to address that, like a shared handle to a `SharedArrayBuffer`.","format":"org.matrix.custom.html","formatted_body":"We do probably want a way to address that, like a shared handle to a <code>SharedArrayBuffer</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1727393026941,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$gX5RWnnRPamdYw86YImi0X0OkT4oDKhC3QroPLDlqEU"},
{"content":{"body":"right, that came up earlier with nicolo-ribaudo ","format":"org.matrix.custom.html","formatted_body":"right, that came up earlier with <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1727393039347,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$iqJ0GIi2Vo3Pmc0xEdQlnacbshxoW0z6y-MdtWAHWQw"},
{"content":{"body":"i don't want to expand the scope more here, i want to do that in a separate proposal","m.mentions":{},"msgtype":"m.text"},"ts":1727393046636,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$h79ZLmGJ5I_pt_wJDbv65lWeMXjBgS87f3WDpFybPw8"},
{"content":{"body":"past-tense `isShared` seems like it would indicate whether the struct is actually shared between two agens.","format":"org.matrix.custom.html","formatted_body":"past-tense <code>isShared</code> seems like it would indicate whether the struct is actually shared between two agens.","m.mentions":{},"msgtype":"m.text"},"ts":1727393061774,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fBuXGgp083mxxmd2qSop7KUc7WEAredLg6vtkEoljuc"},
{"content":{"body":" * past-tense `isShared` seems like it would indicate whether the struct is actually shared between two agents.","format":"org.matrix.custom.html","formatted_body":" * past-tense <code>isShared</code> seems like it would indicate whether the struct is actually shared between two agents.","m.mentions":{},"m.new_content":{"body":"past-tense `isShared` seems like it would indicate whether the struct is actually shared between two agents.","format":"org.matrix.custom.html","formatted_body":"past-tense <code>isShared</code> seems like it would indicate whether the struct is actually shared between two agents.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$fBuXGgp083mxxmd2qSop7KUc7WEAredLg6vtkEoljuc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727393071279,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M1bk2V5KIIJ0xG2syEFaE3n0MvB31HQfJ5MKU_EtH_o"},
{"content":{"body":"agreed, that's why i had \"can be\"","m.mentions":{},"msgtype":"m.text"},"ts":1727393073343,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Yw-ieel38uOkEEfzqbAJS1tLRDWSIKP0n8ZPnpjiB1g"},
{"content":{"body":"all right let me add this real quick to the spec draft","m.mentions":{},"msgtype":"m.text"},"ts":1727393168513,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LewI7u2EttuGKZ97dPOENlBTyDQrbMH9z-iwT2tE9UU"},
{"content":{"body":"> <@shuyuguo:matrix.org> if that's the case why don't we focus our energy on (3)?\n\nAgreed, I was just trying to point out that a boolean passing also does not satisfy the requirement of \"automatically work for existing proxy which have a shared struct somewhere on their chain\", which IMO I think is fine","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$t5hfvPSM3bdDXROhbcoDwgh_5pebIZHHP7KIw8eTQUU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>if that&#39;s the case why don&#39;t we focus our energy on (3)?</blockquote></mx-reply>Agreed, I was just trying to point out that a boolean passing also does not satisfy the requirement of \"automatically work for existing proxy which have a shared struct somewhere on their chain\", which IMO I think is fine","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$t5hfvPSM3bdDXROhbcoDwgh_5pebIZHHP7KIw8eTQUU"}},"msgtype":"m.text"},"ts":1727393185310,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$JsvYQpl8MZeYFeKoX7pqHK_1BUcaMkU46e4eAkBzcPo"},
{"content":{"body":"ah, gotcha","m.mentions":{},"msgtype":"m.text"},"ts":1727393210970,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DCON44VWWw03DwTyTFIIjHJlVWsiMxHz6-k0C0PYKic"},
{"content":{"body":"Btw, is there a reason `getOwnPropertyDescriptor` cannot return `{value: undefined}` (or maybe even a missing `value` field) for shared structs ? Also what is the expected behavior of `defineOwnProperty` on shared struct (aka does it ignore the define) ?","format":"org.matrix.custom.html","formatted_body":"Btw, is there a reason <code>getOwnPropertyDescriptor</code> cannot return <code>{value: undefined}</code> (or maybe even a missing <code>value</code> field) for shared structs ? Also what is the expected behavior of <code>defineOwnProperty</code> on shared struct (aka does it ignore the define) ?","m.mentions":{},"msgtype":"m.text"},"ts":1727393294723,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XYgaI1IUIPR3DOtpu1GKTfc2o-l37YcPqgXYeI45meo"},
{"content":{"body":"i don't understand the `getOwnPropertyDescriptor` question. it does return a property descriptor for properties that exist","format":"org.matrix.custom.html","formatted_body":"i don't understand the <code>getOwnPropertyDescriptor</code> question. it does return a property descriptor for properties that exist","m.mentions":{},"msgtype":"m.text"},"ts":1727393326997,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DPxGT56e1z0QpOT6gsUtRtH0jQLSe_0DxczZ4H-eppg"},
{"content":{"body":"oh, you're asking why it shouldn't just always return value: undefined?","m.mentions":{},"msgtype":"m.text"},"ts":1727393336886,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t5OSLdW-MuD6Q1DVc3k65fUXx5jayl0y-kneDRrdtwY"},
{"content":{"body":"because that seems like... lying?","m.mentions":{},"msgtype":"m.text"},"ts":1727393343012,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wrMr7BIU35_vxkSRkE4ymwtqbwUwrcKxD-_b38BKMCc"},
{"content":{"body":"correct","m.mentions":{},"msgtype":"m.text"},"ts":1727393343312,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$c7yH2pV98TC4KsoT5C0nVbRSZze6eUgNkI0bpFreaz0"},
{"content":{"body":"it's exotic behavior that I believe is legal","m.mentions":{},"msgtype":"m.text"},"ts":1727393359078,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$nfavA3U5oWZRCUls3GIuft5NjFPIIYSQ4QLWyVmlH00"},
{"content":{"body":"for all of this discussion we should keep in mind. The distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into `Proxy`/`Reflect` land is already complex behavior.","format":"org.matrix.custom.html","formatted_body":"for all of this discussion we should keep in mind. The distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into <code>Proxy</code>/<code>Reflect</code> land is already complex behavior.","m.mentions":{},"msgtype":"m.text"},"ts":1727393363091,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YeLylqnu7agVCvPC6thT1w1A_sm9gcjGYY44Y5T7IVo"},
{"content":{"body":"sure, but it seems incredibly confusing","m.mentions":{},"msgtype":"m.text"},"ts":1727393369023,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$e9Y0sPZ5wmpupIzrv2GWUmbc9F2jg52luSXPs-QXGFE"},
{"content":{"body":" * For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into `Proxy`/`Reflect` land is already complex behavior.","format":"org.matrix.custom.html","formatted_body":" * For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into <code>Proxy</code>/<code>Reflect</code> land is already complex behavior.","m.mentions":{},"m.new_content":{"body":"For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into `Proxy`/`Reflect` land is already complex behavior.","format":"org.matrix.custom.html","formatted_body":"For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into <code>Proxy</code>/<code>Reflect</code> land is already complex behavior.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YeLylqnu7agVCvPC6thT1w1A_sm9gcjGYY44Y5T7IVo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727393373451,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CkDgqFVgKoUBYeZVQ4LX8pwnYnQDD94DBKKJq0jxovg"},
{"content":{"body":"why would i strive to make it confusing","m.mentions":{},"msgtype":"m.text"},"ts":1727393376531,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FRpiXWFKbUBwZ1hgjr_07ZqO1fedtH9L8-BIYjqFwK8"},
{"content":{"body":"> <@rbuckton:matrix.org> For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into `Proxy`/`Reflect` land is already complex behavior.\n\nbig +1 to this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$YeLylqnu7agVCvPC6thT1w1A_sm9gcjGYY44Y5T7IVo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>For all of this discussion we should keep in mind that the distinction as to whether a get/set is safe or unsafe is a purely manufactured restriction. What we're trying to determine is how far we feel we need to push that restriction. IMO, stepping into <code>Proxy</code>/<code>Reflect</code> land is already complex behavior.</blockquote></mx-reply>big +1 to this","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YeLylqnu7agVCvPC6thT1w1A_sm9gcjGYY44Y5T7IVo"}},"msgtype":"m.text"},"ts":1727393388582,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$n6y7N8SAIa2d8uklNcpetS89ZnBiQ32jz3et3yQDDPQ"},
{"content":{"body":"it's about reducing the likelihood","m.mentions":{},"msgtype":"m.text"},"ts":1727393392903,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7XCKibXzUgnpEjm-5mGqX3kGKDWICKNdjOE-iriKkn8"},
{"content":{"body":"there is such a thing as diminishing returns","m.mentions":{},"msgtype":"m.text"},"ts":1727393400919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$45ACCdtz42NaIP4obbMnOEANdsybTqIc8qW-cTBI1sA"},
{"content":{"body":"> <@mhofman:matrix.org> Btw, is there a reason `getOwnPropertyDescriptor` cannot return `{value: undefined}` (or maybe even a missing `value` field) for shared structs ? Also what is the expected behavior of `defineOwnProperty` on shared struct (aka does it ignore the define) ?\n\nthe behavior of defineOwnProperty mirrors that of ordinary defineOwnProperty. if all the the property descriptor's fields match except the value, it writes the value","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XYgaI1IUIPR3DOtpu1GKTfc2o-l37YcPqgXYeI45meo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Btw, is there a reason <code>getOwnPropertyDescriptor</code> cannot return <code>{value: undefined}</code> (or maybe even a missing <code>value</code> field) for shared structs ? Also what is the expected behavior of <code>defineOwnProperty</code> on shared struct (aka does it ignore the define) ?</blockquote></mx-reply>the behavior of defineOwnProperty mirrors that of ordinary defineOwnProperty. if all the the property descriptor's fields match except the value, it writes the value","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XYgaI1IUIPR3DOtpu1GKTfc2o-l37YcPqgXYeI45meo"}},"msgtype":"m.text"},"ts":1727393460983,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nM1KjIfUoKIWbNRrYHEx-jKxXwPASQmfapB_yCsoUc4"},
{"content":{"body":"otherwise it returns false","m.mentions":{},"msgtype":"m.text"},"ts":1727393464004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cdCyB_c2R3b_7f3W3VZIhSgNDjs_Lz8pnETF56r95L8"},
{"content":{"body":"IMO, any API call like Object.gOPD is far enough away from guarding simple `x.y` access. ","format":"org.matrix.custom.html","formatted_body":"IMO, any API call like Object.gOPD is far enough away from guarding simple <code>x.y</code> access.","m.mentions":{},"msgtype":"m.text"},"ts":1727393464742,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3LSfDyfjDE0Cv6-mi_CigBrCQ1QLghgEnHTtoh0gQsw"},
{"content":{"body":"ok let's start with the `defineOwnProperty` case and go from there, what is the expected behavior? Does it do a \"set\" of the value?","format":"org.matrix.custom.html","formatted_body":"ok let's start with the <code>defineOwnProperty</code> case and go from there, what is the expected behavior? Does it do a \"set\" of the value?","m.mentions":{},"msgtype":"m.text"},"ts":1727393467723,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CAHnibMObcTBfHY6ab72RtOjSrfej3UwTS4jW5LlUf0"},
{"content":{"body":"yes, if enumerable, writable, configurable match","m.mentions":{},"msgtype":"m.text"},"ts":1727393499530,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NazKI_Q4LAkEubhzLuLXwKoFnbd1xgEURIokx0MMSsI"},
{"content":{"body":"(and if it exists, of course)","m.mentions":{},"msgtype":"m.text"},"ts":1727393518613,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-bZUdBa59qeeUAT6-1-VGAUqdq_kuqBCgMz-CrnX9S4"},
{"content":{"body":"I'm also really hesitant to manufacture an entire bifurcated reflection API across Reflect and Object just to preserve a manufactured distinction.","m.mentions":{},"msgtype":"m.text"},"ts":1727393529780,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ubatw8Yx6qpM_N7nBwxh2tHhDoDyVtvsQwgoTwy5KPA"},
{"content":{"body":"yes, let's keep the use case in sight","m.mentions":{},"msgtype":"m.text"},"ts":1727393574511,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FXjK2gjTwuGoWiQ5vV9arl51NOIav0t0nw1gpjlpgBM"},
{"content":{"body":"I mean my undefined / ignore defined value is consistent with the idea that these objects have exotic access behavior, and that you need to use explicit path to access the value","m.mentions":{},"msgtype":"m.text"},"ts":1727393625069,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$FfIKbw2AxKjxGn9ikhtXwgOzBbvzd1cS2IMN-B7-uV4"},
{"content":{"body":"but why make it more confusing","m.mentions":{},"msgtype":"m.text"},"ts":1727393682814,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lFXwb1X6xB6X1g47q-5WYPBy3jsXrj07qKRNDGAOjcY"},
{"content":{"body":"the mental model here is \"like unshared structs, but with more restrictions\"","m.mentions":{},"msgtype":"m.text"},"ts":1727393696093,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fJBN-Eb8Ka7bG6KEO5137OXHCxFuTyTjprARkg8m9tE"},
{"content":{"body":"Coming from the \"author interacting with objects\" that doesn't seem like a bifurcation to me.","m.mentions":{},"msgtype":"m.text"},"ts":1727393707568,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yyr2jVSKxBIe0xMDg0BVaek1uqKHbZ_cdZ7Uc7b9UsY"},
{"content":{"body":"the undefined / ignore defined value moves the needle towards \"shared structs are actually a completely different thing\"","m.mentions":{},"msgtype":"m.text"},"ts":1727393720793,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sYgzmYIpmbq89Zg90SdOXtQfSVYyVdbShwsNLyA1PHA"},
{"content":{"body":"yes and the restriction is you cannot use own prop MOPs to interact with the value of these fields","m.mentions":{},"msgtype":"m.text"},"ts":1727393739261,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$luHKj9RRG4qh9b34arQMoaXRlT1oz3qf60m0THpNYd4"},
{"content":{"body":"i think you should be able to if you want to?","m.mentions":{},"msgtype":"m.text"},"ts":1727393753211,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$q4F_S0qx1YFJZu_-LwR1FUULYJdoStXczFOR5NaOByQ"},
{"content":{"body":"how is that different from saying I should be able to \"get\" those fields from anywhere?","m.mentions":{},"msgtype":"m.text"},"ts":1727393789363,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Eeg2vrIVIKrFp1OdQfQx7PNsE2LhQMQIWQIfVQkNnNw"},
{"content":{"body":"it's different because i think own prop MOPs and Reflect are already escape hatches","m.mentions":{},"msgtype":"m.text"},"ts":1727393817526,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yXd_GX70_Q_iBIUAw9hAKSfxEhF4kJDQaPhAOidaom0"},
{"content":{"body":"they're used a fair amount by libraries ","m.mentions":{},"msgtype":"m.text"},"ts":1727393872840,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MBkxWBTP8DkmCcWTTxHvAtM-FfeWslYfoPbPE2p_qQ4"},
{"content":{"body":"does that contradict what i said?","m.mentions":{},"msgtype":"m.text"},"ts":1727393891284,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x__LfcvA6pk8_cuuOZzp6_RGpqwRaQF8exQFGZNt3T8"},
{"content":{"body":"but also why wouldn't we extend the boolean parameter to gOPD and dOP?","m.mentions":{},"msgtype":"m.text"},"ts":1727394106638,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$v1lcxlfQOmpdmfqTwO_kKTknfxQ5Xx66gPzWauSZOao"},
{"content":{"body":"I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe blocks\". A boolean value on `get` is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","format":"org.matrix.custom.html","formatted_body":"I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe blocks\". A boolean value on <code>get</code> is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","m.mentions":{},"msgtype":"m.text"},"ts":1727394234722,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$IZBBvDiL4hMnC-31uSDTfkSkeGlor1h4xmJL2TfHDTA"},
{"content":{"body":" * I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe aware code\". A boolean value on `get` is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","format":"org.matrix.custom.html","formatted_body":" * I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe aware code\". A boolean value on <code>get</code> is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","m.mentions":{},"m.new_content":{"body":"I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe aware code\". A boolean value on `get` is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","format":"org.matrix.custom.html","formatted_body":"I think if we allow access to shared struct field values through own prop MOP, we're opening too wide the door for reasoning about \"code will only interact with shared fields in unsafe aware code\". A boolean value on <code>get</code> is ok because it's an explicit opt-in. The others are not an opt-in of understanding what you're dealing with","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IZBBvDiL4hMnC-31uSDTfkSkeGlor1h4xmJL2TfHDTA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1727394254018,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lL2kyBBQ2RZs8BI-7mX86roEJ_FUqe0mwM0iroZXYHY"},
{"content":{"body":"but why wouldn't we pass the boolean on gOPD?","m.mentions":{},"msgtype":"m.text"},"ts":1727394280772,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ncjiK-_dG-8FxkcViEdDB8AzAMyG1GiDCX4DoKx4Ud4"}
]