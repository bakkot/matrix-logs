[
{"content":{"body":"Hey I have a question","m.mentions":{},"msgtype":"m.text"},"ts":1725273551592,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$L_tjP4eX-egmq_lymkgEQAAcSIpm8SC9iiQndZLaNn0"},
{"content":{"body":"Can a shared struct store a SharedArrayBuffer in one of its fields?","m.mentions":{},"msgtype":"m.text"},"ts":1725273567312,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$I_NFAR13aKf9ytq4fWwhMhcLUWcYQNlAI796HYS0K08"},
{"content":{"body":"I was originally assuming yes, because a SharedArrayBuffer is shareable, however I'm now having doubts because the value of the field would actually be the object wrapper around the shared buffer","m.mentions":{},"msgtype":"m.text"},"ts":1725273603085,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$OIYUCZac9IqQ0qFP5wDoUue1jAEuzd6XpQ7xYNpaggo"},
{"content":{"body":"Unfortunately, no, due to how a SAB is a regular JS object. The proposal adds a SharedArray, but it's not quite the same. ","format":"org.matrix.custom.html","formatted_body":"Unfortunately, no, due to how a SAB is a regular JS object. The proposal adds a SharedArray, but it's not quite the same.","msgtype":"m.text"},"ts":1725284609361,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oR5juq200IzGP7cT68mIF2tPd-62-lU8WwOiV7JTaDU"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I was originally assuming yes, because a SharedArrayBuffer is shareable, however I'm now having doubts because the value of the field would actually be the object wrapper around the shared buffer\n\nno, not unless we introduce a SharedArrayBuffer2ThatsActuallySharedHaha or something","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$OIYUCZac9IqQ0qFP5wDoUue1jAEuzd6XpQ7xYNpaggo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I was originally assuming yes, because a SharedArrayBuffer is shareable, however I&#39;m now having doubts because the value of the field would actually be the object wrapper around the shared buffer</blockquote></mx-reply>no, not unless we introduce a SharedArrayBuffer2ThatsActuallySharedHaha or something","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$OIYUCZac9IqQ0qFP5wDoUue1jAEuzd6XpQ7xYNpaggo"}},"msgtype":"m.text"},"ts":1725286405960,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HdUgVUhf7xKJEILU6_gynaghVcL18z4KerpV79ntecM"},
{"content":{"body":"which, i mean, we could","m.mentions":{},"msgtype":"m.text"},"ts":1725286417356,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GNmhd3dIeUk9eyZRKltBsQzPuyLkTgSD5QgiJDc8fQY"},
{"content":{"body":"like the easiest intermediate solution is probably a `SAB.token` that returns some opaque, shareable thing that can be passed back into a SAB constructor. this is not great because it encourages multiple wrappers, but that's already how SABs are","format":"org.matrix.custom.html","formatted_body":"like the easiest intermediate solution is probably a <code>SAB.token</code> that returns some opaque, shareable thing that can be passed back into a SAB constructor. this is not great because it encourages multiple wrappers, but that's already how SABs are","m.mentions":{},"msgtype":"m.text"},"ts":1725286480893,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PABXmccUnuw_KZYegb0xmnMKMKa6tuhtOKPwdd0IoQc"},
{"content":{"body":"If typed array constructors accept that opaque thing as a parameter, then probably we are good","msgtype":"m.text"},"ts":1725286607158,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$i4fnqDe_5ImP2KdhapfnMKMnNa7FzI6-hLhw9-F0G14"},
{"content":{"body":"Since most uses of a SharedArrayBuffer is to just pass it to a TypedArray constructor","msgtype":"m.text"},"ts":1725286633694,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_0mP6DM7lZyi3VHV6JAboHtcNkVvU7ApuPEJzb1wfAs"},
{"content":{"body":"shu: Can you give us any more information about the partner use cases?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Can you give us any more information about the partner use cases?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1725293193044,"senderName":"littledan (PTO until September 16)","senderId":"@littledan:matrix.org","id":"$BDXBXG4tf1EyzX4dAdaAMz4Fm5qVW_9t_f_ZmgkKjE8"},
{"content":{"body":"> <@littledan:matrix.org> shu: Can you give us any more information about the partner use cases?\n\nflutter's is the easiest to explain, i think. they will be compiling Dart to shared WasmGC. they associate DOM nodes with Dart objects that represent app state, including event listener callbacks. Dart objects themselves will be shareable across threads, but the event listener will only be accessible on the main thread (what we're calling thread-bound data). event listener callbacks close over the DOM node (in the main thread heap), the DOM node references the Dart object (in the shared heap), forming a cross-heap cycle","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$BDXBXG4tf1EyzX4dAdaAMz4Fm5qVW_9t_f_ZmgkKjE8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Can you give us any more information about the partner use cases?</blockquote></mx-reply>flutter's is the easiest to explain, i think. they will be compiling Dart to shared WasmGC. they associate DOM nodes with Dart objects that represent app state, including event listener callbacks. Dart objects themselves will be shareable across threads, but the event listener will only be accessible on the main thread (what we're calling thread-bound data). event listener callbacks close over the DOM node (in the main thread heap), the DOM node references the Dart object (in the shared heap), forming a cross-heap cycle","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BDXBXG4tf1EyzX4dAdaAMz4Fm5qVW_9t_f_ZmgkKjE8"}},"msgtype":"m.text"},"ts":1725308335035,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ArhXRhhd2R7pkhnn9DTE_DrfN4rXRT3HLFu6pLpQ2HI"},
{"content":{"body":"the simplest implementation technique for thread-bound data is a per-thread ephemeron map internally keyed by shared objects","m.mentions":{},"msgtype":"m.text"},"ts":1725308371385,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Cb1nKHducnmSFMgZiO_e6NMswovGqBfjIMhq3A4PtHQ"},
{"content":{"body":"so the GC work needed to support that use case boils down to the same work as supporting shared objects as weakmap keys (if you want to collect cycles)","m.mentions":{},"msgtype":"m.text"},"ts":1725308385850,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mwu_CLK4Wwn--Elw4eZt_yvn0dMUNotXcZazE-pPKEw"}
]