[
{"content":{"body":"so the upshot here is, i think: without field types, the kind of lock-free programming with shared structs will be pretty limited","msgtype":"m.text","org.matrix.msc1767.text":"so the upshot here is, i think: without field types, the kind of lock-free programming with shared structs will be pretty limited"},"ts":1646957000604,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sibHfNGlTShwi3rbNlDO9iu6Zvdkgw6KQLYORRrdi58"},
{"content":{"body":"and that's probably fine, because you shouldn't be doing lock-free programming most of the time?","msgtype":"m.text","org.matrix.msc1767.text":"and that's probably fine, because you shouldn't be doing lock-free programming most of the time?"},"ts":1646957015146,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IrNw1sSKcKm8USRF79W8fz4d_QeO2Dyj3UkGiC7xek4"},
{"content":{"body":"One of the uses for `compareExchange` is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use `compareExchange` kind of defeats the purpose. ","format":"org.matrix.custom.html","formatted_body":"One of the uses for <code>compareExchange</code> is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use <code>compareExchange</code> kind of defeats the purpose.","msgtype":"m.text"},"ts":1646968685293,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$P7-Tg3qB1ZRBaRB7G72UdTB_g64mOXTwwRp4TFkPu-U"},
{"content":{"body":"That's interesting, so then `compareExchange`, `add`, `sub`, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?","format":"org.matrix.custom.html","formatted_body":"That's interesting, so then <code>compareExchange</code>, <code>add</code>, <code>sub</code>, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?","msgtype":"m.text"},"ts":1647024355484,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$rLugoHA6_n9btACbJIjrHsxr1Re0adXWyljjOy0O2G8"},
{"content":{"body":"BTW, on another topic there's been some development on the Wasm GC side. The idea for now is to have a minimal JS API for the MVP proposal, that won't allow attaching a prototype or reading the fields off of a GC struct from JS (more precisely, you would need to call a Wasm function to do that). Then a richer JS API would be in a separate follow-up proposal. I think that's still compatible with JS structs, in that the connection to structs could come in the follow-up proposal (there is no need for GC structs to be reflected as JS structs if the fields are not readable from JS directly as properties).\n\nBut I'd like to make sure the minimal JS API won't preclude using structs in the future, by keeping the reflected Wasm GC struct as a frozen object (with no own properties) and a null, immutable prototype. Eventually the follow-up proposal could make those reflect as structs. Does that sound like it would work for future compatibility with structs?","msgtype":"m.text"},"ts":1647024713056,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$vbf1yyG5xQVi6ZjvFDknmsnB81G-D2lvXVpx7YOjvwc"},
{"content":{"body":" * BTW, on another topic there's been some development on the Wasm GC side. The idea for now is to have a minimal JS API for the MVP proposal, that won't allow attaching a prototype or reading the fields off of a GC struct from JS (more precisely, you would need to call a Wasm function to do that). Then a richer JS API would be in a separate follow-up proposal. I think that's still compatible with JS structs, in that the connection to structs could come in the follow-up proposal (there is no need for GC structs to be reflected as JS structs if the fields are not readable from JS directly).\n\nBut I'd like to make sure the minimal JS API won't preclude using structs in the future, by keeping the reflected Wasm GC struct as a frozen object (with no own properties) and a null, immutable prototype. Eventually the follow-up proposal could make those reflect as structs. Does that sound like it would work for future compatibility with structs?","m.new_content":{"body":"BTW, on another topic there's been some development on the Wasm GC side. The idea for now is to have a minimal JS API for the MVP proposal, that won't allow attaching a prototype or reading the fields off of a GC struct from JS (more precisely, you would need to call a Wasm function to do that). Then a richer JS API would be in a separate follow-up proposal. I think that's still compatible with JS structs, in that the connection to structs could come in the follow-up proposal (there is no need for GC structs to be reflected as JS structs if the fields are not readable from JS directly).\n\nBut I'd like to make sure the minimal JS API won't preclude using structs in the future, by keeping the reflected Wasm GC struct as a frozen object (with no own properties) and a null, immutable prototype. Eventually the follow-up proposal could make those reflect as structs. Does that sound like it would work for future compatibility with structs?","msgtype":"m.text"},"m.relates_to":{"event_id":"$vbf1yyG5xQVi6ZjvFDknmsnB81G-D2lvXVpx7YOjvwc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1647024742191,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$M8L3F5CrvXbOVWrNZnJi2kS1tEmt_Q48iPyz-WHjzy4"},
{"content":{"body":" * BTW, on another topic there's been some development on the Wasm GC side. The idea for now is to have a minimal JS API for the MVP proposal, that won't allow attaching a prototype or reading the fields off of a GC struct from JS (more precisely, you would need to call a Wasm function to do that). Then a richer JS API would be in a separate follow-up proposal. I think that's still compatible with JS structs, in that the connection to structs could come in the follow-up proposal (there is no need for GC structs to be reflected as JS structs if the fields are not readable from JS directly as properties).\n\nBut I'd like to make sure the minimal JS API won't preclude using structs in the future, by keeping the reflected Wasm GC struct as a frozen object (with no own properties) and a null, immutable prototype. Eventually the follow-up proposal could make those reflect as structs. Does that sound like it would work for future compatibility with structs?","m.new_content":{"body":"BTW, on another topic there's been some development on the Wasm GC side. The idea for now is to have a minimal JS API for the MVP proposal, that won't allow attaching a prototype or reading the fields off of a GC struct from JS (more precisely, you would need to call a Wasm function to do that). Then a richer JS API would be in a separate follow-up proposal. I think that's still compatible with JS structs, in that the connection to structs could come in the follow-up proposal (there is no need for GC structs to be reflected as JS structs if the fields are not readable from JS directly as properties).\n\nBut I'd like to make sure the minimal JS API won't preclude using structs in the future, by keeping the reflected Wasm GC struct as a frozen object (with no own properties) and a null, immutable prototype. Eventually the follow-up proposal could make those reflect as structs. Does that sound like it would work for future compatibility with structs?","msgtype":"m.text"},"m.relates_to":{"event_id":"$vbf1yyG5xQVi6ZjvFDknmsnB81G-D2lvXVpx7YOjvwc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1647024763631,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$5-m_QyujO6SoTChfU3egr1BuMv5NQUPiieYEW7MzNuY"}
]