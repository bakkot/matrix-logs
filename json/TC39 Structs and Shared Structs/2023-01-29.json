[
{"content":{"body":"> <@mhofman:matrix.org> I fail to see how a user supplied value provided after shared struct creation would work. Unless you'd somehow remap types you may have already seen. IMO you'd at least need to pass your unique ID as part of the `SharedStructType.prepare` call. But in general I don't like strings for unique IDs, and since we already have object that carry identity across agents, I thought it'd make sense to reuse them.\n\nThe API I suggested would only be for the origin trial, not the final proposal. The user supplied type identity and prototype isn't \"provided after shared struct creation\", but rather, the shared struct constructor isn't usable until after it is registered. This is why shared struct type creation that depends on a prototype is different from data-only shared structs. You would have to call `register` to make the struct type valid.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8i7J9kQJhb-XbStTTn401OKkz212u1VY28tQRprdg9A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I fail to see how a user supplied value provided after shared struct creation would work. Unless you'd somehow remap types you may have already seen. IMO you'd at least need to pass your unique ID as part of the <code>SharedStructType.prepare</code> call. But in general I don't like strings for unique IDs, and since we already have object that carry identity across agents, I thought it'd make sense to reuse them.</blockquote></mx-reply>The API I suggested would only be for the origin trial, not the final proposal. The user supplied type identity and prototype isn't &quot;provided after shared struct creation&quot;, but rather, the shared struct constructor isn't usable until after it is registered. This is why shared struct type creation that depends on a prototype is different from data-only shared structs. You would have to call <code>register</code> to make the struct type valid.","m.relates_to":{"m.in_reply_to":{"event_id":"$8i7J9kQJhb-XbStTTn401OKkz212u1VY28tQRprdg9A"}},"msgtype":"m.text"},"ts":1675030644023,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ok_kneLbAgu78fzVWNnEU0BIHg7kqAGHe-KInRL6rQk"},
{"content":{"body":"> <@mhofman:matrix.org> I fail to see how a user supplied value provided after shared struct creation would work. Unless you'd somehow remap types you may have already seen. IMO you'd at least need to pass your unique ID as part of the `SharedStructType.prepare` call. But in general I don't like strings for unique IDs, and since we already have object that carry identity across agents, I thought it'd make sense to reuse them.\n\n\"Objects that carry identity across agents\" doesn't help with the model I was proposing. In my model, each agent must independently register the type associated with the struct.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$8i7J9kQJhb-XbStTTn401OKkz212u1VY28tQRprdg9A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I fail to see how a user supplied value provided after shared struct creation would work. Unless you'd somehow remap types you may have already seen. IMO you'd at least need to pass your unique ID as part of the <code>SharedStructType.prepare</code> call. But in general I don't like strings for unique IDs, and since we already have object that carry identity across agents, I thought it'd make sense to reuse them.</blockquote></mx-reply>&quot;Objects that carry identity across agents&quot; doesn't help with the model I was proposing. In my model, each agent must independently register the type associated with the struct.","m.relates_to":{"m.in_reply_to":{"event_id":"$8i7J9kQJhb-XbStTTn401OKkz212u1VY28tQRprdg9A"}},"msgtype":"m.text"},"ts":1675030728064,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$e6HtUfVuEwqD6pGsgKPxmcc7hCMzVnbwbXTxQjEFkU4"}
]