[
{"content":{"body":"rbuckton: i applaud the scope of \"shared modules\" but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.\n\nput another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs _is_ that opt-in. to have \"shared modules\" seems to require the capability to write code that is actual parallel and threadsafe _in general_, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i applaud the scope of &quot;shared modules&quot; but i feel that is tantamount to designing a new language, which is not incremental and significantly increases risk of adoption or shipping anything.</p>\n<p>put another way, IMO the only realistic way to move the needle for multithreading for JS is to have an opt-in carve out for shared memory. shared structs <em>is</em> that opt-in. to have &quot;shared modules&quot; seems to require the capability to write code that is actual parallel and threadsafe <em>in general</em>, including a threadsafe stdlib. were i to do a greenfield project i'd design a stdlib with that in mind but i feel like that would be too much to bite off at the moment?</p>\n","msgtype":"m.text"},"ts":1682380987685,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$w39BitZZMffCTWMo7mpjgzR4CDACjr6rEhPhH-HlD9o"},
{"content":{"body":"more i think about it, i think the non-threadsafe stdlib thing is the actual showstopper for me","msgtype":"m.text"},"ts":1682381047407,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NOkexxLcfhaP0YD70_4_A1LsESbGJBHlDVD4Nqizwx4"}
]