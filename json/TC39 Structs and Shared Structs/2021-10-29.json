[
{"content":{"body":"I'm personally more interested in the value we can get out of shared structs, and worry that having both might be more problematic in the long term. If we have to make design decisions later that effect things like shared functions, we could run into incompatibilities between shared and non-shared structs.","msgtype":"m.text"},"ts":1635477148710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$upDNJVR1y3ml01QndjJtkvjo_qczxHL8OM9V0862I-Y"},
{"content":{"body":"That might mean that, until we can figure out shared code, structs might be data only (i.e., no associated behavior via methods/accessors on the prototype). I think I could live with that, assuming we continue to work towards a solution for shared code and concurrent JS.","msgtype":"m.text"},"ts":1635477348238,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6mOc1oBFXsmjGtUXGvq8iTDSBVb18NOJM9LlNU5J1Qg"},
{"content":{"body":"yes, i am like 95% interested in shared structs, but the wasmgc story, well, needs a story","msgtype":"m.text"},"ts":1635512509590,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JMptDXWo-JHoWVoKijSZFBD0z0EvYBi0QCGTI18j0-4"},
{"content":{"body":"sounds like a good discussion topic for the next call","msgtype":"m.text"},"ts":1635512520503,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r95XzdCVde2rUvq3cslQy1RfhG5-VQcQ8kOi_Gl-Z_4"},
{"content":{"body":"What will WasmGC need that won't be provided by shared structs?","msgtype":"m.text"},"ts":1635535888087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HSAE8_CSTnOilBer_UN7scCGgsqT1ut5nw66SOwDE3o"},
{"content":{"body":"shared structs have restrictions that non-shared wasmgc instances don't","msgtype":"m.text"},"ts":1635536004411,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$k286ksaf5b6lb6eXFD7vPpvyJLDY-uzkRGx65nCQTa4"},
{"content":{"body":"like being able to only point to other shared structs and primitives","msgtype":"m.text"},"ts":1635536018032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A1ombq6k7qGtMijWlVHA188pVhyb9XWMlDKR5YUpuBQ"},
{"content":{"body":"Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","msgtype":"m.text"},"ts":1635536234403,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SFMo9t6Bxtv3zO_jm0yAOoZ0jGxtJ6pwgB73HI_wjR4"},
{"content":{"body":"* Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","m.new_content":{"body":"Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$SFMo9t6Bxtv3zO_jm0yAOoZ0jGxtJ6pwgB73HI_wjR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635536295923,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0zHwaHcGPZ6AhQkr-Z9WcF7VdddpNKzoev7_bBog9HQ"}
]