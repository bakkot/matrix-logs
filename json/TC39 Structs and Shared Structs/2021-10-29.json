[
{"content":{"body":"I'm personally more interested in the value we can get out of shared structs, and worry that having both might be more problematic in the long term. If we have to make design decisions later that effect things like shared functions, we could run into incompatibilities between shared and non-shared structs.","msgtype":"m.text"},"ts":1635477148710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$upDNJVR1y3ml01QndjJtkvjo_qczxHL8OM9V0862I-Y"},
{"content":{"body":"That might mean that, until we can figure out shared code, structs might be data only (i.e., no associated behavior via methods/accessors on the prototype). I think I could live with that, assuming we continue to work towards a solution for shared code and concurrent JS.","msgtype":"m.text"},"ts":1635477348238,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6mOc1oBFXsmjGtUXGvq8iTDSBVb18NOJM9LlNU5J1Qg"},
{"content":{"body":"yes, i am like 95% interested in shared structs, but the wasmgc story, well, needs a story","msgtype":"m.text"},"ts":1635512509590,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JMptDXWo-JHoWVoKijSZFBD0z0EvYBi0QCGTI18j0-4"},
{"content":{"body":"sounds like a good discussion topic for the next call","msgtype":"m.text"},"ts":1635512520503,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r95XzdCVde2rUvq3cslQy1RfhG5-VQcQ8kOi_Gl-Z_4"},
{"content":{"body":"What will WasmGC need that won't be provided by shared structs?","msgtype":"m.text"},"ts":1635535888087,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$HSAE8_CSTnOilBer_UN7scCGgsqT1ut5nw66SOwDE3o"},
{"content":{"body":"shared structs have restrictions that non-shared wasmgc instances don't","msgtype":"m.text"},"ts":1635536004411,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$k286ksaf5b6lb6eXFD7vPpvyJLDY-uzkRGx65nCQTa4"},
{"content":{"body":"like being able to only point to other shared structs and primitives","msgtype":"m.text"},"ts":1635536018032,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A1ombq6k7qGtMijWlVHA188pVhyb9XWMlDKR5YUpuBQ"},
{"content":{"body":"Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","msgtype":"m.text"},"ts":1635536234403,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SFMo9t6Bxtv3zO_jm0yAOoZ0jGxtJ6pwgB73HI_wjR4"},
{"content":{"body":"* Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","m.new_content":{"body":"Are there other things we could do to shared structs to make it serve those needs? One thought I had while sketching out a concept for shared functions was thread-local storage, which could be used to store non-primitives with thread safety. There's also boxing, though that seemed contentious in the last plenary. ","msgtype":"m.text"},"m.relates_to":{"event_id":"$SFMo9t6Bxtv3zO_jm0yAOoZ0jGxtJ6pwgB73HI_wjR4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1635536295923,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$0zHwaHcGPZ6AhQkr-Z9WcF7VdddpNKzoev7_bBog9HQ"},
{"content":{"body":"i think if it is still an agreed goal that structs serve as JS reflections of wasmgc instances, i think it's unavoidable to have both shared and non-shared instances","msgtype":"m.text"},"ts":1635538535866,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UUzZJUFuG9nOo6CvrdE3CJnua-kttYsQCSgVDkSN-ao"},
{"content":{"body":"since multithreading for wasm is also opt-in","msgtype":"m.text"},"ts":1635538545096,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HBsreSGH3GnQkM4jayw83xL-vRMkjJzwwe1q6E4WDeI"},
{"content":{"body":"i don't see how you can have shared structs serve the need of representing a non-shared wasmgc instance, or why that would be desirable","msgtype":"m.text"},"ts":1635538582830,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TRdXjAbhx3f8U9M9kvcpeBO2bQ-gAbf6dFoFPChQQvY"},
{"content":{"body":"TLS seems the opposite of sharing, i'm not sure how that relates to putting non-primitives into shared structs","msgtype":"m.text"},"ts":1635538648533,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DRUOo00tEUfpxc5jRxrTdkJafK_Zb7fiZNvl5niSjk4"},
{"content":{"body":"are you envisioning some kind of TLS box? i'd see that strictly as a follow on","msgtype":"m.text"},"ts":1635538696189,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rsgMXFrYQn_ntdRAOhp1GewUP5sSI2UcQYwf6-TAEqY"},
{"content":{"body":"and that certainly wouldn't help the wasmgc use case","msgtype":"m.text"},"ts":1635538711490,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$56odf925Mhloq32ROL9gJ_utZv-GRLH0YvtoqEoBce8"},
{"content":{"body":"i'd like to better understand why having both shared and non-shared structs is problematic in the long term","msgtype":"m.text"},"ts":1635538885396,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Os1bsKFT1XZIxsiHaQNDXkC0Hhj0R7Vs3km9TGvwfmA"},
{"content":{"body":"one direction i could see this going is to restrict non-shared structs further, such that the _only_ additional restriction shared structs have is that you cannot assign non-shared struct objects into their fields","format":"org.matrix.custom.html","formatted_body":"one direction i could see this going is to restrict non-shared structs further, such that the <em>only</em> additional restriction shared structs have is that you cannot assign non-shared struct objects into their fields","msgtype":"m.text"},"ts":1635539107278,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IWkQ4ecTIM2H5fT56mdJTgQb7CbcJzOP30QotlPklPA"},
{"content":{"body":"that is, non-shared structs also become data-only, prototype-less things","msgtype":"m.text"},"ts":1635539115928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Hqzxw8RzJGMVbEqTgfGxRrG1GZXjeJ02n4pEYNowI-4"},
{"content":{"body":"until such time we know how to relax both","msgtype":"m.text"},"ts":1635539195808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8C_OtlP6ITq6Ey-0yxeJ85Cc8ySeGhXt_Rmxt-z5Nes"},
{"content":{"body":"or more speculatively, with the `::` operator,  perhaps the way to use structs OO-style is with `::`","format":"org.matrix.custom.html","formatted_body":"or more speculatively, with the <code>::</code> operator,  perhaps the way to use structs OO-style is with <code>::</code>","msgtype":"m.text"},"ts":1635539266550,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ajIXm7fxa4z1VIw0MgeAtx91keikhg99rERixpwx2M8"},
{"content":{"body":"that's pretty palatable to me","msgtype":"m.text"},"ts":1635539292324,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$r8S55XgOn-Zai_Hhw93RM97w_dLB5YhXc27P9UfAyeE"},
{"content":{"body":"> <@shuyuguo:matrix.org> are you envisioning some kind of TLS box? i'd see that strictly as a follow on\n\nI was thinking about it as a follow-on, but was just throwing it out as an idea.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$rsgMXFrYQn_ntdRAOhp1GewUP5sSI2UcQYwf6-TAEqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>are you envisioning some kind of TLS box? i&#39;d see that strictly as a follow on</blockquote></mx-reply>I was thinking about it as a follow-on, but was just throwing it out as an idea.","m.relates_to":{"m.in_reply_to":{"event_id":"$rsgMXFrYQn_ntdRAOhp1GewUP5sSI2UcQYwf6-TAEqY"}},"msgtype":"m.text"},"ts":1635541022926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$oq-kzxEzDH6-oZC1N_cmOdepcQevfXIBss-IdmFPKhI"},
{"content":{"body":"Honestly, as much as I want methods and prototypes on structs, I do feel we need to solve concurrency before we add them. Otherwise we might paint ourselves into a corner with inconsistencies between non-shared structs and shared structs.","msgtype":"m.text"},"ts":1635541098765,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QD4Or0gF_bHvY9Txo8PpNn7UqYHM6wu5cZTGYL3qbdI"},
{"content":{"body":"Only using `::` for structs kind of goes against my long term vision for them, but it might be a viable option for the short term assuming `::` is adopted. There was a fair amount of pushback in the last plenary given the various proposals related to `this`.","format":"org.matrix.custom.html","formatted_body":"Only using <code>::</code> for structs kind of goes against my long term vision for them, but it might be a viable option for the short term assuming <code>::</code> is adopted. There was a fair amount of pushback in the last plenary given the various proposals related to <code>this</code>.","msgtype":"m.text"},"ts":1635549943878,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GMeYsS1Z29TJMZ9HsSblEwh371Z3iLYbbfWe8D89bMs"}
]