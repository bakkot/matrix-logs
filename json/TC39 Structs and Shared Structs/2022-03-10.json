[
{"content":{"body":"interesting limitation i just ran into during implementation of the shared struct prototype: on shared structs, `Atomics` operations that need to inspect the value for its operation cannot work for values that don't have identity","format":"org.matrix.custom.html","formatted_body":"interesting limitation i just ran into during implementation of the shared struct prototype: on shared structs, <code>Atomics</code> operations that need to inspect the value for its operation cannot work for values that don't have identity","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"interesting limitation i just ran into during implementation of the shared struct prototype: on shared structs, `Atomics` operations that need to inspect the value for its operation cannot work for values that don't have identity","mimetype":"text/plain"},{"body":"interesting limitation i just ran into during implementation of the shared struct prototype: on shared structs, <code>Atomics</code> operations that need to inspect the value for its operation cannot work for values that don't have identity","mimetype":"text/html"}]},"ts":1646956244290,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vcuWxxqAxETePdTce-cVzOoiPteAuWanqvrZWDD0sOQ"},
{"content":{"body":"for example, suppose there's a shared struct `s` with a field `p` that has the value `42`","format":"org.matrix.custom.html","formatted_body":"for example, suppose there's a shared struct <code>s</code> with a field <code>p</code> that has the value <code>42</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"for example, suppose there's a shared struct `s` with a field `p` that has the value `42`","mimetype":"text/plain"},{"body":"for example, suppose there's a shared struct <code>s</code> with a field <code>p</code> that has the value <code>42</code>","mimetype":"text/html"}]},"ts":1646956271025,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ITHHPQXzL40VVTF_bSDmPhcK9UnikQNZvaPLwlp7d9I"},
{"content":{"body":"`Atomics.load(s, 'p')`, `Atomics.store(s, 'p', whatever)`, `Atomics.exchange(s, 'p', whatever)` all work fine since they just treat the field as bits, there's no inspection of the contents","format":"org.matrix.custom.html","formatted_body":"<code>Atomics.load(s, 'p')</code>, <code>Atomics.store(s, 'p', whatever)</code>, <code>Atomics.exchange(s, 'p', whatever)</code> all work fine since they just treat the field as bits, there's no inspection of the contents","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Atomics.load(s, 'p')`, `Atomics.store(s, 'p', whatever)`, `Atomics.exchange(s, 'p', whatever)` all work fine since they just treat the field as bits, there's no inspection of the contents","mimetype":"text/plain"},{"body":"<code>Atomics.load(s, 'p')</code>, <code>Atomics.store(s, 'p', whatever)</code>, <code>Atomics.exchange(s, 'p', whatever)</code> all work fine since they just treat the field as bits, there's no inspection of the contents","mimetype":"text/html"}]},"ts":1646956312033,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WdgZJ0BXqHKvFiKFxRvVNoKtIP64KsJsU4rR_D9BPas"},
{"content":{"body":"`Atomics.compareExchange(s, 'p', 42, whatever)` or `Atomics.add(s, 'p')`, by contrast, can't be made to work on all implementations","format":"org.matrix.custom.html","formatted_body":"<code>Atomics.compareExchange(s, 'p', 42, whatever)</code> or <code>Atomics.add(s, 'p')</code>, by contrast, can't be made to work on all implementations","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Atomics.compareExchange(s, 'p', 42, whatever)` or `Atomics.add(s, 'p')`, by contrast, can't be made to work on all implementations","mimetype":"text/plain"},{"body":"<code>Atomics.compareExchange(s, 'p', 42, whatever)</code> or <code>Atomics.add(s, 'p')</code>, by contrast, can't be made to work on all implementations","mimetype":"text/html"}]},"ts":1646956341246,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EE2G08MjFsZiPN8UiPszVD92ugSe6AYPfwpiZQWkdMI"},
{"content":{"body":"if an implementation chooses to box its values like V8, then '42' is not the integer 42, but a heap allocation. the implementation complexity for making those Atomics operations work is quite high, will be slow, and also defeats the purpose (lightweight synchronization). for heavier weight synchronization, use plain reads/writes and operations then synchronize separately on a mutex","msgtype":"m.text","org.matrix.msc1767.text":"if an implementation chooses to box its values like V8, then '42' is not the integer 42, but a heap allocation. the implementation complexity for making those Atomics operations work is quite high, will be slow, and also defeats the purpose (lightweight synchronization). for heavier weight synchronization, use plain reads/writes and operations then synchronize separately on a mutex"},"ts":1646956464752,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q6KYL3nW8uMjEBTeCnMs5svo7eVD3FrMMYva2Lqw_cQ"},
{"content":{"body":"if an implementation NaN-boxes, like JSC and SpiderMonkey, maybe treating double bit patterns as arbitrary atomic64s might work for a subset of operations like compareExchange, but can't be made to work for arithmetic operations","msgtype":"m.text","org.matrix.msc1767.text":"if an implementation NaN-boxes, like JSC and SpiderMonkey, maybe treating double bit patterns as arbitrary atomic64s might work for a subset of operations like compareExchange, but can't be made to work for arithmetic operations"},"ts":1646956546718,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1E-M2C8siv30mn4uKILgutAg5nBoPnOKTlnSRS9Nick"},
{"content":{"body":"since there are no hardware instructions for atomic floating point math","msgtype":"m.text","org.matrix.msc1767.text":"since there are no hardware instructions for atomic floating point math"},"ts":1646956554224,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cXoOc1moKZ7vlEFAN26soTLw2aGPuM2vfSY8CGm0ZXU"},
{"content":{"body":"OTOH if we extend structs with field types, then Atomics could work on certain field types (like the existing TA types)","msgtype":"m.text","org.matrix.msc1767.text":"OTOH if we extend structs with field types, then Atomics could work on certain field types (like the existing TA types)"},"ts":1646956675345,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$a_0ZHV9IAkZwv7X-AVC0GMSFsrYp-i1BiXxj_J9NmG8"}
]