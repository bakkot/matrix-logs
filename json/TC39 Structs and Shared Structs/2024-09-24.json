[
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I think that being able to completely virtualize that prototype attachment (i.e. have a hook for it) is neither needed nor desiderabile, but I'm happy to discuss it further :)\n\nFor the record, Nicolò convinced me of this last time we met. By introducing some opaque token for a cohort of disjoint prototypes, we can have the `Module`, `Evaluators`, and/or `Compartment` constructors designate which cohort of shared structs prototypes will be used in their lexical scope. I had already convinced myself that the mechanism for looking up the prototype was already lexical, so this mechanism would work fine for isolation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$t3sAK0TRShcb0m6rLDGRMNllEeZ-b3MdaOoOnwuI_yk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I think that being able to completely virtualize that prototype attachment (i.e. have a hook for it) is neither needed nor desiderabile, but I&#39;m happy to discuss it further :)</blockquote></mx-reply>For the record, Nicolò convinced me of this last time we met. By introducing some opaque token for a cohort of disjoint prototypes, we can have the <code>Module</code>, <code>Evaluators</code>, and/or <code>Compartment</code> constructors designate which cohort of shared structs prototypes will be used in their lexical scope. I had already convinced myself that the mechanism for looking up the prototype was already lexical, so this mechanism would work fine for isolation.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$t3sAK0TRShcb0m6rLDGRMNllEeZ-b3MdaOoOnwuI_yk"}},"msgtype":"m.text"},"ts":1727205533353,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$8dMyaq3I9YE33MS9fAqSeVVpgwFu5kLiWXwXUlZAOig"}
]