[
{"content":{"body":"> <@shuyuguo:matrix.org> Mathieu Hofman: here's a hypothetical when you're back. would making shared structs inaccessible outside of `shared { }` code blocks (a la `unsafe { }` blocks in rust) be considered sufficient syntactic friction?\n\nwhat do you mean by making inaccessible? I doubt you mean preventing interaction with instances of share structs outside these blocks? I don't see how could even work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$lM1Iln1TuOfF7GxFvZM-pkzEbVzG3LLbSMwFi97qzoE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: here's a hypothetical when you're back. would making shared structs inaccessible outside of <code>shared { }</code> code blocks (a la <code>unsafe { }</code> blocks in rust) be considered sufficient syntactic friction?</blockquote></mx-reply>what do you mean by making inaccessible? I doubt you mean preventing interaction with instances of share structs outside these blocks? I don't see how could even work.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lM1Iln1TuOfF7GxFvZM-pkzEbVzG3LLbSMwFi97qzoE"}},"msgtype":"m.text"},"ts":1717128049847,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EDp-YBudceMMCrAYqLXySkb5mhARI2KPD41xwEXFYbc"},
{"content":{"body":"> <@littledan:matrix.org> This is a pretty broad thing to be skeptical of. How does this fit together with rbuckton's feedback that methods were important for usability? Also, are you considering that the fundamental technology (\"TLS\") is needed for Wasm anyway, so most of the complexity will be there in the system either way?\n\nFor wasm shared objects, one approach is for them to be opaque obects in JS, without any fields. Afaik, there is also no proposal for attaching prototypes to non-shared wasm refs either. So I fail to see how the complexity for this JS feature would already be there.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XdVpvQJnLAtrShVaXF3kLqFyVDokbZXDxyESg9P3UbE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is a pretty broad thing to be skeptical of. How does this fit together with rbuckton's feedback that methods were important for usability? Also, are you considering that the fundamental technology (\"TLS\") is needed for Wasm anyway, so most of the complexity will be there in the system either way?</blockquote></mx-reply>For wasm shared objects, one approach is for them to be opaque obects in JS, without any fields. Afaik, there is also no proposal for attaching prototypes to non-shared wasm refs either. So I fail to see how the complexity for this JS feature would already be there.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XdVpvQJnLAtrShVaXF3kLqFyVDokbZXDxyESg9P3UbE"}},"msgtype":"m.text"},"ts":1717128444490,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wllYXk-jUy0Oo4sFihClkgGkZi6_1BUx-tSp5EOpiIY"}
]