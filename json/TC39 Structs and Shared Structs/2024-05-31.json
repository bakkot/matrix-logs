[
{"content":{"body":"> <@shuyuguo:matrix.org> Mathieu Hofman: here's a hypothetical when you're back. would making shared structs inaccessible outside of `shared { }` code blocks (a la `unsafe { }` blocks in rust) be considered sufficient syntactic friction?\n\nwhat do you mean by making inaccessible? I doubt you mean preventing interaction with instances of share structs outside these blocks? I don't see how could even work.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$lM1Iln1TuOfF7GxFvZM-pkzEbVzG3LLbSMwFi97qzoE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br><a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: here's a hypothetical when you're back. would making shared structs inaccessible outside of <code>shared { }</code> code blocks (a la <code>unsafe { }</code> blocks in rust) be considered sufficient syntactic friction?</blockquote></mx-reply>what do you mean by making inaccessible? I doubt you mean preventing interaction with instances of share structs outside these blocks? I don't see how could even work.","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lM1Iln1TuOfF7GxFvZM-pkzEbVzG3LLbSMwFi97qzoE"}},"msgtype":"m.text"},"ts":1717128049847,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$EDp-YBudceMMCrAYqLXySkb5mhARI2KPD41xwEXFYbc"},
{"content":{"body":"> <@littledan:matrix.org> This is a pretty broad thing to be skeptical of. How does this fit together with rbuckton's feedback that methods were important for usability? Also, are you considering that the fundamental technology (\"TLS\") is needed for Wasm anyway, so most of the complexity will be there in the system either way?\n\nFor wasm shared objects, one approach is for them to be opaque obects in JS, without any fields. Afaik, there is also no proposal for attaching prototypes to non-shared wasm refs either. So I fail to see how the complexity for this JS feature would already be there.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$XdVpvQJnLAtrShVaXF3kLqFyVDokbZXDxyESg9P3UbE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is a pretty broad thing to be skeptical of. How does this fit together with rbuckton's feedback that methods were important for usability? Also, are you considering that the fundamental technology (\"TLS\") is needed for Wasm anyway, so most of the complexity will be there in the system either way?</blockquote></mx-reply>For wasm shared objects, one approach is for them to be opaque obects in JS, without any fields. Afaik, there is also no proposal for attaching prototypes to non-shared wasm refs either. So I fail to see how the complexity for this JS feature would already be there.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XdVpvQJnLAtrShVaXF3kLqFyVDokbZXDxyESg9P3UbE"}},"msgtype":"m.text"},"ts":1717128444490,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$wllYXk-jUy0Oo4sFihClkgGkZi6_1BUx-tSp5EOpiIY"},
{"content":{"body":"> <@littledan:matrix.org> even though FinalizationRegistry uses a similarly function/constructor-based API with no syntax, that doesn't really provide any meaningful friction to prevent abuse. The motivation for abuse doesn't come from convenient syntax but rather useful semantics that people misunderstand and want to get at.\n\nFinalizationRegistry is different enough from destructors that it forces you to rethink what you're actually doing. Of course that doesn't guarantee the author will get it right.\nShared structs is an improvement over SAB for complex value types. However SAB did force you to think about what you were doing when coming from an object model. The concern here is that an author can too easily take a regular non shared aware class, and transform it into a shared struct, without really thinking about what they're doing.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$mLjhyyaV1JNp1t4Nn7gD-XfNv3-ovjkLNGZ7rKt9CZc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>even though FinalizationRegistry uses a similarly function/constructor-based API with no syntax, that doesn&#39;t really provide any meaningful friction to prevent abuse. The motivation for abuse doesn&#39;t come from convenient syntax but rather useful semantics that people misunderstand and want to get at.</blockquote></mx-reply>FinalizationRegistry is different enough from destructors that it forces you to rethink what you're actually doing. Of course that doesn't guarantee the author will get it right.<br>Shared structs is an improvement over SAB for complex value types. However SAB did force you to think about what you were doing when coming from an object model. The concern here is that an author can too easily take a regular non shared aware class, and transform it into a shared struct, without really thinking about what they're doing.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mLjhyyaV1JNp1t4Nn7gD-XfNv3-ovjkLNGZ7rKt9CZc"}},"msgtype":"m.text"},"ts":1717128875314,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$f0nokT25Pi1Rcy_nUswhtyo8yMlj-C7oXjzj8pyGNng"}
]