[
{"content":{"body":"rbuckton: re: VSCode debugging, i don't know but i wouldn't be surprised if devtools just doesn't work because nobody has looked at it. printf debugging is what we do unfortunately, devtools investment is unlikely to materialize without something like getting to stage 3 first","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: re: VSCode debugging, i don't know but i wouldn't be surprised if devtools just doesn't work because nobody has looked at it. printf debugging is what we do unfortunately, devtools investment is unlikely to materialize without something like getting to stage 3 first","msgtype":"m.text"},"ts":1694217961751,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RdvCcvwT6CPL1OnWMLGyHh5ehLqjHBLSPAq_pB9Opcw"},
{"content":{"body":"yeah, copying into normal objects sounds like it would kill performance indeed","msgtype":"m.text"},"ts":1694217977834,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wdqBqDiLZ1CNBKTL1qHt8BPrK3IfaTcB8lUML7Cb-mg"},
{"content":{"body":"what are the limitations? attaching behavior and that ownProperty bug?","msgtype":"m.text"},"ts":1694217991900,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc"},
{"content":{"body":"(please file issues for the limitations getting in your way in addition to the attaching behaviors thing)","msgtype":"m.text"},"ts":1694218012555,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DHfbsa0DI5MFO8qeBQ3Pxx1fbuAdzqAHL2nMOETdhxo"},
{"content":{"body":"> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?\n\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal `NodeArray` with a `SharedArray`. A `NodeArray` is just an `Array` with a few extra properties attached, but that causes several issues:\n- Can't define extra fields on `SharedArray`\n- Alternatively, can't define numeric indexed properties on a regular struct.\n- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every `for..of` and array method call to work around. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc?via=matrix.org&via=igalia.com&via=tzchat.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br />what are the limitations? attaching behavior and that ownProperty bug?</blockquote></mx-reply><p>If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal <code>NodeArray</code> with a <code>SharedArray</code>. A <code>NodeArray</code> is just an <code>Array</code> with a few extra properties attached, but that causes several issues:</p>\n<ul>\n<li>Can't define extra fields on <code>SharedArray</code></li>\n<li>Alternatively, can't define numeric indexed properties on a regular struct.</li>\n<li>SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every <code>for..of</code> and array method call to work around.</li>\n</ul>","m.relates_to":{"m.in_reply_to":{"event_id":"$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc"}},"msgtype":"m.text"},"ts":1694219258514,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DarsKZSciltzyTOk-MBgMjvyX_OO1vCq65dMUoaZzMQ"},
{"content":{"body":"* In reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n\nCan't define extra fields on SharedArray\n\nAlternatively, can't define numeric indexed properties on a regular struct.\n\nSharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","m.new_content":{"body":"> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?\n\nIn reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n\nCan't define extra fields on SharedArray\n\nAlternatively, can't define numeric indexed properties on a regular struct.\n\nSharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc?via=matrix.org&via=igalia.com&via=tzchat.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a><br />what are the limitations? attaching behavior and that ownProperty bug?</blockquote></mx-reply><p>In reply to @shuyuguo:matrix.org<br />what are the limitations? attaching behavior and that ownProperty bug?</p>\n<p>If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:</p>\n<p>Can't define extra fields on SharedArray</p>\n<p>Alternatively, can't define numeric indexed properties on a regular struct.</p>\n<p>SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$DarsKZSciltzyTOk-MBgMjvyX_OO1vCq65dMUoaZzMQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694219273931,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hRhKb2Gzad9yI1EN_nmB16gkQR2tico3rrwRFcftrFo"},
{"content":{"body":"* In reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIn reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n- Can't define extra fields on SharedArray\n\n- Alternatively, can't define numeric indexed properties on a regular struct.\n\n- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","m.new_content":{"body":"> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?\n\nIn reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIn reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n- Can't define extra fields on SharedArray\n\n- Alternatively, can't define numeric indexed properties on a regular struct.\n\n- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc?via=matrix.org&via=igalia.com&via=tzchat.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a><br />what are the limitations? attaching behavior and that ownProperty bug?</blockquote></mx-reply><p>In reply to shu<br />what are the limitations? attaching behavior and that ownProperty bug?</p>\n<p>In reply to @shuyuguo:matrix.org<br />what are the limitations? attaching behavior and that ownProperty bug?</p>\n<p>If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:</p>\n<ul>\n<li>\n<p>Can't define extra fields on SharedArray</p>\n</li>\n<li>\n<p>Alternatively, can't define numeric indexed properties on a regular struct.</p>\n</li>\n<li>\n<p>SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.</p>\n</li>\n</ul>","msgtype":"m.text"},"m.relates_to":{"event_id":"$DarsKZSciltzyTOk-MBgMjvyX_OO1vCq65dMUoaZzMQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694219300192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eYIECRTfNnVbySpfYe7crhWxy-aW2hcBFob7hX-9YUk"},
{"content":{"body":"* In reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIn reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\nIn reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n\nCan't define extra fields on SharedArray\n\nAlternatively, can't define numeric indexed properties on a regular struct.\n\nSharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","m.new_content":{"body":"> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?\n\nIn reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\n\nIn reply to shu\nwhat are the limitations? attaching behavior and that ownProperty bug?\n\nIn reply to @shuyuguo:matrix.org\nwhat are the limitations? attaching behavior and that ownProperty bug?\nIf I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:\n\nCan't define extra fields on SharedArray\n\nAlternatively, can't define numeric indexed properties on a regular struct.\n\nSharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$HK6u06ZlosWmfb7jkMUSqW_OnJwmpDNNvacK6hrVhhc?via=matrix.org&via=igalia.com&via=tzchat.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a><br />what are the limitations? attaching behavior and that ownProperty bug?</blockquote></mx-reply><p>In reply to shu<br />what are the limitations? attaching behavior and that ownProperty bug?</p>\n<p>In reply to shu<br />what are the limitations? attaching behavior and that ownProperty bug?</p>\n<p>In reply to @shuyuguo:matrix.org<br />what are the limitations? attaching behavior and that ownProperty bug?<br />If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:</p>\n<p>Can't define extra fields on SharedArray</p>\n<p>Alternatively, can't define numeric indexed properties on a regular struct.</p>\n<p>SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$DarsKZSciltzyTOk-MBgMjvyX_OO1vCq65dMUoaZzMQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1694219312877,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ocxWVb55I6C8OTf7nFmdD_RQODZBvcX3Fe7y3qVemXE"},
{"content":{"body":"We also use data structures like `Map` that we can't emulate due to the inability to attach behavior, so there's a lot of copying in and out of data structures we can use. ","format":"org.matrix.custom.html","formatted_body":"We also use data structures like <code>Map</code> that we can't emulate due to the inability to attach behavior, so there's a lot of copying in and out of data structures we can use.","msgtype":"m.text"},"ts":1694219400937,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$32QGTtZu_wri4kFB6jm-0tXdeNh5ps7Ikb36fIAGdSI"},
{"content":{"body":"If I wanted to extend these structs to the language service, we're in the realm of needing behavior and the ability to freeze or lock down specific properties. Our AST is mostly treated as immutable, but if we were to vend struct based nodes from our API they would become unsafe to use if a consumer could make changes to properties outside of a lock. ","format":"org.matrix.custom.html","formatted_body":"If I wanted to extend these structs to the language service, we're in the realm of needing behavior and the ability to freeze or lock down specific properties. Our AST is mostly treated as immutable, but if we were to vend struct based nodes from our API they would become unsafe to use if a consumer could make changes to properties outside of a lock.","msgtype":"m.text"},"ts":1694219594207,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_PCMF5KPLmFKaafI9WIoTcah3J4fseLYURurdvNQYeE"},
{"content":{"body":"For now I've worked around a few other issues. I add a `__tag__` field to structs I create when type identity is important, as well as a field containing a pseudo- identity hash so I can use some structs as keys in a shared hashmap implementation I wrote (in place of Map where needed). ","format":"org.matrix.custom.html","formatted_body":"For now I've worked around a few other issues. I add a <code>__tag__</code> field to structs I create when type identity is important, as well as a field containing a pseudo- identity hash so I can use some structs as keys in a shared hashmap implementation I wrote (in place of Map where needed).","msgtype":"m.text"},"ts":1694219872976,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JDsEnxfNxTSmDpGAjUKz475kRbxwhiczWZYMQlVB_Lg"},
{"content":{"body":"I'm using classes and decorators to fake syntax to better work with the type system, like in the example above. The decorators just collect field names and create a SharedStructType attached to the class, behavior is just defined as static methods. ","format":"org.matrix.custom.html","formatted_body":"I'm using classes and decorators to fake syntax to better work with the type system, like in the example above. The decorators just collect field names and create a SharedStructType attached to the class, behavior is just defined as static methods.","msgtype":"m.text"},"ts":1694220039203,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$QpTcJA8O3hcaPV-26zxWFZstkzbFTmRpfSenQkQ0SG4"},
{"content":{"body":"I'm also experimenting with a `Mutex` wrapper that let's me write code like this:\n\n```ts\n{\n  using lck = new UniqueLock(mutex);\n  ...\n}\n```\n\nThough the mutex wrapper is slower than `Atomics.Mutex`.","format":"org.matrix.custom.html","formatted_body":"<p>I'm also experimenting with a <code>Mutex</code> wrapper that let's me write code like this:</p>\n<pre><code class=\"language-ts\">{\n  using lck = new UniqueLock(mutex);\n  ...\n}\n</code></pre>\n<p>Though the mutex wrapper is slower than <code>Atomics.Mutex</code>.</p>","msgtype":"m.text"},"ts":1694220221680,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zxxvmIKYb01kpFyxKwlyp9QKvfOlfj7-EPK_4Q1B4gI"}
]