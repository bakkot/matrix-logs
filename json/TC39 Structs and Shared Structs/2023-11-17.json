[
{"content":{"body":"@shu: We've been having a discussion on the enum proposal that Jack Works presented awhile back, and one of my goals for enums is that enum values will be shareable in some form. The basic premise is that an `enum` could have enum members that are either Number, BigInt, String, Symbol, or an immutable tagged data structure (for ADT enums). Numbers and strings won't be problematic, since those can already be stored in a shared struct, and I plan to ensure that the data structure for ADT enums will be shareable in some way (possibly defined internally as a shared struct).\nDo you expect that shared structs will also be able to store BigInt and Symbol values? If not all BigInt values, would limiting it to only 64-bit integers be viable? If not all Symbol values, would it be feasible to support only Symbols originateing from an `enum` (or a `shared enum`)?\n\nFor additional context, enums might look something like:\n```\nenum Color of Number { Red, Blue, Green }\nColor.Red; // 0\nColor.Blue; // 1\n\nenum Flags of BigInt {\n  None = 0n,\n  Flag0 = 1n << 0,\n  // ...\n  Flag63 = 1n << 63,\n}\nFlags.Flag0; // 1n\n\nenum Result of String { Ok, BadInput }\nResult.Ok; // \"Ok\"\n\nenum Choices of Symbol { None, First, Second }\nChoices.First; // Symbol(\"Choices.First\")\n\nenum Option of ADT {\n  Some(value),\n  None\n}\nOption.Some(1); // an Option.Some object with a 'value' property of '1'\nOption.None; // TBD: either a Symbol or a special object like Option.Some\n```","format":"org.matrix.custom.html","formatted_body":"<p>@shu: We've been having a discussion on the enum proposal that Jack Works presented awhile back, and one of my goals for enums is that enum values will be shareable in some form. The basic premise is that an <code>enum</code> could have enum members that are either Number, BigInt, String, Symbol, or an immutable tagged data structure (for ADT enums). Numbers and strings won't be problematic, since those can already be stored in a shared struct, and I plan to ensure that the data structure for ADT enums will be shareable in some way (possibly defined internally as a shared struct).<br>Do you expect that shared structs will also be able to store BigInt and Symbol values? If not all BigInt values, would limiting it to only 64-bit integers be viable? If not all Symbol values, would it be feasible to support only Symbols originateing from an <code>enum</code> (or a <code>shared enum</code>)?</p>\n<p>For additional context, enums might look something like:</p>\n<pre><code>enum Color of Number { Red, Blue, Green }\nColor.Red; // 0\nColor.Blue; // 1\n\nenum Flags of BigInt {\n  None = 0n,\n  Flag0 = 1n &lt;&lt; 0,\n  // ...\n  Flag63 = 1n &lt;&lt; 63,\n}\nFlags.Flag0; // 1n\n\nenum Result of String { Ok, BadInput }\nResult.Ok; // \"Ok\"\n\nenum Choices of Symbol { None, First, Second }\nChoices.First; // Symbol(\"Choices.First\")\n\nenum Option of ADT {\n  Some(value),\n  None\n}\nOption.Some(1); // an Option.Some object with a 'value' property of '1'\nOption.None; // TBD: either a Symbol or a special object like Option.Some\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1700253016726,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$iv3fCSVAxgCjiez4pwfAFHqsvxPzR7CkyRcp268Wbkg"},
{"content":{"body":"rbuckton: i think bigints and symbols ought to be shareable, but i need to think more about symbols obviously","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i think bigints and symbols ought to be shareable, but i need to think more about symbols obviously","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1700255554741,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Hf0UV-muOg1OcKzjbfnblsCDBPiu_mFRJpqv0EYMNrs"},
{"content":{"body":"I can't think of any reason why they shouldn't be, other than the GC complexity you discussed in the last working session","m.mentions":{},"msgtype":"m.text"},"ts":1700258674016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MtQ5unsiClBkk-WlQ2AQsf0rvPLnh7xO1BYXFmbmcU8"},
{"content":{"body":"how are symbols more complex than shared structs? they both have a unique identity","m.mentions":{},"msgtype":"m.text"},"ts":1700258741315,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VPr-V6Ot3zbrvHElNBLX0w7joFR4Ikwzb_tQFgbvjL4"},
{"content":{"body":"oh silly me, the engine would need to recognize which have been shared and which haven't, to know which need to participate in agent wide gc","m.mentions":{},"msgtype":"m.text"},"ts":1700258910109,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dVCg7t-H-MNg3hiVHG1UKBSc5qgTiBrrHui6QDO-XeA"},
{"content":{"body":" * oh silly me, the engine would need to recognize which have been shared and which haven't, to know which need to participate in agent-cluster wide gc","m.mentions":{},"m.new_content":{"body":"oh silly me, the engine would need to recognize which have been shared and which haven't, to know which need to participate in agent-cluster wide gc","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dVCg7t-H-MNg3hiVHG1UKBSc5qgTiBrrHui6QDO-XeA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1700258918729,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Hz7Mh9m9sa9OiYiJuHUGiIvSXpc92Yp_EltK4bcYXWU"},
{"content":{"body":"if symbols are immediate values with off-heap descriptions then you don't need to gc them :P","m.mentions":{},"msgtype":"m.text"},"ts":1700264070491,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uqAYn5pkhDnj1Wr2VrYp4gX6pN4zZGvy8fW1Uzn9M1s"}
]