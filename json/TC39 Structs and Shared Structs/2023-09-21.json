[
{"content":{"body":"rbuckton: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","msgtype":"m.text"},"ts":1695258408162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MOstM0kjZX0JuIrYNSqXqcxKNNWH7TNRgxHIPxdTZxM"},
{"content":{"body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.","format":"org.matrix.custom.html","formatted_body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.","msgtype":"m.text"},"ts":1695259432016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"}
]