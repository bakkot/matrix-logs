[
{"content":{"body":"rbuckton: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","msgtype":"m.text"},"ts":1695258408162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MOstM0kjZX0JuIrYNSqXqcxKNNWH7TNRgxHIPxdTZxM"},
{"content":{"body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.","format":"org.matrix.custom.html","formatted_body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.","msgtype":"m.text"},"ts":1695259432016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"},
{"content":{"body":"I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called `Node`, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:\n\n```\n@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called <code>Node</code>, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:</p>\n<pre><code>@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n</code></pre>\n","msgtype":"m.text"},"ts":1695259668370,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY"},
{"content":{"body":"`shared struct com.bloomberg.ashleys.Node {}`","format":"org.matrix.custom.html","formatted_body":"`shared struct com.bloomberg.ashleys.Node {}`","msgtype":"m.text"},"ts":1695261971795,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$34yEekd_V-_wXl3_99ibdWNzx9xB0BW4R53bDeNn0MY"},
{"content":{"body":"> <@shuyuguo:matrix.org> shared structs don't have user code constructors\n> \n> (i now also see that the README.md is incorrect)\n\nIt could be nice if fields could still have initialisers of literal values `field = 0`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>shared structs don't have user code constructors\n\n(i now also see that the README.md is incorrect)</blockquote></mx-reply>It could be nice if fields could still have initialisers of literal values `field = 0`","m.relates_to":{"m.in_reply_to":{"event_id":"$WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4"}},"msgtype":"m.text"},"ts":1695262293031,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pjv-K2DFHdsJD9RdzQcc4m09tMqDFQ_uXVtI1byVTMU"}
]