[
{"content":{"body":"rbuckton: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","msgtype":"m.text"},"ts":1695258408162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MOstM0kjZX0JuIrYNSqXqcxKNNWH7TNRgxHIPxdTZxM"},
{"content":{"body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.","format":"org.matrix.custom.html","formatted_body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.","msgtype":"m.text"},"ts":1695259432016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"},
{"content":{"body":"I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called `Node`, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:\n\n```\n@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called <code>Node</code>, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:</p>\n<pre><code>@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n</code></pre>\n","msgtype":"m.text"},"ts":1695259668370,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY"},
{"content":{"body":"`shared struct com.bloomberg.ashleys.Node {}`","format":"org.matrix.custom.html","formatted_body":"`shared struct com.bloomberg.ashleys.Node {}`","msgtype":"m.text"},"ts":1695261971795,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$34yEekd_V-_wXl3_99ibdWNzx9xB0BW4R53bDeNn0MY"},
{"content":{"body":"> <@shuyuguo:matrix.org> shared structs don't have user code constructors\n> \n> (i now also see that the README.md is incorrect)\n\nIt could be nice if fields could still have initialisers of literal values `field = 0`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>shared structs don't have user code constructors\n\n(i now also see that the README.md is incorrect)</blockquote></mx-reply>It could be nice if fields could still have initialisers of literal values `field = 0`","m.relates_to":{"m.in_reply_to":{"event_id":"$WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4"}},"msgtype":"m.text"},"ts":1695262293031,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pjv-K2DFHdsJD9RdzQcc4m09tMqDFQ_uXVtI1byVTMU"},
{"content":{"body":"Ashley Claymore: noted, good idea","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: noted, good idea","msgtype":"m.text"},"ts":1695262994470,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qupnNsEuLxZjsIEOkB4rdJwnziUKgyeQQoOhvwsgU6Q"},
{"content":{"body":"> <@rbuckton:matrix.org> A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.\n\nalso agreed, consider the syntax a strawperson. i don't love the keyword soup","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.</blockquote></mx-reply>also agreed, consider the syntax a strawperson. i don't love the keyword soup","m.relates_to":{"m.in_reply_to":{"event_id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"}},"msgtype":"m.text"},"ts":1695263030523,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yOG33ya4RzWAOih3DOew6rk64iKRr_A7ZP6HYpcIHLU"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called `Node`, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:\n> \n> ```\n> @RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n> ```\n\ni considered that, or a programmatic API to register shared structs. the issue is i'd prefer the registration to happen _during_ evaluation instead of _after_ for implementation complexity reasons. if it happens _after_, like with a @Register or a programmatic API, that means swapping out the guts of the constructor function, which i'd like to avoid","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called <code>Node</code>, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:</p>\n<pre><code>@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n</code></pre>\n</blockquote></mx-reply>i considered that, or a programmatic API to register shared structs. the issue is i'd prefer the registration to happen <em>during</em> evaluation instead of <em>after</em> for implementation complexity reasons. if it happens <em>after</em>, like with a @Register or a programmatic API, that means swapping out the guts of the constructor function, which i'd like to avoid","m.relates_to":{"m.in_reply_to":{"event_id":"$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY"}},"msgtype":"m.text"},"ts":1695263093297,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$flq_yp0MzyUGkWKeO6O0g_nBJMzritRTrxp8Df8HF6Q"},
{"content":{"body":"that's not a dealbreaker, just a preference","msgtype":"m.text"},"ts":1695263113017,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0TJBSraoxxONPl3xMU13BvPVldgjJUKEC8i-5XjkTAQ"},
{"content":{"body":"but do the broad strokes look good to you?","msgtype":"m.text"},"ts":1695263173817,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kN6CcU3nbYbye5_wJpw0o3upSJEt92elEjFhdUSfsls"},
{"content":{"body":"i... suppose the @RegisteredStruct decorator _could_ be implemented as applying during evaluation if it's some special built-in decorator that's not implementable by user code","format":"org.matrix.custom.html","formatted_body":"i... suppose the @RegisteredStruct decorator <em>could</em> be implemented as applying during evaluation if it's some special built-in decorator that's not implementable by user code","msgtype":"m.text"},"ts":1695263879239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$79zs4jT3sO45aa6Qpftf8uVGcMTS8fI76ixIoqr7L4A"},
{"content":{"body":"nothing in the decorator proposal precludes built-in native code decorators AFAIK","msgtype":"m.text"},"ts":1695263904004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OWoRIXXzRzyHOEx_CAAFZUYwfx0m7IX_pfXTDqrtNvg"},
{"content":{"body":"I've long believed there's room for built-in decorators with privileged capabilities that a runtime might be able to optimize ahead of time. For example, built in `@enumerable(true|false)`, `@writable(true|false)`, `@configurable(true|false)` decorators that can affect property descriptors since the Stage 3 proposal no longer has this capability.","format":"org.matrix.custom.html","formatted_body":"I've long believed there's room for built-in decorators with privileged capabilities that a runtime might be able to optimize ahead of time. For example, built in <code>@enumerable(true|false)</code>, <code>@writable(true|false)</code>, <code>@configurable(true|false)</code> decorators that can affect property descriptors since the Stage 3 proposal no longer has this capability.","msgtype":"m.text"},"ts":1695264593766,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b0rphL6I75mQBBi4NpXEl4uTUcw5IT6QdlLF2jQ9k6w"},
{"content":{"body":"Assuming they are trivially analyzable. ","msgtype":"m.text"},"ts":1695264643182,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMGSX1GKrhNCwTzAxh5sB4J5r8eNdJye5RVdHYxe-X8"},
{"content":{"body":"But an `@RegisterStruct` decorator has the opportunity to perform constructor replacement even without native code support, but I suppose in this case you're talking about it somehow patching the constructor to produce a `this` consistent with the registry during construction.","format":"org.matrix.custom.html","formatted_body":"But an <code>@RegisterStruct</code> decorator has the opportunity to perform constructor replacement even without native code support, but I suppose in this case you're talking about it somehow patching the constructor to produce a <code>this</code> consistent with the registry during construction.","msgtype":"m.text"},"ts":1695264815070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TU-fBX1mkaVt857ArUUU3tkVKbE9i0pRdIMAjagk8GM"},
{"content":{"body":"> When evaluated, if the class name does not exist in the registry, insert a new entry whose key is the class name, and whose value is a description of the layout (i.e. order and names of instance fields, and whether the prototype is agent-local).\n> When evaluated, if the class name already exists in the registry, check if the layout exactly matches the current evaluation's layout. If not, throw.\n\n1) that doesn't explain what happens if the name exists and the layout matches (I guess the default is do nothing, aka first one wins)\n2) as I explained, any kind of simple agent wide registry keyed on string is a no go as it's effectively global mutable state that can be observed by the program (e.g. try to evaluate a shared struct definition with a new shape, see if it throws or not)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>When evaluated, if the class name does not exist in the registry, insert a new entry whose key is the class name, and whose value is a description of the layout (i.e. order and names of instance fields, and whether the prototype is agent-local).<br>When evaluated, if the class name already exists in the registry, check if the layout exactly matches the current evaluation's layout. If not, throw.</p>\n</blockquote>\n<ol>\n<li>that doesn't explain what happens if the name exists and the layout matches (I guess the default is do nothing, aka first one wins)</li>\n<li>as I explained, any kind of simple agent wide registry keyed on string is a no go as it's effectively global mutable state that can be observed by the program (e.g. try to evaluate a shared struct definition with a new shape, see if it throws or not)</li>\n</ol>\n","msgtype":"m.text"},"ts":1695266948805,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$b5NWWKinKMFqSSFeQtzYyvmwa0uo7DRC_Sm9QCrm2y0"},
{"content":{"body":"Ok I hadn't seen the registry freezing thing. It feels weird to not be able to create new registered shared structs, as that would completely nerf the point of the registry","msgtype":"m.text"},"ts":1695267075713,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dgl0YjPkDQOlyqkJycBQI19N54F9y10pixlhModOYj8"},
{"content":{"body":"That also makes a program potentially become invalid after freezing of the registry","msgtype":"m.text"},"ts":1695267135518,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM"},
{"content":{"body":"Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That \"surprise\" is more than that, it's a blatant violation of the callable boundary.","msgtype":"m.text"},"ts":1695267561002,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4"},
{"content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __proto__ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <strong>proto</strong> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"ts":1695267800726,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0"},
{"content":{"body":" * Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the _proto_ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":" * Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <em>proto</em> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","m.new_content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the _proto_ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <em>proto</em> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695267812576,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UMc9fKQCCU4TX63KocFTanYt1eBgnxK5fvZ4bauavr0"},
{"content":{"body":" * Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":" * Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","m.new_content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695267826157,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$O3nwsrvwVT6VlAvvwXE2d122MzdqJaqsWDe45Dn15Xo"},
{"content":{"body":"> <@mhofman:matrix.org> That also makes a program potentially become invalid after freezing of the registry\n\nthe pointer of the registry is to be a communication channel. if you want to plug that channel, you'll have to coordinate shared struct types yourself without the registry, so yes, it does defeat the point of the registry","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>That also makes a program potentially become invalid after freezing of the registry</blockquote></mx-reply>the pointer of the registry is to be a communication channel. if you want to plug that channel, you'll have to coordinate shared struct types yourself without the registry, so yes, it does defeat the point of the registry","m.relates_to":{"m.in_reply_to":{"event_id":"$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM"}},"msgtype":"m.text"},"ts":1695269289242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-3jzKK31L032328JDa2w_vSM7tstS7ihEun7Kh6RFdc"},
{"content":{"body":"just like deleting capabilities defeat the point of those capabilities. isn't that the point of deniability?","msgtype":"m.text"},"ts":1695269306139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qmwDCmxFZOaNW4hyeESyiprKT2Yegfjc0aA89a3yOxA"},
{"content":{"body":"> <@mhofman:matrix.org> Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That \"surprise\" is more than that, it's a blatant violation of the callable boundary.\n\nyes, this would need to be censored in the callable boundary if it's agent-local instead of realm-local","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That &quot;surprise&quot; is more than that, it&#39;s a blatant violation of the callable boundary.</blockquote></mx-reply>yes, this would need to be censored in the callable boundary if it's agent-local instead of realm-local","m.relates_to":{"m.in_reply_to":{"event_id":"$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4"}},"msgtype":"m.text"},"ts":1695269427928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9G48AdeBk_xfHFMWc4l_S1ZhqtiJsrK-D8dUhRMIjg8"},
{"content":{"body":"> <@mhofman:matrix.org> Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.\n\ni'm fine with undefined, and manually assigning it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.</blockquote></mx-reply>i'm fine with undefined, and manually assigning it","m.relates_to":{"m.in_reply_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0"}},"msgtype":"m.text"},"ts":1695269456724,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WxQhXf7RDYmipbmVV760A2ZGMhxftH3wLMcm6jQ12Y8"},
{"content":{"body":"Except here that registry is syntactic.","msgtype":"m.text"},"ts":1695269460034,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ"},
{"content":{"body":"> <@mhofman:matrix.org> Except here that registry is syntactic.\n\nsee ron's built-in decorator idea. i'm not wedding to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Except here that registry is syntactic.</blockquote></mx-reply>see ron's built-in decorator idea. i'm not wedding to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","m.relates_to":{"m.in_reply_to":{"event_id":"$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ"}},"msgtype":"m.text"},"ts":1695269494020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uBj1YE_wTkxB2fd6268QmQZPFDj-9OM_u8ahTwJgU-o"},
{"content":{"body":"> <@mhofman:matrix.org> Except here that registry is syntactic.\n\n * see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Except here that registry is syntactic.</blockquote></mx-reply> * see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","m.new_content":{"body":"see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","msgtype":"m.text"},"m.relates_to":{"event_id":"$uBj1YE_wTkxB2fd6268QmQZPFDj-9OM_u8ahTwJgU-o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695269500310,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mbhAyCohodimoyWMObxepcHYFB4AkwqL5Rb5Yfg08lU"},
{"content":{"body":"Decorators are still syntax ","msgtype":"m.text"},"ts":1695269516059,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BrwDz-I-6KTjmKpdtPK-wd_6uOmxiile-HLpTJTpv0U"},
{"content":{"body":"`delete O.p` is still syntax...","format":"org.matrix.custom.html","formatted_body":"<code>delete O.p</code> is still syntax...","msgtype":"m.text"},"ts":1695269527800,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OigEOPoY24QQPrtL8RlsKvKAKGuCQzywTLxfHzFreGo"},
{"content":{"body":"what line are you drawing?","msgtype":"m.text"},"ts":1695269534626,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$woXgVc5AbIBnvYoVFfe6xggcNyRSrUCvqcHNeHdnmos"},
{"content":{"body":"But even if it was programmatic, that makes a program potentially become invalid. There is almost no existing capability exposing state built into the language today","msgtype":"m.text"},"ts":1695269596475,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ND0ZxhU9Twz1tOvTGS8BTjAM2XZkScxqQbkMg4o4QDI"},
{"content":{"body":"there is no precedent for this, agreed","msgtype":"m.text"},"ts":1695269625388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CLZVZ1wxGe15l9lxATYDqOv9gQDjTlGsvaYnGcxiV28"},
{"content":{"body":"it is a new capability","msgtype":"m.text"},"ts":1695269629274,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P36A6pUBXCnN0OK6r9kg9zNhUtcX5uCuyr8cr98FnjY"},
{"content":{"body":"I'm drawing the line at no built-in exposing some global state","msgtype":"m.text"},"ts":1695269633598,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RYm77bkESn4_ueXr3zGAUo3XzGM7wsIfEx1h6EHSiO4"},
{"content":{"body":"* I'm drawing the line at no new built-in exposing some global state","m.new_content":{"body":"I'm drawing the line at no new built-in exposing some global state","msgtype":"m.text"},"m.relates_to":{"event_id":"$RYm77bkESn4_ueXr3zGAUo3XzGM7wsIfEx1h6EHSiO4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695269649978,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gKof7knqBdPjHMK-ZIn4hHv1ES6j3V6s1hYQAxBoci8"},
{"content":{"body":"this global state can be disabled for programs that don't use it","msgtype":"m.text"},"ts":1695269673959,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J4J4LwkJVxV1CJMuGnEPq_GkpQvp9YOPdHIKr_5cySA"},
{"content":{"body":"if your program uses it and depends on the communication channel to get around a pretty bad DX issue, then... you opt into it","msgtype":"m.text"},"ts":1695269690531,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q3cLHz9-FlDHc5nriGJp5oThx2k-VjJ6nXK2kVhgeZo"},
{"content":{"body":"Or at least, it has to be entirely deniable, not just partially.","msgtype":"m.text"},"ts":1695269693804,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-Zh6CZkKCs-IKRUyYRjd1_yxgQs9GipbBk0PuhwattY"},
{"content":{"body":"in what sense is freezing the registry at program start not entirely deniable?","msgtype":"m.text"},"ts":1695269716643,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u6bLDwrHDqbichcQnkH84-pCj1dy10jg8uu0B2nXCKg"},
{"content":{"body":"in that case, you can't ever use registered shared structs, you must pass them around","msgtype":"m.text"},"ts":1695269740994,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$obDq8fBFquaZkrbNSvLy8CgdaWEqaKJ15cio8oo_avU"},
{"content":{"body":"Because creating a shared struct that would use that registry is disconnected, and is undeniable syntax.","msgtype":"m.text"},"ts":1695269776419,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GjRjoWI2EMRBQ523f5pf8Oi-HSuvrspv0giFw9MK6Fo"},
{"content":{"body":"okay, then let's say the API is programmatic","msgtype":"m.text"},"ts":1695269797315,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-d7h7lWvK4Fgy7-I0E28MexD6MMV8m3jXLOVASroF4c"},
{"content":{"body":"It changes the behavior of other code","msgtype":"m.text"},"ts":1695269807525,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MFRvyDBGLx1kYQSiys7z2QwLbgg5rDUUHyHi8K4AS8U"},
{"content":{"body":"and you can also delete the function that does the registering","msgtype":"m.text"},"ts":1695269810016,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cYD9d0kXtE9AXX4IR61wEewL7yfnqRkblBdvEqeh6bA"},
{"content":{"body":"so deleting any existing function-based capability can change behavior of other code","msgtype":"m.text"},"ts":1695269823051,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UGvFoHnEuUzWdcpmv-STr3VN6jh4sT1LeVNZeMcLXjE"},
{"content":{"body":"i don't see some bright line here","msgtype":"m.text"},"ts":1695269826841,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6-KxQm4DK801XPbxZ1jubRRSagpk03tr3gm1GvVfMhA"},
{"content":{"body":"even simpler, let's say the registry API is just its own global, which is configurable. registration is completely deniable","msgtype":"m.text"},"ts":1695270038459,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ECofN5HgN5RLrvuDS5v641KpSW6wmPDeUduqfD3hs5U"},
{"content":{"body":"for people who prefer a decorator-based approach, easy enough to write a class decorator that calls that API","msgtype":"m.text"},"ts":1695270067217,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Omgx--DdmqxUPUFW4QkQ1xHszc1-rUBK9i4jFlnu8NY"},
{"content":{"body":"It's  late for me to articulate it, but I feel extremely uncomfortable with such a global state being added to the language, and the mitigation to deny that feature. Maybe if it was normative optional it'd be acceptable?","msgtype":"m.text"},"ts":1695270128790,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$G7HWwoAnhJxuzMedBA8rGtrKET8zmo58u141N5gp9KM"},
{"content":{"body":"sure, if normative optional makes you more comfortable","msgtype":"m.text"},"ts":1695270149974,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GmBr3ltz1hI4G55TvqD6DQMqqj5i9HVZOQKZvhKmC2U"},
{"content":{"body":"we've done similarly for WeakRefs and finalizers","msgtype":"m.text"},"ts":1695270157282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P91tS8jan-0MGNjdfXlEl4uoBTcgYGIax4zJ2ycC_00"},
{"content":{"body":"yes let's pick this up tomorrow in the working session call","msgtype":"m.text"},"ts":1695270173663,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HbYVJSvw3OWIX9XZw14IqGvCeugK7kfeJGzngt_7-0U"},
{"content":{"body":"shu: I have some thoughts on the `struct` syntax, which I've posted here: https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I have some thoughts on the <code>struct</code> syntax, which I've posted here: https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53","msgtype":"m.text"},"ts":1695311484192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wmlme7DOyHIIF7MIq7FVOceZk-P8Wwta5V_RB7DEErw"},
{"content":{"body":"Given that `static shared prototype;` looks too much like a field definition, I opted to use `with shared prototype;` instead.","format":"org.matrix.custom.html","formatted_body":"Given that <code>static shared prototype;</code> looks too much like a field definition, I opted to use <code>with shared prototype;</code> instead.","msgtype":"m.text"},"ts":1695311558548,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GXzA45ayGRp0-BFOXdAfsKvTX1_m0BRaTVJYbkrPOFM"},
{"content":{"body":"Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to `Symbol.for()`, since you cannot observe whether something is registered and it doesn't require API deniability.","format":"org.matrix.custom.html","formatted_body":"Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to <code>Symbol.for()</code>, since you cannot observe whether something is registered and it doesn't require API deniability.","msgtype":"m.text"},"ts":1695311914095,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y"},
{"content":{"body":"let's discuss the registry in depth at the working session call today","msgtype":"m.text"},"ts":1695311990174,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$30v9ev4sdqIr3poGOHKLxRAsQmEvyRnAXs-VWSVrDvg"},
{"content":{"body":"which, PSA, is **pushed back 30 minutes** ","format":"org.matrix.custom.html","formatted_body":"which, PSA, is <strong>pushed back 30 minutes</strong>","msgtype":"m.text"},"ts":1695312000884,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$88FjBa7xcMzu2lhEsfHts7cXNoMK3-2INq-RpJCi5-Y"},
{"content":{"body":"i had a last minute conflict, packed meeting today, sorry","msgtype":"m.text"},"ts":1695312010141,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mDKL4WuIbA8U8yMUwcMd_JTwBpAZjUeQbUuSDIg6Was"},
{"content":{"body":"ah, that's a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.","msgtype":"m.text"},"ts":1695312054211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to `Symbol.for()`, since you cannot observe whether something is registered and it doesn't require API deniability.\n\ni was thinking about a programmatic registry as well that you'd need to first postMessage back and forth","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to <code>Symbol.for()</code>, since you cannot observe whether something is registered and it doesn't require API deniability.</blockquote></mx-reply>i was thinking about a programmatic registry as well that you'd need to first postMessage back and forth","m.relates_to":{"m.in_reply_to":{"event_id":"$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y"}},"msgtype":"m.text"},"ts":1695312065394,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u3qX3oho3gxbj-Keue8AD1x4sBalFaf6MT07XTBjJbI"},
{"content":{"body":"> <@rbuckton:matrix.org> ah, that's a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.\n\nthen let's try to get as much as we can in 30 minutes, i suppose","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>ah, that&#39;s a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.</blockquote></mx-reply>then let's try to get as much as we can in 30 minutes, i suppose","m.relates_to":{"m.in_reply_to":{"event_id":"$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4"}},"msgtype":"m.text"},"ts":1695312079478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EwC2MJVD55kzKMJL6Rjpp1nBHoC-OqeSdlnLIOkq11Q"},
{"content":{"body":"If I have to asynchronously wait for an `onmessage` in the main thread before I can start sending data to the worker, that won't work for my use cases.","format":"org.matrix.custom.html","formatted_body":"If I have to asynchronously wait for an <code>onmessage</code> in the main thread before I can start sending data to the worker, that won't work for my use cases.","msgtype":"m.text"},"ts":1695312135862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6e58Wa9o1v1vs6sbH9AlqgoY2CpkTEUvP3RB_b6Mhbw"},
{"content":{"body":"If the Worker has to do all the work before it *sees* the first message I post, that's fine.","format":"org.matrix.custom.html","formatted_body":"If the Worker has to do all the work before it <em>sees</em> the first message I post, that's fine.","msgtype":"m.text"},"ts":1695312204080,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ay99p3RRuVZZhAW5eVDiad9VkkG_x3Ag80utsOuyJFs"},
{"content":{"body":"Hmm. SharedArray only allows a max of 16382 (`(2**14)-2`) elements? ","format":"org.matrix.custom.html","formatted_body":"Hmm. SharedArray only allows a max of 16382 (<code>(2**14)-2</code>) elements?","msgtype":"m.text"},"ts":1695313811135,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY"},
{"content":{"body":"> <@rbuckton:matrix.org> Hmm. SharedArray only allows a max of 16382 (`(2**14)-2`) elements?\n\nBack when I implemented it there was a limit on the size of the objects that could be allocated in the engine's shared heap. I think that it is not the case anymore.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Hmm. SharedArray only allows a max of 16382 (<code>(2**14)-2</code>) elements?</blockquote></mx-reply>Back when I implemented it there was a limit on the size of the objects that could be allocated in the engine's shared heap. I think that it is not the case anymore.","m.relates_to":{"m.in_reply_to":{"event_id":"$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY"}},"msgtype":"m.text"},"ts":1695321081714,"senderName":"lpardosixtosms","senderId":"@lpardosixtosms:matrix.org","id":"$Zozyk7DNPdwjZXh_qU0pPKcjpMUbYnMUg-FPmEESySw"},
{"content":{"body":"rbuckton: thinking about your static declarative syntax idea","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: thinking about your static declarative syntax idea","msgtype":"m.text"},"ts":1695327598662,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8AR-FPF0ZlFWvQvyu3j_yvFsJAWC4UhXvVqra4VT3C0"},
{"content":{"body":"what you can have is, like a layout declaration that is completely static and deduplicated, decoupled from shared struct declarations. shared struct declarations would then take a layout, and produce constructor functions in the executing Realm per-evaluation, much like `class`es, but since they are given a layout, they can be hooked up under the hood","format":"org.matrix.custom.html","formatted_body":"what you can have is, like a layout declaration that is completely static and deduplicated, decoupled from shared struct declarations. shared struct declarations would then take a layout, and produce constructor functions in the executing Realm per-evaluation, much like <code>class</code>es, but since they are given a layout, they can be hooked up under the hood","msgtype":"m.text"},"ts":1695327715682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$llmUro_iSvwLL9kA0IglcfJZOZJlhKHzl-UHyq8VCA4"},
{"content":{"body":"can you provide an example of what this might look like, roughly? ","msgtype":"m.text"},"ts":1695327836613,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bGR7lTbIbLGs2bLjyvAt8uoDsfAmEpRJ1Ml1VW9ZYT0"},
{"content":{"body":"strawperson syntax:\n```\n// Special new declarative syntax\n// Can't anything that actually evaluates, so no method decls, no static initializers, etc\nlayout SharedThingLayout {\n  x; y;\n  with nonshared prototype;\n}\n\n// Declaration that's actually evaluated and produces a constructor function\nshared struct SharedThing layout SharedThingLayout {\n  // allowed because SharedThingLayout has thread-local prototype, so there's a place to install m()\n  m() { ... }\n  // allowed because x exists in the layout\n  x = 42;\n  // disallowed because z doesn't exist in the layout\n  z = \"foo\";\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>strawperson syntax:</p>\n<pre><code>// Special new declarative syntax\n// Can't anything that actually evaluates, so no method decls, no static initializers, etc\nlayout SharedThingLayout {\n  x; y;\n  with nonshared prototype;\n}\n\n// Declaration that's actually evaluated and produces a constructor function\nshared struct SharedThing layout SharedThingLayout {\n  // allowed because SharedThingLayout has thread-local prototype, so there's a place to install m()\n  m() { ... }\n  // allowed because x exists in the layout\n  x = 42;\n  // disallowed because z doesn't exist in the layout\n  z = \"foo\";\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695327905168,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KpGp0_MJqy1gMruwMDKNucoQ81A4TMP8KGaR1tqRhr8"}
]