[
{"content":{"body":"rbuckton: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: wrote up https://github.com/tc39/proposal-structs/blob/main/ATTACHING-BEHAVIOR.md, PTAL","msgtype":"m.text"},"ts":1695258408162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MOstM0kjZX0JuIrYNSqXqcxKNNWH7TNRgxHIPxdTZxM"},
{"content":{"body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.","format":"org.matrix.custom.html","formatted_body":"A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.","msgtype":"m.text"},"ts":1695259432016,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"},
{"content":{"body":"I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called `Node`, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:\n\n```\n@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called <code>Node</code>, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:</p>\n<pre><code>@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n</code></pre>\n","msgtype":"m.text"},"ts":1695259668370,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY"},
{"content":{"body":"`shared struct com.bloomberg.ashleys.Node {}`","format":"org.matrix.custom.html","formatted_body":"`shared struct com.bloomberg.ashleys.Node {}`","msgtype":"m.text"},"ts":1695261971795,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$34yEekd_V-_wXl3_99ibdWNzx9xB0BW4R53bDeNn0MY"},
{"content":{"body":"> <@shuyuguo:matrix.org> shared structs don't have user code constructors\n> \n> (i now also see that the README.md is incorrect)\n\nIt could be nice if fields could still have initialisers of literal values `field = 0`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk%3Amatrix.org/%24WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>shared structs don't have user code constructors\n\n(i now also see that the README.md is incorrect)</blockquote></mx-reply>It could be nice if fields could still have initialisers of literal values `field = 0`","m.relates_to":{"m.in_reply_to":{"event_id":"$WvXsm1GTTbxzCwu7Pg9sG-s7b33pF52cb4L7OwZpAg4"}},"msgtype":"m.text"},"ts":1695262293031,"senderName":"Ashley Claymore","senderId":"@aclaymore:matrix.org","id":"$pjv-K2DFHdsJD9RdzQcc4m09tMqDFQ_uXVtI1byVTMU"},
{"content":{"body":"Ashley Claymore: noted, good idea","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@aclaymore:matrix.org\">Ashley Claymore</a>: noted, good idea","msgtype":"m.text"},"ts":1695262994470,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qupnNsEuLxZjsIEOkB4rdJwnziUKgyeQQoOhvwsgU6Q"},
{"content":{"body":"> <@rbuckton:matrix.org> A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than `shared struct class Foo {}`. I imagine `struct Foo {}` and `shared struct Foo {}` would be sufficient to avoid ambiguity without needing the `class` keyword, and their behavior is different enough to justify the different syntax.\n\nalso agreed, consider the syntax a strawperson. i don't love the keyword soup","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>A quick point regarding syntax, just as I mentioned before about wanting to avoid excess ceremony, I'm hoping we can go with something far shorter than <code>shared struct class Foo {}</code>. I imagine <code>struct Foo {}</code> and <code>shared struct Foo {}</code> would be sufficient to avoid ambiguity without needing the <code>class</code> keyword, and their behavior is different enough to justify the different syntax.</blockquote></mx-reply>also agreed, consider the syntax a strawperson. i don't love the keyword soup","m.relates_to":{"m.in_reply_to":{"event_id":"$WsbyLESq-zsNlEAOLKAJDdDybjjl6OzgoyaIngJ6Zfw"}},"msgtype":"m.text"},"ts":1695263030523,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yOG33ya4RzWAOih3DOew6rk64iKRr_A7ZP6HYpcIHLU"},
{"content":{"body":"> <@rbuckton:matrix.org> I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called `Node`, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:\n> \n> ```\n> @RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n> ```\n\ni considered that, or a programmatic API to register shared structs. the issue is i'd prefer the registration to happen _during_ evaluation instead of _after_ for implementation complexity reasons. if it happens _after_, like with a @Register or a programmatic API, that means swapping out the guts of the constructor function, which i'd like to avoid","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>I'm also still not to keen on using class name as a global registry key, its far too easy to have collisions (so many things would be called <code>Node</code>, for example). I'd prefer the keying mechanism be divorced from the name of the struct somehow. In earlier discussions I'd recommended using UUIDs and decorators, i.e.:</p>\n<pre><code>@RegisteredStruct(\"92057993-84c2-4015-9a4e-f1d3810db4a2\") shared struct Foo { }\n</code></pre>\n</blockquote></mx-reply>i considered that, or a programmatic API to register shared structs. the issue is i'd prefer the registration to happen <em>during</em> evaluation instead of <em>after</em> for implementation complexity reasons. if it happens <em>after</em>, like with a @Register or a programmatic API, that means swapping out the guts of the constructor function, which i'd like to avoid","m.relates_to":{"m.in_reply_to":{"event_id":"$Mhs2bxoBdvBDgAvMFNwwXFWxU3dNCLXlk-DLRxZlaqY"}},"msgtype":"m.text"},"ts":1695263093297,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$flq_yp0MzyUGkWKeO6O0g_nBJMzritRTrxp8Df8HF6Q"},
{"content":{"body":"that's not a dealbreaker, just a preference","msgtype":"m.text"},"ts":1695263113017,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0TJBSraoxxONPl3xMU13BvPVldgjJUKEC8i-5XjkTAQ"},
{"content":{"body":"but do the broad strokes look good to you?","msgtype":"m.text"},"ts":1695263173817,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kN6CcU3nbYbye5_wJpw0o3upSJEt92elEjFhdUSfsls"},
{"content":{"body":"i... suppose the @RegisteredStruct decorator _could_ be implemented as applying during evaluation if it's some special built-in decorator that's not implementable by user code","format":"org.matrix.custom.html","formatted_body":"i... suppose the @RegisteredStruct decorator <em>could</em> be implemented as applying during evaluation if it's some special built-in decorator that's not implementable by user code","msgtype":"m.text"},"ts":1695263879239,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$79zs4jT3sO45aa6Qpftf8uVGcMTS8fI76ixIoqr7L4A"},
{"content":{"body":"nothing in the decorator proposal precludes built-in native code decorators AFAIK","msgtype":"m.text"},"ts":1695263904004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OWoRIXXzRzyHOEx_CAAFZUYwfx0m7IX_pfXTDqrtNvg"},
{"content":{"body":"I've long believed there's room for built-in decorators with privileged capabilities that a runtime might be able to optimize ahead of time. For example, built in `@enumerable(true|false)`, `@writable(true|false)`, `@configurable(true|false)` decorators that can affect property descriptors since the Stage 3 proposal no longer has this capability.","format":"org.matrix.custom.html","formatted_body":"I've long believed there's room for built-in decorators with privileged capabilities that a runtime might be able to optimize ahead of time. For example, built in <code>@enumerable(true|false)</code>, <code>@writable(true|false)</code>, <code>@configurable(true|false)</code> decorators that can affect property descriptors since the Stage 3 proposal no longer has this capability.","msgtype":"m.text"},"ts":1695264593766,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$b0rphL6I75mQBBi4NpXEl4uTUcw5IT6QdlLF2jQ9k6w"},
{"content":{"body":"Assuming they are trivially analyzable. ","msgtype":"m.text"},"ts":1695264643182,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qMGSX1GKrhNCwTzAxh5sB4J5r8eNdJye5RVdHYxe-X8"},
{"content":{"body":"But an `@RegisterStruct` decorator has the opportunity to perform constructor replacement even without native code support, but I suppose in this case you're talking about it somehow patching the constructor to produce a `this` consistent with the registry during construction.","format":"org.matrix.custom.html","formatted_body":"But an <code>@RegisterStruct</code> decorator has the opportunity to perform constructor replacement even without native code support, but I suppose in this case you're talking about it somehow patching the constructor to produce a <code>this</code> consistent with the registry during construction.","msgtype":"m.text"},"ts":1695264815070,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TU-fBX1mkaVt857ArUUU3tkVKbE9i0pRdIMAjagk8GM"},
{"content":{"body":"> When evaluated, if the class name does not exist in the registry, insert a new entry whose key is the class name, and whose value is a description of the layout (i.e. order and names of instance fields, and whether the prototype is agent-local).\n> When evaluated, if the class name already exists in the registry, check if the layout exactly matches the current evaluation's layout. If not, throw.\n\n1) that doesn't explain what happens if the name exists and the layout matches (I guess the default is do nothing, aka first one wins)\n2) as I explained, any kind of simple agent wide registry keyed on string is a no go as it's effectively global mutable state that can be observed by the program (e.g. try to evaluate a shared struct definition with a new shape, see if it throws or not)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>When evaluated, if the class name does not exist in the registry, insert a new entry whose key is the class name, and whose value is a description of the layout (i.e. order and names of instance fields, and whether the prototype is agent-local).<br>When evaluated, if the class name already exists in the registry, check if the layout exactly matches the current evaluation's layout. If not, throw.</p>\n</blockquote>\n<ol>\n<li>that doesn't explain what happens if the name exists and the layout matches (I guess the default is do nothing, aka first one wins)</li>\n<li>as I explained, any kind of simple agent wide registry keyed on string is a no go as it's effectively global mutable state that can be observed by the program (e.g. try to evaluate a shared struct definition with a new shape, see if it throws or not)</li>\n</ol>\n","msgtype":"m.text"},"ts":1695266948805,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$b5NWWKinKMFqSSFeQtzYyvmwa0uo7DRC_Sm9QCrm2y0"},
{"content":{"body":"Ok I hadn't seen the registry freezing thing. It feels weird to not be able to create new registered shared structs, as that would completely nerf the point of the registry","msgtype":"m.text"},"ts":1695267075713,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$dgl0YjPkDQOlyqkJycBQI19N54F9y10pixlhModOYj8"},
{"content":{"body":"That also makes a program potentially become invalid after freezing of the registry","msgtype":"m.text"},"ts":1695267135518,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM"},
{"content":{"body":"Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That \"surprise\" is more than that, it's a blatant violation of the callable boundary.","msgtype":"m.text"},"ts":1695267561002,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4"},
{"content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __proto__ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <strong>proto</strong> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"ts":1695267800726,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0"},
{"content":{"body":" * Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the _proto_ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":" * Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <em>proto</em> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","m.new_content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the _proto_ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the <em>proto</em> of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695267812576,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UMc9fKQCCU4TX63KocFTanYt1eBgnxK5fvZ4bauavr0"},
{"content":{"body":" * Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":" * Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","m.new_content":{"body":"Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","format":"org.matrix.custom.html","formatted_body":"Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695267826157,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$O3nwsrvwVT6VlAvvwXE2d122MzdqJaqsWDe45Dn15Xo"},
{"content":{"body":"> <@mhofman:matrix.org> That also makes a program potentially become invalid after freezing of the registry\n\nthe pointer of the registry is to be a communication channel. if you want to plug that channel, you'll have to coordinate shared struct types yourself without the registry, so yes, it does defeat the point of the registry","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>That also makes a program potentially become invalid after freezing of the registry</blockquote></mx-reply>the pointer of the registry is to be a communication channel. if you want to plug that channel, you'll have to coordinate shared struct types yourself without the registry, so yes, it does defeat the point of the registry","m.relates_to":{"m.in_reply_to":{"event_id":"$cQdBE-GdwFrGN9-fkYb-B0GwgpMfaNPB8Sxn-9AHPhM"}},"msgtype":"m.text"},"ts":1695269289242,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-3jzKK31L032328JDa2w_vSM7tstS7ihEun7Kh6RFdc"},
{"content":{"body":"just like deleting capabilities defeat the point of those capabilities. isn't that the point of deniability?","msgtype":"m.text"},"ts":1695269306139,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qmwDCmxFZOaNW4hyeESyiprKT2Yegfjc0aA89a3yOxA"},
{"content":{"body":"> <@mhofman:matrix.org> Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That \"surprise\" is more than that, it's a blatant violation of the callable boundary.\n\nyes, this would need to be censored in the callable boundary if it's agent-local instead of realm-local","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Also because the registry is agent local, what would be the behavior in case of the same declaration in 2 realms, especially if one of those is a ShadowRealm? That &quot;surprise&quot; is more than that, it&#39;s a blatant violation of the callable boundary.</blockquote></mx-reply>yes, this would need to be censored in the callable boundary if it's agent-local instead of realm-local","m.relates_to":{"m.in_reply_to":{"event_id":"$MDDPSHwWspUQI2FQ0RqavVXwFMpGCWeSXmjVJ0qRUF4"}},"msgtype":"m.text"},"ts":1695269427928,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9G48AdeBk_xfHFMWc4l_S1ZhqtiJsrK-D8dUhRMIjg8"},
{"content":{"body":"> <@mhofman:matrix.org> Regarding the agent-local fields, it feels weird to have `static nonshared prototype` automatically be created as an object instead of `undefined` like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.\n\ni'm fine with undefined, and manually assigning it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Regarding the agent-local fields, it feels weird to have <code>static nonshared prototype</code> automatically be created as an object instead of <code>undefined</code> like what a field would be. It also entices authors to go back to the pre-es5 way of populating the prototype, with assignment, which is a typical trigger of the override mistake. Which raised the question, what is the __ proto __ of that automatically created prototype object? If non-null, it's definitely going to cause override mistake issues in frozen intrinsics environments.</blockquote></mx-reply>i'm fine with undefined, and manually assigning it","m.relates_to":{"m.in_reply_to":{"event_id":"$ing8SIjZvhNG4aQomj18QzWVhhft4cKu3p7cEbKo1M0"}},"msgtype":"m.text"},"ts":1695269456724,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WxQhXf7RDYmipbmVV760A2ZGMhxftH3wLMcm6jQ12Y8"},
{"content":{"body":"Except here that registry is syntactic.","msgtype":"m.text"},"ts":1695269460034,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ"},
{"content":{"body":"> <@mhofman:matrix.org> Except here that registry is syntactic.\n\nsee ron's built-in decorator idea. i'm not wedding to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Except here that registry is syntactic.</blockquote></mx-reply>see ron's built-in decorator idea. i'm not wedding to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","m.relates_to":{"m.in_reply_to":{"event_id":"$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ"}},"msgtype":"m.text"},"ts":1695269494020,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$uBj1YE_wTkxB2fd6268QmQZPFDj-9OM_u8ahTwJgU-o"},
{"content":{"body":"> <@mhofman:matrix.org> Except here that registry is syntactic.\n\n * see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$zA2at0wXrYHlojvFOILrsb0QB2TySTub5UZrqhd6AOQ?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>Except here that registry is syntactic.</blockquote></mx-reply> * see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","m.new_content":{"body":"see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","format":"org.matrix.custom.html","formatted_body":"see ron's built-in decorator idea. i'm not wedded to syntax or even a programmatic API, though i have implementation reasons to prefer not programmatic, it is not instrumental","msgtype":"m.text"},"m.relates_to":{"event_id":"$uBj1YE_wTkxB2fd6268QmQZPFDj-9OM_u8ahTwJgU-o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695269500310,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mbhAyCohodimoyWMObxepcHYFB4AkwqL5Rb5Yfg08lU"},
{"content":{"body":"Decorators are still syntax ","msgtype":"m.text"},"ts":1695269516059,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BrwDz-I-6KTjmKpdtPK-wd_6uOmxiile-HLpTJTpv0U"},
{"content":{"body":"`delete O.p` is still syntax...","format":"org.matrix.custom.html","formatted_body":"<code>delete O.p</code> is still syntax...","msgtype":"m.text"},"ts":1695269527800,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$OigEOPoY24QQPrtL8RlsKvKAKGuCQzywTLxfHzFreGo"},
{"content":{"body":"what line are you drawing?","msgtype":"m.text"},"ts":1695269534626,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$woXgVc5AbIBnvYoVFfe6xggcNyRSrUCvqcHNeHdnmos"},
{"content":{"body":"But even if it was programmatic, that makes a program potentially become invalid. There is almost no existing capability exposing state built into the language today","msgtype":"m.text"},"ts":1695269596475,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ND0ZxhU9Twz1tOvTGS8BTjAM2XZkScxqQbkMg4o4QDI"},
{"content":{"body":"there is no precedent for this, agreed","msgtype":"m.text"},"ts":1695269625388,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$CLZVZ1wxGe15l9lxATYDqOv9gQDjTlGsvaYnGcxiV28"},
{"content":{"body":"it is a new capability","msgtype":"m.text"},"ts":1695269629274,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P36A6pUBXCnN0OK6r9kg9zNhUtcX5uCuyr8cr98FnjY"},
{"content":{"body":"I'm drawing the line at no built-in exposing some global state","msgtype":"m.text"},"ts":1695269633598,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$RYm77bkESn4_ueXr3zGAUo3XzGM7wsIfEx1h6EHSiO4"},
{"content":{"body":"* I'm drawing the line at no new built-in exposing some global state","m.new_content":{"body":"I'm drawing the line at no new built-in exposing some global state","msgtype":"m.text"},"m.relates_to":{"event_id":"$RYm77bkESn4_ueXr3zGAUo3XzGM7wsIfEx1h6EHSiO4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695269649978,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$gKof7knqBdPjHMK-ZIn4hHv1ES6j3V6s1hYQAxBoci8"},
{"content":{"body":"this global state can be disabled for programs that don't use it","msgtype":"m.text"},"ts":1695269673959,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J4J4LwkJVxV1CJMuGnEPq_GkpQvp9YOPdHIKr_5cySA"},
{"content":{"body":"if your program uses it and depends on the communication channel to get around a pretty bad DX issue, then... you opt into it","msgtype":"m.text"},"ts":1695269690531,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q3cLHz9-FlDHc5nriGJp5oThx2k-VjJ6nXK2kVhgeZo"},
{"content":{"body":"Or at least, it has to be entirely deniable, not just partially.","msgtype":"m.text"},"ts":1695269693804,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-Zh6CZkKCs-IKRUyYRjd1_yxgQs9GipbBk0PuhwattY"},
{"content":{"body":"in what sense is freezing the registry at program start not entirely deniable?","msgtype":"m.text"},"ts":1695269716643,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u6bLDwrHDqbichcQnkH84-pCj1dy10jg8uu0B2nXCKg"},
{"content":{"body":"in that case, you can't ever use registered shared structs, you must pass them around","msgtype":"m.text"},"ts":1695269740994,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$obDq8fBFquaZkrbNSvLy8CgdaWEqaKJ15cio8oo_avU"},
{"content":{"body":"Because creating a shared struct that would use that registry is disconnected, and is undeniable syntax.","msgtype":"m.text"},"ts":1695269776419,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GjRjoWI2EMRBQ523f5pf8Oi-HSuvrspv0giFw9MK6Fo"},
{"content":{"body":"okay, then let's say the API is programmatic","msgtype":"m.text"},"ts":1695269797315,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-d7h7lWvK4Fgy7-I0E28MexD6MMV8m3jXLOVASroF4c"},
{"content":{"body":"It changes the behavior of other code","msgtype":"m.text"},"ts":1695269807525,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MFRvyDBGLx1kYQSiys7z2QwLbgg5rDUUHyHi8K4AS8U"},
{"content":{"body":"and you can also delete the function that does the registering","msgtype":"m.text"},"ts":1695269810016,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cYD9d0kXtE9AXX4IR61wEewL7yfnqRkblBdvEqeh6bA"},
{"content":{"body":"so deleting any existing function-based capability can change behavior of other code","msgtype":"m.text"},"ts":1695269823051,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UGvFoHnEuUzWdcpmv-STr3VN6jh4sT1LeVNZeMcLXjE"},
{"content":{"body":"i don't see some bright line here","msgtype":"m.text"},"ts":1695269826841,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6-KxQm4DK801XPbxZ1jubRRSagpk03tr3gm1GvVfMhA"},
{"content":{"body":"even simpler, let's say the registry API is just its own global, which is configurable. registration is completely deniable","msgtype":"m.text"},"ts":1695270038459,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ECofN5HgN5RLrvuDS5v641KpSW6wmPDeUduqfD3hs5U"},
{"content":{"body":"for people who prefer a decorator-based approach, easy enough to write a class decorator that calls that API","msgtype":"m.text"},"ts":1695270067217,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Omgx--DdmqxUPUFW4QkQ1xHszc1-rUBK9i4jFlnu8NY"},
{"content":{"body":"It's  late for me to articulate it, but I feel extremely uncomfortable with such a global state being added to the language, and the mitigation to deny that feature. Maybe if it was normative optional it'd be acceptable?","msgtype":"m.text"},"ts":1695270128790,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$G7HWwoAnhJxuzMedBA8rGtrKET8zmo58u141N5gp9KM"},
{"content":{"body":"sure, if normative optional makes you more comfortable","msgtype":"m.text"},"ts":1695270149974,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GmBr3ltz1hI4G55TvqD6DQMqqj5i9HVZOQKZvhKmC2U"},
{"content":{"body":"we've done similarly for WeakRefs and finalizers","msgtype":"m.text"},"ts":1695270157282,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P91tS8jan-0MGNjdfXlEl4uoBTcgYGIax4zJ2ycC_00"},
{"content":{"body":"yes let's pick this up tomorrow in the working session call","msgtype":"m.text"},"ts":1695270173663,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HbYVJSvw3OWIX9XZw14IqGvCeugK7kfeJGzngt_7-0U"},
{"content":{"body":"shu: I have some thoughts on the `struct` syntax, which I've posted here: https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: I have some thoughts on the <code>struct</code> syntax, which I've posted here: https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53","msgtype":"m.text"},"ts":1695311484192,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Wmlme7DOyHIIF7MIq7FVOceZk-P8Wwta5V_RB7DEErw"},
{"content":{"body":"Given that `static shared prototype;` looks too much like a field definition, I opted to use `with shared prototype;` instead.","format":"org.matrix.custom.html","formatted_body":"Given that <code>static shared prototype;</code> looks too much like a field definition, I opted to use <code>with shared prototype;</code> instead.","msgtype":"m.text"},"ts":1695311558548,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$GXzA45ayGRp0-BFOXdAfsKvTX1_m0BRaTVJYbkrPOFM"},
{"content":{"body":"Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to `Symbol.for()`, since you cannot observe whether something is registered and it doesn't require API deniability.","format":"org.matrix.custom.html","formatted_body":"Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to <code>Symbol.for()</code>, since you cannot observe whether something is registered and it doesn't require API deniability.","msgtype":"m.text"},"ts":1695311914095,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y"},
{"content":{"body":"let's discuss the registry in depth at the working session call today","msgtype":"m.text"},"ts":1695311990174,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$30v9ev4sdqIr3poGOHKLxRAsQmEvyRnAXs-VWSVrDvg"},
{"content":{"body":"which, PSA, is **pushed back 30 minutes** ","format":"org.matrix.custom.html","formatted_body":"which, PSA, is <strong>pushed back 30 minutes</strong>","msgtype":"m.text"},"ts":1695312000884,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$88FjBa7xcMzu2lhEsfHts7cXNoMK3-2INq-RpJCi5-Y"},
{"content":{"body":"i had a last minute conflict, packed meeting today, sorry","msgtype":"m.text"},"ts":1695312010141,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mDKL4WuIbA8U8yMUwcMd_JTwBpAZjUeQbUuSDIg6Was"},
{"content":{"body":"ah, that's a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.","msgtype":"m.text"},"ts":1695312054211,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4"},
{"content":{"body":"> <@rbuckton:matrix.org> Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to `Symbol.for()`, since you cannot observe whether something is registered and it doesn't require API deniability.\n\ni was thinking about a programmatic registry as well that you'd need to first postMessage back and forth","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Also, given this back and forth on the registry, I still think the correlation based registry is still worth considering. Its more akin to <code>Symbol.for()</code>, since you cannot observe whether something is registered and it doesn't require API deniability.</blockquote></mx-reply>i was thinking about a programmatic registry as well that you'd need to first postMessage back and forth","m.relates_to":{"m.in_reply_to":{"event_id":"$ONJza9uuEyWTMXSpY_SqwqhPQkHkGJRa65WcC02Mk7Y"}},"msgtype":"m.text"},"ts":1695312065394,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$u3qX3oho3gxbj-Keue8AD1x4sBalFaf6MT07XTBjJbI"},
{"content":{"body":"> <@rbuckton:matrix.org> ah, that's a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.\n\nthen let's try to get as much as we can in 30 minutes, i suppose","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>ah, that&#39;s a problem. I have a hard stop at 2PM EDT/11AM PDT as I am hosting a meeting at that time.</blockquote></mx-reply>then let's try to get as much as we can in 30 minutes, i suppose","m.relates_to":{"m.in_reply_to":{"event_id":"$WVJhCTzkaXMf_tWTUv27UAgfEK24gRjXWx1cDffFzU4"}},"msgtype":"m.text"},"ts":1695312079478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EwC2MJVD55kzKMJL6Rjpp1nBHoC-OqeSdlnLIOkq11Q"},
{"content":{"body":"If I have to asynchronously wait for an `onmessage` in the main thread before I can start sending data to the worker, that won't work for my use cases.","format":"org.matrix.custom.html","formatted_body":"If I have to asynchronously wait for an <code>onmessage</code> in the main thread before I can start sending data to the worker, that won't work for my use cases.","msgtype":"m.text"},"ts":1695312135862,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6e58Wa9o1v1vs6sbH9AlqgoY2CpkTEUvP3RB_b6Mhbw"},
{"content":{"body":"If the Worker has to do all the work before it *sees* the first message I post, that's fine.","format":"org.matrix.custom.html","formatted_body":"If the Worker has to do all the work before it <em>sees</em> the first message I post, that's fine.","msgtype":"m.text"},"ts":1695312204080,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Ay99p3RRuVZZhAW5eVDiad9VkkG_x3Ag80utsOuyJFs"},
{"content":{"body":"Hmm. SharedArray only allows a max of 16382 (`(2**14)-2`) elements? ","format":"org.matrix.custom.html","formatted_body":"Hmm. SharedArray only allows a max of 16382 (<code>(2**14)-2</code>) elements?","msgtype":"m.text"},"ts":1695313811135,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY"},
{"content":{"body":"> <@rbuckton:matrix.org> Hmm. SharedArray only allows a max of 16382 (`(2**14)-2`) elements?\n\nBack when I implemented it there was a limit on the size of the objects that could be allocated in the engine's shared heap. I think that it is not the case anymore.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Hmm. SharedArray only allows a max of 16382 (<code>(2**14)-2</code>) elements?</blockquote></mx-reply>Back when I implemented it there was a limit on the size of the objects that could be allocated in the engine's shared heap. I think that it is not the case anymore.","m.relates_to":{"m.in_reply_to":{"event_id":"$NZ4vGRTuuCjZ14_BgCaNTZK_Mp97zEQ8zBdaxWNjzRY"}},"msgtype":"m.text"},"ts":1695321081714,"senderName":"lpardosixtosms","senderId":"@lpardosixtosms:matrix.org","id":"$Zozyk7DNPdwjZXh_qU0pPKcjpMUbYnMUg-FPmEESySw"},
{"content":{"body":"rbuckton: thinking about your static declarative syntax idea","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: thinking about your static declarative syntax idea","msgtype":"m.text"},"ts":1695327598662,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$8AR-FPF0ZlFWvQvyu3j_yvFsJAWC4UhXvVqra4VT3C0"},
{"content":{"body":"what you can have is, like a layout declaration that is completely static and deduplicated, decoupled from shared struct declarations. shared struct declarations would then take a layout, and produce constructor functions in the executing Realm per-evaluation, much like `class`es, but since they are given a layout, they can be hooked up under the hood","format":"org.matrix.custom.html","formatted_body":"what you can have is, like a layout declaration that is completely static and deduplicated, decoupled from shared struct declarations. shared struct declarations would then take a layout, and produce constructor functions in the executing Realm per-evaluation, much like <code>class</code>es, but since they are given a layout, they can be hooked up under the hood","msgtype":"m.text"},"ts":1695327715682,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$llmUro_iSvwLL9kA0IglcfJZOZJlhKHzl-UHyq8VCA4"},
{"content":{"body":"can you provide an example of what this might look like, roughly? ","msgtype":"m.text"},"ts":1695327836613,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$bGR7lTbIbLGs2bLjyvAt8uoDsfAmEpRJ1Ml1VW9ZYT0"},
{"content":{"body":"strawperson syntax:\n```\n// Special new declarative syntax\n// Can't anything that actually evaluates, so no method decls, no static initializers, etc\nlayout SharedThingLayout {\n  x; y;\n  with nonshared prototype;\n}\n\n// Declaration that's actually evaluated and produces a constructor function\nshared struct SharedThing layout SharedThingLayout {\n  // allowed because SharedThingLayout has thread-local prototype, so there's a place to install m()\n  m() { ... }\n  // allowed because x exists in the layout\n  x = 42;\n  // disallowed because z doesn't exist in the layout\n  z = \"foo\";\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>strawperson syntax:</p>\n<pre><code>// Special new declarative syntax\n// Can't anything that actually evaluates, so no method decls, no static initializers, etc\nlayout SharedThingLayout {\n  x; y;\n  with nonshared prototype;\n}\n\n// Declaration that's actually evaluated and produces a constructor function\nshared struct SharedThing layout SharedThingLayout {\n  // allowed because SharedThingLayout has thread-local prototype, so there's a place to install m()\n  m() { ... }\n  // allowed because x exists in the layout\n  x = 42;\n  // disallowed because z doesn't exist in the layout\n  z = \"foo\";\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695327905168,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KpGp0_MJqy1gMruwMDKNucoQ81A4TMP8KGaR1tqRhr8"},
{"content":{"body":"there's no communication channel there AFAIK","msgtype":"m.text"},"ts":1695327936553,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$x9DCm2F6LnZIygZUj6GGrcq9ZN30PDxNmDqUIqtZYfE"},
{"content":{"body":"layouts will be transparently keyed by, like, source location","msgtype":"m.text"},"ts":1695327955706,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9G1rLVHOoPK9hCQqnslh6ZLPRKisonPfwcf8OTkTRnI"},
{"content":{"body":"or Parse Node in specese","msgtype":"m.text"},"ts":1695327958934,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TuTovSiP_3SF8vFiFHwM4begRUBFAmR5UXvbsEgTzbA"},
{"content":{"body":"actually maybe Parse Node isn't sufficient, we might need a new concept","msgtype":"m.text"},"ts":1695327973776,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SqD8xLB_Tw9PTXHRZMd4kFrOyPFUd4BrIBCzYrcrqZA"},
{"content":{"body":"since you reparse modules multiple times","msgtype":"m.text"},"ts":1695327984030,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qDoCeKdUSKvX8rZqrayE6ZJpdO4TKPQgbXTI4JM3cGU"},
{"content":{"body":"but that seems like a mechanical problem to describe...","msgtype":"m.text"},"ts":1695327995518,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q9q1kD348Nzhi_kktC99hRXnDS7ggiJ4K6Lo1pD0_KQ"},
{"content":{"body":"maybe a host hook","msgtype":"m.text"},"ts":1695328003895,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WEk87Ko-CyJ-WMNeIHrlkFaD2p1hGtFgMWinInCyDMY"},
{"content":{"body":"What happens if I do this:\n```\nshared struct SharedThing1 layout SharedThingLayout {...}\nshared struct SharedThing2 layout SharedThingLayout {...}\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>What happens if I do this:</p>\n<pre><code>shared struct SharedThing1 layout SharedThingLayout {...}\nshared struct SharedThing2 layout SharedThingLayout {...}\n</code></pre>\n","msgtype":"m.text"},"ts":1695328004468,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Y9--dTEO7GvzYoScmp68Ji4Oi02Aym1ekHMx4Tl4ESw"},
{"content":{"body":"easier for me to describe concretely in V8 implementation terms: you get 2 different constructor functions in your current Realm, both backed by the same `map`","format":"org.matrix.custom.html","formatted_body":"easier for me to describe concretely in V8 implementation terms: you get 2 different constructor functions in your current Realm, both backed by the same <code>map</code>","msgtype":"m.text"},"ts":1695328050690,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ksgFNpgGlcCDG8qrLdBkfTZh3L3x5VPwAZqeB9K3EIw"},
{"content":{"body":"Transparently keying by source location is fine as a fallback, but still doesn't work with bundlers.","msgtype":"m.text"},"ts":1695328059838,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$H9IV8gYflAJiCF5D0NRDj96CchCyTLfYRIAjop5nlBI"},
{"content":{"body":"why not, they duplicate?","msgtype":"m.text"},"ts":1695328081983,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QGN1cRUmYD5ew-A4FgLuoTLZrs89TabIwLt1UzCkYfU"},
{"content":{"body":"why would a bundler make multiple copies of the same code","msgtype":"m.text"},"ts":1695328094572,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ekcwOTA49sFe5apqiYVu20WOH9Z-vTKt38DPEtgfX_k"},
{"content":{"body":"I fail to see how that resolves the correlation issue? ","msgtype":"m.text"},"ts":1695328112550,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$n49Y9LP76UuClMR5LoTv8BJul6yySRcXPHqbZsVSETQ"},
{"content":{"body":"think of `map` as the type","format":"org.matrix.custom.html","formatted_body":"think of <code>map</code> as the type","msgtype":"m.text"},"ts":1695328136970,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9yc3QQa0D_3c6WekUfyPM-YzB23cKhKhdEeWRQYX5Mo"},
{"content":{"body":"But how do I say that a `SharedThingLayout` in two threads are the same thing?","format":"org.matrix.custom.html","formatted_body":"But how do I say that a <code>SharedThingLayout</code> in two threads are the same thing?","msgtype":"m.text"},"ts":1695328148395,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yzsO1nCxGAkS1ndm_in994IHGoGjVxaLWtI7DqvBG6A"},
{"content":{"body":"that resolves the correlation issue because `SharedThing1` instances have the same type in the engine as `SharedThing2` instances","format":"org.matrix.custom.html","formatted_body":"that resolves the correlation issue because <code>SharedThing1</code> instances have the same type in the engine as <code>SharedThing2</code> instances","msgtype":"m.text"},"ts":1695328166191,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EwZXU_BNugckCTciHWTPIzdM_woKq3mqmTGSu6RIG0Y"},
{"content":{"body":"No, I think we're talking past each other","msgtype":"m.text"},"ts":1695328191485,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Kk7A2JaYw2YqKpS55bl8UiJsRRFRtYHm_oiQmMNvOio"},
{"content":{"body":"oh, because i assume what you're doing is `import { SharedThing } from 'structs.js'`, and 'structs.js' has the `layout` declaration","format":"org.matrix.custom.html","formatted_body":"oh, because i assume what you're doing is <code>import { SharedThing } from 'structs.js'</code>, and 'structs.js' has the <code>layout</code> declaration","msgtype":"m.text"},"ts":1695328200568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$07gC9Binyi4NqxbdhQqgoKS203JDRtYeiPVrgFx0Ppo"},
{"content":{"body":"so when multiple threads import it, they get the same deduplicated layout","msgtype":"m.text"},"ts":1695328209114,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P1NJ-aZoI0SV6Yqy7Ku6w1F2biQu_SVBAwIWgsx0Lrk"},
{"content":{"body":"forget thing1 and thing2. I'm talking about main thread `SharedThingLayout` and child thread `SharedThingLayout`","format":"org.matrix.custom.html","formatted_body":"forget thing1 and thing2. I'm talking about main thread <code>SharedThingLayout</code> and child thread <code>SharedThingLayout</code>","msgtype":"m.text"},"ts":1695328218262,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M4omqxBXJcaSHwj8HdELOGxR7U6v1aV2z5dDJwqJhi8"},
{"content":{"body":"That's the problem.","msgtype":"m.text"},"ts":1695328229813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kW2z0PlDrKlJOlD9-SkynJN0HKeXsEnA-yRH-l8K9vk"},
{"content":{"body":"i understand, i'm saying there's one layout","msgtype":"m.text"},"ts":1695328232721,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nXV-Wj-2QlVwPqmHF_CLFa5bOrK-5_Mwjs8jBbxAxEw"},
{"content":{"body":"that layout is keyed off source location, in `structs.js:NNN`","format":"org.matrix.custom.html","formatted_body":"that layout is keyed off source location, in <code>structs.js:NNN</code>","msgtype":"m.text"},"ts":1695328240727,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oLdH-wqErThhIiiVpaSFU6fdTbRibH2GyEXdOjmeT4w"},
{"content":{"body":"> <@shuyuguo:matrix.org> oh, because i assume what you're doing is `import { SharedThing } from 'structs.js'`, and 'structs.js' has the `layout` declaration\n\nthat's the problem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$07gC9Binyi4NqxbdhQqgoKS203JDRtYeiPVrgFx0Ppo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>oh, because i assume what you're doing is <code>import { SharedThing } from 'structs.js'</code>, and 'structs.js' has the <code>layout</code> declaration</blockquote></mx-reply>that's the problem","m.relates_to":{"m.in_reply_to":{"event_id":"$07gC9Binyi4NqxbdhQqgoKS203JDRtYeiPVrgFx0Ppo"}},"msgtype":"m.text"},"ts":1695328240801,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zjV84CcCDkwaWbQIrHdM4QbXaO3JGW1oRgFrMBqfpGo"},
{"content":{"body":"why is that a problem?","msgtype":"m.text"},"ts":1695328250549,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$B5F9eVK10XjzSGXyB9H35HfXxQpmBojbJGb2wauaKL0"},
{"content":{"body":"Main thread loads `main.js`, which is a bundle that includes `layout SharedThing`. Child thread loads `worker.js` which is a bundle that includes `layout SharedThing` in a different path and source location.","format":"org.matrix.custom.html","formatted_body":"Main thread loads <code>main.js</code>, which is a bundle that includes <code>layout SharedThing</code>. Child thread loads <code>worker.js</code> which is a bundle that includes <code>layout SharedThing</code> in a different path and source location.","msgtype":"m.text"},"ts":1695328292710,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l2IE-3Ufcdc9pREkEghafJHQ7tsPWMAJJgHa_YZ0DlY"},
{"content":{"body":"so that comes back to my original question: do bundlers duplicate?","msgtype":"m.text"},"ts":1695328316126,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NynymqsEZ7UyUGiEzxj5aWbf3m4JeYChiGHg4tIDG00"},
{"content":{"body":"you're telling me bundlers duplicate?","msgtype":"m.text"},"ts":1695328320901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$i-FVvvCei0GhTsQjQlKlU-TzDc7QVg2XqMDjCPgCtT4"},
{"content":{"body":"What deduplication?","msgtype":"m.text"},"ts":1695328324519,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cvb3AYFZaPwM_HOy_DPSYbFZ9lNiSbdm4o1rIx-p1KQ"},
{"content":{"body":"no _de_duplicate, _duplicate_","format":"org.matrix.custom.html","formatted_body":"no _de_duplicate, <em>duplicate</em>","msgtype":"m.text"},"ts":1695328333567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XFnFPFAPBNmkv7GzMbKxRGZ5F8858w1lo125WcRBZWo"},
{"content":{"body":"yes.","msgtype":"m.text"},"ts":1695328341073,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$K32tAYx46o-PokRwMcKs21VIusQ7IyPOFgSuyZcFmsU"},
{"content":{"body":" * not \\_de\\_duplicate, _duplicate_","format":"org.matrix.custom.html","formatted_body":" * not _de_duplicate, <em>duplicate</em>","m.new_content":{"body":"not \\_de\\_duplicate, _duplicate_","format":"org.matrix.custom.html","formatted_body":"not _de_duplicate, <em>duplicate</em>","msgtype":"m.text"},"m.relates_to":{"event_id":"$XFnFPFAPBNmkv7GzMbKxRGZ5F8858w1lo125WcRBZWo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695328352264,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mT449_Go88v2u9THHVrs69WUfBnT77CgDuAK1J69dJo"},
{"content":{"body":"main.js and worker.js in your example includes two, different inline copies of the `layout` source text","format":"org.matrix.custom.html","formatted_body":"main.js and worker.js in your example includes two, different inline copies of the <code>layout</code> source text","msgtype":"m.text"},"ts":1695328367053,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$f6dc_hvThDFdSuh-PANQYPX-G8wLqc-k2_MSpRvcu9U"},
{"content":{"body":"is that right?","msgtype":"m.text"},"ts":1695328368395,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DdczKujUyKBVjBy71VgcQNDE0YSNpnYAW0iTU3Amd_4"},
{"content":{"body":"It depends on the bundler. Some bundlers and bundle configurations will just pack everything into a single file per entrypoint. Some bundlers/configurations will use shared entry points.","msgtype":"m.text"},"ts":1695328384646,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eOLb50KGooYQG5dmfxPz9egT96DvH_rRzELqU0sOqvU"},
{"content":{"body":"like... just don't do that?","msgtype":"m.text"},"ts":1695328387311,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bsR3yFLosjZ7uV0WA2VX-knMUGEIxk_i-q4h1D3Xnj0"},
{"content":{"body":"bundlers can split out a 'layouts.js'","msgtype":"m.text"},"ts":1695328396041,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eUVSSGegUR1XiA-Q9nr5dscO9pngTaryMhkF9blThNg"},
{"content":{"body":"because layouts will be specced to have this behavior","msgtype":"m.text"},"ts":1695328401835,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1MWa8JutyKTxKkY_AbursUwsbdqIBpUqtC5Mnx07Ofk"},
{"content":{"body":"if you duplicate it, that's not a semantics-preserving transformation","msgtype":"m.text"},"ts":1695328408787,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DG1f_u9FCAaFCt0H7GwQBwVtXlGapzVKz7-16uuuxeA"},
{"content":{"body":"so don't do that","msgtype":"m.text"},"ts":1695328409919,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PxXqEcXvB5j7Z66OGuISsr-OtYxfF-8LccaIizrOseI"},
{"content":{"body":"Except for tree shaking","msgtype":"m.text"},"ts":1695328480509,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KRTInGy2jTlDoS2n1PQ4l634WUtst8L8Y2ClJsWkFPo"},
{"content":{"body":"tree shaking will be nonobvious in light of multithreading","msgtype":"m.text"},"ts":1695328495404,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7_Bi4hoxskLSKFr_JNRSePAFt3Q3dUgvsBVDygzDXQY"},
{"content":{"body":"i do not see this as a problem that needs to be designed around","msgtype":"m.text"},"ts":1695328530854,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$R1UdMSb9u5sKbxQz0TavFAs3vsdDQUyS0wede-eTcv8"},
{"content":{"body":"Tree shaking would mean the bundler can't elide any `layout` it sees, or any other code in the same file, lest the source positions change","format":"org.matrix.custom.html","formatted_body":"Tree shaking would mean the bundler can't elide any <code>layout</code> it sees, or any other code in the same file, lest the source positions change","msgtype":"m.text"},"ts":1695328556666,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CcUVw44nwyEX5UPh4LROkbsNPPG256HodDG2QJllHmY"},
{"content":{"body":"we're fundamentally talking about sharing across all worker threads","msgtype":"m.text"},"ts":1695328592304,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PvaONvymNW6HHi4m1acxI6a6-463wbfiZ9Lols4jSFk"},
{"content":{"body":"_sharing_ layouts requires a whole-world assumption","format":"org.matrix.custom.html","formatted_body":"<em>sharing</em> layouts requires a whole-world assumption","msgtype":"m.text"},"ts":1695328607434,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$P95TGPvTxcQBrZR_3UHrZ5u2ITTMxLBNGG6QDRu9XpI"},
{"content":{"body":"you can't tree shake individual worker threads' code for shared layouts. the bundler instead needs to generate the set of shared layouts","msgtype":"m.text"},"ts":1695328630908,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gZrRcR09V9O112RCbHXVwIbeZQipSeqyjoBT9oJd-Tg"},
{"content":{"body":"You might as well define your layouts in a non-JS file, since you can't really put anything else with them for fear it can't be tree shaken to reduce bundle size.","msgtype":"m.text"},"ts":1695328633579,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZgxsmZzoLEhEFh-78eTBpzvBY5pbs_RrQ0uQxOQqAJI"},
{"content":{"body":"because the point is that they are ... shared","msgtype":"m.text"},"ts":1695328635866,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$WviPQLDiZAdgbJ8k53Kk9k-H7zlkfbjLPPQ1yV8qBww"},
{"content":{"body":"i seriously doubt people want to express this out-of-band","msgtype":"m.text"},"ts":1695328659495,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Xj68ImAfbrPrJ6GcwJNEcqz1bpVUwglgWMYArrKL52Q"},
{"content":{"body":"you also have evaluation order issues. Unless we don't allow computed property names in layouts (i.e., no built-in symbols).","msgtype":"m.text"},"ts":1695328699380,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$unwoo4NUIqNn5OKYfkYFORd-Dl_0ra6vQ8l6CtxYO1M"},
{"content":{"body":"there are no evaluation order issues because these are not evaluated, these are declarative","msgtype":"m.text"},"ts":1695328719073,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A8PZiFKIpm_ED9nNI5v9eO4C0_z52fbNlxd9GySLpqA"},
{"content":{"body":"so you are absolutely right, there are no computed property names","msgtype":"m.text"},"ts":1695328726308,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_mRKbj8FeQDYWDxfD8bnfREne2jGFKz57nRwYOMevbo"},
{"content":{"body":"Do you need to define all instance fields in a layout?","msgtype":"m.text"},"ts":1695328792062,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$repG4epivC17MB3aHo9gHhkgWxuPmEHaxw0hZR23kZg"},
{"content":{"body":"vs...?","msgtype":"m.text"},"ts":1695328802968,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hdeWSZr3WdBpxf-rUxj9j-RB3THflTCZ9YFgy3g_6qM"},
{"content":{"body":"If so, then you wouldn't be able to define symbol-named fields","msgtype":"m.text"},"ts":1695328808940,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$cBjXdmroBQJRi5CtgxH1PPt_M4ZpetWJVhNqEcma4NA"},
{"content":{"body":"how do you not define all instance fields in a layout? these things are constructed sealed","msgtype":"m.text"},"ts":1695328819232,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mtXpjntoRGCzfUJm-F5MRsPeKClU8xxnd9m32eRGOVA"},
{"content":{"body":"I'm saying that if you must define them all ahead of time, and you can't use computed property names, you can't use symbols.","msgtype":"m.text"},"ts":1695328849454,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$zIMdWMWE3z4WtULutPT6ow9kMmgOBQVMilmBmHIl7xQ"},
{"content":{"body":"even for nonshared fields.","msgtype":"m.text"},"ts":1695328854761,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qEihYReJK8yv7tVNIT7NKgJ0OwzhI1e7zxEBCkCvh9M"},
{"content":{"body":"and i'm saying that sounds good to me","msgtype":"m.text"},"ts":1695328871447,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_n2mLIqgzP8-AdQjgCfCM7DS6Kt-p00cJG6xpAeBqM8"},
{"content":{"body":"nonshared fields refer to field storage, not field names","msgtype":"m.text"},"ts":1695328882670,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RYFlQgfya8yVcMhU67aDauqHoQQsZ4kpg0blY7nt9sc"},
{"content":{"body":"the field names are still shared","msgtype":"m.text"},"ts":1695328886382,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$FYKYSb9iBhpvOdisBMdXM6K_ARqeWSFoHPfxygFVRok"},
{"content":{"body":"strings are obviously shared","msgtype":"m.text"},"ts":1695328890566,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$A9YjkVhUlCdb9TEnEV03IW3MrjD0EOAlvavUIrA9Q3M"},
{"content":{"body":"I disagree.","msgtype":"m.text"},"ts":1695328892687,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JwPfu9obhJwlsuOx7yf-OZoiCLqkMz8Mk-hJrPIPUKM"},
{"content":{"body":"i don't think symbols are so easy to use shared","msgtype":"m.text"},"ts":1695328894916,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YZvH3LNmQ8cs65DF0i3MNXwJmB9WzZTuAmnjk1-E32Q"},
{"content":{"body":"Maybe not, but a lot of projects use user-defined symbols on classes currently, including NodeJS. That becomes another stumbling block to migrating to structs.","msgtype":"m.text"},"ts":1695328945360,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fFNBdLhluAkSl6t742NTDVUrSSN2AkqwBYO9Y06SZoU"},
{"content":{"body":"how do you pass those user symbols around?","msgtype":"m.text"},"ts":1695328967105,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DfHd5iYCKH3ia4ZQXBTfZv3sNmJLa01oJ2wf22cV6-I"},
{"content":{"body":"since symbols have identity","msgtype":"m.text"},"ts":1695328971662,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qgJ-5D5fpfc-igp2VoFcjlsyt7YWmIOgYcbrLAc756Y"},
{"content":{"body":" * how do you pass those user symbols around among threads?","m.new_content":{"body":"how do you pass those user symbols around among threads?","msgtype":"m.text"},"m.relates_to":{"event_id":"$DfHd5iYCKH3ia4ZQXBTfZv3sNmJLa01oJ2wf22cV6-I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695328980967,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$K19xD58enpnMZNthfPhsaX5nAMWPvOg7nrMf8YsBBts"},
{"content":{"body":"At the very least, you might be able to require they use symbols from `Symbol.for()` somehow so that they have the same identity, or you have to somehow correlate those as well somehow.","format":"org.matrix.custom.html","formatted_body":"At the very least, you might be able to require they use symbols from <code>Symbol.for()</code> somehow so that they have the same identity, or you have to somehow correlate those as well somehow.","msgtype":"m.text"},"ts":1695329013437,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6n3Ew14A4Tmdj437fgy3AXgK3ZGVoSaJFdtOZPBB1Hs"},
{"content":{"body":"there is literally 0 reason to use Symbol.for over strings","msgtype":"m.text"},"ts":1695329030782,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qXVC1i1Sn2wFQKHzLoiyFXaz-0w9QAJLOWqwyQAgsRs"},
{"content":{"body":"they are just worse strings","msgtype":"m.text"},"ts":1695329036005,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O-1h-feJydILkHVgvU19wUPecLdc24p5nqzwBBUJJJo"},
{"content":{"body":"Its very frustrating that threads can't just share the same code, like almost any other language with multithreading.","msgtype":"m.text"},"ts":1695329131411,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$L8bgdehf8VweEIdZHLF50caL6XPhs_fbGbEfVyD6Vuk"},
{"content":{"body":"the original sin is we made code have identity and first-class values","msgtype":"m.text"},"ts":1695329147319,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RkYmOrmX_luU6l-Mbfw9L9aEY1VHCHP6dISxftLaJ8g"},
{"content":{"body":"hard to walk that back","msgtype":"m.text"},"ts":1695329151344,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Uy7SR5JjCnW2wLRGd2RADSXY4poNPsec7gbGlnVYwik"},
{"content":{"body":"it's also very frustrating classes have identity and are first-class values","msgtype":"m.text"},"ts":1695329169182,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yt0tf_ysQqSGk4IFlMyysCMyemXceTsEQF9EoEFhQiE"},
{"content":{"body":"i'm happy to try to carve out a space where some things don't have identity, like layouts","msgtype":"m.text"},"ts":1695329192966,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_RT3E25E4NMD60ViyeOWtxY6jl6J_rLd1u-8TgH_5lE"},
{"content":{"body":"> <@rbuckton:matrix.org> Its very frustrating that threads can't just share the same code, like almost any other language with multithreading.\n\nModdable does it with frozen realms","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$L8bgdehf8VweEIdZHLF50caL6XPhs_fbGbEfVyD6Vuk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>Its very frustrating that threads can&#39;t just share the same code, like almost any other language with multithreading.</blockquote></mx-reply>Moddable does it with frozen realms","m.relates_to":{"m.in_reply_to":{"event_id":"$L8bgdehf8VweEIdZHLF50caL6XPhs_fbGbEfVyD6Vuk"}},"msgtype":"m.text"},"ts":1695329197699,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$-UoeimW1c2PFjfGHw6AhYPU3S0fwwhjv0YX_CX9W3uA"},
{"content":{"body":"I don't think that's so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you *don't* have to spin up a whole new copy of your application code.","format":"org.matrix.custom.html","formatted_body":"I don't think that's so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you <em>don't</em> have to spin up a whole new copy of your application code.","msgtype":"m.text"},"ts":1695329220794,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YRHizGTkb7V49JZ9v7o0_qVafMq8noixaEjZSesTsDA"},
{"content":{"body":" * I don't think that's [functions having identity] so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you _don't_ have to spin up a whole new copy of your application code.","format":"org.matrix.custom.html","formatted_body":" * I don't think that's [functions having identity] so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you <em>don't</em> have to spin up a whole new copy of your application code.","m.new_content":{"body":"I don't think that's [functions having identity] so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you _don't_ have to spin up a whole new copy of your application code.","format":"org.matrix.custom.html","formatted_body":"I don't think that's [functions having identity] so much a problem. It's a problem for sharing, sure, but would that apply to a threading model where you <em>don't</em> have to spin up a whole new copy of your application code.","msgtype":"m.text"},"m.relates_to":{"event_id":"$YRHizGTkb7V49JZ9v7o0_qVafMq8noixaEjZSesTsDA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695329234193,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6_R5_chtll311T6GSpmmwPtwg4EUCu9Bd1JVQ4ERaQ8"},
{"content":{"body":"https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/XS%20Marshalling.md#full-marshalling","msgtype":"m.text"},"ts":1695329243286,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eM0NpQc8Lr3bGfEoP3U1N3f5GI5mSklYpPheU3aF5K8"},
{"content":{"body":"i think it is very much a problem","msgtype":"m.text"},"ts":1695329243632,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$PNqDwsmLH-7fTswZYcShX7-goPVUjN97M7hyE3y7fCA"},
{"content":{"body":"everything having identity and being first-class values means by default they are not threadsafe","msgtype":"m.text"},"ts":1695329254512,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0H4g0BCsgkMso4oVYq0DNDIgxuMi8FgmbMu6QQxEkIg"},
{"content":{"body":"Sure, its not threadsafe. How is that bad?","msgtype":"m.text"},"ts":1695329298431,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O6NUIxrbCMmwyoBLQHvEcPSWlY5h6gZAw38NA9bJRPk"},
{"content":{"body":"so... you can't just spin up a new thread without also loading a whole new copy of the world?","msgtype":"m.text"},"ts":1695329335439,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$s7o5KSIvO4Hz4oLXs8G5GL5CeBHw1asj4hEm7QgmyP8"},
{"content":{"body":"Why do you need a whole new copy of the world?","msgtype":"m.text"},"ts":1695329360161,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qTsW3Pd5yLRU4E6bK5bbFcoB1UijT2wVyRpz5RFGq9s"},
{"content":{"body":"i don't know what we're talkign about anymore, i was responding to your \"it's frustrating\" comment with my own reasons for why i find it frustrating","msgtype":"m.text"},"ts":1695329391894,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$X-aCZAC85ITb4mGCvY8pZmD02B3tDNLM78qyEGOwP-g"},
{"content":{"body":"we can drop this subthread, not a productive one","msgtype":"m.text"},"ts":1695329399807,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$zmVXDgLXhuWO9CBNJ0hKOZUDKedie5F_hCdEBZ570PE"},
{"content":{"body":"back to the declarative layout idea at hand, yes, symbol-keyed names being precluded is a DX con","msgtype":"m.text"},"ts":1695329469836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$4fNOpSVlodTXCDBSf9t30LdSwXgJSdUbcsRTlyOsjJ4"},
{"content":{"body":"My point is more that, if we actually baked multithreading into the language, such that you don't have to spin up a copy of your application and could just use existing references, then we wouldn't have the correlation issue. We'd have other issues instead, but they are the pretty much the same issues as any other language with multithreading.","msgtype":"m.text"},"ts":1695329555240,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yK3gLSBL5QaSVdD2Mn_cYmLavhttspB9dKwDdy1brdA"},
{"content":{"body":"They are definitely the issues I don't want to see in JS","msgtype":"m.text"},"ts":1695329609734,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GkkoFYKuBbfLGhBP4miRL2hqHw56Rabqu_tMgZKa24U"},
{"content":{"body":"> <@rbuckton:matrix.org> My point is more that, if we actually baked multithreading into the language, such that you don't have to spin up a copy of your application and could just use existing references, then we wouldn't have the correlation issue. We'd have other issues instead, but they are the pretty much the same issues as any other language with multithreading.\n\nactually agree, but that requires like a parallel SharedFunction prototype chain or whatever, and that bifurcates the world in a weird way that was a non-starter last time i tried","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$yK3gLSBL5QaSVdD2Mn_cYmLavhttspB9dKwDdy1brdA?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>My point is more that, if we actually baked multithreading into the language, such that you don&#39;t have to spin up a copy of your application and could just use existing references, then we wouldn&#39;t have the correlation issue. We&#39;d have other issues instead, but they are the pretty much the same issues as any other language with multithreading.</blockquote></mx-reply>actually agree, but that requires like a parallel SharedFunction prototype chain or whatever, and that bifurcates the world in a weird way that was a non-starter last time i tried","m.relates_to":{"m.in_reply_to":{"event_id":"$yK3gLSBL5QaSVdD2Mn_cYmLavhttspB9dKwDdy1brdA"}},"msgtype":"m.text"},"ts":1695329642698,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2D0fmYaZbZJZunKh9JlVDXARBvTkiUM4ecDShSsmXwc"},
{"content":{"body":"I've spent some time in golang lately, and for a language that's supposed to make threads easier to deal with, I'm sorry but it was not","msgtype":"m.text"},"ts":1695329654023,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$UvqtAMW26HVJvM4uIiVelYkQA5Z5WDma570ujt2tGeg"},
{"content":{"body":"but as you say, back to the layout idea. Would this be so bad, though:\n\n```\nshared struct S {\n  with identity \"46e6d6a9-7e62-46d9-9dfc-6288740eed8c\"; // <- correlation at declaration level\n  x;\n  y;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>but as you say, back to the layout idea. Would this be so bad, though:</p>\n<pre><code>shared struct S {\n  with identity \"46e6d6a9-7e62-46d9-9dfc-6288740eed8c\"; // &lt;- correlation at declaration level\n  x;\n  y;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1695329674981,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3szMssge3BqRdZqLq4cjQaRp7Z6QjX5XrDyE7AWMIxY"},
{"content":{"body":"anyway, i can live with something like:\n\n- we have `layout`s, which are declarative and static, and are pretty restrictive. but they are deduplicated up front and the correlation thing \"just works\". bundlers will need to learn they can't be tree-shaken as normal\n- shared struct declarations don't _have_ to use a declared layout. if they don't, then they can have computed property names. you can have a correlation thing built in userland if you go that route","format":"org.matrix.custom.html","formatted_body":"<p>anyway, i can live with something like:</p>\n<ul>\n<li>we have <code>layout</code>s, which are declarative and static, and are pretty restrictive. but they are deduplicated up front and the correlation thing \"just works\". bundlers will need to learn they can't be tree-shaken as normal</li>\n<li>shared struct declarations don't <em>have</em> to use a declared layout. if they don't, then they can have computed property names. you can have a correlation thing built in userland if you go that route</li>\n</ul>\n","msgtype":"m.text"},"ts":1695329680676,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$JkFX-PeRVVXXZduLl9qsXOJs8LOiXXNt2JFa5FGhlxg"},
{"content":{"body":"> <@rbuckton:matrix.org> but as you say, back to the layout idea. Would this be so bad, though:\n> \n> ```\n> shared struct S {\n>   with identity \"46e6d6a9-7e62-46d9-9dfc-6288740eed8c\"; // <- correlation at declaration level\n>   x;\n>   y;\n> }\n> ```\n\nyeah i can live with it, so long as source location fallback exists","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$3szMssge3BqRdZqLq4cjQaRp7Z6QjX5XrDyE7AWMIxY?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><p>but as you say, back to the layout idea. Would this be so bad, though:</p>\n<pre><code>shared struct S {\n  with identity \"46e6d6a9-7e62-46d9-9dfc-6288740eed8c\"; // &lt;- correlation at declaration level\n  x;\n  y;\n}\n</code></pre>\n</blockquote></mx-reply>yeah i can live with it, so long as source location fallback exists","m.relates_to":{"m.in_reply_to":{"event_id":"$3szMssge3BqRdZqLq4cjQaRp7Z6QjX5XrDyE7AWMIxY"}},"msgtype":"m.text"},"ts":1695329717769,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$TqXvGUr8IjdF74sg8cU2UPyfnX3TqOVQdCSm5L8PIFI"},
{"content":{"body":"Sure. If that's the case, do we need the `layout` thing?","format":"org.matrix.custom.html","formatted_body":"Sure. If that's the case, do we need the <code>layout</code> thing?","msgtype":"m.text"},"ts":1695329735813,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$hb0djMei9j7SHt-kiEzPmEN4gvJRNi1iSxqUBPI-0wM"},
{"content":{"body":"why yes, because the 85% use case won't need computed property names","msgtype":"m.text"},"ts":1695329752901,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$W-tePaWKPe_gECMYWvmxcPI-myeuZK32f-7nC6DxTS0"},
{"content":{"body":"I think it adds far too much complexity.","msgtype":"m.text"},"ts":1695329759907,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$I9hGUZvF0Sevm7V5I84FFI84vrpNcD_a_VKbYxoEZu8"},
{"content":{"body":"and the correlation API doesn't??","msgtype":"m.text"},"ts":1695329770399,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$kLOtfDm-qhbbLgC4yyi2x0eH0wxfOjp38ylg1-f4b70"},
{"content":{"body":"i am so confused","msgtype":"m.text"},"ts":1695329772597,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7G_WkyKqRdKukbdo5_8fVJbrg0RAMbXhaEFVUEJnO4Q"},
{"content":{"body":"this seems vastly simpler to use as a developer than manually coordinating","msgtype":"m.text"},"ts":1695329785119,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$9FibS3TKBGQ5O9XuGXR_S7qAHltYoGX59l7ZZ23zYr0"},
{"content":{"body":"I'm talking about the idea I suggested in the meeting:\n- no correlation api\n- no struct reevaluation (always the same instance in a given thread)\n- declarations correlated by either explicit token (i.e., `with identity \"foo\"`), or by source location","format":"org.matrix.custom.html","formatted_body":"<p>I'm talking about the idea I suggested in the meeting:</p>\n<ul>\n<li>no correlation api</li>\n<li>no struct reevaluation (always the same instance in a given thread)</li>\n<li>declarations correlated by either explicit token (i.e., <code>with identity \"foo\"</code>), or by source location</li>\n</ul>\n","msgtype":"m.text"},"ts":1695329849466,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Hnd4RxmR250p0azGOfGKZaHUgq5DPvNzCJL7QeBeI4E"},
{"content":{"body":"if the layouts are shareable, is it unacceptable from a DX point of view to have factories for the shared struct, so that you create the shared struct after having received the layout ?","msgtype":"m.text"},"ts":1695329870964,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$3icKm8oh9VtOTVmGXOciY-mAZF8p9oSwnYR5_lSYELk"},
{"content":{"body":"rbuckton: i'm hung up on the second bullet-point without the introduction of a static, declarative concept like `layout`","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: i'm hung up on the second bullet-point without the introduction of a static, declarative concept like <code>layout</code>","msgtype":"m.text"},"ts":1695329904578,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$IxFifV-Ee87kDt3LKLJOypdvm7NZS2Twlnq9oZ2UmOE"},
{"content":{"body":"i don't know what \"no struct reevaluation\" means","msgtype":"m.text"},"ts":1695329910303,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$DUlnuQg06VtbJW9M5cmajhHydmKElu3cJOiW23pG6Qk"},
{"content":{"body":"the struct *is* the layout","format":"org.matrix.custom.html","formatted_body":"the struct <em>is</em> the layout","msgtype":"m.text"},"ts":1695329915668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-267JAl2C5bHiVnt9mQ8wHrRfunylxjl8Zm7wJPC3p8"},
{"content":{"body":"but the struct isn't a static thing","msgtype":"m.text"},"ts":1695329923606,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$QvHxSsA3s_BKdXVbsMaiEGkcDFEQyd22aeNJbg6DhBY"},
{"content":{"body":"it can include static initializers, etc","msgtype":"m.text"},"ts":1695329926720,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MBtigjtU3ds-0ZjuE2H418BOfXaUTpln1d5Dh-_S6OI"},
{"content":{"body":"and computed property names, as we've been debating","msgtype":"m.text"},"ts":1695329936808,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$J8J9KwQLpup0AyJnRWGC3uLsC0fse69foVbKsNIttCY"},
{"content":{"body":"My suggestion was that we *make* struct a static thing, per-thread at least.","format":"org.matrix.custom.html","formatted_body":"My suggestion was that we <em>make</em> struct a static thing, per-thread at least.","msgtype":"m.text"},"ts":1695329970008,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5YG8AUYQHMOBLTNE6j-3ogMX0V-P6vijqcJOGR9Tvlc"},
{"content":{"body":"it's like a `static` variable in C/C++ or something? the first evaluation caches it to something, subsequent uses never evaluate it again? that's... really weird, given closures?","format":"org.matrix.custom.html","formatted_body":"it's like a <code>static</code> variable in C/C++ or something? the first evaluation caches it to something, subsequent uses never evaluate it again? that's... really weird, given closures?","msgtype":"m.text"},"ts":1695329979623,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$glkVsZFmgvRnCHkpBPVocrHOGSbBxBZd2jPgVcx5FEk"},
{"content":{"body":"Yes, something like that. Yes its weird.","msgtype":"m.text"},"ts":1695330006832,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3FkEiRGl5G4W5fcpVaI_x7nmyXwNcYzC-YEOilVHesM"},
{"content":{"body":"> <@mhofman:matrix.org> if the layouts are shareable, is it unacceptable from a DX point of view to have factories for the shared struct, so that you create the shared struct after having received the layout ?\n\nno qualms from me?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$3icKm8oh9VtOTVmGXOciY-mAZF8p9oSwnYR5_lSYELk?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>if the layouts are shareable, is it unacceptable from a DX point of view to have factories for the shared struct, so that you create the shared struct after having received the layout ?</blockquote></mx-reply>no qualms from me?","m.relates_to":{"m.in_reply_to":{"event_id":"$3icKm8oh9VtOTVmGXOciY-mAZF8p9oSwnYR5_lSYELk"}},"msgtype":"m.text"},"ts":1695330020489,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$VL4ZBnJdyGJFmWFMN5TbHAyuPklwjsTrdf-2kxZEK4I"},
{"content":{"body":"rbuckton: okay i guess it's possible, i just find those semantics really weird and less sensible than having a separate declarative, static concept","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: okay i guess it's possible, i just find those semantics really weird and less sensible than having a separate declarative, static concept","msgtype":"m.text"},"ts":1695330066258,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XWG9lAulPxVdm61FoKFXkZeXCdwlMTztZ9hI3Aqp1Ec"},
{"content":{"body":"what you're saying isn't static, it's cache-on-first-eval","msgtype":"m.text"},"ts":1695330071911,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$C-4_n6_QZHnnHyZOJqc2vjnuDW5CkLNZfSoOw51tMQc"},
{"content":{"body":"rather, singleton","msgtype":"m.text"},"ts":1695330080879,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$j4IkPTkb4m0ZI0dVUQYbEHe8hNugqzW3cOJHOJMJvYw"},
{"content":{"body":"i'd prefer static semantics, you're saying singleton suffices","msgtype":"m.text"},"ts":1695330094332,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MYIE6QOPSEKbnmbKW0X-O0asn0ukTIm1MbZnRaRKqao"},
{"content":{"body":"why is singleton semantics needed if you deduplicate with an identity?","msgtype":"m.text"},"ts":1695330134608,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7k5HxJVbRtugmPYMXBACqqjmKc1TEgfkg4QeSknWnCs"},
{"content":{"body":"> <@shuyuguo:matrix.org> no qualms from me?\n\nI don't think this works. that's back to the thing1/thing2 issue. If I can write:\n\n```\nlayout L { ... }\nshared struct S1 layout L { ... }\nshared struct S2 layout L { ... }\n```\nthen I have _two_ or more potential prototypes to contend with in a given thread.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$VL4ZBnJdyGJFmWFMN5TbHAyuPklwjsTrdf-2kxZEK4I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>no qualms from me?</blockquote></mx-reply><p>I don't think this works. that's back to the thing1/thing2 issue. If I can write:</p>\n<pre><code>layout L { ... }\nshared struct S1 layout L { ... }\nshared struct S2 layout L { ... }\n</code></pre>\n<p>then I have <em>two</em> or more potential prototypes to contend with in a given thread.</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$VL4ZBnJdyGJFmWFMN5TbHAyuPklwjsTrdf-2kxZEK4I"}},"msgtype":"m.text"},"ts":1695330144428,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MiW-xP-XMHS9pK_NQxZQBntv2IS0htSlxjysNi1O0g4"},
{"content":{"body":"no you have _one_ prototype","format":"org.matrix.custom.html","formatted_body":"no you have <em>one</em> prototype","msgtype":"m.text"},"ts":1695330163144,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$SAQuwMYGHPG1IWCfD0uCIJqiIIiu9rkqbBOLQM93WKo"},
{"content":{"body":"L says \"I have a per-thread [[Prototype]] slot\"","msgtype":"m.text"},"ts":1695330175828,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KGgYgRIrnSn2V0Jp2d1HoDWhs0xqx5YaHvdj1kkOotE"},
{"content":{"body":"S1 and S2 refer to the same slot ","msgtype":"m.text"},"ts":1695330180342,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$sSlyDMl-54p8RLD1y3rsBFoVDCZrGfbjybhfDeNclco"},
{"content":{"body":"But S1 and S2 could define conflicting methods.","msgtype":"m.text"},"ts":1695330198233,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$rZZ9KOyvqRm22ueXmN5hcS6Rt0hLC4xe_WChizTG2CM"},
{"content":{"body":" * But S1 and S2 could define conflicting methods with the same names.","m.new_content":{"body":"But S1 and S2 could define conflicting methods with the same names.","msgtype":"m.text"},"m.relates_to":{"event_id":"$rZZ9KOyvqRm22ueXmN5hcS6Rt0hLC4xe_WChizTG2CM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695330209214,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Rt6JsUK64omB4Fd9q33p-ALuKEwZ406MdDpjHC5iN9E"},
{"content":{"body":"that sounds like they have different layouts!","msgtype":"m.text"},"ts":1695330215684,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xE7Lvs4-Rw0Gd2kG3jvA-HFFPL27jxeeZCpjBZ9EI7Y"},
{"content":{"body":"No, that sounds like a very easy to run into user error.","msgtype":"m.text"},"ts":1695330233902,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XfQWjI3t0PzDuxevlbg5MeBH-BU9zRHcV8V_vZiIgUk"},
{"content":{"body":"i really do not understand what you're getting at","msgtype":"m.text"},"ts":1695330255426,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hWR6V9bwDOBc2eUPWHm1PMeNCOp3IJP0_YtQSq2EQ9I"},
{"content":{"body":"maybe `layout` was a poor choice of words here","format":"org.matrix.custom.html","formatted_body":"maybe <code>layout</code> was a poor choice of words here","msgtype":"m.text"},"ts":1695330268316,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fj9Yg0x62FCU4niPTDCHDPc4zg6TYhwxVnK8Y1OkiIo"},
{"content":{"body":"let's just call it `nominal_shape` to be unambiguous","format":"org.matrix.custom.html","formatted_body":"let's just call it <code>nominal_shape</code> to be unambiguous","msgtype":"m.text"},"ts":1695330287945,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$UqxMGCBwggNY6sfUDTkSqsZUid_7_ZnhcTFdCQVm6W8"},
{"content":{"body":"I'm having a hard time understanding what it's intending to solve.","msgtype":"m.text"},"ts":1695330298224,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9BPCvZEDMGgAblJrFfZG12rdNrS3B7O-rs-_RkPu7N8"},
{"content":{"body":"the correlation problem!","msgtype":"m.text"},"ts":1695330309184,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$GN86Uju5QpXIqMxOs1CsKb-wQsSteC60qltgQLOdwI8"},
{"content":{"body":"It sounds like it solves the \"v8 internal map\" problem, not the correlation problem?","msgtype":"m.text"},"ts":1695330334582,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$eUNUQ8UX-Lh0709HQhbQ8Y30pydnXNkitmns4weZ2vs"},
{"content":{"body":"`S1 layout L` and `S2 layout L` is intended to behave like, _statically_, `Registry.register(L, S1)` and `Registry.register(L, S2)`, where `L` is the registry key","format":"org.matrix.custom.html","formatted_body":"<code>S1 layout L</code> and <code>S2 layout L</code> is intended to behave like, <em>statically</em>, <code>Registry.register(L, S1)</code> and <code>Registry.register(L, S2)</code>, where <code>L</code> is the registry key","msgtype":"m.text"},"ts":1695330378603,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KNIReTFWFGuzq5ej1lwK5sDmbdSwoRDnMVj56nHIj3k"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1695330388541,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$EY6jzW-niPNufFx2ABRVCetu72YAIBrtfBV3AzX_TNY"},
{"content":{"body":"> <@rbuckton:matrix.org> It sounds like it solves the \"v8 internal map\" problem, not the correlation problem?\n\nthose are the same problem to me","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$eUNUQ8UX-Lh0709HQhbQ8Y30pydnXNkitmns4weZ2vs?via=matrix.org&via=igalia.com&via=tchncs.de\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>It sounds like it solves the &quot;v8 internal map&quot; problem, not the correlation problem?</blockquote></mx-reply>those are the same problem to me","m.relates_to":{"m.in_reply_to":{"event_id":"$eUNUQ8UX-Lh0709HQhbQ8Y30pydnXNkitmns4weZ2vs"}},"msgtype":"m.text"},"ts":1695330395809,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3Qd66CHOQ04Aa3QcaUEKfyL7dkVm9Mx1BOjj1dRgyxI"},
{"content":{"body":"So I do both of those in the same thread, what happens?","msgtype":"m.text"},"ts":1695330405610,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$5d6MPghcJcM3U3ca9EQRi9T4YzfSos3K2IqXHzhjC-E"},
{"content":{"body":"assuming `L` has a per-thread prototype declared, you have:\n\n- `S1` is its own constructor function\n- `S2` is its own constructor function\n- instances of S1 are indistinguishable from instances of S2\n- `S1.prototype` is the _same slot_ as `S2.prototype`, so `S1.prototype = foo` is also reflected as `S2.prototype === foo`","format":"org.matrix.custom.html","formatted_body":"<p>assuming <code>L</code> has a per-thread prototype declared, you have:</p>\n<ul>\n<li><code>S1</code> is its own constructor function</li>\n<li><code>S2</code> is its own constructor function</li>\n<li>instances of S1 are indistinguishable from instances of S2</li>\n<li><code>S1.prototype</code> is the <em>same slot</em> as <code>S2.prototype</code>, so <code>S1.prototype = foo</code> is also reflected as <code>S2.prototype === foo</code></li>\n</ul>\n","msgtype":"m.text"},"ts":1695330522859,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$qJ_xEdG-gwcgVKTZkEsYMccCHVwhbqR5bwr9k6KPStI"},
{"content":{"body":"the same semantics as if `S1` and `S2` were in different threads","format":"org.matrix.custom.html","formatted_body":"the same semantics as if <code>S1</code> and <code>S2</code> were in different threads","msgtype":"m.text"},"ts":1695330538376,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$YsZXAuDIaNmXh_ZkkH7Z1XAf56L7aOWwEz5vhyjx2JA"},
{"content":{"body":"What belongs to a `shared struct S1 layout L {}` then? the implementation?","format":"org.matrix.custom.html","formatted_body":"What belongs to a <code>shared struct S1 layout L {}</code> then? the implementation?","msgtype":"m.text"},"ts":1695330576317,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9sji040xlM3bDBHtvYmZ2hlRi7bmFOHvkUxA0IExiSY"},
{"content":{"body":"could you clarify what you mean by \"belong\"?","msgtype":"m.text"},"ts":1695330596352,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$EcRUf5uzdpqcAC4lm6JJOaUkdWrMptpWx94EMWY7b78"},
{"content":{"body":"What is the point of `shared struct` in this model? What does it bring to the table aside from a constructor function?","format":"org.matrix.custom.html","formatted_body":"What is the point of <code>shared struct</code> in this model? What does it bring to the table aside from a constructor function?","msgtype":"m.text"},"ts":1695330625363,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3MGf8AOpnDQ7a_rPy8M9_unmoungL0JHYGcjyzq6LU8"},
{"content":{"body":"In your first example, you showed initializers and methods.","msgtype":"m.text"},"ts":1695330669532,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$STRknLMHktfYZpl9G1FU6zIfIG1tWEx50stUa2UyYtk"},
{"content":{"body":"that's one part: `shared struct` declarations have evaluation semantics, and actually creates the constructor function, because those things are unshareable functions","format":"org.matrix.custom.html","formatted_body":"that's one part: <code>shared struct</code> declarations have evaluation semantics, and actually creates the constructor function, because those things are unshareable functions","msgtype":"m.text"},"ts":1695330671527,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZR_0ZDsRGQnLYXdr624PJx7-OVNsAZZZlhhHwqgMe5c"},
{"content":{"body":"Ok.","msgtype":"m.text"},"ts":1695330680472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qumrF9edsS0IMooKLguS9UiMuLjYFm31hglHj0W6CWk"},
{"content":{"body":"the other part is, because it has evaluation semantics, it _could_ have static initializers and method declarations that install those things onto the per-thread prototype","format":"org.matrix.custom.html","formatted_body":"the other part is, because it has evaluation semantics, it <em>could</em> have static initializers and method declarations that install those things onto the per-thread prototype","msgtype":"m.text"},"ts":1695330705255,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dkywaZYHI39oVzWAilseBvIhEfDcvBZM8jx5IgR52uI"},
{"content":{"body":"Now I do this:\n\n```\nshared struct S1 layout L {\n  foo() { print(\"foo\"); }\n}\nshared struct S2 layout L {\n  foo() { print(\"bar\"); }\n}\nnew S1().foo();\n```\nWhat should I expect?","format":"org.matrix.custom.html","formatted_body":"<p>Now I do this:</p>\n<pre><code>shared struct S1 layout L {\n  foo() { print(\"foo\"); }\n}\nshared struct S2 layout L {\n  foo() { print(\"bar\"); }\n}\nnew S1().foo();\n</code></pre>\n<p>What should I expect?</p>\n","msgtype":"m.text"},"ts":1695330725186,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$m1yJOQs-nbnULwVEDG-c7fRUyy4d_RbDnPJ6Zi06uu0"},
{"content":{"body":"if that's the textual order, \"bar\", as S2's evaluation will overwrite S1's","msgtype":"m.text"},"ts":1695330745162,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XQJCzXFMth5yhZWJeWXcY1IlUSfSmrN2fIRNk2IEmwM"},
{"content":{"body":"Does S2 overwrite `foo`?","format":"org.matrix.custom.html","formatted_body":"Does S2 overwrite <code>foo</code>?","msgtype":"m.text"},"ts":1695330750406,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$M4yYw-ApquhbLOkvLKrVqv9xcki2qyQ28SSmnwFH_BU"},
{"content":{"body":"backing up, i think the missing context is i consider `S1 layout L` and `S2 layout L` to be code that you shuoldn't write","format":"org.matrix.custom.html","formatted_body":"backing up, i think the missing context is i consider <code>S1 layout L</code> and <code>S2 layout L</code> to be code that you shuoldn't write","msgtype":"m.text"},"ts":1695330773795,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$vZ69hrHTvDvWj-_RVqr6rnLKVLOZZ237my_wHDx5aho"},
{"content":{"body":"the point of `layout` isn't to refactor common layouts (really poor choice of words)","format":"org.matrix.custom.html","formatted_body":"the point of <code>layout</code> isn't to refactor common layouts (really poor choice of words)","msgtype":"m.text"},"ts":1695330786836,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0y1R__RYAPri7VGPb0cpWh0qr3JRJ_Yd9AqFJC4z5-8"},
{"content":{"body":"Yes, you _shouldn't_ write it, but you _can_ write it.","format":"org.matrix.custom.html","formatted_body":"Yes, you <em>shouldn't</em> write it, but you <em>can</em> write it.","msgtype":"m.text"},"ts":1695330791949,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SQMV5HMJR_n-GT3Mz5d0rkhJtW4KBPqgIZBmt5sggHc"},
{"content":{"body":"it's to separate static parts from runtime evaluation parts","msgtype":"m.text"},"ts":1695330793320,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$7jYCmVLfQZwwiAAIzXlBWnsOnTr4NjjCKWJUNtvTR7Y"},
{"content":{"body":"yes, and i'm explaining that it'll just have overwriting semantics","msgtype":"m.text"},"ts":1695330803873,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eUJEo1CSMvwDsxk_EqG0o1LXTi6Yl9AHcjBvocNUoBQ"},
{"content":{"body":"And if `layout` and `shared struct` must be tied together 1:1, there's no reason they should be separate.","format":"org.matrix.custom.html","formatted_body":"And if <code>layout</code> and <code>shared struct</code> must be tied together 1:1, there's no reason they should be separate.","msgtype":"m.text"},"ts":1695330810350,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_rJWP_j045_YRXvtKDFZTO9isbzBpos27Uzw-KQJV2E"},
{"content":{"body":"okay, i see our tastes differ substantially here","msgtype":"m.text"},"ts":1695330831940,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$bbB6Zzmga3-ioZLfccNHg5FQR_TVeODQmkKsi8pO4Ng"},
{"content":{"body":"your view seems to be, it is more important to syntactically bundle them, even if it means the semantics we get are singleton semantics instead of more static-y semantics","msgtype":"m.text"},"ts":1695330875951,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NVepmeSTGZ0PWrtRZbZf30LpcplhLRWyGZTppC1l3Lk"},
{"content":{"body":"my view is, it is less important to syntactically bundle them than to get static-y sematnics","msgtype":"m.text"},"ts":1695330885035,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jHWbL6MjQfRH5tIch7jPGMcpowY5K1or8G2vK-xlwLs"},
{"content":{"body":" * my view is, it is less important to syntactically bundle them than to get static-y semantics","m.new_content":{"body":"my view is, it is less important to syntactically bundle them than to get static-y semantics","msgtype":"m.text"},"m.relates_to":{"event_id":"$jHWbL6MjQfRH5tIch7jPGMcpowY5K1or8G2vK-xlwLs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1695330890221,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aZ59KIgSnfqkGWX-RW_mG1E-CcPpYVtyEy80Wd6CjIU"},
{"content":{"body":"why do it static-like if we don't go all the way?","msgtype":"m.text"},"ts":1695330924777,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$am4e9ZXCqepNa-oGMWJKjJaSrFS_hx-left0CiGicHo"},
{"content":{"body":"I'm saying that, whatever restrictions we would have on the declaration of `layout L {}`, we could just have on `shared struct S {}` and not need the extra confusing separation of syntax.","format":"org.matrix.custom.html","formatted_body":"I'm saying that, whatever restrictions we would have on the declaration of <code>layout L {}</code>, we could just have on <code>shared struct S {}</code> and not need the extra confusing separation of syntax.","msgtype":"m.text"},"ts":1695330953060,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pb4dajO3CqKG9_YUYyqMlB1pgCLqKo6Nij2EbaoMO2M"},
{"content":{"body":"oh","msgtype":"m.text"},"ts":1695330959064,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gVikGGJ7aYjP5WaLIVFeHas4fGwO--g1q8EMlJL4pOY"},
{"content":{"body":"```\nshared struct {\n  // the following 3 lines have static semantics\n  with nonshared prototype;\n  x;\n  y;\n  // this has evaluation semantics\n  m() { }\n}\n```\n\n?","format":"org.matrix.custom.html","formatted_body":"<pre><code>shared struct {\n  // the following 3 lines have static semantics\n  with nonshared prototype;\n  x;\n  y;\n  // this has evaluation semantics\n  m() { }\n}\n</code></pre>\n<p>?</p>\n","msgtype":"m.text"},"ts":1695331019384,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mQSOYnjfGV19V51L3lZ4WSAPVZkUcWe_IuWmJeE_is8"},
{"content":{"body":"Maybe that means `shared struct` isn't bundleable, and you need to stripe your bundle to ensure shared structs are always imported from the same place.","format":"org.matrix.custom.html","formatted_body":"Maybe that means <code>shared struct</code> isn't bundleable, and you need to stripe your bundle to ensure shared structs are always imported from the same place.","msgtype":"m.text"},"ts":1695331042523,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kp1rg8vkKDJvIlLZPCFkFbMHDZp1wuJZbhOrdS2njvo"},
{"content":{"body":"that still requires some things you didn't like, like restriction around computed property names","msgtype":"m.text"},"ts":1695331056986,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$gWSR_uF1L5blEOdBVLzDlErYHV066KQvyXvVlO0_nNA"},
{"content":{"body":"Yes, that's precisely the syntax I proposed in https://gist.github.com/rbuckton/e1e8947da16f936edec1d269f00e2c53","msgtype":"m.text"},"ts":1695331068064,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9FaLMZIiqlHpOTRMX_eTnQGtIK4Md7JTGwph5drqMu4"},
{"content":{"body":"Why do computed property names have to be restricted? I'd like to be able to use `[Symbol.iterator]`, among others, or I can't migrate to shared structs for some objects. And arguably, you'd want to be able to define `[Symbol.dispose]` as well.","format":"org.matrix.custom.html","formatted_body":"Why do computed property names have to be restricted? I'd like to be able to use <code>[Symbol.iterator]</code>, among others, or I can't migrate to shared structs for some objects. And arguably, you'd want to be able to define <code>[Symbol.dispose]</code> as well.","msgtype":"m.text"},"ts":1695331143150,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ebQnQSIDv9pPEzvW9Il9gHR53FgYAydu_7FTux9pOtY"},
{"content":{"body":"Or `[util.inspect.custom]`","format":"org.matrix.custom.html","formatted_body":"Or <code>[util.inspect.custom]</code>","msgtype":"m.text"},"ts":1695331178354,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$XsvegPTBw9KfwA3__WUekiWzBGDOHNEPyJVbh1xdPRI"},
{"content":{"body":"if the layout portion of a `shared struct` declaration have static semantics instead of singleton semantics, how do you allow symbols?","format":"org.matrix.custom.html","formatted_body":"if the layout portion of a <code>shared struct</code> declaration have static semantics instead of singleton semantics, how do you allow symbols?","msgtype":"m.text"},"ts":1695331182649,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZrQuWbJv2BqDMXO6Os7CBVcKjYtiNRnxO5nxKnfi8T0"},
{"content":{"body":"symbols do not exist at static time","msgtype":"m.text"},"ts":1695331197772,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$rpUVXd99y_oVtdFqUZIjU3ggB4XcYR2M5krPOEOTt1o"},
{"content":{"body":"i have to go to a meeting but something is still very muddled for me here, i don't understand the semantics you have in mind","msgtype":"m.text"},"ts":1695331221643,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dfps-oCZf-fymYzJu_SLkkD_BcJyTKu68cBL95tW1zk"},
{"content":{"body":"i don't personally design things syntax first","msgtype":"m.text"},"ts":1695331230230,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aMm6_OUlpXTe7W2QIbDbCFdUBA4SBHt5nOuvRHRrcps"},
{"content":{"body":"IMO, if this solution doesn't allow for even the use of built-in symbols, it's not viable.","msgtype":"m.text"},"ts":1695331250859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$MIkT4c_-FO8IJUiqx6yFCzPpuIcO9ghWiWdvXSUkQEE"},
{"content":{"body":"This isn't even all about syntax, its about what capabilities you are exposing or restricting. I would have the same concern if this was all API based with the same restrictions.","msgtype":"m.text"},"ts":1695331281274,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$xJFoQYTkC_4j_UjaMUjan78pTfWXmVWv1zGm87jVHzI"},
{"content":{"body":"okay, then i think the only viable thing we can both live with is singleton semantics, or a programmatic registry","msgtype":"m.text"},"ts":1695331291351,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$g4UBhzoV2ojhFoZOAEmtkT6WxpERhL9TcqnjE_DVgR0"},
{"content":{"body":"a static-first approach must have the computed property name restriction","msgtype":"m.text"},"ts":1695331308609,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$urmmHcAYjHWLtwGZguqxo8IACyKgGX_NGvVOvFUtZ-8"},
{"content":{"body":"If that's the case, so be it. I don't think I could support a mechanism that doesn't allow them.","msgtype":"m.text"},"ts":1695331346812,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LUhsQYx1pPdfktaHiFDWsJssHAqfCklvGufKDTnEygg"},
{"content":{"body":"yeah that's fine","msgtype":"m.text"},"ts":1695331365380,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nv7n0csRUO07dr_0C9m5Epe6ap44V5NdBAFuJSaK0YU"},
{"content":{"body":"i think we can make singleton semantics much less confusing by adopting the other restriction you raised during the call, like only allowing these at top-level","msgtype":"m.text"},"ts":1695331415259,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$XLi8Egz9jL1sO6Qlm26H6oihipIecCE99syfYRHwFtk"},
{"content":{"body":"can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a `with identity 'UUID'` modifier is present?","format":"org.matrix.custom.html","formatted_body":"can you elaborate on what you had in mind for the singleton semantics? is it keyed off source location? is it only singleton semantics if a <code>with identity 'UUID'</code> modifier is present?","msgtype":"m.text"},"ts":1695331481878,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aoU5zOyT6WZUGrErVwI4IealySRQTtLuVu9k8b5V-PE"},
{"content":{"body":"rbuckton: will you be in tokyo btw?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: will you be in tokyo btw?","msgtype":"m.text"},"ts":1695337322550,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LW5jRtzKxOMCV3XzYtoDlFLoMud4bOU67gPRLiuc71s"},
{"content":{"body":"wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the _combination_ of source location + `with identity 'UUID'`","format":"org.matrix.custom.html","formatted_body":"wait a second, isn't there a pretty simple solution to the communication channel problem? if the key to the shared global registry is the <em>combination</em> of source location + <code>with identity 'UUID'</code>","msgtype":"m.text"},"ts":1695338672404,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$_2pkCbonx3rLPeCM6_8cBuoGU5cG--EjpBSvEVsYFq4"},
{"content":{"body":"if it's the combination, you can't try to evaluate another definition to test for a collision","msgtype":"m.text"},"ts":1695338692426,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eeWNJ-VsA2wd1i44aCvjGK1cuDejxeu_yqHjwp2dpAE"},
{"content":{"body":"it's specced to be a different key and will never collide","msgtype":"m.text"},"ts":1695338701902,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Q6-0mg4ZmNGooQVfwsAJiWTadXXl1-cdJFRH7tgWiN0"},
{"content":{"body":"Mathieu Hofman: am i missing something? ^","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a>: am i missing something? ^","msgtype":"m.text"},"ts":1695338711885,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$lLD2i7iXikav9HMwizLoSnodc2mzWu_tWWi18THZpSg"}
]