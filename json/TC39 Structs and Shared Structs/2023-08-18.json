[
{"content":{"body":"If we end up having this concept of thread-local fields, or a thread-local `[[Prototype]]`, do we actually need shared structs? Could we solve the same problem by introducing `shared` and `fixed` fields on a `class` instead? In other words, treat all non-`shared` fields as just thread-local fields, while having all `fixed` fields establish a fixed shape for an object, with the remaining non-`fixed` fields at the end?","format":"org.matrix.custom.html","formatted_body":"If we end up having this concept of thread-local fields, or a thread-local <code>[[Prototype]]</code>, do we actually need shared structs? Could we solve the same problem by introducing <code>shared</code> and <code>fixed</code> fields on a <code>class</code> instead? In other words, treat all non-<code>shared</code> fields as just thread-local fields, while having all <code>fixed</code> fields establish a fixed shape for an object, with the remaining non-<code>fixed</code> fields at the end?","msgtype":"m.text"},"ts":1692391004472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UCUaHyKiot4lqgRHlxSHmef1tCYVtGusdRlQQAP9elo"},
{"content":{"body":"I suppose you'd still need to indicate whether non-`shared` fields are \"structured clone\"-able.","format":"org.matrix.custom.html","formatted_body":"I suppose you'd still need to indicate whether non-<code>shared</code> fields are \"structured clone\"-able.","msgtype":"m.text"},"ts":1692391179987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TaJJQoz2MudUAnvsdv1k5WymOj7z_8_JbRMn_dR9cew"},
{"content":{"body":"And this could all be potentially handled via privileged decorators rather than keywords, i.e.:\n\n```js\n@Shareable()\nclass Foo {\n  @Shared()\n  x;\n\n  @Shared()\n  y;\n\n  @Copiable()\n  data;\n\n  @ThreadLocal()\n  toString() { ... }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And this could all be potentially handled via privileged decorators rather than keywords, i.e.:</p>\n<pre><code class=\"language-js\">@Shareable()\nclass Foo {\n  @Shared()\n  x;\n\n  @Shared()\n  y;\n\n  @Copiable()\n  data;\n\n  @ThreadLocal()\n  toString() { ... }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1692391402170,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Nuf3LE30zE4ovbjEa_rQ3qHw4gw4hFpS-VgA9-2yYlk"},
{"content":{"body":"rbuckton: the 'shared' modifier is not fully composable so i feel like we still need shared structs. not fully composable meaning, it doesn't make sense to have an object with some shared fields and some non-shared fields","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the 'shared' modifier is not fully composable so i feel like we still need shared structs. not fully composable meaning, it doesn't make sense to have an object with some shared fields and some non-shared fields","msgtype":"m.text"},"ts":1692391657203,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wStlM0fPcAgYjgo_7UWLpykIZbhWa2pteZDrTREYa4Q"},
{"content":{"body":"The reason I brought this up is that we were actively discussing non-shared (i.e., \"thread-local\") fields in the last meeting.","msgtype":"m.text"},"ts":1692391735331,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OC0Fm7QQlAlyIsc9J-9uJ2Pd62ou9ed_cdpAMthw060"},
{"content":{"body":"though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved' to be implied by the fields that it has","msgtype":"m.text"},"ts":1692391761462,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vgb6cq2nBkRx1MBRVJP26KiQ56WBZMgWxoXAnySv_Yc"},
{"content":{"body":" * though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved across threads' to be implied by the fields that it has","m.new_content":{"body":"though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved across threads' to be implied by the fields that it has","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vgb6cq2nBkRx1MBRVJP26KiQ56WBZMgWxoXAnySv_Yc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692391766813,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3GOlB3d2Ed0M3uIZskDRGweo-t0_xW9kCFtgS6VtO8U"},
{"content":{"body":"am i understanding you right that you're thinking of something like, if a class `C` has any shared fields, it produces shared instances, and the non-shared fields are thread-local?","format":"org.matrix.custom.html","formatted_body":"am i understanding you right that you're thinking of something like, if a class <code>C</code> has any shared fields, it produces shared instances, and the non-shared fields are thread-local?","msgtype":"m.text"},"ts":1692391820516,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$hTRilo84i9vg5OCEftW-mUjY1Te9ly0IQVadzgq1zuQ"},
{"content":{"body":"otherwise it's not a shared thing, and all threads are \"thread-local\" but that's not really observable since it can't escape the thread","msgtype":"m.text"},"ts":1692391839441,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$puQfc55h_K29RCfVpT2jcbXruCJjHRy34u6BStsK-C8"},
{"content":{"body":" * otherwise it's not a shared thing, and all fields are \"thread-local\" but that's not really observable since it can't escape the thread","m.new_content":{"body":"otherwise it's not a shared thing, and all fields are \"thread-local\" but that's not really observable since it can't escape the thread","msgtype":"m.text"},"m.relates_to":{"event_id":"$puQfc55h_K29RCfVpT2jcbXruCJjHRy34u6BStsK-C8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692391846321,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$BRGigizIGlBZ8bcDIM-ZVjcHxzeV4VvgLr2aNc3tl5w"},
{"content":{"body":"i don't understand what the decorator notation above is doing","msgtype":"m.text"},"ts":1692391927720,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$2eAyJN-W--jMrZaaYEKNNOYKwiv9YzOq6rTl79LTvu4"},
{"content":{"body":"does it matter if identity is preserved across threads, if they have no way to compare the identity?","msgtype":"m.text"},"ts":1692392155913,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$t-IxnYXerEZUsTvZu2Uy9PEEzAb_9TTxsLF5bF6wJtQ"},
{"content":{"body":"it very much matters if identity is preserved across threads because that's how you observe how many allocations you've done...","msgtype":"m.text"},"ts":1692392176602,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Gp7WmwMW7iHwVIhzTL1HmjHyWrGEba4kG2hdeUMg4ec"},
{"content":{"body":"these aren't structural","msgtype":"m.text"},"ts":1692392183865,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$t1i_0pSUh7zaY2x97Ad8uu-sLboQm0Sl688uCFA6scs"},
{"content":{"body":"(how do you not observe identity without making these structural?)","msgtype":"m.text"},"ts":1692392198567,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0q1zc-hz2oUF6V34qHM5axUV9J4O-rKe4sl_nW-Sy-A"},
{"content":{"body":"I suppose it matters for `worker.postMessage(obj); worker.postMessage(obj);`, but within a single call to `postMessage` references are preserved during structured clone.","format":"org.matrix.custom.html","formatted_body":"I suppose it matters for <code>worker.postMessage(obj); worker.postMessage(obj);</code>, but within a single call to <code>postMessage</code> references are preserved during structured clone.","msgtype":"m.text"},"ts":1692392204015,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$57J476DFAK7rGaUeZFe039-CtAj7NpFTr1MJDO_ad_A"},
{"content":{"body":"like, if things round-trip, i want the same Map lookups to work etc","msgtype":"m.text"},"ts":1692392225998,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$jFrzACNXzdBRgZzUY2QJCYZ8jtX6dxcnPfLNmqvJ09M"},
{"content":{"body":"In any case, the class in the example above is explicitly marked as `@Shareable()` which would control the identity behavior.","format":"org.matrix.custom.html","formatted_body":"In any case, the class in the example above is explicitly marked as <code>@Shareable()</code> which would control the identity behavior.","msgtype":"m.text"},"ts":1692392247427,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3t1qQi4d6hbA06FmWC7E_4lK3KKh7OhTSMkwNa6Fg-0"},
{"content":{"body":"so far it feels like it comes down to taste, whether it feels nicer to have sharing semantics of fields and objects be determined \"bottom up\" by per-field annotations, or whether it's nicer to have sharing semantics be determined \"top down\" by per-class/struct annotations, with per-field annotations for exceptional cases (like thread-local)","msgtype":"m.text"},"ts":1692392326209,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$l5REyF4uw71ZPPxTW-fDkHceRont3sIZxSp_lPqBizs"},
{"content":{"body":"All of the decorators serve the same purpose as a keyword might. There was a strong sentiment in the past by some committee members that once Decorators is at Stage 4 we should avoid adding new keywords for things if a decorator would suffice. While I'm not sure I 100% agree, decorators could be used for this. ","msgtype":"m.text"},"ts":1692392327839,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$KrLRYUuqHHjRwlFNrimZCTBZgS80MESX6m70VxOJbV4"}
]