[
{"content":{"body":"If we end up having this concept of thread-local fields, or a thread-local `[[Prototype]]`, do we actually need shared structs? Could we solve the same problem by introducing `shared` and `fixed` fields on a `class` instead? In other words, treat all non-`shared` fields as just thread-local fields, while having all `fixed` fields establish a fixed shape for an object, with the remaining non-`fixed` fields at the end?","format":"org.matrix.custom.html","formatted_body":"If we end up having this concept of thread-local fields, or a thread-local <code>[[Prototype]]</code>, do we actually need shared structs? Could we solve the same problem by introducing <code>shared</code> and <code>fixed</code> fields on a <code>class</code> instead? In other words, treat all non-<code>shared</code> fields as just thread-local fields, while having all <code>fixed</code> fields establish a fixed shape for an object, with the remaining non-<code>fixed</code> fields at the end?","msgtype":"m.text"},"ts":1692391004472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UCUaHyKiot4lqgRHlxSHmef1tCYVtGusdRlQQAP9elo"},
{"content":{"body":"I suppose you'd still need to indicate whether non-`shared` fields are \"structured clone\"-able.","format":"org.matrix.custom.html","formatted_body":"I suppose you'd still need to indicate whether non-<code>shared</code> fields are \"structured clone\"-able.","msgtype":"m.text"},"ts":1692391179987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TaJJQoz2MudUAnvsdv1k5WymOj7z_8_JbRMn_dR9cew"},
{"content":{"body":"And this could all be potentially handled via privileged decorators rather than keywords, i.e.:\n\n```js\n@Shareable()\nclass Foo {\n  @Shared()\n  x;\n\n  @Shared()\n  y;\n\n  @Copiable()\n  data;\n\n  @ThreadLocal()\n  toString() { ... }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>And this could all be potentially handled via privileged decorators rather than keywords, i.e.:</p>\n<pre><code class=\"language-js\">@Shareable()\nclass Foo {\n  @Shared()\n  x;\n\n  @Shared()\n  y;\n\n  @Copiable()\n  data;\n\n  @ThreadLocal()\n  toString() { ... }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1692391402170,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Nuf3LE30zE4ovbjEa_rQ3qHw4gw4hFpS-VgA9-2yYlk"},
{"content":{"body":"rbuckton: the 'shared' modifier is not fully composable so i feel like we still need shared structs. not fully composable meaning, it doesn't make sense to have an object with some shared fields and some non-shared fields","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: the 'shared' modifier is not fully composable so i feel like we still need shared structs. not fully composable meaning, it doesn't make sense to have an object with some shared fields and some non-shared fields","msgtype":"m.text"},"ts":1692391657203,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$wStlM0fPcAgYjgo_7UWLpykIZbhWa2pteZDrTREYa4Q"},
{"content":{"body":"The reason I brought this up is that we were actively discussing non-shared (i.e., \"thread-local\") fields in the last meeting.","msgtype":"m.text"},"ts":1692391735331,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OC0Fm7QQlAlyIsc9J-9uJ2Pd62ou9ed_cdpAMthw060"},
{"content":{"body":"though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved' to be implied by the fields that it has","msgtype":"m.text"},"ts":1692391761462,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Vgb6cq2nBkRx1MBRVJP26KiQ56WBZMgWxoXAnySv_Yc"},
{"content":{"body":" * though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved across threads' to be implied by the fields that it has","m.new_content":{"body":"though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved across threads' to be implied by the fields that it has","msgtype":"m.text"},"m.relates_to":{"event_id":"$Vgb6cq2nBkRx1MBRVJP26KiQ56WBZMgWxoXAnySv_Yc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1692391766813,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3GOlB3d2Ed0M3uIZskDRGweo-t0_xW9kCFtgS6VtO8U"}
]