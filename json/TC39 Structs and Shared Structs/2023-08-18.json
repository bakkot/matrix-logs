[
{"content":{"body":"If we end up having this concept of thread-local fields, or a thread-local `[[Prototype]]`, do we actually need shared structs? Could we solve the same problem by introducing `shared` and `fixed` fields on a `class` instead? In other words, treat all non-`shared` fields as just thread-local fields, while having all `fixed` fields establish a fixed shape for an object, with the remaining non-`fixed` fields at the end?","format":"org.matrix.custom.html","formatted_body":"If we end up having this concept of thread-local fields, or a thread-local <code>[[Prototype]]</code>, do we actually need shared structs? Could we solve the same problem by introducing <code>shared</code> and <code>fixed</code> fields on a <code>class</code> instead? In other words, treat all non-<code>shared</code> fields as just thread-local fields, while having all <code>fixed</code> fields establish a fixed shape for an object, with the remaining non-<code>fixed</code> fields at the end?","msgtype":"m.text"},"ts":1692391004472,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UCUaHyKiot4lqgRHlxSHmef1tCYVtGusdRlQQAP9elo"},
{"content":{"body":"I suppose you'd still need to indicate whether non-`shared` fields are \"structured clone\"-able.","format":"org.matrix.custom.html","formatted_body":"I suppose you'd still need to indicate whether non-<code>shared</code> fields are \"structured clone\"-able.","msgtype":"m.text"},"ts":1692391179987,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TaJJQoz2MudUAnvsdv1k5WymOj7z_8_JbRMn_dR9cew"}
]