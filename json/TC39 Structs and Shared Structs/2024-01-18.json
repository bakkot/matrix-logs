[
{"content":{"body":"My apologies, I will be about 2 minutes late to the working session today","m.mentions":{},"msgtype":"m.text"},"ts":1705600789092,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1cAfeSzdphwWHOiXRxXJchbJHiCmNpmEVrMXCPkMink"},
{"content":{"body":"shu: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would just having the inherited struct just maintain the initial field layout of the base struct be sufficient?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would just having the inherited struct just maintain the initial field layout of the base struct be sufficient?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1705604478733,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Kz5QSNaPzHEMgqPuWTEGs9MLnNYj550l7e6NouiulFg"},
{"content":{"body":" * shu: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would having the inherited struct just maintain the initial field layout of the base struct be sufficient?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would having the inherited struct just maintain the initial field layout of the base struct be sufficient?","m.mentions":{},"m.new_content":{"body":"shu: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would having the inherited struct just maintain the initial field layout of the base struct be sufficient?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would having the inherited struct just maintain the initial field layout of the base struct be sufficient?","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Kz5QSNaPzHEMgqPuWTEGs9MLnNYj550l7e6NouiulFg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705604492434,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$13kFRxWSxzlgrYJs621DmLkt4uhjAT4Y9ZTJgi-oCGA"},
{"content":{"body":"i think the benefit is more like \"full composability with rest of the language\", mainly","m.mentions":{},"msgtype":"m.text"},"ts":1705604584001,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$tkkZ0fbzB0EsiQ7HUfnkLTUeLMujSA043fBI3Bri020"},
{"content":{"body":"i know the field has kind of soured on inheritance hierarchies vs inline storage of stuff","m.mentions":{},"msgtype":"m.text"},"ts":1705604604790,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$dEWKDJJQ5CqZ3sEiD5rynWqu1nB9F87_5SQ9udT8IEg"},
{"content":{"body":"but for e.g. AST nodes, you probably do want an inheritance hierarchy in the \"layout prefix\" sense that i was imagining","m.mentions":{},"msgtype":"m.text"},"ts":1705604639833,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5yQDpvmxg7MpeTR9ouVSvbkOQEqrfiyEJNA3VVunk8w"},
{"content":{"body":"`AstNodeBase` has `loc` or whatever","format":"org.matrix.custom.html","formatted_body":"<code>AstNodeBase</code> has <code>loc</code> or whatever","m.mentions":{},"msgtype":"m.text"},"ts":1705604651726,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$oRv7imh3_Bx9qKsvC6FxpbiLvbVDL3K-pKrihJZf0IQ"},
{"content":{"body":"I'm more asking if there is any reason that `struct B extends A {}` needs to care about `A` other than its field layout (if you ignore TLS prototypes and constructor initialization logic)","format":"org.matrix.custom.html","formatted_body":"I'm more asking if there is any reason that <code>struct B extends A {}</code> needs to care about <code>A</code> other than its field layout (if you ignore TLS prototypes and constructor initialization logic)","m.mentions":{},"msgtype":"m.text"},"ts":1705604686753,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$k-jbO04Rhng0UBhMmjkQ6eEWPtaOObLadXlArtEK9Ww"},
{"content":{"body":"(aside from internal AST reasons)","m.mentions":{},"msgtype":"m.text"},"ts":1705604712670,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fWqh_AtEShLn0o6FoghzzA5QISRzfgpNrD6lN4I1fDI"},
{"content":{"body":"ooh","m.mentions":{},"msgtype":"m.text"},"ts":1705604739337,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$C06isxruUXtQ6d3ARRqcCvgw2TxyQDAxFW7KzCIsnQo"},
{"content":{"body":"It goes to simplifying the syntax I've been considering.","m.mentions":{},"msgtype":"m.text"},"ts":1705604739973,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PPBkH7zVyM5OwBSyFIHXngkCHQFz2NH4DKApXIQoQ0c"},
{"content":{"body":"i feel like no?","m.mentions":{},"msgtype":"m.text"},"ts":1705604750320,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$RbmzovHubYGEtfLCXfLP2QUO4ScecjCUHmXGLA6kQ2U"},
{"content":{"body":"my intention was literally for layout","m.mentions":{},"msgtype":"m.text"},"ts":1705604755197,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$3r5TIyAVfkvFeAyL8mQFvjaQe3PQ1lrKKekU7AI-9As"},
{"content":{"body":"In classes, field order is determined by calling `super()`, where each `super` constructor installs its fields and returns the thing to be the used as the `this` in the subclass constructor.","format":"org.matrix.custom.html","formatted_body":"In classes, field order is determined by calling <code>super()</code>, where each <code>super</code> constructor installs its fields and returns the thing to be the used as the <code>this</code> in the subclass constructor.","m.mentions":{},"msgtype":"m.text"},"ts":1705604803099,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$nJXrhNR-MZmaVa1erKPjSp7XuioP-gGZNmzNlRIQUwA"},
{"content":{"body":"That helps","m.mentions":{},"msgtype":"m.text"},"ts":1705604813437,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$sdVeVcK3KDIkwT-Vawco3R152IQRvpSbPgdx3He5eSk"},
{"content":{"body":"what i want for struct inheritance semantics:\n\n- one shot initialization. even if we allow field initializers or user-programmable constructors, they get a fully initialized instance with all fields initialized to a sentinel (`undefined`, i guess)\n- superclass's fields precede your own fields","format":"org.matrix.custom.html","formatted_body":"<p>what i want for struct inheritance semantics:</p>\n<ul>\n<li>one shot initialization. even if we allow field initializers or user-programmable constructors, they get a fully initialized instance with all fields initialized to a sentinel (<code>undefined</code>, i guess)</li>\n<li>superclass's fields precede your own fields</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705604915352,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$c-uniRFo-MuCtN7pQwDogzFGi4dP-SpQeowsDrrUTj8"},
{"content":{"body":"the invariant is that a half-constructed, out-of-declared-order instance is not observable if you use structs","m.mentions":{},"msgtype":"m.text"},"ts":1705604937744,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$l9KxxBpZZD5Vffmg5Ux3hZsrLH2twX6Vzan9Onz9GBE"},
{"content":{"body":"That syntax sketch I wrote up a few months back has a lot of corner cases to handle future complexity, like:\n- declaring whether a struct has a `null` prototype, or a \"shared\" prototype, or a TLS prototype.\n- declaring whether a struct field is \"non-shared\" on a shared struct (i.e., a TLS-backed field).\n- indicating whether a method is shared or non-shared, for a potential future that might somehow include shared functions.\n\nI'd like to cut a lot of that for simplicity's sake. For example, every `struct` declaration has a non-shared prototype (a TLS prototype for shared structs). You can use `extends null` if you don't need the prototype, and we can just make that work as opposed to how `class extends null` doesn't work today.","format":"org.matrix.custom.html","formatted_body":"<p>That syntax sketch I wrote up a few months back has a lot of corner cases to handle future complexity, like:</p>\n<ul>\n<li>declaring whether a struct has a <code>null</code> prototype, or a \"shared\" prototype, or a TLS prototype.</li>\n<li>declaring whether a struct field is \"non-shared\" on a shared struct (i.e., a TLS-backed field).</li>\n<li>indicating whether a method is shared or non-shared, for a potential future that might somehow include shared functions.</li>\n</ul>\n<p>I'd like to cut a lot of that for simplicity's sake. For example, every <code>struct</code> declaration has a non-shared prototype (a TLS prototype for shared structs). You can use <code>extends null</code> if you don't need the prototype, and we can just make that work as opposed to how <code>class extends null</code> doesn't work today.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705605250604,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7ZFxCJPHRNpLRg7zDCQrY0WDnhAB3eDWcYiPdEDxW84"},
{"content":{"body":"So `shared struct A extends B {}` gives `A` a TLS prototype that inherits from `B`'s TLS prototype.","format":"org.matrix.custom.html","formatted_body":"So <code>shared struct A extends B {}</code> gives <code>A</code> a TLS prototype that inherits from <code>B</code>'s TLS prototype.","m.mentions":{},"msgtype":"m.text"},"ts":1705605293668,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ITXpmK_U-brvV0e_vTehFrFyu7ofiu5i_PXKmffbZLo"},
{"content":{"body":"If you do `shared struct A extends B {]` and `B` isn't shared, it doesn't matter. You just get `A` with the same layout as `B`, except it's shared, and the prototypes are non-shared anyways.","format":"org.matrix.custom.html","formatted_body":"If you do <code>shared struct A extends B {]</code> and <code>B</code> isn't shared, it doesn't matter. You just get <code>A</code> with the same layout as <code>B</code>, except it's shared, and the prototypes are non-shared anyways.","m.mentions":{},"msgtype":"m.text"},"ts":1705605337614,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dQ6378yNp1udgucC6zOM7IWDem43ytGHc_XPSt-xAgs"},
{"content":{"body":" * If you do `shared struct A extends B {}` and `B` isn't shared, it doesn't matter. You just get `A` with the same layout as `B`, except it's shared, and the prototypes are non-shared anyways.","format":"org.matrix.custom.html","formatted_body":" * If you do <code>shared struct A extends B {}</code> and <code>B</code> isn't shared, it doesn't matter. You just get <code>A</code> with the same layout as <code>B</code>, except it's shared, and the prototypes are non-shared anyways.","m.mentions":{},"m.new_content":{"body":"If you do `shared struct A extends B {}` and `B` isn't shared, it doesn't matter. You just get `A` with the same layout as `B`, except it's shared, and the prototypes are non-shared anyways.","format":"org.matrix.custom.html","formatted_body":"If you do <code>shared struct A extends B {}</code> and <code>B</code> isn't shared, it doesn't matter. You just get <code>A</code> with the same layout as <code>B</code>, except it's shared, and the prototypes are non-shared anyways.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dQ6378yNp1udgucC6zOM7IWDem43ytGHc_XPSt-xAgs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705605343626,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CprrvLvKi3Gq4-WTEj1xkOJK4XRiee2d7PO3iPgHWNI"},
{"content":{"body":"In a `struct` constructor, `super()` could be designed such that it doesn't support return override tricks, since the layout is already wired up. ","format":"org.matrix.custom.html","formatted_body":"In a <code>struct</code> constructor, <code>super()</code> could be designed such that it doesn't support return override tricks, since the layout is already wired up.","m.mentions":{},"msgtype":"m.text"},"ts":1705605468969,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fnT2fGuF4xZV0IJcTEESfdlUBo6mbqQF30N3iSY_Yp0"},
{"content":{"body":"And we could just assume methods are non-shared by default, and if shared functions ever becomes a thing you have to opt-in on a method-by-method basis. That seems like a good idea anyways, since you'd want to explicitly indicate that you'd thought about thread safety for a given \"shared\" method anyways.","m.mentions":{},"msgtype":"m.text"},"ts":1705605542492,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$4EN96VWaRIW1MiwOHkrOpnOWe-_4DQ0oeSb1nWFwlsE"},
{"content":{"body":"All of that makes the syntax fairly simple.","m.mentions":{},"msgtype":"m.text"},"ts":1705605551764,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$YhytMVnPRBBlp5b84DpkK3QRnzuYweqw9uV5svSScv0"},
{"content":{"body":"Basically: \n\n```\n// non-shared struct\nstruct S1 {\n  foo; // fixed-layout, non-shared field\n\n  constructor() { } // realm-local constructor\n\n  bar() { } // attached to realm-local prototype\n  get baz() { } // attached to realm-local prototype\n  set baz(value) { } // attached to realm-local prototype\n}\n\n// shared struct\nshared struct S2 {\n  foo; // fixed-layout, shared field\n\n  constructor() { } // realm-local constructor\n\n  bar() { } // attached to realm-local prototype\n  get baz() { } // attached to realm-local prototype\n  set baz(value) { } // attached to realm-local prototype\n}\n\n// null prototypes\nstruct S3 extends null {\n  foo; // fixed-layout, non-shared field\n\n  constructor() { } // realm-local constructor\n\n  // cannot have methods/getters/setters\n}\n\nshared struct S4 extends null {\n  foo; // fixed-layout, shared field\n\n  constructor() { } // realm-local constructor\n\n  // cannot have methods/getters/setters\n}\n\n// subclassing\nstruct S5 extends S1 {} // ok\nstruct S6 extends S2 {} // ok? S6 would be non-shared, even though S2 is declared as shared\nshared struct S7 extends S1 {} // ok? S7 would be shared, even though S1 is declared as non-shared\nshared struct S8 extends S2 {} // ok\n```","format":"org.matrix.custom.html","formatted_body":"<p>Basically:</p>\n<pre><code>// non-shared struct\nstruct S1 {\n  foo; // fixed-layout, non-shared field\n\n  constructor() { } // realm-local constructor\n\n  bar() { } // attached to realm-local prototype\n  get baz() { } // attached to realm-local prototype\n  set baz(value) { } // attached to realm-local prototype\n}\n\n// shared struct\nshared struct S2 {\n  foo; // fixed-layout, shared field\n\n  constructor() { } // realm-local constructor\n\n  bar() { } // attached to realm-local prototype\n  get baz() { } // attached to realm-local prototype\n  set baz(value) { } // attached to realm-local prototype\n}\n\n// null prototypes\nstruct S3 extends null {\n  foo; // fixed-layout, non-shared field\n\n  constructor() { } // realm-local constructor\n\n  // cannot have methods/getters/setters\n}\n\nshared struct S4 extends null {\n  foo; // fixed-layout, shared field\n\n  constructor() { } // realm-local constructor\n\n  // cannot have methods/getters/setters\n}\n\n// subclassing\nstruct S5 extends S1 {} // ok\nstruct S6 extends S2 {} // ok? S6 would be non-shared, even though S2 is declared as shared\nshared struct S7 extends S1 {} // ok? S7 would be shared, even though S1 is declared as non-shared\nshared struct S8 extends S2 {} // ok\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705605925873,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CgP92dO8bcyK7EIZriJVh9trJNsHab1AiCtvDmfwR7M"},
{"content":{"body":"Ideally, we could find some way of supporting private names and `accessor`, as I'd also like to support decorators long term. The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported, but private names are necessary to support `accessor` for decorators.","format":"org.matrix.custom.html","formatted_body":"Ideally, we could find some way of supporting private names and <code>accessor</code>, as I'd also like to support decorators long term. The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported, but private names are necessary to support <code>accessor</code> for decorators.","m.mentions":{},"msgtype":"m.text"},"ts":1705606040289,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$kzU-H1LWuSgxDjDygNQ8wUbQDPTgThlv6rNdtA7-VXc"},
{"content":{"body":"> The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported\nCouldn't private declarations help?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported<br>Couldn't private declarations help?</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705606259864,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$cASLxJC8V9Ccm3Y1luOxsEtz3zfC6T0euE7r1lmV-_Y"},
{"content":{"body":"IMO, private names should be viable and are just part of the field layout. Wiring up identical `struct` definitions between two workers would verify they have identical layouts. It might not be true \"hard privacy\" though, if you are able to create a new worker with an altered `struct` definition that can still be correlated, but has a prototype method that exposes the private field. Maybe its not actually an issue, though, if we are planning to have `struct` layout identity based on file path/line number/etc.","format":"org.matrix.custom.html","formatted_body":"IMO, private names should be viable and are just part of the field layout. Wiring up identical <code>struct</code> definitions between two workers would verify they have identical layouts. It might not be true \"hard privacy\" though, if you are able to create a new worker with an altered <code>struct</code> definition that can still be correlated, but has a prototype method that exposes the private field. Maybe its not actually an issue, though, if we are planning to have <code>struct</code> layout identity based on file path/line number/etc.","m.mentions":{},"msgtype":"m.text"},"ts":1705606262994,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Urly53QqqX4Ej9_JXyvw7iNuU-1Q7Z_5ZwLaF7GfO9g"},
{"content":{"body":" * > The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported\n\nCouldn't private declarations help?","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported</p>\n</blockquote>\n<p>Couldn't private declarations help?</p>\n","m.mentions":{},"m.new_content":{"body":"> The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported\n\nCouldn't private declarations help?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The private names bit is tricky for shared structs, though, as you wouldn't be able to guarantee \"hard privacy\" if it were supported</p>\n</blockquote>\n<p>Couldn't private declarations help?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cASLxJC8V9Ccm3Y1luOxsEtz3zfC6T0euE7r1lmV-_Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705606267848,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$G3q6v_8tb5R-PTMwoRxS2qQGFXD7ddrc961Ee-AvN0Y"},
{"content":{"body":"Not unless private declarations are also shareable, and that seems even less safe.","m.mentions":{},"msgtype":"m.text"},"ts":1705606282024,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$7UeLtr3-CqjLDrrFNUSRMhVblSg_aUbDMo-44f3iivM"},
{"content":{"body":"> Wiring up identical struct definitions between two workers would verify they have identical layouts. \n\nI suspect if you had to explicitly register your classes, you could guarantee true privacy for private fields ;)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Wiring up identical struct definitions between two workers would verify they have identical layouts.</p>\n</blockquote>\n<p>I suspect if you had to explicitly register your classes, you could guarantee true privacy for private fields ;)</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1705606352244,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h00jAmWK-0jqg-nlbo1WdljFUtBOgWN4pMIQK3cnvJ8"},
{"content":{"body":" * > Wiring up identical struct definitions between two workers would verify they have identical layouts.\n\nI suspect if you had to explicitly register your structs, you could guarantee true privacy for private fields ;)","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Wiring up identical struct definitions between two workers would verify they have identical layouts.</p>\n</blockquote>\n<p>I suspect if you had to explicitly register your structs, you could guarantee true privacy for private fields ;)</p>\n","m.mentions":{},"m.new_content":{"body":"> Wiring up identical struct definitions between two workers would verify they have identical layouts.\n\nI suspect if you had to explicitly register your structs, you could guarantee true privacy for private fields ;)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Wiring up identical struct definitions between two workers would verify they have identical layouts.</p>\n</blockquote>\n<p>I suspect if you had to explicitly register your structs, you could guarantee true privacy for private fields ;)</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h00jAmWK-0jqg-nlbo1WdljFUtBOgWN4pMIQK3cnvJ8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705606367447,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$tLC0KvtI7KmedSlRXisygSq7hPAGl52ffPUYmbWX848"},
{"content":{"body":"If the correlation mechanism is still file+position based, as we've discussed previously, then hard privacy isn't as much of an issue because the declarations have the same code.","m.mentions":{},"msgtype":"m.text"},"ts":1705606398681,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$8dl9AfrTCt0KSS7EvztT6FZfumUwxn3ocreYvGlM64s"},
{"content":{"body":"Correct","m.mentions":{},"msgtype":"m.text"},"ts":1705606409308,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hyPAnFnbQPjc5MXKYQDa6tuqPV2UiNZffnkRJXAseuE"},
{"content":{"body":"If you had to use an API to explicitly register, you have even less privacy.","m.mentions":{},"msgtype":"m.text"},"ts":1705606419460,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$DNbZheBnpV2E6U8mIyytIvayrbGJW4bnenKPMtbiGGw"},
{"content":{"body":"it's only a problem if you can forge the class definition","m.mentions":{},"msgtype":"m.text"},"ts":1705606434022,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$GUdb8-NtKzzfh7j6QqLtHLDuF0h-LII1GA4VMuJtflU"},
{"content":{"body":" * it's only a problem if you can forge the struct definition","m.mentions":{},"m.new_content":{"body":"it's only a problem if you can forge the struct definition","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$GUdb8-NtKzzfh7j6QqLtHLDuF0h-LII1GA4VMuJtflU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705606440305,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$fUPcN40FT-EcDEDgqYpI7PfYN2Iybb66hKOehuiAw3k"},
{"content":{"body":"Since I could spin up a Worker that registers its own version of the class that just replaces its methods with `return this.#whatever` and programmatically wire them up.","format":"org.matrix.custom.html","formatted_body":"Since I could spin up a Worker that registers its own version of the class that just replaces its methods with <code>return this.#whatever</code> and programmatically wire them up.","m.mentions":{},"msgtype":"m.text"},"ts":1705606457789,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$Q-_W9z_xyH-8Bh3cgAoKElI8dGaTLsPtzXdjrF5XM18"},
{"content":{"body":"To prevent forging the `struct` definition, it would likely need to be path+position based","format":"org.matrix.custom.html","formatted_body":"To prevent forging the <code>struct</code> definition, it would likely need to be path+position based","m.mentions":{},"msgtype":"m.text"},"ts":1705606492986,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LlZZdb8Ky9TPP6zlJ89H5fxGcl0mjnGg5QFLe_VjaqA"},
{"content":{"body":"> <@rbuckton:matrix.org> If you had to use an API to explicitly register, you have even less privacy.\n\nNot if you have to use a type object that is itself sharable to hook the local behavior","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!fmLqwwrfASaCrzNjAk:matrix.org/$DNbZheBnpV2E6U8mIyytIvayrbGJW4bnenKPMtbiGGw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If you had to use an API to explicitly register, you have even less privacy.</blockquote></mx-reply>Not if you have to use a type object that is itself sharable to hook the local behavior","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DNbZheBnpV2E6U8mIyytIvayrbGJW4bnenKPMtbiGGw"}},"msgtype":"m.text"},"ts":1705606499603,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$sMVDGpRnu5eGS6C40-COsxm5M_CpPfjl0jAjBXIkVcw"},
{"content":{"body":"If I have access to construct a `Worker` to do the right thing, then I have access to construct a `Worker` to do the wrong thing.","format":"org.matrix.custom.html","formatted_body":"If I have access to construct a <code>Worker</code> to do the right thing, then I have access to construct a <code>Worker</code> to do the wrong thing.","m.mentions":{},"msgtype":"m.text"},"ts":1705606523289,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$JzS8-KD3nmEOHffqMTwwIlgMZlQz9bRe-OZ94Y159oI"},
{"content":{"body":"Unless that `Worker` has no control over how the correlation happens.","format":"org.matrix.custom.html","formatted_body":"Unless that <code>Worker</code> has no control over how the correlation happens.","m.mentions":{},"msgtype":"m.text"},"ts":1705606555348,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$u8vtRvamNPKBFNziez1h7AI0NN6QqqYZ0yWiLsXpJzQ"},
{"content":{"body":"instead of using examplar","m.mentions":{},"msgtype":"m.text"},"ts":1705606563813,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KAnBpJ_kZpoubqtQLVkSwOCdCztLhspP1aVKw5YE2hg"},
{"content":{"body":"If I can send a trusted piece of information over to a `Worker` to establish the `struct`, then malfeasant code can do the same thing to forge the `struct` as well.","format":"org.matrix.custom.html","formatted_body":"If I can send a trusted piece of information over to a <code>Worker</code> to establish the <code>struct</code>, then malfeasant code can do the same thing to forge the <code>struct</code> as well.","m.mentions":{},"msgtype":"m.text"},"ts":1705606618996,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yNr-sSz6bmJWh22BMcK-UTM31byAbLAAF3Oc-ZMm6r4"},
{"content":{"body":"not if that piece of information is obtained when declaring the struct","m.mentions":{},"msgtype":"m.text"},"ts":1705606650913,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8NeoDqWwKGV2R-y4A95VptwZKUuPkUrI18qtvWB8t20"},
{"content":{"body":" * not if that piece of information is only obtained when declaring the struct","m.mentions":{},"m.new_content":{"body":"not if that piece of information is only obtained when declaring the struct","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8NeoDqWwKGV2R-y4A95VptwZKUuPkUrI18qtvWB8t20","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705606657548,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lOUbEDK8ctj2jqaFn47vcQvQl_zyHJyaKsZ2w3wfNr8"},
{"content":{"body":"How do you do that, and have it declared in two different threads with the same information?","m.mentions":{},"msgtype":"m.text"},"ts":1705606703369,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w0qXeuHjkZBgbdVYaCGwE4VNsdtSVFABhfGp8VIRYpw"},
{"content":{"body":"that's the tricky bit, especially with syntax","m.mentions":{},"msgtype":"m.text"},"ts":1705606779894,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5pdqfFk1OnDQtyfCpbbUWe4iwrbtCLOaPuVojNYd70o"},
{"content":{"body":"file+position is essentially obtained when declaring the struct and is potentially unforgeable (especially if all workers pointing to the same file have to use the same cached source)","m.mentions":{},"msgtype":"m.text"},"ts":1705606781480,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jAeXMcGUXLgM3x_kMmVpstDIUwZlGY0WfxnoDGAVFAQ"},
{"content":{"body":"I can do it imperatively. I believe I actually did in some of my earlier attemps","m.mentions":{},"msgtype":"m.text"},"ts":1705606832347,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$aEVIjC_dFIBVSCIRZACekHrgWR6VONaOyu38PZ-ccXA"},
{"content":{"body":" * I can do it imperatively. I believe I actually did in some of my earlier attempts at linking types","m.mentions":{},"m.new_content":{"body":"I can do it imperatively. I believe I actually did in some of my earlier attempts at linking types","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$aEVIjC_dFIBVSCIRZACekHrgWR6VONaOyu38PZ-ccXA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1705606850637,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$pluAHHt8X3CPJp2k9jka5ObSdkpl11-L01cafaTd7qQ"},
{"content":{"body":"Also, my argument isn't that \"if we can't do hard privacy we can't have this feature\", it's \"if we can't do hard privacy, users would need to accept that if they want to use this feature\"","m.mentions":{},"msgtype":"m.text"},"ts":1705606867378,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$tiGsW45iVz_bCqHw5w7YdPyECPrqE-tbJQg_RlXdRj4"},
{"content":{"body":"I agree that file + position is unforgeable (caveats when you start introducing a module loader). I was talking about an escape hatch to avoid that constraint","m.mentions":{},"msgtype":"m.text"},"ts":1705606928251,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$VA5F91ffgDB2l2suPLNRY4JK2PYj2tk5VKYokpq1isM"},
{"content":{"body":"To be fair, the forgeability is only a concern if you hand untrusted code the ability to create a new `Worker` with the necessary correlation information. If the untrusted code doesn't have access to that, they can't forge it.","format":"org.matrix.custom.html","formatted_body":"To be fair, the forgeability is only a concern if you hand untrusted code the ability to create a new <code>Worker</code> with the necessary correlation information. If the untrusted code doesn't have access to that, they can't forge it.","m.mentions":{},"msgtype":"m.text"},"ts":1705607021695,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ewi_GYEAOrXkdtD_lw-lzQCImtyBCEjiyAfANdHrCmU"},
{"content":{"body":"file+position is potentially easier for consumers as its less complex to set up, though its harder for bundlers since they need to isolate `struct` definitions to individual files. Defining some kind of private token that you need to attach to a declaration before the module graph is loaded seems extremely hard to do correctly, and if the token is just a string/URI/UUID then malfeasant code just needs to know what that string is to construct a new `Worker` that points to a different file with a struct that masquerades as the original one.","format":"org.matrix.custom.html","formatted_body":"file+position is potentially easier for consumers as its less complex to set up, though its harder for bundlers since they need to isolate <code>struct</code> definitions to individual files. Defining some kind of private token that you need to attach to a declaration before the module graph is loaded seems extremely hard to do correctly, and if the token is just a string/URI/UUID then malfeasant code just needs to know what that string is to construct a new <code>Worker</code> that points to a different file with a struct that masquerades as the original one.","m.mentions":{},"msgtype":"m.text"},"ts":1705607172339,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-7nNpIi4WIwgZ_qQUpLqN1Tx0nR3aqwevkE0Nr8gz18"},
{"content":{"body":"I'm a fan of being able to tag a `struct` with something like a UUID to correlate, but it does weaken private names in that context.","format":"org.matrix.custom.html","formatted_body":"I'm a fan of being able to tag a <code>struct</code> with something like a UUID to correlate, but it does weaken private names in that context.","m.mentions":{},"msgtype":"m.text"},"ts":1705607243059,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ghYMt9L2ULM3mH4Qr_d5v_SMfPDsHa24jKsAGNJ0Gv4"},
{"content":{"body":"Of course, malfeasant code would have to be able to execute a custom tailored script, which could run afoul of CSP in a properly configured environment, so maybe that's not so much of a concern either.","m.mentions":{},"msgtype":"m.text"},"ts":1705607308383,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6SOc0mwJyz0mS_yNYwlxim0ElPUnpCw_WBRJfgFsWPE"},
{"content":{"body":"shu: Could you make me a maintainer on https://github.com/tc39/proposal-structs? I don't seem to have enough access to add PR reviewers ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a>: Could you make me a maintainer on https://github.com/tc39/proposal-structs? I don't seem to have enough access to add PR reviewers","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1705610313333,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6_pLl3Hgohca1SpwHvmnkHGBFBt7XbWxqTlHP_8zZXM"},
{"content":{"body":"rbuckton: done","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: done","m.mentions":{"user_ids":["@rbuckton:matrix.org"]},"msgtype":"m.text"},"ts":1705613520354,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$NHNz7CzHcF_ICBWIEFXCE80CwFOMgXcHojtrAaAQK2A"}
]