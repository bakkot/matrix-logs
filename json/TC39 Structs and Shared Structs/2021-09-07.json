[
{"content":{"body":"this room also never had an orange TC39 logo for me","msgtype":"m.text"},"ts":1631028379771,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$yEClb9gWz5cHibYiKfpA7cz0YQFlyIWTYJkJrzRpduI"},
{"content":{"body":"dunno how this stuff works","msgtype":"m.text"},"ts":1631028385950,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Hu3CSUmdScLEbwUC3SrP4GxEol2TwrjIUFU0bU7LS6I"},
{"content":{"body":"At 9AM PDT I'll be talking a bit about the connection between Wasm GC & this proposal (among other things) at the Wasm GC subgroup: https://github.com/WebAssembly/gc/issues/237","msgtype":"m.text"},"ts":1631028711227,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$lMTMhRiBT95ImJ402DQnuXhkotbab5pxdZ-xupL80TY"},
{"content":{"body":" * At 9AM PDT I'll be talking a bit about the connection between Wasm GC & this proposal (among other things) at the Wasm GC subgroup: https://github.com/WebAssembly/gc/issues/237","m.new_content":{"body":"At 9AM PDT I'll be talking a bit about the connection between Wasm GC & this proposal (among other things) at the Wasm GC subgroup: https://github.com/WebAssembly/gc/issues/237","msgtype":"m.text"},"m.relates_to":{"event_id":"$lMTMhRiBT95ImJ402DQnuXhkotbab5pxdZ-xupL80TY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631028739383,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$g7dBVBbPVo_12QjENgoCnXLo50bd-jXAj4tmdZCvTWo"},
{"content":{"body":"sorry i missed this, i don't have the GC subgroup meetings on my calendar, though always happy to attend fewer meetings","msgtype":"m.text"},"ts":1631034053646,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KVtUxVk2SVRUJaIi9rcyNOYCptoPtBeoa3KilutCc0A"},
{"content":{"body":"how did it go, asumu?","msgtype":"m.text"},"ts":1631034056100,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$-pDrQAvhqw5hJn3afg9uDqcSlkATybcALECBLjYnUWo"},
{"content":{"body":"I think it went well! There was a lot of agreement overall. One of the bigger points of discussion was what can be done about type-checking in the JS->Wasm direction. There was some discussion on how that might be possible by extending Wasm's API, perhaps even without adding more types to the JS structs proposal (which of course we had agreed wasn't part of the initial proposal).","msgtype":"m.text"},"ts":1631034599819,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$79S9GkEWAvG3DdJ6Pze0GMCGFtSWpKAWd8g7PFX-n90"},
{"content":{"body":"Slides here: https://docs.google.com/presentation/d/1XwCwOQvTTuV5mU74d2wLnEqsdpi20ReCxtFRZLcW0EA/edit?usp=sharing","msgtype":"m.text"},"ts":1631034605071,"senderName":"asumu","senderId":"@atakikawa:igalia.com","id":"$gFUKJ9rWNhMMPKBsarHGcZeqmgJM8UAeQZTmlg0Xir8"},
{"content":{"body":"cool, thanks for the slides","msgtype":"m.text"},"ts":1631043417783,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$31j78-C73uiF0yr8oWo3zWxaWkcI2-jCDe23jMhteRQ"},
{"content":{"body":"makes me think i should attend the GC subgroup meetings, if only mostly as an observer","msgtype":"m.text"},"ts":1631043442004,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$nz44iU6AIE592dfqD6dAt_cPcDxQ7sRQcL3QvkqcqL4"},
{"content":{"body":"One thing that Shu and I were discussing was the possibility of using decorators to handle marshaling behavior for things like FFIs. I'm still interested in RTT support and how to align that with TypeScript","msgtype":"m.text"},"ts":1631043521677,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-LrsV6N1D3I8K6Fe5j1NAMDlkEN7mHd37tH5oqnckG8"},
{"content":{"body":"In the proposal draft I was working on, I used `: type` (similar to TypeScript) for a restricted subset of types, with the possibility of using something like TS generics for specific subtyping (i.e., `kind: i32<Kind>`, where the `<Kind>` would be erased by TS on emit). Another approach was a prefix `(type)` similar to what I was thinking for operator overloading:\n```\nstruct Point {\n  (i32) x;\n  (i32) y;\n  static (Point + i32) (a, b) { return new Point(a.x + b, a.y + b); }\n  ...\n}\n```\nBut this could also theoretically be handled by decorators under the current proposal:\n```\nstruct class Point {\n  @WebAssembly.Type(\"i32\") x;\n  @WebAssembly.Type(\"i32\") y;\n}\n// or\nconst { i32 } = WebAssembly.Types;\nstruct class Point {\n  @i32 x;\n  @i32 y;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>In the proposal draft I was working on, I used <code>: type</code> (similar to TypeScript) for a restricted subset of types, with the possibility of using something like TS generics for specific subtyping (i.e., <code>kind: i32&lt;Kind&gt;</code>, where the <code>&lt;Kind&gt;</code> would be erased by TS on emit). Another approach was a prefix <code>(type)</code> similar to what I was thinking for operator overloading:</p>\n<pre><code>struct Point {\n  (i32) x;\n  (i32) y;\n  static (Point + i32) (a, b) { return new Point(a.x + b, a.y + b); }\n  ...\n}\n</code></pre>\n<p>But this could also theoretically be handled by decorators under the current proposal:</p>\n<pre><code>struct class Point {\n  @WebAssembly.Type(&quot;i32&quot;) x;\n  @WebAssembly.Type(&quot;i32&quot;) y;\n}\n// or\nconst { i32 } = WebAssembly.Types;\nstruct class Point {\n  @i32 x;\n  @i32 y;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1631044038927,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$qlkxaSvqwNYOqLnBO8afhsKY7aWLwamLvUPI-UpkiVE"},
{"content":{"body":"using decorators makes sense if types (really, \"size + representation\" instead of \"type\" writ large) were always applied via API like a WebAssembly API","msgtype":"m.text"},"ts":1631048249126,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$HMtrVlTIacQufNUMdjaJpodP_DTljvJe3xVaj-l4uHc"},
{"content":{"body":"but i think a desire exists to declare size+representation for JS structs for use within JS as well, and how would that work?","msgtype":"m.text"},"ts":1631048290965,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$o0BZwDvuMeG7jnJQOt6DBPB9__Vk59_KPiN62MnZSL4"},
{"content":{"body":"and to be clear, i think a world where the size+repr are only the purview of WebAssembly is actually fine","msgtype":"m.text"},"ts":1631048333915,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$52kr3LvUZ39P68k1SD2o48tR5ny6ZDOEl0nu33cGVbI"},
{"content":{"body":"but that might ruffle some feathers for platforms that don't want to include wasm but do want sized fields","msgtype":"m.text"},"ts":1631048356947,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$aHzgRc0nIj7SB26GhJtb_89RyPE2s5excgtQjxCnr9E"},
{"content":{"body":"The `@type` decorator approach wouldn't be the first time we've seen a similar proposal. I think littledan considered something for user-defined numeric literal suffixes as well (i.e., `123@px`).\n\nAlso, it wouldn't necessarily need to be tied to `WebAssembly` if we went with that approach. There are a few use cases it doesn't solve though (like fixed size arrays, etc.) that I was considering here: https://github.com/rbuckton/proposal-struct#field-types","format":"org.matrix.custom.html","formatted_body":"<p>The <code>@type</code> decorator approach wouldn't be the first time we've seen a similar proposal. I think littledan considered something for user-defined numeric literal suffixes as well (i.e., <code>123@px</code>).</p>\n<p>Also, it wouldn't necessarily need to be tied to <code>WebAssembly</code> if we went with that approach. There are a few use cases it doesn't solve though (like fixed size arrays, etc.) that I was considering here: https://github.com/rbuckton/proposal-struct#field-types</p>\n","msgtype":"m.text"},"ts":1631055618863,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$6FQnEosk9Z5A4tojEIqylq8YvjgBajQa_KaqyDm8XfA"},
{"content":{"body":"Specific cases being something like:\n1. `i32[8]` for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)\n2. `i32[length]` for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if `length` is mutable).\n3. `i32[]` for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)","format":"org.matrix.custom.html","formatted_body":"<p>Specific cases being something like:</p>\n<ol>\n<li><code>i32[8]</code> for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)</li>\n<li><code>i32[length]</code> for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if <code>length</code> is mutable).</li>\n<li><code>i32[]</code> for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)</li>\n</ol>\n","msgtype":"m.text"},"ts":1631056671545,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$R4L03c9hKZyqPHZ4JmcM_ZQS_jomYZ9nnrN0rI1Xesg"},
{"content":{"body":" * Specific cases being something like:\n1. `i32[8]` for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)\n2. `i32[length]` for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if `length` is mutable).\n3. `i32[]` for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)","format":"org.matrix.custom.html","formatted_body":" * <p>Specific cases being something like:</p>\n<ol>\n<li><code>i32[8]</code> for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)</li>\n<li><code>i32[length]</code> for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if <code>length</code> is mutable).</li>\n<li><code>i32[]</code> for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)</li>\n</ol>\n","m.new_content":{"body":"Specific cases being something like:\n1. `i32[8]` for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)\n2. `i32[length]` for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if `length` is mutable).\n3. `i32[]` for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)","format":"org.matrix.custom.html","formatted_body":"<p>Specific cases being something like:</p>\n<ol>\n<li><code>i32[8]</code> for a fixed-size array of 8 32-bit signed integers (derived from standard C/C++ array field declarators and C# array field declarators)</li>\n<li><code>i32[length]</code> for a dependent-sized array whose size is derived from another field on the object (roughly based on https://docs.microsoft.com/en-us/windows/win32/midl/midl-arrays, though possibly not feasible if <code>length</code> is mutable).</li>\n<li><code>i32[]</code> for a flexible-sized array (based on C99 flexible array members https://en.wikipedia.org/wiki/Flexible_array_member)</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$R4L03c9hKZyqPHZ4JmcM_ZQS_jomYZ9nnrN0rI1Xesg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1631056763076,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pixj76kjZFwBsmVRshtnuDzyk7JM5QwVPtajYh8H-Zo"},
{"content":{"body":"you think those can be done with decorators instead of building them in?","msgtype":"m.text"},"ts":1631056807036,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AjSaNO8Uul_d0rNMskd_0Hkd_iB8Uffcfj8PgkPjOzk"},
{"content":{"body":"(2) may be unlikely. In most cases where I've seen a similar construct it has been purely informative and primarily intended for describing marshaling.","msgtype":"m.text"},"ts":1631056810182,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$pzQk9IEUOVEkjtFaLCngos-F3zG6UWRYUuEn7def8iA"},
{"content":{"body":"or should be done with decorators?","msgtype":"m.text"},"ts":1631056810658,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$Nd9fFyUPUgBETwZ0dRlYO5-bO5zXYvCM7Ci-5sOyD8o"},
{"content":{"body":"I think either are feasible, though building in syntax might be preferred.","msgtype":"m.text"},"ts":1631056839380,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$yfMO8YrD23t2FuijcVTMSHrJzABLu7Y4_5YWiMHUHQk"},
{"content":{"body":"(3) is enshrining a common pattern in the kind of programming i do, i'd be happy with that","msgtype":"m.text"},"ts":1631056843059,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5p4PwxXuULXWSYBQ2h1qLm8mU0qnxyKkkFcxTSOs-4s"},
{"content":{"body":"Decorators do provide some flexibility, and we could leverage _MetaProperty_, i.e.:\n```\nstruct class Foo {\n  @struct.type(struct.i32)\n  x;\n  @struct.type(struct.i32, { size: 8 })\n  y;\n  @struct.type(struct.i32, { size: \"flexible\" })\n  z;\n}\n```\n\nYou would run into the same issue decorators has with circular references though:\n\n```\nstruct class A {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(B, { size: \"flexible\" })\n  bArray;\n}\nstruct class B {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(A, { size: \"flexible\" })\n  aArray;\n}\n```\n\nThat was one of the other motivators for `ref`:\n\n```\nstruct class A {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(ref B, { size: \"flexible\" }) // reference `B`\n  bArray;\n}\nstruct class B {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(A, { size: \"flexible\" })\n  aArray;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Decorators do provide some flexibility, and we could leverage <em>MetaProperty</em>, i.e.:</p>\n<pre><code>struct class Foo {\n  @struct.type(struct.i32)\n  x;\n  @struct.type(struct.i32, { size: 8 })\n  y;\n  @struct.type(struct.i32, { size: &quot;flexible&quot; })\n  z;\n}\n</code></pre>\n<p>You would run into the same issue decorators has with circular references though:</p>\n<pre><code>struct class A {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(B, { size: &quot;flexible&quot; })\n  bArray;\n}\nstruct class B {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(A, { size: &quot;flexible&quot; })\n  aArray;\n}\n</code></pre>\n<p>That was one of the other motivators for <code>ref</code>:</p>\n<pre><code>struct class A {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(ref B, { size: &quot;flexible&quot; }) // reference `B`\n  bArray;\n}\nstruct class B {\n  @struct.type(struct.i32)\n  size;\n  @struct.type(A, { size: &quot;flexible&quot; })\n  aArray;\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1631057309235,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZCjTMTY-C7KzGpNsLGQPGi8oMdkS7hh4fxGhJuNyY84"},
{"content":{"body":"Downsides of _MetaProperty_ are the repetition and the fact you can't destructure.","format":"org.matrix.custom.html","formatted_body":"Downsides of <em>MetaProperty</em> are the repetition and the fact you can't destructure.","msgtype":"m.text"},"ts":1631057390460,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jMUDguGATzQDX_BO9f45BdHEBAKMfJEmhHFYncYoVfY"},
{"content":{"body":"sorry, would like to engage more fully here but am busy today. are you mainly interested in discussing the syntax space for a unified future-proof mechanism for both types and arrays?","msgtype":"m.text"},"ts":1631057394613,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$59m7w2wI_hbCcbZ4WSHOmMrdJskyRoVAOnqfYbOTqe8"},
{"content":{"body":"(more top of mind for me is whether we should pull arrays into scope)","msgtype":"m.text"},"ts":1631057411534,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$0CbVaBFt3bxvDEh5Vaf33V9BSxP4qeHsyVmQ-Nw98UM"},
{"content":{"body":"I'm interested in that among other things, yes.","msgtype":"m.text"},"ts":1631057433885,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-4wwq780LK2mmsZUACrz8KPcsGZK8YoQXnj8g0barzI"},
{"content":{"body":"Arrays are definitely useful, otherwise your only option for shared lists will be linked lists","msgtype":"m.text"},"ts":1631057501218,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$w3BtcrkqMw86zPa1KUDbmIJ7D5KN11l93TCY2xj2cQ0"},
{"content":{"body":"Of course, `struct` isn't a reserved word, so it wouldn't be a _MetaProperty_ anyways...","format":"org.matrix.custom.html","formatted_body":"Of course, <code>struct</code> isn't a reserved word, so it wouldn't be a <em>MetaProperty</em> anyways...","msgtype":"m.text"},"ts":1631057659305,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fa2t7BUEHu1D-XvByNenZFDUH4V5G-UrSgLpKAOScGE"},
{"content":{"body":"*If* types are defined via decorators we'd need some place to put them. That same place would be as good as any other for defining possible marshalling behavior for other things as well (like pseudo-blittable representations, struct layout and packing behavior, marshalling strings and arrays, FFI interop mechanisms, etc.)","format":"org.matrix.custom.html","formatted_body":"<em>If</em> types are defined via decorators we'd need some place to put them. That same place would be as good as any other for defining possible marshalling behavior for other things as well (like pseudo-blittable representations, struct layout and packing behavior, marshalling strings and arrays, FFI interop mechanisms, etc.)","msgtype":"m.text"},"ts":1631057843977,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3isYs3Syd5HULfvP_FcBTVQ8F53L1hAcluEqF3uQki8"},
{"content":{"body":"Maybe a global `Interop` object (since anything non-Proxy related can't go on `Reflect`). Then you could write:\n```\nconst { type, i32 } = Interop;\nstruct class Foo {\n  @type(i32) x;\n  @type(i32) y;\n}\n```\nBut there's plenty to bikeshed there.","format":"org.matrix.custom.html","formatted_body":"<p>Maybe a global <code>Interop</code> object (since anything non-Proxy related can't go on <code>Reflect</code>). Then you could write:</p>\n<pre><code>const { type, i32 } = Interop;\nstruct class Foo {\n  @type(i32) x;\n  @type(i32) y;\n}\n</code></pre>\n<p>But there's plenty to bikeshed there.</p>\n","msgtype":"m.text"},"ts":1631057950859,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$SFiurIirseSKHAoxd9_yv5P0NB4DwteeGfqKE1ikiJw"}
]