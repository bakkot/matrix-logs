[
{"content":{"body":"Ooh, I think I've just come up with a better way to describe PA!\n\nParser Augmentation is two things:\n1. an addition to the ECMAScript syntactic grammar for making assertions about the source text that follows, such as whether it's a script or a module, strict or not, whether there are any `var` declarations after first point of use, whether it has type assertions and what kind, what experimental operators it uses, etc.\n2. an optional runtime API that allows ECMAScript code to instruct the parser on how to polyfill any unknown assertions (or which ones can be safely ignored), by presenting an interface designed to allow engines to optimize their parser performance even with unexpected or unusual syntaxes.","format":"org.matrix.custom.html","formatted_body":"<p>Ooh, I think I've just come up with a better way to describe PA!</p>\n<p>Parser Augmentation is two things:</p>\n<ol>\n<li>an addition to the ECMAScript syntactic grammar for making assertions about the source text that follows, such as whether it's a script or a module, strict or not, whether there are any <code>var</code> declarations after first point of use, whether it has type assertions and what kind, what experimental operators it uses, etc.</li>\n<li>an optional runtime API that allows ECMAScript code to instruct the parser on how to polyfill any unknown assertions (or which ones can be safely ignored), by presenting an interface designed to allow engines to optimize their parser performance even with unexpected or unusual syntaxes.</li>\n</ol>\n","m.mentions":{},"msgtype":"m.text"},"ts":1713929806551,"senderName":"Danielle Church","senderId":"@dmchurch:matrix.org","id":"$CwIbzrIru5Y5Kw5BNBKeLenY-60uKqKAVwBFpREKJSg"}
]