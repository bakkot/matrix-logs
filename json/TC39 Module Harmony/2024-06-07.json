[
{"content":{"body":"What’s the motivation for the AbstractModuleSource methods in the ESM source imports proposal? They feel separate from the stated goals. The rationale that I was able to find was:\n\n> These helper methods are designed to allow for determining the static public exports and public imports of a module, but do not give information about the internal module identifiers or dynamic import.","format":"org.matrix.custom.html","formatted_body":"<p>What’s the motivation for the AbstractModuleSource methods in the ESM source imports proposal? They feel separate from the stated goals. The rationale that I was able to find was:</p>\n<blockquote>\n<p>These helper methods are designed to allow for determining the static public exports and public imports of a module, but do not give information about the internal module identifiers or dynamic import.</p>\n</blockquote>","msgtype":"m.text"},"ts":1717761255206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UvhQ-27N4aCMmshyqdvl43RfOuTkKgoI5alleNdG4dE"},
{"content":{"body":"littledan: they are in effect loader primitives, that we can do \"while we are specifying it\". Also effectively replaces the need for eg https://www.npmjs.com/package/es-module-lexer which clearly is needed.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: they are in effect loader primitives, that we can do \"while we are specifying it\". Also effectively replaces the need for eg https://www.npmjs.com/package/es-module-lexer which clearly is needed.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"ts":1717775901401,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$7wzwMhih2kMhq0pFj3abrdRIS4i4xGd75IxjqhtTyOk"},
{"content":{"body":"They are somewhat of an orthogonal feature though, that could be worth more explicitly calling out as a use case though certainly. Point taken - I can add some more motivation here around the es-module-lexer use case it solves.","m.mentions":{},"msgtype":"m.text"},"ts":1717775972348,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$FSv0nje-VIAjBxOdhKgt69OxWKzlYifR44Bc0dKMo8w"},
{"content":{"body":"but they're defined for all AbstractModuleSources, e.g., also for WebAssembly?","m.mentions":{},"msgtype":"m.text"},"ts":1717776520168,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GEvXEwOJDc81leSPnrPqnk3kufkbL_T641nrBvUgwRM"},
{"content":{"body":"I'm also wondering how much you've worked out about the identity of source modules as they're postMessage'd around. Does it go by resolved specifier, or are they cloned the way that module expressions are?","m.mentions":{},"msgtype":"m.text"},"ts":1717776562026,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FpR2ujYmqLAK7h3fNz8YGCmXOfuKUlwoU4Z1ZSqXAt0"},
{"content":{"body":"Yes, because these are properties of all cyclic module records","m.mentions":{},"msgtype":"m.text"},"ts":1717776616174,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$iZR6BDDjgNxdiA-beELSv-HmmuvG6Cnk-m6SoEy5Aow"},
{"content":{"body":"and if Wasm supports top-level await in future or import meta, it might even support those","m.mentions":{},"msgtype":"m.text"},"ts":1717776639698,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Zeu4_Xrpbgnz0cQwkKM8x5Q40hxvbnPKqpxDOQMZQJI"},
{"content":{"body":"For the transfer, this is exactly what we are hoping to treat as a Stage 2.7 concern, since it involves interactions with other spec texts","m.mentions":{},"msgtype":"m.text"},"ts":1717776680424,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$_h1uqcePVvSx7MM3GPiRSF9QNycRwka9o6RBMhPth1s"},
{"content":{"body":"it may likely involve a spec refactoring to more clearly define the module key, which I cover in more detail in the presentation","m.mentions":{},"msgtype":"m.text"},"ts":1717776708153,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$U8aLXAa_U1rJzGJoJM45M0brjPILWuRaG3bxQurNuN4"},
{"content":{"body":"> <@guybedford:matrix.org> They are somewhat of an orthogonal feature though, that could be worth more explicitly calling out as a use case though certainly. Point taken - I can add some more motivation here around the es-module-lexer use case it solves.\n\nIt might be worth calling out whether you're open to splitting this part out, given the very separate nature of the motivation and the lack of hard dependencies in either direction.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$FSv0nje-VIAjBxOdhKgt69OxWKzlYifR44Bc0dKMo8w?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>They are somewhat of an orthogonal feature though, that could be worth more explicitly calling out as a use case though certainly. Point taken - I can add some more motivation here around the es-module-lexer use case it solves.</blockquote></mx-reply>It might be worth calling out whether you're open to splitting this part out, given the very separate nature of the motivation and the lack of hard dependencies in either direction.","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FSv0nje-VIAjBxOdhKgt69OxWKzlYifR44Bc0dKMo8w"}},"msgtype":"m.text"},"ts":1717776765553,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-Sk7BokQQbzOQGAUKPnRng5P_28gaT97duZkAi1a8rc"},
{"content":{"body":"yeah I can call that out","m.mentions":{},"msgtype":"m.text"},"ts":1717776825990,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$T6ntoYjNIKlZNrlocXArqej2vC2JS7pznmgtC9iz3ag"}
]