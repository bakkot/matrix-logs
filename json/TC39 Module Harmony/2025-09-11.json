[
{"content":{"body":"seems there was a pretty critical oversight in the type css import spec - https://github.com/whatwg/html/issues/11629","m.mentions":{},"msgtype":"m.text"},"ts":1757561689310,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$0VV8Dj1vO1g6JiOzvmx3HqRg_QNNz8_ut4QFHn-rBxE"},
{"content":{"body":"hopefully it gets corrected soon!","m.mentions":{},"msgtype":"m.text"},"ts":1757561697550,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2MlqO9JoE29aLmNvMVHa5a8220tGQ-NNyifFPVi9e64"},
{"content":{"body":"see you all tomorrow","m.mentions":{},"msgtype":"m.text"},"ts":1757561723303,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$-eOqMIIcm5Wzdj4pkiCqnNLQMmhnYIzeDW7ROo9MZag"},
{"content":{"body":"Meeting time!","msgtype":"m.text"},"ts":1757606529074,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$EHRjx4Wfi8Dyi-upPIvkTFd1w154QplXx3uy9tZJldE"},
{"content":{"body":"nicolo-ribaudo guybedford what’s the current deal for preserving the referrer of a module source if it’s transferred over post message to another worker, such that relative module specifiers converge on the same sources for shallow dependencies?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> what’s the current deal for preserving the referrer of a module source if it’s transferred over post message to another worker, such that relative module specifiers converge on the same sources for shallow dependencies?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1757626136462,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$nsmSKUbVauEw92ZDiOK4xf02WadHWyQnQ164nE6p-zg"},
{"content":{"body":"I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable.","m.mentions":{},"msgtype":"m.text"},"ts":1757626223127,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xuIfK6jIwvlr3-MD4lMJrXgIlwV-6ipujOy6OszUx1g"},
{"content":{"body":"* I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable of postmessage and structuredclone.","m.mentions":{},"m.new_content":{"body":"I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable of postmessage and structuredclone.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xuIfK6jIwvlr3-MD4lMJrXgIlwV-6ipujOy6OszUx1g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1757626235579,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$U4nBNdPGYUcNYfarOENtIYOzCKSw-iH8xMWavKWj-Z8"},
{"content":{"body":"I’m mulling a mechanism to bind a module source to its specifier explicitly like `import(new ModuleSource('import \"../x.js\"'), { base: new URL('lib/y.js', import.meta.url).href })` or `import.source` with same args to avoid execution (and incidentally have a different module memo key)","format":"org.matrix.custom.html","formatted_body":"I’m mulling a mechanism to bind a module source to its specifier explicitly like <code>import(new ModuleSource('import \"../x.js\"'), { base: new URL('lib/y.js', import.meta.url).href })</code> or <code>import.source</code> with same args to avoid execution (and incidentally have a different module memo key)","m.mentions":{},"msgtype":"m.text"},"ts":1757626447020,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$151ZYNz1JGZkm2RW7pZkkwOcsNv1Wp9swwfI_nP62ec"},
{"content":{"body":"@bakkot hinted that using dynamic import to bind sources was an option, given that we (including me) disfavor using the `ModuleSource` constructor. He was referring specifically to `importHook`, which doesn’t necessarily apply to the base module specifier but could. If the base specifier is currently an implementation specific detail that of transferrable module sources, given that it’s necessarily a serializable string, we could adopt it in 262 and bind it either way.","format":"org.matrix.custom.html","formatted_body":"@bakkot hinted that using dynamic import to bind sources was an option, given that we (including me) disfavor using the <code>ModuleSource</code> constructor. He was referring specifically to <code>importHook</code>, which doesn’t necessarily apply to the base module specifier but could. If the base specifier is currently an implementation specific detail that of transferrable module sources, given that it’s necessarily a serializable string, we could adopt it in 262 and bind it either way.","m.mentions":{},"msgtype":"m.text"},"ts":1757626627853,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$FoYV7fB5Ek0iDpWK5YhKKL6MSErZQ7VFtz2ioicOhLU"},
{"content":{"body":"It's just the baseURL property of the HTML module script here, which is separately serialized and deserialized when transferring a module script. Because the module script is [[HostDefined]] on the module record, both the record and its \"HTML wrapper\" of the module script get serialized together","m.mentions":{},"msgtype":"m.text"},"ts":1757628773703,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$WW7h4x2Co139PMxkWX4evTa8qEmU7jNg_Fw3D09OuIE"},
{"content":{"body":"Yeah, that’s what I recall. Thanks.","m.mentions":{},"msgtype":"m.text"},"ts":1757628927789,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$ri3qw0uMe-BkXazRj30zwGhZkwGa_n7JVy5DRnRDfVo"},
{"content":{"body":"I think indirection would be needed either through an instance or through another field to support configurable ids. Alternatively this could be done specifically at registry injection time i.e. return { id, source } from the load hook","m.mentions":{},"msgtype":"m.text"},"ts":1757628930610,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HXwvl3RHVx3_M9WiGwCegsfJQ7SliJ_WhX2R-OKhVFY"},
{"content":{"body":"* I think indirection would be needed either through an instance or through another field to support configurable ids. Alternatively this could be done specifically at registry injection time i.e. return { id?, source } from the load hook","m.mentions":{},"m.new_content":{"body":"I think indirection would be needed either through an instance or through another field to support configurable ids. Alternatively this could be done specifically at registry injection time i.e. return { id?, source } from the load hook","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HXwvl3RHVx3_M9WiGwCegsfJQ7SliJ_WhX2R-OKhVFY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1757628959489,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$98P8KGiDRXrwnKT1w__BUF8Uz6Jp2z8F3jrQnbSDb4k"},
{"content":{"body":"The `importHook` case is actually fine, because the hook is invoked knowing the cache key, which is the base specifier already.","format":"org.matrix.custom.html","formatted_body":"The <code>importHook</code> case is actually fine, because the hook is invoked knowing the cache key, which is the base specifier already.","m.mentions":{},"msgtype":"m.text"},"ts":1757629002007,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$yPEgw88_-58t3EH8UyjeDluqRONscgM_fZj0jpJegU0"},
{"content":{"body":"The case of a `ModuleSource(text)` lifted from text is not really germane yet since we don’t have a lift-from-text, but I’m thinking ahead to how we bind that to the supplementary base/referrer.","format":"org.matrix.custom.html","formatted_body":"The case of a <code>ModuleSource(text)</code> lifted from text is not really germane yet since we don’t have a lift-from-text, but I’m thinking ahead to how we bind that to the supplementary base/referrer.","m.mentions":{},"msgtype":"m.text"},"ts":1757629057257,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$hsM1OL7lmEG95gOWad7LS6dnVxRB3l3sHAuGiLlxQ9o"},
{"content":{"body":"It can’t be the `[[HostDefined]]` slot because we can’t stomp over origin metadata for purposes of CSP.","format":"org.matrix.custom.html","formatted_body":"It can’t be the <code>[[HostDefined]]</code> slot because we can’t stomp over origin metadata for purposes of CSP.","m.mentions":{},"msgtype":"m.text"},"ts":1757629118541,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$vQ4WomJ4nJUgKIddVksKfwPHCn6fjMPMmaQhftaEwGg"},
{"content":{"body":"So I think we just end up with a slot in 262 that tends to coïncide with information currently only in [[HostDefined]].","m.mentions":{},"msgtype":"m.text"},"ts":1757629161027,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$OI4IU5gLXrKl91I12dLqPVVvwlniF6c223iOoc50cCo"},
{"content":{"body":"in the ModuleSource(text) case we might have more flexibility to override the baseURL actually since theres another field on the module script I added to track whether it is 'evalish' or not","m.mentions":{},"msgtype":"m.text"},"ts":1757629164939,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$6wvTGxBMX9PG--UQVdte2DWEZc4WRtZkaMoX6QXfanw"},
{"content":{"body":"so the baseURL is no longer a security check, but just for resolution at that point","m.mentions":{},"msgtype":"m.text"},"ts":1757629183508,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$6Ets-w-5lKsRggpQqTyozFaYN_bsziIRNOUqyXKFGjQ"},
{"content":{"body":"it's more in the non-eval case that it's a csp concern to override, although I guess we could always just have two baseURLs as well - cspBaseURL and resolverBaseURL","m.mentions":{},"msgtype":"m.text"},"ts":1757629207000,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$zZdOtzEI_wI19PlsPjTMGqNOJulISjaBg8IEPdS49kA"},
{"content":{"body":"Alright, we agree up to this point and I think it’s just a flavor choice whether to bind the base with the ModuleSource constructor or `import.source`. I’m favoring `ModuleSource(text, { base })`","format":"org.matrix.custom.html","formatted_body":"Alright, we agree up to this point and I think it’s just a flavor choice whether to bind the base with the ModuleSource constructor or <code>import.source</code>. I’m favoring <code>ModuleSource(text, { base })</code>","m.mentions":{},"msgtype":"m.text"},"ts":1757629234785,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$d_yNAcg11ihFITKbqcpHws-SvP43CN9VHWQwPDKgQoM"},
{"content":{"body":"I think we agreed to have these separate a long while back.","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$zZdOtzEI_wI19PlsPjTMGqNOJulISjaBg8IEPdS49kA"}},"msgtype":"m.text"},"ts":1757629275915,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$JU9fm6t2WBRwP3pIZIP1MC0Gv0VBHAy8BCLTje8oBV0"},
{"content":{"body":"I wonder if we allow `new ModuleSource(existingModuleSource, { base })` for \"reassigning\" the base","format":"org.matrix.custom.html","formatted_body":"I wonder if we allow <code>new ModuleSource(existingModuleSource, { base })</code> for \"reassigning\" the base","m.mentions":{},"msgtype":"m.text"},"ts":1757629285225,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$LY45AZVsF9KO2Qt7tE4alGl8OUQD4MV_6XJYKNaFLps"},
{"content":{"body":"since `new ModuleSource()` is effectively the eval mode, that would bypass CSP concerns","format":"org.matrix.custom.html","formatted_body":"since <code>new ModuleSource()</code> is effectively the eval mode, that would bypass CSP concerns","m.mentions":{},"msgtype":"m.text"},"ts":1757629299710,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$jOGh5m6F0IfJKGct0ZP9Lt_kEO20GXDMP5DChs0AFEo"},
{"content":{"body":"Yeah, that’s an option in my opinion.","m.mentions":{},"msgtype":"m.text"},"ts":1757629303979,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$IAlxtHgjoHvoD79H-TqcqBh4tzNQNwt7wR6LP5YRPRs"},
{"content":{"body":"I don't hate it either","m.mentions":{},"msgtype":"m.text"},"ts":1757629335932,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HS-Cosj1UWwgtgHCpHcXQZrRDnjyhHRTuNtb-cYAIyY"},
{"content":{"body":"There are cases where relocating the base for a host-imported source is useful. Moddable uses them.","m.mentions":{},"msgtype":"m.text"},"ts":1757629363356,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$YeSS8YFPTXn5VMCeAPkZta6-gKV-MibQgI6H4JH1EzU"},
{"content":{"body":"For example, they often put a bunch of sources in ROM that are never executed in the initial realm but exist solely for mapping into a Compartment in different locations.","m.mentions":{},"msgtype":"m.text"},"ts":1757629411493,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$c2oH8n4ZVQgn5esFt1JFtE-1tIMTkuD32_GgddFFk-k"}
]