[
{"content":{"body":"seems there was a pretty critical oversight in the type css import spec - https://github.com/whatwg/html/issues/11629","m.mentions":{},"msgtype":"m.text"},"ts":1757561689310,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$0VV8Dj1vO1g6JiOzvmx3HqRg_QNNz8_ut4QFHn-rBxE"},
{"content":{"body":"hopefully it gets corrected soon!","m.mentions":{},"msgtype":"m.text"},"ts":1757561697550,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2MlqO9JoE29aLmNvMVHa5a8220tGQ-NNyifFPVi9e64"},
{"content":{"body":"see you all tomorrow","m.mentions":{},"msgtype":"m.text"},"ts":1757561723303,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$-eOqMIIcm5Wzdj4pkiCqnNLQMmhnYIzeDW7ROo9MZag"},
{"content":{"body":"Meeting time!","msgtype":"m.text"},"ts":1757606529074,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$EHRjx4Wfi8Dyi-upPIvkTFd1w154QplXx3uy9tZJldE"},
{"content":{"body":"nicolo-ribaudo guybedford what’s the current deal for preserving the referrer of a module source if it’s transferred over post message to another worker, such that relative module specifiers converge on the same sources for shallow dependencies?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> what’s the current deal for preserving the referrer of a module source if it’s transferred over post message to another worker, such that relative module specifiers converge on the same sources for shallow dependencies?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1757626136462,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$nsmSKUbVauEw92ZDiOK4xf02WadHWyQnQ164nE6p-zg"},
{"content":{"body":"I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable.","m.mentions":{},"msgtype":"m.text"},"ts":1757626223127,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xuIfK6jIwvlr3-MD4lMJrXgIlwV-6ipujOy6OszUx1g"},
{"content":{"body":"* I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable of postmessage and structuredclone.","m.mentions":{},"m.new_content":{"body":"I assume it’s currently an implementation- or host-defined behavior backed by the host data internal slot, made transferrable of postmessage and structuredclone.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$xuIfK6jIwvlr3-MD4lMJrXgIlwV-6ipujOy6OszUx1g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1757626235579,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$U4nBNdPGYUcNYfarOENtIYOzCKSw-iH8xMWavKWj-Z8"},
{"content":{"body":"I’m mulling a mechanism to bind a module source to its specifier explicitly like `import(new ModuleSource('import \"../x.js\"'), { base: new URL('lib/y.js', import.meta.url).href })` or `import.source` with same args to avoid execution (and incidentally have a different module memo key)","format":"org.matrix.custom.html","formatted_body":"I’m mulling a mechanism to bind a module source to its specifier explicitly like <code>import(new ModuleSource('import \"../x.js\"'), { base: new URL('lib/y.js', import.meta.url).href })</code> or <code>import.source</code> with same args to avoid execution (and incidentally have a different module memo key)","m.mentions":{},"msgtype":"m.text"},"ts":1757626447020,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$151ZYNz1JGZkm2RW7pZkkwOcsNv1Wp9swwfI_nP62ec"}
]