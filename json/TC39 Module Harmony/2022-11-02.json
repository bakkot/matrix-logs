[
{"content":{"body":"nicolo-ribaudo: I got a question from guybedford and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I got a question from <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"nicolo-ribaudo: I got a question from guybedford and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>: I got a question from <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> and want to confirm weâ€™re on the same page: reflective import would advance the module to loaded but not to linked and its dependencies wonâ€™t be loaded.","mimetype":"text/html"}]},"ts":1667427749025,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$g_4-6hvYuiD4nkUOSTbc5up87SZTXtz9eAMMA8Hs8GU"},
{"content":{"body":"I can easily imagine `import(x, {reflect: true, state: 'linked'})` or some such would load transitive dependencies without initializing or executing.","format":"org.matrix.custom.html","formatted_body":"I can easily imagine <code>import(x, {reflect: true, state: 'linked'})</code> or some such would load transitive dependencies without initializing or executing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I can easily imagine `import(x, {reflect: true, state: 'linked'})` or some such would load transitive dependencies without initializing or executing.","mimetype":"text/plain"},{"body":"I can easily imagine <code>import(x, {reflect: true, state: 'linked'})</code> or some such would load transitive dependencies without initializing or executing.","mimetype":"text/html"}]},"ts":1667427804917,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gmosUthoSEIfEI1pAKa5dKSMoIjRSxDsxSEA-vZs8o8"},
{"content":{"body":"Right, it would not load it's dependencies.\nHowever, I hope it will not just result in a ModuleSource but in something that contains all the info necessary to later load&link it's dependencies ","format":"org.matrix.custom.html","formatted_body":"Right, it would not load it's dependencies.<br />However, I hope it will not just result in a ModuleSource but in something that contains all the info necessary to later load&amp;link it's dependencies","msgtype":"m.text"},"ts":1667428023806,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QYibK2nSLNZDz0EFvkZ-8k2fWDPrT90FkiFOWKmNABk"},
{"content":{"body":"\"would advance the module to loaded\" -> Informally yes. Formally, it doesn't advance the module's state because the first state change happens when loading all its dependencies. It just makes us go from \"I have nothing\" to \"I have a Module/ModuleSource\"","format":"org.matrix.custom.html","formatted_body":"&quot;would advance the module to loaded&quot; -&gt; Informally yes. Formally, it doesn't advance the module's state because the first state change happens when loading all its dependencies. It just makes us go from &quot;I have nothing&quot; to &quot;I have a Module/ModuleSource&quot;","msgtype":"m.text"},"ts":1667428211313,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3odlWs8zV1TtDBQVjTGeABnfC41futlmFqxxcvEB83E"},
{"content":{"body":"I assume it would not be an observable optimization if the Module Record was born with a null pointer to the structs needed to advance past the loaded state.","msgtype":"m.text","org.matrix.msc1767.text":"I assume it would not be an observable optimization if the Module Record was born with a null pointer to the structs needed to advance past the loaded state."},"ts":1667428256550,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WpBBjw-QNkaFZZ5w9H8gataaGXx9fnGp2GN_K-YdMK8"},
{"content":{"body":"We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.","format":"org.matrix.custom.html","formatted_body":"We are in agreement about having a <code>Module</code> object and not just a <code>ModuleSource</code> but <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> would like us to at least contemplate the alternative given that deferred <code>await import(reflectedModule)</code> doesnâ€™t go as far as <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>â€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.","mimetype":"text/plain"},{"body":"We are in agreement about having a <code>Module</code> object and not just a <code>ModuleSource</code> but <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> would like us to at least contemplate the alternative given that deferred <code>await import(reflectedModule)</code> doesnâ€™t go as far as <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>â€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.","mimetype":"text/html"}]},"ts":1667428481394,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IvWOaZxDhXVqHYL9YmiZ4HMFpD--tdUg5_sGuaP_ZZ0"},
{"content":{"body":"In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.","msgtype":"m.text","org.matrix.msc1767.text":"In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook."},"ts":1667428612569,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fX_stLlfNiLMLh2c1Qpx1bFBdPBFlndpiORU9T9kPtE"},
{"content":{"body":"> <@kriskowal:matrix.org> We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.\n\nYeah, we are not solving deferred execution.\n\nI'm almost hoping we can have `import.link(module) -> Promise` and import.evaluateSync(module)` ðŸ˜¬","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IvWOaZxDhXVqHYL9YmiZ4HMFpD--tdUg5_sGuaP_ZZ0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />We are in agreement about having a <code>Module</code> object and not just a <code>ModuleSource</code> but <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> would like us to at least contemplate the alternative given that deferred <code>await import(reflectedModule)</code> doesnâ€™t go as far as <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>â€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.</blockquote></mx-reply><p>Yeah, we are not solving deferred execution.</p>\n<p>I'm almost hoping we can have <code>import.link(module) -&gt; Promise</code> and import.evaluateSync(module)` ðŸ˜¬</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$IvWOaZxDhXVqHYL9YmiZ4HMFpD--tdUg5_sGuaP_ZZ0"}},"msgtype":"m.text"},"ts":1667428649147,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$DcggEDuP37O3k9uhj8wmctVc81o9mk6LcvE8djjZUbM"},
{"content":{"body":"> <@kriskowal:matrix.org> In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.\n\nI'm 100% aligned with that. I have use cases for not loading the whole graph, and import reflection should be shallow.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$fX_stLlfNiLMLh2c1Qpx1bFBdPBFlndpiORU9T9kPtE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br />In any case, I wanted to make sure about reflection being shallow since thatâ€™s important to Guy. Itâ€™s important to me too, since itâ€™s possible to load a module that canâ€™t advance to linked without a custom import hook.</blockquote></mx-reply>I'm 100% aligned with that. I have use cases for not loading the whole graph, and import reflection should be shallow.","m.relates_to":{"m.in_reply_to":{"event_id":"$fX_stLlfNiLMLh2c1Qpx1bFBdPBFlndpiORU9T9kPtE"}},"msgtype":"m.text"},"ts":1667428682820,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$S5L0f4IOpiC-uBTD7rs3kivgLKwEhp-r1QNQDxcI9Fg"},
{"content":{"body":"For JS, it's exactly like `module { export * from \"x\" }` which doesn't load the graph until the block is imported (except that reflection loads \"x\", this almost-equivalent-module-block doesn't)","format":"org.matrix.custom.html","formatted_body":"For JS, it's exactly like <code>module { export * from &quot;x&quot; }</code> which doesn't load the graph until the block is imported (except that reflection loads &quot;x&quot;, this almost-equivalent-module-block doesn't)","msgtype":"m.text"},"ts":1667428749823,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xn-PthBZSpGAjup8Yj2YjO01Cd14CpE6jTM33lmKDUM"},
{"content":{"body":"* Yeah, we are not solving deferred execution.\nI'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬","m.new_content":{"body":"> <@kriskowal:matrix.org> We are in agreement about having a `Module` object and not just a `ModuleSource` but guybedford would like us to at least contemplate the alternative given that deferred `await import(reflectedModule)` doesnâ€™t go as far as yuliaâ€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.\n\nYeah, we are not solving deferred execution.\nI'm almost hoping we can have `import.link(module) -> Promise` and `import.evaluateSync(module)` ðŸ˜¬","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IvWOaZxDhXVqHYL9YmiZ4HMFpD--tdUg5_sGuaP_ZZ0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a><br />We are in agreement about having a <code>Module</code> object and not just a <code>ModuleSource</code> but <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> would like us to at least contemplate the alternative given that deferred <code>await import(reflectedModule)</code> doesnâ€™t go as far as <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>â€™s proposing for deferred execution. I donâ€™t think our current agreement precludes going farther and I think itâ€™s compelling for code splitting, but it wouldnâ€™t initialize a dependency on the stack of the first access of one of its exports.</blockquote></mx-reply>Yeah, we are not solving deferred execution.<br />I'm almost hoping we can have <code>import.link(module) -&gt; Promise</code> and <code>import.evaluateSync(module)</code> ðŸ˜¬","msgtype":"m.text"},"m.relates_to":{"event_id":"$DcggEDuP37O3k9uhj8wmctVc81o9mk6LcvE8djjZUbM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1667428786210,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$gJxybTNcAD8puEXV9Z3N55T3tFA5b1ndWe3Eu-sTPw0"},
{"content":{"body":"Right, I expect module expressions to be shallow too.","msgtype":"m.text","org.matrix.msc1767.text":"Right, I expect module expressions to be shallow too."},"ts":1667428804769,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$cwz2Ol6Ya7jrAN4Fqy_aw9IxyPYvzPswoVQyYYKIZKs"},
{"content":{"body":"Same reasons. They might be sent somewhere their linkage is possible even if thatâ€™s not local.","msgtype":"m.text","org.matrix.msc1767.text":"Same reasons. They might be sent somewhere their linkage is possible even if thatâ€™s not local."},"ts":1667428822836,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kowkjhVZwf4cUQm8Jthb1hmdNJYc-g0-sDLQwFo8VII"}
]