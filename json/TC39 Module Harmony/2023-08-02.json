[
{"content":{"body":"Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` between expressions, instance imports, and virtualisation. I _think_ this is:\n\n```ts\ninterface Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I'd like to see a proposal / document that outlines the minimum shared <code>Module</code> between expressions, instance imports, and virtualisation. I <em>think</em> this is:</p>\n<pre><code class=\"language-ts\">interface Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n</code></pre>\n","msgtype":"m.text"},"ts":1690965208330,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$mnWfgNI0137LilzL9U5VWWp7roQDAROw68HuFmnWJNs"},
{"content":{"body":" * Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` between expressions, instance imports, and virtualisation. I _think_ this is:\n\n```ts\nclass Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I'd like to see a proposal / document that outlines the minimum shared <code>Module</code> between expressions, instance imports, and virtualisation. I <em>think</em> this is:</p>\n<pre><code class=\"language-ts\">class Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n</code></pre>\n","m.new_content":{"body":"Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` between expressions, instance imports, and virtualisation. I _think_ this is:\n\n```ts\nclass Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I'd like to see a proposal / document that outlines the minimum shared <code>Module</code> between expressions, instance imports, and virtualisation. I <em>think</em> this is:</p>\n<pre><code class=\"language-ts\">class Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$mnWfgNI0137LilzL9U5VWWp7roQDAROw68HuFmnWJNs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1690965216902,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$rUKrAKOR06XPdT0E_flJeJ7SMg9Wt5-D6Hj9z4UNM1g"},
{"content":{"body":"In essence, all the `Module` semantics minus actually getting ahold of a `Module` object","format":"org.matrix.custom.html","formatted_body":"In essence, all the <code>Module</code> semantics minus actually getting ahold of a <code>Module</code> object","msgtype":"m.text"},"ts":1690965248119,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$UHsD9cxEf7zIzSYk7nelG_KvSwyslIJcrUBoqE5dz_g"},
{"content":{"body":"From there, we can pursue all three ways of getting ahold of a `Module` in parallel:\n- expressions\n- instance imports\n- constructor (this one also introduces `ModuleSource`)","format":"org.matrix.custom.html","formatted_body":"<p>From there, we can pursue all three ways of getting ahold of a <code>Module</code> in parallel:</p>\n<ul>\n<li>expressions</li>\n<li>instance imports</li>\n<li>constructor (this one also introduces <code>ModuleSource</code>)</li>\n</ul>\n","msgtype":"m.text"},"ts":1690965299253,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$BOjATy7z4XDc5830Bp45-eo4_py_lJ-OQ-WvouJqAI8"},
{"content":{"body":" * Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` interface between expressions, instance imports, and virtualisation. I _think_ this is:\n\n```ts\nclass Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n```","format":"org.matrix.custom.html","formatted_body":" * <p><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I'd like to see a proposal / document that outlines the minimum shared <code>Module</code> interface between expressions, instance imports, and virtualisation. I <em>think</em> this is:</p>\n<pre><code class=\"language-ts\">class Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n</code></pre>\n","m.new_content":{"body":"Kris Kowal: I'd like to see a proposal / document that outlines the minimum shared `Module` interface between expressions, instance imports, and virtualisation. I _think_ this is:\n\n```ts\nclass Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I'd like to see a proposal / document that outlines the minimum shared <code>Module</code> interface between expressions, instance imports, and virtualisation. I <em>think</em> this is:</p>\n<pre><code class=\"language-ts\">class Module {\n  get source(): %AbstractModuleSource%;\n}\n\nconst mod: Module; // could come from expression, instance import, or constructor\n\nawait import(mod); // these modules are importable\nnew Worker(mod); // or usable as the entrypoint to a Worker\nself.postMessage(mod); // and structuredClonable (transferrable) to other contexts\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$mnWfgNI0137LilzL9U5VWWp7roQDAROw68HuFmnWJNs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1690965342447,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$DiZjkNhDCJf8cs8gWI493tG2dzqSqPYHChL4dMht4HY"}
]