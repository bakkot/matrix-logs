[
{"content":{"body":"oh, right","msgtype":"m.text","org.matrix.msc1767.text":"oh, right"},"ts":1655856003931,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cHYuXZDNvQDZtWacRaMHehaCkrTn3OYL2fGYNdjJ_fA"},
{"content":{"body":"wait I thougt it did have a static module record?","msgtype":"m.text","org.matrix.msc1767.text":"wait I thougt it did have a static module record?"},"ts":1655856019699,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$D4ywe6u499i6O31_tJrAD5NNta3S6-4ngAtf79VNluc"},
{"content":{"body":" * wait I thought it did have a static module record?","m.new_content":{"body":"wait I thought it did have a static module record?","msgtype":"m.text","org.matrix.msc1767.text":"wait I thought it did have a static module record?"},"m.relates_to":{"event_id":"$D4ywe6u499i6O31_tJrAD5NNta3S6-4ngAtf79VNluc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * wait I thought it did have a static module record?"},"ts":1655856049273,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TI03rbIPT6WoO4OGiPFWRmjIfNDdQkMixw51uJihAzc"},
{"content":{"body":"The mini-maps are interesting because they contain subgraphs, some of which are potentially cyclic.","msgtype":"m.text","org.matrix.msc1767.text":"The mini-maps are interesting because they contain subgraphs, some of which are potentially cyclic."},"ts":1655856050584,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RbvD85oz6j_S-oHcHUoBKQUa7Pt95WJwEACOMDxdWBs"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1655856062089,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BNKBi_nJpc4zo2HdG_B07CTgkBA44c5SJWyvIKQkl88"},
{"content":{"body":"Thankfully you can arrive at a deterministic ordering of the subgraphs by sampling in order of appearance in the source.","msgtype":"m.text","org.matrix.msc1767.text":"Thankfully you can arrive at a deterministic ordering of the subgraphs by sampling in order of appearance in the source."},"ts":1655856090658,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XM4Lt2Ki46-dSulJzvv1jxwexJVBvAnZBACuWDKluww"},
{"content":{"body":"well, presumably we'd do this ordering with the same algorithm we use for normal cyclic graphs (depending on where you start with in the cycle)","msgtype":"m.text","org.matrix.msc1767.text":"well, presumably we'd do this ordering with the same algorithm we use for normal cyclic graphs (depending on where you start with in the cycle)"},"ts":1655856122113,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xuKNxVAy5xS9V9KnrFiWKUcvk14-RulRVTnRydvNs98"},
{"content":{"body":"Yeah, maybe. There might be optimizations that are possible only if the entrypoint doesn’t figure. But that doesn’t surface to JavaScript regardless.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, maybe. There might be optimizations that are possible only if the entrypoint doesn’t figure. But that doesn’t surface to JavaScript regardless."},"ts":1655856202202,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zxiHuPSP85enSC3e8HLPkS_oeXvIDcT2G0gniQqMy-k"},
{"content":{"body":"well, it's readily observable, unfortunately","msgtype":"m.text","org.matrix.msc1767.text":"well, it's readily observable, unfortunately"},"ts":1655856226923,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$g2WpoyhLRVY40iV2Y0dvkbE2BtiTP4s0hBYrP725H1k"},
{"content":{"body":"As for StaticModuleRecord.","msgtype":"m.text","org.matrix.msc1767.text":"As for StaticModuleRecord."},"ts":1655856235435,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tXjIt4YbV08TFx1CPenYIY4_vQb11FTdUStaMPR7wT4"},
{"content":{"body":" * As for StaticModuleRecord…","m.new_content":{"body":"As for StaticModuleRecord…","msgtype":"m.text","org.matrix.msc1767.text":"As for StaticModuleRecord…"},"m.relates_to":{"event_id":"$tXjIt4YbV08TFx1CPenYIY4_vQb11FTdUStaMPR7wT4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * As for StaticModuleRecord…"},"ts":1655856239082,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BcSn6wPHlv4pvggTCR5uwBfddM9c6z5svPX_6idMytc"},
{"content":{"body":"StaticModuleRecords would hang off the nodes of the mini-graph, not off the ModuleBlock.","msgtype":"m.text","org.matrix.msc1767.text":"StaticModuleRecords would hang off the nodes of the mini-graph, not off the ModuleBlock."},"ts":1655856326144,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$sXCVIJNhIq6eqdyJZ520InPhQVl8x7r20QXsAUmF-BQ"},
{"content":{"body":"huh, that's a way to represent it, I guess more normalized and less cyclic of a structure than I was imagining","msgtype":"m.text","org.matrix.msc1767.text":"huh, that's a way to represent it, I guess more normalized and less cyclic of a structure than I was imagining"},"ts":1655856394409,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_JWtDI5qXxlmegu2041Lo5Z5bwDxsNPzBCFbHVRK44s"},
{"content":{"body":"sgtm","msgtype":"m.text","org.matrix.msc1767.text":"sgtm"},"ts":1655856399525,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9RelvcdlNg1LutVOXjIlBeJnUhjs2S5T6qO7gmxuyq0"},
{"content":{"body":"They don’t correspond to a document per se. Not something you could fetch.","msgtype":"m.text","org.matrix.msc1767.text":"They don’t correspond to a document per se. Not something you could fetch."},"ts":1655856443006,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$60r8437mayDoj3loGL6vgYSsXayQKB61Mn2aP5Mbrzs"},
{"content":{"body":"Except perhaps in a compiled form.","msgtype":"m.text","org.matrix.msc1767.text":"Except perhaps in a compiled form."},"ts":1655856457583,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9y5Yy0K4m80qKQQdMERMnxvuLYHntpn3cXkszZhdZGY"},
{"content":{"body":"One of the interesting things about lexical linkage is that the compiler can erase the names.","msgtype":"m.text","org.matrix.msc1767.text":"One of the interesting things about lexical linkage is that the compiler can erase the names."},"ts":1655856491145,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ITieQejlp8s--lQCcZSAd8VtSGKq0ywBbSrvvcywS54"},
{"content":{"body":"BTW note that the mini-graph is actually something like a singly linked list of maps, following a scope chain, as you could have (and this is stupid code but still possible),\n```\nmodule foo { }\nmodule bar { }\nif (true) {\n  module foo { }\n  module baz { }\n  module bing { import foo; import bar; }\n}","format":"org.matrix.custom.html","formatted_body":"<p>BTW note that the mini-graph is actually something like a singly linked list of maps, following a scope chain, as you could have (and this is stupid code but still possible),</p>\n<pre><code>module foo { }\nmodule bar { }\nif (true) {\n  module foo { }\n  module baz { }\n  module bing { import foo; import bar; }\n}\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"BTW note that the mini-graph is actually something like a singly linked list of maps, following a scope chain, as you could have (and this is stupid code but still possible),\n```\nmodule foo { }\nmodule bar { }\nif (true) {\n  module foo { }\n  module baz { }\n  module bing { import foo; import bar; }\n}","mimetype":"text/plain"},{"body":"<p>BTW note that the mini-graph is actually something like a singly linked list of maps, following a scope chain, as you could have (and this is stupid code but still possible),</p>\n<pre><code>module foo { }\nmodule bar { }\nif (true) {\n  module foo { }\n  module baz { }\n  module bing { import foo; import bar; }\n}\n</code></pre>\n","mimetype":"text/html"}]},"ts":1655856563564,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DM9CXNP3zx0gJ6ZBddoKNvFs0_f719ct0-wGK-N3TAI"},
{"content":{"body":"also line 6 could've been `eval(\"module bing { import foo; import bar; }\")` -- this scope chain needs to be reified at runtime if there's a direct eval","format":"org.matrix.custom.html","formatted_body":"also line 6 could've been <code>eval(&quot;module bing { import foo; import bar; }&quot;)</code> -- this scope chain needs to be reified at runtime if there's a direct eval","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also line 6 could've been `eval(\"module bing { import foo; import bar; }\")` -- this scope chain needs to be reified at runtime if there's a direct eval","mimetype":"text/plain"},{"body":"also line 6 could've been <code>eval(&quot;module bing { import foo; import bar; }&quot;)</code> -- this scope chain needs to be reified at runtime if there's a direct eval","mimetype":"text/html"}]},"ts":1655856609433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qHIQ-ldw4v1UZQtPsc_HZAH7Fzd9qzHFkl5uHLywZz8"},
{"content":{"body":"(I feel pretty strongly that you should be able to use module blocks/fragments in sloppy mode code)","msgtype":"m.text","org.matrix.msc1767.text":"(I feel pretty strongly that you should be able to use module blocks/fragments in sloppy mode code)"},"ts":1655856694832,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KA2pC3sY6Fk68lLv3St84DW607FIpDVDofjg1zaZb40"},
{"content":{"body":"Are we in agreement that every time import(ModuleBlock), it’s getting fresh instances of the nodes of its minigraph?","msgtype":"m.text","org.matrix.msc1767.text":"Are we in agreement that every time import(ModuleBlock), it’s getting fresh instances of the nodes of its minigraph?"},"ts":1655856697387,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$voepcL9N_cPUe3no4Vz-RNnVKsH56glgr378PzhmJFo"},
{"content":{"body":"hmm, I imagined otherwise, that the gensym would be cached","msgtype":"m.text","org.matrix.msc1767.text":"hmm, I imagined otherwise, that the gensym would be cached"},"ts":1655856723591,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NZfmjLgSmU1K2iDEJePnN2JI9cjXChLziP91wF2gj3M"},
{"content":{"body":"and the duplication would only happen across postMessage","msgtype":"m.text","org.matrix.msc1767.text":"and the duplication would only happen across postMessage"},"ts":1655856738207,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$j8Pft_f3ZIp8zBlsmv8wL4cKGLbPG7p-i4rmJxhAebI"},
{"content":{"body":"So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)","msgtype":"m.text","org.matrix.msc1767.text":"So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)"},"ts":1655856776358,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aU3kmN5U_rmYLfVLAarwPbcHEC56v4qKj7OWr18M3WE"},
{"content":{"body":"Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)","msgtype":"m.text","org.matrix.msc1767.text":"Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)"},"ts":1655856810663,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$x2epucbtAW1r1Oer_4jUcOkA9GySq9HI2tPA8w12-Ww"},
{"content":{"body":"> <@kriskowal:matrix.org> So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)\n\nthese both go to the host's module map","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$aU3kmN5U_rmYLfVLAarwPbcHEC56v4qKj7OWr18M3WE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)</blockquote></mx-reply>these both go to the host's module map","m.relates_to":{"m.in_reply_to":{"event_id":"$aU3kmN5U_rmYLfVLAarwPbcHEC56v4qKj7OWr18M3WE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)\n\nthese both go to the host's module map","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$aU3kmN5U_rmYLfVLAarwPbcHEC56v4qKj7OWr18M3WE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So import(ModuleBlock) would behave differently than e.g., shadowRealm.importValue(ModuleBlock)</blockquote></mx-reply>these both go to the host's module map","mimetype":"text/html"}]},"ts":1655856832899,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PhCwChpYXeXYZnMzRYBQO2uj7L8Cn7CjcKeM_vM1OCY"},
{"content":{"body":"I mean, for the \"fetch\" part","msgtype":"m.text","org.matrix.msc1767.text":"I mean, for the \"fetch\" part"},"ts":1655856846634,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AUE3zC3jbiqHYY00OYGkGVCG6eUJdoGby5-Vxi138fI"},
{"content":{"body":"Yeh, those both being local.","msgtype":"m.text","org.matrix.msc1767.text":"Yeh, those both being local."},"ts":1655856849343,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$P0ZzbcNH-n_1JF7Xx9wHR0cHqhj2lONrAgboV6hf3mU"},
{"content":{"body":"> <@kriskowal:matrix.org> Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)\n\nI don't really know what these statements mean","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$x2epucbtAW1r1Oer_4jUcOkA9GySq9HI2tPA8w12-Ww?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)</blockquote></mx-reply>I don't really know what these statements mean","m.relates_to":{"m.in_reply_to":{"event_id":"$x2epucbtAW1r1Oer_4jUcOkA9GySq9HI2tPA8w12-Ww"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)\n\nI don't really know what these statements mean","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$x2epucbtAW1r1Oer_4jUcOkA9GySq9HI2tPA8w12-Ww?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Versus, compartment.import(ModuleBlock), maybeAgentSomeday.import(ModuleBlock)</blockquote></mx-reply>I don't really know what these statements mean","mimetype":"text/html"}]},"ts":1655856864116,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IKZfXcFrVE1T2b3v9oL5hvxpv_cla6kx1zwfsST5Sd8"},
{"content":{"body":"I suppose it’s here nor there for me.","msgtype":"m.text","org.matrix.msc1767.text":"I suppose it’s here nor there for me."},"ts":1655856882374,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DHt5f-oF7e7M3OuyOKo8RpTP2mQ94lteah-IZP_kEKM"},
{"content":{"body":"Just that if a module block has to be serialized and deserialized, you necessarily get a fresh batch of gensyms, so the invariants are different.","msgtype":"m.text","org.matrix.msc1767.text":"Just that if a module block has to be serialized and deserialized, you necessarily get a fresh batch of gensyms, so the invariants are different."},"ts":1655856913848,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zpLfr2hB-ll8Y_HNOmkMyzzY7VU9y0L8U2ilwF7gTwQ"},
{"content":{"body":"oh yes I agree with that","msgtype":"m.text","org.matrix.msc1767.text":"oh yes I agree with that"},"ts":1655856939102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SrmPJpYnXuHMMyyeB-JeSnsCDvNiFDtWoBrHJ_5pxqE"},
{"content":{"body":"I mean at least this is what I was picturing","msgtype":"m.text","org.matrix.msc1767.text":"I mean at least this is what I was picturing"},"ts":1655856958310,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r7gXbWXU2UqCi4wLOniz3LMGzfHjLdt4jinsF0zhd9o"},
{"content":{"body":"I don’t like there being difference but it concede it’s a value judgement.","msgtype":"m.text","org.matrix.msc1767.text":"I don’t like there being difference but it concede it’s a value judgement."},"ts":1655856978264,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wOfSvCcWzPWSg7Si6YPCde34QpHI2yp7V6xjt2MySSw"},
{"content":{"body":"And I think we agree it’s an orthogonal concern to compartments.","msgtype":"m.text","org.matrix.msc1767.text":"And I think we agree it’s an orthogonal concern to compartments."},"ts":1655857003735,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QqsNDpV-EX_JfQvHMu_uIHjrUf0CBtI12LLYWfNJhs4"},
{"content":{"body":"That is, I’m convinced that module blocks and fragments proposals are orthogonal to compartments.","msgtype":"m.text","org.matrix.msc1767.text":"That is, I’m convinced that module blocks and fragments proposals are orthogonal to compartments."},"ts":1655857053809,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ukBgO-nK9zmCLL7A35KkDJHTXPc8oWvMXPkh3lIVVSE"},
{"content":{"body":"And that I’ll want to carve a hole for `static module {}` which would be different.","format":"org.matrix.custom.html","formatted_body":"And that I’ll want to carve a hole for <code>static module {}</code> which would be different.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And that I’ll want to carve a hole for `static module {}` which would be different.","mimetype":"text/plain"},{"body":"And that I’ll want to carve a hole for <code>static module {}</code> which would be different.","mimetype":"text/html"}]},"ts":1655857077294,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oiJsZm38ZzFrhEa1JxzXYhpZMLaOcboG8pSqDuqK05w"},
{"content":{"body":"yeah, or put differently, I think we have ideas about how this should go that works out orthogonally","msgtype":"m.text","org.matrix.msc1767.text":"yeah, or put differently, I think we have ideas about how this should go that works out orthogonally"},"ts":1655857083022,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fK506au4OsikjROldOhCtUrkzdZ_XY_wljHLvVU0ZFA"},
{"content":{"body":"Yes.","msgtype":"m.text","org.matrix.msc1767.text":"Yes."},"ts":1655857095736,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ikHFiYI68jrhywHIGswuOpzGYm3Uju_mjZUks5fTNyQ"},
{"content":{"body":"I'd suggest that, as a hack, you could just make a method on a module block which \"projects out\" the static module record","msgtype":"m.text","org.matrix.msc1767.text":"I'd suggest that, as a hack, you could just make a method on a module block which \"projects out\" the static module record"},"ts":1655857105591,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3oRSPb7wfkVsoD7wqNTnBpDbSj_4UzHDG9jBmxRBvrc"},
{"content":{"body":"There are certainly ways that would cross the streams :-)","msgtype":"m.text","org.matrix.msc1767.text":"There are certainly ways that would cross the streams :-)"},"ts":1655857108154,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$jgElvePeAI-r2b29w7-oVPqvbiwi4Y5wXDXZMkY1NR0"},
{"content":{"body":"That’s a good idea.","msgtype":"m.text","org.matrix.msc1767.text":"That’s a good idea."},"ts":1655857163313,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DRzChiwb2aXbsW9GMT2zETJnH7v0-T0X11b0TXZxfCY"},
{"content":{"body":"(and I guess it's an error if that leaves you with a free reference to another module fragment)","msgtype":"m.text","org.matrix.msc1767.text":"(and I guess it's an error if that leaves you with a free reference to another module fragment)"},"ts":1655857170684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-QN_Ml8QVdhgdHmxSaJp0iKyhSPskLXwLv433G6eUjU"},
{"content":{"body":"The StaticModuleRecord is opaque and doesn’t close over source, so the fact that the source is a compiled artifact of some kind is moot. That just raises questions about how it would be represented on the wire if it were transported.","msgtype":"m.text","org.matrix.msc1767.text":"The StaticModuleRecord is opaque and doesn’t close over source, so the fact that the source is a compiled artifact of some kind is moot. That just raises questions about how it would be represented on the wire if it were transported."},"ts":1655857222048,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7_JPHRKd0N3ozO9xSeeHaEkLxY1-YWBDBA0aOVTI4CY"},
{"content":{"body":"wouldn't source code typically work OK?","msgtype":"m.text","org.matrix.msc1767.text":"wouldn't source code typically work OK?"},"ts":1655857258252,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YP7EB65UE12aHZSXIylOJE_JnSmsc9Hho07Kw4IVlro"},
{"content":{"body":"I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock.","msgtype":"m.text","org.matrix.msc1767.text":"I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock."},"ts":1655857268157,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_WtiE1dzhHmLKdmGqtfEeYAM7CW9lbU0HabJPSLXYjg"},
{"content":{"body":"It wouldn’t be source code, but object code (reconstructed source code).","msgtype":"m.text","org.matrix.msc1767.text":"It wouldn’t be source code, but object code (reconstructed source code)."},"ts":1655857311769,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$K2ISYf-OdeuLFf88gMLr6JTE2MsG7Ec83nUSqSbNFVQ"},
{"content":{"body":"> <@kriskowal:matrix.org> I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock.\n\nhmm, I don't see why, here's an example:\n\n```\nmodule foo { }\n(module { import foo; }).project()","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_WtiE1dzhHmLKdmGqtfEeYAM7CW9lbU0HabJPSLXYjg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock.</blockquote></mx-reply><p>hmm, I don't see why, here's an example:</p>\n<pre><code>module foo { }\n(module { import foo; }).project()\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$_WtiE1dzhHmLKdmGqtfEeYAM7CW9lbU0HabJPSLXYjg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock.\n\nhmm, I don't see why, here's an example:\n\n```\nmodule foo { }\n(module { import foo; }).project()","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_WtiE1dzhHmLKdmGqtfEeYAM7CW9lbU0HabJPSLXYjg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I don’t think we have to worry about getting that far. I presume you’d get a ReferenceError before you had a handle on the ModuleBlock.</blockquote></mx-reply><p>hmm, I don't see why, here's an example:</p>\n<pre><code>module foo { }\n(module { import foo; }).project()\n</code></pre>\n","mimetype":"text/html"}]},"ts":1655857312619,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-mFRd92HUxBRDUqj8pIjmboOLp_DJYHmvK3LC1lizXc"},
{"content":{"body":"the .project() method has to be responsible for throwing the error","msgtype":"m.text","org.matrix.msc1767.text":"the .project() method has to be responsible for throwing the error"},"ts":1655857324139,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h5VivIpGROVx_K6Gf8aAco8jLNpCJFpsb0GtXmvuMBo"},
{"content":{"body":"Let’s just say that’s spelled `get record()`","format":"org.matrix.custom.html","formatted_body":"Let’s just say that’s spelled <code>get record()</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Let’s just say that’s spelled `get record()`","mimetype":"text/plain"},{"body":"Let’s just say that’s spelled <code>get record()</code>","mimetype":"text/html"}]},"ts":1655857326441,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0ZpzuBuiqNlgImi7eTzPx-trtflhLilVuHUbz_sCyjA"},
{"content":{"body":"I don’t see the error in the example.","msgtype":"m.text","org.matrix.msc1767.text":"I don’t see the error in the example."},"ts":1655857381557,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$q1JHjrvwkoh2s11t2ZXceD9Z5jKDn0Ygp1lNoWwqVyA"},
{"content":{"body":"`import foo` is satisfied, no?","format":"org.matrix.custom.html","formatted_body":"<code>import foo</code> is satisfied, no?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`import foo` is satisfied, no?","mimetype":"text/plain"},{"body":"<code>import foo</code> is satisfied, no?","mimetype":"text/html"}]},"ts":1655857395216,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Br4jA-eKiUcsM4PuPqIS9YAfm-fXUTuYA2BSoulZTBg"},
{"content":{"body":"well, would the static module record already have a mini-map?","msgtype":"m.text","org.matrix.msc1767.text":"well, would the static module record already have a mini-map?"},"ts":1655857428341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1xlnS6hoQK-9jE8gv5cIJLU1xbt68x9U0XMm9IlUcnc"},
{"content":{"body":"I thought you were saying it shouldn't","msgtype":"m.text","org.matrix.msc1767.text":"I thought you were saying it shouldn't"},"ts":1655857433460,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6h6BUNcPW_d_iHQ38Lmuea8MhMW2BLtATS7-mK3hLk4"},
{"content":{"body":"I guess it probably should","msgtype":"m.text","org.matrix.msc1767.text":"I guess it probably should"},"ts":1655857462772,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7_TeSVf0gWwbpb3Ncd9dbR-YnrZLcHWQc5aXMfO5-n8"},
{"content":{"body":"I think the mini-map is a product of compilation.","msgtype":"m.text","org.matrix.msc1767.text":"I think the mini-map is a product of compilation."},"ts":1655857466165,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$g1VuCgtnGklfjAr-6A0y6ylRAndghS865rlDuiqgiXg"},
{"content":{"body":"And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), the a module block can throw a ReferenceError if it contains an unmet lexical import.","msgtype":"m.text","org.matrix.msc1767.text":"And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), the a module block can throw a ReferenceError if it contains an unmet lexical import."},"ts":1655857565297,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$55odFnvOyxLtTZbYvnu6dXlpk9N1mmxaAX5JVg3zPgc"},
{"content":{"body":" * And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), then a module block can throw a ReferenceError if it contains an unmet lexical import.","m.new_content":{"body":"And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), then a module block can throw a ReferenceError if it contains an unmet lexical import.","msgtype":"m.text","org.matrix.msc1767.text":"And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), then a module block can throw a ReferenceError if it contains an unmet lexical import."},"m.relates_to":{"event_id":"$55odFnvOyxLtTZbYvnu6dXlpk9N1mmxaAX5JVg3zPgc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * And, provided we distinguish lexical imports from stringly named imports (which I take to be necessary for the proposal to work, much less entangle itself with compartment concerns), then a module block can throw a ReferenceError if it contains an unmet lexical import."},"ts":1655857578906,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rkhx7e0QD_YFFEmFSeeq-qjm4Nc0dxU9QpOXLcL36Po"},
{"content":{"body":"hmm, I thought we'd make the lexical errors be early","msgtype":"m.text","org.matrix.msc1767.text":"hmm, I thought we'd make the lexical errors be early"},"ts":1655857600275,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wDJzI7SknRNup-T7jyaMBB1D2LQXIWQH3dxcxvdJuGY"},
{"content":{"body":"I think we’re agreeing.","msgtype":"m.text","org.matrix.msc1767.text":"I think we’re agreeing."},"ts":1655857614735,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9UBCXIjl3BthYnnulfPyYvPf0t0bplJvQ5nMuBChgck"},
{"content":{"body":"Oh, you mean even earlier. Yes, that’s possible and good.","msgtype":"m.text","org.matrix.msc1767.text":"Oh, you mean even earlier. Yes, that’s possible and good."},"ts":1655857660693,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$excT1-1YpFX48f-4aYFB2nbcHr75Lty9-XYoIrN1rfY"},
{"content":{"body":"Like, compiling the surrounding module would fail.","msgtype":"m.text","org.matrix.msc1767.text":"Like, compiling the surrounding module would fail."},"ts":1655857675055,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$remVr7m_P5wJsTU-5FY_PsHQP2JspepYrXs1LiyLB3M"},
{"content":{"body":"exactly","msgtype":"m.text","org.matrix.msc1767.text":"exactly"},"ts":1655857682426,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I42DvR8OGJfkQq4q8Pf0gbWe0oVWfKsAF12Hx5HqxJ8"},
{"content":{"body":"Yeah, that follows.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, that follows."},"ts":1655857704900,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$j0DRGytwG5ZhzNCtp9G7jWTi-V0UQLesQn_yRjNJqhs"},
{"content":{"body":"And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand.","msgtype":"m.text","org.matrix.msc1767.text":"And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand."},"ts":1655857737950,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OsL-JsQcO83g9GJlK557RWvD1URCMhqBY69lms0qWwU"},
{"content":{"body":"> <@kriskowal:matrix.org> And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand.\n\nHmm, I don't understand this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$OsL-JsQcO83g9GJlK557RWvD1URCMhqBY69lms0qWwU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand.</blockquote></mx-reply>Hmm, I don't understand this","m.relates_to":{"m.in_reply_to":{"event_id":"$OsL-JsQcO83g9GJlK557RWvD1URCMhqBY69lms0qWwU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand.\n\nHmm, I don't understand this","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$OsL-JsQcO83g9GJlK557RWvD1URCMhqBY69lms0qWwU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And if you succeed, the compiled module contains the skeleton of all possible module block graphs, out of which you could project a record for each on demand.</blockquote></mx-reply>Hmm, I don't understand this","mimetype":"text/html"}]},"ts":1655857776390,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WBApM8pau_e4HYcWtdw6ew7vWPq2alzNOYktKFBRlw8"},
{"content":{"body":"And the records could be reconstituted to source strings, flattening just the nodes that get mentioned.","msgtype":"m.text","org.matrix.msc1767.text":"And the records could be reconstituted to source strings, flattening just the nodes that get mentioned."},"ts":1655857777852,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ybQG-Qv_so0I4sLusIoyCwEzk6q7vDbtSfvoyydVvuk"},
{"content":{"body":"so, I'm kinda leaning towards, StaticModuleRecord *does* have the minimap","format":"org.matrix.custom.html","formatted_body":"so, I'm kinda leaning towards, StaticModuleRecord <em>does</em> have the minimap","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so, I'm kinda leaning towards, StaticModuleRecord *does* have the minimap","mimetype":"text/plain"},{"body":"so, I'm kinda leaning towards, StaticModuleRecord <em>does</em> have the minimap","mimetype":"text/html"}]},"ts":1655857784852,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZyKniyXTPhT4vsIrLTHii_TAEWwccch_4kabs4tCbDc"},
{"content":{"body":"is that too weird?","msgtype":"m.text","org.matrix.msc1767.text":"is that too weird?"},"ts":1655857793584,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ICZqsmQq6aXp_G0F880vt6rJTMyPK4JHcFz7SpkuYVA"},
{"content":{"body":"so this goes back to, a ModuleBlock is a StaticModuleRecord + a referrer base + an import.meta object + a gensym that allows it to be used as a key in a minimap","msgtype":"m.text","org.matrix.msc1767.text":"so this goes back to, a ModuleBlock is a StaticModuleRecord + a referrer base + an import.meta object + a gensym that allows it to be used as a key in a minimap"},"ts":1655857831157,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kGPZJaW06-LTTGyFlc_tId6-qyKrPphFtIruaSxbtAs"},
{"content":{"body":"and each StaticModuleRecord has a minimap which maps gensym -> ModuleBlock","msgtype":"m.text","org.matrix.msc1767.text":"and each StaticModuleRecord has a minimap which maps gensym -> ModuleBlock"},"ts":1655857866796,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$r91wmGdCPPLKpyImHx_29rOaeK0I2juaRmIwWyTE8U8"},
{"content":{"body":"this is the \"more circular, less normalized\" option I was mentioning above","msgtype":"m.text","org.matrix.msc1767.text":"this is the \"more circular, less normalized\" option I was mentioning above"},"ts":1655857877618,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7ieS1vVI2XynI-hPdEUw60k28R9y8oUikEHqtw15a00"},
{"content":{"body":"if I might jump in, that framing feels to me like a much simpler model for fragments, in that the rest of the loader pipeline can work as it does already\n\neffectively these are hard compilation-time resolution linkage. something like `[[HardResolutions]] = [SourceTextA, SourceTextB]` they can simply even be an ordered list actually","format":"org.matrix.custom.html","formatted_body":"<p>if I might jump in, that framing feels to me like a much simpler model for fragments, in that the rest of the loader pipeline can work as it does already</p>\n<p>effectively these are hard compilation-time resolution linkage. something like <code>[[HardResolutions]] = [SourceTextA, SourceTextB]</code> they can simply even be an ordered list actually</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if I might jump in, that framing feels to me like a much simpler model for fragments, in that the rest of the loader pipeline can work as it does already\n\neffectively these are hard compilation-time resolution linkage. something like `[[HardResolutions]] = [SourceTextA, SourceTextB]` they can simply even be an ordered list actually","mimetype":"text/plain"},{"body":"<p>if I might jump in, that framing feels to me like a much simpler model for fragments, in that the rest of the loader pipeline can work as it does already</p>\n<p>effectively these are hard compilation-time resolution linkage. something like <code>[[HardResolutions]] = [SourceTextA, SourceTextB]</code> they can simply even be an ordered list actually</p>\n","mimetype":"text/html"}]},"ts":1655857934249,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$1XvUYEPbBCGikJlv3yriYNC1QiHyxXZCAlG3Ng-FJI8"},
{"content":{"body":"Yeah, I agree.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I agree."},"ts":1655857966395,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bv2OKkjfRuMeOEN_4xsD2xpD4PtS3yEHaPCkrXS2bsA"},
{"content":{"body":"(guybedford (Guy Bedford): Are you saying you like the design?)","format":"org.matrix.custom.html","formatted_body":"(<a href=\"https://matrix.to/#/@guybedford-546b0059db8155e6700d5a77:gitter.im\">guybedford (Guy Bedford)</a>: Are you saying you like the design?)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(guybedford (Guy Bedford): Are you saying you like the design?)","mimetype":"text/plain"},{"body":"(<a href=\"https://matrix.to/#/@guybedford-546b0059db8155e6700d5a77:gitter.im\">guybedford (Guy Bedford)</a>: Are you saying you like the design?)","mimetype":"text/html"}]},"ts":1655857983647,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GEhaMEHWXIMEc0-LWlT3RVwNlJ3bcgL-wTWp9_40naE"},
{"content":{"body":"yes I like the approach, although would have some technical clarifications further","msgtype":"m.text","org.matrix.msc1767.text":"yes I like the approach, although would have some technical clarifications further"},"ts":1655858004067,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$cI4s66W7HVLNBWp5newq_1rX-XCgDpPWqRHb32NSoqs"},
{"content":{"body":"I think what this means is that a source text has a corresponding StaticModuleRecord, which can be partitioned into smaller StaticModuleRecords, one per module block.","msgtype":"m.text","org.matrix.msc1767.text":"I think what this means is that a source text has a corresponding StaticModuleRecord, which can be partitioned into smaller StaticModuleRecords, one per module block."},"ts":1655858039733,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ji6cpv_AA2H4hRjizLVZJ6d8Jd2vnJHOYI4nrlUyR10"},
{"content":{"body":"I'm suggesting the internal ecma-262 object that backs this simply has a list field","msgtype":"m.text","org.matrix.msc1767.text":"I'm suggesting the internal ecma-262 object that backs this simply has a list field"},"ts":1655858073864,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HL326RNMKnDi1NF0WljIJ8HJVC5HBvVJVghmZmaLIMo"},
{"content":{"body":"that points to other similar objects","msgtype":"m.text","org.matrix.msc1767.text":"that points to other similar objects"},"ts":1655858110425,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$WURFcipUTYyCZ52vTurpXvOEBprehNC1W8fVZJYfW8s"},
{"content":{"body":"oh, are you suggesting that the internal datastructure simply be circular instead of indirecting through gensyms and a map?","msgtype":"m.text","org.matrix.msc1767.text":"oh, are you suggesting that the internal datastructure simply be circular instead of indirecting through gensyms and a map?"},"ts":1655858116629,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$H6r9rbQo5Wt81bw2PNEx9Dr5rbNga64yG1XtGGjbrTg"},
{"content":{"body":"yes","msgtype":"m.text","org.matrix.msc1767.text":"yes"},"ts":1655858122335,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QqbLf8MPRgGcnuQeUKLFMtThgdJHRnrYlQhB5OHnwFQ"},
{"content":{"body":"oh that makes sense","msgtype":"m.text","org.matrix.msc1767.text":"oh that makes sense"},"ts":1655858132895,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NYcSKN5woJCGqda_qVvzcqvN0Iw36_1cUpgnHy98sh8"},
{"content":{"body":"I agree that that would be valid","msgtype":"m.text","org.matrix.msc1767.text":"I agree that that would be valid"},"ts":1655858156212,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cUJKt4zgy_0qR4lcibPEdz2tBpepmx3HcATfzOzOOpM"},
{"content":{"body":"I think implementations would still need to maintain some maps around in case of eval, though, unfortunately","msgtype":"m.text","org.matrix.msc1767.text":"I think implementations would still need to maintain some maps around in case of eval, though, unfortunately"},"ts":1655858192195,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OLF2ggxg2nGpFh6d9T8dz7K06j85OneSrr254_2nmoA"},
{"content":{"body":" * I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately","m.new_content":{"body":"I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately","msgtype":"m.text","org.matrix.msc1767.text":"I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately"},"m.relates_to":{"event_id":"$OLF2ggxg2nGpFh6d9T8dz7K06j85OneSrr254_2nmoA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately"},"ts":1655858200211,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aJaVHk94D6CryO_XIIdnMXELha0ANqlYuU5oM-CKw5c"},
{"content":{"body":"but yes, the fact that this representation is possible makes the design feel clean","msgtype":"m.text","org.matrix.msc1767.text":"but yes, the fact that this representation is possible makes the design feel clean"},"ts":1655858218784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zHn1eaqb89PhOzWNYDdmYT_XYU_W3aX4qymsBufs6rw"},
{"content":{"body":"> <@littledan:matrix.org> I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately\n\nwould be interested to dig in further at some point, but won't sidetrack further!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$OLF2ggxg2nGpFh6d9T8dz7K06j85OneSrr254_2nmoA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately</blockquote></mx-reply>would be interested to dig in further at some point, but won't sidetrack further!","m.relates_to":{"m.in_reply_to":{"event_id":"$OLF2ggxg2nGpFh6d9T8dz7K06j85OneSrr254_2nmoA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately\n\nwould be interested to dig in further at some point, but won't sidetrack further!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$OLF2ggxg2nGpFh6d9T8dz7K06j85OneSrr254_2nmoA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think full implementations would still need to maintain some maps around in case of eval, though, unfortunately</blockquote></mx-reply>would be interested to dig in further at some point, but won't sidetrack further!","mimetype":"text/html"}]},"ts":1655858238304,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$M8R4SDczOCFO6UlLMEV8uENeAU52ZLUTnWLqbI8mKNE"},
{"content":{"body":"Kris Kowal: guybedford , you two have been very helpful here; thank you so much for this discussion","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> , you two have been very helpful here; thank you so much for this discussion","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: guybedford , you two have been very helpful here; thank you so much for this discussion","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> , you two have been very helpful here; thank you so much for this discussion","mimetype":"text/html"}]},"ts":1655858269209,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8nyrDaoHFJre9r-jeZwacg_bzfDJjSxjP0WlYjinbSU"},
{"content":{"body":"I really didn't know where to go next with module blocks/fragments, but this made it very clear","msgtype":"m.text","org.matrix.msc1767.text":"I really didn't know where to go next with module blocks/fragments, but this made it very clear"},"ts":1655858285235,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P05DaXjtRt10sb-9c2T3bAKltTPxw-OF_cTiYdsYfQA"},
{"content":{"body":"Agreed and thanks for helping me understand the differences.","msgtype":"m.text","org.matrix.msc1767.text":"Agreed and thanks for helping me understand the differences."},"ts":1655858332157,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SWOwipjrlf2t9sFy34qo_Dihoras8UjGDn4t1bjZNNA"},
{"content":{"body":"with module blocks and fragments so thoroughly unified (I initially suggested the two names so that they wouldn't be conflated, back when the concepts were a bit different), do you think we should use a different name? Like, \"inner modules\", where there are both named inner modules/inner module declarations and anonymous inner modules?","msgtype":"m.text","org.matrix.msc1767.text":"with module blocks and fragments so thoroughly unified (I initially suggested the two names so that they wouldn't be conflated, back when the concepts were a bit different), do you think we should use a different name? Like, \"inner modules\", where there are both named inner modules/inner module declarations and anonymous inner modules?"},"ts":1655858359862,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nXlyN53wTfO90-izTUNUHDj-paKWvOqoyHJwv-t5Krc"},
{"content":{"body":"also presumably a module block expression should be able to provide a name for purely local use, as functions and classes do","msgtype":"m.text","org.matrix.msc1767.text":"also presumably a module block expression should be able to provide a name for purely local use, as functions and classes do"},"ts":1655858388750,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bwaI1Wn1cQpF_z3Juo3dA01LrP_TZnu-kq4ubOvIjq8"},
{"content":{"body":"I’m still pondering implications myself.","msgtype":"m.text","org.matrix.msc1767.text":"I’m still pondering implications myself."},"ts":1655858442972,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aJoWFGYmRId21JfzSCOmE9CzuGyTt-6sO_j1UIXHkFU"},
{"content":{"body":"I think static module block might evaporate given `(module {}).record` being a thing.","format":"org.matrix.custom.html","formatted_body":"I think static module block might evaporate given <code>(module {}).record</code> being a thing.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think static module block might evaporate given `(module {}).record` being a thing.","mimetype":"text/plain"},{"body":"I think static module block might evaporate given <code>(module {}).record</code> being a thing.","mimetype":"text/html"}]},"ts":1655858487592,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8IVrMMk0r0Rx-nEVkr7ynrYVEN2Nb8vQBnFyQb073dM"},
{"content":{"body":"Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?","msgtype":"m.text","org.matrix.msc1767.text":"Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?"},"ts":1655858499205,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$0vSK8Z7QTM0EnIRLYh4viPBs5ntjSZmLNAKZnbg6P38"},
{"content":{"body":"Especially given that would project the relevant subgraph.","msgtype":"m.text","org.matrix.msc1767.text":"Especially given that would project the relevant subgraph."},"ts":1655858505389,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5N7o4Q1R1Dweh3ak5kNa59UuXwYuoKxT_thFcb-b5QU"},
{"content":{"body":"> <@guybedford:matrix.org> Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?\n\nI think the first step would be to developing the module fragments spec text, and then a strict subset which is just the anonymous cases (for module blocks) can be sorted out","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$0vSK8Z7QTM0EnIRLYh4viPBs5ntjSZmLNAKZnbg6P38?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?</blockquote></mx-reply>I think the first step would be to developing the module fragments spec text, and then a strict subset which is just the anonymous cases (for module blocks) can be sorted out","m.relates_to":{"m.in_reply_to":{"event_id":"$0vSK8Z7QTM0EnIRLYh4viPBs5ntjSZmLNAKZnbg6P38"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@guybedford:matrix.org> Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?\n\nI think the first step would be to developing the module fragments spec text, and then a strict subset which is just the anonymous cases (for module blocks) can be sorted out","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$0vSK8Z7QTM0EnIRLYh4viPBs5ntjSZmLNAKZnbg6P38?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>Definitely +1 to unifying naming and structures, and extending optional naming to module blocks, although hopefully specifications can stay separate?</blockquote></mx-reply>I think the first step would be to developing the module fragments spec text, and then a strict subset which is just the anonymous cases (for module blocks) can be sorted out","mimetype":"text/html"}]},"ts":1655858569576,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L6e8Ye-g7BCz2UQH9loMQ_XRBg6Tw4frHdcWfeK3cYw"},
{"content":{"body":"I value the holistic view of blocks being a degenerate case of fragments and don’t particularly care about the layering. If it helps deliver incrementally, I’d say whatever works.","msgtype":"m.text","org.matrix.msc1767.text":"I value the holistic view of blocks being a degenerate case of fragments and don’t particularly care about the layering. If it helps deliver incrementally, I’d say whatever works."},"ts":1655858592913,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$irO0lUfHw5u4Ou9lVrvv502z62xaW-dsLHradN1ZSdY"},
{"content":{"body":"they didn't used to be degenerate! they used to be based on the same concept of inserting in a certain class of specifiers into the module map!","msgtype":"m.text","org.matrix.msc1767.text":"they didn't used to be degenerate! they used to be based on the same concept of inserting in a certain class of specifiers into the module map!"},"ts":1655858622529,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DBfg3lACNMz2y63GdKVhs5GF4LV3luxU-8lDkkXAyXk"},
{"content":{"body":"but yes that's what they are now, degenerates :(","msgtype":"m.text","org.matrix.msc1767.text":"but yes that's what they are now, degenerates :("},"ts":1655858633096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a1ulo1WfL_rRgTlEeHgy8Erx1VBddsgzuh9C0KgRArs"},
{"content":{"body":"This is why mathematicians can’t have friends.","msgtype":"m.text","org.matrix.msc1767.text":"This is why mathematicians can’t have friends."},"ts":1655858646605,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TIrloV2XHYq3U7eCHVGxacNlMDJArSjztDpnTsugibo"},
{"content":{"body":"To be clear, this is also why systems programmers can’t be allowed near children.","msgtype":"m.text","org.matrix.msc1767.text":"To be clear, this is also why systems programmers can’t be allowed near children."},"ts":1655858693975,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oilmqpXEoo0s2Py9R7FnuiY7Okf5j18QD7l5jUSyrso"},
{"content":{"body":"But perhaps that’s hyperbole.","msgtype":"m.text","org.matrix.msc1767.text":"But perhaps that’s hyperbole."},"ts":1655858768497,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Mj5X31B3RKmJkclfETZO6FLdXIA8TAycDv1rWUh3PTA"},
{"content":{"body":"have a good evening everyone","msgtype":"m.text","org.matrix.msc1767.text":"have a good evening everyone"},"ts":1655858838639,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5EjcRLzdHz2Pkqwulce6IKQdHituJTG5Slr6pmP5Bn8"},
{"content":{"body":"For those who arrive here and find a vast scroll backlog, littledan had a long conversation where we concluded that module blocks and module fragments could be framed in a way that makes them orthogonal to compartments, such that the order in which the proposals land isn’t coupled.\n\nWe concluded that importing a module block or fragment would not involve the loader hooks and would not introduce any module specifiers to the module graph.\n\nThis presumes that module blocks are a special case of module fragments and that fragments are named lexically. So, `import x` rather than `import 'x'`. The latter is the purview of the loader hooks. The former is the purview of a lexical binding to `module x {}`. Module blocks have a corresponding static module record, which itself consists of its own module block and its transitive lexically imported module blocks, but also capture the module referrer specifier and import meta.\n\nThere remain some free variables in the idea, but that I believe summarizes the consensus we arrived at.","format":"org.matrix.custom.html","formatted_body":"<p>For those who arrive here and find a vast scroll backlog, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had a long conversation where we concluded that module blocks and module fragments could be framed in a way that makes them orthogonal to compartments, such that the order in which the proposals land isn’t coupled.</p>\n<p>We concluded that importing a module block or fragment would not involve the loader hooks and would not introduce any module specifiers to the module graph.</p>\n<p>This presumes that module blocks are a special case of module fragments and that fragments are named lexically. So, <code>import x</code> rather than <code>import 'x'</code>. The latter is the purview of the loader hooks. The former is the purview of a lexical binding to <code>module x {}</code>. Module blocks have a corresponding static module record, which itself consists of its own module block and its transitive lexically imported module blocks, but also capture the module referrer specifier and import meta.</p>\n<p>There remain some free variables in the idea, but that I believe summarizes the consensus we arrived at.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For those who arrive here and find a vast scroll backlog, littledan had a long conversation where we concluded that module blocks and module fragments could be framed in a way that makes them orthogonal to compartments, such that the order in which the proposals land isn’t coupled.\n\nWe concluded that importing a module block or fragment would not involve the loader hooks and would not introduce any module specifiers to the module graph.\n\nThis presumes that module blocks are a special case of module fragments and that fragments are named lexically. So, `import x` rather than `import 'x'`. The latter is the purview of the loader hooks. The former is the purview of a lexical binding to `module x {}`. Module blocks have a corresponding static module record, which itself consists of its own module block and its transitive lexically imported module blocks, but also capture the module referrer specifier and import meta.\n\nThere remain some free variables in the idea, but that I believe summarizes the consensus we arrived at.","mimetype":"text/plain"},{"body":"<p>For those who arrive here and find a vast scroll backlog, <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> had a long conversation where we concluded that module blocks and module fragments could be framed in a way that makes them orthogonal to compartments, such that the order in which the proposals land isn’t coupled.</p>\n<p>We concluded that importing a module block or fragment would not involve the loader hooks and would not introduce any module specifiers to the module graph.</p>\n<p>This presumes that module blocks are a special case of module fragments and that fragments are named lexically. So, <code>import x</code> rather than <code>import 'x'</code>. The latter is the purview of the loader hooks. The former is the purview of a lexical binding to <code>module x {}</code>. Module blocks have a corresponding static module record, which itself consists of its own module block and its transitive lexically imported module blocks, but also capture the module referrer specifier and import meta.</p>\n<p>There remain some free variables in the idea, but that I believe summarizes the consensus we arrived at.</p>\n","mimetype":"text/html"}]},"ts":1655867087048,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$h3HubzpTG4LJBJa6VuuvCUr7aEWOUn88P7lJjwQ_e34"},
{"content":{"body":"Oh, and I think that the proposals are coherent. A module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)","msgtype":"m.text","org.matrix.msc1767.text":"Oh, and I think that the proposals are coherent. A module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)"},"ts":1655868716296,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$19k6YtLWd9lGjs7NbNTQZAjVkLgPerg1DjdfwgLwPyg"},
{"content":{"body":" * Oh, and I think that the proposals are coherent. Module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)","m.new_content":{"body":"Oh, and I think that the proposals are coherent. Module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)","msgtype":"m.text","org.matrix.msc1767.text":"Oh, and I think that the proposals are coherent. Module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)"},"m.relates_to":{"event_id":"$19k6YtLWd9lGjs7NbNTQZAjVkLgPerg1DjdfwgLwPyg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Oh, and I think that the proposals are coherent. Module blocks, including module fragments, would at least satisfy the shape { record, importMeta } so it could be used as a module descriptor in a Compartment loadHook. (I am assuming “record” gets renamed before the proposal’s ink dries, but whatever the names, they’d be the same.)"},"ts":1655868728648,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$vYbPh2F9NlOhBbqMMtnRsplvaHCDjY4RsKIZFRwxMUA"},
{"content":{"body":"hmm, where should we publish the call notes?","msgtype":"m.text","org.matrix.msc1767.text":"hmm, where should we publish the call notes?"},"ts":1655924041221,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$6D5sA3X6ZzR-aFWV2cdhFl00pZwHVy-ZZgu1x-RXYDs"},
{"content":{"body":"I think it’s sufficient to have a rolling agenda document attached to the calendar for discovery purposes. Could link the notes from there. The notes are detailed enough that probably to have separate meeting notes docs for each session.","msgtype":"m.text","org.matrix.msc1767.text":"I think it’s sufficient to have a rolling agenda document attached to the calendar for discovery purposes. Could link the notes from there. The notes are detailed enough that probably to have separate meeting notes docs for each session."},"ts":1655925370164,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9Fp3VdbaBZQHT9WqcqVkn8iT0H0KPOLoXZsQsu5teks"},
{"content":{"body":"Similarly, the SES meeting links recordings to the rolling agenda document.","msgtype":"m.text","org.matrix.msc1767.text":"Similarly, the SES meeting links recordings to the rolling agenda document."},"ts":1655925385032,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9JarEGwemzXcFOxTJdNmEzpp-XZ2n00ULGzl5JhZ2rk"},
{"content":{"body":"I think it ends up being more accessible if notes are published in a markdown file somewhere, as Shu has been doing in some other meetings that he runs","msgtype":"m.text","org.matrix.msc1767.text":"I think it ends up being more accessible if notes are published in a markdown file somewhere, as Shu has been doing in some other meetings that he runs"},"ts":1655925418683,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Cd8geXBi44ZrhWGdoNC0KBBzcLXG_vbqmm3NhBNUXBE"},
{"content":{"body":"we can share the permission to read the notes more widely than the permission to edit old minutes","msgtype":"m.text","org.matrix.msc1767.text":"we can share the permission to read the notes more widely than the permission to edit old minutes"},"ts":1655925442401,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mY5LN-tTZYGyU6n76M1WFHcLGAQ9KJzCNq_F4sztNxs"},
{"content":{"body":"i don't want to use just the document because it's world-editable for notetaking","msgtype":"m.text","org.matrix.msc1767.text":"i don't want to use just the document because it's world-editable for notetaking"},"ts":1655929162340,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$We5JhrauBAwePtM0gLNE_xjWmOo5i50zIUAYoxoXrEw"},
{"content":{"body":"yeah, what dan said","msgtype":"m.text","org.matrix.msc1767.text":"yeah, what dan said"},"ts":1655929179589,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$efslNxKYXArpt53IH38KlnNiUI7O6gIXWDmUJlZADmU"}
]