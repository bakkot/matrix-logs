[
{"content":{"body":"https://github.com/codehag/pattern-matching-epic\ncc Kris Kowal this repo introduce a new proposal process called Epic, it looks very like what you did in #71","format":"org.matrix.custom.html","formatted_body":"https://github.com/codehag/pattern-matching-epic<br>cc <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> this repo introduce a new proposal process called Epic, it looks very like what you did in #71","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"https://github.com/codehag/pattern-matching-epic\ncc Kris Kowal this repo introduce a new proposal process called Epic, it looks very like what you did in #71","mimetype":"text/plain"},{"body":"https://github.com/codehag/pattern-matching-epic<br>cc <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> this repo introduce a new proposal process called Epic, it looks very like what you did in #71","mimetype":"text/html"}]},"ts":1658161033063,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$X-JzFP1nJbqiqkjT1eDGPyWE1PchX52E3GptvKY5rjU"},
{"content":{"body":"Convergent evolution in the wild.","msgtype":"m.text","org.matrix.msc1767.text":"Convergent evolution in the wild."},"ts":1658163475831,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uHSOLk1ydCcj7Zdr59Sc9sO5ccENs8Jdu5vCedXgGSQ"},
{"content":{"body":"yulia: as Jack Works points out, we have jinxed each other. I have a PR open that breaks Compartments into layers https://github.com/tc39/proposal-compartments/blob/fc3e8e0a6c1af7ffb09f111d9ddd9328aed09cf0/README.md","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: as <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> points out, we have jinxed each other. I have a PR open that breaks Compartments into layers https://github.com/tc39/proposal-compartments/blob/fc3e8e0a6c1af7ffb09f111d9ddd9328aed09cf0/README.md","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yulia: as Jack Works points out, we have jinxed each other. I have a PR open that breaks Compartments into layers https://github.com/tc39/proposal-compartments/blob/fc3e8e0a6c1af7ffb09f111d9ddd9328aed09cf0/README.md","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>: as <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> points out, we have jinxed each other. I have a PR open that breaks Compartments into layers https://github.com/tc39/proposal-compartments/blob/fc3e8e0a6c1af7ffb09f111d9ddd9328aed09cf0/README.md","mimetype":"text/html"}]},"ts":1658163642953,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lPsopXm-d2wWx14YCHbYz6hsrZsYogNCxdhwEA230Q0"},
{"content":{"body":"Which is to say, I support this potential new evolution in proposal design.","msgtype":"m.text","org.matrix.msc1767.text":"Which is to say, I support this potential new evolution in proposal design."},"ts":1658163673163,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aR_oFS-b7adem68PgLAjtbg2BegZr5nusJWndI5a7vg"},
{"content":{"body":"littledan, nicolo-ribaudo Had a conversation with Mark Miller and Peter Hoddie in which I managed fall back to my earlier position that `Module` needs to take a referrer and that the arguments of `importHook` need to be `(specifier, referrer)`, but now with a compelling argument: It should not be possible for the referrer to vary between calls to the `importHook`, and that’s best guaranteed if we capture the `referrer` given to the `Module` constructor in an internal slot that the module instance feeds back to `importHook`.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>, <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> Had a conversation with Mark Miller and Peter Hoddie in which I managed fall back to my earlier position that <code>Module</code> needs to take a referrer and that the arguments of <code>importHook</code> need to be <code>(specifier, referrer)</code>, but now with a compelling argument: It should not be possible for the referrer to vary between calls to the <code>importHook</code>, and that’s best guaranteed if we capture the <code>referrer</code> given to the <code>Module</code> constructor in an internal slot that the module instance feeds back to <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan, nicolo-ribaudo Had a conversation with Mark Miller and Peter Hoddie in which I managed fall back to my earlier position that `Module` needs to take a referrer and that the arguments of `importHook` need to be `(specifier, referrer)`, but now with a compelling argument: It should not be possible for the referrer to vary between calls to the `importHook`, and that’s best guaranteed if we capture the `referrer` given to the `Module` constructor in an internal slot that the module instance feeds back to `importHook`.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>, <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> Had a conversation with Mark Miller and Peter Hoddie in which I managed fall back to my earlier position that <code>Module</code> needs to take a referrer and that the arguments of <code>importHook</code> need to be <code>(specifier, referrer)</code>, but now with a compelling argument: It should not be possible for the referrer to vary between calls to the <code>importHook</code>, and that’s best guaranteed if we capture the <code>referrer</code> given to the <code>Module</code> constructor in an internal slot that the module instance feeds back to <code>importHook</code>.","mimetype":"text/html"}]},"ts":1658184957850,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KUJ9SGiPDMQp59PydA42epkeUDB71rVjUHnuRrk1RCM"},
{"content":{"body":"I may or may not successfully edit my way to that state before I present, and obviously, my goal is to reach a consistent snapshot before plenary, not to have a final answer to the design question.","msgtype":"m.text","org.matrix.msc1767.text":"I may or may not successfully edit my way to that state before I present, and obviously, my goal is to reach a consistent snapshot before plenary, not to have a final answer to the design question."},"ts":1658185040415,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$g7r65_rOMf5imxORoHPLleyd7zuvwl9sBP0hQ3zQGgw"},
{"content":{"body":"Wait, I had a conversation with guybedford where he managed to convince me that a ModuleSource should have a referrer","msgtype":"m.text"},"ts":1658185057905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UtF7NHLnKPO36OquinaP_-NTNBiC6glLqdUiA8gPCYg"},
{"content":{"body":"This is all consistent though ","format":"org.matrix.custom.html","formatted_body":"This is all consistent though","msgtype":"m.text"},"ts":1658185072691,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YvPOsS8X4n8JFXg8t6kkewWDQTBHy8r6wI6on1fdXWs"},
{"content":{"body":"Yeah, we’re likely to have conversations like that until we either get tired or separate all three layers.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, we’re likely to have conversations like that until we either get tired or separate all three layers."},"ts":1658185104936,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YxEzC6NSK_-2teuhbpgqstvYMbIFRHeLBEcQSYFc5RU"},
{"content":{"body":"That being: {text, bindings}, {{text, bindings}, referrer}, {{{text, bindings}, referrer}, memo, meta, state, &c}","msgtype":"m.text","org.matrix.msc1767.text":"That being: {text, bindings}, {{text, bindings}, referrer}, {{{text, bindings}, referrer}, memo, meta, state, &c}"},"ts":1658185166044,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IeUPbwPhSZorZ_vNRifMib4xgtZ6LuELqASW1JU6hAU"},
{"content":{"body":"The thing is, Module (and maybe also ModuleSource) also may need to close over the import map","msgtype":"m.text"},"ts":1658185166472,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8b0U84Tyr-fRpMlT03aC1xqWAicd0bdInwyi205cbW8"},
{"content":{"body":"Ah yes Nicolo and I have been talking about where memoization happens… also confusing","msgtype":"m.text"},"ts":1658185200442,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$03eGX52tFApNIDqEdTrze4tW69XBgfcYDdXWuwmc5sM"},
{"content":{"body":"I think there are coherent stances on module blocks where `Module` instances have [[HostData]] that leads back to the host’s module map, as would be necessary to mitigate certain configuration errors, but also coherent stances where it does not.","format":"org.matrix.custom.html","formatted_body":"I think there are coherent stances on module blocks where <code>Module</code> instances have [[HostData]] that leads back to the host’s module map, as would be necessary to mitigate certain configuration errors, but also coherent stances where it does not.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think there are coherent stances on module blocks where `Module` instances have [[HostData]] that leads back to the host’s module map, as would be necessary to mitigate certain configuration errors, but also coherent stances where it does not.","mimetype":"text/plain"},{"body":"I think there are coherent stances on module blocks where <code>Module</code> instances have [[HostData]] that leads back to the host’s module map, as would be necessary to mitigate certain configuration errors, but also coherent stances where it does not.","mimetype":"text/html"}]},"ts":1658185238597,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nvhOU4a6itAazoq03QFrn_DVCJbqqw8ngu7NeVAzdI8"},
{"content":{"body":"But, `ModuleSource` should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.","format":"org.matrix.custom.html","formatted_body":"But, <code>ModuleSource</code> should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But, `ModuleSource` should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.","mimetype":"text/plain"},{"body":"But, <code>ModuleSource</code> should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.","mimetype":"text/html"}]},"ts":1658185284134,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$v6mWVPVZkZrvAZUSzJwh5NXZ_Rq0IZcXJRthcQlrgJs"},
{"content":{"body":"My intuition is that module blocks and module reflection probably give you the same thing. They both need a referrer, and module reflection needs multiple instantiation (which is optional for module blocks IMO)","msgtype":"m.text"},"ts":1658185315207,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5NHmOIT8Qlk3sOS1TUG2xm23MhuKJAULBi5xy5OFvN8"},
{"content":{"body":"Interesting.","msgtype":"m.text","org.matrix.msc1767.text":"Interesting."},"ts":1658185355463,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BgvwCvZEZ0PDtPfy6zqrPz9lcEmYhfOZjxKZGXGfkSA"},
{"content":{"body":"> <@kriskowal:matrix.org> But, `ModuleSource` should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.\n\nOK, then, we probably need a third class which is ModuleSource + referrer, which can be instantiated multiple times, and module reflection and blocks should be this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24v6mWVPVZkZrvAZUSzJwh5NXZ_Rq0IZcXJRthcQlrgJs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>But, <code>ModuleSource</code> should just close over source. I’m open to adding layers and moving state around, but it would be not good to have state with the source.</blockquote></mx-reply>OK, then, we probably need a third class which is ModuleSource + referrer, which can be instantiated multiple times, and module reflection and blocks should be this","m.relates_to":{"m.in_reply_to":{"event_id":"$v6mWVPVZkZrvAZUSzJwh5NXZ_Rq0IZcXJRthcQlrgJs"}},"msgtype":"m.text"},"ts":1658185358552,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yR7j0PdBwLjwgxu8t8N6W04daNJWDSj2f0ZCMoVS3Po"},
{"content":{"body":"`WebAssembly.Module` definitely maps to `ModuleSource`. Those do not have referrers.","format":"org.matrix.custom.html","formatted_body":"<code>WebAssembly.Module</code> definitely maps to <code>ModuleSource</code>. Those do not have referrers.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`WebAssembly.Module` definitely maps to `ModuleSource`. Those do not have referrers.","mimetype":"text/plain"},{"body":"<code>WebAssembly.Module</code> definitely maps to <code>ModuleSource</code>. Those do not have referrers.","mimetype":"text/html"}]},"ts":1658185377146,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6KKGj0WeI8DhJ474uKY8oyqicJEmSngcgU5LXcgxrwg"},
{"content":{"body":"Guy’s proposal definitely returns something with a referrer for Wasm","msgtype":"m.text"},"ts":1658185403452,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8I_4crI_NFudFpDL-iCFTcoUYIU16K6_5xMiJr2aeBw"},
{"content":{"body":"Otherwise csp doesn’t work","msgtype":"m.text"},"ts":1658185411542,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4SOKyissgDl1awD0tJveQvj5BrYgnNJRK1SBZbv5n1A"},
{"content":{"body":"But I agree there might be an intermediate, or that `Module` in its initial state can serve as the intermediate.","format":"org.matrix.custom.html","formatted_body":"But I agree there might be an intermediate, or that <code>Module</code> in its initial state can serve as the intermediate.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"But I agree there might be an intermediate, or that `Module` in its initial state can serve as the intermediate.","mimetype":"text/plain"},{"body":"But I agree there might be an intermediate, or that <code>Module</code> in its initial state can serve as the intermediate.","mimetype":"text/html"}]},"ts":1658185413696,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bi0hSM1b8BVIKAL64zs7PI56Oe4HjaFMMWVArsEribg"},
{"content":{"body":"Guy’s position is consistent with annotating module sources with origin information in their host data.","msgtype":"m.text","org.matrix.msc1767.text":"Guy’s position is consistent with annotating module sources with origin information in their host data."},"ts":1658185439190,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MWAEB9WuwMhac0H2l5IratSc6XUSiNFJwx64CMvXeu8"},
{"content":{"body":"I think we could say, WebAssembly.Module has a new internal slot, which might be empty, which is the referrer","msgtype":"m.text"},"ts":1658185450019,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ha1Sa93aaJffR1hPlr3KI8UnADcdDGZJUpYcrMWarKI"},
{"content":{"body":"And we can apply this to ModuleSource generally, or make it a separate class if needed","msgtype":"m.text"},"ts":1658185474906,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V5l9hppbOF2sdYq-DqldFJvlyvOzQZSa5D-fnToBNzk"},
{"content":{"body":"Doe’s ModuleSource have host data?","msgtype":"m.text"},"ts":1658185497569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ckKpxMRN3jOvrtKOR_07ephZYaTO5Lqs6VyGAd4XOdA"},
{"content":{"body":"I would like to think of CSP origin as orthogonal to referrer.","msgtype":"m.text","org.matrix.msc1767.text":"I would like to think of CSP origin as orthogonal to referrer."},"ts":1658185509861,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6cL5iSOCJPeiq4w8AWTMRke1OwIoSqlotE4u11NVToA"},
{"content":{"body":"My mental model at the moment is that ModuleSource has an internal slot [[Source]] for an abstract Module Source.","msgtype":"m.text","org.matrix.msc1767.text":"My mental model at the moment is that ModuleSource has an internal slot [[Source]] for an abstract Module Source."},"ts":1658185561896,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YNgUw8WIpvhsKHT-3TvrP3b92DEATcDGiSbrr0sB2xg"},
{"content":{"body":" * My mental model at the moment is that ModuleSource has an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","format":"org.matrix.custom.html","formatted_body":" * My mental model at the moment is that ModuleSource has an internal slot [[ModuleSource]] for an abstract Module Source.","m.new_content":{"body":"My mental model at the moment is that ModuleSource has an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","format":"org.matrix.custom.html","formatted_body":"My mental model at the moment is that ModuleSource has an internal slot [[ModuleSource]] for an abstract Module Source.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My mental model at the moment is that ModuleSource has an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","mimetype":"text/plain"},{"body":"My mental model at the moment is that ModuleSource has an internal slot [[ModuleSource]] for an abstract Module Source.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YNgUw8WIpvhsKHT-3TvrP3b92DEATcDGiSbrr0sB2xg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My mental model at the moment is that ModuleSource has an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","mimetype":"text/plain"},{"body":" * My mental model at the moment is that ModuleSource has an internal slot [[ModuleSource]] for an abstract Module Source.","mimetype":"text/html"}]},"ts":1658185574464,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QRQbsifnr2_3fF2zR-i0onjft3iBKRfi8eU0iLbdjHI"},
{"content":{"body":" * My mental model at the moment is that ModuleSource instances have an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","format":"org.matrix.custom.html","formatted_body":" * My mental model at the moment is that ModuleSource instances have an internal slot [[ModuleSource]] for an abstract Module Source.","m.new_content":{"body":"My mental model at the moment is that ModuleSource instances have an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","format":"org.matrix.custom.html","formatted_body":"My mental model at the moment is that ModuleSource instances have an internal slot [[ModuleSource]] for an abstract Module Source.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My mental model at the moment is that ModuleSource instances have an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","mimetype":"text/plain"},{"body":"My mental model at the moment is that ModuleSource instances have an internal slot [[ModuleSource]] for an abstract Module Source.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$YNgUw8WIpvhsKHT-3TvrP3b92DEATcDGiSbrr0sB2xg","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My mental model at the moment is that ModuleSource instances have an internal slot \\[\\[ModuleSource\\]\\] for an abstract Module Source.","mimetype":"text/plain"},{"body":" * My mental model at the moment is that ModuleSource instances have an internal slot [[ModuleSource]] for an abstract Module Source.","mimetype":"text/html"}]},"ts":1658185592280,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IbTDioqYM4ffpwGwWaflbba8N1k6k5JWPTCn0e96eeg"},
{"content":{"body":"More than a mental model, I should say, that made it into my current PR.","msgtype":"m.text","org.matrix.msc1767.text":"More than a mental model, I should say, that made it into my current PR."},"ts":1658185612023,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8DOOj1TPQywF5jlWkvrGfSRyN40mBeG6vORIME00Npw"},
{"content":{"body":"In general, I think it would be nice if import module gave you something you could do import() on. This requires a referrer. Otoh a core goal of Guy’s proposal is that import module gives you something which can be multiply instantiated ","format":"org.matrix.custom.html","formatted_body":"In general, I think it would be nice if import module gave you something you could do import() on. This requires a referrer. Otoh a core goal of Guy’s proposal is that import module gives you something which can be multiply instantiated","msgtype":"m.text"},"ts":1658185628204,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0sTpSPEMfjEIkwN1reSgdP62Wdo-MDCMukTWsJVrspo"},
{"content":{"body":"262 needs to mention referrer, but does not need to couple it to CSP.","msgtype":"m.text","org.matrix.msc1767.text":"262 needs to mention referrer, but does not need to couple it to CSP."},"ts":1658185651991,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qgrtfWmlmxb-c-_8KNQFqd1Y2w6hqh96vI7q4JhfoXw"},
{"content":{"body":"So this means, a class which has a referrer but is not an instance, if we want to meet those goals ","format":"org.matrix.custom.html","formatted_body":"So this means, a class which has a referrer but is not an instance, if we want to meet those goals","msgtype":"m.text"},"ts":1658185654858,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B1A6ED1YE_iDCl9HdXZA0aeJobNgbIqTIZmgkXEJDSM"},
{"content":{"body":"Referrer is sufficient for csp, and necessary for other reasons","msgtype":"m.text"},"ts":1658185680525,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YZq57B2RdtnwkVQkJ-xWAHLos_AgxHgshe2y60i9UxM"},
{"content":{"body":"I don’t mind thinking of that as coincidental ","format":"org.matrix.custom.html","formatted_body":"I don’t mind thinking of that as coincidental","msgtype":"m.text"},"ts":1658185702545,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Z5O9y1Hu-7_Y3pCm6UZiuvAqJnlKFcYdyopaJwY8dQc"},
{"content":{"body":"Referrer on Module is sufficient, and referrer on ModuleSource is not necessary.","msgtype":"m.text","org.matrix.msc1767.text":"Referrer on Module is sufficient, and referrer on ModuleSource is not necessary."},"ts":1658185704245,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YApNSAwtZOWFEUA_h1w_8c_SOHw2uPTCcFAV4G9sj4Y"},
{"content":{"body":"I explained a separate reason why it is necessary above","msgtype":"m.text"},"ts":1658185725976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dFp7sZSO-MhC8INl33rhXF0FpibQdmxLY1fP6yQt2YY"},
{"content":{"body":"Though origin on ModuleSource is necessary for CSP.","msgtype":"m.text","org.matrix.msc1767.text":"Though origin on ModuleSource is necessary for CSP."},"ts":1658185730024,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Y4SzfVhF-qQ_PZ0__9Opra4ttqn0Fq6-C8z9U_cOhF0"},
{"content":{"body":"I would like to think of these as different even if coincidental.","msgtype":"m.text","org.matrix.msc1767.text":"I would like to think of these as different even if coincidental."},"ts":1658185746354,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$UvR_AXY-XRaKzequR9hOAVq0nnNaRRstAe9VlqAMkis"},
{"content":{"body":"Sure","msgtype":"m.text"},"ts":1658185753952,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fFU1A8ASNg8X9o98FOGOI_y9kGWdVJh7SNv5_eNbmyU"},
{"content":{"body":"Going back to your conversation with Guy…","msgtype":"m.text","org.matrix.msc1767.text":"Going back to your conversation with Guy…"},"ts":1658185787725,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y9kWpn060BpoaaEdgD5fOKv7YvD2tWe0jIRTAWaWXZg"},
{"content":{"body":"I think all motivating cases are handled if `Module` captures a referrer and if there’s a way to obtain a `Module` in an uninitialized state. That’s the deferred execution proposal.","format":"org.matrix.custom.html","formatted_body":"I think all motivating cases are handled if <code>Module</code> captures a referrer and if there’s a way to obtain a <code>Module</code> in an uninitialized state. That’s the deferred execution proposal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think all motivating cases are handled if `Module` captures a referrer and if there’s a way to obtain a `Module` in an uninitialized state. That’s the deferred execution proposal.","mimetype":"text/plain"},{"body":"I think all motivating cases are handled if <code>Module</code> captures a referrer and if there’s a way to obtain a <code>Module</code> in an uninitialized state. That’s the deferred execution proposal.","mimetype":"text/html"}]},"ts":1658185840167,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$18Ojq4GcX4NM7yB1KJEqYNQd--JcnK7tRGUOr4OW1YI"},
{"content":{"body":"And I’m open to deferred execution subsuming import reflection to that end.","msgtype":"m.text","org.matrix.msc1767.text":"And I’m open to deferred execution subsuming import reflection to that end."},"ts":1658185862183,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2joRERqk7MAeA9Zp1SpB7LC54jqxwjsNkrHR9k7TuVQ"},
{"content":{"body":"It would be pretty cool if these could be unified somehow ","format":"org.matrix.custom.html","formatted_body":"It would be pretty cool if these could be unified somehow","msgtype":"m.text"},"ts":1658185870472,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ompW7KXLwjqth9SBwCN0TZHn-06HPaC5iEVgMz-_UMk"},
{"content":{"body":"And I think giving it an instance which has a referrer but no instance would do it","msgtype":"m.text"},"ts":1658185888095,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LOB7a_zjGWMhZKbDZGTq2xsJBPVryDfNVTGIKsQ7RnU"},
{"content":{"body":"If `import module x from 'x.wasm'` came up as a `Module`:","format":"org.matrix.custom.html","formatted_body":"If <code>import module x from 'x.wasm'</code> came up as a <code>Module</code>:","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If `import module x from 'x.wasm'` came up as a `Module`:","mimetype":"text/plain"},{"body":"If <code>import module x from 'x.wasm'</code> came up as a <code>Module</code>:","mimetype":"text/html"}]},"ts":1658185895273,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$w1_Ce6PJGSVoEJ6YmSFtIrPmN1LOMeqos-iuIukklp8"},
{"content":{"body":"1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin","mimetype":"text/plain"},{"body":"<ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658186008649,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RV7zxq3L4pcJTSQZllBtQvbcaT2tW7GWF8d2Jptba7I"},
{"content":{"body":" * 1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have \\[\\[HostData\\]\\] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin\n6. Could be executed with just `import(x)`","format":"org.matrix.custom.html","formatted_body":" * <ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n<li>Could be executed with just <code>import(x)</code></li>\n</ol>\n","m.new_content":{"body":"1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have \\[\\[HostData\\]\\] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin\n6. Could be executed with just `import(x)`","format":"org.matrix.custom.html","formatted_body":"<ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n<li>Could be executed with just <code>import(x)</code></li>\n</ol>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have \\[\\[HostData\\]\\] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin\n6. Could be executed with just `import(x)`","mimetype":"text/plain"},{"body":"<ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n<li>Could be executed with just <code>import(x)</code></li>\n</ol>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$RV7zxq3L4pcJTSQZllBtQvbcaT2tW7GWF8d2Jptba7I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * 1. it would have a `referrer`\n2. wouldn't be evaluated yet\n3. could be duplicated for multiple instantiation: `new Module(x.source, x.referrer, etc)`\n4. `x.source instanceof WebAssembly.Module`\n5. `WebAssembly.Module` and `ModuleSource` can either have \\[\\[HostData\\]\\] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin\n6. Could be executed with just `import(x)`","mimetype":"text/plain"},{"body":" * <ol>\n<li>it would have a <code>referrer</code></li>\n<li>wouldn't be evaluated yet</li>\n<li>could be duplicated for multiple instantiation: <code>new Module(x.source, x.referrer, etc)</code></li>\n<li><code>x.source instanceof WebAssembly.Module</code></li>\n<li><code>WebAssembly.Module</code> and <code>ModuleSource</code> can either have [[HostData]] or host-dependent variations of the Module Source Record abstract type such that they have a CSP origin</li>\n<li>Could be executed with just <code>import(x)</code></li>\n</ol>\n","mimetype":"text/html"}]},"ts":1658186036082,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ipMpMgazDuFvBccAnMNHgYsHjKZiedoOmVFwy4TWlxs"},
{"content":{"body":"Notably, in the multiple instantiation case, `referrer` can and must be differentiated from `source.[[HostData]].[[Origin]]`. Spoofing origin is no-go.","format":"org.matrix.custom.html","formatted_body":"Notably, in the multiple instantiation case, <code>referrer</code> can and must be differentiated from <code>source.[[HostData]].[[Origin]]</code>. Spoofing origin is no-go.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Notably, in the multiple instantiation case, `referrer` can and must be differentiated from `source.[[HostData]].[[Origin]]`. Spoofing origin is no-go.","mimetype":"text/plain"},{"body":"Notably, in the multiple instantiation case, <code>referrer</code> can and must be differentiated from <code>source.[[HostData]].[[Origin]]</code>. Spoofing origin is no-go.","mimetype":"text/html"}]},"ts":1658186086634,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$4NHW4J3-pAIINxmupp8MS4KgsCP3N0kNBBWebsud1eY"},
{"content":{"body":"That’s me convincing myself that `referrer` and `origin` may coincidentally be the same value, but must be orthogonal.","format":"org.matrix.custom.html","formatted_body":"That’s me convincing myself that <code>referrer</code> and <code>origin</code> may coincidentally be the same value, but must be orthogonal.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That’s me convincing myself that `referrer` and `origin` may coincidentally be the same value, but must be orthogonal.","mimetype":"text/plain"},{"body":"That’s me convincing myself that <code>referrer</code> and <code>origin</code> may coincidentally be the same value, but must be orthogonal.","mimetype":"text/html"}]},"ts":1658186138290,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PtBKf0VjdWPGM0gEtpdobDbrP5cACkB1-5BljTqH7_A"},
{"content":{"body":"Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated [[Oirigin]].","format":"org.matrix.custom.html","formatted_body":"Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Oirigin]].","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated [[Oirigin]].","mimetype":"text/plain"},{"body":"Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Oirigin]].","mimetype":"text/html"}]},"ts":1658186189319,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DnUjqbFIZft-h6k8VT8Q2O8twDHlHLPYautoTkVq-kc"},
{"content":{"body":" * Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated \\[\\[Origin\\]\\].","format":"org.matrix.custom.html","formatted_body":" * Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Origin]].","m.new_content":{"body":"Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated \\[\\[Origin\\]\\].","format":"org.matrix.custom.html","formatted_body":"Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Origin]].","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated \\[\\[Origin\\]\\].","mimetype":"text/plain"},{"body":"Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Origin]].","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$DnUjqbFIZft-h6k8VT8Q2O8twDHlHLPYautoTkVq-kc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Similarly, `new ModuleSource(text)` from a trusted type can also produce a Module Source Record with an associated \\[\\[Origin\\]\\].","mimetype":"text/plain"},{"body":" * Similarly, <code>new ModuleSource(text)</code> from a trusted type can also produce a Module Source Record with an associated [[Origin]].","mimetype":"text/html"}]},"ts":1658186196901,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8sMsMTZ84VIqI0DrTT9qB5hKUZrnR6BV8X6mzVaWRNE"},
{"content":{"body":"Would someone here kindly verify that they can open this slide deck link? https://drive.google.com/file/d/1NJWRBZJBP25uoyLXYDQVU5uG7YVZD4M9/view?usp=sharing","msgtype":"m.text","org.matrix.msc1767.text":"Would someone here kindly verify that they can open this slide deck link? https://drive.google.com/file/d/1NJWRBZJBP25uoyLXYDQVU5uG7YVZD4M9/view?usp=sharing"},"ts":1658187795420,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wN85yHjiSJ0TwAED9y9XKOPAdGsQJW8X19jN7Pxsae4"},
{"content":{"body":"Yes I can open it","msgtype":"m.text"},"ts":1658188507069,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QonqIP4q2z-V14SjqN65ByRgebhHhFk0-j6Uo60KLBk"},
{"content":{"body":"I’ll get them added to the agenda.","msgtype":"m.text","org.matrix.msc1767.text":"I’ll get them added to the agenda."},"ts":1658188542255,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$e2RD2DEHXLND3XpybrvNtLswT9vDMJYuQztTYBPQj80"},
{"content":{"body":"I am fine with considering csp layered to be orthogonal to referrer but it really is two copies of the same information. Csp can be more specific about paths than just origin ","format":"org.matrix.custom.html","formatted_body":"I am fine with considering csp layered to be orthogonal to referrer but it really is two copies of the same information. Csp can be more specific about paths than just origin","msgtype":"m.text"},"ts":1658188550663,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yoi7OETjY_HiRuMWMeI_rl0ZnL_ysZQbTgY8_cThJrM"},
{"content":{"body":"I think they’re not necessarily the same since referrer can be virtualized but origin cannot.","msgtype":"m.text","org.matrix.msc1767.text":"I think they’re not necessarily the same since referrer can be virtualized but origin cannot."},"ts":1658188583677,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2ueWtTcDqrrScGd15--MYN3M-LEOo66ZHh6qFA-XVE8"},
{"content":{"body":"And the idea of TT is because it is too hard to apply that specific of a csp policy","msgtype":"m.text"},"ts":1658188586961,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iHXBt4PwGBPtifLjQ94p6-F6JXLsGCcjLuR_CVLNq0Q"},
{"content":{"body":"Oh! Ok","msgtype":"m.text"},"ts":1658188598761,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7NBsnLwbx08rnzlXaKc7Lm9Sw6UCSUk4cX2Uvqftlek"},
{"content":{"body":"When is referrer virtualized?","msgtype":"m.text"},"ts":1658188606330,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fkLnMMvyY7JZK-c1QN3tOHxbE9-3cTXhnGFbRLSgEkU"},
{"content":{"body":"I guess import maps?","msgtype":"m.text"},"ts":1658188615208,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7CtvI9jVeeWKtwtZBr4G6njC0G71jX6ahW9orMRSB58"},
{"content":{"body":"Whenever you construct a `Module`, you may choose any referrer.","format":"org.matrix.custom.html","formatted_body":"Whenever you construct a <code>Module</code>, you may choose any referrer.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Whenever you construct a `Module`, you may choose any referrer.","mimetype":"text/plain"},{"body":"Whenever you construct a <code>Module</code>, you may choose any referrer.","mimetype":"text/html"}]},"ts":1658188623966,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aTx09f39c6AhyjLI0ZSD1F0aHXqPfJJiKU6IQX4kL58"},
{"content":{"body":"Up to an including `{ importMeta: { url: \"💩\" } }`","format":"org.matrix.custom.html","formatted_body":"Up to an including <code>{ importMeta: { url: &quot;💩&quot; } }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Up to an including `{ importMeta: { url: \"💩\" } }`","mimetype":"text/plain"},{"body":"Up to an including <code>{ importMeta: { url: &quot;💩&quot; } }</code>","mimetype":"text/html"}]},"ts":1658188644665,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HzrVS1pHdXyPVo17hKrRRBiBN-SmNY69MFa-OLWe-tQ"},
{"content":{"body":"Or rather, assuming a new `referrer` argument, `new Module(originalSource, \"🤥\", { etc })`.","format":"org.matrix.custom.html","formatted_body":"Or rather, assuming a new <code>referrer</code> argument, <code>new Module(originalSource, &quot;🤥&quot;, { etc })</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Or rather, assuming a new `referrer` argument, `new Module(originalSource, \"🤥\", { etc })`.","mimetype":"text/plain"},{"body":"Or rather, assuming a new <code>referrer</code> argument, <code>new Module(originalSource, &quot;🤥&quot;, { etc })</code>.","mimetype":"text/html"}]},"ts":1658188714536,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6hIsSXW69nBfTOKvlc9337sxOnsCUxh1lw_GFPZyLWY"},
{"content":{"body":"In which case the `originalSource` would have an associated origin by which CSP would be enforced, but a referrer that need only be useful to the extent that you can use it to resolve an importSpecifier in an importHook.","format":"org.matrix.custom.html","formatted_body":"In which case the <code>originalSource</code> would have an associated origin by which CSP would be enforced, but a referrer that need only be useful to the extent that you can use it to resolve an importSpecifier in an importHook.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In which case the `originalSource` would have an associated origin by which CSP would be enforced, but a referrer that need only be useful to the extent that you can use it to resolve an importSpecifier in an importHook.","mimetype":"text/plain"},{"body":"In which case the <code>originalSource</code> would have an associated origin by which CSP would be enforced, but a referrer that need only be useful to the extent that you can use it to resolve an importSpecifier in an importHook.","mimetype":"text/html"}]},"ts":1658188762269,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xUf3iJ8-PAUpgLovZ3WPlSr4sfktvUq12C2Z9_FDg3E"}
]