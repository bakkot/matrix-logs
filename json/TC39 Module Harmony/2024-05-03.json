[
{"content":{"body":"Thanks for the notes.","m.mentions":{},"msgtype":"m.text"},"ts":1714698049793,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$vZ62qrwFvMBxXyvO20FXsR6HhMnUlY_xGFjmHxG7-Sk"},
{"content":{"body":"(Hard no on a registry from me, fwiw.)","m.mentions":{},"msgtype":"m.text"},"ts":1714698158148,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$v_0D7xNGHiGvOj-K7LckLGmXr57KR-CSpwMpRhFYUC4"},
{"content":{"body":"What‚Äôs the key differentiator between `import weak` vs `import defer` or `import source`?","format":"org.matrix.custom.html","formatted_body":"What‚Äôs the key differentiator between <code>import weak</code> vs <code>import defer</code> or <code>import source</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1714698189030,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$xcXJWXvIcLDiB0QxZkjvx8IeOzl_rKtzcK8bEt1z2N8"},
{"content":{"body":"IIUC, `weak` indicates that a module (or presumably a related entity in the case of e.g. `source`) should be returned if already available but otherwise the barest of stubs should appear in its place. It's like an opportunistic ESM analog of old-school feature testing.","format":"org.matrix.custom.html","formatted_body":"IIUC, <code>weak</code> indicates that a module (or presumably a related entity in the case of e.g. <code>source</code>) should be returned if already available but otherwise the barest of stubs should appear in its place. It's like an opportunistic ESM analog of old-school feature testing.","m.mentions":{},"msgtype":"m.text"},"ts":1714701276306,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$UdrSrJtmcDMw3Q2pvV-_CdMuVGf_wUzLj09fYaSL10U"},
{"content":{"body":"The definition we were working with was \"if resolution fails, return undefined\", so more \"optional\" than anything ","msgtype":"m.text"},"ts":1714702041592,"senderName":"jakebailey","senderId":"@jakebailey:matrix.org","id":"$km52W-pHp8EG89xNDXZL1WQ3ObCVvdIztrvShiHff4M"},
{"content":{"body":"That is interesting because it could apply at finer granularity of individual bindings, syntactically like import type in ts","msgtype":"m.text"},"ts":1714702402436,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Q6QdXQUIVgoxGEx9A1i1ZH7UzsV2wVcK_lEWCD1KKqI"},
{"content":{"body":"Could be virtualized by allowing importHook to return undefined instead of throwing","msgtype":"m.text"},"ts":1714702597123,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$EH5z2Y1OX92oQscTcxHLiNRzL1m7t6R74NEzlBRGIqM"},
{"content":{"body":"Or tolerating the exception if weakly imported. ‚Äúoptional import‚Äù as it were","msgtype":"m.text"},"ts":1714702637103,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Xd9Ih-HaCRb7JCttiq8pNRqE6bzogGh1lwJtlceads8"},
{"content":{"body":"Or optionality could be indicated as we do elsewhere in destructuring with an explicit default","msgtype":"m.text"},"ts":1714702698484,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$9bcTETCQ_TD1IKlJayPrpgVtLWxNwM3KmW7i7fJ5-X8"},
{"content":{"body":"Yeah; the difference between the \"deferred\" import is that a deferred import will still error if the resolution fails, before anything else even happens. In that sense I prefer the term \"optional\" for clarity, especially given \"weak\" has existing connotations elsewhere","m.mentions":{},"msgtype":"m.text"},"ts":1714704302372,"senderName":"jakebailey","senderId":"@jakebailey:matrix.org","id":"$YrV4Y2AgvOtzT-TTtXw6C1-gIfuSqUKv7xMjV1VAyds"},
{"content":{"body":"Though I honestly can't remember what a \"source\" import is.","m.mentions":{},"msgtype":"m.text"},"ts":1714704323271,"senderName":"jakebailey","senderId":"@jakebailey:matrix.org","id":"$85GqD1RJwYuMuKQKmNUF_1IJi9FHgmPs9lgC0XVkdXo"},
{"content":{"body":"Source imports are for grabbing a handle on the compiled source and not executing, to pass it to a worker, multiply instantiate, or isolate in another evaluation context (think mocks, dsls, or sandboxes)","msgtype":"m.text"},"ts":1714707339677,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$nyizKQP7Ww1EKp4BSf4AX1bGp5EJbWkxDek_ecTlKUk"},
{"content":{"body":"Gotcha üôÇ","m.mentions":{},"msgtype":"m.text"},"ts":1714707354380,"senderName":"jakebailey","senderId":"@jakebailey:matrix.org","id":"$rkKTa1z4H31EaTYPqStTJVgtWTEMTwfYw37d6Nb4hHU"},
{"content":{"body":"the term \"weak\" sounds strongly relevant to memory management to me. How abot \"import optional\"?","m.mentions":{},"msgtype":"m.text"},"ts":1714729392570,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$qlEgcZfdfah5Vx5ThIgmW8hBsM_-Lqm6ozV2uO8MYpc"},
{"content":{"body":"`try import`","format":"org.matrix.custom.html","formatted_body":"<code>try import</code>","msgtype":"m.text"},"ts":1714729664524,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vrZ-5Ds5yMG0bJqwyzMX7O804S1Vj_BBcruI_xDsIbc"},
{"content":{"body":"Since it's suppressing an error","msgtype":"m.text"},"ts":1714729671161,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KGlOvhNVSH_aUXQXgUDGuaplI9FGbFendfdw7ODgQ9M"},
{"content":{"body":"I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:\n\n- `optional`try\" or \"maybe\" or \"attempt\"","format":"org.matrix.custom.html","formatted_body":"<p>I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:</p>\n<ul>\n<li><code>optional</code>try\" or \"maybe\" or \"attempt\"</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1714729840420,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$KxcT3FXzeKCcqs5Kf0HHL6vS9dEk9bk_FihZqj9iTc4"},
{"content":{"body":" * I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:\n\n- `optional`\n- `try`\n- `maybe`\n- `attempt`","format":"org.matrix.custom.html","formatted_body":" * <p>I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:</p>\n<ul>\n<li><code>optional</code></li>\n<li><code>try</code></li>\n<li><code>maybe</code></li>\n<li><code>attempt</code></li>\n</ul>\n","m.mentions":{},"m.new_content":{"body":"I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:\n\n- `optional`\n- `try`\n- `maybe`\n- `attempt`","format":"org.matrix.custom.html","formatted_body":"<p>I think that \"weak\" could be fully understood by module experts such as those in this room and is an appropriate name for the proposal.  To the wider world, I don't think it conveys \"ability to tolerate failure\" in the way that other words could, so maybe not good as a language keyword.  Others that might work:</p>\n<ul>\n<li><code>optional</code></li>\n<li><code>try</code></li>\n<li><code>maybe</code></li>\n<li><code>attempt</code></li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$KxcT3FXzeKCcqs5Kf0HHL6vS9dEk9bk_FihZqj9iTc4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714729903852,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$DB92ey9AIWIA-XTCWmG4t784slQoyIaXkEFXV6UbrDs"},
{"content":{"body":"`maybe import ns as * from \"this-might-not-exist\";`","format":"org.matrix.custom.html","formatted_body":"<code>maybe import ns as * from \"this-might-not-exist\";</code>","m.mentions":{},"msgtype":"m.text"},"ts":1714729957002,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$_KrDMKWKjgbp7JJH69YZL-uuvFfzgmyGlqsKuMubJ3o"},
{"content":{"body":"`attempt import ns as * from \"this-might-not-exist\";","m.mentions":{},"msgtype":"m.text"},"ts":1714729982263,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$5qhiICX7KmwQsYrE7divuiofIgz70Wan1MiSIaXvgU0"},
{"content":{"body":" * `attempt import ns as * from \"this-might-not-exist\";`","format":"org.matrix.custom.html","formatted_body":" * <code>attempt import ns as * from \"this-might-not-exist\";</code>","m.mentions":{},"m.new_content":{"body":"`attempt import ns as * from \"this-might-not-exist\";`","format":"org.matrix.custom.html","formatted_body":"<code>attempt import ns as * from \"this-might-not-exist\";</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5qhiICX7KmwQsYrE7divuiofIgz70Wan1MiSIaXvgU0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1714729998023,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$8io00_eNYLjryvmih1Crc34CPHWMy_wBdHeusiHPTDc"},
{"content":{"body":"(I am joking about leading with it, but the sentence like nature is cute)","m.mentions":{},"msgtype":"m.text"},"ts":1714730017817,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$vVaqRfpPF1KPuxKPOCyT6yx04cDro1vVRd7EWf0y5UQ"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> `try import`\n\nsuffix vs. prefix, my first impression is that `import optional_or_try nil from \"nil\"` might be easier to be parsed by toolings than `optional_or_try import nil from \"nil\"`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$vrZ-5Ds5yMG0bJqwyzMX7O804S1Vj_BBcruI_xDsIbc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><code>try import</code></blockquote></mx-reply>suffix vs. prefix, my first impression is that <code>import optional_or_try nil from \"nil\"</code> might be easier to be parsed by toolings than <code>optional_or_try import nil from \"nil\"</code>","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vrZ-5Ds5yMG0bJqwyzMX7O804S1Vj_BBcruI_xDsIbc"}},"msgtype":"m.text"},"ts":1714730063748,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$_7462-5S0BIXc8Fx9wMkG55knjV0XUqVrF9YKCOsS2I"},
{"content":{"body":"If we had `from \"mod\" import x` all of this would go away and we could have `from \"mod\" try import x`","format":"org.matrix.custom.html","formatted_body":"If we had <code>from \"mod\" import x</code> all of this would go away and we could have <code>from \"mod\" try import x</code>","m.mentions":{},"msgtype":"m.text"},"ts":1714730170337,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$89aLg0J62sRX7Rt4zngfTLESmGGI0w1uS51Y1L2GJc4"},
{"content":{"body":"`from \"mod\" try import x` reads different meaning to me... it could mean optional export names...","format":"org.matrix.custom.html","formatted_body":"<code>from \"mod\" try import x</code> reads different meaning to me... it could mean optional export names...","m.mentions":{},"msgtype":"m.text"},"ts":1714730254629,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$Ri1HB3H_FQGKZ-LzACd2h_CWBcFZOctQZHMwIx1P5BM"},
{"content":{"body":"> <@legendecas:matrix.org> suffix vs. prefix, my first impression is that `import optional_or_try nil from \"nil\"` might be easier to be parsed by toolings than `optional_or_try import nil from \"nil\"`\n\nWell `try` is a keyword, so `try import` is fully unambiguous and doesn't even require NLT restrictions ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$_7462-5S0BIXc8Fx9wMkG55knjV0XUqVrF9YKCOsS2I?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br />suffix vs. prefix, my first impression is that <code>import optional_or_try nil from \"nil\"</code> might be easier to be parsed by toolings than <code>optional_or_try import nil from \"nil\"</code></blockquote></mx-reply>Well <code>try</code> is a keyword, so <code>try import</code> is fully unambiguous and doesn't even require NLT restrictions","m.relates_to":{"m.in_reply_to":{"event_id":"$_7462-5S0BIXc8Fx9wMkG55knjV0XUqVrF9YKCOsS2I"}},"msgtype":"m.text"},"ts":1714731546456,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$64bT8tu5ekEYuCYPw9ti1-PmBJ2K29R5yjQ2puhUr-s"}
]