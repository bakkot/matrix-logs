[
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> From the modules call today:\n> ```js\n> // mod1\n> export let a;\n> export { a as b };\n> \n> // mod2\n> export { a as x } from \"mod1\";\n> \n> // mod3\n> export { b as x } from \"mod3\";\n> \n> // mod4\n> export * from \"mod2\"\n> export * from \"mod3\"\n> ```\n> \n> _If_ the use case is to detect not-actually-ambiguous ambigous re-exports, then the source of `mod1` needs a way to say that `a` and `b` internally refer to the same local binding\n\nthen what about letting the export name (optionally) be an array? e.g. for code\n\n```js\nexport let a, b\nexport { a as c }\n```\n\nit reflected as `exports: [ [\"a\", \"c\"], \"b\" ]`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$mkxKUBxG2V_6UFuh4YDeZ49zP2RraNjUM6dAYqisn4c\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p>From the modules call today:</p>\n<pre><code class=\"language-js\">// mod1\nexport let a;\nexport { a as b };\n\n// mod2\nexport { a as x } from \"mod1\";\n\n// mod3\nexport { b as x } from \"mod3\";\n\n// mod4\nexport * from \"mod2\"\nexport * from \"mod3\"\n</code></pre>\n<p><em>If</em> the use case is to detect not-actually-ambiguous ambigous re-exports, then the source of <code>mod1</code> needs a way to say that <code>a</code> and <code>b</code> internally refer to the same local binding</p>\n</blockquote></mx-reply><p>then what about letting the export name (optionally) be an array? e.g. for code</p><pre><code class=\"language-js\">export let a, b\nexport { a as c }\n</code></pre><p>it reflected as <code>exports: [ [&quot;a&quot;, &quot;c&quot;], &quot;b&quot; ]</code></p>","m.relates_to":{"m.in_reply_to":{"event_id":"$mkxKUBxG2V_6UFuh4YDeZ49zP2RraNjUM6dAYqisn4c"}},"msgtype":"m.text"},"ts":1720149097311,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$GHfCF8sF4jX-WqLzJU_QB_QVlCvxknPBtf1ocrPYniY"},
{"content":{"body":"Oh, with the ModuleSource constructor, sure","m.relates_to":{"event_id":"$uZfOOFmctagHsUljP1c-L-OX12lZbUho4IYuV_Z7Ja8","is_falling_back":true,"m.in_reply_to":{"event_id":"$gfYplyEBMUwyqOtEzArjV8eGGXq9i5AXGX6zq6oQUdE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1720165974433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fGwVEH6Kv_jUEzSDRUBc4oNjT5JWaUFiu4whFw43O1I"}
]