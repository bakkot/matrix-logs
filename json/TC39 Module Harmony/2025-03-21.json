[
{"content":{"body":"I've posted up a draft HTML PR for ESM Phase Imports in https://github.com/whatwg/html/pull/11152","m.mentions":{},"msgtype":"m.text"},"ts":1742583260120,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$vkBt_r3WpPEc-S4JjDQRQFswYCMmKKqSzNRZxH-Hw7k"},
{"content":{"body":"feedback very welcome!","m.mentions":{},"msgtype":"m.text"},"ts":1742583263221,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$C_xDTcOBp2pWp4mRSLBe1yNNcTGoWl6_gKrJklyQy1M"},
{"content":{"body":"guybedford: I haven't been following closely; can you give an example of how one would obtain an unrooted module in the current world?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a>: I haven't been following closely; can you give an example of how one would obtain an unrooted module in the current world?","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1742595565350,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nk6SQicmiFPrjmdhAAkYsckf68vyw1czD3yJTDCFTTM"},
{"content":{"body":"(i.e. in the world without `module {}` syntax)","format":"org.matrix.custom.html","formatted_body":"(i.e. in the world without <code>module {}</code> syntax)","m.mentions":{},"msgtype":"m.text"},"ts":1742595578433,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wn4qK9OGHb_0rH35XGqiJu4kq5ZFVbYDKLXDuTp5OAI"},
{"content":{"body":"I guess just the `ModuleSource` constructor?","format":"org.matrix.custom.html","formatted_body":"I guess just the <code>ModuleSource</code> constructor?","m.mentions":{},"msgtype":"m.text"},"ts":1742595650595,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$DBdQCmc7fKE6FD1mDKGric08hkp-Kkz86q5e7aK9MuQ"},
{"content":{"body":"I forget if we were exposing that or not","m.mentions":{},"msgtype":"m.text"},"ts":1742595697656,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$zOK3W2oMzQNrgsLcaZ1MTU9pHp4wphk_v17OKtyw8ug"},
{"content":{"body":"oh and `WebAssembly.compile` I guess","format":"org.matrix.custom.html","formatted_body":"oh and <code>WebAssembly.compile</code> I guess","m.mentions":{},"msgtype":"m.text"},"ts":1742595815161,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Us6JarykE-TED4xEdzKzwzhwvS7uk5ejflmqnP4WLRE"},
{"content":{"body":"unrelated, has there been any discussion of Trusted Types integration?","m.mentions":{},"msgtype":"m.text"},"ts":1742596451582,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JAmACynCIFN7UU4N2SFOLF8Q99UeubsU6JUhFwitwHw"},
{"content":{"body":"right now there's TrustedScript; presumably there would need to be TrustedModuleSource or something? Kinda of annoying but not terrible I guess","m.mentions":{},"msgtype":"m.text"},"ts":1742596504157,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uwFp4sK3vNP6qOfYjbCTBH1WuqxYDaJMNujZAbKWRR8"},
{"content":{"body":"yes just via `new WebAssembly.Module(bytes)` today and in future perhaps either `new ModuleSource('source')` and `eval('module { }')`.","format":"org.matrix.custom.html","formatted_body":"yes just via <code>new WebAssembly.Module(bytes)</code> today and in future perhaps either <code>new ModuleSource('source')</code> and <code>eval('module { }')</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1742598449747,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$ysDrkAqEeBgzdvEBIe_rYQccx56Kdz3MNbrOb0B42ew"},
{"content":{"body":"For the most part I think rooted modules are _trusted_ in the sense that they are known to originate from their URL and origin with CSP / integrity checks as appropriate","format":"org.matrix.custom.html","formatted_body":"For the most part I think rooted modules are <em>trusted</em> in the sense that they are known to originate from their URL and origin with CSP / integrity checks as appropriate","m.mentions":{},"msgtype":"m.text"},"ts":1742598496794,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$J0FxHKvVTB2HEFeYUlS6MwIglCGZ1cxMht2I0XtESHM"},
{"content":{"body":"I'm hopeful that security model might be possible to develop further","m.mentions":{},"msgtype":"m.text"},"ts":1742598514843,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$g-waEX0h_kxlzdDTuWGoQxjVCVdA3ViB1C2cmt4Rg_o"},
{"content":{"body":"(all rooted sources as trusted sources)","m.mentions":{},"msgtype":"m.text"},"ts":1742598533183,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$AfYOw0tY8lQduWan3lcoPBYNjWIAJpetoPOf7Z6MbNM"},
{"content":{"body":"* yes just via `new WebAssembly.Module(bytes)` today and in future perhaps either `new ModuleSource('source')` or `eval('module { }')`.","format":"org.matrix.custom.html","formatted_body":"* yes just via <code>new WebAssembly.Module(bytes)</code> today and in future perhaps either <code>new ModuleSource('source')</code> or <code>eval('module { }')</code>.","m.mentions":{},"m.new_content":{"body":"yes just via `new WebAssembly.Module(bytes)` today and in future perhaps either `new ModuleSource('source')` or `eval('module { }')`.","format":"org.matrix.custom.html","formatted_body":"yes just via <code>new WebAssembly.Module(bytes)</code> today and in future perhaps either <code>new ModuleSource('source')</code> or <code>eval('module { }')</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ysDrkAqEeBgzdvEBIe_rYQccx56Kdz3MNbrOb0B42ew","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1742598566137,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$DX76Uxa7nU5sBg2f5XaO_1T7maeMXaaoLIdW0ZSt-qk"},
{"content":{"body":"Trusted Types is specifically a mechanism for getting from untrusted values to values which can be used in contexts which require trust (that is, which pass CSP)","m.mentions":{},"msgtype":"m.text"},"ts":1742598741429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rMtyXXP5pq6WKzhHn9zoGf8Zxo8QuSDZNQSZA1JV5sw"},
{"content":{"body":"so the relevant thing here would be a way to take an _unrooted_ source and get something usable in a CSP context","format":"org.matrix.custom.html","formatted_body":"so the relevant thing here would be a way to take an <em>unrooted</em> source and get something usable in a CSP context","m.mentions":{},"msgtype":"m.text"},"ts":1742598785547,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$oPKnkLgefi-JznsB6W9ChSUAqsCov4oQsgE4FTDcyO0"},
{"content":{"body":"Right, but Trust Types are sink protections for user sources. But module sources are trusted sources, therefore do not require sink protection.","m.mentions":{},"msgtype":"m.text"},"ts":1742598793508,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Z_rWGTGy7Bzsa5THZjRHZOBNbdMtWYj9jZaQ3iktelo"},
{"content":{"body":"for rooted module sources, yes","m.mentions":{},"msgtype":"m.text"},"ts":1742598807789,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$owdwbXBhoMJN4TJ8Ew_U7qblp1z52eEm9Npcvh5HG2U"},
{"content":{"body":"I'm thinking that you would need a TrustedScript as an argument to a potential ModuleSource constructor","msgtype":"m.text"},"ts":1742598816205,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5suRFv9WwUibOwz3Fczp3gjbtXilixcZaZsODD9hKXY"},
{"content":{"body":"Similarly to how you need to pass a TrustedScript to Function","msgtype":"m.text"},"ts":1742598828628,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$1jF0hUL4cRYwu3aoJFs4AzllGOXt88vC4ZuPWluNWKs"},
{"content":{"body":"And gate creation of Module sources, rather than their usage","msgtype":"m.text"},"ts":1742598859369,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$5RQeWr7vBBBgrQsEsn_bBenU2ypVoOaXoLZgOdKG_FI"},
{"content":{"body":"I was trying to figure out how this works for WASM but it's apparently unspecified, fun fun","m.mentions":{},"msgtype":"m.text"},"ts":1742599118392,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qHGRT7g-Q3kCxI7fiko0MM8Z8l7YRtFCyw1UUVOZ__8"},
{"content":{"body":"anyway empirically CSP blocks compilation to Module objects","m.mentions":{},"msgtype":"m.text"},"ts":1742599149453,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9WE2wEEmO8Is7GyS5ElAsPpppEOO5vEwY4zSocm5I5c"},
{"content":{"body":"so probably it makes more sense for the trust gate to be on creation of Module objects, not on their use","m.mentions":{},"msgtype":"m.text"},"ts":1742599163268,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$RRu6t0NSskx_ZJavc-VYimG51VqjkIZ-tEqO58orXaQ"},
{"content":{"body":"as nicolo-ribaudo suggests but not as currently specified, at least based on my reading of the description in the PR; correct me if I'm wrong","format":"org.matrix.custom.html","formatted_body":"as <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> suggests but not as currently specified, at least based on my reading of the description in the PR; correct me if I'm wrong","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1742599194021,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$U0zvLWwc4xdIRD2oPBcFOd51_JpiE97fgLbG9GXZCJ4"},
{"content":{"body":"https://github.com/WebAssembly/spec/issues/1393 is the wasm+csp issue incidentally","m.mentions":{},"msgtype":"m.text"},"ts":1742599229488,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$M1wdt5xMSpp6mGdxpQMh0JojJJt_fgKwsNWYzgmNd10"},
{"content":{"body":"man CSP is just the single worst web spec","m.mentions":{},"msgtype":"m.text"},"ts":1742599236694,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NGNDcALQngfRVapozEW2IJg1bSc19L9gxbkySCMuM3M"},
{"content":{"body":"CSP and everything it touches","m.mentions":{},"msgtype":"m.text"},"ts":1742599242294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$bOq4Mq8zW-j9ToQviw4qQloqF8-D6yzGhJA6-jLqk2o"},
{"content":{"body":"Yes, that might well be the approach. Note also that module declarations nested arbitrarily deep in sources that bottom out as rooted sources are still also themselves rooted sources. Yes Wasm might even benefit from its own trusted types support for WebAssembly compile. Note that source phase integration for Wasm already unified Wasm CSP on script-src policy.","m.mentions":{},"msgtype":"m.text"},"ts":1742599244386,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$R6mTPXt94WZ5A3TAXIziaoBhsQELhlnMlStrJYgRp3w"},
{"content":{"body":"> Note that source phase integration for Wasm already unified Wasm CSP on script-src policy.\n\nDid it? Where's that specified?","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Note that source phase integration for Wasm already unified Wasm CSP on script-src policy.</p>\n</blockquote>\n<p>Did it? Where's that specified?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1742599274785,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6ndbzYQ3-h93Nax0l3cV2TgXFXQeTw-6AVDqhNMmCSE"},
{"content":{"body":"In the HTML integration PR - https://github.com/whatwg/html/pull/10380 were a bunch of discussions in WhatWG about that","m.mentions":{},"msgtype":"m.text"},"ts":1742599308965,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$473Gy5DaKnWEpk1StADTjKUsFlMoDhB-ko7BxbO1arE"},
{"content":{"body":"I don't see any discussions of CSP in that thread or anything in the PR which touches CSP","m.mentions":{},"msgtype":"m.text"},"ts":1742599487920,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UNJwBc7YdSf9owqrxv5kURWew80A_KTQX49CqC0XkUY"},
{"content":{"body":"did you mean to link a different one?","m.mentions":{},"msgtype":"m.text"},"ts":1742599491644,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SL8qameg3WxP-gtK5HZAjpilHZmzYbpBdAU-JSmr9Mk"}
]