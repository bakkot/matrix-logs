[
{"content":{"body":"The problem is that this is not just a graph, but each node has also a ton of different states, and for evaluation they are _all_ relevant","msgtype":"m.text"},"ts":1746167733449,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$oxNsTK2yIY8KQplcAqd0IgoBLsnNOcfVrYExWUWC4JY"},
{"content":{"body":"I do have an interactive example (linked to in that PR), maybe I could join the next editors call and we could consider how to embed smaller versions of it in the spec, together with the existing examples?","msgtype":"m.text"},"ts":1746167776330,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$KyUWuCaFnanCPcfytqV4FxtoDq2d7INFdV6i3nxE3C4"},
{"content":{"body":"shu Maybe another approach would be to make [[Status]] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.\n\ne.g. given that [[AsyncEvaluationOrder]] is only relevant while a module is evaluating-async, it would be used as `If _module_.[[Status]] is an AsyncEvaluationState Record, use _module_.[[Status]].[[AsyncEvaluationOrder]]`","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> Maybe another approach would be to make [[Status]] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.</p>\n<p>e.g. given that [[AsyncEvaluationOrder]] is only relevant while a module is evaluating-async, it would be used as <code>If _module_.[[Status]] is an AsyncEvaluationState Record, use _module_.[[Status]].[[AsyncEvaluationOrder]]</code></p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"ts":1746175934268,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_hD-SWdTn3iwLZlqpkVBT3ScSJWgAkRA79rHIxaET6o"},
{"content":{"body":"Or like, [[EvaluationError]] would be defined on the EvaluatedState Record","m.mentions":{},"msgtype":"m.text"},"ts":1746175971357,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CVqhj3cpCSj5gExxffyGegHWMOMOa27nmDOe7PmAVuo"},
{"content":{"body":"Or maybe we could draw some sort of state machine representing the various valid intermediate states that modules go through during the process, and how they transition between them","m.mentions":{},"msgtype":"m.text"},"ts":1746176218700,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$fFIsM4uIRVlURtmaLEDVwrtFpaeylFtmTWZTxgoB7WY"},
{"content":{"body":"* shu Maybe another approach would be to make \\[\\[Status\\]\\] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.\n\ne.g. given that \\[\\[AsyncEvaluationOrder\\]\\] is only relevant while a module is evaluating-async, it would be used as `Assert: _module_.[[Status]] is an AsyncEvaluationState Record. Use _module_.[[Status]].[[AsyncEvaluationOrder]]`","format":"org.matrix.custom.html","formatted_body":"* <p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> Maybe another approach would be to make [[Status]] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.</p>\n<p>e.g. given that [[AsyncEvaluationOrder]] is only relevant while a module is evaluating-async, it would be used as <code>Assert: _module_.[[Status]] is an AsyncEvaluationState Record. Use _module_.[[Status]].[[AsyncEvaluationOrder]]</code></p>\n","m.mentions":{},"m.new_content":{"body":"shu Maybe another approach would be to make \\[\\[Status\\]\\] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.\n\ne.g. given that \\[\\[AsyncEvaluationOrder\\]\\] is only relevant while a module is evaluating-async, it would be used as `Assert: _module_.[[Status]] is an AsyncEvaluationState Record. Use _module_.[[Status]].[[AsyncEvaluationOrder]]`","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">shu</a> Maybe another approach would be to make [[Status]] an enum with a payload, like Rust enums, so that the various slots are only available when they are relevant, and they transition more atomically.</p>\n<p>e.g. given that [[AsyncEvaluationOrder]] is only relevant while a module is evaluating-async, it would be used as <code>Assert: _module_.[[Status]] is an AsyncEvaluationState Record. Use _module_.[[Status]].[[AsyncEvaluationOrder]]</code></p>\n","m.mentions":{"user_ids":["@shuyuguo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_hD-SWdTn3iwLZlqpkVBT3ScSJWgAkRA79rHIxaET6o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1746177686438,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$q2o1Fa71myhNdLhBauahuoamcWjbksjDSDTmSaKtpv4"},
{"content":{"body":"I opened a PR with a test262 test for a top-level await case that was not previously covered, if anybody has time please review :) https://github.com/tc39/test262/pull/4465","m.mentions":{},"msgtype":"m.text"},"ts":1746179584063,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$44HBT3lthMw7B0HzJq2X5L1qXT1xf23kyZ0-7hECEYo"},
{"content":{"body":"it'd be very late for you in CET, but would be appreciated","format":"org.matrix.custom.html","formatted_body":"it&#39;d be very late for you in CET, but would be appreciated","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KyUWuCaFnanCPcfytqV4FxtoDq2d7INFdV6i3nxE3C4"}},"msgtype":"m.text"},"ts":1746198897875,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$O-oZG37vjfYv12QX8ozZeSMQFFT_ynZUnjOiKR1b6jU"}
]