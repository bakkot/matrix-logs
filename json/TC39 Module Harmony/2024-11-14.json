[
{"content":{"body":"I'm a couple minutes late","msgtype":"m.text"},"ts":1731600016326,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9Fxt_UxDtuAKSO86ftQcwxLHFTf7xnUag_NDkutybcc"},
{"content":{"body":"guybedford nicolo-ribaudo i took a quick look, and i might actually be able to facilitate import.meta.load(). I'm doing a quick PoC right now.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> i took a quick look, and i might actually be able to facilitate import.meta.load(). I'm doing a quick PoC right now.","msgtype":"m.text"},"ts":1731603655497,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$jgFxMbOxz-nOwHhbANQR5ca8C20AfVUMm5irBanNYMQ"},
{"content":{"body":"I assume that is as much problematic to Guy as .require :P","msgtype":"m.text"},"ts":1731603824092,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$coQXguNaNAeqmOJrdU-c-ddHGgKfrGsFk4Fj1b8jB8A"},
{"content":{"body":"Why? Isn't his objection about commonjs? (import.meta.load() would use esm)","msgtype":"m.text"},"ts":1731603991846,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$4VNa1JPK4LmW0mnqJu8nkmye6kj7xcyWZyQ5Sn0ZMDk"},
{"content":{"body":"Recording and summary of today's meeting: https://app.fireflies.ai/view/TC39-Module-Harmony::qn4hiX7NVrtLJ7ax","msgtype":"m.text"},"ts":1731604012296,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$Ul17MzZHABXIJCoIMI7G_vbK8311eIbwQBhAEzZk2aE"},
{"content":{"body":"> <@jakobjingleheimer:matrix.org> Why? Isn't his objection about commonjs? (import.meta.load() would use esm)\n\nI think the objection is to it being just a function that you can grab and pass around, making it as hard to statically analyze as require calls","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$4VNa1JPK4LmW0mnqJu8nkmye6kj7xcyWZyQ5Sn0ZMDk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jakobjingleheimer:matrix.org\">@jakobjingleheimer:matrix.org</a><br />Why? Isn't his objection about commonjs? (import.meta.load() would use esm)</blockquote></mx-reply>I think the objection is to it being just a function that you can grab and pass around, making it as hard to statically analyze as require calls","m.relates_to":{"m.in_reply_to":{"event_id":"$4VNa1JPK4LmW0mnqJu8nkmye6kj7xcyWZyQ5Sn0ZMDk"}},"msgtype":"m.text"},"ts":1731604093037,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$xDt5By0mb7gwen2RaTywYZRzs7p5PJuXLdY0-XxX9xU"},
{"content":{"body":"I think statically analyzable import capabilities belong in TC39","m.mentions":{},"msgtype":"m.text"},"ts":1731604455950,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$uz5zE02KYa0xW3fKJNBW5rxm9bdpVzC0AAYWl_6JrWs"},
{"content":{"body":"and `import.meta` is a dangerous place for things in general","format":"org.matrix.custom.html","formatted_body":"and <code>import.meta</code> is a dangerous place for things in general","m.mentions":{},"msgtype":"m.text"},"ts":1731604479037,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2-5NyoGSojV_wCkVaUu2SospkOMNj7NheYoLfg-9xuE"},
{"content":{"body":"that we should have a very high bar for","m.mentions":{},"msgtype":"m.text"},"ts":1731604487654,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$qZ1VaVfMSYsQsk61jniQMwoEWgaHK7q4nTDb9IQlNA0"},
{"content":{"body":"but Node.js can have module loading helpers under its builtin modules that offer features like preloading etc for sure","m.mentions":{},"msgtype":"m.text"},"ts":1731604506660,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$bG2cnCi-g4T89rahRDdsyPSP8IUETYTEjQIwM-5q1MU"},
{"content":{"body":"just like browsers have custom preloading","m.mentions":{},"msgtype":"m.text"},"ts":1731604513371,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$g6aCmGeH5Rvw0IaCQd6iIG4BcHgPg5XMJ1BzQbcZL_Y"},
{"content":{"body":"I'd just suggest it be a `import { preload } from 'node:module'` or something like that so it's clear it's Node.js specific","format":"org.matrix.custom.html","formatted_body":"I'd just suggest it be a <code>import { preload } from 'node:module'</code> or something like that so it's clear it's Node.js specific","m.mentions":{},"msgtype":"m.text"},"ts":1731604532878,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$aRxsKawugYduui0WVsW5rY2J19STqzwk34l6elGmmj4"},
{"content":{"body":"Isn't import.meta that space? Also, that's where node-like runtimes are supposed to put these sorts of things.\n\nThere are cumbersome drawbacks to it being on node:module instead of import.meta. Notably:\n\nThis is possible:\nimport.meta.load('./foo.js')\n\nThis is not:\npreload('./foo.js')\n\nInstead it would have to be\npreload(import.meta.resolve('./foo.js'))\n\nOr\n\npreload('./foo.js', import.meta.url)","format":"org.matrix.custom.html","formatted_body":"<p>Isn't import.meta that space? Also, that's where node-like runtimes are supposed to put these sorts of things.</p>\n<p>There are cumbersome drawbacks to it being on node:module instead of import.meta. Notably:</p>\n<p>This is possible:<br />\nimport.meta.load('./foo.js')</p>\n<p>This is not:<br />\npreload('./foo.js')</p>\n<p>Instead it would have to be<br />\npreload(import.meta.resolve('./foo.js'))</p>\n<p>Or</p>\n<p>preload('./foo.js', import.meta.url)</p>","msgtype":"m.text"},"ts":1731604984241,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$ws5ccn4c5PAX2Ij4zCqmqdeZonseupUXNcOSVVRLL7s"},
{"content":{"body":"Btw my initial PoC for import.meta.load is working. I'd need to try it with a loader registered to say it's likely possible.\n\nBut if it doesn't facilitate what you want, then i won't bother","format":"org.matrix.custom.html","formatted_body":"<p>Btw my initial PoC for import.meta.load is working. I'd need to try it with a loader registered to say it's likely possible.</p>\n<p>But if it doesn't facilitate what you want, then i won't bother</p>","msgtype":"m.text"},"ts":1731605078925,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$fyLvQ2OhDmi4e7iX6R41cO7uN88Mt_BERgXLtxJ3R6U"},
{"content":{"body":"It facilitates what i want though ðŸ˜œ","msgtype":"m.text"},"ts":1731605216558,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$e4rhTnsWLD8YiI6rlkVWNmhflU2cVTxz4OaF43T8Pms"},
{"content":{"body":"guybedford ðŸ‘€","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> ðŸ‘€","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1731611545123,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$L0hPnf7jVdEamnVCm7HDb84BHsSkAG36sfAPu-YyVzU"},
{"content":{"body":"`import.meta` is dangerous in the context of things not being standard, while `import x from 'node:x'` is clearly Node.js specific","format":"org.matrix.custom.html","formatted_body":"<code>import.meta</code> is dangerous in the context of things not being standard, while <code>import x from 'node:x'</code> is clearly Node.js specific","m.mentions":{},"msgtype":"m.text"},"ts":1731613070916,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QuH6d_mx_eR248rz47CuxY9JL9lMmbVpPS58K5uUusI"},
{"content":{"body":"there was discussion in the past about `import.meta.node.feat` as being environment-specific","format":"org.matrix.custom.html","formatted_body":"there was discussion in the past about <code>import.meta.node.feat</code> as being environment-specific","m.mentions":{},"msgtype":"m.text"},"ts":1731613084461,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$wVAZgnoV1O-1hfGtmChE_o7IOiMJOZH6BZtrbl2xMYc"},
{"content":{"body":"even that still concerns me though...","m.mentions":{},"msgtype":"m.text"},"ts":1731613093092,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$r-ylO7uIfT5AlPIzhtpCIooj9trLLvpa99JzBCb0tas"},
{"content":{"body":"That's what WinterCG is for and possibly TC-something","msgtype":"m.text"},"ts":1731613417279,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$Nc9JVo748xZjnXXQiBDae3Cz9BTC15TcYNzjN8hvD5Y"},
{"content":{"body":"* That's what WinterCG is for and possibly TC-something when WinterCG gets promoted","m.new_content":{"body":"That's what WinterCG is for and possibly TC-something when WinterCG gets promoted","msgtype":"m.text"},"m.relates_to":{"event_id":"$Nc9JVo748xZjnXXQiBDae3Cz9BTC15TcYNzjN8hvD5Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731613436965,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$T37OOC6V5kwlQHyqhBHuQ4AvA226NT9iGG2hGaO8D64"},
{"content":{"body":"yeah that would be ideal for `import.meta` stuff, with a high bar for criteria of what is required for its standards","format":"org.matrix.custom.html","formatted_body":"yeah that would be ideal for <code>import.meta</code> stuff, with a high bar for criteria of what is required for its standards","m.mentions":{},"msgtype":"m.text"},"ts":1731613581661,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$yI06YEkh9gTRAqPFjqiGgYcwaetrs_AO_J5QCEykgMs"},
{"content":{"body":"Soooo sounds like Guy's onboard","msgtype":"m.text"},"ts":1731614115961,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$Lu076X_NrqjSxBE7hGxP5zNBehAj0Krq5L9MHLLxO10"},
{"content":{"body":"What does this preload facility do?","m.mentions":{},"msgtype":"m.text"},"ts":1731614287814,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$Ebe-Rgj3JvhDqJZ4CPijIo75t8t0mHBbmlKSWdzXCqc"},
{"content":{"body":"Is it effectively a transitive `import source`?","format":"org.matrix.custom.html","formatted_body":"Is it effectively a transitive <code>import source</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1731614316865,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$gHfQEW01c8LV9z6pVdj4hdwv33htfHrXMVK_jfUb1X8"},
{"content":{"body":"> <@kriskowal:aelf.land> What does this preload facility do?\n\nIt's the equivalent of the html preload. Aka get this ready cuz i'ma use it soon.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24Ebe-Rgj3JvhDqJZ4CPijIo75t8t0mHBbmlKSWdzXCqc\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>What does this preload facility do?</blockquote></mx-reply>It's the equivalent of the html preload. Aka get this ready cuz i'ma use it soon.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ebe-Rgj3JvhDqJZ4CPijIo75t8t0mHBbmlKSWdzXCqc"}},"msgtype":"m.text"},"ts":1731614466716,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$_xyipBeG3VCuXyUcc7lpEunR3_V5sFOKlj1cIG4D_Gg"},
{"content":{"body":"Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as `compartment.load`, which implies `import.load(x)` and `import load \"x\"' in the fullness of time.","format":"org.matrix.custom.html","formatted_body":"Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as <code>compartment.load</code>, which implies <code>import.load(x)</code> and `import load \"x\"' in the fullness of time.","m.mentions":{},"msgtype":"m.text"},"ts":1731614600831,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$oOkUB3ZaWAKS5AxGM3U9tc84r3__1igTR9lO9hLB5rw"},
{"content":{"body":" * Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as `compartment.load`, which implies `import.load(x)` and `import load \"x\"` in the fullness of time.","format":"org.matrix.custom.html","formatted_body":" * Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as <code>compartment.load</code>, which implies <code>import.load(x)</code> and <code>import load \"x\"</code> in the fullness of time.","m.mentions":{},"m.new_content":{"body":"Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as `compartment.load`, which implies `import.load(x)` and `import load \"x\"` in the fullness of time.","format":"org.matrix.custom.html","formatted_body":"Yeah, so in terms of module harmony, thatâ€™d drive the importHook for the entry module and its transitive dependencies but not cause any of them to be evaluated if they havenâ€™t been already. I am in support of having the feature, and itâ€™s part of the Compartment proposal as <code>compartment.load</code>, which implies <code>import.load(x)</code> and <code>import load \"x\"</code> in the fullness of time.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$oOkUB3ZaWAKS5AxGM3U9tc84r3__1igTR9lO9hLB5rw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731614610408,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$shwuDTWE1CEFjkP2R7YtDQDW3o2w8TJVbMPt9Ak7XiY"},
{"content":{"body":"I recall Node folks being cautious about `import.meta.resolve` because it increases the allocation burden to one new closure for every module that utters `import.meta`. I think that just pushes you more toward `preload(x, import.meta.url)` for a stopgap. If the feature is enshrined at TC39, it should be `import.load`, which is syntax and doesnâ€™t imply a closure.","format":"org.matrix.custom.html","formatted_body":"I recall Node folks being cautious about <code>import.meta.resolve</code> because it increases the allocation burden to one new closure for every module that utters <code>import.meta</code>. I think that just pushes you more toward <code>preload(x, import.meta.url)</code> for a stopgap. If the feature is enshrined at TC39, it should be <code>import.load</code>, which is syntax and doesnâ€™t imply a closure.","m.mentions":{},"msgtype":"m.text"},"ts":1731614797344,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$FU8jaE2_5gmU7TsOxAKjvj6gUy_AQtnbbvEpOjPB8FU"},
{"content":{"body":"Yes, that is an issue. We have an idea how to mitigate that. For now, i think we can ignore that issue (it's kinda my problem ðŸ˜‰)\n\nIt's most applicable to node-like, there's a tiny use-case for browsers, which is ehy i think import.meta is the place for it","format":"org.matrix.custom.html","formatted_body":"<p>Yes, that is an issue. We have an idea how to mitigate that. For now, i think we can ignore that issue (it's kinda my problem ðŸ˜‰)</p>\n<p>It's most applicable to node-like, there's a tiny use-case for browsers, which is ehy i think import.meta is the place for it</p>","msgtype":"m.text"},"ts":1731615085145,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$napSP19b_NO2W71ojXJhP1aT_zVRM1Usl8bytAv9ans"},
{"content":{"body":"In general though I think we should try to aim for as a goal - does this make sense in TC39 first? If so, first explore that. If not, then WinterCG. If not, then platform-specific standards.","m.mentions":{},"msgtype":"m.text"},"ts":1731615222890,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$NbAFv5BsNONwV2p6W9yH3n_mXMvvgVBJsD5SIjoURYU"},
{"content":{"body":"I am in favor `import load` and `import.load` in 262. Node.js can deprecate `import.meta.load`, browsers would not be able to.","format":"org.matrix.custom.html","formatted_body":"I am in favor <code>import load</code> and <code>import.load</code> in 262. Node.js can deprecate <code>import.meta.load</code>, browsers would not be able to.","m.mentions":{},"msgtype":"m.text"},"ts":1731615336463,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$7DDBOdVuwHEdfA_CERxBef18D9OGsdzj10uX86RZfGY"},
{"content":{"body":"Sure, we can go TC39 first ðŸ™‚","msgtype":"m.text"},"ts":1731620131074,"senderName":"jakobjingleheimer","senderId":"@jakobjingleheimer:matrix.org","id":"$P3reSwoRYBJWt5JDjTafwbMoktvJB8ihtgdgRcM7AUg"}
]