[
{"content":{"body":"At plenary bakkot expressed dispreference for ModuleSource carrying a non-transferrable importHook. We pretty fully explored and I’ve shelved a design wit ha separate Module constructor, which I’m open to reexamining, but have come to appreciate primacy of ModuleSource as the target of dynamic import, avoiding a need for an `import module` and `import.module` to designate a module instance without forcing evaluation, and other questions like whether module expressions produce Module or ModuleSource instances.\n\nIt occurs to me that we’ve already stepped away from having a per-module-instance module-map, just a module-map on `new Global`. I think that means that the only reason to prefer `importHook` on `Module` or `ModuleSource` is that resolution of import specifiers to full specifiers in the scope of the global module map. So, I am open to revisiting the idea of constructing a `ModuleSource` with some kind of transferable data bag that could express the base specifier.","format":"org.matrix.custom.html","formatted_body":"<p>At plenary <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> expressed dispreference for ModuleSource carrying a non-transferrable importHook. We pretty fully explored and I’ve shelved a design wit ha separate Module constructor, which I’m open to reexamining, but have come to appreciate primacy of ModuleSource as the target of dynamic import, avoiding a need for an <code>import module</code> and <code>import.module</code> to designate a module instance without forcing evaluation, and other questions like whether module expressions produce Module or ModuleSource instances.</p>\n<p>It occurs to me that we’ve already stepped away from having a per-module-instance module-map, just a module-map on <code>new Global</code>. I think that means that the only reason to prefer <code>importHook</code> on <code>Module</code> or <code>ModuleSource</code> is that resolution of import specifiers to full specifiers in the scope of the global module map. So, I am open to revisiting the idea of constructing a <code>ModuleSource</code> with some kind of transferable data bag that could express the base specifier.</p>\n","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"msgtype":"m.text"},"ts":1754072290689,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$JueUDMBNX04SQwePllDFQwbPxUR82rjV6JJD-NjPJKg"}
]