[
{"content":{"body":"Kris Kowal: ok, I think I don't understand why the origin needs to be in EcmaScript. Is this to allow emulation of the html loader? should this be something that is on the html side, where we serialize it, and then when deserializing it we do a check? It may be that I am unfamiliar with the use case. ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: ok, I think I don't understand why the origin needs to be in EcmaScript. Is this to allow emulation of the html loader? should this be something that is on the html side, where we serialize it, and then when deserializing it we do a check? It may be that I am unfamiliar with the use case.","m.mentions":{"user_ids":["@kriskowal:matrix.org"]},"msgtype":"m.text"},"ts":1699459955732,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$T_tJbDgNsNlROPr_ugHrYBDShaFnc88IuhBgItawxO0"},
{"content":{"body":"I think that this is different than the above mentioned module graphnode instance, correct me if i am wrong and these are intrinsically related","m.mentions":{},"msgtype":"m.text"},"ts":1699460000230,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$4Z3LzFYm8WcJ-pWFqrlzo4GN_Ojn1oMlIBthKQ2hTNo"},
{"content":{"body":"Origin does not need to be in ECMAScript.","m.mentions":{},"msgtype":"m.text"},"ts":1699466975267,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SlF1KghyJUKaHwzOoSbXUKYQAKEzfCOTd8OIs0CBwJI"},
{"content":{"body":"Much of this conversation about module graph replication is scoping out the shape of the ECMAScript side necessary to ensure HTML integration is coherent. To that end, there’s an internal slot for host data on module records today that we’re proposing will need to get distributed between internal slots of the module source record and module instance record.","m.mentions":{},"msgtype":"m.text"},"ts":1699467736575,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ocy1rLR176KFVkV3GhNA1hH9kCBPc49IxgTyg3dknlQ"},
{"content":{"body":"Specifically, we anticipate that in all of the proposed design families, the origin information would have to move from the module record to the module source record.","m.mentions":{},"msgtype":"m.text"},"ts":1699467778171,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2WAP_TJquytdwNWCBnDMHoOuXkNrwyxTqo-w9fAM-mA"},
{"content":{"body":" * Specifically, we anticipate that in all of the proposed design families, for HTML integration the origin information would have to move from the module record to the module source record.","m.mentions":{},"m.new_content":{"body":"Specifically, we anticipate that in all of the proposed design families, for HTML integration the origin information would have to move from the module record to the module source record.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2WAP_TJquytdwNWCBnDMHoOuXkNrwyxTqo-w9fAM-mA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1699467796615,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1VQY9N1ZjQSj-YFsztAQ2QuK5hQevok78wqfYJNqBMU"},
{"content":{"body":"In the second design family, the host-specific data on a module source record would need to go on to include the full URL and that the host-specific import behavior would use that as the key for its module map. Module instances would adopt their local module subgraph wholesale from the existing host-specific URL-to-module-map.","m.mentions":{},"msgtype":"m.text"},"ts":1699467941830,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NLAhfuvYrXdlA0FM8_dtz0besocw3Z2p5KVxeqVZ9kM"},
{"content":{"body":"(with the caveat that the keys of the module-instance-map are keyed on import specifier, not fully resolved module specifier, which is the URL in web and node per-realm module-map)","m.mentions":{},"msgtype":"m.text"},"ts":1699468032009,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bJPkQa8d86xn20cJ6ejJIyMUh8CEmCeqQPJq7tqUFmA"}
]