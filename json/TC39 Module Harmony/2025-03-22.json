[
{"content":{"body":"I think the spec is actually fine on this front for `import source foo from \"foo.wasm\"`","format":"org.matrix.custom.html","formatted_body":"I think the spec is actually fine on this front for <code>import source foo from \"foo.wasm\"</code>","m.mentions":{},"msgtype":"m.text"},"ts":1742601921492,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OmLBcwMOciHUkOLKaMS8BjmLSw2eNW9wHDklT_F451U"},
{"content":{"body":"ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the `script-src-elem` pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either `script-src-elem`, `script-src`, or `default-src` to apply","format":"org.matrix.custom.html","formatted_body":"ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the <code>script-src-elem</code> pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either <code>script-src-elem</code>, <code>script-src</code>, or <code>default-src</code> to apply","m.mentions":{},"msgtype":"m.text"},"ts":1742602058292,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ty0VkNzcfd13ShvVzCVy40WxKJb5fHNKZZ8UrImyghQ"},
{"content":{"body":"* ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the `script-src-elem` pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either `script-src-elem`, `script-src`, or `default-src` to apply (the first of those which is present)","format":"org.matrix.custom.html","formatted_body":"* ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the <code>script-src-elem</code> pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either <code>script-src-elem</code>, <code>script-src</code>, or <code>default-src</code> to apply (the first of those which is present)","m.mentions":{},"m.new_content":{"body":"ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the `script-src-elem` pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either `script-src-elem`, `script-src`, or `default-src` to apply (the first of those which is present)","format":"org.matrix.custom.html","formatted_body":"ES calls HostLoadImportedModule as defined in HTML, which does a fetch with destination \"script\", which triggers the <code>script-src-elem</code> pre-request check in CSP (why \"elem\"? ehhhhhhhhhhh), which will cause either <code>script-src-elem</code>, <code>script-src</code>, or <code>default-src</code> to apply (the first of those which is present)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ty0VkNzcfd13ShvVzCVy40WxKJb5fHNKZZ8UrImyghQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1742602073982,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OzHEpFgePVHFwe6_z_yV1EzcPheUOBW2jaFxvuKfAzA"},
{"content":{"body":"I assume the intention is that if this check passes then the module is allowed to run","m.mentions":{},"msgtype":"m.text"},"ts":1742602079429,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FI01I2jpl54ZbHBf2Om7NeSjVIwZKvfeHioTHN5QbN8"},
{"content":{"body":"where \"this check\" means \"the governing CSP directive lists the script's URL as an allowed host source\" or (I think?) \"there is an allowed hash source in the import map\" as of https://github.com/whatwg/html/pull/10269","m.mentions":{},"msgtype":"m.text"},"ts":1742602249718,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$4ke5mR7iplpJycO3KmSEAyoSd2uWSP0yi3yahzMZBlk"},
{"content":{"body":"note that this is _not_ how it works for webassembly outside of ESM integration; `WebAssembly.instantiateStreaming` is (empirically; this is not specified afaict) governed only by the `unsafe-eval` or `unsafe-wasm-eval` source expressions even when loading a wasm script from an allowed source, never by host or hash sources","format":"org.matrix.custom.html","formatted_body":"note that this is <em>not</em> how it works for webassembly outside of ESM integration; <code>WebAssembly.instantiateStreaming</code> is (empirically; this is not specified afaict) governed only by the <code>unsafe-eval</code> or <code>unsafe-wasm-eval</code> source expressions even when loading a wasm script from an allowed source, never by host or hash sources","m.mentions":{},"msgtype":"m.text"},"ts":1742602285928,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pW0JKFt8BV-BSdg2YJM-lZVB9qYdFW2wotiVsZtiEvE"},
{"content":{"body":"(which is dumb but whatever I guess)","m.mentions":{},"msgtype":"m.text"},"ts":1742602292085,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$LedzFdQD-j2lnSarf43-srbShfbThRlgFc6OOXPvEqY"},
{"content":{"body":"looks like there's a WPT for `<script type=\"module\" src=\"./resources/execute-start.wasm\"></script>` but not for `import source`","format":"org.matrix.custom.html","formatted_body":"looks like there's a WPT for <code>&lt;script type=\"module\" src=\"./resources/execute-start.wasm\"&gt;&lt;/script&gt;</code> but not for <code>import source</code>","m.mentions":{},"msgtype":"m.text"},"ts":1742602574381,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xA3Hp_gDiqwR-t1DtsbaC_XU168tkUX1RkxtKttogaE"}
]