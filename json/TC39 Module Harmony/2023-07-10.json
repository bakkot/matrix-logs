[
{"content":{"body":"There are also people who “believe in” ShadowRealms and don’t “believe in” lockdown. Objectively I think ShadownRealms have a smaller attack surface.","msgtype":"m.text"},"ts":1688998781975,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ij2PiVj2Hs1R4n94Jc4R8qwe4zx3JBZc5sJttqT-y44"},
{"content":{"body":"I am interested in this area of understanding how to guard against malicious dependencies. I don’t see how any kind of isolation mechanism can be enough to guard against logic errors which are at the center of some issues. I hope we in TC39 can discuss how to improve communication about important updates, and how to maintain good dependency metadata, in the future.","msgtype":"m.text"},"ts":1688999012406,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fmQwsVux4A8MSio3Hkvmp63_H5Y82mFlQUgUbttLFu4"},
{"content":{"body":"> <@littledan:matrix.org> I am interested in this area of understanding how to guard against malicious dependencies. I don’t see how any kind of isolation mechanism can be enough to guard against logic errors which are at the center of some issues. I hope we in TC39 can discuss how to improve communication about important updates, and how to maintain good dependency metadata, in the future.\n\nLavaMoat uses Hardened Javascript (SES) to isolate each dependency into a separate Compartment and only allow access to globals and imports listed in a policy. The Principle of Least Authority approach + an assumption that an initial trusted state exists (or a necessity to review the generated policy) guard against malicious packages reaching for unexpected powers/APIs or attempting poisoning of prototypes or objects passed around.\n\nIt is still possible for a package to deliberately introduce a vulnerability in the implementation of eg. a cryptographic function. But the main concern are packages being taken over or corrupted to perform general-purpose attacks like sending process.env serialized to a 3rdparty server.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$fmQwsVux4A8MSio3Hkvmp63_H5Y82mFlQUgUbttLFu4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I am interested in this area of understanding how to guard against malicious dependencies. I don’t see how any kind of isolation mechanism can be enough to guard against logic errors which are at the center of some issues. I hope we in TC39 can discuss how to improve communication about important updates, and how to maintain good dependency metadata, in the future.</blockquote></mx-reply><p>LavaMoat uses Hardened Javascript (SES) to isolate each dependency into a separate Compartment and only allow access to globals and imports listed in a policy. The Principle of Least Authority approach + an assumption that an initial trusted state exists (or a necessity to review the generated policy) guard against malicious packages reaching for unexpected powers/APIs or attempting poisoning of prototypes or objects passed around.</p>\n<p>It is still possible for a package to deliberately introduce a vulnerability in the implementation of eg. a cryptographic function. But the main concern are packages being taken over or corrupted to perform general-purpose attacks like sending process.env serialized to a 3rdparty server.</p>\n","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$fmQwsVux4A8MSio3Hkvmp63_H5Y82mFlQUgUbttLFu4"}},"msgtype":"m.text"},"ts":1688999504535,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$0IEXWLb1ms2ZPAVRKic5a9OVwCjCp9wajri-wkjqako"}
]