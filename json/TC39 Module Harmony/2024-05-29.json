[
{"content":{"body":"At the last TG3 meeting, I volunteered to figure out what we used `exports` (a list of all exported names) for on `ModuleSource`. The answer is somewhat weak…","format":"org.matrix.custom.html","formatted_body":"At the last TG3 meeting, I volunteered to figure out what we used <code>exports</code> (a list of all exported names) for on <code>ModuleSource</code>. The answer is somewhat weak…","m.mentions":{},"msgtype":"m.text"},"ts":1716943837367,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$JnCnkCiZd4kERglUNSJsBwcdlvG7ESgAsRhHl1yKK3g"},
{"content":{"body":"The virtual module source “handler” must contain a property that describes all the names it exports and all the specifiers it imports and reexports.","m.mentions":{},"msgtype":"m.text"},"ts":1716943922976,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$PTQQd8JYkWfcx5FhqC-eDb2R0iXXNkU4U-4TlFz4gjY"},
{"content":{"body":"There is no firm reason that the schema of the virtual module source handler should be identical to a `ModuleSource`, and we don’t currently use the `exports` property of actual/vicious `ModuleSource` instances for anything.","format":"org.matrix.custom.html","formatted_body":"There is no firm reason that the schema of the virtual module source handler should be identical to a <code>ModuleSource</code>, and we don’t currently use the <code>exports</code> property of actual/vicious <code>ModuleSource</code> instances for anything.","m.mentions":{},"msgtype":"m.text"},"ts":1716943992709,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$w0rgS_Kt5VFumXrEZxmNn-un5p5PYAZOramPSu0ra3A"},
{"content":{"body":"I personally have a strong æsthetic preference that, if `ModuleSource` and a virtual `ModuleSource` communicate the same information that they use the same schema.","format":"org.matrix.custom.html","formatted_body":"I personally have a strong æsthetic preference that, if <code>ModuleSource</code> and a virtual <code>ModuleSource</code> communicate the same information that they use the same schema.","m.mentions":{},"msgtype":"m.text"},"ts":1716944105796,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$pe09sDFXAHGlliKtRXAS2yQAECAKYJiZbEFJGtKEjRY"},
{"content":{"body":"I can _imagine_ using a virtual module source to mock an actual/vicious module source, and for that, I would definitely need to both consume the reflection information off the actual module source and provide the same properties on the handler of a virtual module source.","format":"org.matrix.custom.html","formatted_body":"I can <em>imagine</em> using a virtual module source to mock an actual/vicious module source, and for that, I would definitely need to both consume the reflection information off the actual module source and provide the same properties on the handler of a virtual module source.","m.mentions":{},"msgtype":"m.text"},"ts":1716944174128,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$cBpDG-sfSeqCqYFnP1g5hv4tpRdUTEFsJBP-FMKQ1zw"},
{"content":{"body":"So, let’s chalk up “module mocks” as a motivating use case for both module source reflection and virtual module sources. They can’t be done without both features.","m.mentions":{},"msgtype":"m.text"},"ts":1716944237587,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$YbXQcAMOzGnLj35XxEREMnUGMcvtbkGl43CGtcTP_oU"},
{"content":{"body":"Correction: “module mocks” could be done with “module source reflection” and code generation (in lieu of virtual module sources).","m.mentions":{},"msgtype":"m.text"},"ts":1716944286329,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$df2BKTXLl_0jHFjoNdooiIcL_VWqppqxYjlK41sBmHg"},
{"content":{"body":" * Correction: “module mocks” could be done with “module source reflection”, code generation and the JavaScript “ModuleSource(source)” constructor (in lieu of virtual module sources).","m.mentions":{},"m.new_content":{"body":"Correction: “module mocks” could be done with “module source reflection”, code generation and the JavaScript “ModuleSource(source)” constructor (in lieu of virtual module sources).","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$df2BKTXLl_0jHFjoNdooiIcL_VWqppqxYjlK41sBmHg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716944317802,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$9MFkCgDHHhNKS247JpH1FLFxfTvhRq2LexIN64vqp5k"},
{"content":{"body":"i like `optional import x from 'y'`, that's read most natural to me","format":"org.matrix.custom.html","formatted_body":"i like <code>optional import x from 'y'</code>, that's read most natural to me","msgtype":"m.text"},"ts":1716963138749,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$xKoNok5dzMEui9HYswkGFO5WKEMke4YsATml_B1TpmE"},
{"content":{"body":"what could have been… `from 'y' optionally import 'x‘","msgtype":"m.text"},"ts":1716995533457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GemqnXMsKcq9weqZg_ZhmUmDGhwJ718hW6DCU7P7i_A"},
{"content":{"body":"* what could have been… `from 'y' optionally import 'x‘`","format":"org.matrix.custom.html","formatted_body":"* what could have been… <code>from 'y' optionally import 'x‘</code>","m.new_content":{"body":"what could have been… `from 'y' optionally import 'x‘`","format":"org.matrix.custom.html","formatted_body":"what could have been… <code>from 'y' optionally import 'x‘</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$GemqnXMsKcq9weqZg_ZhmUmDGhwJ718hW6DCU7P7i_A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716995539890,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$h7SjekgBV7kDzWwj4XxRNpBOorwPIWjnFcqsAqm8ZrI"},
{"content":{"body":"> <@kriskowal:aelf.land> I can _imagine_ using a virtual module source to mock an actual/vicious module source, and for that, I would definitely need to both consume the reflection information off the actual module source and provide the same properties on the handler of a virtual module source.\n\nI’m struggling to create an example of an “instrumenting mock” example based on this idea because of live bindings. It may be helpful to jam with someone with an iron in the mocking fire.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$cBpDG-sfSeqCqYFnP1g5hv4tpRdUTEFsJBP-FMKQ1zw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:aelf.land\">@kriskowal:aelf.land</a><br>I can <em>imagine</em> using a virtual module source to mock an actual/vicious module source, and for that, I would definitely need to both consume the reflection information off the actual module source and provide the same properties on the handler of a virtual module source.</blockquote></mx-reply>I’m struggling to create an example of an “instrumenting mock” example based on this idea because of live bindings. It may be helpful to jam with someone with an iron in the mocking fire.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$cBpDG-sfSeqCqYFnP1g5hv4tpRdUTEFsJBP-FMKQ1zw"}},"msgtype":"m.text"},"ts":1717002922257,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$OZe5Ilxm5_vi2Rx816v8Urh9O_cQPBysJ6xjHqAbcCc"},
{"content":{"body":"when we were working through use cases, we very much did design for this one as a key use case","m.mentions":{},"msgtype":"m.text"},"ts":1717003851287,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$tscKcZU3PMoqQQPdlUJeMD_V2bqmAd9M5OosZWY8vL8"},
{"content":{"body":"there's an example here during some of our loader design discussions - https://github.com/lucacasonato/module-harmony-usecases/blob/main/module-wrapper/main.js","m.mentions":{},"msgtype":"m.text"},"ts":1717003867686,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$r1RE7O83ptU5j4ndiocp_U6iW4Sy9WD7AHR1DpmCEJ8"},
{"content":{"body":" * there's an example here from during some of our loader design discussions - https://github.com/lucacasonato/module-harmony-usecases/blob/main/module-wrapper/main.js","m.mentions":{},"m.new_content":{"body":"there's an example here from during some of our loader design discussions - https://github.com/lucacasonato/module-harmony-usecases/blob/main/module-wrapper/main.js","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$r1RE7O83ptU5j4ndiocp_U6iW4Sy9WD7AHR1DpmCEJ8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717003874445,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$1oeTJnv5QNHcYmTDNKYfBhlJHKl9AvwfcnZplWEe4C4"},
{"content":{"body":"outdated now, but may be helpful?","m.mentions":{},"msgtype":"m.text"},"ts":1717003879157,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$GyA3unMx86YcOWyY95UfRgtZ5a3lCpWINJyxKJHRLOs"},
{"content":{"body":"very clarifying","m.mentions":{},"msgtype":"m.text"},"ts":1717004860479,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$kMUt0G1veGhS-n5xDa5u_sYqZZckc4BHudmIwlflzCo"},
{"content":{"body":"notably does not attempt to instrument live bindings","m.mentions":{},"msgtype":"m.text"},"ts":1717004884639,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$FsqYm7eY5fOXtZKMw_26qv2nWBIQkJ3gI3RuMrhSL2s"},
{"content":{"body":"but yes, stale but does substantiate `exports` reflection and would continue to if we dusted it off","format":"org.matrix.custom.html","formatted_body":"but yes, stale but does substantiate <code>exports</code> reflection and would continue to if we dusted it off","m.mentions":{},"msgtype":"m.text"},"ts":1717004937961,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$2FZe2301QrGkBnfxPidSuJnWNhQTK0rJEs0Oi7t3OZ0"},
{"content":{"body":"guybedford: first pass at updating the mocking case https://gist.github.com/kriskowal/5c1258095692ce790d40a646e4f83d84","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a>: first pass at updating the mocking case https://gist.github.com/kriskowal/5c1258095692ce790d40a646e4f83d84","m.mentions":{"user_ids":["@guybedford:matrix.org"]},"msgtype":"m.text"},"ts":1717012823361,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$lFl3cAukwSd12p9WvqsdtLSmySPE4QpDbniEkgsvBe0"},
{"content":{"body":"Does not attempt to instrument reexports, but that’s feasible.","m.mentions":{},"msgtype":"m.text"},"ts":1717012866991,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$qUoRlVr1avEq8XRLg3m3aOMUfvunDqg35OWOzC8hpLM"},
{"content":{"body":"Might also be the basis of establishing a module namespace membrane.","m.mentions":{},"msgtype":"m.text"},"ts":1717012902502,"senderName":"kriskowal","senderId":"@kriskowal:aelf.land","id":"$w1P1VX6wDS2AgaHertArsa8K1VjaSNfgVONRgaKcMNs"}
]