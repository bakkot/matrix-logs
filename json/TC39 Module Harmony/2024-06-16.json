[
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> guybedford I was talking with Luca and we have different understanding of how module identity is preserved across cloning. Do you expect this to be true or false?\n> ```js\n> import source x from \"./x.js\";\n> await import(x) === await import(structureClone(x));\n> ```\n\nMy current best understanding of how this might work would be that the objects would have different equality, but because the underlying keys are identical, the instances will be identical. That is, `await import.source(x) === x` but `await import.source(structuredClone(x)) !== x`. In terms of GC, the module registry is not currently clearable. If we want to permit that for hosts, that's maybe a separate discussion, involving a `loader.delete(key)`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$b2bApr7LfSx0E7GQccYwZhUwkSklAOWGcdZrm3JRfmY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br><p><a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> I was talking with Luca and we have different understanding of how module identity is preserved across cloning. Do you expect this to be true or false?</p>\n<pre><code class=\"language-js\">import source x from \"./x.js\";\nawait import(x) === await import(structureClone(x));\n</code></pre>\n</blockquote></mx-reply>My current best understanding of how this might work would be that the objects would have different equality, but because the underlying keys are identical, the instances will be identical. That is, <code>await import.source(x) === x</code> but <code>await import.source(structuredClone(x)) !== x</code>. In terms of GC, the module registry is not currently clearable. If we want to permit that for hosts, that's maybe a separate discussion, involving a <code>loader.delete(key)</code>?","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$b2bApr7LfSx0E7GQccYwZhUwkSklAOWGcdZrm3JRfmY"}},"msgtype":"m.text"},"ts":1718512870539,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$8eDIGVaMQUQCoUcDHAv9pX5YD2BLjqjt58YQlWjpyjU"},
{"content":{"body":"maybe it's `import.unref(source)` or similar...?","format":"org.matrix.custom.html","formatted_body":"maybe it's <code>import.unref(source)</code> or similar...?","m.mentions":{},"msgtype":"m.text"},"ts":1718515421973,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$vanRcGHVgpSE9iO1LlRe3CVz7TUAGOVo7-XVZusGFjs"},
{"content":{"body":" * maybe it's `import.unref(specifier)` or similar...?","format":"org.matrix.custom.html","formatted_body":" * maybe it's <code>import.unref(specifier)</code> or similar...?","m.mentions":{},"m.new_content":{"body":"maybe it's `import.unref(specifier)` or similar...?","format":"org.matrix.custom.html","formatted_body":"maybe it's <code>import.unref(specifier)</code> or similar...?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$vanRcGHVgpSE9iO1LlRe3CVz7TUAGOVo7-XVZusGFjs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1718515437474,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$mtAiGZ9IMQ9aOI8Wh7DLQFSs4UDEY_ER31n1cJggoyY"}
]