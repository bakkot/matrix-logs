[
{"content":{"body":"write a webpack plugin to support `import(spec, { reflect: true })`, it returns a VirtualModuleSource (since there is no native ModuleSource available","format":"org.matrix.custom.html","formatted_body":"write a webpack plugin to support <code>import(spec, { reflect: true })</code>, it returns a VirtualModuleSource (since there is no native ModuleSource available","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"write a webpack plugin to support `import(spec, { reflect: true })`, it returns a VirtualModuleSource (since there is no native ModuleSource available","mimetype":"text/plain"},{"body":"write a webpack plugin to support <code>import(spec, { reflect: true })</code>, it returns a VirtualModuleSource (since there is no native ModuleSource available","mimetype":"text/html"}]},"ts":1668996805632,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$I9QZZlBTQu4plxlKdDuJhbKPzG4RAtpUg31s8TL2_cE"},
{"content":{"body":"but with slightly different semantics, it will call esbuild to bundle all transitive dependencies of `./danger.js`, which is different than our proposal proposed.","format":"org.matrix.custom.html","formatted_body":"but with slightly different semantics, it will call esbuild to bundle all transitive dependencies of <code>./danger.js</code>, which is different than our proposal proposed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but with slightly different semantics, it will call esbuild to bundle all transitive dependencies of `./danger.js`, which is different than our proposal proposed.","mimetype":"text/plain"},{"body":"but with slightly different semantics, it will call esbuild to bundle all transitive dependencies of <code>./danger.js</code>, which is different than our proposal proposed.","mimetype":"text/html"}]},"ts":1668996871599,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$CvcIpyXblDp3ejUneO4GOcYc3hiJQ_b8j5JBxlXnt4o"},
{"content":{"body":"I think we need to consider this case in the module reflection proposal:","msgtype":"m.text","org.matrix.msc1767.text":"I think we need to consider this case in the module reflection proposal:"},"ts":1668997525916,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$XssxZcXEoZl8nvEZuuHQEP6ACf12nP_izQOZ4uafkNk"},
{"content":{"body":"when using a library, it might contains many dependencies, but if we're reflecting them one-by-one and use importHook to provide all those files, it will be annoying to adopt, also with worse performance","msgtype":"m.text","org.matrix.msc1767.text":"when using a library, it might contains many dependencies, but if we're reflecting them one-by-one and use importHook to provide all those files, it will be annoying to adopt, also with worse performance"},"ts":1668997615082,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$UmkSqw-Cni2lZJfiZRp7YkT7J3TOgrDcKHBs_szd5PQ"},
{"content":{"body":"e.g. lodash-es has 1000+ esm files, it is unrealistic to import them all as Reflected Module and provide them in `importHook`, because you need to enumerate all files under that package.","format":"org.matrix.custom.html","formatted_body":"e.g. lodash-es has 1000+ esm files, it is unrealistic to import them all as Reflected Module and provide them in <code>importHook</code>, because you need to enumerate all files under that package.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"e.g. lodash-es has 1000+ esm files, it is unrealistic to import them all as Reflected Module and provide them in `importHook`, because you need to enumerate all files under that package.","mimetype":"text/plain"},{"body":"e.g. lodash-es has 1000+ esm files, it is unrealistic to import them all as Reflected Module and provide them in <code>importHook</code>, because you need to enumerate all files under that package.","mimetype":"text/html"}]},"ts":1668997720910,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$H7beX9oKG68w0GhDYiGvUgJBugSGSXLYANJJ0Q_bvlI"},
{"content":{"body":"maybe we can change how import reflection works to make this case more convenient (and easier to be implemented in a bundler)","msgtype":"m.text","org.matrix.msc1767.text":"maybe we can change how import reflection works to make this case more convenient (and easier to be implemented in a bundler)"},"ts":1668997780072,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MhKCkguSVEbNDSuOMhDMrFeJQgohzQIoZMCwbEY5I8c"},
{"content":{"body":"proposed change:\n\nthe import reflection \"bundles\"/\"includes\" all transitive dependencies by default, but takes an exclude list for Virtualization.\n\ne.g. \n\n> danger/index.js\n\n```js\nimport * as fs from 'node:fs'\nimport { get } from 'lodash-es'\nimport { helper } from './utils.js'\n```\n\nWhen we reflect this module, `await import('danger/index.js', { reflect: true })`, and feed it to a `Module` constructor, it will call `importHook` to acquire `node:fs`, `lodash-es` and `./utils.js`\n\nThis is not coinvent if we have many dependencies to virtualize","format":"org.matrix.custom.html","formatted_body":"<p>proposed change:</p>\n<p>the import reflection &quot;bundles&quot;/&quot;includes&quot; all transitive dependencies by default, but takes an exclude list for Virtualization.</p>\n<p>e.g.</p>\n<blockquote>\n<p>danger/index.js</p>\n</blockquote>\n<pre><code class=\"language-js\">import * as fs from 'node:fs'\nimport { get } from 'lodash-es'\nimport { helper } from './utils.js'\n</code></pre>\n<p>When we reflect this module, <code>await import('danger/index.js', { reflect: true })</code>, and feed it to a <code>Module</code> constructor, it will call <code>importHook</code> to acquire <code>node:fs</code>, <code>lodash-es</code> and <code>./utils.js</code></p>\n<p>This is not coinvent if we have many dependencies to virtualize</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"proposed change:\n\nthe import reflection \"bundles\"/\"includes\" all transitive dependencies by default, but takes an exclude list for Virtualization.\n\ne.g. \n\n> danger/index.js\n\n```js\nimport * as fs from 'node:fs'\nimport { get } from 'lodash-es'\nimport { helper } from './utils.js'\n```\n\nWhen we reflect this module, `await import('danger/index.js', { reflect: true })`, and feed it to a `Module` constructor, it will call `importHook` to acquire `node:fs`, `lodash-es` and `./utils.js`\n\nThis is not coinvent if we have many dependencies to virtualize","mimetype":"text/plain"},{"body":"<p>proposed change:</p>\n<p>the import reflection &quot;bundles&quot;/&quot;includes&quot; all transitive dependencies by default, but takes an exclude list for Virtualization.</p>\n<p>e.g.</p>\n<blockquote>\n<p>danger/index.js</p>\n</blockquote>\n<pre><code class=\"language-js\">import * as fs from 'node:fs'\nimport { get } from 'lodash-es'\nimport { helper } from './utils.js'\n</code></pre>\n<p>When we reflect this module, <code>await import('danger/index.js', { reflect: true })</code>, and feed it to a <code>Module</code> constructor, it will call <code>importHook</code> to acquire <code>node:fs</code>, <code>lodash-es</code> and <code>./utils.js</code></p>\n<p>This is not coinvent if we have many dependencies to virtualize</p>\n","mimetype":"text/html"}]},"ts":1668998369179,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$PEFODC8jqd8z7yaYn6BaPKn9B2H3QZlBjFhF1K3d4hU"},
{"content":{"body":"Proposed behavior:\n\nit will fetch `lodash-es` and `utils.js` in it's Module cache except `node:fs` (because it is a privilege/native module with no (?) source code)\n\nnow it will only call `importHook` for `node:fs` to fetch I/O ability","format":"org.matrix.custom.html","formatted_body":"<p>Proposed behavior:</p>\n<p>it will fetch <code>lodash-es</code> and <code>utils.js</code> in it's Module cache except <code>node:fs</code> (because it is a privilege/native module with no (?) source code)</p>\n<p>now it will only call <code>importHook</code> for <code>node:fs</code> to fetch I/O ability</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Proposed behavior:\n\nit will fetch `lodash-es` and `utils.js` in it's Module cache except `node:fs` (because it is a privilege/native module with no (?) source code)\n\nnow it will only call `importHook` for `node:fs` to fetch I/O ability","mimetype":"text/plain"},{"body":"<p>Proposed behavior:</p>\n<p>it will fetch <code>lodash-es</code> and <code>utils.js</code> in it's Module cache except <code>node:fs</code> (because it is a privilege/native module with no (?) source code)</p>\n<p>now it will only call <code>importHook</code> for <code>node:fs</code> to fetch I/O ability</p>\n","mimetype":"text/html"}]},"ts":1668998523989,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oiHAAEGQNzHvWoBhqecVNVOJUPMN0zfg7D9V7bcp0JI"},
{"content":{"body":"with a new option to \"exclude\" some module from the module tree","msgtype":"m.text","org.matrix.msc1767.text":"with a new option to \"exclude\" some module from the module tree"},"ts":1668998828323,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$rnUns-ljEmvrlVrp5x4SaAylt_vjuD_jIXNTpfFFV-4"},
{"content":{"body":"e.g. `await import('./lib.js', { reflect: true, excludes: [\"react\"] })`. This allows something like \"peer dependency\"","format":"org.matrix.custom.html","formatted_body":"e.g. <code>await import('./lib.js', { reflect: true, excludes: [&quot;react&quot;] })</code>. This allows something like &quot;peer dependency&quot;","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"e.g. `await import('./lib.js', { reflect: true, excludes: [\"react\"] })`. This allows something like \"peer dependency\"","mimetype":"text/plain"},{"body":"e.g. <code>await import('./lib.js', { reflect: true, excludes: [&quot;react&quot;] })</code>. This allows something like &quot;peer dependency&quot;","mimetype":"text/html"}]},"ts":1668998909345,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Q_oM1DGImzuKwtE_yBglH5acXxwdrEb3imZSc_1Lskk"},
{"content":{"body":"The problem of this new proposed way is we need to introduce `referrer` back again","format":"org.matrix.custom.html","formatted_body":"The problem of this new proposed way is we need to introduce <code>referrer</code> back again","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The problem of this new proposed way is we need to introduce `referrer` back again","mimetype":"text/plain"},{"body":"The problem of this new proposed way is we need to introduce <code>referrer</code> back again","mimetype":"text/html"}]},"ts":1668998937908,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$F-PS-wnqVzrLBQFxZBMFqprtD64I5vL76XyLqxbOhbg"}
]