[
{"content":{"body":"I was talking with our tracing folks today (both from the tracing side and the web frameworks side) and had broad agreement that they generally just want event handlers to do as little as possible in terms of snapshot/restore.  I told them about my concerns with polyfilling these \"async causes\" (i.e. programmatic JS that triggers an event to be queued for dispatch in a future microtask) and the consensus was that, for any events we tend to care about, it's basically always more accurate to run listeners in the root/empty context rather than the registration context, and not to worry about a more-accurate programmatic causal context that we can't get access to.","m.mentions":{},"msgtype":"m.text"},"ts":1724100965312,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$FywlAEiNtZUDB_yFdrg8nVNzXW9ovjUnxMP_WNLaTrk"},
{"content":{"body":"But with our current polyfill (which dispatches events in the registration context), they're running into real problems where event listeners are registered in the \"application bootstrap context\" and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.","m.mentions":{},"msgtype":"m.text"},"ts":1724101084553,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA"},
{"content":{"body":"people have this intuition of \"do as little as possible\" or \"disappear\" but I don't think they mean the null context, I think they mean some sort of causal context, which we've discussed the difficulty of defining. Did you raise this difficulty with the requesting teams?","m.mentions":{},"msgtype":"m.text"},"ts":1724101510504,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$F95xZJ8run2-EaXb9j7YLP7g4r79SI2PYjL3xJO_vO0"},
{"content":{"body":"or maybe you're saying, they are happy with the null context?","m.mentions":{},"msgtype":"m.text"},"ts":1724101545309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jYsclW5dYnxBkfdN7zOLFsfvKPa-zG_BKNkoywojxL0"},
{"content":{"body":"> <@stephenhicks:matrix.org> But with our current polyfill (which dispatches events in the registration context), they're running into real problems where event listeners are registered in the \"application bootstrap context\" and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.\n\nThis is excellent to know that you're really trying this in a polyfill and it's really not working out. But can you explain a little more about how this comes up mechanically, within a system that already does event delegation?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>But with our current polyfill (which dispatches events in the registration context), they&#39;re running into real problems where event listeners are registered in the &quot;application bootstrap context&quot; and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.</blockquote></mx-reply>This is excellent to know that you're really trying this in a polyfill and it's really not working out. But can you explain a little more about how this comes up mechanically, within a system that already does event delegation?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA"}},"msgtype":"m.text"},"ts":1724101661368,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YBmNBdzhnyTB_JLvSYUvkyKbSQzLi4hlcZDsTqDm8B8"},
{"content":{"body":" * [EDIT: Sorry I misread what you wrote above, you already did address this] people have this intuition of \"do as little as possible\" or \"disappear\" but I don't think they mean the null context, I think they mean some sort of causal context, which we've discussed the difficulty of defining. Did you raise this difficulty with the requesting teams?","m.mentions":{},"m.new_content":{"body":"[EDIT: Sorry I misread what you wrote above, you already did address this] people have this intuition of \"do as little as possible\" or \"disappear\" but I don't think they mean the null context, I think they mean some sort of causal context, which we've discussed the difficulty of defining. Did you raise this difficulty with the requesting teams?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$F95xZJ8run2-EaXb9j7YLP7g4r79SI2PYjL3xJO_vO0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724101691341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Gbkte-vYtC54HTYL-K7kbVLp8afRzGmIspN2cpbUSdw"},
{"content":{"body":"If we do that, and at some later point we realize there's some existing event with an async source that needs the async dispatch context to be propagated, that won't be able to be changed","m.mentions":{},"msgtype":"m.text"},"ts":1724102287661,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tV-ZnBL46lc2nJ6nUOoP8e3G_uAHggPDdyKcc9v5YJk"},
{"content":{"body":"we wouldn't even be able to have use counters","m.mentions":{},"msgtype":"m.text"},"ts":1724102303293,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$yYDTM1BBA2ToORyNE_Sp2hq9O3ypIq7iWBDv1CMWSes"},
{"content":{"body":"what do you mean by \"use counters\"?","m.mentions":{},"msgtype":"m.text"},"ts":1724102377730,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$NuDPThc3BLttdU6zH2a5QSzocIxHV_Sapt2hfA4X4G0"},
{"content":{"body":"> <@stephenhicks:matrix.org> But with our current polyfill (which dispatches events in the registration context), they're running into real problems where event listeners are registered in the \"application bootstrap context\" and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.\n\none thing to note is that, if you have a particular variable (like the trace/span id) that you always want to be a particular value (like null), you can set that value explicitly your bootstrapping code. I'm really curious why this kind of thing didn't work for you","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>But with our current polyfill (which dispatches events in the registration context), they&#39;re running into real problems where event listeners are registered in the &quot;application bootstrap context&quot; and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.</blockquote></mx-reply>one thing to note is that, if you have a particular variable (like the trace/span id) that you always want to be a particular value (like null), you can set that value explicitly your bootstrapping code. I'm really curious why this kind of thing didn't work for you","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA"}},"msgtype":"m.text"},"ts":1724102383371,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3htd2r6gj3L6lZydbn7oqXvjDvor-qa8MKIP91y1slg"},
{"content":{"body":"> <@stephenhicks:matrix.org> what do you mean by \"use counters\"?\n\nthis is about assessing the web compatibility of later changes in semantics","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$NuDPThc3BLttdU6zH2a5QSzocIxHV_Sapt2hfA4X4G0?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>what do you mean by &quot;use counters&quot;?</blockquote></mx-reply>this is about assessing the web compatibility of later changes in semantics","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NuDPThc3BLttdU6zH2a5QSzocIxHV_Sapt2hfA4X4G0"}},"msgtype":"m.text"},"ts":1724102393949,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fmQqvs5TeQl1eVitp6NJoOrIauXa9FjJk0DQUx8YMPg"},
{"content":{"body":"I'm not sure I'm saying that async events never dispatch with a causal context.","m.mentions":{},"msgtype":"m.text"},"ts":1724102402269,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$gnO9m61LR7DSj8gA_eQldZrTwwVMknoqRSCd8y98Sf4"},
{"content":{"body":"Chromium and firefox (probably also webkit, but I don't know that for sure) have telemetry where, if a page uses some combination of features, that usage gets recorded, to asses e.g. how likely is a change in semantics to affect websites","m.mentions":{},"msgtype":"m.text"},"ts":1724102527347,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$enOH1hga2nWWh2yT9DJoJnA13xhDruWXgajMmDrGbVk"},
{"content":{"body":"you could have use counters for uses of `AsyncContext.prototype.get()` with the null context, or similar, but you can't track cases like\n```js\nfoo.addEventListener(\"bar\", () => {\n  asyncVar.run(\"baz\", () => {\n     someUnrelatedAsyncVar.get();\n  });\n});\n```","format":"org.matrix.custom.html","formatted_body":"<p>you could have use counters for uses of <code>AsyncContext.prototype.get()</code> with the null context, or similar, but you can't track cases like</p>\n<pre><code class=\"language-js\">foo.addEventListener(\"bar\", () =&gt; {\n  asyncVar.run(\"baz\", () =&gt; {\n     someUnrelatedAsyncVar.get();\n  });\n});\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724102642670,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dW2vuvL_Y-GVsydsPo9VBL_WpSiP5InjwhIIYfRZBJQ"},
{"content":{"body":"hm...","m.mentions":{},"msgtype":"m.text"},"ts":1724102671828,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$jAtUdrk04XuqAhgGSS2orlhyctMZ33h7JqMmaPvx-m4"},
{"content":{"body":"I guess it's not impossible to track, but it might add implementation complexity","m.mentions":{},"msgtype":"m.text"},"ts":1724102690145,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kbKCXCYbktsH6qEIu97sqE4U1AvlUxWd95HUTguoUYE"},
{"content":{"body":"okay, you could track all uses of contexts derived from an async event without a lot of complexity, but not from a specific async event","m.mentions":{},"msgtype":"m.text"},"ts":1724102769042,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Cq5fQqqZvYLBqE53pBxEov7ezhqiS5DJwekcxfhpo70"},
{"content":{"body":"Andreu, I think you're jumping ahead a few steps too many when you're talking about this future compatibility risk; let's focus on figuring out their needs first","m.mentions":{},"msgtype":"m.text"},"ts":1724102787395,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0wFeKfGAjHVlzCf-ZQSdLS56ico0FM5ADxRA9ssCEm0"},
{"content":{"body":"Steve Hicks: Are we talking about the span id/trace id? Is this just one variable? Could you say more about how/when it's initialized, and how \"application bootstrap time\" becomes misleading compared to being identifiably \"null\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a>: Are we talking about the span id/trace id? Is this just one variable? Could you say more about how/when it's initialized, and how \"application bootstrap time\" becomes misleading compared to being identifiably \"null\"?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"ts":1724102861037,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VacvIl39APVjpuzIxQ5yGkgwTPYcoyqvw3n9q-5n9Rw"},
{"content":{"body":"Yes, the place where this is coming up is with the root trace, where the bootstrap runs in a bootstrap trace, and then event handlers look for a missing trace to know to start a new one (rather than continue an existing one).  It might be possible to explicitly zero out the trace when registering listeners - I've asked whether that's viable.","m.mentions":{},"msgtype":"m.text"},"ts":1724102909183,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$EG6M6CK3uqExhesTfIdh0NY-c2NoWCdaOiQuoHYraT4"},
{"content":{"body":"> <@stephenhicks:matrix.org> But with our current polyfill (which dispatches events in the registration context), they're running into real problems where event listeners are registered in the \"application bootstrap context\" and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.\n\nThis sounds like the tail wagging the dog. They want to ensure that their bootstrap context is GC’d, and think not events capturing context will ensure that, but that’s just not the case. What happens when they have a pending promise or `setInterval`?\n\nI think null-context is the least useful choice for users. It’s simple enough for them to clear the boostrap context before adding event listeners, but we shouldn’t force everyone else to wrap their event handlers because of this case.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA\">In reply to</a><a href=\"https://matrix.to/#/%40stephenhicks%3Amatrix.org\">@stephenhicks:matrix.org</a><br />But with our current polyfill (which dispatches events in the registration context), they&#39;re running into real problems where event listeners are registered in the &quot;application bootstrap context&quot; and they really want stronger guarantees that that context will completely disappear when bootstrapping is complete.</blockquote></mx-reply>This sounds like the tail wagging the dog. They want to ensure that their bootstrap context is GC’d, and think not events capturing context will ensure that, but that’s just not the case. What happens when they have a pending promise or <code data-md=\"`\">setInterval</code>?<br/><br/>I think null-context is the least useful choice for users. It’s simple enough for them to clear the boostrap context before adding event listeners, but we shouldn’t force everyone else to wrap their event handlers because of this case.","m.relates_to":{"m.in_reply_to":{"event_id":"$kEB4yv6wT28OgvL6zt8GNnm4WRwpfHv2nCiJQZlpwuA"}},"msgtype":"m.text"},"ts":1724103003186,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lgXdSfTmfYjzkKW6fHt4Pf-uvdhklfk_xVA_x4ZYOXo"},
{"content":{"body":"> <@stephenhicks:matrix.org> I'm not sure I'm saying that async events never dispatch with a causal context.\n\nThe GC use case prevents us from every making a causal context event.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24gnO9m61LR7DSj8gA_eQldZrTwwVMknoqRSCd8y98Sf4\">In reply to</a><a href=\"https://matrix.to/#/%40stephenhicks%3Amatrix.org\">@stephenhicks:matrix.org</a><br />I&#39;m not sure I&#39;m saying that async events never dispatch with a causal context.</blockquote></mx-reply>The GC use case prevents us from every making a causal context event.","m.relates_to":{"m.in_reply_to":{"event_id":"$gnO9m61LR7DSj8gA_eQldZrTwwVMknoqRSCd8y98Sf4"}},"msgtype":"m.text"},"ts":1724103068004,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ms9SKgBoXQ-7pPDlu-8HRhXh4BdQ7UaJgcjY4RP2peg"},
{"content":{"body":"* The GC use case prevents us from ever using a causal context in events.","m.new_content":{"body":"The GC use case prevents us from ever using a causal context in events.","msgtype":"m.text"},"m.relates_to":{"event_id":"$ms9SKgBoXQ-7pPDlu-8HRhXh4BdQ7UaJgcjY4RP2peg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724103083704,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hVo7Q9EBkUsxq6vgjl24qBoQbefeqq49ifAp0ac0AUE"},
{"content":{"body":"Registration context is simply wrong for many, many events.  There may be a more useful causal context that's available, and we should use it when possible, even if we can't polyfill it.","m.mentions":{},"msgtype":"m.text"},"ts":1724103097094,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4"},
{"content":{"body":"> <@stephenhicks:matrix.org> Yes, the place where this is coming up is with the root trace, where the bootstrap runs in a bootstrap trace, and then event handlers look for a missing trace to know to start a new one (rather than continue an existing one).  It might be possible to explicitly zero out the trace when registering listeners - I've asked whether that's viable.\n\nah, OK, they want a bootstrap trace, and then they want event handlers to run in a null trace.... could we address this by loading a null trace snapshot right around addEventListener, narrowly?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$EG6M6CK3uqExhesTfIdh0NY-c2NoWCdaOiQuoHYraT4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Yes, the place where this is coming up is with the root trace, where the bootstrap runs in a bootstrap trace, and then event handlers look for a missing trace to know to start a new one (rather than continue an existing one).  It might be possible to explicitly zero out the trace when registering listeners - I&#39;ve asked whether that&#39;s viable.</blockquote></mx-reply>ah, OK, they want a bootstrap trace, and then they want event handlers to run in a null trace.... could we address this by loading a null trace snapshot right around addEventListener, narrowly?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EG6M6CK3uqExhesTfIdh0NY-c2NoWCdaOiQuoHYraT4"}},"msgtype":"m.text"},"ts":1724103099577,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xd6-eVM-0sCUZLPmiJt87CzI6lFjABCm05h0aXLDe4E"},
{"content":{"body":"or is it that they really do want a causal trace?","m.mentions":{},"msgtype":"m.text"},"ts":1724103128905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3WdlmdjxyGrSsbj7Ulj3ws2W2M5eqaU_DIJPdI64i-g"},
{"content":{"body":"My understanding is that the code running `addEventListener` is largely out of our control - third party libraries and whatnot","format":"org.matrix.custom.html","formatted_body":"My understanding is that the code running <code>addEventListener</code> is largely out of our control - third party libraries and whatnot","m.mentions":{},"msgtype":"m.text"},"ts":1724103163751,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$7pyHGxNxmpHXDcKhLC8JLCW1qaucLgtMNlfde9ggk-M"},
{"content":{"body":"maybe patch addEventListener then?","m.mentions":{},"msgtype":"m.text"},"ts":1724103198971,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zPbWOEUQ7r6fvs3WY3mWmqZQTo-Qq9BDqpFvCnNJGaE"},
{"content":{"body":"> <@stephenhicks:matrix.org> Registration context is simply wrong for many, many events.  There may be a more useful causal context that's available, and we should use it when possible, even if we can't polyfill it.\n\nSure, I see good arguments for causal context. But I don’t think there are any good ones for null context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4\">In reply to</a><a href=\"https://matrix.to/#/%40stephenhicks%3Amatrix.org\">@stephenhicks:matrix.org</a><br />Registration context is simply wrong for many, many events.  There may be a more useful causal context that&#39;s available, and we should use it when possible, even if we can&#39;t polyfill it.</blockquote></mx-reply>Sure, I see good arguments for causal context. But I don’t think there are any good ones for null context.","m.relates_to":{"m.in_reply_to":{"event_id":"$rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4"}},"msgtype":"m.text"},"ts":1724103239177,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oeY3V6dnch8QtlCg6YtawmS613S-KdDQvkNwrjRYdfE"},
{"content":{"body":"> <@littledan:matrix.org> maybe patch addEventListener then?\n\nThat way lies madness, let me tell you...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$zPbWOEUQ7r6fvs3WY3mWmqZQTo-Qq9BDqpFvCnNJGaE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>maybe patch addEventListener then?</blockquote></mx-reply>That way lies madness, let me tell you...","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zPbWOEUQ7r6fvs3WY3mWmqZQTo-Qq9BDqpFvCnNJGaE"}},"msgtype":"m.text"},"ts":1724103241597,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$X5HfYx4IJCEXEosxA6t7RZ99g_0jQDR90q7EjyAcOqg"},
{"content":{"body":"> <@stephenhicks:matrix.org> Registration context is simply wrong for many, many events.  There may be a more useful causal context that's available, and we should use it when possible, even if we can't polyfill it.\n\nconcrete examples of cases where it is wrong is extremely helpful! Now we have one with tracing and bootstrap contexts. If we can assemble more, it'll be very useful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Registration context is simply wrong for many, many events.  There may be a more useful causal context that&#39;s available, and we should use it when possible, even if we can&#39;t polyfill it.</blockquote></mx-reply>concrete examples of cases where it is wrong is extremely helpful! Now we have one with tracing and bootstrap contexts. If we can assemble more, it'll be very useful.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4"}},"msgtype":"m.text"},"ts":1724103253351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nn2bNzEKTQxakRN3yvnmBU-dnFEcKtN1grWjusKMKhU"},
{"content":{"body":"I think my point was that when causal context is unavailable, empty context is the best alternative - both for lossy polyfills and for standards","m.mentions":{},"msgtype":"m.text"},"ts":1724103284076,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$AaH_ACsLJNXqsOdnpUumrTemytximWrdwun0EgUfkvM"},
{"content":{"body":"> <@stephenhicks:matrix.org> Registration context is simply wrong for many, many events.  There may be a more useful causal context that's available, and we should use it when possible, even if we can't polyfill it.\n\n * concrete examples of cases where it is wrong is extremely helpful! Now we have one with bootstrap traces. If we can assemble more, it'll be very useful.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$rD7quzeoe8W0IAefjCzvVA3w3vSzkodGy1p2K5PcKw4?via=igalia.com&amp;via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Registration context is simply wrong for many, many events.  There may be a more useful causal context that's available, and we should use it when possible, even if we can't polyfill it.</blockquote></mx-reply> * concrete examples of cases where it is wrong is extremely helpful! Now we have one with bootstrap traces. If we can assemble more, it'll be very useful.","m.mentions":{},"m.new_content":{"body":"concrete examples of cases where it is wrong is extremely helpful! Now we have one with bootstrap traces. If we can assemble more, it'll be very useful.","format":"org.matrix.custom.html","formatted_body":"concrete examples of cases where it is wrong is extremely helpful! Now we have one with bootstrap traces. If we can assemble more, it'll be very useful.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nn2bNzEKTQxakRN3yvnmBU-dnFEcKtN1grWjusKMKhU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724103284456,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hhzzJqO0DJ2Kzht893heHFS9fYjcowaZ458QRJF-T8Y"},
{"content":{"body":"sure, I guess I'm just trying to understand the details of their requirements, and then we can think of the various possible ways to meet them","m.mentions":{},"msgtype":"m.text"},"ts":1724103328119,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AEw9qCx5ED3EyjkLtlcKEnKMaeECU74TY5-FP3MF4Ls"},
{"content":{"body":"rather than reaching a \"point\" yet","m.mentions":{},"msgtype":"m.text"},"ts":1724103335830,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mkg1q-0d9EyrHWUCHRMUAVxzmkp9sePk8QQ_nrA0rps"},
{"content":{"body":"A new piece of information for me today was that there's a desire to trace how long bootstrap takes, and so this is what makes the registration context wrong. I did not understand that phenomenon before this conversation.","m.mentions":{},"msgtype":"m.text"},"ts":1724103391201,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YY2AfHF328ZtnPG71IOKaXJWgBpz6ABqpok1L3KFLHo"},
{"content":{"body":"so this is very helpful","m.mentions":{},"msgtype":"m.text"},"ts":1724103407854,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_5d9kiewpCKIMvGVmq4EdDoRPsis1ZmbNS4wVXNHl6k"},
{"content":{"body":"> <@stephenhicks:matrix.org> That way lies madness, let me tell you...\n\nIn particular, I've been patching addEventListener for my polyfill, and it's super subtle.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$X5HfYx4IJCEXEosxA6t7RZ99g_0jQDR90q7EjyAcOqg?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>That way lies madness, let me tell you...</blockquote></mx-reply>In particular, I've been patching addEventListener for my polyfill, and it's super subtle.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$X5HfYx4IJCEXEosxA6t7RZ99g_0jQDR90q7EjyAcOqg"}},"msgtype":"m.text"},"ts":1724103408625,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$19ZfKVtfAByATvy0zXluGhpR5r1sAbJqkD6AJu6OUIM"},
{"content":{"body":"> <@stephenhicks:matrix.org> That way lies madness, let me tell you...\n\n * In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$X5HfYx4IJCEXEosxA6t7RZ99g_0jQDR90q7EjyAcOqg?via=igalia.com&amp;via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>That way lies madness, let me tell you...</blockquote></mx-reply> * In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener","m.mentions":{},"m.new_content":{"body":"In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener","format":"org.matrix.custom.html","formatted_body":"In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$19ZfKVtfAByATvy0zXluGhpR5r1sAbJqkD6AJu6OUIM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724103440655,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$bYn-7N_Lb8m8OcDtSnjBIobWHjEt6VJAOc_nTu413wc"},
{"content":{"body":"> <@stephenhicks:matrix.org> In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener\n\nyeah, I can imagine... I'm just trying to understand the constraints, and curious what kinds of third party libraries you're trying to trace through","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$19ZfKVtfAByATvy0zXluGhpR5r1sAbJqkD6AJu6OUIM?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener</blockquote></mx-reply>yeah, I can imagine... I'm just trying to understand the constraints, and curious what kinds of third party libraries you're trying to trace through","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$19ZfKVtfAByATvy0zXluGhpR5r1sAbJqkD6AJu6OUIM"}},"msgtype":"m.text"},"ts":1724103460491,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0Akra7geLA42-4Hrpy36XRGR6MNsc-ktUxI1ZfxaQYM"},
{"content":{"body":" * In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener.  So I think we need to put that out of our heads as a remotely viable suggestion.","format":"org.matrix.custom.html","formatted_body":" * In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener.  So I think we need to put that out of our heads as a remotely viable suggestion.","m.mentions":{},"m.new_content":{"body":"In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener.  So I think we need to put that out of our heads as a remotely viable suggestion.","format":"org.matrix.custom.html","formatted_body":"In particular, I've been patching addEventListener for my polyfill, and it's super subtle.  Also, short-term patches are nonviable because removeEventListener.  So I think we need to put that out of our heads as a remotely viable suggestion.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$19ZfKVtfAByATvy0zXluGhpR5r1sAbJqkD6AJu6OUIM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724103464466,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$EK9bGNHgBI3d1pgcphJqFVMDj8e-_0QCLlRho2lHzVk"},
{"content":{"body":"and what kind of flexibility you have about how you use them","m.mentions":{},"msgtype":"m.text"},"ts":1724103473905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$E8nF19RIczuQBekqsliCHl3uEzmc_5vnht5kdQdm4cI"},
{"content":{"body":"d3 and tanstack router were two that were named","m.mentions":{},"msgtype":"m.text"},"ts":1724103504142,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$tRYmgALtTfyfZVkK5UUG1eXuxmG9W3_nwtKWQiBdrDw"},
{"content":{"body":"and it's not so much that we want to \"trace through\" them, so much as that they're involved in the app and all it takes is one library not doing it right to mess everything up - this is why the right defaults are critical","m.mentions":{},"msgtype":"m.text"},"ts":1724103549998,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$bK93LImu4y__WRNqVPmDxaxn8p3aVKthsxi7S4o-BcU"},
{"content":{"body":"Node.js _never_ patches events, and this is very intentional. Event emitters themselves are not async, they inherit asynchrony from what publishes to them. Therefore it’s actually that _triggering_ thing you need to propagate context to and leave event emitters alone to just continue in the context the dispatch happens in.","format":"org.matrix.custom.html","formatted_body":"Node.js <em>never</em> patches events, and this is very intentional. Event emitters themselves are not async, they inherit asynchrony from what publishes to them. Therefore it’s actually that <em>triggering</em> thing you need to propagate context to and leave event emitters alone to just continue in the context the dispatch happens in.","msgtype":"m.text"},"ts":1724103781453,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$pZ8W6WNRH6zGADt2pKUm0IfF9MU3rVTKvfnCRsK-5pE"},
{"content":{"body":"In web platform that triggering thing can be internals, so that needs to be taken into consideration.","msgtype":"m.text"},"ts":1724103826851,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$eDnUCeINpWSBzawPzbZruAkf1bH9AV947LcyuUQxG1c"},
{"content":{"body":"But it should be treated as a propagation of the web platform thing, not a propagation of event emitters.","msgtype":"m.text"},"ts":1724103854942,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$FeZ3GxEzadGO7PbtGw1SZm9nXdxHt9xu4_WCS3x83k0"},
{"content":{"body":"Which means event emitters should not be expected to have “consistent” behaviour, because the conditions in which they are triggered is not consistent.","msgtype":"m.text"},"ts":1724103904115,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$tgOoUHUEjJ_a7j8zOX-gwD3k8uU2dh5CaeQq6yP4K58"},
{"content":{"body":"propagating the context through everything async in the web platform is simply not feasible at this point in time, which is why I'm talking about async sources for events (which in your terms is async internals that eventually triggers the event)","m.mentions":{},"msgtype":"m.text"},"ts":1724103910964,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kx1fukQxD_DKb4CG-WlKwObonTeOdRs15uL8f4rWaWI"},
{"content":{"body":"that way we can focus only on the async internals that are observable","m.mentions":{},"msgtype":"m.text"},"ts":1724103946881,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$w2Vb3m4AoqhrTCcEU_Ne_KBm8auM1rFiNmyF_KEsIgo"},
{"content":{"body":"It doesn’t need to propagate fully _through_ it necessarily. Only to the extent that is observable from JavaScript. (At least at this point, anyway…)","format":"org.matrix.custom.html","formatted_body":"It doesn’t need to propagate fully <em>through</em> it necessarily. Only to the extent that is observable from JavaScript. (At least at this point, anyway…)","msgtype":"m.text"},"ts":1724103980888,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$LlPEwPsXri0-Gt18fPiTujvdBPv8Vuv6Qh0xo7iA90E"},
{"content":{"body":"I _do_ want to have it actually accessible _everywhere_ though as I would _really_ like for profiler samples to capture current context state.","format":"org.matrix.custom.html","formatted_body":"I <em>do</em> want to have it actually accessible <em>everywhere</em> though as I would <em>really</em> like for profiler samples to capture current context state.","msgtype":"m.text"},"ts":1724104026928,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$yh-j_5un0wa4Dqx1B6lAtFOYAHPkRRsMqgtkOy0ovBI"},
{"content":{"body":"But, as you say, that’s a large effort.","msgtype":"m.text"},"ts":1724104051540,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ll9SYXGBCfPW6mony19XJptVP2Z6jud9li0yXlwkVjA"},
{"content":{"body":"so, how would it be if EventTargets had a snapshot associated with them (say, the default for the whole document) and ran all of their events there?","m.mentions":{},"msgtype":"m.text"},"ts":1724104054768,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TZXGZoqrXWm2xx7EZgw5K576R7OOCYsKdqEnkqTgPew"},
{"content":{"body":" * so, how would it be if EventTargets had a snapshot associated with them (say, the default for the whole document, so the global one) and ran all of their events there?","m.mentions":{},"m.new_content":{"body":"so, how would it be if EventTargets had a snapshot associated with them (say, the default for the whole document, so the global one) and ran all of their events there?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TZXGZoqrXWm2xx7EZgw5K576R7OOCYsKdqEnkqTgPew","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724104067612,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2nux3OjYBmA91BK81bri4Cnalwdh5LiP7cp8yQcwUs0"},
{"content":{"body":"and if there's another relevant snapshot for an event, we pass that in a property","m.mentions":{},"msgtype":"m.text"},"ts":1724104101778,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b3wU4HBQ62rbxGXqSuHDtaSqIx8hAkzCfgBIVS9OSJg"},
{"content":{"body":"we have to define the web semantics completely, we can't say \"whatever falls out\"","m.mentions":{},"msgtype":"m.text"},"ts":1724104141202,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7z18mD3yxuryN7VdBKxDgw49lX8tLCuv2saPQY8ZwDg"},
{"content":{"body":"Binding to the initialization of an EventTarget? I can see how that could be useful for resource attribution, but would not work for the application tracing case without needing to rebind everything to the execution flow path (aka through flow)","msgtype":"m.text"},"ts":1724104174844,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$PMChzaOYdJizKT-9jpU5aN3YvMmQY4sUgjXBb0sc5FM"},
{"content":{"body":"there are two problems we're discussing: the one Steven H raised (avoid misattribution to the bootstrap phase) and this one you're raising (do all the tracing causally)","m.mentions":{},"msgtype":"m.text"},"ts":1724104233188,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V8Hrgndyd1l6ipseyEcZ2IWhHkQv6IeFq0ZwoBShESo"},
{"content":{"body":"I think they’re related problems.","msgtype":"m.text"},"ts":1724104308632,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ZikemTjkv4kjctAGH7qxrcPxgqvCLFIR3-Nzdpxx7OI"},
{"content":{"body":"The attribution depends on the flow you’re expecting.","msgtype":"m.text"},"ts":1724104333288,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$EW-ft7WtUvqG4w4qZbU0tAuFiMCSiBeMj2ZyAtpTQCk"},
{"content":{"body":"sure, the perfect solution to everything also solves the easier version that Steven described where it's OK for us to cheat and use the null context","m.mentions":{},"msgtype":"m.text"},"ts":1724104334858,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NvHaP7KAPYuZZgQAlIeN8H9agcVSb0ga33I_1ZYL1kY"},
{"content":{"body":"> <@stephenbelanger:matrix.org> But, as you say, that’s a large effort.\n\nEven having all events with an internal async source propagate the causal context won't be easy, and we have already gotten pushback (from Domenic Denicola) saying that that will be too burdensome for folks working on web specs","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ll9SYXGBCfPW6mony19XJptVP2Z6jud9li0yXlwkVjA?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>But, as you say, that’s a large effort.</blockquote></mx-reply>Even having all events with an internal async source propagate the causal context won't be easy, and we have already gotten pushback (from Domenic Denicola) saying that that will be too burdensome for folks working on web specs","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ll9SYXGBCfPW6mony19XJptVP2Z6jud9li0yXlwkVjA"}},"msgtype":"m.text"},"ts":1724104388025,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$A2hKExTVpuVkuxrD-bHWVLnNfJTewLlU5iMVDTM224g"},
{"content":{"body":"> <@abotella:igalia.com> Even having all events with an internal async source propagate the causal context won't be easy, and we have already gotten pushback (from Domenic Denicola) saying that that will be too burdensome for folks working on web specs\n\nyes, we've gotten this pushback from Anne van Kesteren as well. Together, they represent Chrome and Safari.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$A2hKExTVpuVkuxrD-bHWVLnNfJTewLlU5iMVDTM224g?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>Even having all events with an internal async source propagate the causal context won't be easy, and we have already gotten pushback (from Domenic Denicola) saying that that will be too burdensome for folks working on web specs</blockquote></mx-reply>yes, we've gotten this pushback from Anne van Kesteren as well. Together, they represent Chrome and Safari.","m.mentions":{"user_ids":["@abotella:igalia.com","@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$A2hKExTVpuVkuxrD-bHWVLnNfJTewLlU5iMVDTM224g"}},"msgtype":"m.text"},"ts":1724104416539,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7-TXdtDcwhJTm_iaXp2kJT7OT6OyHk4AACEf5ENQDB0"},
{"content":{"body":"Attributing something to boot or EventTarget creation implies you are interested in viewing things from the perspective of resource ownership. Through or causal flow is a more direct line to what triggered the thing.","msgtype":"m.text"},"ts":1724104420858,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$G_UcZ04LS5jR9cHK2MiPJ0ROBg0lf8kSggHpZySCrnU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Attributing something to boot or EventTarget creation implies you are interested in viewing things from the perspective of resource ownership. Through or causal flow is a more direct line to what triggered the thing.\n\nsorry, I meant, just giving up 100% and saying, it's the global default snapshot","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$G_UcZ04LS5jR9cHK2MiPJ0ROBg0lf8kSggHpZySCrnU?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Attributing something to boot or EventTarget creation implies you are interested in viewing things from the perspective of resource ownership. Through or causal flow is a more direct line to what triggered the thing.</blockquote></mx-reply>sorry, I meant, just giving up 100% and saying, it's the global default snapshot","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$G_UcZ04LS5jR9cHK2MiPJ0ROBg0lf8kSggHpZySCrnU"}},"msgtype":"m.text"},"ts":1724104449080,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$akluEMErFUX93DqPEmvkmMtldnmxChagjEpq9VUWlvg"},
{"content":{"body":"Stephen Belanger: What do you want us to do when you bring up, browsers should do causal flow, when Andreu is reporting that we have pushback from browsers on this, and you also say you don't actually care much about the browser case?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a>: What do you want us to do when you bring up, browsers should do causal flow, when Andreu is reporting that we have pushback from browsers on this, and you also say you don't actually care much about the browser case?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"ts":1724104494900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o9eHb6MbtVDzQq9XGML8rOHnNX2KLZDoAGrpDO_GNu0"},
{"content":{"body":"I think the right behavior is causal flow, but it seems unfeasible","m.mentions":{},"msgtype":"m.text"},"ts":1724104526744,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RlGRmScQO-vknO24uch48DOBQ5Y0woW39FPtpJa-JZg"},
{"content":{"body":"I think “giving up” is a valid decision given the complexity, though needs to be very clearly encoded and explained as “This is not the _correct_ decision, this is just what we have _now_ because solving this case is hard”","format":"org.matrix.custom.html","formatted_body":"I think “giving up” is a valid decision given the complexity, though needs to be very clearly encoded and explained as “This is not the <em>correct</em> decision, this is just what we have <em>now</em> because solving this case is hard”","msgtype":"m.text"},"ts":1724104535316,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$anHwi9fUZTPJdmY_yo50z10SsjACydROEC36G0dHjso"},
{"content":{"body":"Meaning, not painting ourselves into a corner with expecting that flow forever.","msgtype":"m.text"},"ts":1724104570523,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$fSI7dFW53sReReelcRkFV_JM9QRHZjh-3TARYqOG6XI"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I think “giving up” is a valid decision given the complexity, though needs to be very clearly encoded and explained as “This is not the _correct_ decision, this is just what we have _now_ because solving this case is hard”\n\nYes, but the problem with that is that the web is not versioned, so if programs start to rely on the behavior *now*, that behavior will be locked forever","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$anHwi9fUZTPJdmY_yo50z10SsjACydROEC36G0dHjso?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I think “giving up” is a valid decision given the complexity, though needs to be very clearly encoded and explained as “This is not the <em>correct</em> decision, this is just what we have <em>now</em> because solving this case is hard”</blockquote></mx-reply>Yes, but the problem with that is that the web is not versioned, so if programs start to rely on the behavior <em>now</em>, that behavior will be locked forever","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$anHwi9fUZTPJdmY_yo50z10SsjACydROEC36G0dHjso"}},"msgtype":"m.text"},"ts":1724104587271,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$GZYfym0VCr7fqYFJBrSv8-cJ_-XYL75d8luqKGL1uCg"},
{"content":{"body":"and it's even going to be hard to *detect* whether programs rely on that behavior","format":"org.matrix.custom.html","formatted_body":"and it's even going to be hard to <em>detect</em> whether programs rely on that behavior","m.mentions":{},"msgtype":"m.text"},"ts":1724104606758,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$piNdOkNQfgmNOeiS8NvKR6ywOVS-aZFf2KuYdxUmeDc"},
{"content":{"body":"I don't think there are any good solutions","m.mentions":{},"msgtype":"m.text"},"ts":1724104615296,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$uPQITxfRJxLd-O1TF3quwixUqM3U_BIKeONjbfVoIG8"},
{"content":{"body":"right, I don't see a way to avoid \"painting ourselves into a corner\"","m.mentions":{},"msgtype":"m.text"},"ts":1724104631090,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XOau_OvREAewNp-LKQ_GMY4RPSk4XuvqGXfxXmpZ2Ko"},
{"content":{"body":"we have to choose what the semantics are","m.mentions":{},"msgtype":"m.text"},"ts":1724104640379,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AUbH7L8cwyGhZ2Cv18l9lR45HWbzXerNEXdnI4-zkRc"},
{"content":{"body":"> <@littledan:matrix.org> Stephen Belanger: What do you want us to do when you bring up, browsers should do causal flow, when Andreu is reporting that we have pushback from browsers on this, and you also say you don't actually care much about the browser case?\n\nI mean _I_ care about the browser case. APM vendors maybe _less_ so, but it’s a space we’re gradually starting to need to care about.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24o9eHb6MbtVDzQq9XGML8rOHnNX2KLZDoAGrpDO_GNu0\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a>: What do you want us to do when you bring up, browsers should do causal flow, when Andreu is reporting that we have pushback from browsers on this, and you also say you don't actually care much about the browser case?</blockquote></mx-reply>I mean <em>I</em> care about the browser case. APM vendors maybe <em>less</em> so, but it’s a space we’re gradually starting to need to care about.","m.relates_to":{"m.in_reply_to":{"event_id":"$o9eHb6MbtVDzQq9XGML8rOHnNX2KLZDoAGrpDO_GNu0"}},"msgtype":"m.text"},"ts":1724104659795,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$TZvgrSvt_Xppdp06LBG6OM5UTsC29t1UEDUcd-rY82g"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I mean _I_ care about the browser case. APM vendors maybe _less_ so, but it’s a space we’re gradually starting to need to care about.\n\nOK sorry ignore the last clause and just focus on the first two","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$TZvgrSvt_Xppdp06LBG6OM5UTsC29t1UEDUcd-rY82g?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I mean <em>I</em> care about the browser case. APM vendors maybe <em>less</em> so, but it’s a space we’re gradually starting to need to care about.</blockquote></mx-reply>OK sorry ignore the last clause and just focus on the first two","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TZvgrSvt_Xppdp06LBG6OM5UTsC29t1UEDUcd-rY82g"}},"msgtype":"m.text"},"ts":1724104674897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YkJZlkXIFe7xC3z_ZoxGkcJQthqC3Gt7E6x-k6wfQMQ"},
{"content":{"body":"It’s more just that servers have very different execution patterns from browsers, and if you define something _only_ considering browser runtime semantics then you make it unusable for servers.","format":"org.matrix.custom.html","formatted_body":"It’s more just that servers have very different execution patterns from browsers, and if you define something <em>only</em> considering browser runtime semantics then you make it unusable for servers.","msgtype":"m.text"},"ts":1724104711821,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$3KIJ0dfVgY9EE49ytlQJdyXn9xIQNnm2DxcoAYcLxn0"},
{"content":{"body":"maybe you could be more concrete about a server case that you're worried about us defining the wrong semantics for?","m.mentions":{},"msgtype":"m.text"},"ts":1724104736677,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9FrIFWY7V4RN5_XSpvO68Vt4nvFmebLV60p77n02GNY"},
{"content":{"body":"> <@abotella:igalia.com> Yes, but the problem with that is that the web is not versioned, so if programs start to rely on the behavior *now*, that behavior will be locked forever\n\nYes, that’s my concern with the “giving up” approach. If we can be sure that one would never _expect_ an empty context, but it could be present in some scenarios, then it could be seen as just an absence of support for that scenario. But if people begin to _expect_ an empty context in that case then it becomes contract.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24GZYfym0VCr7fqYFJBrSv8-cJ_-XYL75d8luqKGL1uCg\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>Yes, but the problem with that is that the web is not versioned, so if programs start to rely on the behavior <em>now</em>, that behavior will be locked forever</blockquote></mx-reply>Yes, that’s my concern with the “giving up” approach. If we can be sure that one would never <em>expect</em> an empty context, but it could be present in some scenarios, then it could be seen as just an absence of support for that scenario. But if people begin to <em>expect</em> an empty context in that case then it becomes contract.","m.relates_to":{"m.in_reply_to":{"event_id":"$GZYfym0VCr7fqYFJBrSv8-cJ_-XYL75d8luqKGL1uCg"}},"msgtype":"m.text"},"ts":1724104819861,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$iIjeUuvNC4sM8iKooNmXbTNQbUDHeRxh3OVGMO66eho"},
{"content":{"body":"> <@littledan:matrix.org> maybe you could be more concrete about a server case that you're worried about us defining the wrong semantics for?\n\nI’ve stated it before, as has Matteo. Users expect things to persist into _temporally_ continuing code, not just call-recursive code. AsyncContext as it is now gets the call-recursive flow fine, but doesn’t flow _out_ to get the temporally continuous context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%249FrIFWY7V4RN5_XSpvO68Vt4nvFmebLV60p77n02GNY\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>maybe you could be more concrete about a server case that you're worried about us defining the wrong semantics for?</blockquote></mx-reply>I’ve stated it before, as has Matteo. Users expect things to persist into <em>temporally</em> continuing code, not just call-recursive code. AsyncContext as it is now gets the call-recursive flow fine, but doesn’t flow <em>out</em> to get the temporally continuous context.","m.relates_to":{"m.in_reply_to":{"event_id":"$9FrIFWY7V4RN5_XSpvO68Vt4nvFmebLV60p77n02GNY"}},"msgtype":"m.text"},"ts":1724104946909,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$gZNCeGVAHt_Y2fG7414xpDgMEXk6t8o1HBNR7Nd8Vrs"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I’ve stated it before, as has Matteo. Users expect things to persist into _temporally_ continuing code, not just call-recursive code. AsyncContext as it is now gets the call-recursive flow fine, but doesn’t flow _out_ to get the temporally continuous context.\n\nI know you and Matteo have stated this broad goal, but I think what we need to do is collect more concrete cases of variables and callsites where it's important that this handling be done","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$gZNCeGVAHt_Y2fG7414xpDgMEXk6t8o1HBNR7Nd8Vrs?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I’ve stated it before, as has Matteo. Users expect things to persist into <em>temporally</em> continuing code, not just call-recursive code. AsyncContext as it is now gets the call-recursive flow fine, but doesn’t flow <em>out</em> to get the temporally continuous context.</blockquote></mx-reply>I know you and Matteo have stated this broad goal, but I think what we need to do is collect more concrete cases of variables and callsites where it's important that this handling be done","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gZNCeGVAHt_Y2fG7414xpDgMEXk6t8o1HBNR7Nd8Vrs"}},"msgtype":"m.text"},"ts":1724105011839,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZpLtlQ-p6pWXsvOcTYM7LZazQ3vTc95hsJ2mgs_UPcc"},
{"content":{"body":"Like we need to be able to create a span in a mysql query call, have that span flow out to the function that called it, and become the parent of the next span created in logically continuing code.","msgtype":"m.text"},"ts":1724105020409,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$TZJ3Xtk-H1JKcTR-B72b_6yDdJj89JkZCk1PNIOkVdU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes, that’s my concern with the “giving up” approach. If we can be sure that one would never _expect_ an empty context, but it could be present in some scenarios, then it could be seen as just an absence of support for that scenario. But if people begin to _expect_ an empty context in that case then it becomes contract.\n\nThere are at least two cases (XHR and same-window `postMessage`) where things internal to Chrome need the context to be propagated asynchronously. So it wouldn't be using the empty context for all events with an async source. But that's probably not enough for developers to not begin to expect an empty context in all other cases","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$iIjeUuvNC4sM8iKooNmXbTNQbUDHeRxh3OVGMO66eho?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yes, that’s my concern with the “giving up” approach. If we can be sure that one would never <em>expect</em> an empty context, but it could be present in some scenarios, then it could be seen as just an absence of support for that scenario. But if people begin to <em>expect</em> an empty context in that case then it becomes contract.</blockquote></mx-reply>There are at least two cases (XHR and same-window <code>postMessage</code>) where things internal to Chrome need the context to be propagated asynchronously. So it wouldn't be using the empty context for all events with an async source. But that's probably not enough for developers to not begin to expect an empty context in all other cases","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iIjeUuvNC4sM8iKooNmXbTNQbUDHeRxh3OVGMO66eho"}},"msgtype":"m.text"},"ts":1724105037624,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UracPD37LLqSSlLzaoFwYhy917yZf6QdvZS-ASE0g2A"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Like we need to be able to create a span in a mysql query call, have that span flow out to the function that called it, and become the parent of the next span created in logically continuing code.\n\nCan this be done by mutating a span object that's held in an asynccontext variable? I thought that's what OTel already does","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$TZJ3Xtk-H1JKcTR-B72b_6yDdJj89JkZCk1PNIOkVdU?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Like we need to be able to create a span in a mysql query call, have that span flow out to the function that called it, and become the parent of the next span created in logically continuing code.</blockquote></mx-reply>Can this be done by mutating a span object that's held in an asynccontext variable? I thought that's what OTel already does","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TZJ3Xtk-H1JKcTR-B72b_6yDdJj89JkZCk1PNIOkVdU"}},"msgtype":"m.text"},"ts":1724105064145,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1e9cISnlszD7spdjBz9oN9Cwh7XMBIhLSEQuuK1LlPo"},
{"content":{"body":"No, because you lose the causality if you don’t actually have causal flow.","msgtype":"m.text"},"ts":1724105108716,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$Zbs3Dins6BtbA0X8tvMxeOmqbOO64XMw171hr66MQxY"},
{"content":{"body":"> <@littledan:matrix.org> Can this be done by mutating a span object that's held in an asynccontext variable? I thought that's what OTel already does\n\nThis is also what we're doing with our internal tracing framework","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$1e9cISnlszD7spdjBz9oN9Cwh7XMBIhLSEQuuK1LlPo?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Can this be done by mutating a span object that's held in an asynccontext variable? I thought that's what OTel already does</blockquote></mx-reply>This is also what we're doing with our internal tracing framework","m.mentions":{"user_ids":["@littledan:matrix.org","@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1e9cISnlszD7spdjBz9oN9Cwh7XMBIhLSEQuuK1LlPo"}},"msgtype":"m.text"},"ts":1724105109322,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$_JeJRaWqp6CSaecrC09MtEnMsg0KWOURB-d1_vvx8qM"},
{"content":{"body":"> <@stephenbelanger:matrix.org> No, because you lose the causality if you don’t actually have causal flow.\n\ncan you elaborate on what you mean here?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Zbs3Dins6BtbA0X8tvMxeOmqbOO64XMw171hr66MQxY?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>No, because you lose the causality if you don’t actually have causal flow.</blockquote></mx-reply>can you elaborate on what you mean here?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Zbs3Dins6BtbA0X8tvMxeOmqbOO64XMw171hr66MQxY"}},"msgtype":"m.text"},"ts":1724105129648,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PmV_wXPCaj5h-wfsWH988Anh7hi_hhbVkov7a4Q7hzs"},
{"content":{"body":"I’ve provided examples before that if you, for example, do a Promise.all(…), have no way to know which branch you’re trying to merge back to.","msgtype":"m.text"},"ts":1724105144401,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$BXS8OngQVAq-pyGkLMMtkHjv2fbxjwKPLCBSdqThMI0"},
{"content":{"body":"You’d have two branches trying to write to the same span and it would breaks","msgtype":"m.text"},"ts":1724105171289,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$kL-cGR7t4Aqpa7WGtHcRHRZ38F2dLpLa3-80UoQ40kA"},
{"content":{"body":"* You’d have two branches trying to write to the same span and it would break.","m.new_content":{"body":"You’d have two branches trying to write to the same span and it would break.","msgtype":"m.text"},"m.relates_to":{"event_id":"$kL-cGR7t4Aqpa7WGtHcRHRZ38F2dLpLa3-80UoQ40kA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724105178095,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$MBGJHgZSAabnw2MHAgq1uBr4D_zjLxv--0_RoHQVoT8"},
{"content":{"body":"but... wasn't your solution to choose arbitrary among them anyway?","m.mentions":{},"msgtype":"m.text"},"ts":1724105192918,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z1dR1wwIXUXBOAQ9i8Q8mU9thnCRVbQRSot-6ZoerDE"},
{"content":{"body":"> <@stephenhicks:matrix.org> This is also what we're doing with our internal tracing framework\n\nAnd we prefer it over the flow-through model because of the lexical guarantees against context being nuked by a bad actor in the middle.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_JeJRaWqp6CSaecrC09MtEnMsg0KWOURB-d1_vvx8qM?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>This is also what we're doing with our internal tracing framework</blockquote></mx-reply>And we prefer it over the flow-through model because of the lexical guarantees against context being nuked by a bad actor in the middle.","m.mentions":{"user_ids":["@littledan:matrix.org","@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_JeJRaWqp6CSaecrC09MtEnMsg0KWOURB-d1_vvx8qM"}},"msgtype":"m.text"},"ts":1724105199109,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kJb9Ob0jq2PK2m2KdAcwku1HIUWxgfY3bWO3lsSRSog"},
{"content":{"body":" * but... wasn't your solution to choose arbitrarily among them anyway?","m.mentions":{},"m.new_content":{"body":"but... wasn't your solution to choose arbitrarily among them anyway?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$z1dR1wwIXUXBOAQ9i8Q8mU9thnCRVbQRSot-6ZoerDE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724105201740,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$16zi2_I46mktf3kFclq7OmADLQhT6ZRdiY3il0pbnIc"},
{"content":{"body":"You can only nuke flow-through if you mess with the context through a global graph, which it’s designed to generally not doz","msgtype":"m.text"},"ts":1724105271202,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$OzLwKdn5hNb7CbJEtPmWezowGalXo9PbAnhQAfkUiGY"},
{"content":{"body":"* You can only nuke flow-through if you mess with the context through a global graph, which it’s designed to generally not do.","m.new_content":{"body":"You can only nuke flow-through if you mess with the context through a global graph, which it’s designed to generally not do.","msgtype":"m.text"},"m.relates_to":{"event_id":"$OzLwKdn5hNb7CbJEtPmWezowGalXo9PbAnhQAfkUiGY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724105275274,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$5MiRPYU5vUWIvb4KI-whzMyy1u0knb1hbOFwExKUtg8"},
{"content":{"body":"And you can cause the same problems with around flow right now.","msgtype":"m.text"},"ts":1724105292071,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$lYAC57qVC9LizCSh8w8i-OcfavcFj5OMn_fxL6IRqMw"},
{"content":{"body":"We’re doing exactly that right now with AsyncResource in Node.js messing with a global graph and causing problems for people.","msgtype":"m.text"},"ts":1724105318348,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$SeXx1j2aczeIHgF9Sm9byPW4kbImsEyMUijWchVttNQ"},
{"content":{"body":"Around flow is not inherently safer.","msgtype":"m.text"},"ts":1724105348346,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$bb9LuuYI6BBkcXOn-HgOdlk8XW-y8YSGrjq0GGd80fU"},
{"content":{"body":"It’s actually _less_ safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful z","format":"org.matrix.custom.html","formatted_body":"It’s actually <em>less</em> safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful z","msgtype":"m.text"},"ts":1724105381395,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$9GiWb_An6f4DYA5y0wP_tY6Rw9Y9u3i7kQFsbAPB5uk"},
{"content":{"body":"* It’s actually less safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","m.new_content":{"body":"It’s actually less safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","msgtype":"m.text"},"m.relates_to":{"event_id":"$9GiWb_An6f4DYA5y0wP_tY6Rw9Y9u3i7kQFsbAPB5uk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724105385447,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$5aIFvBEd0I6N__67KUrJyr5meDoT2dCC86VmmYeUBK8"},
{"content":{"body":"* It’s actually _less_ safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","format":"org.matrix.custom.html","formatted_body":"* It’s actually <em>less</em> safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","m.new_content":{"body":"It’s actually _less_ safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","format":"org.matrix.custom.html","formatted_body":"It’s actually <em>less</em> safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.","msgtype":"m.text"},"m.relates_to":{"event_id":"$9GiWb_An6f4DYA5y0wP_tY6Rw9Y9u3i7kQFsbAPB5uk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724105397370,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$NFoBdkgKxob2hlusgsvie6xIZWl8Nnq6EH6dJRmO5xk"},
{"content":{"body":"I think the ideal state to my mind is that we have a version of my spreadsheet where all 400 rows are filled out consistently, with each either being \"registration time\", \"empty context\", or some other combination involving more specific contexts, etc.  And then polyfills would likely fall back on empty context when they can't access the correct one.","m.mentions":{},"msgtype":"m.text"},"ts":1724105454304,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$VtNMzWzaI9QYjkvNsm0ReVMLGZrKoTXwH2NSkeK9Nxk"},
{"content":{"body":"Around flow also requires _substantially_ more binding logic than through flow as through flow is in most cases just a continuation of the scope you are already in, while other semantics are continuously trying to return to a prior state out of the state it is in presently.","format":"org.matrix.custom.html","formatted_body":"Around flow also requires <em>substantially</em> more binding logic than through flow as through flow is in most cases just a continuation of the scope you are already in, while other semantics are continuously trying to return to a prior state out of the state it is in presently.","msgtype":"m.text"},"ts":1724105559394,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$olpScZlX0AvF6-Ft_nRoonLZ3LpAs1WP5AMp6mtK7hk"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It’s actually _less_ safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.\n\nThis is a good point, which demonstrates that the least safe thing of all is bad defaults.  Any time anyone needs to break from the defaults, it leads to risk of (1) not doing it because they didn't realize they needed to, (2) doing it too much/inappropriately because it's subtle.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$9GiWb_An6f4DYA5y0wP_tY6Rw9Y9u3i7kQFsbAPB5uk?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It’s actually <em>less</em> safe because you frequently need to bind out of the paths it gives you because most are only conditionally useful.</blockquote></mx-reply>This is a good point, which demonstrates that the least safe thing of all is bad defaults.  Any time anyone needs to break from the defaults, it leads to risk of (1) not doing it because they didn't realize they needed to, (2) doing it too much/inappropriately because it's subtle.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9GiWb_An6f4DYA5y0wP_tY6Rw9Y9u3i7kQFsbAPB5uk"}},"msgtype":"m.text"},"ts":1724105609055,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$wqSIMwHRzHm80E4S5JvB1Ia1TT3oRgoNtajWbNtrpPk"},
{"content":{"body":"> <@stephenhicks:matrix.org> I think the ideal state to my mind is that we have a version of my spreadsheet where all 400 rows are filled out consistently, with each either being \"registration time\", \"empty context\", or some other combination involving more specific contexts, etc.  And then polyfills would likely fall back on empty context when they can't access the correct one.\n\nsounds good, but it'd be easier to fill this out if we had some agreed-on examples of cases where we don't want to use the registration context and want to use something else in particular. Do you have a few off the top of your head?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$VtNMzWzaI9QYjkvNsm0ReVMLGZrKoTXwH2NSkeK9Nxk?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I think the ideal state to my mind is that we have a version of my spreadsheet where all 400 rows are filled out consistently, with each either being &quot;registration time&quot;, &quot;empty context&quot;, or some other combination involving more specific contexts, etc.  And then polyfills would likely fall back on empty context when they can&#39;t access the correct one.</blockquote></mx-reply>sounds good, but it'd be easier to fill this out if we had some agreed-on examples of cases where we don't want to use the registration context and want to use something else in particular. Do you have a few off the top of your head?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VtNMzWzaI9QYjkvNsm0ReVMLGZrKoTXwH2NSkeK9Nxk"}},"msgtype":"m.text"},"ts":1724105636057,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UBUzg4BsxB2DeJMKsj8HIMe77tiT0LA6DiAJlAUrpSA"},
{"content":{"body":"Honestly, I almost never want registration context.  setTimeout is about it.","m.mentions":{},"msgtype":"m.text"},"ts":1724105732508,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ntZNxrC8JTLmyC9Qpaii_A0Z01bLwkXBJjb4YECGOio"},
{"content":{"body":"XHR","m.mentions":{},"msgtype":"m.text"},"ts":1724105752881,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$DcsEFxJAYxToDAEc_niVYjuNmcUNyEJ528lf7mSIHa8"},
{"content":{"body":"so, idk, if you could go crazy and fill out the table with your opinions (maybe we could make different columns for us each to \"vote\") that'd be helpful","m.mentions":{},"msgtype":"m.text"},"ts":1724105771886,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$39R1y58gGO0CKjcK6JN4r64cDGXs0qISCCwPnOtmzIg"},
{"content":{"body":"I don't know whether you want things to be null or something else, for the other cases","m.mentions":{},"msgtype":"m.text"},"ts":1724105783241,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8lL_SbmpUeJ8az5gqgxxuAFDIWMzwPWVJBlhY8Vzo8A"},
{"content":{"body":"I was suggesting above, let's go crazy and make all events always be in the null context; I didn't really get a read for whether you liked that idea","m.mentions":{},"msgtype":"m.text"},"ts":1724105811446,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_jtUhXkLD44no3AImPP6rV6Tm1VY2dGl3ibp5xKfCOE"},
{"content":{"body":"sorry, yes, I think that's closer to what I'd prefer","m.mentions":{},"msgtype":"m.text"},"ts":1724105849830,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$t31FgVcpZtrcC_2P36bTNDlEemnAobbqWoIc1wvh0Qc"},
{"content":{"body":"though I'm not sure if that answer is quite nuanced enough to fly","m.mentions":{},"msgtype":"m.text"},"ts":1724105884847,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$aC42bQisHx680ukaYXhzKuqLDY45UXLLwWw25fuCoSg"},
{"content":{"body":"what sort of nuance do you think would be good to correct?","m.mentions":{},"msgtype":"m.text"},"ts":1724105916396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bDbJwz5VaXrwnDngC4UZFovFmhZM0tEkpeO-aVa3rig"},
{"content":{"body":"A lot of events seem to be triggerable either by code or by user interaction.  I would like to see the active context when the dispatch task was queued for the former case, and the empty context for the latter.  This requires an understanding that the listener needs to be able to handle both empty and non-empty contexts, depending on how the event was triggered.","m.mentions":{},"msgtype":"m.text"},"ts":1724106206992,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$2M7ie70i3scpsaRZGBbtGjRjePOu27s76BItQfuLmaA"},
{"content":{"body":"for polyfills, everything looks user-triggered","m.mentions":{},"msgtype":"m.text"},"ts":1724106232920,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$tgz0YdMG6BvFXJT_Y01tHWj5-50Knw0Q4jaMG_gmFW4"},
{"content":{"body":"OK, if this is the only thing to follow (dispatch context vs empty context) it seems simple enough for me to drop my \"this is also Zalgo\" thing","m.mentions":{},"msgtype":"m.text"},"ts":1724106246065,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cLsLTjpDKeII6MI1MK1eNIT-I56eAeBHyuDsl0vuV_Q"},
{"content":{"body":"also seems simple enough for browsers' concerns about \"can we do this without having some huge understanding of tracing whenever handling any callback\"","m.mentions":{},"msgtype":"m.text"},"ts":1724106286130,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-gEu-jIhNkrIbuPcLggQScu2g5mM0CoETr0nrVXay-k"},
{"content":{"body":"in Andreu's analysis, he identified many cases where the registration context just seemed like the right answer, beyond setTimeout. Did you have any thoughts on those?","m.mentions":{},"msgtype":"m.text"},"ts":1724106313516,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DoZrjPQaxVTxwo4ILO1bjn2nvPn_jNmiPsCR74_WenI"},
{"content":{"body":"I don't know which those were","m.mentions":{},"msgtype":"m.text"},"ts":1724106332265,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$MT_hdWUNWHytVtuBQa6BwsFo4I5FCb7HrMH9NorCfrs"},
{"content":{"body":"anything before events in the web integration document","m.mentions":{},"msgtype":"m.text"},"ts":1724106346879,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$MO34VkHUP4YiYQorKMk_OeNZEIsfkG39vWPdYwhi-ws"},
{"content":{"body":"I think XHR might be one case where it's something other than dispatch-or-empty","m.mentions":{},"msgtype":"m.text"},"ts":1724106357934,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$7IuxParUVDtQfLPPY1d4Kx1OsDUTBSY11qf3kWcNoIk"},
{"content":{"body":" * anything before the event section in the web integration document","m.mentions":{},"m.new_content":{"body":"anything before the event section in the web integration document","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MO34VkHUP4YiYQorKMk_OeNZEIsfkG39vWPdYwhi-ws","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724106359309,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eOriMnOzTEfLbyCIeXOEDK0VSVveOvzSi7VJIb7v6OQ"},
{"content":{"body":"can you look at Andreu's doc and identify which parts you agree and disagree with?","m.mentions":{},"msgtype":"m.text"},"ts":1724106370693,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$z8uq8wSUYn6uQYXYjoeGnvMEODhfzFAd3TivP2mbX4o"},
{"content":{"body":"> <@littledan:matrix.org> can you look at Andreu's doc and identify which parts you agree and disagree with?\n\nThis is https://github.com/tc39/proposal-async-context/pull/100 ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$z8uq8wSUYn6uQYXYjoeGnvMEODhfzFAd3TivP2mbX4o?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>can you look at Andreu&#39;s doc and identify which parts you agree and disagree with?</blockquote></mx-reply>This is https://github.com/tc39/proposal-async-context/pull/100 ?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$z8uq8wSUYn6uQYXYjoeGnvMEODhfzFAd3TivP2mbX4o"}},"msgtype":"m.text"},"ts":1724106417492,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$cybGPYaDRr8kyTSwR4cuhZ2WtA9hh1-uU3S07340WC8"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1724106420851,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kd683wzscn4sY1uZi3XffdPzmVk_xIHXYN2shY42BNE"},
{"content":{"body":"thanks","m.mentions":{},"msgtype":"m.text"},"ts":1724106433371,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xR_yrSDLMfojqlQkmb6GpBAVAcVin4DZ4qiqcz2Rj3I"},
{"content":{"body":"* Observers can batch, so you can't get the causal context - I don't feel strongly between null vs registration, but probably we need to expose the cause via mutation record property\n* I don't have enough context for action registrations to speak intelligently, but I think they are similar to events.  Certainly web component lifecycle callbacks need to get a causally relevant (or fallback on null) snapshot, but I suspect something like mediaSession might also have a more relevant context, e.g. if you call `play()` programmatically or something","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>Observers can batch, so you can't get the causal context - I don't feel strongly between null vs registration, but probably we need to expose the cause via mutation record property</li>\n<li>I don't have enough context for action registrations to speak intelligently, but I think they are similar to events.  Certainly web component lifecycle callbacks need to get a causally relevant (or fallback on null) snapshot, but I suspect something like mediaSession might also have a more relevant context, e.g. if you call <code>play()</code> programmatically or something</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1724107033921,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$SeFY3oS5s9ur669m_5nxEdc1iXqhdPTv6qEWhQdOGfQ"},
{"content":{"body":"Async completion callbacks all seem good as they are - I generally see registratio-time as a preferred default for callbacks that will run at most once, at a semi-predicatable time.  When it will call more than once, indefinitely into the future, I think registration is the wrong _default_, though you may still need opt back into it in some cases.","format":"org.matrix.custom.html","formatted_body":"Async completion callbacks all seem good as they are - I generally see registratio-time as a preferred default for callbacks that will run at most once, at a semi-predicatable time.  When it will call more than once, indefinitely into the future, I think registration is the wrong <em>default</em>, though you may still need opt back into it in some cases.","m.mentions":{},"msgtype":"m.text"},"ts":1724107179583,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$63321D-aTwTR-KNsmKIP8qx2-_SyEYHY_SJ32vYC7ls"},
{"content":{"body":"can you elaborate on which cases we should opt back into registration context?","m.mentions":{},"msgtype":"m.text"},"ts":1724107318579,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TCo4sez6WZoOUFemlmZY0gizNz-J592Ej0BMlWvtEAY"},
{"content":{"body":"for observers: do you think the causal context is necessary for the MVP, or is it OK if it's a \"for-later\" thing?","m.mentions":{},"msgtype":"m.text"},"ts":1724107341929,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CepINrfj2i9V7kxrblWMGUER4tLA-QzjE9MV1WuMdc"},
{"content":{"body":"observers are a fun test of what we mean by \"synchronous\"!","m.mentions":{},"msgtype":"m.text"},"ts":1724107361204,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rVrKrhNWmIsrRvF0pVfi4Unn7fcS_NSUaRPJdqH4D80"},
{"content":{"body":"for observers, since the cause would be a new property, that can be left for later without risk of breakage","m.mentions":{},"msgtype":"m.text"},"ts":1724107748800,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-gr0dkFE9yQ-YSco_uKHbT3mnmCq9IK723ZbZSfUjQk"},
{"content":{"body":"> <@stephenhicks:matrix.org> Yes, the place where this is coming up is with the root trace, where the bootstrap runs in a bootstrap trace, and then event handlers look for a missing trace to know to start a new one (rather than continue an existing one).  It might be possible to explicitly zero out the trace when registering listeners - I've asked whether that's viable.\n\nIs the trace on event handler agnostic to event types? In implementations where instrument known event types, it can determine either creating a new root span, or creating a child span by event type semantics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$EG6M6CK3uqExhesTfIdh0NY-c2NoWCdaOiQuoHYraT4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Yes, the place where this is coming up is with the root trace, where the bootstrap runs in a bootstrap trace, and then event handlers look for a missing trace to know to start a new one (rather than continue an existing one).  It might be possible to explicitly zero out the trace when registering listeners - I&#39;ve asked whether that&#39;s viable.</blockquote></mx-reply>Is the trace on event handler agnostic to event types? In implementations where instrument known event types, it can determine either creating a new root span, or creating a child span by event type semantics.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$EG6M6CK3uqExhesTfIdh0NY-c2NoWCdaOiQuoHYraT4"}},"msgtype":"m.text"},"ts":1724110214488,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$8SuRyI3NYJSWm9URO_UegqS4ptJ0zSiqe5H4QQ9r6zE"},
{"content":{"body":"Like in OpenTelemetry, it is needed to be aware of event type semantics to produce useful traces.","m.mentions":{},"msgtype":"m.text"},"ts":1724110309008,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$Ca1Blez0qBidGPMkQsbtQq-7kv3go4N7h5yCOcUbmM0"}
]