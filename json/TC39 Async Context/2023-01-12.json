[
{"content":{"org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> MarkM started a talk-through of his investigation into whether to embrace AsyncContext at the SES Strategy Meeting yesterday. We didn’t get close to finishing the review, so this is Part 1, and we expect these to get gradually more refined https://youtu.be/vECr5IDJzpg\n\nHow has this discussion gone? Any more progress on the subsequent meeting? (Sorry for missing these.)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$tCyrrQ-j76GIc0c5CgXJASg_dignYJRejUFqd5d0RKA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>MarkM started a talk-through of his investigation into whether to embrace AsyncContext at the SES Strategy Meeting yesterday. We didn’t get close to finishing the review, so this is Part 1, and we expect these to get gradually more refined https://youtu.be/vECr5IDJzpg</blockquote></mx-reply>How has this discussion gone? Any more progress on the subsequent meeting? (Sorry for missing these.)","mimetype":"text/html"}],"body":"> <@kriskowal:matrix.org> MarkM started a talk-through of his investigation into whether to embrace AsyncContext at the SES Strategy Meeting yesterday. We didn’t get close to finishing the review, so this is Part 1, and we expect these to get gradually more refined https://youtu.be/vECr5IDJzpg\n\nHow has this discussion gone? Any more progress on the subsequent meeting? (Sorry for missing these.)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$tCyrrQ-j76GIc0c5CgXJASg_dignYJRejUFqd5d0RKA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>MarkM started a talk-through of his investigation into whether to embrace AsyncContext at the SES Strategy Meeting yesterday. We didn’t get close to finishing the review, so this is Part 1, and we expect these to get gradually more refined https://youtu.be/vECr5IDJzpg</blockquote></mx-reply>How has this discussion gone? Any more progress on the subsequent meeting? (Sorry for missing these.)","m.relates_to":{"m.in_reply_to":{"event_id":"$tCyrrQ-j76GIc0c5CgXJASg_dignYJRejUFqd5d0RKA"}}},"ts":1673539205999,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$usMCWa_saLxQ4hB30D49vijrMVdcmADC-ZwzBXNQMIU"},
{"content":{"org.matrix.msc1767.text":"Second video is https://www.youtube.com/watch?v=28wfHOWCROo","body":"Second video is https://www.youtube.com/watch?v=28wfHOWCROo","msgtype":"m.text"},"ts":1673541009379,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FIheYxYmUAjIe8XzWXeLjjBiO6g5WQMQZvSoQoClx60"},
{"content":{"org.matrix.msc1767.message":[{"body":"We didn't get much feedback _during_ the meeting, but Mark came up with an interesting attack on membranes:\n- [Attack](https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js)\n- [Fix](https://github.com/endojs/endo/pull/1424#discussion_r1067570517)","mimetype":"text/plain"},{"body":"<p>We didn't get much feedback <em>during</em> the meeting, but Mark came up with an interesting attack on membranes:</p>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js\">Attack</a></li>\n<li><a href=\"https://github.com/endojs/endo/pull/1424#discussion_r1067570517\">Fix</a></li>\n</ul>\n","mimetype":"text/html"}],"body":"We didn't get much feedback _during_ the meeting, but Mark came up with an interesting attack on membranes:\n- [Attack](https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js)\n- [Fix](https://github.com/endojs/endo/pull/1424#discussion_r1067570517)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<p>We didn't get much feedback <em>during</em> the meeting, but Mark came up with an interesting attack on membranes:</p>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js\">Attack</a></li>\n<li><a href=\"https://github.com/endojs/endo/pull/1424#discussion_r1067570517\">Fix</a></li>\n</ul>\n"},"ts":1673541089369,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GJLCuFoNG0fH8nq6HptpFctjWIQ1fv--XDT5jig8S7k"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> We didn't get much feedback _during_ the meeting, but Mark came up with an interesting attack on membranes:\n> - [Attack](https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js)\n> - [Fix](https://github.com/endojs/endo/pull/1424#discussion_r1067570517)\n\nhuh, could you explain what this attack and fix mean for AsyncContext?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$GJLCuFoNG0fH8nq6HptpFctjWIQ1fv--XDT5jig8S7k?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><p>We didn't get much feedback <em>during</em> the meeting, but Mark came up with an interesting attack on membranes:</p>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js\">Attack</a></li>\n<li><a href=\"https://github.com/endojs/endo/pull/1424#discussion_r1067570517\">Fix</a></li>\n</ul>\n</blockquote></mx-reply>huh, could you explain what this attack and fix mean for AsyncContext?","mimetype":"text/html"}],"body":"> <@jridgewell:matrix.org> We didn't get much feedback _during_ the meeting, but Mark came up with an interesting attack on membranes:\n> - [Attack](https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js)\n> - [Fix](https://github.com/endojs/endo/pull/1424#discussion_r1067570517)\n\nhuh, could you explain what this attack and fix mean for AsyncContext?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$GJLCuFoNG0fH8nq6HptpFctjWIQ1fv--XDT5jig8S7k?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><p>We didn't get much feedback <em>during</em> the meeting, but Mark came up with an interesting attack on membranes:</p>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/blob/markm-fluid-scopes/packages/eventual-send/test/async-contexts/test-attack.js\">Attack</a></li>\n<li><a href=\"https://github.com/endojs/endo/pull/1424#discussion_r1067570517\">Fix</a></li>\n</ul>\n</blockquote></mx-reply>huh, could you explain what this attack and fix mean for AsyncContext?","m.relates_to":{"m.in_reply_to":{"event_id":"$GJLCuFoNG0fH8nq6HptpFctjWIQ1fv--XDT5jig8S7k"}}},"ts":1673541188684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$U4PJNU6U7hY3Ng6Y-H52G8FTBRZS1FslXI6iBXsyCJk"},
{"content":{"org.matrix.msc1767.message":[{"body":"Briefly, it means all membranes will need to update to use an `AsyncContext` themselves if they care about preventing this type of communication. If not, it still doesn't allow direct access to to the other's graph, so it's not so terrible.","mimetype":"text/plain"},{"body":"Briefly, it means all membranes will need to update to use an <code>AsyncContext</code> themselves if they care about preventing this type of communication. If not, it still doesn't allow direct access to to the other's graph, so it's not so terrible.","mimetype":"text/html"}],"body":"Briefly, it means all membranes will need to update to use an `AsyncContext` themselves if they care about preventing this type of communication. If not, it still doesn't allow direct access to to the other's graph, so it's not so terrible.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"Briefly, it means all membranes will need to update to use an <code>AsyncContext</code> themselves if they care about preventing this type of communication. If not, it still doesn't allow direct access to to the other's graph, so it's not so terrible."},"ts":1673541258164,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TcmihPWuedLiL2aW6O2E4ldyCDYp3lNeEq3U_eTkzHY"},
{"content":{"org.matrix.msc1767.text":"oh, which kind of communication?","body":"oh, which kind of communication?","msgtype":"m.text"},"ts":1673541275144,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2yFbrJqkyzMW0eWJpETdlOQ_PkJU1YPKPdXv2nlTHwo"},
{"content":{"org.matrix.msc1767.text":"You can communicate 1 bit of information per-call that is not directly seen by the membrane","body":"You can communicate 1 bit of information per-call that is not directly seen by the membrane","msgtype":"m.text"},"ts":1673541312748,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$p2pnZepsYXcBQ22pdZMbSN7aBSSPY-POm33fJtwP2gA"},
{"content":{"org.matrix.msc1767.text":"See my first few paragraphs of the fix","body":"See my first few paragraphs of the fix","msgtype":"m.text"},"ts":1673541327162,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0Hd9-z_gZj5HTIdIdHCgAqjxKKQYL-1M_1cJYU8jhic"},
{"content":{"org.matrix.msc1767.message":[{"body":"> The crux of this attack is that Alice has received 2 callbacks from Bob (they're actually the same === callback, but run in different fluid var contexts), which she stores. After receiving these callbacks, she can then invoke either. Carol cannot tell from the callback's identity which is invoked. Once invoked, Bob can tell from the fluid var state whether the first callback or second callback is invoked.","mimetype":"text/plain"},{"body":"<blockquote>\n<p>The crux of this attack is that Alice has received 2 callbacks from Bob (they're actually the same === callback, but run in different fluid var contexts), which she stores. After receiving these callbacks, she can then invoke either. Carol cannot tell from the callback's identity which is invoked. Once invoked, Bob can tell from the fluid var state whether the first callback or second callback is invoked.</p>\n</blockquote>\n","mimetype":"text/html"}],"body":"> The crux of this attack is that Alice has received 2 callbacks from Bob (they're actually the same === callback, but run in different fluid var contexts), which she stores. After receiving these callbacks, she can then invoke either. Carol cannot tell from the callback's identity which is invoked. Once invoked, Bob can tell from the fluid var state whether the first callback or second callback is invoked.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>The crux of this attack is that Alice has received 2 callbacks from Bob (they're actually the same === callback, but run in different fluid var contexts), which she stores. After receiving these callbacks, she can then invoke either. Carol cannot tell from the callback's identity which is invoked. Once invoked, Bob can tell from the fluid var state whether the first callback or second callback is invoked.</p>\n</blockquote>\n"},"ts":1673541348700,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6U3ywUF-CLIGoNf3N2geuEIxmVO82ZVoq8xWjQvrjlc"},
{"content":{"org.matrix.msc1767.text":"(Carol is the membrane)","body":"(Carol is the membrane)","msgtype":"m.text"},"ts":1673541369503,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tb5hBwJURpn0hwBRAWTPLcea8C7WNnFDz-SYE8Ocv10"},
{"content":{"org.matrix.msc1767.message":[{"body":"Justin Ridgewell: Can we talk more about whether `wrap` is Realm-specific?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Can we talk more about whether <code>wrap</code> is Realm-specific?","mimetype":"text/html"}],"body":"Justin Ridgewell: Can we talk more about whether `wrap` is Realm-specific?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Can we talk more about whether <code>wrap</code> is Realm-specific?"},"ts":1673564897500,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mZxzpGMgiZ5lWbqq_gvOKN3l7BP2JcLQOtpywDXrSmY"},
{"content":{"org.matrix.msc1767.text":"I think this would significantly complicate any implementation","body":"I think this would significantly complicate any implementation","msgtype":"m.text"},"ts":1673564903469,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kq1eH1PvkGdUXkT8k61k1dM-4tZmQma5fUD6OeNt26k"},
{"content":{"org.matrix.msc1767.text":"the use cases for membranes and the types of mitigations don't depend on Realms at all, so I'm not convinced we should do it this way","body":"the use cases for membranes and the types of mitigations don't depend on Realms at all, so I'm not convinced we should do it this way","msgtype":"m.text"},"ts":1673564929818,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V4px4vPddlLABluhncrfL2c5arTSwOaM8-TpckbJ6vM"},
{"content":{"org.matrix.msc1767.text":"On second thought, maybe implementation wouldn't be so complex, but this depends a lot on what semantics we adopt when different realms call each other (I honestly don't know what you have in mind)","body":"On second thought, maybe implementation wouldn't be so complex, but this depends a lot on what semantics we adopt when different realms call each other (I honestly don't know what you have in mind)","msgtype":"m.text"},"ts":1673565062786,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$02L5cmDIV76zXj0qswx6fO8xmfPUmvXJQ6PCQQdFllc"},
{"content":{"org.matrix.msc1767.text":"Having it be per-realm or per-agent isn't important to me, I chose realm because it's easiest to implement in JS, I figured it be easy in C++, and it seems the least objectionable (per the dedent caching semantics)","body":"Having it be per-realm or per-agent isn't important to me, I chose realm because it's easiest to implement in JS, I figured it be easy in C++, and it seems the least objectionable (per the dedent caching semantics)","msgtype":"m.text"},"ts":1673566043316,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Emy5yJ5DDF6glP3-bBGdOSgIxq6glwmP8ppGPfhaukE"},
{"content":{"org.matrix.msc1767.message":[{"body":"Given that membranes will need to update to use `AsyncContext` in same-realm anyways, I don't think it matters if we choose to do per-agent (and they'll need to update for both same-realm and cross-realm)","mimetype":"text/plain"},{"body":"Given that membranes will need to update to use <code>AsyncContext</code> in same-realm anyways, I don't think it matters if we choose to do per-agent (and they'll need to update for both same-realm and cross-realm)","mimetype":"text/html"}],"body":"Given that membranes will need to update to use `AsyncContext` in same-realm anyways, I don't think it matters if we choose to do per-agent (and they'll need to update for both same-realm and cross-realm)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"Given that membranes will need to update to use <code>AsyncContext</code> in same-realm anyways, I don't think it matters if we choose to do per-agent (and they'll need to update for both same-realm and cross-realm)"},"ts":1673566732472,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rQWgf6CaFfU6EtA74sO966KZy4PPYrNLQ6PGezv4odc"}
]