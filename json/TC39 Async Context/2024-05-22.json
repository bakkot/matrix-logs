[
{"content":{"body":"I was kinda thinking out loud, and the fact that zone.js was probably the main reason why we were going with registration-time by default is something I noticed just now","m.mentions":{},"msgtype":"m.text"},"ts":1716336087308,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XRZozLgHBJtF1UShw0_HXE01xJIUanZ84IkZYd7yyuc"},
{"content":{"body":"but I will","m.mentions":{},"msgtype":"m.text"},"ts":1716336089976,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YdDCTpK7m4ZlmB84JP1xk2py0Gm6w6-wMVbKg64kHfk"},
{"content":{"body":"I think Jia Li is the person, but I didnâ€™t manage to reach him through Twitter DMs https://x.com/Jialipassion","msgtype":"m.text"},"ts":1716336276552,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NKYHTY9XeC4HFsXvytZQO9DFKE1WGqZGYwKU4S90B6s"},
{"content":{"body":"We can work with other Angular devs to get his attention if we have trouble","msgtype":"m.text"},"ts":1716336346562,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GE2kqgxL40U8zjVNjKL80K7lY-jy_OoZryNWeXvNj84"},
{"content":{"body":"Or meet him in Tokyo for TC39 this October! He showed up at last yearâ€™s community event","msgtype":"m.text"},"ts":1716336380266,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VNxEaMpM7bNSMtpff3JBwfLHDJXX-2OUKV0dyyoz9xo"},
{"content":{"body":"hm, I can't going to Finland, but I'd love to have a business reason to go to Tokyo ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"ts":1716336622109,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dfN-VTBH82PiItpfBDj_1PEAqibQoioiZKQiq-Wtf2A"},
{"content":{"body":"> <@abotella:igalia.com> I think that maybe the only cases where events should be registration time are the ones where there isn't any possible JS origin for the event\n\nAn argument could be made that if there is no other JS origin, then registration time _is_ the origin.  That said, I'm a little horrified by what this will mean for polyfills...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$HGPy3GoPzfoQoGLYa5mgJk4khDLn-CGKfL9W7qWhdAc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br />I think that maybe the only cases where events should be registration time are the ones where there isn't any possible JS origin for the event</blockquote></mx-reply>An argument could be made that if there is no other JS origin, then registration time <em>is</em> the origin.  That said, I'm a little horrified by what this will mean for polyfills...","m.relates_to":{"m.in_reply_to":{"event_id":"$HGPy3GoPzfoQoGLYa5mgJk4khDLn-CGKfL9W7qWhdAc"}},"msgtype":"m.text"},"ts":1716337501029,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$R7prkfrZ9HIT9WgobPEYmjQMDMTj_CxpYakiEvuB6Z8"},
{"content":{"body":"The implementation (and specification) of this version will certainly be more complex, including for browsers. So it is important that we consolidate documentation for exactly why this design is useful and provides better context.","msgtype":"m.text"},"ts":1716339725752,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k2HFfgBR6PB2KJQlB1BT25moOHpn-30wWYFvLwoSDFY"},
{"content":{"body":"Sometimes the most relevant context isnâ€™t there exactly synchronously and needs to be saved and restored (unhandled rejection is an example of this)","msgtype":"m.text"},"ts":1716339795743,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hHQOcpkIQgf9R-j7K9fgBYSHKdLeDQZStwEWnCeqcr4"},
{"content":{"body":"> <@jridgewell:matrix.org> What is the example code? What is the indicated issue URL? Weâ€™d previosuly discussed why we donâ€™t have an `enterWith` API because of cases like this, it needs to properly restore the context after the execution of the inner async function pauses its await. Part of the reason we discussed `using` declarations with modifications to `await` keyword to restore the previous context at the suspend point.\n\nThis is exactly what I'm talking about. You seem to be explicitly aiming for binding _around_ awaits, cutting off the branched execution merging back. This is explicitly what most users have told me they _don't_ want. The code coming _out_ of that await is a continuation, so it's essentially the same as if the remaining code was passed into that call as a callback, which _does_ propagate context through. The fact that promises and async/await _will not_ flow context through to continuations is extremely confusing to literally every user I've talked to about this. The whole _point_ of context management to everyone I have talked to is to be able to set a value at some point in a branch of async execution and to be able to retrieve that same value _anywhere_ in logically continuing execution, which _any_ merge point like awaits, promise continuations, or callbacks all _are_.\n\nThe fact we are specifying a behaviour which seemingly no one outside of this group is asking for is very strange to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$PC8w5gAQfzkUyMTSmOnMRIEMgVlgsuyJdSCY79lGaRQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>What is the example code? What is the indicated issue URL? Weâ€™d previosuly discussed why we donâ€™t have an <code data-md=\"`\">enterWith</code> API because of cases like this, it needs to properly restore the context after the execution of the inner async function pauses its await. Part of the reason we discussed <code data-md=\"`\">using</code> declarations with modifications to <code data-md=\"`\">await</code> keyword to restore the previous context at the suspend point.</blockquote></mx-reply><p>This is exactly what I'm talking about. You seem to be explicitly aiming for binding <em>around</em> awaits, cutting off the branched execution merging back. This is explicitly what most users have told me they <em>don't</em> want. The code coming <em>out</em> of that await is a continuation, so it's essentially the same as if the remaining code was passed into that call as a callback, which <em>does</em> propagate context through. The fact that promises and async/await <em>will not</em> flow context through to continuations is extremely confusing to literally every user I've talked to about this. The whole <em>point</em> of context management to everyone I have talked to is to be able to set a value at some point in a branch of async execution and to be able to retrieve that same value <em>anywhere</em> in logically continuing execution, which <em>any</em> merge point like awaits, promise continuations, or callbacks all <em>are</em>.</p>\n<p>The fact we are specifying a behaviour which seemingly no one outside of this group is asking for is very strange to me.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PC8w5gAQfzkUyMTSmOnMRIEMgVlgsuyJdSCY79lGaRQ"}},"msgtype":"m.text"},"ts":1716369762955,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$cQ9q3UPjgtkXx1nC_4beJu1EP-4ZHvcHGYjS1CgNU-I"},
{"content":{"body":"> <@jridgewell:matrix.org> What issue? There were like 400 messages in this channel over the last week.\n\nhttps://github.com/nodejs/node/issues/53037","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$RkvRiEMBW7NuC9yy1mCiaRU6NXzBa8ct_JmVDDyS50I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>What issue? There were like 400 messages in this channel over the last week.</blockquote></mx-reply>https://github.com/nodejs/node/issues/53037","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RkvRiEMBW7NuC9yy1mCiaRU6NXzBa8ct_JmVDDyS50I"}},"msgtype":"m.text"},"ts":1716369808155,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$8JUWrTs92nVcv9TG-JTQCkXQMjdU5moW6_heA43Ijck"},
{"content":{"body":"> <@jridgewell:matrix.org> So itâ€™s the case where `doSomething` doesnâ€™t create a parent span for its children? And we have to infer order of sibilngs when two `doSomething` calls are interleaved. Is this not just user error?\n\nNo, this is not user error. This is a common execution pattern which auto-instrumentation needs to be able to resolve, and it can't be done unless we flow context _through_ merging branches.\n\nThis is user code which _we do not control_ but are expected to be able to trace through correctly. There is no user error here because the user expects to not have to modify their code for it to be traceable, and there's no error in how APM vendors are handling these situations because we simply lack the tools for it to be _possible_ to track directly. This was the entire point of creating AsyncLocalStorage in the _first_ place, but it sadly only got _part_ of the way to correctness due to resource constraints and lacking runtime capabilities.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$T7nC37I7C98fbqhFo9BnY9K6iQvJ11hYe1so3w9pxS8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>So itâ€™s the case where <code data-md=\"`\">doSomething</code> doesnâ€™t create a parent span for its children? And we have to infer order of sibilngs when two <code data-md=\"`\">doSomething</code> calls are interleaved. Is this not just user error?</blockquote></mx-reply><p>No, this is not user error. This is a common execution pattern which auto-instrumentation needs to be able to resolve, and it can't be done unless we flow context <em>through</em> merging branches.</p>\n<p>This is user code which <em>we do not control</em> but are expected to be able to trace through correctly. There is no user error here because the user expects to not have to modify their code for it to be traceable, and there's no error in how APM vendors are handling these situations because we simply lack the tools for it to be <em>possible</em> to track directly. This was the entire point of creating AsyncLocalStorage in the <em>first</em> place, but it sadly only got <em>part</em> of the way to correctness due to resource constraints and lacking runtime capabilities.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$T7nC37I7C98fbqhFo9BnY9K6iQvJ11hYe1so3w9pxS8"}},"msgtype":"m.text"},"ts":1716370093794,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$XWboUZC-WkYlf9snbtO6MlDZUjnOSZWGS_otsKivjxE"}
]