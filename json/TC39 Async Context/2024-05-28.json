[
{"content":{"body":"> <@legendecas:matrix.org> A single promise could be branched multiple times, and `unhandledrejection` events are dispatched for each \"unhandled\" promise, rather than a single source of rejection\n\nI don't think this is a problem. Context splits are not problematic, only merges are. If you only care about one of the branched promises but not the rest, you could still want to know the source of rejection","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$pIoArlB7iStSTX2stB0iT1d_12g3KVXS5kwtKd6IH-E?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>A single promise could be branched multiple times, and <code>unhandledrejection</code> events are dispatched for each \"unhandled\" promise, rather than a single source of rejection</blockquote></mx-reply>I don't think this is a problem. Context splits are not problematic, only merges are. If you only care about one of the branched promises but not the rest, you could still want to know the source of rejection","m.mentions":{"user_ids":["@legendecas:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pIoArlB7iStSTX2stB0iT1d_12g3KVXS5kwtKd6IH-E"}},"msgtype":"m.text"},"ts":1716889580565,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1mqQCfXy_y1pE6Z-rwnlTCISZXLfqFduA1PytYgAxQw"},
{"content":{"body":"the way I think of it, if an exception (or promise rejection) is \"automatically rethrown\" (as might happen conceptually in `run`), then if you have a way to act on that error, then that context shouldn't be lost without a trace","format":"org.matrix.custom.html","formatted_body":"the way I think of it, if an exception (or promise rejection) is \"automatically rethrown\" (as might happen conceptually in <code>run</code>), then if you have a way to act on that error, then that context shouldn't be lost without a trace","m.mentions":{},"msgtype":"m.text"},"ts":1716889661496,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$T1HyOQBcUQYLTm-G9YZYLaXKM3Z2QLmg11WIa00S_MM"},
{"content":{"body":"if you choose to catch an exception/rejection and rethrow it, then you might choose to use the original throw context, or switch it depending on your use case","m.mentions":{},"msgtype":"m.text"},"ts":1716889700014,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$8fjICjPidpZpdqdU1hM76BwUwM21rPIv3sCN6w4jL4s"},
{"content":{"body":"the same way you'd expose a higher-level exception at API boundaries","m.mentions":{},"msgtype":"m.text"},"ts":1716889723119,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XlCojJWvHQ1UESFNtnJyQHoOAgjkTinL3MmVr4YPFQg"},
{"content":{"body":" * the same way you'd wrap with a higher-level exception at API boundaries","m.mentions":{},"m.new_content":{"body":"the same way you'd wrap with a higher-level exception at API boundaries","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XlCojJWvHQ1UESFNtnJyQHoOAgjkTinL3MmVr4YPFQg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716889730769,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$QQiQX4vbphSXIBG2mC2k-oly-uBfHZupIF6JnTZPh8o"},
{"content":{"body":"the inner throw context would be an implementation detail","m.mentions":{},"msgtype":"m.text"},"ts":1716889738237,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$mkhSi8cAfuahbJwT1E_c2ztab786mqhZK7GaPnWR6KM"},
{"content":{"body":"am I making sense?","m.mentions":{},"msgtype":"m.text"},"ts":1716889746056,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$QNLEmoK3R5l9gkrZkYDW1b2hF9JFmNxqARZbObb2ZAU"},
{"content":{"body":"> <@abotella:igalia.com> the way I think of it, if an exception (or promise rejection) is \"automatically rethrown\" (as might happen conceptually in `run`), then if you have a way to act on that error, then that context shouldn't be lost without a trace\n\nWhat's an \"automatical rethrown\"?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$T1HyOQBcUQYLTm-G9YZYLaXKM3Z2QLmg11WIa00S_MM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>the way I think of it, if an exception (or promise rejection) is \"automatically rethrown\" (as might happen conceptually in <code>run</code>), then if you have a way to act on that error, then that context shouldn't be lost without a trace</blockquote></mx-reply>What's an \"automatical rethrown\"?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$T1HyOQBcUQYLTm-G9YZYLaXKM3Z2QLmg11WIa00S_MM"}},"msgtype":"m.text"},"ts":1716890023048,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$lkNzebktxRHB93KZMDgOP2NGypTZ8hjDzh2-qUG3DtU"},
{"content":{"body":"well, I was thinking of how `run()` essentially rethrows a thrown exception, or how a `.then()` essentially rethrows a promise rejection, without any user code","format":"org.matrix.custom.html","formatted_body":"well, I was thinking of how <code>run()</code> essentially rethrows a thrown exception, or how a <code>.then()</code> essentially rethrows a promise rejection, without any user code","m.mentions":{},"msgtype":"m.text"},"ts":1716890103263,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$37XTrNJnMu69DhqOskJ7VBjt2TEtQfL7bbvatYcKpSI"},
{"content":{"body":" * well, I was thinking of how `run()` essentially rethrows a thrown exception, or how a `.then()` without a catch handler essentially rethrows a promise rejection, without any user code","format":"org.matrix.custom.html","formatted_body":" * well, I was thinking of how <code>run()</code> essentially rethrows a thrown exception, or how a <code>.then()</code> without a catch handler essentially rethrows a promise rejection, without any user code","m.mentions":{},"m.new_content":{"body":"well, I was thinking of how `run()` essentially rethrows a thrown exception, or how a `.then()` without a catch handler essentially rethrows a promise rejection, without any user code","format":"org.matrix.custom.html","formatted_body":"well, I was thinking of how <code>run()</code> essentially rethrows a thrown exception, or how a <code>.then()</code> without a catch handler essentially rethrows a promise rejection, without any user code","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$37XTrNJnMu69DhqOskJ7VBjt2TEtQfL7bbvatYcKpSI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716890119432,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BQlrkErVZq6lrqgwkgYwuVBhWu_yqEfB4U5liRm5bps"}
]