[
{"content":{"msgtype":"m.text","body":"Justin Ridgewell: Do you have a link to the reference site? I couldn't find it","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Do you have a link to the reference site? I couldn't find it"},"ts":1674608086893,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bVMfbcEvWrV9n5lUvtHT9kJ3hTjjtBpKK0Fsxilun5I"},
{"content":{"msgtype":"m.text","body":"I definitely expected that Yoav's work would use this"},"ts":1674608102199,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4q4fvQgXEz-NkgprHapRzyW2mi0TGqcQQeWme6Zgznc"},
{"content":{"msgtype":"m.text","body":"Reference site?"},"ts":1674608123797,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ig4SOUHXk6GR-IPgHzQMfRdlp-lat5xvmT1IwCxf_Dk"},
{"content":{"msgtype":"m.text","body":"err, callsite"},"ts":1674608251018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vf_PNTDmEMRdFcoUPEzxDtupyWoPN6xWY2fvpyOUZYo"},
{"content":{"msgtype":"m.text","body":"just trying to find Yoav's patches or design docs or anything like that"},"ts":1674608285152,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$jQDa8-bJd6JZh2-cP4IxaP7VkTJgXaISnkMD9Muj4GQ"},
{"content":{"msgtype":"m.text","body":"[third_party/blink/renderer/modules/scheduler/task_attribution_tracker_impl.cc](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/task_attribution_tracker_impl.cc)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/task_attribution_tracker_impl.cc\">third_party/blink/renderer/modules/scheduler/task_attribution_tracker_impl.cc</a>"},"ts":1674608356429,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6ihHov8x0k7WmCbFc9V3pqiHrFQfFQ5Qwi_4K48me8s"},
{"content":{"msgtype":"m.text","body":"ah I see thanks!!"},"ts":1674608388943,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6tUg9MIIrqAHQ4mP8F4ghS67PQNXIIQyjZwHEG_axr8"},
{"content":{"msgtype":"m.text","body":"They're using continuation API, and there's no special handling for `enqueueMicrotask` that I can find","format":"org.matrix.custom.html","formatted_body":"They're using continuation API, and there's no special handling for <code>enqueueMicrotask</code> that I can find"},"ts":1674608405789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xn46rbZAAqKnAQTGoT97ia_-DED19W9b2C4-vjTvV_4"},
{"content":{"msgtype":"m.text","body":"So they're falling into the same thenable bug"},"ts":1674608412988,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GXfwG6LlqYwjVxQA7sMl6aw-wE0BB8K0tdAJo-KlvU4"},
{"content":{"msgtype":"m.text","body":"how is setTimeout handled here?"},"ts":1674608462075,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$auiRO-wnDZ58QJbGkk6pqxbJ1lVeS7oeBA3dFm1vELQ"},
{"content":{"msgtype":"m.text","body":"does it work?"},"ts":1674608463841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Nh6KlRH2mlsIsbwmIMrW2KJhxWCYnkDD_mIBuKxz9aY"},
{"content":{"msgtype":"m.text","body":"Shu is skeptical of putting too much work into thenables. I don't understand the issue in enough detail to know how it would be solved, or whether it should be solved."},"ts":1674608496535,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ykI_XD20gXb_47ZiMV8_-3ffPvLv4kfIpGETTcG0qeM"},
{"content":{"msgtype":"m.text","body":"Looks like `setTimeout` is handled on the Blink side","format":"org.matrix.custom.html","formatted_body":"Looks like <code>setTimeout</code> is handled on the Blink side"},"ts":1674609062624,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$svOVaSFtao9-s5FD0fmRSTVBSFnbx4DzdO97CGCoB4c"},
{"content":{"msgtype":"m.text","body":"TaskAttribution users: https://source.chromium.org/search?q=%22GetTaskAttributionTracker()%22&ss=chromium%2Fchromium%2Fsrc"},"ts":1674609076520,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$thig5qnpWlfKgbgzquU97X16a4Gkm9-j4lF884SU4MQ"},
{"content":{"msgtype":"m.text","body":"OK, good, this is all useful context"},"ts":1674609220892,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nIbmHay4-5CI5ML4kB2Tr2I1pmOBuZqUQhO-2Qu9yRo"},
{"content":{"msgtype":"m.text","body":"thank you"},"ts":1674609230421,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MTfM1PhqtrXvBF9hM35OObOMNO_RHfHHZng7j3DIgaE"},
{"content":{"msgtype":"m.text","body":"Shu will look into this and be in some level of contact with Yoav"},"ts":1674609242326,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bIAX-eLH95c0JqK-8Zs5tx8V6DBgf5fK_ptOYtssYc0"},
{"content":{"msgtype":"m.text","body":"Chengzhong Wu: How is it going with proposing a meeting between us and Yoav?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>: How is it going with proposing a meeting between us and Yoav?"},"ts":1674609270096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gADJMqBKh6lTuj308yYNtzlR9B3taGSWM3fIezlGEWM"},
{"content":{"msgtype":"m.text","body":"> <@littledan:matrix.org> OK, coming in at a bit under 100 hours from when I promised this, here's the edits I'd make to the slides:\n> - Don't you want to use the run() function in your wrap() implementation? (Aside: rename run())\n> - I think mixing in the part about monkey-patching console.log is a distraction which would be better removed.\n> - I would replace the React Cache example with OpenTelemetry (legendecas can do this as he knows that area much better than me). Really, the OpenTelemetry case of holding a span ID instead of an initial timestamp has exactly the same needs--we should say this explicitly.\n> - Slide 18 is really key (maybe reference the main thread scheduling proposal? maybe not?) but the code doesn't then correspond to anything about prioritization, so it's a little confusing\n> - In general, let's say \"async context\" intead of \"async stack\" to reinforce the intuition around the terms. Also \"stack\" implies linear memory usage for the number of async items, which is definitely not the case here, but definitely is the case with general async stack traces (which is a specific non-goal here, and which we should probably avoid comparing this with in slide 19, as it will probably make browsers uncomfortable)\n> - All the stuff about \"the dynamic scoping elephant\" should be probably rephrased as \"Bonus slides (if time allows): ocap analysis\" and then just defer to Mark to say he thought about it and decided it's OK. I expect the committee to continue disagreeing internally on whether this deserves to be called \"dynamic scoping\", and really, that's all irrelevant\n\n(and, please let me know if you won't do these edits and I should make them)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$3G_aX1utupK2064qeQwq6UJJ3KC4Wd4EuJDqdhMdReA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><p>OK, coming in at a bit under 100 hours from when I promised this, here's the edits I'd make to the slides:</p>\n<ul>\n<li>Don't you want to use the run() function in your wrap() implementation? (Aside: rename run())</li>\n<li>I think mixing in the part about monkey-patching console.log is a distraction which would be better removed.</li>\n<li>I would replace the React Cache example with OpenTelemetry (legendecas can do this as he knows that area much better than me). Really, the OpenTelemetry case of holding a span ID instead of an initial timestamp has exactly the same needs--we should say this explicitly.</li>\n<li>Slide 18 is really key (maybe reference the main thread scheduling proposal? maybe not?) but the code doesn't then correspond to anything about prioritization, so it's a little confusing</li>\n<li>In general, let's say \"async context\" intead of \"async stack\" to reinforce the intuition around the terms. Also \"stack\" implies linear memory usage for the number of async items, which is definitely not the case here, but definitely is the case with general async stack traces (which is a specific non-goal here, and which we should probably avoid comparing this with in slide 19, as it will probably make browsers uncomfortable)</li>\n<li>All the stuff about \"the dynamic scoping elephant\" should be probably rephrased as \"Bonus slides (if time allows): ocap analysis\" and then just defer to Mark to say he thought about it and decided it's OK. I expect the committee to continue disagreeing internally on whether this deserves to be called \"dynamic scoping\", and really, that's all irrelevant</li>\n</ul>\n</blockquote></mx-reply>(and, please let me know if you won't do these edits and I should make them)","m.relates_to":{"m.in_reply_to":{"event_id":"$3G_aX1utupK2064qeQwq6UJJ3KC4Wd4EuJDqdhMdReA"}}},"ts":1674609530679,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1KOP4kuSDR2bzSPO1_Un7WKETkyVWMTeG8FJFf5PShw"},
{"content":{"msgtype":"m.text","body":"I still need to take a look at them"},"ts":1674609541223,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$a--AmajkwNZkWlyGMawtNQNndB_NxDAAAQF_L8CypLw"},
{"content":{"msgtype":"m.text","body":"I think this is how setTimeout works:\n- https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/dom_scheduler.cc\n- https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/dom_task.h","format":"org.matrix.custom.html","formatted_body":"<p>I think this is how setTimeout works:</p>\n<ul>\n<li>https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/dom_scheduler.cc</li>\n<li>https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/scheduler/dom_task.h</li>\n</ul>\n"},"ts":1674609570177,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0gV4bcSwJWeEidgrlsYwy4WmuZOrXWTe74YdQOa1rRc"},
{"content":{"body":"Cool, though I am having trouble tracing it ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Cool, though I am having trouble tracing it"},"ts":1674610405031,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k7siUW_fyIgCz3F56eZZjXE5hT0lHghSysy5AsJUQnQ"},
{"content":{"body":"Would be awesome if it is possible to hack up a PR to Chrome to make a pair of functions to get and set this context variable somehow ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Would be awesome if it is possible to hack up a PR to Chrome to make a pair of functions to get and set this context variable somehow"},"ts":1674610405585,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pplkaRbK6yS8BT3Q5Cqd4KDR4QkwZ_MNntkihUl6Zek"},
{"content":{"msgtype":"m.text","body":"Different than the `Get`/`SetContinuationPreservedEmbedderData`?","format":"org.matrix.custom.html","formatted_body":"Different than the <code>Get</code>/<code>SetContinuationPreservedEmbedderData</code>?"},"ts":1674610489921,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jLq_Rr4MV6WB3nnrjD9dikHZ-rcABBwFVOszjTuxEhM"},
{"content":{"msgtype":"m.text","body":"Or do you mean specific to timers?"},"ts":1674610500191,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$t6zxXLk2DrswQDoH69UiZxMzcpDdQDohBPdj9AwfeN8"},
{"content":{"msgtype":"m.text","body":"I mean that plus this plumbing through all the web APIs (not specific to timers)"},"ts":1674613069013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lxyiTA0zIBJzAIvvW3X-mZH250Qa7REjFQJbezsO1Qs"},
{"content":{"msgtype":"m.text","body":"So like the node extension you made but it restores across web APIs including timers in exactly the way yoav’s work does"},"ts":1674613074552,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UAx4eKT10zw5eKf1TERUdrDTC5c6rE4BB1Eil6IveTA"},
{"content":{"body":"Currently we (workerd) has to capture the context manually for timers and queueMicrotask web apis. These are still fundamentally based on the v8 API tho. Basically when a timer is set we call GetContinuationPreservedEmbedderData to get the current storage context and enter that manually when the callback function is called. Pretty simple","msgtype":"m.text"},"ts":1674614680146,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$RfCmMuqqntw_mhrEbXKhcXWhuV3lfenPm_kkVuACVrU"},
{"content":{"body":"queueMicrotask will be handled for us once v8 fixes the current limitations","msgtype":"m.text"},"ts":1674614720697,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DB9jnA1nVj0UWBO4h94m-DzHEPP4zIEMhp7qZ3gQ5ds"},
{"content":{"msgtype":"m.text","body":"Do you maintain patches onto V8 for workerd?"},"ts":1674614745188,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wHhInp6H-_7rUJIF4RXuQMVKOUDhwq7_F7OsxqnB8gM"},
{"content":{"body":"Oh, we also capture manually for wrapped functions and AsyncResource","msgtype":"m.text"},"ts":1674614746308,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$idUsvUSQ8QvLerorOGzK8nfEaw3RngSeCi_yhxkXegE"},
{"content":{"body":"> <@jasnell:matrix.org> queueMicrotask will be handled for us once v8 fixes the current limitations\n\nWhich limitation?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24DB9jnA1nVj0UWBO4h94m-DzHEPP4zIEMhp7qZ3gQ5ds\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>queueMicrotask will be handled for us once v8 fixes the current limitations</blockquote></mx-reply>Which limitation?","m.relates_to":{"m.in_reply_to":{"event_id":"$DB9jnA1nVj0UWBO4h94m-DzHEPP4zIEMhp7qZ3gQ5ds"}}},"ts":1674614751991,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$29QXV8WMFDMh0Bx_P7Z-9EEoLz71rtq6M9N7WZA3dgc"},
{"content":{"body":"We do but none for this yet","msgtype":"m.text"},"ts":1674614768450,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$_UMteO5yEXTma5UENJvBV5TeegzMdMJjRO5jx7loOoQ"},
{"content":{"body":"The limitation that v8 is not attaching the context to EnqueueMicrotask ","msgtype":"m.text"},"ts":1674614808064,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$A_jCGSRCcbAn5Nny-KVaLcnqLASJklWsDWJpeW1yTMA"},
{"content":{"body":"We certainly could float a patch that covers the queueMicrotask issue but we'd rather that just be addressed upstream. For now we're fine with it not working for thenables but would like that not to be permanent ","msgtype":"m.text"},"ts":1674615087917,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$qAskOatuRQBZDKuirQ7XlF2pxcNs6hX6juTrhMNt_D0"},
{"content":{"msgtype":"m.text","body":"The thenable bug is solved by copying https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/builtins-microtask-queue-gen.cc;l=238-247;drc=bf9ffddf05af0586dc82cd2a320508cd5dcfbc3c into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/builtins-microtask-queue-gen.cc;l=191-221;drc=bf9ffddf05af0586dc82cd2a320508cd5dcfbc3c"},"ts":1674615307822,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yVuzV3KLmbZBPujHLgSBlHtogPoxSAbRCREaf8cftLk"},
{"content":{"msgtype":"m.text","body":"The generic microtask bug is in that same function, but it's more complicated"},"ts":1674615430571,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tQT-0pwsB03HcLNf-Jyis7Ew26Vx3c9yE-VdN8Xks84"},
{"content":{"body":"Oh nice. Since we have a workaround for queueMicrotask we might be able to just float the change for thenables then wait for the rest ","msgtype":"m.text"},"ts":1674615577796,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$plvwDYnqrpCwk_BueJTUFziyk_5CoWL3tUP-X4cjK9I"},
{"content":{"msgtype":"m.text","body":"I'm assuming you're not using any Blink code for your timers?"},"ts":1674615615696,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MqeL8oOQ98OvakrVgqKBPqJaR4rsuILJtn9EqXFRJzA"},
{"content":{"body":"Correct","msgtype":"m.text"},"ts":1674615634749,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$3kEPARa5zAihe15TV2isSGNS6RftZlbQPPD77keME6w"},
{"content":{"msgtype":"m.text","body":"Perfect"},"ts":1674615782579,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$chLEOjKtAvkC5PsT594RgS-lrELBYS_oUYq6icXryFk"},
{"content":{"msgtype":"m.text","body":"Sorry, we'll also need these to store the data in the first place\n- https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/promise-misc.tq;l=283-285;drc=39c3a97e848a7ecd1fa95e738771cc61d6d72552 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/promise-misc.tq;l=310-316;drc=39c3a97e848a7ecd1fa95e738771cc61d6d72552\n- https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=44-47;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=64-69;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28\n- https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=57;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=64-69;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28\n","format":"org.matrix.custom.html","formatted_body":"<p>Sorry, we'll also need these to store the data in the first place</p>\n<ul>\n<li>https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/promise-misc.tq;l=283-285;drc=39c3a97e848a7ecd1fa95e738771cc61d6d72552 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/promise-misc.tq;l=310-316;drc=39c3a97e848a7ecd1fa95e738771cc61d6d72552</li>\n<li>https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=44-47;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=64-69;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28</li>\n<li>https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=57;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28 into https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/promise.tq;l=64-69;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28</li>\n</ul>\n"},"ts":1674616461351,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yUvfJZGtYhDv380Y_nITBOg48yZkH7NFcLO70Ou0UwI"},
{"content":{"msgtype":"m.text","body":"So it's the same amount of work to fix generic microtask (I thought those last 3 already existed in thenable tasks, but they didn't)"},"ts":1674616526026,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UBy5WnA_Sm2XPEdEW9R9Y6dBsBiyt1cQrIPiYWVQ_3c"},
{"content":{"msgtype":"m.text","body":"Those same 4 changes are all that's necessary to add continuation data to [CallbackTask](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/microtask.tq;l=9-12;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28) and [CallableTask](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/microtask.tq;l=14-17;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28) (I don't really know the difference between them…)","format":"org.matrix.custom.html","formatted_body":"Those same 4 changes are all that's necessary to add continuation data to <a href=\"https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/microtask.tq;l=9-12;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28\">CallbackTask</a> and <a href=\"https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/microtask.tq;l=14-17;drc=f30f4815254b8eed9b23026ea0d984d18bb89c28\">CallableTask</a> (I don't really know the difference between them…)"},"ts":1674616621762,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DiqTpGKg4RoKtwR3QpbFfs2-2NYzIUo2JSbYzjisowE"},
{"content":{"msgtype":"m.text","body":"As far as I can tell, though, nothing in V8 uses the generic microtask queue except promises, it's only if you call into it via the public API"},"ts":1674616701104,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TfCN2xOLEaHuWh-9WezQTEzH8gc4NbQNOoR_yz2Uoas"},
{"content":{"org.matrix.msc1767.message":[{"body":"The web specs do enqueue microtasks for various things, and in Blink they do seem to use `EnqueueMicrotask`","mimetype":"text/plain"},{"body":"The web specs do enqueue microtasks for various things, and in Blink they do seem to use <code>EnqueueMicrotask</code>","mimetype":"text/html"}],"body":"The web specs do enqueue microtasks for various things, and in Blink they do seem to use `EnqueueMicrotask`","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"The web specs do enqueue microtasks for various things, and in Blink they do seem to use <code>EnqueueMicrotask</code>"},"ts":1674617539356,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$iA-EbmSzJzFmqaIOv5mkapxEM0ya9JknEVn64erQk2U"},
{"content":{"org.matrix.msc1767.text":"I'm not yet confident that if those microtasks run any user code, or queue tasks that do, that they would want wrap-like behavior","body":"I'm not yet confident that if those microtasks run any user code, or queue tasks that do, that they would want wrap-like behavior","msgtype":"m.text"},"ts":1674617594388,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eFCBOsTTgiKLHTMfnFEDb4T1_eIu3OyTd9OH6XRkEJs"},
{"content":{"org.matrix.msc1767.text":"I'll look through them though","body":"I'll look through them though","msgtype":"m.text"},"ts":1674617609330,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$x_ie2_nnCyFXXzXXTh0v7uBdeWRjR0oX-lRbFAUjyP0"},
{"content":{"msgtype":"m.text","body":"> <@littledan:matrix.org> Chengzhong Wu: How is it going with proposing a meeting between us and Yoav?\n\nSadly, yoav hasn't responded to my email with the meeting doodle.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$gADJMqBKh6lTuj308yYNtzlR9B3taGSWM3fIezlGEWM?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>: How is it going with proposing a meeting between us and Yoav?</blockquote></mx-reply>Sadly, yoav hasn't responded to my email with the meeting doodle.","m.relates_to":{"m.in_reply_to":{"event_id":"$gADJMqBKh6lTuj308yYNtzlR9B3taGSWM3fIezlGEWM"}}},"ts":1674660750517,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$XbN_wmWrcuBQlqS-mHhsB3CCC_Hfohs0vh_W3oCU6FQ"},
{"content":{"msgtype":"m.text","body":"> <@legendecas:matrix.org> Sadly, yoav hasn't responded to my email with the meeting doodle.\n\nah OK I'll ping him today","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$XbN_wmWrcuBQlqS-mHhsB3CCC_Hfohs0vh_W3oCU6FQ?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>Sadly, yoav hasn't responded to my email with the meeting doodle.</blockquote></mx-reply>ah OK I'll ping him today","m.relates_to":{"m.in_reply_to":{"event_id":"$XbN_wmWrcuBQlqS-mHhsB3CCC_Hfohs0vh_W3oCU6FQ"}}},"ts":1674660829357,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CnKZQfJrfNz2AsbPs8-JxA3mxXP1ykZmRAJlfj4OaAI"},
{"content":{"msgtype":"m.text","body":"thanks!"},"ts":1674661466337,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$YVr5MEGLN9RPBpEkWgPtmijSlaF9icrVt_mvMH0Yj5Y"},
{"content":{"msgtype":"m.text","body":"@benjamn just did the patches for thenables into his deno impl: https://github.com/benjamn/deno-v8/commit/d72a3dd59139242385203b3aa0167451220d0bdf"},"ts":1674666091784,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XD_auvsQbmCv2w7zbQS-J9W3B0TiUXpaGvoZGufDQHM"},
{"content":{"msgtype":"m.text","body":"👋"},"ts":1674668566721,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$dq3_vhVjXNaZxUM8GsNvUwpmzpeDnY28_RFUHzX6NRQ"},
{"content":{"msgtype":"m.text","body":"nice to see some new/familiar faces"},"ts":1674668601241,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$eM_F-xWFJ6vnCitOR5_Kcjwylfv3IBafe3B1LiG-S98"},
{"content":{"msgtype":"m.text","body":"I recently scraped together this Docker image with a custom build of Deno that supports the `AsyncContext` proposal in native async/await code: https://github.com/benjamn/deno/pull/2","format":"org.matrix.custom.html","formatted_body":"I recently scraped together this Docker image with a custom build of Deno that supports the <code>AsyncContext</code> proposal in native async/await code: https://github.com/benjamn/deno/pull/2"},"ts":1674668814697,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$7tC87JhFfuFOEGmrm-wZa6COp1LETL9t9peTeshv1hw"},
{"content":{"msgtype":"m.text","body":"```\ndocker run -it --rm benjamn/deno:async-thenables repl\n```\nshould give you a Deno REPL where you can play with `AsyncContext`, provided you have Docker installed","format":"org.matrix.custom.html","formatted_body":"<pre><code>docker run -it --rm benjamn/deno:async-thenables repl\n</code></pre>\n<p>should give you a Deno REPL where you can play with <code>AsyncContext</code>, provided you have Docker installed</p>\n"},"ts":1674668877402,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$WeN_n_FZnu6OPphn_YW48ItWnkmv-BrgcLMXInTaEKY"},
{"content":{"msgtype":"m.text","body":"I don't plan to support this Deno fork in the long run, but I thought it might be useful to share, so others can check their intuitions, suggest test cases, identify context loss pitfalls, etc"},"ts":1674669148644,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$8wbqFkNFQ94cDwS7T2uS-f8hIzDurN_hH_ok-MFEiFw"},
{"content":{"msgtype":"m.text","body":"(that Docker image is \"only\" 162MB, thanks mostly to Deno being a single standalone 90MB binary)"},"ts":1674669774444,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$402U8MZMsogHfF747Yo_VvXGSqZCDZfKSuZHYlAxl48"},
{"content":{"msgtype":"m.text","body":"Was the SES meeting cancelled today?"},"ts":1674670527573,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HUqNlKRHXG3xMKy4gnkQijIimmxl8eJuInUhnexKE8U"},
{"content":{"msgtype":"m.text","body":"Nothing on the agenda"},"ts":1674670536579,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HAiwtJHG2CHGsxE6eUTQVlaeO5zzaTgJSy-qN6510Pc"},
{"content":{"msgtype":"m.text","body":"Justin Ridgewell: ... what's your sense on how stable the current definition of the `AsyncContext` interface is? Like if we were to do something silly and implement a polyfill in workerd now would we likely be shooting ourselves in the foot","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: ... what's your sense on how stable the current definition of the <code>AsyncContext</code> interface is? Like if we were to do something silly and implement a polyfill in workerd now would we likely be shooting ourselves in the foot"},"ts":1674674257740,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$YmgWBcxKGww0ejVLkzmPpL1WNs4U_AJjZuRzlK_2RHE"},
{"content":{"msgtype":"m.text","body":"I don't think the names are stable"},"ts":1674674304249,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$T_QlyysAClx7ldxhfDC8V2BjQGUmlUKjpfnN9xMIjs0"},
{"content":{"msgtype":"m.text","body":"If you're not against it, I would just implement `AsyncLocalStorage` and provide maybe a JS wrapper around it to conform to the current `AsyncContext` API","format":"org.matrix.custom.html","formatted_body":"If you're not against it, I would just implement <code>AsyncLocalStorage</code> and provide maybe a JS wrapper around it to conform to the current <code>AsyncContext</code> API"},"ts":1674674350390,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_j5igCCLIy2BfxrFQMvKRS1Gca8cDGZ8ZE3F4cCXaP8"},
{"content":{"msgtype":"m.text","body":"Like a `import AsyncContext from \"workerd:async-context/v0\"` would give you the current interface","format":"org.matrix.custom.html","formatted_body":"Like a <code>import AsyncContext from &quot;workerd:async-context/v0&quot;</code> would give you the current interface"},"ts":1674674390358,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xrH7jS7W3UTRs00L2W-8NShaiYq5cDLEPYzsDPYWRQ4"},
{"content":{"msgtype":"m.text","body":"Yeah we're just trying to decide whether we really want to encourage too much dependency on ALS while AsyncContext is coming. "},"ts":1674674402215,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$rReV3N20BYT5pEsYQSkclSxsXHfAvTA3B7O9bSwH6L8"},
{"content":{"msgtype":"m.text","body":"I know it's really difficult to estimate standards logistics machinery, but what's your expectation on when AsyncContext could find its way to stage 3?"},"ts":1674674433204,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6-dSzOxigZOf6dkImFHdSVvQH8WsGWwR5HhZy8hB_KI"},
{"content":{"msgtype":"m.text","body":"(if any)"},"ts":1674674438758,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$TWx5uFYsslHWeEFyr_X7RU15ytVe4AjJT7ZAIiwOp_M"},
{"content":{"msgtype":"m.text","body":"You could choose not to expose the ALS API at all, but implement a public AC interface on top of your private ALS interface"},"ts":1674674451783,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hRhBG6Y2_RwICEb0DwOTYaWf6tQwqGJ0N4l39iFN5ic"},
{"content":{"msgtype":"m.text","body":"we've got customers currently asking specifically for node.js compat with ALS so we're pretty much committed to supporting both apis"},"ts":1674674490794,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$NP4JyIrUBpnI2OxlM38W0_NSDzz0vr3eyNhtCUxE5qk"},
{"content":{"msgtype":"m.text","body":"I think the most likely thing to change is `wrap` into an object like `AsyncResource`","format":"org.matrix.custom.html","formatted_body":"I think the most likely thing to change is <code>wrap</code> into an object like <code>AsyncResource</code>"},"ts":1674674504036,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$an6shCq1mFfL9vJdAWGW8rJ50cBLgSDCXji6fxcDnxg"},
{"content":{"msgtype":"m.text","body":"`get`/`run` seem stable","format":"org.matrix.custom.html","formatted_body":"<code>get</code>/<code>run</code> seem stable"},"ts":1674674513283,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mV-BD75340EIJKaT8x7eXqdNJCGsSeo7LfVX2GruDaU"},
{"content":{"msgtype":"m.text","body":"> <@jasnell:matrix.org> Justin Ridgewell: ... what's your sense on how stable the current definition of the `AsyncContext` interface is? Like if we were to do something silly and implement a polyfill in workerd now would we likely be shooting ourselves in the foot\n\nPlease don't do that!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$YmgWBcxKGww0ejVLkzmPpL1WNs4U_AJjZuRzlK_2RHE?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: ... what's your sense on how stable the current definition of the <code>AsyncContext</code> interface is? Like if we were to do something silly and implement a polyfill in workerd now would we likely be shooting ourselves in the foot</blockquote></mx-reply>Please don't do that!","m.relates_to":{"m.in_reply_to":{"event_id":"$YmgWBcxKGww0ejVLkzmPpL1WNs4U_AJjZuRzlK_2RHE"}}},"ts":1674675431042,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Tcwp8EpgV96MKFbot-6VGdL5QyFTExGdHuJdtRJsNcc"},
{"content":{"msgtype":"m.text","body":"I'd instead encourage us all to define a subset of AsyncLocalStorage that should be supported across environments"},"ts":1674675448754,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$71LGk2gNXcJIm-geysBjgq8obguYNH388Rc3JSa_zGE"},
{"content":{"msgtype":"m.text","body":"Once AsyncContext is stable, we can polyfill exactly that subset on top of AsyncContext"},"ts":1674675474451,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vC4FACYKIL91ofauj7hHun4AdveBhb8LEbIgBTQ4ISg"},
{"content":{"msgtype":"m.text","body":"heh, I'm not wanting to. We had a question come up about whether we could and I wanted it to not just be me saying \"No!\""},"ts":1674675475410,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$SRndoOPU0fIYvOSKNs31Z9kUKgh-Jq9E820Ox8bQL38"},
{"content":{"msgtype":"m.text","body":"great, well, you can cite me as well if it's useful (I can give a more quotable explanation if needed)"},"ts":1674675498508,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nGc4VnsR1LZLrdBFu9oboJA95iQ2RbnsMXVToNoAa8Y"},
{"content":{"msgtype":"m.text","body":"let's actually write down what this subset is though"},"ts":1674675512989,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PxwUM7XLf7Zf-3w6jst_vI3CTyqb2RIf_-cn1xIHADc"},
{"content":{"msgtype":"m.text","body":"> let's actually write down what this subset is though\n\nwe can do that on tonight's wintercg call probably","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>let's actually write down what this subset is though</p>\n</blockquote>\n<p>we can do that on tonight's wintercg call probably</p>\n"},"ts":1674675735036,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DWwT1qbV9CBDIq-RKx4rhuRVLk3ZV_MtfV9ztGPtffc"},
{"content":{"msgtype":"m.text","body":"apologies for the vague question (I'm new)… is there a good term for an API like `AsyncContext`… loosely immutable (`get` only), but overridable/censorable (with `run`) if you're calling new code?","format":"org.matrix.custom.html","formatted_body":"apologies for the vague question (I'm new)… is there a good term for an API like <code>AsyncContext</code>… loosely immutable (<code>get</code> only), but overridable/censorable (with <code>run</code>) if you're calling new code?"},"ts":1674675989489,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Ay5hpW5h1FYuWfBvr1NXTQa2Ke3nOZP5uJgKPaREU3s"},
{"content":{"msgtype":"m.text","body":"something like a \"call stack-hugging environment variable\""},"ts":1674676049924,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$TJjMQq1B4IqpMsE4cGU3ASB7ulm_PS_j-KN7HIeF7po"},
{"content":{"msgtype":"m.text","body":"Mark Miller (TC39 delegate) has been calling this a Fluid Variable"},"ts":1674676057517,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0Vt9bs9uRpeeVJsyPGeWbvMy_PiAW1KKcnQcqwdsWmA"},
{"content":{"msgtype":"m.text","body":"are we collecting use cases somewhere? maybe the proposal repo?"},"ts":1674676170689,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$K1rCIfqfSknMW3epLw7N8cqkbnv1kHm-O61C5puUmkU"},
{"content":{"msgtype":"m.text","body":"https://github.com/legendecas/proposal-async-context/issues/5"},"ts":1674676230833,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1Gq978XEQUwNB6JFWpTDx5NffyOSQ2gOFXqbW2FRZdU"},
{"content":{"msgtype":"m.text","body":"I tried looking for references for this, and it's all esoteric computer science papers and MIT's Scheme","m.relates_to":{"event_id":"$0Vt9bs9uRpeeVJsyPGeWbvMy_PiAW1KKcnQcqwdsWmA","is_falling_back":true,"m.in_reply_to":{"event_id":"$0Vt9bs9uRpeeVJsyPGeWbvMy_PiAW1KKcnQcqwdsWmA"},"rel_type":"m.thread"}},"ts":1674676443447,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VpL0MwEBGfAlRLSDNaCoCSw_4Kxh0yS_1iDoQX6Lpq0"},
{"content":{"msgtype":"m.text","body":"I vaguely remember there used to be a `set` method along with `get`, but that's been removed… is `set` gone for good? (My bias: I hope so, for predictability and efficiency)","format":"org.matrix.custom.html","formatted_body":"I vaguely remember there used to be a <code>set</code> method along with <code>get</code>, but that's been removed… is <code>set</code> gone for good? (My bias: I hope so, for predictability and efficiency)"},"ts":1674676787308,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$HhiIl30lf0aPSL8JYkHclIc2xmHll--JBH-eMr7PGfI"},
{"content":{"msgtype":"m.text","body":"(of course if you want mutability you can store an object of your own design in the `AsyncContext` and provide an API around that)","format":"org.matrix.custom.html","formatted_body":"(of course if you want mutability you can store an object of your own design in the <code>AsyncContext</code> and provide an API around that)"},"ts":1674676831499,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$ntDxeS7vCt2F_NNRePfxkhxVOYoOEZYvKRS8o2u6QzI"},
{"content":{"msgtype":"m.text","body":"I like that it's gone, because it prevents a memory leak"},"ts":1674676876615,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QHG-M_jjFYi0e6vEL6MpSyEkLRnR0E0dYk4jy0THQUY"},
{"content":{"msgtype":"m.text","body":"The Node folks mentioned that it's helpful for APM usage, though, so you don't need to redo the app"},"ts":1674676896431,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YXKLA44db4yEBg3ZIOvdZ-EoHBXivtHpu1JOJh6n_b8"},
{"content":{"msgtype":"m.text","body":"Even my company makes use of it, but I know how to update it once we get a real API"},"ts":1674676924370,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WhunyqdF0tGaQGkR-hBLvcTAZEE_dPv51Vy3o-iRpQ4"},
{"content":{"msgtype":"m.text","body":"with no `set` method, I believe you're guaranteed the result of calling `ctx.get()` will always return the same value anywhere you call it in a given function body, which is a very useful invariant","format":"org.matrix.custom.html","formatted_body":"with no <code>set</code> method, I believe you're guaranteed the result of calling <code>ctx.get()</code> will always return the same value anywhere you call it in a given function body, which is a very useful invariant"},"ts":1674676981700,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$R8LiI0VZhUaE702GS4BUsUg8RSfgEM7bvs5Ou38ZJFs"},
{"content":{"msgtype":"m.text","body":"so you don't have to guess arbitrarily about how often you should poll the context for a new value within a given function"},"ts":1674677024359,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$NyHOSP6AoVkoPcV3dq1eyRPS--Gkt2T2Xg2ICWBT1mg"},
{"content":{"msgtype":"m.text","body":"there's some work ongoing to eliminate the need for `set` in the APM cases","format":"org.matrix.custom.html","formatted_body":"there's some work ongoing to eliminate the need for <code>set</code> in the APM cases"},"ts":1674677395634,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Q0RexfHsUypXdWxdYh1DNuGUFhXv-8iv-_2FvAQ5qjU"},
{"content":{"msgtype":"m.text","body":"> <@benjamn:matrix.org> I vaguely remember there used to be a `set` method along with `get`, but that's been removed… is `set` gone for good? (My bias: I hope so, for predictability and efficiency)\n\nI prefer omitting `set`, but rbuckton has argued in favor of including it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$HhiIl30lf0aPSL8JYkHclIc2xmHll--JBH-eMr7PGfI?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>I vaguely remember there used to be a <code>set</code> method along with <code>get</code>, but that's been removed… is <code>set</code> gone for good? (My bias: I hope so, for predictability and efficiency)</blockquote></mx-reply>I prefer omitting <code>set</code>, but <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> has argued in favor of including it","m.relates_to":{"m.in_reply_to":{"event_id":"$HhiIl30lf0aPSL8JYkHclIc2xmHll--JBH-eMr7PGfI"}}},"ts":1674677541501,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GAH54gXumITx8i_TSBPqVlBOhHVDdvOuc287hFOuahQ"},
{"content":{"msgtype":"m.text","body":"`set` usages can sometimes be replaced by using a single mutable object in the AsyncContext variable, and setting a property in that. Other times, that doesn't work, though.","format":"org.matrix.custom.html","formatted_body":"<code>set</code> usages can sometimes be replaced by using a single mutable object in the AsyncContext variable, and setting a property in that. Other times, that doesn't work, though."},"ts":1674677609765,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8jSIZ-mKeeiHDC051Ewy2ixsBeV3QognjywkSSvzNtU"},
{"content":{"msgtype":"m.text","body":"It'd be great to do a deeper analysis of use cases of `set`","format":"org.matrix.custom.html","formatted_body":"It'd be great to do a deeper analysis of use cases of <code>set</code>"},"ts":1674677632272,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XeFdBQyjnEhX_MfrjZx0ghNvkjuIDL-rqPHXwxuYYtY"},
{"content":{"msgtype":"m.text","body":"we *could* implement `set`, I'd prefer not to in general. just really dislike that model","format":"org.matrix.custom.html","formatted_body":"we <em>could</em> implement <code>set</code>, I'd prefer not to in general. just really dislike that model"},"ts":1674677792179,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hJ5ewiSpR2A6DpTtoCVvVJzDCh44DkXqbznf-2BfZ4c"},
{"content":{"msgtype":"m.text","body":"agreed"},"ts":1674677836304,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$vxOwJ6EzF4pumiVmaTTHkH8dk8CnleYpHr9I4jIe-0Y"},
{"content":{"msgtype":"m.text","body":"I'd at least like to be able to disable `set`, so `AsyncContext.prototype.set.call(<arbitrary context obj>, <new value>)` does not work","format":"org.matrix.custom.html","formatted_body":"I'd at least like to be able to disable <code>set</code>, so <code>AsyncContext.prototype.set.call(&lt;arbitrary context obj&gt;, &lt;new value&gt;)</code> does not work"},"ts":1674677850773,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$cAh9b4RKpQGbHXtVBjHSoro70bF0uh0F9QMbAGaX4H0"},
{"content":{"msgtype":"m.text","body":"the thing I don't understand about set is how far it applies. Ron seemed to expect it to only take affect in the current function and \"inwards\", whereas another, simpler model would be for it to take effect across the whole innermost `run` where that particular variable was set. The latter can be implemented in terms of AsyncContext; the former requires some fancier core behavior","format":"org.matrix.custom.html","formatted_body":"the thing I don't understand about set is how far it applies. Ron seemed to expect it to only take affect in the current function and &quot;inwards&quot;, whereas another, simpler model would be for it to take effect across the whole innermost <code>run</code> where that particular variable was set. The latter can be implemented in terms of AsyncContext; the former requires some fancier core behavior"},"ts":1674678023844,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$a8lJOn0OFmPXyyYEdMhV8XqpSJnS3Eo2Y5iV-H1XzkQ"},
{"content":{"msgtype":"m.text","body":"since Ron is also working on the resource management proposal, I wonder if he's interested in the region of time from when the resource is created to when it goes out of scope"},"ts":1674678105070,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$W-Ne1EK1nagoIZIvkumvctwZSgdF9gM7SL5Sj74x3-E"},
{"content":{"msgtype":"m.text","body":"well, yes, Ron has talked about how it's unfortunate that `run` forces you to put everything in a callback (which `using` avoids)","format":"org.matrix.custom.html","formatted_body":"well, yes, Ron has talked about how it's unfortunate that <code>run</code> forces you to put everything in a callback (which <code>using</code> avoids)"},"ts":1674678144813,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TQ6GmtxPuUdqra9OcUszLE3QqzAZUqpHnfROetW4wPM"},
{"content":{"msgtype":"m.text","body":"but... I'm not personally convinced that this is so bad. I think people shouldn't be using `run` anywhere near the same order of magnitude of frequency as `using`.","format":"org.matrix.custom.html","formatted_body":"but... I'm not personally convinced that this is so bad. I think people shouldn't be using <code>run</code> anywhere near the same order of magnitude of frequency as <code>using</code>."},"ts":1674678197897,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DRJGOSO1eSZH9M6ftvITBqdyk8HRxqU3vN3X5KJ9iuM"},
{"content":{"msgtype":"m.text","body":"if we had `set`, it'd be (potentially) a solution to this problem of forcing everything to be inside the callback (especially if it had the behavior Ron is arguing for, that it shouldn't leak out of the current function)","format":"org.matrix.custom.html","formatted_body":"if we had <code>set</code>, it'd be (potentially) a solution to this problem of forcing everything to be inside the callback (especially if it had the behavior Ron is arguing for, that it shouldn't leak out of the current function)"},"ts":1674678240851,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yvRnoKYWfB7NF7kkYEdFHmTB1bogTzaPQR0aWu2eRTs"},
{"content":{"msgtype":"m.text","body":"(it may be that I misunderstood/misrepresented this suggestion; corrections welcome rbuckton )","format":"org.matrix.custom.html","formatted_body":"(it may be that I misunderstood/misrepresented this suggestion; corrections welcome <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> )"},"ts":1674678276498,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-3BwDVSanxK7XiNDh3OLnMAlWncgNzdK_9sPjobuIJs"},
{"content":{"msgtype":"m.text","body":"I think of `run` as something you call \"once per thread\" (conceptually)","format":"org.matrix.custom.html","formatted_body":"I think of <code>run</code> as something you call &quot;once per thread&quot; (conceptually)"},"ts":1674678329277,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hlprWMamRdd8baAMUODrXzwfM4RUrZ1geX829AutI5g"},
{"content":{"msgtype":"m.text","body":"(if you conceptualize async/await being a weird kind of threading with tons of forks)"},"ts":1674678340311,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zm2FtuIqqjrFduRfSKw00Z1u7uNWmoNM4b1TAJgdiSE"},
{"content":{"msgtype":"m.text","body":"if the only way to change the value of the `AsyncContext` is to run new code, then there's an especially convenient representation for the underlying collection of all contexts","format":"org.matrix.custom.html","formatted_body":"if the only way to change the value of the <code>AsyncContext</code> is to run new code, then there's an especially convenient representation for the underlying collection of all contexts"},"ts":1674678454512,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$F65wfAe3JDLFa5umNCcGflo_9cWb_k46pYLyYR3SEHw"},
{"content":{"msgtype":"m.text","body":"roughly: an immutable map, where you can \"add\" elements in constant time by creating a new map in terms of old ones, and lookups are amortized O(1)"},"ts":1674678550080,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$NeYZyoPJci_EFewmY-q0vpkSzGbVhMI8B9hON4-nzjs"},
{"content":{"msgtype":"m.text","body":"I know Justin Ridgewell was working on a similar/better(?) optimization in https://github.com/legendecas/proposal-async-context/pull/15","format":"org.matrix.custom.html","formatted_body":"I know <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> was working on a similar/better(?) optimization in https://github.com/legendecas/proposal-async-context/pull/15"},"ts":1674678587058,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$va8UsiTl-2geA3-gnUafbyJfHzkqM_iuJwRMTCq7DCc"},
{"content":{"msgtype":"m.text","body":"Yup"},"ts":1674678596375,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZeKs3foxFpaHDF1bpWh4Ftev9Dazn-VbyQxN5h5JQQg"},
{"content":{"msgtype":"m.text","body":"We can optimize it further if we know whether the current map was \"frozen\" by a `wrap`","format":"org.matrix.custom.html","formatted_body":"We can optimize it further if we know whether the current map was &quot;frozen&quot; by a <code>wrap</code>"},"ts":1674678614799,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VFCQHIvcOPfC4dABxAjCb5ppKtjDCBXswHzIi88Kcmo"},
{"content":{"msgtype":"m.text","body":"If it is, we need to reallocate to modify. If not, we can directly mutate"},"ts":1674678630100,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$h3pGuYfcFkzckMoe4ZolhgRJ9pxui_CXO0W6IN494iY"},
{"content":{"msgtype":"m.text","body":"I believe there's even a way to use `WeakMap` here, so all values for a given `AsyncContext` go away if you discard that object","format":"org.matrix.custom.html","formatted_body":"I believe there's even a way to use <code>WeakMap</code> here, so all values for a given <code>AsyncContext</code> go away if you discard that object"},"ts":1674678698813,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$IGbN_RQPLqoy5zQEwPb4mjbhHMB4AbdTo5_Ij85Jras"},
{"content":{"msgtype":"m.text","body":"I know this may sound like premature optimization, but it's going to be hot code (in terms of CPU and memory) if we're not careful"},"ts":1674678737275,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$7mPYhdf_951hSzyj53tpD2A38Cv6I7U7shl7X-69vNY"},
{"content":{"msgtype":"m.text","body":"From the JS side, unfortunately not, but as an actual implementation, the values should be weakly held by the keys"},"ts":1674678751972,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$g4HpizTYIonIwlGdUOJ4yr1hNpL016GMZHtCRSIIexk"},
{"content":{"msgtype":"m.text","body":"keys being `AsyncContext` instances?","format":"org.matrix.custom.html","formatted_body":"keys being <code>AsyncContext</code> instances?"},"ts":1674678771356,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$3p75R4DbO5p0HVaSt_Gqj9NtMH_dJ0Fix7Sc5-jWvvM"},
{"content":{"msgtype":"m.text","body":"Yah"},"ts":1674678775456,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$c7GCEumbPIHtcf3J5W8CjI6BCJfU2FiUBRe-vEQL6vY"},
{"content":{"msgtype":"m.text","body":"In pure spec terms, there's no reason we can clone a `WeakMap`","format":"org.matrix.custom.html","formatted_body":"In pure spec terms, there's no reason we can clone a <code>WeakMap</code>"},"ts":1674678814394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PChV4FtVJnTRdZVHN8vHjTidztJX5WDDuCWMtna1F8o"},
{"content":{"msgtype":"m.text","body":"It's just not an API currently offered"},"ts":1674678823010,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Vo9ygahbXqI9vXxHeoxZ5fuWS_29m6cES0uyFv4LWMM"},
{"content":{"msgtype":"m.text","body":"true! funny how useless the data structure `ImmutableWeakMap` sounds, but something like that would be useful for this","format":"org.matrix.custom.html","formatted_body":"true! funny how useless the data structure <code>ImmutableWeakMap</code> sounds, but something like that would be useful for this"},"ts":1674679057475,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$3vZYztaT5voRm2OvsvPY84SOzu1DhpL1HmK_4mqOeYk"},
{"content":{"msgtype":"m.text","body":"it really doesn't need to be weak"},"ts":1674679091140,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$itTHCZRgq4BTvZMpaOmsZ4PXFDoJQsK-PMb8lHTikO0"},
{"content":{"msgtype":"m.text","body":"but yes an immutable map structure would be useful here"},"ts":1674679100553,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EkT55WKrwNqoW-9wjYKg_daopJ6n_Plww3cg1lk8_v0"},
{"content":{"msgtype":"m.text","body":"private would be good enough, yes"},"ts":1674679110326,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$YE4ctVA1rR4kYbzlB7Xf0uePpjV-f4_beFBHBQIEhag"},
{"content":{"msgtype":"m.text","body":"yes, this is definitely private"},"ts":1674679120570,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$STmnDCi-7HB9twvP3JyLX_n9E2auktsDrxNM8m2kUXU"},
{"content":{"msgtype":"m.text","body":"but WeakMap doesn't make sense because there's no practical way that the AsyncContext variable can be garbage-collected while in the middle of a `run` with it.","format":"org.matrix.custom.html","formatted_body":"but WeakMap doesn't make sense because there's no practical way that the AsyncContext variable can be garbage-collected while in the middle of a <code>run</code> with it."},"ts":1674679169786,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DF1C53IFy3tLRskY9B-n238QRyLPgGQl0noPCGYNjPU"},
{"content":{"msgtype":"m.text","body":"Map is the better one"},"ts":1674679179000,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TTihikrMkzKr-F4p_Z7Mnx-qCRB-YWN-K-QhbRfUtaI"},
{"content":{"msgtype":"m.text","body":"ImmutableMap could avoid the linear cloning cost, while preserving the fast lookup, but ultimately this is an optimization available to implementations"},"ts":1674679196934,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rw1hUNWhtiTkeymNxeveqCjQe5M0EC2_aZUQvv6uRuI"},
{"content":{"msgtype":"m.text","body":"nothing visible in the API about whether it's implemented with Map or WeakMap or ImmutableMap"},"ts":1674679210733,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eMvIiLkXx0JU-zDoNMDIi7LpiA2P-_Z0lV5nu6HkUfs"},
{"content":{"msgtype":"m.text","body":"right"},"ts":1674679221267,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Gk4xOE6DguGK98t1kHMcUJE5TynMrYxxuviGH-XQc_U"},
{"content":{"msgtype":"m.text","body":"my point is, it's one of those optimizations that works best (for the implementations that choose to take advantage) if there are some restrictions in the API"},"ts":1674679246616,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$VpRFPVXfm25C_1LFJpC0JEyK_cHjClmVMNKnjn2Ae7k"},
{"content":{"msgtype":"m.text","body":"Yeah I think we should just avoid using terms like \"dynamic scoping\" or \"fluid variable\" in the presentations and docs, since they just get us into debates about wording, and lose most of the audience","m.relates_to":{"event_id":"$0Vt9bs9uRpeeVJsyPGeWbvMy_PiAW1KKcnQcqwdsWmA","is_falling_back":true,"m.in_reply_to":{"event_id":"$VpL0MwEBGfAlRLSDNaCoCSw_4Kxh0yS_1iDoQX6Lpq0"},"rel_type":"m.thread"}},"ts":1674679275580,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XljM6ByMhTjx0Y5BdFwrQYwItPp3fB6FxIjaatzckvM"},
{"content":{"msgtype":"m.text","body":"> <@littledan:matrix.org> (it may be that I misunderstood/misrepresented this suggestion; corrections welcome rbuckton )\n\nI think that is a valid summary. It would be unfortunate to not have it, but not a deal breaker.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$-3BwDVSanxK7XiNDh3OLnMAlWncgNzdK_9sPjobuIJs?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>(it may be that I misunderstood/misrepresented this suggestion; corrections welcome <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> )</blockquote></mx-reply>I think that is a valid summary. It would be unfortunate to not have it, but not a deal breaker.","m.relates_to":{"m.in_reply_to":{"event_id":"$-3BwDVSanxK7XiNDh3OLnMAlWncgNzdK_9sPjobuIJs"}}},"ts":1674679300807,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_CBEqcEzuGVoEaofCCn7y8PwBx9W7ZbGXTMh0Eunl04"},
{"content":{"msgtype":"m.text","body":"> <@benjamn:matrix.org> my point is, it's one of those optimizations that works best (for the implementations that choose to take advantage) if there are some restrictions in the API\n\nyes, `set` would definitely add complexity to the potential use of ImmutableMap (but not invalidate it I think)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$VpRFPVXfm25C_1LFJpC0JEyK_cHjClmVMNKnjn2Ae7k?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>my point is, it&#39;s one of those optimizations that works best (for the implementations that choose to take advantage) if there are some restrictions in the API</blockquote></mx-reply>yes, <code>set</code> would definitely add complexity to the potential use of ImmutableMap (but not invalidate it I think)","m.relates_to":{"m.in_reply_to":{"event_id":"$VpRFPVXfm25C_1LFJpC0JEyK_cHjClmVMNKnjn2Ae7k"}}},"ts":1674679313987,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yev5W3z99UpIY5wNAkbpFFMTgLohyB6rjzyu3w_Dw_k"},
{"content":{"msgtype":"m.text","body":"it would definitely be something to think through before concluding that we should have `set`","format":"org.matrix.custom.html","formatted_body":"it would definitely be something to think through before concluding that we should have <code>set</code>"},"ts":1674679347676,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nLR7AyVqvop8S541GcHnGJrlhFs_JKrkHT19X4sklss"},
{"content":{"msgtype":"m.text","body":"rbuckton: can you speak to what `set` can provide that mutable top-level context values (as an implementation detail) are not adequate for?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a>: can you speak to what <code>set</code> can provide that mutable top-level context values (as an implementation detail) are not adequate for?"},"ts":1674679391692,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$oXiDVaPw7Vi7nHCiWPzN0ApvRitChC9Hn97IWc486NI"},
{"content":{"msgtype":"m.text","body":"Is `AsyncContext` threaded through generators as well, or just async operations? If it isn't threaded through generators, then you could potentially write a generator function that `yield`s execution and upon returning control to the generator, evaluates *inside* of that context. ","format":"org.matrix.custom.html","formatted_body":"Is <code>AsyncContext</code> threaded through generators as well, or just async operations? If it isn't threaded through generators, then you could potentially write a generator function that <code>yield</code>s execution and upon returning control to the generator, evaluates <em>inside</em> of that context."},"ts":1674679400490,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE"},
{"content":{"msgtype":"m.text","body":"Can you clarify what you mean by \"mutable top-level context values\"? I haven't caught up on the conversation "},"ts":1674679454461,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$foINIxzqtPI6ZcBFgGI8q8UJDPhVkEqbd_OhB94UHiA"},
{"content":{"msgtype":"m.text","body":"It’s not captured by gens, but it’d be easy to implement in userland","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE"},"rel_type":"m.thread"}},"ts":1674679500248,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3DwqUCxBbQMr1GAZbV7XQLUGqc2Nhv-9XOXgcr4C1PY"},
{"content":{"msgtype":"m.text","body":"(edited my text above a bit) if you `ctx.run([/*mutable array*/], () => { ... })` and code within that block has access to `ctx`, then they can do `ctx.get().push(...)` as if the context value was mutable","format":"org.matrix.custom.html","formatted_body":"(edited my text above a bit) if you <code>ctx.run([/*mutable array*/], () =&gt; { ... })</code> and code within that block has access to <code>ctx</code>, then they can do <code>ctx.get().push(...)</code> as if the context value was mutable"},"ts":1674679557152,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$v0_PBnMaHk6JVzoqg5xTYuFdLF4Dp69SFtsz6hJKCnc"},
{"content":{"msgtype":"m.text","body":"Once the gen.next call starts, inner code would not effect the outer context","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$3DwqUCxBbQMr1GAZbV7XQLUGqc2Nhv-9XOXgcr4C1PY"},"rel_type":"m.thread"}},"ts":1674679559389,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JDRJvm9HilNYzFzoBbPKxIjaovbUVgUOb6QK9HqNd3E"},
{"content":{"msgtype":"m.text","body":"`AsyncContext` is decidedly not just async operations (I sort of think the name undersells the sync side of the coin, where it also helps greatly)","format":"org.matrix.custom.html","formatted_body":"<code>AsyncContext</code> is decidedly not just async operations (I sort of think the name undersells the sync side of the coin, where it also helps greatly)"},"ts":1674679594045,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$TIgaG99gAUQBc66wioYEIzCWKotZsam4DELfjXdX80Q"},
{"content":{"msgtype":"m.text","body":"Should it be captured by generators? It would be coherent to do so","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$JDRJvm9HilNYzFzoBbPKxIjaovbUVgUOb6QK9HqNd3E"},"rel_type":"m.thread"}},"ts":1674679618510,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WrHi8zuIU8v35cXnvU53mxR8wutzAJybM82nsVdHlP8"},
{"content":{"msgtype":"m.text","body":"there are two possible flows: the creation of the generator, when the whole thing could be bound to the current context, or each .next() call","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$WrHi8zuIU8v35cXnvU53mxR8wutzAJybM82nsVdHlP8"},"rel_type":"m.thread"}},"ts":1674679640435,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$bqAcjyCjf4qnHxMnZaDlTIRZXxNGwHurhg3QGcHZhcU"},
{"content":{"msgtype":"m.text","body":"oh, yeah, I guess I was imagining that, when the generator is created, it'd capture the current async context, and on each .next() call, it would restore that","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$bqAcjyCjf4qnHxMnZaDlTIRZXxNGwHurhg3QGcHZhcU"},"rel_type":"m.thread"}},"ts":1674679688853,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-ug-YfAt-xOzxuFxQS_CB7D2Gko7ISnnUJ8EXumoluQ"},
{"content":{"msgtype":"m.text","body":"I think it's important to decide what happens in generators, because async generators are also a thing","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$-ug-YfAt-xOzxuFxQS_CB7D2Gko7ISnnUJ8EXumoluQ"},"rel_type":"m.thread"}},"ts":1674679695069,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$LRc3mYLfJGX78_lRttGtygs802zaskYgGM26IDn-jZw"},
{"content":{"msgtype":"m.text","body":"So `ctx.run(foo, () => gen.next())` wouldn't resume the generator inside of the context?","format":"org.matrix.custom.html","formatted_body":"So <code>ctx.run(foo, () =&gt; gen.next())</code> wouldn't resume the generator inside of the context?","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$LRc3mYLfJGX78_lRttGtygs802zaskYgGM26IDn-jZw"},"rel_type":"m.thread"}},"ts":1674679708316,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$O8zyKUhFcwYKy1gNVDQs4YLq_F0mxd7x9_uMmGCHVHs"},
{"content":{"msgtype":"m.text","body":"The case I’m thinking of is koa, where an APM would be a middleware with a yield","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$O8zyKUhFcwYKy1gNVDQs4YLq_F0mxd7x9_uMmGCHVHs"},"rel_type":"m.thread"}},"ts":1674679736467,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RRe0o-E4J5bsVXOc4f9zlAZ4NOn756SWJXzzNJ85tW0"},
{"content":{"msgtype":"m.text","body":"right, since basically the thing that next() calls out to would be \"wrapped\" internally","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$RRe0o-E4J5bsVXOc4f9zlAZ4NOn756SWJXzzNJ85tW0"},"rel_type":"m.thread"}},"ts":1674679740947,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AG7s5wO120c2OE4vBXe4-neCWGVC_aaELDFNfZ2Zhd8"},
{"content":{"msgtype":"m.text","body":"We should move this into a GH issue, though","m.relates_to":{"event_id":"$jgi5J_yl3vA12oENmApFQ2cXz0qqLdvjhYNc7PVgAfE","is_falling_back":true,"m.in_reply_to":{"event_id":"$AG7s5wO120c2OE4vBXe4-neCWGVC_aaELDFNfZ2Zhd8"},"rel_type":"m.thread"}},"ts":1674679801540,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$i2TXH4hSH6k6OuuloKOGnwj3yOz3yUt-mIajY8jxiJo"},
{"content":{"msgtype":"m.text","body":"> <@benjamn:matrix.org> (edited my text above a bit) if you `ctx.run([/*mutable array*/], () => { ... })` and code within that block has access to `ctx`, then they can do `ctx.get().push(...)` as if the context value was mutable\n\nso I'm wondering if that kind of object mutability is adequate for your use cases, or you really need the top-level context value to be changeable within the scope of a single function body","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$v0_PBnMaHk6JVzoqg5xTYuFdLF4Dp69SFtsz6hJKCnc?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>(edited my text above a bit) if you <code>ctx.run([/*mutable array*/], () =&gt; { ... })</code> and code within that block has access to <code>ctx</code>, then they can do <code>ctx.get().push(...)</code> as if the context value was mutable</blockquote></mx-reply>so I'm wondering if that kind of object mutability is adequate for your use cases, or you really need the top-level context value to be changeable within the scope of a single function body","m.relates_to":{"m.in_reply_to":{"event_id":"$v0_PBnMaHk6JVzoqg5xTYuFdLF4Dp69SFtsz6hJKCnc"}}},"ts":1674679958702,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Iw3tcefzZCNAaaSVYCwMuk6hHyVGI6E9tvF4PfaXGGI"},
{"content":{"msgtype":"m.text","body":"no rush to answer btw; I'm just trying to get my thoughts sorted out before the meeting next week"},"ts":1674680103744,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$MN0aYChVyp_e-aVXocUV1nXFIsuzZik1CH7xhvpkmxA"},
{"content":{"msgtype":"m.text","body":"> <@littledan:matrix.org> I think of `run` as something you call \"once per thread\" (conceptually)\n\none use case I like to imagine is an async task runner system, where `run` gets called behind the scenes once per subtask, setting the current subtask object for that execution subtree, say","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$hlprWMamRdd8baAMUODrXzwfM4RUrZ1geX829AutI5g?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think of <code>run</code> as something you call \"once per thread\" (conceptually)</blockquote></mx-reply>one use case I like to imagine is an async task runner system, where <code>run</code> gets called behind the scenes once per subtask, setting the current subtask object for that execution subtree, say","m.relates_to":{"m.in_reply_to":{"event_id":"$hlprWMamRdd8baAMUODrXzwfM4RUrZ1geX829AutI5g"}}},"ts":1674680623390,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$nfNYQTq7LvYbgcWre5V5hc_wLIJ0H5MpnRtlLSxx2Ik"},
{"content":{"msgtype":"m.text","body":"(which is mostly to say `run` could happen fairly often in normal code)","format":"org.matrix.custom.html","formatted_body":"(which is mostly to say <code>run</code> could happen fairly often in normal code)"},"ts":1674680735060,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$K22xYDh3VtGVox-J5uSlUq6h8ufrKzH-fmaCFpEDIcs"},
{"content":{"org.matrix.msc1767.message":[{"body":"would `wrap` affect V8's async stack tracing?","mimetype":"text/plain"},{"body":"would <code>wrap</code> affect V8's async stack tracing?","mimetype":"text/html"}],"body":"would `wrap` affect V8's async stack tracing?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"would <code>wrap</code> affect V8's async stack tracing?"},"ts":1674680863966,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc"},
{"content":{"msgtype":"m.text","body":"Subtask is a better word than thread, yes"},"ts":1674680869756,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3CYJXLuawSg-aD9PpaTyyjVMjl7q__CB3z5Nu0ky-CE"},
{"content":{"msgtype":"m.text","body":"Do you mean the one that exists if you check the box in devtools?","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc"},"rel_type":"m.thread"}},"ts":1674680909742,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZRYdyWbhr7CmAvS4_PO3VMFsq5yqM3TQpYoz_2pXwXE"},
{"content":{"msgtype":"m.text","body":"I think not too often that, for example, it's a problem that `run` requires some allocation, and using a mutable object would mean even more allocation","format":"org.matrix.custom.html","formatted_body":"I think not too often that, for example, it's a problem that <code>run</code> requires some allocation, and using a mutable object would mean even more allocation","m.relates_to":{"event_id":"$K22xYDh3VtGVox-J5uSlUq6h8ufrKzH-fmaCFpEDIcs","is_falling_back":true,"m.in_reply_to":{"event_id":"$K22xYDh3VtGVox-J5uSlUq6h8ufrKzH-fmaCFpEDIcs"},"rel_type":"m.thread"}},"ts":1674680951177,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d8jRzTtSkb0BlUyUlaMunXnymGZi0WzkFOyfj0HlpWY"},
{"content":{"msgtype":"m.text","body":"right now I guess you'll see the immediately calling callstack when the wrapped function runs, not the one from wherever it was first wrapped (which could also be useful)","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$ZRYdyWbhr7CmAvS4_PO3VMFsq5yqM3TQpYoz_2pXwXE"},"rel_type":"m.thread"}},"ts":1674681157491,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$IFG6RRQMfKz2MF74iLITNmqfCdpLkYXAHALhhwPRoeE"},
{"content":{"msgtype":"m.text","body":"if the immediate caller is the event loop, maybe there's room to restore the previous async stack instead of showing nothing there","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$IFG6RRQMfKz2MF74iLITNmqfCdpLkYXAHALhhwPRoeE"},"rel_type":"m.thread"}},"ts":1674681225613,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$5yY6RCXoV3avSzDnGrGGC3P4yjGoap96Px8-NKW8bbw"},
{"content":{"msgtype":"m.text","body":"(not sure if this even remotely answers the question)","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$5yY6RCXoV3avSzDnGrGGC3P4yjGoap96Px8-NKW8bbw"},"rel_type":"m.thread"}},"ts":1674681243779,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$bg9TX6dlQkttGal0CN53D3GFJAmJgVkxHlDGoEK94bU"},
{"content":{"msgtype":"m.text","body":"> <@littledan:matrix.org> Do you mean the one that exists if you check the box in devtools?\n\nIf you mean this one--that's a good point, probably it should be based on AsyncContext, if that can be done efficiently enough.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$ZRYdyWbhr7CmAvS4_PO3VMFsq5yqM3TQpYoz_2pXwXE?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Do you mean the one that exists if you check the box in devtools?</blockquote></mx-reply>If you mean this one--that's a good point, probably it should be based on AsyncContext, if that can be done efficiently enough.","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":false,"m.in_reply_to":{"event_id":"$ZRYdyWbhr7CmAvS4_PO3VMFsq5yqM3TQpYoz_2pXwXE"},"rel_type":"m.thread"}},"ts":1674681263088,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5wGIviv_PTnrDJe6qXhLFdaSGhE8VFyYvBNV8_4FbIs"},
{"content":{"org.matrix.msc1767.text":"I had to check whether there was a checkbox","body":"I had to check whether there was a checkbox","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$5wGIviv_PTnrDJe6qXhLFdaSGhE8VFyYvBNV8_4FbIs"},"rel_type":"m.thread"}},"ts":1674681278807,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4zAafPGlOU1Nj10HLiDliPxqbYPu2MKDaUJvDE1ydMQ"},
{"content":{"msgtype":"m.text","body":"the problem is that it'd be a lot of implied `run` calls","format":"org.matrix.custom.html","formatted_body":"the problem is that it'd be a lot of implied <code>run</code> calls","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$4zAafPGlOU1Nj10HLiDliPxqbYPu2MKDaUJvDE1ydMQ"},"rel_type":"m.thread"}},"ts":1674681286564,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nqWHCBcElKaF3zOELijjQXp8stH9L8d4FVEmxwN-CUg"},
{"content":{"org.matrix.msc1767.text":"it's enabled by default, at least in M111","body":"it's enabled by default, at least in M111","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$5wGIviv_PTnrDJe6qXhLFdaSGhE8VFyYvBNV8_4FbIs"},"rel_type":"m.thread"}},"ts":1674681300549,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$70yCKj7AdNGzBZTremDrTcCYyUaj1t86TkR0dwwvPPU"},
{"content":{"org.matrix.msc1767.text":"or rather, the checkbox says \"disable\"","body":"or rather, the checkbox says \"disable\"","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$70yCKj7AdNGzBZTremDrTcCYyUaj1t86TkR0dwwvPPU"},"rel_type":"m.thread"}},"ts":1674681311069,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4zEzwhCPoQnaxscX07bQ8gI85u1e0kdgEzmSAAu9mlI"},
{"content":{"msgtype":"m.text","body":"huh, really?","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$4zEzwhCPoQnaxscX07bQ8gI85u1e0kdgEzmSAAu9mlI"},"rel_type":"m.thread"}},"ts":1674681321770,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LnSIzrdRU-pZgtqi6hEgsOQi8kH9TLHHU7EZh6GkfIU"},
{"content":{"msgtype":"m.text","body":"well, it may be default-on when you open up the devtools panel, for example","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$LnSIzrdRU-pZgtqi6hEgsOQi8kH9TLHHU7EZh6GkfIU"},"rel_type":"m.thread"}},"ts":1674681350289,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sWo4o4fNS_SpsFcRlF9rN8ASqOE_i4lg6UvB7UiT-xw"},
{"content":{"org.matrix.msc1767.text":"it's also been shipping in Deno and Node for a while","body":"it's also been shipping in Deno and Node for a while","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$LnSIzrdRU-pZgtqi6hEgsOQi8kH9TLHHU7EZh6GkfIU"},"rel_type":"m.thread"}},"ts":1674681358386,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cH_YW9gqXWiswUbPR6_L1B1cyQDREhbm_0g4uGCx6UE"},
{"content":{"msgtype":"m.text","body":"always-on async stack traces have been a long-time feature request; I hadn't heard that that was granted, but if so, great","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$cH_YW9gqXWiswUbPR6_L1B1cyQDREhbm_0g4uGCx6UE"},"rel_type":"m.thread"}},"ts":1674681377326,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hjpUAP-ebb6jcARuafpnPcmAtyoBuc6i9d7xGfieuDA"},
{"content":{"msgtype":"m.text","body":"they ultimately run into the sort of buffer overrun issue that was raised in response to Yoav's talk at BlinkOn","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$hjpUAP-ebb6jcARuafpnPcmAtyoBuc6i9d7xGfieuDA"},"rel_type":"m.thread"}},"ts":1674681402555,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K87E6_M9MrjqLBnSEdRBYukzYKbiUgZRYxv0IMLI8Pw"},
{"content":{"msgtype":"m.text","body":"but also, before then, there's a whole lot of bookkeeping","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$K87E6_M9MrjqLBnSEdRBYukzYKbiUgZRYxv0IMLI8Pw"},"rel_type":"m.thread"}},"ts":1674681415008,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eIWZQOJ_MB_syTjrc2C5LJRybUgoqGtX26SaNSRp7f0"},
{"content":{"msgtype":"m.text","body":"that's why, originally, it wasn't default-on","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$eIWZQOJ_MB_syTjrc2C5LJRybUgoqGtX26SaNSRp7f0"},"rel_type":"m.thread"}},"ts":1674681419550,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cxqyz2qfIWuGFhwoc1gpOMCT72tuMhE_x5dWVYa75F8"},
{"content":{"msgtype":"m.text","body":"anyway if they made this cheaper: that's great!","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$cxqyz2qfIWuGFhwoc1gpOMCT72tuMhE_x5dWVYa75F8"},"rel_type":"m.thread"}},"ts":1674681433326,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$b2dv187Hlor5QRbDjJ27B9Z412a8yFmXHf8ZkmegkJ4"},
{"content":{"org.matrix.msc1767.text":"https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit","body":"https://docs.google.com/document/d/13Sy_kBIJGP0XT34V1CV3nkWya4TwYx9L3Yv45LdGB6Q/edit","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$LnSIzrdRU-pZgtqi6hEgsOQi8kH9TLHHU7EZh6GkfIU"},"rel_type":"m.thread"}},"ts":1674681472773,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7iZOwo6zkrIgPxWfUm1RkYFFoPr6D2z0rYjqvwuZMH4"},
{"content":{"msgtype":"m.text","body":"Ah yes that's a different thing","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$7iZOwo6zkrIgPxWfUm1RkYFFoPr6D2z0rYjqvwuZMH4"},"rel_type":"m.thread"}},"ts":1674681505027,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7-0EpMi2RkcsdYQQPT55HUlk90wehtIQoEDFBvIwBOs"},
{"content":{"msgtype":"m.text","body":"that's why I started by asking \"which one\"","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$7-0EpMi2RkcsdYQQPT55HUlk90wehtIQoEDFBvIwBOs"},"rel_type":"m.thread"}},"ts":1674681510155,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Yc2U-mslJQbjOQq2xdlA6yGb4jei4TKI27PrbThnULw"},
{"content":{"org.matrix.msc1767.text":"I didn't realize there were more than one","body":"I didn't realize there were more than one","msgtype":"m.text","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$LnSIzrdRU-pZgtqi6hEgsOQi8kH9TLHHU7EZh6GkfIU"},"rel_type":"m.thread"}},"ts":1674681520514,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YRq2SaAaC05utvuOxIcV0viWaWHo96KUE0OCvOeyUlQ"},
{"content":{"msgtype":"m.text","body":"that is more limited to just async/await and sometimes doesn't work","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$YRq2SaAaC05utvuOxIcV0viWaWHo96KUE0OCvOeyUlQ"},"rel_type":"m.thread"}},"ts":1674681522348,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7FqbW_U_IVQbn8rGLnFaZG4kOAXWziElX0_tgmZ5l-8"},
{"content":{"msgtype":"m.text","body":"I think that always-on mechanism will not interact with `wrap` or anything like that","format":"org.matrix.custom.html","formatted_body":"I think that always-on mechanism will not interact with <code>wrap</code> or anything like that","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$7FqbW_U_IVQbn8rGLnFaZG4kOAXWziElX0_tgmZ5l-8"},"rel_type":"m.thread"}},"ts":1674681570522,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gi_D0vAriX5vlwxptvubFdcKaSGe0xUKM5gXH5vhjig"},
{"content":{"msgtype":"m.text","body":"Oh, I guess they got rid of the previous version and there has only been one for a while","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$gi_D0vAriX5vlwxptvubFdcKaSGe0xUKM5gXH5vhjig"},"rel_type":"m.thread"}},"ts":1674681817422,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B45pt1jWmSYveLwtwoT6LslLlv_Rk6Z_BdmV0hcJNTQ"},
{"content":{"msgtype":"m.text","body":"the previous mechanism also worked for, e.g., setTimeout","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$B45pt1jWmSYveLwtwoT6LslLlv_Rk6Z_BdmV0hcJNTQ"},"rel_type":"m.thread"}},"ts":1674681898520,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Sl84aklEFeF3EqjlJJIeO5U4ToR9p_17SjftlZZoKM4"},
{"content":{"msgtype":"m.text","body":"Here's a description of the old version, clearly working without promises: https://developer.chrome.com/blog/async-call-stack/","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Sl84aklEFeF3EqjlJJIeO5U4ToR9p_17SjftlZZoKM4"},"rel_type":"m.thread"}},"ts":1674682056015,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5mYnE3TwwAwcG5tVTSWEaA8TqFsYERADynd-nXU6bPk"},
{"content":{"msgtype":"m.text","body":"and here's the release notes for the change: https://developer.chrome.com/blog/new-in-devtools-60/#async-stacks","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$5mYnE3TwwAwcG5tVTSWEaA8TqFsYERADynd-nXU6bPk"},"rel_type":"m.thread"}},"ts":1674682084187,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h509TNezFsH0b-3w_uOQmAYwuHyWzh3xy5bm1kDyY2I"},
{"content":{"msgtype":"m.text","body":"I think, with the previous version, you'd expect `wrap` to continue the async stack trace. With the new version, you would not--it is specific to Promises.","format":"org.matrix.custom.html","formatted_body":"I think, with the previous version, you'd expect <code>wrap</code> to continue the async stack trace. With the new version, you would not--it is specific to Promises.","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$h509TNezFsH0b-3w_uOQmAYwuHyWzh3xy5bm1kDyY2I"},"rel_type":"m.thread"}},"ts":1674682107360,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Hid1007BNIHStycjf4oydwza9g1STRxfIoCg-dm3j7Y"},
{"content":{"msgtype":"m.text","body":"I think they want you to manually tag your stacks now: https://developer.chrome.com/blog/devtools-modern-web-debugging/#:~:text=The%20Async%20Stack%20Tagging%20API%20introduces%20a%20new%20console%20method%20named%20console.createTask().%20The%20API%20signature%20is%20as%20follows%3A","m.relates_to":{"event_id":"$jjNYJHhRDRV8sSHh8GQhdYiaeQeIMwHUFM0VM-QeLvc","is_falling_back":true,"m.in_reply_to":{"event_id":"$Hid1007BNIHStycjf4oydwza9g1STRxfIoCg-dm3j7Y"},"rel_type":"m.thread"}},"ts":1674686374115,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Ze_Ih3aqDhPieR9xUkF02wxYB7DeE_J6kxPYXyqDSA0"}
]