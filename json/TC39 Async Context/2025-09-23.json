[
{"content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"ts":1758659473995,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4"},
{"content":{"body":"* I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"* I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"m.new_content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758659505945,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$eHl9ioS1khMlH6StEOMXJBHN-sRdTOdmvraC3ldfzGE"},
{"content":{"body":"* I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"* I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"m.new_content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758659535496,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$1UhWwFAbL2rtKRHVhAFhHAl_awlEWSohpuDjw1TFwAI"},
{"content":{"body":"my understanding of the presentation is that it made `yield*` more like repeated `yield`, so I don't know what \"extending this to also include ordinary yield\" means","format":"org.matrix.custom.html","formatted_body":"my understanding of the presentation is that it made <code>yield*</code> more like repeated <code>yield</code>, so I don't know what \"extending this to also include ordinary yield\" means","m.mentions":{},"msgtype":"m.text"},"ts":1758660453569,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VZBgzcoeIzA6hF0mDw3z3oZbPq5iPml8AI2-Mu7Uajk"},
{"content":{"body":"This is the opposite of my understanding.  As I understand it, the previous situation was that `yield*` was basically just repeated `yield`, but the discussion this morning was to make it so that `yield*` would _not_ restore the generator's internal/initial context but would instead pass on the next() calling context into the delegate.","format":"org.matrix.custom.html","formatted_body":"This is the opposite of my understanding.  As I understand it, the previous situation was that <code>yield*</code> was basically just repeated <code>yield</code>, but the discussion this morning was to make it so that <code>yield*</code> would <em>not</em> restore the generator's internal/initial context but would instead pass on the next() calling context into the delegate.","m.mentions":{},"msgtype":"m.text"},"ts":1758661551204,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Q4RYE4-UryfnDqzRFkduMeQQdOXTBZQsnRyMyOqgeys"},
{"content":{"body":"`for (const it of gen()) yield it` will now behave differently than `yield* gen()`","format":"org.matrix.custom.html","formatted_body":"<code>for (const it of gen()) yield it</code> will now behave differently than <code>yield* gen()</code>","m.mentions":{"user_ids":["@bakkot:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VZBgzcoeIzA6hF0mDw3z3oZbPq5iPml8AI2-Mu7Uajk"}},"msgtype":"m.text"},"ts":1758661824593,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CkbkLp_rlocXDB5MtCQZqnRABzuvwIijTwKJ4z8AB7Q"},
{"content":{"body":"oh, sorry, you're right, I'm wrong","m.mentions":{},"msgtype":"m.text"},"ts":1758661834733,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BPzC3DYiQHcpAUFxOPsV_t3VCmzKHlMzNAxZdvg8EP0"},
{"content":{"body":"Only the inner `gen()` sees the difference, the wrapping generator does not.","format":"org.matrix.custom.html","formatted_body":"Only the inner <code>gen()</code> sees the difference, the wrapping generator does not.","m.mentions":{},"msgtype":"m.text"},"ts":1758661851432,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cdR-LE0tYW7Hg4D63xwAObcc7267Zm4pJPKFWNlctgU"},
{"content":{"body":"Adding one more point to my earlier paragraph: (6) this would also restore consistency between `yield` and `yield*`","format":"org.matrix.custom.html","formatted_body":"Adding one more point to my earlier paragraph: (6) this would also restore consistency between <code>yield</code> and <code>yield*</code>","m.mentions":{},"msgtype":"m.text"},"ts":1758661885139,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$8a1jmOG1o55W0RNa85pydmVe4kgWseguVdGJli6Em-k"},
{"content":{"body":"I'm still not totally sure what \"extending this to also include ordinary yield\" means though","m.mentions":{},"msgtype":"m.text"},"ts":1758661976714,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$da9aIBiJt1ffhN9y9SVvuAdXHZWLLc3tTMvO_jh0qyw"},
{"content":{"body":"now both behave as, snapshot context before the expression, restore it after","m.mentions":{},"msgtype":"m.text"},"ts":1758661988361,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nwAKLIw7gXjSEuDMoccSF48RDY8H0uhZUXc4CWzzTNM"},
{"content":{"body":"(or else I am still misunderstanding)","m.mentions":{},"msgtype":"m.text"},"ts":1758662028264,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VshtgCt_2ylNe5R7_fEYaU617z6upvDruCVTpPqrSL4"},
{"content":{"body":"ah, I see what you're saying","m.mentions":{},"msgtype":"m.text"},"ts":1758662050756,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$uK4pzBTtbITjypR2xd5OsAGutnAidCctQcOxa_SmAkM"},
{"content":{"body":"Yes, that part hasn't changed - yield* and yield both snapshot and restore around them within the body of the generator","m.mentions":{},"msgtype":"m.text"},"ts":1758662106286,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$P1bwehnEtAklyvCtI7PRdcZn76S6hX9HgIWcKr0mt4E"},
{"content":{"body":"In that sense, it's less of an extension.  What I was referring to is that previously both versions prevented access to the next() calling context, whereas now yield* has access to it (if the delegate iterator is an ordinary object, rather than a generator), but yield doesn't expose that access at all (since there's no other next() call to delegate through).","m.mentions":{},"msgtype":"m.text"},"ts":1758662204213,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$VWpzXku1oibeWgyuJbsm8gAaPYDtiuXpEdFrnSJSKfE"},
{"content":{"body":"What I'm talking about is dropping the snapshot-and-restore before/after yield behavior, which _would_ expose the context next() was called in to the generator body directly","format":"org.matrix.custom.html","formatted_body":"What I'm talking about is dropping the snapshot-and-restore before/after yield behavior, which <em>would</em> expose the context next() was called in to the generator body directly","m.mentions":{},"msgtype":"m.text"},"ts":1758662257079,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$RIlIaX7ly_anVQzpSFttVxVCBjukRfSmjSeaQKLw4YE"},
{"content":{"body":"that seems very wrong to me","m.mentions":{},"msgtype":"m.text"},"ts":1758662301811,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F05SlqhX-5c5tS2GUWdEqD-IlCWl5Z5xvQYScuDaM0A"},
{"content":{"body":"I guess I just don't buy the argument about generators being more data-like","m.mentions":{},"msgtype":"m.text"},"ts":1758662313711,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VE0oLMbyEJ_t9jzdq29lbCoIyybVxnRYV0RL8KMMQTM"},
{"content":{"body":"Yeah I think the restore semantics inside generators are still the correct ones","msgtype":"m.text"},"ts":1758662396405,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yQKCiALf95sNP3t4u1DQ5tBdQmvCLnonzSIBPVFkwAY"},
{"content":{"body":"There is still a general problem that some code is interested in the trigger context rather than the continuation context, but that's not specific to generators","msgtype":"m.text"},"ts":1758662467573,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$5b_AzOvmby9erf7ym3ZTJu21NNNG8uo6vQqXKhPEikM"},
{"content":{"body":"A question here would be: What are the situations where yield would meaningfully restore context that _isn't_ already restored by the scheduling mechanism that calls next?","format":"org.matrix.custom.html","formatted_body":"A question here would be: What are the situations where yield would meaningfully restore context that <em>isn't</em> already restored by the scheduling mechanism that calls next?","m.mentions":{},"msgtype":"m.text"},"ts":1758662538414,"senderName":"Jan Olaf Martin","senderId":"@jkrems:matrix.org","id":"$Qpb3lRPDC-NyM8Zk0dsItYhR2qcQHSN0CxthuhsYx6g"},
{"content":{"body":"This is definitely still a general problem.  My point is that generators will almost never actually observe any difference (since they're almost always iterated in the same context they're instantiated in) but in the cases when that's not the case, the simpler \"don't do anything with context\" behavior seems more likely to be correct - and as a bonus, it's a performance win in the vast majority of cases where it didn't matter in the first place.","m.mentions":{},"msgtype":"m.text"},"ts":1758662620146,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$8czCyqDp9OyuopxewGQPL0h7wGR_YwSDOtrz9A6WNI4"},
{"content":{"body":"Which is basically what Jan was saying.","m.mentions":{},"msgtype":"m.text"},"ts":1758662645321,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Rs2jupcpe2QChveu3Pff8iPKbKXRsha1bDXoCboNFcM"},
{"content":{"body":"* Which is basically what Jan just said, in a few more words.","m.mentions":{},"m.new_content":{"body":"Which is basically what Jan just said, in a few more words.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Rs2jupcpe2QChveu3Pff8iPKbKXRsha1bDXoCboNFcM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758662665900,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$3MCMRms1YnOoV_i6oHv8nPQrJ_kgVUY3pc8oMR2AQiE"}
]