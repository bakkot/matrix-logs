[
{"content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"ts":1758659473995,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4"},
{"content":{"body":"* I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"* I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"m.new_content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758659505945,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$eHl9ioS1khMlH6StEOMXJBHN-sRdTOdmvraC3ldfzGE"},
{"content":{"body":"* I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"* I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"m.new_content":{"body":"I had some personal issues come up this week and missed the session where we talked about yield\\*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don't know if there's any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I'm still convinced that dropping all the spec around generators (so that there's no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it's irrelevant, (2) it's better performance to not need to do the extra swapping, (3) in the rare cases where it's not irrelevant, I'm pretty sure dispatch-context is the correct choice, (4) it's much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","format":"org.matrix.custom.html","formatted_body":"I had some personal issues come up this week and missed the session where we talked about yield*.  But I was remiss because I really wanted to use the opportunity to get a sense of how the broader committee might feel about extending this to also include ordinary yield.  I don&#39;t know if there&#39;s any opportunity to still bring it up in plenary at this point, or if not, I suppose I could reach out individually to folks who we think might be most opposed?\n\nAt this point, I&#39;m still convinced that dropping all the spec around generators (so that there&#39;s no context preservation around any yields, and yield just propagates through from the next() call) is the right thing to do - (1) 99% of the time it&#39;s irrelevant, (2) it&#39;s better performance to not need to do the extra swapping, (3) in the rare cases where it&#39;s not irrelevant, I&#39;m pretty sure dispatch-context is the correct choice, (4) it&#39;s much less invasive to wrap it to get the other behavior, (5) generators are more like data than code - e.g. https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nEt4ovkWJXsH2LcypCm5ilwtm8gFPPcXRqW7slZTfD4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1758659535496,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$1UhWwFAbL2rtKRHVhAFhHAl_awlEWSohpuDjw1TFwAI"},
{"content":{"body":"my understanding of the presentation is that it made `yield*` more like repeated `yield`, so I don't know what \"extending this to also include ordinary yield\" means","format":"org.matrix.custom.html","formatted_body":"my understanding of the presentation is that it made <code>yield*</code> more like repeated <code>yield</code>, so I don't know what \"extending this to also include ordinary yield\" means","m.mentions":{},"msgtype":"m.text"},"ts":1758660453569,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VZBgzcoeIzA6hF0mDw3z3oZbPq5iPml8AI2-Mu7Uajk"},
{"content":{"body":"This is the opposite of my understanding.  As I understand it, the previous situation was that `yield*` was basically just repeated `yield`, but the discussion this morning was to make it so that `yield*` would _not_ restore the generator's internal/initial context but would instead pass on the next() calling context into the delegate.","format":"org.matrix.custom.html","formatted_body":"This is the opposite of my understanding.  As I understand it, the previous situation was that <code>yield*</code> was basically just repeated <code>yield</code>, but the discussion this morning was to make it so that <code>yield*</code> would <em>not</em> restore the generator's internal/initial context but would instead pass on the next() calling context into the delegate.","m.mentions":{},"msgtype":"m.text"},"ts":1758661551204,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Q4RYE4-UryfnDqzRFkduMeQQdOXTBZQsnRyMyOqgeys"}
]