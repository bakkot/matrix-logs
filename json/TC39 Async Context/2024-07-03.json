[
{"content":{"body":"> <@littledan:matrix.org> client monitoring in general? I'm curious whether Steve Hicks 's effort is for refining present monitoring, or making a new system that doesn't exist yet.\n\nIt's mostly the latter - we have some very limited client-side monitoring via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we _do_ need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$i_51OPIUgGZEZegDuS2AuyiqqPsCxWLfjxqZnKu-sMY?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>client monitoring in general? I'm curious whether <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a> 's effort is for refining present monitoring, or making a new system that doesn't exist yet.</blockquote></mx-reply>It's mostly the latter - we have some very limited client-side monitoring via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we <em>do</em> need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$i_51OPIUgGZEZegDuS2AuyiqqPsCxWLfjxqZnKu-sMY"}},"msgtype":"m.text"},"ts":1719971668096,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$MxG00YOzeUh524UCWYcaA8QXr1zAqBI69H_i3VOoF68"},
{"content":{"body":"> <@littledan:matrix.org> client monitoring in general? I'm curious whether Steve Hicks 's effort is for refining present monitoring, or making a new system that doesn't exist yet.\n\n * It's mostly the latter - we have some very limited client-side monitoring today via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we _do_ need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$i_51OPIUgGZEZegDuS2AuyiqqPsCxWLfjxqZnKu-sMY?via=igalia.com&amp;via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>client monitoring in general? I'm curious whether <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a> 's effort is for refining present monitoring, or making a new system that doesn't exist yet.</blockquote></mx-reply> * It's mostly the latter - we have some very limited client-side monitoring today via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we <em>do</em> need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","m.mentions":{},"m.new_content":{"body":"It's mostly the latter - we have some very limited client-side monitoring today via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we _do_ need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","format":"org.matrix.custom.html","formatted_body":"It's mostly the latter - we have some very limited client-side monitoring today via explicit tracer propagation, but we've found it to be difficult for a few reasons: it's easy to forget to pass the tracer along, or to use it improperly, and it's viral, requiring every function signature to adapt to pass it along, so it's impractical to adopt in products that aren't already using it.  Our experience with server languages is that it really needs to be implicit, so that's why we're really interested in AsyncContext, and are experimenting with building out some new reporting systems based on that approach.  To that end, we're certainly not looking for \"exposing everything that goes on\" - but we <em>do</em> need to make sure that we can integrate the tracing system into the framework at all, which we know is going to require avoiding registration-time snapshotting in at least some userland APIs, and possibly also some builtins.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$MxG00YOzeUh524UCWYcaA8QXr1zAqBI69H_i3VOoF68","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719971680924,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$zlDpB4y_o8v9_1geB6XFxK-_dyMGKsSe8n25lI-4tX8"},
{"content":{"body":"> <@abotella:igalia.com> I have a PR for the spec infra for the `error` event, PTAL: https://github.com/tc39/proposal-async-context/pull/95\n\nI'm confused - it looks like that PR is adding a whole new runtime semantics section for try statements, but shouldn't it be modifying the existing one?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$M4T3eMHDUEZS1IcygmcV0aJkuPugJ_c8-LsSBs6Psf4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I have a PR for the spec infra for the <code>error</code> event, PTAL: https://github.com/tc39/proposal-async-context/pull/95</blockquote></mx-reply>I'm confused - it looks like that PR is adding a whole new runtime semantics section for try statements, but shouldn't it be modifying the existing one?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M4T3eMHDUEZS1IcygmcV0aJkuPugJ_c8-LsSBs6Psf4"}},"msgtype":"m.text"},"ts":1719971935197,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$d-yyzJKqcmeiTEYVT73Bn7Jbc4hcK-8-BdrHC-TMrXQ"},
{"content":{"body":"oh wait, I think I see - it's modifying the version that's already in the proposal...","m.mentions":{},"msgtype":"m.text"},"ts":1719972010103,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$z9E9YCO2ZGD46jNIpK48YOROtQlNoQ3zss_XwWxGvKU"},
{"content":{"body":"which doesn't have that section at all yet","m.mentions":{},"msgtype":"m.text"},"ts":1719972017810,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$mFzUJLJGDpMtBBtupqwkNxIMINW5jDpRSnlxcWMs1_s"},
{"content":{"body":"Is there an easy way to see it as a diff from the current standard?","m.mentions":{},"msgtype":"m.text"},"ts":1719972033209,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ZnpVH1fS196hQ0uadhEyqgDr7B2R--fWNr2tolenDCc"},
{"content":{"body":"the rendered spec has the differences as red and green `<ins>` and `<del>` sections","format":"org.matrix.custom.html","formatted_body":"the rendered spec has the differences as red and green <code>&lt;ins&gt;</code> and <code>&lt;del&gt;</code> sections","m.mentions":{},"msgtype":"m.text"},"ts":1719972117799,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$yabvvjxV4QV2eK-8Nsbxrc6-DcY9LoQ-pXsR_YlheOE"},
{"content":{"body":"you can check out the PR and do `npm run build`","format":"org.matrix.custom.html","formatted_body":"you can check out the PR and do <code>npm run build</code>","m.mentions":{},"msgtype":"m.text"},"ts":1719972126189,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$EfzdPjhUVf-Ua-xvPB-TKqfUQM3HZvj_ZJImj0tQzBo"},
{"content":{"body":" * the rendered spec has the differences with the current standard as red and green `<ins>` and `<del>` sections","format":"org.matrix.custom.html","formatted_body":" * the rendered spec has the differences with the current standard as red and green <code>&lt;ins&gt;</code> and <code>&lt;del&gt;</code> sections","m.mentions":{},"m.new_content":{"body":"the rendered spec has the differences with the current standard as red and green `<ins>` and `<del>` sections","format":"org.matrix.custom.html","formatted_body":"the rendered spec has the differences with the current standard as red and green <code>&lt;ins&gt;</code> and <code>&lt;del&gt;</code> sections","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$yabvvjxV4QV2eK-8Nsbxrc6-DcY9LoQ-pXsR_YlheOE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719972141315,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$a6YDSPG7tCqEXvvXz4Cc5jNESsw149-jtd6JFvRJtgM"},
{"content":{"body":"Does anything else AsyncContext-related live in the Agent Record at this point?  I don't think it's a problem, but I've been casually implementing the spec in my spare time and so far haven't touched the Agent Record yet (and at this point I've got almost the entire core language done, with just most of the runtime libraries missing).","m.mentions":{},"msgtype":"m.text"},"ts":1719972358798,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$xwx8NTMgTkncvJ50f_4RPNTqKC3qzZFH_TAgkMpOHgo"},
{"content":{"body":"(and to answer my own question - yes... AsyncContextMapping lives there)","m.mentions":{},"msgtype":"m.text"},"ts":1719972470740,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$KezXzmU2zejLlNcstIS5xouTz6sZLWCk6Z6vBMMoXw0"},
{"content":{"body":"does anyone have info on how many ALS variables tend to be in use in applications that make do use of them? my assumption atm is not very many but I'd love hard data.","msgtype":"m.text"},"ts":1719984260550,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$u3Zav6jWWq6xxPI0WLn_QM5SOE5M9BuxIW8tL1QDb9A"},
{"content":{"body":"* does anyone have info on how many ALS variables tend to be in use in applications that do make use of them? my assumption atm is not very many but I'd love hard data.","m.new_content":{"body":"does anyone have info on how many ALS variables tend to be in use in applications that do make use of them? my assumption atm is not very many but I'd love hard data.","msgtype":"m.text"},"m.relates_to":{"event_id":"$u3Zav6jWWq6xxPI0WLn_QM5SOE5M9BuxIW8tL1QDb9A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719984278976,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$7pxxXft6eRP63hrdGdOI-qMt8ky7o3zPr7HqMWBfnYg"},
{"content":{"body":"oh yeah I thought we'd use the execution context to hold this kind of thing","m.mentions":{},"msgtype":"m.text"},"ts":1720005194494,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BuN-90F5wda2eLAahIh8t4hY7Y-_kZEIbnYfEcb590E"},
{"content":{"body":"> <@devsnek:matrix.org> does anyone have info on how many ALS variables tend to be in use in applications that do make use of them? my assumption atm is not very many but I'd love hard data.\n\nYeah, I hope people use tens to hundreds at most (I don't have data)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$u3Zav6jWWq6xxPI0WLn_QM5SOE5M9BuxIW8tL1QDb9A?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>does anyone have info on how many ALS variables tend to be in use in applications that do make use of them? my assumption atm is not very many but I&#39;d love hard data.</blockquote></mx-reply>Yeah, I hope people use tens to hundreds at most (I don't have data)","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$u3Zav6jWWq6xxPI0WLn_QM5SOE5M9BuxIW8tL1QDb9A"}},"msgtype":"m.text"},"ts":1720005252505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mYc9HxeVpVL8LwOSI1QSCs6CPVDzLPHFL3xR4hHMJTo"},
{"content":{"body":"10+ is not uncommon, but more than 100 would be very rare. For the most part there’s a single store for each observability project, which often people have a couple installed, and then one in most routing frameworks, which there’s generally not more than one or two of installed. Sometimes companies build their own internally, which I don’t have numbers for how many instances they use internally there, but would assume similarly using a single store for their purpose.","msgtype":"m.text"},"ts":1720023040894,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$AxlBeunedddwoGO64CXLR2W1va2ie11kp4E-zPkC4p4"},
{"content":{"body":"I agree that >100 should be rare--it'd generally be a bug. I want to make sure we're considering React Context-type stuff in our analyses though.","m.mentions":{},"msgtype":"m.text"},"ts":1720023087092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$92TV7MuxKSjrNxky_ZGyuvrt9YUVuLlzTrCiGTb2Tuw"}
]