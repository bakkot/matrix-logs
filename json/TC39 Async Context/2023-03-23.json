[
{"content":{"body":"I talked through what AsyncContext was with Jordan and he said he understands it better now than previously. I focused on how it was used; he said he found the pseudo-implementation confusing (sorry for the bad recommendation there!)\n\nWhen presenting, I recommend you spend a bunch of the time reviewing what the proposal is, somehow in terms a little different from last time, and what the use cases are, before going ahead. The open questions to answer during Stage 2 should probably go faster without dwelling too much.","format":"org.matrix.custom.html","formatted_body":"<p>I talked through what AsyncContext was with Jordan and he said he understands it better now than previously. I focused on how it was used; he said he found the pseudo-implementation confusing (sorry for the bad recommendation there!)</p>\n<p>When presenting, I recommend you spend a bunch of the time reviewing what the proposal is, somehow in terms a little different from last time, and what the use cases are, before going ahead. The open questions to answer during Stage 2 should probably go faster without dwelling too much.</p>","msgtype":"m.text"},"ts":1679542208017,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y3LVg9v7v9p8IY44Nwi_JQSs7CXzioIOv8rROp3Ef5c"},
{"content":{"body":"Maybe we could have a break in the middle to go through the queue and answer questions about what the proposal is and why we want it, before going on","msgtype":"m.text"},"ts":1679542263386,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ee_sNuRvrlOJcC7cq3rwLsvUtbLaMiTjbXQ4DNP9m6c"},
{"content":{"body":"I think this lack of understanding all of the basics is a common pattern in proposals and doesn’t really reflect on the quality of your first presentation, or on Jordan. I heard similar lack of understanding of the motivation for a couple other proposals whose motivation had been extensively discussed.","msgtype":"m.text"},"ts":1679542465179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DU7VEMILQysxDbNQ5m6z13vS7_lbGgfMUwdmDV5UHSY"},
{"content":{"body":"Chengzhong Wu: I added you as an editor of the slide deck, if you want to add some slides on OTEL","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a>: I added you as an editor of the slide deck, if you want to add some slides on OTEL","msgtype":"m.text"},"ts":1679548919317,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$msquYY3zonDsmjfYz34AfuOkSCTJ9j4HORgU1Q5YGIE"},
{"content":{"body":"You can use https://carbon.now.sh/aXSZjJ58QreRZMzMLEfP to generate code images (use 17 lines of code to get optimal size for slides)","msgtype":"m.text"},"ts":1679549001899,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iQnvs1ABy1H6OsYYpvTm0hKzieR3BAYO4yoD57gnXkI"},
{"content":{"body":"I can explain a fair bit of usage and usecases between slides 2 and 3","msgtype":"m.text"},"ts":1679549058867,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oqcAn6ofhiScxP3IepBmG3603vJfJanXlIb-rf8fseY"},
{"content":{"body":"I think having a before and after might be helpful. Eg, normal use code that might be written, and how the code has to change  (or rather doesn’t have to change) if we add OTEL","msgtype":"m.text"},"ts":1679549485589,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rZ-0R0zH4uC2qdEom5S-2hhC8iB1AJIdJzkGendfVzw"},
{"content":{"body":"A bit like the logs example I used in the last deck, user code doesn’t need to be written with telemetry in mind, it just gets added seamlessly","msgtype":"m.text"},"ts":1679549531389,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LY_tHY1IBfskcxZUhi2nvf46xHZKUCyKIO7kzFR8sCg"},
{"content":{"body":"Thanks, I'll add the slides on OTEL","msgtype":"m.text"},"ts":1679551232098,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$smZCUjT6D7Ms7klolArTXUl7qjY2H3mAahXe9AviY0M"},
{"content":{"body":"Note, code images aren’t accessible by themselves but you can fix this by putting the code in the speakers notes","msgtype":"m.text"},"ts":1679555355004,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nzHU5nn5Gv4wOIaGp8nvUU_iPmtr2XaqJK3xQgp52mg"},
{"content":{"body":"I wonder if the presentation should mention this layering question (about whether it should be a web API) and our plan to investigate it (by trying out implementing it in Chrome)","msgtype":"m.text"},"ts":1679585513197,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ljmA58TdMLv6yJ2-7ihx0kTCm5T8LfZeAZ7L8q-Hwf4"},
{"content":{"body":"Chrome has put in a lot of time to articulate that concern, so we should probably speak to it somehow","msgtype":"m.text"},"ts":1679585535277,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dGiiNFjMIrHxu0Rd5FM36H45oFH0wvgJNdvIESVPGAQ"},
{"content":{"body":"(I am happy to explain this part if people want)","msgtype":"m.text"},"ts":1679585546391,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fcRpDzePr5Gk2ZF19FH-7xxUmKIPKrQ533OQEebmh4s"},
{"content":{"body":"whether AsyncContext should be a web API ≠ whether Chrome should implement it as a web API","msgtype":"m.text"},"ts":1679586979526,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$F64zVdHEzkXKOTMzzfUUS7CwVotUQUA37elw6x8YyGk"},
{"content":{"body":"but yeah, it might be good to discuss that as well","msgtype":"m.text"},"ts":1679587004606,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$69pvt6ob3_PfNXNSPV4Tz75EZ_tnAQ7wM6iq99MuwUE"},
{"content":{"body":" * whether AsyncContext should be a web API ≠ whether Chrome (or browsers in general) should implement it as a web API","m.new_content":{"body":"whether AsyncContext should be a web API ≠ whether Chrome (or browsers in general) should implement it as a web API","msgtype":"m.text"},"m.relates_to":{"event_id":"$F64zVdHEzkXKOTMzzfUUS7CwVotUQUA37elw6x8YyGk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679587110931,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fEv6UjxWu8UYgh9XoyFb1eyC4Y3UahP3_Z7mBFsRdbY"},
{"content":{"body":"> <@abotella:igalia.com> whether AsyncContext should be a web API ≠ whether Chrome (or browsers in general) should implement it as a web API\n\nYes, I think this is a good point to make in the presentation as well","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24F64zVdHEzkXKOTMzzfUUS7CwVotUQUA37elw6x8YyGk\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>whether AsyncContext should be a web API ≠ whether Chrome (or browsers in general) should implement it as a web API</blockquote></mx-reply>Yes, I think this is a good point to make in the presentation as well","m.relates_to":{"m.in_reply_to":{"event_id":"$F64zVdHEzkXKOTMzzfUUS7CwVotUQUA37elw6x8YyGk"}},"msgtype":"m.text"},"ts":1679587203090,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xmcGSZ2GmSevn6WNymaRzpgdApfh_dqEi9cp_yMX7Jg"},
{"content":{"body":"But I believe Yoav if he says it is easier for him to implement and expose it as a web API","msgtype":"m.text"},"ts":1679587225860,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vmoQBvxY4T3sBc7grDi0oWdj8VT2_-vyle8hVmqL-M0"},
{"content":{"body":"Slides updated, and I added the code as speaker notes","msgtype":"m.text"},"ts":1679587236606,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$H6cILAhj9lDKxxxXLlL3nUmfaWz_afGI1t4T9BNiawo"},
{"content":{"body":"* But I believe Yoav if he says it is easier *for him* to implement and expose it as a web API","format":"org.matrix.custom.html","formatted_body":"* But I believe Yoav if he says it is easier <em>for him</em> to implement and expose it as a web API","m.new_content":{"body":"But I believe Yoav if he says it is easier *for him* to implement and expose it as a web API","format":"org.matrix.custom.html","formatted_body":"But I believe Yoav if he says it is easier <em>for him</em> to implement and expose it as a web API","msgtype":"m.text"},"m.relates_to":{"event_id":"$vmoQBvxY4T3sBc7grDi0oWdj8VT2_-vyle8hVmqL-M0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679587259903,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qW94NyTkmduTiK2GidzdnOinGk4DlVQCe7f2SJ3Avw4"},
{"content":{"body":"> <@littledan:matrix.org> I wonder if the presentation should mention this layering question (about whether it should be a web API) and our plan to investigate it (by trying out implementing it in Chrome)\n\nI'm going to mention this in my foreword","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ljmA58TdMLv6yJ2-7ihx0kTCm5T8LfZeAZ7L8q-Hwf4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I wonder if the presentation should mention this layering question (about whether it should be a web API) and our plan to investigate it (by trying out implementing it in Chrome)</blockquote></mx-reply>I'm going to mention this in my foreword","m.relates_to":{"m.in_reply_to":{"event_id":"$ljmA58TdMLv6yJ2-7ihx0kTCm5T8LfZeAZ7L8q-Hwf4"}},"msgtype":"m.text"},"ts":1679587297601,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3j_A0DcgqKc1gwO7hNIJv23AND85tuRmPTPt-2-2dmw"},
{"content":{"body":"I for one would prefer seeing this in the language itself","msgtype":"m.text"},"ts":1679589787529,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$yTdi9-G7iAkZMkxevxZbI2OdC_YdyO6XUhe_pyOodyM"},
{"content":{"body":"While I think I'd prefer language level also, I'm sympathetic to the web API approach and it's likely easier for us to implement that way anyway. Specifically, even if it were in the language we'd want v8 to treat it largely as an embedder API anyway to make it easier for us to integrate with other embedder use cases ","msgtype":"m.text"},"ts":1679589997970,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$yALFv0IR6HYx-bOzyD2RrV1H4zQNBPrjPOj_ozTxCwA"},
{"content":{"body":"Could you be more specific about those other embedder use cases?","msgtype":"m.text"},"ts":1679590192537,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xgtQV7FtdTWbDmqlo-sb9MArtmYLuT2HUz-Ch8ojZNI"},
{"content":{"body":"> <@mhofman:matrix.org> I for one would prefer seeing this in the language itself\n\nMaybe this is something you could articulate (with justification) in a queue item after the presentation?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$yTdi9-G7iAkZMkxevxZbI2OdC_YdyO6XUhe_pyOodyM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I for one would prefer seeing this in the language itself</blockquote></mx-reply>Maybe this is something you could articulate (with justification) in a queue item after the presentation?","m.relates_to":{"m.in_reply_to":{"event_id":"$yTdi9-G7iAkZMkxevxZbI2OdC_YdyO6XUhe_pyOodyM"}},"msgtype":"m.text"},"ts":1679590836893,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MmteT7-2Oa7qx2u1bmY9yY9FV7U8gmr8fn8SkaYmZNo"},
{"content":{"body":"> <@jasnell:matrix.org> While I think I'd prefer language level also, I'm sympathetic to the web API approach and it's likely easier for us to implement that way anyway. Specifically, even if it were in the language we'd want v8 to treat it largely as an embedder API anyway to make it easier for us to integrate with other embedder use cases\n\nCould you elaborate on this point? It might feed into the design of the V8 API, to ensure it meets your use cases (if we go that way at all).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$yALFv0IR6HYx-bOzyD2RrV1H4zQNBPrjPOj_ozTxCwA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>While I think I&#39;d prefer language level also, I&#39;m sympathetic to the web API approach and it&#39;s likely easier for us to implement that way anyway. Specifically, even if it were in the language we&#39;d want v8 to treat it largely as an embedder API anyway to make it easier for us to integrate with other embedder use cases </blockquote></mx-reply>Could you elaborate on this point? It might feed into the design of the V8 API, to ensure it meets your use cases (if we go that way at all).","m.relates_to":{"m.in_reply_to":{"event_id":"$yALFv0IR6HYx-bOzyD2RrV1H4zQNBPrjPOj_ozTxCwA"}},"msgtype":"m.text"},"ts":1679590882294,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$69Kv6tB6HJ3nmDf6TG7CI6NoKPU54p2Quh96Uvbv5IE"},
{"content":{"body":"I need to articulate it better, but I think what I'll need is to extend the current API to support capturing both the registering context AND the resolving context, mostly to support join type use case like `Promise.all`.","format":"org.matrix.custom.html","formatted_body":"I need to articulate it better, but I think what I'll need is to extend the current API to support capturing both the registering context AND the resolving context, mostly to support join type use case like <code>Promise.all</code>.","msgtype":"m.text"},"ts":1679591055755,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$30n7eMBUI5fd5lZNBV5Jrb8xzRLb0cxS2U7IG1mGkII"},
{"content":{"body":"> <@mhofman:matrix.org> I need to articulate it better, but I think what I'll need is to extend the current API to support capturing both the registering context AND the resolving context, mostly to support join type use case like `Promise.all`.\n\nhuh, this is a big request; I'm looking forward to you articulating it more.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$30n7eMBUI5fd5lZNBV5Jrb8xzRLb0cxS2U7IG1mGkII?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I need to articulate it better, but I think what I'll need is to extend the current API to support capturing both the registering context AND the resolving context, mostly to support join type use case like <code>Promise.all</code>.</blockquote></mx-reply>huh, this is a big request; I'm looking forward to you articulating it more.","m.relates_to":{"m.in_reply_to":{"event_id":"$30n7eMBUI5fd5lZNBV5Jrb8xzRLb0cxS2U7IG1mGkII"}},"msgtype":"m.text"},"ts":1679591419899,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qSBVR1vdVgyvNPXG1FrElsh4sunY20Xl3MEV-y53z6s"},
{"content":{"body":"I don't believe it's that big, we already need to capture the rejection context for unhandled rejections","msgtype":"m.text"},"ts":1679591495065,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$M4qr7UYWUFeV1oisy_6Q95rPXNJdfds8ic0px-bdPK8"},
{"content":{"body":"when a context is captured, how are we imagining it can be accessed later?","msgtype":"m.text"},"ts":1679591671435,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Az40qwlNUFeu6GaDDoD4rRoMHeMrsLcukpuFMES4JBU"},
{"content":{"body":"maybe it's an `AsyncContext.wrap`-bound function that runs other functions in that bound context?","format":"org.matrix.custom.html","formatted_body":"maybe it's an <code>AsyncContext.wrap</code>-bound function that runs other functions in that bound context?","msgtype":"m.text"},"ts":1679591681611,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$UEdgMgJQaN0jlOoDApx0extdfonKDdajkEaCbxHK6eM"},
{"content":{"body":"I have a sketch I'll try to clean up","msgtype":"m.text"},"ts":1679591711951,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$MjzOa88YU6gAswCDlhrGEFReL6I8CqD5ulyDZeD5jOM"},
{"content":{"body":"are you hoping these registering/resolving contexts will be preserved separately, or merged into one context?","msgtype":"m.text"},"ts":1679591793975,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$nksfGdveyjnl7V2RuuI3t02jTN6NhzlLx5Tj6Wc6Lg0"},
{"content":{"body":"I just need to be able to get the list of my values associated to the different executions if there are multiple. Aka `asyncContext.getAll(): Array<T>`","format":"org.matrix.custom.html","formatted_body":"I just need to be able to get the list of my values associated to the different executions if there are multiple. Aka <code>asyncContext.getAll(): Array&lt;T&gt;</code>","msgtype":"m.text"},"ts":1679591896822,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$2ojYwdiGJgLQl9P23cLI6cN8XdTdSlvRkIuCxoSJchQ"},
{"content":{"body":"that's nice because it lets consuming/application code decide how to merge the multiple values","msgtype":"m.text"},"ts":1679591968557,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$mTIaVHfiesPYwIlLrB-fnh-qDC-2aU2do2WTk6YZe24"},
{"content":{"body":"I don't understand in what situations we'd provide multiple contexts, and how we'd expose them. It seems to complicate what model we should use for embedders. So I'm looking forward to more concreteness and use cases here.","msgtype":"m.text"},"ts":1679592008465,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A"},
{"content":{"body":"Instead of introducing a new API, why can't the context be used with an array of values?","msgtype":"m.text"},"ts":1679592016416,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$t-uxipkjOVPdRT77PFNL8SsqmyrbGunKBCDfwVFvJ70"},
{"content":{"body":"Let's focus right now on what we need to get to Stage 2, and then open this question up more aftewards","msgtype":"m.text"},"ts":1679592034915,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_CnSIrWlmbfKfoa2_Jb33pb7MzKzvj_henCx_XOyAPc"},
{"content":{"body":"`AsyncContext<T>` -> `AsyncContext<T[]>`","format":"org.matrix.custom.html","formatted_body":"<code>AsyncContext&lt;T&gt;</code> -&gt; <code>AsyncContext&lt;T[]&gt;</code>","msgtype":"m.text"},"ts":1679592036771,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$DQM53XvvH_i0A6prT7aBiEDux7eRBp70dIOWyGRgLS0"},
{"content":{"body":"```\nconst p = new Promise(resolve => { asyncContext.run(123, resolve); });\nasyncContext.run(456, () => p.then(() => console.log(...asyncContext.getAll())));\n// Prints 456, 123\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code>const p = new Promise(resolve =&gt; { asyncContext.run(123, resolve); });\nasyncContext.run(456, () =&gt; p.then(() =&gt; console.log(...asyncContext.getAll())));\n// Prints 456, 123\n</code></pre>\n","msgtype":"m.text"},"ts":1679592064332,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o"},
{"content":{"body":"say a function is bound with `AsyncContext.wrap` in one context and then called in another context, where some of the `AsyncContext` values in the two contexts are not the same (a \"merge conflict\" if you will)","format":"org.matrix.custom.html","formatted_body":"say a function is bound with <code>AsyncContext.wrap</code> in one context and then called in another context, where some of the <code>AsyncContext</code> values in the two contexts are not the same (a &quot;merge conflict&quot; if you will)","m.relates_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A","is_falling_back":true,"m.in_reply_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592092287,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6FZsX5P6zHnvrkWROTAZtwU6XRrxDIEdPrhV-zMdH_8"},
{"content":{"body":" * say a function is bound with `AsyncContext.wrap` in one context and then called in another context, where some of the `AsyncContext` values in the two contexts are not the same","format":"org.matrix.custom.html","formatted_body":" * say a function is bound with <code>AsyncContext.wrap</code> in one context and then called in another context, where some of the <code>AsyncContext</code> values in the two contexts are not the same","m.new_content":{"body":"say a function is bound with `AsyncContext.wrap` in one context and then called in another context, where some of the `AsyncContext` values in the two contexts are not the same","format":"org.matrix.custom.html","formatted_body":"say a function is bound with <code>AsyncContext.wrap</code> in one context and then called in another context, where some of the <code>AsyncContext</code> values in the two contexts are not the same","msgtype":"m.text"},"m.relates_to":{"event_id":"$6FZsX5P6zHnvrkWROTAZtwU6XRrxDIEdPrhV-zMdH_8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679592128528,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$frCldwMi1QCAF7vJBF_68Qf5TK2s7WhNhb_hZjJBmPw"},
{"content":{"body":"Yes, I'm not trying to ask to change anything now, but it's something I'd like us to consider at stage 2","msgtype":"m.text"},"ts":1679592158644,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uZU-oeF6s8SFVLDbbPcY14kW8i2IRhghJSTS5L05Zz4"},
{"content":{"body":"I think we've been referring to those as \"snapshots\" or \"maps\", rather than \"contexts\"","m.relates_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A","is_falling_back":true,"m.in_reply_to":{"event_id":"$6FZsX5P6zHnvrkWROTAZtwU6XRrxDIEdPrhV-zMdH_8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592171520,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Hb4LGkDiEYf_ljA8O07LuMBcEibSqILDvLjWyB4kuvc"},
{"content":{"body":"\nOK, good, I'm looking forward to discussing this during Stage 2 once you're able to articulate the motivation","msgtype":"m.text"},"ts":1679592194581,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_gQNF7E8sZxyzOMb4N746buI9QegDB1iRIr_3VJSPZY"},
{"content":{"body":"I'm _all for_ avoiding the naked word \"context\" since it has so many overloads 😅","format":"org.matrix.custom.html","formatted_body":"I'm <em>all for</em> avoiding the naked word &quot;context&quot; since it has so many overloads 😅","m.relates_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A","is_falling_back":true,"m.in_reply_to":{"event_id":"$Hb4LGkDiEYf_ljA8O07LuMBcEibSqILDvLjWyB4kuvc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592200071,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$qJdOZL0JMjUM7rCJ2enxB_AFmVet2kUbJkjBgNiiAYA"},
{"content":{"body":"I like \"snapshots\" here","m.relates_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A","is_falling_back":true,"m.in_reply_to":{"event_id":"$qJdOZL0JMjUM7rCJ2enxB_AFmVet2kUbJkjBgNiiAYA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592221415,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$tY-uftB2B-9T-LKYCYsarLIKHRNn1JhabmBHbNCEfZc"},
{"content":{"body":"maybe we should make, say, monthly AsyncContext calls which would give an easy slot for this discussion","msgtype":"m.text"},"ts":1679592228449,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2jhZvmapbmluIxBbeSeglnhfk2eQ9dSfOR__XBEwGcA"},
{"content":{"body":"The motivation is join like execution flows, of which the prominent example is `Promise.all`","format":"org.matrix.custom.html","formatted_body":"The motivation is join like execution flows, of which the prominent example is <code>Promise.all</code>","msgtype":"m.text"},"ts":1679592233392,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU"},
{"content":{"body":" * I'm all for avoiding the naked word \"context\" since it has so many overloads 😅","format":"org.matrix.custom.html","formatted_body":" * I'm all for avoiding the naked word &quot;context&quot; since it has so many overloads 😅","m.new_content":{"body":"I'm all for avoiding the naked word \"context\" since it has so many overloads 😅","format":"org.matrix.custom.html","formatted_body":"I'm all for avoiding the naked word &quot;context&quot; since it has so many overloads 😅","msgtype":"m.text"},"m.relates_to":{"event_id":"$qJdOZL0JMjUM7rCJ2enxB_AFmVet2kUbJkjBgNiiAYA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679592280364,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$zYHXAIl04jr8Gtz8YZbPsi4W91iFWPBIa0OlfFtihgk"},
{"content":{"body":"It will be good to hear what problem you're trying to solve concretely, just to give an example. But I'm not asking for an answer right now.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592309554,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L-TgzTDDcYspg5jD6OUVeTYtB_kHkHn6GoV_iPbZtAE"},
{"content":{"body":"when you do Promise.all(...).then, the execution context is clear (it's inherited from where Promise.all is called, and has nothing to do with the promises passed into Promise.all)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$L-TgzTDDcYspg5jD6OUVeTYtB_kHkHn6GoV_iPbZtAE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592353758,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xRZ7QplhHWcMNS1hBh4homwdP5Djo7hGtI0GQ14gnwY"},
{"content":{"body":"> <@littledan:matrix.org> maybe we should make, say, monthly AsyncContext calls which would give an easy slot for this discussion\n\n👍 We can establish the regular call after the plenary","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2jhZvmapbmluIxBbeSeglnhfk2eQ9dSfOR__XBEwGcA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>maybe we should make, say, monthly AsyncContext calls which would give an easy slot for this discussion</blockquote></mx-reply>👍 We can establish the regular call after the plenary","m.relates_to":{"m.in_reply_to":{"event_id":"$2jhZvmapbmluIxBbeSeglnhfk2eQ9dSfOR__XBEwGcA"}},"msgtype":"m.text"},"ts":1679592357411,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$O9Vjc58V7tf1kRXs4jlIA1tQefOFL1_UgQblGEssH9U"},
{"content":{"body":"Also, the context that's active when the all'd promise's `resolve()` is invoked is only the last promise item to resolve.","format":"org.matrix.custom.html","formatted_body":"Also, the context that's active when the all'd promise's <code>resolve()</code> is invoked is only the last promise item to resolve.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$xRZ7QplhHWcMNS1hBh4homwdP5Djo7hGtI0GQ14gnwY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592420182,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WeZec172lSfloPWOjaI97SyRJaUgqQ_OvqPEouA-zFE"},
{"content":{"body":"Sure but this is also not used in the `.then`","format":"org.matrix.custom.html","formatted_body":"Sure but this is also not used in the <code>.then</code>","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$WeZec172lSfloPWOjaI97SyRJaUgqQ_OvqPEouA-zFE"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592446022,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QElRAAFyjTVbAouqWPVbkqhVrh3hb6FA_vfpIUJbreU"},
{"content":{"body":"ongoing/open question: what is the best data structure to represent the snapshots?","m.relates_to":{"event_id":"$M8U7xbl5h0HsBzMV8u5mtRs9TPGMoEce5KWgjVUUJ3A","is_falling_back":true,"m.in_reply_to":{"event_id":"$tY-uftB2B-9T-LKYCYsarLIKHRNn1JhabmBHbNCEfZc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592460736,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Lkzb4BI_xVZBe-_0Q6be4k2VCh-pbIqBuC8xN0rs9b8"},
{"content":{"body":"Right, I said it's the most obvious case, but basically it boils down to I need to learn the data associated with the context that resolved the promise","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$QElRAAFyjTVbAouqWPVbkqhVrh3hb6FA_vfpIUJbreU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592486893,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Etpcz8wEvpD5BuPVdvU-rpDxxfc0GSXu7U5PcJmEiMc"},
{"content":{"body":"Yeah, I just am missing how this applies at all. So I'm looking forward to an example application, maybe just concretely what motivates you to start thinking about this (even if that's not a relevant motivation for everyone)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$Etpcz8wEvpD5BuPVdvU-rpDxxfc0GSXu7U5PcJmEiMc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592534860,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YCxsi9sVmCyjfA69XLS5vTpnMSNbB4FkRtjmx252cf8"},
{"content":{"body":"I'm actually surprised no one wants this. It's invaluable for diagnostics to understand the 2 causality paths on how you got where you are. Sure the registration path is often the most important, but the resolving path is also relevant.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$YCxsi9sVmCyjfA69XLS5vTpnMSNbB4FkRtjmx252cf8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592685856,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XgYgsIedSv8As_jC78CI5doooo0aAkFF0jd_oPnzag8"},
{"content":{"body":"OK, good, we're getting concrete: diagnostics.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$XgYgsIedSv8As_jC78CI5doooo0aAkFF0jd_oPnzag8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592725609,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GbB513wIGwmIN8ODUSBchhNjmhgk-EE1QpqBA5B_SFY"},
{"content":{"body":"That is one of my use cases yes","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$GbB513wIGwmIN8ODUSBchhNjmhgk-EE1QpqBA5B_SFY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592746152,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$0k8SvkQu2fsk3hqOZpb5cLG9uq6stcJ-yrIJ5Bmc57U"},
{"content":{"body":"OK, looking forward to the writeup giving the set of your use cases; sorry for the distraction from Shu's presentation.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$0k8SvkQu2fsk3hqOZpb5cLG9uq6stcJ-yrIJ5Bmc57U"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592778473,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uxWCP4mWgeSZEHwcvGkN24GC6w_prUzlHrErpjg6esM"},
{"content":{"body":"I think I share/want this use case, though I need more details for alignment","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$uxWCP4mWgeSZEHwcvGkN24GC6w_prUzlHrErpjg6esM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592829161,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$GiyoPt6Yjes1BiH37AJZwPpONoC7Ft4dnLAx3HLypIQ"},
{"content":{"body":"looking forward to digging into use cases during stage 2","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$GiyoPt6Yjes1BiH37AJZwPpONoC7Ft4dnLAx3HLypIQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592841392,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$p31hQdvww9e1FAYsGaxY_KprJnoEAfs4N7lxQZrmrh4"},
{"content":{"body":"This feels like something which shouldn't be shared to me? I don't expect that resolving a promise exposes anything to consumers of the promise except the value of the promise","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$p31hQdvww9e1FAYsGaxY_KprJnoEAfs4N7lxQZrmrh4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592860812,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$pdNbPh5Duxp0x2aYz5FHeNiP8rfY3OwJk4xUxO_NXEQ"},
{"content":{"body":"the async context which I was in when I did the resolving isn't theirs to see, it's mine","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$pdNbPh5Duxp0x2aYz5FHeNiP8rfY3OwJk4xUxO_NXEQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592875899,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ByHV3itwnj4nFB9E7N_7Tj153dEvUtoNSGYmTSJxFdk"},
{"content":{"body":"(My intuition matches bakkot's. I'm really baffled by this whole thread. That's why I'm asking for the motivation.)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$ByHV3itwnj4nFB9E7N_7Tj153dEvUtoNSGYmTSJxFdk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592893301,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fLZRokAOL95hWm-u2_2rjgTNR9tOEcdmD4-o1aeGsU4"},
{"content":{"body":"to clarify, you can only learn information if you associated a value through your own `asyncContext.run` ","format":"org.matrix.custom.html","formatted_body":"to clarify, you can only learn information if you associated a value through your own <code>asyncContext.run</code>","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$fLZRokAOL95hWm-u2_2rjgTNR9tOEcdmD4-o1aeGsU4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592926463,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$lyEABnbX6EEQfEfJMpHcg1W1vm4NX2iVs-v6qX3IL9c"},
{"content":{"body":"my general motivation is that it should be feasible/cheap to keep around (potentially many) snapshots of past context, so you can inspect them for diagnostic purposes later (in development, especially)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$lyEABnbX6EEQfEfJMpHcg1W1vm4NX2iVs-v6qX3IL9c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592966912,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$wdq4zxfRnyVFnkL9gylhQ1fLpvN7w_SqlJhiWWZljPI"},
{"content":{"body":"`wrap` is the capability to snapshot contexts","format":"org.matrix.custom.html","formatted_body":"<code>wrap</code> is the capability to snapshot contexts","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$wdq4zxfRnyVFnkL9gylhQ1fLpvN7w_SqlJhiWWZljPI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679592999986,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$U692Vzf6sFTBUEz2qRy6uYDfNtxnsMafYFsPEOfea7k"},
{"content":{"body":"I'm not sure exactly what snapshots should be preserved/exposed/reported for promises specifically","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$U692Vzf6sFTBUEz2qRy6uYDfNtxnsMafYFsPEOfea7k"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593002050,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$y7sBD2dBd_Nt2e1bSDoZP3ksG_V-w6R4Q-pfnA68IV0"},
{"content":{"body":"you might not want to allocate a function for every snapshot you capture?","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$y7sBD2dBd_Nt2e1bSDoZP3ksG_V-w6R4Q-pfnA68IV0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593030671,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$eynhGAQwpggwfi_lxymIn_9zMs2e9E_wExVHItTBTTY"},
{"content":{"body":"It's frequently been posited that `wrap` may be less efficient than something like AsyncResource. I think this is something we should investigate in the context of an actual implementation during Stage 2.","format":"org.matrix.custom.html","formatted_body":"It's frequently been posited that <code>wrap</code> may be less efficient than something like AsyncResource. I think this is something we should investigate in the context of an actual implementation during Stage 2.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$eynhGAQwpggwfi_lxymIn_9zMs2e9E_wExVHItTBTTY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593063758,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$42VofLN1nXHPT6fC-sNs7Ema3t5zY8GE6jByzXjpZt8"},
{"content":{"body":" * I'm less opinionated about exactly which snapshots should be preserved/exposed/reported for promises","format":"org.matrix.custom.html","formatted_body":" * I'm less opinionated about exactly which snapshots should be preserved/exposed/reported for promises","m.new_content":{"body":"I'm less opinionated about exactly which snapshots should be preserved/exposed/reported for promises","format":"org.matrix.custom.html","formatted_body":"I'm less opinionated about exactly which snapshots should be preserved/exposed/reported for promises","msgtype":"m.text"},"m.relates_to":{"event_id":"$y7sBD2dBd_Nt2e1bSDoZP3ksG_V-w6R4Q-pfnA68IV0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679593064844,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$iMsoxPaPpu-ZFs_AeQMMIsrzkVEYbVwAdV_fQQcQOZY"},
{"content":{"body":"It's clear that whatever mechanism we adopt here has to be \"efficient enough\"","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$42VofLN1nXHPT6fC-sNs7Ema3t5zY8GE6jByzXjpZt8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593074903,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XTQuRSHKPpWD7z5vpkdJu5didjfV8FgNf2d3F-Ai48g"},
{"content":{"body":"this still doesn't seem to relate to the idea of multiple inheritance of AsyncContext stuff","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$XTQuRSHKPpWD7z5vpkdJu5didjfV8FgNf2d3F-Ai48g"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593111341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T3uMPMsGTgLZtVBNQuIv1FsOF52OYyRa9_Rc7LI5Frw"},
{"content":{"body":"> <@littledan:matrix.org> It's frequently been posited that `wrap` may be less efficient than something like AsyncResource. I think this is something we should investigate in the context of an actual implementation during Stage 2.\n\nto be clear, I mean: if `wrap` is too inefficient, then we should definitely switch to a different API, maybe one more shaped like AsyncResource.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$42VofLN1nXHPT6fC-sNs7Ema3t5zY8GE6jByzXjpZt8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It's frequently been posited that <code>wrap</code> may be less efficient than something like AsyncResource. I think this is something we should investigate in the context of an actual implementation during Stage 2.</blockquote></mx-reply>to be clear, I mean: if <code>wrap</code> is too inefficient, then we should definitely switch to a different API, maybe one more shaped like AsyncResource.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":false,"m.in_reply_to":{"event_id":"$42VofLN1nXHPT6fC-sNs7Ema3t5zY8GE6jByzXjpZt8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593179217,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UKZecCnRogl0yzGOpM1TejGQFSJmLNrSTdrMXvi8Fbk"},
{"content":{"body":"Mathieu Hofman [moving off thread for readability]: also if you want to pass data from the promise-resolver to the consumer-of-the-resolved-promise, you can just... stick it in the promise? that seems like a very very different thing than the async contexts proposal","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> [moving off thread for readability]: also if you want to pass data from the promise-resolver to the consumer-of-the-resolved-promise, you can just... stick it in the promise? that seems like a very very different thing than the async contexts proposal","msgtype":"m.text"},"ts":1679593207185,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cX37lMM_S3B6LGx5cBJ4u1hH40oa5iTFLeoRPyAznI8"},
{"content":{"body":"I think there are some other valid critiques of `wrap`, but it's possible to build many of the patterns you might want in userland, using only the current proposal","format":"org.matrix.custom.html","formatted_body":"I think there are some other valid critiques of <code>wrap</code>, but it's possible to build many of the patterns you might want in userland, using only the current proposal","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$UKZecCnRogl0yzGOpM1TejGQFSJmLNrSTdrMXvi8Fbk"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593226711,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$ZiVvGgBikUZu2AKSYgSqOEMTkyyWZRXOu3nA0FR4xc0"},
{"content":{"body":"I agree, I think the promise should be responsible for passing data","msgtype":"m.text"},"ts":1679593259361,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KIVqtQOIRMCyrWRkmk_bxsiUjE188fmf2MSc6VHE7ko"},
{"content":{"body":"I do not control intermediary code that creates and resolved these promises","m.relates_to":{"event_id":"$cX37lMM_S3B6LGx5cBJ4u1hH40oa5iTFLeoRPyAznI8","is_falling_back":true,"m.in_reply_to":{"event_id":"$cX37lMM_S3B6LGx5cBJ4u1hH40oa5iTFLeoRPyAznI8"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593265205,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$jjp0h1QWpYOPP0hRTWq3IHf5IriwfIARMewWEeqSBuY"},
{"content":{"body":"> <@benjamn:matrix.org> you might not want to allocate a function for every snapshot you capture?\n\nyeah I was specifically responding to this: you can't rebuild performance in JS","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$eynhGAQwpggwfi_lxymIn_9zMs2e9E_wExVHItTBTTY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>you might not want to allocate a function for every snapshot you capture?</blockquote></mx-reply>yeah I was specifically responding to this: you can't rebuild performance in JS","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":false,"m.in_reply_to":{"event_id":"$eynhGAQwpggwfi_lxymIn_9zMs2e9E_wExVHItTBTTY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593267870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tEGVuOwA7qCa1ykm_42DU4_ffWcDZc9OCllTrtlGL40"},
{"content":{"body":" * I do not control intermediary code that creates and resolves these promises","format":"org.matrix.custom.html","formatted_body":" * I do not control intermediary code that creates and resolves these promises","m.new_content":{"body":"I do not control intermediary code that creates and resolves these promises","format":"org.matrix.custom.html","formatted_body":"I do not control intermediary code that creates and resolves these promises","msgtype":"m.text"},"m.relates_to":{"event_id":"$jjp0h1QWpYOPP0hRTWq3IHf5IriwfIARMewWEeqSBuY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679593275276,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hvc1nPfixZI1qg-nAMA8QEj5uFGDMl8g5gfvV2SoByY"},
{"content":{"body":"but `wrap` captures the expressiveness of snapshotting","format":"org.matrix.custom.html","formatted_body":"but <code>wrap</code> captures the expressiveness of snapshotting","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$tEGVuOwA7qCa1ykm_42DU4_ffWcDZc9OCllTrtlGL40"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593284094,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8xzBEzR-qY6r9gfjbVvpS2eLR4q4nn7LBsTDOAJAPHU"},
{"content":{"body":"Hence I cannot pass data throughout","m.relates_to":{"event_id":"$cX37lMM_S3B6LGx5cBJ4u1hH40oa5iTFLeoRPyAznI8","is_falling_back":true,"m.in_reply_to":{"event_id":"$jjp0h1QWpYOPP0hRTWq3IHf5IriwfIARMewWEeqSBuY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593286227,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$qFCZPfw_e01MEt_LqtzEjC0FLK2O4wnvm3CrXv1VvcI"},
{"content":{"body":"And in most cases, because you own the `AsyncContext` that you invoked `.run()` on, it should be possible for you to chain onto the promise and pass the value","format":"org.matrix.custom.html","formatted_body":"And in most cases, because you own the <code>AsyncContext</code> that you invoked <code>.run()</code> on, it should be possible for you to chain onto the promise and pass the value","msgtype":"m.text"},"ts":1679593292712,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iXCt90a6GUtMYK4Pg87NVYZIpnrhfjrhX_E64WbL9SE"},
{"content":{"body":"That's what async context is for in the first place","m.relates_to":{"event_id":"$cX37lMM_S3B6LGx5cBJ4u1hH40oa5iTFLeoRPyAznI8","is_falling_back":true,"m.in_reply_to":{"event_id":"$qFCZPfw_e01MEt_LqtzEjC0FLK2O4wnvm3CrXv1VvcI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593295012,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mgTbXwEGOVrPLR1ExuZpnH7xE9_PMIBkXXbpclICkFU"},
{"content":{"body":"wouldn't async context Just Work for what mathieu's talking about tho? shouldn't every promise spun off of \"one that has the context\" also have it?","msgtype":"m.text"},"ts":1679593311640,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$RMHbSHMk0aKWjyCSq8_9D1CiWJ5oLe_tAVRjwZXcjBg"},
{"content":{"body":"As I mention in the thread, I do no control intermediary promises ","msgtype":"m.text"},"ts":1679593320042,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4Jq_ABc-kcxXF3m3H6z8gaswrXzvhiYRkonMgE1i3H4"},
{"content":{"body":" * As I mention in the thread, I do not control intermediary promises ","m.new_content":{"body":"As I mention in the thread, I do not control intermediary promises ","msgtype":"m.text"},"m.relates_to":{"event_id":"$4Jq_ABc-kcxXF3m3H6z8gaswrXzvhiYRkonMgE1i3H4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679593334303,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XxSCGB-dEyI59s25UQVCtRUnbsLuHy7NpnjwgOSqBIo"},
{"content":{"body":"i'd assume that \"adopting the state of another promise\" also adopts/merges its context map or whatever the term is","msgtype":"m.text"},"ts":1679593340920,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$xTMh6z_rzNYHciyCb_WoEkYRLskmemx9zEeQfDxAm2U"},
{"content":{"body":"No, but you control the promise as it's returned from your `.run()`","format":"org.matrix.custom.html","formatted_body":"No, but you control the promise as it's returned from your <code>.run()</code>","msgtype":"m.text"},"ts":1679593342539,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KTjMHmf4zQLDdwHgap38xiv4J8bcUjQ9nLEy1EDydwg"},
{"content":{"body":"You're assuming the promise returned by run is related?","msgtype":"m.text"},"ts":1679593377517,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8n-armvxPYVmiu4sn9DOO8WkY9Zw0DCABGCWBY6bP2w"},
{"content":{"body":"another issue is that `wrap` always ignores the current calling context of the function, when you might potentially want to merge the originally bound snapshot with the calling snapshot","format":"org.matrix.custom.html","formatted_body":"another issue is that <code>wrap</code> always ignores the current calling context of the function, when you might potentially want to merge the originally bound snapshot with the calling snapshot","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$8xzBEzR-qY6r9gfjbVvpS2eLR4q4nn7LBsTDOAJAPHU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593391258,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$K7yjp7FZBxg13I1_PX2UHkx7x-Nsq_9ECJBTGbTAems"},
{"content":{"body":"Yes? If it doesn't escape the run, then the context should be whatever is currently in the context.","msgtype":"m.text"},"ts":1679593414246,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TnDOgyIVDNi6nLbdcV6bUOtlKJQATKb01jGQ_Oo7Dxk"},
{"content":{"body":"`run` creates an execution flow. the program can store / share promises of their own creation between flows","format":"org.matrix.custom.html","formatted_body":"<code>run</code> creates an execution flow. the program can store / share promises of their own creation between flows","msgtype":"m.text"},"ts":1679593426832,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4naF_3bC5DdADEwQiY7VlnnvJkStdgiHrF9pbvT1twU"},
{"content":{"body":"If it does escape the run, then you control it.","msgtype":"m.text"},"ts":1679593428475,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iNO_N1lePHV9iDmffvBP9U5qzuL-ByairdXSWY8ACEs"},
{"content":{"body":"yeah, this is what I'd like to understand better: the use cases for merging. E.g., do you need to merge over all variables, or just one or two that you're thinking about.","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$K7yjp7FZBxg13I1_PX2UHkx7x-Nsq_9ECJBTGbTAems"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593442092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lCDEd3gFYQle07EGVg2yh6VzgRUfl_zMbX35gxizPfY"},
{"content":{"body":"I don't control promises resolved from that promise","msgtype":"m.text"},"ts":1679593494192,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oEn_EZ3MwFBho15CZ_DFtxR3UU5BB0kctFvplYRUIoQ"},
{"content":{"body":"This discussion is just too abstract for me to understand it. Let's pause and continue once we have this written example, as Mathieu Hofman has already promised.","format":"org.matrix.custom.html","formatted_body":"This discussion is just too abstract for me to understand it. Let's pause and continue once we have this written example, as <a href=\"https://matrix.to/#/@mhofman:matrix.org\">Mathieu Hofman</a> has already promised.","msgtype":"m.text"},"ts":1679593535906,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n7He0jv8JeXwLhJQe0Lj0FvUzplDnOXJsseFoI8ffnI"},
{"content":{"body":"I'm baffled by the request to explicitly attach information to promises given the whole premise of this proposal is based on the fact it's pretty much impossible to do that when you don't control the program","msgtype":"m.text"},"ts":1679593552816,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$QpXrQ3evy47y_MVerHQl-wcjRN9bPmWkeM7e4Sbxyjw"},
{"content":{"body":"This \"merging\" is exactly what I have in mind","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$lCDEd3gFYQle07EGVg2yh6VzgRUfl_zMbX35gxizPfY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593729648,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$OAoghchM2AiPkkiEY7EENWy7asZUv12VM9smnpk4d2c"},
{"content":{"body":"I'm hoping it's the latter, so merging can be cheap","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$OAoghchM2AiPkkiEY7EENWy7asZUv12VM9smnpk4d2c"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593735067,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$SyX8a_j5CrJqhrmzuvidswtRM0-QtHK8MN4tYE8TojI"},
{"content":{"body":"(I just still don't understand what's being discussed)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$SyX8a_j5CrJqhrmzuvidswtRM0-QtHK8MN4tYE8TojI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593747885,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pXBp8GieMSQTk38i0iAX1NjfgzYzRBWwCphs53NVNkc"},
{"content":{"body":"if the merge is lazy, so the system does not have to eagerly merge all the variables up-front, you could potentially wait to see which variables are accessed, and resolve merge conflicts then","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$pXBp8GieMSQTk38i0iAX1NjfgzYzRBWwCphs53NVNkc"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593749110,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$yM39dzmYRLTpszIWBw_Xr_Mwic4opPQby2HsouaIiyA"},
{"content":{"body":"(yeah still confused; looking forward to concrete applications)","m.relates_to":{"event_id":"$eG8kKsg6p8Yp82q3k-7cSdaoHDln4yz-rQ7hpqGaRbU","is_falling_back":true,"m.in_reply_to":{"event_id":"$yM39dzmYRLTpszIWBw_Xr_Mwic4opPQby2HsouaIiyA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679593943526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$18OC6fSJdvrPMzrwcPRVI7KisVRepkLJiM3ks60qf0E"},
{"content":{"body":"I guess basically my thought process is:\n- if it's a promise you make/resolve yourself, you can thread state through\n- if it's not, the person doing the resolving isn't expecting to give the consumer any information other than the promise value itself; promises are supposed to be dumb wrappers for values\n\nmaybe I'm missing something because we don't have a concrete example in front of us though.","format":"org.matrix.custom.html","formatted_body":"<p>I guess basically my thought process is:</p>\n<ul>\n<li>if it's a promise you make/resolve yourself, you can thread state through</li>\n<li>if it's not, the person doing the resolving isn't expecting to give the consumer any information other than the promise value itself; promises are supposed to be dumb wrappers for values</li>\n</ul>\n<p>maybe I'm missing something because we don't have a concrete example in front of us though.</p>\n","msgtype":"m.text"},"ts":1679594336179,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$I67NTepbDofpk6hf43vFuTI8NIIkvF8wJOk_tdjCRww"},
{"content":{"body":"right but isn't the point of asynccontext that the person doing the resolving doesn't have to *know* to pass stuff down, it's just ambiently available as long as you have the key?","format":"org.matrix.custom.html","formatted_body":"right but isn't the point of asynccontext that the person doing the resolving doesn't have to <em>know</em> to pass stuff down, it's just ambiently available as long as you have the key?","msgtype":"m.text"},"ts":1679594609266,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9gUXCjQWsw-ZvJ2wRQDWxLLONacbQWKgVwrL0Dlf98A"},
{"content":{"body":"in react, context's entire purpose is to replace prop drilling in a way that still avoids globals by requiring the context key, and this seems similar to me","msgtype":"m.text"},"ts":1679594640753,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$eIhTht7hB27QTBOKTynjoHc_-M3MXaEWgL7b1t8KX-k"},
{"content":{"body":"the thing which gets passed down is created when you create the callback, not when you resolve the promise","msgtype":"m.text"},"ts":1679595020743,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xxHhF6fK_uvE0pJKIMXEPs7B0wK2Yr8XbCpiAjPWHfk"},
{"content":{"body":"capturing state when you resolve the promise is a very different thing than capturing state when you create the callback","msgtype":"m.text"},"ts":1679595047699,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-Ms2oMqD0dYOu-DdhsTG-1iJMvTJyBpjYRtYhv9hn68"},
{"content":{"body":"though again hard to talk about without something concrete","msgtype":"m.text"},"ts":1679595074953,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$89UbIsJehUTUhwTWuZd4jx7scGWj9D33nL91wjP-u6A"},
{"content":{"body":"+1 for a description (like symbols have)","msgtype":"m.text"},"ts":1679596098681,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s7eANGbGPXAkbGX2TrkW4Wj00nlwdu3BTHUeKGGaS5I"},
{"content":{"body":"default value could be a getter method - so there could be a choice to either return a value, or throw a customized Error","msgtype":"m.text"},"ts":1679596140282,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$_uJGPscx7gS5Ydzg_rfpMunzeGo-43coqKRbpwG9ACE"},
{"content":{"body":"> <@phryneas:matrix.org> default value could be a getter method - so there could be a choice to either return a value, or throw a customized Error\n\n+1, this can avoid unexpected modification on the default values somehow","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_uJGPscx7gS5Ydzg_rfpMunzeGo-43coqKRbpwG9ACE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@phryneas:matrix.org\">@phryneas:matrix.org</a><br>default value could be a getter method - so there could be a choice to either return a value, or throw a customized Error</blockquote></mx-reply>+1, this can avoid unexpected modification on the default values somehow","m.relates_to":{"m.in_reply_to":{"event_id":"$_uJGPscx7gS5Ydzg_rfpMunzeGo-43coqKRbpwG9ACE"}},"msgtype":"m.text"},"ts":1679597005474,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$F6IC2aMlMe7ukdFO406KGdxV9zzfhQcbPJXajKovI0c"},
{"content":{"body":"while `defaultValue` is super convenient, you could implement a subclass of `AsyncContext` that takes a `defaultValue` in the constructor and overrides the `get` method to return that default","format":"org.matrix.custom.html","formatted_body":"while <code>defaultValue</code> is super convenient, you could implement a subclass of <code>AsyncContext</code> that takes a <code>defaultValue</code> in the constructor and overrides the <code>get</code> method to return that default","msgtype":"m.text"},"ts":1679597145036,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$HX7VpYJC2iII9jHPD1-OJ4OjvBGTPcvD8DNMeC8msII"},
{"content":{"body":"true.","msgtype":"m.text"},"ts":1679597243331,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$tg-fUWTOe5K9wTZ6jyDM4YalSYuJfbUJQruNUi3QQyU"},
{"content":{"body":"eek... I'm not sure I'm a fan of this at all, especially with the values being just an array like this. It also greatly complicates the implementation which currently allows each context frame to be independent of all others, including the frames they inherited from","m.relates_to":{"event_id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o","is_falling_back":true,"m.in_reply_to":{"event_id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679597254739,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$CCQKuTwYJj5cRr0RsRwudvhdYm5BfAXcefBGJjPM1Co"},
{"content":{"body":"ljharb: agreed it needs to be easy, but I also believe we need ways of opting out (which `snapshot()` and `wrap()` help with).","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: agreed it needs to be easy, but I also believe we need ways of opting out (which <code>snapshot()</code> and <code>wrap()</code> help with).","msgtype":"m.text"},"ts":1679598761447,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9I-I28KY2yO3Q8FT9HZdwRoaMkJqIUQoqKslbpbVrgM"},
{"content":{"body":"congrats on stage 2!! 🥳","msgtype":"m.text"},"ts":1679598878533,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$cGFYPKw4FEcFkJli3tn7JnhH410ePEgTklbhAdTYw4c"},
{"content":{"body":"Yay congrats!!!","msgtype":"m.text"},"ts":1679598957597,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$oJSRXn20Qo6ggzBkZsvMC6qTTW-j2ikZ0frRPGrV2Ww"},
{"content":{"body":"The next steps for next meeting are clear: Focus completely on use cases","msgtype":"m.text"},"ts":1679598969903,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DPA4mnWsYfpZ6d8YlDG_DRIqgqxmBBc1bJRjrSLB26g"},
{"content":{"body":"🎉","msgtype":"m.text"},"ts":1679598979566,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$3i6SpYX_FM2GRMp0cB1tOpzunjr-941gufMlJt-hVZI"},
{"content":{"body":"> <@rbuckton:matrix.org> ljharb: agreed it needs to be easy, but I also believe we need ways of opting out (which `snapshot()` and `wrap()` help with).\n\ntotally agree; i'd prefer the default be \"include everything\" and the methods to be for opting out","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$9I-I28KY2yO3Q8FT9HZdwRoaMkJqIUQoqKslbpbVrgM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br><a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: agreed it needs to be easy, but I also believe we need ways of opting out (which <code>snapshot()</code> and <code>wrap()</code> help with).</blockquote></mx-reply>totally agree; i'd prefer the default be &quot;include everything&quot; and the methods to be for opting out","m.relates_to":{"m.in_reply_to":{"event_id":"$9I-I28KY2yO3Q8FT9HZdwRoaMkJqIUQoqKslbpbVrgM"}},"msgtype":"m.text"},"ts":1679598993078,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$582iQWj8FBO0x9aF3wH6E-4KxqXpzaCqil9l6FITV9E"},
{"content":{"body":"In our new regular meetings, we can dig down towards proposed answers to the many questions Justin explained. I think we demonstrated to committee that we are looking into details, but I think we should be proposing answers at the same time as we explain the issues.","msgtype":"m.text"},"ts":1679599010275,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gL1ydKxq_PvyIlUiZ06F95RZEyeRUWsi1N35xd0_MzI"},
{"content":{"body":"so some time *later* than next meeting (where we focus on use cases) we can present details on those.","format":"org.matrix.custom.html","formatted_body":"so some time <em>later</em> than next meeting (where we focus on use cases) we can present details on those.","msgtype":"m.text"},"ts":1679599027709,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ciweU_o_bmLiCKfmmwJvPX4SfBI0yYHrC7qsWTc75Lo"},
{"content":{"body":"If someone really wanted multiple values like this they could easily do something like this with the current API...\n\n```\nconst ac = new AsyncContext();\nac.run([], () => {\n  const p = new Promise(resolve => {\n    ac.get().unshift(123);\n    resolve();\n  });\n  ac.get().unshift(456);\n  await p;\n  console.log(ac.get()); // 456, 123\n});\n```","format":"org.matrix.custom.html","formatted_body":"<p>If someone really wanted multiple values like this they could easily do something like this with the current API...</p>\n<pre><code>const ac = new AsyncContext();\nac.run([], () =&gt; {\n  const p = new Promise(resolve =&gt; {\n    ac.get().unshift(123);\n    resolve();\n  });\n  ac.get().unshift(456);\n  await p;\n  console.log(ac.get()); // 456, 123\n});\n</code></pre>\n","m.relates_to":{"event_id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o","is_falling_back":true,"m.in_reply_to":{"event_id":"$CCQKuTwYJj5cRr0RsRwudvhdYm5BfAXcefBGJjPM1Co"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679599644559,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$vg5Txin2QAbpk_kJn_0b7NIme1I-HCKt4gc09Is2eQQ"},
{"content":{"body":"I do not control the sites where resolve is called, my example was an simplification","m.relates_to":{"event_id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o","is_falling_back":true,"m.in_reply_to":{"event_id":"$vg5Txin2QAbpk_kJn_0b7NIme1I-HCKt4gc09Is2eQQ"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679600091227,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$KWEbOpYrxka2B_Xxd3Ohtz_TNIHuUvrLQZ-53b2LiNI"},
{"content":{"body":"aka the `run` call is where I invoke the user program, which can do all sorts of things with promises. The important part is that the program will be invoked with different `run` contexts, and is thus able to \"join\" these. When they call back into my supervisor, I need to be able to look up all the associated run values, not just one (which usually would be the last in a join)","format":"org.matrix.custom.html","formatted_body":"aka the <code>run</code> call is where I invoke the user program, which can do all sorts of things with promises. The important part is that the program will be invoked with different <code>run</code> contexts, and is thus able to &quot;join&quot; these. When they call back into my supervisor, I need to be able to look up all the associated run values, not just one (which usually would be the last in a join)","m.relates_to":{"event_id":"$0_99Urcw1-7V9pqK5fiQwOqQWmCem1dT6GzinSsmO0o","is_falling_back":true,"m.in_reply_to":{"event_id":"$KWEbOpYrxka2B_Xxd3Ohtz_TNIHuUvrLQZ-53b2LiNI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679600324082,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$8mGz6LDV1jfzztmtW_Nswa6nFNGKSTUE2hfG4Jwmqqc"},
{"content":{"body":"> <@ljharb:matrix.org> totally agree; i'd prefer the default be \"include everything\" and the methods to be for opting out\n\nI don't think \"capture context at declaration\" makes sense. At some point you will execute the function, and you want to use the current context to do it. If you want to capture the context at the time of declaration, that's what `wrap()` is for.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$582iQWj8FBO0x9aF3wH6E-4KxqXpzaCqil9l6FITV9E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>totally agree; i'd prefer the default be \"include everything\" and the methods to be for opting out</blockquote></mx-reply>I don't think &quot;capture context at declaration&quot; makes sense. At some point you will execute the function, and you want to use the current context to do it. If you want to capture the context at the time of declaration, that's what <code>wrap()</code> is for.","m.relates_to":{"m.in_reply_to":{"event_id":"$582iQWj8FBO0x9aF3wH6E-4KxqXpzaCqil9l6FITV9E"}},"msgtype":"m.text"},"ts":1679600363402,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CJrDhSNylgBcKlClIG6Jdok-A1-KKiyc6zvqVH07PwU"},
{"content":{"body":"\"capture context at declaration\" would also make `snapshot` completely useless. One of the benefits of `snapshot()` is that you can capture a \"clean/empty\" environment from which to start fresh, much like how some code today captures primordials early. ","format":"org.matrix.custom.html","formatted_body":"&quot;capture context at declaration&quot; would also make <code>snapshot</code> completely useless. One of the benefits of <code>snapshot()</code> is that you can capture a &quot;clean/empty&quot; environment from which to start fresh, much like how some code today captures primordials early.","msgtype":"m.text"},"ts":1679600469848,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$_CH3FCIjsNq5HIhUySno72hGMRTn8l_FUqLa4UTKA3E"},
{"content":{"body":"Unless I am misunderstanding your point about capturing context","msgtype":"m.text"},"ts":1679601021441,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3kaTNoyUX8eOJmgGbKceuc9lI0OoldYqU62HtZj9Bbc"},
{"content":{"body":"i mean like, `arr.map(() => { /* context should be available here no matter when or where this function is called */ })`","format":"org.matrix.custom.html","formatted_body":"i mean like, <code>arr.map(() =&gt; { /* context should be available here no matter when or where this function is called */ })</code>","msgtype":"m.text"},"ts":1679601638338,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$P5rjiHTi0azMN7wlSw7ryqgwKmPGPDy0ug5eVpx3dHY"},
{"content":{"body":" * i mean like, `arr.map(() => { /* context should be available here no matter when or where this function is called */ })` or replace `arr.map(` with `someAPI(`","format":"org.matrix.custom.html","formatted_body":" * i mean like, <code>arr.map(() =&gt; { /* context should be available here no matter when or where this function is called */ })</code> or replace <code>arr.map(</code> with <code>someAPI(</code>","m.new_content":{"body":"i mean like, `arr.map(() => { /* context should be available here no matter when or where this function is called */ })` or replace `arr.map(` with `someAPI(`","format":"org.matrix.custom.html","formatted_body":"i mean like, <code>arr.map(() =&gt; { /* context should be available here no matter when or where this function is called */ })</code> or replace <code>arr.map(</code> with <code>someAPI(</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$P5rjiHTi0azMN7wlSw7ryqgwKmPGPDy0ug5eVpx3dHY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679601689745,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$D7RlKYJvBsiJGzZU8aTJBiiXdFSjKxjf4E6vAWkAco8"},
{"content":{"body":"> <@rbuckton:matrix.org> \"capture context at declaration\" would also make `snapshot` completely useless. One of the benefits of `snapshot()` is that you can capture a \"clean/empty\" environment from which to start fresh, much like how some code today captures primordials early.\n\nIndeed. Something that people might be missing is, the innermost time setting the context \"wins\". So if all closures captured the context, there'd be no overriding it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_CH3FCIjsNq5HIhUySno72hGMRTn8l_FUqLa4UTKA3E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>\"capture context at declaration\" would also make <code>snapshot</code> completely useless. One of the benefits of <code>snapshot()</code> is that you can capture a \"clean/empty\" environment from which to start fresh, much like how some code today captures primordials early.</blockquote></mx-reply>Indeed. Something that people might be missing is, the innermost time setting the context &quot;wins&quot;. So if all closures captured the context, there'd be no overriding it.","m.relates_to":{"m.in_reply_to":{"event_id":"$_CH3FCIjsNq5HIhUySno72hGMRTn8l_FUqLa4UTKA3E"}},"msgtype":"m.text"},"ts":1679601709251,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MQBQke1gyd1nskfG8JoStwCeiDmW4_ygmsu1Jp8nNgw"},
{"content":{"body":"> <@ljharb:matrix.org> i mean like, `arr.map(() => { /* context should be available here no matter when or where this function is called */ })` or replace `arr.map(` with `someAPI(`\n\nI disagree. That is specifically what `.wrap()` is intended to address. This whole feature is related to async flow through call stacks. A function declaration doesn't have a call stack.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$P5rjiHTi0azMN7wlSw7ryqgwKmPGPDy0ug5eVpx3dHY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i mean like, <code>arr.map(() =&gt; { /* context should be available here no matter when or where this function is called */ })</code> or replace <code>arr.map(</code> with <code>someAPI(</code></blockquote></mx-reply>I disagree. That is specifically what <code>.wrap()</code> is intended to address. This whole feature is related to async flow through call stacks. A function declaration doesn't have a call stack.","m.relates_to":{"m.in_reply_to":{"event_id":"$P5rjiHTi0azMN7wlSw7ryqgwKmPGPDy0ug5eVpx3dHY"}},"msgtype":"m.text"},"ts":1679601837361,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$UNgK1p-W-eMlHcgn3URzFbkik1_oDIbwo8IGq8AYU_c"},
{"content":{"body":"JS has deep dep trees, and code i don't control will be wrapping my functions, and/or calling them, all the time - it seems really unfortunate if i have to `.wrap()` manually in order to ensure my context works","format":"org.matrix.custom.html","formatted_body":"JS has deep dep trees, and code i don't control will be wrapping my functions, and/or calling them, all the time - it seems really unfortunate if i have to <code>.wrap()</code> manually in order to ensure my context works","msgtype":"m.text"},"ts":1679601925346,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$p9cHO_kcyGFXngwUrfhdURh3sHXEa9vw_wGBfA6NbZ0"},
{"content":{"body":"> <@ljharb:matrix.org> JS has deep dep trees, and code i don't control will be wrapping my functions, and/or calling them, all the time - it seems really unfortunate if i have to `.wrap()` manually in order to ensure my context works\n\nThis should really not be the case; `.wrap` is pretty obscure and things should inherit correctly for the most part. The exception is if you're somehow making your own system for an event loop/queueing/batching, for callbacks (promises are already handled comprehensively)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$p9cHO_kcyGFXngwUrfhdURh3sHXEa9vw_wGBfA6NbZ0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>JS has deep dep trees, and code i don't control will be wrapping my functions, and/or calling them, all the time - it seems really unfortunate if i have to <code>.wrap()</code> manually in order to ensure my context works</blockquote></mx-reply>This should really not be the case; <code>.wrap</code> is pretty obscure and things should inherit correctly for the most part. The exception is if you're somehow making your own system for an event loop/queueing/batching, for callbacks (promises are already handled comprehensively)","m.relates_to":{"m.in_reply_to":{"event_id":"$p9cHO_kcyGFXngwUrfhdURh3sHXEa9vw_wGBfA6NbZ0"}},"msgtype":"m.text"},"ts":1679601996115,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hL0p5Ufey0qP_wYYzEA8JTW-A1yFn5r07ZGnX6e5qac"},
{"content":{"body":"AsyncContext inherits automatically over deep dependency trees","msgtype":"m.text"},"ts":1679602025695,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rcRT6NXO4NrkzuwLHoZjFa-3-DU9RbyD5NCBCQ93g4Y"},
{"content":{"body":"should host environments use `AsyncContext.wrap` to wrap `setTimeout` and `setInterval` callbacks?","format":"org.matrix.custom.html","formatted_body":"should host environments use <code>AsyncContext.wrap</code> to wrap <code>setTimeout</code> and <code>setInterval</code> callbacks?","msgtype":"m.text"},"ts":1679602056910,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$5o5rw9NW8W2rEuOz5PZAoGqMOJ6cGzYytkw8iiYyCmw"},
{"content":{"body":" * should host environments use `AsyncContext.wrap` to wrap `setTimeout` and `setInterval` callbacks? (since they're the ones implementing those scheduling tools)","format":"org.matrix.custom.html","formatted_body":" * should host environments use <code>AsyncContext.wrap</code> to wrap <code>setTimeout</code> and <code>setInterval</code> callbacks? (since they're the ones implementing those scheduling tools)","m.new_content":{"body":"should host environments use `AsyncContext.wrap` to wrap `setTimeout` and `setInterval` callbacks? (since they're the ones implementing those scheduling tools)","format":"org.matrix.custom.html","formatted_body":"should host environments use <code>AsyncContext.wrap</code> to wrap <code>setTimeout</code> and <code>setInterval</code> callbacks? (since they're the ones implementing those scheduling tools)","msgtype":"m.text"},"m.relates_to":{"event_id":"$5o5rw9NW8W2rEuOz5PZAoGqMOJ6cGzYytkw8iiYyCmw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679602070688,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$DL2th_qiKifb87d0uKHb7szfx8rSp4WVi_Vcw9ybBas"},
{"content":{"body":"> <@benjamn:matrix.org> should host environments use `AsyncContext.wrap` to wrap `setTimeout` and `setInterval` callbacks? (since they're the ones implementing those scheduling tools)\n\nThey should use the same underlying algorithm at some point, yes","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$5o5rw9NW8W2rEuOz5PZAoGqMOJ6cGzYytkw8iiYyCmw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>should host environments use <code>AsyncContext.wrap</code> to wrap <code>setTimeout</code> and <code>setInterval</code> callbacks? (since they're the ones implementing those scheduling tools)</blockquote></mx-reply>They should use the same underlying algorithm at some point, yes","m.relates_to":{"m.in_reply_to":{"event_id":"$5o5rw9NW8W2rEuOz5PZAoGqMOJ6cGzYytkw8iiYyCmw"}},"msgtype":"m.text"},"ts":1679602072701,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$plvCMLFrtD6iQ0E1u-TpNRxctyzUT6iSAy4q8n-zDs0"},
{"content":{"body":"> <@littledan:matrix.org> This should really not be the case; `.wrap` is pretty obscure and things should inherit correctly for the most part. The exception is if you're somehow making your own system for an event loop/queueing/batching, for callbacks (promises are already handled comprehensively)\n\nI think this is exactly the right take. For 99% usecase, it happens correctly, automatically. If you're not explicitly making your own queueing/batching system, you won't even need to think about this.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$hL0p5Ufey0qP_wYYzEA8JTW-A1yFn5r07ZGnX6e5qac?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This should really not be the case; <code>.wrap</code> is pretty obscure and things should inherit correctly for the most part. The exception is if you're somehow making your own system for an event loop/queueing/batching, for callbacks (promises are already handled comprehensively)</blockquote></mx-reply>I think this is exactly the right take. For 99% usecase, it happens correctly, automatically. If you're not explicitly making your own queueing/batching system, you won't even need to think about this.","m.relates_to":{"m.in_reply_to":{"event_id":"$hL0p5Ufey0qP_wYYzEA8JTW-A1yFn5r07ZGnX6e5qac"}},"msgtype":"m.text"},"ts":1679602542158,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6OQ7ZRPe6uSFI-wKr5h7g5n2Wkrg-2oJqD44xA9kUm4"},
{"content":{"body":"if that's actually the case then that's great!","msgtype":"m.text"},"ts":1679602596042,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$n7AwpINPaevm7DDXJS02mwEcUY-FtnbF8rPn__s40Ng"},
{"content":{"body":"i look forward to being convinced by more examples in the future :-) perhaps a temporal-like \"cookbook\" would help?","msgtype":"m.text"},"ts":1679602624258,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gmfz1B_Cq9G4Hk6Gf6BE5elUvELo2Z2Au5-q5k4hkyw"},
{"content":{"body":"> <@ljharb:matrix.org> i look forward to being convinced by more examples in the future :-) perhaps a temporal-like \"cookbook\" would help?\n\ngood idea! Maybe it could be derived from these excellent slides by Chengzhong Wu https://docs.google.com/document/d/1wO7mbGr6f3tDnEWAaMSVI0bMeEHIdcLbAKeOQe-Zh4U/edit#heading=h.71r4ayj7zowk","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$gmfz1B_Cq9G4Hk6Gf6BE5elUvELo2Z2Au5-q5k4hkyw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>i look forward to being convinced by more examples in the future :-) perhaps a temporal-like &quot;cookbook&quot; would help?</blockquote></mx-reply>good idea! Maybe it could be derived from these excellent slides by <a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a> https://docs.google.com/document/d/1wO7mbGr6f3tDnEWAaMSVI0bMeEHIdcLbAKeOQe-Zh4U/edit#heading=h.71r4ayj7zowk","m.relates_to":{"m.in_reply_to":{"event_id":"$gmfz1B_Cq9G4Hk6Gf6BE5elUvELo2Z2Au5-q5k4hkyw"}},"msgtype":"m.text"},"ts":1679602908431,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h1S2_PIqW5Oen7_54PSAxU9cMlhz9vGCmEAQ6p1rV7M"},
{"content":{"body":"is `AsyncContext.wrap` expected to be free if there's no active contexts?","format":"org.matrix.custom.html","formatted_body":"is <code>AsyncContext.wrap</code> expected to be free if there's no active contexts?","msgtype":"m.text"},"ts":1679603073152,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$2cv9-3r35GeGR0vU2u2CelXV5s_9mvhH12AvwFbVgUI"},
{"content":{"body":"or as free as like a `.bind` or whatever, at least","format":"org.matrix.custom.html","formatted_body":"or as free as like a <code>.bind</code> or whatever, at least","msgtype":"m.text"},"ts":1679603081275,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ET_YAQJb5LRd2u9VzKVuVw09ITxZ_VHbJaccPOTsAc8"},
{"content":{"body":"I would hope so but just want to confirm","msgtype":"m.text"},"ts":1679603102306,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$brckEyru9c-FyIdH4WMiDvcZ0kKIgscdCMZ_z1dzbOQ"},
{"content":{"body":"(otherwise we probably want a \"is there an active context\" so you can conditionally wrap)","msgtype":"m.text"},"ts":1679603112094,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Su0tguHxRMRFaaNygpq3kQSIq3kKRyQQkbiwJSVs-TM"},
{"content":{"body":"I expect implementations could make it free","msgtype":"m.text"},"ts":1679603143678,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$C7s3QcpY4zAwOzVoFLGE93HjPL7L30QH1zMsTpmqTk4"},
{"content":{"body":"say, make it an optional weak map","msgtype":"m.text"},"ts":1679603164395,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RGxB6RedkQqN05yLdnk7fFHK1X8-FtlxMQ16NlerSg0"},
{"content":{"body":" * say, make it an optional/nullable weak map","m.new_content":{"body":"say, make it an optional/nullable weak map","msgtype":"m.text"},"m.relates_to":{"event_id":"$RGxB6RedkQqN05yLdnk7fFHK1X8-FtlxMQ16NlerSg0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679603172684,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$unYh2l2ZWD71txpWHo4qB6pFgXswkO28fUWhl6CTT8o"},
{"content":{"body":"It should be as fast as bind, but it could be optimized for memory to return a blank wrapper function if there's not context","msgtype":"m.text"},"ts":1679603213124,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$If6EBcKO_pS3as2HxU4cFIjLI6Q93o_rVBDjPVDK5iM"},
{"content":{"body":"But that could be done as an impl optimization, not something we need to explicitly design in the spec.","msgtype":"m.text"},"ts":1679603230622,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5SsoET6LJwJogjwzGW1ioydLMgEE2-zDY01-0Bddb5Y"},
{"content":{"body":" * say, make the snapshot an optional/nullable weak map","m.new_content":{"body":"say, make the snapshot an optional/nullable weak map","msgtype":"m.text"},"m.relates_to":{"event_id":"$RGxB6RedkQqN05yLdnk7fFHK1X8-FtlxMQ16NlerSg0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679603235369,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$piPEeIbQ-SUK0kFcMYPv-1OoMPrgWnFE0GP-5I4Fd9o"},
{"content":{"body":"Note that the pre/post steps of the wrapper need to run, setting the global state to the empty context, so that can't go away","msgtype":"m.text"},"ts":1679603295330,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$txYE_yOLrNuZc8YHvrlzJXRRY-L2lmb1NkdI3fabswU"},
{"content":{"body":"are we considering dependency injection as a potential application of `AsyncContext`?","format":"org.matrix.custom.html","formatted_body":"are we considering dependency injection as a potential application of <code>AsyncContext</code>?","msgtype":"m.text"},"ts":1679607138813,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM"},
{"content":{"body":"> <@benjamn:matrix.org> are we considering dependency injection as a potential application of `AsyncContext`?\n\nIf you have thoughts about how/whether it would be useful, it'd be really helpful to have a writeup on that. I would expect it to be controversial, however.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@benjamn:matrix.org\">@benjamn:matrix.org</a><br>are we considering dependency injection as a potential application of <code>AsyncContext</code>?</blockquote></mx-reply>If you have thoughts about how/whether it would be useful, it'd be really helpful to have a writeup on that. I would expect it to be controversial, however.","m.relates_to":{"m.in_reply_to":{"event_id":"$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM"}},"msgtype":"m.text"},"ts":1679607188427,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rXEEzLcXstZVVkTpQgkWd2MmTW1DxdNwiYx9AaMRJko"},
{"content":{"body":"that doesn't seem like a good strategic choice to market it that way ","m.relates_to":{"event_id":"$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM","is_falling_back":true,"m.in_reply_to":{"event_id":"$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607196562,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Jgr9ozOesT9xfzmkrfJD4ennwx7OGIrA2WrreJOAefI"},
{"content":{"body":"People will definitely use it that way, after having done that for half a decade with a React Feature of the same name :)\nAlthough, technically, \"DI\" is the wrong term for it ^^","format":"org.matrix.custom.html","formatted_body":"People will definitely use it that way, after having done that for half a decade with a React Feature of the same name :)<br/>\nAlthough, technically, &quot;DI&quot; is the wrong term for it ^^","msgtype":"m.text"},"ts":1679607267403,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$FGUy3mT2LwYUfQpea2_EjKkpF4YnUt6yLA_XnzyN1fM"},
{"content":{"body":"another technical term with almost as many flavors as \"context\"","msgtype":"m.text"},"ts":1679607303917,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Ap981inUOmF3jqhg4nbvnvLp-QPqWvhwHgF64B-sa3o"},
{"content":{"body":"hehe look you've already been called wrong two different ways","msgtype":"m.text"},"ts":1679607313870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1wUNmZLT85jtP2ksulSvxXJVxwF2bdZVZWSJr6iK39Q"},
{"content":{"body":"I had a twitter argument (I was calling it DI) with someone making very good arguments for \"if you have to call out for it, it's not injection\" - I still keep using DI though :)","msgtype":"m.text"},"ts":1679607351667,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$F5-rjLD6cuO73z7K4rDCfxQs9qu-TrNgM1W5B_7PjvM"},
{"content":{"body":"cool, I appreciate that kind of feedback","m.relates_to":{"event_id":"$bOwY-JT6Dvv8qGfj1XB_WcqIMY1rpSVwCzRVZc2KkiM","is_falling_back":true,"m.in_reply_to":{"event_id":"$Jgr9ozOesT9xfzmkrfJD4ennwx7OGIrA2WrreJOAefI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1679607421722,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$mOT9XqNV1j4-biv6l8XqDcCWK3WQcTbx7ch0elOJWC8"},
{"content":{"body":"* I had a twitter argument (I was calling it DI) with someone making very good arguments for \"if you have to call out for it, it's not injection\" - I still keep using the term DI though :)","im.nheko.relations.v1.relations":[{"event_id":"$F5-rjLD6cuO73z7K4rDCfxQs9qu-TrNgM1W5B_7PjvM","rel_type":"m.replace"}],"m.new_content":{"body":"I had a twitter argument (I was calling it DI) with someone making very good arguments for \"if you have to call out for it, it's not injection\" - I still keep using the term DI though :)","msgtype":"m.text"},"m.relates_to":{"event_id":"$F5-rjLD6cuO73z7K4rDCfxQs9qu-TrNgM1W5B_7PjvM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679607456601,"senderName":"Lenz Weber-Tronic (phryneas)","senderId":"@phryneas:matrix.org","id":"$lEpfqhL8zicOjP3fG__x-CP8jC4FhfjHtN_Xmm8BY7o"},
{"content":{"body":"DI in JS is just function arguments, and i like it that way :-)","msgtype":"m.text"},"ts":1679607458584,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$diO3FWZuA06IkvrELmyG5lPKr5xh_SP8dT-E1Hg6E-o"},
{"content":{"body":"sometimes!","msgtype":"m.text"},"ts":1679607511607,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f6LMmrSOcYhwKgw9biy9oRIFMrMRlaRpP1Frl8HjCWc"},
{"content":{"body":"I like how static the parameter decorators for DI could be, compared to the more dynamic version you'd get with `AsyncContext`","format":"org.matrix.custom.html","formatted_body":"I like how static the parameter decorators for DI could be, compared to the more dynamic version you'd get with <code>AsyncContext</code>","msgtype":"m.text"},"ts":1679607550392,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$gEm-EJ-GjzXIttkcvmE3_Jp-q6wRQMdoF8HAx2b5etM"},
{"content":{"body":" * I like how static(ally analyzable) the parameter decorators for DI could be, compared to the more dynamic version you'd get with `AsyncContext`","format":"org.matrix.custom.html","formatted_body":" * I like how static(ally analyzable) the parameter decorators for DI could be, compared to the more dynamic version you'd get with <code>AsyncContext</code>","m.new_content":{"body":"I like how static(ally analyzable) the parameter decorators for DI could be, compared to the more dynamic version you'd get with `AsyncContext`","format":"org.matrix.custom.html","formatted_body":"I like how static(ally analyzable) the parameter decorators for DI could be, compared to the more dynamic version you'd get with <code>AsyncContext</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$gEm-EJ-GjzXIttkcvmE3_Jp-q6wRQMdoF8HAx2b5etM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679607564144,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$HCg9cIvxEWTT6sI_LhuOJ1PdvWH2KZpcvibCQPFflf4"},
{"content":{"body":"> <@bakkot:matrix.org> is `AsyncContext.wrap` expected to be free if there's no active contexts?\n\nNot if it can't ensure calling it later won't adopt a different context. This is necessary to escape out of a context later, which is necessary to create isolation","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2cv9-3r35GeGR0vU2u2CelXV5s_9mvhH12AvwFbVgUI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br />is <code>AsyncContext.wrap</code> expected to be free if there's no active contexts?</blockquote></mx-reply>Not if it can't ensure calling it later won't adopt a different context. This is necessary to escape out of a context later, which is necessary to create isolation","m.relates_to":{"m.in_reply_to":{"event_id":"$2cv9-3r35GeGR0vU2u2CelXV5s_9mvhH12AvwFbVgUI"}},"msgtype":"m.text"},"ts":1679614174559,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$dxMNGrr-ANZr_SO27x2MCPtNRkrTltoykDNHuR-NAv8"}
]