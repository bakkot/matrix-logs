[
{"content":{"body":"> <@stephenbelanger:matrix.org> ```js\n> // Measure request time\n> app.use(async function (ctx, next) {\n>   const start = Date.now()\n>   await next()\n> \n>   // While this happens _after_ the following middleware runs,\n>   // the store value will not be set.\n>   const id = store.get()\n>   console.log(`Request #${id} took ${Date.now() - start}ms`)\n> })\n> \n> // Store a request id value\n> let id = 0\n> app.use(async function (ctx, next) {\n>   await store.run(++id, next)\n> })\n> ```\n\nThis took me a while to understand your logic as to why this _benefits_ from flowing through, rather than the other way around. It seems strange to me that you would expect to be able to use the id produced later - if you just rearrange them, then it works with flow-around, and that's the order I'd expect them to be in.\n\nBut it seems like flow-through allows making it order-independent with a bit more care, at the cost of risking a catastrophic failure if somebody trashes your state, while flow-around insulates you from the risk (it's defensive programming by default, essentially), but then adds risk from structuring your middlewares incorrectly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$FMWw1ZTsQo7YeLNDwbhmc2MBvWTSBJw0g3a5EFKF5NQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br /><pre><code class=\"language-js\">// Measure request time\napp.use(async function (ctx, next) {\n  const start = Date.now()\n  await next()\n\n  // While this happens _after_ the following middleware runs,\n  // the store value will not be set.\n  const id = store.get()\n  console.log(`Request #${id} took ${Date.now() - start}ms`)\n})\n\n// Store a request id value\nlet id = 0\napp.use(async function (ctx, next) {\n  await store.run(++id, next)\n})\n</code></pre>\n</blockquote></mx-reply><p>This took me a while to understand your logic as to why this <em>benefits</em> from flowing through, rather than the other way around. It seems strange to me that you would expect to be able to use the id produced later - if you just rearrange them, then it works with flow-around, and that's the order I'd expect them to be in.</p>\n<p>But it seems like flow-through allows making it order-independent with a bit more care, at the cost of risking a catastrophic failure if somebody trashes your state, while flow-around insulates you from the risk (it's defensive programming by default, essentially), but then adds risk from structuring your middlewares incorrectly.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$FMWw1ZTsQo7YeLNDwbhmc2MBvWTSBJw0g3a5EFKF5NQ"}},"msgtype":"m.text"},"ts":1717172403976,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$AaEfOvLy_K83mETodH49hQq4V0i3_t53Eb3BmW8KSBw"}
]