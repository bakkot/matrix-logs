[
{"content":{"body":"* I'm not even sure if per-store configurability (if it's a global default to push things in the call/resolve-time vs registration-time direction in the cases where both are available) will be a solution; sometimes you want the registration-time ancestor of the call-time ancestor","m.new_content":{"body":"I'm not even sure if per-store configurability (if it's a global default to push things in the call/resolve-time vs registration-time direction in the cases where both are available) will be a solution; sometimes you want the registration-time ancestor of the call-time ancestor","msgtype":"m.text"},"m.relates_to":{"event_id":"$ryBuQY1TAk-YaTynFMThn1qNuIQuUtSiUuqvXk4jzFM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716257431037,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XBazbfVz7CKB5_Ld08XJq-u9gZbWOxutxIt7O-UgZtk"},
{"content":{"body":"Wow, this really blew up over the last few days","msgtype":"m.text"},"ts":1716265940824,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IWsipWsPkVjZi22So4B-r8-o4n5ftZs2rSZOA837Q4E"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It's not _just_ the timing of enabling PromiseHook. It is that the portion of an async function _before_ the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.\n\nI donâ€™t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesnâ€™t matter where the awaits are.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM\">In reply to</a><a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@stephenbelanger:matrix.org</a><br />It's not <em>just</em> the timing of enabling PromiseHook. It is that the portion of an async function <em>before</em> the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.</blockquote></mx-reply>I donâ€™t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesnâ€™t matter where the awaits are.","m.relates_to":{"m.in_reply_to":{"event_id":"$e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM"}},"msgtype":"m.text"},"ts":1716266048689,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$J7GW2rvBLD-Z0CAn67XpYnYGS6silxRBjuVKrDCCaIY"},
{"content":{"body":"> <@legendecas:matrix.org> The proposal as it current stands is maintaining the lexical consistent value inside a async function body across `await` for `AsyncContext.Variable`, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.\n\nExactly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ\">In reply to</a><a href=\"https://matrix.to/#/%40legendecas%3Amatrix.org\">@legendecas:matrix.org</a><br />The proposal as it current stands is maintaining the lexical consistent value inside a async function body across <code>await</code> for <code>AsyncContext.Variable</code>, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.</blockquote></mx-reply>Exactly.","m.relates_to":{"m.in_reply_to":{"event_id":"$S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ"}},"msgtype":"m.text"},"ts":1716266075911,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ht1_uQvSu-IQ2SaA-apuv7lUmTJC4sDWNZo07uijGJs"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes. That is actually what users keep telling me they are _expecting_.\n\nAre there links to issue reports for this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%242EcBVuanDELbtF-R0YQCsVt-TGdwVBXolmCJJgq4vHY\">In reply to</a><a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@stephenbelanger:matrix.org</a><br />Yes. That is actually what users keep telling me they are <em>expecting</em>.</blockquote></mx-reply>Are there links to issue reports for this?","m.relates_to":{"m.in_reply_to":{"event_id":"$2EcBVuanDELbtF-R0YQCsVt-TGdwVBXolmCJJgq4vHY"}},"msgtype":"m.text"},"ts":1716266139959,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$cI5sAUtz_PXzDZ6SOWYLXzKV0eco7JM6DPFxcem7S_A"},
{"content":{"body":"> <@shaylew:matrix.org> (See the warnings about rust `tracing::Span` in async code https://docs.rs/tracing/latest/tracing/span/struct.Span.html#in-asynchronous-code for some consequences of this sort of design in the wild -- but they're better off because Futures are expressive enough to write `Future::instrument` without needing built-in help)\n\nThis example doesnâ€™t apply in our case, since any cooperate threading (another promise resuming in JS) would have restored its own context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24xVDD-YHyM2CwOU9BJXcBJQkDMnUXXmthWTudW4KJOo0\">In reply to</a><a href=\"https://matrix.to/#/%40shaylew%3Amatrix.org\">@shaylew:matrix.org</a><br />(See the warnings about rust <code>tracing::Span</code> in async code https://docs.rs/tracing/latest/tracing/span/struct.Span.html#in-asynchronous-code for some consequences of this sort of design in the wild -- but they're better off because Futures are expressive enough to write <code>Future::instrument</code> without needing built-in help)</blockquote></mx-reply>This example doesnâ€™t apply in our case, since any cooperate threading (another promise resuming in JS) would have restored its own context.","m.relates_to":{"m.in_reply_to":{"event_id":"$xVDD-YHyM2CwOU9BJXcBJQkDMnUXXmthWTudW4KJOo0"}},"msgtype":"m.text"},"ts":1716266223363,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ThYwMuDt3oeRTiB3YtAQiQZChZYe3zj6PdqF1sEV1ng"},
{"content":{"body":"> <@abotella:igalia.com> sure, people rewriting code from callbacks to promises might prefer resolution time, but what about people writing async/await code from scratch? Do we know what they need? Would we be breaking them?\n\nAnd itâ€™s not just web APIs, anything trying to cache fetches or other async behavior, any module level initializion using a promise, will break any user.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24xG_pP60Uu_Zg1MIaT7yqOSXcuD-_0ZUrmgFLnxm7QoY\">In reply to</a><a href=\"https://matrix.to/#/%40abotella%3Aigalia.com\">@abotella:igalia.com</a><br />sure, people rewriting code from callbacks to promises might prefer resolution time, but what about people writing async/await code from scratch? Do we know what they need? Would we be breaking them?</blockquote></mx-reply>And itâ€™s not just web APIs, anything trying to cache fetches or other async behavior, any module level initializion using a promise, will break any user.","m.relates_to":{"m.in_reply_to":{"event_id":"$xG_pP60Uu_Zg1MIaT7yqOSXcuD-_0ZUrmgFLnxm7QoY"}},"msgtype":"m.text"},"ts":1716266645909,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qyJT_M5XDmDoulj2sbvLPdlQI9pjqmYxhgillOk40z4"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Flowing _around_ is essentially just local variable scope which, to me, doesn't really seem to have much value. I've asked a few times for an explanation or some use case _why_ anyone would want that flow but have not yet got any answer on that. ðŸ¤”\n\nItâ€™s a local variable scope that propagates to child calls automatically. I explicitly want this becasue itâ€™s understandable, and easy to debug.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24Mkao1EfWuQGyTH6bR7IPAjokFjaYz1Abkn4avXUTqZA\">In reply to</a><a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@stephenbelanger:matrix.org</a><br />Flowing <em>around</em> is essentially just local variable scope which, to me, doesn't really seem to have much value. I've asked a few times for an explanation or some use case <em>why</em> anyone would want that flow but have not yet got any answer on that. ðŸ¤”</blockquote></mx-reply>Itâ€™s a local variable scope that propagates to child calls automatically. I explicitly want this becasue itâ€™s understandable, and easy to debug.","m.relates_to":{"m.in_reply_to":{"event_id":"$Mkao1EfWuQGyTH6bR7IPAjokFjaYz1Abkn4avXUTqZA"}},"msgtype":"m.text"},"ts":1716266843961,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y5DKxn6NCzN7MTCni1ctV5BqAFOd-dzjlI054hud4HQ"},
{"content":{"body":"> <@abotella:igalia.com> even with `.set()`, I don't think this would be dynamic scoping, at least not in the sense that https://github.com/tc39/proposal-async-context/blob/master/SCOPING.md discusses\n\nUnfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they [reasoned](https://github.com/endojs/endo/pull/1424) about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24AIM8URDD1qR5yIIWIKC4Cni8-br0ycKaywqGAHZX14s\">In reply to</a><a href=\"https://matrix.to/#/%40abotella%3Aigalia.com\">@abotella:igalia.com</a><br />even with <code>.set()</code>, I don't think this would be dynamic scoping, at least not in the sense that https://github.com/tc39/proposal-async-context/blob/master/SCOPING.md discusses</blockquote></mx-reply>Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they <a data-md href=\"https://github.com/endojs/endo/pull/1424\">reasoned</a> about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.","m.relates_to":{"m.in_reply_to":{"event_id":"$AIM8URDD1qR5yIIWIKC4Cni8-br0ycKaywqGAHZX14s"}},"msgtype":"m.text"},"ts":1716266986399,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw"},
{"content":{"body":"> <@stephenhicks:matrix.org> One concern I have with the mutable variable idea is how one is supposed to bound the mutation - I think it's common to make a change with a lifetime, which is why we've gravitated toward the `run()` encapsulation.  As you've pointed out, with the flow-through semantics, `run` is very clearly the wrong name, and `set` is much more appropriate.  But your example also hints at some mechanism whereby changes to the variable would still somehow go out of scope?  I think that's important, but it seems like it would lead to lots of confusion.  If some other scope is entered internally, would that inner scope accidentally prune off a branch of var mutations?  That also doesn't seem right.\n\nI think allowing unbounded `set`s opens up the same problems as scoping, and introduces a global leak that is unfixable (how do you ever know when the last set value is not needed anymore?).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24O2xCHhzaTg4bBosv8plBgiALDWJjvLZ_HLo-VmbgZHE\">In reply to</a><a href=\"https://matrix.to/#/%40stephenhicks%3Amatrix.org\">@stephenhicks:matrix.org</a><br />One concern I have with the mutable variable idea is how one is supposed to bound the mutation - I think it's common to make a change with a lifetime, which is why we've gravitated toward the <code>run()</code> encapsulation.  As you've pointed out, with the flow-through semantics, <code>run</code> is very clearly the wrong name, and <code>set</code> is much more appropriate.  But your example also hints at some mechanism whereby changes to the variable would still somehow go out of scope?  I think that's important, but it seems like it would lead to lots of confusion.  If some other scope is entered internally, would that inner scope accidentally prune off a branch of var mutations?  That also doesn't seem right.</blockquote></mx-reply>I think allowing unbounded <code data-md=\"`\">set</code>s opens up the same problems as scoping, and introduces a global leak that is unfixable (how do you ever know when the last set value is not needed anymore?).","m.relates_to":{"m.in_reply_to":{"event_id":"$O2xCHhzaTg4bBosv8plBgiALDWJjvLZ_HLo-VmbgZHE"}},"msgtype":"m.text"},"ts":1716267116361,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IgD43mXmpbyG09HttMHjP2rYHxGCCBkfJVK3cN60svE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> There's not really any writing on it presently, but basically because we don't flow into promise continuations we need to keep an object at the top-level of the request which we push spans into and basically _guess_ what the parent is because, unlike with callbacks, the parent does not flow into the continuation. This means we have to look at what has been pushed into that list in the past and try to guess what the parent would be. Sometimes it's simply the last span in the list, but not always, so we need to do some additional analysis to figure out what was the last span which _could_ be a realistic parent, which requires we also hold a bunch of the span metadata. Holding all this metadata is expensive given that we could have hundreds of thousands of concurrent spans. What we _want_ is for the _correct_ context to just be able to flow through the resolve path so we only need to store the IDs and can entirely eliminate that big bag of data which lives for the whole life of the request.\n\nI think this is what Iâ€™m missing. I donâ€™t understand why could would need to guess, Iâ€™m naively assuming its always follows-from the last child and child-of the current parent. Whatâ€™s a case where this isnâ€™t correct? How does the flows-through solve holding holding the hundreds of thousands of concurrent spans?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%247845b1Ylx3JkiWv6_8b0hC6-nGeUDFf8tFhq98KG9HU\">In reply to</a><a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@stephenbelanger:matrix.org</a><br />There's not really any writing on it presently, but basically because we don't flow into promise continuations we need to keep an object at the top-level of the request which we push spans into and basically <em>guess</em> what the parent is because, unlike with callbacks, the parent does not flow into the continuation. This means we have to look at what has been pushed into that list in the past and try to guess what the parent would be. Sometimes it's simply the last span in the list, but not always, so we need to do some additional analysis to figure out what was the last span which <em>could</em> be a realistic parent, which requires we also hold a bunch of the span metadata. Holding all this metadata is expensive given that we could have hundreds of thousands of concurrent spans. What we <em>want</em> is for the <em>correct</em> context to just be able to flow through the resolve path so we only need to store the IDs and can entirely eliminate that big bag of data which lives for the whole life of the request.</blockquote></mx-reply>I think this is what Iâ€™m missing. I donâ€™t understand why could would need to guess, Iâ€™m naively assuming its always follows-from the last child and child-of the current parent. Whatâ€™s a case where this isnâ€™t correct? How does the flows-through solve holding holding the hundreds of thousands of concurrent spans?","m.relates_to":{"m.in_reply_to":{"event_id":"$7845b1Ylx3JkiWv6_8b0hC6-nGeUDFf8tFhq98KG9HU"}},"msgtype":"m.text"},"ts":1716267429723,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$J04qbpt5vBynoFjWi2BICpzTzKYmLqb8FyIt_0c8sm8"},
{"content":{"body":"(Also, sorry for not respondning a whole lot, normal coprorate BS is taking up all my free time)","msgtype":"m.text"},"ts":1716267475614,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sV311zUSXtQY-hx6C1yLH1QFBN4pseq-yYTth1IznQk"},
{"content":{"body":"> <@jridgewell:matrix.org> Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they [reasoned](https://github.com/endojs/endo/pull/1424) about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.\n\nis there any documentation anywhere about what SES needs from new proposals?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they <a data-md href=\"https://github.com/endojs/endo/pull/1424\">reasoned</a> about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.</blockquote></mx-reply>is there any documentation anywhere about what SES needs from new proposals?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw"}},"msgtype":"m.text"},"ts":1716281377801,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$w_ZSe9TPq4i_OR_HShDRVue3P3b8OGMQylfHv82R-cU"},
{"content":{"body":"> <@littledan:matrix.org> Honestly I have to agree with others who pointed out that some in TC39 will see this version to be \"not well behaved\"\n\nIn my view, considering in-place mutation as \"not well behaved\" because of unintended flow consequences just says to me that the flow model is not clearly defined and _correct_ enough to be _certain_ of what the behaviour will be. If the model is actually _correct_ and _consistent_ then there should be no reason that setting partway through a scope should produce any sort of unexpected behaviour.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$y8QQYsPoB6MME9bFzlTaLMfb12GGR6g6IO425ZGi1EY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Honestly I have to agree with others who pointed out that some in TC39 will see this version to be &quot;not well behaved&quot;</blockquote></mx-reply>In my view, considering in-place mutation as \"not well behaved\" because of unintended flow consequences just says to me that the flow model is not clearly defined and <em>correct</em> enough to be <em>certain</em> of what the behaviour will be. If the model is actually <em>correct</em> and <em>consistent</em> then there should be no reason that setting partway through a scope should produce any sort of unexpected behaviour.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$y8QQYsPoB6MME9bFzlTaLMfb12GGR6g6IO425ZGi1EY"}},"msgtype":"m.text"},"ts":1716282077088,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$lhdjxjhczMYsCW6rYoTLhk3hb0lshf9QAE4POf9uGHQ"},
{"content":{"body":"> <@jasnell:matrix.org> I just have to admit the use cases are valid and there are many places where We Need Both .... makes things way more complicated tho\n\nYes, particularly with async/await the callback-scoped version starts to make less and less sense. This was the whole reason that way back _before_ we settled on `AsyncLocalStorage` I was backing the `AsyncLocal` proposal which _only_ did the set/get style and left the flow scoping semantics up to the runtime to get right.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Q7TPj-TGO7SKy0o-el3aoqx6hLthUB9Rzk2F3CwRsNE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>I just have to admit the use cases are valid and there are many places where We Need Both .... makes things way more complicated tho</blockquote></mx-reply>Yes, particularly with async/await the callback-scoped version starts to make less and less sense. This was the whole reason that way back <em>before</em> we settled on <code>AsyncLocalStorage</code> I was backing the <code>AsyncLocal</code> proposal which <em>only</em> did the set/get style and left the flow scoping semantics up to the runtime to get right.","m.mentions":{"user_ids":["@jasnell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Q7TPj-TGO7SKy0o-el3aoqx6hLthUB9Rzk2F3CwRsNE"}},"msgtype":"m.text"},"ts":1716282184849,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$3P4irBNWwzmf6qT31fCjekDOjZPNkDOTJpCzofIH_JA"},
{"content":{"body":"> <@jridgewell:matrix.org> Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they [reasoned](https://github.com/endojs/endo/pull/1424) about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.\n\nI'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable from an outer scope?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they <a data-md href=\"https://github.com/endojs/endo/pull/1424\">reasoned</a> about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.</blockquote></mx-reply>I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable from an outer scope?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw"}},"msgtype":"m.text"},"ts":1716282390182,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FfbAhz31YBdjZjBIBTTWqjrc71gen1m462NFZr2ignQ"},
{"content":{"body":"> <@jridgewell:matrix.org> Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they [reasoned](https://github.com/endojs/endo/pull/1424) about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.\n\n * I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$BROpTk5Quk0KF_WsLpM0Vu4yr2cVmg4eq4tGVL2SdNw?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Unfortunately it is a form of dynamic scoping, but from callee to caller. This was another one of the points I had to discuss with the SES folks to get them on board with the proposal. The way they <a data-md=\"\" href=\"https://github.com/endojs/endo/pull/1424\">reasoned</a> about it is complicated, but essentially boils down to an implicit param to every function that is the async context mapping.</blockquote></mx-reply> * I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?","m.mentions":{},"m.new_content":{"body":"I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?","format":"org.matrix.custom.html","formatted_body":"I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FfbAhz31YBdjZjBIBTTWqjrc71gen1m462NFZr2ignQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716282406814,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$H0BqO19z2nA4Vv9ZyCkJKl_QgISoiMvfDil0qJFQB14"},
{"content":{"body":"> <@littledan:matrix.org> my experience with mutable dynamically bound variables in Factor was negative. It can be surprising how much or little the write to the variable is propagated up/backwards and then read by someone else. `.run` has a simple answer to this question: it isn't propagated up/backwards.\n\nIt doesn't mutate the slot, but if you store an object in it you can propagate mutations up the tree. I think all we can really do is make captures be a copy of what the reference points to at the time and not be the same binding, so at least that top-level mapping of store to value doesn't propagate upward. This is also partly _why_ I think it's important that it be treated as a _variable_ and not a _bag of data_, because data bags are problematic when it comes to leaking mutations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$icrzyRaXAswsPBilYBUAY2p8WBl_CsimC5C3QrBj9LI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>my experience with mutable dynamically bound variables in Factor was negative. It can be surprising how much or little the write to the variable is propagated up/backwards and then read by someone else. <code>.run</code> has a simple answer to this question: it isn't propagated up/backwards.</blockquote></mx-reply>It doesn't mutate the slot, but if you store an object in it you can propagate mutations up the tree. I think all we can really do is make captures be a copy of what the reference points to at the time and not be the same binding, so at least that top-level mapping of store to value doesn't propagate upward. This is also partly <em>why</em> I think it's important that it be treated as a <em>variable</em> and not a <em>bag of data</em>, because data bags are problematic when it comes to leaking mutations.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$icrzyRaXAswsPBilYBUAY2p8WBl_CsimC5C3QrBj9LI"}},"msgtype":"m.text"},"ts":1716282481258,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$jXblGorXaDcBnvrK-lx87JZL7rw8EN5-k4f5KpPLNU8"},
{"content":{"body":"> <@littledan:matrix.org> so we ended up rediscovering that setting a dynamically scoped variable was an anti-pattern, and we moved towards doing .run instead\n\nThis is what I lean toward at this point, personally. Though I _do_ see that there are a few scenarios where it doesn't _quite_ work the way you want it unless you do things like breaking out of awaits. Unfortunately this is how the OTel context works--you can activate a context within the _current_ scope.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$XsUQ_6Lash2Q65FI1GoD6dwkuHrDNxTIIq7ls7_GRko?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>so we ended up rediscovering that setting a dynamically scoped variable was an anti-pattern, and we moved towards doing .run instead</blockquote></mx-reply>This is what I lean toward at this point, personally. Though I <em>do</em> see that there are a few scenarios where it doesn't <em>quite</em> work the way you want it unless you do things like breaking out of awaits. Unfortunately this is how the OTel context works--you can activate a context within the <em>current</em> scope.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$XsUQ_6Lash2Q65FI1GoD6dwkuHrDNxTIIq7ls7_GRko"}},"msgtype":"m.text"},"ts":1716282624371,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$5OroK6n4-I2cmQhQ1JkyRSjHs39DofwFsLKV99kEmd0"},
{"content":{"body":"What do you mean by breaking out of awaits?","msgtype":"m.text"},"ts":1716282681684,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$le0BRQj40XNFDAOnxVwLXeZBWWk1_228ObkJr1bAuBs"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes, basically every other language flows this way with OTel, but other languages also provide things like bytecode manipulation so it's _able_ to do this externally. With Node.js there is no solution.\n\nComparison with other languages would be really useful if we can figure out where to look ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24hTQBdcqoPQTh-LwzDqsy2bE4tKxcTsQ4MrltEqFT8GY\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yes, basically every other language flows this way with OTel, but other languages also provide things like bytecode manipulation so it's <em>able</em> to do this externally. With Node.js there is no solution.</blockquote></mx-reply>Comparison with other languages would be really useful if we can figure out where to look","m.relates_to":{"m.in_reply_to":{"event_id":"$hTQBdcqoPQTh-LwzDqsy2bE4tKxcTsQ4MrltEqFT8GY"}},"msgtype":"m.text"},"ts":1716283068949,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CHBBS-7t_FAfTDjUBBNwz9AoKqAgqnfSrROJz_2L37A"},
{"content":{"body":"> <@jridgewell:matrix.org> I donâ€™t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesnâ€™t matter where the awaits are.\n\nThe spec, as it is presently, calls for capturing the context at the point where an await happens, not where the promise being awaited resolves. The context flows _into_ that promise, and it _would_ flow all the way to the point of resolving, but then we orphan that branch and return the context back to the captured value of that outer await.\n\nIn this particular example though, it's using `store.enterWith(...)` which effectively sets the value in the _current_ scope without creating a new scope first. Because the initial segment of an async function executes synchronously, if that occurs _before_ the first await of that _internal_ function then the point at which the outer function captures its await will have already change _its_ context and so will adopt that inner context. Whereas if that inner function modifies the current context _after_ the first await within that inner function it will have already passed the point where the outer function captured the await context and so it would _not_ use that value. The fact this sometimes changes the outer function context and sometimes doesn't is extremely confusing. Users are expecting it to _always_ change the outer context, as indicated in the issue, because it is logically a continuation and should therefore behave the same as it would were it written with callbacks instead.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$J7GW2rvBLD-Z0CAn67XpYnYGS6silxRBjuVKrDCCaIY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I donâ€™t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesnâ€™t matter where the awaits are.</blockquote></mx-reply><p>The spec, as it is presently, calls for capturing the context at the point where an await happens, not where the promise being awaited resolves. The context flows <em>into</em> that promise, and it <em>would</em> flow all the way to the point of resolving, but then we orphan that branch and return the context back to the captured value of that outer await.</p>\n<p>In this particular example though, it's using <code>store.enterWith(...)</code> which effectively sets the value in the <em>current</em> scope without creating a new scope first. Because the initial segment of an async function executes synchronously, if that occurs <em>before</em> the first await of that <em>internal</em> function then the point at which the outer function captures its await will have already change <em>its</em> context and so will adopt that inner context. Whereas if that inner function modifies the current context <em>after</em> the first await within that inner function it will have already passed the point where the outer function captured the await context and so it would <em>not</em> use that value. The fact this sometimes changes the outer function context and sometimes doesn't is extremely confusing. Users are expecting it to <em>always</em> change the outer context, as indicated in the issue, because it is logically a continuation and should therefore behave the same as it would were it written with callbacks instead.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J7GW2rvBLD-Z0CAn67XpYnYGS6silxRBjuVKrDCCaIY"}},"msgtype":"m.text"},"ts":1716283331772,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$3sHajTIJT9-P5frOGLM2vmT7Nrinp3sgk1iSQJocucQ"},
{"content":{"body":"> <@jridgewell:matrix.org> Are there links to issue reports for this?\n\nThe issue I just posted yesterday was exactly this, and we get _numerous_ reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that _expected_ the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$cI5sAUtz_PXzDZ6SOWYLXzKV0eco7JM6DPFxcem7S_A?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Are there links to issue reports for this?</blockquote></mx-reply>The issue I just posted yesterday was exactly this, and we get <em>numerous</em> reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that <em>expected</em> the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$cI5sAUtz_PXzDZ6SOWYLXzKV0eco7JM6DPFxcem7S_A"}},"msgtype":"m.text"},"ts":1716283563875,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$wrjKYIlTRU4IVRB4_JV1h_v3qihmISlB1k3UBahN4Fw"},
{"content":{"body":"> <@jridgewell:matrix.org> Itâ€™s a local variable scope that propagates to child calls automatically. I explicitly want this becasue itâ€™s understandable, and easy to debug.\n\nYes, I get that people want this \"around\" flow. I'm fine with people wanting it. I'm just not clear what exactly the _reason_ is why they want it. What _specifically_ is the use case for that flow?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$y5DKxn6NCzN7MTCni1ctV5BqAFOd-dzjlI054hud4HQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Itâ€™s a local variable scope that propagates to child calls automatically. I explicitly want this becasue itâ€™s understandable, and easy to debug.</blockquote></mx-reply>Yes, I get that people want this \"around\" flow. I'm fine with people wanting it. I'm just not clear what exactly the <em>reason</em> is why they want it. What <em>specifically</em> is the use case for that flow?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$y5DKxn6NCzN7MTCni1ctV5BqAFOd-dzjlI054hud4HQ"}},"msgtype":"m.text"},"ts":1716283678998,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$mbt4tRkExjNVKSDPt49s9HmvJBZSUR8RecrTFR0OA3w"},
{"content":{"body":"> <@jridgewell:matrix.org> I think this is what Iâ€™m missing. I donâ€™t understand why could would need to guess, Iâ€™m naively assuming its always follows-from the last child and child-of the current parent. Whatâ€™s a case where this isnâ€™t correct? How does the flows-through solve holding holding the hundreds of thousands of concurrent spans?\n\nConsider this code:\n\n```js\nasync function doSomething() {\n  await doAThing() // first span\n  await doAnotherThing() // no span\n  await doYetAnotherThing() // second span should be follows-from first\n}\n```\n\nIf we have call `doSomething()` twice in a `Promise.all(...)`, which we do not instrument or have any particular awareness of--maybe it's user code--then we'll get two spans being created for the first awaits of each, then when the second spans come in they will no have a way to differentiate because the `doSomething()` itself would have the same context when it runs both times and would be restoring that over the awaits, blowing away the context we had from the inner function calls which we otherwise _could_ associate with if we had flow-through semantics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$J04qbpt5vBynoFjWi2BICpzTzKYmLqb8FyIt_0c8sm8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I think this is what Iâ€™m missing. I donâ€™t understand why could would need to guess, Iâ€™m naively assuming its always follows-from the last child and child-of the current parent. Whatâ€™s a case where this isnâ€™t correct? How does the flows-through solve holding holding the hundreds of thousands of concurrent spans?</blockquote></mx-reply><p>Consider this code:</p>\n<pre><code class=\"language-js\">async function doSomething() {\n  await doAThing() // first span\n  await doAnotherThing() // no span\n  await doYetAnotherThing() // second span should be follows-from first\n}\n</code></pre>\n<p>If we have call <code>doSomething()</code> twice in a <code>Promise.all(...)</code>, which we do not instrument or have any particular awareness of--maybe it's user code--then we'll get two spans being created for the first awaits of each, then when the second spans come in they will no have a way to differentiate because the <code>doSomething()</code> itself would have the same context when it runs both times and would be restoring that over the awaits, blowing away the context we had from the inner function calls which we otherwise <em>could</em> associate with if we had flow-through semantics.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$J04qbpt5vBynoFjWi2BICpzTzKYmLqb8FyIt_0c8sm8"}},"msgtype":"m.text"},"ts":1716284163933,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$GSKpgZYYZpQ4PQ8MhgZ3Dn7qA2G-5nmnxdE7IKzsI6Y"},
{"content":{"body":"> <@abotella:igalia.com> I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?\n\nYeah, I really don't get what the security concerns are here. You need access to the variable instance to retrieve the data. Sharing any _normal_ variable would have the same security implications.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$FfbAhz31YBdjZjBIBTTWqjrc71gen1m462NFZr2ignQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I'm not actually sure I understand this. As with the current proposal, you would still need to have access to an object in order to set or get, so isn't it exactly parallel to setting a variable defined in an outer scope?</blockquote></mx-reply>Yeah, I really don't get what the security concerns are here. You need access to the variable instance to retrieve the data. Sharing any <em>normal</em> variable would have the same security implications.","m.mentions":{"user_ids":["@abotella:igalia.com","@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$FfbAhz31YBdjZjBIBTTWqjrc71gen1m462NFZr2ignQ"}},"msgtype":"m.text"},"ts":1716284343655,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$IsvoCo3Oj_tvor8_8M-GDLT5Kq1C_YBkmlECtbS7UQI"},
{"content":{"body":"> <@littledan:matrix.org> What do you mean by breaking out of awaits?\n\nI mean the flow-through semantics. The `store.run(...)` form is not particularly usable in async functions, having an in-scope mutation would make more sense, or _at least_ some way to inform the context to _not_ bind around the await when what you actually _want_ is the flow-through semantics.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$le0BRQj40XNFDAOnxVwLXeZBWWk1_228ObkJr1bAuBs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What do you mean by breaking out of awaits?</blockquote></mx-reply>I mean the flow-through semantics. The <code>store.run(...)</code> form is not particularly usable in async functions, having an in-scope mutation would make more sense, or <em>at least</em> some way to inform the context to <em>not</em> bind around the await when what you actually <em>want</em> is the flow-through semantics.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$le0BRQj40XNFDAOnxVwLXeZBWWk1_228ObkJr1bAuBs"}},"msgtype":"m.text"},"ts":1716284504210,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$_KW1BOA-JOMjwoh3tvfeGgKSoTLtzfZw-nfwUpKmq30"},
{"content":{"body":"Most other languages I've seen don't have a user-provided scoping mechanism for context, the runtime decides it themselves.","m.mentions":{},"msgtype":"m.text"},"ts":1716284590330,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$z_UKYkUAj0L0pyLvTgvYs0tuZ008aIq50tDdCPleTRk"},
{"content":{"body":"Like Ruby does that with fiber locals as just a simple map that it manages on its own without any user-provided scopes.","m.mentions":{},"msgtype":"m.text"},"ts":1716284614840,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$YkvWceMbcMThAO36mR-Tyq-jUIw42Vh6tE7_WWApodQ"},
{"content":{"body":"https://docs.ruby-lang.org/en/master/Fiber.html#method-i-storage","m.mentions":{},"msgtype":"m.text"},"ts":1716284640706,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$e7OHjwELNwLZxpgLh1GbrJGGJnqihyQRkFFKCX92rOA"},
{"content":{"body":"And go has its explicit `Context` object which you have to pass through manually, but you basically do clones every time you want to modify it and it flows downward through the calls you make passing in the modified version.","format":"org.matrix.custom.html","formatted_body":"And go has its explicit <code>Context</code> object which you have to pass through manually, but you basically do clones every time you want to modify it and it flows downward through the calls you make passing in the modified version.","m.mentions":{},"msgtype":"m.text"},"ts":1716284726850,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$fqvImSdivTXqHiPH1lDsqHr8GzbUf9zoFYA7l710Kr0"},
{"content":{"body":".NET also has AsyncLocal, which is basically exactly what was originally proposed in Node.js _before_ AsyncLocalStorage was chosen instead, because people didn't trust the Node.js runtime to manage scopes correctly. https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-8.0","format":"org.matrix.custom.html","formatted_body":".NET also has AsyncLocal, which is basically exactly what was originally proposed in Node.js <em>before</em> AsyncLocalStorage was chosen instead, because people didn't trust the Node.js runtime to manage scopes correctly. https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-8.0","m.mentions":{},"msgtype":"m.text"},"ts":1716284801805,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$jTA6uMEeIOum5o14v9982GMBG98pkb_h49c8td1_rMA"},
{"content":{"body":"Again, doing the simple key/value hash map type structure with no user-supplied scoping mechanism.","m.mentions":{},"msgtype":"m.text"},"ts":1716284836876,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$4kp9Emb1jlJDJXPvtBT677Au8yiztV2iqz3OapoC2Uo"},
{"content":{"body":"> <@stephenbelanger:matrix.org> The issue I just posted yesterday was exactly this, and we get _numerous_ reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that _expected_ the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.\n\nThe issue was confusing for it's use on `enterWith` and performance optimization that make an `AsyncLocalStorage` behaves differently when modification of `AsyncLocalStorage` was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think `AsyncLocalStorage.run` could satisfy his needs.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wrjKYIlTRU4IVRB4_JV1h_v3qihmISlB1k3UBahN4Fw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>The issue I just posted yesterday was exactly this, and we get <em>numerous</em> reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that <em>expected</em> the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.</blockquote></mx-reply>The issue was confusing for it's use on <code>enterWith</code> and performance optimization that make an <code>AsyncLocalStorage</code> behaves differently when modification of <code>AsyncLocalStorage</code> was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think <code>AsyncLocalStorage.run</code> could satisfy his needs.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wrjKYIlTRU4IVRB4_JV1h_v3qihmISlB1k3UBahN4Fw"}},"msgtype":"m.text"},"ts":1716284848957,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$XrZbGYOqQGCg2sHQO56Nj-VNDxiyQ5a7b-G6IC0vxWw"},
{"content":{"body":"> <@stephenbelanger:matrix.org> The issue I just posted yesterday was exactly this, and we get _numerous_ reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that _expected_ the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.\n\n * The issue was confusing for it's use on `enterWith` and performance optimization that make an `AsyncLocalStorage` behaves differently when modification of `AsyncLocalStorage` was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think `AsyncLocalStorage.run` could satisfy his needs. Let's wait if he wants to expand on it on the issue.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wrjKYIlTRU4IVRB4_JV1h_v3qihmISlB1k3UBahN4Fw?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>The issue I just posted yesterday was exactly this, and we get <em>numerous</em> reports expecting this behaviour in Datadog support escalations. I've seen it come up many times before in many places too--Slack conversations, conversations at collab summits...I've never seen anyone that <em>expected</em> the behaviour as it is presently. It's possible that no one talks about it because people don't complain about what they think is already working, but given that the vast majority of context management usage is APMs and all the APM devs I've talked to have complained about these context flows as problematic I feel like there's a pretty good chance we're getting it wrong.</blockquote></mx-reply> * The issue was confusing for it's use on <code>enterWith</code> and performance optimization that make an <code>AsyncLocalStorage</code> behaves differently when modification of <code>AsyncLocalStorage</code> was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think <code>AsyncLocalStorage.run</code> could satisfy his needs. Let's wait if he wants to expand on it on the issue.","m.mentions":{},"m.new_content":{"body":"The issue was confusing for it's use on `enterWith` and performance optimization that make an `AsyncLocalStorage` behaves differently when modification of `AsyncLocalStorage` was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think `AsyncLocalStorage.run` could satisfy his needs. Let's wait if he wants to expand on it on the issue.","format":"org.matrix.custom.html","formatted_body":"The issue was confusing for it's use on <code>enterWith</code> and performance optimization that make an <code>AsyncLocalStorage</code> behaves differently when modification of <code>AsyncLocalStorage</code> was performed at different positions in an async function body. Matteo could expand in detail about his original use case but as I talked to him in private I think <code>AsyncLocalStorage.run</code> could satisfy his needs. Let's wait if he wants to expand on it on the issue.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XrZbGYOqQGCg2sHQO56Nj-VNDxiyQ5a7b-G6IC0vxWw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716284903757,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$MsXSOLq5NczYLojxrruw04IZL97TRTnAIKrELwNXFE4"},
{"content":{"body":" * The issue was confusing for it's use on `enterWith` and performance optimization that make an `AsyncLocalStorage` behaves differently when modification of `AsyncLocalStorage` was performed at different positions in an async function body. Let's wait to see if Matteo wants to expand on his original requirement on the issue.","format":"org.matrix.custom.html","formatted_body":" * The issue was confusing for it's use on <code>enterWith</code> and performance optimization that make an <code>AsyncLocalStorage</code> behaves differently when modification of <code>AsyncLocalStorage</code> was performed at different positions in an async function body. Let's wait to see if Matteo wants to expand on his original requirement on the issue.","m.mentions":{},"m.new_content":{"body":"The issue was confusing for it's use on `enterWith` and performance optimization that make an `AsyncLocalStorage` behaves differently when modification of `AsyncLocalStorage` was performed at different positions in an async function body. Let's wait to see if Matteo wants to expand on his original requirement on the issue.","format":"org.matrix.custom.html","formatted_body":"The issue was confusing for it's use on <code>enterWith</code> and performance optimization that make an <code>AsyncLocalStorage</code> behaves differently when modification of <code>AsyncLocalStorage</code> was performed at different positions in an async function body. Let's wait to see if Matteo wants to expand on his original requirement on the issue.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XrZbGYOqQGCg2sHQO56Nj-VNDxiyQ5a7b-G6IC0vxWw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716284990888,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$-_iP2YFlYB-WuyKe0VBZlbTbu-ToCLDzrGsh_VJMm6E"},
{"content":{"body":"Python also does the plain map with a set/get and manages context scopes on its own. https://docs.python.org/3/library/contextvars.html","m.mentions":{},"msgtype":"m.text"},"ts":1716285050980,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$f9RoiEmyAj4x_u2_ey1SEoWsZuXH4oPRWv0BSxe547I"},
{"content":{"body":"As far as I'm aware, JavaScript is the _only_ language that thinks (for some reason) that this needs to be handed over to the user rather than just letting them modify the _current_ scope.","format":"org.matrix.custom.html","formatted_body":"As far as I'm aware, JavaScript is the <em>only</em> language that thinks (for some reason) that this needs to be handed over to the user rather than just letting them modify the <em>current</em> scope.","m.mentions":{},"msgtype":"m.text"},"ts":1716285100135,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$viD47ZgGuioaZuRY7kJvyDcyWN9MIIdVUmVNJwzvlWw"},
{"content":{"body":"Probably because we had bad experiences with domains in Node.js. But I think that's less a problem of set/get and more that domains itself was just bad. ðŸ˜¬","m.mentions":{},"msgtype":"m.text"},"ts":1716285151215,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$1jynYcxbapQJyS3Zg4VSYBR725KQpG6fAn7AjCgu7qg"},
{"content":{"body":"> <@stephenbelanger:matrix.org> As far as I'm aware, JavaScript is the _only_ language that thinks (for some reason) that this needs to be handed over to the user rather than just letting them modify the _current_ scope.\n\nin Rust, there's tokio's `task_local!` / `LocalKey`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$viD47ZgGuioaZuRY7kJvyDcyWN9MIIdVUmVNJwzvlWw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>As far as I'm aware, JavaScript is the <em>only</em> language that thinks (for some reason) that this needs to be handed over to the user rather than just letting them modify the <em>current</em> scope.</blockquote></mx-reply>in Rust, there's tokio's <code>task_local!</code> / <code>LocalKey</code>","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$viD47ZgGuioaZuRY7kJvyDcyWN9MIIdVUmVNJwzvlWw"}},"msgtype":"m.text"},"ts":1716285166918,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Jn1FbSzNbwHASKMJjo8t_6Pht16GaInaG1IFOqIB8S0"},
{"content":{"body":"which doesn't let you modify the current scope","m.mentions":{},"msgtype":"m.text"},"ts":1716285176660,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$u0njNb5egAQ8ZFk33tWy3Z2JHinJW8DdS8qJ3mPGOyg"},
{"content":{"body":"> <@stephenbelanger:matrix.org> .NET also has AsyncLocal, which is basically exactly what was originally proposed in Node.js _before_ AsyncLocalStorage was chosen instead, because people didn't trust the Node.js runtime to manage scopes correctly. https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-8.0\n\nhttps://dotnetfiddle.net/7ulHg0 AFAICT dotnet doesn't flow-through values even it allows `.set` pattern","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$jTA6uMEeIOum5o14v9982GMBG98pkb_h49c8td1_rMA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>.NET also has AsyncLocal, which is basically exactly what was originally proposed in Node.js <em>before</em> AsyncLocalStorage was chosen instead, because people didn't trust the Node.js runtime to manage scopes correctly. https://learn.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-8.0</blockquote></mx-reply>https://dotnetfiddle.net/7ulHg0 AFAICT dotnet doesn't flow-through values even it allows <code>.set</code> pattern","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jTA6uMEeIOum5o14v9982GMBG98pkb_h49c8td1_rMA"}},"msgtype":"m.text"},"ts":1716285212579,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$OGRrElpDl-mmSb221RJdIvelMhHq_a9VmLMXU0dRKAM"},
{"content":{"body":"Yep, flow-through is a different issue from the matter of if set/get are reasonable. I mostly brought that up because of James talking about that split idea.","m.mentions":{},"msgtype":"m.text"},"ts":1716285294692,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$hBuNCxChVy_nIrxu1P7Q_9Hv8sJyskUxGxdZOT2mmBs"},
{"content":{"body":"That's great. I really appreciate distinguishing the two topics","m.mentions":{},"msgtype":"m.text"},"ts":1716285322934,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$Z-4WYHrN1F7VlxUMaLrQoFG3HIq_-gRnHTlOxnAQQEY"},
{"content":{"body":"But I think what would probably actually _make sense_ is to just have multiple context types which work in the set/get mode and use the two types to differentiate the flows.","format":"org.matrix.custom.html","formatted_body":"But I think what would probably actually <em>make sense</em> is to just have multiple context types which work in the set/get mode and use the two types to differentiate the flows.","m.mentions":{},"msgtype":"m.text"},"ts":1716285338682,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$C6RrL53vCX373vKFbj5r683qnixOgydHTcFY55j_3cE"},
{"content":{"body":"One can be a \"modify current context and flow into children only\" type while the other can be \"modify for any logically following execution\" type.","m.mentions":{},"msgtype":"m.text"},"ts":1716285383557,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$vOt8JaR-1jbfxvtpe5ysiE5oFkrPZ5i5FXtCDNnuRFM"},
{"content":{"body":"I think `ContinuationLocal` clear describes the logical execution flow style. I feel like the `AsyncLocal` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":"I think <code>ContinuationLocal</code> clear describes the logical execution flow style. I feel like the <code>AsyncLocal</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows so we aren't creating confusion?","m.mentions":{},"msgtype":"m.text"},"ts":1716287286331,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$FwzourmzRu65nHVmccPeQ5BKZepslz_ALWJu5d-cT2I"},
{"content":{"body":" * I think `ContinuationContext` clear describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":" * I think <code>ContinuationContext</code> clear describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows so we aren't creating confusion?","m.mentions":{},"m.new_content":{"body":"I think `ContinuationContext` clear describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":"I think <code>ContinuationContext</code> clear describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows so we aren't creating confusion?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FwzourmzRu65nHVmccPeQ5BKZepslz_ALWJu5d-cT2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716287339940,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$WH72RukBTJvF7C5Dsg940QxrcgPrXQD-_pYvtOtfUKY"},
{"content":{"body":" * I think `ContinuationContext` clearly describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":" * I think <code>ContinuationContext</code> clearly describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows so we aren't creating confusion?","m.mentions":{},"m.new_content":{"body":"I think `ContinuationContext` clearly describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":"I think <code>ContinuationContext</code> clearly describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows so we aren't creating confusion?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FwzourmzRu65nHVmccPeQ5BKZepslz_ALWJu5d-cT2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716287347439,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$nUht793ySM08TKvfkYN6s9ZRB70mLAQkY5s0xgXZuks"},
{"content":{"body":" * I think `ContinuationContext` clearly describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows through async code so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":" * I think <code>ContinuationContext</code> clearly describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows through async code so we aren't creating confusion?","m.mentions":{},"m.new_content":{"body":"I think `ContinuationContext` clearly describes the logical execution flow style. I feel like the `AsyncContext` name is a bit vague about exactly _how_ it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly _how_ it flows through async code so we aren't creating confusion?","format":"org.matrix.custom.html","formatted_body":"I think <code>ContinuationContext</code> clearly describes the logical execution flow style. I feel like the <code>AsyncContext</code> name is a bit vague about exactly <em>how</em> it flows through async behaviour though. I wonder if we should consider a name which more clearly communicates exactly <em>how</em> it flows through async code so we aren't creating confusion?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FwzourmzRu65nHVmccPeQ5BKZepslz_ALWJu5d-cT2I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716287369856,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$VHmn7P22NDgsjILRIHYX8GZGJgmBrFTezMx225LhaRI"},
{"content":{"body":"I wonder if we need the \"async\" in the name at all. `CallContext` might communicate the flow semantics better? Or even `ImplicitCallContext` to make it even _more_ clear that this is data which gets passed around without needing to do so explicitly? ðŸ¤”","format":"org.matrix.custom.html","formatted_body":"I wonder if we need the \"async\" in the name at all. <code>CallContext</code> might communicate the flow semantics better? Or even <code>ImplicitCallContext</code> to make it even <em>more</em> clear that this is data which gets passed around without needing to do so explicitly? ðŸ¤”","m.mentions":{},"msgtype":"m.text"},"ts":1716287509558,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$wPDwiDBDNqiCVPf7ZYYM4vIvWbI-uOdLA6377G5zBpY"}
]