[
{"content":{"body":"* I'm not even sure if per-store configurability (if it's a global default to push things in the call/resolve-time vs registration-time direction in the cases where both are available) will be a solution; sometimes you want the registration-time ancestor of the call-time ancestor","m.new_content":{"body":"I'm not even sure if per-store configurability (if it's a global default to push things in the call/resolve-time vs registration-time direction in the cases where both are available) will be a solution; sometimes you want the registration-time ancestor of the call-time ancestor","msgtype":"m.text"},"m.relates_to":{"event_id":"$ryBuQY1TAk-YaTynFMThn1qNuIQuUtSiUuqvXk4jzFM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716257431037,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XBazbfVz7CKB5_Ld08XJq-u9gZbWOxutxIt7O-UgZtk"},
{"content":{"body":"Wow, this really blew up over the last few days","msgtype":"m.text"},"ts":1716265940824,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IWsipWsPkVjZi22So4B-r8-o4n5ftZs2rSZOA837Q4E"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It's not _just_ the timing of enabling PromiseHook. It is that the portion of an async function _before_ the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.\n\nI don’t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesn’t matter where the awaits are.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM\">In reply to</a><a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@stephenbelanger:matrix.org</a><br />It's not <em>just</em> the timing of enabling PromiseHook. It is that the portion of an async function <em>before</em> the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.</blockquote></mx-reply>I don’t understand this. What are the inner and outer awaits? In my mind, the async context is bound when we enter the function, it doesn’t matter where the awaits are.","m.relates_to":{"m.in_reply_to":{"event_id":"$e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM"}},"msgtype":"m.text"},"ts":1716266048689,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$J7GW2rvBLD-Z0CAn67XpYnYGS6silxRBjuVKrDCCaIY"},
{"content":{"body":"> <@legendecas:matrix.org> The proposal as it current stands is maintaining the lexical consistent value inside a async function body across `await` for `AsyncContext.Variable`, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.\n\nExactly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ\">In reply to</a><a href=\"https://matrix.to/#/%40legendecas%3Amatrix.org\">@legendecas:matrix.org</a><br />The proposal as it current stands is maintaining the lexical consistent value inside a async function body across <code>await</code> for <code>AsyncContext.Variable</code>, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.</blockquote></mx-reply>Exactly.","m.relates_to":{"m.in_reply_to":{"event_id":"$S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ"}},"msgtype":"m.text"},"ts":1716266075911,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ht1_uQvSu-IQ2SaA-apuv7lUmTJC4sDWNZo07uijGJs"}
]