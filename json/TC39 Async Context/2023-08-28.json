[
{"content":{"body":"> <@abotella:igalia.com> I think if we want this, and we also want `promise.then()` with no arguments to not catch the current snapshot, we would need to add a new slot to promises\n\nI don't have a strong intuition for what would be the \"best\" semantics in this case, but I think `then()` is the kind of case where people who do such a strange thing should \"take what they get\" rather than us adding complexity for that particular case. If we didn't add a new slot to promises, what semantics would fall out/be possible?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$VnPQdq3LgfLSVyQ_B7zIDc9knvGidkFFUITPpZdR8zM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I think if we want this, and we also want <code>promise.then()</code> with no arguments to not catch the current snapshot, we would need to add a new slot to promises</blockquote></mx-reply>I don't have a strong intuition for what would be the \"best\" semantics in this case, but I think <code>then()</code> is the kind of case where people who do such a strange thing should \"take what they get\" rather than us adding complexity for that particular case. If we didn't add a new slot to promises, what semantics would fall out/be possible?","m.relates_to":{"m.in_reply_to":{"event_id":"$VnPQdq3LgfLSVyQ_B7zIDc9knvGidkFFUITPpZdR8zM"}},"msgtype":"m.text"},"ts":1693183803583,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0g1vdlikEVQ8bKTi1SNS07r5dwaBAvH6hr9cTRND6uw"},
{"content":{"body":"why is writing `.then()` a strange thing?","format":"org.matrix.custom.html","formatted_body":"why is writing <code>.then()</code> a strange thing?","msgtype":"m.text"},"ts":1693200848600,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BbzH76O94FMoDUeLIBRBen9PC4wFzJgZxJK886S_keI"},
{"content":{"body":"Because usually you pass a function to it","msgtype":"m.text"},"ts":1693206221818,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$eZb_8hYhrC0YauMwJG6EXkUCK5bFCndlqvzCQZyKU08"},
{"content":{"body":"that also applies to passing a fulfillment handler without a rejection handler to `.then()`, I think","format":"org.matrix.custom.html","formatted_body":"that also applies to passing a fulfillment handler without a rejection handler to <code>.then()</code>, I think","msgtype":"m.text"},"ts":1693216446911,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$uKJVuT8wK6f5QQHJq8jvD8lz7EWfjaXwXb3-olfpnyQ"},
{"content":{"body":" * you have the same issue when passing a fulfillment handler without a rejection handler to `.then()`, I think","format":"org.matrix.custom.html","formatted_body":" * you have the same issue when passing a fulfillment handler without a rejection handler to <code>.then()</code>, I think","m.new_content":{"body":"you have the same issue when passing a fulfillment handler without a rejection handler to `.then()`, I think","format":"org.matrix.custom.html","formatted_body":"you have the same issue when passing a fulfillment handler without a rejection handler to <code>.then()</code>, I think","msgtype":"m.text"},"m.relates_to":{"event_id":"$uKJVuT8wK6f5QQHJq8jvD8lz7EWfjaXwXb3-olfpnyQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693216468202,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Y_R-sIosU4E5AVESJ27HKxpv2QrQD7lYAzYDzWeymFY"},
{"content":{"body":"> do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think _both_ semantics (promise-init and reject-call) should have the same context here","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think <em>both</em> semantics (promise-init and reject-call) should have the same context here</p>\n","msgtype":"m.text"},"ts":1693250231127,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$h66-85qO8wIzGYxVqR5eX2clEd2gOlNNgvu3nPbk4kQ"},
{"content":{"body":" * > do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both_semantics (promise-init and reject-call) should have the same context here","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both_semantics (promise-init and reject-call) should have the same context here</p>\n","m.new_content":{"body":"> do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both_semantics (promise-init and reject-call) should have the same context here","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both_semantics (promise-init and reject-call) should have the same context here</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$h66-85qO8wIzGYxVqR5eX2clEd2gOlNNgvu3nPbk4kQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693250259792,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BG1YJaK1b5EGVcAymMkO_sN9rvU6loFS_VsNNpmkj8U"},
{"content":{"body":" * > do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both\\_semantics (promise-init and reject-call) should have the same snapshot here","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both_semantics (promise-init and reject-call) should have the same snapshot here</p>\n","m.new_content":{"body":"> do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both\\_semantics (promise-init and reject-call) should have the same snapshot here","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both_semantics (promise-init and reject-call) should have the same snapshot here</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$h66-85qO8wIzGYxVqR5eX2clEd2gOlNNgvu3nPbk4kQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693250270636,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KiXcesaNUvhJJ8LyWYaBjMjpuPse1ZbSffZijBWuU00"},
{"content":{"body":"> If we didn't add a new slot to promises, what semantics would fall out/be possible?\n\nI think capturing the same context is trivially done? Like, literally no work is required, it just falls out of the current specification (once we fix the bug). This is the same for both init and call time semantics.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>If we didn't add a new slot to promises, what semantics would fall out/be possible?</p>\n</blockquote>\n<p>I think capturing the same context is trivially done? Like, literally no work is required, it just falls out of the current specification (once we fix the bug). This is the same for both init and call time semantics.</p>\n","msgtype":"m.text"},"ts":1693250340405,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VxsremRhRWXFFUhksns-hFl5lOhcFnPFmffeE31sdp4"},
{"content":{"body":" * > do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both semantics (promise-init and reject-call) should have the same snapshot here","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both semantics (promise-init and reject-call) should have the same snapshot here</p>\n","m.new_content":{"body":"> do you expect the unhandledrejection listener to be always called with the same snapshot?\n\nYes, I think both semantics (promise-init and reject-call) should have the same snapshot here","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>do you expect the unhandledrejection listener to be always called with the same snapshot?</p>\n</blockquote>\n<p>Yes, I think both semantics (promise-init and reject-call) should have the same snapshot here</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$h66-85qO8wIzGYxVqR5eX2clEd2gOlNNgvu3nPbk4kQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693250377805,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EKuI8AfDRxHc4bXXbGSBKgr4Md813Q053MK-F13GaTI"},
{"content":{"body":"> <@abotella:igalia.com> you have the same issue when passing a fulfillment handler without a rejection handler to `.then()`, I think\n\nSorry, could you summarize what the issue is and what the semantics would be if you didn't do anything special?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$uKJVuT8wK6f5QQHJq8jvD8lz7EWfjaXwXb3-olfpnyQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>you have the same issue when passing a fulfillment handler without a rejection handler to <code>.then()</code>, I think</blockquote></mx-reply>Sorry, could you summarize what the issue is and what the semantics would be if you didn't do anything special?","m.relates_to":{"m.in_reply_to":{"event_id":"$uKJVuT8wK6f5QQHJq8jvD8lz7EWfjaXwXb3-olfpnyQ"}},"msgtype":"m.text"},"ts":1693250432777,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ULMd76XjHahda5GScZOwDUci3PliziP9U1OPfViLYAs"},
{"content":{"body":"probably if you give an example of a usage of `.then(cb)` it'll feel less obscure to me","format":"org.matrix.custom.html","formatted_body":"probably if you give an example of a usage of <code>.then(cb)</code> it'll feel less obscure to me","msgtype":"m.text"},"ts":1693250462053,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ihrUKevMuIQulmwOHlg4V5hxCnwiDM_j8v2f9VXDWcI"},
{"content":{"body":"> <@jridgewell:matrix.org> > If we didn't add a new slot to promises, what semantics would fall out/be possible?\n> \n> I think capturing the same context is trivially done? Like, literally no work is required, it just falls out of the current specification (once we fix the bug). This is the same for both init and call time semantics.\n\nThis is what I expected; are we anticipating any problems with fixing the bug? I mean, I thought the fix did not lead to a snapshot associated with the promise","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$VxsremRhRWXFFUhksns-hFl5lOhcFnPFmffeE31sdp4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><blockquote>\n<p>If we didn't add a new slot to promises, what semantics would fall out/be possible?</p>\n</blockquote>\n<p>I think capturing the same context is trivially done? Like, literally no work is required, it just falls out of the current specification (once we fix the bug). This is the same for both init and call time semantics.</p>\n</blockquote></mx-reply>This is what I expected; are we anticipating any problems with fixing the bug? I mean, I thought the fix did not lead to a snapshot associated with the promise","m.relates_to":{"m.in_reply_to":{"event_id":"$VxsremRhRWXFFUhksns-hFl5lOhcFnPFmffeE31sdp4"}},"msgtype":"m.text"},"ts":1693250504962,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OrRwNbnqEpCuN8D5M-JR9ahfIYLlzld9G-lXjs55lew"},
{"content":{"body":"I don't anticipate any issues. The snapshot must be restored to the global state before calling the `unhandledrejection` handler, and the promise will be rejected within that tick, so it should just get the context from the global state like everything else.","format":"org.matrix.custom.html","formatted_body":"I don't anticipate any issues. The snapshot must be restored to the global state before calling the <code>unhandledrejection</code> handler, and the promise will be rejected within that tick, so it should just get the context from the global state like everything else.","msgtype":"m.text"},"ts":1693250629140,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$duIiyhf-JZtXIlue9pgEUgZvPIjnXB-n6YeLsJOk7h0"},
{"content":{"body":"I'm not sure I fully understand all of the semantics that we want for `unhandledrejection`","format":"org.matrix.custom.html","formatted_body":"I'm not sure I fully understand all of the semantics that we want for <code>unhandledrejection</code>","msgtype":"m.text"},"ts":1693256554876,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bykl73djQxTA7LSYupQxuUbRU1jzVb4aAK0evSEGQNg"},
{"content":{"body":"my understanding was that the async context in which `HostPromiseRejectionTracker(promise, \"reject\")` should be called is the context in which the rejection of this promise was ultimately caused, even if that was in a different promise which caused the current promise to reject via reactions","format":"org.matrix.custom.html","formatted_body":"my understanding was that the async context in which <code>HostPromiseRejectionTracker(promise, \"reject\")</code> should be called is the context in which the rejection of this promise was ultimately caused, even if that was in a different promise which caused the current promise to reject via reactions","msgtype":"m.text"},"ts":1693256707369,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Xjty45WFr_lpMx-5V8mnA-ZtELTMNp4PRrmBJjMF6MU"},
{"content":{"body":"```js\nconst unhandledPromise1 = asyncVar.run(\"foo\", () => Promise.reject());\nconst unhandledPromise2 = unhandledPromise1.then(() => console.log(\"Not reached\"));\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const unhandledPromise1 = asyncVar.run(\"foo\", () =&gt; Promise.reject());\nconst unhandledPromise2 = unhandledPromise1.then(() =&gt; console.log(\"Not reached\"));\n</code></pre>\n","msgtype":"m.text"},"ts":1693256779163,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BEfdD4O5CC7CriQ0BCfLhg-cFEJK-AA67zFBB230v3I"},
{"content":{"body":"so when `unhandledrejection` is fired for `unhandledPromise2`, `asyncVar.get() === \"foo\"`","format":"org.matrix.custom.html","formatted_body":"so when <code>unhandledrejection</code> is fired for <code>unhandledPromise2</code>, <code>asyncVar.get() === \"foo\"</code>","msgtype":"m.text"},"ts":1693256800273,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$zM6W64apxIMpblOvkpWrNn6dIe9yCodJ4qrvkEXrTk0"},
{"content":{"body":" * so that when `unhandledrejection` is fired for `unhandledPromise2`, `asyncVar.get() === \"foo\"`","format":"org.matrix.custom.html","formatted_body":" * so that when <code>unhandledrejection</code> is fired for <code>unhandledPromise2</code>, <code>asyncVar.get() === \"foo\"</code>","m.new_content":{"body":"so that when `unhandledrejection` is fired for `unhandledPromise2`, `asyncVar.get() === \"foo\"`","format":"org.matrix.custom.html","formatted_body":"so that when <code>unhandledrejection</code> is fired for <code>unhandledPromise2</code>, <code>asyncVar.get() === \"foo\"</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$zM6W64apxIMpblOvkpWrNn6dIe9yCodJ4qrvkEXrTk0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693256806122,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fh-29LvRKQQ2SNLWpqQszt5SVZcl0OYqGVPEIWllVCg"},
{"content":{"body":"if that is the expected behavior, then that should also hold even if the `unhandledrejection` for `unhandledPromise1` has already been called by the time `unhandledPromise2` is created","format":"org.matrix.custom.html","formatted_body":"if that is the expected behavior, then that should also hold even if the <code>unhandledrejection</code> for <code>unhandledPromise1</code> has already been called by the time <code>unhandledPromise2</code> is created","msgtype":"m.text"},"ts":1693256868093,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$5HIC0YH0eqsThIZ9dVPnXqp76fzGoF6drYVOE8ht-C8"},
{"content":{"body":"and therefore the `\"foo\"` snapshot must be stored somewhere","format":"org.matrix.custom.html","formatted_body":"and therefore the <code>\"foo\"</code> snapshot must be stored somewhere","msgtype":"m.text"},"ts":1693256888171,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$JdPMx4hbGi_BUebn6VyKTrHH0pSjEvpC_L-K8yix5VY"},
{"content":{"body":"currently that snapshot isn't stored anywhere after `unhandledPromise1` because there are no promise jobs created","format":"org.matrix.custom.html","formatted_body":"currently that snapshot isn't stored anywhere after <code>unhandledPromise1</code> because there are no promise jobs created","msgtype":"m.text"},"ts":1693256984219,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$y9a2Usqse76_u0W8QHt_aH_SZWtLuUOYJtJUH61w62o"},
{"content":{"body":" * currently that snapshot isn't stored anywhere after `unhandledPromise1` because there are no promise jobs created inside the `.run` callback","format":"org.matrix.custom.html","formatted_body":" * currently that snapshot isn't stored anywhere after <code>unhandledPromise1</code> because there are no promise jobs created inside the <code>.run</code> callback","m.new_content":{"body":"currently that snapshot isn't stored anywhere after `unhandledPromise1` because there are no promise jobs created inside the `.run` callback","format":"org.matrix.custom.html","formatted_body":"currently that snapshot isn't stored anywhere after <code>unhandledPromise1</code> because there are no promise jobs created inside the <code>.run</code> callback","msgtype":"m.text"},"m.relates_to":{"event_id":"$y9a2Usqse76_u0W8QHt_aH_SZWtLuUOYJtJUH61w62o","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1693257102548,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$_pA27KNhMfnYOf0-A4Q1J-7edsnRa1dDUVWuIvCpnMU"},
{"content":{"body":"but maybe calling `Promise.p.then` should always use the current snapshot at the time of the call, even for unhandledrejection","format":"org.matrix.custom.html","formatted_body":"but maybe calling <code>Promise.p.then</code> should always use the current snapshot at the time of the call, even for unhandledrejection","msgtype":"m.text"},"ts":1693257425472,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bH2u2mQAydGkUdQtUnYhLfAiA_w1hIdcpNGXjbARFQY"},
{"content":{"body":"> so that when unhandledrejection is fired for unhandledPromise2, asyncVar.get() === \"foo\"\n\nThis is incorrect. The reaction that creates `p2` has escaped the `foo` context, so it will only see `undefined`. Even with init-time `unhandledrejection` semantics, that wouldn't change. If we eliminate the promise reaction slot and instead store on the promise, `p2` would see `foo`.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>so that when unhandledrejection is fired for unhandledPromise2, asyncVar.get() === \"foo\"</p>\n</blockquote>\n<p>This is incorrect. The reaction that creates <code>p2</code> has escaped the <code>foo</code> context, so it will only see <code>undefined</code>. Even with init-time <code>unhandledrejection</code> semantics, that wouldn't change. If we eliminate the promise reaction slot and instead store on the promise, <code>p2</code> would see <code>foo</code>.</p>\n","msgtype":"m.text"},"ts":1693257446075,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pjmL33BtP_Lp6dc_2S80h4plz6FNEx90auo-Ie8JK7Y"},
{"content":{"body":"(I'm using `p1` and `p2` because `unhandledPromise1` is too much)","format":"org.matrix.custom.html","formatted_body":"(I'm using <code>p1</code> and <code>p2</code> because <code>unhandledPromise1</code> is too much)","msgtype":"m.text"},"ts":1693257485200,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2JzwREHJ64FGS1txFpGk-hJRJwRZfljlXyFuG_Hq9UI"},
{"content":{"body":"> if that is the expected behavior, then that should also hold even if the unhandledrejection for unhandledPromise1 has already been called by the time unhandledPromise2 is created\n\n`unhandledrejection` execution is special if we use init-time rejection semantics, because it will copy the promise's snapshot slot into global storage before executing","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>if that is the expected behavior, then that should also hold even if the unhandledrejection for unhandledPromise1 has already been called by the time unhandledPromise2 is created</p>\n</blockquote>\n<p><code>unhandledrejection</code> execution is special if we use init-time rejection semantics, because it will copy the promise's snapshot slot into global storage before executing</p>\n","msgtype":"m.text"},"ts":1693257565621,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pO1MBHHeaqhUnvwXfv7y0e6wuCPFEGb8dZZ1AJG4mUU"},
{"content":{"body":"I am not really familiar with V8's promise hooks, and since much of this unhandledrejection has been framed in those terms, I should probably familiarize myself with them first","msgtype":"m.text"},"ts":1693257676103,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dz1yfviQEvRQvXcu6yapY1xlMT91O6_SjZDrK9yUqxA"},
{"content":{"body":"If we use call-time semantics, then `unhandledrejection` isn't any different then `rejected.then(() => handleRejection(…))`, where `handledRejection` returns another rejected promise/throw completion","format":"org.matrix.custom.html","formatted_body":"If we use call-time semantics, then <code>unhandledrejection</code> isn't any different then <code>rejected.then(() =&gt; handleRejection(…))</code>, where <code>handledRejection</code> returns another rejected promise/throw completion","msgtype":"m.text"},"ts":1693257676798,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Fs1kVRGPSEwfPhx-DcHxD0oYeKt9jUvojtwSxHjEoIE"},
{"content":{"body":"because I think otherwise there's a lot of semantics that I'm missing","msgtype":"m.text"},"ts":1693257685713,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Jej1SEm2g_okicHeUd24Ls_R_bZ-KDztw1ZD8EAb5mk"},
{"content":{"body":"Do you mean async hooks?","msgtype":"m.text"},"ts":1693257741030,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mpbIpiwH5hqX2uDvlPXWB0CtDmgyX1KWhtf6cTZoXog"},
{"content":{"body":"either, I guess","msgtype":"m.text"},"ts":1693257752366,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lHUq09FtiyZmmb0uVjrMxPQM1SL9ghH8IRxFa1MAo2I"},
{"content":{"body":"but I guess I had been assuming some behavior was expected when it wasn't","msgtype":"m.text"},"ts":1693257804305,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Gnb8zzLfY60-zJJxobEuSYW2vX8EBATsyjuosS_pDDw"}
]