[
{"content":{"body":"I'm very skeptical of the callingContext direction. I'm sorry that I missed the last AsyncContext call, but I think we should discuss this further among ourselves before making it the focus of the presentation next week. Let's focus on the things that are settled. We can briefly mention that we're working on the HTML integration, and this is one idea that's been floated, but it's still very early and we're just beginning to consider it.","m.mentions":{},"msgtype":"m.text"},"ts":1712152655840,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hBMIYffRRhfMcU6-YbwHkoqFXuuoqu3as7yE6FCRP7k"},
{"content":{"body":"One piece of complexity is that there are actually more than two plausibly relevant snapshots, as this comment alluded to: https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2034251830","m.mentions":{},"msgtype":"m.text"},"ts":1712152724562,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fi4YQteqYyQ0eyI6Gkb7OdDTxqMUcep7C9DtOono9Ng"},
{"content":{"body":"another issue is that it doesn't remove the need for us to develop opinions about how HTML integration works--we still need to figure out the default semantics, which is what most people will be using most of the time.","m.mentions":{},"msgtype":"m.text"},"ts":1712152767044,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mwmrTlMmLXVkiE0Quu0dD9xd6fPN_SVjJ4ly7NYfLM8"},
{"content":{"body":"If this is presented in committee, we'll end up spending a bunch of time arguing among ourselves. But that would be a disservice to the proposal--we've made so much progress, and we should be focusing on explaining that.","m.mentions":{},"msgtype":"m.text"},"ts":1712152802526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zGmGvQULZsx1OPdnsT7Ub2G0WgL8yDany8_MUelb3Kc"},
{"content":{"body":" * If this the focus of the presentation in committee, we'll end up spending a bunch of time arguing among ourselves. But that would be a disservice to the proposal--we've made so much progress, and we should be focusing on explaining that.","m.mentions":{},"m.new_content":{"body":"If this the focus of the presentation in committee, we'll end up spending a bunch of time arguing among ourselves. But that would be a disservice to the proposal--we've made so much progress, and we should be focusing on explaining that.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$zGmGvQULZsx1OPdnsT7Ub2G0WgL8yDany8_MUelb3Kc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712153010911,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B1NV7cGAcac6XnzYeISE0U6qblps7EN1O-Cizp1SjOI"},
{"content":{"body":"fine to mention it a bit (I wouldn't if I were presenting, but it's fine for us to disagree), but it would be premature to focus on it IMO","m.mentions":{},"msgtype":"m.text"},"ts":1712153041515,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IGwXH7Hl9NjXB92KyOlZ2UNeI5exw8oxKUYXvrvqchI"},
{"content":{"body":"Events dispatched from JS seem to be a very special case. What if we ran almost all events in registration snapshot, but for events dispatched from JS, sent the snapshot from that point in JS as a property on the event?","m.mentions":{},"msgtype":"m.text"},"ts":1712154022879,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$T5jh9hIi_vQpdEAxP6_mnMM-YXvA903KLqG3pBtCkXY"},
{"content":{"body":"I chatted with Matteo Collina about the feature and he shared my skepticism of the multiple-context approach","m.mentions":{},"msgtype":"m.text"},"ts":1712158804939,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Scwg-mhsEaith4iG5lAcSqjn-oODbYiqNbgfnTy2zb4"},
{"content":{"body":"he suggested focusing on thinking through concrete examples","m.mentions":{},"msgtype":"m.text"},"ts":1712158824615,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$H_cK5dNULPtphl6PXmM0Ld8LzUi5RkXkzbzXvUAjx7s"},
{"content":{"body":"As an example of where a third context may be relevant: XHR's `send()` context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple `send()`s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where it's relevant?","format":"org.matrix.custom.html","formatted_body":"As an example of where a third context may be relevant: XHR's <code>send()</code> context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple <code>send()</code>s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where it's relevant?","m.mentions":{},"msgtype":"m.text"},"ts":1712167031241,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$qd6x4gs59lK9nt98blx8E1IvJvlGigpFybAls8dtNQo"},
{"content":{"body":" * As an example of where a third context may be relevant: XHR's `send()` context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple `send()`s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where there's a third relevant context?","format":"org.matrix.custom.html","formatted_body":" * As an example of where a third context may be relevant: XHR's <code>send()</code> context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple <code>send()</code>s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where there's a third relevant context?","m.mentions":{},"m.new_content":{"body":"As an example of where a third context may be relevant: XHR's `send()` context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple `send()`s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where there's a third relevant context?","format":"org.matrix.custom.html","formatted_body":"As an example of where a third context may be relevant: XHR's <code>send()</code> context is neither the registration context nor the (null) calling context, and I don't see a good way to push that into the listener.  I think it only matters in cases where the XHR is being reused - one listener with multiple <code>send()</code>s.  Between that condition and XHR being somewhat obsolete, this ay not be a very big deal.  Can someone lay out other examples where there's a third relevant context?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qd6x4gs59lK9nt98blx8E1IvJvlGigpFybAls8dtNQo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712167043151,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$DpqBezOqOqUZBoX4qKkx1j7Ucd446RhMrovszMkyyN0"},
{"content":{"body":"As far as I'm aware, every time that a third context is relevant, it's because the (synchronous) call-time context would be empty","m.mentions":{},"msgtype":"m.text"},"ts":1712167104053,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$QshcGpJaSqyVISwwtch-_1l3mfWD1Cp_MjKuOiLCyb0"},
{"content":{"body":"So it could still be (call-time or async relevant context) vs registration-time","m.mentions":{},"msgtype":"m.text"},"ts":1712167170862,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Y6tvcPHj69td1znt_zjqvUZ2blyjmUBTGUxVpTqaEpw"},
{"content":{"body":"Thinking a little more about `callingContext`, I'm not sure it actually addresses the generator issue all that much better than the hacky wrapper I suggested in https://github.com/tc39/proposal-async-context/issues/18#issuecomment-2015669860","format":"org.matrix.custom.html","formatted_body":"Thinking a little more about <code>callingContext</code>, I'm not sure it actually addresses the generator issue all that much better than the hacky wrapper I suggested in https://github.com/tc39/proposal-async-context/issues/18#issuecomment-2015669860","m.mentions":{},"msgtype":"m.text"},"ts":1712167213382,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$G09TIp3JLcu4kjnpnwe9wO0bykPhctMygBUPylAlA-Y"},
{"content":{"body":"I.e. I don't think it's actually possible to write a wrapper that would \"just work\" without having to bend over backwards within the generator body to access the calling context instead","m.mentions":{},"msgtype":"m.text"},"ts":1712167269241,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$mMXqu1n0EKgXj-D0zqF9P90edlvfXujUo9cLyIMLZm0"},
{"content":{"body":"That said, my main motivating use case for calling context is tracing with multi-use callbacks.  Any time you're registering a multi-use callback, it's very likely that you care more about the calling context than the registration context.  I don't have much in the way of builtin API examples, though if https://github.com/proposal-signals/proposal-signals were to move forward and ended up using registration context for effects, then that would certainly end up being an adoption blocker if we couldn't access the calling context.","m.mentions":{},"msgtype":"m.text"},"ts":1712167573954,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$qurDX0ocew9plFaC4lfYmbySHytrhav-uGiO3ZVT8ZI"},
{"content":{"body":" * That said, my main motivating use case for calling context is tracing with multi-use callbacks (i.e. expected to be run multiple times).  Any time you're registering a multi-use callback, it's very likely that you care more about the calling context than the registration context.  I don't have much in the way of builtin API examples, though if https://github.com/proposal-signals/proposal-signals were to move forward and ended up using registration context for effects, then that would certainly end up being an adoption blocker if we couldn't access the calling context.","m.mentions":{},"m.new_content":{"body":"That said, my main motivating use case for calling context is tracing with multi-use callbacks (i.e. expected to be run multiple times).  Any time you're registering a multi-use callback, it's very likely that you care more about the calling context than the registration context.  I don't have much in the way of builtin API examples, though if https://github.com/proposal-signals/proposal-signals were to move forward and ended up using registration context for effects, then that would certainly end up being an adoption blocker if we couldn't access the calling context.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$qurDX0ocew9plFaC4lfYmbySHytrhav-uGiO3ZVT8ZI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712167603028,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$3_KIvB2xUUv9UcjcYUWh7FvLo9a6_lHdXN00C7OU_4s"},
{"content":{"body":"I'm a little dubious about exposing the calling context as an event property - it seems like a more \"invasive\" change and it only handles one (though, admittedly, the biggest) API rather than providing something that could be used more generally.","m.mentions":{},"msgtype":"m.text"},"ts":1712167800420,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$4GjO4-HRZZl3M1BryzUHsVZxJnFMcqVLLE9PDx7Z6r0"},
{"content":{"body":"> <@littledan:matrix.org> another issue is that it doesn't remove the need for us to develop opinions about how HTML integration works--we still need to figure out the default semantics, which is what most people will be using most of the time.\n\nNo, but it  means that HTML is free to choose registration as the default choice even where there are 2 possible choices","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24mwmrTlMmLXVkiE0Quu0dD9xd6fPN_SVjJ4ly7NYfLM8\">In reply to</a><a href=\"https://matrix.to/#/%40littledan%3Amatrix.org\">@littledan:matrix.org</a><br />another issue is that it doesn&#39;t remove the need for us to develop opinions about how HTML integration works--we still need to figure out the default semantics, which is what most people will be using most of the time.</blockquote></mx-reply>No, but it  means that HTML is free to choose registration as the default choice even where there are 2 possible choices","m.relates_to":{"m.in_reply_to":{"event_id":"$mwmrTlMmLXVkiE0Quu0dD9xd6fPN_SVjJ4ly7NYfLM8"}},"msgtype":"m.text"},"ts":1712168055759,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CBJn8qGISAGnWnlhgtMAFve2hWnkdMFC49Ooj0P6nA8"}
]