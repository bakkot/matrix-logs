[
{"content":{"body":"Where are we in understanding https://github.com/tc39/proposal-async-context/issues/83 ?","m.mentions":{},"msgtype":"m.text"},"ts":1715621854525,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QlHQQVKD-M1wlCuKG6WQlL84p8Vur6FWibQTe3BhRA4"},
{"content":{"body":"I talked with Dean Tribble on Friday, picking his brain from his Midori experience. I think the conclusion is that there is no way to abstract \"calling\" context in an API shape like AsyncContext. The biggest problem is that the most recent calling context may not be the one you really need, that providing more than one would result in unbounded calling context history, and that it would expose some implementation details about the execution order of the \"callers\". For telemetry / debugging use cases, one approach is to gather points at certain key times. For promises for example, you can give them an ID and \"log\" when they are resolved (potentially to another promise), when reactions are added and executed, etc.. Then you can correlate all this and recompose your execution graph. this of course sounds very similar to async_hooks, and is too powerful of an API to expose to \"unprivileged\" code.","msgtype":"m.text"},"ts":1715625733150,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$PEWCklRsDU27NM8P0xFInM3f_3zRMEAWswzbrw9z_8M"},
{"content":{"body":"> <@mhofman:matrix.org> I talked with Dean Tribble on Friday, picking his brain from his Midori experience. I think the conclusion is that there is no way to abstract \"calling\" context in an API shape like AsyncContext. The biggest problem is that the most recent calling context may not be the one you really need, that providing more than one would result in unbounded calling context history, and that it would expose some implementation details about the execution order of the \"callers\". For telemetry / debugging use cases, one approach is to gather points at certain key times. For promises for example, you can give them an ID and \"log\" when they are resolved (potentially to another promise), when reactions are added and executed, etc.. Then you can correlate all this and recompose your execution graph. this of course sounds very similar to async_hooks, and is too powerful of an API to expose to \"unprivileged\" code.\n\nThis makes sense; thanks for the summary. What does Dean recommend that we do for AsyncContext?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$PEWCklRsDU27NM8P0xFInM3f_3zRMEAWswzbrw9z_8M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>I talked with Dean Tribble on Friday, picking his brain from his Midori experience. I think the conclusion is that there is no way to abstract &quot;calling&quot; context in an API shape like AsyncContext. The biggest problem is that the most recent calling context may not be the one you really need, that providing more than one would result in unbounded calling context history, and that it would expose some implementation details about the execution order of the &quot;callers&quot;. For telemetry / debugging use cases, one approach is to gather points at certain key times. For promises for example, you can give them an ID and &quot;log&quot; when they are resolved (potentially to another promise), when reactions are added and executed, etc.. Then you can correlate all this and recompose your execution graph. this of course sounds very similar to async_hooks, and is too powerful of an API to expose to &quot;unprivileged&quot; code.</blockquote></mx-reply>This makes sense; thanks for the summary. What does Dean recommend that we do for AsyncContext?","m.mentions":{"user_ids":["@mhofman:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PEWCklRsDU27NM8P0xFInM3f_3zRMEAWswzbrw9z_8M"}},"msgtype":"m.text"},"ts":1715627007968,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$u22Nt_le_etY1kfrGURMi3OMMbwGOGQsp1P1jH1rDcY"},
{"content":{"body":"\"just choose something for each case\" is the strategy that I was imagining; maybe too naive but it sounds like this is maybe what Dean is saying?","m.mentions":{},"msgtype":"m.text"},"ts":1715627041285,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nsVM4GwckF7gTVawJQh0sBoR6j81c1CYRCReW7TX6YE"},
{"content":{"body":"I'm wondering if there's any way we could expose \"just\" the necessary information to hook up the extra follows-from links, or distinguish child vs following links. I think Stephen Belanger may have been asking for one of these, though I'm not sure. Did you discuss this topic with Dean?","format":"org.matrix.custom.html","formatted_body":"I'm wondering if there's any way we could expose \"just\" the necessary information to hook up the extra follows-from links, or distinguish child vs following links. I think <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a> may have been asking for one of these, though I'm not sure. Did you discuss this topic with Dean?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"ts":1715627167309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IzFwlPJfzUl04WpoUKU8l3vfYbtaMUDtjzIOxf_EzqU"}
]