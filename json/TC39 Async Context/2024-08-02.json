[
{"content":{"body":"Congrats @stephenbelanger:matrix.org: https://github.com/nodejs/node/pull/48528#issuecomment-2266038177","format":"org.matrix.custom.html","formatted_body":"Congrats <a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@Stephen Belanger</a>: https://github.com/nodejs/node/pull/48528#issuecomment-2266038177","msgtype":"m.text"},"ts":1722628323078,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1ubwAIjJdItW_9w7K2fKCF75_gpkO4wi_rOw1jqzYIE"},
{"content":{"body":"Heh, that was quick. ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"ts":1722628365704,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$8JHzGzNzOWZTbZtNjIl_OhBkdcrAJOl9xjGXkAugGhU"},
{"content":{"body":"Last perf improvments were https://github.com/nodejs/node/pull/48528#issuecomment-2253643765","msgtype":"m.text"},"ts":1722628366277,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$P1dTmqifc6blKZj37WGL6DooNSOC71CTxPDFD9T45EM"},
{"content":{"body":"- `.get()` is ~50% faster regardless of the number of async resources\n- `.get()` is ~15% faster regardless of the number of nested `.run()` calls\n- Creating new async resources/promises is 50% to 1400% faster depending on number of resources\n    - Itâ€™s 2%-14% slower when no `Variable` are in use?","format":"org.matrix.custom.html","formatted_body":"<ol data-md=\"-\"><li><p><code data-md=\"`\">.get()</code> is ~50% faster regardless of the number of async resources</p></li><li><p><code data-md=\"`\">.get()</code> is ~15% faster regardless of the number of nested <code data-md=\"`\">.run()</code> calls</p></li><li><p>Creating new async resources/promises is 50% to 1400% faster depending on number of resources</p></li></ol>    - Itâ€™s 2%-14% slower when no <code data-md=\"`\">Variable</code> are in use?","msgtype":"m.text"},"ts":1722628937080,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AKAbeD4tB2PyXWPvrdE9xJ8UcwYX6l-WcVDZEiMiC9I"},
{"content":{"body":"* 1.  `.get()` is ~50% faster regardless of the number of async resources\n2.  `.get()` is ~15% faster regardless of the number of nested `.run()` calls\n3.  Creating new async resources/promises is 50% to 1400% faster depending on number of resources\n      - Itâ€™s 2%-14% slower when no `Variable` are in use?","format":"org.matrix.custom.html","formatted_body":"<ol data-md=\"1\" start=\"1\"><li><p><code data-md=\"`\">.get()</code> is ~50% faster regardless of the number of async resources</p></li><li><p><code data-md=\"`\">.get()</code> is ~15% faster regardless of the number of nested <code data-md=\"`\">.run()</code> calls</p></li><li><p>Creating new async resources/promises is 50% to 1400% faster depending on number of resources</p></li></ol>      - Itâ€™s 2%-14% slower when no <code data-md=\"`\">Variable</code> are in use?","m.new_content":{"body":"1.  `.get()` is ~50% faster regardless of the number of async resources\n2.  `.get()` is ~15% faster regardless of the number of nested `.run()` calls\n3.  Creating new async resources/promises is 50% to 1400% faster depending on number of resources\n      - Itâ€™s 2%-14% slower when no `Variable` are in use?","format":"org.matrix.custom.html","formatted_body":"<ol data-md=\"1\" start=\"1\"><li><p><code data-md=\"`\">.get()</code> is ~50% faster regardless of the number of async resources</p></li><li><p><code data-md=\"`\">.get()</code> is ~15% faster regardless of the number of nested <code data-md=\"`\">.run()</code> calls</p></li><li><p>Creating new async resources/promises is 50% to 1400% faster depending on number of resources</p></li></ol>      - Itâ€™s 2%-14% slower when no <code data-md=\"`\">Variable</code> are in use?","msgtype":"m.text"},"m.relates_to":{"event_id":"$AKAbeD4tB2PyXWPvrdE9xJ8UcwYX6l-WcVDZEiMiC9I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1722628959611,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6-CAVtxhqzS0jOYZL1nndYO85kDgpFywEz-ejumXtx0"},
{"content":{"body":"Is there a test for speed of the `.run()` itself?","format":"org.matrix.custom.html","formatted_body":"Is there a test for speed of the <code data-md=\"`\">.run()</code> itself?","msgtype":"m.text"},"ts":1722628981492,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$I9DKmV-TOE3vgVO5YdvJGUkpQEAIpj_DqOw8Yl8HPng"},
{"content":{"body":"The degradation when not in use is because of the infectious nature of AsyncResource. I plan on poking at that a bit to see what I can do to improve the performance there, but given that apps without _any_ variables don't actually _exist_ in-practice it's not a _huge_ concern.","format":"org.matrix.custom.html","formatted_body":"The degradation when not in use is because of the infectious nature of AsyncResource. I plan on poking at that a bit to see what I can do to improve the performance there, but given that apps without <em>any</em> variables don't actually <em>exist</em> in-practice it's not a <em>huge</em> concern.","m.mentions":{},"msgtype":"m.text"},"ts":1722630175516,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$0RsCy1G1NTfxWs6GlGAom8OTzUxw6-J7aomU9dw26uY"},
{"content":{"body":"And no, I don't think there's a run-only benchmark. I want to build out the benchmarks a bit more around it. Because it was layered over async_hooks forever, and _that_ was always a pile of hacks, it never really got much serious consideration when it came to performance, stability, correctness, etc. I'm hoping to change that with the move off of an async_hooks core.","format":"org.matrix.custom.html","formatted_body":"And no, I don't think there's a run-only benchmark. I want to build out the benchmarks a bit more around it. Because it was layered over async_hooks forever, and <em>that</em> was always a pile of hacks, it never really got much serious consideration when it came to performance, stability, correctness, etc. I'm hoping to change that with the move off of an async_hooks core.","m.mentions":{},"msgtype":"m.text"},"ts":1722630277446,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$h89KmYc0peDeNNn7cmyQf6xVGZ2UFBmDm_IHDKhPDGI"}
]