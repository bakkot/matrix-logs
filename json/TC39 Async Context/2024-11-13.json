[
{"content":{"body":"In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)","format":"org.matrix.custom.html","formatted_body":"In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window <code>postMessage</code> (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would <code>MessageChannel</code> also be covered here?  (the reason I ask is that I'm working on a userland <code>aroundEach</code> for Jasmine - it mostly works, but only if I polyfill context propagation for <code>MessagePort.prototype.onmessage</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1731472848869,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74"},
{"content":{"body":"agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context?","m.mentions":{},"msgtype":"m.text"},"ts":1731499094909,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg"},
{"content":{"body":" * agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.","m.mentions":{},"m.new_content":{"body":"agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731499108229,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$ihYfU2qfdkf_BjdHIQbZDKjXTWbNe9bBIdRKhhQqFoA"},
{"content":{"body":"> <@stephenhicks:matrix.org> In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)\n\nGiven that there is a use case we can surely include it in the list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br />In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window <code>postMessage</code> (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would <code>MessageChannel</code> also be covered here?  (the reason I ask is that I'm working on a userland <code>aroundEach</code> for Jasmine - it mostly works, but only if I polyfill context propagation for <code>MessagePort.prototype.onmessage</code>)</blockquote></mx-reply>Given that there is a use case we can surely include it in the list","m.relates_to":{"m.in_reply_to":{"event_id":"$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74"}},"msgtype":"m.text"},"ts":1731499116382,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kR3RExGwy5Wlb-HFiJC0cncyqrnJ59FDKNyew3AohyA"},
{"content":{"body":"> <@legendecas:matrix.org> agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.\n\nYeah I think context preservation should work across realms in the same agent: if they can pass (some) objects to each other, they should be able to preserve the context","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br />agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.</blockquote></mx-reply>Yeah I think context preservation should work across realms in the same agent: if they can pass (some) objects to each other, they should be able to preserve the context","m.relates_to":{"m.in_reply_to":{"event_id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg"}},"msgtype":"m.text"},"ts":1731499154769,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZfdYDRPO2DWRbLuz1pyaxAtkXsmlIPPo7ASktJi0FTE"},
{"content":{"body":"Part of the reason why we focused on same-window `postMessage` is because that is sometimes used as a scheduler","format":"org.matrix.custom.html","formatted_body":"Part of the reason why we focused on same-window <code>postMessage</code> is because that is sometimes used as a scheduler","m.mentions":{},"msgtype":"m.text"},"ts":1731499244095,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bSFGRGnwQQ4zvScQ-ULkmIb2QUTiArH9VwjMlMfVRPE"},
{"content":{"body":"but yeah, it makes sense to extend that to other windows in the same agent, or to `MessageChannel`","format":"org.matrix.custom.html","formatted_body":"but yeah, it makes sense to extend that to other windows in the same agent, or to <code>MessageChannel</code>","m.mentions":{},"msgtype":"m.text"},"ts":1731499290264,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lC6LWUbXnE3u0zanKqFkBDT0F8OOKRPCdfOiaQ3XAWI"},
{"content":{"body":"i've been playing around with async context and disposables, and i realized they don't really work well together because we don't restore the context around suspend points (except in async generators?). curious if anyone else has thought about this at all.","m.mentions":{},"msgtype":"m.text"},"ts":1731516395695,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$o6tUOb2s_1bfHzf6pVtINeWIE6DgCB21juyAY2JFWXM"},
{"content":{"body":"async context variable disposable needs https://tc39.es/proposal-async-context/#sec-generatorresume to play well with generator/yield","m.mentions":{},"msgtype":"m.text"},"ts":1731516494573,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$9y9CCoYEU1VVSio4PsJJ9zkwMogWk5d-14BhxeDFKxw"},
{"content":{"body":"more specifically i was hoping these two examples would behave the same, but the second one doesn't work because you'd have to restore the context \"inside\" await, before it returns to the caller. https://gist.github.com/devsnek/2eee5001144f7e39513e3694ca6b3e8d","m.mentions":{},"msgtype":"m.text"},"ts":1731516871964,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$i-39gXsHMgLJtVsIknWlG6vpqeqrSUHppHmupZ7Rvzs"},
{"content":{"body":" * more specifically i was hoping these two examples would behave the same, but the second one doesn't work because you'd have to restore the context \"inside\" await, after it sets the adds the promise reaction and before it returns to the caller. https://gist.github.com/devsnek/2eee5001144f7e39513e3694ca6b3e8d","m.mentions":{},"m.new_content":{"body":"more specifically i was hoping these two examples would behave the same, but the second one doesn't work because you'd have to restore the context \"inside\" await, after it sets the adds the promise reaction and before it returns to the caller. https://gist.github.com/devsnek/2eee5001144f7e39513e3694ca6b3e8d","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$i-39gXsHMgLJtVsIknWlG6vpqeqrSUHppHmupZ7Rvzs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731516988520,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$XG4iabXVPW9lENumlFtoXSIM-GC_hINr0QWq1xAo_YA"},
{"content":{"body":"I'm not sure I quite understand your example.  You've written `[[AsyncContext]] = 'FOO'` but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like\n```javascript\n{\n  using _ = asyncVar.with('FOO');\n  foo();\n}\n```\nor are you thinking of something else entirely?","format":"org.matrix.custom.html","formatted_body":"<p>I'm not sure I quite understand your example.  You've written <code>[[AsyncContext]] = 'FOO'</code> but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like</p>\n<pre><code class=\"language-javascript\">{\n  using _ = asyncVar.with('FOO');\n  foo();\n}\n</code></pre>\n<p>or are you thinking of something else entirely?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1731523259746,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-JUadcf3DgTaWDvTL0Lg_Rh7R2CqwpS2RAxgZJGgmH8"},
{"content":{"body":" * I'm not sure I quite understand your example.  You've written `[[AsyncContext]] = 'FOO'` but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like\n\n```javascript\n{\n  using _ = asyncVar.setWithDisposable('FOO');\n  foo();\n}\n```\n\nor are you thinking of something else entirely?","format":"org.matrix.custom.html","formatted_body":" * <p>I'm not sure I quite understand your example.  You've written <code>[[AsyncContext]] = 'FOO'</code> but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like</p>\n<pre><code class=\"language-javascript\">{\n  using _ = asyncVar.setWithDisposable('FOO');\n  foo();\n}\n</code></pre>\n<p>or are you thinking of something else entirely?</p>\n","m.mentions":{},"m.new_content":{"body":"I'm not sure I quite understand your example.  You've written `[[AsyncContext]] = 'FOO'` but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like\n\n```javascript\n{\n  using _ = asyncVar.setWithDisposable('FOO');\n  foo();\n}\n```\n\nor are you thinking of something else entirely?","format":"org.matrix.custom.html","formatted_body":"<p>I'm not sure I quite understand your example.  You've written <code>[[AsyncContext]] = 'FOO'</code> but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like</p>\n<pre><code class=\"language-javascript\">{\n  using _ = asyncVar.setWithDisposable('FOO');\n  foo();\n}\n</code></pre>\n<p>or are you thinking of something else entirely?</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-JUadcf3DgTaWDvTL0Lg_Rh7R2CqwpS2RAxgZJGgmH8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731523292906,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$rGLu-GnBvnC3fGq5wFkugOCMICHb8PgLqyeg0K8jG0Y"},
{"content":{"body":"That said, we're currently thinking about the impact of whether `yield` preserves context (i.e. the initialization context from the initial generator call), or whether it brings in the context from the surrounding `next()` caller (i.e. the dispatch context).  If it uses initialization context then context is sensibly block-scoped, and `using` makes a lot more sense.  If context might change across a `yield` then it's a lot less clear that `using` is at all viable, since the state to clean up at the end of the block scope may have changed out from under it.  So if `yield` exposes the dispatch context, then we're back to reconsidering what an `enterWith` or `set` semantics might look like.  In particular is the question of whether `set` in an inner/outer function body should change the value out from under an outer/inner function.  I.e.\n```javascript\nasync function f() {\n  g();  // n.b. not awaited\n  x.set(2);\n  await 1;\n  console.log(y.get()); // 3 ?\n}\nasync function g() {\n  await 1;\n  console.log(x.get()); // 2 ?\n  y.set(3);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>That said, we're currently thinking about the impact of whether <code>yield</code> preserves context (i.e. the initialization context from the initial generator call), or whether it brings in the context from the surrounding <code>next()</code> caller (i.e. the dispatch context).  If it uses initialization context then context is sensibly block-scoped, and <code>using</code> makes a lot more sense.  If context might change across a <code>yield</code> then it's a lot less clear that <code>using</code> is at all viable, since the state to clean up at the end of the block scope may have changed out from under it.  So if <code>yield</code> exposes the dispatch context, then we're back to reconsidering what an <code>enterWith</code> or <code>set</code> semantics might look like.  In particular is the question of whether <code>set</code> in an inner/outer function body should change the value out from under an outer/inner function.  I.e.</p>\n<pre><code class=\"language-javascript\">async function f() {\n  g();  // n.b. not awaited\n  x.set(2);\n  await 1;\n  console.log(y.get()); // 3 ?\n}\nasync function g() {\n  await 1;\n  console.log(x.get()); // 2 ?\n  y.set(3);\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1731523795649,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$A7kMUIHDUo8oHU2ZVW4GOZC-_gZkD7_L1P1qru924_A"},
{"content":{"body":"and how exactly one sets the boundaries on where mutations _do_ affect","format":"org.matrix.custom.html","formatted_body":"and how exactly one sets the boundaries on where mutations <em>do</em> affect","m.mentions":{},"msgtype":"m.text"},"ts":1731523900257,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nP-gG8TwPOeZ9chpL4DSBXlQCRzaAgLYJkAj6LLMso8"},
{"content":{"body":"snek I'm also not fully understanding your question, but it _seems_ similar to a discussion we had in the past:\n\n```js\nrunWithContext(1, async () => {\n  console.log(getContext()) // 1\n  await new Promise(resolve => runWithContext(2, resolve));\n  console.log(getContext()) // ?\n});\n```\n\nIs answering what the second `getContext()` call logs the same as answering your question?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a> I'm also not fully understanding your question, but it <em>seems</em> similar to a discussion we had in the past:</p>\n<pre><code class=\"language-js\">runWithContext(1, async () =&gt; {\n  console.log(getContext()) // 1\n  await new Promise(resolve =&gt; runWithContext(2, resolve));\n  console.log(getContext()) // ?\n});\n</code></pre>\n<p>Is answering what the second <code>getContext()</code> call logs the same as answering your question?</p>\n","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1731524502265,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$3RxqRMfFnEufu04UhCxx6shxbPp5xOymgvZyQWiccxs"},
{"content":{"body":"> <@stephenhicks:matrix.org> I'm not sure I quite understand your example.  You've written `[[AsyncContext]] = 'FOO'` but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like\n> \n> ```javascript\n> {\n>   using _ = asyncVar.setWithDisposable('FOO');\n>   foo();\n> }\n> ```\n> \n> or are you thinking of something else entirely?\n\nyes i am thinking about a disposable like that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-JUadcf3DgTaWDvTL0Lg_Rh7R2CqwpS2RAxgZJGgmH8?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br><p>I'm not sure I quite understand your example.  You've written <code>[[AsyncContext]] = 'FOO'</code> but (syntax aside) the current proposal doesn't allow just setting the context.  Are you assuming something like</p>\n<pre><code class=\"language-javascript\">{\n  using _ = asyncVar.setWithDisposable('FOO');\n  foo();\n}\n</code></pre>\n<p>or are you thinking of something else entirely?</p>\n</blockquote></mx-reply>yes i am thinking about a disposable like that","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-JUadcf3DgTaWDvTL0Lg_Rh7R2CqwpS2RAxgZJGgmH8"}},"msgtype":"m.text"},"ts":1731524627393,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$UzAzzsEA-pxbwU5fig9wfy_eBBeNU0fTD0DOT0vVGp8"},
{"content":{"body":"except this doesn't work with async functions because they don't restore the scope on awaits, you're forced to wrap the function.","m.mentions":{},"msgtype":"m.text"},"ts":1731524680555,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uSAa3ZgVFgic42c4cTOj6esVYYBqNiopBbKYEUVkcl4"},
{"content":{"body":"Async functions capture the scope right before pausing and restore them when resuming:\n\n- right before pausing, step 7 of await (https://tc39.es/ecma262/#await) calls PerformPromiseThen\n- step 7 of PerformPromiseThen (https://tc39.es/proposal-async-context/#sec-performpromisethen) takes a snapshot of the async context\n\n- when the promise is resolved, step 1.d of the reaction job created in NewPromiseReactionJob (https://tc39.es/proposal-async-context/#sec-newpromisereactionjob) restores the context before running the code after the await","format":"org.matrix.custom.html","formatted_body":"<p>Async functions capture the scope right before pausing and restore them when resuming:</p>\n<ul>\n<li>\n<p>right before pausing, step 7 of await (https://tc39.es/ecma262/#await) calls PerformPromiseThen</p>\n</li>\n<li>\n<p>step 7 of PerformPromiseThen (https://tc39.es/proposal-async-context/#sec-performpromisethen) takes a snapshot of the async context</p>\n</li>\n<li>\n<p>when the promise is resolved, step 1.d of the reaction job created in NewPromiseReactionJob (https://tc39.es/proposal-async-context/#sec-newpromisereactionjob) restores the context before running the code after the await</p>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1731525230465,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Uwy6d9uF8MSYr7zUmC5iyUKNZaXmNEtk50cqdB9KjWA"},
{"content":{"body":"that's not exactly what i'm talking about","m.mentions":{},"msgtype":"m.text"},"ts":1731525290926,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$LZwWQWDwG6GGRLtynHCvzbTSM1I9Nc40TSd1Y9lIzIo"},
{"content":{"body":"its about code that effectively uses `enterWith`","format":"org.matrix.custom.html","formatted_body":"its about code that effectively uses <code>enterWith</code>","m.mentions":{},"msgtype":"m.text"},"ts":1731525366426,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NwlNrbSjJbAXGOXbiI-_PDlyV7FCg6Rv4hX9kkhKdg4"},
{"content":{"body":"i'm referring to specifically when the async function is suspended, it does not restore the context. additionally, the promise reactions capture and restore their context. i'm basically suggesting that async function body evaluation should do the same.","m.mentions":{},"msgtype":"m.text"},"ts":1731525483415,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jbS0x9dyUM5WlWaptxgwel9fUSHCTm-sFl9mCxwKoaE"},
{"content":{"body":" * i'm referring to specifically when the async function is suspended, it does not restore the context. additionally, as you noted, the promise reactions capture and restore their context. i'm basically suggesting that async function body evaluation should do the same.","m.mentions":{},"m.new_content":{"body":"i'm referring to specifically when the async function is suspended, it does not restore the context. additionally, as you noted, the promise reactions capture and restore their context. i'm basically suggesting that async function body evaluation should do the same.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jbS0x9dyUM5WlWaptxgwel9fUSHCTm-sFl9mCxwKoaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731525514347,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$hLBQXzg1b6eya3KdXWoe_z4SD1Iu_i8JdYRprH8CV1o"},
{"content":{"body":"Oh you mean that before pausing they restore the context that was active before that the code in the async function run?","m.mentions":{},"msgtype":"m.text"},"ts":1731525539285,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$FTb0gE2WAyuQHVyOi952UpP4UI30tiykNDLmpWxmqNY"},
{"content":{"body":"ye","m.mentions":{},"msgtype":"m.text"},"ts":1731525557517,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$uroh8EgdYwISzFmuQtwHF70ttjbzvZldanS0tilTYwc"},
{"content":{"body":" * yes","m.mentions":{},"m.new_content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$uroh8EgdYwISzFmuQtwHF70ttjbzvZldanS0tilTYwc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731525558594,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$rZS4-aijJ9_HsDQfBZU5QTaS4DZx5koju-31xxJsE4A"},
{"content":{"body":"this is only relevant if you can \"mutate\" async variables though, which the proposal currently does not allow","m.mentions":{},"msgtype":"m.text"},"ts":1731525583197,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-CNHOX7qUwLVVj8RTz9WWL0XIBxp61b4UtcvWRhygg4"},
{"content":{"body":"Ok -- just within the current AsyncContext itself this seems to be only editorial right? It's not observable, and it only becomes observable if somebody builds a new API that behaves like async context and uses the same propagation mechanism","m.mentions":{},"msgtype":"m.text"},"ts":1731525598063,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Db2ktdPxXaB7XX5IHX7_ppYMONpTN3mRegY3rvqEED8"},
{"content":{"body":"idk if i'd call it editorial but yes the functionality would be something the host builds on top, not something the js api currently exposes","m.mentions":{},"msgtype":"m.text"},"ts":1731525649859,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Qe0iLhVtxDJzBaiIGfgJPzvuExdWsYmsKAl5bGKNH9w"},
{"content":{"body":" * idk if i'd call it editorial but yes the functionality would be something the host could build on top of, not something the js api currently exposes","m.mentions":{},"m.new_content":{"body":"idk if i'd call it editorial but yes the functionality would be something the host could build on top of, not something the js api currently exposes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Qe0iLhVtxDJzBaiIGfgJPzvuExdWsYmsKAl5bGKNH9w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731525722433,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8yqtJMBP-URzwVYbwZtr50ZYRI7caUX9n4hgjJJ5IeA"},
{"content":{"body":"There are various changes to the spec we’ll need to make if we ever add `using` support. Right now they’re not necessary to make.","format":"org.matrix.custom.html","formatted_body":"There are various changes to the spec we’ll need to make if we ever add <code>using</code> support. Right now they’re not necessary to make.","msgtype":"m.text"},"ts":1731525741859,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$X5YSL-9Bme6lT1DAaDHUwia45vEL7kHeKf1Vwc4njS8"},
{"content":{"body":"But if we're contemplating either (1) making `yield` bring in the dispatch-context, or (2) exposing `enterWith`, then it's possible that we're already painting ourselves into a corner where `using` is a non-starter.","format":"org.matrix.custom.html","formatted_body":"But if we're contemplating either (1) making <code>yield</code> bring in the dispatch-context, or (2) exposing <code>enterWith</code>, then it's possible that we're already painting ourselves into a corner where <code>using</code> is a non-starter.","m.mentions":{},"msgtype":"m.text"},"ts":1731531251067,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$YbNNlRmjHDflRbyD3Jxo_3wHjEguGeHt82VK-b6KVeE"},
{"content":{"body":"To be clear, this I'm not convinced that this is a problem, but I do think it's worth at least some thought","m.mentions":{},"msgtype":"m.text"},"ts":1731531289538,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$_GllPb3hTbigfeJlAJolf_o-OJmKonv3xwsdS40Xa6Q"},
{"content":{"body":"In particular, if you have `enterWith` then presumably you can implement `using` semi-reasonably in userland.","format":"org.matrix.custom.html","formatted_body":"In particular, if you have <code>enterWith</code> then presumably you can implement <code>using</code> semi-reasonably in userland.","m.mentions":{},"msgtype":"m.text"},"ts":1731531360594,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$0hG91Uesw8Q5Fkp8yqj0AcLbD5pQTbqAkgViFRye1Ag"},
{"content":{"body":"using can be done in terms of enterWith, but you will get behavior that is probably not what you want unless the context is restored properly at suspend points","m.mentions":{},"msgtype":"m.text"},"ts":1731531397828,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$M36RFt02stCMkRciXj1KcWnwT-9Bnp7nCovf-4bv3sY"},
{"content":{"body":"I'd really prefer that, if we do one of those two in the language, we do `using`. It's much harder to make mistakes with it","msgtype":"m.text"},"ts":1731531415210,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$CSBVIB6W-7thpi29RB_Bnpvl5z-8HTmKDRagDYoS5UY"},
{"content":{"body":"i am generally a fan of what `using` can enable with this, for example `using span = tracer.createSpan()`. all i'd ask for at this point is that we don't prevent that from happening in the future.","format":"org.matrix.custom.html","formatted_body":"i am generally a fan of what <code>using</code> can enable with this, for example <code>using span = tracer.createSpan()</code>. all i'd ask for at this point is that we don't prevent that from happening in the future.","m.mentions":{},"msgtype":"m.text"},"ts":1731531467619,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$a0Bdixw3QBD0e5t7Y7oBRaEMPBpjEXm1Z1y4fYhu3BQ"},
{"content":{"body":"IIRC, The concern with `using` today was that it wasn't sufficiently hermetic.","format":"org.matrix.custom.html","formatted_body":"IIRC, The concern with <code>using</code> today was that it wasn't sufficiently hermetic.","m.mentions":{},"msgtype":"m.text"},"ts":1731531607295,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$UJuEdiXrBC_kGxokl9WjvkJOF8LCDgoNiFkW1fIptZc"},
{"content":{"body":"i.e. what happens if you write `tracer.createSpan()[Symbol.enter()]` and then never dispose it?","format":"org.matrix.custom.html","formatted_body":"i.e. what happens if you write <code>tracer.createSpan()[Symbol.enter()]</code> and then never dispose it?","m.mentions":{},"msgtype":"m.text"},"ts":1731531645755,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$6rhieMc4X9vpCuKNwfwGqT5KF-qDXveBEaflXR-FYwo"},
{"content":{"body":" * i.e. what happens if you write `tracer.createSpan()[Symbol.enter]()` and then never dispose it?","format":"org.matrix.custom.html","formatted_body":" * i.e. what happens if you write <code>tracer.createSpan()[Symbol.enter]()</code> and then never dispose it?","m.mentions":{},"m.new_content":{"body":"i.e. what happens if you write `tracer.createSpan()[Symbol.enter]()` and then never dispose it?","format":"org.matrix.custom.html","formatted_body":"i.e. what happens if you write <code>tracer.createSpan()[Symbol.enter]()</code> and then never dispose it?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6rhieMc4X9vpCuKNwfwGqT5KF-qDXveBEaflXR-FYwo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731531655723,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$s5LiLGnO24GP_SDfmKmPj_TzTFlQMoOU4wEphWsVomQ"},
{"content":{"body":"Of course, that's less concerning if `enterWith` is already a possibility","format":"org.matrix.custom.html","formatted_body":"Of course, that's less concerning if <code>enterWith</code> is already a possibility","m.mentions":{},"msgtype":"m.text"},"ts":1731531680628,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$3r7vtNE1FqxBMCgwVehvjHMnJM8aF2MqufVAvSQkuk4"},
{"content":{"body":"(effectively the above _is_ `enterWith` IIUC)","format":"org.matrix.custom.html","formatted_body":"(effectively the above <em>is</em> <code>enterWith</code> IIUC)","m.mentions":{},"msgtype":"m.text"},"ts":1731531703778,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$n4op1BWuLv4xyFt1pJJq1_ZNPJBSyWdEt7a5Ocg7yt4"},
{"content":{"body":"yes i would say this is equiv to providing enterWith","m.mentions":{},"msgtype":"m.text"},"ts":1731531730533,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$8cEoOhQlye_vSRgNSyqHcR0xAfX8WTfeqof3kViv-HA"},
{"content":{"body":"though if we start to seal up some of the things like context leaking out of suspends, the \"never dispose\" problem becomes less and less of a danger to callers","m.mentions":{},"msgtype":"m.text"},"ts":1731531773027,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$-guxqagJit2N9qKLIVbPb1m1jZl34lElttJffsEj_-Q"},
{"content":{"body":"I did have concerns with `using` because the proposal makes it trivial to just forget `using`. However, `using` with some check that you actually get Symbol.dispose would be much better than enterWith, since it makes it hard to *accidentally* forget to close the context","msgtype":"m.text"},"ts":1731531777532,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$W7kHU-3oo024wf1Sp943Rlm6T4oJVSw4yHHMY-tGc8k"},
{"content":{"body":"but it still leaves the question of what happens if you write\n```\nconst d1 = v.enter(1);\nd1[Symbol.enter]();\nconst d2 = v.enter(2);\nd2[Symbol.enter]();\nd1[Symbol.dispose]();\nd2[Symbol.dispose]();\n```\n?","format":"org.matrix.custom.html","formatted_body":"<p>but it still leaves the question of what happens if you write</p>\n<pre><code>const d1 = v.enter(1);\nd1[Symbol.enter]();\nconst d2 = v.enter(2);\nd2[Symbol.enter]();\nd1[Symbol.dispose]();\nd2[Symbol.dispose]();\n</code></pre>\n<p>?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1731531805656,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kAVjNVXc2khS5kcFgdrhGNqMiiLaa0UT2S78YAW18lY"},
{"content":{"body":"> <@devsnek:matrix.org> though if we start to seal up some of the things like context leaking out of suspends, the \"never dispose\" problem becomes less and less of a danger to callers\n\nNot sure what you mean about context leaking out of suspends - IIUC this is already sealed up, though `enterWith` _could_ (depending on spec) cause a problem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-guxqagJit2N9qKLIVbPb1m1jZl34lElttJffsEj_-Q?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>though if we start to seal up some of the things like context leaking out of suspends, the &quot;never dispose&quot; problem becomes less and less of a danger to callers</blockquote></mx-reply>Not sure what you mean about context leaking out of suspends - IIUC this is already sealed up, though <code>enterWith</code> <em>could</em> (depending on spec) cause a problem","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-guxqagJit2N9qKLIVbPb1m1jZl34lElttJffsEj_-Q"}},"msgtype":"m.text"},"ts":1731531877456,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$KFW4IydacZ7m1Su6uyaBPmGPylcKRaYOHY2NVC24edk"},
{"content":{"body":"yes i mean if this functionality exists","m.mentions":{},"msgtype":"m.text"},"ts":1731531904720,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$jCtY3uNLGPa3d74q7mY3ftjJ5-mMpKR0WiQr_huFh-U"},
{"content":{"body":"as a separate topic, i don't really grok the details of the proposal personally, but it seems like a number of node core collaborators are unhappy with the design of the proposal (in ways i also don't understand). i don't think it would be appropriate to advance an implementation that isn't also useful in node, so before seeking advancement, can yall please ensure their concerns are explained and hopefully addressed?","m.mentions":{},"msgtype":"m.text"},"ts":1731531934962,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$gy4Ta_nelPb1WmcJIvux8KpZImxRB_rM21PJB2bu_HE"},
{"content":{"body":"As far as I understand, the \"problem with Node.js\" is that they have to APIs for setting the context, and this proposal is only defining one leaving the second one as a follow-up proposal","msgtype":"m.text"},"ts":1731531999045,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$QPM3fSZRjA7Kx4hz1ItxN35oBnmwRQmPqtemq_0zJj8"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I did have concerns with `using` because the proposal makes it trivial to just forget `using`. However, `using` with some check that you actually get Symbol.dispose would be much better than enterWith, since it makes it hard to *accidentally* forget to close the context\n\nAt the time we were talking about forcing the use of `using` so that it was syntactically guaranteed to be correct - but Ron Buckton had an issue with composability.  snek's example of `tracer.createSpan()` exactly demonstrates the composability problem, since `createSpan` would need to call `[Symbol.enter]` and `[Symbol.dispose]` directly rather than syntactically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$W7kHU-3oo024wf1Sp943Rlm6T4oJVSw4yHHMY-tGc8k?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I did have concerns with `using` because the proposal makes it trivial to just forget `using`. However, `using` with some check that you actually get Symbol.dispose would be much better than enterWith, since it makes it hard to *accidentally* forget to close the context</blockquote></mx-reply>At the time we were talking about forcing the use of <code>using</code> so that it was syntactically guaranteed to be correct - but Ron Buckton had an issue with composability.  <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s example of <code>tracer.createSpan()</code> exactly demonstrates the composability problem, since <code>createSpan</code> would need to call <code>[Symbol.enter]</code> and <code>[Symbol.dispose]</code> directly rather than syntactically.","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$W7kHU-3oo024wf1Sp943Rlm6T4oJVSw4yHHMY-tGc8k"}},"msgtype":"m.text"},"ts":1731532005270,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$GENmrVBnpSgWd-Vz8jTeERytGz1RU1d7NW4TcZB6otQ"},
{"content":{"body":"* As far as I understand, the \"problem with Node.js\" is that they have two APIs for setting the context, and this proposal is only defining one leaving the second one as a follow-up proposal","m.new_content":{"body":"As far as I understand, the \"problem with Node.js\" is that they have two APIs for setting the context, and this proposal is only defining one leaving the second one as a follow-up proposal","msgtype":"m.text"},"m.relates_to":{"event_id":"$QPM3fSZRjA7Kx4hz1ItxN35oBnmwRQmPqtemq_0zJj8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731532013714,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$i0pR62nedal6GztIWjySWephYFVPZy0N9PJnssuhBqE"},
{"content":{"body":"> <@stephenhicks:matrix.org> but it still leaves the question of what happens if you write\n> ```\n> const d1 = v.enter(1);\n> d1[Symbol.enter]();\n> const d2 = v.enter(2);\n> d2[Symbol.enter]();\n> d1[Symbol.dispose]();\n> d2[Symbol.dispose]();\n> ```\n> ?\n\nIn this example, I'm hoping we can make it throw at the second call somehow ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kAVjNVXc2khS5kcFgdrhGNqMiiLaa0UT2S78YAW18lY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br /><p>but it still leaves the question of what happens if you write</p>\n<pre><code>const d1 = v.enter(1);\nd1[Symbol.enter]();\nconst d2 = v.enter(2);\nd2[Symbol.enter]();\nd1[Symbol.dispose]();\nd2[Symbol.dispose]();\n</code></pre>\n<p>?</p>\n</blockquote></mx-reply>In this example, I'm hoping we can make it throw at the second call somehow","m.relates_to":{"m.in_reply_to":{"event_id":"$kAVjNVXc2khS5kcFgdrhGNqMiiLaa0UT2S78YAW18lY"}},"msgtype":"m.text"},"ts":1731532072249,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$TrH1cFNCnwxd4zeTdUgR5UCMsTWVRPqhKFwbUqzdWl8"},
{"content":{"body":"* In this example, I'm hoping we can make it throw at the second dispose call somehow","m.new_content":{"body":"> <@stephenhicks:matrix.org> but it still leaves the question of what happens if you write\n> ```\n> const d1 = v.enter(1);\n> d1[Symbol.enter]();\n> const d2 = v.enter(2);\n> d2[Symbol.enter]();\n> d1[Symbol.dispose]();\n> d2[Symbol.dispose]();\n> ```\n> ?\n\nIn this example, I'm hoping we can make it throw at the second dispose call somehow","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kAVjNVXc2khS5kcFgdrhGNqMiiLaa0UT2S78YAW18lY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a><br /><p>but it still leaves the question of what happens if you write</p>\n<pre><code>const d1 = v.enter(1);\nd1[Symbol.enter]();\nconst d2 = v.enter(2);\nd2[Symbol.enter]();\nd1[Symbol.dispose]();\nd2[Symbol.dispose]();\n</code></pre>\n<p>?</p>\n</blockquote></mx-reply>In this example, I'm hoping we can make it throw at the second dispose call somehow","msgtype":"m.text"},"m.relates_to":{"event_id":"$TrH1cFNCnwxd4zeTdUgR5UCMsTWVRPqhKFwbUqzdWl8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731532085072,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uMmrFmJX7y0M3Qn58SEZRRHnVm9e56GXzpgr4tqnf9Y"},
{"content":{"body":"I haven't thought about it enough to say how","msgtype":"m.text"},"ts":1731532113762,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$vBx8mUwh-uPvoyUXpvLPtt-_VXq5E1MqSIfx1v-uTLo"},
{"content":{"body":"Independently, I think snek's original question was how do the following two snippets work?\n```\nfunction f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n```\n```\nfunction f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```","format":"org.matrix.custom.html","formatted_body":"<p>Independently, I think <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s original question was how do the following two snippets work?</p>\n<pre><code>function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n</code></pre>\n<pre><code>function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre>\n","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"ts":1731532427634,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QXALAu_atbZiO9VVkuDseDR5W9f3dqQtMFuP4ltI560"},
{"content":{"body":" * Independently, I think snek's original question was how do the following two snippets work?\n\n```javascript\nfunction f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n```\nand\n```javascript\nfunction f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Independently, I think <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s original question was how do the following two snippets work?</p>\n<pre><code class=\"language-javascript\">function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-javascript\">function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Independently, I think snek's original question was how do the following two snippets work?\n\n```javascript\nfunction f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n```\nand\n```javascript\nfunction f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```","format":"org.matrix.custom.html","formatted_body":"<p>Independently, I think <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s original question was how do the following two snippets work?</p>\n<pre><code class=\"language-javascript\">function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-javascript\">function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre>\n","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QXALAu_atbZiO9VVkuDseDR5W9f3dqQtMFuP4ltI560","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731532443799,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$N_WMtgEudGND2k7ZFuu-VUBs9R-kqhrXbrcNdwK8WVc"},
{"content":{"body":" * Independently, I think snek's original question was how do the following two snippets work?\n\n```javascript\nasync function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n```\n\nand\n\n```javascript\nasync function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Independently, I think <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s original question was how do the following two snippets work?</p>\n<pre><code class=\"language-javascript\">async function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-javascript\">async function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"Independently, I think snek's original question was how do the following two snippets work?\n\n```javascript\nasync function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n```\n\nand\n\n```javascript\nasync function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```","format":"org.matrix.custom.html","formatted_body":"<p>Independently, I think <a href=\"https://matrix.to/#/@devsnek:matrix.org\">snek</a>'s original question was how do the following two snippets work?</p>\n<pre><code class=\"language-javascript\">async function f() {\n  await 1;\n  console.log(v.get());\n}\n{\n  using _ = v.enter(2);\n  f();\n}\n</code></pre>\n<p>and</p>\n<pre><code class=\"language-javascript\">async function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre>\n","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$QXALAu_atbZiO9VVkuDseDR5W9f3dqQtMFuP4ltI560","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731532463528,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$iUc1WN_9pyjGiMAVP-UJ8Dp8_tD9rELVFOu7pXGIRDQ"},
{"content":{"body":"well i know how they work given the current spec text","m.mentions":{},"msgtype":"m.text"},"ts":1731532492764,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$T29SK1QZQRXs6bhcgMKIVAUg5PLkfc0rXE1HR2uXnpw"},
{"content":{"body":"they don't work at all under the current spec text","m.mentions":{},"msgtype":"m.text"},"ts":1731532515685,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-Sq7p5ONGYVF7_shYtL7wVQUcxzFlj5XUkcnbJFQ5J4"},
{"content":{"body":"because `enter` isn't a thing","format":"org.matrix.custom.html","formatted_body":"because <code>enter</code> isn't a thing","m.mentions":{},"msgtype":"m.text"},"ts":1731532521773,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$myrM6d6qr57c1lKKqDZjEmiBpAyNuZ5NeijSoaZTHBw"},
{"content":{"body":"yes i mean assuming that such a thing existed","m.mentions":{},"msgtype":"m.text"},"ts":1731532544406,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$zmKHtyyukFuhGaCglGVVshi_tlWpKpduGBqyPs_Q-4c"},
{"content":{"body":"gotcha - I think introducing `enter` would absolutely require substantial changes to account for it","format":"org.matrix.custom.html","formatted_body":"gotcha - I think introducing <code>enter</code> would absolutely require substantial changes to account for it","m.mentions":{},"msgtype":"m.text"},"ts":1731532574643,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$PW-vNZiqeR7sEvCywwMW9bNAkjhZVdvPQy79cWCXSMI"},
{"content":{"body":"and there's a few different options for what those changes look like","m.mentions":{},"msgtype":"m.text"},"ts":1731532635418,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$vTKCEiVCNZk0d1s0pkV339BQT1xvGSndW22Z3b4splU"},
{"content":{"body":"i think its pretty simple in terms of the spec, store context on the asyncfn/generator object when started and swap back to it whenever a suspend happens.","m.mentions":{},"msgtype":"m.text"},"ts":1731532750247,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3x5pUUDI1n0w60CDBsdIBC5I2Ivw8MCZQpHZYJFaFeE"},
{"content":{"body":"but we don't need to deal with it right now, i was just more curious about previous thoughts in this space and ensuring that we don't prevent this from happening in the future","m.mentions":{},"msgtype":"m.text"},"ts":1731532833434,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$F05PmSMIDMgHKhm-f88_b2U6yRbkxTopeY22v8Lic2k"},
{"content":{"body":"I don't quite understand what you mean by \"whenever a suspend happens\" - I would have expected to swap back to it when it _resumes_?  But the conversation yesterday was motivated by iterator helpers - if we decide that they should behave like synchronous events then it would be more consistent for generators to _not_ swap back to the initiating context on resume - for one thing, that would make it impossible to write `Iterator.prototype.map` as a generator, which seems surprising.","format":"org.matrix.custom.html","formatted_body":"I don't quite understand what you mean by \"whenever a suspend happens\" - I would have expected to swap back to it when it <em>resumes</em>?  But the conversation yesterday was motivated by iterator helpers - if we decide that they should behave like synchronous events then it would be more consistent for generators to <em>not</em> swap back to the initiating context on resume - for one thing, that would make it impossible to write <code>Iterator.prototype.map</code> as a generator, which seems surprising.","m.mentions":{},"msgtype":"m.text"},"ts":1731532943517,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$0W8V3FIkmCv_3gVnakR6lHYJsC89l0a_rJfEg0adsto"},
{"content":{"body":"There was a side benefit that removing the context swap on `yield` makes the spec simpler and is also probably easier and more performant for implementations","format":"org.matrix.custom.html","formatted_body":"There was a side benefit that removing the context swap on <code>yield</code> makes the spec simpler and is also probably easier and more performant for implementations","m.mentions":{},"msgtype":"m.text"},"ts":1731532995279,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$G5nK7UwpaLRON5LdRja6snYUv5DknX0GsLC9hxJSHmE"},
{"content":{"body":"when resuming, the context is already handled by promise reaction jobs.","m.mentions":{},"msgtype":"m.text"},"ts":1731533057304,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$pRb67fL7KmNFLngi_E5-YCqc8Io4ZVyOizjSDadcIps"},
{"content":{"body":"not for generators","m.mentions":{},"msgtype":"m.text"},"ts":1731533069374,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$5W2DkOGj6mn9enEdIWR25oElDI-LjT311XTQvRviLGQ"},
{"content":{"body":"It would probably be clearer snek if you remove the top-level await from your example ","format":"org.matrix.custom.html","formatted_body":"It would probably be clearer <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a> if you remove the top-level await from your example ","msgtype":"m.text"},"ts":1731533095119,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$zKuOjehL_gYO-Bd6_G0ZWVgPqY0eA4MODxqGOb198K0"},
{"content":{"body":"That's what confused me","msgtype":"m.text"},"ts":1731533098146,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ypyzoNXZlx4M4yUtpWbd6L6RaCdqXnpgzqNmvew44T8"},
{"content":{"body":"Just delete the await keyword","msgtype":"m.text"},"ts":1731533110101,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$cVWmt71lxPtHb5FrlCOExe9Dwxr1WoMC3LJeUxt9Jlk"},
{"content":{"body":"but then I'm also that much more confused because you're concerned with what the context will be outside the asyncfn body?","m.mentions":{},"msgtype":"m.text"},"ts":1731533124205,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$tNEdHX_UgMragRvjhldb8CdlAiDt74gg4omMZLpaJZ8"},
{"content":{"body":"well its interesting both with and without the await keyword, i guess","m.mentions":{},"msgtype":"m.text"},"ts":1731533134467,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ApQh34TxAUzGymdGzXQnDXl-W_yPfooGi9Ba5obYXKA"},
{"content":{"body":" * well its interesting both with and without the await keyword, i guess. but those are different things.","m.mentions":{},"m.new_content":{"body":"well its interesting both with and without the await keyword, i guess. but those are different things.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ApQh34TxAUzGymdGzXQnDXl-W_yPfooGi9Ba5obYXKA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731533143994,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$vFOe3ahAbl4c94-sblVGAEOZxTZdhUKrKBiAycJYHYY"},
{"content":{"body":"(my understanding is that it gets restored to whatever it was immediately before the body was entered - which is either the same thing if it's the first entry, or else it's the empty/top context from the microtask queue)","m.mentions":{},"msgtype":"m.text"},"ts":1731533222234,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$rBK9K_k-bOKEchY4FWc3GTkxZ7VVp-WwfdF1vrrXnc4"},
{"content":{"body":"the current semantics are this https://gc.gy/befe86ba-f5ed-4cc2-a425-115740e65bdd.png","m.mentions":{},"msgtype":"m.text"},"ts":1731533256097,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3Xi2vFhl4PE9ca13T30K5VBUQwq86xmvgfYrjGR8ftw"},
{"content":{"body":"but maybe that's what you're getting at - the first entry wouldn't restore anything?","m.mentions":{},"msgtype":"m.text"},"ts":1731533258557,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$43-q51ycu-jQVC4jF5_r5XwK0tooxgk04_TrL9Sh25Y"},
{"content":{"body":"get/setAsyncContext being exactly equiv to agent.[[AsyncContext]]=whatever","m.mentions":{},"msgtype":"m.text"},"ts":1731533299789,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$ihvGwvbVOudss6J5jqc402JFmhBDKbFcss6mYkXkh_Y"},
{"content":{"body":"and you're saying you want it to be `undefined`?","format":"org.matrix.custom.html","formatted_body":"and you're saying you want it to be <code>undefined</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1731533346732,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QtDIkN9J2EgBYjIvTY8dwCaZ2btbQKwORGidrYa1YlE"},
{"content":{"body":"i think that's what i would expect it to be, yes","m.mentions":{},"msgtype":"m.text"},"ts":1731533408185,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$IRb7abXs7EW1KZmff6Y0pFqX0sLXAcI3_O8uNL6ydSM"},
{"content":{"body":" * the current semantics are this https://gc.gy/f5b45fb1-6bd7-4357-ba4f-95ee1e20c464.png","m.mentions":{},"m.new_content":{"body":"the current semantics are this https://gc.gy/f5b45fb1-6bd7-4357-ba4f-95ee1e20c464.png","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3Xi2vFhl4PE9ca13T30K5VBUQwq86xmvgfYrjGR8ftw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731533486713,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$WYm78auCYHsrCwfDURpPIpFA95gh_aPZ56gur-clKPY"},
{"content":{"body":"(updated above to a slightly more rigorous example)","m.mentions":{},"msgtype":"m.text"},"ts":1731533498508,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$a_jIBx1LAlELumsN7bXp4KSiwWORZkM5hZNttfJVxqI"},
{"content":{"body":"Updated what?","msgtype":"m.text"},"ts":1731533529376,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RiJyG-tE1pMOgV2naxiNmmHmlxfRjTcFiuxvnjRwrDw"},
{"content":{"body":"I agree, I think that makes the most sense, but I wonder if that would require an unacceptable amount of function call overhead?","m.mentions":{},"msgtype":"m.text"},"ts":1731533531449,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$weax1B9e40tj7H1VpzhsauPR27GvwVsTK0TN2Dhw0Lc"},
{"content":{"body":"i can't speak for all engines but in v8 at least its a single cpu instruction","m.mentions":{},"msgtype":"m.text"},"ts":1731533565340,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$KvGysd5gPyhUa27_nLTBEPyjMBeV-i-2N2E81M-McIA"},
{"content":{"body":"> <@jridgewell:matrix.org> Updated what?\n\nsorry, i meant the above screenshot","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$RiJyG-tE1pMOgV2naxiNmmHmlxfRjTcFiuxvnjRwrDw?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Updated what?</blockquote></mx-reply>sorry, i meant the above screenshot","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RiJyG-tE1pMOgV2naxiNmmHmlxfRjTcFiuxvnjRwrDw"}},"msgtype":"m.text"},"ts":1731533579185,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$3sC0YZ2Ps1WNFgWX9cUr565oFwGLkpKDrqv_L7AN3OY"},
{"content":{"body":"There is a change to `await` that needs to happen to prevent the using scope from leaking out in:\n```\nasync function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n```\n`f()` synchronous execution ends at the `await`, and we need to cleanup any using mutations before resuming past the `f()` call.","format":"org.matrix.custom.html","formatted_body":"There is a change to <code data-md=\"`\">await</code> that needs to happen to prevent the using scope from leaking out in:<br/><pre data-md=\"```\"><code>async function f() {\n  using _ = v.enter(2);\n  await 1;\n}\nf();\nconsole.log(v.get());\n</code></pre><code data-md=\"`\">f()</code> synchronous execution ends at the <code data-md=\"`\">await</code>, and we need to cleanup any using mutations before resuming past the <code data-md=\"`\">f()</code> call.","msgtype":"m.text"},"ts":1731533591760,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sFUPDADmPKSx64Cr0f0BGjMJ5z4VxWYOO20544aS4ZA"},
{"content":{"body":"> <@devsnek:matrix.org> sorry, i meant the above screenshot\n\nThere’s a screenshot?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%243sC0YZ2Ps1WNFgWX9cUr565oFwGLkpKDrqv_L7AN3OY\">In reply to</a><a href=\"https://matrix.to/#/%40devsnek%3Amatrix.org\">@devsnek:matrix.org</a><br />sorry, i meant the above screenshot</blockquote></mx-reply>There’s a screenshot?","m.relates_to":{"m.in_reply_to":{"event_id":"$3sC0YZ2Ps1WNFgWX9cUr565oFwGLkpKDrqv_L7AN3OY"}},"msgtype":"m.text"},"ts":1731533617035,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tDb40DMJqGjUgALadv-yeY1pfkGokYgal1BSpR4s4Iw"},
{"content":{"body":"~13 messages up. i also posted a gist much further above ","m.mentions":{},"msgtype":"m.text"},"ts":1731533654404,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A-iGfkAag-MhsB1UwGGNFrnHLJYVU0JsVYU6NZVhW20"},
{"content":{"body":" * ~13 messages up. i also posted a more abstract gist much further above ","m.mentions":{},"m.new_content":{"body":"~13 messages up. i also posted a more abstract gist much further above ","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$A-iGfkAag-MhsB1UwGGNFrnHLJYVU0JsVYU6NZVhW20","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731533664574,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$97byfrSdZZncfAb5AjFg54imnzccOzFwOftfZqKxQSs"}
]