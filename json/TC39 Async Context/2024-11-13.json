[
{"content":{"body":"In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)","format":"org.matrix.custom.html","formatted_body":"In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window <code>postMessage</code> (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would <code>MessageChannel</code> also be covered here?  (the reason I ask is that I'm working on a userland <code>aroundEach</code> for Jasmine - it mostly works, but only if I polyfill context propagation for <code>MessagePort.prototype.onmessage</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1731472848869,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74"},
{"content":{"body":"agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context?","m.mentions":{},"msgtype":"m.text"},"ts":1731499094909,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg"},
{"content":{"body":" * agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.","m.mentions":{},"m.new_content":{"body":"agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1731499108229,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$ihYfU2qfdkf_BjdHIQbZDKjXTWbNe9bBIdRKhhQqFoA"},
{"content":{"body":"> <@stephenhicks:matrix.org> In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window `postMessage` (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would `MessageChannel` also be covered here?  (the reason I ask is that I'm working on a userland `aroundEach` for Jasmine - it mostly works, but only if I polyfill context propagation for `MessagePort.prototype.onmessage`)\n\nGiven that there is a use case we can surely include it in the list","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br />In terms of events that we wanted to set to dispatch-context from the start, there was mention of same-window <code>postMessage</code> (I assume it's nonsense to talk about preserving context when messaging a different window?).  Would <code>MessageChannel</code> also be covered here?  (the reason I ask is that I'm working on a userland <code>aroundEach</code> for Jasmine - it mostly works, but only if I polyfill context propagation for <code>MessagePort.prototype.onmessage</code>)</blockquote></mx-reply>Given that there is a use case we can surely include it in the list","m.relates_to":{"m.in_reply_to":{"event_id":"$yvxWbFYxXVvfzVa7ucp9NfhU3cXftjRel87LxXP0I74"}},"msgtype":"m.text"},"ts":1731499116382,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$kR3RExGwy5Wlb-HFiJC0cncyqrnJ59FDKNyew3AohyA"},
{"content":{"body":"> <@legendecas:matrix.org> agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.\n\nYeah I think context preservation should work across realms in the same agent: if they can pass (some) objects to each other, they should be able to preserve the context","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br />agree, these tasks are pretty similar and I think we should apply the same policy on them. Contexts should not be preserved across agents. But if the async context variable is explicitly passed to a different window, I don't see it to be a problem to preserve the context.</blockquote></mx-reply>Yeah I think context preservation should work across realms in the same agent: if they can pass (some) objects to each other, they should be able to preserve the context","m.relates_to":{"m.in_reply_to":{"event_id":"$DaSpNj3rdSUmu3vyXXujD8CTwSbKd07usaBZ6uKo8fg"}},"msgtype":"m.text"},"ts":1731499154769,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZfdYDRPO2DWRbLuz1pyaxAtkXsmlIPPo7ASktJi0FTE"}
]