[
{"content":{"body":"> <@jridgewell:matrix.org> The current spec should preserve the context at `.then()` time, no? Are you expecting `someAsyncApi`’s rejection time?\n\nI'm not seeing a specific code example, but I can imagine a few possibilities: (1) `v.run(1, () => Promise.reject()).then(x => x)` doesn't actually invoke the callback, so would it be reasonable to _not_ change the rejection context?  (2) It's also possible that the `then` handler runs in the causal context instead of the registration context - so regardless of whether or not it runs, it might still not lose the context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$e3PlLNNUvhtlplh16USgcIX0BpwrAkpmEKbR6S2bijE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>The current spec should preserve the context at <code>.then()</code> time, no? Are you expecting <code>someAsyncApi</code>’s rejection time?</blockquote></mx-reply>I'm not seeing a specific code example, but I can imagine a few possibilities: (1) <code>v.run(1, () =&gt; Promise.reject()).then(x =&gt; x)</code> doesn't actually invoke the callback, so would it be reasonable to <em>not</em> change the rejection context?  (2) It's also possible that the <code>then</code> handler runs in the causal context instead of the registration context - so regardless of whether or not it runs, it might still not lose the context.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e3PlLNNUvhtlplh16USgcIX0BpwrAkpmEKbR6S2bijE"}},"msgtype":"m.text"},"ts":1717006957189,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$RVnZxy7_iekwT8o5aQzttmrj6v5PETX6wPto9XAvgME"},
{"content":{"body":"I'm thinking a bit more right now about the idea of flowing _around_ `await`s (but maybe through `yield`s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the `await` site with a userland `promiseSnapshot = (promise) => promise.then(() => new Snapshot(), () => new Snapshot())` helper function (you'd need to `await promiseSnapshot(promise)` to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a `Snapshot.wrap` anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.","format":"org.matrix.custom.html","formatted_body":"I'm thinking a bit more right now about the idea of flowing <em>around</em> <code>await</code>s (but maybe through <code>yield</code>s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the <code>await</code> site with a userland <code>promiseSnapshot = (promise) =&gt; promise.then(() =&gt; new Snapshot(), () =&gt; new Snapshot())</code> helper function (you'd need to <code>await promiseSnapshot(promise)</code> to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a <code>Snapshot.wrap</code> anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.","m.mentions":{},"msgtype":"m.text"},"ts":1717007348847,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$e6CbRdL_tCmsmDPVY2WVYEAOnhdPxurgEMIQ7z3RpRU"},
{"content":{"body":"Maybe there's some way to actually replace the snapshot after resuming from an await, rather than needing to reference it via a snapshot variable, which is a lot more awkward - bounded `enterWith` for the whole snapshot, or something...  there was some brief discussion about this sort of thing after the end of yesterday's meeting - does anyone have more thoughts to share about this?","format":"org.matrix.custom.html","formatted_body":"Maybe there's some way to actually replace the snapshot after resuming from an await, rather than needing to reference it via a snapshot variable, which is a lot more awkward - bounded <code>enterWith</code> for the whole snapshot, or something...  there was some brief discussion about this sort of thing after the end of yesterday's meeting - does anyone have more thoughts to share about this?","m.mentions":{},"msgtype":"m.text"},"ts":1717008520648,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$HooUweoSqFT_4fUUpr0_PyBelJU6UQxLCQVUM8Oyr00"},
{"content":{"body":"> <@stephenhicks:matrix.org> I'm thinking a bit more right now about the idea of flowing _around_ `await`s (but maybe through `yield`s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the `await` site with a userland `promiseSnapshot = (promise) => promise.then(() => new Snapshot(), () => new Snapshot())` helper function (you'd need to `await promiseSnapshot(promise)` to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a `Snapshot.wrap` anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.\n\nThis is a good point. So we're really talking about what async/await does, and what is done by default everywhere, rather than making things *totally* impossible. But anyway, I believe Stephen Belanger 's point that, almost all of the time, we won't get people to actually opt into anything besides the default.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$e6CbRdL_tCmsmDPVY2WVYEAOnhdPxurgEMIQ7z3RpRU?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I'm thinking a bit more right now about the idea of flowing <em>around</em> <code>await</code>s (but maybe through <code>yield</code>s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the <code>await</code> site with a userland <code>promiseSnapshot = (promise) =&gt; promise.then(() =&gt; new Snapshot(), () =&gt; new Snapshot())</code> helper function (you'd need to <code>await promiseSnapshot(promise)</code> to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a <code>Snapshot.wrap</code> anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.</blockquote></mx-reply>This is a good point. So we're really talking about what async/await does, and what is done by default everywhere, rather than making things <em>totally</em> impossible. But anyway, I believe <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a> 's point that, almost all of the time, we won't get people to actually opt into anything besides the default.","m.mentions":{"user_ids":["@stephenhicks:matrix.org","@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e6CbRdL_tCmsmDPVY2WVYEAOnhdPxurgEMIQ7z3RpRU"}},"msgtype":"m.text"},"ts":1717012274221,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pJPVohHvFgmjelF7nzEo1-MfftlOERebHGn7PD5zrjM"},
{"content":{"body":"> <@littledan:matrix.org> This is a good point. So we're really talking about what async/await does, and what is done by default everywhere, rather than making things *totally* impossible. But anyway, I believe Stephen Belanger 's point that, almost all of the time, we won't get people to actually opt into anything besides the default.\n\nI think that's right, which is simultaneously why it's so important to pick good defaults, and also why it's probably impossible because I'm pretty sure there _is_ no default that just works everywhere. >_<","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$pJPVohHvFgmjelF7nzEo1-MfftlOERebHGn7PD5zrjM?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is a good point. So we're really talking about what async/await does, and what is done by default everywhere, rather than making things <em>totally</em> impossible. But anyway, I believe <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a> 's point that, almost all of the time, we won't get people to actually opt into anything besides the default.</blockquote></mx-reply>I think that's right, which is simultaneously why it's so important to pick good defaults, and also why it's probably impossible because I'm pretty sure there <em>is</em> no default that just works everywhere. &gt;_&lt;","m.mentions":{"user_ids":["@littledan:matrix.org","@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$pJPVohHvFgmjelF7nzEo1-MfftlOERebHGn7PD5zrjM"}},"msgtype":"m.text"},"ts":1717012606589,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$9B6Y1vcz1p3QRfmB99YsYKHEX-bcfBrqLkhgj9cVRgo"},
{"content":{"body":"It is good to see an example of Snapshot being used that way; it's easy to fall into the trap of thinking that snapshots are just for \"flowing around\"","m.mentions":{},"msgtype":"m.text"},"ts":1717012663260,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hd0O7U5p-SQw6XmQBEf3eQ_yd2eacxCF_e5QEHl9evU"},
{"content":{"body":"We heard a bit from the zone.js folks last week - did anyone get a better sense of the importance of registration context from that?","m.mentions":{},"msgtype":"m.text"},"ts":1717012671826,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$V6WJ9dcF5IUkijChvQPuG2Yit663AXkU57F9GbQqMEs"},
{"content":{"body":"my takeaway from their comments in this channel was that not using the causal path when available was sort of \"to avoid Zalgo\"","m.mentions":{},"msgtype":"m.text"},"ts":1717012716104,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FvwT7Zcfx3smAc6kH3Wk4f_slSzsYDqu6hkqGwtX0f4"},
{"content":{"body":"and I guess my thought is, we should just provide the additional information of the more specific causal context, and be OK with the Zalgo","m.mentions":{},"msgtype":"m.text"},"ts":1717012745229,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IfYZwqQ_MnD12YAKf3HMDUiSlZ9nyxtwLY6R1kAgqss"}
]