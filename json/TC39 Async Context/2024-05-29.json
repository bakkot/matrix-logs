[
{"content":{"body":"> <@jridgewell:matrix.org> The current spec should preserve the context at `.then()` time, no? Are you expecting `someAsyncApi`’s rejection time?\n\nI'm not seeing a specific code example, but I can imagine a few possibilities: (1) `v.run(1, () => Promise.reject()).then(x => x)` doesn't actually invoke the callback, so would it be reasonable to _not_ change the rejection context?  (2) It's also possible that the `then` handler runs in the causal context instead of the registration context - so regardless of whether or not it runs, it might still not lose the context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$e3PlLNNUvhtlplh16USgcIX0BpwrAkpmEKbR6S2bijE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>The current spec should preserve the context at <code>.then()</code> time, no? Are you expecting <code>someAsyncApi</code>’s rejection time?</blockquote></mx-reply>I'm not seeing a specific code example, but I can imagine a few possibilities: (1) <code>v.run(1, () =&gt; Promise.reject()).then(x =&gt; x)</code> doesn't actually invoke the callback, so would it be reasonable to <em>not</em> change the rejection context?  (2) It's also possible that the <code>then</code> handler runs in the causal context instead of the registration context - so regardless of whether or not it runs, it might still not lose the context.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e3PlLNNUvhtlplh16USgcIX0BpwrAkpmEKbR6S2bijE"}},"msgtype":"m.text"},"ts":1717006957189,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$RVnZxy7_iekwT8o5aQzttmrj6v5PETX6wPto9XAvgME"},
{"content":{"body":"I'm thinking a bit more right now about the idea of flowing _around_ `await`s (but maybe through `yield`s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the `await` site with a userland `promiseSnapshot = (promise) => promise.then(() => new Snapshot(), () => new Snapshot())` helper function (you'd need to `await promiseSnapshot(promise)` to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a `Snapshot.wrap` anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.","format":"org.matrix.custom.html","formatted_body":"I'm thinking a bit more right now about the idea of flowing <em>around</em> <code>await</code>s (but maybe through <code>yield</code>s?), but having nearly all callbacks run in the causal context by default.  You could emulate flow-through behavior at the <code>await</code> site with a userland <code>promiseSnapshot = (promise) =&gt; promise.then(() =&gt; new Snapshot(), () =&gt; new Snapshot())</code> helper function (you'd need to <code>await promiseSnapshot(promise)</code> to get ahold of it... so maybe there's a more performant option via a builtin, or something else we could carve out of those conceptual building blocks).  And you can opt into registration context with a <code>Snapshot.wrap</code> anytime it's needed.  So this seems to provide the most expressivity, I think the mental model is pretty  self-consistent, and I don't think it runs afoul of SES requirements.","m.mentions":{},"msgtype":"m.text"},"ts":1717007348847,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$e6CbRdL_tCmsmDPVY2WVYEAOnhdPxurgEMIQ7z3RpRU"},
{"content":{"body":"Maybe there's some way to actually replace the snapshot after resuming from an await, rather than needing to reference it via a snapshot variable, which is a lot more awkward - bounded `enterWith` for the whole snapshot, or something...  there was some brief discussion about this sort of thing after the end of yesterday's meeting - does anyone have more thoughts to share about this?","format":"org.matrix.custom.html","formatted_body":"Maybe there's some way to actually replace the snapshot after resuming from an await, rather than needing to reference it via a snapshot variable, which is a lot more awkward - bounded <code>enterWith</code> for the whole snapshot, or something...  there was some brief discussion about this sort of thing after the end of yesterday's meeting - does anyone have more thoughts to share about this?","m.mentions":{},"msgtype":"m.text"},"ts":1717008520648,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$HooUweoSqFT_4fUUpr0_PyBelJU6UQxLCQVUM8Oyr00"}
]