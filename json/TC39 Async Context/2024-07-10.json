[
{"content":{"body":"> <@stephenbelanger:matrix.org> That's not necessarily true with implicit scopes. If any function call is made an implicit scope then breaking out would be impossible.\n\nMy understanding is that this would add an unacceptable amount of overhead to _every_ function call, rather than just async functions, so it's basically a non-starter.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$og34FgWr-EciHnQsj2scF2NsXz2QK2SUv7Xbq_-Ih8Y?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>That's not necessarily true with implicit scopes. If any function call is made an implicit scope then breaking out would be impossible.</blockquote></mx-reply>My understanding is that this would add an unacceptable amount of overhead to <em>every</em> function call, rather than just async functions, so it's basically a non-starter.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$og34FgWr-EciHnQsj2scF2NsXz2QK2SUv7Xbq_-Ih8Y"}},"msgtype":"m.text"},"ts":1720570699803,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$g7__ciXOzUN743m3-QquguVi3dA9Od3KH2ZHjJCAing"},
{"content":{"body":"(but I could be wrong about that)","m.mentions":{},"msgtype":"m.text"},"ts":1720570713575,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$esbW2_Ha2VGeoJjDv8QyIRS2htm5-u-QotqSFvU_J0U"},
{"content":{"body":"i'm a little more confident that it's an unacceptable overhead for polyfilling/transpilation","m.mentions":{},"msgtype":"m.text"},"ts":1720570800245,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$KaGRE5OsIcr-uNaN9-KWn1zQZ06YZk4HOIacYSyttPQ"},
{"content":{"body":"(which, admittedly isn't a reason not to do it... but it would probably cause us to give up on using AsyncContext any time in the foreseeable future)","m.mentions":{},"msgtype":"m.text"},"ts":1720570858956,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$BbwYUzmF0axfIUJ34Cl2dHV6Tn05PuAyEqkpudTVM-4"},
{"content":{"body":"It actually shouldn't because then your \"scope\" can be held as a stack variable and just rely on stack semantics to manage where sets/gets route to.","m.mentions":{},"msgtype":"m.text"},"ts":1720570893006,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$Fn0LA4P-sQF2uQwKIvjQGYWGv4DRjAXo6s8Y1_mnrJY"},
{"content":{"body":"It's actually _faster_ to put it in the function header as otherwise you're _always_ doing heap operations whereas treating it as a stack variable lets you both locate the stack slot to modify it and also do captures on async tasks or nested scopes as stack operations.","format":"org.matrix.custom.html","formatted_body":"It's actually <em>faster</em> to put it in the function header as otherwise you're <em>always</em> doing heap operations whereas treating it as a stack variable lets you both locate the stack slot to modify it and also do captures on async tasks or nested scopes as stack operations.","m.mentions":{},"msgtype":"m.text"},"ts":1720571076004,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$IAD2__7_ML5P6J42AXri6qgqSqYFqOaX5rwmRoNtUzE"},
{"content":{"body":"polyfilling would require adding wrapping every function body (or every function call), which is just too expensive.  Also, this wouldn't help with the `beforeEach` situation, nor would it help achieve flow-through semantics.  So it's just a (dubious) ergonomics win.","format":"org.matrix.custom.html","formatted_body":"polyfilling would require adding wrapping every function body (or every function call), which is just too expensive.  Also, this wouldn't help with the <code>beforeEach</code> situation, nor would it help achieve flow-through semantics.  So it's just a (dubious) ergonomics win.","m.mentions":{},"msgtype":"m.text"},"ts":1720571459735,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$8uD2E41S6Fz4DgzUK1Ev7l2LhzeihR0c8G5c5LggtBY"}
]