[
{"content":{"body":"it should be 17 UTC","msgtype":"m.text"},"ts":1686636083354,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$C0gkWeNs1bHsZoaHiHMaZWCFt8LhunsCOEkqHFr4wFQ"},
{"content":{"body":"Yeah I see the earlier one as “cancelled” but all calendar integration is broken..","msgtype":"m.text"},"ts":1686652165383,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$29eCe2WvWqnVBMjzBKD05S9B5Gq3tgiewWwt78vZ5HM"},
{"content":{"body":"Hello. Is AsyncContext meeting open for everyone? May I invite my colleague joseph@socketsupply.co?","msgtype":"m.text"},"ts":1686666165360,"senderName":"Sergey Rubanov","senderId":"@chicoxyzzy:matrix.org","id":"$uEuJLZdbRdXt9K0aveAxJ83HidgfH3Q9Aw_9nSznmYw"},
{"content":{"body":"Yes, please do!","msgtype":"m.text"},"ts":1686669917068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nDBo5mCK3udTPWeFyp9BWJEQh27V6EhhCY6nIf_TtmI"},
{"content":{"body":"anyone can make contributions to TC39 things online if they sign https://tc39.es/agreements/contributor/","msgtype":"m.text"},"ts":1686669953301,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Hs3Wt3W0BpJRCmwHF63yRcPmIjScJ0T0fehVM2roE7o"},
{"content":{"body":"Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@chicoxyzzy:matrix.org\">Sergey Rubanov</a>: I added Joseph to the invite, please ensure they sign the IPR agreement before joining","msgtype":"m.text"},"ts":1686673885895,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY"},
{"content":{"body":"See you all in 30min!","msgtype":"m.text"},"ts":1686673924116,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iQ_U7qjdrjTp4W-pa0QN_R5z9zOa3Su8XCkLwoNR8ME"},
{"content":{"body":"> <@jridgewell:matrix.org> Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining\n\nThank you, I'll make sure Joe signed it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><a href=\"https://matrix.to/#/@chicoxyzzy:matrix.org\">Sergey Rubanov</a>: I added Joseph to the invite, please ensure they sign the IPR agreement before joining</blockquote></mx-reply>Thank you, I'll make sure Joe signed it","m.relates_to":{"m.in_reply_to":{"event_id":"$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY"}},"msgtype":"m.text"},"ts":1686674486321,"senderName":"Sergey Rubanov","senderId":"@chicoxyzzy:matrix.org","id":"$DfoMjNBXJHORbh6BThQc_Kipa7imInP9RwNOb7dhgSY"},
{"content":{"body":"littledan: in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play. While I have to think more about this, I have a few clarifying questions:\n- Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated\n- What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play. While I have to think more about this, I have a few clarifying questions:</p>\n<ul>\n<li>Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated</li>\n<li>What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?</li>\n</ul>\n","msgtype":"m.text"},"ts":1686682782342,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uhjV6b7ZMvqv_h4Bl4UNbhxkXtn44ETL8l4NtGtx4zI"},
{"content":{"body":"To clarify, if a program adds a reaction to an unresolved promise, then the program drops the resolvers, there is no way for the pending reaction to ever be called. If that reaction was the last thing that captured the async context, would that async context be deemed terminated?","msgtype":"m.text"},"ts":1686684975829,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y6fmjIXGwn25eGB_xqkqL-iFnARRkAik1zXebAhmab0"},
{"content":{"body":"Basically from my point of view, either we explicitly exclude GC from decrementing task termination counters, resulting in \"pending\" task that are in fact no longer pending (regardless of the usage of snapshot or not), or we admit that task termination is intrinsically tied to GC, thus making the user land process for task termination observation simply be a FinalizationRegistry registration of an object used as context value. If I'm missing something, please correct me.","msgtype":"m.text"},"ts":1686685259887,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CNVAirXYuf5kdDAcEo-AKvQ3yALd8iSFzCwSHdSdU-k"},
{"content":{"body":"> Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated\n\nYeah that's a possibility. Another possibility is that it's not exposed to JS. I don't see any meaningful change in the implementation work required by these two options, but maybe I'm missing something","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated</p>\n</blockquote>\n<p>Yeah that's a possibility. Another possibility is that it's not exposed to JS. I don't see any meaningful change in the implementation work required by these two options, but maybe I'm missing something</p>\n","msgtype":"m.text"},"ts":1686688127563,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fL9qsDYt-DPqo3WS_xjvkxq68opsJQtG3erjW7IyNkY"},
{"content":{"body":"> in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play.\n\nTo be clear, I think this would amount to internal-only snapshot calls leading to the appropriate reference counting operations, and just omitting user calls of snapshot operations. Fundamentally the same thing but maybe less risky because the counts can't be misused/left hanging unless the browser does that. And this would mean that we wouldn't have to muck up the snapshot API with a reference counting concept.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play.</p>\n</blockquote>\n<p>To be clear, I think this would amount to internal-only snapshot calls leading to the appropriate reference counting operations, and just omitting user calls of snapshot operations. Fundamentally the same thing but maybe less risky because the counts can't be misused/left hanging unless the browser does that. And this would mean that we wouldn't have to muck up the snapshot API with a reference counting concept.</p>\n","msgtype":"m.text"},"ts":1686688246741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1OBsTEMXMIFLMBrwYrKBXRuTOecZkcbWPNHhZGlLArg"},
{"content":{"body":"As I mentioned above, I think that whether a user API for snapshots is involved or not has no bearing on the problem. If a pending promise with reaction can be collected without the reactions being executed, that means task termination is intrinsically tied to GC. If these resolver-less promise cannot be collected, that means these tasks will leak / never terminate. If task termination is tied to GC, we would be opposed to a user exposed API specific to task termination, as we are invested in keeping gc observability to the existing WeakRef / FinalizationRegistry feature.","msgtype":"m.text"},"ts":1686690456488,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vrDD-8nLr9nm_hdm0BXDp3e7Z86g9_DJ99GmDdBVkvo"},
{"content":{"body":"About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.\n\n> What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?\n\nRemember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.","format":"org.matrix.custom.html","formatted_body":"<p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.</p>\n<blockquote>\n<p>What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?</p>\n</blockquote>\n<p>Remember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.</p>\n","msgtype":"m.text"},"ts":1686691638808,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$g9t7anUuGpIFdpZZIQi3iL8iIHorXoNGrUnvDj7DlhA"},
{"content":{"body":"Allocating a resolver-less promise doesn't make any particular task hang","msgtype":"m.text"},"ts":1686691676894,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Mn-k4CaULCjQ6nhaUWQe-Zogx3t0-fadiBizQ5FLhdQ"},
{"content":{"body":" * About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with you and others that we should keep it far away from AsyncContext and not add it in TC39.\n\n> What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?\n\nRemember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.","format":"org.matrix.custom.html","formatted_body":" * <p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with you and others that we should keep it far away from AsyncContext and not add it in TC39.</p>\n<blockquote>\n<p>What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?</p>\n</blockquote>\n<p>Remember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.</p>\n","m.new_content":{"body":"About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with you and others that we should keep it far away from AsyncContext and not add it in TC39.\n\n> What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?\n\nRemember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.","format":"org.matrix.custom.html","formatted_body":"<p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with you and others that we should keep it far away from AsyncContext and not add it in TC39.</p>\n<blockquote>\n<p>What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?</p>\n</blockquote>\n<p>Remember that a Promise captures a snapshot when you .then it, not when the Promise is created. If that promise never resolves... well, then that task is left hanging and never terminates. Maybe there should be some kind of event to notify folks when that happens, but I don't think it's the normal termination event, or should ever be treated as similar to one.</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$g9t7anUuGpIFdpZZIQi3iL8iIHorXoNGrUnvDj7DlhA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686691700752,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qiX-DayJfuCOq-El8NKblaDP0UZiTEtxXzjn2gQwaY8"},
{"content":{"body":"> About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.\nI guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.<br>I guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1686691736091,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$SUL0rg6OjeJTOvKbIrMWUCuiOdNG2Fnh66PaaS4ONLc"},
{"content":{"body":"I 100% agree about how we should limit GC observability","msgtype":"m.text"},"ts":1686691738747,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VyD6HAxFEMQYJmZgTJcfkxWwGTtvekh7h461JjX551o"},
{"content":{"body":" * > About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.\n\nI guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.</p>\n</blockquote>\n<p>I guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC</p>\n","m.new_content":{"body":"> About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.\n\nI guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>About the GC tie-in, I completely disagree. If task termination does necessarily tie into GC, then I agree with others that we should keep it far away from AsyncContext and not add it in TC39.</p>\n</blockquote>\n<p>I guess we agree? I'm saying I don't want a TC39 API for AsyncContext task termination if it would ultimately allow to observe GC</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$SUL0rg6OjeJTOvKbIrMWUCuiOdNG2Fnh66PaaS4ONLc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1686691743866,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$c1n5vf7ccWXoSy3fq2Dy1Scfgj6kBduj0IRbRFUEsHY"},
{"content":{"body":"yeah sounds like we agree","msgtype":"m.text"},"ts":1686691744446,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XFH3WQj7vBFEKblbntILHiGqSAh46cA5xYmcvG5igz0"},
{"content":{"body":"I'm just disagreeing that we should do anything in particular about GC'd promises","msgtype":"m.text"},"ts":1686691759369,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RbuuMSEU-Qkd6MXoP4Z3e0ziHQ_dhG9NsdE7WSx2ra8"},
{"content":{"body":"or that it'd make any kind of sense to","msgtype":"m.text"},"ts":1686691764621,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2IHPqFLlbkPyfJvPNvhRuuQ6w4s8MQKQYhS-Fmk0PiI"},
{"content":{"body":"I think my question above was: You create a promise, add a reaction (.then it), then drop the resolvers. What happens to the task captured in the reactions? Is it ok for the task to be considered \"pending\" forever?","msgtype":"m.text"},"ts":1686691890187,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Ck8a6lnK7YFtLC2FIBQ4dDzHom2fRIdfzN-Sr13zUFg"},
{"content":{"body":"yeah, my answer is, \"yes, it's pending forever\"","msgtype":"m.text"},"ts":1686691907680,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Cnzv3bNu1w4Lpde-Og4AmV6dfL1YJhDu-LLkRfCvdkk"},
{"content":{"body":"I had the impression that someone was claiming otherwise, that we'd have to let GC terminate it","msgtype":"m.text"},"ts":1686691924367,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$e10D8_KXTxVh2R68axF1J7Nq19K7uIXWmUe5Ue3ORFg"},
{"content":{"body":"I think for some applications around saving memory, you *do* want something-or-other with GC around tasks to do something, but this is a distinct problem  from the accurate task termination notification","format":"org.matrix.custom.html","formatted_body":"I think for some applications around saving memory, you <em>do</em> want something-or-other with GC around tasks to do something, but this is a distinct problem  from the accurate task termination notification","msgtype":"m.text"},"ts":1686691957961,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gkaXgIvK0t3vfgQj6UEbMhR8Mjuh7lQimZWJWSpJ47o"},
{"content":{"body":"BTW I also wanted to mention: I got a chance to discuss AsyncContext with Anne vK at the Web Engines Hackfest, and explained the problems around what the model is for which snapshot is restored, and how this is non-trivial for events. He was generally not negative about the proposal, just expressing that this needed to be worked out. So I think it will be good for Ms2ger and Yoav to get in touch with Anne at some point, now that he has this basic context.","msgtype":"m.text"},"ts":1686692135864,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LJAmQtAOjUqnNlvVSqOq6Xf_0wbPbk1hd5SCcXKrQyI"}
]