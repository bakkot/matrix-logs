[
{"content":{"body":"it should be 17 UTC","msgtype":"m.text"},"ts":1686636083354,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$C0gkWeNs1bHsZoaHiHMaZWCFt8LhunsCOEkqHFr4wFQ"},
{"content":{"body":"Yeah I see the earlier one as “cancelled” but all calendar integration is broken..","msgtype":"m.text"},"ts":1686652165383,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$29eCe2WvWqnVBMjzBKD05S9B5Gq3tgiewWwt78vZ5HM"},
{"content":{"body":"Hello. Is AsyncContext meeting open for everyone? May I invite my colleague joseph@socketsupply.co?","msgtype":"m.text"},"ts":1686666165360,"senderName":"Sergey Rubanov","senderId":"@chicoxyzzy:matrix.org","id":"$uEuJLZdbRdXt9K0aveAxJ83HidgfH3Q9Aw_9nSznmYw"},
{"content":{"body":"Yes, please do!","msgtype":"m.text"},"ts":1686669917068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nDBo5mCK3udTPWeFyp9BWJEQh27V6EhhCY6nIf_TtmI"},
{"content":{"body":"anyone can make contributions to TC39 things online if they sign https://tc39.es/agreements/contributor/","msgtype":"m.text"},"ts":1686669953301,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Hs3Wt3W0BpJRCmwHF63yRcPmIjScJ0T0fehVM2roE7o"},
{"content":{"body":"Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@chicoxyzzy:matrix.org\">Sergey Rubanov</a>: I added Joseph to the invite, please ensure they sign the IPR agreement before joining","msgtype":"m.text"},"ts":1686673885895,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY"},
{"content":{"body":"See you all in 30min!","msgtype":"m.text"},"ts":1686673924116,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iQ_U7qjdrjTp4W-pa0QN_R5z9zOa3Su8XCkLwoNR8ME"},
{"content":{"body":"> <@jridgewell:matrix.org> Sergey Rubanov: I added Joseph to the invite, please ensure they sign the IPR agreement before joining\n\nThank you, I'll make sure Joe signed it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><a href=\"https://matrix.to/#/@chicoxyzzy:matrix.org\">Sergey Rubanov</a>: I added Joseph to the invite, please ensure they sign the IPR agreement before joining</blockquote></mx-reply>Thank you, I'll make sure Joe signed it","m.relates_to":{"m.in_reply_to":{"event_id":"$Y-5VHkHVHMgsmYSB7iW9Ad8pubufqYPstodrtywuYPY"}},"msgtype":"m.text"},"ts":1686674486321,"senderName":"Sergey Rubanov","senderId":"@chicoxyzzy:matrix.org","id":"$DfoMjNBXJHORbh6BThQc_Kipa7imInP9RwNOb7dhgSY"},
{"content":{"body":"littledan: in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play. While I have to think more about this, I have a few clarifying questions:\n- Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated\n- What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play. While I have to think more about this, I have a few clarifying questions:</p>\n<ul>\n<li>Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated</li>\n<li>What is the expected behavior of termination in the case of pending promises (or captured snapshots) which are garbage collected, thus preventing any future execution in the context to occur through them. Do we expect the task to be considered terminated in that case (if they were the last related promise / snapshots) ?</li>\n</ul>\n","msgtype":"m.text"},"ts":1686682782342,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uhjV6b7ZMvqv_h4Bl4UNbhxkXtn44ETL8l4NtGtx4zI"},
{"content":{"body":"To clarify, if a program adds a reaction to an unresolved promise, then the program drops the resolvers, there is no way for the pending reaction to ever be called. If that reaction was the last thing that captured the async context, would that async context be deemed terminated?","msgtype":"m.text"},"ts":1686684975829,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$Y6fmjIXGwn25eGB_xqkqL-iFnARRkAik1zXebAhmab0"},
{"content":{"body":"Basically from my point of view, either we explicitly exclude GC from decrementing task termination counters, resulting in \"pending\" task that are in fact no longer pending (regardless of the usage of snapshot or not), or we admit that task termination is intrinsically tied to GC, thus making the user land process for task termination observation simply be a FinalizationRegistry registration of an object used as context value. If I'm missing something, please correct me.","msgtype":"m.text"},"ts":1686685259887,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$CNVAirXYuf5kdDAcEo-AKvQ3yALd8iSFzCwSHdSdU-k"},
{"content":{"body":"> Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated\n\nYeah that's a possibility. Another possibility is that it's not exposed to JS. I don't see any meaningful change in the implementation work required by these two options, but maybe I'm missing something","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Do you expect that context termination would be a user exposed API. Aka would there be a callback executing when a task is deemed to be terminated</p>\n</blockquote>\n<p>Yeah that's a possibility. Another possibility is that it's not exposed to JS. I don't see any meaningful change in the implementation work required by these two options, but maybe I'm missing something</p>\n","msgtype":"m.text"},"ts":1686688127563,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fL9qsDYt-DPqo3WS_xjvkxq68opsJQtG3erjW7IyNkY"},
{"content":{"body":"> in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play.\n\nTo be clear, I think this would amount to internal-only snapshot calls leading to the appropriate reference counting operations, and just omitting user calls of snapshot operations. Fundamentally the same thing but maybe less risky because the counts can't be misused/left hanging unless the browser does that. And this would mean that we wouldn't have to muck up the snapshot API with a reference counting concept.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>in the meeting you mentioned you still believe there is a way to fast path task termination with reference counting when snapshots are not in play.</p>\n</blockquote>\n<p>To be clear, I think this would amount to internal-only snapshot calls leading to the appropriate reference counting operations, and just omitting user calls of snapshot operations. Fundamentally the same thing but maybe less risky because the counts can't be misused/left hanging unless the browser does that. And this would mean that we wouldn't have to muck up the snapshot API with a reference counting concept.</p>\n","msgtype":"m.text"},"ts":1686688246741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1OBsTEMXMIFLMBrwYrKBXRuTOecZkcbWPNHhZGlLArg"},
{"content":{"body":"As I mentioned above, I think that whether a user API for snapshots is involved or not has no bearing on the problem. If a pending promise with reaction can be collected without the reactions being executed, that means task termination is intrinsically tied to GC. If these resolver-less promise cannot be collected, that means these tasks will leak / never terminate. If task termination is tied to GC, we would be opposed to a user exposed API specific to task termination, as we are invested in keeping gc observability to the existing WeakRef / FinalizationRegistry feature.","msgtype":"m.text"},"ts":1686690456488,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$vrDD-8nLr9nm_hdm0BXDp3e7Z86g9_DJ99GmDdBVkvo"}
]