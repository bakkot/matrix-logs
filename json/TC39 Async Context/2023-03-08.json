[
{"content":{"body":"We have spec text! https://tc39.es/proposal-async-context/","msgtype":"m.text"},"ts":1678299635419,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ldw5q4dhUsXisUoGrGKzhL2-QcABzQtIIK8zBuS9gkc"},
{"content":{"body":"I think the only surprising change is the addition of `[[Construct]]` on wrapped callbacks:\n```\nconst Foo = AsyncContext.wrap(class Foo {});\n\n// The wrapper will invoke construct on the wrapped function\nnew Foo();\n```\n","format":"org.matrix.custom.html","formatted_body":"<p>I think the only surprising change is the addition of <code>[[Construct]]</code> on wrapped callbacks:</p>\n<pre><code>const Foo = AsyncContext.wrap(class Foo {});\n\n// The wrapper will invoke construct on the wrapped function\nnew Foo();\n</code></pre>\n","msgtype":"m.text"},"ts":1678299715814,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ieFDLyNizOvqfQ7n7tMl8Xh8wiecgD-tSK9SFWgLT-0"},
{"content":{"body":"This comes from the behavior of `Function.p.bind`","format":"org.matrix.custom.html","formatted_body":"This comes from the behavior of <code>Function.p.bind</code>","msgtype":"m.text"},"ts":1678299735862,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JHOfJOWXryvv554tYvxBpNvXdDJvHdoLZBr_gWqBPfo"},
{"content":{"body":"yeah I am OK with including or omitting the [[Construct]] behavior","msgtype":"m.text"},"ts":1678307131724,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NtsRN4wShe4cNvEYKAgoHYxkFPWQzbqsp_qbjxmZm-E"},
{"content":{"body":"the spec would probably be clearer if we could use whatwg infra algorithms","msgtype":"m.text"},"ts":1678308138394,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$krmqTVRle2_KyRT7CPyGsivUsJohwIyIFNyu7RtdCeU"},
{"content":{"body":"(for the mapping)","msgtype":"m.text"},"ts":1678308148516,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BAEsCJhkureS2TeQAqpBx7-c4KsrDL7GcdnDwPgAJ_0"},
{"content":{"body":"we should probably think about exposing reusable algorithms (for web specs) for get and run, but this is an editorial thing","msgtype":"m.text"},"ts":1678308219074,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2O3QMlwni6RM-SNeUQD2S5ejkKq5kVIEBf6d58haE9A"},
{"content":{"body":"it might be nicer editorially if we avoided SameValueZero; SameValue or simply = is enough. (But the nicest would be to say that it's a mapping...)","msgtype":"m.text"},"ts":1678308248692,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lQhZIWYwsPcmGE6IUDL2SZDCjNL0mFD6tXVI7y16zKY"},
{"content":{"body":"anyway I don't see any bugs in the spec; looks good for Stage 2 to me","msgtype":"m.text"},"ts":1678308271584,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lCpJnKu4Nm5I1s6EgdvJ9UnnEaftRJ1xrlG1XPoX8hI"}
]