[
{"content":{"msgtype":"m.text","body":"As Justin suggests, we can easily replace `class Foo extends AsyncContext { bar() { this.runInAsyncScope(() => {}) }}` with...\n\n```\nclass Foo {\n  #runInAsyncScope = AsyncContext.wrap((cb, ...args) => cb(...args));\n  bar() { this.#runInAsyncScope(() => {});\n}\n```\n\nTo achieve the use case","format":"org.matrix.custom.html","formatted_body":"<p>As Justin suggests, we can easily replace <code>class Foo extends AsyncContext { bar() { this.runInAsyncScope(() =&gt; {}) }}</code> with...</p>\n<pre><code>class Foo {\n  #runInAsyncScope = AsyncContext.wrap((cb, ...args) =&gt; cb(...args));\n  bar() { this.#runInAsyncScope(() =&gt; {});\n}\n</code></pre>\n<p>To achieve the use case</p>\n"},"ts":1674864011352,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$VD4BaG2EV-jelj7vYVKD7PfHAzE32DYHqV4WZUeaaKM"},
{"content":{"msgtype":"m.text","body":"The idea with `AsyncContext.snapshot()` is to just eliminate the extra boilerplate of that wrap tho","format":"org.matrix.custom.html","formatted_body":"The idea with <code>AsyncContext.snapshot()</code> is to just eliminate the extra boilerplate of that wrap tho"},"ts":1674864042640,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$CvIfeZWMifUDMgarnysBneyOWw9kMg1zAMUgfW-J53s"},
{"content":{"msgtype":"m.text","body":"While `AsyncResource` has other use cases relating to async_hooks, the only one that is relevant here is capturing the context on object creation and being able to call into that multiple times","format":"org.matrix.custom.html","formatted_body":"While <code>AsyncResource</code> has other use cases relating to async_hooks, the only one that is relevant here is capturing the context on object creation and being able to call into that multiple times"},"ts":1674864943387,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6_uRKN1PqeovYNiQ2y-B3L1z8ILqj8SAogYVAVBTpoU"},
{"content":{"msgtype":"m.text","body":"https://github.com/legendecas/proposal-async-context/issues/19","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$SrSjrwJuIDDiJ8j8Ej-ZE9zoZCtQDRdrOx0Z7d5Zz1s"},"rel_type":"m.thread"}},"ts":1674903700267,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$s80o764e91Hjfeh6If0CmzVmcb2Ktaf5KHAkX4pn6A8"},
{"content":{"msgtype":"m.text","body":"Sure, so since this is not expressiveness but rather ergonomics, it would help if someone could point at actual use cases so I could understand why this is worth it"},"ts":1674918924914,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qYUKRfdETaNhqzFWgyRuRMICpMi605clsl5WXwTErX0"},
{"content":{"body":"Take a look at the piscina library. That was the origin of Node.js' EventEmitterAsyncResource. It shows a practical use case. Another useful case, look at HTMLRewriter change here https://github.com/cloudflare/workerd/pull/282/commits/0ffd4efd1914b428639499517e0177bd843a6583","msgtype":"m.text"},"ts":1674921957881,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Yd-OstYHh5vptGKJq6Rbmwr5J5mHzZyibPYzVFxC3Ms"},
{"content":{"body":"That's not using AsyncResource but the effect is the same. We capture the context frame once and enter it each time the registered callbacks are called","msgtype":"m.text"},"ts":1674922063890,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$UZqFU3-s4KjNtdFybSk14Cq1oXozca_VuaTb4Ypuppk"},
{"content":{"body":"Or, we can use AsyncResource to run in the context where the handlers are registered. ","msgtype":"m.text"},"ts":1674922113829,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Uzk762protny5E9INNhPCta2SZlxjpvfxmSVXbH23UA"},
{"content":{"body":"It gives a good amount of flexibility","msgtype":"m.text"},"ts":1674922125608,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$XZIel1R9jE-I6BVad2PMotirJOTIV6GLx0buyeQ_GTY"},
{"content":{"msgtype":"m.text","body":"- https://github.com/piscinajs/piscina/blob/bcae345594fa5a6c306bff207fc95c14b021293a/src/index.ts#L209-L211\n- https://github.com/piscinajs/piscina/blob/bcae345594fa5a6c306bff207fc95c14b021293a/src/index.ts#L267","format":"org.matrix.custom.html","formatted_body":"<ul>\n<li>https://github.com/piscinajs/piscina/blob/bcae345594fa5a6c306bff207fc95c14b021293a/src/index.ts#L209-L211</li>\n<li>https://github.com/piscinajs/piscina/blob/bcae345594fa5a6c306bff207fc95c14b021293a/src/index.ts#L267</li>\n</ul>\n"},"ts":1674928956904,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qjIWabqz-KE77L9vvHgp89WpySrhKx-NMUnIcwO4Usw"},
{"content":{"msgtype":"m.text","body":"I think in this particular case, using `this.callback = AsynContext.wrap(callback)` would have been appropriate","format":"org.matrix.custom.html","formatted_body":"I think in this particular case, using <code>this.callback = AsynContext.wrap(callback)</code> would have been appropriate"},"ts":1674929073850,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PWpTzC6MWB3isw5MCtQGFnNXtxfRa5tBHhyYARtuZGs"},
{"content":{"msgtype":"m.text","body":"But `snapshot()` would be helpful for capturing the context used for multiple callbacks, instead of wrapping each individually","format":"org.matrix.custom.html","formatted_body":"But <code>snapshot()</code> would be helpful for capturing the context used for multiple callbacks, instead of wrapping each individually"},"ts":1674929096884,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PdbM39Fkcy4XgD4-OWZEw0qAZW6N70sSRHMJ2h8Pswo"},
{"content":{"body":"Yep absolutely. We had no other choices at the time.","msgtype":"m.text"},"ts":1674929129164,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Lp1zJf768LKgeYGOjHnDJ2O1RSuf9jKEs0v1-TJ-7bg"},
{"content":{"body":"That's why I also point at the HTMLRewriter example. It has the multiple callbacks so provides a good contrast","msgtype":"m.text"},"ts":1674929174871,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Mumz4RqLL55EIcffol5_GaXNGUn5_ztvGXlhdVX6-_g"},
{"content":{"body":"Wrapping each individual callback is also very expensive in node.js' current model since each is a separate AsyncResource that copies the context","msgtype":"m.text"},"ts":1674929709313,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$cLGrtygegyAhlnHPHbHFPn70AXbI8UieL-f51xElGhk"},
{"content":{"body":"That won't the case in the revised model, of course, but currently it's pretty expensive to wrap each individual callback so using AsyncResource is less costly but isn't really quite right in most cases","msgtype":"m.text"},"ts":1674929782591,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$sHg2eXxr2Z43uGmXSwFfyiMEYnm302mXav3i8lYwLKQ"},
{"content":{"msgtype":"m.text","body":"I've been poking the current implementation to adopt the revised model, based on the current async_hooks."},"ts":1674929943481,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$-heWigsaZwDVrH5miRzv7GDxVRWhuzJPwus9l9lu5pE"},
{"content":{"msgtype":"m.text","body":"The performance improvements can be significant"},"ts":1674930003014,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$4LlBLcCFn77FD7X7MPhROPKwGN_sh1v1QuJm1UB9y8M"},
{"content":{"msgtype":"m.text","body":"it is still worthwhile to update the current implementation, since we won't get the new v8 apis on older LTS lines"},"ts":1674930143786,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$nV3K9-Ma1SB9SBuaWr7BSr26o4R5wMdaNZ0gk1-s3JM"},
{"content":{"body":"Yeah I think once we get a few tweaks in place we should be able to transition fairly easily while keeping the old releases on the asynchooks model","msgtype":"m.text"},"ts":1674930296684,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$KhxSZ4OFNwwf5zBOaQ96gmiR7-y9txlVVqRKhgJwX04"},
{"content":{"msgtype":"m.text","body":"yeah, maybe I can submit my micro-benchmarks first -- I still need more time to cleanup my improvements."},"ts":1674930451777,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$2b-AVLPBZ6zX-rJPYeDa5woWU8Mo6fEUjiB2Et45Thk"},
{"content":{"msgtype":"m.text","body":"but, right, with the revised model, wrap and snapshot should have no performance differences.","m.relates_to":{"m.in_reply_to":{"event_id":"$sHg2eXxr2Z43uGmXSwFfyiMEYnm302mXav3i8lYwLKQ"}}},"ts":1674930875641,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$URnOpRiy7TMh0zcoAyaLDOA4SOH-Z6ItuTO-_lSgbxc"}
]