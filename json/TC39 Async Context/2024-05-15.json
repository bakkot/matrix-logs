[
{"content":{"body":"One of my AI's was to go through Stephen's docs and try to figure out what the gist of it was.  I think Stephen was also going to try to distill it down a bit further, though it was late for him by the end of the meeting.  Variable.prototype.wrap is a convenience function and I think we agreed to more or less table it for now.  But there's also a question of per-instance propagation configuration that is impossible to do in userland (i.e. some vars propagate via init/registration context, while others propagate via causal/calling context).  Per a discussion today with Scott Haseley, it sounds like there's already some precedent for this in how v8 handles yield vs. normal CPED/attribution, in that the latter propagates over setTimeout while the former is dropped.  In the case of multiple variable configs, I think it would boil down to having effectively two separate variable linked lists instead of one, and they're treated differently by snapshot swapping.  This may not be infeasible, so it's maybe worth considering whether it leads to a good solution.\n\nWe didn't get a chance to discuss callingContext, though (tbh) it's still my preferred option for ensuring the APM use case is viable - but we still need to figure out Promise.all.  One (totally off-the-cuff) possibility would be to just stack up all the causal contexts, first-to-last.  You know how many promises were merged, so you can pop that many contexts off the stack if you need them all.\n\nUpshot from discussion with Jatin was that he agreed that calling context is crucial, and figured that most userland schedulers (at least the ones he owns) would probably need to go with that default.  Registration context is useless for our use of computed signals and effects (and he was particularly concerned about losing the ability to see causal context if/when Signals land in the standard), and we'd need to propagate causal context throughout all the stages of (user interaction) -> (lazy load, controller instantiation) -> (rpc fetch) -> (model cache update) -> (component rerender) in order to ensure tracing works correctly.  These are all (currently) userland schedulers, at least, so it's possible, but ultimately the hope is to replace the model cache with signals.","m.mentions":{},"msgtype":"m.text"},"ts":1715747331748,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$EnzHypgXAmfMSFa9x4fIX-7W0sWohuCcqsKnMJteC_E"},
{"content":{"body":" * One of my AI's was to go through Stephen's docs and try to figure out what the gist of it was.  I think Stephen was also going to try to distill it down a bit further, though it was late for him by the end of the meeting.  Variable.prototype.wrap is a convenience function and I think we agreed to more or less table it for now.  But there's also a question of per-instance propagation configuration that is impossible to do in userland (i.e. some vars propagate via init/registration context, while others propagate via causal/calling context).  Per a discussion today with Scott Haseley, it sounds like there's already some precedent for this in how v8 handles yield vs. normal CPED/attribution, in that the latter propagates over setTimeout while the former is dropped.  In the case of multiple variable configs, I think it would boil down to having effectively two separate variable linked lists instead of one, and they're treated differently by snapshot swapping.  This may not be infeasible, so it's maybe worth considering whether it leads to a good solution.\n\nWe didn't get a chance to discuss callingContext, though (tbh) it's still my preferred option for ensuring the APM use case is viable, due to balancing the extra complexity and feasibility of ever actually landing this proposal, vs stalling out from trying to do too much - but we do still need to figure out Promise.all.  One (totally off-the-cuff) possibility would be to just stack up all the causal contexts, first-to-last.  You know how many promises were merged, so you can pop that many contexts off the stack if you need them all.\n\nUpshot from discussion with Jatin was that he agreed that calling context is crucial, and figured that most userland schedulers (at least the ones he owns) would probably need to go with that default.  Registration context is useless for our use of computed signals and effects (and he was particularly concerned about losing the ability to see causal context if/when Signals land in the standard), and we'd need to propagate causal context throughout all the stages of (user interaction) -> (lazy load, controller instantiation) -> (rpc fetch) -> (model cache update) -> (component rerender) in order to ensure tracing works correctly.  These are all (currently) userland schedulers, at least, so it's possible, but ultimately the hope is to replace the model cache with signals.","m.mentions":{},"m.new_content":{"body":"One of my AI's was to go through Stephen's docs and try to figure out what the gist of it was.  I think Stephen was also going to try to distill it down a bit further, though it was late for him by the end of the meeting.  Variable.prototype.wrap is a convenience function and I think we agreed to more or less table it for now.  But there's also a question of per-instance propagation configuration that is impossible to do in userland (i.e. some vars propagate via init/registration context, while others propagate via causal/calling context).  Per a discussion today with Scott Haseley, it sounds like there's already some precedent for this in how v8 handles yield vs. normal CPED/attribution, in that the latter propagates over setTimeout while the former is dropped.  In the case of multiple variable configs, I think it would boil down to having effectively two separate variable linked lists instead of one, and they're treated differently by snapshot swapping.  This may not be infeasible, so it's maybe worth considering whether it leads to a good solution.\n\nWe didn't get a chance to discuss callingContext, though (tbh) it's still my preferred option for ensuring the APM use case is viable, due to balancing the extra complexity and feasibility of ever actually landing this proposal, vs stalling out from trying to do too much - but we do still need to figure out Promise.all.  One (totally off-the-cuff) possibility would be to just stack up all the causal contexts, first-to-last.  You know how many promises were merged, so you can pop that many contexts off the stack if you need them all.\n\nUpshot from discussion with Jatin was that he agreed that calling context is crucial, and figured that most userland schedulers (at least the ones he owns) would probably need to go with that default.  Registration context is useless for our use of computed signals and effects (and he was particularly concerned about losing the ability to see causal context if/when Signals land in the standard), and we'd need to propagate causal context throughout all the stages of (user interaction) -> (lazy load, controller instantiation) -> (rpc fetch) -> (model cache update) -> (component rerender) in order to ensure tracing works correctly.  These are all (currently) userland schedulers, at least, so it's possible, but ultimately the hope is to replace the model cache with signals.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$EnzHypgXAmfMSFa9x4fIX-7W0sWohuCcqsKnMJteC_E","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715747446510,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-m55UawwCczLqyXnoFgHTtUTOURnzohkNG-ifAmuirY"},
{"content":{"body":"I took a stap at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA","m.mentions":{},"msgtype":"m.text"},"ts":1715748523463,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$DTLBd7W-uRFkBUC89H9ar_ay1OEb1lwWkkWZJhk1cYU"},
{"content":{"body":" * I took a stap at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: [playground](https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA)","format":"org.matrix.custom.html","formatted_body":" * I took a stap at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: <a href=\"https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA\">playground</a>","m.mentions":{},"m.new_content":{"body":"I took a stap at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: [playground](https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA)","format":"org.matrix.custom.html","formatted_body":"I took a stap at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: <a href=\"https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA\">playground</a>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DTLBd7W-uRFkBUC89H9ar_ay1OEb1lwWkkWZJhk1cYU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715748552666,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$M2E4rJkeQow1YZNkW62mG52vJCueE6Xy6U0OpFCXgwQ"},
{"content":{"body":" * I took a stab at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: [playground](https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA)","format":"org.matrix.custom.html","formatted_body":" * I took a stab at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: <a href=\"https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA\">playground</a>","m.mentions":{},"m.new_content":{"body":"I took a stab at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: [playground](https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA)","format":"org.matrix.custom.html","formatted_body":"I took a stab at implementing the stack-based Promise.all in userland with callingContext, and I ran into a brick wall because there's no way to actually stack multiple top-level frames: <a href=\"https://www.typescriptlang.org/play/?#code/CYUwxgNghgTiAEA7KBbEBnADlMCCC6AnomAMID2iALiAB5XwDeAUPPHZuTA5FOuvADKyTOgAW5BizZsYAV0QAeACoA+ABQAzRAC546gJTwAvKvjKDe5axnoqUKgEsw8AO4womRQDF29EIjAAt4KYE6UGtp63pbw3gDcNgC+NhxcDJqh4YjwYFAQEI6IAOYU1HRUKpG6+kam5rHKiSnMmSTZ8Jgw5CiO6CB4BSp+NIECAArdvf2KCgDWiOSuiKoA2gC6Gl09fRhWsZM7M4yrANLwRfBzIITkmubreniuUI40wCpnm0lm0vAQIAY6BE4kkTyIJDKNHoADphJ5QVQAD4KUCaIogYCJNhgSh2eBwdByCBUdB6eaLZYbEydKa7dAwlCedSGExmVEgdGITEGbH-QG5cgKBjGWlHDAwgElKhiPlwKhyGA5bmueCHaYgFmE8gQABuIAANASQAArcBUOq-GxsTRcfQAhiOGkABniF3gijFGoZUuKMrdjgA1IGjH8ZF76atHOsYTKAizdflLUxreHjUSSego+saYmIHy0xd7uoAITAhESC0pwvh8uiSs0gjEMiUaFUGF5ApFUqtios5Mq+BNyG92Hw+uSQy81PhpLsCD9as1th1xE01eVmHyRD9tlL5dsAD0h-gADkAPLKACiehlfXgwHIGCQkngAEc5G8EK4uHN4AAjcAoDkRc41yfJChKKEKjcRwClyCByH-QCYBnGtj3gMCN1fMQ+ioLhCCNKBAngXVnAQfUYHQKAYTYAB1BB-z4ZwIMIJAQExeAoDcKA2PwzpiQgNDCwwoUGG49BuwBeBNA8NAjVcXCwDEeB+hAFABHUBwZMcKiGGKaASENTDyHgNAjFxagPGAZx8JgQhhLTDDXDeFTAO7Lj-2k-icFwfhwK7EpBXKegBFgBBYH-N4PHsh8QEwGUjQUAF+Ec8MMKZQhAMwsQEE7SCexChg8HGABJTCoGuMK4oSlTsDkwEQBgWihwXcgFJAAByfV-nIOw0pkDCwNxGA4DCAKCug+h4FyuAuJIuM5sfDBEE6oEOJQEyAIini+PIAajxPYoBW0t4YQO40FSVIcIRbIqOwg7spqoXd6kHYc7rbOEQUrKcCxrJJp2XFJl0cYsAFpwdxYV4DMZ0jHlRVEH+2sfskLcFFesxtT1TVCWJUkuLCxBCAMIG0ySI11CamBkzDNM4DNMJqdG8nZwMVMQfgQHmmYIA\">playground</a>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$DTLBd7W-uRFkBUC89H9ar_ay1OEb1lwWkkWZJhk1cYU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715748565424,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$H0cKsYwVHpT7B7b1nUL61yDz0sOEV67qZPPQftkErPg"},
{"content":{"body":"I can see a few variants on callingContext: (1) it just puts the previous frame directly on top of the current one (i.e. behaves identical to Snapshot.run) - in this case, one could just _make_ it a snapshot?  This makes it impossible to access deeper-nested ones, since `callingContext()` will just get you back to the previous (registration?) context.  Unless maybe it takes a depth argument.  In that case, the stacking might _just_ be possible.  Or (2) it restores the entire context stack to whatever it looked like in the calling environment, such that a second `callingContext`would go back further in causation history.","format":"org.matrix.custom.html","formatted_body":"I can see a few variants on callingContext: (1) it just puts the previous frame directly on top of the current one (i.e. behaves identical to Snapshot.run) - in this case, one could just <em>make</em> it a snapshot?  This makes it impossible to access deeper-nested ones, since <code>callingContext()</code> will just get you back to the previous (registration?) context.  Unless maybe it takes a depth argument.  In that case, the stacking might <em>just</em> be possible.  Or (2) it restores the entire context stack to whatever it looked like in the calling environment, such that a second <code>callingContext</code>would go back further in causation history.","m.mentions":{},"msgtype":"m.text"},"ts":1715748802968,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$3RlFHbHWiq7N9hUrmmyQvBYcQ2a4Xlz3xLan8Ofd34g"},
{"content":{"body":"I made this small (-ish) example of how we're doing that differentiation between child-of and follows-from relationships and what we're trying to do with holding the minimum possible data in the store (just the ID). https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e","m.mentions":{},"msgtype":"m.text"},"ts":1715771259392,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ospSxB-4gtYM-mSEdbOhQWjFJ79mvIHGjbNmWHIsz0w"},
{"content":{"body":"In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure. But we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself from that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":"In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure. But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself from that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","m.mentions":{},"msgtype":"m.text"},"ts":1715773037878,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$6xsFYNVKZ8KYQ_yvESghJtHt7egBAQ9-2X9WlSfsNUo"},
{"content":{"body":" * In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself from that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":" * <p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself from that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"m.new_content":{"body":"In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself from that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":"<p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The example above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself from that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6xsFYNVKZ8KYQ_yvESghJtHt7egBAQ9-2X9WlSfsNUo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715773062630,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$v0jvx9vGTbk9YY4nyhmZjcCRPhaQy21L7OoovYnYcsk"},
{"content":{"body":" * In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself from that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":" * <p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself from that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"m.new_content":{"body":"In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself from that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":"<p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself from that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6xsFYNVKZ8KYQ_yvESghJtHt7egBAQ9-2X9WlSfsNUo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715773078257,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$9XmvK_y8AAq-ShHMwLrfS3hdATj21KsM3rnhzeXbpyA"},
{"content":{"body":" * In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself to that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":" * <p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself to that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"m.new_content":{"body":"In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not _too_ terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not _too_ terribly important as we at least get _one_ of the branches so we can still _mostly_ understand the execution structure.\n\nBut we _do_ need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically _continues_ from a particular point is expected to be able to attribute itself to that. Whereas what we get _currently_ with both async/await and promises is a flat structure where all the `mysql.query` spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.","format":"org.matrix.custom.html","formatted_body":"<p>In those examples we have a solution to the need to separate child-of and follows-from relationships, which is not <em>too</em> terribly complicated, so we can live with that. And as I expressed previously the multiple follows-from thing is not <em>too</em> terribly important as we at least get <em>one</em> of the branches so we can still <em>mostly</em> understand the execution structure.</p>\n<p>But we <em>do</em> need to be able to flow through at least singular pathed merges like an await or then continuation of a single promise. The examples above are meant to show that we are expecting something which logically <em>continues</em> from a particular point is expected to be able to attribute itself to that. Whereas what we get <em>currently</em> with both async/await and promises is a flat structure where all the <code>mysql.query</code> spans within those examples would get flattened up to linking with the http.server span, even if the second query has another query between it and the http handler starting.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$6xsFYNVKZ8KYQ_yvESghJtHt7egBAQ9-2X9WlSfsNUo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715773094551,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$zUuYOHFOxHF-__wMzvfs7JFm1Z4Y3qJeQPDHj_H-Jlo"},
{"content":{"body":"I am confused by general comments on registration time vs call time. Can we do more to dig into the detailed cases? (Am chatting with Jatin about this now too)","msgtype":"m.text"},"ts":1715783837513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4zYf717ud8bFex1N9ibHXcFjjlvx0nOezuKGU9XYMwI"},
{"content":{"body":"Andreu had some sort of point by point analysis. What if we made that a Google Doc and then we could comment together on which things could/should be different for which use cases?","msgtype":"m.text"},"ts":1715783882412,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q_zPGqBC4ZYCoFxlHdSss4_qHpkkiFDuzjQbYRTH_Fo"},
{"content":{"body":"In reality there will be a mix of both registration time and call time, so I have trouble understanding conversations which are phrases like “vs”","msgtype":"m.text"},"ts":1715784544939,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LIm5fdH3MOV10BheVYWQIBu7OAXy2QL3SaneftV_pz4"},
{"content":{"body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. <button on click=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","msgtype":"m.text"},"ts":1715786873387,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs"},
{"content":{"body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<buttonon click=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need \\_some\\_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;buttonon click=&quot;...&quot;&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"m.new_content":{"body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<buttonon click=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need \\_some\\_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;buttonon click=&quot;...&quot;&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715788204717,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$KANB_NFy2boCSROgU1621HNPpTom14HE_XXqdx0keO4"},
{"content":{"body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<buttonon click=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;buttonon click=\"...\"&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need <em>some</em> option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"m.new_content":{"body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<buttonon click=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;buttonon click=\"...\"&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need <em>some</em> option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715788217220,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$IEX7-0Kii0KQ81mWxAEpuDj9G2PazkvgsERz6n02kPc"},
{"content":{"body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<button onclick=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":" * A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;button onclick=\"...\"&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need <em>some</em> option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"m.new_content":{"body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<button onclick=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","format":"org.matrix.custom.html","formatted_body":"A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;button onclick=\"...\"&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need <em>some</em> option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715788235814,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nxZgpGGCQ1wJwGn8aMEN91GTcnDYZXBgMD_EzsAVFUU"},
{"content":{"body":"I'm wondering if await/yield/then binding should just be a config per-store and we can just hold two sets of stores so ones that _do_ have that turned on do those binds and ones that have it turned off don't get tracked in that list at all. Just a random idea. And to be clear, I don't care which way is the default. If we have the capability to switch to the other on our stores then that's basically the one single major blocker for APM vendors right now, as far as I can tell. 🤔","format":"org.matrix.custom.html","formatted_body":"I'm wondering if await/yield/then binding should just be a config per-store and we can just hold two sets of stores so ones that <em>do</em> have that turned on do those binds and ones that have it turned off don't get tracked in that list at all. Just a random idea. And to be clear, I don't care which way is the default. If we have the capability to switch to the other on our stores then that's basically the one single major blocker for APM vendors right now, as far as I can tell. 🤔","m.mentions":{},"msgtype":"m.text"},"ts":1715788729527,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$WJXeKUdvFi0i3tLaxsQGmJ4td3og3MP2qClBOPRCBJU"},
{"content":{"body":"I think if we had that option then it would end up needing to be _three_ different sets in the long run, since `scheduler.yield` (and/or `scheduler.currentTaskSignal`) would need yet a different propagation, where it _does_ propagate across `await`, but +not_ through `setTimeout`.","format":"org.matrix.custom.html","formatted_body":"I think if we had that option then it would end up needing to be <em>three</em> different sets in the long run, since <code>scheduler.yield</code> (and/or <code>scheduler.currentTaskSignal</code>) would need yet a different propagation, where it <em>does</em> propagate across <code>await</code>, but +not_ through <code>setTimeout</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1715790162347,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$_u7L-bCxX2_DP7u1vxYEalEIT75eZFrlXXpBomhqwXg"},
{"content":{"body":" * I think if we had that option then it would end up needing to be _three_ different sets in the long run, since `scheduler.yield` (and/or `scheduler.currentTaskSignal`) would need yet a different propagation, where it _does_ propagate across `await`, but _not_ through `setTimeout`.","format":"org.matrix.custom.html","formatted_body":" * I think if we had that option then it would end up needing to be <em>three</em> different sets in the long run, since <code>scheduler.yield</code> (and/or <code>scheduler.currentTaskSignal</code>) would need yet a different propagation, where it <em>does</em> propagate across <code>await</code>, but <em>not</em> through <code>setTimeout</code>.","m.mentions":{},"m.new_content":{"body":"I think if we had that option then it would end up needing to be _three_ different sets in the long run, since `scheduler.yield` (and/or `scheduler.currentTaskSignal`) would need yet a different propagation, where it _does_ propagate across `await`, but _not_ through `setTimeout`.","format":"org.matrix.custom.html","formatted_body":"I think if we had that option then it would end up needing to be <em>three</em> different sets in the long run, since <code>scheduler.yield</code> (and/or <code>scheduler.currentTaskSignal</code>) would need yet a different propagation, where it <em>does</em> propagate across <code>await</code>, but <em>not</em> through <code>setTimeout</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$_u7L-bCxX2_DP7u1vxYEalEIT75eZFrlXXpBomhqwXg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715790179662,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$aa6LC1ufZJKBWDkbOkgp_xL0ZTz_oj72h4-qihrWRa4"},
{"content":{"body":"> <@stephenhicks:matrix.org> A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. \\<button onclick=\"...\"> with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need _some_ option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.\n\nCan you say more about how you imagine that option being used? One possible default could be “use the originating/call context where available, otherwise fall back to registration if it doesn’t exist” and you could override that to “always registration time” by wrapping your callback yourself.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>A doc sounds like a good idea. Yes, there will be a mix, but there's more nuance than that. There's questions of consistency (e.g. button.addEventListener with a UI click vs. &lt;button onclick=\"...\"&gt; with programmatic button.click() - do these behave the same? My opinion is no) and expressivity (I think it's clear we need <em>some</em> option to override the default in either direction). As long as there's an override to fix any mismatched default, I think we're in pretty good shape.</blockquote></mx-reply>Can you say more about how you imagine that option being used? One possible default could be “use the originating/call context where available, otherwise fall back to registration if it doesn’t exist” and you could override that to “always registration time” by wrapping your callback yourself.","m.relates_to":{"m.in_reply_to":{"event_id":"$AS9hFcLT9M4DpzR-hxYCmDoeu8XTbl9x5P1KOMJ0kIs"}},"msgtype":"m.text"},"ts":1715800389256,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$O4Z8YMScMhD2NfClLXc4ar3JpyaSiNuSLiJrccpR3S0"},
{"content":{"body":"In that case, no options bag needed","msgtype":"m.text"},"ts":1715800408674,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_tUbGxDmLIYO4X5ANJUgcoKNRoS55CqsAn2j9WuaDs8"},
{"content":{"body":"Another is “always registration time, and you get passed the originating snapshot in a property of the event, which you can then .run within if you want” (again, you could choose the opposite default by wrapping the callback, this time in something that got the snapshot out and applied it)","msgtype":"m.text"},"ts":1715800480654,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$akIdiOAZfrXmtYF4AM85P8HSaNotIc-eNGrGLmIi-wY"},
{"content":{"body":"In either case it would be OK to include an option as an ergonomic niceity but it seems optional to me","msgtype":"m.text"},"ts":1715800505724,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N3D1AJiY0IIu5WMzDEJvmhQbhbC_Iq6lZRtIBRL3vFE"},
{"content":{"body":"> <@stephenhicks:matrix.org> I think if we had that option then it would end up needing to be _three_ different sets in the long run, since `scheduler.yield` (and/or `scheduler.currentTaskSignal`) would need yet a different propagation, where it _does_ propagate across `await`, but _not_ through `setTimeout`.\n\nWhy were these semantics chosen for priority, btw?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24_u7L-bCxX2_DP7u1vxYEalEIT75eZFrlXXpBomhqwXg\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I think if we had that option then it would end up needing to be <em>three</em> different sets in the long run, since <code>scheduler.yield</code> (and/or <code>scheduler.currentTaskSignal</code>) would need yet a different propagation, where it <em>does</em> propagate across <code>await</code>, but <em>not</em> through <code>setTimeout</code>.</blockquote></mx-reply>Why were these semantics chosen for priority, btw?","m.relates_to":{"m.in_reply_to":{"event_id":"$_u7L-bCxX2_DP7u1vxYEalEIT75eZFrlXXpBomhqwXg"}},"msgtype":"m.text"},"ts":1715800548092,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QBSTEl9mKHkKQ-lNpo4DPy8StHja_3bAjBpHRmmf14I"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I'm wondering if await/yield/then binding should just be a config per-store and we can just hold two sets of stores so ones that _do_ have that turned on do those binds and ones that have it turned off don't get tracked in that list at all. Just a random idea. And to be clear, I don't care which way is the default. If we have the capability to switch to the other on our stores then that's basically the one single major blocker for APM vendors right now, as far as I can tell. 🤔\n\nYeah I could see the “two types of variables” idea but I don’t see how it solves the “maintain follows-from links” problem","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24WJXeKUdvFi0i3tLaxsQGmJ4td3og3MP2qClBOPRCBJU\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I'm wondering if await/yield/then binding should just be a config per-store and we can just hold two sets of stores so ones that <em>do</em> have that turned on do those binds and ones that have it turned off don't get tracked in that list at all. Just a random idea. And to be clear, I don't care which way is the default. If we have the capability to switch to the other on our stores then that's basically the one single major blocker for APM vendors right now, as far as I can tell. 🤔</blockquote></mx-reply>Yeah I could see the “two types of variables” idea but I don’t see how it solves the “maintain follows-from links” problem","m.relates_to":{"m.in_reply_to":{"event_id":"$WJXeKUdvFi0i3tLaxsQGmJ4td3og3MP2qClBOPRCBJU"}},"msgtype":"m.text"},"ts":1715800607572,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tTgqbRYpeNHorqs2RMRacWcjZsDDTCCMc5jKl3Ie6QQ"},
{"content":{"body":"Also I don’t really know how we would make the call-biased variables work","msgtype":"m.text"},"ts":1715800709841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JazUMWpfzGIXBuj45VbYL6BYTSY6afkKrwu6O4qd6I0"},
{"content":{"body":"> <@littledan:matrix.org> Another is “always registration time, and you get passed the originating snapshot in a property of the event, which you can then .run within if you want” (again, you could choose the opposite default by wrapping the callback, this time in something that got the snapshot out and applied it)\n\nI think this approach is problematic because it only really works for events.  But there's a handful of other APIs (e.g. IntersectionObserver and MutationObserver, various Promise APIs, hypothetical future signals, etc) that don't have any events and you'd need a different custom solution for each to solve effectively the same problem.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$akIdiOAZfrXmtYF4AM85P8HSaNotIc-eNGrGLmIi-wY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Another is “always registration time, and you get passed the originating snapshot in a property of the event, which you can then .run within if you want” (again, you could choose the opposite default by wrapping the callback, this time in something that got the snapshot out and applied it)</blockquote></mx-reply>I think this approach is problematic because it only really works for events.  But there's a handful of other APIs (e.g. IntersectionObserver and MutationObserver, various Promise APIs, hypothetical future signals, etc) that don't have any events and you'd need a different custom solution for each to solve effectively the same problem.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$akIdiOAZfrXmtYF4AM85P8HSaNotIc-eNGrGLmIi-wY"}},"msgtype":"m.text"},"ts":1715800756860,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nIRliqso38KhO0FXX8s0pMoKi2FaT_Y8EfvDl0tB6jk"},
{"content":{"body":"> <@stephenhicks:matrix.org> I think this approach is problematic because it only really works for events.  But there's a handful of other APIs (e.g. IntersectionObserver and MutationObserver, various Promise APIs, hypothetical future signals, etc) that don't have any events and you'd need a different custom solution for each to solve effectively the same problem.\n\nfor observers you could have a property of the observer entry","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$nIRliqso38KhO0FXX8s0pMoKi2FaT_Y8EfvDl0tB6jk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I think this approach is problematic because it only really works for events.  But there's a handful of other APIs (e.g. IntersectionObserver and MutationObserver, various Promise APIs, hypothetical future signals, etc) that don't have any events and you'd need a different custom solution for each to solve effectively the same problem.</blockquote></mx-reply>for observers you could have a property of the observer entry","m.mentions":{"user_ids":["@stephenhicks:matrix.org","@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nIRliqso38KhO0FXX8s0pMoKi2FaT_Y8EfvDl0tB6jk"}},"msgtype":"m.text"},"ts":1715800789352,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$r-mmlOj3vKCJTm-yjfOoIVjOxE9wtyn2elnr0pUC23A"},
{"content":{"body":"Yeah I think this works *better* for observers than other options since they have a single callback for multiple things","format":"org.matrix.custom.html","formatted_body":"Yeah I think this works <em>better</em> for observers than other options since they have a single callback for multiple things","msgtype":"m.text"},"ts":1715800816242,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mU50GgprNH-n4KXD-3KA6EDFbU8mrxvbBF1Gupr2hcM"},
{"content":{"body":"> <@littledan:matrix.org> Why were these semantics chosen for priority, btw?\n\nI think because `scheduler.yield()` wants to distinguish between a continuation of the current task and a subtask","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$QBSTEl9mKHkKQ-lNpo4DPy8StHja_3bAjBpHRmmf14I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Why were these semantics chosen for priority, btw?</blockquote></mx-reply>I think because <code>scheduler.yield()</code> wants to distinguish between a continuation of the current task and a subtask","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QBSTEl9mKHkKQ-lNpo4DPy8StHja_3bAjBpHRmmf14I"}},"msgtype":"m.text"},"ts":1715800878355,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Pq80hJY3qVCtS4qauwHykUFlOa9fZKuxOpE-IRWbPxo"},
{"content":{"body":"For promise-based APIs: I am having trouble picturing what we would want and how; maybe you could give a concrete example of where you don’t want the restore-around-await semantics (“registration time”) and what you want instead?","msgtype":"m.text"},"ts":1715800883183,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$W6468VK7qSle9rGybni44-O0SSTglVmvDdgJQZpN68c"},
{"content":{"body":"> <@abotella:igalia.com> I think because `scheduler.yield()` wants to distinguish between a continuation of the current task and a subtask\n\nWhat does that have to do with setTimeout?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24Pq80hJY3qVCtS4qauwHykUFlOa9fZKuxOpE-IRWbPxo\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I think because <code>scheduler.yield()</code> wants to distinguish between a continuation of the current task and a subtask</blockquote></mx-reply>What does that have to do with setTimeout?","m.relates_to":{"m.in_reply_to":{"event_id":"$Pq80hJY3qVCtS4qauwHykUFlOa9fZKuxOpE-IRWbPxo"}},"msgtype":"m.text"},"ts":1715800901153,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CEIcXHWAuBnE-Kfda6UYPhf7fNP52GuE1PMC1ItqBMw"},
{"content":{"body":"> <@littledan:matrix.org> Why were these semantics chosen for priority, btw?\n\nI don't know the background there.  I scanned through https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md but don't see anything specifically about this choice.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$QBSTEl9mKHkKQ-lNpo4DPy8StHja_3bAjBpHRmmf14I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Why were these semantics chosen for priority, btw?</blockquote></mx-reply>I don't know the background there.  I scanned through https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md but don't see anything specifically about this choice.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QBSTEl9mKHkKQ-lNpo4DPy8StHja_3bAjBpHRmmf14I"}},"msgtype":"m.text"},"ts":1715800912562,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$97B-go0PyNM8Y3iB_BrMCoNpmJpGLF1-OU_tAvbm4XA"},
{"content":{"body":"> <@littledan:matrix.org> What does that have to do with setTimeout?\n\n`setTimeout` would be a subtask","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$CEIcXHWAuBnE-Kfda6UYPhf7fNP52GuE1PMC1ItqBMw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What does that have to do with setTimeout?</blockquote></mx-reply><code>setTimeout</code> would be a subtask","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CEIcXHWAuBnE-Kfda6UYPhf7fNP52GuE1PMC1ItqBMw"}},"msgtype":"m.text"},"ts":1715800920667,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$i0qTPsHM02sPzqAl0vvojTre-aQDX04Ug--BvBCNBDM"},
{"content":{"body":"> <@stephenhicks:matrix.org> I don't know the background there.  I scanned through https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md but don't see anything specifically about this choice.\n\nI guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%2497B-go0PyNM8Y3iB_BrMCoNpmJpGLF1-OU_tAvbm4XA\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I don't know the background there.  I scanned through https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md but don't see anything specifically about this choice.</blockquote></mx-reply>I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?","m.relates_to":{"m.in_reply_to":{"event_id":"$97B-go0PyNM8Y3iB_BrMCoNpmJpGLF1-OU_tAvbm4XA"}},"msgtype":"m.text"},"ts":1715800953403,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU"},
{"content":{"body":"> <@littledan:matrix.org> I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?\n\nYes, I can ask.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?</blockquote></mx-reply>Yes, I can ask.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU"}},"msgtype":"m.text"},"ts":1715801001321,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$uBNCK7-mNF1LUYnXNjSPBqSusuAvPjLAHIl2WJmuqeo"},
{"content":{"body":"> <@littledan:matrix.org> Can you say more about how you imagine that option being used? One possible default could be “use the originating/call context where available, otherwise fall back to registration if it doesn’t exist” and you could override that to “always registration time” by wrapping your callback yourself.\n\nWhat do you think of this option Steve Hicks ?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24O4Z8YMScMhD2NfClLXc4ar3JpyaSiNuSLiJrccpR3S0\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Can you say more about how you imagine that option being used? One possible default could be “use the originating/call context where available, otherwise fall back to registration if it doesn’t exist” and you could override that to “always registration time” by wrapping your callback yourself.</blockquote></mx-reply>What do you think of this option <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a> ?","m.relates_to":{"m.in_reply_to":{"event_id":"$O4Z8YMScMhD2NfClLXc4ar3JpyaSiNuSLiJrccpR3S0"}},"msgtype":"m.text"},"ts":1715801026963,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4xJPDhWtFIRC-siFFVNfIBUiKMz6i1ZsmIwADYBrMSk"},
{"content":{"body":"> <@littledan:matrix.org> I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?\n\nfrom a conversation I had with him:\n> It's important (as of now, subject to change) that those [yield-related CPED state fields] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?</blockquote></mx-reply><p>from a conversation I had with him:</p>\n<blockquote>\n<p>It's important (as of now, subject to change) that those [yield-related CPED state fields] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.</p>\n</blockquote>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU"}},"msgtype":"m.text"},"ts":1715801062322,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lb1-KylZ6vrFHTxoxVv2sVpMv9m5on3AWR8J-60EXz4"},
{"content":{"body":"> <@littledan:matrix.org> For promise-based APIs: I am having trouble picturing what we would want and how; maybe you could give a concrete example of where you don’t want the restore-around-await semantics (“registration time”) and what you want instead?\n\nMy understanding is that this is what Stephen is asking for.  I don't have quite as good a sense of the use case, but from the examples I've seen, he wants to `await openFile()` and have a trace span opened in `openFile` still be present on the outside.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$W6468VK7qSle9rGybni44-O0SSTglVmvDdgJQZpN68c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>For promise-based APIs: I am having trouble picturing what we would want and how; maybe you could give a concrete example of where you don’t want the restore-around-await semantics (“registration time”) and what you want instead?</blockquote></mx-reply>My understanding is that this is what Stephen is asking for.  I don't have quite as good a sense of the use case, but from the examples I've seen, he wants to <code>await openFile()</code> and have a trace span opened in <code>openFile</code> still be present on the outside.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$W6468VK7qSle9rGybni44-O0SSTglVmvDdgJQZpN68c"}},"msgtype":"m.text"},"ts":1715801082046,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$7c2cGod0-ME-ic6aa2WMgT6aW4zcVsWYzWzl6FJer3c"},
{"content":{"body":"> <@littledan:matrix.org> I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?\n\n * from a conversation I had with him:\n\n> It's important (as of now, subject to change) that those \\[yield-related fields of the object propagated through CPED\\] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$0LXT7dH_VMrZGKS0caL4BQylSuNSapZYiwBi7_bGvnU?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess you are relaying this case based on personal communication with Scott? Maybe he can clarify (or join here)?</blockquote></mx-reply> * <p>from a conversation I had with him:</p>\n<blockquote>\n<p>It's important (as of now, subject to change) that those [yield-related fields of the object propagated through CPED] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.</p>\n</blockquote>\n","m.mentions":{},"m.new_content":{"body":"from a conversation I had with him:\n\n> It's important (as of now, subject to change) that those \\[yield-related fields of the object propagated through CPED\\] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.","format":"org.matrix.custom.html","formatted_body":"<p>from a conversation I had with him:</p>\n<blockquote>\n<p>It's important (as of now, subject to change) that those [yield-related fields of the object propagated through CPED] are not propagated to subtasks and events. The idea is that yield() can inherit the priority of the current task, but the current task and subtasks are not necessarily related (i.e. breaking up the current task by yielding in a loop does not imply other work spawned should have the same priority). It's possible this will change, but as of now we need to keep that behavior.</p>\n</blockquote>\n","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$lb1-KylZ6vrFHTxoxVv2sVpMv9m5on3AWR8J-60EXz4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715801101268,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$c8N_vAVvUKBnmj1RL9wk-qy1BBAfGqkbNfQsQublqVQ"},
{"content":{"body":"Do *you* run into cases where you want this behavior with promises?","format":"org.matrix.custom.html","formatted_body":"Do <em>you</em> run into cases where you want this behavior with promises?","msgtype":"m.text"},"ts":1715801133243,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IvP0syxfRh58SnZ5tZK-bEbNohaQt0_sjpgU0ye-xbA"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I think this works *better* for observers than other options since they have a single callback for multiple things\n\nThat may be so on an individual level, but it's still a different solution for each situation, which I see as a big problem since it leads to everyone having to figure out for every given situation \"how do I do this thing?\".  Also, it's ideal when userland APIs can have analogous behavior to builtins, and so every userland scheduler would also need to come up with their own custom solution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$mU50GgprNH-n4KXD-3KA6EDFbU8mrxvbBF1Gupr2hcM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I think this works <em>better</em> for observers than other options since they have a single callback for multiple things</blockquote></mx-reply>That may be so on an individual level, but it's still a different solution for each situation, which I see as a big problem since it leads to everyone having to figure out for every given situation \"how do I do this thing?\".  Also, it's ideal when userland APIs can have analogous behavior to builtins, and so every userland scheduler would also need to come up with their own custom solution.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mU50GgprNH-n4KXD-3KA6EDFbU8mrxvbBF1Gupr2hcM"}},"msgtype":"m.text"},"ts":1715801203981,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$euWyXiCn_JjWW8aIuyxLJQCYEhxgWk1hQY6toKvw6BQ"},
{"content":{"body":"> <@littledan:matrix.org> What do you think of this option Steve Hicks ?\n\nI don't love the \"where available\" framing - it feels very \"zalgo-adjacent\" where you can never really be sure what context something will run in because it depends on external factors (e.g. for a click handler, it could run in either, depending on if it's dispatched programmatically or by user action).  As a result, you just can't really rely on anything.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$4xJPDhWtFIRC-siFFVNfIBUiKMz6i1ZsmIwADYBrMSk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What do you think of this option <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a> ?</blockquote></mx-reply>I don't love the \"where available\" framing - it feels very \"zalgo-adjacent\" where you can never really be sure what context something will run in because it depends on external factors (e.g. for a click handler, it could run in either, depending on if it's dispatched programmatically or by user action).  As a result, you just can't really rely on anything.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$4xJPDhWtFIRC-siFFVNfIBUiKMz6i1ZsmIwADYBrMSk"}},"msgtype":"m.text"},"ts":1715801354427,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$99MTW6k9kKf_qV7vTP0y5S1DHwiRxjWsQMC_QP1JnFI"},
{"content":{"body":"Do you have another idea for how we should handle observers?","msgtype":"m.text"},"ts":1715801364573,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ntpn3qAxHnCmenei5idwZHe56pvfe8lyZcpPbgzGT1I"},
{"content":{"body":"I favor a general solution that doesn't rely on details of the scheduling API.","m.mentions":{},"msgtype":"m.text"},"ts":1715801402758,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h34bztoCwtVgAFFH_-bzfmBtHbjxXOwyRHIWU_bw530"},
{"content":{"body":"something more like AsyncContext.callingContext where it works in all cases","m.mentions":{},"msgtype":"m.text"},"ts":1715801420230,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kQh5qd-dbYG-B6yQA6VK3h-TbzaG6kfTJj0wVBY1sFs"},
{"content":{"body":" * I favor a general solution that doesn't rely on details of the scheduling API's shape.","m.mentions":{},"m.new_content":{"body":"I favor a general solution that doesn't rely on details of the scheduling API's shape.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h34bztoCwtVgAFFH_-bzfmBtHbjxXOwyRHIWU_bw530","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715801445663,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$H4afsjWbjrQ9ciexHbeYt1ys2Fj6eN2pcaQduZfAsCM"},
{"content":{"body":"> <@stephenhicks:matrix.org> I favor a general solution that doesn't rely on details of the scheduling API's shape.\n\nOf course, but I guess the scheduling API assumes it can be based on a primitive with certain properties, and we are trying to understand what that primitive is…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24h34bztoCwtVgAFFH_-bzfmBtHbjxXOwyRHIWU_bw530\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I favor a general solution that doesn't rely on details of the scheduling API's shape.</blockquote></mx-reply>Of course, but I guess the scheduling API assumes it can be based on a primitive with certain properties, and we are trying to understand what that primitive is…","m.relates_to":{"m.in_reply_to":{"event_id":"$h34bztoCwtVgAFFH_-bzfmBtHbjxXOwyRHIWU_bw530"}},"msgtype":"m.text"},"ts":1715801460481,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ENMjmqwca-SOb2ni4HVTxclY2yySY9RE5P7eU_DiA_Y"},
{"content":{"body":"If the decision was not made for a very strong reason and turns out to be kinda irregular compared to other needs, we shouldn’t necessarily turn ourselves inside out trying to solve for it. But if it’s a good reason, that is different ","format":"org.matrix.custom.html","formatted_body":"If the decision was not made for a very strong reason and turns out to be kinda irregular compared to other needs, we shouldn’t necessarily turn ourselves inside out trying to solve for it. But if it’s a good reason, that is different","msgtype":"m.text"},"ts":1715801512874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$au3YV_499H6uOfKSmGk6UMnJgKjNYH12ErzUqLBrThk"},
{"content":{"body":"I don’t understand how callingContext would relate to dropping things on setTimeout","msgtype":"m.text"},"ts":1715801557646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yF6V8gxcqtom6jDATe282L98pl3pgIj0aSrr-EDwW2w"},
{"content":{"body":"sorry, my statement about dropping on setTimeout was just about how (as currently spec'd) neither of the two default-propagation behaviors we're considering would actually work to enable replacing the current yield propagation with AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1715801624657,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$IfNrihamB0m4_vqIfRg2WWcoyoGNXEwwJvL1_70wN1A"},
{"content":{"body":" * sorry, my statement about dropping on setTimeout was just about how neither of the two default-propagation behaviors we're considering would actually work to enable replacing the current yield propagation (as currently spec'd) with AsyncContext","m.mentions":{},"m.new_content":{"body":"sorry, my statement about dropping on setTimeout was just about how neither of the two default-propagation behaviors we're considering would actually work to enable replacing the current yield propagation (as currently spec'd) with AsyncContext","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IfNrihamB0m4_vqIfRg2WWcoyoGNXEwwJvL1_70wN1A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715801657877,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$z-lncH4mwGiCqCG4WtYh2aPf114CG1fyk-QcrwFZ_1Q"},
{"content":{"body":"> <@stephenhicks:matrix.org> I don't love the \"where available\" framing - it feels very \"zalgo-adjacent\" where you can never really be sure what context something will run in because it depends on external factors (e.g. for a click handler, it could run in either, depending on if it's dispatched programmatically or by user action).  As a result, you just can't really rely on anything.\n\nYeah, I share the Zalgo concern, but maybe a bit more broadly. With signals, for example, it feels kinda Zalgo to me if we propagate in things about where the computed was read from (since that is a race in itself). But from taking with Jatin, I understand that he wants to see what triggers what in responding to a user gesture, so it’s kinda needed. An unfortunate contradiction ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%2499MTW6k9kKf_qV7vTP0y5S1DHwiRxjWsQMC_QP1JnFI\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I don't love the \"where available\" framing - it feels very \"zalgo-adjacent\" where you can never really be sure what context something will run in because it depends on external factors (e.g. for a click handler, it could run in either, depending on if it's dispatched programmatically or by user action).  As a result, you just can't really rely on anything.</blockquote></mx-reply>Yeah, I share the Zalgo concern, but maybe a bit more broadly. With signals, for example, it feels kinda Zalgo to me if we propagate in things about where the computed was read from (since that is a race in itself). But from taking with Jatin, I understand that he wants to see what triggers what in responding to a user gesture, so it’s kinda needed. An unfortunate contradiction","m.relates_to":{"m.in_reply_to":{"event_id":"$99MTW6k9kKf_qV7vTP0y5S1DHwiRxjWsQMC_QP1JnFI"}},"msgtype":"m.text"},"ts":1715801658117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2jKFZmLcKRwPEjcFlmx_jBD82d2q_N8aplWGv8lYVUk"},
{"content":{"body":"I'll go back to the doc idea you had - we need to get more known use cases and situations documented, I think, in order to get more insight into the downstream ramifications on application code, etc","m.mentions":{},"msgtype":"m.text"},"ts":1715801702507,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$TXZORygaYA3k3E84fZWFg7CShh1VAn_rzgEBdIX6Xc8"},
{"content":{"body":"> <@stephenhicks:matrix.org> sorry, my statement about dropping on setTimeout was just about how neither of the two default-propagation behaviors we're considering would actually work to enable replacing the current yield propagation (as currently spec'd) with AsyncContext\n\nYeah, I agree; do you have an idea for an alternative that would handle this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24IfNrihamB0m4_vqIfRg2WWcoyoGNXEwwJvL1_70wN1A\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>sorry, my statement about dropping on setTimeout was just about how neither of the two default-propagation behaviors we're considering would actually work to enable replacing the current yield propagation (as currently spec'd) with AsyncContext</blockquote></mx-reply>Yeah, I agree; do you have an idea for an alternative that would handle this?","m.relates_to":{"m.in_reply_to":{"event_id":"$IfNrihamB0m4_vqIfRg2WWcoyoGNXEwwJvL1_70wN1A"}},"msgtype":"m.text"},"ts":1715801710921,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bKU7UyRf95pv6grbCBr3tHJstkoHZsWTz8iztXWAbmw"},
{"content":{"body":"> <@littledan:matrix.org> Yeah, I agree; do you have an idea for an alternative that would handle this?\n\nSadly no.  Change the scheduler spec?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$bKU7UyRf95pv6grbCBr3tHJstkoHZsWTz8iztXWAbmw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah, I agree; do you have an idea for an alternative that would handle this?</blockquote></mx-reply>Sadly no.  Change the scheduler spec?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bKU7UyRf95pv6grbCBr3tHJstkoHZsWTz8iztXWAbmw"}},"msgtype":"m.text"},"ts":1715801744898,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$EGWrO1vXUrBDC7Vi7xhFJGAslMFAuytQBg1kwtdWEOU"},
{"content":{"body":"(to allow propagating across child tasks like an ordinary async var)","m.mentions":{},"msgtype":"m.text"},"ts":1715801794545,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$AQL0MYFcUrGoAQI5GX9VpkrMlpWw9WUXtP5_6c-sdMs"},
{"content":{"body":"That is my first intuition but it’s because I don’t understand the motivation for the current design ","format":"org.matrix.custom.html","formatted_body":"That is my first intuition but it’s because I don’t understand the motivation for the current design","msgtype":"m.text"},"ts":1715801856326,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YUnJiA6KQqrL98-D8JOOgiZTu7YrKAQy6Hxb7N-D4-M"},
{"content":{"body":"What would be unscalable is for each variable to have custom logic at each point where it might be propagated. I guess APMs have this power today though.","msgtype":"m.text"},"ts":1715801899806,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_7qpEW7blGGbKrED-KiRJFgCNQ211Ps8VDqUDf7Kju4"},
{"content":{"body":"In terms of downstream repercussions, I'm thinking about app developers writing their handlers, middleware, signals, etc.  I believe a fundamental axiom here is (or at least, I'd like it to be) that frameworks can put vars in place and app developers don't need to be aware of what those vars are - so needing to explicitly do anything with callingContext in their own callbacks would be a problem, and if there's a few layers of application code in the way such that the framework can't just pull their variable off the \"top\" callingContext, then that approach probably wouldn't work.","m.mentions":{},"msgtype":"m.text"},"ts":1715801983344,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ydIxmkUHWqhPrjO_uLBmBoJIveODnjwuaZLPMubHobk"},
{"content":{"body":"Agreed. And in general you can have lots of merges that look like that, I think (so Promise.all integration isn’t quite enough)","msgtype":"m.text"},"ts":1715802070900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tXcBbRadOdpm3-OlLPFLZlX4mSsZHom2DnNRs9u1kR0"},
{"content":{"body":"This is why the “two classes of variables” idea appeals to me somewhat (but I still don’t know how it would work)","msgtype":"m.text"},"ts":1715802084292,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ejzpDz9GCOFNgqwDM1jIgqp8p6usnfomJo6e4QkLJV8"},
{"content":{"body":"> <@littledan:matrix.org> This is why the “two classes of variables” idea appeals to me somewhat (but I still don’t know how it would work)\n\nagreed - especially if the \"calling context\" flavor means that it doesn't propagate across an `await`, then I'm not sure it's viable, though (IIUC) that would be more consistent with how then() would behave?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ejzpDz9GCOFNgqwDM1jIgqp8p6usnfomJo6e4QkLJV8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>This is why the “two classes of variables” idea appeals to me somewhat (but I still don’t know how it would work)</blockquote></mx-reply>agreed - especially if the \"calling context\" flavor means that it doesn't propagate across an <code>await</code>, then I'm not sure it's viable, though (IIUC) that would be more consistent with how then() would behave?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ejzpDz9GCOFNgqwDM1jIgqp8p6usnfomJo6e4QkLJV8"}},"msgtype":"m.text"},"ts":1715802208291,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$GPoCctXl7Qy74O-_jc0IK_yzyiIU12613QL9XRYsm1M"},
{"content":{"body":"On an unrelated note, what do you expect this to print?\n```js\nfunction cb() {\n  asyncVar.run(\"foo\", () => {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", cb);\n\nwindow.addEventListener(\"error\", () => {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n```","format":"org.matrix.custom.html","formatted_body":"<p>On an unrelated note, what do you expect this to print?</p>\n<pre><code class=\"language-js\">function cb() {\n  asyncVar.run(\"foo\", () =&gt; {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", cb);\n\nwindow.addEventListener(\"error\", () =&gt; {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1715802345438,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$2jFfAo_CJWUxv0J5-95vCO38cP6LkKarXTB3Ydqe8to"},
{"content":{"body":"with the current spec, the only thing this could print is `bar`, but I'd expect that's not the expected behavior","format":"org.matrix.custom.html","formatted_body":"with the current spec, the only thing this could print is <code>bar</code>, but I'd expect that's not the expected behavior","m.mentions":{},"msgtype":"m.text"},"ts":1715802365812,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$035RS9-4UP45pctzcQWZtC9w3LbME0P4xUu5Ed9eyF4"},
{"content":{"body":"> <@abotella:igalia.com> with the current spec, the only thing this could print is `bar`, but I'd expect that's not the expected behavior\n\nI find that incredibly surprising.  My mental model is that `v.run(a, () => v.run(b, f))` is equivalent to `v.run(b, f)`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$035RS9-4UP45pctzcQWZtC9w3LbME0P4xUu5Ed9eyF4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>with the current spec, the only thing this could print is <code>bar</code>, but I'd expect that's not the expected behavior</blockquote></mx-reply>I find that incredibly surprising.  My mental model is that <code>v.run(a, () =&gt; v.run(b, f))</code> is equivalent to <code>v.run(b, f)</code>.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$035RS9-4UP45pctzcQWZtC9w3LbME0P4xUu5Ed9eyF4"}},"msgtype":"m.text"},"ts":1715802487326,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$m7delZIXvQ0JSWN0hPtwB8e35fiyEvYsRjYdARmaxU8"},
{"content":{"body":"ohw ait","m.mentions":{},"msgtype":"m.text"},"ts":1715802500675,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ODV3tmnmUmsCC_MpMSnEwwgyNqvh-G8qiDb_RoEN-l0"},
{"content":{"body":"though obviously that would change w/ callingContext","m.mentions":{},"msgtype":"m.text"},"ts":1715802503163,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$YIkyE44nehZoAWqgzqELhJ8wOtb4mXpsl-sbNEXnEOs"},
{"content":{"body":" * oh wait","m.mentions":{},"m.new_content":{"body":"oh wait","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ODV3tmnmUmsCC_MpMSnEwwgyNqvh-G8qiDb_RoEN-l0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715802505148,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$812kfnYM4W5kzk55h-4zrdJtOSegAeTM_Rad99yzcUk"},
{"content":{"body":"my bad","m.mentions":{},"msgtype":"m.text"},"ts":1715802509978,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$r4eATTAz45y8GzjTfCGQvT9iCXQKWpgH-RMlzyA_6hk"},
{"content":{"body":" * On an unrelated note, what do you expect this to print?\n\n```js\nfunction cb() {\n  asyncVar.run(\"foo\", () => {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", => {\n  setTimeout(cb, 0);\n});\n\nwindow.addEventListener(\"error\", () => {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n```","format":"org.matrix.custom.html","formatted_body":" * <p>On an unrelated note, what do you expect this to print?</p>\n<pre><code class=\"language-js\">function cb() {\n  asyncVar.run(\"foo\", () =&gt; {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", =&gt; {\n  setTimeout(cb, 0);\n});\n\nwindow.addEventListener(\"error\", () =&gt; {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"On an unrelated note, what do you expect this to print?\n\n```js\nfunction cb() {\n  asyncVar.run(\"foo\", () => {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", => {\n  setTimeout(cb, 0);\n});\n\nwindow.addEventListener(\"error\", () => {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n```","format":"org.matrix.custom.html","formatted_body":"<p>On an unrelated note, what do you expect this to print?</p>\n<pre><code class=\"language-js\">function cb() {\n  asyncVar.run(\"foo\", () =&gt; {\n    throw new Error();\n  });\n}\n\nasyncVar.run(\"bar\", =&gt; {\n  setTimeout(cb, 0);\n});\n\nwindow.addEventListener(\"error\", () =&gt; {\n  console.log(asyncVar.get());\n}, {useOriginatingContext: true});\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$2jFfAo_CJWUxv0J5-95vCO38cP6LkKarXTB3Ydqe8to","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715802525639,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$8O_2idzRbeBIJtp9paueRoSu-EOtJ59jSstKSTcw1_g"},
{"content":{"body":"I meant to have `setTimeout` there","format":"org.matrix.custom.html","formatted_body":"I meant to have <code>setTimeout</code> there","m.mentions":{},"msgtype":"m.text"},"ts":1715802531021,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cpP3ahIGXcWeWhRaULQmHoMtmPm9QtSS5VMuqZVpGv0"},
{"content":{"body":"I'm still lacking some intuition here... how is this different from running `cb` directly in bar?","format":"org.matrix.custom.html","formatted_body":"I'm still lacking some intuition here... how is this different from running <code>cb</code> directly in bar?","m.mentions":{},"msgtype":"m.text"},"ts":1715802639829,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$zgzTx1iDQt4PH2NXnFGj4wDnI2xbpChmbbJlMud84ho"},
{"content":{"body":"I guess it's not","m.mentions":{},"msgtype":"m.text"},"ts":1715802673976,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$81JjoTEHeVGa777xMo3j7h1lPfODjkYAZOvZmpc_99w"},
{"content":{"body":"the thing is, when `.run()` returns it will always restore the previous context, even if the callback threw","format":"org.matrix.custom.html","formatted_body":"the thing is, when <code>.run()</code> returns it will always restore the previous context, even if the callback threw","m.mentions":{},"msgtype":"m.text"},"ts":1715802704917,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$2QAuW7byPnsEZ10GBy_O5KJIXhDKvwuljl0gegHuFQE"},
{"content":{"body":"other than i guess that the error is async","m.mentions":{},"msgtype":"m.text"},"ts":1715802710192,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$XK14bJ9y-rN06Vs95EIAOiY3d8ztvCTyymX_Itb5A3g"},
{"content":{"body":"so when the execution gets back to `setTimeout`, the current context is `bar`","format":"org.matrix.custom.html","formatted_body":"so when the execution gets back to <code>setTimeout</code>, the current context is <code>bar</code>","m.mentions":{},"msgtype":"m.text"},"ts":1715802728103,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$isR14367bhWlFJGI1MGkQ_gEV10DPF6jh9ZPHd95s8I"},
{"content":{"body":"the context active at throw time isn't preserveed","m.mentions":{},"msgtype":"m.text"},"ts":1715802746605,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$b6xlOHycO9Nlyu9voVWlI_KQYeExr6tMQWLGbYVKukA"},
{"content":{"body":" * the context active at throw time isn't preserved","m.mentions":{},"m.new_content":{"body":"the context active at throw time isn't preserved","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$b6xlOHycO9Nlyu9voVWlI_KQYeExr6tMQWLGbYVKukA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715802750203,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$V6-LCDKYmoo6PdzXxtgiyxZPnRSqpTIDsWTYhEahl5A"},
{"content":{"body":"I thought it was? Isn't that the point of useOriginatingContext?","m.mentions":{},"msgtype":"m.text"},"ts":1715802803517,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$egC0-iLnHN0YuOgky1MuLLSV6CB6NlLmB5iAbcHHFhw"},
{"content":{"body":"so yah, I'd still expect either undefined or foo","m.mentions":{},"msgtype":"m.text"},"ts":1715802833524,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Irxy0Ha-al7rSrLNskq2NXIQVduhN1xylqRdKVZnL_o"},
{"content":{"body":"> <@stephenhicks:matrix.org> I thought it was? Isn't that the point of useOriginatingContext?\n\n`useOriginatingContext` is there so the registration time isn't used","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$egC0-iLnHN0YuOgky1MuLLSV6CB6NlLmB5iAbcHHFhw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I thought it was? Isn&#39;t that the point of useOriginatingContext?</blockquote></mx-reply><code>useOriginatingContext</code> is there so the registration time isn't used","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$egC0-iLnHN0YuOgky1MuLLSV6CB6NlLmB5iAbcHHFhw"}},"msgtype":"m.text"},"ts":1715802859089,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kfKZ96DJuqn0-RL21zOZsanWPDsDczSu8ZnzEhKVr00"}
]