[
{"content":{"org.matrix.msc1767.text":"Sensitive or not. I may just want the code I'm executing to start fresh, such as ignoring a memoization cache stored in an async context to produce a fresh result.","body":"Sensitive or not. I may just want the code I'm executing to start fresh, such as ignoring a memoization cache stored in an async context to produce a fresh result.","msgtype":"m.text"},"ts":1668816049888,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a0PcsKp-7m5jCiPcYoCSC4jKZjoPAo34g9MjC6rgdGc"},
{"content":{"org.matrix.msc1767.text":"You may not even have access to the async context you need to reset, because its defined in code you don't control. ","body":"You may not even have access to the async context you need to reset, because its defined in code you don't control. ","msgtype":"m.text"},"ts":1668816079491,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$fLJXEDeS71k3f5r2xEcm_eHgcWD4ylTauFy_vnxsJLg"},
{"content":{"org.matrix.msc1767.message":[{"body":"And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is `undefined`, so resetting to a base state isn't a terrible inconvenience.","mimetype":"text/plain"},{"body":"And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is <code>undefined</code>, so resetting to a base state isn't a terrible inconvenience.","mimetype":"text/html"}],"body":"And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is `undefined`, so resetting to a base state isn't a terrible inconvenience.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is <code>undefined</code>, so resetting to a base state isn't a terrible inconvenience."},"ts":1668816172717,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$CCrgoI4WTg9ISIiquUk06J39CamCNTaXWxhgeD0Art4"},
{"content":{"org.matrix.msc1767.text":"So we're talking about the scenario where, if you're in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?","body":"So we're talking about the scenario where, if you're in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?","msgtype":"m.text"},"ts":1668816183419,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Yw0Jwh_3UvDrAexrZ6aKmtWmkoUQuRAR5vMe5M0gqIo"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is `undefined`, so resetting to a base state isn't a terrible inconvenience.\n\nYes, I think we all agree that we don't want to expose that capability","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$CCrgoI4WTg9ISIiquUk06J39CamCNTaXWxhgeD0Art4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is <code>undefined</code>, so resetting to a base state isn't a terrible inconvenience.</blockquote></mx-reply>Yes, I think we all agree that we don't want to expose that capability","mimetype":"text/html"}],"body":"> <@rbuckton:matrix.org> And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is `undefined`, so resetting to a base state isn't a terrible inconvenience.\n\nYes, I think we all agree that we don't want to expose that capability","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$CCrgoI4WTg9ISIiquUk06J39CamCNTaXWxhgeD0Art4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>And you don't want to give users the ability to enumerate all async contexts, or change them to arbitrary values. However, most of that code will already have to defensively check whether the context value is <code>undefined</code>, so resetting to a base state isn't a terrible inconvenience.</blockquote></mx-reply>Yes, I think we all agree that we don't want to expose that capability","m.relates_to":{"m.in_reply_to":{"event_id":"$CCrgoI4WTg9ISIiquUk06J39CamCNTaXWxhgeD0Art4"}}},"ts":1668816195073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-0B23wL2CZZHJtlSU4ioLwJIPqsu8CWPMI2ty4R8h4I"},
{"content":{"org.matrix.msc1767.text":"Yes, exactly.","body":"Yes, exactly.","msgtype":"m.text"},"ts":1668816196397,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$1Atyu-U_SIIX5Y32eSuH6n1kyf--W-RBvmao5zf0AwE"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> So we're talking about the scenario where, if you're in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?\n\nThis was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$Yw0Jwh_3UvDrAexrZ6aKmtWmkoUQuRAR5vMe5M0gqIo?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>So we&#39;re talking about the scenario where, if you&#39;re in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?</blockquote></mx-reply>This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> So we're talking about the scenario where, if you're in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?\n\nThis was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$Yw0Jwh_3UvDrAexrZ6aKmtWmkoUQuRAR5vMe5M0gqIo?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>So we&#39;re talking about the scenario where, if you&#39;re in the middle you might not have the asynccontext, but the inner code can access the asynccontext of the outer code, right?</blockquote></mx-reply>This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.","m.relates_to":{"m.in_reply_to":{"event_id":"$Yw0Jwh_3UvDrAexrZ6aKmtWmkoUQuRAR5vMe5M0gqIo"}}},"ts":1668816343612,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$9J1RMn0cfz9Ny2Mbbxpt9MoR-8ls7j9AoSJ4mOXAPE4"},
{"content":{"org.matrix.msc1767.message":[{"body":"OK, so you provided an API above with `ExecutionContext` to achieve this, but if we were to not care about TCP and such, I take it that this could be something like a static method `AsyncContext.fresh(cb)`","mimetype":"text/plain"},{"body":"OK, so you provided an API above with <code>ExecutionContext</code> to achieve this, but if we were to not care about TCP and such, I take it that this could be something like a static method <code>AsyncContext.fresh(cb)</code>","mimetype":"text/html"}],"body":"OK, so you provided an API above with `ExecutionContext` to achieve this, but if we were to not care about TCP and such, I take it that this could be something like a static method `AsyncContext.fresh(cb)`","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"OK, so you provided an API above with <code>ExecutionContext</code> to achieve this, but if we were to not care about TCP and such, I take it that this could be something like a static method <code>AsyncContext.fresh(cb)</code>"},"ts":1668816348081,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$fiQFii74ybY-OZ8eaExAY0fvqTGmMH5niobGySO89Uc"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.\n\nI have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$9J1RMn0cfz9Ny2Mbbxpt9MoR-8ls7j9AoSJ4mOXAPE4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.</blockquote></mx-reply>I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!","mimetype":"text/html"}],"body":"> <@rbuckton:matrix.org> This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.\n\nI have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$9J1RMn0cfz9Ny2Mbbxpt9MoR-8ls7j9AoSJ4mOXAPE4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>This was the same concern I had about Yehuda's request for some kind of implicit propagation of cancellation tokens several years back.</blockquote></mx-reply>I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!","m.relates_to":{"m.in_reply_to":{"event_id":"$9J1RMn0cfz9Ny2Mbbxpt9MoR-8ls7j9AoSJ4mOXAPE4"}}},"ts":1668816375415,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$w4K0eSFyl4_XQhi0dxw8WwLUJfTMNEB2xIOZ7xg8_A8"},
{"content":{"org.matrix.msc1767.text":"Essentially, yes. I think the TCP issues are still worth discussing in terms of ergonomics for refactoring.","body":"Essentially, yes. I think the TCP issues are still worth discussing in terms of ergonomics for refactoring.","msgtype":"m.text"},"ts":1668816383450,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$ZFUBdEpea_g5Y7d6OsowJszIIPSwAuiyDPPeqGZf06w"},
{"content":{"org.matrix.msc1767.text":"yeah I'm not dismissing them just checking my understanding","body":"yeah I'm not dismissing them just checking my understanding","msgtype":"m.text"},"ts":1668816399035,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2Ox3PGktZ43fCCHJ22rDmMit5I-0dck57eogBT3TJcM"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!\n\nI hope not. This is the opposite of what cancellation tokens should be. Implicit propagation is bad, explicit handoff is good.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$w4K0eSFyl4_XQhi0dxw8WwLUJfTMNEB2xIOZ7xg8_A8?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!</blockquote></mx-reply>I hope not. This is the opposite of what cancellation tokens should be. Implicit propagation is bad, explicit handoff is good.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!\n\nI hope not. This is the opposite of what cancellation tokens should be. Implicit propagation is bad, explicit handoff is good.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$w4K0eSFyl4_XQhi0dxw8WwLUJfTMNEB2xIOZ7xg8_A8?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I have definitely been thinking about how this would apply to cancel tokens and finally fulfill the prophesy!</blockquote></mx-reply>I hope not. This is the opposite of what cancellation tokens should be. Implicit propagation is bad, explicit handoff is good.","m.relates_to":{"m.in_reply_to":{"event_id":"$w4K0eSFyl4_XQhi0dxw8WwLUJfTMNEB2xIOZ7xg8_A8"}}},"ts":1668816416581,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N0jZxQiURRM7t5R3g0cw-wg-PgfbyZ-2KoSY36vVPn0"},
{"content":{"org.matrix.msc1767.text":"what is the concern you had in this context?","body":"what is the concern you had in this context?","msgtype":"m.text"},"ts":1668816479436,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6toF0kSPvOGhDEtDRteftI9ujrcwt6e0cuwGI6t0_yQ"},
{"content":{"org.matrix.msc1767.text":"Or at least, if you want implicit propagation you have to roll it yourself with your own `AsyncContext.","body":"Or at least, if you want implicit propagation you have to roll it yourself with your own `AsyncContext.","msgtype":"m.text"},"ts":1668816499079,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$-vG87zLPsLd4pABhepzr-sVmbbmPceIQr0-T79DWTCQ"},
{"content":{"org.matrix.msc1767.message":[{"body":"The \"I'm in the middle\" concern. Lets say the `fetch` API had some kind of implicit cancellation. You are a library author whose library has an async function that *must* execute a `fetch` to completion (barring network I/O or power interruption issues). If your function is called by an application that just so happens to set this implicit cancellation token for `fetch`, you have no way to preserve your *must execute* requirement.","mimetype":"text/plain"},{"body":"The &quot;I'm in the middle&quot; concern. Lets say the <code>fetch</code> API had some kind of implicit cancellation. You are a library author whose library has an async function that <em>must</em> execute a <code>fetch</code> to completion (barring network I/O or power interruption issues). If your function is called by an application that just so happens to set this implicit cancellation token for <code>fetch</code>, you have no way to preserve your <em>must execute</em> requirement.","mimetype":"text/html"}],"body":"The \"I'm in the middle\" concern. Lets say the `fetch` API had some kind of implicit cancellation. You are a library author whose library has an async function that *must* execute a `fetch` to completion (barring network I/O or power interruption issues). If your function is called by an application that just so happens to set this implicit cancellation token for `fetch`, you have no way to preserve your *must execute* requirement.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"The &quot;I'm in the middle&quot; concern. Lets say the <code>fetch</code> API had some kind of implicit cancellation. You are a library author whose library has an async function that <em>must</em> execute a <code>fetch</code> to completion (barring network I/O or power interruption issues). If your function is called by an application that just so happens to set this implicit cancellation token for <code>fetch</code>, you have no way to preserve your <em>must execute</em> requirement."},"ts":1668816653661,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$l1DA-hAPtaVC5cn5uuFIBmZZ5IMhLCxi4tGsFciWFLg"},
{"content":{"org.matrix.msc1767.text":"This is why cancellation tokens are passed as an argument. If you are sitting in the middle, you can chose whether to forward that argument on to an API based on your function's needs.","body":"This is why cancellation tokens are passed as an argument. If you are sitting in the middle, you can chose whether to forward that argument on to an API based on your function's needs.","msgtype":"m.text"},"ts":1668816686508,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$x0i68cPvN_4wAzaVQHVEPSDRzCNV11DW_g0oAgvZECU"},
{"content":{"org.matrix.msc1767.message":[{"body":"If that token is in an `AsyncContext` you don't control, you have no way to preserve your invariant.","mimetype":"text/plain"},{"body":"If that token is in an <code>AsyncContext</code> you don't control, you have no way to preserve your invariant.","mimetype":"text/html"}],"body":"If that token is in an `AsyncContext` you don't control, you have no way to preserve your invariant.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"If that token is in an <code>AsyncContext</code> you don't control, you have no way to preserve your invariant."},"ts":1668816719552,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$PwyZny2dLY-_5QqCNAeVeKxXEDtpjmM0A0nwXAQOjI4"},
{"content":{"org.matrix.msc1767.text":"right, makes sense","body":"right, makes sense","msgtype":"m.text"},"ts":1668816755306,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3WK8h4gISFvXsFvnkLP30oOblSPUv2R-m7UqBnQz8kM"},
{"content":{"org.matrix.msc1767.message":[{"body":"If you're only recourse is a blunt object (i.e., `AsyncContext.fresh`), you might lose other important context information that the things *you* are calling still need.","mimetype":"text/plain"},{"body":"If you're only recourse is a blunt object (i.e., <code>AsyncContext.fresh</code>), you might lose other important context information that the things <em>you</em> are calling still need.","mimetype":"text/html"}],"body":"If you're only recourse is a blunt object (i.e., `AsyncContext.fresh`), you might lose other important context information that the things *you* are calling still need.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"If you're only recourse is a blunt object (i.e., <code>AsyncContext.fresh</code>), you might lose other important context information that the things <em>you</em> are calling still need."},"ts":1668816773406,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$3DnV3v50nwaaDqKtEDZgizVYDRh3XKjoX1T07oyrJKk"},
{"content":{"org.matrix.msc1767.text":"So its better just to advise against it. A developer can still do it if they want to, but don't make it any easier than it has to be.","body":"So its better just to advise against it. A developer can still do it if they want to, but don't make it any easier than it has to be.","msgtype":"m.text"},"ts":1668816898926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$N92LGJTqtk4SdH-oHurzuSn95WmUbVYqpdd5iX27KGo"},
{"content":{"msgtype":"m.text","body":"Are we sure we want to allow resetting all contexts, even the ones you don’t have direct access to?"},"ts":1668817227373,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-qaITBfZsZ9ruTlCkTzGj0YQLXhCZJOiYZqSMHDbjVs"},
{"content":{"org.matrix.msc1767.text":"I guess I'm convinced that people should be cautious about when/how to use AsyncContext, but this broader question is unclear to me","body":"I guess I'm convinced that people should be cautious about when/how to use AsyncContext, but this broader question is unclear to me","msgtype":"m.text"},"ts":1668817384400,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rM4dLmZpnwmEfRiwN_2dRWIOXikShTr5mHMiYKtBorI"},
{"content":{"org.matrix.msc1767.text":"for both the vscode and server case, I kinda feel like those systems won't really run into the \"in the middle\" case, and like they should probably use 1-2 AsyncContexts in the first place","body":"for both the vscode and server case, I kinda feel like those systems won't really run into the \"in the middle\" case, and like they should probably use 1-2 AsyncContexts in the first place","msgtype":"m.text"},"ts":1668818533259,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0GYytMFNs2qf01HgqIh3g7W04D4hJX2Dbe3F5VXD6sM"},
{"content":{"org.matrix.msc1767.text":"Within a single piece of code, you should only really use multiple AsyncContexts if they are going to differ in extent/nesting from other things, right? You would use a compound data structure within that. (It looks like this is how HTTPContext works, right?) So when you have any kind of restricted-privilege plugin system, you only have a certain set of things to censor","body":"Within a single piece of code, you should only really use multiple AsyncContexts if they are going to differ in extent/nesting from other things, right? You would use a compound data structure within that. (It looks like this is how HTTPContext works, right?) So when you have any kind of restricted-privilege plugin system, you only have a certain set of things to censor","msgtype":"m.text"},"ts":1668818635521,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Zpr96rclfqjeCePXrhscIRhAG2YD_NHU-wfeiFDfAZI"},
{"content":{"org.matrix.msc1767.text":"the \"in the middle\" concern seems like a good reason to not do implicit propagation of cancel tokens, but I don't see how it relates to this case of clearing all contexts","body":"the \"in the middle\" concern seems like a good reason to not do implicit propagation of cancel tokens, but I don't see how it relates to this case of clearing all contexts","msgtype":"m.text"},"ts":1668818664171,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sfcbffzqNiaYBo2ij_2IeemDNthXw7_vraGZV9Ns6FI"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@rbuckton:matrix.org> If your only recourse is a blunt object (i.e., `AsyncContext.fresh`), you might lose other important context information that the things _you_ are calling still need.\n\nSorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$3DnV3v50nwaaDqKtEDZgizVYDRh3XKjoX1T07oyrJKk?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If your only recourse is a blunt object (i.e., <code>AsyncContext.fresh</code>), you might lose other important context information that the things <em>you</em> are calling still need.</blockquote></mx-reply>Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less &quot;in your face&quot;, which could reduce the risk of accidental usage.","mimetype":"text/html"}],"body":"> <@rbuckton:matrix.org> If your only recourse is a blunt object (i.e., `AsyncContext.fresh`), you might lose other important context information that the things _you_ are calling still need.\n\nSorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$3DnV3v50nwaaDqKtEDZgizVYDRh3XKjoX1T07oyrJKk?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>If your only recourse is a blunt object (i.e., <code>AsyncContext.fresh</code>), you might lose other important context information that the things <em>you</em> are calling still need.</blockquote></mx-reply>Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less &quot;in your face&quot;, which could reduce the risk of accidental usage.","m.relates_to":{"m.in_reply_to":{"event_id":"$3DnV3v50nwaaDqKtEDZgizVYDRh3XKjoX1T07oyrJKk"}}},"ts":1668818815154,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dcEkCDkYG00lSG7XEhfFR-cmGzdFTrBGb0UOZyn0BbA"},
{"content":{"org.matrix.msc1767.message":[{"body":"anyway thanks so much for explaining all of this, rbuckton . We don't need to come to a conclusion today, and I'm just happy that I can understand your points on this now.","mimetype":"text/plain"},{"body":"anyway thanks so much for explaining all of this, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> . We don't need to come to a conclusion today, and I'm just happy that I can understand your points on this now.","mimetype":"text/html"}],"body":"anyway thanks so much for explaining all of this, rbuckton . We don't need to come to a conclusion today, and I'm just happy that I can understand your points on this now.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"anyway thanks so much for explaining all of this, <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">rbuckton</a> . We don't need to come to a conclusion today, and I'm just happy that I can understand your points on this now."},"ts":1668819049749,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rHBNBsyQfZZo6Dx0bFl7xFHu0D68mJDviaUE0HetJgw"},
{"content":{"org.matrix.msc1767.text":"Overall I'd categorize these things as, even post-Stage 2 things, to resolve before Stage 3. There aren't really any fundamental disagreements about the core semantics of this API, I think.","body":"Overall I'd categorize these things as, even post-Stage 2 things, to resolve before Stage 3. There aren't really any fundamental disagreements about the core semantics of this API, I think.","msgtype":"m.text"},"ts":1668819114375,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9lGD09zoJbY7j6i_8pFNrIlvRolPIUN7y_wSdK6Av4g"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> for both the vscode and server case, I kinda feel like those systems won't really run into the \"in the middle\" case, and like they should probably use 1-2 AsyncContexts in the first place\n\nIn one of my own projects I have at least 3 AsyncLocalStorage instances, and its a small app. Because `AsyncContext` represents a single value, as opposed to a larger mutable store like .NET's `ExecutionContext`, I would expect you will see far more of them than 1-2 in many applications.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$0GYytMFNs2qf01HgqIh3g7W04D4hJX2Dbe3F5VXD6sM?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>for both the vscode and server case, I kinda feel like those systems won&#39;t really run into the &quot;in the middle&quot; case, and like they should probably use 1-2 AsyncContexts in the first place</blockquote></mx-reply>In one of my own projects I have at least 3 AsyncLocalStorage instances, and its a small app. Because <code>AsyncContext</code> represents a single value, as opposed to a larger mutable store like .NET's <code>ExecutionContext</code>, I would expect you will see far more of them than 1-2 in many applications.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> for both the vscode and server case, I kinda feel like those systems won't really run into the \"in the middle\" case, and like they should probably use 1-2 AsyncContexts in the first place\n\nIn one of my own projects I have at least 3 AsyncLocalStorage instances, and its a small app. Because `AsyncContext` represents a single value, as opposed to a larger mutable store like .NET's `ExecutionContext`, I would expect you will see far more of them than 1-2 in many applications.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$0GYytMFNs2qf01HgqIh3g7W04D4hJX2Dbe3F5VXD6sM?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>for both the vscode and server case, I kinda feel like those systems won&#39;t really run into the &quot;in the middle&quot; case, and like they should probably use 1-2 AsyncContexts in the first place</blockquote></mx-reply>In one of my own projects I have at least 3 AsyncLocalStorage instances, and its a small app. Because <code>AsyncContext</code> represents a single value, as opposed to a larger mutable store like .NET's <code>ExecutionContext</code>, I would expect you will see far more of them than 1-2 in many applications.","m.relates_to":{"m.in_reply_to":{"event_id":"$0GYytMFNs2qf01HgqIh3g7W04D4hJX2Dbe3F5VXD6sM"}}},"ts":1668820659903,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wROkwd9jVmPF-Old_upEen-K5wovSFID1ORbSYYBh9I"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Are we sure we want to allow resetting all contexts, even the ones you don’t have direct access to?\n\nThat's already feasible in the proposed design, just not convenient. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$-qaITBfZsZ9ruTlCkTzGj0YQLXhCZJOiYZqSMHDbjVs?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Are we sure we want to allow resetting all contexts, even the ones you don’t have direct access to?</blockquote></mx-reply>That's already feasible in the proposed design, just not convenient.","mimetype":"text/html"}],"body":"> <@jridgewell:matrix.org> Are we sure we want to allow resetting all contexts, even the ones you don’t have direct access to?\n\nThat's already feasible in the proposed design, just not convenient. ","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$-qaITBfZsZ9ruTlCkTzGj0YQLXhCZJOiYZqSMHDbjVs?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Are we sure we want to allow resetting all contexts, even the ones you don’t have direct access to?</blockquote></mx-reply>That's already feasible in the proposed design, just not convenient.","m.relates_to":{"m.in_reply_to":{"event_id":"$-qaITBfZsZ9ruTlCkTzGj0YQLXhCZJOiYZqSMHDbjVs"}}},"ts":1668820701926,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$a5Ivth5UDpaUu2b9lnk-SpDu-0DwMTVCVcL29v6fCsg"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.\n\nI'm speaking specifically as to why transparent propagation of cancellation tokens are bad, not the async context API in general.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$dcEkCDkYG00lSG7XEhfFR-cmGzdFTrBGb0UOZyn0BbA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.</blockquote></mx-reply>I'm speaking specifically as to why transparent propagation of cancellation tokens are bad, not the async context API in general.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.\n\nI'm speaking specifically as to why transparent propagation of cancellation tokens are bad, not the async context API in general.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$dcEkCDkYG00lSG7XEhfFR-cmGzdFTrBGb0UOZyn0BbA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Sorry where you suggesting a more subtle instrument? I guess I missed that, though I guess the ExecutionContext API put the way to create and set a fresh one less \"in your face\", which could reduce the risk of accidental usage.</blockquote></mx-reply>I'm speaking specifically as to why transparent propagation of cancellation tokens are bad, not the async context API in general.","m.relates_to":{"m.in_reply_to":{"event_id":"$dcEkCDkYG00lSG7XEhfFR-cmGzdFTrBGb0UOZyn0BbA"}}},"ts":1668820742763,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$vXdiSSTvggJ6v9Vv7bfDdGVVk36G57MJWVrOLj5hmmE"},
{"content":{"org.matrix.msc1767.text":"That’s funny because propagating cancellation tokens is almost certainly the first and most obvious thing this will be used for.","body":"That’s funny because propagating cancellation tokens is almost certainly the first and most obvious thing this will be used for.","msgtype":"m.text"},"ts":1668820831161,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ol0oAHEgaj7nvBlmXJ_US2B3395fonbgqvFOMNkxREg"},
{"content":{"org.matrix.msc1767.message":[{"body":"I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using `AsyncLocalStorage` for (though in that case, its a Discord bot).","mimetype":"text/plain"},{"body":"I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using <code>AsyncLocalStorage</code> for (though in that case, its a Discord bot).","mimetype":"text/html"}],"body":"I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using `AsyncLocalStorage` for (though in that case, its a Discord bot).","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using <code>AsyncLocalStorage</code> for (though in that case, its a Discord bot)."},"ts":1668821395616,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$wKekELBgEvD8h_7159OFup5ekL_8JA2dvNelCGJTgBY"}
]