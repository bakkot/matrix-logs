[
{"content":{"body":"I'm starting to get the feeling that the different use cases for AsyncContext are actually so different that for some things it won't be possible to find a behavior that works for all of them","m.mentions":{},"msgtype":"m.text"},"ts":1711708276454,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$p_xpliOnZMlSuks_lTIG1qSs8rcu4GWnVURHUAlVLnI"},
{"content":{"body":"APMs need different things than something like the `console.log` example would need, which are also different from what task attribution needs","format":"org.matrix.custom.html","formatted_body":"APMs need different things than something like the <code>console.log</code> example would need, which are also different from what task attribution needs","m.mentions":{},"msgtype":"m.text"},"ts":1711708336113,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dH93k3-GRuUynyBHb5b97U5GNaedWDWZsb6HGUJO2uM"},
{"content":{"body":"in particular, task attribution doesn't really care about registration, it cares about the event loop task that caused the current event loop task to run","m.mentions":{},"msgtype":"m.text"},"ts":1711708408277,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$P2RiyZHbmeoSI9l8vFfd4WvvxN9_RZstavXqLEEgqdo"},
{"content":{"body":"and that doesn't even map to async continuation, it just so happens that for promises, you tend to call `.then` or await them immediately after creating/receiving them","format":"org.matrix.custom.html","formatted_body":"and that doesn't even map to async continuation, it just so happens that for promises, you tend to call <code>.then</code> or await them immediately after creating/receiving them","m.mentions":{},"msgtype":"m.text"},"ts":1711708441878,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q"},
{"content":{"body":"use cases which so far relied on zone.js would want a mostly registration-time context for DOM events, but that doesn't work for APMs","m.mentions":{},"msgtype":"m.text"},"ts":1711708639205,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$DQ593uHUOjZ1kx9-WBkZRcjwlwBnWTkT3j-3RWitXmw"},
{"content":{"body":"I'm not sure there's a solution","m.mentions":{},"msgtype":"m.text"},"ts":1711708648418,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Oc9Ud0S4DzH69y95md_Krx3lwhDANQdDfYfGSqviEDE"},
{"content":{"body":" * APMs need different things than something like the `console.log` server platform example would need, which are also different from what task attribution needs","format":"org.matrix.custom.html","formatted_body":" * APMs need different things than something like the <code>console.log</code> server platform example would need, which are also different from what task attribution needs","m.mentions":{},"m.new_content":{"body":"APMs need different things than something like the `console.log` server platform example would need, which are also different from what task attribution needs","format":"org.matrix.custom.html","formatted_body":"APMs need different things than something like the <code>console.log</code> server platform example would need, which are also different from what task attribution needs","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$dH93k3-GRuUynyBHb5b97U5GNaedWDWZsb6HGUJO2uM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711708741596,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-npFcHVudzMBKwHp1MHQvqIZ2gFuplsyi0FOQZgCjZE"},
{"content":{"body":"for events I guess you could opt into some behavior in the event registation, but this also affects observers and generators","m.mentions":{},"msgtype":"m.text"},"ts":1711708980431,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OXTCO_yka29DnS_3TBvwP1S8YGDNkockwGv-TNu0M_U"},
{"content":{"body":"do you have a concrete case where their needs are divergent?","m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711730306850,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$EQC49ai0CLQqn3RBbOb0bszrRn22zDz_qBN3n9MFaRY"},
{"content":{"body":"* do you have a concrete case where their needs and definition are divergent?","m.new_content":{"body":"do you have a concrete case where their needs and definition are divergent?","msgtype":"m.text"},"m.relates_to":{"event_id":"$EQC49ai0CLQqn3RBbOb0bszrRn22zDz_qBN3n9MFaRY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711730318392,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$Ts9MLPyJQshcob-MN3Uz2kaad4l7LYrppiMrJerbDAw"},
{"content":{"body":"Well, the various `XMLHttpRequest` events are fired with the context active at the time `send` was called","format":"org.matrix.custom.html","formatted_body":"Well, the various <code>XMLHttpRequest</code> events are fired with the context active at the time <code>send</code> was called","m.mentions":{},"m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$EQC49ai0CLQqn3RBbOb0bszrRn22zDz_qBN3n9MFaRY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711730658044,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$47y5dZMj0hwhVTsRTjQhYkRsqERI2NDRLvtJr2RPDhA"},
{"content":{"body":"this is different even from task attribution's behavior with `fetch`, which is at async continuations (equivalent to `addEventListener`)","format":"org.matrix.custom.html","formatted_body":"this is different even from task attribution's behavior with <code>fetch</code>, which is at async continuations (equivalent to <code>addEventListener</code>)","m.mentions":{},"m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$47y5dZMj0hwhVTsRTjQhYkRsqERI2NDRLvtJr2RPDhA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711730686811,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$uNio9o-ZRSoPnQl-Y8Zlzdv3NRvlEM4QQqZ_pwwQSZY"},
{"content":{"body":"this is why I suspect that they don't actually need the async continuation behavior, and the context in which `fetch` was called might be better suited for that","format":"org.matrix.custom.html","formatted_body":"this is why I suspect that they don't actually need the async continuation behavior, and the context in which <code>fetch</code> was called might be better suited for that","m.mentions":{},"m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$uNio9o-ZRSoPnQl-Y8Zlzdv3NRvlEM4QQqZ_pwwQSZY"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711730757817,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$oncHw5AMOq5KhegjZieXZNtaU7yorxAE_un63c6y-I0"},
{"content":{"body":"but it just happens that most code won't see the difference for promise, whereas it might for events","m.mentions":{},"m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$oncHw5AMOq5KhegjZieXZNtaU7yorxAE_un63c6y-I0"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711730780915,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Qdx2BLik22bqXcaI2HwNANKBFjQR3elgMmieRa98syA"},
{"content":{"body":"because events tend to be registered for multiple uses, which increases the likelyhood that the registration has a different context than the immediate async cause","m.mentions":{},"m.relates_to":{"event_id":"$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q","is_falling_back":true,"m.in_reply_to":{"event_id":"$Qdx2BLik22bqXcaI2HwNANKBFjQR3elgMmieRa98syA"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1711731049970,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$73cW2nO7cGn5Xu62SY2c8EzIqxGT2iUXcBXXJxnQ_RQ"},
{"content":{"body":"So Zone.js uses call time context instead of registration time?","msgtype":"m.text"},"ts":1711737249963,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$q2ndXhFBEKweQXj4baRs7HHa3lGpdIAUFts6E3rDuEA"},
{"content":{"body":"No, Zone.js seems to use registration time for every event","msgtype":"m.text"},"ts":1711737555929,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$GY0lNWuu6LmJ03SxB4O7vcrxl8zwCH_5GIfywWjJbmo"},
{"content":{"body":"Oh, you said task attribution uses registration time","msgtype":"m.text"},"ts":1711737602512,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uw8WePNKEsfPXXbCjdeTnGCFa4FkE_wLg1aelSX4uQU"},
{"content":{"body":"* Oh, you said task attribution doesn’t use registration time","m.new_content":{"body":"Oh, you said task attribution doesn’t use registration time","msgtype":"m.text"},"m.relates_to":{"event_id":"$uw8WePNKEsfPXXbCjdeTnGCFa4FkE_wLg1aelSX4uQU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711737618519,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QGZhfZfLmFPIFIxLVN950t-CB6RlKrhFWCcl8rP3O3w"},
{"content":{"body":"If I said so, I meant the opposite","msgtype":"m.text"},"ts":1711737637454,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$gOBhpngiPEUgMvb3tgxNlpRGvqdpTSH5yMHHfybyOGQ"},
{"content":{"body":"> in particular, task attribution doesn't really care about registration, it cares about the event loop task that caused the current event loop task to run","format":"org.matrix.custom.html","formatted_body":"<blockquote data-md=\">\">in particular, task attribution doesn&#39;t really care about registration, it cares about the event loop task that caused the current event loop task to run<br/></blockquote>","msgtype":"m.text"},"ts":1711737652991,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$p-okRX8nx1jSA2OCS7VzwlpNbM4kpXs6ujTojS6afc0"},
{"content":{"body":"Maybe I misunderstand","msgtype":"m.text"},"ts":1711737670000,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eg9Ht9br5mvtRLJQKnx_1-8KAMlJoUPEiyG4fLHSqYE"},
{"content":{"body":"(Or I confused you with my edit)","msgtype":"m.text"},"ts":1711737688197,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1bL-Ly0qCNuvhQBXdW5xg5XvZbVut1zVVESOXEmlk4g"},
{"content":{"body":"FWIW, registration time by default makes it a lot harder to maintain the cause's context, whereas cause-by-default can restore registration time with a simple call to wrap.","m.mentions":{},"msgtype":"m.text"},"ts":1711737689663,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ukl8e_KThzck03P_29sYRE5qecetPsE7m06fj_l_iK8"},
{"content":{"body":"> <@jridgewell:matrix.org> (Or I confused you with my edit)\n\nThat, and I'm currently in the middle of walking my dog 😅","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$1bL-Ly0qCNuvhQBXdW5xg5XvZbVut1zVVESOXEmlk4g?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br />(Or I confused you with my edit)</blockquote></mx-reply>That, and I'm currently in the middle of walking my dog 😅","m.relates_to":{"m.in_reply_to":{"event_id":"$1bL-Ly0qCNuvhQBXdW5xg5XvZbVut1zVVESOXEmlk4g"}},"msgtype":"m.text"},"ts":1711737734541,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$z85NSRtHHyPxOee219qIKQbDwoMQYVZp2xy8iJ_txgk"},
{"content":{"body":"So for attribution, if I do `el.addEventListener(‘click’, () => {})`, they want to propagate the context that happens during the trigger?","format":"org.matrix.custom.html","formatted_body":"So for attribution, if I do <code data-md=\"`\">el.addEventListener(‘click’, () =&gt; {})</code>, they want to propagate the context that happens during the trigger?","msgtype":"m.text"},"ts":1711737817441,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LmwsBmxMMBbhNxRY_75qOAuwUPqdpmDvikCG_WzKCiI"},
{"content":{"body":"> <@abotella:igalia.com> That, and I'm currently in the middle of walking my dog 😅\n\nSEND PICS PLZ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24z85NSRtHHyPxOee219qIKQbDwoMQYVZp2xy8iJ_txgk\">In reply to</a><a href=\"https://matrix.to/#/%40abotella%3Aigalia.com\">@abotella:igalia.com</a><br />That, and I'm currently in the middle of walking my dog 😅</blockquote></mx-reply>SEND PICS PLZ","m.relates_to":{"m.in_reply_to":{"event_id":"$z85NSRtHHyPxOee219qIKQbDwoMQYVZp2xy8iJ_txgk"}},"msgtype":"m.text"},"ts":1711737834925,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Bjw-0h7VU6ngHI_RBT0Q68AsJ4MqjL3YuhHJBMeeMEE"},
{"content":{"body":"> <@jridgewell:matrix.org> So for attribution, if I do `el.addEventListener(‘click’, () => {})`, they want to propagate the context that happens during the trigger?\n\nTask attribution doesn't seem to care too much about most events, since it's not something that can be queried by the user. The default is call-time, and that's the case for the click event","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$LmwsBmxMMBbhNxRY_75qOAuwUPqdpmDvikCG_WzKCiI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>So for attribution, if I do <code data-md=\"`\">el.addEventListener(‘click’, () =&gt; {})</code>, they want to propagate the context that happens during the trigger?</blockquote></mx-reply>Task attribution doesn't seem to care too much about most events, since it's not something that can be queried by the user. The default is call-time, and that's the case for the click event","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$LmwsBmxMMBbhNxRY_75qOAuwUPqdpmDvikCG_WzKCiI"}},"msgtype":"m.text"},"ts":1711738452845,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$TFHlDhiSLkSy7BmJpZnp41hfM0-6DCiaFwL6hkDYJms"},
{"content":{"body":"So `el.click()` (which fires the event synchronously) uses the call-time event, and clicks coming from the user are fired in the empty context","format":"org.matrix.custom.html","formatted_body":"So <code>el.click()</code> (which fires the event synchronously) uses the call-time event, and clicks coming from the user are fired in the empty context","m.mentions":{},"msgtype":"m.text"},"ts":1711738500393,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$c_st709OzJ1dLNFcKaTimnpKoQoyWxEqZOPGTxNLudw"},
{"content":{"body":" * So `el.click()` (which fires the event synchronously) uses the call-time context, and clicks coming from the user are fired in the empty context","format":"org.matrix.custom.html","formatted_body":" * So <code>el.click()</code> (which fires the event synchronously) uses the call-time context, and clicks coming from the user are fired in the empty context","m.mentions":{},"m.new_content":{"body":"So `el.click()` (which fires the event synchronously) uses the call-time context, and clicks coming from the user are fired in the empty context","format":"org.matrix.custom.html","formatted_body":"So <code>el.click()</code> (which fires the event synchronously) uses the call-time context, and clicks coming from the user are fired in the empty context","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$c_st709OzJ1dLNFcKaTimnpKoQoyWxEqZOPGTxNLudw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711738513909,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nVvNEe9dMJkGFFXFw50luwG0MJ5rb5bUHBcJAPo9S80"},
{"content":{"body":"> <@jridgewell:matrix.org> So for attribution, if I do `el.addEventListener(‘click’, () => {})`, they want to propagate the context that happens during the trigger?\n\n * Task attribution doesn't seem to care too much about most events, since it's not something that can be queried by JS code. The default is call-time, and that's the case for the click event","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$LmwsBmxMMBbhNxRY_75qOAuwUPqdpmDvikCG_WzKCiI?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>So for attribution, if I do <code data-md=\"`\">el.addEventListener(‘click’, () =&gt; {})</code>, they want to propagate the context that happens during the trigger?</blockquote></mx-reply> * Task attribution doesn't seem to care too much about most events, since it's not something that can be queried by JS code. The default is call-time, and that's the case for the click event","m.mentions":{},"m.new_content":{"body":"Task attribution doesn't seem to care too much about most events, since it's not something that can be queried by JS code. The default is call-time, and that's the case for the click event","format":"org.matrix.custom.html","formatted_body":"Task attribution doesn't seem to care too much about most events, since it's not something that can be queried by JS code. The default is call-time, and that's the case for the click event","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$TFHlDhiSLkSy7BmJpZnp41hfM0-6DCiaFwL6hkDYJms","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711738524231,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ox1JLzsP2VSuAmOEkOE6MqkJCEeftK_jHSxkpq2xgpA"},
{"content":{"body":"The only things which are registration-time in task attribution are web APIs which schedule a callback: `setTimeout`, `requestAnimationFrame`, `scheduler.postTask`...","format":"org.matrix.custom.html","formatted_body":"The only things which are registration-time in task attribution are web APIs which schedule a callback: <code>setTimeout</code>, <code>requestAnimationFrame</code>, <code>scheduler.postTask</code>...","m.mentions":{},"msgtype":"m.text"},"ts":1711738591654,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$i6tF2e6eI_upO28JNABbq-16YpeNuzsSqP8aQpvdcQI"},
{"content":{"body":"So a coulple of questions:\n- Is call-time behavior necessary for Task Attribution? (Probably yes?)\n- Do we feel that registration-time is correct for AC? (I think so, but could be persuaded)","format":"org.matrix.custom.html","formatted_body":"So a coulple of questions:<br/><ol data-md=\"-\"><li><p>Is call-time behavior necessary for Task Attribution? (Probably yes?)</p></li><li><p>Do we feel that registration-time is correct for AC? (I think so, but could be persuaded)</p></li></ol>","msgtype":"m.text"},"ts":1711739158290,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RxiSBRs5XPieJASMkFDz1XRdTqBSh4uiCJBpU0OAua0"},
{"content":{"body":"If we don’t match Task Attribution’s semantics, then we cannot share the same CPED pointer in the job records","msgtype":"m.text"},"ts":1711739209143,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vbdowOBqKSoJ3zCFHg8uabOJwV3Nvkmjpj5pGF5r68Y"},
{"content":{"body":"We’d need to reevaluate our performanc/memory impact since we’d need a new pointer","msgtype":"m.text"},"ts":1711739233324,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$F9-XEHsS-hQ3NSBnwPUef9ZQP2mfgW0Qm8NP5ftqbY4"},
{"content":{"body":"* We’d need to reevaluate our performance/memory impact since we’d need a new pointer.","m.new_content":{"body":"We’d need to reevaluate our performance/memory impact since we’d need a new pointer.","msgtype":"m.text"},"m.relates_to":{"event_id":"$F9-XEHsS-hQ3NSBnwPUef9ZQP2mfgW0Qm8NP5ftqbY4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711739243789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Fh96UQs0jAoAVxdFkgf618NE9hkB7Rvuxu9wEwo1Cvk"},
{"content":{"body":"> <@jridgewell:matrix.org> If we don’t match Task Attribution’s semantics, then we cannot share the same CPED pointer in the job records\n\nIt could be shared if the code in Blink that sets the propagation has task attribution in mind, but that would mean turning what would be `AsyncContext.Snapshot.p.run` into an `AsyncContext.Variable.p.run`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$vbdowOBqKSoJ3zCFHg8uabOJwV3Nvkmjpj5pGF5r68Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>If we don’t match Task Attribution’s semantics, then we cannot share the same CPED pointer in the job records</blockquote></mx-reply>It could be shared if the code in Blink that sets the propagation has task attribution in mind, but that would mean turning what would be <code>AsyncContext.Snapshot.p.run</code> into an <code>AsyncContext.Variable.p.run</code>","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vbdowOBqKSoJ3zCFHg8uabOJwV3Nvkmjpj5pGF5r68Y"}},"msgtype":"m.text"},"ts":1711739321328,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wwXoFvC2gBcw0Zb-4gPwmPYq7YQ3UkZ-5fhT4KQaSUs"},
{"content":{"body":"which would have memory and performance effects","m.mentions":{},"msgtype":"m.text"},"ts":1711739327688,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$LkVjS5CtSiImI47p5FMu73wFiMJ227SgobzfX246Ctg"},
{"content":{"body":"I don’t understand, how would that work?","msgtype":"m.text"},"ts":1711739431187,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fC45Fb3tH3TYTr8gfFudmiisyj-iqFGIqRogyWyH2_A"},
{"content":{"body":"Would the `click()` restore the snapshot, then run a `taskAttribution.run(callTime, …)`?","format":"org.matrix.custom.html","formatted_body":"Would the <code data-md=\"`\">click()</code> restore the snapshot, then run a <code data-md=\"`\">taskAttribution.run(callTime, …)</code>?","msgtype":"m.text"},"ts":1711739481908,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JWhqY_iAq4WhAsZeBptbAPQB4qiyoHJ47VcFQoXRVgU"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1711739501517,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$vLzZhJp0gHxhigqzX4IredeLzjDvGL4UVe2W2Qmd8j8"},
{"content":{"body":"Ok, that’s not terrible","msgtype":"m.text"},"ts":1711739570492,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iZGOy5sCti3J2dA_OMwbCGupILE6QHOYtPyRuNwnw8M"},
{"content":{"body":"If we had a fixed key slot for attribution, we could make that reasonably fast","msgtype":"m.text"},"ts":1711739590348,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9RbqWKmrvC6ORkPZl-Hmu00bpJvhh4qAAoVQmZOW11Y"},
{"content":{"body":"Instead of storing attribution inside the HAMT with the user variables","msgtype":"m.text"},"ts":1711739605617,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SlGI-HTVYccMobg_39uAIPVESwfvmVkLWqyv5dP3SE8"},
{"content":{"body":"> <@jridgewell:matrix.org> So a coulple of questions:\n> - Is call-time behavior necessary for Task Attribution? (Probably yes?)\n> - Do we feel that registration-time is correct for AC? (I think so, but could be persuaded)\n\nabout 1, I asked Scott Haseley last week, and these were his initial thoughts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$RxiSBRs5XPieJASMkFDz1XRdTqBSh4uiCJBpU0OAua0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>So a coulple of questions:<br /><ol data-md=\"-\"><li><p>Is call-time behavior necessary for Task Attribution? (Probably yes?)</p></li><li><p>Do we feel that registration-time is correct for AC? (I think so, but could be persuaded)</p></li></ol></blockquote></mx-reply>about 1, I asked Scott Haseley last week, and these were his initial thoughts","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RxiSBRs5XPieJASMkFDz1XRdTqBSh4uiCJBpU0OAua0"}},"msgtype":"m.text"},"ts":1711739690225,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$IFqYsBGHPcu_q66WNNtzV5ZQcbNyYg5TOGr25S9wARM"},
{"content":{"body":"> It might be okay, but I'll need to think about it and discuss with the team -- and some folks are out this week. Initial concerns/uncertainties:\n> - This could impact soft navigation because code running within a soft nav task-attributable task will have a different context, e.g. an event fired within a click or setTimeout. Is this okay (not sure)? Either way it could change reported soft navs, so we'd need to run experiments (assuming the soft nav context isn't automatically plumbed through).\n> - We previously created a new TaskScope for every event/callback, which we changed because of performance issues, so we'd need to be really careful here.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>It might be okay, but I'll need to think about it and discuss with the team -- and some folks are out this week. Initial concerns/uncertainties:</p>\n<ul>\n<li>This could impact soft navigation because code running within a soft nav task-attributable task will have a different context, e.g. an event fired within a click or setTimeout. Is this okay (not sure)? Either way it could change reported soft navs, so we'd need to run experiments (assuming the soft nav context isn't automatically plumbed through).</li>\n<li>We previously created a new TaskScope for every event/callback, which we changed because of performance issues, so we'd need to be really careful here.</li>\n</ul>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1711739696675,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$W8KZUBYLXExT4ePuXRXAKduLE0H6yKRvmSZejy4zIh4"},
{"content":{"body":"`TaskScope` is the equivalent of a `Variable.p.run`","format":"org.matrix.custom.html","formatted_body":"<code>TaskScope</code> is the equivalent of a <code>Variable.p.run</code>","m.mentions":{},"msgtype":"m.text"},"ts":1711739739607,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$zNOY3VQIGA0TKIi-ysKl866m-UL-md-4YIWkQJEuVEk"},
{"content":{"body":"Ok, worse case we could add a host-hook before we set the context when restoring a snapshot","msgtype":"m.text"},"ts":1711740241967,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6-HMNAplKn9usZ9iFEy-fgOkTUBrAhsS9N9fr0-lBXc"},
{"content":{"body":"That way engines could perform whatever call-time modification they n eed","msgtype":"m.text"},"ts":1711740260491,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$adeTqCx2GF18YrTTK7T5P8476H_F_zx_sIZ2QrJ4WjI"},
{"content":{"body":"* That way engines could perform whatever call-time modification they need","m.new_content":{"body":"That way engines could perform whatever call-time modification they need","msgtype":"m.text"},"m.relates_to":{"event_id":"$adeTqCx2GF18YrTTK7T5P8476H_F_zx_sIZ2QrJ4WjI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1711740262498,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tY_Ul5ApKHZx7aauOx9Bp4lQ_xEPYy-ttCoamM6uLuk"},
{"content":{"body":"Though now I’m curious when they don’t need a new `TaskScope`","format":"org.matrix.custom.html","formatted_body":"Though now I’m curious when they don’t need a new <code data-md=\"`\">TaskScope</code>","msgtype":"m.text"},"ts":1711740284706,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wNOwlxjn5IvoNjtqLC3HddxBDamS81UM1aRS9lJCvRU"},
{"content":{"body":"> <@jridgewell:matrix.org> Ok, worse case we could add a host-hook before we set the context when restoring a snapshot\n\nI think the only chance that this might be needed for task attribution is if whatever we end up deciding for generators doesn't end up working for them (which I doubt will happen)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$6-HMNAplKn9usZ9iFEy-fgOkTUBrAhsS9N9fr0-lBXc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Ok, worse case we could add a host-hook before we set the context when restoring a snapshot</blockquote></mx-reply>I think the only chance that this might be needed for task attribution is if whatever we end up deciding for generators doesn't end up working for them (which I doubt will happen)","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$6-HMNAplKn9usZ9iFEy-fgOkTUBrAhsS9N9fr0-lBXc"}},"msgtype":"m.text"},"ts":1711740442334,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-9E0tOSZ68pLLzfaBzjozIi4frXMhX3zcbykxS-FzsY"},
{"content":{"body":"because they're fine with the CPED behavior, and anything else would be Blink calling the V8 embedder API","m.mentions":{},"msgtype":"m.text"},"ts":1711740464226,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kRW766i9EegfKK5pVFC-OseaIK174KG0s7VlH6F4czU"},
{"content":{"body":"I think the ordering is incorrect, which will require it","msgtype":"m.text"},"ts":1711740496898,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wfUly8-CRnNYajwghyMXN8p-DjelKazNjmlZRZchTpE"},
{"content":{"body":"Actually, no, for regular `addEventListener()` they should be fine","format":"org.matrix.custom.html","formatted_body":"Actually, no, for regular <code data-md=\"`\">addEventListener()</code> they should be fine","msgtype":"m.text"},"ts":1711740530588,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EaGXwVgtjHjAiSIJP8-Arh4wDLpnpUstnWx6zfFk8Lc"},
{"content":{"body":"I was thinking we did `AC.wrap(listener)` on the V8 side, but we don't","format":"org.matrix.custom.html","formatted_body":"I was thinking we did <code data-md=\"`\">AC.wrap(listener)</code> on the V8 side, but we don&#39;t","msgtype":"m.text"},"ts":1711740551237,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$q-qbE7qHX2y_8GGpMGLuzAEWcG8l4uIqYd6RiMTlAhI"},
{"content":{"body":"But, how would Attribution work when I invoke a `snapshot.run(foo)`?","format":"org.matrix.custom.html","formatted_body":"But, how would Attribution work when I invoke a <code data-md=\"`\">snapshot.run(foo)</code>?","msgtype":"m.text"},"ts":1711740577737,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$d_kdfNQ9Ys6VOAEb0GvoxYCgIwYrI0IRFHGOqf3GyZM"},
{"content":{"body":"Should the current `TaskScope` be kept, or is it ok to restore the snapshot’s?","format":"org.matrix.custom.html","formatted_body":"Should the current <code data-md=\"`\">TaskScope</code> be kept, or is it ok to restore the snapshot’s?","msgtype":"m.text"},"ts":1711740610344,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GaVaRzjzAARaVJKxht6DHSORg2aPYPAHbSZGesMBGgk"},
{"content":{"body":"When I talked with Yoav Weiss, the conclusion was that it would be fine to restore the snapshot's, because that is already a thing you can do with promises, although it's obviously not as accessible","format":"org.matrix.custom.html","formatted_body":"When I talked with <a href=\"https://matrix.to/#/@yoavweiss:matrix.org\">Yoav Weiss</a>, the conclusion was that it would be fine to restore the snapshot's, because that is already a thing you can do with promises, although it's obviously not as accessible","m.mentions":{"user_ids":["@yoavweiss:matrix.org"]},"msgtype":"m.text"},"ts":1711740677979,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$NM8b0sv6bRLDzUWCxecV9gbvzRLJiU1UETC6ViqUR4M"},
{"content":{"body":"but I haven't discussed this with Scott","m.mentions":{},"msgtype":"m.text"},"ts":1711740682757,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tGfzUqrBpuKOZ2blAm1dv8a4gvXvT7L771gxquC83ec"},
{"content":{"body":"Unrelated (so maybe respond in a thread): have we thought about dynamic import (with top-level `await`)?  In particular, does the imported module run in the context of the importer, or in the root context?","format":"org.matrix.custom.html","formatted_body":"Unrelated (so maybe respond in a thread): have we thought about dynamic import (with top-level <code>await</code>)?  In particular, does the imported module run in the context of the importer, or in the root context?","m.mentions":{},"msgtype":"m.text"},"ts":1711741731280,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$N7GUdNiZ4WLw_XKO9bvaQM-pAJIuetWL-ojKlXk6VCk"},
{"content":{"body":"huh, I hadn't thought of that","m.mentions":{},"msgtype":"m.text"},"ts":1711741786502,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$K-y3CSaM5qw885R3ltHq0xZ9HXjHJl1ppDn27cOj6Ik"},
{"content":{"body":"task attribution does something for script and module evaluation, but I haven't looked at it in any detail","m.mentions":{},"msgtype":"m.text"},"ts":1711741809503,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$x6OZG0r1BEAZw-CzLnabVNnCwPh4a9MOuhZ7zAVPdpo"},
{"content":{"body":"We discussed that a bit in the SES meeting, I think they were expecting it to run within the context of the importer","msgtype":"m.text"},"ts":1711741912668,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EFSZNoqd-vixWhCKJPTd2gmuUX9QpPwEvF_xKfQPJss"},
{"content":{"body":"That’s my thought as well","msgtype":"m.text"},"ts":1711741925228,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uXt2W9s8y_PAhJFKy81Iq8cLSED5wFfaYyVKwqG16Oc"},
{"content":{"body":"That probably makes it difficult to polyfil, huh?","msgtype":"m.text"},"ts":1711742230473,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$n-dY2zukWpxXjFkVKRFdDhWZR4xyh1KjZn0AlvgdGHs"},
{"content":{"body":"if we end up having things in the web integration that aren't exactly call time or registration time, but instead some async originating context, that would probably be impossible to polyfill","m.mentions":{},"msgtype":"m.text"},"ts":1711742342961,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dSZRV5O2wVphuozTvf1RHV8IPoTVwBszlnghlSr-aGs"},
{"content":{"body":"It would require bundler integration to do properly","msgtype":"m.text"},"ts":1711742396370,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GQ85FipBZWscnO9yGTG5L3afUIPc5TXcsq6R9kFVuY8"},
{"content":{"body":"> <@abotella:igalia.com> I'm starting to get the feeling that the different use cases for AsyncContext are actually so different that for some things it won't be possible to find a behavior that works for all of them\n\nOK, this is possible, and people have claimed it, but for me to understand it better, it would help me to see concrete examples of where different behavior would make sense for the same callback, depending on the context. Are you working on collecting any examples like this?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$p_xpliOnZMlSuks_lTIG1qSs8rcu4GWnVURHUAlVLnI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I&#39;m starting to get the feeling that the different use cases for AsyncContext are actually so different that for some things it won&#39;t be possible to find a behavior that works for all of them</blockquote></mx-reply>OK, this is possible, and people have claimed it, but for me to understand it better, it would help me to see concrete examples of where different behavior would make sense for the same callback, depending on the context. Are you working on collecting any examples like this?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$p_xpliOnZMlSuks_lTIG1qSs8rcu4GWnVURHUAlVLnI"}},"msgtype":"m.text"},"ts":1711751799954,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zKZzz0hv6CAg-wyhqHn2Rk7seA8AIQGiFmH0Z4VKoe0"},
{"content":{"body":"something I've heard claimed is that certain variables make sense to treat in different ways than other variables","m.mentions":{},"msgtype":"m.text"},"ts":1711751843271,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WWrlzIkNv9xbAH3mEfwgzZ7fFxDZnaLRhvEQeKCNYVU"},
{"content":{"body":"anyway if it turns out that this is intractably bad, we can withdraw the proposal (it has been raised as a counterargument before), but I'm not at all convinced that the requirements for different environments are different.","m.mentions":{},"msgtype":"m.text"},"ts":1711751918050,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WU3Shd3z-3TDan-3pi3TsDgZkQkfe3bymaUmQr7AMk0"},
{"content":{"body":"I'm not arguing at this point that this is intractable","m.mentions":{},"msgtype":"m.text"},"ts":1711751934280,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lJaAZHm0EucJ4j5DyoQe1Zrj4BKOCE9-KvYvZLKd__I"},
{"content":{"body":"could you characterize the difference in any more detail?","m.mentions":{},"msgtype":"m.text"},"ts":1711751953230,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BPDttAz3d8BVjgXbjLRUTSwlj1on2wSwZYDUZ7APeR0"},
{"content":{"body":"but I'm fearing that it might be the case","m.mentions":{},"msgtype":"m.text"},"ts":1711751954083,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$QmZ3ePDh_HpoS0rGs8CStHD0Bn8NWe3s0zJxiKSzWFs"},
{"content":{"body":"right, so, I'd like to understand what's behind that fear","m.mentions":{},"msgtype":"m.text"},"ts":1711751966362,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DobEM4uWaCU_RS9gFaHfwSw-JM7vu51Jh-mArTlT0dM"},
{"content":{"body":"I think it'd be helpful if we had a table of different functions which take callbacks, and then we can think about various different policies for which snapshot they should restore. You had something like this in progress, right? Were there any particularly challenging \"rows\" that you encountered?","m.mentions":{},"msgtype":"m.text"},"ts":1711752153425,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yJqxnpG13Jke4Fj5svCI3817GI5xq35K-iS6crce130"},
{"content":{"body":"well, for every single event, task attribution's behavior is different from zone.js's","m.mentions":{},"msgtype":"m.text"},"ts":1711752196494,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$zCwy3wybS7K-G4CNCM-pJAkz-IwRmoN9I5X_nBd4Uyk"},
{"content":{"body":"could you give a concrete example and we can think through what's useful?","m.mentions":{},"msgtype":"m.text"},"ts":1711752213607,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dERD6VpTY5xl975d3kh8igpYuQrCFx35mduNxlJMyVI"},
{"content":{"body":"the example that made me realize that task attribution's use case is probably quite different from most users of AsyncContext is that task attribution recently made the `XMLHttpRequest` events have the context of the `send()` call","format":"org.matrix.custom.html","formatted_body":"the example that made me realize that task attribution's use case is probably quite different from most users of AsyncContext is that task attribution recently made the <code>XMLHttpRequest</code> events have the context of the <code>send()</code> call","m.mentions":{},"msgtype":"m.text"},"ts":1711752524395,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RF8os55bhqLVSS4emo7-RLNWUkYY8H8Copobvt7VUyY"},
{"content":{"body":"whereas before it just had an empty context (which is the default for async events in task attribution)","m.mentions":{},"msgtype":"m.text"},"ts":1711752552812,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Y3C6rY67dReVHJkCSiykMA24JAZC62lstpZpTxbBW7U"},
{"content":{"body":"note that this is different from fetch","m.mentions":{},"msgtype":"m.text"},"ts":1711752564232,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$DuumAaADDwbTmtXxAkTJnZqGpbK_nGaaE5bqaxkt_jc"},
{"content":{"body":"even in task attribution","m.mentions":{},"msgtype":"m.text"},"ts":1711752568390,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$E-mb5atDpOBkoHrkZANNQC0OmfRyh7fTkNyjkPEorG8"},
{"content":{"body":"OK, so let's think about XMLHttpRequest and fetch. What are the semantics in zone.js and task attribution of each?","m.mentions":{},"msgtype":"m.text"},"ts":1711752574098,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K6prtjpHNP02p59DbQPHSoBrefg1eokCqrUcZTqJYQ8"},
{"content":{"body":"we should probably add AsyncLocalStorage's semantics as well to that list, at least for fetch","m.mentions":{},"msgtype":"m.text"},"ts":1711752595569,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bmErlEmIdRncpbMEqD2ZLisNyHA4TpyDuMMoe09HY1Q"},
{"content":{"body":"oh I guess fetch doesn't have a callback so this doesn't come up? it's just from promises?","m.mentions":{},"msgtype":"m.text"},"ts":1711752615055,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tWm2v8-P13vNaymVgYTqzViEa3mbhqXg56Dz9y1BUvU"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1711752621398,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ReTpL5FJq2MpGM22zgYaqavPaeHAys-zQjYH7NPcJ98"},
{"content":{"body":"I would very much not assume that either of those two implementations (zone.js or task attribution) is perfect and has semantics that we must preserve exactly as they are. We should think about what is important about their behavior for their users.","m.mentions":{},"msgtype":"m.text"},"ts":1711752653878,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1sJ9VaItWjHJ0nJ3LbBdUvfVMTmv66cEGrwe3HG1C7o"},
{"content":{"body":"they are just reference points that are useful in an investigation","m.mentions":{},"msgtype":"m.text"},"ts":1711752667513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$91ZC7p8JIADbW_1TAvo-bmMwMWlQJX8nHExl2q9Dhqk"},
{"content":{"body":"yeah, and indeed I think task attribution is not perfect here","m.mentions":{},"msgtype":"m.text"},"ts":1711752682632,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$N80UvGy925AhRWANLrB_I_NRIM9xdx_Quq1Zmkats6k"},
{"content":{"body":"at least for what I think they need","m.mentions":{},"msgtype":"m.text"},"ts":1711752687576,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hFepG9i8xy6VRargZhM7SlhZL_u9lpOtZzThx7GdGUg"},
{"content":{"body":"(also XHR is legacy; it would somehow be easier to think about something which isn't so deprecated)","m.mentions":{},"msgtype":"m.text"},"ts":1711752698725,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p6yt1rmLbfTyGQDWOtexkw0fqO-M9o0RoHYQXkHCqK0"},
{"content":{"body":"well, the fact that this was different in XHR and fetch was what made me realize the different semantics","m.mentions":{},"msgtype":"m.text"},"ts":1711752722865,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$J4DCxhfE5pdPy_zcBRTFcPa9EWvdKjqE_bTQJLpiB5k"},
{"content":{"body":"OK, what are the semantics of each, in each framework?","m.mentions":{},"msgtype":"m.text"},"ts":1711752735400,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BGBSxTU_vhxDfJ-anaQC1NVdaP9niWAgOemP91B3pm4"},
{"content":{"body":"oh I see you explained in a thread","m.mentions":{},"msgtype":"m.text"},"ts":1711752755977,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NHIegrAUSZGPFSjHreRZabM-wcI96zjU2VyEAs9Fxuc"},
{"content":{"body":"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$MWb8YUBP-AfcdHf9n2LVI-EIbo390545jUohOKlSZ6Q?via=matrix.org&via=mozilla.org&via=igalia.com","m.mentions":{},"msgtype":"m.text"},"ts":1711752762929,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CVbsw9Ebgl837fdu6rjuUHAwbOUpvEM7go7GsiqCA5M"},
{"content":{"body":"since fetch returns a promise, ALS, task attribution and zone.js all propagate the context at the point that the promise is awaited or called `.then()`","format":"org.matrix.custom.html","formatted_body":"since fetch returns a promise, ALS, task attribution and zone.js all propagate the context at the point that the promise is awaited or called <code>.then()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1711752807852,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lQPwaCKSumQaKs_FN__WS8jbPH8lk76V9DRv8MDGtxQ"},
{"content":{"body":"not the context at which `fetch()` is called","format":"org.matrix.custom.html","formatted_body":"not the context at which <code>fetch()</code> is called","m.mentions":{},"msgtype":"m.text"},"ts":1711752823399,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Iy3N-LCRtcN0fZWZ-68-jjouFgaReCgLNbEyKq0pzPM"},
{"content":{"body":"in XHR, calling `fetch()` would be equivalent to calling either `open()` or `send()` – it doesn't really matter which, but task attribution uses `send()`","format":"org.matrix.custom.html","formatted_body":"in XHR, calling <code>fetch()</code> would be equivalent to calling either <code>open()</code> or <code>send()</code> – it doesn't really matter which, but task attribution uses <code>send()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1711752866696,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$THfPohi5hm_TYMy322do-JOH4gbAvzYYLtmnt-ECc-Q"},
{"content":{"body":"and that is the context that task attribution propagates","m.mentions":{},"msgtype":"m.text"},"ts":1711752874030,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hwKbuTd1SBl9206ZcPLV-PWzq3thDjWYLm4NxuglP-c"},
{"content":{"body":"let's just focus on XHR onto itself. Is this consistent between zone.js and task attribution?","m.mentions":{},"msgtype":"m.text"},"ts":1711752885480,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$g0LxpJyQWi1EvQart-9HZg8cgIN7yYv9ggbrmhT0mo0"},
{"content":{"body":"no, zone.js uses the registration-time context (for `addEventListener`)","format":"org.matrix.custom.html","formatted_body":"no, zone.js uses the registration-time context (for <code>addEventListener</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1711752896741,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$NJslFMcGIMNnrCjqX6nUpqKX8uElyvu_ObVpQP19EVc"},
{"content":{"body":"So, let's think, when do we expect these contexts to differ?","m.mentions":{},"msgtype":"m.text"},"ts":1711752942790,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$no2TvF6srkfHWr44k5pQzT2yZ0i5Z0j9NgQXN3s6034"},
{"content":{"body":"we've already made calls in this proposal that it's OK for us to change semantics slightly if we expect the contexts to be equal in practice (e.g., for unhandled promise rejections)","m.mentions":{},"msgtype":"m.text"},"ts":1711752986727,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zaCq7L2Xtm11RW9j9O8X4c5iKDr5X92UV1qirrhJjwA"},
{"content":{"body":"I think, with XHR, you tend to create it, add the events, and send it all in one piece of JS","m.mentions":{},"msgtype":"m.text"},"ts":1711753012552,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rQaYATy3ksibkeNJvstGZtB4l1pxMguNjo3WoN-l6YA"},
{"content":{"body":"IIRC the `XMLHttpRequest` object can be reused for multiple fetches, but it tends not to be","format":"org.matrix.custom.html","formatted_body":"IIRC the <code>XMLHttpRequest</code> object can be reused for multiple fetches, but it tends not to be","m.mentions":{},"msgtype":"m.text"},"ts":1711753051352,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$AdVPYTz7aKgfU2BtrWSEt68UMggXCe2p0cU9EoFL1Zk"},
{"content":{"body":"and this is very different from something long lived like a DOM element, document, window...","m.mentions":{},"msgtype":"m.text"},"ts":1711753079285,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$0EN2sE93Y8gIHzZRgtMxGrIU12V6C9tkRcP9BdG7lWs"},
{"content":{"body":"I wonder if we can find any old zone.js bug report/incremental development around this. I'll ask my Angular contacts.","m.mentions":{},"msgtype":"m.text"},"ts":1711753100448,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$98V1vM40XoW_tBUf6lFm-W22xO7fiX5PpYLsRTIPpzY"},
{"content":{"body":"Have you run into anything else besides XHR?","m.mentions":{},"msgtype":"m.text"},"ts":1711753108872,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P5f96mnMaCvk5cq3TexaLUfZdBQcs_HBCO5shQbV_MU"},
{"content":{"body":"setTimeout is unambiguous, for example, right?","m.mentions":{},"msgtype":"m.text"},"ts":1711753122205,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JxFLrvAqqOOb6LB4SFf6lrteamOBTKmUeq526HKkPs0"},
{"content":{"body":"yeah, for web APIs which schedule a callback, there is only one possible context that could be used","m.mentions":{},"msgtype":"m.text"},"ts":1711753155006,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UxmblSVnlzIU9Dc0otslFT1447Ltu2CPIVmT9ulRH64"},
{"content":{"body":"OK, I suspect that this particular case is one where either answer would be fine... it'll be good to dig into another one once we think of it","m.mentions":{},"msgtype":"m.text"},"ts":1711753905905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JbeE40rFEuPnEBJuPJTKu7HEJmQ1ZaSu-kSFm3Fsdc8"},
{"content":{"body":"I think I should focus on which possible contexts would make sense for each event, rather than on what task attribution or zone.js do","m.mentions":{},"msgtype":"m.text"},"ts":1711753976445,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$aqSwAcYgzad-2lvr6mJzXo3XZx4k-UtDkFI_iAp40aY"},
{"content":{"body":"I suspect that's more likely to give us general rules","m.mentions":{},"msgtype":"m.text"},"ts":1711754012397,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OYJ0KibIJVi2SrjnlMX1FrFpa8TmaJxpaJxJVg_H-Bk"},
{"content":{"body":"I agree; those two are interesting reference points to keep in mind, but we're not going for 100% backwards compatibility with either.","m.mentions":{},"msgtype":"m.text"},"ts":1711754040068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GGWTdjGs2ctZ-SKSfw5gnUlwrQIi2EiVSx7iNtnlwg8"},
{"content":{"body":"I suggested looking at those because they represent some accumulation of knowledge/experience in this area","m.mentions":{},"msgtype":"m.text"},"ts":1711754058656,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZMQovoYRXCoqRnO75QR_rftVcJhA7p2hVH5oYj0JqV8"},
{"content":{"body":"I think it’s still useful to consider which context Zone.js uses for each API","msgtype":"m.text"},"ts":1711754090347,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VkpPRHGvg0JJ0_jytQZQNfQvMDY6GuTEk3qYWoErBXg"},
{"content":{"body":"We don’t need to be 100% compatible, but we should have a good reason for breaking with it.","msgtype":"m.text"},"ts":1711754107614,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6eVkPxK8BlbikfsnwxRZmasYLqawX400_RGepxiQJcE"},
{"content":{"body":"zone.js's behavior seems to be to use registration time on every event, except that it allows overriding the behavior for different events","m.mentions":{},"msgtype":"m.text"},"ts":1711754108089,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XDgL_ko4kch5ae2WxKNco7XoSTHiV_lkldtAOqwBoi0"},
{"content":{"body":"although it's not fully consistent in that","m.mentions":{},"msgtype":"m.text"},"ts":1711754122222,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-QomxNa1qNycBA2XwaPdJrDzx3feSnh-Bbg7jwA_UWg"},
{"content":{"body":"It would be easier for me to understand these descriptions of what zone.js does based on concrete examples, and what we think of them","m.mentions":{},"msgtype":"m.text"},"ts":1711754148860,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nShkyPvqW3FQ49oftRgtFKVyEnbkwt0_ekjITXLoYpY"},
{"content":{"body":"(i.e. `MessagePort.p.onmessage` is call-time, but the `message` event on `MessagePort` is registration-time)","format":"org.matrix.custom.html","formatted_body":"(i.e. <code>MessagePort.p.onmessage</code> is call-time, but the <code>message</code> event on <code>MessagePort</code> is registration-time)","m.mentions":{},"msgtype":"m.text"},"ts":1711754152197,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wT6K5_vefgTYws30RZoxnfJ5ZbeUWEk9NTbTg4gUk4E"},
{"content":{"body":"Even if it’s always registraiton time, we still need to list out each of the APIs we expect will integrate with AC","msgtype":"m.text"},"ts":1711754171872,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kXDq-Vx1wUWv-HJp76nnkVDJWNVetnw_D6WXojpVKtE"},
{"content":{"body":"also what kind of overriding they allow (we have AsyncContext.Snapshot.wrap for certain kinds of overriding, but I'm not sure whether or not this models everything)","m.mentions":{},"msgtype":"m.text"},"ts":1711754181381,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ls5FRTh4DFtT08yfujeYbILD3VjqpGyrAgh857BDRBQ"},
{"content":{"body":"That way we can discuss with the Shu and Dan Minor","msgtype":"m.text"},"ts":1711754193164,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NjqVkmnR1V8j_uTEONuQTvNrKWbjT2T6Mn4EBHhqgjQ"},
{"content":{"body":"> <@jridgewell:matrix.org> Even if it’s always registraiton time, we still need to list out each of the APIs we expect will integrate with AC\n\nyes, either that or make a uniform change in WebIDL. But I think we should list out many APIs to make sure we're specifying the behavior that we want to actually happen.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kXDq-Vx1wUWv-HJp76nnkVDJWNVetnw_D6WXojpVKtE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Even if it’s always registraiton time, we still need to list out each of the APIs we expect will integrate with AC</blockquote></mx-reply>yes, either that or make a uniform change in WebIDL. But I think we should list out many APIs to make sure we're specifying the behavior that we want to actually happen.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kXDq-Vx1wUWv-HJp76nnkVDJWNVetnw_D6WXojpVKtE"}},"msgtype":"m.text"},"ts":1711754214283,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dZqrRFaAScmMTw8K9oYWriGOLSv_aXkVV6RzrhW2uMg"},
{"content":{"body":"the ideal case would be something that's uniform in some way or other. I just don't know what that policy is (people have posited directly contradictory general rules), and I think we will be able to derive this best from examples.","m.mentions":{},"msgtype":"m.text"},"ts":1711754244232,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y-BbvBq9RnRjO63FvUTttUA0G0gdpJ87579uvL6txAg"},
{"content":{"body":"> <@littledan:matrix.org> also what kind of overriding they allow (we have AsyncContext.Snapshot.wrap for certain kinds of overriding, but I'm not sure whether or not this models everything)\n\nit seems like you can list a set of event names which shouldn't be registration-time","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ls5FRTh4DFtT08yfujeYbILD3VjqpGyrAgh857BDRBQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>also what kind of overriding they allow (we have AsyncContext.Snapshot.wrap for certain kinds of overriding, but I&#39;m not sure whether or not this models everything)</blockquote></mx-reply>it seems like you can list a set of event names which shouldn't be registration-time","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ls5FRTh4DFtT08yfujeYbILD3VjqpGyrAgh857BDRBQ"}},"msgtype":"m.text"},"ts":1711754270360,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$DwvrKD2W7CZcitD6qXtQJxOAf0bDOgZkfBdgrgRblbw"},
{"content":{"body":"> <@abotella:igalia.com> it seems like you can list a set of event names which shouldn't be registration-time\n\nyep, that's one possibility! and this can be expressed in WebIDL with things like extended attributes.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$DwvrKD2W7CZcitD6qXtQJxOAf0bDOgZkfBdgrgRblbw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>it seems like you can list a set of event names which shouldn't be registration-time</blockquote></mx-reply>yep, that's one possibility! and this can be expressed in WebIDL with things like extended attributes.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$DwvrKD2W7CZcitD6qXtQJxOAf0bDOgZkfBdgrgRblbw"}},"msgtype":"m.text"},"ts":1711754292728,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zT6Z9neAirIq4UsyDAosnQ5Siyx9nhyUBw_cai-tHHQ"},
{"content":{"body":"but first is figuring this out through concrete examples. Something can look scary in the abstract but then prove to be small/easy when you examine it concretely.","m.mentions":{},"msgtype":"m.text"},"ts":1711754322045,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TYSUeBvczQY0DMVmLRdwLBx8NYWqPw1q50mflfMFTcE"},
{"content":{"body":"or, \"obviously\" one way in the abstract, when under concrete inspection, it is clearly wrong","m.mentions":{},"msgtype":"m.text"},"ts":1711754346243,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c7EwX_8UeT8ShgFhkMsjBOYFcBvjjKfmXGSctOCQriI"}
]