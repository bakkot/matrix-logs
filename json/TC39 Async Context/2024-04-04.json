[
{"content":{"body":"> <@littledan:matrix.org> Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that\n\nA computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add teaching to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up from the effect when the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$h5sxPPo9UGxJLz3bWIki0-ZdYfyFW-tKI90Sgu00OOE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that</blockquote></mx-reply>A computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add teaching to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up from the effect when the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","m.relates_to":{"m.in_reply_to":{"event_id":"$h5sxPPo9UGxJLz3bWIki0-ZdYfyFW-tKI90Sgu00OOE"}},"msgtype":"m.text"},"ts":1712217372641,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$79mNZAWAldyB6LdxDBQDqgnF0SCSlWUn2kBFkxLO74I"},
{"content":{"body":"* A computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up from the effect when the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","m.new_content":{"body":"> <@littledan:matrix.org> Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that\n\nA computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up from the effect when the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$h5sxPPo9UGxJLz3bWIki0-ZdYfyFW-tKI90Sgu00OOE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a><br />Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that</blockquote></mx-reply>A computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up from the effect when the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","msgtype":"m.text"},"m.relates_to":{"event_id":"$79mNZAWAldyB6LdxDBQDqgnF0SCSlWUn2kBFkxLO74I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712217413809,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$GIVyKaT13yzWH6fRamYdYb725TwgZFMvBaaXf3I3vzE"},
{"content":{"body":"* A computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up in the effect where the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","m.new_content":{"body":"> <@littledan:matrix.org> Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that\n\nA computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up in the effect where the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$h5sxPPo9UGxJLz3bWIki0-ZdYfyFW-tKI90Sgu00OOE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a><br />Huh, could you elaborate on this? I thought computeds would store their registration context. If you want to traverse the dependency graph to determine causation, there is an introspection API for that</blockquote></mx-reply>A computed signal running in the registration context is problematic. Our UI framework registers the computed signals and effects at app initialization time - so the context would be disconnected from any user-initiated event. Then the event handlers typically set a signal and rely on the signal graph to propagate through to an effect. To add tracing to this, the plan is to start the trace in the event handler, storing it in an async var, and then pick it up in the effect where the UI is eventually updated to finish the trace as completed. If the computeds/effects run in the registration context then there is no way to propagate the trace through this graph (even explicitly, since there's no parameter that can be passed through it like an old-fashioned function-based approach would allow).","msgtype":"m.text"},"m.relates_to":{"event_id":"$79mNZAWAldyB6LdxDBQDqgnF0SCSlWUn2kBFkxLO74I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712217438641,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$PsQ921SzUTgzLGVwvQMrZWW0-LXnS1WDmmV5BYgKrjU"},
{"content":{"body":"Thanks for the context, Steve. This is really interesting. Would you be interested in joining the signals discord to discuss this further with others in the area? (Or if not, mind if I copy-paste this comment to trigger discussion there?)","msgtype":"m.text"},"ts":1712230828136,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$amwbqqdK3aXf0ILbDVG-14E35hz_di8ak-Ch7MtveN4"},
{"content":{"body":"If we wanted AsyncContext to be suitable for something like React Context, then registration time would be really helpful… so I want to think through all sides of this case to understand whether there is a unified answer.","msgtype":"m.text"},"ts":1712230889540,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$YiPYmpe86q24uZ1MpjzQ7qPe0c-q2Oq74vf-qHVSPJM"},
{"content":{"body":"Hey, we still haven't added the updates to AsyncContext to the agenda for next week","m.mentions":{},"msgtype":"m.text"},"ts":1712231105229,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$iZW0F4adM5zRBakDAFM5CjYDApp3KINZFyLJjc3xDsU"},
{"content":{"body":"should I open a PR?","m.mentions":{},"msgtype":"m.text"},"ts":1712231130425,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$qtj7Ugx0CgD_hCgcOrbbz6dGyNVJxYhUT4BgfiRFUo0"},
{"content":{"body":"how much time do we expect the updates to take?","m.mentions":{},"msgtype":"m.text"},"ts":1712237142811,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$qk2s3duwctrU8tZxjI4kyhnWV3itDs-uTUjZhQXm7OU"},
{"content":{"body":"Justin Ridgewell: ","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>:","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1712237332963,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YzMVKXBytp2YFtlZP1dftZpC-chiVL0pFl7pnonI_w0"},
{"content":{"body":"Yes please.","msgtype":"m.text"},"ts":1712244546687,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qzFPJ4JAyb_DB5Xs4DgWmLvEq8vk55KXrxIYuR8sNAY"},
{"content":{"body":"Maybe 15 min if we don’t discus calling context at all?","msgtype":"m.text"},"ts":1712244574572,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$06pNDsUPdC-Z3f-xglqzZwmbpnOe2rqg2cDTnJr7vEQ"},
{"content":{"body":"that sounds good","m.mentions":{},"msgtype":"m.text"},"ts":1712244769369,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cSMPMRMeXxlOaXMUB7sGiSHicLKk6RZeLNV1LBiOysg"},
{"content":{"body":"Justin Ridgewell: Since I'm opening the PR, I'll add constraints as well. You were unavailable on the 8th, right?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Since I'm opening the PR, I'll add constraints as well. You were unavailable on the 8th, right?","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"msgtype":"m.text"},"ts":1712244803376,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-WIKFgxCN03t_-naLRM9SMUypuJtmSLNORMyS3E96jE"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1712244815722,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GD_XZPYIxqOFa8PWPusqg2wIrkMS0fnuRlm1fV72YcA"},
{"content":{"body":"https://github.com/tc39/agendas/pull/1586","m.mentions":{},"msgtype":"m.text"},"ts":1712244885635,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eSROmq-XO4rPAEh-KN5QFCEvnNZTUrRtuqTZybFRuls"},
{"content":{"body":"whoops, I added it at the end with stage 0 proposals","m.mentions":{},"msgtype":"m.text"},"ts":1712244920424,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FSu2xGzPQnflqPH3ghDySzmKwB_aWUiFi2NMV2UCVbo"},
{"content":{"body":"fixed","m.mentions":{},"msgtype":"m.text"},"ts":1712244946952,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FAFAyNLb7g-hQ9Zlcu-SsACsyo50NXjiBerqkBaROyw"},
{"content":{"body":"> <@littledan:matrix.org> Thanks for the context, Steve. This is really interesting. Would you be interested in joining the signals discord to discuss this further with others in the area? (Or if not, mind if I copy-paste this comment to trigger discussion there?)\n\nSure, I'd be happy to join the discord, but also feel free to copy-paste the comment.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$amwbqqdK3aXf0ILbDVG-14E35hz_di8ak-Ch7MtveN4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Thanks for the context, Steve. This is really interesting. Would you be interested in joining the signals discord to discuss this further with others in the area? (Or if not, mind if I copy-paste this comment to trigger discussion there?)</blockquote></mx-reply>Sure, I'd be happy to join the discord, but also feel free to copy-paste the comment.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$amwbqqdK3aXf0ILbDVG-14E35hz_di8ak-Ch7MtveN4"}},"msgtype":"m.text"},"ts":1712244968776,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yxePFSPgPQfxfC2Vc05RwL3Y03-sgfhAEf7gJD0L3tA"}
]