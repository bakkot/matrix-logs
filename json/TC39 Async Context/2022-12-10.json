[
{"content":{"body":"Well it turns out Yoav found a word of memory that he could use in promise reactions that existed for other reasons. I haven’t learned details yet. It’s also possible that this doesn’t work for other engines though ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Well it turns out Yoav found a word of memory that he could use in promise reactions that existed for other reasons. I haven’t learned details yet. It’s also possible that this doesn’t work for other engines though"},"ts":1670630939665,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FJ-krUMDJFJXpNwX8eAgKaCNRLTVeDvA9dztNdFi_mY"},
{"content":{"msgtype":"m.text","body":"One piece of feedback: Yoav got the idea from the readme that this feature was mostly for APMs. We should encorporate the examples from the slide deck into the readme and talk them through."},"ts":1670630990187,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7_sTBWGLc5yhKsNIEsUAoUBm53oEB2FDp0eUly536x4"},
{"content":{"body":"Because, we have to work especially hard to explain to browsers why this is their problem. APMs are already sold on the importance of this space ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Because, we have to work especially hard to explain to browsers why this is their problem. APMs are already sold on the importance of this space"},"ts":1670631034834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LOW1wclDcmWy6CMHPaFA9u_cOctACf7E4ChUlzs9Wqw"},
{"content":{"org.matrix.msc1767.text":"one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.","body":"one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.","msgtype":"m.text"},"ts":1670631173062,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$LNW38dIQXvYk3T3ZyukAWxsLTVcJFSvSoQ9IeEjp0Qc"},
{"content":{"body":"> <@littledan:matrix.org> One piece of feedback: Yoav got the idea from the readme that this feature was mostly for APMs. We should encorporate the examples from the slide deck into the readme and talk them through.\n\nWhat is an APM?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%247_sTBWGLc5yhKsNIEsUAoUBm53oEB2FDp0eUly536x4\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>One piece of feedback: Yoav got the idea from the readme that this feature was mostly for APMs. We should encorporate the examples from the slide deck into the readme and talk them through.</blockquote></mx-reply>What is an APM?","m.relates_to":{"m.in_reply_to":{"event_id":"$7_sTBWGLc5yhKsNIEsUAoUBm53oEB2FDp0eUly536x4"}}},"ts":1670631202440,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RAgKrGb8SsTLyLXL7A7LHaanfLxFvWK5eb_6b_fYugY"},
{"content":{"org.matrix.msc1767.text":"APM = Application Performance Monitors (think datadog, new relic, etc)","body":"APM = Application Performance Monitors (think datadog, new relic, etc)","msgtype":"m.text"},"ts":1670631226307,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$j4Wn3nRNXLvBeTJFdvfFeZeU9eMMii8VHKSc1tOm7xU"},
{"content":{"body":"> <@jasnell:matrix.org> one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.\n\nYeah, the web needs this as well—this is what attracted Yoav to the area. I hope this can be modeled as the embedded simply creating an AsyncContext and using the three core operations. We should look into the use cases so we can verify that this works.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24LNW38dIQXvYk3T3ZyukAWxsLTVcJFSvSoQ9IeEjp0Qc\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.</blockquote></mx-reply>Yeah, the web needs this as well—this is what attracted Yoav to the area. I hope this can be modeled as the embedded simply creating an AsyncContext and using the three core operations. We should look into the use cases so we can verify that this works.","m.relates_to":{"m.in_reply_to":{"event_id":"$LNW38dIQXvYk3T3ZyukAWxsLTVcJFSvSoQ9IeEjp0Qc"}}},"ts":1670631276968,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aRgtEzGiWNhZNdZe4vln3Sh0xE0tSEIDHn8NYU4FygY"},
{"content":{"body":"> <@jasnell:matrix.org> APM = Application Performance Monitors (think datadog, new relic, etc)\n\nThings that hack into Node.JS to help you measure and optimize performance","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24j4Wn3nRNXLvBeTJFdvfFeZeU9eMMii8VHKSc1tOm7xU\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>APM = Application Performance Monitors (think datadog, new relic, etc)</blockquote></mx-reply>Things that hack into Node.JS to help you measure and optimize performance","m.relates_to":{"m.in_reply_to":{"event_id":"$j4Wn3nRNXLvBeTJFdvfFeZeU9eMMii8VHKSc1tOm7xU"}}},"ts":1670631304497,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GdbG0M4qkBxMRLl3UEO29hgkdd1rt72hrOpRGvYmS2s"},
{"content":{"body":"> <@jasnell:matrix.org> one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.\n\nI believe that is handled by the static `wrap` method?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24LNW38dIQXvYk3T3ZyukAWxsLTVcJFSvSoQ9IeEjp0Qc\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>one key thing here (simply because it's fresh on my mind) is that whatever mechanism is used to implement this in engines like v8, embedders need the ability to define their own async resources (timers, other objects, etc). There has to be some API, for instance, that we can use internally in node.js and workers, etc to set the current async resource independently of promises.</blockquote></mx-reply>I believe that is handled by the static <code>wrap</code> method?","m.relates_to":{"m.in_reply_to":{"event_id":"$LNW38dIQXvYk3T3ZyukAWxsLTVcJFSvSoQ9IeEjp0Qc"}}},"ts":1670631326392,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$d1nRbDs7falmCXoUZOlRP700ERybHRO-AZCGG5Pn4jc"},
{"content":{"msgtype":"m.text","body":"Hack in the nicest sense of the word! Maybe!"},"ts":1670631328486,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-BBWmQ-vt2LwkmWukZw9ZCATIvgUnYNZ_PiaspZIBOY"},
{"content":{"org.matrix.msc1767.text":"If it helps from a use case perspective, I've started the implementation of AsyncLocalStorage in workerd (cloudflare workers) https://github.com/cloudflare/workerd/pull/208","body":"If it helps from a use case perspective, I've started the implementation of AsyncLocalStorage in workerd (cloudflare workers) https://github.com/cloudflare/workerd/pull/208","msgtype":"m.text"},"ts":1670631334846,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$63Lg_jcg8_e6GHyqDgdlzM459Z4hFF0ErvL7LvR78b8"},
{"content":{"body":"> <@jasnell:matrix.org> If it helps from a use case perspective, I've started the implementation of AsyncLocalStorage in workerd (cloudflare workers) https://github.com/cloudflare/workerd/pull/208\n\nSo… how fast would we need to deliver AsyncContext in TC39 to take the pressure off of you to ship AsyncLocalStorage in workerd?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%2463Lg_jcg8_e6GHyqDgdlzM459Z4hFF0ErvL7LvR78b8\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>If it helps from a use case perspective, I've started the implementation of AsyncLocalStorage in workerd (cloudflare workers) https://github.com/cloudflare/workerd/pull/208</blockquote></mx-reply>So… how fast would we need to deliver AsyncContext in TC39 to take the pressure off of you to ship AsyncLocalStorage in workerd?","m.relates_to":{"m.in_reply_to":{"event_id":"$63Lg_jcg8_e6GHyqDgdlzM459Z4hFF0ErvL7LvR78b8"}}},"ts":1670631380713,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FyiNXEpVCbfedHeQctbR5ORfyDz3VHjClzv1D-x1dNE"},
{"content":{"org.matrix.msc1767.text":"provides a decent contrast to Node.js' implementation because (a) it's simpler (fewer async resources) and (b) there is no async_hooks api)","body":"provides a decent contrast to Node.js' implementation because (a) it's simpler (fewer async resources) and (b) there is no async_hooks api)","msgtype":"m.text"},"ts":1670631385657,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$LEU01uv9m1ZPzLVPeYapsv4-ymWiCgOHM8BJh7kSQ4E"},
{"content":{"org.matrix.msc1767.message":[{"body":"> how fast would we need to deliver AsyncContext in TC39\n\nWeeks?","mimetype":"text/plain"},{"body":"<blockquote>\n<p>how fast would we need to deliver AsyncContext in TC39</p>\n</blockquote>\n<p>Weeks?</p>\n","mimetype":"text/html"}],"body":"> how fast would we need to deliver AsyncContext in TC39\n\nWeeks?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>how fast would we need to deliver AsyncContext in TC39</p>\n</blockquote>\n<p>Weeks?</p>\n"},"ts":1670631405401,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$cZ3KlRwHAOPXj8SBEFZWVAS3EYye55LNl2JrAWiOJe4"},
{"content":{"org.matrix.msc1767.text":"We have customers who have been clamoring for this for a while now","body":"We have customers who have been clamoring for this for a while now","msgtype":"m.text"},"ts":1670631416158,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$ZYYXyXyBilWswFTQo3YEoXbGXx-vp9NBL8w0OdI93-s"},
{"content":{"msgtype":"m.text","body":"Hehe Ok"},"ts":1670631422021,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8xtd6Ql4uV4KTedvUxw0ffkrgLaxyvInSATOJ99RF74"},
{"content":{"body":"Anyway AsyncContext will be a point of longer term compatibility ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Anyway AsyncContext will be a point of longer term compatibility"},"ts":1670631450817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-c8pi9sKlP3oEQ-svI-BblaKx-s8t-ZYYVFumUkoDcg"},
{"content":{"org.matrix.msc1767.message":[{"body":"we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update `AsyncLocalStorage` to be a thin shim layer on top of whatever v8 gives us later","mimetype":"text/plain"},{"body":"we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update <code>AsyncLocalStorage</code> to be a thin shim layer on top of whatever v8 gives us later","mimetype":"text/html"}],"body":"we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update `AsyncLocalStorage` to be a thin shim layer on top of whatever v8 gives us later","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update <code>AsyncLocalStorage</code> to be a thin shim layer on top of whatever v8 gives us later"},"ts":1670631476562,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$USqev9jva_9foZ9n36QzDjItnsHbcct9KbFLx6QITig"},
{"content":{"body":"> <@jasnell:matrix.org> we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update `AsyncLocalStorage` to be a thin shim layer on top of whatever v8 gives us later\n\nWhether this is the case depends on the exact subset you are using... will review ","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24USqev9jva_9foZ9n36QzDjItnsHbcct9KbFLx6QITig\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>we absolutely have to make sure, however, that whatever is produced by TC-39 here is compatible. Our intent would be to update <code>AsyncLocalStorage</code> to be a thin shim layer on top of whatever v8 gives us later</blockquote></mx-reply>Whether this is the case depends on the exact subset you are using... will review","m.relates_to":{"m.in_reply_to":{"event_id":"$USqev9jva_9foZ9n36QzDjItnsHbcct9KbFLx6QITig"}}},"ts":1670631536524,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$m_zWNu2qJ14Ij2U1GPUSUkf3hOZQ-kfn7mxV3CG7Sqg"},
{"content":{"org.matrix.msc1767.text":"For ALS -> run(), exit() and getStore()","body":"For ALS -> run(), exit() and getStore()","msgtype":"m.text"},"ts":1670631558608,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$kVoK8DOv2JADyojE1B05gDBqfSnhG7XrQEY3BQqn87U"},
{"content":{"org.matrix.msc1767.text":"we are not implementing enterWith() or disable()","body":"we are not implementing enterWith() or disable()","msgtype":"m.text"},"ts":1670631566396,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DIR9GPvvQeaoUp2Cp3X8frJunMdw_ZnHWPP6RhL-YUk"},
{"content":{"msgtype":"m.text","body":"Why do you need the exit method?"},"ts":1670631586012,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fl10nYBtF4ECzk-DvgxTkdw7Rah1UnKA25-jkZgUcLM"},
{"content":{"org.matrix.msc1767.message":[{"body":"We are implementing `AsyncResource` also without the async_hooks api details","mimetype":"text/plain"},{"body":"We are implementing <code>AsyncResource</code> also without the async_hooks api details","mimetype":"text/html"}],"body":"We are implementing `AsyncResource` also without the async_hooks api details","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"We are implementing <code>AsyncResource</code> also without the async_hooks api details"},"ts":1670631589024,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$7JZTx-U1Ye3SRghII-21jNtKiO80xHI6QXz_LUX9ijM"},
{"content":{"org.matrix.msc1767.message":[{"body":"Our implementation of `exit()` is really `run()` and passing `undefined`","mimetype":"text/plain"},{"body":"Our implementation of <code>exit()</code> is really <code>run()</code> and passing <code>undefined</code>","mimetype":"text/html"}],"body":"Our implementation of `exit()` is really `run()` and passing `undefined`","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"Our implementation of <code>exit()</code> is really <code>run()</code> and passing <code>undefined</code>"},"ts":1670631611526,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$TT6PBqdmk8zNzXMC2Ci6F2qq5XJBT8Wsqs3AuYL9PEo"},
{"content":{"msgtype":"m.text","body":"That’s the only thing that doesn’t have a direct parallel."},"ts":1670631613765,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qUFb9_FsfCTMB-tM7Dj11DsuCFlN3i87L4yPymsHni0"},
{"content":{"msgtype":"m.text","body":"Ah, ok"},"ts":1670631638722,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ZPaw7X2AXx25aGauffaWMxAOaUA_A5JhBVkNmv2s8Pg"},
{"content":{"msgtype":"m.text","body":"So you don’t have a facility for queuing in libraries, just in the runtime?"},"ts":1670631649532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hq2IKX7jDLejbgac2aYuPtyUQ5j_L2D9co0SHl_SWWw"},
{"content":{"org.matrix.msc1767.text":"not currently but that could change","body":"not currently but that could change","msgtype":"m.text"},"ts":1670631672228,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$mtprLb6-5gam706zQI0ycK1vLZeq8kIpL1AyBk3RSY0"},
{"content":{"org.matrix.msc1767.text":"we just don't need that at the moment","body":"we just don't need that at the moment","msgtype":"m.text"},"ts":1670631678854,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$nQYFd3ppxVt_CP0y0Uio7Cyls-RZYxNBuDocZWD_zxM"},
{"content":{"org.matrix.msc1767.message":[{"body":"we will expose the `AsyncResource` object to allow user code to create their own contexts","mimetype":"text/plain"},{"body":"we will expose the <code>AsyncResource</code> object to allow user code to create their own contexts","mimetype":"text/html"}],"body":"we will expose the `AsyncResource` object to allow user code to create their own contexts","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"we will expose the <code>AsyncResource</code> object to allow user code to create their own contexts"},"ts":1670631741858,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$K1yKUrA7XEaFyVrMiNdlA2tR7pZs-0_gLjHEO-6rqTM"},
{"content":{"org.matrix.msc1767.text":"but that's about it","body":"but that's about it","msgtype":"m.text"},"ts":1670631750575,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$YEJJdRDqBM8ugs2SZIAlkx856Qb0-Ph8GCkvAGWGwoE"},
{"content":{"msgtype":"m.text","body":"OK, sounds like that is the equivalent of wrap"},"ts":1670631832206,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1TW0QDz_2H-RanKIcOeK-FHjEtLQQpyvTty-t2rgcQ8"},
{"content":{"org.matrix.msc1767.text":"exactly","body":"exactly","msgtype":"m.text"},"ts":1670631841182,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$jJdII5IrQF6n6DPj7qd6pAQFuXBb0wr72zkrbMto1rk"},
{"content":{"body":"And the expressiveness is identical overall ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"And the expressiveness is identical overall"},"ts":1670631843616,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yrcED79BRGg2yykccj1hFB3MQY-YKTFr9ofkOLRkghk"},
{"content":{"msgtype":"m.text","body":"OK perfect"},"ts":1670631852341,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tMxGmBz3ZtECdgu_5gGsdtX9DRjfbirwZk1_5gcTKck"},
{"content":{"org.matrix.msc1767.message":[{"body":"It's to support stuff like stuff like `addEventListener('foo', asyncResource.bind(()=> { /* executes in asyncResource's context */  });`","mimetype":"text/plain"},{"body":"It's to support stuff like stuff like <code>addEventListener('foo', asyncResource.bind(()=&gt; { /* executes in asyncResource's context */  });</code>","mimetype":"text/html"}],"body":"It's to support stuff like stuff like `addEventListener('foo', asyncResource.bind(()=> { /* executes in asyncResource's context */  });`","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"It's to support stuff like stuff like <code>addEventListener('foo', asyncResource.bind(()=&gt; { /* executes in asyncResource's context */  });</code>"},"ts":1670631890830,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$HVxFH1HxcCrPvsNugFkyasV976Dt08pc7Gimq8CrB6o"},
{"content":{"msgtype":"m.text","body":"I think there are a couple of a APIs on asyncresource that might not be compatible, but if you do another minimal API, it should be fine"},"ts":1670631906123,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$k_oJYKzjkv4At1TeGkxpMkndyMk8ZfXP_n0hX_PZ140"},
{"content":{"msgtype":"m.text","body":"IMO this is an interesting story to motivate the project that warrants sharing with others sometimes—at least with other server JS environments so they don’t overstep in ALS compat! But also to justify the whole project."},"ts":1670631938091,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CHVAIBIHPq0h3X3ACWdGd3h9uXcFroAgsPb1HbhGcuA"},
{"content":{"org.matrix.msc1767.message":[{"body":"For `AsyncResource` we are only implementing `bind()` (static and member), `runInAsyncScope()`, `asyncId()` and `triggerAsyncId()`","mimetype":"text/plain"},{"body":"For <code>AsyncResource</code> we are only implementing <code>bind()</code> (static and member), <code>runInAsyncScope()</code>, <code>asyncId()</code> and <code>triggerAsyncId()</code>","mimetype":"text/html"}],"body":"For `AsyncResource` we are only implementing `bind()` (static and member), `runInAsyncScope()`, `asyncId()` and `triggerAsyncId()`","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"For <code>AsyncResource</code> we are only implementing <code>bind()</code> (static and member), <code>runInAsyncScope()</code>, <code>asyncId()</code> and <code>triggerAsyncId()</code>"},"ts":1670631963429,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$MZUgS14-12Xm2fiqhofRFEJ4jLycUT6kIb5V-Gd86M4"},
{"content":{"msgtype":"m.text","body":"Is AsyncResource just about restoring a particular AsyncContext or does it do all of them?"},"ts":1670632038397,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gr-qjWRGJQlzpqBQWKFehKwPIN27LXXAurE0pncyJmM"},
{"content":{"msgtype":"m.text","body":"I’m not familiar with the IDs, but the rest should be fine"},"ts":1670632040407,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HORzAICJKd7BXyJ8HMmw519EQ_S2NREh27qXFCHc2Yo"},
{"content":{"msgtype":"m.text","body":"I guess the id stuff is a small layer on top"},"ts":1670632104296,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9XDg_DNs6qdOzphK1gqcM6Aweg4bNtxPEyhagfw11B4"},
{"content":{"org.matrix.msc1767.message":[{"body":"It's really about providing a root for a context... for instance, if I did\n\n```\nconst als = new AsyncLocalStorage();\nconst fn = als.run(123, () => AsyncResource.bind(() => console.log(als.getStore()));\neventTarget.addEventListener('foo', fn);\neventTarget.addEventListener('foo', () => console.log(als.getStore());\n```\n\nThe first listener prints 123, the second undefined","mimetype":"text/plain"},{"body":"<p>It's really about providing a root for a context... for instance, if I did</p>\n<pre><code>const als = new AsyncLocalStorage();\nconst fn = als.run(123, () =&gt; AsyncResource.bind(() =&gt; console.log(als.getStore()));\neventTarget.addEventListener('foo', fn);\neventTarget.addEventListener('foo', () =&gt; console.log(als.getStore());\n</code></pre>\n<p>The first listener prints 123, the second undefined</p>\n","mimetype":"text/html"}],"body":"It's really about providing a root for a context... for instance, if I did\n\n```\nconst als = new AsyncLocalStorage();\nconst fn = als.run(123, () => AsyncResource.bind(() => console.log(als.getStore()));\neventTarget.addEventListener('foo', fn);\neventTarget.addEventListener('foo', () => console.log(als.getStore());\n```\n\nThe first listener prints 123, the second undefined","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<p>It's really about providing a root for a context... for instance, if I did</p>\n<pre><code>const als = new AsyncLocalStorage();\nconst fn = als.run(123, () =&gt; AsyncResource.bind(() =&gt; console.log(als.getStore()));\neventTarget.addEventListener('foo', fn);\neventTarget.addEventListener('foo', () =&gt; console.log(als.getStore());\n</code></pre>\n<p>The first listener prints 123, the second undefined</p>\n"},"ts":1670632206734,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$WDfONDYbTJPlMbiflY1w6ca1lNahWI5kCaQ2LUhEBlE"},
{"content":{"org.matrix.msc1767.text":"The id stuff is just part of Node.ks","body":"The id stuff is just part of Node.ks","msgtype":"m.text"},"ts":1670632217134,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$NYPcwH85FLWZIJ_bcSI0Q2eg8vHbRtA_E-tTvf_xPaE"},
{"content":{"org.matrix.msc1767.text":"it doesn't yet give us any other way of identifying the parent explicitly when creating a new AsyncResource","body":"it doesn't yet give us any other way of identifying the parent explicitly when creating a new AsyncResource","msgtype":"m.text"},"ts":1670632238887,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$j0s2vHSrkv7YqyO-o86Ugky7qmPA-CPZJ1jiHKyGLNc"}
]