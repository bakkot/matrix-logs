[
{"content":{"body":"> <@stephenhicks:matrix.org> I think that's tricky due to races - for example, the exact ordering of a promise resolving vs. the promise.then call would make one or the other context more recent.  But I think we probably want to run in the same context (resolution vs registration) regardless of the order.\n\nHuh, what do you mean? I wasn’t imagining this kind of case, I was imagining that a particular cause would lead to a particular snapshot context being restored. Could you give an example of the race you are concerned about?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24GOsiQHXLOAVuxVSk3L2-nYT14Mp5wXYOZMMzh2wk8PQ\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I think that's tricky due to races - for example, the exact ordering of a promise resolving vs. the promise.then call would make one or the other context more recent.  But I think we probably want to run in the same context (resolution vs registration) regardless of the order.</blockquote></mx-reply>Huh, what do you mean? I wasn’t imagining this kind of case, I was imagining that a particular cause would lead to a particular snapshot context being restored. Could you give an example of the race you are concerned about?","m.relates_to":{"m.in_reply_to":{"event_id":"$GOsiQHXLOAVuxVSk3L2-nYT14Mp5wXYOZMMzh2wk8PQ"}},"msgtype":"m.text"},"ts":1717043517813,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$M2REgtWkpUK4pvR6wYY6tth4DMPUZsIDj4C_eIrUZBU"},
{"content":{"body":"it's a little pedantic, but if you have something like\n```\nconst p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get()));\n```\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.","format":"org.matrix.custom.html","formatted_body":"<p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get()));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1717086945578,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$CkT2s6YEGT3MY51f3I__hgbJ5-OILdaLMbjvoH1TaRo"},
{"content":{"body":" * it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.","format":"org.matrix.custom.html","formatted_body":" * <p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.</p>\n","m.mentions":{},"m.new_content":{"body":"it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.","format":"org.matrix.custom.html","formatted_body":"<p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CkT2s6YEGT3MY51f3I__hgbJ5-OILdaLMbjvoH1TaRo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717086956630,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$wAgiJ9aHDasyazMXcLwRwxsVD1HGgP13fx997jh7Ojw"},
{"content":{"body":" * it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.","format":"org.matrix.custom.html","formatted_body":" * <p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.</p>\n","m.mentions":{},"m.new_content":{"body":"it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.","format":"org.matrix.custom.html","formatted_body":"<p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CkT2s6YEGT3MY51f3I__hgbJ5-OILdaLMbjvoH1TaRo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717086966919,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$wmxKtdVykiQQPyie0QRbRjDHS0GZHvV-eH6-8q-xwUk"},
{"content":{"body":" * it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.  Without the `await`, it would be 1.","format":"org.matrix.custom.html","formatted_body":" * <p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.  Without the <code>await</code>, it would be 1.</p>\n","m.mentions":{},"m.new_content":{"body":"it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.  Without the `await`, it would be 1.","format":"org.matrix.custom.html","formatted_body":"<p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  What I'm saying is that it's not clear that \"specific\" or \"recent\" is quite the right specification.  Without the <code>await</code>, it would be 1.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CkT2s6YEGT3MY51f3I__hgbJ5-OILdaLMbjvoH1TaRo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717087011386,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kDOl4EGTUIRrTKXl02Q4VMQwIFWbiQsUsoTqXWCxzwg"},
{"content":{"body":" * it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  Without the `await`, it would be 1.","format":"org.matrix.custom.html","formatted_body":" * <p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  Without the <code>await</code>, it would be 1.</p>\n","m.mentions":{},"m.new_content":{"body":"it's a little pedantic, but if you have something like\n\n```\nconst p = v.run(1, () => Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() => console.log(v.get())));\n```\n\nThen \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  Without the `await`, it would be 1.","format":"org.matrix.custom.html","formatted_body":"<p>it's a little pedantic, but if you have something like</p>\n<pre><code>const p = v.run(1, () =&gt; Promise.resolve());\nawait p;\n// p is now fully resolved\nv.run(2, p.then(() =&gt; console.log(v.get())));\n</code></pre>\n<p>Then \"the most specific (i.e. causally recent) relevant context\" would presumably be the 2, since the callback was registered after the promise resolved.  Without the <code>await</code>, it would be 1.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CkT2s6YEGT3MY51f3I__hgbJ5-OILdaLMbjvoH1TaRo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717087025837,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$fkVy0L33PRw95wO4vD8BOO3hTArxA0BR_vRx9Un1vAI"},
{"content":{"body":"this smells like zalgo -- it depends on how the handlers are called","m.mentions":{},"msgtype":"m.text"},"ts":1717087333556,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$ICzCH8_Yb0v_SKtMK2YeEolZXXY_b-nityErd6BklTQ"},
{"content":{"body":"@stephenbelanger:matrix.org pointed out that if we were to have an flows-through `ExecutionVariable` and implement scoped `using` mutations, we’d have a problem with propogating the execution state through the resolve\n```js\nasync function foo() {\n  using _ = v.scope(1);\n  return 2;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/%40stephenbelanger%3Amatrix.org\">@Stephen Belanger</a> pointed out that if we were to have an flows-through <code data-md=\"`\">ExecutionVariable</code> and implement scoped <code data-md=\"`\">using</code> mutations, we’d have a problem with propogating the execution state through the resolve<br/><pre data-md=\"```\"><code class=\"language-js\">async function foo() {\n  using _ = v.scope(1);\n  return 2;\n}\n</code></pre>","msgtype":"m.text"},"ts":1717091384088,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WnWbe1NG6H9T9QQcUq34CTUfFNYZbHi97BNzf1NrzS4"},
{"content":{"body":"Because the scoped mutation is disposed in the `StatementList` evaluation of the function, and the outer promise is resolved in the `AsyncFunctionBody` execution _after_ `StatementList` is evaluated","format":"org.matrix.custom.html","formatted_body":"Because the scoped mutation is disposed in the <code data-md=\"`\">StatementList</code> evaluation of the function, and the outer promise is resolved in the <code data-md=\"`\">AsyncFunctionBody</code> execution <i data-md=\"_\">after</i> <code data-md=\"`\">StatementList</code> is evaluated","msgtype":"m.text"},"ts":1717091426743,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_j7R1PpyNul9j3dNRybeUGWr4Kjli-DJzJiHXpVL0vI"},
{"content":{"body":"* Because the scoped mutation is disposed in the `FunctionStatementList` evaluation of the function, and the outer promise is resolved in the `AsyncFunctionBody` execution _after_ `StatementList` is evaluated","format":"org.matrix.custom.html","formatted_body":"Because the scoped mutation is disposed in the <code data-md=\"`\">FunctionStatementList</code> evaluation of the function, and the outer promise is resolved in the <code data-md=\"`\">AsyncFunctionBody</code> execution <i data-md=\"_\">after</i> <code data-md=\"`\">StatementList</code> is evaluated","m.new_content":{"body":"Because the scoped mutation is disposed in the `FunctionStatementList` evaluation of the function, and the outer promise is resolved in the `AsyncFunctionBody` execution _after_ `StatementList` is evaluated","format":"org.matrix.custom.html","formatted_body":"Because the scoped mutation is disposed in the <code data-md=\"`\">FunctionStatementList</code> evaluation of the function, and the outer promise is resolved in the <code data-md=\"`\">AsyncFunctionBody</code> execution <i data-md=\"_\">after</i> <code data-md=\"`\">StatementList</code> is evaluated","msgtype":"m.text"},"m.relates_to":{"event_id":"$_j7R1PpyNul9j3dNRybeUGWr4Kjli-DJzJiHXpVL0vI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717091459310,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RLzOFhCgI9v1odjVNSiDmXRbMEEpzT4qyH4CcBHP3ww"},
{"content":{"body":"Then there’s weird interactions with how you’re supposed to resolve the promise, and what if the disposals caused an exeception","msgtype":"m.text"},"ts":1717091511250,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uyDAH83bMcSkOMOrLKRpboIPvpW3y4x2lvAsxelGe9A"},
{"content":{"body":"> <@legendecas:matrix.org> this smells like zalgo -- it depends on how the handlers are called\n\nRight, that's why I'm saying that \"using the most specific (i.e. causally recent) relevant context\" is probably a bad specification.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ICzCH8_Yb0v_SKtMK2YeEolZXXY_b-nityErd6BklTQ?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>this smells like zalgo -- it depends on how the handlers are called</blockquote></mx-reply>Right, that's why I'm saying that \"using the most specific (i.e. causally recent) relevant context\" is probably a bad specification.","m.mentions":{"user_ids":["@legendecas:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ICzCH8_Yb0v_SKtMK2YeEolZXXY_b-nityErd6BklTQ"}},"msgtype":"m.text"},"ts":1717091531859,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$5PDSExaB8Mu7oZ4v7LauoMmWYHXf9nKOcn4pHA0YaGY"},
{"content":{"body":"> <@jridgewell:matrix.org> Because the scoped mutation is disposed in the `FunctionStatementList` evaluation of the function, and the outer promise is resolved in the `AsyncFunctionBody` execution _after_ `StatementList` is evaluated\n\nI asked Tuesday whether scoping mutations would somehow prevent escaping the value and he suggested that there's still ways to extract the data.  But I never got a good sense of what those ways were.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_j7R1PpyNul9j3dNRybeUGWr4Kjli-DJzJiHXpVL0vI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Because the scoped mutation is disposed in the <code data-md=\"`\">FunctionStatementList</code> evaluation of the function, and the outer promise is resolved in the <code data-md=\"`\">AsyncFunctionBody</code> execution <i data-md=\"_\">after</i> <code data-md=\"`\">StatementList</code> is evaluated</blockquote></mx-reply>I asked Tuesday whether scoping mutations would somehow prevent escaping the value and he suggested that there's still ways to extract the data.  But I never got a good sense of what those ways were.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_j7R1PpyNul9j3dNRybeUGWr4Kjli-DJzJiHXpVL0vI"}},"msgtype":"m.text"},"ts":1717091703309,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$m8NFHEYG6IU7igZ843xz3G9ed3dHKrbYZ7bKvGAv9RE"},
{"content":{"body":"We’d have to redefine the `using` methods to perform `DisposeResources` in each of the `*FunctionBody` node types","format":"org.matrix.custom.html","formatted_body":"We’d have to redefine the <code data-md=\"`\">using</code> methods to perform <code data-md=\"`\">DisposeResources</code> in each of the <code data-md=\"`\">*FunctionBody</code> node types","msgtype":"m.text"},"ts":1717091871287,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$OkmpgtTQ3mmNeMHMXudrbvNWgVTVnEAKhqvMicKbj3E"},
{"content":{"body":"Instead of using the `FunctionStatementList` node","format":"org.matrix.custom.html","formatted_body":"Instead of using the <code data-md=\"`\">FunctionStatementList</code> node","msgtype":"m.text"},"ts":1717091885789,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nZnb68BofQl52q0uJ5BRElxyI7-0uo_PhIGP_Zl4PQ0"},
{"content":{"body":"That way we’d dispose the variables after resolving","msgtype":"m.text"},"ts":1717091900311,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PXC3Lqt6UgtDnoH6HosDx09llRCMZL1cDCKDUgsHsF0"}
]