[
{"content":{"body":"shaylew: Hey do you have any sort of sketch about your \"delimited continuation\" ideas around AsyncContext?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shaylew:matrix.org\">shaylew</a>: Hey do you have any sort of sketch about your \"delimited continuation\" ideas around AsyncContext?","m.mentions":{"user_ids":["@shaylew:matrix.org"]},"msgtype":"m.text"},"ts":1714496347462,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9BMLevSuIfLynpV1V57hSRtK9nN5IRH2UPWjSYyu8eM"},
{"content":{"body":"haven't gotten to write it down, but the very quick sketch is\n- following the \"Delimited Dynamic Binding\" paper for combining delimited continuations (which give a natural semantics to async/await and generators among other things) with dynamically bound variables https://okmij.org/ftp/Computation/dynamic-binding.html#DDBinding\n- in this light the main missing primitives in the current proposal seems to be \"capture a snapshot _up to a particular marker_ without going all the way to the top scope\" and \"restore a partial snapshot _on top of the current stack_ without replacing it\"\n- Oleg gives an extension for looking back at \"shadowed\" values of a variable that amounts to `variable.withOuterContext(fn)` which runs `fn` in a prefix of the current scope up to just before the innermost binding of the variable. this is strictly more powerful than just being able to read the next-outer value of the variable ","msgtype":"m.text"},"ts":1714497189683,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$uq7GXkWxLTockZtviLbPYCeVG8NNk1Ihi0wu8_UPDCI"},
{"content":{"body":"I want to come up with concrete motivating examples for the distinctions here, because the answers to \"why do you want this and what trouble do you get into if you try to fake it\" are kind of subtle","msgtype":"m.text"},"ts":1714497326989,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$AYSttE2GxQ6H53BowqDn8svNH4MJQCa-hMA4oTSohXw"},
{"content":{"body":"(\"implicit functions\" from https://www.microsoft.com/en-us/research/publication/programming-with-implicit-values-functions-and-control-or-implicit-functions-dynamic-binding-with-lexical-scoping/ are one of the test cases for whether you've got things sufficiently expressive so I was thinking of trying to borrow some of their examples)","msgtype":"m.text"},"ts":1714497528906,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$LOCrRJBR8jnfX-Ae3ITW1IY4oEbmKo7PlcE5wzJXXa0"},
{"content":{"body":"the other line of inquiry is to figure out if this \"capture stack segments rather than complete stacks\" paradigm gets things right for the thorny real world APM situations, where it sounds like there's currently a bit of a quagmire of \"oh, I want to exempt or include these specific variables from being captured/restored, but how do I know which of other people's variables should be in which category\". I have less direct intuition for those situations","msgtype":"m.text"},"ts":1714497791485,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$G7i1aiXm5f9G6kCCuC2aZ3J6-vX5E3qVWyR_TzxvN7A"},
{"content":{"body":"> in this light the main missing primitives in the current proposal seems to be \"capture a snapshot _up to a particular marker_ without going all the way to the top scope\" and \"restore a partial snapshot _on top of the current stack_ without replacing it\"\n\nIt sounds like the `Variable.wrap(fn)` [propposal](https://github.com/tc39/proposal-async-context/issues/25) to catpure the current value of a variable and restore that later, possibly with the ability to snapshot multiple variables at once `Snapshot.wrap(fn, var1, var2, var3)`\n\n> Oleg gives an extension for looking back at \"shadowed\" values of a variable that amounts to `variable.withOuterContext(fn)` which runs `fn` in a prefix of the current scope up to just before the innermost binding of the variable. this is strictly more powerful than just being able to read the next-outer value of the variable \n\nThis seems like the `callingContext()` [propopsal](https://github.com/tc39/proposal-async-context/pull/77), which we need to discuss further. Figuring out what use cases need call-time or registration-time context is difficult, and there’s also the possibility of merge-points in `Promsie.all(…)` that we discussed today.","format":"org.matrix.custom.html","formatted_body":"<blockquote data-md=\">\">in this light the main missing primitives in the current proposal seems to be &quot;capture a snapshot <i data-md=\"_\">up to a particular marker</i> without going all the way to the top scope&quot; and &quot;restore a partial snapshot <i data-md=\"_\">on top of the current stack</i> without replacing it&quot;<br/></blockquote><br/>It sounds like the <code data-md=\"`\">Variable.wrap(fn)</code> <a data-md href=\"https://github.com/tc39/proposal-async-context/issues/25\">propposal</a> to catpure the current value of a variable and restore that later, possibly with the ability to snapshot multiple variables at once <code data-md=\"`\">Snapshot.wrap(fn, var1, var2, var3)</code><br/><br/><blockquote data-md=\">\">Oleg gives an extension for looking back at &quot;shadowed&quot; values of a variable that amounts to <code data-md=\"`\">variable.withOuterContext(fn)</code> which runs <code data-md=\"`\">fn</code> in a prefix of the current scope up to just before the innermost binding of the variable. this is strictly more powerful than just being able to read the next-outer value of the variable <br/></blockquote><br/>This seems like the <code data-md=\"`\">callingContext()</code> <a data-md href=\"https://github.com/tc39/proposal-async-context/pull/77\">propopsal</a>, which we need to discuss further. Figuring out what use cases need call-time or registration-time context is difficult, and there’s also the possibility of merge-points in <code data-md=\"`\">Promsie.all(…)</code> that we discussed today.","msgtype":"m.text"},"ts":1714517151272,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$etwT6SaEeaQkat-U6bSwSN36UR5eigshV5EcT54TZYo"}
]