[
{"content":{"body":"shaylew: Hey do you have any sort of sketch about your \"delimited continuation\" ideas around AsyncContext?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@shaylew:matrix.org\">shaylew</a>: Hey do you have any sort of sketch about your \"delimited continuation\" ideas around AsyncContext?","m.mentions":{"user_ids":["@shaylew:matrix.org"]},"msgtype":"m.text"},"ts":1714496347462,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9BMLevSuIfLynpV1V57hSRtK9nN5IRH2UPWjSYyu8eM"},
{"content":{"body":"haven't gotten to write it down, but the very quick sketch is\n- following the \"Delimited Dynamic Binding\" paper for combining delimited continuations (which give a natural semantics to async/await and generators among other things) with dynamically bound variables https://okmij.org/ftp/Computation/dynamic-binding.html#DDBinding\n- in this light the main missing primitives in the current proposal seems to be \"capture a snapshot _up to a particular marker_ without going all the way to the top scope\" and \"restore a partial snapshot _on top of the current stack_ without replacing it\"\n- Oleg gives an extension for looking back at \"shadowed\" values of a variable that amounts to `variable.withOuterContext(fn)` which runs `fn` in a prefix of the current scope up to just before the innermost binding of the variable. this is strictly more powerful than just being able to read the next-outer value of the variable ","msgtype":"m.text"},"ts":1714497189683,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$uq7GXkWxLTockZtviLbPYCeVG8NNk1Ihi0wu8_UPDCI"},
{"content":{"body":"I want to come up with concrete motivating examples for the distinctions here, because the answers to \"why do you want this and what trouble do you get into if you try to fake it\" are kind of subtle","msgtype":"m.text"},"ts":1714497326989,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$AYSttE2GxQ6H53BowqDn8svNH4MJQCa-hMA4oTSohXw"},
{"content":{"body":"(\"implicit functions\" from https://www.microsoft.com/en-us/research/publication/programming-with-implicit-values-functions-and-control-or-implicit-functions-dynamic-binding-with-lexical-scoping/ are one of the test cases for whether you've got things sufficiently expressive so I was thinking of trying to borrow some of their examples)","msgtype":"m.text"},"ts":1714497528906,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$LOCrRJBR8jnfX-Ae3ITW1IY4oEbmKo7PlcE5wzJXXa0"}
]