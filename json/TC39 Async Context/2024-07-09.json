[
{"content":{"body":"> <@jridgewell:matrix.org> Component functiosn aren’t executed recusively, they’re pushed into a stack to be processed later on. When you return the `<Ctx.Provider value=…><Foo /></Ctx.Provider>` VDOM, that `Foo` component won’t be executed within the sync execution of `Ctx.Provider`. If `Foo` were to `useContext(Ctx)`, that would be tracked as part of the component’s internal state (which itself is stored in a AC), it woulnd’t store the context on its own AC variable.\n\nI don’t get it; isn’t this what AsyncContext.Snapshot is for?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24o1WzWmZCArZwFp__2F_5CJZbf1ZPjiVOBMF-4ZUkpbM\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Component functiosn aren’t executed recusively, they’re pushed into a stack to be processed later on. When you return the <code data-md=\"`\">&lt;Ctx.Provider value=…&gt;&lt;Foo /&gt;&lt;/Ctx.Provider&gt;</code> VDOM, that <code data-md=\"`\">Foo</code> component won’t be executed within the sync execution of <code data-md=\"`\">Ctx.Provider</code>. If <code data-md=\"`\">Foo</code> were to <code data-md=\"`\">useContext(Ctx)</code>, that would be tracked as part of the component’s internal state (which itself is stored in a AC), it woulnd’t store the context on its own AC variable.</blockquote></mx-reply>I don’t get it; isn’t this what AsyncContext.Snapshot is for?","m.relates_to":{"m.in_reply_to":{"event_id":"$o1WzWmZCArZwFp__2F_5CJZbf1ZPjiVOBMF-4ZUkpbM"}},"msgtype":"m.text"},"ts":1720509676417,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bIZZzqlxwDWESpvur9qv8VrUNWjLyMx2rB0yHb-ndQ4"},
{"content":{"body":"I thought, in the server, an AsyncContext variable for the hooks state","msgtype":"m.text"},"ts":1720509734315,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hND1AJoLiGcgq9IgIiZD8NqafLQUIgVVf8BkCzz-9F0"},
{"content":{"body":"In general, I think conceptually, React Context is doing the same thing as AsyncContext. It just depends on the framework saving and restoring snapshots all over the place ","format":"org.matrix.custom.html","formatted_body":"In general, I think conceptually, React Context is doing the same thing as AsyncContext. It just depends on the framework saving and restoring snapshots all over the place","msgtype":"m.text"},"ts":1720510077138,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TvlHzqiGiag5bQe9XxNNP4jytOR6M6n4u8w6DXqxsC8"},
{"content":{"body":"This is an important question because if we wanted to use AsyncContext variables for other things, like having an ambient AbortSignal, we would be depending on frameworks doing this snapshotting. Otherwise it wouldn’t work.","msgtype":"m.text"},"ts":1720510234410,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4lJfVmkISVxC6_u_J7kuakkmi1Scbfj2ZPSKPgp61vw"},
{"content":{"body":"right, this is basically \"the ecosystem adoption problem\".","m.mentions":{},"msgtype":"m.text"},"ts":1720540853115,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$v0I8Z4pqqdYFeP5lF4TSDU4SkFqEHzvUamkyWdYkLb4"},
{"content":{"body":"We are on the call now","m.mentions":{},"msgtype":"m.text"},"ts":1720541014894,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$MAO95GqnUOthtk_3qqM008zhcuYbw7iz5CT-69ej1rg"},
{"content":{"body":"How did the call go? I am having some trouble understanding the strength of the requirement that Matteo and Stephen were talking about in the notes","msgtype":"m.text"},"ts":1720545791769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p4DMzTDOTa5kKww6UP7qq8-3wR0Ukawg7xeRqTbedHE"},
{"content":{"body":"I couldn’t really understand why taking a callback as a parameter wouldn’t work for those cases","msgtype":"m.text"},"ts":1720545824968,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MtFDWiCD8nCXnsQTjXlDLP0r06H9w_WJaAnqP8mzNLk"},
{"content":{"body":"Sorry I missed it","msgtype":"m.text"},"ts":1720545830541,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d78ygk7PfeA4tCgQNUqfYwDHYKvL4YT6OhA77TzKOpQ"},
{"content":{"body":"it's not that it wouldn't work, but that it wouldn't be idiomatic, or it'd take a lot more boilerplate than the alternative","m.mentions":{},"msgtype":"m.text"},"ts":1720545912349,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$0-jybcdwgR__O_CvsVz_yC2BJrOcjRbl1kPsFHqiCp4"},
{"content":{"body":"I actually don’t understand what is being asked for. How broad should the .set take effect?","msgtype":"m.text"},"ts":1720545915732,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$t2p_eVLaK4l4r_NKkUu6gZv_lGuo90TGJ-zqFhDCLLk"},
{"content":{"body":"for tests, if you have set/enterWith, you could set the context in `beforeEach`","format":"org.matrix.custom.html","formatted_body":"for tests, if you have set/enterWith, you could set the context in <code>beforeEach</code>","m.mentions":{},"msgtype":"m.text"},"ts":1720545928600,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ptC8b5LtMJaSISd4lLef-KEGx9EWcEawuhlk6kICRv8"},
{"content":{"body":"Sure, I can see that, I guess what I don’t understand is *how* bad it is","format":"org.matrix.custom.html","formatted_body":"Sure, I can see that, I guess what I don’t understand is <em>how</em> bad it is","msgtype":"m.text"},"ts":1720545954296,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OpOSsOPwfGKwPyyJ-kuNqAG7xAhmbo6-QmnH9nbbqU4"},
{"content":{"body":"How bad would it be if we deferred enterWith/set for “later”?","msgtype":"m.text"},"ts":1720545974002,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qM-KCLj37IawZVjQC7cdhNjJ4bfdrad6-qUCp1Pwqq0"},
{"content":{"body":"In general, there is an idiom where you store a mutable object in the asynccontext variable, and accessing the variable gets that object and then gets what it is wrapping. Every time you are tempted to do .set, you .get the variable and then set what it is wrapping. Are these semantics what we want for enterWith, or is it supposed to take effect within a more narrow scope?","msgtype":"m.text"},"ts":1720546103586,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k2e8YUNMbrYtEO9OqwrEaTj4qo7w2iPIO1p-jS8ylss"},
{"content":{"body":"This is the difference between “trivial” and “a massive design change”","msgtype":"m.text"},"ts":1720546163976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ajt7a2HYiu8Jo1mqe4Zrkoye0d5SXAk67rK2IY-BPXM"},
{"content":{"body":"I think Stephen was arguing for a more narrow scope","m.mentions":{},"msgtype":"m.text"},"ts":1720546183179,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eXPTRhtWH6rnNQyy2vPMKLto--EmOtFovG4qlRfFeFw"},
{"content":{"body":"(Because we could make some sugar for the idiom I described, if desired)","msgtype":"m.text"},"ts":1720546198444,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZJirqYBBeMtoxdPx0QXLsjZlbFCT-wV4kXSsu_LXNpU"},
{"content":{"body":"> <@abotella:igalia.com> I think Stephen was arguing for a more narrow scope\n\nIt would be good to hear from both Stephen Belanger and Matteo Collina here","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24eXPTRhtWH6rnNQyy2vPMKLto--EmOtFovG4qlRfFeFw\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I think Stephen was arguing for a more narrow scope</blockquote></mx-reply>It would be good to hear from both <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a> and <a href=\"https://matrix.to/#/@mcollina:matrix.org\">Matteo Collina</a> here","m.relates_to":{"m.in_reply_to":{"event_id":"$eXPTRhtWH6rnNQyy2vPMKLto--EmOtFovG4qlRfFeFw"}},"msgtype":"m.text"},"ts":1720546233890,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-gcUp9AHNxTYghOOQVf08PPTzDE6MJ8k7DAqrDxx9H8"},
{"content":{"body":"If you do want a narrower scope: how would you like to define that scope?","msgtype":"m.text"},"ts":1720546259841,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hdhxi1XfPPlrJhvVLvQ1xK0wBhn_7YO9L9-0MVOxagM"},
{"content":{"body":"(In case I wasn’t clear: the broad scoped version is easier)","msgtype":"m.text"},"ts":1720546427534,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wf-SUzOpOdxG42FbDrqsbQ6hjVZsr24bIHroe_UExhI"},
{"content":{"body":"> <@abotella:igalia.com> it's not that it wouldn't work, but that it wouldn't be idiomatic, or it'd take a lot more boilerplate than the alternative\n\nNo, there’s a lot of cases where taking a callback just doesn’t work. The example of storing a database connection in the top-level of one file and then trying to use it in another, for example. A common bootstrapping practice with top-level await.\n\nThere are also quite a few cases where APMs need to use enterWith because we just don’t have the ability to wrap a desired scope in any sort of callback—we can’t change how user code behaves yet need to be able to flow context around it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%240-jybcdwgR__O_CvsVz_yC2BJrOcjRbl1kPsFHqiCp4\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>it's not that it wouldn't work, but that it wouldn't be idiomatic, or it'd take a lot more boilerplate than the alternative</blockquote></mx-reply><p>No, there’s a lot of cases where taking a callback just doesn’t work. The example of storing a database connection in the top-level of one file and then trying to use it in another, for example. A common bootstrapping practice with top-level await.</p>\n<p>There are also quite a few cases where APMs need to use enterWith because we just don’t have the ability to wrap a desired scope in any sort of callback—we can’t change how user code behaves yet need to be able to flow context around it.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$0-jybcdwgR__O_CvsVz_yC2BJrOcjRbl1kPsFHqiCp4"}},"msgtype":"m.text"},"ts":1720546442755,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$em7QF6YJ2w1OZiebKZVshaSmvgZkL4eXn15MLdjmyFg"},
{"content":{"body":"> <@stephenbelanger:matrix.org> No, there’s a lot of cases where taking a callback just doesn’t work. The example of storing a database connection in the top-level of one file and then trying to use it in another, for example. A common bootstrapping practice with top-level await.\n> \n> There are also quite a few cases where APMs need to use enterWith because we just don’t have the ability to wrap a desired scope in any sort of callback—we can’t change how user code behaves yet need to be able to flow context around it.\n\nGreat, do you think you could reference a case where DataDog needs to do this? I had trouble tracing through what it was used for in the open source code","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24em7QF6YJ2w1OZiebKZVshaSmvgZkL4eXn15MLdjmyFg\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br><p>No, there’s a lot of cases where taking a callback just doesn’t work. The example of storing a database connection in the top-level of one file and then trying to use it in another, for example. A common bootstrapping practice with top-level await.</p>\n<p>There are also quite a few cases where APMs need to use enterWith because we just don’t have the ability to wrap a desired scope in any sort of callback—we can’t change how user code behaves yet need to be able to flow context around it.</p></blockquote></mx-reply>Great, do you think you could reference a case where DataDog needs to do this? I had trouble tracing through what it was used for in the open source code","m.relates_to":{"m.in_reply_to":{"event_id":"$em7QF6YJ2w1OZiebKZVshaSmvgZkL4eXn15MLdjmyFg"}},"msgtype":"m.text"},"ts":1720546516799,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ftb_IclwCtwkZB7I5deUdUaRHDyMuCMA6Zm-Trj5Ti0"},
{"content":{"body":" it definitely is used there, I just don’t understand the usage ","format":"org.matrix.custom.html","formatted_body":"it definitely is used there, I just don’t understand the usage","msgtype":"m.text"},"ts":1720546552489,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n-3qIWlX6vxbWCA6iJcQmfHUVIa9_uMu9B-dc0HNh6Q"},
{"content":{"body":"As I described in the call, the semantics are essentially the same—the scopes still exist—just decoupling the changing of the value from the providing of a scope means the scope can be raised upward or made implicit in many cases. An implicit scope around the execution of the application, for example, would solve the database connection sharing problem.","msgtype":"m.text"},"ts":1720546553495,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$zb_WIYrREPR2GT3rMB9I4QP0fl55aV9N6QmYUJQVAnI"},
{"content":{"body":"“The scopes still exist” when is a scope created?","msgtype":"m.text"},"ts":1720546596311,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cbRquPsZJSGH_SHx3S4OnSE-mhybtXqNxwYKKEqduag"},
{"content":{"body":"I need to find time to write up a proper explanation of exactly how and why this works…hopefully I can find some time for that at some point…","msgtype":"m.text"},"ts":1720546615589,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$QCG6KCFJGHSBBM1EOgY3uy_qe8h8lX5WhbfXBTZYl9o"},
{"content":{"body":"Maybe you can fill in parts of the notes if you said something that wasn’t captured","msgtype":"m.text"},"ts":1720546648337,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5hBnI3-35mGvwZACNeCbA7QxgVMqr7Mf6MJFEczE1fk"},
{"content":{"body":"I don’t understand what an implicit scope around the application means… doesn’t the default value handle that?","msgtype":"m.text"},"ts":1720546721473,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nlAcKIJf18u4ryqxMXM_ldzNKXgMcVy6aKp5J0yD7Xw"},
{"content":{"body":"not if the `AsyncContext.Variable` is created by a tracing library rather than by user code","format":"org.matrix.custom.html","formatted_body":"not if the <code>AsyncContext.Variable</code> is created by a tracing library rather than by user code","m.mentions":{},"msgtype":"m.text"},"ts":1720546858981,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Xs5NRTk-7_Xqo1qGd9eRDDqFJRozkPBMj0314dLtPDw"},
{"content":{"body":"What is the difference in what the tracing library does, in this case?","msgtype":"m.text"},"ts":1720546929351,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$prjWopjO2NP6H16NIvMgHA5BFU9rAyUVBOBCQvnazfg"},
{"content":{"body":"Is it one variable shared for many things?","msgtype":"m.text"},"ts":1720546936708,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iX-yk9Xe5XCkA0T491U2bhYzI0h0ah9rpF__uqcbxJQ"},
{"content":{"body":"I mean, are we running multiple applications in the same process? ","format":"org.matrix.custom.html","formatted_body":"I mean, are we running multiple applications in the same process?","msgtype":"m.text"},"ts":1720546994467,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uNKdeN1Z-mDp0orrqS-SIQA8iHUBGIyq2gRP8MvuRqc"},
{"content":{"body":"Imagine a variable is created in fastify for it to manage its context. A user then wants to store their database connection in that after the fastify app has already been constructed and therefore already has its variable set up. They then expect that database connection to be readable in the top-level of another file that runs after that point.","msgtype":"m.text"},"ts":1720547048862,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$bgGn5xhfXQN2KOcgBjXMQTn0QC065gDs85d4tX6oNkU"},
{"content":{"body":"You can’t do that without an implicit scope, and default values don’t work either because the variable already exists.","msgtype":"m.text"},"ts":1720547092242,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$eequclYrLrwd5T091vAll6T3Qdk4uWJSiyDwwr_OUqc"},
{"content":{"body":"Is the scope narrower than global here? Is this per request/response? Just trying to understand the scenario ","format":"org.matrix.custom.html","formatted_body":"Is the scope narrower than global here? Is this per request/response? Just trying to understand the scenario","msgtype":"m.text"},"ts":1720547286337,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rfcs1SEK_Fk6YlrMDHFzpTfwDL5u1bM9n_wfhHMV1Zs"},
{"content":{"body":"Is Fastify in a position to say, “this is the outer bounds, so future set calls apply only here”?","msgtype":"m.text"},"ts":1720547323214,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R15-3pXZyTimToIG-ZEk16WAx8tR8EKVZm0KyuPZ5_I"},
{"content":{"body":"What I don’t understand is where implicit scope bounds need to be set","msgtype":"m.text"},"ts":1720547341646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$50s3qe6nIyXbWxJn8gStPl64GGEcq95utTRwoUYRB7k"},
{"content":{"body":"this is about whether the proposal should support an api like AsyncLocalStorage#enterWith? What's the reason to not support it?","m.mentions":{},"msgtype":"m.text"},"ts":1720562419094,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Z5lvHL_6pbzSlfxyhwmw0N-RwBtCrv1TmwVsVToeyQA"},
{"content":{"body":"For the `beforeEach` case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like\n```\naroundEach((test) => {\n  v.run(value, test);\n});\n```\nwould get the job done.","format":"org.matrix.custom.html","formatted_body":"<p>For the <code>beforeEach</code> case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like</p>\n<pre><code>aroundEach((test) =&gt; {\n  v.run(value, test);\n});\n</code></pre>\n<p>would get the job done.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1720563409626,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$FJYDDxtW8ZoBA3Z2Fpo1h8rlLDl2OWNfpYxxUXGHa6w"},
{"content":{"body":" * For the `beforeEach` case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like\n\n```\naroundEach((test) => v.run(value, test));\n```\n\nwould get the job done.","format":"org.matrix.custom.html","formatted_body":" * <p>For the <code>beforeEach</code> case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like</p>\n<pre><code>aroundEach((test) =&gt; v.run(value, test));\n</code></pre>\n<p>would get the job done.</p>\n","m.mentions":{},"m.new_content":{"body":"For the `beforeEach` case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like\n\n```\naroundEach((test) => v.run(value, test));\n```\n\nwould get the job done.","format":"org.matrix.custom.html","formatted_body":"<p>For the <code>beforeEach</code> case, I expect test runners could adapt pretty easily by providing a wrapping adapter - something like</p>\n<pre><code>aroundEach((test) =&gt; v.run(value, test));\n</code></pre>\n<p>would get the job done.</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FJYDDxtW8ZoBA3Z2Fpo1h8rlLDl2OWNfpYxxUXGHa6w","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1720563429515,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$jnFvpi7jeeoZClogEXhRMqpUUsuTstuKPlNA7mGREf4"},
{"content":{"body":"> <@devsnek:matrix.org> this is about whether the proposal should support an api like AsyncLocalStorage#enterWith? What's the reason to not support it?\n\nThe reason is that it breaks encapsulation.  The current proposal means that you have strong guarantees that a variable won't change during the course of a function, but if a child task can `enterWith` a new value, then it can affect the parent task in unexpected ways.  It also runs afoul of the requirements imposed by SES, and is unlikely to be accepted by the committee.\n\nThat said, if you want to make your own `enterWith`able variable, it's easy enough:\n\n```\nclass EnterableVar<T> {\n  private readonly internal: AsyncContext.Variable<[T]>;\n  constructor(opts = {}) {\n    this.internal = new AsyncContext.Variable({...opts, defaultValue: [opts.defaultValue]});\n  }\n  run(val, fn) {\n    return this.internal.run([val], fn);\n  }\n  get() {\n    return this.internal.get()[0];\n  }\n  enterWith(val) {\n    this.internal.get()[0] = val;\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Z5lvHL_6pbzSlfxyhwmw0N-RwBtCrv1TmwVsVToeyQA?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>this is about whether the proposal should support an api like AsyncLocalStorage#enterWith? What&#39;s the reason to not support it?</blockquote></mx-reply><p>The reason is that it breaks encapsulation.  The current proposal means that you have strong guarantees that a variable won't change during the course of a function, but if a child task can <code>enterWith</code> a new value, then it can affect the parent task in unexpected ways.  It also runs afoul of the requirements imposed by SES, and is unlikely to be accepted by the committee.</p>\n<p>That said, if you want to make your own <code>enterWith</code>able variable, it's easy enough:</p>\n<pre><code>class EnterableVar&lt;T&gt; {\n  private readonly internal: AsyncContext.Variable&lt;[T]&gt;;\n  constructor(opts = {}) {\n    this.internal = new AsyncContext.Variable({...opts, defaultValue: [opts.defaultValue]});\n  }\n  run(val, fn) {\n    return this.internal.run([val], fn);\n  }\n  get() {\n    return this.internal.get()[0];\n  }\n  enterWith(val) {\n    this.internal.get()[0] = val;\n  }\n}\n</code></pre>\n","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Z5lvHL_6pbzSlfxyhwmw0N-RwBtCrv1TmwVsVToeyQA"}},"msgtype":"m.text"},"ts":1720564330938,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$giUlDnPThCSKd1ornsi4zdej_2ulPNiQ_xQgW6ndlsw"}
]