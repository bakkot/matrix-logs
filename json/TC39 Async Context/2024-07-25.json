[
{"content":{"body":"I think React is actually kind of a _bad_ basis in a way, because I feel it‚Äôs pointing us down a road that is only useful for functional code and not so much for procedural code.","format":"org.matrix.custom.html","formatted_body":"I think React is actually kind of a <em>bad</em> basis in a way, because I feel it‚Äôs pointing us down a road that is only useful for functional code and not so much for procedural code.","msgtype":"m.text"},"ts":1721873490241,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$tsOm74-XR3wbRT0NBnBNzoxG0021723N3TmDCbfbP9Y"},
{"content":{"body":"> <@stephenhicks:matrix.org> The zalgo situation is the most concerning part. I'd be more comfortable if it's statically determined per API. So something like - lifecycle callbacks are always unwrapped, events are always wrapped. Unwrapped callbacks have an opt-out by manually wrapping them. Wrapped callbacks _may_ have an opt-out via a snapshot property. I'm still not convinced that it's a problem to sometimes run a callback in the top-level/initial snapshot (e.g. if it's dispatched from the parser).\n\nI don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as using the registration context is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24GHJLc2CVxV-PMVgYIug4QlLSzHeGWTSULEyDVvoWEM4\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>The zalgo situation is the most concerning part. I'd be more comfortable if it's statically determined per API. So something like - lifecycle callbacks are always unwrapped, events are always wrapped. Unwrapped callbacks have an opt-out by manually wrapping them. Wrapped callbacks _may_ have an opt-out via a snapshot property. I'm still not convinced that it's a problem to sometimes run a callback in the top-level/initial snapshot (e.g. if it's dispatched from the parser).</blockquote></mx-reply>I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as using the registration context is","m.relates_to":{"m.in_reply_to":{"event_id":"$GHJLc2CVxV-PMVgYIug4QlLSzHeGWTSULEyDVvoWEM4"}},"msgtype":"m.text"},"ts":1721875496831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg"},
{"content":{"body":"‚ÄúConsistently do nothing‚Äù just isn‚Äôt an option for certain APIs which people have been bringing up here","msgtype":"m.text"},"ts":1721875860632,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9CuZPQHA-lKls5EYMtpKj_oRrJfGFblV3arpubNKbHE"},
{"content":{"body":"> <@stephenhicks:matrix.org> The zalgo situation is the most concerning part. I'd be more comfortable if it's statically determined per API. So something like - lifecycle callbacks are always unwrapped, events are always wrapped. Unwrapped callbacks have an opt-out by manually wrapping them. Wrapped callbacks _may_ have an opt-out via a snapshot property. I'm still not convinced that it's a problem to sometimes run a callback in the top-level/initial snapshot (e.g. if it's dispatched from the parser).\n\n * I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24GHJLc2CVxV-PMVgYIug4QlLSzHeGWTSULEyDVvoWEM4\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>The zalgo situation is the most concerning part. I'd be more comfortable if it's statically determined per API. So something like - lifecycle callbacks are always unwrapped, events are always wrapped. Unwrapped callbacks have an opt-out by manually wrapping them. Wrapped callbacks _may_ have an opt-out via a snapshot property. I'm still not convinced that it's a problem to sometimes run a callback in the top-level/initial snapshot (e.g. if it's dispatched from the parser).</blockquote></mx-reply> * I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is","m.new_content":{"body":"I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is","msgtype":"m.text"},"m.relates_to":{"event_id":"$_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721875871540,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ew789ccMuUEN7yuz8YsPLkJHHPia3nhOF5graUOLVG0"},
{"content":{"body":"> <@littledan:matrix.org> I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is\n\nThere‚Äôs not really a way to bind _out_ of registration-time. The other option being ‚Äúhave no context at all‚Äù is maybe not super helpful or intuitive, but you can at least fix that. Whereas if there is an _expectation_ of not having a context then that seems like a reasonable solution to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is</blockquote></mx-reply>There‚Äôs not really a way to bind <em>out</em> of registration-time. The other option being ‚Äúhave no context at all‚Äù is maybe not super helpful or intuitive, but you can at least fix that. Whereas if there is an <em>expectation</em> of not having a context then that seems like a reasonable solution to me.","m.relates_to":{"m.in_reply_to":{"event_id":"$_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg"}},"msgtype":"m.text"},"ts":1721876076602,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-ON4KO_LRQ0BItdffcsEa0VUGFMw0JypDKyY82IybbQ"},
{"content":{"body":"But yes, an imperfect solution.","msgtype":"m.text"},"ts":1721876085680,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$iN09rmB0uCXPyNyLgTmEh2QSx4mUcCuMUdkXOEanlzg"},
{"content":{"body":"I‚Äôve been polling framework authors. Everyone is excited about AsyncContext, they all think it will work well for them for one or two variables like Justin said, and no one thinks it would be especially important to build stuff like React Context on top of","msgtype":"m.text"},"ts":1721876481216,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$f3-dHYHcgVrHfg00b2gEd2HBgmCb0pEZvIm06pNyp6A"},
{"content":{"body":"So I think we can forget about my point about needing saving and restoring contexts from JS to be extremely cheap ","format":"org.matrix.custom.html","formatted_body":"So I think we can forget about my point about needing saving and restoring contexts from JS to be extremely cheap","msgtype":"m.text"},"ts":1721876517482,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5eBoxmAyoUwMwdiKBlDrZgfZhP7Ii1S6WbZIDzOz7ck"},
{"content":{"body":"* So I think we can forget about my point about needing saving and restoring contexts from JS to avoid an allocation ","format":"org.matrix.custom.html","formatted_body":"* So I think we can forget about my point about needing saving and restoring contexts from JS to avoid an allocation","m.new_content":{"body":"So I think we can forget about my point about needing saving and restoring contexts from JS to avoid an allocation ","format":"org.matrix.custom.html","formatted_body":"So I think we can forget about my point about needing saving and restoring contexts from JS to avoid an allocation","msgtype":"m.text"},"m.relates_to":{"event_id":"$5eBoxmAyoUwMwdiKBlDrZgfZhP7Ii1S6WbZIDzOz7ck","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721876530100,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PrSozEm1DTdHk43qQHob-nYSHUZxFPG_ZTDz4IV0h1A"},
{"content":{"body":"We literally just landed that exact capability for CPED in V8 because AsyncLocalStorage in Node.js, Deno, and Cloudflare all _need_ it. üòÖ","format":"org.matrix.custom.html","formatted_body":"We literally just landed that exact capability for CPED in V8 because AsyncLocalStorage in Node.js, Deno, and Cloudflare all <em>need</em> it. üòÖ","msgtype":"m.text"},"ts":1721877002475,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-dsHLG9IaY0Yn11rqC7h8TTT-Cd1mx8KkTEjvsdDJLU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> We literally just landed that exact capability for CPED in V8 because AsyncLocalStorage in Node.js, Deno, and Cloudflare all _need_ it. üòÖ\n\nWhich capability?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24-dsHLG9IaY0Yn11rqC7h8TTT-Cd1mx8KkTEjvsdDJLU\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>We literally just landed that exact capability for CPED in V8 because AsyncLocalStorage in Node.js, Deno, and Cloudflare all <em>need</em> it. üòÖ</blockquote></mx-reply>Which capability?","m.relates_to":{"m.in_reply_to":{"event_id":"$-dsHLG9IaY0Yn11rqC7h8TTT-Cd1mx8KkTEjvsdDJLU"}},"msgtype":"m.text"},"ts":1721879331209,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JYXCdv5OhEYQHXidftoOQtZeyLdWy3sW6CPkgZO-Jg0"},
{"content":{"body":"Saving and restoring context from JS.","msgtype":"m.text"},"ts":1721879366733,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$qE36H0gGbMnVo64Q2PLNQTDDea8bzs6mzDzhqExkwJg"},
{"content":{"body":"We just landed some code to generate turbofan code for set and getting the context slot from pure generated code so we don‚Äôt have to go to native/builtins.","msgtype":"m.text"},"ts":1721879449728,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$q748eHxum8SrJGB_N8RouZVS7lYWkZ-5yq5gtN-qi7I"},
{"content":{"body":"* We just landed some code to generate turbofan code for setting and getting the context slot from pure generated code so we don‚Äôt have to go to native/builtins.","m.new_content":{"body":"We just landed some code to generate turbofan code for setting and getting the context slot from pure generated code so we don‚Äôt have to go to native/builtins.","msgtype":"m.text"},"m.relates_to":{"event_id":"$q748eHxum8SrJGB_N8RouZVS7lYWkZ-5yq5gtN-qi7I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721879463476,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ZPBcdA0oTpmART4sHBfIBZmbt7Zr8dr2-dcv8KBJ-PQ"},
{"content":{"body":"So how are you setting the cped?","msgtype":"m.text"},"ts":1721880470013,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hY1pvH5kd7kYeJEcr6kBY18nuKvKu29D4UheWdxf2BQ"},
{"content":{"body":"See: https://github.com/v8/v8/commit/7857eb34db42f339b337c6bdfb0d10deb14862f3","msgtype":"m.text"},"ts":1721880861724,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$KP-bA7apFMwOv2t9NrGD2YbcuVU4tUP0JzZ6dI7Ecoc"},
{"content":{"body":"Basically we‚Äôre generating code to be able to interact with the context slot on the isolate from optimizable JS code.","msgtype":"m.text"},"ts":1721881077052,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$LwDfydyvuSUnfd6YrR6sls_SyGsHVM4luRA6IKjehLM"},
{"content":{"body":"Node.js very frequently needs to set and get the stored value from both native and JS side. We have lots of native handles for async code that needs to capture when they are constructed and restore when their callback runs. We also have lots of JS-side things like the timer queue which needs to be able to do the same captures and restores from JS efficiently.","msgtype":"m.text"},"ts":1721881277085,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$uswkMmpkMhFdRYMvK-AB5M9XSYDqhoje00H7Q7h8_JU"},
{"content":{"body":"> <@littledan:matrix.org> I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is\n\nIt's not zalgo because it's statically determinable from the registration site. If you register a lifecycle hook in a particular context you know for certain that it will *not* hold onto a reference of that context - that's valuable. The alternative is that it holds onto a reference in case the lifecycle event is caused externally - that's the unpredictability/inconsistency I'm worried about.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />I don‚Äôt understand why running it in the top level snapshot wouldn‚Äôt also amount to Zalgo to the same extent as falling back to the registration context is</blockquote></mx-reply>It's not zalgo because it's statically determinable from the registration site. If you register a lifecycle hook in a particular context you know for certain that it will <em>not</em> hold onto a reference of that context - that's valuable. The alternative is that it holds onto a reference in case the lifecycle event is caused externally - that's the unpredictability/inconsistency I'm worried about.","m.relates_to":{"m.in_reply_to":{"event_id":"$_47_4QyietDt0XZDgjhtlSwaAMeCFzoJGSDBqosFXsg"}},"msgtype":"m.text"},"ts":1721882763435,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$RT-5YjGvVITcdBPLbofV1GHaYsmu92q0o6V7JnHeF8Q"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Node.js very frequently needs to set and get the stored value from both native and JS side. We have lots of native handles for async code that needs to capture when they are constructed and restore when their callback runs. We also have lots of JS-side things like the timer queue which needs to be able to do the same captures and restores from JS efficiently.\n\nI think this is separate? This reads to me as optimizing the JS <-> C++ interface. If you were to have this optimized interface and then wrap the return value in a pure JS object, would that cause a large performance regression? That‚Äôs essentially what Dan suggested.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24uswkMmpkMhFdRYMvK-AB5M9XSYDqhoje00H7Q7h8_JU\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Node.js very frequently needs to set and get the stored value from both native and JS side. We have lots of native handles for async code that needs to capture when they are constructed and restore when their callback runs. We also have lots of JS-side things like the timer queue which needs to be able to do the same captures and restores from JS efficiently.</blockquote></mx-reply>I think this is separate? This reads to me as optimizing the JS &lt;-&gt; C++ interface. If you were to have this optimized interface and then wrap the return value in a pure JS object, would that cause a large performance regression? That‚Äôs essentially what Dan suggested.","m.relates_to":{"m.in_reply_to":{"event_id":"$uswkMmpkMhFdRYMvK-AB5M9XSYDqhoje00H7Q7h8_JU"}},"msgtype":"m.text"},"ts":1721883770476,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$FA7mZEs8G2jCjVBTyJbFYGCkeAx90yVH_vObyGOmyDg"},
{"content":{"body":"In the last meeting Dan suggested changing the `new Snapshot()` API (that returns a new object wrapping the internal context mapping) with a `getSnapshot()` immutable API that always returns the same object.","format":"org.matrix.custom.html","formatted_body":"In the last meeting Dan suggested changing the <code>new Snapshot()</code> API (that returns a new object wrapping the internal context mapping) with a <code>getSnapshot()</code> immutable API that always returns the same object.","msgtype":"m.text"},"ts":1721883927695,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QxX81x2SqZNy-tWfoBJGjekhiJCr62PSMRQEoJ1iYdo"},
{"content":{"body":"Purely as a performance optimization for frameworks that need to take lots of snapshots.","msgtype":"m.text"},"ts":1721883951377,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zoLSPfPh9yiV4Mb5B7EjLtQ29VCY47lNN9UvbfSrqoM"}
]