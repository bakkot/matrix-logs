[
{"content":{"body":"> <@stephenbelanger:matrix.org> The bad actor changing your value is only a problem if you explicitly give them the store and let them _do_ that. If you just keep your stores private this is not a real problem.\n\nI don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />The bad actor changing your value is only a problem if you explicitly give them the store and let them <em>do</em> that. If you just keep your stores private this is not a real problem.</blockquote></mx-reply>I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","m.relates_to":{"m.in_reply_to":{"event_id":"$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g"}},"msgtype":"m.text"},"ts":1716182073062,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> So I would say the generally _encouraged_ way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you _sure_ you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost _every_ other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing _through_ awaits the way most users seem to expect.\n\nI found this initially surprising, but I'm wondering if this actually makes more sense under the \"flow through await\" scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />So I would say the generally <em>encouraged</em> way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you <em>sure</em> you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost <em>every</em> other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing <em>through</em> awaits the way most users seem to expect.</blockquote></mx-reply>I found this initially surprising, but I'm wondering if this actually makes more sense under the &quot;flow through await&quot; scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","m.relates_to":{"m.in_reply_to":{"event_id":"$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y"}},"msgtype":"m.text"},"ts":1716182654023,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$jxiwguZQynsjlW7akUZE-LQPl7pHTv04qEgXEUxxEaI"},
{"content":{"body":"> <@stephenhicks:matrix.org> I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.\n\nWell, yes, global snapshots are bad, which is why they should be discouraged except when absolutely necessary. If you flow _through_ rather than _around_ things then it's _generally_ most advisable to actually bind-per store to only do graph reductions where needed whereas trying to bind _around_ things all over the place takes way more binds and is often inescapable.\n\nIt's a lot better to just let things flow _through_ by default and then provide some additional tools to reduce the graph where necessary. In general cases this is just the bind method, but for awaits it might make sense to have a store option to make it auto-bind on awaits or something like that. I _personally_ feel it makes a lot more sense for await binds to be an option rather than a default we need to find a way out of, but I don't care _too_ much either way, so long as the tools can do what is needed in a reasonable way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.</blockquote></mx-reply><p>Well, yes, global snapshots are bad, which is why they should be discouraged except when absolutely necessary. If you flow <em>through</em> rather than <em>around</em> things then it's <em>generally</em> most advisable to actually bind-per store to only do graph reductions where needed whereas trying to bind <em>around</em> things all over the place takes way more binds and is often inescapable.</p>\n<p>It's a lot better to just let things flow <em>through</em> by default and then provide some additional tools to reduce the graph where necessary. In general cases this is just the bind method, but for awaits it might make sense to have a store option to make it auto-bind on awaits or something like that. I <em>personally</em> feel it makes a lot more sense for await binds to be an option rather than a default we need to find a way out of, but I don't care <em>too</em> much either way, so long as the tools can do what is needed in a reasonable way.</p>\n","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE"}},"msgtype":"m.text"},"ts":1716192904735,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$zo2q63z5s-5nDO2q0ccqU6T34VVmMj_sX5tvRNoMqRQ"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up _a lot_. https://github.com/nodejs/node/issues/53037\n\nI think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up <em>a lot</em>. https://github.com/nodejs/node/issues/53037</blockquote></mx-reply>I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII"}},"msgtype":"m.text"},"ts":1716202721788,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up _a lot_. https://github.com/nodejs/node/issues/53037\n\n * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up <em>a lot</em>. https://github.com/nodejs/node/issues/53037</blockquote></mx-reply> * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","m.mentions":{},"m.new_content":{"body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","format":"org.matrix.custom.html","formatted_body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716202799592,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$JYMuZ5Z1Y1siIYVMLKgZxLD1Bk_MhzinJOFj_sLeRqE"},
{"content":{"body":" * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","format":"org.matrix.custom.html","formatted_body":" * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","m.mentions":{},"m.new_content":{"body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","format":"org.matrix.custom.html","formatted_body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716202820115,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$R6LPOcd_7pwdp-dKG9gwL7FW4TsmQ3FI_su81p8cZE4"}
]