[
{"content":{"body":"> <@stephenbelanger:matrix.org> The bad actor changing your value is only a problem if you explicitly give them the store and let them _do_ that. If you just keep your stores private this is not a real problem.\n\nI don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />The bad actor changing your value is only a problem if you explicitly give them the store and let them <em>do</em> that. If you just keep your stores private this is not a real problem.</blockquote></mx-reply>I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","m.relates_to":{"m.in_reply_to":{"event_id":"$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g"}},"msgtype":"m.text"},"ts":1716182073062,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> So I would say the generally _encouraged_ way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you _sure_ you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost _every_ other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing _through_ awaits the way most users seem to expect.\n\nI found this initially surprising, but I'm wondering if this actually makes more sense under the \"flow through await\" scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />So I would say the generally <em>encouraged</em> way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you <em>sure</em> you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost <em>every</em> other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing <em>through</em> awaits the way most users seem to expect.</blockquote></mx-reply>I found this initially surprising, but I'm wondering if this actually makes more sense under the &quot;flow through await&quot; scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","m.relates_to":{"m.in_reply_to":{"event_id":"$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y"}},"msgtype":"m.text"},"ts":1716182654023,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$jxiwguZQynsjlW7akUZE-LQPl7pHTv04qEgXEUxxEaI"}
]