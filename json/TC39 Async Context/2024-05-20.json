[
{"content":{"body":"> <@stephenbelanger:matrix.org> The bad actor changing your value is only a problem if you explicitly give them the store and let them _do_ that. If you just keep your stores private this is not a real problem.\n\nI don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />The bad actor changing your value is only a problem if you explicitly give them the store and let them <em>do</em> that. If you just keep your stores private this is not a real problem.</blockquote></mx-reply>I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.","m.relates_to":{"m.in_reply_to":{"event_id":"$2cRrAvquMAjDmp8f8Qtw8XsCNtTKDdPBZxLsIJopl5g"}},"msgtype":"m.text"},"ts":1716182073062,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> So I would say the generally _encouraged_ way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you _sure_ you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost _every_ other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing _through_ awaits the way most users seem to expect.\n\nI found this initially surprising, but I'm wondering if this actually makes more sense under the \"flow through await\" scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br />So I would say the generally <em>encouraged</em> way to do binds should be instance-scoped by default and global bind should only ever be a \"Are you <em>sure</em> you know what you're doing?\" type of API for the power-user cases like module authors making sure their resource pool will not leak implementation details that would never be relevant to user code execution flow. Pool mechanisms I would say are almost universally okay to bind globally, but almost <em>every</em> other scenario is a matter of opinion and should (at least in my opinion) probably not bind at all by default and always follow that path through internals because otherwise you end up with these strange flows like with async/await not flowing <em>through</em> awaits the way most users seem to expect.</blockquote></mx-reply>I found this initially surprising, but I'm wondering if this actually makes more sense under the &quot;flow through await&quot; scenario. With preserve-around-await semantics and default registration-time binding, you end up needing a bunch of global binds just to get reasonable behavior. Again, my axiom here is that application code and library/framework code shouldn't need to be aware of each other's variables in order to do the right thing. With preserve-around-await, global binds seems like generally the thing you need to uphold that axiom. But with flow-through-await, I can imagine that maybe that's no longer required, provided you're not somehow picking up promises that came from vastly different contexts, which seems generally unlikely to happen in most common situations.","m.relates_to":{"m.in_reply_to":{"event_id":"$SxFLvlchWjUPBQd5zSPM1Q9dG1DvgczqI68fWeUoA4Y"}},"msgtype":"m.text"},"ts":1716182654023,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$jxiwguZQynsjlW7akUZE-LQPl7pHTv04qEgXEUxxEaI"},
{"content":{"body":"> <@stephenhicks:matrix.org> I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.\n\nWell, yes, global snapshots are bad, which is why they should be discouraged except when absolutely necessary. If you flow _through_ rather than _around_ things then it's _generally_ most advisable to actually bind-per store to only do graph reductions where needed whereas trying to bind _around_ things all over the place takes way more binds and is often inescapable.\n\nIt's a lot better to just let things flow _through_ by default and then provide some additional tools to reduce the graph where necessary. In general cases this is just the bind method, but for awaits it might make sense to have a store option to make it auto-bind on awaits or something like that. I _personally_ feel it makes a lot more sense for await binds to be an option rather than a default we need to find a way out of, but I don't care _too_ much either way, so long as the tools can do what is needed in a reasonable way.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I don't think that's right. Simply restoring a global snapshot is enough. If the subtask you're awaiting resolves its promise in a context that didn't derive from the one that was active when you called it, then you've lost your state even though it didn't have access to your variable.</blockquote></mx-reply><p>Well, yes, global snapshots are bad, which is why they should be discouraged except when absolutely necessary. If you flow <em>through</em> rather than <em>around</em> things then it's <em>generally</em> most advisable to actually bind-per store to only do graph reductions where needed whereas trying to bind <em>around</em> things all over the place takes way more binds and is often inescapable.</p>\n<p>It's a lot better to just let things flow <em>through</em> by default and then provide some additional tools to reduce the graph where necessary. In general cases this is just the bind method, but for awaits it might make sense to have a store option to make it auto-bind on awaits or something like that. I <em>personally</em> feel it makes a lot more sense for await binds to be an option rather than a default we need to find a way out of, but I don't care <em>too</em> much either way, so long as the tools can do what is needed in a reasonable way.</p>\n","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$QLTat4mfRLndFhUeSBCQeEleVs8MbSKHOf1G2zI8vGE"}},"msgtype":"m.text"},"ts":1716192904735,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$zo2q63z5s-5nDO2q0ccqU6T34VVmMj_sX5tvRNoMqRQ"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up _a lot_. https://github.com/nodejs/node/issues/53037\n\nI think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up <em>a lot</em>. https://github.com/nodejs/node/issues/53037</blockquote></mx-reply>I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII"}},"msgtype":"m.text"},"ts":1716202721788,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up _a lot_. https://github.com/nodejs/node/issues/53037\n\n * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$SdyIZ6r2_ihXcnzN_x41LggncfjgfchOSA519QbiKII?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Here's a new issue from Matteo about the exact issue I'm talking about with await binding. I've seen this user confusion come up <em>a lot</em>. https://github.com/nodejs/node/issues/53037</blockquote></mx-reply> * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","m.mentions":{},"m.new_content":{"body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","format":"org.matrix.custom.html","formatted_body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716202799592,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$JYMuZ5Z1Y1siIYVMLKgZxLD1Bk_MhzinJOFj_sLeRqE"},
{"content":{"body":" * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","format":"org.matrix.custom.html","formatted_body":" * I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","m.mentions":{},"m.new_content":{"body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","format":"org.matrix.custom.html","formatted_body":"I think the confusion in the issue was caused by the difference of AsyncLocalStorage behavior around the timing of enabling promise hooks. Enabling promise hooks before and after a promise creation/resolution would change how AsyncLocalStorage propagates a value is a problem on either semantics.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$HLrN_aaBfCeoG8oX9S27Lwv_rmLpgDcdmpphBkO10q8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716202820115,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$R6LPOcd_7pwdp-dKG9gwL7FW4TsmQ3FI_su81p8cZE4"},
{"content":{"body":"It's not _just_ the timing of enabling PromiseHook. It is that the portion of an async function _before_ the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.","format":"org.matrix.custom.html","formatted_body":"It's not <em>just</em> the timing of enabling PromiseHook. It is that the portion of an async function <em>before</em> the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.","m.mentions":{},"msgtype":"m.text"},"ts":1716204508964,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM"},
{"content":{"body":"Regardless of timing inconsistencies, the user is clearly _expecting_ that they should be able to retrieve the context set after an await within the async function.","format":"org.matrix.custom.html","formatted_body":"Regardless of timing inconsistencies, the user is clearly <em>expecting</em> that they should be able to retrieve the context set after an await within the async function.","m.mentions":{},"msgtype":"m.text"},"ts":1716204552223,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$h2KaIsLwE4Hl6qB29VOYEBcQ035TNaMQ24coMP7Nokw"},
{"content":{"body":" * Regardless of timing inconsistencies, the user is clearly _expecting_ that they should be able to retrieve the context set after an await within the inner async function from the outer async function.","format":"org.matrix.custom.html","formatted_body":" * Regardless of timing inconsistencies, the user is clearly <em>expecting</em> that they should be able to retrieve the context set after an await within the inner async function from the outer async function.","m.mentions":{},"m.new_content":{"body":"Regardless of timing inconsistencies, the user is clearly _expecting_ that they should be able to retrieve the context set after an await within the inner async function from the outer async function.","format":"org.matrix.custom.html","formatted_body":"Regardless of timing inconsistencies, the user is clearly <em>expecting</em> that they should be able to retrieve the context set after an await within the inner async function from the outer async function.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h2KaIsLwE4Hl6qB29VOYEBcQ035TNaMQ24coMP7Nokw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716204575571,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$kVDOwXdQEJRg1lzlaqhPNG7E91j813BUzHnDk3Wjdsk"},
{"content":{"body":" * Regardless of timing inconsistencies, the user is clearly _expecting_ that they should be able to retrieve the context set after an await within the inner async function from the outer async function (or module scope, in this case).","format":"org.matrix.custom.html","formatted_body":" * Regardless of timing inconsistencies, the user is clearly <em>expecting</em> that they should be able to retrieve the context set after an await within the inner async function from the outer async function (or module scope, in this case).","m.mentions":{},"m.new_content":{"body":"Regardless of timing inconsistencies, the user is clearly _expecting_ that they should be able to retrieve the context set after an await within the inner async function from the outer async function (or module scope, in this case).","format":"org.matrix.custom.html","formatted_body":"Regardless of timing inconsistencies, the user is clearly <em>expecting</em> that they should be able to retrieve the context set after an await within the inner async function from the outer async function (or module scope, in this case).","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$h2KaIsLwE4Hl6qB29VOYEBcQ035TNaMQ24coMP7Nokw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716204586420,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$HpjYwq6wn-LI0OTtF78tqt-oYyNu-N2WxuEzToIqXX4"},
{"content":{"body":"Wait, the init hook isn’t flowing out, it  is a third thing","msgtype":"m.text"},"ts":1716205494998,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$475vP7CEIpMywvJCxxlVVTWyyEPejjOGP99gd2sL7wA"},
{"content":{"body":"why are global snapshots bad?","m.mentions":{},"msgtype":"m.text"},"ts":1716206813609,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JecVKy7Hc84-Jwa00K5xGM1jUrWUyMQ3DOn379Gymhs"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It's not _just_ the timing of enabling PromiseHook. It is that the portion of an async function _before_ the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.\n\nThe proposal as it current stands is maintaining the lexical consistent value inside a async function body across `await` for `AsyncContext.Variable`, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It's not <em>just</em> the timing of enabling PromiseHook. It is that the portion of an async function <em>before</em> the first await behaves differently from the rest of the function because the context capture will have already happened around the outer await before passing over the inner awaits. It's confusing to users that the context is not flowing out.</blockquote></mx-reply>The proposal as it current stands is maintaining the lexical consistent value inside a async function body across <code>await</code> for <code>AsyncContext.Variable</code>, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$e81Db5rUOuJqELJkBTIAC6zEjDm0KHxPZuBX11_DxBM"}},"msgtype":"m.text"},"ts":1716206818230,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It happens to use `enterWith(...)` rather than `run(...)`, but the confusion around expected flow is effectively the same.\n\nWhat? I think \"restore after await\" would equally fix that bug (though agree that flows-out works here as well)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$34T1U8SBPGAPyFFzrz_w5rghdqi09MkQ55NAmD2aB2U?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It happens to use <code>enterWith(...)</code> rather than <code>run(...)</code>, but the confusion around expected flow is effectively the same.</blockquote></mx-reply>What? I think \"restore after await\" would equally fix that bug (though agree that flows-out works here as well)","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$34T1U8SBPGAPyFFzrz_w5rghdqi09MkQ55NAmD2aB2U"}},"msgtype":"m.text"},"ts":1716207018862,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$apZZkW_2gYjA-4m32Y-6-uIBt1F2FXU8jHvIsDn4sDI"},
{"content":{"body":"> <@littledan:matrix.org> why are global snapshots bad?\n\nThey're not _bad_ exactly, just should not be the _default_ tool people reach for as it means they are influencing the graphs of _every_ store which, more often than not (in my experience with ALS users), is not actually what you want.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$JecVKy7Hc84-Jwa00K5xGM1jUrWUyMQ3DOn379Gymhs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>why are global snapshots bad?</blockquote></mx-reply>They're not <em>bad</em> exactly, just should not be the <em>default</em> tool people reach for as it means they are influencing the graphs of <em>every</em> store which, more often than not (in my experience with ALS users), is not actually what you want.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$JecVKy7Hc84-Jwa00K5xGM1jUrWUyMQ3DOn379Gymhs"}},"msgtype":"m.text"},"ts":1716207030202,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$maxkHHHzkGjIT8d5kSe8yXlF6aQp_yohjaWi9Ph5Jfg"},
{"content":{"body":"There should be clearly communicated difference between \"This is a universally applicable binding point.\" and \"I want _my_ context to flow in this way.\"","format":"org.matrix.custom.html","formatted_body":"There should be clearly communicated difference between \"This is a universally applicable binding point.\" and \"I want <em>my</em> context to flow in this way.\"","m.mentions":{},"msgtype":"m.text"},"ts":1716207109608,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ZtNzTz-ut4ep8vwzs41dcJzN8kuXdvxjzIeMq-PRgJ4"},
{"content":{"body":"> <@legendecas:matrix.org> The proposal as it current stands is maintaining the lexical consistent value inside a async function body across `await` for `AsyncContext.Variable`, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.\n\nYes, and I still don't understand why we are going for lexical scope given that, as far as I've seen, everyone is expecting it to follow execution flow.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>The proposal as it current stands is maintaining the lexical consistent value inside a async function body across <code>await</code> for <code>AsyncContext.Variable</code>, which is part of the approach aiming to address the dynamic scope concerns from the previous meeting's feedback.</blockquote></mx-reply>Yes, and I still don't understand why we are going for lexical scope given that, as far as I've seen, everyone is expecting it to follow execution flow.","m.mentions":{"user_ids":["@legendecas:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$S4OmJohIvXsYjwtstNmKt2U08TnljgtYw_7a4nhaKvQ"}},"msgtype":"m.text"},"ts":1716207185227,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$vlfdjk1CMAf5HqiemxQ6Mzg0rocO2-Gt-gzLTYg1SOY"},
{"content":{"body":"I don't know what the concerns were with dynamic scope. Is information that captured somewhere?","m.mentions":{},"msgtype":"m.text"},"ts":1716207236978,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$4hs-fMNfaIE9vM00BbU-35zXsZViIDygHiJACk1Tll0"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Also, I'd _really_ appreciate if people reconsidered much of what James M Snell was was saying in https://github.com/nodejs/node/issues/46262. As far as people that understand the issues of context flow, he's one of very few others I'd trust to understand this stuff, having done a _bunch_ of work on the Cloudflare equivalent of AsyncLocalStorage.\n\nYeah, James was working closely with us when he filed that issue, and the current spec reflects what he is proposing with respect to rejection. I may have misunderstood his comments on resolving (as you can see in the thread); I guess we should get back in touch to understand his point of view better.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$uPJ_hI5OlXV2X00EMiZp2tF2NzTZYpHGJgaftzEaCDI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Also, I'd <em>really</em> appreciate if people reconsidered much of what <a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a> was was saying in https://github.com/nodejs/node/issues/46262. As far as people that understand the issues of context flow, he's one of very few others I'd trust to understand this stuff, having done a <em>bunch</em> of work on the Cloudflare equivalent of AsyncLocalStorage.</blockquote></mx-reply>Yeah, James was working closely with us when he filed that issue, and the current spec reflects what he is proposing with respect to rejection. I may have misunderstood his comments on resolving (as you can see in the thread); I guess we should get back in touch to understand his point of view better.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@jasnell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$uPJ_hI5OlXV2X00EMiZp2tF2NzTZYpHGJgaftzEaCDI"}},"msgtype":"m.text"},"ts":1716207292494,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$j1YFszWOIIwVa9MGNNMX-BqHhuZ3k3cbkRiPvzHgDQg"},
{"content":{"body":"> <@littledan:matrix.org> What? I think \"restore after await\" would equally fix that bug (though agree that flows-out works here as well)\n\nIt _is_ doing \"restore after await\" as that is how PromiseHook _works_. That's precisely the _problem_ here is that the user is assuming the context value will flow out of the awaited promises into the scope in which it was awaited.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$apZZkW_2gYjA-4m32Y-6-uIBt1F2FXU8jHvIsDn4sDI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What? I think \"restore after await\" would equally fix that bug (though agree that flows-out works here as well)</blockquote></mx-reply>It <em>is</em> doing \"restore after await\" as that is how PromiseHook <em>works</em>. That's precisely the <em>problem</em> here is that the user is assuming the context value will flow out of the awaited promises into the scope in which it was awaited.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$apZZkW_2gYjA-4m32Y-6-uIBt1F2FXU8jHvIsDn4sDI"}},"msgtype":"m.text"},"ts":1716207302600,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$6KIISkPDT0j3vFpvl8-_Kqw7V7uW3Iq4qipU64mX3Dg"},
{"content":{"body":"we are definitely not doing lexical scope in general. There are definitely cases where some other relevant snapshot is used.","m.mentions":{},"msgtype":"m.text"},"ts":1716207330809,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GRNUXxpr4Lehj9QNf1Kt4H5nnyw1mAt_1eoqD8q443Y"},
{"content":{"body":"people have suggested things like \"how about all callbacks just automatically close over the context\" and this is broken and not what is proposed.","m.mentions":{},"msgtype":"m.text"},"ts":1716207356666,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PnYMDfAM5P9ByJwK54uGfRAlaYbGAIgds5llI4db75I"},
{"content":{"body":"Yeah, it seems like the flow is entirely reasonable with callbacks. I just don't understand why logically equivalent flows with promises and async/await don't flow in the same way. That seems extremely confusing to me.","m.mentions":{},"msgtype":"m.text"},"ts":1716207382298,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-0wjcKwMdKie4FJNnMDzSnldrCnyX5ZAYq4hEjAD_IQ"},
{"content":{"body":"> <@littledan:matrix.org> people have suggested things like \"how about all callbacks just automatically close over the context\" and this is broken and not what is proposed.\n\nBroken in what way?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$PnYMDfAM5P9ByJwK54uGfRAlaYbGAIgds5llI4db75I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>people have suggested things like &quot;how about all callbacks just automatically close over the context&quot; and this is broken and not what is proposed.</blockquote></mx-reply>Broken in what way?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PnYMDfAM5P9ByJwK54uGfRAlaYbGAIgds5llI4db75I"}},"msgtype":"m.text"},"ts":1716207404894,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$pFO9XnXv_Uf-eB_i8gDDIqVu5BqVjAlN64ZfQVqo8BA"},
{"content":{"body":"well, as you've been saying, sometimes it loses important information","m.mentions":{},"msgtype":"m.text"},"ts":1716207426600,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9Tm_h361JvEpywFBNsgT_L5DUH-PT_aUP9ymAs_GPy8"},
{"content":{"body":"Any callback for an async task _should_ flow context through it.","format":"org.matrix.custom.html","formatted_body":"Any callback for an async task <em>should</em> flow context through it.","m.mentions":{},"msgtype":"m.text"},"ts":1716207450809,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ADuD2zhjI3IYqzOM8fDSn7YluNjTb2TelLHmo2bgB5g"},
{"content":{"body":"but also sometimes the registration context *is* the most relevant one (often it's the only possible one)","format":"org.matrix.custom.html","formatted_body":"but also sometimes the registration context <em>is</em> the most relevant one (often it's the only possible one)","m.mentions":{},"msgtype":"m.text"},"ts":1716207467805,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8xqTr_DQNUtfLnqgRBNjXeZx2me-J5w8CRCaU1_t1uY"},
{"content":{"body":"But to be clear I mean _through_ and not _around_, which is what binding does rather than just capturing at the edges.","format":"org.matrix.custom.html","formatted_body":"But to be clear I mean <em>through</em> and not <em>around</em>, which is what binding does rather than just capturing at the edges.","m.mentions":{},"msgtype":"m.text"},"ts":1716207497100,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$G9o1DS6F0hWaX6be8gfcSRmFXlApf6nf3QgMt7oh-2s"},
{"content":{"body":"In Node.js we intentionally push capturing to as _close_ to the edges as possible, meaning binding on the internal AsyncWrap type callbacks, so context flows through all the internals to get there.","format":"org.matrix.custom.html","formatted_body":"In Node.js we intentionally push capturing to as <em>close</em> to the edges as possible, meaning binding on the internal AsyncWrap type callbacks, so context flows through all the internals to get there.","m.mentions":{},"msgtype":"m.text"},"ts":1716207547472,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$dTGPAkhPi6HrRtMOVB078OeLZTb2MThugTkBFp4VAf0"},
{"content":{"body":"We could have bound the user callbacks directly instead, but then we would miss all that internal behaviour which may be relevant.","m.mentions":{},"msgtype":"m.text"},"ts":1716207572375,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$0BcmDp3HzrJbn8it-tRNreVlclMH3fzlrjJSZUqL7Uo"},
{"content":{"body":"I've asked two questions that I don't yet know the answer to:\n- How are we handling merges, given that both contexts are often relevant (and in general this forms a big tree--there are more than two relevant things)?\n- How could per-variable handling scale, when you have a lot of different libraries and a lot of different variables and they're all supposed to fit together? It's easier for me to understand \"two classes of variables\".","format":"org.matrix.custom.html","formatted_body":"<p>I've asked two questions that I don't yet know the answer to:</p>\n<ul>\n<li>How are we handling merges, given that both contexts are often relevant (and in general this forms a big tree--there are more than two relevant things)?</li>\n<li>How could per-variable handling scale, when you have a lot of different libraries and a lot of different variables and they're all supposed to fit together? It's easier for me to understand \"two classes of variables\".</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716207644145,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RkU59_v3QhSPT4Vp7YhfMuaHE5NatcN9FbwysWETTd8"},
{"content":{"body":"> <@littledan:matrix.org> but also sometimes the registration context *is* the most relevant one (often it's the only possible one)\n\nI have never found that with ALS. The appropriate place to do \"resolve\" path _does_ get pushed a bit out sometimes though. Like if the resolve is in C++ internals somewhere then it gets pushed back to whatever call ran the C++ code which _led_ to that resolve.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$8xqTr_DQNUtfLnqgRBNjXeZx2me-J5w8CRCaU1_t1uY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>but also sometimes the registration context <em>is</em> the most relevant one (often it's the only possible one)</blockquote></mx-reply>I have never found that with ALS. The appropriate place to do \"resolve\" path <em>does</em> get pushed a bit out sometimes though. Like if the resolve is in C++ internals somewhere then it gets pushed back to whatever call ran the C++ code which <em>led</em> to that resolve.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8xqTr_DQNUtfLnqgRBNjXeZx2me-J5w8CRCaU1_t1uY"}},"msgtype":"m.text"},"ts":1716207655600,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$31Qq-3KdTpFLrEKd4WGg74Ln5LkMmzRbgV3wEBDXKrw"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I have never found that with ALS. The appropriate place to do \"resolve\" path _does_ get pushed a bit out sometimes though. Like if the resolve is in C++ internals somewhere then it gets pushed back to whatever call ran the C++ code which _led_ to that resolve.\n\nFor example, in setTimeout, there's nothing to do but restore the snapshot from when it was previously called","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$31Qq-3KdTpFLrEKd4WGg74Ln5LkMmzRbgV3wEBDXKrw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I have never found that with ALS. The appropriate place to do \"resolve\" path <em>does</em> get pushed a bit out sometimes though. Like if the resolve is in C++ internals somewhere then it gets pushed back to whatever call ran the C++ code which <em>led</em> to that resolve.</blockquote></mx-reply>For example, in setTimeout, there's nothing to do but restore the snapshot from when it was previously called","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$31Qq-3KdTpFLrEKd4WGg74Ln5LkMmzRbgV3wEBDXKrw"}},"msgtype":"m.text"},"ts":1716207690374,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vadEwf7W1F_BZbhOA0bLjZXMjFT5RZ-8disWdnjUf1U"},
{"content":{"body":"Everything _always_ has some cause _somewhere_.","format":"org.matrix.custom.html","formatted_body":"Everything <em>always</em> has some cause <em>somewhere</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1716207713352,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$pWi7iBhzPzQwP9RDkiJiIKLnlFrTSQpdiW8dzDh9-Sk"},
{"content":{"body":"sure, the cause is often the registration time","m.mentions":{},"msgtype":"m.text"},"ts":1716207727778,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tSIiShXFu48l-QSMQPJZyK5cxENZ5JvJElFT_Me2BgU"},
{"content":{"body":"so we're not necessarily disagreeing on the semantics","m.mentions":{},"msgtype":"m.text"},"ts":1716207737221,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JvzA3h1F0n1ox6AuVEHY8GhS5g_y61eXzx1jHi-kiVg"},
{"content":{"body":"you wouldn't want internals of the scheduler to be understood as the cause, though--that would scramble information","m.mentions":{},"msgtype":"m.text"},"ts":1716207763193,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Lo_0gQoRuZabIutYqXg_7d7kBpJf5eig2x-gq7X6xu4"},
{"content":{"body":"It's not that `setTimeout` needs to be registration time. It's that registration and scheduling time happen at the same time in some case. But it's not the registering of a callback which you actually _care_ about, it's the path that led to it being _called_.","format":"org.matrix.custom.html","formatted_body":"It's not that <code>setTimeout</code> needs to be registration time. It's that registration and scheduling time happen at the same time in some case. But it's not the registering of a callback which you actually <em>care</em> about, it's the path that led to it being <em>called</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1716207772672,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$jbjOrOxkgEbGNokVZxUeWnDUHpgnUwmcw7mFENSt0pU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It's not that `setTimeout` needs to be registration time. It's that registration and scheduling time happen at the same time in some case. But it's not the registering of a callback which you actually _care_ about, it's the path that led to it being _called_.\n\nsure, yes I agree these are the semantics we are going for. As I've been saying, the \"registration time vs call time\" framing is not helpful. Instead, it's more like the organizing principle is, \"preserve relevant information\".","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$jbjOrOxkgEbGNokVZxUeWnDUHpgnUwmcw7mFENSt0pU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It's not that <code>setTimeout</code> needs to be registration time. It's that registration and scheduling time happen at the same time in some case. But it's not the registering of a callback which you actually <em>care</em> about, it's the path that led to it being <em>called</em>.</blockquote></mx-reply>sure, yes I agree these are the semantics we are going for. As I've been saying, the \"registration time vs call time\" framing is not helpful. Instead, it's more like the organizing principle is, \"preserve relevant information\".","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jbjOrOxkgEbGNokVZxUeWnDUHpgnUwmcw7mFENSt0pU"}},"msgtype":"m.text"},"ts":1716207826166,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$24Z55PH_jbDWdDMqnXKeeuNLR1U6kvd4pcr333ahZuo"},
{"content":{"body":"which sometimes means \"registration time\" in the terms we've been using","m.mentions":{},"msgtype":"m.text"},"ts":1716207844177,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GTqP-lwimSH2Y3G4VzdNAKz1I3EK0v1eIKCKoDCSLH4"},
{"content":{"body":"let's think about better ways to call this; there's just no debate about what setTimeout does","m.mentions":{},"msgtype":"m.text"},"ts":1716207873252,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$owCjAJGcBGlbZ0XzmaL4CZZwTk6AG822swVWpnV2Z4M"},
{"content":{"body":"the cases where this distinction matters are cases where the \"scheduling time\" is at the start of the agent before any JS code can run – in which case the agent is necessarily empty, and necessarily preserves *no* relevant information","format":"org.matrix.custom.html","formatted_body":"the cases where this distinction matters are cases where the \"scheduling time\" is at the start of the agent before any JS code can run – in which case the agent is necessarily empty, and necessarily preserves <em>no</em> relevant information","m.mentions":{},"msgtype":"m.text"},"ts":1716207920424,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$3VwLksQ0DenCfivCSBtkmByPpEqEovsQihdRPpduDJE"},
{"content":{"body":"we should not be in the business of running anything with an empty context ever IMO. That would preclude many important context use cases.","m.mentions":{},"msgtype":"m.text"},"ts":1716207949012,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$t6KO5-x2VemrRCivd2G5mImVppYrBy_1o64nqu-PVrw"},
{"content":{"body":"Yep, so I've found the way to do that effectively is to look _specifically_ at where synchronous execution _stops_ and tasks are stored to return to later in some way. In Node.js we create handle objects and, generally, the creation of those objects captures context and the callback is registered at that same point.\n\nThe reason we capture at _this_ specific point though is because we don't have _native_ context. If we _did_ then the _actual_ correct point would be where it queues the kernel task and should flow all the way up to that point and then capture context to restore when the kernel task comes back. For _complete_ context flow you want to be as close to those edges as possible.","format":"org.matrix.custom.html","formatted_body":"<p>Yep, so I've found the way to do that effectively is to look <em>specifically</em> at where synchronous execution <em>stops</em> and tasks are stored to return to later in some way. In Node.js we create handle objects and, generally, the creation of those objects captures context and the callback is registered at that same point.</p>\n<p>The reason we capture at <em>this</em> specific point though is because we don't have <em>native</em> context. If we <em>did</em> then the <em>actual</em> correct point would be where it queues the kernel task and should flow all the way up to that point and then capture context to restore when the kernel task comes back. For <em>complete</em> context flow you want to be as close to those edges as possible.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716208013011,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$t2OPZK-ttioEF3vGc4CGXlVbt7qIgf_QHvt8Za7qy4Y"},
{"content":{"body":"> <@littledan:matrix.org> we should not be in the business of running anything with an empty context ever IMO. That would preclude many important context use cases.\n\nI assume you mean we shouldn't be running anything that could not possibly have any data flow from the initial execution of the script or later, right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$t6KO5-x2VemrRCivd2G5mImVppYrBy_1o64nqu-PVrw?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>we should not be in the business of running anything with an empty context ever IMO. That would preclude many important context use cases.</blockquote></mx-reply>I assume you mean we shouldn't be running anything that could not possibly have any data flow from the initial execution of the script or later, right?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$t6KO5-x2VemrRCivd2G5mImVppYrBy_1o64nqu-PVrw"}},"msgtype":"m.text"},"ts":1716208028815,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$VLDUuh12Cc-xzWSPQr7R8bwXCSjD5lvSjo4xt7k7lmg"},
{"content":{"body":"because the initial execution will have an empty context, and that context might flow to places","m.mentions":{},"msgtype":"m.text"},"ts":1716208050505,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$j-3fWwlAejgFwmt_U96838l2DM41sVplzW8Of6I0aVs"},
{"content":{"body":"Everything in the process has a _cause_ and therefore should always have a parent to flow from. The top-level flows from the fact of the process starting, which maybe doesn't have a \"value\" per-se, but I think that is probably the clearest expression of never having an \"empty\" context.","format":"org.matrix.custom.html","formatted_body":"Everything in the process has a <em>cause</em> and therefore should always have a parent to flow from. The top-level flows from the fact of the process starting, which maybe doesn't have a \"value\" per-se, but I think that is probably the clearest expression of never having an \"empty\" context.","m.mentions":{},"msgtype":"m.text"},"ts":1716208114666,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$_VrbgkqLrV7X3oCnzZOi_sN7ecu9QxgulKGrd4Dj7qA"},
{"content":{"body":"> <@abotella:igalia.com> because the initial execution will have an empty context, and that context might flow to places\n\noh, sure. to make what I'm saying concrete, I mean: the host should be able to put some internal variables in that initial context, and then be able to rely on their presence; JS itself should never be creating an empty context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$j-3fWwlAejgFwmt_U96838l2DM41sVplzW8Of6I0aVs?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>because the initial execution will have an empty context, and that context might flow to places</blockquote></mx-reply>oh, sure. to make what I'm saying concrete, I mean: the host should be able to put some internal variables in that initial context, and then be able to rely on their presence; JS itself should never be creating an empty context.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$j-3fWwlAejgFwmt_U96838l2DM41sVplzW8Of6I0aVs"}},"msgtype":"m.text"},"ts":1716208118874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N2R5Nnb0fUhEPewLBoOXVrVAjYgon4kf2yeZqpXrzOY"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Everything in the process has a _cause_ and therefore should always have a parent to flow from. The top-level flows from the fact of the process starting, which maybe doesn't have a \"value\" per-se, but I think that is probably the clearest expression of never having an \"empty\" context.\n\ncool, sounds like we're all agreeing, \"JS shouldn't create empty contexts\". This doesn't resolve the \"two causes\" point which your document so clearly lays out.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_VrbgkqLrV7X3oCnzZOi_sN7ecu9QxgulKGrd4Dj7qA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Everything in the process has a <em>cause</em> and therefore should always have a parent to flow from. The top-level flows from the fact of the process starting, which maybe doesn't have a \"value\" per-se, but I think that is probably the clearest expression of never having an \"empty\" context.</blockquote></mx-reply>cool, sounds like we're all agreeing, \"JS shouldn't create empty contexts\". This doesn't resolve the \"two causes\" point which your document so clearly lays out.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_VrbgkqLrV7X3oCnzZOi_sN7ecu9QxgulKGrd4Dj7qA"}},"msgtype":"m.text"},"ts":1716208174312,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IPkOZWd9D2WjlvgtW3JZGX1GJHkdyS7yvjmlsWXVTn4"},
{"content":{"body":"Context is basically just a mirror of the directed acyclic graph expressing the flow of the code of the entire process. That then has reductions applied to carve paths around any irrelevant implementation details. Some things are _universally_ irrelevant, like you'll want microtasks to flow context in a fairly universal way, but as things get to higher levels of abstraction from the instructions running on the cpu the more path decisions become subjective.","format":"org.matrix.custom.html","formatted_body":"Context is basically just a mirror of the directed acyclic graph expressing the flow of the code of the entire process. That then has reductions applied to carve paths around any irrelevant implementation details. Some things are <em>universally</em> irrelevant, like you'll want microtasks to flow context in a fairly universal way, but as things get to higher levels of abstraction from the instructions running on the cpu the more path decisions become subjective.","m.mentions":{},"msgtype":"m.text"},"ts":1716208289008,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$RrJTnOCSvOK3G2ifOodXHXJJ383Cgv9IEpVJwB0zW1I"},
{"content":{"body":"> <@littledan:matrix.org> I've asked two questions that I don't yet know the answer to:\n> - How are we handling merges, given that both contexts are often relevant (and in general this forms a big tree--there are more than two relevant things)?\n> - How could per-variable handling scale, when you have a lot of different libraries and a lot of different variables and they're all supposed to fit together? It's easier for me to understand \"two classes of variables\".\n\nstill looking forward to answers to these questions","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$RkU59_v3QhSPT4Vp7YhfMuaHE5NatcN9FbwysWETTd8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><p>I've asked two questions that I don't yet know the answer to:</p>\n<ul>\n<li>How are we handling merges, given that both contexts are often relevant (and in general this forms a big tree--there are more than two relevant things)?</li>\n<li>How could per-variable handling scale, when you have a lot of different libraries and a lot of different variables and they're all supposed to fit together? It's easier for me to understand \"two classes of variables\".</li>\n</ul>\n</blockquote></mx-reply>still looking forward to answers to these questions","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$RkU59_v3QhSPT4Vp7YhfMuaHE5NatcN9FbwysWETTd8"}},"msgtype":"m.text"},"ts":1716208329775,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AWQAIHFUJy6BlInG_BL_M4ZZkwsTCGEYeci0e2G2Orw"},
{"content":{"body":"> <@littledan:matrix.org> cool, sounds like we're all agreeing, \"JS shouldn't create empty contexts\". This doesn't resolve the \"two causes\" point which your document so clearly lays out.\n\nAre you referring to call versus continuation context in my doc?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$IPkOZWd9D2WjlvgtW3JZGX1GJHkdyS7yvjmlsWXVTn4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>cool, sounds like we're all agreeing, \"JS shouldn't create empty contexts\". This doesn't resolve the \"two causes\" point which your document so clearly lays out.</blockquote></mx-reply>Are you referring to call versus continuation context in my doc?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$IPkOZWd9D2WjlvgtW3JZGX1GJHkdyS7yvjmlsWXVTn4"}},"msgtype":"m.text"},"ts":1716208332390,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$v3tbeCD9nyT2Gx2IGmfWLF29qeQFee9kLDFrdEpGotY"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1716208345318,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1bkEj2QKBJtR-rAFoQ1drwDXGuia4ieMOrCY7Tecv6E"},
{"content":{"body":"(I think)","m.mentions":{},"msgtype":"m.text"},"ts":1716208354458,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MOdv78NDS2JdBZ7ua4ayacSJu-C4eXtbdex21JxOklE"},
{"content":{"body":"Ah, I've said a few times that particular point is far less critical than the ability to flow through awaits.","m.mentions":{},"msgtype":"m.text"},"ts":1716208367473,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$O_5XeVpyWV6N5f8ufe_r22UcgZUzWyNK4RfPPfdqY_Y"},
{"content":{"body":"The call versus continuation context thing is basically just differentiating between the sync code within a `store.run(...)` from anything it has propagated that context into.","format":"org.matrix.custom.html","formatted_body":"The call versus continuation context thing is basically just differentiating between the sync code within a <code>store.run(...)</code> from anything it has propagated that context into.","m.mentions":{},"msgtype":"m.text"},"ts":1716208397713,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$HOwNT8nWuixRdubgGwnfic_Y5nlRpn6QajLch6BZxa8"},
{"content":{"body":"in the terms you set up, it sounds like you're saying, \"we should switch from call to continuation when it comes to await\"","m.mentions":{},"msgtype":"m.text"},"ts":1716208415396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OC4UtbYGkeOvdlvH5e7dJybDUuNuaS9JzCq5eKgO_Dg"},
{"content":{"body":"and what I'm missing is the understanding of why that's not a meaningful loss of information (given that it's useful for establishing a certain sense of parentage)","m.mentions":{},"msgtype":"m.text"},"ts":1716208455470,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PkT7yONKlZAoxZjptbKJmre4px6C_Y66izGmPTMzlgM"},
{"content":{"body":"We create a span and store it in the context with `store.run(span, ...)`. If inside the function given to that we then _immediately_ create another span because some _other_ instrumented function was called synchronously, we would consider that a child-of relationship and link that accordingly. But if it happened within an async continuation then it is a follows-from relationship. So we differentiate the sync code from the continuations.","format":"org.matrix.custom.html","formatted_body":"We create a span and store it in the context with <code>store.run(span, ...)</code>. If inside the function given to that we then <em>immediately</em> create another span because some <em>other</em> instrumented function was called synchronously, we would consider that a child-of relationship and link that accordingly. But if it happened within an async continuation then it is a follows-from relationship. So we differentiate the sync code from the continuations.","m.mentions":{},"msgtype":"m.text"},"ts":1716208493403,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$48SKRqv_setYOwCJR0LdHoPk78lw36ud13ZUH628upc"},
{"content":{"body":"We can do that easily enough by just wrapping the store runs with a global flag like this: https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e/#file-span-js-L66-L70","m.mentions":{},"msgtype":"m.text"},"ts":1716208557579,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$T1-6yS2JdV2w5fLL0AKRSzx4hl4rZ90-hg8kS2qxLj4"},
{"content":{"body":"wait, if we go with resolution context, and we don't change how the current API works otherwise, we'd run into this. Is this what we want?\n```js\nawait asyncVar.run(\"foo\", async () => {\n    await doSomethingHere();\n});\n\nconsole.log(asyncVar.get()) // \"foo\"\n```","format":"org.matrix.custom.html","formatted_body":"<p>wait, if we go with resolution context, and we don't change how the current API works otherwise, we'd run into this. Is this what we want?</p>\n<pre><code class=\"language-js\">await asyncVar.run(\"foo\", async () =&gt; {\n    await doSomethingHere();\n});\n\nconsole.log(asyncVar.get()) // \"foo\"\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716208593340,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UXpLKFiG0pi_T1UlmZdmyfOK67EWyFpyWc0kRB14oi4"},
{"content":{"body":"So it's not _critical_ that the API does the whole two paths thing. Like I've said before, what is in my doc is essentially the ideal from APM perspective, but quite possibly has things which shouldn't actually exist at language level and should just be done externally. But we're aiming for a balance that anything we need to do externally is as low-cost as possible, because what we have _right now_ is _very_ expensive.","format":"org.matrix.custom.html","formatted_body":"So it's not <em>critical</em> that the API does the whole two paths thing. Like I've said before, what is in my doc is essentially the ideal from APM perspective, but quite possibly has things which shouldn't actually exist at language level and should just be done externally. But we're aiming for a balance that anything we need to do externally is as low-cost as possible, because what we have <em>right now</em> is <em>very</em> expensive.","m.mentions":{},"msgtype":"m.text"},"ts":1716208674474,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$vLUEaNypBL1SlxDcALFVF5YbAWs_Z9JUx5uhsta_uJI"},
{"content":{"body":"> <@abotella:igalia.com> wait, if we go with resolution context, and we don't change how the current API works otherwise, we'd run into this. Is this what we want?\n> ```js\n> await asyncVar.run(\"foo\", async () => {\n>     await doSomethingHere();\n> });\n> \n> console.log(asyncVar.get()) // \"foo\"\n> ```\n\nYes. That is actually what users keep telling me they are _expecting_.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$UXpLKFiG0pi_T1UlmZdmyfOK67EWyFpyWc0kRB14oi4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br><p>wait, if we go with resolution context, and we don't change how the current API works otherwise, we'd run into this. Is this what we want?</p>\n<pre><code class=\"language-js\">await asyncVar.run(\"foo\", async () =&gt; {\n    await doSomethingHere();\n});\n\nconsole.log(asyncVar.get()) // \"foo\"\n</code></pre>\n</blockquote></mx-reply>Yes. That is actually what users keep telling me they are <em>expecting</em>.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UXpLKFiG0pi_T1UlmZdmyfOK67EWyFpyWc0kRB14oi4"}},"msgtype":"m.text"},"ts":1716208707038,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$2EcBVuanDELbtF-R0YQCsVt-TGdwVBXolmCJJgq4vHY"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes. That is actually what users keep telling me they are _expecting_.\n\nthat is a very different behavior from the sync case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2EcBVuanDELbtF-R0YQCsVt-TGdwVBXolmCJJgq4vHY?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yes. That is actually what users keep telling me they are <em>expecting</em>.</blockquote></mx-reply>that is a very different behavior from the sync case","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2EcBVuanDELbtF-R0YQCsVt-TGdwVBXolmCJJgq4vHY"}},"msgtype":"m.text"},"ts":1716208721847,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xuedf2mKS_2x2xemaVKZQrfAmGrGloaSRQKZ-F4v9wM"},
{"content":{"body":"I know about the expense of PromiseHooks and patching all the libraries (which we all definitely want to resolve); what kind of expense is related to this issue that you're talking about now?","m.mentions":{},"msgtype":"m.text"},"ts":1716208737901,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zjEsJwCW-C6ot7XZE04cuIlbUPu9WdwcO-BtJj38HqE"},
{"content":{"body":"The issue posted earlier is a user expecting that, and I get people making the same complaint about ALS someone or other every other week or so.","m.mentions":{},"msgtype":"m.text"},"ts":1716208741638,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$pTCBhxJopDmn660PVr_saiealZ-olbNjh5f1zYMiK7o"},
{"content":{"body":"I'm pretty sure if we'll get a bunch of complaints in the other direction if you change it; this is just a difficult feature to have any intuition for","m.mentions":{},"msgtype":"m.text"},"ts":1716208777426,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$S7B_3AeJEnHFSe9v0ElqX3mfYYGujCxogYRubhPWfM4"},
{"content":{"body":"(that's not an argument one way or another0","m.mentions":{},"msgtype":"m.text"},"ts":1716208790156,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B9W7UZa3l9DxhuXpgmRcNDW_mXHfr93JahYF-J0QNLE"},
{"content":{"body":"> <@littledan:matrix.org> I know about the expense of PromiseHooks and patching all the libraries (which we all definitely want to resolve); what kind of expense is related to this issue that you're talking about now?\n\nJust the general expense of _all_ the stuff we have to do. Like I pointed out before that we presently need to keep a list of all spans in-memory from the lifetime of the whole request as we don't know how to do follows-from relationships otherwise.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$zjEsJwCW-C6ot7XZE04cuIlbUPu9WdwcO-BtJj38HqE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I know about the expense of PromiseHooks and patching all the libraries (which we all definitely want to resolve); what kind of expense is related to this issue that you&#39;re talking about now?</blockquote></mx-reply>Just the general expense of <em>all</em> the stuff we have to do. Like I pointed out before that we presently need to keep a list of all spans in-memory from the lifetime of the whole request as we don't know how to do follows-from relationships otherwise.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zjEsJwCW-C6ot7XZE04cuIlbUPu9WdwcO-BtJj38HqE"}},"msgtype":"m.text"},"ts":1716208807000,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$CgnVoaE_cEiWRzyOleuL3EGXqAvxOpmQjk1JlxYP3NQ"},
{"content":{"body":"```js\nfunction syncCase() {\n    asyncVar.run(\"foo\", () => {\n        doSomethingHere()\n    });\n\n    console.log(asyncVar.get());  // undefined\n}\n\nasync function asyncCase() {\n    await asyncVar.run(\"foo\", async () => {\n        await doSomethingHere()\n    });\n\n    console.log(asyncVar.get());  // \"foo\"\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">function syncCase() {\n    asyncVar.run(\"foo\", () =&gt; {\n        doSomethingHere()\n    });\n\n    console.log(asyncVar.get());  // undefined\n}\n\nasync function asyncCase() {\n    await asyncVar.run(\"foo\", async () =&gt; {\n        await doSomethingHere()\n    });\n\n    console.log(asyncVar.get());  // \"foo\"\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716208834012,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cKEN-lDElgk3yott9DPOq_uXz7YqQ9BvnfPEw7s9BKE"},
{"content":{"body":"> <@abotella:igalia.com> that is a very different behavior from the sync case\n\nIt is, but it's _identical_ to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$xuedf2mKS_2x2xemaVKZQrfAmGrGloaSRQKZ-F4v9wM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>that is a very different behavior from the sync case</blockquote></mx-reply>It is, but it's <em>identical</em> to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xuedf2mKS_2x2xemaVKZQrfAmGrGloaSRQKZ-F4v9wM"}},"msgtype":"m.text"},"ts":1716208874981,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$5n0t_KjwoikCeL2f9dR1fN5eMpQyiOS73l-QngzHU-M"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Just the general expense of _all_ the stuff we have to do. Like I pointed out before that we presently need to keep a list of all spans in-memory from the lifetime of the whole request as we don't know how to do follows-from relationships otherwise.\n\noh right, this part. I don't get it, can't you offload that processing to happen later? or this would require a change in the Otel protocol?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$CgnVoaE_cEiWRzyOleuL3EGXqAvxOpmQjk1JlxYP3NQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Just the general expense of <em>all</em> the stuff we have to do. Like I pointed out before that we presently need to keep a list of all spans in-memory from the lifetime of the whole request as we don't know how to do follows-from relationships otherwise.</blockquote></mx-reply>oh right, this part. I don't get it, can't you offload that processing to happen later? or this would require a change in the Otel protocol?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CgnVoaE_cEiWRzyOleuL3EGXqAvxOpmQjk1JlxYP3NQ"}},"msgtype":"m.text"},"ts":1716208881355,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BUvX50ChJY9vleUe1YG3LAe-8XDTYEjtf39F9N177dw"},
{"content":{"body":"It would require a change in the OTel spec which they've basically said _unequivocally no_ to ever changing. 😐️","format":"org.matrix.custom.html","formatted_body":"It would require a change in the OTel spec which they've basically said <em>unequivocally no</em> to ever changing. 😐️","m.mentions":{},"msgtype":"m.text"},"ts":1716208950523,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$AWGBkYXMcG22z-WwcOvvlaKdoWjUI6WW60dSvEQDibI"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It is, but it's _identical_ to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.\n\nsure, people rewriting code from callbacks to promises might prefer resolution time, but what about people writing async/await code from scratch? Do we know what they need? Would we be breaking them?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$5n0t_KjwoikCeL2f9dR1fN5eMpQyiOS73l-QngzHU-M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It is, but it's <em>identical</em> to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.</blockquote></mx-reply>sure, people rewriting code from callbacks to promises might prefer resolution time, but what about people writing async/await code from scratch? Do we know what they need? Would we be breaking them?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5n0t_KjwoikCeL2f9dR1fN5eMpQyiOS73l-QngzHU-M"}},"msgtype":"m.text"},"ts":1716208955687,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xG_pP60Uu_Zg1MIaT7yqOSXcuD-_0ZUrmgFLnxm7QoY"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It is, but it's _identical_ to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.\n\nis this always the form of this sort of migration, or do people also have this confusion with greenfield promise apps?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$5n0t_KjwoikCeL2f9dR1fN5eMpQyiOS73l-QngzHU-M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It is, but it's <em>identical</em> to how the same code rewritten with callbacks flows, and that's the confusion users are running into. We keep seeing people rewriting their apps with promises and then being confused when the context doesn't flow the way they're used to anymore.</blockquote></mx-reply>is this always the form of this sort of migration, or do people also have this confusion with greenfield promise apps?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5n0t_KjwoikCeL2f9dR1fN5eMpQyiOS73l-QngzHU-M"}},"msgtype":"m.text"},"ts":1716208997802,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gEFgpSswTkLLNOeQeFjc8fQioAPsBzUJVI_cBTkv9Wo"},
{"content":{"body":"Well, as I said the other day, if we follow resolution path that follows a causation path from the creation of the promise so we still actually get the same context flow unless someone goes and changes the context in the middle.","m.mentions":{},"msgtype":"m.text"},"ts":1716209020533,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-BRcJp_3d8apgknPB7ZXdcuESyli88pBioE7hiEVIYA"},
{"content":{"body":"> <@stephenbelanger:matrix.org> It would require a change in the OTel spec which they've basically said _unequivocally no_ to ever changing. 😐️\n\nCan you say more about the interactions with upstream OTel folks? Has anyone offered to make an efficient open-source collector to actually take advantage of this protocol improvement?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$AWGBkYXMcG22z-WwcOvvlaKdoWjUI6WW60dSvEQDibI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>It would require a change in the OTel spec which they've basically said <em>unequivocally no</em> to ever changing. 😐️</blockquote></mx-reply>Can you say more about the interactions with upstream OTel folks? Has anyone offered to make an efficient open-source collector to actually take advantage of this protocol improvement?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$AWGBkYXMcG22z-WwcOvvlaKdoWjUI6WW60dSvEQDibI"}},"msgtype":"m.text"},"ts":1716209025461,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UEoUKsKyxMJ-ZlzBZ_ZSvyDsGq_ReELBxkmfQ7ytdg4"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Well, as I said the other day, if we follow resolution path that follows a causation path from the creation of the promise so we still actually get the same context flow unless someone goes and changes the context in the middle.\n\nin the web specs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-BRcJp_3d8apgknPB7ZXdcuESyli88pBioE7hiEVIYA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Well, as I said the other day, if we follow resolution path that follows a causation path from the creation of the promise so we still actually get the same context flow unless someone goes and changes the context in the middle.</blockquote></mx-reply>in the web specs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-BRcJp_3d8apgknPB7ZXdcuESyli88pBioE7hiEVIYA"}},"msgtype":"m.text"},"ts":1716209092853,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RG9cWsrN8ewG1cIqLUM8Bu3OxExhYnjpUo-G4yDOgRg"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Well, as I said the other day, if we follow resolution path that follows a causation path from the creation of the promise so we still actually get the same context flow unless someone goes and changes the context in the middle.\n\n * in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-BRcJp_3d8apgknPB7ZXdcuESyli88pBioE7hiEVIYA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Well, as I said the other day, if we follow resolution path that follows a causation path from the creation of the promise so we still actually get the same context flow unless someone goes and changes the context in the middle.</blockquote></mx-reply> * in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","m.mentions":{},"m.new_content":{"body":"in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","format":"org.matrix.custom.html","formatted_body":"in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$RG9cWsrN8ewG1cIqLUM8Bu3OxExhYnjpUo-G4yDOgRg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716209100411,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xJ6xhkM5s4jVnQbAphk68-FMxp3cbXxt_LUliTPRW1Y"},
{"content":{"body":"> <@littledan:matrix.org> is this always the form of this sort of migration, or do people also have this confusion with greenfield promise apps?\n\nI see the same confusion with people doing this with new projects too. Moreso from conversions, but also our customers tend to be enterprises that have ancient codebases they've been maintaining forever, so there's a clear bias to who we're talking to regularly.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$gEFgpSswTkLLNOeQeFjc8fQioAPsBzUJVI_cBTkv9Wo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>is this always the form of this sort of migration, or do people also have this confusion with greenfield promise apps?</blockquote></mx-reply>I see the same confusion with people doing this with new projects too. Moreso from conversions, but also our customers tend to be enterprises that have ancient codebases they've been maintaining forever, so there's a clear bias to who we're talking to regularly.","m.mentions":{"user_ids":["@littledan:matrix.org","@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$gEFgpSswTkLLNOeQeFjc8fQioAPsBzUJVI_cBTkv9Wo"}},"msgtype":"m.text"},"ts":1716209109720,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$GXQ4BuGYis_FBlsEfw4kjeAI6EjSyMlhaF69T-zSNmA"},
{"content":{"body":"and all customer complaints are private? Can you talk with any of them and ask them if they'd be willing to be in touch with us?","m.mentions":{},"msgtype":"m.text"},"ts":1716209136594,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MbogpAdpHZO0ozroyKIjglVRnsFAEwvMTFmnaaGEJWc"},
{"content":{"body":"> <@littledan:matrix.org> Can you say more about the interactions with upstream OTel folks? Has anyone offered to make an efficient open-source collector to actually take advantage of this protocol improvement?\n\nCan't be done in the collector because the data is needed in-process for distributed tracing headers wherever outgoing activity may occur.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$UEoUKsKyxMJ-ZlzBZ_ZSvyDsGq_ReELBxkmfQ7ytdg4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Can you say more about the interactions with upstream OTel folks? Has anyone offered to make an efficient open-source collector to actually take advantage of this protocol improvement?</blockquote></mx-reply>Can't be done in the collector because the data is needed in-process for distributed tracing headers wherever outgoing activity may occur.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$UEoUKsKyxMJ-ZlzBZ_ZSvyDsGq_ReELBxkmfQ7ytdg4"}},"msgtype":"m.text"},"ts":1716209170136,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$0E0OrmQcxMOJWgtUqHFXW1McbXUqMMJLprMU3IyOKIk"},
{"content":{"body":"> <@abotella:igalia.com> in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function\n\nTrue, but then it wasn't _caused_ by that function so probably should still be keeping the registration context. And in any case this is what bind is for--in exceptional cases a user (or possibly even the runtime sometimes) can decide to apply a bind to capture the context at a _different_ point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$RG9cWsrN8ewG1cIqLUM8Bu3OxExhYnjpUo-G4yDOgRg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>in web APIs there are cases where you can get a promise from somewhere else, that wasn't created in a data flow starting from the current function</blockquote></mx-reply>True, but then it wasn't <em>caused</em> by that function so probably should still be keeping the registration context. And in any case this is what bind is for--in exceptional cases a user (or possibly even the runtime sometimes) can decide to apply a bind to capture the context at a <em>different</em> point.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$RG9cWsrN8ewG1cIqLUM8Bu3OxExhYnjpUo-G4yDOgRg"}},"msgtype":"m.text"},"ts":1716209281907,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$jnD68WMU4zeWUgDmVk_LQRaTef1ngMr7TYj_kyARQkk"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Can't be done in the collector because the data is needed in-process for distributed tracing headers wherever outgoing activity may occur.\n\nmaybe I'm using the wrong terms, but it sounds like you had some idea for an improvement which was rejected. What was the idea, and how was it proposed?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$0E0OrmQcxMOJWgtUqHFXW1McbXUqMMJLprMU3IyOKIk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Can't be done in the collector because the data is needed in-process for distributed tracing headers wherever outgoing activity may occur.</blockquote></mx-reply>maybe I'm using the wrong terms, but it sounds like you had some idea for an improvement which was rejected. What was the idea, and how was it proposed?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$0E0OrmQcxMOJWgtUqHFXW1McbXUqMMJLprMU3IyOKIk"}},"msgtype":"m.text"},"ts":1716209331887,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1Yyo1IyWEzpkIdB-T82UreEz-9t73-s16x9I6T1naYk"},
{"content":{"body":"how would you bind a promise?","m.mentions":{},"msgtype":"m.text"},"ts":1716209342097,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$vC5pJ0BHvsn45xLO3U1SKgKxqiPg5Y1qgA8b37gr4E0"},
{"content":{"body":"> <@littledan:matrix.org> and all customer complaints are private? Can you talk with any of them and ask them if they'd be willing to be in touch with us?\n\nYes, I'm trying to talk with some of them right now. Getting time from enterprises to talk about things like this can be a bit time-consuming so we'll see how that goes...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$MbogpAdpHZO0ozroyKIjglVRnsFAEwvMTFmnaaGEJWc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>and all customer complaints are private? Can you talk with any of them and ask them if they&#39;d be willing to be in touch with us?</blockquote></mx-reply>Yes, I'm trying to talk with some of them right now. Getting time from enterprises to talk about things like this can be a bit time-consuming so we'll see how that goes...","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MbogpAdpHZO0ozroyKIjglVRnsFAEwvMTFmnaaGEJWc"}},"msgtype":"m.text"},"ts":1716209358151,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$wey54T_g9SrIsat2qGP5bmESABYvLZdxpLL2kbbeEc8"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes, I'm trying to talk with some of them right now. Getting time from enterprises to talk about things like this can be a bit time-consuming so we'll see how that goes...\n\nthanks, I appreciate that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wey54T_g9SrIsat2qGP5bmESABYvLZdxpLL2kbbeEc8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yes, I'm trying to talk with some of them right now. Getting time from enterprises to talk about things like this can be a bit time-consuming so we'll see how that goes...</blockquote></mx-reply>thanks, I appreciate that","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wey54T_g9SrIsat2qGP5bmESABYvLZdxpLL2kbbeEc8"}},"msgtype":"m.text"},"ts":1716209375756,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ASr1P0SuY9De3KgwmvPDyYIvywG0rd2I4vj_T6cF71Q"},
{"content":{"body":"> <@littledan:matrix.org> maybe I'm using the wrong terms, but it sounds like you had some idea for an improvement which was rejected. What was the idea, and how was it proposed?\n\nI've had some conversations with them about the current shape of _their_ context management system. It's _not_ multi-tenant and instead carries everything in one big immutably-cloned map tree thing, which adapts very poorly to AsyncLocalStorage, but they refuse to change it because spec says it should work this certain way and seem to believe they got everything right on the first try so nothing can ever change. 😐️","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$1Yyo1IyWEzpkIdB-T82UreEz-9t73-s16x9I6T1naYk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>maybe I'm using the wrong terms, but it sounds like you had some idea for an improvement which was rejected. What was the idea, and how was it proposed?</blockquote></mx-reply>I've had some conversations with them about the current shape of <em>their</em> context management system. It's <em>not</em> multi-tenant and instead carries everything in one big immutably-cloned map tree thing, which adapts very poorly to AsyncLocalStorage, but they refuse to change it because spec says it should work this certain way and seem to believe they got everything right on the first try so nothing can ever change. 😐️","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1Yyo1IyWEzpkIdB-T82UreEz-9t73-s16x9I6T1naYk"}},"msgtype":"m.text"},"ts":1716209490609,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$i9PCi2RYOg6-ueIvrVMdTWrZX0tOwmGogVbb5KET4gc"},
{"content":{"body":"The API is _super_ convoluted.","format":"org.matrix.custom.html","formatted_body":"The API is <em>super</em> convoluted.","m.mentions":{},"msgtype":"m.text"},"ts":1716209500141,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$MSHV33sBOlLpdoPaRE3OcMkB6u-h1C-yZQRtugKkJo8"},
{"content":{"body":"The context is a map, which you make clones of every time you attempt to modify it, but modifying it doesn't change what the _active_ value is, it just changes what's in your copy. Then you can eventually _activate_ it and it will give you a token to deactivate it at some later point.","format":"org.matrix.custom.html","formatted_body":"The context is a map, which you make clones of every time you attempt to modify it, but modifying it doesn't change what the <em>active</em> value is, it just changes what's in your copy. Then you can eventually <em>activate</em> it and it will give you a token to deactivate it at some later point.","m.mentions":{},"msgtype":"m.text"},"ts":1716209567017,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$hJHSLZ8IdLmFbO0C_6ZMb7tCIyu_pdqNeJ2JjPEYUjY"},
{"content":{"body":"...that sounds analogous semantically to what we have","m.mentions":{},"msgtype":"m.text"},"ts":1716209622663,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$D7x_S1h91tfzq8R3NapgLwANTNQ79VcYDHR1YzMQknw"},
{"content":{"body":"_Sort of_...but inside out.","format":"org.matrix.custom.html","formatted_body":"<em>Sort of</em>...but inside out.","m.mentions":{},"msgtype":"m.text"},"ts":1716209637281,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$_V3ijAmldVhriNHahbwy9j3wyI4ztL8J4T7mRo1SCKA"},
{"content":{"body":"where can I learn more about their context system and the discussion around changing it?","m.mentions":{},"msgtype":"m.text"},"ts":1716209641256,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KpUhcG9RJ-HwbQFtb0LttYwUb0X0QWNU6UMCsJdVV3U"},
{"content":{"body":"You pass around the contexts yourself rather than the system managing it for you.","m.mentions":{},"msgtype":"m.text"},"ts":1716209653437,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$lhUc7BQp-P0vVZxR2x-WO7Toe5zrnMRhJ350Lyr5fdE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> True, but then it wasn't _caused_ by that function so probably should still be keeping the registration context. And in any case this is what bind is for--in exceptional cases a user (or possibly even the runtime sometimes) can decide to apply a bind to capture the context at a _different_ point.\n\nThe APIs I'm thinking of are things like https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/closed, or https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/ready. I don't see how those could possibly made to work with resolution time, unless every user knows to work around them","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$jnD68WMU4zeWUgDmVk_LQRaTef1ngMr7TYj_kyARQkk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>True, but then it wasn't <em>caused</em> by that function so probably should still be keeping the registration context. And in any case this is what bind is for--in exceptional cases a user (or possibly even the runtime sometimes) can decide to apply a bind to capture the context at a <em>different</em> point.</blockquote></mx-reply>The APIs I'm thinking of are things like https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultReader/closed, or https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/ready. I don't see how those could possibly made to work with resolution time, unless every user knows to work around them","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$jnD68WMU4zeWUgDmVk_LQRaTef1ngMr7TYj_kyARQkk"}},"msgtype":"m.text"},"ts":1716209660469,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Ore8I09eHC0dJ2kAIn18gjCDcnDT7AhyoBP2rZ8MLmU"},
{"content":{"body":"The ReadableStream `closed` thing seems like it would flow from whatever caused the close. Likely the final interaction, or if none is visible than just the creation of the stream itself.\n\nThe second seems to me like clearly the context would just be the root context as it causally flows from the document loading, as far as I can tell?","format":"org.matrix.custom.html","formatted_body":"<p>The ReadableStream <code>closed</code> thing seems like it would flow from whatever caused the close. Likely the final interaction, or if none is visible than just the creation of the stream itself.</p>\n<p>The second seems to me like clearly the context would just be the root context as it causally flows from the document loading, as far as I can tell?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716209873680,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$FX-CmR9V9bkIX46DHmijv-fuMOZRno53W0SNOczDLk0"},
{"content":{"body":"regardless of where they flow from, it's almost certainly not from the function in which they're awaited","m.mentions":{},"msgtype":"m.text"},"ts":1716209921507,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$pU3VhyTXlWtlFpnuKZMMs54eJXSzibyb-mQS6xcLZHg"},
{"content":{"body":"so wouldn't that lose the context before the await?","m.mentions":{},"msgtype":"m.text"},"ts":1716209931632,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$_IEZiKzr77M5ziwsue930vx13FcUWaZwLEJ5tRAayfE"},
{"content":{"body":"Probably, but that's what bind is for. 🤷","m.mentions":{},"msgtype":"m.text"},"ts":1716209993103,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$wPjQv_jnDmVupLTsY2NJdeO97vo-pb0Aca-fPOVcWIo"},
{"content":{"body":"> <@stephenbelanger:matrix.org> You pass around the contexts yourself rather than the system managing it for you.\n\nsure, so, what's the problem in practice with this? does it actually differ in what can be expressed?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$lhUc7BQp-P0vVZxR2x-WO7Toe5zrnMRhJ350Lyr5fdE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>You pass around the contexts yourself rather than the system managing it for you.</blockquote></mx-reply>sure, so, what's the problem in practice with this? does it actually differ in what can be expressed?","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lhUc7BQp-P0vVZxR2x-WO7Toe5zrnMRhJ350Lyr5fdE"}},"msgtype":"m.text"},"ts":1716210013917,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-6Xrzn9UoqhsHPdjjvYaba6FkvevQhwrgrM8vovi_Q8"},
{"content":{"body":"Could also possibly do some kind of special-casing that things which _would_ flow from somewhere that doesn't _have_ a context value could auto-bind differently or something like that.","format":"org.matrix.custom.html","formatted_body":"Could also possibly do some kind of special-casing that things which <em>would</em> flow from somewhere that doesn't <em>have</em> a context value could auto-bind differently or something like that.","m.mentions":{},"msgtype":"m.text"},"ts":1716210038089,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$7rK8nnTK_dVsGVLoiMBZixGEbChEQTLhjwVT2ioShYE"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Probably, but that's what bind is for. 🤷\n\nwe should anticipate that most people don't know how to use bind most of the time and just won't use it, IMO.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wPjQv_jnDmVupLTsY2NJdeO97vo-pb0Aca-fPOVcWIo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Probably, but that&#39;s what bind is for. 🤷</blockquote></mx-reply>we should anticipate that most people don't know how to use bind most of the time and just won't use it, IMO.","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wPjQv_jnDmVupLTsY2NJdeO97vo-pb0Aca-fPOVcWIo"}},"msgtype":"m.text"},"ts":1716210044149,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4aF2bM2kzJrRLxxW-aHMsxGiSiyiFFJHWulp_WFbgO8"},
{"content":{"body":"It's single-tenant and you pass the entire map around. It's basically like if only `AsyncContext.Snapshot` existed and `AsyncContext.Variable` did not.","format":"org.matrix.custom.html","formatted_body":"It's single-tenant and you pass the entire map around. It's basically like if only <code>AsyncContext.Snapshot</code> existed and <code>AsyncContext.Variable</code> did not.","m.mentions":{},"msgtype":"m.text"},"ts":1716210086091,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$gHbTfJSa5sblHF2D2pyhUqMSeLmpaO-GEvMzIVHW8CY"},
{"content":{"body":"OK, so OTel just uses one variable, that seems fine to me","m.mentions":{},"msgtype":"m.text"},"ts":1716210113593,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I_ONur1W8FC-NhWJRTCb-vDO6rU8HXtBQgXzzz7D_9Q"},
{"content":{"body":"I'm not yet understanding where things mismatch","m.mentions":{},"msgtype":"m.text"},"ts":1716210125915,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eyv6vUyhvmJkLGKF4BtUTYR6THdo8MihKCYDtz443-4"},
{"content":{"body":"did you ever explain this mismatch to them in writing?","m.mentions":{},"msgtype":"m.text"},"ts":1716210140904,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tF2vYmYEt2Zg4PPSXDFJW7-kX1qGQTgB-qYv-w1pkc4"},
{"content":{"body":"It's not that it's just one variable. It's _multiple_ variables, but they're all living in a single map you have to pass around yourself.","format":"org.matrix.custom.html","formatted_body":"It's not that it's just one variable. It's <em>multiple</em> variables, but they're all living in a single map you have to pass around yourself.","m.mentions":{},"msgtype":"m.text"},"ts":1716210157336,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$NUyybvAkXFSC5Sza5WLihK62DdMo_w4xNGvOWQPEy7M"},
{"content":{"body":"> <@littledan:matrix.org> did you ever explain this mismatch to them in writing?\n\nIn Slack conversations.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$tF2vYmYEt2Zg4PPSXDFJW7-kX1qGQTgB-qYv-w1pkc4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>did you ever explain this mismatch to them in writing?</blockquote></mx-reply>In Slack conversations.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tF2vYmYEt2Zg4PPSXDFJW7-kX1qGQTgB-qYv-w1pkc4"}},"msgtype":"m.text"},"ts":1716210184607,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$PFsFgQ986Hjz0GDCEa1iiFRQcDWkjoG6eqg3iSai3Uo"},
{"content":{"body":"The problem is in the mutable cloning thing. You're basically passing around many clones and you \"activate\" a particular clone at some point in time, so it's essentially like you're manually passing around a bunch of these snapshots all over the place manually, but still doing the same step of making it the \"active\" value it has stored globally.","m.mentions":{},"msgtype":"m.text"},"ts":1716210282798,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-2LzIFRCtGfKVlnwlEGCj7wuYcLo-NtgC4Jpmjpjqn4"},
{"content":{"body":" * The problem is in the mutable cloning thing. You're basically passing around many clones and you \"activate\" a particular clone at some point in time, so it's essentially like you're passing around a bunch of these snapshots all over the place manually, but still doing the same step of making it the \"active\" value it has stored globally.","m.mentions":{},"m.new_content":{"body":"The problem is in the mutable cloning thing. You're basically passing around many clones and you \"activate\" a particular clone at some point in time, so it's essentially like you're passing around a bunch of these snapshots all over the place manually, but still doing the same step of making it the \"active\" value it has stored globally.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-2LzIFRCtGfKVlnwlEGCj7wuYcLo-NtgC4Jpmjpjqn4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716210299297,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$x7vYqn4kRBhzyK0r4ogKZlU2gumb9oTPjMiISB5PzEQ"},
{"content":{"body":"> <@stephenbelanger:matrix.org> The problem is in the mutable cloning thing. You're basically passing around many clones and you \"activate\" a particular clone at some point in time, so it's essentially like you're passing around a bunch of these snapshots all over the place manually, but still doing the same step of making it the \"active\" value it has stored globally.\n\nI don't see how that differs meaningfully from what we have","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-2LzIFRCtGfKVlnwlEGCj7wuYcLo-NtgC4Jpmjpjqn4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>The problem is in the mutable cloning thing. You&#39;re basically passing around many clones and you &quot;activate&quot; a particular clone at some point in time, so it&#39;s essentially like you&#39;re passing around a bunch of these snapshots all over the place manually, but still doing the same step of making it the &quot;active&quot; value it has stored globally.</blockquote></mx-reply>I don't see how that differs meaningfully from what we have","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-2LzIFRCtGfKVlnwlEGCj7wuYcLo-NtgC4Jpmjpjqn4"}},"msgtype":"m.text"},"ts":1716210413076,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kqkbt8n_UMahgu1b_ecUZ2GSDLvzxRQ3cnNyf75g-xM"},
{"content":{"body":"Rather than holding values separately it stores them all together in this giant map and then lets you pass it around yourself, which means you have to be sure the flow is correct for _all_ the types of data within the store or you can cause problems.","format":"org.matrix.custom.html","formatted_body":"Rather than holding values separately it stores them all together in this giant map and then lets you pass it around yourself, which means you have to be sure the flow is correct for <em>all</em> the types of data within the store or you can cause problems.","m.mentions":{},"msgtype":"m.text"},"ts":1716210413700,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$eIgiaknzg7_I0wJAD5YevaO94iVtKqE0FfykVtQ4SQE"},
{"content":{"body":"> <@littledan:matrix.org> we should anticipate that most people don't know how to use bind most of the time and just won't use it, IMO.\n\n(that or only kind of know how to use bind, and end up using it defensively because they don't know which promises they can't await without breaking their context... meaning they break anything that relies on the causal-but-not-scoped propagation out of an `await`)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$4aF2bM2kzJrRLxxW-aHMsxGiSiyiFFJHWulp_WFbgO8?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />we should anticipate that most people don't know how to use bind most of the time and just won't use it, IMO.</blockquote></mx-reply>(that or only kind of know how to use bind, and end up using it defensively because they don't know which promises they can't await without breaking their context... meaning they break anything that relies on the causal-but-not-scoped propagation out of an <code>await</code>)","m.relates_to":{"m.in_reply_to":{"event_id":"$4aF2bM2kzJrRLxxW-aHMsxGiSiyiFFJHWulp_WFbgO8"}},"msgtype":"m.text"},"ts":1716210420359,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$ze3E-IFdz0wKMEG7TXG96eEIOgXR_vjx_wFiAq0pvVU"},
{"content":{"body":"> <@shaylew:matrix.org> (that or only kind of know how to use bind, and end up using it defensively because they don't know which promises they can't await without breaking their context... meaning they break anything that relies on the causal-but-not-scoped propagation out of an `await`)\n\nyes it would be horrible if people felt like they had to use bind defensively everywhere... what would the point be","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ze3E-IFdz0wKMEG7TXG96eEIOgXR_vjx_wFiAq0pvVU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@shaylew:matrix.org\">@shaylew:matrix.org</a><br>(that or only kind of know how to use bind, and end up using it defensively because they don't know which promises they can't await without breaking their context... meaning they break anything that relies on the causal-but-not-scoped propagation out of an <code>await</code>)</blockquote></mx-reply>yes it would be horrible if people felt like they had to use bind defensively everywhere... what would the point be","m.mentions":{"user_ids":["@shaylew:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ze3E-IFdz0wKMEG7TXG96eEIOgXR_vjx_wFiAq0pvVU"}},"msgtype":"m.text"},"ts":1716210449395,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ed5UU34a_um8Kce6UzhmKP2rvy0dW9ZgZt5JjSY8INg"},
{"content":{"body":"> <@littledan:matrix.org> I don't see how that differs meaningfully from what we have\n\nThe main difference is the activation token thing. You don't _replace_ the context, you activate any given context and get a token back when you do which you can call another API at some later point to deactivate it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kqkbt8n_UMahgu1b_ecUZ2GSDLvzxRQ3cnNyf75g-xM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I don't see how that differs meaningfully from what we have</blockquote></mx-reply>The main difference is the activation token thing. You don't <em>replace</em> the context, you activate any given context and get a token back when you do which you can call another API at some later point to deactivate it.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kqkbt8n_UMahgu1b_ecUZ2GSDLvzxRQ3cnNyf75g-xM"}},"msgtype":"m.text"},"ts":1716210570548,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$TXOb825A-kIeJBWUIvz5towuiDx1lSU19VtKmafW3nM"},
{"content":{"body":"It doesn't have any sort of `store.run(...)` scope, it just sets it for linear time and you manage it yourself.","format":"org.matrix.custom.html","formatted_body":"It doesn't have any sort of <code>store.run(...)</code> scope, it just sets it for linear time and you manage it yourself.","m.mentions":{},"msgtype":"m.text"},"ts":1716210619378,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$YuRi78Wpe1-DUm2BYmPM6rItz1IMN_8Cg1upJmrplUg"},
{"content":{"body":"so are there any usages of this API which are not \"well-balanced\"?","m.mentions":{},"msgtype":"m.text"},"ts":1716210650802,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZQfCNSsIo9UOowrUP0zu5YNttOKsba8eWJ6eCy32k88"},
{"content":{"body":"also at what level does this API exist? Is it just conceptual, or is it an actual thing in code which must be implemented per spec?","m.mentions":{},"msgtype":"m.text"},"ts":1716210675996,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HD--2J9v5H6ksTmitPvvf7kixpX1DC-i0OtVaOh5PNw"},
{"content":{"body":"It's an actual thing in code, and it's left to the user so there is most certainly misuses of it in the wild.","m.mentions":{},"msgtype":"m.text"},"ts":1716210710895,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$357SsXC0JVcNYAIPfp21w3oBHiKxaixX4LHazemf4i4"},
{"content":{"body":"I see. Where is this implemented?","m.mentions":{},"msgtype":"m.text"},"ts":1716210840964,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PkzPhIZq19ilkdwGIJk4Ea8AGxTgkYcTtoTnXzn_UiI"},
{"content":{"body":"Sorry I missed a large chunk of this conversation but I can expand a bit more on the await/resolve/reject issue. The key problem is sometimes what you really want is *both*. That is, sometimes after a promise settles, what you want is whatever the context was before you started waiting for it (resolve or reject), and sometimes what you want is whatever the context was when it was settled (resolve or reject). And sometimes you might actually want both at the same time","msgtype":"m.text"},"ts":1716211237979,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$V80qyc_ssOXAdk0NJLlXbA5fQVXEIhuwKPG6QZ_7Id0"},
{"content":{"body":"> <@jasnell:matrix.org> Sorry I missed a large chunk of this conversation but I can expand a bit more on the await/resolve/reject issue. The key problem is sometimes what you really want is *both*. That is, sometimes after a promise settles, what you want is whatever the context was before you started waiting for it (resolve or reject), and sometimes what you want is whatever the context was when it was settled (resolve or reject). And sometimes you might actually want both at the same time\n\nYeah, I can see how both are relevant. But also, you need to be right there to \"catch\" both of them before the next context inheritance happens (and presumably you'd choose one of them at that point), right?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$V80qyc_ssOXAdk0NJLlXbA5fQVXEIhuwKPG6QZ_7Id0?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>Sorry I missed a large chunk of this conversation but I can expand a bit more on the await/resolve/reject issue. The key problem is sometimes what you really want is *both*. That is, sometimes after a promise settles, what you want is whatever the context was before you started waiting for it (resolve or reject), and sometimes what you want is whatever the context was when it was settled (resolve or reject). And sometimes you might actually want both at the same time</blockquote></mx-reply>Yeah, I can see how both are relevant. But also, you need to be right there to \"catch\" both of them before the next context inheritance happens (and presumably you'd choose one of them at that point), right?","m.mentions":{"user_ids":["@jasnell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$V80qyc_ssOXAdk0NJLlXbA5fQVXEIhuwKPG6QZ_7Id0"}},"msgtype":"m.text"},"ts":1716211298158,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$q5N1vtbTBS7ZHMqZ497OvBxaEWTHxbqRAR6LyaQrPMA"},
{"content":{"body":"> <@littledan:matrix.org> I see. Where is this implemented?\n\nAll over the place, sadly. It starts [here](https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/context.ts) and then gets \"activated\" all over the place in instrumentation code or user code in various ways.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$PkzPhIZq19ilkdwGIJk4Ea8AGxTgkYcTtoTnXzn_UiI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I see. Where is this implemented?</blockquote></mx-reply>All over the place, sadly. It starts <a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/context.ts\">here</a> and then gets \"activated\" all over the place in instrumentation code or user code in various ways.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$PkzPhIZq19ilkdwGIJk4Ea8AGxTgkYcTtoTnXzn_UiI"}},"msgtype":"m.text"},"ts":1716211460403,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$b9rHum-NCbIgJz4fJxPO-slU4DC5_URyQTLvH02_0rE"},
{"content":{"body":"It's concept of \"multi-tenancy\" is just using symbol keys into the one big map.","m.mentions":{},"msgtype":"m.text"},"ts":1716211540121,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$y-Wk7tK-IgCj3I4PqMB8jtEd8Qd1S82hPYn-n3T_ukM"},
{"content":{"body":"Well, the choosing bit is difficult. Users don't always have the info the decide which to choose","msgtype":"m.text"},"ts":1716211544109,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$SY0VWOqfpt_piWl-ixfOhfoK_c1UDcgoLMNjjHydeYM"},
{"content":{"body":"Yeah, the _choosing_ part is specifically why I created the diagnostics channel integration.","format":"org.matrix.custom.html","formatted_body":"Yeah, the <em>choosing</em> part is specifically why I created the diagnostics channel integration.","m.mentions":{},"msgtype":"m.text"},"ts":1716211588011,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$Q6VKyfaDPFVxt-GXY95lKJlEPb5rW7aYEsaAyRIrsB4"},
{"content":{"body":"And have been pushing for something similar with my universal context management RFC.","m.mentions":{},"msgtype":"m.text"},"ts":1716211619454,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$rwFnQ7-kdmgs4ULTUWLGvLBtPtU3A_z4XE38ECNEIlc"},
{"content":{"body":"With WindowChannel.","m.mentions":{},"msgtype":"m.text"},"ts":1716211626501,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$TkrpAYzMHy2Y87nGTrK6Dd2r6ezer872xnjbKTDL-OM"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Apologies for the delay in sharing these docs. I needed to prune some company-specific bits and navigate our convoluted process for making Google Docs actually public. 😅\n> \n> The first doc is a bunch of explanation on the problems we have with existing attempts at context management and some possible solutions we're iterating on to solve these problems in a more flexible way. https://docs.google.com/document/d/1v8tMzV51Cuz32-60dhopoIMIxWfy_epOIRwoL5LmKVc/edit?usp=sharing\n> \n> The second doc is partly relevant in that it describes an integration between the Diagnostics Channel concept and context management for the purpose of providing control to users to decide in which ways they want to propagate context for their specific store around particular points defined by library code as possibly interesting. https://docs.google.com/document/d/1DTZ2C5BKsoVRnU_ihyi93blF3cxXIbqqcIaSYurhBRk/edit?usp=sharing\n> \n> I additionally have some slides from a recent internal talk I can also share which covers this overlap more briefly, and with specific examples. https://docs.google.com/presentation/d/1jYO45MudKGPOtir5hK0_wB7XS0D_ksLe4j5NvC8YfTc/edit?usp=sharing\n\nI'm referring to the docs in the this comment specifically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$I4TuLWIO3X_nWD1Yp6-MWRdxOLCqOWtvT5h_zixrxrM?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Apologies for the delay in sharing these docs. I needed to prune some company-specific bits and navigate our convoluted process for making Google Docs actually public. 😅<br/><br/>The first doc is a bunch of explanation on the problems we have with existing attempts at context management and some possible solutions we&#39;re iterating on to solve these problems in a more flexible way. https://docs.google.com/document/d/1v8tMzV51Cuz32-60dhopoIMIxWfy_epOIRwoL5LmKVc/edit?usp=sharing<br/><br/>The second doc is partly relevant in that it describes an integration between the Diagnostics Channel concept and context management for the purpose of providing control to users to decide in which ways they want to propagate context for their specific store around particular points defined by library code as possibly interesting. https://docs.google.com/document/d/1DTZ2C5BKsoVRnU_ihyi93blF3cxXIbqqcIaSYurhBRk/edit?usp=sharing<br/><br/>I additionally have some slides from a recent internal talk I can also share which covers this overlap more briefly, and with specific examples. https://docs.google.com/presentation/d/1jYO45MudKGPOtir5hK0_wB7XS0D_ksLe4j5NvC8YfTc/edit?usp=sharing</blockquote></mx-reply>I'm referring to the docs in the this comment specifically.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$I4TuLWIO3X_nWD1Yp6-MWRdxOLCqOWtvT5h_zixrxrM"}},"msgtype":"m.text"},"ts":1716211703984,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$pAm0qcHb_twuf3r3cZX63S4mDDWHnSytWTvUuXZLOKg"},
{"content":{"body":" * I'm referring to the docs in this comment specifically.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$I4TuLWIO3X_nWD1Yp6-MWRdxOLCqOWtvT5h_zixrxrM?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Apologies for the delay in sharing these docs. I needed to prune some company-specific bits and navigate our convoluted process for making Google Docs actually public. 😅<br><br>The first doc is a bunch of explanation on the problems we have with existing attempts at context management and some possible solutions we're iterating on to solve these problems in a more flexible way. https://docs.google.com/document/d/1v8tMzV51Cuz32-60dhopoIMIxWfy_epOIRwoL5LmKVc/edit?usp=sharing<br><br>The second doc is partly relevant in that it describes an integration between the Diagnostics Channel concept and context management for the purpose of providing control to users to decide in which ways they want to propagate context for their specific store around particular points defined by library code as possibly interesting. https://docs.google.com/document/d/1DTZ2C5BKsoVRnU_ihyi93blF3cxXIbqqcIaSYurhBRk/edit?usp=sharing<br><br>I additionally have some slides from a recent internal talk I can also share which covers this overlap more briefly, and with specific examples. https://docs.google.com/presentation/d/1jYO45MudKGPOtir5hK0_wB7XS0D_ksLe4j5NvC8YfTc/edit?usp=sharing</blockquote></mx-reply> * I'm referring to the docs in this comment specifically.","m.mentions":{},"m.new_content":{"body":"I'm referring to the docs in this comment specifically.","format":"org.matrix.custom.html","formatted_body":"I'm referring to the docs in this comment specifically.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$pAm0qcHb_twuf3r3cZX63S4mDDWHnSytWTvUuXZLOKg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716211718899,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$bnkBjl-skbeOBdDrLJJf-cero0oidgPbOy9eRy_ylco"},
{"content":{"body":"> <@stephenbelanger:matrix.org> So it's not _critical_ that the API does the whole two paths thing. Like I've said before, what is in my doc is essentially the ideal from APM perspective, but quite possibly has things which shouldn't actually exist at language level and should just be done externally. But we're aiming for a balance that anything we need to do externally is as low-cost as possible, because what we have _right now_ is _very_ expensive.\n\nJames M Snell: would be great to get your take on this comment, outlining a possible policy to deal with the two contexts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$vLUEaNypBL1SlxDcALFVF5YbAWs_Z9JUx5uhsta_uJI?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>So it's not <em>critical</em> that the API does the whole two paths thing. Like I've said before, what is in my doc is essentially the ideal from APM perspective, but quite possibly has things which shouldn't actually exist at language level and should just be done externally. But we're aiming for a balance that anything we need to do externally is as low-cost as possible, because what we have <em>right now</em> is <em>very</em> expensive.</blockquote></mx-reply><a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: would be great to get your take on this comment, outlining a possible policy to deal with the two contexts","m.mentions":{"user_ids":["@stephenbelanger:matrix.org","@jasnell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$vLUEaNypBL1SlxDcALFVF5YbAWs_Z9JUx5uhsta_uJI"}},"msgtype":"m.text"},"ts":1716211769935,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WRN-O2V7_q_m-2n0jm2tvgU5D9vgMpEU9MMfTjN1yNo"},
{"content":{"body":"> <@littledan:matrix.org> so are there any usages of this API which are not \"well-balanced\"?\n\n(See the warnings about rust `tracing::Span` in async code https://docs.rs/tracing/latest/tracing/span/struct.Span.html#in-asynchronous-code for some consequences of this sort of design in the wild -- but they're better off because Futures are expressive enough to write `Future::instrument` without needing built-in help)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ZQfCNSsIo9UOowrUP0zu5YNttOKsba8eWJ6eCy32k88?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />so are there any usages of this API which are not &quot;well-balanced&quot;?</blockquote></mx-reply>(See the warnings about rust <code>tracing::Span</code> in async code https://docs.rs/tracing/latest/tracing/span/struct.Span.html#in-asynchronous-code for some consequences of this sort of design in the wild -- but they're better off because Futures are expressive enough to write <code>Future::instrument</code> without needing built-in help)","m.relates_to":{"m.in_reply_to":{"event_id":"$ZQfCNSsIo9UOowrUP0zu5YNttOKsba8eWJ6eCy32k88"}},"msgtype":"m.text"},"ts":1716211826033,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$xVDD-YHyM2CwOU9BJXcBJQkDMnUXXmthWTudW4KJOo0"},
{"content":{"body":"> <@littledan:matrix.org> James M Snell: would be great to get your take on this comment, outlining a possible policy to deal with the two contexts\n\nThese are two different issues. What James was referring to is the difference between register versus resolve path. What _I_ was referring to was not a _path_ thing _at all_ but rather just the different _points_ in context flow of the sync function a value is initially _set_ for and the continuations that value flows into.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$WRN-O2V7_q_m-2n0jm2tvgU5D9vgMpEU9MMfTjN1yNo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br><a href=\"https://matrix.to/#/@jasnell:matrix.org\">James M Snell</a>: would be great to get your take on this comment, outlining a possible policy to deal with the two contexts</blockquote></mx-reply>These are two different issues. What James was referring to is the difference between register versus resolve path. What <em>I</em> was referring to was not a <em>path</em> thing <em>at all</em> but rather just the different <em>points</em> in context flow of the sync function a value is initially <em>set</em> for and the continuations that value flows into.","m.mentions":{"user_ids":["@littledan:matrix.org","@jasnell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WRN-O2V7_q_m-2n0jm2tvgU5D9vgMpEU9MMfTjN1yNo"}},"msgtype":"m.text"},"ts":1716211993399,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$CRORS2NJDWk8695C4D_el-kjxEZ51VsFZ3mmxTC9DZE"},
{"content":{"body":"There is a function given to `store.run(...)` which runs synchronously. Any async tasks scheduled _within_ that function capture the value, but it's a different form of the value in that it was explicitly _set_ for that scope not _propagated_ to that scope.","format":"org.matrix.custom.html","formatted_body":"There is a function given to <code>store.run(...)</code> which runs synchronously. Any async tasks scheduled <em>within</em> that function capture the value, but it's a different form of the value in that it was explicitly <em>set</em> for that scope not <em>propagated</em> to that scope.","m.mentions":{},"msgtype":"m.text"},"ts":1716212124761,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$RvHQxNp-WUItxuzht58UklClvR_qCG7-7r8Z9OhOIYs"},
{"content":{"body":"I think I'll have to digest the conversation here a bit more to comment adequately. Give me a bit of time as my morning is just starting here and I'm finishing up a fairly busy on call week with a few remaining tasks. Should be able to jump in again later this morning","msgtype":"m.text"},"ts":1716212315952,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DCOYHRe_x6vBRw7vLG27ExLl_K8A5Wp3I5J37aW_qWU"},
{"content":{"body":"There's a lot in this thread to catch up on. Stephen Belanger can you indulge me with a bit of a tl;dr on your second issue here... the \"What I was referring to...\" part. Just want to make sure I'm groking what you're saying before I respond","format":"org.matrix.custom.html","formatted_body":"There's a lot in this thread to catch up on. <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">Stephen Belanger</a> can you indulge me with a bit of a tl;dr on your second issue here... the \"What I was referring to...\" part. Just want to make sure I'm groking what you're saying before I respond","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"msgtype":"m.text"},"ts":1716214203561,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$ULycP2ZEX8RsDgp3DuEvxgW7y-Uq-9gMdxy8h_qXIxc"},
{"content":{"body":"So I've been working on a plan for Tracing Channel splitting it internally into two separate \"WindowChannel\" types. One represents the call and the other represents the continuation. The same concept seemed at least _relevant_ here so I wanted to share the doc.\n\nFrom OpenTelemetry perspective we have two types of span relationships: child-of and follows-from for sync and async children respectively. To tell when the span in a context is sync or async we can split the `store.run(...)` into a \"call window\" around the sync phase of running the function given to it and the then separate \"continuation windows\" around each continuation. This describes the context behaviour at the two points a bit differently so \"call window\" describes it as a _currently_ executing context to express that the wrapped function is still executing and should treat nested things as child-of related, and a \"continuation window\" describes it as a _propagated_ context to express that the original task function ran at some point in the past and the value for it in the context is now representing that the task is done and things may now want to link to it as a follows-from relationship.","format":"org.matrix.custom.html","formatted_body":"<p>So I've been working on a plan for Tracing Channel splitting it internally into two separate \"WindowChannel\" types. One represents the call and the other represents the continuation. The same concept seemed at least <em>relevant</em> here so I wanted to share the doc.</p>\n<p>From OpenTelemetry perspective we have two types of span relationships: child-of and follows-from for sync and async children respectively. To tell when the span in a context is sync or async we can split the <code>store.run(...)</code> into a \"call window\" around the sync phase of running the function given to it and the then separate \"continuation windows\" around each continuation. This describes the context behaviour at the two points a bit differently so \"call window\" describes it as a <em>currently</em> executing context to express that the wrapped function is still executing and should treat nested things as child-of related, and a \"continuation window\" describes it as a <em>propagated</em> context to express that the original task function ran at some point in the past and the value for it in the context is now representing that the task is done and things may now want to link to it as a follows-from relationship.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716214632779,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$SmoHZBJkjEiTIvQbcf2AIdyTVlQ_BLo32jXrFdQn-2U"},
{"content":{"body":"This could easily enough be done by just wrapping the `store.run(...)` to set a global flag around the given function to tell it if its currently running or not, but it keeps getting brought up for some reason even though I've been trying to explain a few times now that I'm not really concerned about that particular design idea but rather about the flowing _around_ awaits rather than _through_ them issue.","format":"org.matrix.custom.html","formatted_body":"This could easily enough be done by just wrapping the <code>store.run(...)</code> to set a global flag around the given function to tell it if its currently running or not, but it keeps getting brought up for some reason even though I've been trying to explain a few times now that I'm not really concerned about that particular design idea but rather about the flowing <em>around</em> awaits rather than <em>through</em> them issue.","m.mentions":{},"msgtype":"m.text"},"ts":1716214834566,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$bb5IoHkQ_ISnrtv8-OU949idKo_305wkApi5Kttp1f4"},
{"content":{"body":"Intuitively people are expecting context of promise code to flow similarly to equivalent callback code, but this is not the case as we bind to register time rather than resolve.","m.mentions":{},"msgtype":"m.text"},"ts":1716214886983,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$LbG09XXU6AJbU7sbQrilLGSVJSNFPbYVMlH6Y4iX1ZI"},
{"content":{"body":"I want to make sure I'm understanding the distinction correctly between \"flowing around\" vs \"flowing through\" awaits. Do you have a quick code example to illustrate it. I think I know what you're saying just need to make sure","m.mentions":{},"msgtype":"m.text"},"ts":1716215021759,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$TvNH6j3G_9SeVfdyndTCH0jvebhR5gwEPhTqcG2Rqzg"},
{"content":{"body":"even if just pseudocode","m.mentions":{},"msgtype":"m.text"},"ts":1716215043402,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$m5P4XeiETTQgtpfYXsxNsmtzNUPo-lZzeg5nXgEPSNk"}
]