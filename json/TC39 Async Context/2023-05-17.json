[
{"content":{"body":"putting the user code lexically nested inside of the framework code doesn't really demonstrate the example very clearly","msgtype":"m.text"},"ts":1684341302547,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JKDz7BZtSqJHR-YfBLJpNR8zgIUZqghuSjS0Aj2lm_s"},
{"content":{"body":"Justin Ridgewell: Does this proposal solves the pattern of piling up data in request object in node and pass it around the application?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Does this proposal solves the pattern of piling up data in request object in node and pass it around the application?","msgtype":"m.text"},"ts":1684341411358,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$f2rcLuWJQaPqrnoEljYVAokIFVrBJc-T9pidrKgnD-A"},
{"content":{"body":"I think you mean where you put framework data on the `req` object so that it can be passed around?","format":"org.matrix.custom.html","formatted_body":"I think you mean where you put framework data on the <code>req</code> object so that it can be passed around?","msgtype":"m.text"},"ts":1684341439080,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LUPMvuvvvEpbuZ7ibUsgtwK8IZ9E7qr0q3CMgkY0L-M"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1684341448587,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$_iKsfHh2N9Ga2R1iNIVLeKgbS56wcZUi2m5znbpdkeQ"},
{"content":{"body":"\nThen yes, you could store that in an `AsyncContext` instead","format":"org.matrix.custom.html","formatted_body":"Then yes, you could store that in an <code>AsyncContext</code> instead","msgtype":"m.text"},"ts":1684341469214,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8NxQnaZJoOKTIrA6ZMx5Ec_lTX6V9Us_BOFmtrsiXuk"},
{"content":{"body":"You won't _need_ to pass the `req` object around anymore to get the context data","format":"org.matrix.custom.html","formatted_body":"You won't <em>need</em> to pass the <code>req</code> object around anymore to get the context data","msgtype":"m.text"},"ts":1684341480205,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bZKKQCyE4yi8CfPNqLGsdRyKiYReqZ_WTb0XBkz8fqE"},
{"content":{"body":"Thanks. I wanna pitch this proposal internally, and I'm looking for internal use cases.","msgtype":"m.text"},"ts":1684341508850,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$63ZC5IP2FKnA11SKar15XHVg1Uu3hDrmkxmeo36Bey0"},
{"content":{"body":"it'll be faster to just pass it around though...","msgtype":"m.text"},"ts":1684341561478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fvIQsjgtOO5Qjb1tgfwCQavxuvDmsO1_8-o_1n5TQc8"},
{"content":{"body":"In pure access-to-the-value terms, yes, it'd be faster to have a parameter or prop on a param","msgtype":"m.text"},"ts":1684341979989,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zKCfLAt2aAs4_2pI7Nm4Fl6OVKZfk28qrN5wC_xD6x8"},
{"content":{"body":"But I think that discounts the use of 3p code that is not aware of, eg, the `req` value and won't pass that around","format":"org.matrix.custom.html","formatted_body":"But I think that discounts the use of 3p code that is not aware of, eg, the <code>req</code> value and won't pass that around","msgtype":"m.text"},"ts":1684342032597,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$h9Gn3FIsb7YtLZgDYHGAWOORKUA4PnRPpRxswjIDL6w"},
{"content":{"body":"So we have an over reliance on closures to capture the `req` and that closure gets passed to 3p code instead","format":"org.matrix.custom.html","formatted_body":"So we have an over reliance on closures to capture the <code>req</code> and that closure gets passed to 3p code instead","msgtype":"m.text"},"ts":1684342061394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ArF9EG_298e9OTPcvHgHrUM_MOU64j0CqBXHTSjV4f4"},
{"content":{"body":"I wonder if the closures are actually going to be slower and just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower and just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"ts":1684342088790,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE"},
{"content":{"body":"Because closures wouldn't be required, I can start using static module level functions and pass data via context","msgtype":"m.text"},"ts":1684342114441,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$glNEdo1_EjBKOlgDhhKs9KHkJFEihumDSgnK_Pl9oew"},
{"content":{"body":" * I wonder if the closures are actually going to be slower then just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":" * I wonder if the closures are actually going to be slower then just the map access that <code>AsyncContext</code> gives you","m.new_content":{"body":"I wonder if the closures are actually going to be slower then just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower then just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"m.relates_to":{"event_id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684342148647,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qXynbBU03M0-licMjupsSvywt6krtLX5oadg5x_ZhPc"},
{"content":{"body":" * I wonder if the closures are actually going to be slower than just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":" * I wonder if the closures are actually going to be slower than just the map access that <code>AsyncContext</code> gives you","m.new_content":{"body":"I wonder if the closures are actually going to be slower than just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower than just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"m.relates_to":{"event_id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684342158952,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xWjRBr8q9IF5c9r5ha77gsbD8f_qhfKTzNbIma11fno"}
]