[
{"content":{"body":"putting the user code lexically nested inside of the framework code doesn't really demonstrate the example very clearly","msgtype":"m.text"},"ts":1684341302547,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JKDz7BZtSqJHR-YfBLJpNR8zgIUZqghuSjS0Aj2lm_s"},
{"content":{"body":"Justin Ridgewell: Does this proposal solves the pattern of piling up data in request object in node and pass it around the application?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: Does this proposal solves the pattern of piling up data in request object in node and pass it around the application?","msgtype":"m.text"},"ts":1684341411358,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$f2rcLuWJQaPqrnoEljYVAokIFVrBJc-T9pidrKgnD-A"},
{"content":{"body":"I think you mean where you put framework data on the `req` object so that it can be passed around?","format":"org.matrix.custom.html","formatted_body":"I think you mean where you put framework data on the <code>req</code> object so that it can be passed around?","msgtype":"m.text"},"ts":1684341439080,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LUPMvuvvvEpbuZ7ibUsgtwK8IZ9E7qr0q3CMgkY0L-M"},
{"content":{"body":"Yep","msgtype":"m.text"},"ts":1684341448587,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$_iKsfHh2N9Ga2R1iNIVLeKgbS56wcZUi2m5znbpdkeQ"},
{"content":{"body":"\nThen yes, you could store that in an `AsyncContext` instead","format":"org.matrix.custom.html","formatted_body":"Then yes, you could store that in an <code>AsyncContext</code> instead","msgtype":"m.text"},"ts":1684341469214,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8NxQnaZJoOKTIrA6ZMx5Ec_lTX6V9Us_BOFmtrsiXuk"},
{"content":{"body":"You won't _need_ to pass the `req` object around anymore to get the context data","format":"org.matrix.custom.html","formatted_body":"You won't <em>need</em> to pass the <code>req</code> object around anymore to get the context data","msgtype":"m.text"},"ts":1684341480205,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bZKKQCyE4yi8CfPNqLGsdRyKiYReqZ_WTb0XBkz8fqE"},
{"content":{"body":"Thanks. I wanna pitch this proposal internally, and I'm looking for internal use cases.","msgtype":"m.text"},"ts":1684341508850,"senderName":"Willian Martins","senderId":"@wmartins:matrix.org","id":"$63ZC5IP2FKnA11SKar15XHVg1Uu3hDrmkxmeo36Bey0"},
{"content":{"body":"it'll be faster to just pass it around though...","msgtype":"m.text"},"ts":1684341561478,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fvIQsjgtOO5Qjb1tgfwCQavxuvDmsO1_8-o_1n5TQc8"},
{"content":{"body":"In pure access-to-the-value terms, yes, it'd be faster to have a parameter or prop on a param","msgtype":"m.text"},"ts":1684341979989,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zKCfLAt2aAs4_2pI7Nm4Fl6OVKZfk28qrN5wC_xD6x8"},
{"content":{"body":"But I think that discounts the use of 3p code that is not aware of, eg, the `req` value and won't pass that around","format":"org.matrix.custom.html","formatted_body":"But I think that discounts the use of 3p code that is not aware of, eg, the <code>req</code> value and won't pass that around","msgtype":"m.text"},"ts":1684342032597,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$h9Gn3FIsb7YtLZgDYHGAWOORKUA4PnRPpRxswjIDL6w"},
{"content":{"body":"So we have an over reliance on closures to capture the `req` and that closure gets passed to 3p code instead","format":"org.matrix.custom.html","formatted_body":"So we have an over reliance on closures to capture the <code>req</code> and that closure gets passed to 3p code instead","msgtype":"m.text"},"ts":1684342061394,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ArF9EG_298e9OTPcvHgHrUM_MOU64j0CqBXHTSjV4f4"},
{"content":{"body":"I wonder if the closures are actually going to be slower and just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower and just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"ts":1684342088790,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE"},
{"content":{"body":"Because closures wouldn't be required, I can start using static module level functions and pass data via context","msgtype":"m.text"},"ts":1684342114441,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$glNEdo1_EjBKOlgDhhKs9KHkJFEihumDSgnK_Pl9oew"},
{"content":{"body":" * I wonder if the closures are actually going to be slower then just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":" * I wonder if the closures are actually going to be slower then just the map access that <code>AsyncContext</code> gives you","m.new_content":{"body":"I wonder if the closures are actually going to be slower then just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower then just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"m.relates_to":{"event_id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684342148647,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qXynbBU03M0-licMjupsSvywt6krtLX5oadg5x_ZhPc"},
{"content":{"body":" * I wonder if the closures are actually going to be slower than just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":" * I wonder if the closures are actually going to be slower than just the map access that <code>AsyncContext</code> gives you","m.new_content":{"body":"I wonder if the closures are actually going to be slower than just the map access that `AsyncContext` gives you","format":"org.matrix.custom.html","formatted_body":"I wonder if the closures are actually going to be slower than just the map access that <code>AsyncContext</code> gives you","msgtype":"m.text"},"m.relates_to":{"event_id":"$2A7D_QwbaYnDJy2vrOId6-z9GZL7TYLcKGUyJkefTYE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1684342158952,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xWjRBr8q9IF5c9r5ha77gsbD8f_qhfKTzNbIma11fno"},
{"content":{"body":"not understanding the closure point -- if it's in fact threaded through by user code, there're no closures involved, just passing something through?","msgtype":"m.text"},"ts":1684342237826,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$KGgwsPmptrTnAG-aa3N2fL5YiBOucocdgm5oP5B_kUE"},
{"content":{"body":"but if closures are in fact involved then i agree","msgtype":"m.text"},"ts":1684342248403,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$1MpFB1D9s68kxGp7KBf6rucBA7hacpL675os3uRGj_0"},
{"content":{"body":"The \"making hooks work at all with async functions\" case seemed pretty important","msgtype":"m.text"},"ts":1684342258244,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KoGaSURJHTT1viTWOPvTxiwYq8SUPLu0vKbArUAwuXU"},
{"content":{"body":"> <@shuyuguo:matrix.org> not understanding the closure point -- if it's in fact threaded through by user code, there're no closures involved, just passing something through?\n\nI don't have an explicit example I can share at the moment, but I see soooo many closures when digging into the codebase","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$KGgwsPmptrTnAG-aa3N2fL5YiBOucocdgm5oP5B_kUE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@shuyuguo:matrix.org\">@shuyuguo:matrix.org</a><br>not understanding the closure point -- if it&#39;s in fact threaded through by user code, there&#39;re no closures involved, just passing something through?</blockquote></mx-reply>I don't have an explicit example I can share at the moment, but I see soooo many closures when digging into the codebase","m.relates_to":{"m.in_reply_to":{"event_id":"$KGgwsPmptrTnAG-aa3N2fL5YiBOucocdgm5oP5B_kUE"}},"msgtype":"m.text"},"ts":1684342483600,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ox3pnciLnL3CNeBWfqGvA3tvj-G3unlSrJ3lMHI_CBU"},
{"content":{"body":"> <@littledan:matrix.org> The \"making hooks work at all with async functions\" case seemed pretty important\n\nTo be clear, there are other issues preventing this on the client side (the current RFC is only for server side), but the lack of async context is one of the blockers","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$KoGaSURJHTT1viTWOPvTxiwYq8SUPLu0vKbArUAwuXU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>The &quot;making hooks work at all with async functions&quot; case seemed pretty important</blockquote></mx-reply>To be clear, there are other issues preventing this on the client side (the current RFC is only for server side), but the lack of async context is one of the blockers","m.relates_to":{"m.in_reply_to":{"event_id":"$KoGaSURJHTT1viTWOPvTxiwYq8SUPLu0vKbArUAwuXU"}},"msgtype":"m.text"},"ts":1684342550951,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LxKZb5EVucIAsxc_OLIM3C9aXd-Th_YvfS6YYJSEIFw"},
{"content":{"body":"i see tons of closures as well - in react, the two approaches are either “prop drilling” or something on the side, like context or a flux store, and the problem with the former is that intermediate components often do not know or remember all the things they need to pass down.","msgtype":"m.text"},"ts":1684342701406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3t0YiN5S9rHb4cQalJbup_Nkwb2sbHHvdjlk9Opq4wU"},
{"content":{"body":"I guess the question isn't \"are there closures\" but \"can the user code close over stuff from the framework to make it so it doesn't need to pass things around all the time\" and that answer is often no","msgtype":"m.text"},"ts":1684342897531,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9J77D5KqRzNUyyPir8HgIHuTOPvW7ReE3uG7Mz724zo"},
{"content":{"body":"to Mark's point: the update in the AsyncSnapshot API would be simple: You'd pass a positive integer into the AsyncSnapshot constructor to indicate how many times it can be restored. If you write Infinity, the task termination callback is never called. Mostly you'd pass 1; maybe that'd be the default constructor.","msgtype":"m.text"},"ts":1684343022847,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zCXehZ2gjJARCAPnDnq91mrkAyGJ4KNSsFeO78m1YFw"},
{"content":{"body":"maybe an \"increment\" or \"clone\" method would be added in conjunction with this","msgtype":"m.text"},"ts":1684343052695,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BlUEmVAECCGJZLPF_Sy8roY6_4lVpryJs_0oLkMxOWI"},
{"content":{"body":"can't you just store something mutable in the context and then mutate it manually?","msgtype":"m.text"},"ts":1684343200924,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GT_G7FwQpcbL_BjFRLd0H6UjKpOxLjol8n0WmrLDe7g"},
{"content":{"body":"why do you need the base API to be expanded?","msgtype":"m.text"},"ts":1684343208579,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$eIKWv31D7LZrGRsmV2DEz--Emxw8OPq6V6K_L6SATZU"},
{"content":{"body":"Oh right that too maybe","msgtype":"m.text"},"ts":1684343591895,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x7N35AWC2srXeznm_PRGbN-WLkUh58gzYf9Y2buYL5U"},
{"content":{"body":"No the issue is that you want this to work out of the box with promises","msgtype":"m.text"},"ts":1684343643381,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KRw8YnMEyYQrr8rxjpGhDakyUh1mfx7zUsoPEyuEqNg"}
]