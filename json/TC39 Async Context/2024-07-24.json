[
{"content":{"body":"Awesome! Let's get this on a WHATNOT agenda soon.","m.mentions":{},"msgtype":"m.text"},"ts":1721834978846,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3zxSXDBXW_0kUkPLHo_7MW123sIGivXHK0JYcuQWq2Y"},
{"content":{"body":"I got some feedback from Peter Burns (of Web Components and Lit): https://docs.google.com/document/d/1nAgNZni5F2zU6ET88suvtwSu15y5sEFMngF75tkc8Hk/edit","m.mentions":{},"msgtype":"m.text"},"ts":1721858426141,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$KULAT3G8Fu6j41OMZJCQqqqhbZHqjhXmUPhfW1dGEjE"},
{"content":{"body":"tl;dr is that the current proposal isn't particularly helpful in his estimation - partly due to the always-registration-time semantics, and partly due to a mismatch where the DOM tree and the execution tree aren't necessarily aligned 1:1, and they tend to favor the former over the latter.","m.mentions":{},"msgtype":"m.text"},"ts":1721858574920,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$24QWBwSEYUIt8WetuaSWrqeG3cjZIKEDfHX-4K18ysU"},
{"content":{"body":"what he'd like to see is a bifurcation of functions where some (e.g. schedulers) would use registration contexts and others would just \"do nothing\" - i.e. just use whatever synchronous context was already there, don't do any restoration.","m.mentions":{},"msgtype":"m.text"},"ts":1721858682114,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$pX2gV47C6WWgge7ZkWK_nQf_eYfl84IGRSn9nhbD7co"},
{"content":{"body":"And the web component lifecycle callbacks would want to be the latter","m.mentions":{},"msgtype":"m.text"},"ts":1721858694347,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$0ZlAvdNbxjhcAqozqFg1A3hy5u6-0aBHkPyrjk-J4Xg"},
{"content":{"body":"My take on all this is that we may still have some iterating to do on the dom integration... :-/","m.mentions":{},"msgtype":"m.text"},"ts":1721858781534,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-LjAtCK5K34d6V81ctx_Lt3cE1ybda_ZSBKhjL88y0c"},
{"content":{"body":"\"do nothing\" isn't always so easy to define because it may come after some async step--there isn't always JS on the stack immediately before","m.mentions":{},"msgtype":"m.text"},"ts":1721858876431,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ANMzdrvrZ2m21SD7RL1uLlxqIBdKaU5DIrnn_lvog2E"},
{"content":{"body":"for web component lifecycle, sometimes there is and sometimes there isn't JS on the stack, right?","m.mentions":{},"msgtype":"m.text"},"ts":1721858910099,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kjR4Sc6v04Mc2p5fPsWYRyChu1Bpc7Fj_YsQdrHQNlU"},
{"content":{"body":"like for parser-constructed DOM","m.mentions":{},"msgtype":"m.text"},"ts":1721858946597,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MKSG_VdUOc_2byw8JkrkJPi5YVepYDAMdTFG-8tKJCk"},
{"content":{"body":"anyway if we can define these cases, I think it'd be fine to add that to the definitions","m.mentions":{},"msgtype":"m.text"},"ts":1721858987437,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1wC7ZRW5OOOnaJvFMRYUQSuZEJaRAIEisbyDeJjJrHE"},
{"content":{"body":" * anyway if we can define these cases, I think it'd be fine to add that to the spec. It'd be some kind of WebIDL extended attribute.","m.mentions":{},"m.new_content":{"body":"anyway if we can define these cases, I think it'd be fine to add that to the spec. It'd be some kind of WebIDL extended attribute.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1wC7ZRW5OOOnaJvFMRYUQSuZEJaRAIEisbyDeJjJrHE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721859001972,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0WNv-D6O8DEd1EHNJucMlffqLHaVQgLdGwmbO361WoI"},
{"content":{"body":"anyway this seems to be swinging back in a direction which I proposed previously: that we apply the snapshot with the \"most information\", that is, to \"do nothing\" when it can possibly make sense. The downsides to this were (1) complexity of getting this all figured out on the first go (2) \"Zalgo\"/it's complicated for people to mentally model what's going on","m.mentions":{},"msgtype":"m.text"},"ts":1721859224259,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5AJ85aPnQUJo7Ffp7oPhuX-FYgqd_4H3YhEK7V7zioU"},
{"content":{"body":"The zalgo situation is the most concerning part. I'd be more comfortable if it's statically determined per API. So something like - lifecycle callbacks are always unwrapped, events are always wrapped. Unwrapped callbacks have an opt-out by manually wrapping them. Wrapped callbacks _may_ have an opt-out via a snapshot property. I'm still not convinced that it's a problem to sometimes run a callback in the top-level/initial snapshot (e.g. if it's dispatched from the parser).","msgtype":"m.text"},"ts":1721860050012,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$GHJLc2CVxV-PMVgYIug4QlLSzHeGWTSULEyDVvoWEM4"}
]