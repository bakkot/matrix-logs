[
{"content":{"body":"Don't know about you, but I thought the idea was to implement task attribution *on top of* AsyncContext, rather than the other way around","format":"org.matrix.custom.html","formatted_body":"Don't know about you, but I thought the idea was to implement task attribution <em>on top of</em> AsyncContext, rather than the other way around","msgtype":"m.text"},"ts":1678962190825,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RcJft9cwxtAnEFU_ZkZPrGXQYUT-PunhEVddH6pJDdo"},
{"content":{"body":"but implementing it on top of task attribution seems to be what Yoav is proposing","msgtype":"m.text"},"ts":1678962204752,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$l3DratKfYodw2my6zEbyY6vFra8eWzrdcsT2UPOvH5g"},
{"content":{"body":" * but implementing AsyncContext on top of task attribution seems to be what Yoav is proposing","m.new_content":{"body":"but implementing AsyncContext on top of task attribution seems to be what Yoav is proposing","msgtype":"m.text"},"m.relates_to":{"event_id":"$l3DratKfYodw2my6zEbyY6vFra8eWzrdcsT2UPOvH5g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1678962218144,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$PUD2Viq07Vp-MKY3HpffyAYIAvgP-YftoHwZCRjC32s"},
{"content":{"body":"I wonder what the folks from server-side V8-based runtimes think about that","msgtype":"m.text"},"ts":1678962562276,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$w4tvyv107V5l7eUNdOjjpFZmAF1ya4C6Xzf4IAsuXJU"},
{"content":{"body":"so the way we handle things in workers... What we actually store using the v8 API is an embedder object wrapped in a js object. We call this embedder object an \"Async Context Frame\" (or frame for short). That frame maintains a mapping of `StorageKey` to JS Value. Every `AsyncLocalStorage` instance (equivalent to `AsyncContext`) represents one `StorageKey`. Whenever `als.run(...)` is called, we create a new frame as a clone of the current and set the new value associated with that key. \"Capturing\" the current context just means holding a reference to whatever frame is current ","format":"org.matrix.custom.html","formatted_body":"so the way we handle things in workers... What we actually store using the v8 API is an embedder object wrapped in a js object. We call this embedder object an &quot;Async Context Frame&quot; (or frame for short). That frame maintains a mapping of <code>StorageKey</code> to JS Value. Every <code>AsyncLocalStorage</code> instance (equivalent to <code>AsyncContext</code>) represents one <code>StorageKey</code>. Whenever <code>als.run(...)</code> is called, we create a new frame as a clone of the current and set the new value associated with that key. &quot;Capturing&quot; the current context just means holding a reference to whatever frame is current","msgtype":"m.text"},"ts":1678975697882,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$sK1XZqRwmL1HadXUOqw9CicQlLslNbjjhui7A1pGOzw"},
{"content":{"body":"What's nice about this design is that we can (and do) have `StorageKey` instances that are not associated with a specific `AsyncLocalStorage` instance","format":"org.matrix.custom.html","formatted_body":"What's nice about this design is that we can (and do) have <code>StorageKey</code> instances that are not associated with a specific <code>AsyncLocalStorage</code> instance","msgtype":"m.text"},"ts":1678975755060,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$oM338PBkErx3iAt89Tj10OtARpjTARB4XnPmNupsuqI"}
]