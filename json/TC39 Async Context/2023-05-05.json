[
{"content":{"body":"For a permanently pending promise: wouldn’t terminate \nFor AsyncContext.wrap which isn’t called: it’s not wrap which increments the counter, but rather a separate operation which is called when something is logically “queued” (this must be the case since the wrapped thing can’t decrement the counter since it can be called multiple times)","format":"org.matrix.custom.html","formatted_body":"For a permanently pending promise: wouldn’t terminate<br />\nFor AsyncContext.wrap which isn’t called: it’s not wrap which increments the counter, but rather a separate operation which is called when something is logically “queued” (this must be the case since the wrapped thing can’t decrement the counter since it can be called multiple times)","msgtype":"m.text"},"ts":1683259771111,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UU5L_tlLEhzWlsbfuthFx1C5e0uC7lYSFswQOSiES6w"},
{"content":{"body":"So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.","msgtype":"m.text"},"ts":1683260035769,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc"},
{"content":{"body":"And a wrapped thing can definitely increment a counter. Once it's executed the counter is decremented. during it execution it can create more wrappers, each incrementing the counter until they're called","msgtype":"m.text"},"ts":1683260136573,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hshQereTc5PmsfZbzJz5lCR807yZcoB5hIOVRig-hBs"},
{"content":{"body":"But if the wrapped function is never called and collected instead, you also need to decrement. That's where GC comes in","msgtype":"m.text"},"ts":1683260265195,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kglI1JeY8ciHY6QVzm8lP1ROwtv3iC8Ef3ahhyENYOk"},
{"content":{"body":"> <@mhofman:matrix.org> So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.\n\nProbably the explicit JS API would need to contain calls for this, exactly for this reason. It is just a different operation from wrap.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.</blockquote></mx-reply>Probably the explicit JS API would need to contain calls for this, exactly for this reason. It is just a different operation from wrap.","m.relates_to":{"m.in_reply_to":{"event_id":"$oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc"}},"msgtype":"m.text"},"ts":1683260279810,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Et-sSipt6jjR0uvInKUEohrbWAKrZsrWh3I27kY25dc"},
{"content":{"body":"Wrap produces multiply callable things","msgtype":"m.text"},"ts":1683260305526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bzVaPfmXASUh4jPbVVu2i7kd_4073aExtpgwE5HmZ-k"},
{"content":{"body":"Anyway if wrap produced single-shot things, then it also wouldn’t be a reason to depend on GC","msgtype":"m.text"},"ts":1683260332289,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kLzVnPpLGnwAjzyYuxNDjf1t14_wLWxsNpQdgFGAf48"},
{"content":{"body":"If something gets leaked, then it just doesn’t have its completion callback called (maybe)","msgtype":"m.text"},"ts":1683260371931,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k_Gdo_7my2m0GH08GZLaNvP10ADWehVhzEpKPW73Qx8"},
{"content":{"body":"Or maybe it is called but this is definitely a bug somewhere if people are depending on it","msgtype":"m.text"},"ts":1683260393929,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5tXmMoyLcmq_JwyKvnUxxoVR--wUeDMX19Sfo6KURZg"},
{"content":{"body":"Anyway this differs a lot from async hooks today where gc is the expected thing to call the destroy hook for async await, not backup/cleanup if you have a leak","msgtype":"m.text"},"ts":1683260505086,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R75KiI-4Mrtlcrbx46dqv2Hdn68q0DnanHvOO87h8dQ"},
{"content":{"body":"Ok so you want to put the burden of task continuation on the user land for user land queues? It would be surprising to me that the context value could outlive the task  unless userland takes explicit action, since that's counter to the transparent nature of this API for code unaware of it.","msgtype":"m.text"},"ts":1683260539795,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$N_t5f8yLhUsXfvhIn-h9EPui58XbU6sC2qd1Gl2pKvc"},
{"content":{"body":"Since you can capture a context without using the AsyncContext API simply by code structure.","msgtype":"m.text"},"ts":1683260577048,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mn4rOHQd_LqAOusaZXLvwK88beLFSLInZf19PbKqQWE"},
{"content":{"body":"Sorry, what do you mean by that?","msgtype":"m.text"},"ts":1683260640231,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mK7Bnpd9GhNQlmuUuoNuOe8BHiKghU4kcla_BjjZrjU"},
{"content":{"body":"You can use plain promises to effectively snapshot the current context","msgtype":"m.text"},"ts":1683260680719,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$01VawcvDOK2zA8JVJF_qRGzbLqS-2ueGt2OeCtOMDtM"},
{"content":{"body":"That IMO should prevent the task termination even if the promise stays pending (nothing in host queues)","msgtype":"m.text"},"ts":1683260735628,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$uqldxsJqzEhjQIGNf4FS1_B0kBJcubM5A-ZtBxYfWf0"},
{"content":{"body":"But the task should terminate once the promise gets collected","msgtype":"m.text"},"ts":1683260760074,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$ADUyupsPj-JNlh088g3Xfnu0lmiT91bELsXBFSOsytY"},
{"content":{"body":"Oh yeah I agree. Creating the promise should internally call this increment operation","msgtype":"m.text"},"ts":1683260842779,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VgxkAeg8kFX_ZzPskc4LyU1Q87IM3kOR-rJmE-Obh3w"},
{"content":{"body":"But this is different from wrap—increment makes sense since promises are single-shot","msgtype":"m.text"},"ts":1683260865675,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4xY8rKtjq6yrNETdh223VX-kId9QV7_tVMKWrS8UTVQ"},
{"content":{"body":"I think any mismatch here has to do with multiple senses of “queued”","msgtype":"m.text"},"ts":1683260900496,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rnwpBKhkP5vXSZv_VRHItnMO2gCCMdu-iK28hQqqS20"},
{"content":{"body":"Oh wait, sorry, I think we are talking about the .then operation, rather than creating the promise","msgtype":"m.text"},"ts":1683260958795,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$sUT9NRbxPy3LogaQ18ljFgiqyq8S2mU3v_jG1SJGigI"},
{"content":{"body":"That is the case where the AsyncContext is captured anyway ","format":"org.matrix.custom.html","formatted_body":"That is the case where the AsyncContext is captured anyway","msgtype":"m.text"},"ts":1683260984067,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XBzIUfBoRLKkLWEdBFSD-dobnQvZvZ_MN8lwywgM_dE"},
{"content":{"body":"I remember writing a wrap multishot implementation using only promises.","msgtype":"m.text"},"ts":1683261056223,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$h0LvDEeO8Ij8WDakMSLCCVLpC9BUnW6obPXWSHJ3YKo"},
{"content":{"body":"Yes using then","msgtype":"m.text"},"ts":1683261077022,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$bzDRqRNicvHjft9zlQUJkKVzZsPOKBbglJuuHRuNKlA"},
{"content":{"body":"Wasn’t that based on multiple then calls?","msgtype":"m.text"},"ts":1683261099716,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EgcAV9uvENNr5V5USOG0f3HDZ71gI7RUAfl858LMGPg"},
{"content":{"body":"Anyway I need to step back and think about this more; I don’t have a very clear picture right now actually ","format":"org.matrix.custom.html","formatted_body":"Anyway I need to step back and think about this more; I don’t have a very clear picture right now actually","msgtype":"m.text"},"ts":1683261132623,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZVdpM3AOgBvqK73S62gGOhumLTUHbGymq1a72tmfrhw"},
{"content":{"body":"Maybe I am mistaken ","format":"org.matrix.custom.html","formatted_body":"Maybe I am mistaken","msgtype":"m.text"},"ts":1683261155068,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BbFot9MkS_Ezx9nZgmv4vIPFHronXlb1N2VV2-Wlbsw"},
{"content":{"body":"Oh right—you can restore the context multiple times with .then, but you only get one shot at “being outstanding”—the decrement operation only happens the first time. Maybe wrap could apply the same logic and so there actually isn’t a separate increment/decrement operation.","msgtype":"m.text"},"ts":1683261277121,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-oeTtZK5rVcLuDjXpo2X2FhF1OfRQGqW5hD93j6gcWY"},
{"content":{"body":"https://github.com/endojs/endo/blob/506a9685b62e5694a6a47a0efa05742e0c91fa71/packages/eventual-send/test/async-contexts/async-attack-tools.js","msgtype":"m.text"},"ts":1683261370270,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$29E2fvWY8mUtKfZlQawDKz25ytHKVzjI1a0qd8HmuaM"},
{"content":{"body":"Yeah it relies on recreating a promise and calling then every time","msgtype":"m.text"},"ts":1683261414442,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$BwFJoXsvkOlx6tfp790zFbu8WKME4VLvCs6MZesCo4Y"}
]