[
{"content":{"body":"For a permanently pending promise: wouldn’t terminate \nFor AsyncContext.wrap which isn’t called: it’s not wrap which increments the counter, but rather a separate operation which is called when something is logically “queued” (this must be the case since the wrapped thing can’t decrement the counter since it can be called multiple times)","format":"org.matrix.custom.html","formatted_body":"For a permanently pending promise: wouldn’t terminate<br />\nFor AsyncContext.wrap which isn’t called: it’s not wrap which increments the counter, but rather a separate operation which is called when something is logically “queued” (this must be the case since the wrapped thing can’t decrement the counter since it can be called multiple times)","msgtype":"m.text"},"ts":1683259771111,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$UU5L_tlLEhzWlsbfuthFx1C5e0uC7lYSFswQOSiES6w"},
{"content":{"body":"So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.","msgtype":"m.text"},"ts":1683260035769,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc"},
{"content":{"body":"And a wrapped thing can definitely increment a counter. Once it's executed the counter is decremented. during it execution it can create more wrappers, each incrementing the counter until they're called","msgtype":"m.text"},"ts":1683260136573,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$hshQereTc5PmsfZbzJz5lCR807yZcoB5hIOVRig-hBs"},
{"content":{"body":"But if the wrapped function is never called and collected instead, you also need to decrement. That's where GC comes in","msgtype":"m.text"},"ts":1683260265195,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$kglI1JeY8ciHY6QVzm8lP1ROwtv3iC8Ef3ahhyENYOk"},
{"content":{"body":"> <@mhofman:matrix.org> So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.\n\nProbably the explicit JS API would need to contain calls for this, exactly for this reason. It is just a different operation from wrap.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc\">In reply to</a> <a href=\"https://matrix.to/#/@mhofman:matrix.org\">@mhofman:matrix.org</a><br>So only wrapped functions in some host queue holds the task alive? That sounds like special treatment for host queues.</blockquote></mx-reply>Probably the explicit JS API would need to contain calls for this, exactly for this reason. It is just a different operation from wrap.","m.relates_to":{"m.in_reply_to":{"event_id":"$oq5Tcto_R8HDFbQe1d6xaILlLORcvZgdrwFGjeZcRQc"}},"msgtype":"m.text"},"ts":1683260279810,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Et-sSipt6jjR0uvInKUEohrbWAKrZsrWh3I27kY25dc"},
{"content":{"body":"Wrap produces multiply callable things","msgtype":"m.text"},"ts":1683260305526,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bzVaPfmXASUh4jPbVVu2i7kd_4073aExtpgwE5HmZ-k"},
{"content":{"body":"Anyway if wrap produced single-shot things, then it also wouldn’t be a reason to depend on GC","msgtype":"m.text"},"ts":1683260332289,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kLzVnPpLGnwAjzyYuxNDjf1t14_wLWxsNpQdgFGAf48"},
{"content":{"body":"If something gets leaked, then it just doesn’t have its completion callback called (maybe)","msgtype":"m.text"},"ts":1683260371931,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$k_Gdo_7my2m0GH08GZLaNvP10ADWehVhzEpKPW73Qx8"},
{"content":{"body":"Or maybe it is called but this is definitely a bug somewhere if people are depending on it","msgtype":"m.text"},"ts":1683260393929,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5tXmMoyLcmq_JwyKvnUxxoVR--wUeDMX19Sfo6KURZg"},
{"content":{"body":"Anyway this differs a lot from async hooks today where gc is the expected thing to call the destroy hook for async await, not backup/cleanup if you have a leak","msgtype":"m.text"},"ts":1683260505086,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$R75KiI-4Mrtlcrbx46dqv2Hdn68q0DnanHvOO87h8dQ"},
{"content":{"body":"Ok so you want to put the burden of task continuation on the user land for user land queues? It would be surprising to me that the context value could outlive the task  unless userland takes explicit action, since that's counter to the transparent nature of this API for code unaware of it.","msgtype":"m.text"},"ts":1683260539795,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$N_t5f8yLhUsXfvhIn-h9EPui58XbU6sC2qd1Gl2pKvc"},
{"content":{"body":"Since you can capture a context without using the AsyncContext API simply by code structure.","msgtype":"m.text"},"ts":1683260577048,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$mn4rOHQd_LqAOusaZXLvwK88beLFSLInZf19PbKqQWE"},
{"content":{"body":"Sorry, what do you mean by that?","msgtype":"m.text"},"ts":1683260640231,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mK7Bnpd9GhNQlmuUuoNuOe8BHiKghU4kcla_BjjZrjU"},
{"content":{"body":"You can use plain promises to effectively snapshot the current context","msgtype":"m.text"},"ts":1683260680719,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$01VawcvDOK2zA8JVJF_qRGzbLqS-2ueGt2OeCtOMDtM"}
]