[
{"content":{"msgtype":"m.text","body":"Pinged him at https://github.com/legendecas/proposal-async-context/pull/17#issuecomment-1406907267, maybe he doesn't keep Matrix open","m.relates_to":{"event_id":"$iUriTX56agReBz5pNAU-eByYCKDj2piwgOmre425Pyw","is_falling_back":true,"m.in_reply_to":{"event_id":"$iUriTX56agReBz5pNAU-eByYCKDj2piwgOmre425Pyw"},"rel_type":"m.thread"}},"ts":1674844405012,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$voAy1ZAmf9v0v2MPwoLaG2W0e9U74GG_HTq7rXOJybA"},
{"content":{"msgtype":"m.text","body":"Anyone know how to read Chrome's Pinpoint performance metrics? https://chromium-review.googlesource.com/c/v8/v8/+/4173598"},"ts":1674844433927,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4"},
{"content":{"msgtype":"m.text","body":"We could make this configurable as an option passed in to `addEventListener` in order to prevent backwards compatibility issues.\n\nFor instance,\n\n```\neventTarget.addEventListener('foo', () => {}, {\n  captureAsyncContext: true,\n});\n```\n\nwhich would essentially be syntactic sugar for manually calling wrap on the handler function","format":"org.matrix.custom.html","formatted_body":"<p>We could make this configurable as an option passed in to <code>addEventListener</code> in order to prevent backwards compatibility issues.</p>\n<p>For instance,</p>\n<pre><code>eventTarget.addEventListener('foo', () =&gt; {}, {\n  captureAsyncContext: true,\n});\n</code></pre>\n<p>which would essentially be syntactic sugar for manually calling wrap on the handler function</p>\n","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU"},"rel_type":"m.thread"}},"ts":1674845080186,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Gf1MLYKN_ZnCqZUSdbs9-YAm9aAxHC6X2IAFUod-74k"},
{"content":{"msgtype":"m.text","body":"Alternatively, I do wonder if there's a syntax solution here? Similar to what is done with generator functions, or async functions, some way where we can declare that a function should always capture the async context when it is called","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$Gf1MLYKN_ZnCqZUSdbs9-YAm9aAxHC6X2IAFUod-74k"},"rel_type":"m.thread"}},"ts":1674845150077,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DuHpmFM5T_y0RtRJJ6u3y0T1M9EMwCFPlwTGvZ192Do"},
{"content":{"msgtype":"m.text","body":"I fully understand that syntax additions are less than desirable a lot of the time","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$DuHpmFM5T_y0RtRJJ6u3y0T1M9EMwCFPlwTGvZ192Do"},"rel_type":"m.thread"}},"ts":1674845165651,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Tk7VL46Vu5wTh0yfZOmVBNQ-hx1WMeh7IsRgmxNm6nI"},
{"content":{"msgtype":"m.text","body":"Not a syntax, but we could add a property to the function instance to do it","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$Tk7VL46Vu5wTh0yfZOmVBNQ-hx1WMeh7IsRgmxNm6nI"},"rel_type":"m.thread"}},"ts":1674845212091,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$dpL7cew1U2di1Vt9CTViU9CCTIkVt_esAvJEELAbVN8"},
{"content":{"msgtype":"m.text","body":"yeah that's better","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$dpL7cew1U2di1Vt9CTViU9CCTIkVt_esAvJEELAbVN8"},"rel_type":"m.thread"}},"ts":1674845232939,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$mx69BGOllrxohqZjEyn3SKfg75bp1JzjFXNDnaHbqto"},
{"content":{"msgtype":"m.text","body":"It would be a WebIDL thing that it can check","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$mx69BGOllrxohqZjEyn3SKfg75bp1JzjFXNDnaHbqto"},"rel_type":"m.thread"}},"ts":1674845237172,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7IU5BpdTzARkqDquuP0Vhzssb-pvTKIASpZQdwGPfkw"},
{"content":{"msgtype":"m.text","body":"I think either behavior is fine, though, so I'm not sure if we need to push it","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$7IU5BpdTzARkqDquuP0Vhzssb-pvTKIASpZQdwGPfkw"},"rel_type":"m.thread"}},"ts":1674845275221,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ASUh_BT3Xl2eJysca8bzkDhMi2lL_izCsDwI-9u6uIs"},
{"content":{"msgtype":"m.text","body":"so the impl of `addEventListener` would look for that property and if set, capture the async context and restore it when that function is called","format":"org.matrix.custom.html","formatted_body":"so the impl of <code>addEventListener</code> would look for that property and if set, capture the async context and restore it when that function is called","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$ASUh_BT3Xl2eJysca8bzkDhMi2lL_izCsDwI-9u6uIs"},"rel_type":"m.thread"}},"ts":1674845284587,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DUJBq2JcGxb2srOouZ9TpNh3Wd5TnIhNlGTnQAyHyvQ"},
{"content":{"msgtype":"m.text","body":"Yoav may have some thoughts on it, though","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$DUJBq2JcGxb2srOouZ9TpNh3Wd5TnIhNlGTnQAyHyvQ"},"rel_type":"m.thread"}},"ts":1674845287081,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$et-jXhJ85aMoT2XIsQ1TjB1UowMyf12x_qZYwzBpYyc"},
{"content":{"msgtype":"m.text","body":"Should we create a tracking issue for host integration?","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$et-jXhJ85aMoT2XIsQ1TjB1UowMyf12x_qZYwzBpYyc"},"rel_type":"m.thread"}},"ts":1674845333946,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$vCLR05DzgV6a1tocPovDpwhgI1GesU20PaolJHNNRmk"},
{"content":{"msgtype":"m.text","body":"Yes","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$vCLR05DzgV6a1tocPovDpwhgI1GesU20PaolJHNNRmk"},"rel_type":"m.thread"}},"ts":1674845351588,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9tn9vRPBEs4Gkbrrjb3-lc3q-mN1TbJo0xjxEBiY0pE"},
{"content":{"msgtype":"m.text","body":"I really need to go to bed now so if any of you would like to do it, it would be great. Or I'll create one when I get up tomorrow morning.","m.relates_to":{"event_id":"$pgeXU17qvWn-rwIOQxrOfTiO1z7pDrB1Ezk8wc73IIU","is_falling_back":true,"m.in_reply_to":{"event_id":"$9tn9vRPBEs4Gkbrrjb3-lc3q-mN1TbJo0xjxEBiY0pE"},"rel_type":"m.thread"}},"ts":1674845450252,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$SrSjrwJuIDDiJ8j8Ej-ZE9zoZCtQDRdrOx0Z7d5Zz1s"},
{"content":{"msgtype":"m.text","body":"Looking at that I don't see any significant difference in the performance metrics between the two. Is this the patch to handle EnqueueMicrotask?","m.relates_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4","is_falling_back":true,"m.in_reply_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4"},"rel_type":"m.thread"}},"ts":1674855970861,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$J4fKCtn41kSirr14_eU-5iaGyVSxO5slfYI88Sim_m0"},
{"content":{"msgtype":"m.text","body":"What's the current plan for dealing with the `extends AsyncResource` case that we have in Node.js? For instance `class Foo extends AsyncResource { doIt() { this.runInAsyncScope(() => {}) } }` ... it admittedly is not a great pattern and is difficult to optimize around. ","format":"org.matrix.custom.html","formatted_body":"What's the current plan for dealing with the <code>extends AsyncResource</code> case that we have in Node.js? For instance <code>class Foo extends AsyncResource { doIt() { this.runInAsyncScope(() =&gt; {}) } }</code> ... it admittedly is not a great pattern and is difficult to optimize around."},"ts":1674856080343,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$aLMnSqKSGR3BtRAKE5d7T4OkO6AB7gab3ogpqjn9VsQ"},
{"content":{"msgtype":"m.text","body":"No, it removes promise handling entirely","m.relates_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4","is_falling_back":true,"m.in_reply_to":{"event_id":"$J4fKCtn41kSirr14_eU-5iaGyVSxO5slfYI88Sim_m0"},"rel_type":"m.thread"}},"ts":1674856111230,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bI4KsEFNWq-lN4GIG4OPgdky_EHunB_Hhe8Gko0KWAM"},
{"content":{"msgtype":"m.text","body":"They're trying to see if the continuation stuff causes any perf impact, and it doesn't look like it","m.relates_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4","is_falling_back":true,"m.in_reply_to":{"event_id":"$bI4KsEFNWq-lN4GIG4OPgdky_EHunB_Hhe8Gko0KWAM"},"rel_type":"m.thread"}},"ts":1674856137493,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tcEqteI4Okiy9KNyyb8zl92t3zfZ2aY0yFge7x49ygA"},
{"content":{"msgtype":"m.text","body":"(But I don't really know how to read it, so maybe I missed something)","m.relates_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4","is_falling_back":true,"m.in_reply_to":{"event_id":"$tcEqteI4Okiy9KNyyb8zl92t3zfZ2aY0yFge7x49ygA"},"rel_type":"m.thread"}},"ts":1674856148708,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lcUzavzCn_sTDONYyKZ5y2p3rmqbLLIncfShlMxYhrY"},
{"content":{"msgtype":"m.text","body":"What we *almost* need is a way of capturing the reference to the async context frame ... something like a...\n\n```\nclass AsyncContextFrame {\n  static readonly attribute AsyncContextFrame current;\n  run(fn, ...args);\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>What we <em>almost</em> need is a way of capturing the reference to the async context frame ... something like a...</p>\n<pre><code>class AsyncContextFrame {\n  static readonly attribute AsyncContextFrame current;\n  run(fn, ...args);\n}\n</code></pre>\n"},"ts":1674856182285,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$IZWuQTe_vgHhz-UFwpe7XBuzULNSRm9YcD3xFuosSPI"},
{"content":{"msgtype":"m.text","body":"such that in an object I could do...\n\n```\nclass Foo {\n  #frame = AsyncContextFrame.current;\n  doSomething() {\n    return this.#frame.run(() => {});\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>such that in an object I could do...</p>\n<pre><code>class Foo {\n  #frame = AsyncContextFrame.current;\n  doSomething() {\n    return this.#frame.run(() =&gt; {});\n  }\n}\n</code></pre>\n"},"ts":1674856230603,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$n4gdlB8XQH0C75YYGbz5aEj0Y_iNZmF4YxPEjXGlAU8"},
{"content":{"msgtype":"m.text","body":"ah, ok. Yeah from what I can see there it's no perceptible difference in performance","m.relates_to":{"event_id":"$LNBH0OODQ_8VdLMXlYbEN3c-XPgmucNO4JD48O-0lk4","is_falling_back":true,"m.in_reply_to":{"event_id":"$lcUzavzCn_sTDONYyKZ5y2p3rmqbLLIncfShlMxYhrY"},"rel_type":"m.thread"}},"ts":1674856270483,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$CAw72x9Yz8fC3knYqnLIzmtpppyo4nuCWaQkI2nv41Y"},
{"content":{"msgtype":"m.text","body":"The initial design for `AsyncContext` had a mutable static property, and it was shot down","format":"org.matrix.custom.html","formatted_body":"The initial design for <code>AsyncContext</code> had a mutable static property, and it was shot down"},"ts":1674856280535,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pJbaC7KBgyr_uz1g4cxikwKVXWzfph9l25lsUcAKr9c"},
{"content":{"msgtype":"m.text","body":"Is there a reason they can do `#run = AsyncContext.wrap((cb) => cb())`?","format":"org.matrix.custom.html","formatted_body":"Is there a reason they can do <code>#run = AsyncContext.wrap((cb) =&gt; cb())</code>?"},"ts":1674856350991,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IM66Xk83amb6BkH9fSGx0Jyst9zWasoh90fFttjqgFA"},
{"content":{"msgtype":"m.text","body":"(This is the higher-order pattern that I kinda dislike)"},"ts":1674856364596,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$0Mzg4cT-tL6zc5vSNsBUBeu-rINsf9waDYWenFKKfHI"},
{"content":{"msgtype":"m.text","body":"other than it's really ugly? lol"},"ts":1674856383324,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$JKN6PfZqGSvRJUYS51JoSe3fEYK7rEu7Ovkpo7q4GbE"},
{"content":{"msgtype":"m.text","body":"not a fan of the boilerplate but it does work"},"ts":1674856424744,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$jPZMffvxinxkXqI6IMUQl832YM4MS5sTDqWWefzE97Y"},
{"content":{"msgtype":"m.text","body":"My original design had a [`Snapshot` class](https://gist.github.com/jridgewell/3970a3078ebfb90e90cd9d0a36ab9c08#file-async-context-ts-L7-L20) that acts like `AsyncResource`","format":"org.matrix.custom.html","formatted_body":"My original design had a <a href=\"https://gist.github.com/jridgewell/3970a3078ebfb90e90cd9d0a36ab9c08#file-async-context-ts-L7-L20\"><code>Snapshot</code> class</a> that acts like <code>AsyncResource</code>"},"ts":1674856450516,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EM7O5ZUxSCflYhW951rCLF0CfuyCoEttQLV01uXrbto"},
{"content":{"msgtype":"m.text","body":"I would expect the pattern to be common enough to justify making a utility... perhaps something simple like\n\n```\n#run = AsyncContext.snapshot(); \n```\n\nThat is simply defined as being equivalent to `AsyncContext.wrap((cb, ...args) => cb(..args))`","format":"org.matrix.custom.html","formatted_body":"<p>I would expect the pattern to be common enough to justify making a utility... perhaps something simple like</p>\n<pre><code>#run = AsyncContext.snapshot(); \n</code></pre>\n<p>That is simply defined as being equivalent to <code>AsyncContext.wrap((cb, ...args) =&gt; cb(..args))</code></p>\n"},"ts":1674856605867,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$qIDA5ILtKLXHD5Ef1HnFb6eRcC-HjZE0dXA4DY_qC7I"},
{"content":{"msgtype":"m.text","body":"That seems fine"},"ts":1674857059196,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$jrJ5FSUFkBhPIKniN_Vdsd6bG0ewncOVGSlQeQkNIwQ"},
{"content":{"msgtype":"m.text","body":"I guess alternatively we could have the variation `AsyncContext.wrap()` (with no arguments passed) be the equivalent to `AsyncContext.snapshot()` but that seems a bit weird","format":"org.matrix.custom.html","formatted_body":"I guess alternatively we could have the variation <code>AsyncContext.wrap()</code> (with no arguments passed) be the equivalent to <code>AsyncContext.snapshot()</code> but that seems a bit weird"},"ts":1674857825863,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$lR23A1rSjr-622puCDIfoY15aELEeDdNqCDCPTF-zJc"},
{"content":{"msgtype":"m.text","body":"it would save on API surface tho"},"ts":1674857833157,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$oTL1ks773IGmWzpe2UGg2mG-GgghA-EiMZsp-opVK0I"},
{"content":{"msgtype":"m.text","body":"When I suggested switching to wrap, it’s because I thought it looked simpler. I would like to understand more about the use cases for AsyncResource to explain its surface area. Could someone compile a few usage examples?"},"ts":1674863202698,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$tZOjP8H7-K2IuQjvCRxGMB9PdUtg9zr3dA4G5EyFiwY"},
{"content":{"msgtype":"m.text","body":"(I like to think nothing has been shot down yet, we are just iterating through alternatives and can still come back to things. Anyway, I apologize for being too pushy about some of these details.)"},"ts":1674863330418,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$orPrN0N2f8xV9YhzYJ6E-b8JX0bWnMZ_eTTiz2_xEH4"},
{"content":{"msgtype":"m.text","body":"I think adding punned overloads still counts as surface area. But if something is important, we can go back and add it."},"ts":1674863458919,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qFeOHJMsO_NhH5nVUXy838s5exhIqRikJKnxsqUbX-o"},
{"content":{"msgtype":"m.text","body":"So `AsyncResource` originally was just an `async_hooks` thing and didn't have anything to do with AsyncLocalStorage. However, as an artifact of the way Node.js implemented ALS, every `AsyncResource` captures the async context when it is created and allows functions to enter the context using `runInAsyncScope(...)`. Simply put: it's a way of capturing the async context on object creation.","format":"org.matrix.custom.html","formatted_body":"So <code>AsyncResource</code> originally was just an <code>async_hooks</code> thing and didn't have anything to do with AsyncLocalStorage. However, as an artifact of the way Node.js implemented ALS, every <code>AsyncResource</code> captures the async context when it is created and allows functions to enter the context using <code>runInAsyncScope(...)</code>. Simply put: it's a way of capturing the async context on object creation."},"ts":1674863873612,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6QbDxOTcnFQeFV9199RN35V7Q7SC1wIAZNX0TkbhTSg"},
{"content":{"msgtype":"m.text","body":"For resource tracking purposes (`async_hooks`), `AsyncResource` is still a thing that will be needed there, but for async context tracking, it's not really needed and it's a bit wasteful","format":"org.matrix.custom.html","formatted_body":"For resource tracking purposes (<code>async_hooks</code>), <code>AsyncResource</code> is still a thing that will be needed there, but for async context tracking, it's not really needed and it's a bit wasteful"},"ts":1674863919790,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$I_mv_Voh8u3cABh0LZt6y-p0NsM7Y41ppjOhFrcUTS8"}
]