[
{"content":{"body":"I think we have more `unhandledrejection` bugs that we haven't caught yet","format":"org.matrix.custom.html","formatted_body":"I think we have more <code>unhandledrejection</code> bugs that we haven't caught yet","m.mentions":{},"msgtype":"m.text"},"ts":1716832612413,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1ZB0IIoDBrF3wWpL0n7VOVMyd34i5MWri33YB5w2Zjc"},
{"content":{"body":"this was in part because `unhandledrejection` is tested with WPT, not test262, and I haven't gotten around to writing WPT tests yet","format":"org.matrix.custom.html","formatted_body":"this was in part because <code>unhandledrejection</code> is tested with WPT, not test262, and I haven't gotten around to writing WPT tests yet","m.mentions":{},"msgtype":"m.text"},"ts":1716832637542,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1Ca4jPr7JLCcsRVndoQJilZM6v4mW3v7GgS04VgIl6k"},
{"content":{"body":"but it's looking like with the current spec, `someApi().then()` would lose track of the rejection context","format":"org.matrix.custom.html","formatted_body":"but it's looking like with the current spec, <code>someApi().then()</code> would lose track of the rejection context","m.mentions":{},"msgtype":"m.text"},"ts":1716832695395,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$jf44l-YKfd4kHttjS1x46QVSXmJ0A1fp7DRQeGw420c"},
{"content":{"body":" * but it's looking like with the current spec, `someAsyncApi().then()` would lose track of the rejection context","format":"org.matrix.custom.html","formatted_body":" * but it's looking like with the current spec, <code>someAsyncApi().then()</code> would lose track of the rejection context","m.mentions":{},"m.new_content":{"body":"but it's looking like with the current spec, `someAsyncApi().then()` would lose track of the rejection context","format":"org.matrix.custom.html","formatted_body":"but it's looking like with the current spec, <code>someAsyncApi().then()</code> would lose track of the rejection context","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jf44l-YKfd4kHttjS1x46QVSXmJ0A1fp7DRQeGw420c","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1716832707348,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$47SOK9LxfLnMi_odnMrde_hEpBZTGbRa-xnA1hwgNHs"},
{"content":{"body":"in Stephen's proposal of preserving the resolution context, this would just work I think","m.mentions":{},"msgtype":"m.text"},"ts":1716832744870,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$obAxmbioP6_uxcgILpRu2PJPcC8MZuwR-adtQAzL03I"},
{"content":{"body":"> <@jridgewell:matrix.org> This seems funcionally equivalent to https://github.com/tc39/proposal-async-context/issues/60#issuecomment-2050457550, which solves the global leak issue by having a wrapping try-catch reset the vaules after exiting the closure. It’s still not my favorite implementation becuase of mutability and odering of async functions causing unrelated breakages, eg if [main](https://gist.github.com/jridgewell/4aa2d6458f41d4574d6aeb580dc80d5d) started with an `await 0` before entering `’bar’`, the outside caller sees different behavior. It feels like Zalgo-lite.\n\nSimilar, but the intent is that the _runtime_ would generally be defining those scopes rather than only ever being handled by a user-facing API. We have a bunch of discrete execution concepts which can be used as boundaries for these scopes such as a promise continuation or a callback. We could also probably extend the Function type with something like a `func.bindToContext(value)` which could be similar to having that function call `run(...)` internally.\n\nMy point is, we can have the nice DX of the set/get interface without too heavily exposing the scoping problem to users. Decoupling the scoping also makes it potentially reusable, which would be beneficial if we _do_ decide to make separate types for the two around and through flows. It would simplify things for users if they can describes scopes with a single API and have both flow systems just make different decisions about how to link the scopes together in the graph.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$fiVwqndboo6mXJ01igGxVo4jk0tyfJH4g8mNKB2pcmU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>This seems funcionally equivalent to https://github.com/tc39/proposal-async-context/issues/60#issuecomment-2050457550, which solves the global leak issue by having a wrapping try-catch reset the vaules after exiting the closure. It’s still not my favorite implementation becuase of mutability and odering of async functions causing unrelated breakages, eg if <a data-md href=\"https://gist.github.com/jridgewell/4aa2d6458f41d4574d6aeb580dc80d5d\">main</a> started with an <code data-md=\"`\">await 0</code> before entering <code data-md=\"`\">’bar’</code>, the outside caller sees different behavior. It feels like Zalgo-lite.</blockquote></mx-reply><p>Similar, but the intent is that the <em>runtime</em> would generally be defining those scopes rather than only ever being handled by a user-facing API. We have a bunch of discrete execution concepts which can be used as boundaries for these scopes such as a promise continuation or a callback. We could also probably extend the Function type with something like a <code>func.bindToContext(value)</code> which could be similar to having that function call <code>run(...)</code> internally.</p>\n<p>My point is, we can have the nice DX of the set/get interface without too heavily exposing the scoping problem to users. Decoupling the scoping also makes it potentially reusable, which would be beneficial if we <em>do</em> decide to make separate types for the two around and through flows. It would simplify things for users if they can describes scopes with a single API and have both flow systems just make different decisions about how to link the scopes together in the graph.</p>\n","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$fiVwqndboo6mXJ01igGxVo4jk0tyfJH4g8mNKB2pcmU"}},"msgtype":"m.text"},"ts":1716832967695,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$wc4PaWHNjoi3f9qjNB6VdBgksN8xqgEPGTbAQn4tstk"},
{"content":{"body":"> <@jridgewell:matrix.org> Everywhere except if it’s set within the global context, which persists beyond just the current sync execution. Your above `defineScope(() => {})` solves this by definining an exit point that cleans the global context.\n\nIf you mean the top-level of the file/module, it'd just live as long as that script/module does, which seems to make sense to me.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$zsPTxqj7WoePgXeX44i9rQHqlcqmsUWD_TIX9gMWqHo?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Everywhere except if it’s set within the global context, which persists beyond just the current sync execution. Your above <code data-md=\"`\">defineScope(() =&gt; {})</code> solves this by definining an exit point that cleans the global context.</blockquote></mx-reply>If you mean the top-level of the file/module, it'd just live as long as that script/module does, which seems to make sense to me.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$zsPTxqj7WoePgXeX44i9rQHqlcqmsUWD_TIX9gMWqHo"}},"msgtype":"m.text"},"ts":1716833027425,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$-3d0vUaluEblaywga6yiCmREWU_-o-Za5NTHu77nAcs"},
{"content":{"body":"> <@jridgewell:matrix.org> > The risk of things living super long though is also easily mitigated by just emptying the context in some way, such as setting it to undefined when you've decided you're done with it.\n> \n> In a flows-through system, I think you also need to free every cached promise that holds that context? They would strongly hold their resolution context. The engine wouldn’t mutate user’s context automatically, and without a library API to know when the current exeuction is finalized, you’re left guessing when you can mutate the context or drop all promises.\n\nYes, promises suck a little bit in that they would need to hold the reference alive as long as the promise remains alive. This _could_ increase memory pressure, but is also the _expected_ behaviour as any future continuation attached to that promise _should_ restore that context value.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$xLgn1L7yDpNXKEtgMe3yLvEcVmclUtwa3A0Ffv7QBh4?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><blockquote data-md=\"&gt;\">The risk of things living super long though is also easily mitigated by just emptying the context in some way, such as setting it to undefined when you've decided you're done with it.<br /></blockquote><br />In a flows-through system, I think you also need to free every cached promise that holds that context? They would strongly hold their resolution context. The engine wouldn’t mutate user’s context automatically, and without a library API to know when the current exeuction is finalized, you’re left guessing when you can mutate the context or drop all promises.</blockquote></mx-reply>Yes, promises suck a little bit in that they would need to hold the reference alive as long as the promise remains alive. This <em>could</em> increase memory pressure, but is also the <em>expected</em> behaviour as any future continuation attached to that promise <em>should</em> restore that context value.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$xLgn1L7yDpNXKEtgMe3yLvEcVmclUtwa3A0Ffv7QBh4"}},"msgtype":"m.text"},"ts":1716833096225,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$k0nShT5uLRzZWTDRaLyp7JgBTXPAMwZfe9Jzlagf0XE"},
{"content":{"body":"> <@abotella:igalia.com> in Stephen's proposal of preserving the resolution context, this would just work I think\n\nYes, `unhandledrejection` is one particular case where the desired context is _always_ the flows-through context. You want to capture the context as it was when the rejection _happened_, even if it flows through a bunch of intermediate layers.\n\nThe difference between through and around flows is basically the same conceptually as subject and predicate. The _through_ path gives you the subject of the failure so you can actually _see_ what's going on. Whereas the _around_ path gives you the predicate which is only describing what is being _done_ with that subject, but that's not relevant in the case of a failure as it's what _would have_ been done but will not be _because_ of the failure.\n\nThis also matches that prior description of around flow being like parameter flow. It describes where execution is _going_ and not so much where it _came from_, which is a bit counter-intuitive from the flow users have generally expected from AsyncLocalStorage where they want to know where something _came from_ so they can acquired stored information about that originating execution.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$obAxmbioP6_uxcgILpRu2PJPcC8MZuwR-adtQAzL03I?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>in Stephen&#39;s proposal of preserving the resolution context, this would just work I think</blockquote></mx-reply><p>Yes, <code>unhandledrejection</code> is one particular case where the desired context is <em>always</em> the flows-through context. You want to capture the context as it was when the rejection <em>happened</em>, even if it flows through a bunch of intermediate layers.</p>\n<p>The difference between through and around flows is basically the same conceptually as subject and predicate. The <em>through</em> path gives you the subject of the failure so you can actually <em>see</em> what's going on. Whereas the <em>around</em> path gives you the predicate which is only describing what is being <em>done</em> with that subject, but that's not relevant in the case of a failure as it's what <em>would have</em> been done but will not be <em>because</em> of the failure.</p>\n<p>This also matches that prior description of around flow being like parameter flow. It describes where execution is <em>going</em> and not so much where it <em>came from</em>, which is a bit counter-intuitive from the flow users have generally expected from AsyncLocalStorage where they want to know where something <em>came from</em> so they can acquired stored information about that originating execution.</p>\n","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$obAxmbioP6_uxcgILpRu2PJPcC8MZuwR-adtQAzL03I"}},"msgtype":"m.text"},"ts":1716833641037,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$VmuweaKPEJOudCkfj-CzMFZKL8T59SPMeU7757BipQI"},
{"content":{"body":"so if we have both types of async context variables, then the only one that would have a relevant context for unhandledrejection would be the get/set one?","m.mentions":{},"msgtype":"m.text"},"ts":1716833759775,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lbOHOrScepnpGUY31k-Vk-n0WCVcv_AF-Kv4LZdJx6M"},
{"content":{"body":"no, you still need some value for the other variables","m.mentions":{},"msgtype":"m.text"},"ts":1716833792814,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hLCLWF76ODpSkt03lSs5RX3j7uet60VNex-m7nbMQeQ"},
{"content":{"body":"get/set is a separate thing.","m.mentions":{},"msgtype":"m.text"},"ts":1716833798909,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$mzpM_CuFD9IQAj6nF6rrm9lp3wjSMh9HB9LHmyZ1Iwg"},
{"content":{"body":"oh, I might have been conflating both proposals","m.mentions":{},"msgtype":"m.text"},"ts":1716833816570,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Bex51iODEMm1E9rBba9pNVC7twEoI4I8nt2XFMeBvh0"},
{"content":{"body":"The get/set thing is just about that you don't actually _need_ the `store.run(...)` if you have the _runtime_ provide scopes.","format":"org.matrix.custom.html","formatted_body":"The get/set thing is just about that you don't actually <em>need</em> the <code>store.run(...)</code> if you have the <em>runtime</em> provide scopes.","m.mentions":{},"msgtype":"m.text"},"ts":1716833847489,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$7Z-J9grq_nLIpr8ZB98IxnPJuFwuj1Z2-w-DXckWw4E"},
{"content":{"body":"Well, you still might _want_ to have `run(..)` sometimes, but it becomes less important if the context flow model is clear and correct from the core.","format":"org.matrix.custom.html","formatted_body":"Well, you still might <em>want</em> to have <code>run(..)</code> sometimes, but it becomes less important if the context flow model is clear and correct from the core.","m.mentions":{},"msgtype":"m.text"},"ts":1716833903656,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$7bKAF47Ggj2sBVbepm6Wi9P6utZNTLN-jA5a7HwJRyM"},
{"content":{"body":"Which is where integration with things like promises comes in.","m.mentions":{},"msgtype":"m.text"},"ts":1716833930792,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$2Bt6hIdnKPQ0Z7_Zan2Cnxk3LdGlJWhu5q_C0fSokJc"},
{"content":{"body":"well, I think the idea I had was James Snell's distinction between a run API that flows around and a set API that flows through","m.mentions":{},"msgtype":"m.text"},"ts":1716833943381,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cfNdBf9URFqP6Y65OWPUnaZRU5996ZjOOTIQRt-3p1g"},
{"content":{"body":"I might have missed some of the intervening discussion because I was sick","m.mentions":{},"msgtype":"m.text"},"ts":1716833968258,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xJdh708Rm7jteaod4wpR4NXLAAB0YYAKIwKRLMkyH64"},
{"content":{"body":"So it's a little weird to me that we're pursuing _both_ defining the correct flow model _and_ still using the `run(...)` scoping when we could just safely modify the _current_ scope if we actually _have_ a clearly defined \"current scope\" to be modifying.","format":"org.matrix.custom.html","formatted_body":"So it's a little weird to me that we're pursuing <em>both</em> defining the correct flow model <em>and</em> still using the <code>run(...)</code> scoping when we could just safely modify the <em>current</em> scope if we actually <em>have</em> a clearly defined \"current scope\" to be modifying.","m.mentions":{},"msgtype":"m.text"},"ts":1716833981951,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$Ao2UY4fOaYynXoVP-riOkDh0mNawHjnep15ksF_N4Qk"},
{"content":{"body":"I may have missed that too. 🤔","m.mentions":{},"msgtype":"m.text"},"ts":1716834022081,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$iizeUye5KcFDj6VX4Q6FsVdkreg5mES8LCDxEIoRG10"}
]