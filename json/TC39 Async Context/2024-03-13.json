[
{"content":{"body":"https://github.com/nodejs/node/pull/52065 I am prototyping `using` declaration support with `AsyncLocalStorage`. In order to address unexpected declaration without `using`, a leakage check is performed when a task (AsyncResource) callback is finished. If there is any active disposable async local storage value, an error is emitted to hint such misuse.","format":"org.matrix.custom.html","formatted_body":"https://github.com/nodejs/node/pull/52065 I am prototyping <code>using</code> declaration support with <code>AsyncLocalStorage</code>. In order to address unexpected declaration without <code>using</code>, a leakage check is performed when a task (AsyncResource) callback is finished. If there is any active disposable async local storage value, an error is emitted to hint such misuse.","m.mentions":{},"msgtype":"m.text"},"ts":1710340679721,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$hN3gaoK5BB2HuxYkJa-BC5Wz53DrcUcEgyh9pbnNSNc"},
{"content":{"body":"This could help in less refactoring when adding async context support, i.e. no need to create a new function/arrow function for sub-operations and avoid violating TCP when mutating async context values, as rbuckton suggested.","m.mentions":{},"msgtype":"m.text"},"ts":1710341043932,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$pFgmXVwdjSNI5m_2cMRGarmsNWJf-O2AWugsn15wlb0"},
{"content":{"body":"what happens if you have `AsyncLocalStorageDisposableStore`s created and disposed of in a non-stacked way?","format":"org.matrix.custom.html","formatted_body":"what happens if you have <code>AsyncLocalStorageDisposableStore</code>s created and disposed of in a non-stacked way?","m.mentions":{},"msgtype":"m.text"},"ts":1710341669882,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BOjAl4XnvKKU8C7L44Mrw087vSqa32bDLsSCIGo2nBQ"}
]