[
{"content":{"org.matrix.msc1767.text":"honestly had not considered it previously but yes, that makes sense","body":"honestly had not considered it previously but yes, that makes sense","msgtype":"m.text"},"ts":1671063697061,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$MsN4MYBxk0eZG-awdQaORhT4HnJkAQBNig672D4Vpds"},
{"content":{"msgtype":"m.text","body":"Yah, we need a similar feature"},"ts":1671064048118,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EmurjvMAZu8TrtTik7rk1G4HDZmpzizHp63PTIe5evo"},
{"content":{"org.matrix.msc1767.text":"I would avoid introducing any exception routing mechanism in the proposal, as documented as non-goals. But yes, I agree that we should clarify the \" async context\" when running the unhandled rejection event listeners, which would be necessary to associate the event with appropriate context values. This probably can be documented in a section dedicated for host integrations, in which we can also visit other host integration topics.","body":"I would avoid introducing any exception routing mechanism in the proposal, as documented as non-goals. But yes, I agree that we should clarify the \" async context\" when running the unhandled rejection event listeners, which would be necessary to associate the event with appropriate context values. This probably can be documented in a section dedicated for host integrations, in which we can also visit other host integration topics.","msgtype":"m.text"},"ts":1671070655917,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$LIuEAe1sKm8TZ3EXmZfRXgeNXJkEM6XvcuJlismlock"},
{"content":{"body":"Yeah I think mechanically this would involve a host integration (since that is how uncaught rejections are reported) but maybe we want saving the context to just be part of the main spec algorithm, rather than done by a host hook, to clarify that it is expected to be in common. Anyway that is an editorial question—the important thing is establishing the shared utility and getting this into multiple environments ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Yeah I think mechanically this would involve a host integration (since that is how uncaught rejections are reported) but maybe we want saving the context to just be part of the main spec algorithm, rather than done by a host hook, to clarify that it is expected to be in common. Anyway that is an editorial question—the important thing is establishing the shared utility and getting this into multiple environments"},"ts":1671072312556,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yHQ0dOr25caOrf_jYLjVossojzqYzwYkrjhaN4VFPwY"},
{"content":{"body":"I would love to hear from James and Justin how this affects use cases/environments that you have in mind ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"I would love to hear from James and Justin how this affects use cases/environments that you have in mind"},"ts":1671072355959,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6nbI2Q4uGjbafGAxtbFZ-87kbz6y6SeUE81vR1RWPg4"},
{"content":{"body":"Another thing which is important for Bloomberg and *definitely* not in the spec is V8’s API for dealing with all this. I imagine this is important for many server environments. Maybe we could collaborate on proposing such an API as part of this project","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Another thing which is important for Bloomberg and <em>definitely</em> not in the spec is V8’s API for dealing with all this. I imagine this is important for many server environments. Maybe we could collaborate on proposing such an API as part of this project"},"ts":1671072545692,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EQCZLmI_uEGoDeGIAFwZhG5xuxaeMuiakp4gzrMldYA"},
{"content":{"body":"For example, wrap would have to look pretty different (maybe more like what jridgewell was proposing…) in the C++ API ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"For example, wrap would have to look pretty different (maybe more like what jridgewell was proposing…) in the C++ API"},"ts":1671072580572,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$s3kxF8oTi5NthJ-mEAk9UjXiKGDtxPJxaxFuKGRk0d4"},
{"content":{"msgtype":"m.text","body":"We would want to make sure there is a C++ API for creating AsyncContexts, and doing run and wrap and get"},"ts":1671072652072,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qMRm5Fp8v_HMZzottNBI4mXf34HoltOiyxO60_-wzxQ"},
{"content":{"org.matrix.msc1767.text":"I don't know what's possible on the C++ side of JS engines, but I imagine they can create closures?","body":"I don't know what's possible on the C++ side of JS engines, but I imagine they can create closures?","msgtype":"m.text"},"ts":1671072714584,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$8qGk6027-9eyoFYWaC0CbDcfAdNN8OWgqBnzhHIuxfc"},
{"content":{"org.matrix.msc1767.message":[{"body":"The `AsyncResource` and static `wrap` method are mostly equivalent in functionality, it's just whether we allocate an object or a closure","mimetype":"text/plain"},{"body":"The <code>AsyncResource</code> and static <code>wrap</code> method are mostly equivalent in functionality, it's just whether we allocate an object or a closure","mimetype":"text/html"}],"body":"The `AsyncResource` and static `wrap` method are mostly equivalent in functionality, it's just whether we allocate an object or a closure","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"The <code>AsyncResource</code> and static <code>wrap</code> method are mostly equivalent in functionality, it's just whether we allocate an object or a closure"},"ts":1671072743450,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fW2bfg94jCsRgspSvM9dGtb176ApwZgS9tbIvpJQpRA"},
{"content":{"body":"Yeah I am thinking we want an API that doesn’t use closures on the C++ side and instead reifies the stack ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Yeah I am thinking we want an API that doesn’t use closures on the C++ side and instead reifies the stack"},"ts":1671072755813,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yQz4y-p9pzFt83zyfzcftLaRcaUR0c3_89_gPXPfCNw"},
{"content":{"msgtype":"m.text","body":"So more like AsyncResource"},"ts":1671072775047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KYVICZbezKj1h2ziIdVtZHz0faOhq-FUB78lYwkDzcU"},
{"content":{"org.matrix.msc1767.message":[{"body":"For the `unhandledrejection`, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)","mimetype":"text/plain"},{"body":"For the <code>unhandledrejection</code>, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)","mimetype":"text/html"}],"body":"For the `unhandledrejection`, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"For the <code>unhandledrejection</code>, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)"},"ts":1671072779823,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MYULKFnr3bh9dms44JyV4AgTY89KEkl0Au2_CJcTLfI"},
{"content":{"org.matrix.msc1767.message":[{"body":"I actually prefer my `Snapshot` (`AsyncResource`) API, because it's easier it's easier to use other callbacks without reverting into a HOF","mimetype":"text/plain"},{"body":"I actually prefer my <code>Snapshot</code> (<code>AsyncResource</code>) API, because it's easier it's easier to use other callbacks without reverting into a HOF","mimetype":"text/html"}],"body":"I actually prefer my `Snapshot` (`AsyncResource`) API, because it's easier it's easier to use other callbacks without reverting into a HOF","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"I actually prefer my <code>Snapshot</code> (<code>AsyncResource</code>) API, because it's easier it's easier to use other callbacks without reverting into a HOF"},"ts":1671072863794,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PaT20mpm2NBDWCij3oME8-5LsP7HgqvAGEpwuGsc224"},
{"content":{"org.matrix.msc1767.text":"(https://gist.github.com/jridgewell/3970a3078ebfb90e90cd9d0a36ab9c08#file-async-context-ts-L7-L20)","body":"(https://gist.github.com/jridgewell/3970a3078ebfb90e90cd9d0a36ab9c08#file-async-context-ts-L7-L20)","msgtype":"m.text"},"ts":1671072868790,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JNVQlvyKYRqbdpRWmTLjLrsGbU25QwU-J_xORxOov-U"},
{"content":{"body":"> <@jridgewell:matrix.org> For the `unhandledrejection`, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)\n\nWhat I am proposing is that saving the current zone in the promise (the “hard part”) be in the JS spec. Or, if it’s not in the spec but rather in a host hook, we sort of let engines know it’s fine if that is all they let people use the host hook for.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24MYULKFnr3bh9dms44JyV4AgTY89KEkl0Au2_CJcTLfI\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>For the <code>unhandledrejection</code>, I think this is part of the Host implementation, for the reason you mentioned (it's not spec'd in TC39)</blockquote></mx-reply>What I am proposing is that saving the current zone in the promise (the “hard part”) be in the JS spec. Or, if it’s not in the spec but rather in a host hook, we sort of let engines know it’s fine if that is all they let people use the host hook for.","m.relates_to":{"m.in_reply_to":{"event_id":"$MYULKFnr3bh9dms44JyV4AgTY89KEkl0Au2_CJcTLfI"}}},"ts":1671072891367,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$4qlji42MbpBr1HFmzAPvuat9rfdspkuta0bC9zjevQU"},
{"content":{"org.matrix.msc1767.text":"Do we specify things that we don't actually use?","body":"Do we specify things that we don't actually use?","msgtype":"m.text"},"ts":1671072917174,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tRnNlfAUihkKLdPWPuQVrltSMMxCIbuiQc6lbINop5I"},
{"content":{"org.matrix.msc1767.message":[{"body":"I know for JobRecord, we have a `[[HostDefined]]` slot: https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-jobcallback-records","mimetype":"text/plain"},{"body":"I know for JobRecord, we have a <code>[[HostDefined]]</code> slot: https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-jobcallback-records","mimetype":"text/html"}],"body":"I know for JobRecord, we have a `[[HostDefined]]` slot: https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-jobcallback-records","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"I know for JobRecord, we have a <code>[[HostDefined]]</code> slot: https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-jobcallback-records"},"ts":1671072947305,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qJ1A_VBfNPT3JDLzZrtqtpruPp6VKJolyFba8f-dcOc"},
{"content":{"body":"> <@jridgewell:matrix.org> I actually prefer my `Snapshot` (`AsyncResource`) API, because it's easier it's easier to use other callbacks without reverting into a HOF\n\nI think it is fine to make the JS and C++ API choices separately.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24PaT20mpm2NBDWCij3oME8-5LsP7HgqvAGEpwuGsc224\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I actually prefer my <code>Snapshot</code> (<code>AsyncResource</code>) API, because it's easier it's easier to use other callbacks without reverting into a HOF</blockquote></mx-reply>I think it is fine to make the JS and C++ API choices separately.","m.relates_to":{"m.in_reply_to":{"event_id":"$PaT20mpm2NBDWCij3oME8-5LsP7HgqvAGEpwuGsc224"}}},"ts":1671072947669,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pj8gOpAqwv6jZpcRyUQ_6faQmsw3wmTvAn0js1la3aM"},
{"content":{"org.matrix.msc1767.text":"But we don't define what's actually inside it.","body":"But we don't define what's actually inside it.","msgtype":"m.text"},"ts":1671072961885,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$s5_WcHLDtQyF2rN_S7X-AGx-mHEIWKhXqYiSiJC8DWs"},
{"content":{"msgtype":"m.text","body":"Yeah so this is an editorial decision, but if we don’t do it this way in the spec, we should at least communicate the intent some other way so engines can do the appropriate thing"},"ts":1671073001905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kd5cqUuf5-xsB5p9-SQ7t8734G620VQmLGVSUDOj6s0"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I think it is fine to make the JS and C++ API choices separately.\n\nAgreed. And not all JS apis are exposed in C++.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$pj8gOpAqwv6jZpcRyUQ_6faQmsw3wmTvAn0js1la3aM?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it is fine to make the JS and C++ API choices separately.</blockquote></mx-reply>Agreed. And not all JS apis are exposed in C++.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> I think it is fine to make the JS and C++ API choices separately.\n\nAgreed. And not all JS apis are exposed in C++.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$pj8gOpAqwv6jZpcRyUQ_6faQmsw3wmTvAn0js1la3aM?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I think it is fine to make the JS and C++ API choices separately.</blockquote></mx-reply>Agreed. And not all JS apis are exposed in C++.","m.relates_to":{"m.in_reply_to":{"event_id":"$pj8gOpAqwv6jZpcRyUQ_6faQmsw3wmTvAn0js1la3aM"}}},"ts":1671073032557,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$NzD7PqiiyaPAD9gY5X-J_DLtMc41ZZcDugqOsS3vIyY"},
{"content":{"org.matrix.msc1767.text":"They doesn't necessarily align.","body":"They doesn't necessarily align.","msgtype":"m.text"},"ts":1671073057532,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$rlTTGZRDyKQ2M6pJ-XdeWbrl_JzdeMs-cFcQ2qoVtNE"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I would love to hear from James and Justin how this affects use cases/environments that you have in mind\n\nOur use case is the same as the `console.log`, actually it is the `console.log`. We try to associate every log with the request that causes it, so that we can present a unified logging UI. But we don't have a good way to associate the `unhandledrejection` call with the request, and it's no fun to polyfill in userland (every user-created promise must create 2, and native-created promises aren't always possible to detect)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$6nbI2Q4uGjbafGAxtbFZ-87kbz6y6SeUE81vR1RWPg4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I would love to hear from James and Justin how this affects use cases/environments that you have in mind</blockquote></mx-reply>Our use case is the same as the <code>console.log</code>, actually it is the <code>console.log</code>. We try to associate every log with the request that causes it, so that we can present a unified logging UI. But we don't have a good way to associate the <code>unhandledrejection</code> call with the request, and it's no fun to polyfill in userland (every user-created promise must create 2, and native-created promises aren't always possible to detect)","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> I would love to hear from James and Justin how this affects use cases/environments that you have in mind\n\nOur use case is the same as the `console.log`, actually it is the `console.log`. We try to associate every log with the request that causes it, so that we can present a unified logging UI. But we don't have a good way to associate the `unhandledrejection` call with the request, and it's no fun to polyfill in userland (every user-created promise must create 2, and native-created promises aren't always possible to detect)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$6nbI2Q4uGjbafGAxtbFZ-87kbz6y6SeUE81vR1RWPg4?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I would love to hear from James and Justin how this affects use cases/environments that you have in mind</blockquote></mx-reply>Our use case is the same as the <code>console.log</code>, actually it is the <code>console.log</code>. We try to associate every log with the request that causes it, so that we can present a unified logging UI. But we don't have a good way to associate the <code>unhandledrejection</code> call with the request, and it's no fun to polyfill in userland (every user-created promise must create 2, and native-created promises aren't always possible to detect)","m.relates_to":{"m.in_reply_to":{"event_id":"$6nbI2Q4uGjbafGAxtbFZ-87kbz6y6SeUE81vR1RWPg4"}}},"ts":1671074520295,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Fq3J4zGZZPx4846ukwFYxxhA51RjQjWM340zkGJBc0g"},
{"content":{"msgtype":"m.text","body":"I don’t quite understand, how are unhandled observed in your system?"},"ts":1671075722963,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WU60yR5xQbcILclBtlST4TrHK3fBDr7lZu4T_TxBjzY"},
{"content":{"msgtype":"m.text","body":"In Bloomberg’s environment, one thing we want to use AsyncContext for is running multiple logical applications in the same thread and Isolate. We need to understand who is the “current application”. In the case of unhandled rejections, we want to kill the application that created the unhandled promise rejection. I understand our use case is a bit idiosyncratic so I wanted to understand if the same comes up for others."},"ts":1671075994874,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vUMM2ikO0zGSbQMDNfuG3-_4fCJI3E_uwcMRH2c7Ogg"},
{"content":{"org.matrix.msc1767.message":[{"body":"`PromiseRejectionEvent` gets the `promise`, so we need to map from Promise to Request, which isn't foolproof (`fetch` returns a native promise, and we can only detect if you chain a `.then()`, which isn't guaranteed, so we have to patch every native promise returning function). So we attempt to get the context from the promise instance, and if not, we fall back to whichever request was last triggered by this user","mimetype":"text/plain"},{"body":"<code>PromiseRejectionEvent</code> gets the <code>promise</code>, so we need to map from Promise to Request, which isn't foolproof (<code>fetch</code> returns a native promise, and we can only detect if you chain a <code>.then()</code>, which isn't guaranteed, so we have to patch every native promise returning function). So we attempt to get the context from the promise instance, and if not, we fall back to whichever request was last triggered by this user","mimetype":"text/html"}],"body":"`PromiseRejectionEvent` gets the `promise`, so we need to map from Promise to Request, which isn't foolproof (`fetch` returns a native promise, and we can only detect if you chain a `.then()`, which isn't guaranteed, so we have to patch every native promise returning function). So we attempt to get the context from the promise instance, and if not, we fall back to whichever request was last triggered by this user","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<code>PromiseRejectionEvent</code> gets the <code>promise</code>, so we need to map from Promise to Request, which isn't foolproof (<code>fetch</code> returns a native promise, and we can only detect if you chain a <code>.then()</code>, which isn't guaranteed, so we have to patch every native promise returning function). So we attempt to get the context from the promise instance, and if not, we fall back to whichever request was last triggered by this user"},"ts":1671076056592,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PWgQVe8009MBtyr4UjZPC0jWNdY6bcbF4Egd4ClsAR0"},
{"content":{"msgtype":"m.text","body":"I am not asking what the mechanism is in spec terms but what the APIs are and how users observe any of this"},"ts":1671076090720,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NA819KFkmpPRLA-GQcnWbmTsz4pZxb3E4FECJFD2Eu4"},
{"content":{"org.matrix.msc1767.text":"It's not user observable","body":"It's not user observable","msgtype":"m.text"},"ts":1671076115674,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SpG7a6K-r9_1CSEPbe3Zry8V8KsJeLLidJ-RNFlv7BA"},
{"content":{"org.matrix.msc1767.message":[{"body":"The user just `console.log`s","mimetype":"text/plain"},{"body":"The user just <code>console.log</code>s","mimetype":"text/html"}],"body":"The user just `console.log`s","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"The user just <code>console.log</code>s"},"ts":1671076124009,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bIgb22XbB2OYWlgBOPErfLupTDGWpp4eu02e7iXutE8"},
{"content":{"msgtype":"m.text","body":"Or, system observable—what is it that shows up in the logs?"},"ts":1671076136549,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$E0L1J8UwRz_a1wdT2hN1qVrGLVdjfx4mghDSpV13Xqg"},
{"content":{"org.matrix.msc1767.text":"I don't understand","body":"I don't understand","msgtype":"m.text"},"ts":1671076162660,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7An9bZYI3Tgd2XjUVfjyX5QOqYSX5Fz4iys-FiTOlLE"},
{"content":{"org.matrix.msc1767.text":"Logs are associated to a request, might as well be per-request file on a disk","body":"Logs are associated to a request, might as well be per-request file on a disk","msgtype":"m.text"},"ts":1671076196608,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NgBZL9ZJNfCFduS1exPRHT2dtD-ybszBzWMQG312e44"},
{"content":{"msgtype":"m.text","body":"Ah, Ok, it is used to decide which file to route the log message to, where you are logging the event that a promise was rejected and unhandled. Is that it?"},"ts":1671076229766,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NrLZYyx7m9Au1h86vPQbgcq9M49rTx-kvjWeLSxDx58"},
{"content":{"msgtype":"m.text","body":"Or, which logical log stream, might not be filed"},"ts":1671076262222,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5pZyoFB_zfUxEYQCp_rnY88flgrwkScXDlwoNhGaWQo"},
{"content":{"org.matrix.msc1767.message":[{"body":"So we need to restore the context in case the user calls `console.log` again","mimetype":"text/plain"},{"body":"So we need to restore the context in case the user calls <code>console.log</code> again","mimetype":"text/html"}],"body":"So we need to restore the context in case the user calls `console.log` again","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"So we need to restore the context in case the user calls <code>console.log</code> again"},"ts":1671076264368,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bmB_Wd1So5QpAUTGqkf6ZhT6c1-XNQ-2x5qmtOKe7OE"},
{"content":{"msgtype":"m.text","body":"Where would they call it from?"},"ts":1671076279243,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7_dkxa211-JuaX6xYJMDvKLcSTthSYP-odN3Du-hgkg"},
{"content":{"org.matrix.msc1767.message":[{"body":"`unhandledrejection`'s handler","mimetype":"text/plain"},{"body":"<code>unhandledrejection</code>'s handler","mimetype":"text/html"}],"body":"`unhandledrejection`'s handler","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<code>unhandledrejection</code>'s handler"},"ts":1671076288811,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YEmtzvP3VE4lJR5c7HmYwNpCv4QtljBkJ6Dd7sMAxOY"},
{"content":{"msgtype":"m.text","body":"Ah OK you expose that event"},"ts":1671076304380,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HtxNKQ7iiJHMFLzcwCD74XNcWWTklfUdvBBhtGUsruo"},
{"content":{"msgtype":"m.text","body":"And when handling that event, you need to route log messages"},"ts":1671076329089,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_NUar-d5YgZHg4kW-ABD9CAMK233AWHFLuNBN6ENMf4"},
{"content":{"msgtype":"m.text","body":"Is this it?"},"ts":1671076335488,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$X-TOomaQO40Fy7ezYtJmu57o0aoamSUuISJgngzOxY0"},
{"content":{"org.matrix.msc1767.text":"I think so","body":"I think so","msgtype":"m.text"},"ts":1671076340465,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$tIdd8A3ShGwwD3QLd5wJHHMUaF-B60XDUCsASxhEiwg"},
{"content":{"msgtype":"m.text","body":"Where can I find docs about how Vercel exposes this? Is it the web’s event, Node’s, or something else?"},"ts":1671076513577,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GGu3xTYU_PWU7ytS0hRHFu-qWFJBWLirNJFh1dcG59M"},
{"content":{"org.matrix.msc1767.text":"I don't know if that's explicitly documented","body":"I don't know if that's explicitly documented","msgtype":"m.text"},"ts":1671076660321,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$znI8VVfYNrFceLhrbRZSRCvfyebCMvq0IO2PcelSyHg"},
{"content":{"org.matrix.msc1767.text":"(And I actually don't now the difference between our many edge runtimes, /shrug)","body":"(And I actually don't now the difference between our many edge runtimes, /shrug)","msgtype":"m.text"},"ts":1671076688273,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PAuKDXe2Gun9J8daFy5BPUiFp4jeaG1jxMKwQLmIAJ8"},
{"content":{"msgtype":"m.text","body":"Well, I think documenting what our systems do and what we want them to do will be useful in aligning the implementations to do it. (But it is a lot of work and not needed for Stage 1.) anyway I am happy to hear a lot in common between us here."},"ts":1671076902954,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Jfen00dH47K-u1RzyAtIuH6yuFYvGZI6zhcUswcpH4M"}
]