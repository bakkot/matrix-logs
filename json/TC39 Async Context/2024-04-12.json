[
{"content":{"body":"> <@littledan:matrix.org> we have to have this conversation with Steven and Signals people about Computed's context -- there's a concern that call-time context there would constitute \"Zalgo\": a computed signal could be forced in many different ways, and it should be giving the same answer regardless of context (of course we need some debugging/perf analysis tools to be possible)\n\nI agree that there's definite problems with computed signals - it's possible that two setters feed into the same computed signal and could have been set in different contexts, plus the fact that they're computed lazily might point to the reader's context as the correct call-time context (i.e. coming from the other direction). So there's potentially three or more different options and not necessarily a good way to disambiguate all of them.\n\nThat said, if there's no way to access the context(s) that set the signal(s) that caused the recompute, then tracing in many UI frameworks is essentially sunk. In my experience, it's a _very_ common pattern to have an event handler do nothing but update a signal. If the tracing framework initiates a trace in the event handler then the trace would simply die then and there, whereas we'd like to be able to link that trace to any downstream reactions/effects, all the way to the re-render.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$rorB792EDNX34EdSfB9td7vBuxOAeqgNiPuJLANCVPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />we have to have this conversation with Steven and Signals people about Computed's context -- there's a concern that call-time context there would constitute &quot;Zalgo&quot;: a computed signal could be forced in many different ways, and it should be giving the same answer regardless of context (of course we need some debugging/perf analysis tools to be possible)</blockquote></mx-reply><p>I agree that there's definite problems with computed signals - it's possible that two setters feed into the same computed signal and could have been set in different contexts, plus the fact that they're computed lazily might point to the reader's context as the correct call-time context (i.e. coming from the other direction). So there's potentially three or more different options and not necessarily a good way to disambiguate all of them.</p>\n<p>That said, if there's no way to access the context(s) that set the signal(s) that caused the recompute, then tracing in many UI frameworks is essentially sunk. In my experience, it's a <em>very</em> common pattern to have an event handler do nothing but update a signal. If the tracing framework initiates a trace in the event handler then the trace would simply die then and there, whereas we'd like to be able to link that trace to any downstream reactions/effects, all the way to the re-render.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$rorB792EDNX34EdSfB9td7vBuxOAeqgNiPuJLANCVPg"}},"msgtype":"m.text"},"ts":1712893000862,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$23-3PdqSmo1N_BD8c1PZwPS1aES-blPqladV_bfziFQ"},
{"content":{"body":"I see... so in this case, it's like application state should be registration-based, but tracing state should be call-based... :(","m.mentions":{},"msgtype":"m.text"},"ts":1712927930479,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kE5oQXK-3M9cbgsWqIfRihrtCU41AVsnyMoxLQd_9AY"},
{"content":{"body":"What's an example of application state that you'd want to be registration-based? My general (but somewhat uninformed) rule-of-thumb is that if a callback is intended to be called multiple times, it's more likely to want call-time context.","msgtype":"m.text"},"ts":1712930842429,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$BgDZfxiY_v4YXlVU2UZYZpMNiUkSbJ8XI6PW-y_pmP0"},
{"content":{"body":"an example is if we wanted to use AsyncContext for tracking the owner in tree-based rendering, or generally, React Context-style information","m.mentions":{},"msgtype":"m.text"},"ts":1712931085433,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cMdE81CQo6ATf2f1izMg747v2V26_ntTRuI3mWGPWi0"},
{"content":{"body":"we could use AsyncContext.Snapshot.wrap for these cases but then it'd defeat tracing, sounds like...","m.mentions":{},"msgtype":"m.text"},"ts":1712931107156,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XiKT3nwRc12DJ1dFMQEbI4HJiuLe2YPdFg41pqTlJ1w"},
{"content":{"body":"also for the style of React Hooks using global variables under the hood","m.mentions":{},"msgtype":"m.text"},"ts":1712931150073,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ioTpyO6FdM_-BDFy3BYIkG4_Vm9T4Tl7oIIz_3Z-n84"},
{"content":{"body":"restoring the context after await is an example of registration-time behavior I think","m.mentions":{},"msgtype":"m.text"},"ts":1712931197483,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FzPcfpAMdePaRzt_lwn7CcpEcA028ecnhtFFEsFFCOs"},
{"content":{"body":"(especially obvious if you consider what explicit calls of .then() should do)","m.mentions":{},"msgtype":"m.text"},"ts":1712931214319,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$V6P2rvliLM9uOjCkcPt4C1MX1KuMYA1ltZ1wmYCj5HA"},
{"content":{"body":"That's a good point about `await`.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be _preserved_ across an `await`, rather than _restored_ to some particular snapshot.","format":"org.matrix.custom.html","formatted_body":"That's a good point about <code>await</code>.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be <em>preserved</em> across an <code>await</code>, rather than <em>restored</em> to some particular snapshot.","m.mentions":{},"msgtype":"m.text"},"ts":1712942510924,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$WXAkAX7lHwvwUabF5ZBn_hfvQFI9enR1Qsb48N7BKaA"},
{"content":{"body":" * That's a good point about `await`.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be _preserved_ across an `await`, rather than _restored_ to some particular snapshot on reentry","format":"org.matrix.custom.html","formatted_body":" * That's a good point about <code>await</code>.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be <em>preserved</em> across an <code>await</code>, rather than <em>restored</em> to some particular snapshot on reentry","m.mentions":{},"m.new_content":{"body":"That's a good point about `await`.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be _preserved_ across an `await`, rather than _restored_ to some particular snapshot on reentry","format":"org.matrix.custom.html","formatted_body":"That's a good point about <code>await</code>.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be <em>preserved</em> across an <code>await</code>, rather than <em>restored</em> to some particular snapshot on reentry","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$WXAkAX7lHwvwUabF5ZBn_hfvQFI9enR1Qsb48N7BKaA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712942958120,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$rJDW0gTEw7KxpnvaUUFHwOIXGCG1jzm3kL9LoLWgJOM"},
{"content":{"body":"> <@stephenhicks:matrix.org> That's a good point about `await`.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be _preserved_ across an `await`, rather than _restored_ to some particular snapshot on reentry\n\nJustin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$WXAkAX7lHwvwUabF5ZBn_hfvQFI9enR1Qsb48N7BKaA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>That's a good point about <code>await</code>.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be <em>preserved</em> across an <code>await</code>, rather than <em>restored</em> to some particular snapshot on reentry</blockquote></mx-reply>Justin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$WXAkAX7lHwvwUabF5ZBn_hfvQFI9enR1Qsb48N7BKaA"}},"msgtype":"m.text"},"ts":1712944255096,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hpD38YcJDfOpLVKTsFpsatmT1I8ygRID6AfRBH2SPJ4"},
{"content":{"body":"> <@stephenhicks:matrix.org> That's a good point about `await`.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be _preserved_ across an `await`, rather than _restored_ to some particular snapshot on reentry\n\n * Justin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await or yield\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$WXAkAX7lHwvwUabF5ZBn_hfvQFI9enR1Qsb48N7BKaA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>That's a good point about <code>await</code>.  I brought it up in the context of async generators in https://github.com/tc39/proposal-async-context/pull/77#issuecomment-2048897179 - I think my general expectation is that context needs to be <em>preserved</em> across an <code>await</code>, rather than <em>restored</em> to some particular snapshot on reentry</blockquote></mx-reply> * Justin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await or yield\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","m.mentions":{},"m.new_content":{"body":"Justin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await or yield\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","format":"org.matrix.custom.html","formatted_body":"Justin keeps talking about \"restoring to the initial snapshot\" but I've always been thinking about the semantics as \"preserving the one that was right before the await or yield\" (that's my mental model for AsyncContext in general). In the end, there isn't an observable difference between them, though.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hpD38YcJDfOpLVKTsFpsatmT1I8ygRID6AfRBH2SPJ4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712944289086,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gKSk8XoWsIDmWcFStJDt6cSYMbnOY278y01zZhHzj1w"},
{"content":{"body":"well, with a disposable there would be","m.mentions":{},"msgtype":"m.text"},"ts":1712944290272,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$rwSBkLQQYJ4Wajyrm7LSy_3KTysfvQ_5Yaiwz6PtY2k"},
{"content":{"body":" * well, with a disposable there would be a difference","m.mentions":{},"m.new_content":{"body":"well, with a disposable there would be a difference","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rwSBkLQQYJ4Wajyrm7LSy_3KTysfvQ_5Yaiwz6PtY2k","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712944304533,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ltqdFwgsKwDQofdiJS3h4QT_r2QZjJpKELBm5Isr4Vc"},
{"content":{"body":"right, if we had some flat way of doing `run` within a function, I'd *definitely* want the semantics to be, preserve what was before the await/yield; I don't see any argument for \"restore the one at function entry\"","format":"org.matrix.custom.html","formatted_body":"right, if we had some flat way of doing <code>run</code> within a function, I'd <em>definitely</em> want the semantics to be, preserve what was before the await/yield; I don't see any argument for \"restore the one at function entry\"","m.mentions":{},"msgtype":"m.text"},"ts":1712944342666,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EE4J65daW7UNc3n3A2G9kSxb90Z8IlVGtD7gobAF0aw"},
{"content":{"body":"I think await and yield are maybe separate questions, but otherwise I agree.","m.mentions":{},"msgtype":"m.text"},"ts":1712944378945,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$04FV12Rl2Oo2YpiVJAL-J5uKlZSA5PrKGHEP5xqrIZo"},
{"content":{"body":" * I think await and yield are _maybe_ separate questions, but otherwise I agree.","format":"org.matrix.custom.html","formatted_body":" * I think await and yield are <em>maybe</em> separate questions, but otherwise I agree.","m.mentions":{},"m.new_content":{"body":"I think await and yield are _maybe_ separate questions, but otherwise I agree.","format":"org.matrix.custom.html","formatted_body":"I think await and yield are <em>maybe</em> separate questions, but otherwise I agree.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$04FV12Rl2Oo2YpiVJAL-J5uKlZSA5PrKGHEP5xqrIZo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712944405697,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$FJBNSuXXxvn9N5mnKiS_77iydbp0GrLwZmgyERgJAkI"},
{"content":{"body":"is there any post which captures your thoughts on yield? it's been a little hard for me to follow the threads given their length","m.mentions":{},"msgtype":"m.text"},"ts":1712944409334,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GZtvgZz4UByP6lM3c9-mx2iVC05b2LnDEnRCrXl8S6k"},
{"content":{"body":"I don't really use generators, so I don't have particularly strong feelings on yield, beyond recognizing that that's at least a small handful of people who seem to want to be able to observe the calling context somehow or other.  My bigger concern is repeated callbacks, which I think are a little easier to reason about.","m.mentions":{},"msgtype":"m.text"},"ts":1712944533279,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h3nUmmduPLoMODvrLOza0Y_Q2KPCDLdrgvYa44_sAKc"},
{"content":{"body":"on yield, it seems like the biggest users in frameworks would actually *benefit* from these semantics because they end up using yield as a replacement for await","format":"org.matrix.custom.html","formatted_body":"on yield, it seems like the biggest users in frameworks would actually <em>benefit</em> from these semantics because they end up using yield as a replacement for await","m.mentions":{},"msgtype":"m.text"},"ts":1712944571613,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$G_peJ0cOIZC3_CntshZ2mx0KEvQHBkesJZ0ItoxjJIY"},
{"content":{"body":"but I like focusing on the concrete and want to understand more about your thoughts on callbacks","m.mentions":{},"msgtype":"m.text"},"ts":1712944605714,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qDON-8doFlBubxutjfq_SDeKTpWOaWI38gWGt7yRV1k"},
{"content":{"body":"I _think_ yield-as-await already gets the right behavior automatically based on how promises work.","format":"org.matrix.custom.html","formatted_body":"I <em>think</em> yield-as-await already gets the right behavior automatically based on how promises work.","m.mentions":{},"msgtype":"m.text"},"ts":1712944609925,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$sZN-xRbdnfdkzNpkjJeHbs0P0AsY5t_t5zVhM0ley5M"},
{"content":{"body":"> <@stephenhicks:matrix.org> I _think_ yield-as-await already gets the right behavior automatically based on how promises work.\n\nthere's a tiny leak when it comes to thenables... but I think if you want the other behavior you're doing it wrong","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$sZN-xRbdnfdkzNpkjJeHbs0P0AsY5t_t5zVhM0ley5M?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I <em>think</em> yield-as-await already gets the right behavior automatically based on how promises work.</blockquote></mx-reply>there's a tiny leak when it comes to thenables... but I think if you want the other behavior you're doing it wrong","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$sZN-xRbdnfdkzNpkjJeHbs0P0AsY5t_t5zVhM0ley5M"}},"msgtype":"m.text"},"ts":1712944635008,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qeu8lEEXU485Fchq5gIMoRvjifziA-FvmAgoyw5rVzw"},
{"content":{"body":"(but I haven't thought through the details)","m.mentions":{},"msgtype":"m.text"},"ts":1712944635771,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ts_aW59fNkYWE-iz8EM8ZwSMLYppw4CtQjazJfcOcP4"},
{"content":{"body":"What I've heard is, Koa doesn't force a Promise.resolve the way native await does, and that's where the difference comes from","m.mentions":{},"msgtype":"m.text"},"ts":1712944674546,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TiVogktjS-ZJ2rHJFU4v6S2uTuNwAm7HoUWf6Pz39B8"},
{"content":{"body":"For repeated callbacks, it's common to register handlers or data producer graphs at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for _each_ iniating circumstance, rather than the (empty) app-init context.","format":"org.matrix.custom.html","formatted_body":"For repeated callbacks, it's common to register handlers or data producer graphs at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for <em>each</em> iniating circumstance, rather than the (empty) app-init context.","m.mentions":{},"msgtype":"m.text"},"ts":1712944761818,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Ubs78a6Ld9IYjcxCL2gEADHor1jIL_TwJXheCrqQZJc"},
{"content":{"body":" * For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for _each_ iniating circumstance, rather than the (empty) app-init context.","format":"org.matrix.custom.html","formatted_body":" * For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for <em>each</em> iniating circumstance, rather than the (empty) app-init context.","m.mentions":{},"m.new_content":{"body":"For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for _each_ iniating circumstance, rather than the (empty) app-init context.","format":"org.matrix.custom.html","formatted_body":"For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for <em>each</em> iniating circumstance, rather than the (empty) app-init context.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Ubs78a6Ld9IYjcxCL2gEADHor1jIL_TwJXheCrqQZJc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1712944778743,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$elbD21vYQMwRsb9h5kaUaYMaAvaicyuFkGyYx_6ew9E"},
{"content":{"body":"> <@stephenhicks:matrix.org> For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for _each_ iniating circumstance, rather than the (empty) app-init context.\n\ndo you think that events should have registration-time semantics for things that are expected to be one-use, i.e. `loadend` on XHR?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Ubs78a6Ld9IYjcxCL2gEADHor1jIL_TwJXheCrqQZJc?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>For repeated callbacks, it's common to register handlers or data pipelines at application start time.  These callbacks run every time a particular interaction or data flow happens.  There's no meaningful context when they're registered, so it's much more relevant to propagate the call-time context for <em>each</em> iniating circumstance, rather than the (empty) app-init context.</blockquote></mx-reply>do you think that events should have registration-time semantics for things that are expected to be one-use, i.e. <code>loadend</code> on XHR?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Ubs78a6Ld9IYjcxCL2gEADHor1jIL_TwJXheCrqQZJc"}},"msgtype":"m.text"},"ts":1712944837431,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$NjczyTiBjVuNp1K23oE4xu-wQuXbx_aiqIfbhIqsCh8"},
{"content":{"body":"you can use a single `XMLHttpRequest` object for multiple fetches, but I don't think most uses do that","format":"org.matrix.custom.html","formatted_body":"you can use a single <code>XMLHttpRequest</code> object for multiple fetches, but I don't think most uses do that","m.mentions":{},"msgtype":"m.text"},"ts":1712944876937,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$LnS18sQI2m8rzLNU1vafhMlVnoYHjWhenlApgKVW7iA"}
]