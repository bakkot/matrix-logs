[
{"content":{"body":"> <@littledan:matrix.org> we have to have this conversation with Steven and Signals people about Computed's context -- there's a concern that call-time context there would constitute \"Zalgo\": a computed signal could be forced in many different ways, and it should be giving the same answer regardless of context (of course we need some debugging/perf analysis tools to be possible)\n\nI agree that there's definite problems with computed signals - it's possible that two setters feed into the same computed signal and could have been set in different contexts, plus the fact that they're computed lazily might point to the reader's context as the correct call-time context (i.e. coming from the other direction). So there's potentially three or more different options and not necessarily a good way to disambiguate all of them.\n\nThat said, if there's no way to access the context(s) that set the signal(s) that caused the recompute, then tracing in many UI frameworks is essentially sunk. In my experience, it's a _very_ common pattern to have an event handler do nothing but update a signal. If the tracing framework initiates a trace in the event handler then the trace would simply die then and there, whereas we'd like to be able to link that trace to any downstream reactions/effects, all the way to the re-render.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$rorB792EDNX34EdSfB9td7vBuxOAeqgNiPuJLANCVPg?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />we have to have this conversation with Steven and Signals people about Computed's context -- there's a concern that call-time context there would constitute &quot;Zalgo&quot;: a computed signal could be forced in many different ways, and it should be giving the same answer regardless of context (of course we need some debugging/perf analysis tools to be possible)</blockquote></mx-reply><p>I agree that there's definite problems with computed signals - it's possible that two setters feed into the same computed signal and could have been set in different contexts, plus the fact that they're computed lazily might point to the reader's context as the correct call-time context (i.e. coming from the other direction). So there's potentially three or more different options and not necessarily a good way to disambiguate all of them.</p>\n<p>That said, if there's no way to access the context(s) that set the signal(s) that caused the recompute, then tracing in many UI frameworks is essentially sunk. In my experience, it's a <em>very</em> common pattern to have an event handler do nothing but update a signal. If the tracing framework initiates a trace in the event handler then the trace would simply die then and there, whereas we'd like to be able to link that trace to any downstream reactions/effects, all the way to the re-render.</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$rorB792EDNX34EdSfB9td7vBuxOAeqgNiPuJLANCVPg"}},"msgtype":"m.text"},"ts":1712893000862,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$23-3PdqSmo1N_BD8c1PZwPS1aES-blPqladV_bfziFQ"},
{"content":{"body":"I see... so in this case, it's like application state should be registration-based, but tracing state should be call-based... :(","m.mentions":{},"msgtype":"m.text"},"ts":1712927930479,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kE5oQXK-3M9cbgsWqIfRihrtCU41AVsnyMoxLQd_9AY"}
]