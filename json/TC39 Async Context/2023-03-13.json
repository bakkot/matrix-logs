[
{"content":{"body":"Aren't the snapshot requirements on `HostMakeJobCallback` and `HostCallJobCallback` a bit too loose?","format":"org.matrix.custom.html","formatted_body":"Aren't the snapshot requirements on <code>HostMakeJobCallback</code> and <code>HostCallJobCallback</code> a bit too loose?","msgtype":"m.text"},"ts":1678705493654,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$jL_Mh6bnamj-QcaQvI_OCHacp0IS4Toz_faGy_wMg3M"},
{"content":{"body":"we don't want hosts to populate `[[AsyncContextSnapshot]]` with any snapshot whatsoever","format":"org.matrix.custom.html","formatted_body":"we don't want hosts to populate <code>[[AsyncContextSnapshot]]</code> with any snapshot whatsoever","msgtype":"m.text"},"ts":1678705515254,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bTE984GthE_MM1ScSSXRHC4OO5DJB0G0T-Mp0EvHstA"},
{"content":{"body":"I opened https://github.com/tc39/proposal-async-context/pull/31 to tighten those requirements","msgtype":"m.text"},"ts":1678707759205,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Rsk7VWXW0PXkP4FDMC60RAZHsAN-Q1vpneZ4GNlzhng"},
{"content":{"body":"> <@abotella:igalia.com> I opened https://github.com/tc39/proposal-async-context/pull/31 to tighten those requirements\n\nThis PR LGTM but I think we should really refactor the PR to make abstract operations for run and get. Then, this PR would say, the AsyncContext must be created by run","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24Rsk7VWXW0PXkP4FDMC60RAZHsAN-Q1vpneZ4GNlzhng\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I opened https://github.com/tc39/proposal-async-context/pull/31 to tighten those requirements</blockquote></mx-reply>This PR LGTM but I think we should really refactor the PR to make abstract operations for run and get. Then, this PR would say, the AsyncContext must be created by run","m.relates_to":{"m.in_reply_to":{"event_id":"$Rsk7VWXW0PXkP4FDMC60RAZHsAN-Q1vpneZ4GNlzhng"}},"msgtype":"m.text"},"ts":1678708340744,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J_NTRJ4fBr6P9gmnkHJe4ptH31klzRay4r4eHH4ShhA"},
{"content":{"body":"(This implies a tighter host limitation, otherwise hosts could do anything run does)","msgtype":"m.text"},"ts":1678708340994,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rvarXWd_1LczPh9upZAWSAoPa-668TegGXqJZucnL-4"},
{"content":{"body":"I would also mention JS-implemented scheduling and, delete the last bullet point (access limitation) as I think a lot of people will be skeptical of it and it will throw off the discussion ","format":"org.matrix.custom.html","formatted_body":"I would also mention JS-implemented scheduling and, delete the last bullet point (access limitation) as I think a lot of people will be skeptical of it and it will throw off the discussion","msgtype":"m.text"},"ts":1678708341164,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ZjvjR3i5x3s-Z1hkQT6XUzqwjGBYgwRUZkHpaP9OuOM"},
{"content":{"body":"Sorry I didn’t review Andreu’s PR earlier. Let’s avoid the term “asynchronous callstack” as it is confusing and misleading (doesn’t make it clear that run has to be explicit). Instead, we are talking about the asynchronous flow of control.","msgtype":"m.text"},"ts":1678708341337,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EP4QHwcxVHr1JxiXipaW9ZAAtASOCqNsnVdsVTdDI74"},
{"content":{"body":"Also would be good if the spec had a sort of introduction that linked to the readme","msgtype":"m.text"},"ts":1678708694203,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bF4p4qBTG2CDCaxuBumY7iQwe4FYX4JbqrlONqc6ask"},
{"content":{"body":"Maybe it should begin with the definition of the AsyncContext class and then go into how it works","msgtype":"m.text"},"ts":1678708715858,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OSe6DMIcBkAvZQ1dkic167e-5hy5CHvb4QI8KcE31Zo"},
{"content":{"body":"(Again, apologies for the delayed review )","msgtype":"m.text"},"ts":1678708726877,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A5v0HOqqxqCMlPwHNW-VOK6EX-iWkgrV19R3WhRklBY"},
{"content":{"body":"Huh, it looks like `Atomics.waitAsync`'s `HostResolveInAgent` leaves *everything* to the host, rather than using `HostMakeJobCallback` and `HostCallJobCallback`","format":"org.matrix.custom.html","formatted_body":"Huh, it looks like <code>Atomics.waitAsync</code>'s <code>HostResolveInAgent</code> leaves <em>everything</em> to the host, rather than using <code>HostMakeJobCallback</code> and <code>HostCallJobCallback</code>","msgtype":"m.text"},"ts":1678709662423,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$yz6Yvfu-PU3Xhwi96ZYPLbcWoA2MUV819esi5KZTDgs"},
{"content":{"body":"should it be up to the host whether the callback gets wrapped there?","msgtype":"m.text"},"ts":1678709759429,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$oJgGNS2nNnA75ixY8MTlI0hzsGRQJQoeuMbU3dqeTjI"},
{"content":{"body":"Let’s leave any proposed refactorings there for later (since we will learn what html wants as this proposal evolves, and no need to duplicate the debate)","msgtype":"m.text"},"ts":1678709858915,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6lGK4MoU-k_ip1Ws57jmjCJi8dPtRWhPARrxeONs6iI"},
{"content":{"body":"sure","msgtype":"m.text"},"ts":1678709893158,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$FZ17Qk0aGf2GV_5Tk5Fw5ko_enweSKFl3yvX8XC36O0"},
{"content":{"body":"We can just note that this state of the spec might mean that TC39 might not hold us to a very meaningful layering","msgtype":"m.text"},"ts":1678709935733,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hywzLti0mzxSyJIeNAQdI9Y38t9269OlapdX4S9ed44"},
{"content":{"body":"I just have been learning a bit about low-level concurrency and was trying to make sense of the atomics and memory model parts of the spec, and I noticed this slightly intersected with AsyncContext","msgtype":"m.text"},"ts":1678709936567,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$k9Gin4arL6KBGRVsOWoaNaFwyazTASh00AHxfHMtttk"},
{"content":{"body":"Hopefully the layering can be expressed more by the structure of the spec and less by requirements ","format":"org.matrix.custom.html","formatted_body":"Hopefully the layering can be expressed more by the structure of the spec and less by requirements","msgtype":"m.text"},"ts":1678709955834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GmseXh5cRMUc31xP0B1pvsdELJKjhkql-2RIrrGRSjg"},
{"content":{"body":"Requirements end up being really unclear ","format":"org.matrix.custom.html","formatted_body":"Requirements end up being really unclear","msgtype":"m.text"},"ts":1678709973690,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NK13XBqz_091ksiLp0VI-V_PZQlWaw1RM_xciqBbDmc"},
{"content":{"body":"It is great that you noticed this connection btw, even if it is not actionable right now ","format":"org.matrix.custom.html","formatted_body":"It is great that you noticed this connection btw, even if it is not actionable right now","msgtype":"m.text"},"ts":1678710313732,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$j9IUNF2iQzEhk24WB8YnthZbr2AAwxPNrzMn3fWzgcs"},
{"content":{"body":"the way the spec is written right now, `AsyncContext.wrap` doesn't check if the argument is a function, but it does check if it's a constructor","format":"org.matrix.custom.html","formatted_body":"the way the spec is written right now, <code>AsyncContext.wrap</code> doesn't check if the argument is a function, but it does check if it's a constructor","msgtype":"m.text"},"ts":1678716655615,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Zj5sVrDkCVbAzU4t5E9I9mwykW5q1nX1g6sabhgqOcU"},
{"content":{"body":"in order to figure out whether to make the wrapped function a constructor or not","msgtype":"m.text"},"ts":1678716673528,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dhfF5Trwnxkx3Ck8_3TmMvazhoCLhZHux6VaqXMCifo"},
{"content":{"body":"do we want this behavior?","msgtype":"m.text"},"ts":1678716686114,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$S5dkp4MVngJI1pA7bNyCQW911vsb-1DH0EcOhOlT7Ls"},
{"content":{"body":"also, `AsyncContextWrappedFunctionCreate` is defined to take a function object as its first argument, which isn't the case since `AsyncContext.wrap` doesn't check that","format":"org.matrix.custom.html","formatted_body":"also, <code>AsyncContextWrappedFunctionCreate</code> is defined to take a function object as its first argument, which isn't the case since <code>AsyncContext.wrap</code> doesn't check that","msgtype":"m.text"},"ts":1678716760654,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$STn2VPlgXPXadWZlGGaWHOLywvmbV9C4sPTJhaSC2gw"},
{"content":{"body":"I guess we should eagerly check for callability, as this is what .bind does","msgtype":"m.text"},"ts":1678716782862,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XorQjnL5yhD5s3q0tpaB25e8yFC6jEVzzp6-XOWRsEo"},
{"content":{"body":"btw if Function.prototype.bind doesn't work for class declarations (just old-style classes), does that mean its [[Construct]] behavior is thought of as \"legacy\"? In this case, should we not bother replicating it?","msgtype":"m.text"},"ts":1678716817555,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wPniTFjbds5xnF7Fsr0stnl7ixWWgaNLDA6PTX2aAX0"},
{"content":{"body":"> <@littledan:matrix.org> btw if Function.prototype.bind doesn't work for class declarations (just old-style classes), does that mean its [[Construct]] behavior is thought of as \"legacy\"? In this case, should we not bother replicating it?\n\nHow does `Function.prototype.bind` not work? You can `new` the result, but you can't subclass it without fixing `.prototype` first:\n```js\nclass C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends vlaue does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wPniTFjbds5xnF7Fsr0stnl7ixWWgaNLDA6PTX2aAX0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>btw if Function.prototype.bind doesn&#39;t work for class declarations (just old-style classes), does that mean its [[Construct]] behavior is thought of as &quot;legacy&quot;? In this case, should we not bother replicating it?</blockquote></mx-reply><p>How does <code>Function.prototype.bind</code> not work? You can <code>new</code> the result, but you can't subclass it without fixing <code>.prototype</code> first:</p>\n<pre><code class=\"language-js\">class C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends vlaue does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n</code></pre>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$wPniTFjbds5xnF7Fsr0stnl7ixWWgaNLDA6PTX2aAX0"}},"msgtype":"m.text"},"ts":1678722941991,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$LSRYTvw5muKNXiYEqTPuFRV_hHzMN5VsUhMVMoAJ9ac"},
{"content":{"body":"> <@littledan:matrix.org> btw if Function.prototype.bind doesn't work for class declarations (just old-style classes), does that mean its [[Construct]] behavior is thought of as \"legacy\"? In this case, should we not bother replicating it?\n\n * How does `Function.prototype.bind` not work? You can `new` the result, but you can't subclass it without fixing `.prototype` first:\n\n```js\nclass C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends value does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wPniTFjbds5xnF7Fsr0stnl7ixWWgaNLDA6PTX2aAX0?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>btw if Function.prototype.bind doesn't work for class declarations (just old-style classes), does that mean its [[Construct]] behavior is thought of as \"legacy\"? In this case, should we not bother replicating it?</blockquote></mx-reply> * <p>How does <code>Function.prototype.bind</code> not work? You can <code>new</code> the result, but you can't subclass it without fixing <code>.prototype</code> first:</p>\n<pre><code class=\"language-js\">class C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends value does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n</code></pre>\n","m.new_content":{"body":"How does `Function.prototype.bind` not work? You can `new` the result, but you can't subclass it without fixing `.prototype` first:\n\n```js\nclass C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends value does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n```","format":"org.matrix.custom.html","formatted_body":"<p>How does <code>Function.prototype.bind</code> not work? You can <code>new</code> the result, but you can't subclass it without fixing <code>.prototype</code> first:</p>\n<pre><code class=\"language-js\">class C {}\nlet C1 = C.bind(null);\nnew C1() instanceof C; // true\n\nclass D extends C1 {} // TypeError: Class extends value does not have a valid prototype property\nC1.prototype; // undefined\n\nC1.prototype = C.prototype;\nclass D1 extends C1 {} // ok\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$LSRYTvw5muKNXiYEqTPuFRV_hHzMN5VsUhMVMoAJ9ac","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1678722956128,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$TtdO-wDf_693LcWS03NgDTYDXXwc9WXC7F8d6MOwT_U"},
{"content":{"body":"oh well Function.prototype.bind throws on things which are not callable. I forgot about how classes are callable and they just throw.","msgtype":"m.text"},"ts":1678733322905,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xvaGIRUp0RTqgGW5ixRt1myymddqq6TMusNXS0G_DzI"},
{"content":{"body":"it's so baffling to me that the call/construct slots were basically made useless with things like that","msgtype":"m.text"},"ts":1678734093943,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yygTvMwv2YCau-1JA-inWXqt2ctHeXKnzP1BdwmvZBA"},
{"content":{"body":"yes, it makes me feel like it was a mistake to have a [[Construct]] hook in the first place","msgtype":"m.text"},"ts":1678734513557,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Fe0pkzGu5kPtyGedXdeqEr3a83lDK44hQxaObYwBHo8"}
]