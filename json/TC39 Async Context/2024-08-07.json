[
{"content":{"body":"Steve Hicks: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a>: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"ts":1723056941660,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$_QfCfzCFVZ5zbf_jGrux6wVm42AZcspvlPcyS8jPKOI"},
{"content":{"body":"and I suspect that would be a lot harder to google","m.mentions":{},"msgtype":"m.text"},"ts":1723056948883,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$RWB1zTktg_0LrS8M8eutKUoF1iAdvynJlx--kjrTvR4"},
{"content":{"body":"> <@abotella:igalia.com> Steve Hicks: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?\n\nThat's a fair point.  I really do prefer the consistency, but ultimately I think getting the right default as much as possible is a more important trade-off.  I think in order to reason much further about this, we need two things: (1) a more concrete list of events and what context they will run in, and (2) a better understanding of whether the \"no context exists\" case falls back on the top-level (empty) context or else the registration-time context.  What's the best way to collaborate on #1?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$_QfCfzCFVZ5zbf_jGrux6wVm42AZcspvlPcyS8jPKOI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br><a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a>: You previously mentioned that with a single property name on events, developers would have to look up which would be the source of that snapshot for each event. If most events with async sources don't propagate the context but some do, wouldn't developers also have to look up when the context is propagated?</blockquote></mx-reply>That's a fair point.  I really do prefer the consistency, but ultimately I think getting the right default as much as possible is a more important trade-off.  I think in order to reason much further about this, we need two things: (1) a more concrete list of events and what context they will run in, and (2) a better understanding of whether the \"no context exists\" case falls back on the top-level (empty) context or else the registration-time context.  What's the best way to collaborate on #1?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$_QfCfzCFVZ5zbf_jGrux6wVm42AZcspvlPcyS8jPKOI"}},"msgtype":"m.text"},"ts":1723060536445,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$i361GWbU4YglCtrSkJMWnTKo8_6U-uvs55HW63IJgpY"},
{"content":{"body":"last time I checked there were 250+ event names in the web platform (which is not the same as distinct events, since e.g. the `error` event on window is very different from the `error` event on say `WebSocket`)","format":"org.matrix.custom.html","formatted_body":"last time I checked there were 250+ event names in the web platform (which is not the same as distinct events, since e.g. the <code>error</code> event on window is very different from the <code>error</code> event on say <code>WebSocket</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1723060748269,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eZDTvbvpUPYRjrvWvbkan1jyturtphJVv_lMNtgm-xI"},
{"content":{"body":"only those that have async sources matter here, but I don't think there's a good way to get the full list short of analyzing every single one","m.mentions":{},"msgtype":"m.text"},"ts":1723060800675,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$cpkvA-s05bHqxQsyx5TByPWSVsyQ-z1H7fSKKzlSmlY"},
{"content":{"body":" * only those that have async sources matter here, but I don't think there's a good way to get the full list of those, short of analyzing every single one","m.mentions":{},"m.new_content":{"body":"only those that have async sources matter here, but I don't think there's a good way to get the full list of those, short of analyzing every single one","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$cpkvA-s05bHqxQsyx5TByPWSVsyQ-z1H7fSKKzlSmlY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1723060817630,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$PxbSJ3xvHfBxyKlHXeZ87A79_lbpxu1s293lloGM-so"},
{"content":{"body":"although maybe there's a way to analyze e.g. chromium code to get a partial list of events that are guaranteed to have async sources","m.mentions":{},"msgtype":"m.text"},"ts":1723060881902,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$sW3fbnhlt4m_gU8IxxiJeUQpXIKtWKMQeLBXjovww50"},
{"content":{"body":"I can ask my internal chrome contacts to see if they've got any pointers","m.mentions":{},"msgtype":"m.text"},"ts":1723060915646,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$gJ324DofyAT0dEHZyrbsu1N__VQQijYCiAUSpiECifw"},
{"content":{"body":"one thing nicolo-ribaudo pointed out is that we could try to reach out to JS educators, maybe giving some example APIs for libraries that would be using AsyncContext, and let developers tell us which events they'd use those libraries with","format":"org.matrix.custom.html","formatted_body":"one thing <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> pointed out is that we could try to reach out to JS educators, maybe giving some example APIs for libraries that would be using AsyncContext, and let developers tell us which events they'd use those libraries with","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1723060998820,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$AIl1RSLh9ErMsR02hNvgp1gBfcXz7HdQ6kFA7Y6bwok"},
{"content":{"body":"since we have a selection bias in that first-party developers won't be engaging because they will not be using AsyncContext directly most of the time","m.mentions":{},"msgtype":"m.text"},"ts":1723061026662,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$0xJfHjxTkCNhO9x70cYkFV9PV3lCXFmZmUItuxTeLns"},
{"content":{"body":"that's an interesting approach - I'm a little unsure of what it would mean to use an event with a library, though.","m.mentions":{},"msgtype":"m.text"},"ts":1723061096175,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$K_etYGQprqFVAnSDUj1rBLh--NHLQK9fBJyqekaM-Zk"},
{"content":{"body":"I imagine a tracing or DI library is generally pretty orthogonal from the event system, so it more comes down to just what events your application uses at all","m.mentions":{},"msgtype":"m.text"},"ts":1723061131008,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$NMc0rzI4fEloOHwFxyrTh_7mOMN8SMe3mtwHsSTp0lQ"},
{"content":{"body":"I'm not familiar with DI systems at all, so I'll have to trust you on that","m.mentions":{},"msgtype":"m.text"},"ts":1723061224390,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Iqwg_oGSKA6EsqQNDGEab-T5OWVeKHvufQBWGuLeFdQ"},
{"content":{"body":"by DI here, it's referring to the same kind of thing as React Context","m.mentions":{},"msgtype":"m.text"},"ts":1723061244247,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n5D0iBNDn9Obu-sJqJhVTmNCoXvOkBllJuv77PDX4ic"},
{"content":{"body":"it'll be good for us all to become familiar with these things, as they're a potentially important use of AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1723061264639,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6XiDMJOediJlT6h32ESLiYAnBIBz-TFt8bhKxSwK0Eg"},
{"content":{"body":"an example of a framework that uses this DI terminology is Vue https://vuejs.org/guide/components/provide-inject","m.mentions":{},"msgtype":"m.text"},"ts":1723061288659,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CcwXOhvwaaitsxU_LK339gCxiAq0vDiA2Ve2APSapX8"},
{"content":{"body":"Well, I think there's a lot more to DI than what react context does (or else I  may have a too-limited view of what react context is about, since my primary experience is just to avoid prop drilling).  For instance, it's typically used to inject top-level/singleton services, like schedulers, RPC clients, or data stores.  My experience with DI is mostly on the server via Guice (in Java) but in that context, it's a pretty different flavor from drilling props.  A lot of the motivation tends to be looser coupling to support testing and late-loading.","m.mentions":{},"msgtype":"m.text"},"ts":1723061496005,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$MGUolNhsYu5DsXsjPKC5VID1k5GQhRP_V3z2G7V9xzA"},
{"content":{"body":"Andreu Botella: you mentioned 250+ event names, but presumably this also doesn't include (e.g.) custom element lifecycle callbacks, mutation/intersection observers, etc.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@abotella:igalia.com\">Andreu Botella</a>: you mentioned 250+ event names, but presumably this also doesn't include (e.g.) custom element lifecycle callbacks, mutation/intersection observers, etc.","m.mentions":{"user_ids":["@abotella:igalia.com"]},"msgtype":"m.text"},"ts":1723061612837,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$OOoJzRFtswpelMOXVN00_wy_LlEJSjYoQPtSQY4iZd0"},
{"content":{"body":"for custom element callbacks, as far as I'm aware they're always either triggered synchronously from JS code, or caused by a user or browser event, so I don't think there are any possible async sources","m.mentions":{},"msgtype":"m.text"},"ts":1723061687036,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kwoHaQ18c-5FChfQQ2cJU1XM5nQGZHGwWSQZhnzohcQ"},
{"content":{"body":"for observers, most of them bunch multiple observations, so calling the callback with only one of them would be a merge","m.mentions":{},"msgtype":"m.text"},"ts":1723061769011,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$A0GVpGq17rZsDXQJ81_4ZsMdbgSWCFrBY6eDYVaT43Y"},
{"content":{"body":"in the document I describe exposing the snapshot for each of them in the observation object, if it would be useful","m.mentions":{},"msgtype":"m.text"},"ts":1723061874559,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$eClJg48T1DKbEAIpeYqRfnOT-JlnvE-lljhnmRmnkeY"},
{"content":{"body":"Chengzhong Wu pointed out that for `PerformanceObserver` they would be","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@legendecas:matrix.org\">Chengzhong Wu</a> pointed out that for <code>PerformanceObserver</code> they would be","m.mentions":{"user_ids":["@legendecas:matrix.org"]},"msgtype":"m.text"},"ts":1723061888872,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$ckWpe185arXgR-z8PyMkNAEJf3jf0w1DvWYX9nwRaqg"},
{"content":{"body":"Yeah, resource timing in fetch is only available from `PerformanceObserver` so it is useful to get each resource timing event's relevant context snapshot","format":"org.matrix.custom.html","formatted_body":"Yeah, resource timing in fetch is only available from <code>PerformanceObserver</code> so it is useful to get each resource timing event's relevant context snapshot","m.mentions":{},"msgtype":"m.text"},"ts":1723061995015,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$04uHWHF8hkrYnmPQ9S0Bh4S4Z7yGTKxo1k_jmDmFiP4"},
{"content":{"body":"another important question: if we use the top-level context for user/browser-sourced events, would users of AsyncContext need a way to tell whether it is the top-level context? or would every possible use only care about its own variables, and it could check whether they have the default values?","m.mentions":{},"msgtype":"m.text"},"ts":1723062783545,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7xKy-8w-sDTXbUdDcm0uQY1LV5Tz7gCznQbCgzAZs24"}
]