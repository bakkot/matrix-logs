[
{"content":{"body":"> <@littledan:matrix.org> Yeah I don’t have a better solution. For flow advocates: how bad would it be if we called LexicalVariable “Variable” and did FlowVariable in a follow-on proposal?\n\nWould we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but `Promise`'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use `Snapshot.wrap` for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) _will_ want to expose the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$lu6LNSBXwnCjvMJUvLpFTm_048LxX1wpJKaKGvgu9Ss?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I don’t have a better solution. For flow advocates: how bad would it be if we called LexicalVariable “Variable” and did FlowVariable in a follow-on proposal?</blockquote></mx-reply>Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but <code>Promise</code>'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use <code>Snapshot.wrap</code> for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) <em>will</em> want to expose the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$lu6LNSBXwnCjvMJUvLpFTm_048LxX1wpJKaKGvgu9Ss"}},"msgtype":"m.text"},"ts":1717465802565,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ayfl2nDiHXYZLWPLRWunPxs9ybLbuSrpbL1rErS8Kt4"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I don’t have a better solution. For flow advocates: how bad would it be if we called LexicalVariable “Variable” and did FlowVariable in a follow-on proposal?\n\n * Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but `Promise`'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use `Snapshot.wrap` for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) _will_ want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$lu6LNSBXwnCjvMJUvLpFTm_048LxX1wpJKaKGvgu9Ss?via=igalia.com&amp;via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I don’t have a better solution. For flow advocates: how bad would it be if we called LexicalVariable “Variable” and did FlowVariable in a follow-on proposal?</blockquote></mx-reply> * Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but <code>Promise</code>'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use <code>Snapshot.wrap</code> for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) <em>will</em> want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","m.mentions":{},"m.new_content":{"body":"Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but `Promise`'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use `Snapshot.wrap` for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) _will_ want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","format":"org.matrix.custom.html","formatted_body":"Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but <code>Promise</code>'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use <code>Snapshot.wrap</code> for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) <em>will</em> want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ayfl2nDiHXYZLWPLRWunPxs9ybLbuSrpbL1rErS8Kt4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1717465834971,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h3ZxQt4hc1HkhmJKSFguiV7TaEXCWxNyGBDa4cJ9Fiw"},
{"content":{"body":"> <@stephenhicks:matrix.org> Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but `Promise`'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use `Snapshot.wrap` for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) _will_ want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.\n\nYes, I think (at a minimum) we should do this for a number of Events, make an extra property which is an AsyncContext.Snapshot taken from when it was resolved. So this would be for \"lexical\" variables as well.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ayfl2nDiHXYZLWPLRWunPxs9ybLbuSrpbL1rErS8Kt4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Would we expose any way to access the flow context from a callback?  It may not be particularly relevant from most DOM APIs, but <code>Promise</code>'s resolution context is quite relevant, and I worry about userland APIs from a consistency standpoint (either they'll use <code>Snapshot.wrap</code> for consistency's sake with all the builtins, or else they cause a lot of confusion).  And many users of userland APIs (signals, etc) <em>will</em> want access to the flow context.  If all we have is lexical context for everything, it's not particularly useful for us, nor for APM - I'm not sure who the user would be at that point.</blockquote></mx-reply>Yes, I think (at a minimum) we should do this for a number of Events, make an extra property which is an AsyncContext.Snapshot taken from when it was resolved. So this would be for \"lexical\" variables as well.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ayfl2nDiHXYZLWPLRWunPxs9ybLbuSrpbL1rErS8Kt4"}},"msgtype":"m.text"},"ts":1717484158161,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$C1u5CbGBjgzkx-8CLCHj4EANHkdoQdYq1-PhzfJvtT8"},
{"content":{"body":"then APMs can patch all entry points to set event listeners to watch for a particular variable on that other snapshot and do something with it","m.mentions":{},"msgtype":"m.text"},"ts":1717484185870,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$hHYFNTMTlV6eP5pMZAoaEiyweTKjGihudFXMD240K-0"},
{"content":{"body":"> <@legendecas:matrix.org> Yeah, agreed that two type of variables could be a solution. Did you have a chance talking about  `run(value, fn)` vs `set(value)` styles? Would it be too conservative to have strong scope guarantee in Web API designs?\n\nWe didn’t discuss this; I will mention it. But I don’t know if I can represent the arguments for set() well, and I am pretty sure this all would not form much of an interesting argument in favor of flow-through.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24Y2V8uZEQh0JhrnVs9nr-7WhauVSWI1XK7o8-eeoOJxU\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>Yeah, agreed that two type of variables could be a solution. Did you have a chance talking about  <code>run(value, fn)</code> vs <code>set(value)</code> styles? Would it be too conservative to have strong scope guarantee in Web API designs?</blockquote></mx-reply>We didn’t discuss this; I will mention it. But I don’t know if I can represent the arguments for set() well, and I am pretty sure this all would not form much of an interesting argument in favor of flow-through.","m.relates_to":{"m.in_reply_to":{"event_id":"$Y2V8uZEQh0JhrnVs9nr-7WhauVSWI1XK7o8-eeoOJxU"}},"msgtype":"m.text"},"ts":1717485747196,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MYELbC5cZoozKodumArQyL9simIm0yEP9TBiVmCnJ54"},
{"content":{"body":"> <@littledan:matrix.org> Yes, I think (at a minimum) we should do this for a number of Events, make an extra property which is an AsyncContext.Snapshot taken from when it was resolved. So this would be for \"lexical\" variables as well.\n\nI really dislike finding heterogeneous places to put the flow snapshot for each different system.  What about promises?  Assuming `await` and `Promise.then` are both lexically bound (which I mostly agree with - the former somewhat moreso than the latter, but overall I think it makes sense), there's no way to get at the promise's resolution context, and that's very relevant for understanding \"follows from\".  Would we expose some sort of static function to grab it?  `Promise.resolutionSnapshot(promise)`?  `Snapshot.fromPromise(promise)`?  Could something like that work more generally for other cases like events?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$C1u5CbGBjgzkx-8CLCHj4EANHkdoQdYq1-PhzfJvtT8?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yes, I think (at a minimum) we should do this for a number of Events, make an extra property which is an AsyncContext.Snapshot taken from when it was resolved. So this would be for \"lexical\" variables as well.</blockquote></mx-reply>I really dislike finding heterogeneous places to put the flow snapshot for each different system.  What about promises?  Assuming <code>await</code> and <code>Promise.then</code> are both lexically bound (which I mostly agree with - the former somewhat moreso than the latter, but overall I think it makes sense), there's no way to get at the promise's resolution context, and that's very relevant for understanding \"follows from\".  Would we expose some sort of static function to grab it?  <code>Promise.resolutionSnapshot(promise)</code>?  <code>Snapshot.fromPromise(promise)</code>?  Could something like that work more generally for other cases like events?","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$C1u5CbGBjgzkx-8CLCHj4EANHkdoQdYq1-PhzfJvtT8"}},"msgtype":"m.text"},"ts":1717521370775,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$y0BAP99sm5Ufp_PbcOffd9_9y4lDR9v0Z3gvw6BHftI"}
]