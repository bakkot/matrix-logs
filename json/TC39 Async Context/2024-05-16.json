[
{"content":{"body":"> <@littledan:matrix.org> For promise-based APIs: I am having trouble picturing what we would want and how; maybe you could give a concrete example of where you don’t want the restore-around-await semantics (“registration time”) and what you want instead?\n\nWe basically _never_ want to restore around await. We want context changes to flow through the resolve path and back to the continuation of that resolve after the await. It would do that automatically if we had that separate set that does resolve path flow rather than register path flow. Any then and await binds would just get skipped and instead the context value at the resolve point would be what gets propagated into the continuation.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$W6468VK7qSle9rGybni44-O0SSTglVmvDdgJQZpN68c?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>For promise-based APIs: I am having trouble picturing what we would want and how; maybe you could give a concrete example of where you don’t want the restore-around-await semantics (“registration time”) and what you want instead?</blockquote></mx-reply>We basically <em>never</em> want to restore around await. We want context changes to flow through the resolve path and back to the continuation of that resolve after the await. It would do that automatically if we had that separate set that does resolve path flow rather than register path flow. Any then and await binds would just get skipped and instead the context value at the resolve point would be what gets propagated into the continuation.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$W6468VK7qSle9rGybni44-O0SSTglVmvDdgJQZpN68c"}},"msgtype":"m.text"},"ts":1715863627194,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$gUpxA1WdrMRzqX2X71LhCweelKb-GVgNizVktE6P4K8"},
{"content":{"body":"So our main concern for APM uses is that code which is functionally equivalent from the user perspective should produce an equivalent context graph. In the example I posted yesterday (https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e) I have three examples of an http request using async/await, raw promises, and callbacks respectively. All three examples are functionally identical from user-facing execution flow perspective, yet they produce _very_ different context graphs from AsyncContext because promises and async/await follow registration path rather than resolve path.","format":"org.matrix.custom.html","formatted_body":"So our main concern for APM uses is that code which is functionally equivalent from the user perspective should produce an equivalent context graph. In the example I posted yesterday (https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e) I have three examples of an http request using async/await, raw promises, and callbacks respectively. All three examples are functionally identical from user-facing execution flow perspective, yet they produce <em>very</em> different context graphs from AsyncContext because promises and async/await follow registration path rather than resolve path.","m.mentions":{},"msgtype":"m.text"},"ts":1715863999842,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$YDAponkU-xnSArj25wjPwe7wJ9OsSEIuonbu66h9QVk"},
{"content":{"body":"It's very confusing to users when they rewrite their code from callbacks to promises and suddenly their traces look very different because the flow of the context graph is so different.","m.mentions":{},"msgtype":"m.text"},"ts":1715864049407,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$8BzygyTYkU74Ftg_hVYiQ5z7tb83yWzEAXTbRY4obCQ"},
{"content":{"body":"It is hard to square wanting to never restore around await with what you wrote in the doc about how AsyncLocalStorage mostly does what you want (when it restores around await)","msgtype":"m.text"},"ts":1715868653539,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5lKE3op4B3H0BH52DhbDe4sGTnyskFQ-LhgGrWANsOU"},
{"content":{"body":"I was persuaded by your doc that both paths are meaningful but now it seems like you are saying only one of them is, which is surprising","msgtype":"m.text"},"ts":1715868700644,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PjwGJAJdV6uZcu2zbgNmzWpjPvNQBGYl2N7kREKUkKg"},
{"content":{"body":"One suboptimal way to implement promise.all is to go for-of through the array and await each element. In this case, we would care about establishing links both from the context before the await, and from the thing we are awaiting ","format":"org.matrix.custom.html","formatted_body":"One suboptimal way to implement promise.all is to go for-of through the array and await each element. In this case, we would care about establishing links both from the context before the await, and from the thing we are awaiting","msgtype":"m.text"},"ts":1715868841376,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7hkGFNXfa_3FOGFKs4VLFHB336UJm-h2sUhv92tO6fw"},
{"content":{"body":"(Assuming the context before the await somehow inherits the previous thing being awaited)","msgtype":"m.text"},"ts":1715868869497,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MOHaXxjNcTV11aLl42Y_c1Xlb1kEX2xSN0mURRqdKPA"},
{"content":{"body":"I see how, in our web integration, we could/should adopt the “prefer originating context when present” semantics. But it is still hard for me to understand this await argument.","msgtype":"m.text"},"ts":1715868960998,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_NTjiToxhtWhvN-Awv4YBr8KL7nNrz1cShzbNCJwU-Y"},
{"content":{"body":"> <@littledan:matrix.org> (Assuming the context before the await somehow inherits the previous thing being awaited)\n\nThis wouldn't be the case, unless we somehow make the calling context be an array of all promises that led to this point, which seems like clear overkill","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$MOHaXxjNcTV11aLl42Y_c1Xlb1kEX2xSN0mURRqdKPA?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>(Assuming the context before the await somehow inherits the previous thing being awaited)</blockquote></mx-reply>This wouldn't be the case, unless we somehow make the calling context be an array of all promises that led to this point, which seems like clear overkill","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$MOHaXxjNcTV11aLl42Y_c1Xlb1kEX2xSN0mURRqdKPA"}},"msgtype":"m.text"},"ts":1715869185216,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wCxFdgyBMvgTYaVpRr9moN8hBP0teFHvU6KFL4NAoaE"},
{"content":{"body":"> <@littledan:matrix.org> (Assuming the context before the await somehow inherits the previous thing being awaited)\n\n * This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$MOHaXxjNcTV11aLl42Y_c1Xlb1kEX2xSN0mURRqdKPA?via=matrix.org&amp;via=mozilla.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>(Assuming the context before the await somehow inherits the previous thing being awaited)</blockquote></mx-reply> * This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill","m.mentions":{},"m.new_content":{"body":"This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill","format":"org.matrix.custom.html","formatted_body":"This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$wCxFdgyBMvgTYaVpRr9moN8hBP0teFHvU6KFL4NAoaE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1715869205125,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lCLwcHzWknaYVBTnC7c25-AmM9o-kDaqb-kJylWe2qU"},
{"content":{"body":"> <@littledan:matrix.org> It is hard to square wanting to never restore around await with what you wrote in the doc about how AsyncLocalStorage mostly does what you want (when it restores around await)\n\nBy \"mostly works\" I mean it propagates correctly in most cases (callbacks), but async/await is not one of them. We have a pile of hacks to work around that currently lacking capability.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$5lKE3op4B3H0BH52DhbDe4sGTnyskFQ-LhgGrWANsOU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>It is hard to square wanting to never restore around await with what you wrote in the doc about how AsyncLocalStorage mostly does what you want (when it restores around await)</blockquote></mx-reply>By \"mostly works\" I mean it propagates correctly in most cases (callbacks), but async/await is not one of them. We have a pile of hacks to work around that currently lacking capability.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5lKE3op4B3H0BH52DhbDe4sGTnyskFQ-LhgGrWANsOU"}},"msgtype":"m.text"},"ts":1715872021001,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$2vttxXh9LhpLRT76gmGG3rkTYbfzoGMChwoWG9OUOlQ"},
{"content":{"body":"ALS is \"good enough\" that we can provide a product that \"works\" but is _not_ good enough to provide something that works _well_.","format":"org.matrix.custom.html","formatted_body":"ALS is \"good enough\" that we can provide a product that \"works\" but is <em>not</em> good enough to provide something that works <em>well</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1715872070214,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$XwVplrQbqrA6AA9ncp9Ng_ewcJyq9PD2vlKCxq4PWNI"},
{"content":{"body":"This is the whole reason _why_ we've been designing an entirely new thing.","format":"org.matrix.custom.html","formatted_body":"This is the whole reason <em>why</em> we've been designing an entirely new thing.","m.mentions":{},"msgtype":"m.text"},"ts":1715872092537,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$exj5ZEgBQNyCXyOeTVZP-HlraTK6IkXr7CQdrtVACt0"},
{"content":{"body":"I opened https://github.com/tc39/proposal-async-context/issues/90 to discuss the `error` event","format":"org.matrix.custom.html","formatted_body":"I opened https://github.com/tc39/proposal-async-context/issues/90 to discuss the <code>error</code> event","m.mentions":{},"msgtype":"m.text"},"ts":1715872227434,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$LJxUB3Q_umc5hDWXOPw33efJ7_L_2fmAvTljaVsp7fo"},
{"content":{"body":"> <@stephenbelanger:matrix.org> By \"mostly works\" I mean it propagates correctly in most cases (callbacks), but async/await is not one of them. We have a pile of hacks to work around that currently lacking capability.\n\nwhere can I read more about that pile of hacks? (maybe you already wrote about it somewhere?)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$2vttxXh9LhpLRT76gmGG3rkTYbfzoGMChwoWG9OUOlQ?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>By \"mostly works\" I mean it propagates correctly in most cases (callbacks), but async/await is not one of them. We have a pile of hacks to work around that currently lacking capability.</blockquote></mx-reply>where can I read more about that pile of hacks? (maybe you already wrote about it somewhere?)","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$2vttxXh9LhpLRT76gmGG3rkTYbfzoGMChwoWG9OUOlQ"}},"msgtype":"m.text"},"ts":1715877115921,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h_zhAigENlGCCHlTu8LV8JAy1-U9w9n7QrjlnenFFEI"},
{"content":{"body":"> <@abotella:igalia.com> This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill\n\nI hope it's not necessary either, but I can see how Ste{v,ph}en's points argue for it to be necessary. (I'm having trouble understanding what you're supposed to do with currentContext besides reconstruct this array)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$wCxFdgyBMvgTYaVpRr9moN8hBP0teFHvU6KFL4NAoaE?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>This wouldn't be the case, unless we somehow make the calling context be an array of the contexts of all promises that led to this point, which seems like clear overkill</blockquote></mx-reply>I hope it's not necessary either, but I can see how Ste{v,ph}en's points argue for it to be necessary. (I'm having trouble understanding what you're supposed to do with currentContext besides reconstruct this array)","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$wCxFdgyBMvgTYaVpRr9moN8hBP0teFHvU6KFL4NAoaE"}},"msgtype":"m.text"},"ts":1715877178102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dMLpRbSSuZA1rSMR4AGSCXfE2W0sNPwaPATL2edwOIU"},
{"content":{"body":"> <@stephenbelanger:matrix.org> So our main concern for APM uses is that code which is functionally equivalent from the user perspective should produce an equivalent context graph. In the example I posted yesterday (https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e) I have three examples of an http request using async/await, raw promises, and callbacks respectively. All three examples are functionally identical from user-facing execution flow perspective, yet they produce _very_ different context graphs from AsyncContext because promises and async/await follow registration path rather than resolve path.\n\nWhould you mind expanding on the distinguishing of child-of and follow-from? All promise resolutions are scheduled asynchronously, it seems to me that in this case \"child-of\" would be meaning-less in promise's case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$YDAponkU-xnSArj25wjPwe7wJ9OsSEIuonbu66h9QVk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>So our main concern for APM uses is that code which is functionally equivalent from the user perspective should produce an equivalent context graph. In the example I posted yesterday (https://gist.github.com/Qard/6ceaca8bb792679e82c7693513baee0e) I have three examples of an http request using async/await, raw promises, and callbacks respectively. All three examples are functionally identical from user-facing execution flow perspective, yet they produce <em>very</em> different context graphs from AsyncContext because promises and async/await follow registration path rather than resolve path.</blockquote></mx-reply>Whould you mind expanding on the distinguishing of child-of and follow-from? All promise resolutions are scheduled asynchronously, it seems to me that in this case \"child-of\" would be meaning-less in promise's case","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$YDAponkU-xnSArj25wjPwe7wJ9OsSEIuonbu66h9QVk"}},"msgtype":"m.text"},"ts":1715877674513,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$0Vlcr8v-IZyHykI2ycuYGmYwFJmmClYTfeVnPH0j56U"},
{"content":{"body":"> <@littledan:matrix.org> I hope it's not necessary either, but I can see how Ste{v,ph}en's points argue for it to be necessary. (I'm having trouble understanding what you're supposed to do with currentContext besides reconstruct this array)\n\nI imagine that APMs could patch every built-in promise-returning API to get the span in the calling context, and then they could call the built-in inside `.run()` to start a new span – but that would only work as long as you never await a promise that was created before the last await","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$dMLpRbSSuZA1rSMR4AGSCXfE2W0sNPwaPATL2edwOIU?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I hope it's not necessary either, but I can see how Ste{v,ph}en's points argue for it to be necessary. (I'm having trouble understanding what you're supposed to do with currentContext besides reconstruct this array)</blockquote></mx-reply>I imagine that APMs could patch every built-in promise-returning API to get the span in the calling context, and then they could call the built-in inside <code>.run()</code> to start a new span – but that would only work as long as you never await a promise that was created before the last await","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$dMLpRbSSuZA1rSMR4AGSCXfE2W0sNPwaPATL2edwOIU"}},"msgtype":"m.text"},"ts":1715879503878,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$fEC_eSOk_x1a_cQo3f90wnRdvkJAvcQv4gvDyJfuzRo"},
{"content":{"body":"so yeah, I also want to know what exactly Stephen had in mind there","m.mentions":{},"msgtype":"m.text"},"ts":1715879520583,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$tqCE2s0RY0CYATB6E_ULa3RUzHPTU6AwQ7vg1qkSeOI"}
]