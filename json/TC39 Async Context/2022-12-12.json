[
{"content":{"body":"> <@legendecas:matrix.org> Sounds like a good idea to me. As an [OpenTelemetry](https://opentelemetry.io/) maintainer, zone.js is the only option on the web platform that we can rely on to propagate tracing contexts. And I've received constant complaining about the delicacy of zone.js and the lack of support of async functions.\n\nIs there an issue you can point to with more details about how this came up?","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24B_1SSt1o6HtiIJfHpQ1v7A6zU-AhmLVAr2ey8KDdVhM\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>Sounds like a good idea to me. As an <a href=\"https://opentelemetry.io/\">OpenTelemetry</a> maintainer, zone.js is the only option on the web platform that we can rely on to propagate tracing contexts. And I've received constant complaining about the delicacy of zone.js and the lack of support of async functions.</blockquote></mx-reply>Is there an issue you can point to with more details about how this came up?","m.relates_to":{"m.in_reply_to":{"event_id":"$B_1SSt1o6HtiIJfHpQ1v7A6zU-AhmLVAr2ey8KDdVhM"}}},"ts":1670807518285,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EUSrLjBqfI2eHQOSsrPR_gDx5hPq-ppfg2foCl-lYFA"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Is there an issue you can point to with more details about how this came up?\n\nYeah, like https://github.com/open-telemetry/opentelemetry-js/issues/3171 and https://github.com/open-telemetry/opentelemetry-js/issues/2655.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$EUSrLjBqfI2eHQOSsrPR_gDx5hPq-ppfg2foCl-lYFA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Is there an issue you can point to with more details about how this came up?</blockquote></mx-reply>Yeah, like https://github.com/open-telemetry/opentelemetry-js/issues/3171 and https://github.com/open-telemetry/opentelemetry-js/issues/2655.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> Is there an issue you can point to with more details about how this came up?\n\nYeah, like https://github.com/open-telemetry/opentelemetry-js/issues/3171 and https://github.com/open-telemetry/opentelemetry-js/issues/2655.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$EUSrLjBqfI2eHQOSsrPR_gDx5hPq-ppfg2foCl-lYFA?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Is there an issue you can point to with more details about how this came up?</blockquote></mx-reply>Yeah, like https://github.com/open-telemetry/opentelemetry-js/issues/3171 and https://github.com/open-telemetry/opentelemetry-js/issues/2655.","m.relates_to":{"m.in_reply_to":{"event_id":"$EUSrLjBqfI2eHQOSsrPR_gDx5hPq-ppfg2foCl-lYFA"}}},"ts":1670810805585,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$sPmMONY47sByrx8Xw96VNfJcVr4mZocQBudVXTA5eNI"},
{"content":{"msgtype":"m.text","body":"Looks like these issues are on the server side?"},"ts":1670812919186,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$3LYiPfgj50QG0CiKylr4w8A4pO6-f6z0mG4dOBo8Trs"},
{"content":{"msgtype":"m.text","body":"Anyway great to see a reference to the original Angular issue at https://github.com/angular/angular/issues/31730"},"ts":1670813151466,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Hw7wehhP4UOFRkCNTf5Fiy3kofXaQgSbXNdT853uJ8g"},
{"content":{"msgtype":"m.text","body":"Yoav, there is a lot of context in the presentation at https://docs.google.com/presentation/d/1yw4d0ca6v2Z2Vmrnac9E9XJFlC872LDQ4GFR17QdRzk/edit?usp=sharing (but my mastodon client keeps crashing when I try to respond to the thread)"},"ts":1670813236414,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SaURP52Dxf1reFjv-TLzmMqwQi1Wi4sT3k0ltIG8H_E"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Looks like these issues are on the server side?\n\nNo, they are on the browsers.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$3LYiPfgj50QG0CiKylr4w8A4pO6-f6z0mG4dOBo8Trs?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Looks like these issues are on the server side?</blockquote></mx-reply>No, they are on the browsers.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> Looks like these issues are on the server side?\n\nNo, they are on the browsers.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$3LYiPfgj50QG0CiKylr4w8A4pO6-f6z0mG4dOBo8Trs?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Looks like these issues are on the server side?</blockquote></mx-reply>No, they are on the browsers.","m.relates_to":{"m.in_reply_to":{"event_id":"$3LYiPfgj50QG0CiKylr4w8A4pO6-f6z0mG4dOBo8Trs"}}},"ts":1670813361472,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$twIJguxKr90LvoMEdLCC3aCDXKJfICKd3kVAUgHzeA4"},
{"content":{"org.matrix.msc1767.text":"OpenTelemetry can also be running on the browsers to trace user interactions and page navigation.","body":"OpenTelemetry can also be running on the browsers to trace user interactions and page navigation.","msgtype":"m.text"},"ts":1670813557703,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$HhiLLuvnyRxIaU5szLiU5jQhJoQXKApp_n77w47PgfE"},
{"content":{"msgtype":"m.text","body":"Oh I see, they are about https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-context-zone/README.md"},"ts":1670813558743,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zQgJSYFVobopbDSM8A6Eg3aAFsp6UMjO1-GW1JaOYxg"},
{"content":{"org.matrix.msc1767.text":"yeah, opentelemetry context manager implementation builtin on top of zone.js","body":"yeah, opentelemetry context manager implementation builtin on top of zone.js","msgtype":"m.text"},"ts":1670813677484,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$UB9EhNl_s0AxGwCk-p0bdhxujDXPEsynFvLMit8Ognk"},
{"content":{"msgtype":"m.text","body":"What does it use that for?"},"ts":1670813841001,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mFSkyzGhKHyszy67utHbl_RJ8Fb_b8D0yPzC6R3ZAME"},
{"content":{"org.matrix.msc1767.text":"Well, that's the story of platform agnostic context propagation. We need an abstract interface so that we can inject platform provided async context implementation like AsyncLocalStorage, zone.js (and potentially CF Workerd's AsyncLocalStorage and Deno's).","body":"Well, that's the story of platform agnostic context propagation. We need an abstract interface so that we can inject platform provided async context implementation like AsyncLocalStorage, zone.js (and potentially CF Workerd's AsyncLocalStorage and Deno's).","msgtype":"m.text"},"ts":1670813972046,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$kw7pU-6W4rvQRbVPkW56skYdE3I74A8vuGtWv59CrNA"},
{"content":{"org.matrix.msc1767.text":"This is the api definition of OpenTelemetry ContextManager https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43. It defines the operations that required to trace the application","body":"This is the api definition of OpenTelemetry ContextManager https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43. It defines the operations that required to trace the application","msgtype":"m.text"},"ts":1670814058066,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$P3gr0T2hScjGS96OrO1htIa1pLzRtAP76OMlg9ZWo7c"},
{"content":{"msgtype":"m.text","body":"So I found these docs for Node, are there analogous docs for the client side? https://opentelemetry.io/docs/instrumentation/js/context/"},"ts":1670814068823,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_xq7SZCtDN3CVninbULzHw3DOg4DdTAY1JKQ8vAX5xk"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> So I found these docs for Node, are there analogous docs for the client side? https://opentelemetry.io/docs/instrumentation/js/context/\n\nhttps://opentelemetry.io/docs/instrumentation/js/getting-started/browser/","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$_xq7SZCtDN3CVninbULzHw3DOg4DdTAY1JKQ8vAX5xk?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>So I found these docs for Node, are there analogous docs for the client side? https://opentelemetry.io/docs/instrumentation/js/context/</blockquote></mx-reply>https://opentelemetry.io/docs/instrumentation/js/getting-started/browser/","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> So I found these docs for Node, are there analogous docs for the client side? https://opentelemetry.io/docs/instrumentation/js/context/\n\nhttps://opentelemetry.io/docs/instrumentation/js/getting-started/browser/","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$_xq7SZCtDN3CVninbULzHw3DOg4DdTAY1JKQ8vAX5xk?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>So I found these docs for Node, are there analogous docs for the client side? https://opentelemetry.io/docs/instrumentation/js/context/</blockquote></mx-reply>https://opentelemetry.io/docs/instrumentation/js/getting-started/browser/","m.relates_to":{"m.in_reply_to":{"event_id":"$_xq7SZCtDN3CVninbULzHw3DOg4DdTAY1JKQ8vAX5xk"}}},"ts":1670814136733,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$YUvGIQala7qXPbYnWTm5F5Mw2Ln-zKeZ5hl5Tea9CpM"},
{"content":{"msgtype":"m.text","body":"The sample code there says that using the zone context provider is optional. What breaks if it is missing? What does “supports asynchronous operations” mean? It would be great to have this whole concrete case concisely described in our README."},"ts":1670814505182,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PyyuloeauJ0KJ8RjxZLmOw6CTxiFxK4hSsSXSQHWWJg"},
{"content":{"org.matrix.msc1767.text":"Yeah, definitely. Without the zone.js on the browser, context propagation is based on manual propagation, or based on the sync call stacks -- identical to the example described in https://docs.google.com/presentation/d/1yw4d0ca6v2Z2Vmrnac9E9XJFlC872LDQ4GFR17QdRzk/edit#slide=id.g198251ee25f_2_6.","body":"Yeah, definitely. Without the zone.js on the browser, context propagation is based on manual propagation, or based on the sync call stacks -- identical to the example described in https://docs.google.com/presentation/d/1yw4d0ca6v2Z2Vmrnac9E9XJFlC872LDQ4GFR17QdRzk/edit#slide=id.g198251ee25f_2_6.","msgtype":"m.text"},"ts":1670814696652,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$xBokeo-ZbSg4zp8-QcgRRGZqOrxiBcudow9Gisr0igg"},
{"content":{"body":"Sorry the part I am missing is how this comes up as important in OpenTelemetry as I am not so familiar with that library ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Sorry the part I am missing is how this comes up as important in OpenTelemetry as I am not so familiar with that library"},"ts":1670814782094,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DjEQ6C3krvItv00_0pYqLrkesf4Tx0lRaZ0Zdvi5Zz0"},
{"content":{"msgtype":"m.text","body":"What sorts of traces do you end up wanting to take on the client side?"},"ts":1670814826175,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5pb4oKCNom5XNVo3kok0rxXzVmI2CAQYNKVbVHMo4Lw"},
{"content":{"msgtype":"m.text","body":"This is about building a causal chain that spans several server and client exchanges, explaining just part of what is going along in the page, passing along a context id in an AsyncContext variable?"},"ts":1670815045308,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Q0YmgMVnaBDFsfT3WJHgZVKlSItnxsnvOaMPlOXZyM8"},
{"content":{"msgtype":"m.text","body":"I would say that the task priority use case, the timing case in the slide deck, and the context id propagation use case are all very interesting and different. (I honestly don’t understand the cache case yet)"},"ts":1670815236126,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WqQkosv_9cqjk467oyi72yPWGwPFKp4nrEp-c9a_qI8"},
{"content":{"body":"The fact that we have 3-4 very different, real and meaningful use cases that are all on the client and solved by AsyncContext should be a strong argument ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"The fact that we have 3-4 very different, real and meaningful use cases that are all on the client and solved by AsyncContext should be a strong argument"},"ts":1670815444632,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o7nUuo7qXdeJQfSidhsfpvbIf5oy_zNLP4kZsLQYBxc"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> What sorts of traces do you end up wanting to take on the client side?\n\nHere https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web, we provides several instrumentations that are available to the web browsers. Tracing the requests across server and client is the outstanding need. However, browser APIs like Long Task API ([instrumentation](https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-long-task)) can be traced too to help understanding the behavior on the client side.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$5pb4oKCNom5XNVo3kok0rxXzVmI2CAQYNKVbVHMo4Lw?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What sorts of traces do you end up wanting to take on the client side?</blockquote></mx-reply>Here https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web, we provides several instrumentations that are available to the web browsers. Tracing the requests across server and client is the outstanding need. However, browser APIs like Long Task API (<a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-long-task\">instrumentation</a>) can be traced too to help understanding the behavior on the client side.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> What sorts of traces do you end up wanting to take on the client side?\n\nHere https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web, we provides several instrumentations that are available to the web browsers. Tracing the requests across server and client is the outstanding need. However, browser APIs like Long Task API ([instrumentation](https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-long-task)) can be traced too to help understanding the behavior on the client side.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$5pb4oKCNom5XNVo3kok0rxXzVmI2CAQYNKVbVHMo4Lw?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>What sorts of traces do you end up wanting to take on the client side?</blockquote></mx-reply>Here https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web, we provides several instrumentations that are available to the web browsers. Tracing the requests across server and client is the outstanding need. However, browser APIs like Long Task API (<a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-long-task\">instrumentation</a>) can be traced too to help understanding the behavior on the client side.","m.relates_to":{"m.in_reply_to":{"event_id":"$5pb4oKCNom5XNVo3kok0rxXzVmI2CAQYNKVbVHMo4Lw"}}},"ts":1670815683731,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$Zed0frjkgB1INWB1nMNYDSnd7tVSxWg7XZ8LFnqkkzI"},
{"content":{"msgtype":"m.text","body":"Can you walk me through a basic case where the context is used? It is great to have all these references but I want to understand if the context is only used in these contrib plugins or also in further even more simple cases."},"ts":1670816050783,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ysc1BXgizkgElgQs7b8qzA6n4G0h4Gn6Ayw5CNoPNos"},
{"content":{"msgtype":"m.text","body":"Maybe the User interaction instrumentation is this basic case?"},"ts":1670816201688,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zXPSLercK_sCldJQW11vOPVimaxFUBJW-TgsHnIaGw8"},
{"content":{"org.matrix.msc1767.text":"yeah","body":"yeah","msgtype":"m.text"},"ts":1670816560233,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$2TFY9JTpJm7oP4gSh4Q-FK0-e77esiPqNWBTBouAFdk"},
{"content":{"msgtype":"m.text","body":"There are a lot of details here about how it hooks into events in the case that zone.js is missing!"},"ts":1670816875528,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NOP0HsnPz46udsgovCQgFb7HeYEN09UUy3Ljih5celo"},
{"content":{"msgtype":"m.text","body":"Perhaps parallel to that, Yoav commented that it was a bit subtle which events make sense to propagate async context over"},"ts":1670816913300,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$i2ZJWkAh2pbNQwosf1gLgi5GcmBFlkjH9UYolMZ_BsE"},
{"content":{"org.matrix.msc1767.message":[{"body":"So taking the [screenshots in the readme](https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots) as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span ([code](https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310)). When `fetch` is invoked as a result of the click event, the `fetch` instrumentation takes the current active span from the async context ([code](https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68)) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server.","mimetype":"text/plain"},{"body":"So taking the <a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots\">screenshots in the readme</a> as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span (<a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310\">code</a>). When <code>fetch</code> is invoked as a result of the click event, the <code>fetch</code> instrumentation takes the current active span from the async context (<a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68\">code</a>) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server.","mimetype":"text/html"}],"body":"So taking the [screenshots in the readme](https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots) as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span ([code](https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310)). When `fetch` is invoked as a result of the click event, the `fetch` instrumentation takes the current active span from the async context ([code](https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68)) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"So taking the <a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots\">screenshots in the readme</a> as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span (<a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310\">code</a>). When <code>fetch</code> is invoked as a result of the click event, the <code>fetch</code> instrumentation takes the current active span from the async context (<a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68\">code</a>) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server."},"ts":1670816967164,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$WB020FGZYsuPv8MG10QL-nUdIRem8gkihj8-t7g-95w"},
{"content":{"org.matrix.msc1767.text":"Basically, every time we create a span, the span will be marked as a child span of the active span saved in the async context.","body":"Basically, every time we create a span, the span will be marked as a child span of the active span saved in the async context.","msgtype":"m.text"},"ts":1670817058432,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$-Yj5BXVVpO7eyiqJApiIqisVYeuEHJVTGSulJd1y3DI"},
{"content":{"msgtype":"m.text","body":"And it will start a new span when, e.g. there is a click or a long task detected?"},"ts":1670817161758,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$LfM4cX-FTauNsyYcPOh4CUgcgpl-3Htmni-BkstBU2A"},
{"content":{"org.matrix.msc1767.text":"yeah, exactly","body":"yeah, exactly","msgtype":"m.text"},"ts":1670817179856,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$-3Qzsl1xFRcBl4WJXv4wQFt8OIlUYRoVHTrIPdR8ZB4"},
{"content":{"body":"Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case ","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case"},"ts":1670817298050,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ugAG6a8xb8iqTx-5e75yF_95cxOac-rUCIzDeWf8dTo"},
{"content":{"body":">    * Patches the constructor of fetch\n\nDidn’t we just cancel React over this? ;)","format":"org.matrix.custom.html","msgtype":"m.text","formatted_body":"<blockquote>\n<ul>\n<li>Patches the constructor of fetch</li>\n</ul>\n</blockquote>\n<p>Didn’t we just cancel React over this? ;)</p>"},"ts":1670817398396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$moEJwkY9t3NZL87R9OjaBGb3VxjpMISI_8bT18bfn5k"},
{"content":{"body":"> <@legendecas:matrix.org> So taking the [screenshots in the readme](https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots) as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span ([code](https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310)). When `fetch` is invoked as a result of the click event, [the `fetch` instrumentation](https://github.com/open-telemetry/opentelemetry-js/blob/main/experimental/packages/opentelemetry-instrumentation-fetch/src/fetch.ts#L307) takes the current active span from the async context ([code](https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68)) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server.\n\nThanks so much for this","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24WB020FGZYsuPv8MG10QL-nUdIRem8gkihj8-t7g-95w\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>So taking the <a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/tree/main/plugins/web/opentelemetry-instrumentation-user-interaction#example-screenshots\">screenshots in the readme</a> as the example, when a button is clicked, a new trace span is created and saved to the async context as the current active span (<a href=\"https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/web/opentelemetry-instrumentation-user-interaction/src/instrumentation.ts#L310\">code</a>). When <code>fetch</code> is invoked as a result of the click event, <a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/experimental/packages/opentelemetry-instrumentation-fetch/src/fetch.ts#L307\">the <code>fetch</code> instrumentation</a> takes the current active span from the async context (<a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/packages/opentelemetry-sdk-trace-base/src/Tracer.ts#L68\">code</a>) and create a child span of it, and injects necessary trace ids and span ids into the request to be send to the server.</blockquote></mx-reply>Thanks so much for this","m.relates_to":{"m.in_reply_to":{"event_id":"$WB020FGZYsuPv8MG10QL-nUdIRem8gkihj8-t7g-95w"}}},"ts":1670817462644,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Pg3dNgjxHK0EsQxSwd3GWlB1jk2Naob3qCOGsMQAPYk"},
{"content":{"org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case\n\nyeah, for OpenTelemetry's requirement, the context API interface defined at https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43 is the basic block for tracing. I find it is sufficiently aligned with the minimum API in the proposal.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$ugAG6a8xb8iqTx-5e75yF_95cxOac-rUCIzDeWf8dTo?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case</blockquote></mx-reply>yeah, for OpenTelemetry's requirement, the context API interface defined at https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43 is the basic block for tracing. I find it is sufficiently aligned with the minimum API in the proposal.","mimetype":"text/html"}],"body":"> <@littledan:matrix.org> Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case\n\nyeah, for OpenTelemetry's requirement, the context API interface defined at https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43 is the basic block for tracing. I find it is sufficiently aligned with the minimum API in the proposal.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy:matrix.org/$ugAG6a8xb8iqTx-5e75yF_95cxOac-rUCIzDeWf8dTo?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Ah I see, thanks for explaining. This sounds extremely similar to what I think Yoav might be trying to accomplish—to the point where we should probably try to understand whether such a higher level construct might be sufficient for the OpenTelemetry case</blockquote></mx-reply>yeah, for OpenTelemetry's requirement, the context API interface defined at https://github.com/open-telemetry/opentelemetry-js/blob/main/api/src/context/types.ts#L43 is the basic block for tracing. I find it is sufficiently aligned with the minimum API in the proposal.","m.relates_to":{"m.in_reply_to":{"event_id":"$ugAG6a8xb8iqTx-5e75yF_95cxOac-rUCIzDeWf8dTo"}}},"ts":1670817788950,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$EPdtPrUq0Ghd1Xllo4GNGIxLKM4Lr_RiOS9Bpm27jJQ"},
{"content":{"msgtype":"m.text","body":"Yeah, when considering the aspect of generating these IDs and sending them to the server, the behavior and usage is sufficiently different from anything that could be built into the browser, so this motivates exposing the “lower level” AsyncContext API that OpenTelemetry can use, possibly alongside some higher level built-in purely client-side tracing/metrics"},"ts":1670818212985,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SrcfiQWeWzNwcE58t48Jzc0l_lutvIbWsn2cRv44AV4"},
{"content":{"org.matrix.msc1767.text":"Sorry if I'm taking it wrong. The trace id in the OpenTelemetry is not the lower level async id James mentioned. The trace id is just sort of a random value.","body":"Sorry if I'm taking it wrong. The trace id in the OpenTelemetry is not the lower level async id James mentioned. The trace id is just sort of a random value.","msgtype":"m.text"},"ts":1670819307650,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$0vHwIhmjcTHGW0RiS1wkRL-xMYRYbEX4ovRK1hNJZqs"},
{"content":{"msgtype":"m.text","body":"Right, I got that, for this reason it would be sort of inappropriate for the built in browser api to generate it and pass it on to fetch"},"ts":1670819796419,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XPbPzuNBpVi9ankfPVz1Ga_0piFrFGQisbMg7LgKzeM"},
{"content":{"msgtype":"m.text","body":"The question I am trying to answer is: for Yoav, do we actually need to expose AsyncContext to JS, or could we just have built in browser mechanisms to handle these cases? For example, main thread scheduling priority propagation could be something totally built-in, so it provides relatively weak motivation for exposing AsyncContext to JS."},"ts":1670819888353,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cJeFwkGR9CjshHPC8aTlm9x6yG9bjYdq4dQjQL_eXMw"}
]