[
{"content":{"body":"> <@littledan:matrix.org> can you elaborate on which cases we should opt back into registration context?\n\nBy \"opt back into\" I meant `AsyncContext.Snapshot.wrap` to handle the rare exception to the default.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$TCo4sez6WZoOUFemlmZY0gizNz-J592Ej0BMlWvtEAY?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>can you elaborate on which cases we should opt back into registration context?</blockquote></mx-reply>By \"opt back into\" I meant <code>AsyncContext.Snapshot.wrap</code> to handle the rare exception to the default.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$TCo4sez6WZoOUFemlmZY0gizNz-J592Ej0BMlWvtEAY"}},"msgtype":"m.text"},"ts":1724113697321,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$U8UD14ILs9_fK31ygL0vAqVr1k1A63MeBMSnhwZ9b1U"},
{"content":{"body":"> <@littledan:matrix.org> can you elaborate on which cases we should opt back into registration context?\n\n * By \"opt back into\" I meant `AsyncContext.Snapshot.wrap` to handle the rare exception to the default - so not \"us\" opting in","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$TCo4sez6WZoOUFemlmZY0gizNz-J592Ej0BMlWvtEAY?via=igalia.com&amp;via=matrix.org&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>can you elaborate on which cases we should opt back into registration context?</blockquote></mx-reply> * By \"opt back into\" I meant <code>AsyncContext.Snapshot.wrap</code> to handle the rare exception to the default - so not \"us\" opting in","m.mentions":{},"m.new_content":{"body":"By \"opt back into\" I meant `AsyncContext.Snapshot.wrap` to handle the rare exception to the default - so not \"us\" opting in","format":"org.matrix.custom.html","formatted_body":"By \"opt back into\" I meant <code>AsyncContext.Snapshot.wrap</code> to handle the rare exception to the default - so not \"us\" opting in","m.mentions":{"user_ids":["@littledan:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$U8UD14ILs9_fK31ygL0vAqVr1k1A63MeBMSnhwZ9b1U","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724113706639,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$5r9Dyd_WzrKj2Os07ZqbjP6I4-Ye36t0QdJ0VJQZc4c"},
{"content":{"body":"> <@legendecas:matrix.org> Is the trace on event handler agnostic to event types? In implementations where instrument known event types, it can determine either creating a new root span, or creating a child span by event type semantics.\n\nMy understanding here is that we _do_ fire some events synchronously via `element.click()` or `.focus()` and that those cascading cases are treated as child spans, whereas a user-initiated click (or focus) would be treated as a root span (but with the same tree of children).  In this case, having event handlers \"do nothing\" produces exactly the right behavior - user-initiated actions come in with an empty context, while synchronous events inherit the caller's context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$8SuRyI3NYJSWm9URO_UegqS4ptJ0zSiqe5H4QQ9r6zE?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@legendecas:matrix.org\">@legendecas:matrix.org</a><br>Is the trace on event handler agnostic to event types? In implementations where instrument known event types, it can determine either creating a new root span, or creating a child span by event type semantics.</blockquote></mx-reply>My understanding here is that we <em>do</em> fire some events synchronously via <code>element.click()</code> or <code>.focus()</code> and that those cascading cases are treated as child spans, whereas a user-initiated click (or focus) would be treated as a root span (but with the same tree of children).  In this case, having event handlers \"do nothing\" produces exactly the right behavior - user-initiated actions come in with an empty context, while synchronous events inherit the caller's context.","m.mentions":{"user_ids":["@legendecas:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$8SuRyI3NYJSWm9URO_UegqS4ptJ0zSiqe5H4QQ9r6zE"}},"msgtype":"m.text"},"ts":1724113900722,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-E1_RuA7P6mtzkG1RXIWcJi_zXAOHRtZ_N2VRrkNhck"},
{"content":{"body":"I think the question was about something else: do you have event-specific logic in your tracing system? Do we expect this to exist generally? The answer to this has significant impact on what kinds of API shapes would or wouldnâ€™t work (even if you have identified one which would work).","msgtype":"m.text"},"ts":1724136209630,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MSlALoVbBSPRPI-OK4TuD3BHnEpvbNNMPLcL2QzY1PI"},
{"content":{"body":"Ah, I think it is probably event-specific, but I don't know exactly. I'll ask, though can you explain why it's such a significant impact?","msgtype":"m.text"},"ts":1724141095080,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nKNotO05VtAL-9Y77zzd2fuSiaePQdj73LGW_AZI2As"},
{"content":{"body":"Though, on second thought, the specificity could easily only be in the product code, rather than in the infrastructure.","msgtype":"m.text"},"ts":1724141295691,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kxO0K1PsXIbdeFMyyNpJAraG2zRSrnF8Vdvnep_6pyQ"},
{"content":{"body":"Whether it is event-specific determines whether we could indicate important context in event-specific properties, as you had proposed, and have a bit of logic to fix things up with that information ","format":"org.matrix.custom.html","formatted_body":"Whether it is event-specific determines whether we could indicate important context in event-specific properties, as you had proposed, and have a bit of logic to fix things up with that information","msgtype":"m.text"},"ts":1724160171045,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pZXi4T3Oq8XIGYptU3dPlnitWa_edAfhlMds-sq4VUM"},
{"content":{"body":"This is really core because we know that different variables need different kinds of information flow. So, we are trying to figure out what the requirements are for this tracing variable (which is the motivation for all of the null context and flow-through discussion as far as I can tell)","msgtype":"m.text"},"ts":1724160278143,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l9_3Ad4Gpgmy9QHfaEx4fCbw0LCg3zoSKYzefVJ-d1g"},
{"content":{"body":"Also, maybe you have some other system that you have been comparing AsyncContext to, and converting an existing tracing system to be based on AsyncContext? Can you tell us about this baseline and what its semantics are?","msgtype":"m.text"},"ts":1724160499085,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uFB0jgpZ679KPfpSYhSqhv1AHtWwDJU5JYjGQ2TMYeo"},
{"content":{"body":"I was under the impression that choosing between initial context and registration context for user-sourced events would be trivial, but after thinking some more about it, I don't think it would be","m.mentions":{},"msgtype":"m.text"},"ts":1724163515524,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YmFuKDcL31xM7jc357JCmfcGqq5SQKmYAEu0g9PWEC4"},
{"content":{"body":"after all, you could fire an event synchronously in an inline `<script>`, and that would have the initial context","format":"org.matrix.custom.html","formatted_body":"after all, you could fire an event synchronously in an inline <code>&lt;script&gt;</code>, and that would have the initial context","m.mentions":{},"msgtype":"m.text"},"ts":1724163546916,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kKuHpeRIyxlh4MH9FrKU3aNvpyijlJA9bSd7GuisDJI"},
{"content":{"body":"so there would need to be extra browser code and spec text to track when an event is user/browser-sourced","m.mentions":{},"msgtype":"m.text"},"ts":1724163585654,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$3RQG9f1976NYJW8mt1LonbcQ1BnKn5ZTypw8nvC2_48"},
{"content":{"body":" * so there would need to be extra browser code and spec text to somehow track when an event is user/browser-sourced","m.mentions":{},"m.new_content":{"body":"so there would need to be extra browser code and spec text to somehow track when an event is user/browser-sourced","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$3RQG9f1976NYJW8mt1LonbcQ1BnKn5ZTypw8nvC2_48","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724163612379,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$dqWokyzC1G2KTXAXm4KFyu1BtjjA3L3LfWEzbeTgqV8"}
]