[
{"content":{"body":"I think `Variable.wrap` ends up being a very different thing from delimited snapshots -- delimited snapshots operate on sections of the stack that contain (possibly) multiple variables, without the caller needing to know which variables are involved, whereas `Variable.wrap` is a convenience method for something you can already do without any kind of snapshots (global or delimited) as long as you know the variable(s) you want to operate on","format":"org.matrix.custom.html","formatted_body":"I think <code>Variable.wrap</code> ends up being a very different thing from delimited snapshots -- delimited snapshots operate on sections of the stack that contain (possibly) multiple variables, without the caller needing to know which variables are involved, whereas <code>Variable.wrap</code> is a convenience method for something you can already do without any kind of snapshots (global or delimited) as long as you know the variable(s) you want to operate on","m.mentions":{},"msgtype":"m.text"},"ts":1714523590504,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$9kl2IDnaAiIKUzs1314lHo5r1kbIrQVXHkcCC7QE-js"},
{"content":{"body":"Can you write example code of how delimited stacks would work?","msgtype":"m.text"},"ts":1714524581850,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$xSaC26TAwmAP6y3VeiqYoSsskBlxiH6hcaHlKJuhwvg"},
{"content":{"body":"So, the system from the paper has \"stack marks\" as a different thing from \"variables\" because it already has the marks as part of delimited control... but in JS, without delimited continuations, I think you can just use a variable as a stack mark and get away with it. So it ends up looking something like...\n```\nSnapshot.partial<T>(v: Variable<T>): Snapshot\n```\nwith the only difference being that when you capture a partial snapshot it captures all variables inside the most recent `v.run` (including `v`), and when you `run` a partial snapshot it instates that sequence of bindings on top of whatever variables are already in scope (perhaps shadowing some if they're in the current scope and also in the partial snapshot, but not clobbering anything that wasn't mentioned in the snapshot).","format":"org.matrix.custom.html","formatted_body":"<p>So, the system from the paper has \"stack marks\" as a different thing from \"variables\" because it already has the marks as part of delimited control... but in JS, without delimited continuations, I think you can just use a variable as a stack mark and get away with it. So it ends up looking something like...</p>\n<pre><code>Snapshot.partial&lt;T&gt;(v: Variable&lt;T&gt;): Snapshot\n</code></pre>\n<p>with the only difference being that when you capture a partial snapshot it captures all variables inside the most recent <code>v.run</code> (including <code>v</code>), and when you <code>run</code> a partial snapshot it instates that sequence of bindings on top of whatever variables are already in scope (perhaps shadowing some if they're in the current scope and also in the partial snapshot, but not clobbering anything that wasn't mentioned in the snapshot).</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1714525334630,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$lpmTU7mXUwXjwTu1wVAhNhrjt6U3_lsB-NJefGS8KVU"},
{"content":{"body":"You're probably going to ask \"why would someone want this?\" and one answer is: I went rifling through the literature for this because of Signals, which really seem like they want to capture and restore the _signal-related_ suffix of the context when running a memoized Computed... but where it doesn't seem to be helpful (and might cause problems) for this to capture or clobber the parts of the async context that were set up completely outside of any Computed","format":"org.matrix.custom.html","formatted_body":"You're probably going to ask \"why would someone want this?\" and one answer is: I went rifling through the literature for this because of Signals, which really seem like they want to capture and restore the <em>signal-related</em> suffix of the context when running a memoized Computed... but where it doesn't seem to be helpful (and might cause problems) for this to capture or clobber the parts of the async context that were set up completely outside of any Computed","m.mentions":{},"msgtype":"m.text"},"ts":1714525576091,"senderName":"shaylew","senderId":"@shaylew:matrix.org","id":"$2ekvv9WupVSTdIr0sG6WMDPU-Q7gmgoD90Te-3SfdAk"}
]