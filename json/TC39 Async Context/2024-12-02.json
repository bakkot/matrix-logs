[
{"content":{"body":"I see references to `enterWith` but basically nothing in github about it?","format":"org.matrix.custom.html","formatted_body":"I see references to <code>enterWith</code> but basically nothing in github about it?","m.mentions":{},"msgtype":"m.text"},"ts":1733106082456,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc"},
{"content":{"body":"> <@taral:matrix.org> I see references to `enterWith` but basically nothing in github about it?\n\nHi. This refers to the `enterWith` method in Node.js's `AsyncLocalStorage`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@taral:matrix.org\">@taral:matrix.org</a><br>I see references to <code>enterWith</code> but basically nothing in github about it?</blockquote></mx-reply>Hi. This refers to the <code>enterWith</code> method in Node.js's <code>AsyncLocalStorage</code>","m.mentions":{"user_ids":["@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc"}},"msgtype":"m.text"},"ts":1733106132158,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wRuFqgQK1J-POfneYn8LUKEZmosleMClXVJ_KH7t4OA"},
{"content":{"body":"Ahh","m.mentions":{},"msgtype":"m.text"},"ts":1733106144133,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$ZUJfehnXks6DkmSc4VCmBBlm8SswtOPC47JVjbSIzSY"},
{"content":{"body":"https://nodejs.org/docs/latest/api/async_context.html#asynclocalstorageenterwithstore","m.mentions":{},"msgtype":"m.text"},"ts":1733106147802,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-YtuP5j2LgNHI2a-8BDfpuVNtuRDQ8sYN561hzu3YbY"},
{"content":{"body":"Yeah, that's weird. It's basically like putting `var.run` around the _entire continuation_.","format":"org.matrix.custom.html","formatted_body":"Yeah, that's weird. It's basically like putting <code>var.run</code> around the <em>entire continuation</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1733106189823,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$Du-e-5srncLN5TE9HVZdi3TCcyqisXXFf13-wLFdZqQ"},
{"content":{"body":"So \"AsyncContext v2\" is also a Node reference?","m.mentions":{},"msgtype":"m.text"},"ts":1733106514036,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4"},
{"content":{"body":"> <@taral:matrix.org> So \"AsyncContext v2\" is also a Node reference?\n\nI don't know what it's a reference to, where did you see that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@taral:matrix.org\">@taral:matrix.org</a><br>So &quot;AsyncContext v2&quot; is also a Node reference?</blockquote></mx-reply>I don't know what it's a reference to, where did you see that?","m.mentions":{"user_ids":["@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4"}},"msgtype":"m.text"},"ts":1733106593001,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Amby5RSZ-ccujXAVZ3S7kRgbw-7_2nFaWGx3TOmTctk"},
{"content":{"body":"> <@stephenhicks:matrix.org> I prototyped a quick proof-of-concept that it's possible to leverage most of an existing implementation and add a disposable `enterWith` by just replacing `AsyncContext.Variable` with a new implementation that indirects through a single \"real\" variable: https://gist.github.com/shicks/0cd7e9b06535793c137934cc52ed12ce\n\nThis gist references v2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$n5Z0m3EHwf5LidaxarAAzTyv5QOOt9_Syh5147rsv6k?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I prototyped a quick proof-of-concept that it's possible to leverage most of an existing implementation and add a disposable <code>enterWith</code> by just replacing <code>AsyncContext.Variable</code> with a new implementation that indirects through a single \"real\" variable: https://gist.github.com/shicks/0cd7e9b06535793c137934cc52ed12ce</blockquote></mx-reply>This gist references v2.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n5Z0m3EHwf5LidaxarAAzTyv5QOOt9_Syh5147rsv6k"}},"msgtype":"m.text"},"ts":1733106810417,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$fdD2xusA8lxpvJVN0NtC-cJQNlz8hU_Qy7wIlRl8K5Y"},
{"content":{"body":"oh, right, this refers to https://github.com/tc39/proposal-async-context/pull/101, which are ideas for an extension to AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1733106869584,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$HUZNLcngx6z_74l7mrgCB2QupLMzwYeqJBurqRS08ro"},
{"content":{"body":" * ~~Maybe I imagined it? Not finding it any more.~~","m.mentions":{},"m.new_content":{"body":"~~Maybe I imagined it? Not finding it any more.~~","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Qh_kbYH0EhQWlh64_0vqagvJhI2dttpH5O861qtUQfQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733106869733,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$erPU7PyxKghgmCvrrdS3HPasJEevO-O7aOSi3BsO114"},
{"content":{"body":"ah thx","m.mentions":{},"msgtype":"m.text"},"ts":1733106895669,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$kLJWGazw2JkFzFXMq8DDdMv9Qnl7EEoyiB8GtMv_2P8"},
{"content":{"body":"Starts to look a bit like Jetpack Compose's snapshots.","m.mentions":{},"msgtype":"m.text"},"ts":1733106941188,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$vAaggmu_gmThVF931yGHOkaREbApU-vGaf8Y06UhbXY"},
{"content":{"body":"I'm not familiar with those","m.mentions":{},"msgtype":"m.text"},"ts":1733107008757,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kWu-Y1YX-5CcRnEQmqH2PSCAV1iSRuadS8VH4w14CrY"},
{"content":{"body":"I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":"I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"msgtype":"m.text"},"ts":1733107267925,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ"},
{"content":{"body":"the SES folks would probably appreciate that","m.mentions":{},"msgtype":"m.text"},"ts":1733107275244,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7ay0qcAoNzCRtBlqdUpdSDCTzf6fk-6pqWGtSz_k1Fw"},
{"content":{"body":" * (completely disconnected topic:) I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":" * (completely disconnected topic:) I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"m.new_content":{"body":"(completely disconnected topic:) I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":"(completely disconnected topic:) I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733107294180,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$_IFZs-E3RXXIl7BR9gYJ3Z2OaoLEL6C996QqMcyJLvU"},
{"content":{"body":"https://blog.zachklipp.com/introduction-to-the-compose-snapshot-system/ is probably the best explanation","m.mentions":{},"msgtype":"m.text"},"ts":1733107315110,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$relT4AMoaRwoyhBYWtSaphe_LgqkKMtCM6bY5jKmUmM"},
{"content":{"body":"It's kind of built on Kotlin's `CoroutineContext`, which is basically the same as `AsyncContext`.","format":"org.matrix.custom.html","formatted_body":"It's kind of built on Kotlin's <code>CoroutineContext</code>, which is basically the same as <code>AsyncContext</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1733107405907,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$ZFdzQMWGi5Tmbbu1SFCTx3xa4UsqYHUBn50kvQUFBSQ"},
{"content":{"body":"(albeit with a somewhat different interface)","m.mentions":{},"msgtype":"m.text"},"ts":1733107454352,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$toyhjxXWPZhm-ub2kyBn8kXBA9Wp_ZBNr0E9rN9d5ps"},
{"content":{"body":"After a chat about async context with Steve Hicks, I was wondering if other (non-fetch/non-xhr) async network operations should also preserve context? E.g. image and/or script loading triggers and their `onload` handlers.","format":"org.matrix.custom.html","formatted_body":"After a chat about async context with <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a>, I was wondering if other (non-fetch/non-xhr) async network operations should also preserve context? E.g. image and/or script loading triggers and their <code>onload</code> handlers.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"ts":1733160035382,"senderName":"Jan Olaf Martin","senderId":"@jkrems:matrix.org","id":"$AKdBVkd219CMw2hs-RY868Mbb0aLZELekbg0ItRQP9Q"},
{"content":{"body":"> <@abotella:igalia.com> (completely disconnected topic:) I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes\n\nWhat would `resetFallbackContext` do?  Would it escape out of whatever fallback context it was previously in?  That seems problematic, if fallback contexts were supposed to be able to isolate entire (transitive) chunks of code?  Though, I'm very skeptical of the security implications of AsyncContext at all - specifically, I don't think we can confidently guarantee that isolated inner code can never access outer/root/empty contexts - it seems too easy to smuggle a foreign context.  (For instance, we've talked about how `addEventListener` interacts with `runWithFallbackContext`, but would `onclick` setters also respect the same fallback?  If they're not _all_ currently implemented as setter properties, then this might be extremely infeasible to change)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>(completely disconnected topic:) I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes</blockquote></mx-reply>What would <code>resetFallbackContext</code> do?  Would it escape out of whatever fallback context it was previously in?  That seems problematic, if fallback contexts were supposed to be able to isolate entire (transitive) chunks of code?  Though, I'm very skeptical of the security implications of AsyncContext at all - specifically, I don't think we can confidently guarantee that isolated inner code can never access outer/root/empty contexts - it seems too easy to smuggle a foreign context.  (For instance, we've talked about how <code>addEventListener</code> interacts with <code>runWithFallbackContext</code>, but would <code>onclick</code> setters also respect the same fallback?  If they're not <em>all</em> currently implemented as setter properties, then this might be extremely infeasible to change)","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ"}},"msgtype":"m.text"},"ts":1733163769798,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QDxuq8nkJpS_yZpdJM0i2Qvxhd4EJL3912dPKIHItkE"},
{"content":{"body":"I was thinking that it would reset to the empty context","m.mentions":{},"msgtype":"m.text"},"ts":1733163813994,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$w0zfOiV-6PgPQQk1gAV_RSkReS8a64peEe46hTc9jNo"},
{"content":{"body":"> <@taral:matrix.org> Yeah, that's weird. It's basically like putting `var.run` around the _entire continuation_.\n\nAs we talk about more and more callback-accepting APIs (`runWithFallbackContext`, `resetFallbackContext`, etc, on top of `Variable#run` and `Snapshot#run`), will all of these be rendered obsolete if we end up exposing a `set`/`enterWith` API?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$Du-e-5srncLN5TE9HVZdi3TCcyqisXXFf13-wLFdZqQ?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@taral:matrix.org\">@taral:matrix.org</a><br>Yeah, that's weird. It's basically like putting <code>var.run</code> around the <em>entire continuation</em>.</blockquote></mx-reply>As we talk about more and more callback-accepting APIs (<code>runWithFallbackContext</code>, <code>resetFallbackContext</code>, etc, on top of <code>Variable#run</code> and <code>Snapshot#run</code>), will all of these be rendered obsolete if we end up exposing a <code>set</code>/<code>enterWith</code> API?","m.mentions":{"user_ids":["@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Du-e-5srncLN5TE9HVZdi3TCcyqisXXFf13-wLFdZqQ"}},"msgtype":"m.text"},"ts":1733163873885,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$offrpU_3xHsRQsKGPwLOkdMzKXHiiSZrOnC5N3Y-MgI"},
{"content":{"body":"> <@abotella:igalia.com> I was thinking that it would reset to the empty context\n\nThis maybe suggests it's worth making it explicit that empty context should never be considered privileged?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$w0zfOiV-6PgPQQk1gAV_RSkReS8a64peEe46hTc9jNo?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@abotella:igalia.com\">@abotella:igalia.com</a><br>I was thinking that it would reset to the empty context</blockquote></mx-reply>This maybe suggests it's worth making it explicit that empty context should never be considered privileged?","m.mentions":{"user_ids":["@abotella:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$w0zfOiV-6PgPQQk1gAV_RSkReS8a64peEe46hTc9jNo"}},"msgtype":"m.text"},"ts":1733163929916,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$INWQWnCGF6CqwNDbjdY1y4ERNu1K3z5V4dseMdV8Crs"},
{"content":{"body":"> <@stephenhicks:matrix.org> As we talk about more and more callback-accepting APIs (`runWithFallbackContext`, `resetFallbackContext`, etc, on top of `Variable#run` and `Snapshot#run`), will all of these be rendered obsolete if we end up exposing a `set`/`enterWith` API?\n\nIn Node.js I still see significant usage of `.run`, even if there is `.enterWith` (!!! this is not backed up by data, just by me looking at `.enterWith` usage patterns a month ago)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$offrpU_3xHsRQsKGPwLOkdMzKXHiiSZrOnC5N3Y-MgI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>As we talk about more and more callback-accepting APIs (<code>runWithFallbackContext</code>, <code>resetFallbackContext</code>, etc, on top of <code>Variable#run</code> and <code>Snapshot#run</code>), will all of these be rendered obsolete if we end up exposing a <code>set</code>/<code>enterWith</code> API?</blockquote></mx-reply>In Node.js I still see significant usage of <code>.run</code>, even if there is <code>.enterWith</code> (!!! this is not backed up by data, just by me looking at <code>.enterWith</code> usage patterns a month ago)","m.mentions":{"user_ids":["@stephenhicks:matrix.org","@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$offrpU_3xHsRQsKGPwLOkdMzKXHiiSZrOnC5N3Y-MgI"}},"msgtype":"m.text"},"ts":1733164113199,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$BjKjhEzCugOXKcSOXM32ComQ74D1JMCQMdzYxBT_lIM"},
{"content":{"body":"If you have access to the empty context, you could write (in userland)\n\n```\nfunction resetFallbackContext(fn) {\n  const snapshot = new AsyncContext.Snapshot();\n  return EMPTY_SNAPSHOT.run(() => runWithFallbackContext(() => snapshot.run(fn)));\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>If you have access to the empty context, you could write (in userland)</p>\n<pre><code>function resetFallbackContext(fn) {\n  const snapshot = new AsyncContext.Snapshot();\n  return EMPTY_SNAPSHOT.run(() =&gt; runWithFallbackContext(() =&gt; snapshot.run(fn)));\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1733164166283,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$xxis-J3xPG3cMlVAapak0GVBUfY9yOEyEoNCXs8WU_k"},
{"content":{"body":"(though the three extra frames on the stack are unfortunate)","m.mentions":{},"msgtype":"m.text"},"ts":1733164194076,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$7-IYPq9_o7zjKYmfd3olMrDpTR4LlOuv353Jca8sZKw"},
{"content":{"body":" * (though the three (or six or seven???) extra frames on the stack are unfortunate)","m.mentions":{},"m.new_content":{"body":"(though the three (or six or seven???) extra frames on the stack are unfortunate)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7-IYPq9_o7zjKYmfd3olMrDpTR4LlOuv353Jca8sZKw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733164241185,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$o6z8urIkQNTYKWpTsl9ooMZHD-iJvV0a6__yj9WotNQ"},
{"content":{"body":"I'm not sure I understand the use case for `resetFallbackContext","m.mentions":{},"msgtype":"m.text"},"ts":1733164247109,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SuKQXMiAPW49pjW7Qqs7mymDIfsKHqoHT1oTyqGls6g"},
{"content":{"body":" * I'm not sure I understand the use case for `resetFallbackContext`","format":"org.matrix.custom.html","formatted_body":" * I'm not sure I understand the use case for <code>resetFallbackContext</code>","m.mentions":{},"m.new_content":{"body":"I'm not sure I understand the use case for `resetFallbackContext`","format":"org.matrix.custom.html","formatted_body":"I'm not sure I understand the use case for <code>resetFallbackContext</code>","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$SuKQXMiAPW49pjW7Qqs7mymDIfsKHqoHT1oTyqGls6g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733164283733,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$jMrwdNGjGYJ7dtwTHPPp0U6DG7dfZ3fifTHwpEPv1tU"},
{"content":{"body":"the use case I see is establishing a security boundary","m.mentions":{},"msgtype":"m.text"},"ts":1733164314057,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1L0FTdAevCVflGt_1YZvfRBd5F58qBgQ71D8k750_1c"},
{"content":{"body":" * (though the 3-8 extra frames on the stack are unfortunate)","m.mentions":{},"m.new_content":{"body":"(though the 3-8 extra frames on the stack are unfortunate)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7-IYPq9_o7zjKYmfd3olMrDpTR4LlOuv353Jca8sZKw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733164410625,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Eoqdw5jWc9WURv30divNBuUO-ba4Vge_S8b_0J9JKl0"},
{"content":{"body":"But it does the opposite: it lets you _escape_ the boundary that your caller set up for you","format":"org.matrix.custom.html","formatted_body":"But it does the opposite: it lets you <em>escape</em> the boundary that your caller set up for you","m.mentions":{},"msgtype":"m.text"},"ts":1733164538532,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$R77KUGQ4zrmkF5qPGZ5E52CUwkrVt4qjX_mz3HHVeis"},
{"content":{"body":"(note: this is not about security, since there are many ways to get to the root context)","m.mentions":{},"msgtype":"m.text"},"ts":1733164557579,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$haLxcQAtZJkk77zOx1jSu9K7vzBB_icyNrrAhAkZIso"}
]