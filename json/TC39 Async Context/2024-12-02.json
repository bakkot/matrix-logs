[
{"content":{"body":"I see references to `enterWith` but basically nothing in github about it?","format":"org.matrix.custom.html","formatted_body":"I see references to <code>enterWith</code> but basically nothing in github about it?","m.mentions":{},"msgtype":"m.text"},"ts":1733106082456,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc"},
{"content":{"body":"> <@taral:matrix.org> I see references to `enterWith` but basically nothing in github about it?\n\nHi. This refers to the `enterWith` method in Node.js's `AsyncLocalStorage`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@taral:matrix.org\">@taral:matrix.org</a><br>I see references to <code>enterWith</code> but basically nothing in github about it?</blockquote></mx-reply>Hi. This refers to the <code>enterWith</code> method in Node.js's <code>AsyncLocalStorage</code>","m.mentions":{"user_ids":["@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tbNfrzlkwJ5a2fQ9EiDvzgA4ciRHryWCFKJXHcCangc"}},"msgtype":"m.text"},"ts":1733106132158,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wRuFqgQK1J-POfneYn8LUKEZmosleMClXVJ_KH7t4OA"},
{"content":{"body":"Ahh","m.mentions":{},"msgtype":"m.text"},"ts":1733106144133,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$ZUJfehnXks6DkmSc4VCmBBlm8SswtOPC47JVjbSIzSY"},
{"content":{"body":"https://nodejs.org/docs/latest/api/async_context.html#asynclocalstorageenterwithstore","m.mentions":{},"msgtype":"m.text"},"ts":1733106147802,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-YtuP5j2LgNHI2a-8BDfpuVNtuRDQ8sYN561hzu3YbY"},
{"content":{"body":"Yeah, that's weird. It's basically like putting `var.run` around the _entire continuation_.","format":"org.matrix.custom.html","formatted_body":"Yeah, that's weird. It's basically like putting <code>var.run</code> around the <em>entire continuation</em>.","m.mentions":{},"msgtype":"m.text"},"ts":1733106189823,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$Du-e-5srncLN5TE9HVZdi3TCcyqisXXFf13-wLFdZqQ"},
{"content":{"body":"So \"AsyncContext v2\" is also a Node reference?","m.mentions":{},"msgtype":"m.text"},"ts":1733106514036,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4"},
{"content":{"body":"> <@taral:matrix.org> So \"AsyncContext v2\" is also a Node reference?\n\nI don't know what it's a reference to, where did you see that?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@taral:matrix.org\">@taral:matrix.org</a><br>So &quot;AsyncContext v2&quot; is also a Node reference?</blockquote></mx-reply>I don't know what it's a reference to, where did you see that?","m.mentions":{"user_ids":["@taral:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$o50moo5gG7Tghwq9vg7gSaWTDMjs04iZtqWuwKaN2V4"}},"msgtype":"m.text"},"ts":1733106593001,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$Amby5RSZ-ccujXAVZ3S7kRgbw-7_2nFaWGx3TOmTctk"},
{"content":{"body":"> <@stephenhicks:matrix.org> I prototyped a quick proof-of-concept that it's possible to leverage most of an existing implementation and add a disposable `enterWith` by just replacing `AsyncContext.Variable` with a new implementation that indirects through a single \"real\" variable: https://gist.github.com/shicks/0cd7e9b06535793c137934cc52ed12ce\n\nThis gist references v2.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$n5Z0m3EHwf5LidaxarAAzTyv5QOOt9_Syh5147rsv6k?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>I prototyped a quick proof-of-concept that it's possible to leverage most of an existing implementation and add a disposable <code>enterWith</code> by just replacing <code>AsyncContext.Variable</code> with a new implementation that indirects through a single \"real\" variable: https://gist.github.com/shicks/0cd7e9b06535793c137934cc52ed12ce</blockquote></mx-reply>This gist references v2.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$n5Z0m3EHwf5LidaxarAAzTyv5QOOt9_Syh5147rsv6k"}},"msgtype":"m.text"},"ts":1733106810417,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$fdD2xusA8lxpvJVN0NtC-cJQNlz8hU_Qy7wIlRl8K5Y"},
{"content":{"body":"oh, right, this refers to https://github.com/tc39/proposal-async-context/pull/101, which are ideas for an extension to AsyncContext","m.mentions":{},"msgtype":"m.text"},"ts":1733106869584,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$HUZNLcngx6z_74l7mrgCB2QupLMzwYeqJBurqRS08ro"},
{"content":{"body":" * ~~Maybe I imagined it? Not finding it any more.~~","m.mentions":{},"m.new_content":{"body":"~~Maybe I imagined it? Not finding it any more.~~","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$Qh_kbYH0EhQWlh64_0vqagvJhI2dttpH5O861qtUQfQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733106869733,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$erPU7PyxKghgmCvrrdS3HPasJEevO-O7aOSi3BsO114"},
{"content":{"body":"ah thx","m.mentions":{},"msgtype":"m.text"},"ts":1733106895669,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$kLJWGazw2JkFzFXMq8DDdMv9Qnl7EEoyiB8GtMv_2P8"},
{"content":{"body":"Starts to look a bit like Jetpack Compose's snapshots.","m.mentions":{},"msgtype":"m.text"},"ts":1733106941188,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$vAaggmu_gmThVF931yGHOkaREbApU-vGaf8Y06UhbXY"},
{"content":{"body":"I'm not familiar with those","m.mentions":{},"msgtype":"m.text"},"ts":1733107008757,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$kWu-Y1YX-5CcRnEQmqH2PSCAV1iSRuadS8VH4w14CrY"},
{"content":{"body":"I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":"I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"msgtype":"m.text"},"ts":1733107267925,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ"},
{"content":{"body":"the SES folks would probably appreciate that","m.mentions":{},"msgtype":"m.text"},"ts":1733107275244,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$7ay0qcAoNzCRtBlqdUpdSDCTzf6fk-6pqWGtSz_k1Fw"},
{"content":{"body":" * (completely disconnected topic:) I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":" * (completely disconnected topic:) I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"m.new_content":{"body":"(completely disconnected topic:) I'm wondering if we should also have a `resetFallbackContext` API, to isolate inner scopes","format":"org.matrix.custom.html","formatted_body":"(completely disconnected topic:) I'm wondering if we should also have a <code>resetFallbackContext</code> API, to isolate inner scopes","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$CCYqzGTtHHoh6mQccf3wTLgG90jw2TtxneYfOoQCiTQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1733107294180,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$_IFZs-E3RXXIl7BR9gYJ3Z2OaoLEL6C996QqMcyJLvU"},
{"content":{"body":"https://blog.zachklipp.com/introduction-to-the-compose-snapshot-system/ is probably the best explanation","m.mentions":{},"msgtype":"m.text"},"ts":1733107315110,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$relT4AMoaRwoyhBYWtSaphe_LgqkKMtCM6bY5jKmUmM"},
{"content":{"body":"It's kind of built on Kotlin's `CoroutineContext`, which is basically the same as `AsyncContext`.","format":"org.matrix.custom.html","formatted_body":"It's kind of built on Kotlin's <code>CoroutineContext</code>, which is basically the same as <code>AsyncContext</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1733107405907,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$ZFdzQMWGi5Tmbbu1SFCTx3xa4UsqYHUBn50kvQUFBSQ"},
{"content":{"body":"(albeit with a somewhat different interface)","m.mentions":{},"msgtype":"m.text"},"ts":1733107454352,"senderName":"Taral","senderId":"@taral:matrix.org","id":"$toyhjxXWPZhm-ub2kyBn8kXBA9Wp_ZBNr0E9rN9d5ps"},
{"content":{"body":"After a chat about async context with Steve Hicks, I was wondering if other (non-fetch/non-xhr) async network operations should also preserve context? E.g. image and/or script loading triggers and their `onload` handlers.","format":"org.matrix.custom.html","formatted_body":"After a chat about async context with <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">Steve Hicks</a>, I was wondering if other (non-fetch/non-xhr) async network operations should also preserve context? E.g. image and/or script loading triggers and their <code>onload</code> handlers.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"msgtype":"m.text"},"ts":1733160035382,"senderName":"Jan Olaf Martin","senderId":"@jkrems:matrix.org","id":"$AKdBVkd219CMw2hs-RY868Mbb0aLZELekbg0ItRQP9Q"}
]