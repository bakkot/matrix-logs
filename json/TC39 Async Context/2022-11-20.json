[
{"content":{"body":"> <@rbuckton:matrix.org> That's already feasible in the proposed design, just not convenient. \n\nI don’t think it is, because you can’t really reliably get ahold of something with no context variables defined, if the engine may define some of them (as proposed by Yoav in his talk)","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24a5Ivth5UDpaUu2b9lnk-SpDu-0DwMTVCVcL29v6fCsg\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>That's already feasible in the proposed design, just not convenient.</blockquote></mx-reply>I don’t think it is, because you can’t really reliably get ahold of something with no context variables defined, if the engine may define some of them (as proposed by Yoav in his talk)","m.relates_to":{"m.in_reply_to":{"event_id":"$a5Ivth5UDpaUu2b9lnk-SpDu-0DwMTVCVcL29v6fCsg"}}},"ts":1668966344647,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MdM5iZT15hQ59NDr0xrFFvgXcuR_hPKGiXnNdm08Uj8"},
{"content":{"body":"> <@rbuckton:matrix.org> I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using `AsyncLocalStorage` for (though in that case, its a Discord bot).\n\nI think priority of different threads of control is also likely to be a very immediate and important application ","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!siOjSOrhCVYVzIoThy%3Amatrix.org/%24wKekELBgEvD8h_7159OFup5ekL_8JA2dvNelCGJTgBY\">In reply to</a> <a href=\"https://matrix.to/#/@rbuckton:matrix.org\">@rbuckton:matrix.org</a><br>I expect the most obvious thing it will be used for is passing along request state in a server. That's what I'm using <code>AsyncLocalStorage</code> for (though in that case, its a Discord bot).</blockquote></mx-reply>I think priority of different threads of control is also likely to be a very immediate and important application","m.relates_to":{"m.in_reply_to":{"event_id":"$wKekELBgEvD8h_7159OFup5ekL_8JA2dvNelCGJTgBY"}}},"ts":1668966394532,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$udDjyWSTxKyCDRIyt5fpkR897ldq17zWfLLl5_hi3b4"},
{"content":{"org.matrix.msc1767.message":[{"body":"I'm not opposed to *any* storage of a cancellation token in an async context. Its fine to do so in an application, its just that its a bad practice for library authors to depend on it if there's a chance an intermediate/middleware might need to use the API with its own level of control. For example, if `fetch` were to have a transparent cancellation mechanism, it would be bad if it didn't also introduce a way to easily suppress an implicit cancellation flow. You wouldn't want `setTimeout` to have implicit cancellation because its just used too often for too many things to have a user try to cancel one timer and accidentally cancel *every* timer that may have been created in the same flow.","mimetype":"text/plain"},{"body":"I'm not opposed to <em>any</em> storage of a cancellation token in an async context. Its fine to do so in an application, its just that its a bad practice for library authors to depend on it if there's a chance an intermediate/middleware might need to use the API with its own level of control. For example, if <code>fetch</code> were to have a transparent cancellation mechanism, it would be bad if it didn't also introduce a way to easily suppress an implicit cancellation flow. You wouldn't want <code>setTimeout</code> to have implicit cancellation because its just used too often for too many things to have a user try to cancel one timer and accidentally cancel <em>every</em> timer that may have been created in the same flow.","mimetype":"text/html"}],"body":"I'm not opposed to *any* storage of a cancellation token in an async context. Its fine to do so in an application, its just that its a bad practice for library authors to depend on it if there's a chance an intermediate/middleware might need to use the API with its own level of control. For example, if `fetch` were to have a transparent cancellation mechanism, it would be bad if it didn't also introduce a way to easily suppress an implicit cancellation flow. You wouldn't want `setTimeout` to have implicit cancellation because its just used too often for too many things to have a user try to cancel one timer and accidentally cancel *every* timer that may have been created in the same flow.","msgtype":"m.text","format":"org.matrix.custom.html","formatted_body":"I'm not opposed to <em>any</em> storage of a cancellation token in an async context. Its fine to do so in an application, its just that its a bad practice for library authors to depend on it if there's a chance an intermediate/middleware might need to use the API with its own level of control. For example, if <code>fetch</code> were to have a transparent cancellation mechanism, it would be bad if it didn't also introduce a way to easily suppress an implicit cancellation flow. You wouldn't want <code>setTimeout</code> to have implicit cancellation because its just used too often for too many things to have a user try to cancel one timer and accidentally cancel <em>every</em> timer that may have been created in the same flow."},"ts":1668973161088,"senderName":"rbuckton","senderId":"@rbuckton:matrix.org","id":"$OtZrDFchsL7MsovPvKCB_r3o-2Wc5YHSAzgyjs2HWtw"}
]