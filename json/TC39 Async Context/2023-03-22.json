[
{"content":{"body":"I had some quick chats today at TC39 with dminor and bakkot, everyone seemed cautiously positive though a little uncertain about use cases. I am optimistic about the presentation but we might consider adding bonus slides that go in more depth there (eg just taking what was in legendecas’s webperf wg slides)","msgtype":"m.text"},"ts":1679445053389,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Yxvfy8w3YSGiIc_DdrS6kGxHpvJPwjInSAG_covkMpI"},
{"content":{"body":"I didn’t get the feeling that the complexity around what things are wrapped was considered a very bad issue for either (just something to work out) but maybe I misunderstood them","msgtype":"m.text"},"ts":1679445110503,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rQZ4SGbPdgLagMyfPgeA9AtEG-GQaEK081ULM0xmdmE"},
{"content":{"body":"Good luck this week on proposing for Stage 2!","msgtype":"m.text"},"ts":1679445122818,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AdhWFPmEgwRAIoSxF99ccKYIu-267vz_PPzYGjLEoVE"},
{"content":{"body":"So, here's a question. fetch has the `Response` object. This can be created using a `ReadableStream` object, which uses a number of internal promises to manage state. In workerd, we have a method that handles received requests and can return a `Response` object specifying the response to an http request. So, imagine a case like:\n\n```\nconst als = new AsyncLocalStorage(); // or AsyncContext\nexport default {\n  async fetch(req) {\n    const readable = als.run('abc', () => new ReadableStream({\n      pull(c) {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }\n    }));\n    return als.run(123, () => new Response(readable));\n  }\n}\n```\n\nThe actual pipe from the readable happens by the code that calls the `fetch` function handler here, which is running in the root async context where `als` store will be `undefined`.\n\nWhat value would you expect `als.getStore()` to return when the error is constructed?","format":"org.matrix.custom.html","formatted_body":"<p>So, here's a question. fetch has the <code>Response</code> object. This can be created using a <code>ReadableStream</code> object, which uses a number of internal promises to manage state. In workerd, we have a method that handles received requests and can return a <code>Response</code> object specifying the response to an http request. So, imagine a case like:</p>\n<pre><code>const als = new AsyncLocalStorage(); // or AsyncContext\nexport default {\n  async fetch(req) {\n    const readable = als.run('abc', () =&gt; new ReadableStream({\n      pull(c) {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }\n    }));\n    return als.run(123, () =&gt; new Response(readable));\n  }\n}\n</code></pre>\n<p>The actual pipe from the readable happens by the code that calls the <code>fetch</code> function handler here, which is running in the root async context where <code>als</code> store will be <code>undefined</code>.</p>\n<p>What value would you expect <code>als.getStore()</code> to return when the error is constructed?</p>\n","msgtype":"m.text"},"ts":1679498186038,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$nQAhTeyRKcK0qB6P707zCamdJ_dA9CkWMCRsdnEidok"},
{"content":{"body":"Keep in mind that the pull function can be called at different times depending on the value of the `highWaterMark` configured for the readablestream","format":"org.matrix.custom.html","formatted_body":"Keep in mind that the pull function can be called at different times depending on the value of the <code>highWaterMark</code> configured for the readablestream","msgtype":"m.text"},"ts":1679498257762,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$UL02gc_alRTatl78cGHpchLwj1OwM-euX3oHWZwC8Ro"},
{"content":{"body":"specifically, pull might be called when the ReadableStream is created, and any time after while it is being read","msgtype":"m.text"},"ts":1679498598220,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$xB-zJT3Ozw-gKGyyeBEuCuvdZbCAfxeiLMcXDeeyuXc"},
{"content":{"body":"I don't have a good answer. Just from the use case I recognize that it must be one of the two (and not `undefined` just because the `Response` object is leaked out of the fetch), but I don't have a good idea of which one of these contexts is the \"registration\" context","format":"org.matrix.custom.html","formatted_body":"I don't have a good answer. Just from the use case I recognize that it must be one of the two (and not <code>undefined</code> just because the <code>Response</code> object is leaked out of the fetch), but I don't have a good idea of which one of these contexts is the &quot;registration&quot; context","msgtype":"m.text"},"ts":1679500335163,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$S7IWXre8FNFlTbas966Qbs-7OktIL5uL_qGe9-_3MWs"},
{"content":{"body":"In my experience, the contexts are the same. I create the readable and the response in the same overall context, so the distinction doesn't matter","msgtype":"m.text"},"ts":1679500439839,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MjYLOfQmdeGFX5V4Eesht0qdblGHZlnvdIPcGdOExR4"},
{"content":{"body":"That's fair. What I suspect is that for web apis, once AsyncContext is integrated, we'll need a way of identifying in webidl which types are expected to capture and propagate the async context","msgtype":"m.text"},"ts":1679500562429,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$u07eXgiRQmUPLNc1X4RyRLdAy6MYIWjr-5zwUNocJ10"},
{"content":{"body":"It's going to be needed regardless of where AsyncContext ultimately gets defined (tc39 or whatwg, etc)","msgtype":"m.text"},"ts":1679500598210,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$juKuSHIQdPNIa6cQRkqXJseWPQF6dbWAOhxHBSKeEL0"},
{"content":{"body":"Here’s my take: if/once `AsyncContext` becomes an official part of the language, utilities like `ReadableStream` could (backwards compatibly!) begin to support a contract whereby the context in effect at `ReadableStream` construction time is automatically restored each time `pull` and other callbacks are called","format":"org.matrix.custom.html","formatted_body":"Here’s my take: if/once <code>AsyncContext</code> becomes an official part of the language, utilities like <code>ReadableStream</code> could (backwards compatibly!) begin to support a contract whereby the context in effect at <code>ReadableStream</code> construction time is automatically restored each time <code>pull</code> and other callbacks are called","msgtype":"m.text"},"ts":1679507460200,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$c17C-uwu2VKmB0zFkEQ2JzPt93ii5qW4AC3bYoofR8g"},
{"content":{"body":"In the meantime (potentially for a long time), you might need to take matters into your own hands using `AsyncContext.wrap`:","format":"org.matrix.custom.html","formatted_body":"In the meantime (potentially for a long time), you might need to take matters into your own hands using <code>AsyncContext.wrap</code>:","msgtype":"m.text"},"ts":1679507480626,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$7tYVfUfI3TxKGGBa9iD9CLHasx8WMLi7wbL-yCSE1qc"},
{"content":{"body":"``` export default {\n  async fetch(req) {\n    const readable = als.run('abc', () => new ReadableStream({\n      pull: AsyncContext.wrap((c) => {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }),\n    }));\n    return als.run(123, () => new Response(readable));\n  }\n}\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-export\">  async fetch(req) {\n    const readable = als.run('abc', () =&gt; new ReadableStream({\n      pull: AsyncContext.wrap((c) =&gt; {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }),\n    }));\n    return als.run(123, () =&gt; new Response(readable));\n  }\n}\n</code></pre>\n","msgtype":"m.text"},"ts":1679507486955,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$M4hEKna7i3oL32D7W4VkLvoGANu49rJNYs6sdFODCR8"},
{"content":{"body":"With this code, the `als` with `abc` is bound to the `pull` callback function so `als.getStore()` can return `abc` instead of undefined for the Error","format":"org.matrix.custom.html","formatted_body":"With this code, the <code>als</code> with <code>abc</code> is bound to the <code>pull</code> callback function so <code>als.getStore()</code> can return <code>abc</code> instead of undefined for the Error","msgtype":"m.text"},"ts":1679507511207,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$MssD7dKFhe6G7tr0aHx1wskf9F7uYf-mRLIiAUDeE5w"},
{"content":{"body":"Of course, this `AsyncContext.wrap` binding means any other `AsyncContext` values coming from the caller of the `pull` callback (some code in the `ReadableStream` implementation) will now be ignored, but that’s probably safe as long as you don’t expect/care `ReadableStream` to be manipulating `AsyncContext`","format":"org.matrix.custom.html","formatted_body":"Of course, this <code>AsyncContext.wrap</code> binding means any other <code>AsyncContext</code> values coming from the caller of the <code>pull</code> callback (some code in the <code>ReadableStream</code> implementation) will now be ignored, but that’s probably safe as long as you don’t expect/care <code>ReadableStream</code> to be manipulating <code>AsyncContext</code>","msgtype":"m.text"},"ts":1679507541500,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$bewngEyFgMIygnR8Be0V15kBIJ21F7VTbayuYi7Ib0g"},
{"content":{"body":" * Of course, this `AsyncContext.wrap` binding means any other `AsyncContext` values coming from the caller of the `pull` callback (some code in the `ReadableStream` implementation) will now be ignored, but that’s probably safe as long as you don’t expect `ReadableStream` to be manipulating `AsyncContext`","format":"org.matrix.custom.html","formatted_body":" * Of course, this <code>AsyncContext.wrap</code> binding means any other <code>AsyncContext</code> values coming from the caller of the <code>pull</code> callback (some code in the <code>ReadableStream</code> implementation) will now be ignored, but that’s probably safe as long as you don’t expect <code>ReadableStream</code> to be manipulating <code>AsyncContext</code>","m.new_content":{"body":"Of course, this `AsyncContext.wrap` binding means any other `AsyncContext` values coming from the caller of the `pull` callback (some code in the `ReadableStream` implementation) will now be ignored, but that’s probably safe as long as you don’t expect `ReadableStream` to be manipulating `AsyncContext`","format":"org.matrix.custom.html","formatted_body":"Of course, this <code>AsyncContext.wrap</code> binding means any other <code>AsyncContext</code> values coming from the caller of the <code>pull</code> callback (some code in the <code>ReadableStream</code> implementation) will now be ignored, but that’s probably safe as long as you don’t expect <code>ReadableStream</code> to be manipulating <code>AsyncContext</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$bewngEyFgMIygnR8Be0V15kBIJ21F7VTbayuYi7Ib0g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679507545332,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$f94Z9p8lxp956c8N1yRfZjWkjjFBd96JLKged8TorgI"},
{"content":{"body":"Is that helpful?","msgtype":"m.text"},"ts":1679507563903,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Gffh440hiLt_TPuwpwFGqNC568QpIRcWJHSQepxFOCE"},
{"content":{"body":"Unfortunately it doesn't exactly help. If I call c.error() within the pull, and there's a queued read, that queued read is likely not necessarily going to be rejected immediately when the `c.error` is called. It might end up getting processed from a different async scope, which means if it results in an unhandledrejection event, it will propagate the wrong context","format":"org.matrix.custom.html","formatted_body":"Unfortunately it doesn't exactly help. If I call c.error() within the pull, and there's a queued read, that queued read is likely not necessarily going to be rejected immediately when the <code>c.error</code> is called. It might end up getting processed from a different async scope, which means if it results in an unhandledrejection event, it will propagate the wrong context","msgtype":"m.text"},"ts":1679507727151,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$fFdyrsL_q83KNxKhlwkg_ADyQX7SfqJuhxuDl8CLcYc"},
{"content":{"body":"going to have to play with this case a bit more to really tease out all the various cases","msgtype":"m.text"},"ts":1679507782432,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$wNtlcfJbDCHhFpdfplxl_v52JNmbeCTtI-3qUwayfi8"},
{"content":{"body":"There are a variety of situations that make this complicated.","msgtype":"m.text"},"ts":1679507830760,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$NNmUchMl3CnipeqWzxlonTjo5DBLxRtFED5EQTTEdTA"},
{"content":{"body":"whatever code is scheduling/queueing those read jobs needs to be using something like `AsyncContext.wrap` to preserve the context from one job to the next, I think?","format":"org.matrix.custom.html","formatted_body":"whatever code is scheduling/queueing those read jobs needs to be using something like <code>AsyncContext.wrap</code> to preserve the context from one job to the next, I think?","msgtype":"m.text"},"ts":1679507869983,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$L_GFdhcWoW458MBNtlAB8zhaWSYvNmGxlCVFACAqO7c"},
{"content":{"body":"are you trying to get this to work without modifying library code that does this kind of scheduling? (seems hard)","msgtype":"m.text"},"ts":1679507884171,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$tgqVbC_9Hra3RT0S6bv6Jlw4IcRv5Bg1Pl77WtoMNSY"},
{"content":{"body":"for instance, I may have multiple reads queued, all called from separate async contexts, but a mismatched number of pulls, where one pull triggered by one context fulfills multiple reads","msgtype":"m.text"},"ts":1679507886394,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$wYhh2LpGi1BdRNHVHzJcSfzpIoWe4bNWyoWPM9gw6Bg"},
{"content":{"body":"yeah, we're not in control of the ReadableStream implementations","msgtype":"m.text"},"ts":1679507902268,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$qErhjgKMSoL6YDqcY2Cdhw3pwbgPvxZ-G-vMhzmS0m0"},
{"content":{"body":"ok I think I see the rub you were pointing out","msgtype":"m.text"},"ts":1679507927300,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$taF6TL-7OOPDqvJY_QlClE7EfRFMVEYm3qkTb3RQT_Y"},
{"content":{"body":"a single invocation of `pull` can represent multiple different contextual branches","format":"org.matrix.custom.html","formatted_body":"a single invocation of <code>pull</code> can represent multiple different contextual branches","msgtype":"m.text"},"ts":1679508006090,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$anZ0I9Vu8-npHqXdThYRw54-obC9MKXvWhT3jPw0Cao"},
{"content":{"body":" * a single invocation of `pull` can handle/inherit multiple different contextual branches","format":"org.matrix.custom.html","formatted_body":" * a single invocation of <code>pull</code> can handle/inherit multiple different contextual branches","m.new_content":{"body":"a single invocation of `pull` can handle/inherit multiple different contextual branches","format":"org.matrix.custom.html","formatted_body":"a single invocation of <code>pull</code> can handle/inherit multiple different contextual branches","msgtype":"m.text"},"m.relates_to":{"event_id":"$anZ0I9Vu8-npHqXdThYRw54-obC9MKXvWhT3jPw0Cao","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679508040716,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$NwlEZGQY_xWItu9mhi0g3iYZ46u0OMLxgv6r-ZtAEIc"},
{"content":{"body":"do you think the solution is somehow to merge the branches into one context, or to keep the different branches distinct so `pull` can create the errors with their correct (not merged) contexts?","format":"org.matrix.custom.html","formatted_body":"do you think the solution is somehow to merge the branches into one context, or to keep the different branches distinct so <code>pull</code> can create the errors with their correct (not merged) contexts?","msgtype":"m.text"},"ts":1679508146654,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$PBe6OUvI7_FXOpfoGGbM0wMp_4hKKrqaZ-A0zRusMCs"},
{"content":{"body":"> <@jasnell:matrix.org> That's fair. What I suspect is that for web apis, once AsyncContext is integrated, we'll need a way of identifying in webidl which types are expected to capture and propagate the async context\n\nThis differs from how Yoav ended up implementing a similar feature in Blink. It turned out that the WebIDL layer approach was too slow.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$u07eXgiRQmUPLNc1X4RyRLdAy6MYIWjr-5zwUNocJ10?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jasnell:matrix.org\">@jasnell:matrix.org</a><br>That&#39;s fair. What I suspect is that for web apis, once AsyncContext is integrated, we&#39;ll need a way of identifying in webidl which types are expected to capture and propagate the async context</blockquote></mx-reply>This differs from how Yoav ended up implementing a similar feature in Blink. It turned out that the WebIDL layer approach was too slow.","m.relates_to":{"m.in_reply_to":{"event_id":"$u07eXgiRQmUPLNc1X4RyRLdAy6MYIWjr-5zwUNocJ10"}},"msgtype":"m.text"},"ts":1679508197428,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EVovayXPxuTwbosSmhjVP9fQNbT_Jh0qp7vvsgcC4C4"},
{"content":{"body":"instead, it's more like, you propagate the context when queueing a task","msgtype":"m.text"},"ts":1679508212329,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EFAqs0NgdJQwY7uGfnt6hQm5fwgZi6UHo9lh4K3xrgw"},
{"content":{"body":"so in this case it's a bit complicated. \"when queing a task\" ... for a readable stream, a pending read can be viewed as a queued task","msgtype":"m.text"},"ts":1679508545258,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$6zfKaw6w2Rt716rJWu6p0-ZuSUbPeJ7Bch13honeXzg"},
{"content":{"body":"when a read is received, the stream may or may not call pull to ensure that the read can be fulfilled","msgtype":"m.text"},"ts":1679508561620,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$bOgaIEt5pSN2gvU4g4IsOjPw5T2VboGc6JNJmC1Aqkc"},
{"content":{"body":"and a single pull can cause multiple pending reads to be fulfilled","msgtype":"m.text"},"ts":1679508583362,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$0pA0Iw_AHgPwuYl1xcA6p8Sb1BYKffWq3VBpM19fBO4"},
{"content":{"body":"so, within that pull, should it use the context of the read that immediately triggered it?","msgtype":"m.text"},"ts":1679508604388,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$rQsETMmMdHf8yALcNcHGh68WRpByo1bl1nCkzzUtLu0"},
{"content":{"body":"or should it use the context that was current when the stream was created?","msgtype":"m.text"},"ts":1679508619640,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$KzL8i2m6QtjSRL_9lHltEm-fpjiaDY3TlsC99v9pMEk"},
{"content":{"body":"and if that pull causes an error, causing all subsequent reads to reject with unhandled rejections, should the unhandled rejection events be called from the async context for the individual read or the context that was active when the pull errored","msgtype":"m.text"},"ts":1679508683871,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$itQP6RLBy7vBZsBiAz2TKcDb26JdfE-Id_-gyIk7ZvM"},
{"content":{"body":"is there some mechanism currently for the `pull` callback to tell why an error occurred, in a way that points back to one particular read?","format":"org.matrix.custom.html","formatted_body":"is there some mechanism currently for the <code>pull</code> callback to tell why an error occurred, in a way that points back to one particular read?","msgtype":"m.text"},"ts":1679508795375,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$RZTIWvQd4XFQ6KIHBOwpE9a4ONh3qI4YwGx6RbSoTfY"},
{"content":{"body":"no","msgtype":"m.text"},"ts":1679508808021,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$zOfuA9SITLHKuapUJwpSbiPNTQTVop6jyi2SId6oQao"},
{"content":{"body":"whether it throws or calls `controller.error(...)` the effect is the same, the stream is put into an errored state such that all pending and future reads are rejected with that reason","format":"org.matrix.custom.html","formatted_body":"whether it throws or calls <code>controller.error(...)</code> the effect is the same, the stream is put into an errored state such that all pending and future reads are rejected with that reason","msgtype":"m.text"},"ts":1679508847364,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$-83_r6lHERXr_icH15PanqGipgnvm-Y1Fjpcnt0w0BY"},
{"content":{"body":"all pending reads would be rejected within the same async context and not the frame that was current when the read was scheduled","msgtype":"m.text"},"ts":1679508887568,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$FyEiHIZnOZnXDZZQPhinNYvgayEOybv_gvTNn8p_dqI"},
{"content":{"body":"so the unhandledrejection handler would see that context and the context that scheduled the read in the first place would be lost","msgtype":"m.text"},"ts":1679508917233,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$1NI0ePBfgIDFRzP-zuUkkmqFJ59NF_7fzxQWjTYGPsI"},
{"content":{"body":"Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body;\nconst read = als.run(321, () => reader.read();\nawait Promise.all([\n  als.run('???', async () => await read),\n  als.run('???', async () => await read)\n]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body;\nconst read = als.run(321, () =&gt; reader.read();\nawait Promise.all([\n  als.run('???', async () =&gt; await read),\n  als.run('???', async () =&gt; await read)\n]);\n</code></pre>\n","msgtype":"m.text"},"ts":1679509037474,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$ZpzncTXOW3qVpBud0_S6XVvb8LXLZZydfvrSe_QCJxg"},
{"content":{"body":" * Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body;\nconst read = als.run(321, () => reader.read();\nawait Promise.all([\n  als.run('???', async () => await read),\n  als.run('!!!', async () => await read)\n]);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body;\nconst read = als.run(321, () =&gt; reader.read();\nawait Promise.all([\n  als.run('???', async () =&gt; await read),\n  als.run('!!!', async () =&gt; await read)\n]);\n</code></pre>\n","m.new_content":{"body":"Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body;\nconst read = als.run(321, () => reader.read();\nawait Promise.all([\n  als.run('???', async () => await read),\n  als.run('!!!', async () => await read)\n]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body;\nconst read = als.run(321, () =&gt; reader.read();\nawait Promise.all([\n  als.run('???', async () =&gt; await read),\n  als.run('!!!', async () =&gt; await read)\n]);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZpzncTXOW3qVpBud0_S6XVvb8LXLZZydfvrSe_QCJxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509063396,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$YDW_58irGh4Jy4uDi7xR1LtCvPXFhEjGA2M8xyjwLtM"},
{"content":{"body":"sorry that's a bit off... one sec","msgtype":"m.text"},"ts":1679509105537,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$2zA1wJIb99ZBdxrLoeoNFsL8CLjl2M5gkF-tIr8gr4Q"},
{"content":{"body":"I'm not sure this works as you'd hope: `const reader = als.run('xyz', () => response.body)`","format":"org.matrix.custom.html","formatted_body":"I'm not sure this works as you'd hope: <code>const reader = als.run('xyz', () =&gt; response.body)</code>","msgtype":"m.text"},"ts":1679509106671,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$mhUYHvE8KEo0KvBz22T94hZ7jvJtorCTOH8_GS2EVXY"},
{"content":{"body":" * Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body;\nconst read1 = als.run(321, () => reader.read();\nconst read2 = als.run(567, () => reader.read();\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body;\nconst read1 = als.run(321, () =&gt; reader.read();\nconst read2 = als.run(567, () =&gt; reader.read();\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","m.new_content":{"body":"Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body;\nconst read1 = als.run(321, () => reader.read();\nconst read2 = als.run(567, () => reader.read();\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body;\nconst read1 = als.run(321, () =&gt; reader.read();\nconst read2 = als.run(567, () =&gt; reader.read();\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZpzncTXOW3qVpBud0_S6XVvb8LXLZZydfvrSe_QCJxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509137248,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$LPITUss-s5tnGGYxbeeBS72UPlFgsSuA-nXRsNK4xcc"},
{"content":{"body":"that's thrown in just to make it more complex. I know it wouldn't do anything :-)","msgtype":"m.text"},"ts":1679509163332,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$9sr43saJs2zxUozL0eZLjdMmxASXfx_aqWxu_1Fhz4M"},
{"content":{"body":" * I'm not sure this works as you'd hope: `const reader = als.run('xyz', () => response.body)`, since `reader.read` won't automatically restore the `xyz` context value when called","format":"org.matrix.custom.html","formatted_body":" * I'm not sure this works as you'd hope: <code>const reader = als.run('xyz', () =&gt; response.body)</code>, since <code>reader.read</code> won't automatically restore the <code>xyz</code> context value when called","m.new_content":{"body":"I'm not sure this works as you'd hope: `const reader = als.run('xyz', () => response.body)`, since `reader.read` won't automatically restore the `xyz` context value when called","format":"org.matrix.custom.html","formatted_body":"I'm not sure this works as you'd hope: <code>const reader = als.run('xyz', () =&gt; response.body)</code>, since <code>reader.read</code> won't automatically restore the <code>xyz</code> context value when called","msgtype":"m.text"},"m.relates_to":{"event_id":"$mhUYHvE8KEo0KvBz22T94hZ7jvJtorCTOH8_GS2EVXY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509166871,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$LZ5L-YQ1w9azrIHwj3sals8t-slMqOiLPoth7pdwbf4"},
{"content":{"body":" * Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body);\nconst read1 = als.run(321, () => reader.read());\nconst read2 = als.run(567, () => reader.read());\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body);\nconst read1 = als.run(321, () =&gt; reader.read());\nconst read2 = als.run(567, () =&gt; reader.read());\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","m.new_content":{"body":"Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable);\nconst reader = als.run('xyz', () => response.body);\nconst read1 = als.run(321, () => reader.read());\nconst read2 = als.run(567, () => reader.read());\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable);\nconst reader = als.run('xyz', () =&gt; response.body);\nconst read1 = als.run(321, () =&gt; reader.read());\nconst read2 = als.run(567, () =&gt; reader.read());\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZpzncTXOW3qVpBud0_S6XVvb8LXLZZydfvrSe_QCJxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509181583,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$y-djA65DfD1rDGzc86QWE9HWYKbATfLymKlLKbKUWlg"},
{"content":{"body":" * Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable));\nconst reader = als.run('xyz', () => response.body);\nconst read1 = als.run(321, () => reader.read());\nconst read2 = als.run(567, () => reader.read());\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":" * <p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable));\nconst reader = als.run('xyz', () =&gt; response.body);\nconst read1 = als.run(321, () =&gt; reader.read());\nconst read2 = als.run(567, () =&gt; reader.read());\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","m.new_content":{"body":"Here's another example:\n\n```\nconst als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () => new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () => new Response(readable));\nconst reader = als.run('xyz', () => response.body);\nconst read1 = als.run(321, () => reader.read());\nconst read2 = als.run(567, () => reader.read());\nawait Promise.all([\n  als.run('???', async () => await read1),\n  als.run('!!!', async () => await read2)\n]);\n```","format":"org.matrix.custom.html","formatted_body":"<p>Here's another example:</p>\n<pre><code>const als = new AsyncLocalStorage();\n\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  pull(c) {\n    c.error(`boom ${als.getStore()}`);\n  }\n}, { highWaterMark: 0 }));\nconst response = als.run('abc', () =&gt; new Response(readable));\nconst reader = als.run('xyz', () =&gt; response.body);\nconst read1 = als.run(321, () =&gt; reader.read());\nconst read2 = als.run(567, () =&gt; reader.read());\nawait Promise.all([\n  als.run('???', async () =&gt; await read1),\n  als.run('!!!', async () =&gt; await read2)\n]);\n</code></pre>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$ZpzncTXOW3qVpBud0_S6XVvb8LXLZZydfvrSe_QCJxg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509192217,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$hzvlBVTkPIMvZLuEnIGbQtaG_h6-bg5s-70cN5WnvmM"},
{"content":{"body":"would it be acceptable for the unhandledrejection error to report a set of contexts rather than just one? or is that a nonstarter?","msgtype":"m.text"},"ts":1679509430828,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$hwzC_CgmFGWPN7_obB6pQaE7FTm84aVlWGO4FIiinOc"},
{"content":{"body":"it's called once per each unhandled promise rejection, there's only one context associated with each","msgtype":"m.text"},"ts":1679509472723,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$ZCmOPV2xAJieFH5iSwhGM-LwHLDk3G5iA44KBKPFHVI"},
{"content":{"body":"I have been thinking we need to extend AsyncContext itself to handle a set of context","msgtype":"m.text"},"ts":1679509475183,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$B0f7k3Xb3DRw0VvgqwqzDSeDKiyOg7E04gIGgBvqJNQ"},
{"content":{"body":"reporting a set would not make sense there","msgtype":"m.text"},"ts":1679509479986,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$FoVie9Da2q6iAeb6Kg-KyhNTl2xha_s9cN57ptS778w"},
{"content":{"body":"how does `pull` know which `read` was to blame, and so which context to report?","format":"org.matrix.custom.html","formatted_body":"how does <code>pull</code> know which <code>read</code> was to blame, and so which context to report?","msgtype":"m.text"},"ts":1679509505777,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$z0yeyc63k8EvVbEVJaxWuW46DP0_x4ewhxZN7W-ey8w"},
{"content":{"body":"so that the context user can gather the values associated with both the registration and the trigger paths","msgtype":"m.text"},"ts":1679509560151,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$_i8OZR3_SdZHoRC2uYdqm5l0KQzpvMebIr9HLHGXykM"},
{"content":{"body":"it doesn't. Currently pull would be called within the async context of whatever read triggered it. It could also be called following the completion of the start algorithm microtask (the async context where the stream is constructed).","msgtype":"m.text"},"ts":1679509583061,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Y2SOpfYCFd3HzZs4apbxrzPXPWvCuL7O4y_5scEncmg"},
{"content":{"body":"we can break this down to a few specific questions:\n\n1. Because the various \"algorithms\" associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created","format":"org.matrix.custom.html","formatted_body":"<p>we can break this down to a few specific questions:</p>\n<ol>\n<li>Because the various &quot;algorithms&quot; associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created</li>\n</ol>\n","msgtype":"m.text"},"ts":1679509693023,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Bi2tFizYJBnCl-x9KU6jcX5snJoAY1FbQC_BXndu4PI"},
{"content":{"body":"2. If a read promise rejects and is unhandled, should the unhandledrejection error be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled","format":"org.matrix.custom.html","formatted_body":"<ol start=\"2\">\n<li>If a read promise rejects and is unhandled, should the unhandledrejection error be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled</li>\n</ol>\n","msgtype":"m.text"},"ts":1679509777205,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$S9BzizxCh9FtwKt9n5RANLutKDjDcwJF9lWRoF4PihM"},
{"content":{"body":" * 2. If a read promise rejects and is unhandled, should the unhandledrejection event be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled","format":"org.matrix.custom.html","formatted_body":" * <ol start=\"2\">\n<li>If a read promise rejects and is unhandled, should the unhandledrejection event be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled</li>\n</ol>\n","m.new_content":{"body":"2. If a read promise rejects and is unhandled, should the unhandledrejection event be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled","format":"org.matrix.custom.html","formatted_body":"<ol start=\"2\">\n<li>If a read promise rejects and is unhandled, should the unhandledrejection event be called in the async context in which the read promise was rejected (which is likely different than the context that scheduled the read), or the async context that was current when the read was scheduled</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$S9BzizxCh9FtwKt9n5RANLutKDjDcwJF9lWRoF4PihM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509808182,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DE7TbrBDwGqtd2Ct_hkaXkOZWTcr8Qu_Z7QEBFMSgCw"},
{"content":{"body":" * we can break this down to a few specific questions:\n\n1. Because the various \"algorithms\" associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created or should they propagate the context that triggered the algorithm to be called","format":"org.matrix.custom.html","formatted_body":" * <p>we can break this down to a few specific questions:</p>\n<ol>\n<li>Because the various &quot;algorithms&quot; associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created or should they propagate the context that triggered the algorithm to be called</li>\n</ol>\n","m.new_content":{"body":"we can break this down to a few specific questions:\n\n1. Because the various \"algorithms\" associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created or should they propagate the context that triggered the algorithm to be called","format":"org.matrix.custom.html","formatted_body":"<p>we can break this down to a few specific questions:</p>\n<ol>\n<li>Because the various &quot;algorithms&quot; associated with a stream are considered part of its internal implementation (e.g. start, pull, close), should those always be executed in the async context frame in which the stream itself was created or should they propagate the context that triggered the algorithm to be called</li>\n</ol>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$Bi2tFizYJBnCl-x9KU6jcX5snJoAY1FbQC_BXndu4PI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679509836177,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$Bv9xPlESQECTzCuIhwfwRJPYtlpJPB3nbRyQEYC8vEk"},
{"content":{"body":"Mark Miller brought up a point a while back (when `AsyncContext` was last proposed), about what to do with an `AsyncContext.wrap`-bound function that gets called in a context where some `AsyncContext` instance that was previously bound with one value happens to have a different value in the new calling context","format":"org.matrix.custom.html","formatted_body":"Mark Miller brought up a point a while back (when <code>AsyncContext</code> was last proposed), about what to do with an <code>AsyncContext.wrap</code>-bound function that gets called in a context where some <code>AsyncContext</code> instance that was previously bound with one value happens to have a different value in the new calling context","msgtype":"m.text"},"ts":1679510051291,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$DzdVx0ravOzpCupjB_zxOUhWZTGrMgEOhtOIbmXkNj4"},
{"content":{"body":"Keeping in mind also that people can do silly things like..\n\n```\nlet controller;\nconst readable = als.run(123, () => new ReadableStream({\n  start(c) { controller = c; }\n}));\nconst read = als.run('abc', () => readable.getReader().read());\nals.run(321, () => controller.error('boom'));\n```","format":"org.matrix.custom.html","formatted_body":"<p>Keeping in mind also that people can do silly things like..</p>\n<pre><code>let controller;\nconst readable = als.run(123, () =&gt; new ReadableStream({\n  start(c) { controller = c; }\n}));\nconst read = als.run('abc', () =&gt; readable.getReader().read());\nals.run(321, () =&gt; controller.error('boom'));\n</code></pre>\n","msgtype":"m.text"},"ts":1679510073070,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$h1RnDpcOIvqpufxgQ4ktDoL0pe2YXfOsqcOo8AVbQYw"},
{"content":{"body":"Are you expecting the context to be propagated somehow by the assignment `controller = c`? Whatever context is in effect in `start` is pretty clearly lost by this code, right?","format":"org.matrix.custom.html","formatted_body":"Are you expecting the context to be propagated somehow by the assignment <code>controller = c</code>? Whatever context is in effect in <code>start</code> is pretty clearly lost by this code, right?","msgtype":"m.text"},"ts":1679510175616,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$xqledmEuCscHIUzTx2BiFD-jcU8Set_M23dE6LVDzg0"},
{"content":{"body":"I don't expect `controller.error` to have access to anything beyond the `321` context, there","format":"org.matrix.custom.html","formatted_body":"I don't expect <code>controller.error</code> to have access to anything beyond the <code>321</code> context, there","msgtype":"m.text"},"ts":1679510194050,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$6vi5BQdQUcse5ongj8HJif9DfHcBa_CtJsSMhkb7jRo"},
{"content":{"body":"nope, it's definitely lost. so if we always called the algorithm in the context captured when the readablestream was created, this would escape that context and would cause the reads to be rejected in the context where the value is 321","msgtype":"m.text"},"ts":1679510233387,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$L99EyTxH0DispxADtZvobN2YzuhtrqroiAfDP88ujPc"},
{"content":{"body":" * Mark Miller brought up a point a while back (when `AsyncContext` was last proposed), about what to do with an `AsyncContext.wrap`-bound function that gets called in a context where some `AsyncContext` instance that was previously bound with one value (for some `AsyncContext`) happens to have a different value in the new calling context","format":"org.matrix.custom.html","formatted_body":" * Mark Miller brought up a point a while back (when <code>AsyncContext</code> was last proposed), about what to do with an <code>AsyncContext.wrap</code>-bound function that gets called in a context where some <code>AsyncContext</code> instance that was previously bound with one value (for some <code>AsyncContext</code>) happens to have a different value in the new calling context","m.new_content":{"body":"Mark Miller brought up a point a while back (when `AsyncContext` was last proposed), about what to do with an `AsyncContext.wrap`-bound function that gets called in a context where some `AsyncContext` instance that was previously bound with one value (for some `AsyncContext`) happens to have a different value in the new calling context","format":"org.matrix.custom.html","formatted_body":"Mark Miller brought up a point a while back (when <code>AsyncContext</code> was last proposed), about what to do with an <code>AsyncContext.wrap</code>-bound function that gets called in a context where some <code>AsyncContext</code> instance that was previously bound with one value (for some <code>AsyncContext</code>) happens to have a different value in the new calling context","msgtype":"m.text"},"m.relates_to":{"event_id":"$DzdVx0ravOzpCupjB_zxOUhWZTGrMgEOhtOIbmXkNj4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679510237995,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$WJg422tLREESPREtnNkLjOMgMBOpFEpCE-_kKxHyDcA"},
{"content":{"body":"but what should be the context for the unhandledrejection associated with the read","msgtype":"m.text"},"ts":1679510266305,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$wqZ8akHdu_RMvnoUb932esaHSx59GCozSRiEVm5d7KU"},
{"content":{"body":"'abc' or '321'?","msgtype":"m.text"},"ts":1679510271361,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$1WiVyvmHaR9B3UCm1fB0EUQ0gV91PMh0Qzbt6bQ5ljE"},
{"content":{"body":"I can imagine a `Promise` implementation that has a chance of preserving `abc` (in this code) in the final context associated with the rejected `read` promise","format":"org.matrix.custom.html","formatted_body":"I can imagine a <code>Promise</code> implementation that has a chance of preserving <code>abc</code> (in this code) in the final context associated with the rejected <code>read</code> promise","msgtype":"m.text"},"ts":1679510379698,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$mQWxqdkskmfBgKXlfr_wXN2CXwOzra932Mx2IN6UPpM"},
{"content":{"body":"but that's assuming/imagining `Promise` objects capture context at creation time (when `readable.getReader().read()` is called), which is yet to be decided or implemented","format":"org.matrix.custom.html","formatted_body":"but that's assuming/imagining <code>Promise</code> objects capture context at creation time (when <code>readable.getReader().read()</code> is called), which is yet to be decided or implemented","msgtype":"m.text"},"ts":1679510509485,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$Ftb7mduC1kFm1s8w0t-cs_yjnOc7TV5Xq-4cZGrZ-PM"},
{"content":{"body":"Why would a promise ever need to capture the creation time? I only see it the resolution and registration time as being useful","msgtype":"m.text"},"ts":1679510569397,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$g_EBdbCR19zt3N2egmPH2LP_r4EqUCn1Xb1HEEP9VkM"},
{"content":{"body":"for unhandledrejection error attribution, mostly, I think?","msgtype":"m.text"},"ts":1679510586261,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$DsMLBj_vVmNIh8KoO_hjf2lmOxz1_xoii4uzukJrk04"},
{"content":{"body":" * Why would a promise ever need to capture the creation time? I only see the resolution and registration times as being useful","m.new_content":{"body":"Why would a promise ever need to capture the creation time? I only see the resolution and registration times as being useful","msgtype":"m.text"},"m.relates_to":{"event_id":"$g_EBdbCR19zt3N2egmPH2LP_r4EqUCn1Xb1HEEP9VkM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679510587134,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$HGCJBsqL__58nDpUPk0NlUnTMfkNt58smtlj0voZWiY"},
{"content":{"body":"we've previously decided that, for promises, the context would be captured at the moment the continuation was attached. So either when then is called or we await","msgtype":"m.text"},"ts":1679510603932,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$C6l8ruY3d65PlzP9H7S6PVYrGlggITgDFr6bYxWD4-w"},
{"content":{"body":"that's the rejection time that's useful, not the promise creation time","msgtype":"m.text"},"ts":1679510616092,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$6Rp_u_OaDjGCuseUt4f5s2-dfrlYHJSHbcPVpnuW2Mg"},
{"content":{"body":" * for unhandledrejection error attribution/context, mostly, I think?","m.new_content":{"body":"for unhandledrejection error attribution/context, mostly, I think?","msgtype":"m.text"},"m.relates_to":{"event_id":"$DsMLBj_vVmNIh8KoO_hjf2lmOxz1_xoii4uzukJrk04","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679510622871,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$T8TCaOHOc0WawgL-BPJ_cx4uX7whSiXqtOKKtHX8xuw"},
{"content":{"body":"and that in the deferred promise case, we'd propagate the context that is current when either resolve() or reject() is called","msgtype":"m.text"},"ts":1679510639203,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$B_4zHNBwyNPwlbw-XUEm2MQ0OkXGzlUBgRbvXjZKGnU"},
{"content":{"body":"I'm fine with that","msgtype":"m.text"},"ts":1679510654610,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$1zZx6PEadI2Eik384cCHrnj1lF2kWv_QLxb1ey3DF2Q"},
{"content":{"body":"but in the ReadableStream case, it's *most* useful to treat `read()` itself as a scheduled task","format":"org.matrix.custom.html","formatted_body":"but in the ReadableStream case, it's <em>most</em> useful to treat <code>read()</code> itself as a scheduled task","msgtype":"m.text"},"ts":1679510665097,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$tg6np6A7b5ebwYAtQBBat1DomJpXkbZaGA2RQF5yKnE"},
{"content":{"body":"so it's the context when `reject()` is called that matters?","format":"org.matrix.custom.html","formatted_body":"so it's the context when <code>reject()</code> is called that matters?","msgtype":"m.text"},"ts":1679510666157,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$na3e8ilM43qaAAj6in7r01kcmCZnLxsUCY9DmgyFNgo"},
{"content":{"body":" * so it's the context when `reject()` is called that matters (determines the context reported by the unhandledrejection error)?","format":"org.matrix.custom.html","formatted_body":" * so it's the context when <code>reject()</code> is called that matters (determines the context reported by the unhandledrejection error)?","m.new_content":{"body":"so it's the context when `reject()` is called that matters (determines the context reported by the unhandledrejection error)?","format":"org.matrix.custom.html","formatted_body":"so it's the context when <code>reject()</code> is called that matters (determines the context reported by the unhandledrejection error)?","msgtype":"m.text"},"m.relates_to":{"event_id":"$na3e8ilM43qaAAj6in7r01kcmCZnLxsUCY9DmgyFNgo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1679510687263,"senderName":"Ben Newman (Apollo, @benjamn on GH)","senderId":"@benjamn:matrix.org","id":"$RBUe9zAf4ndnVgt7CLTYx8mleOLIZjbA77UV2MNWH00"},
{"content":{"body":"since the read promise itself might be rejected from a completely unrelated context","msgtype":"m.text"},"ts":1679510691600,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$xV8xo7CXCCcKa_8_ep7ClT9CauhlNU4Tkv0-Ot2N4jQ"},
{"content":{"body":"wouldn't the onus be on the `read()` implementation to reject the promise from the context in which `read()` was called if the rejection is related to the read implementation.","format":"org.matrix.custom.html","formatted_body":"wouldn't the onus be on the <code>read()</code> implementation to reject the promise from the context in which <code>read()</code> was called if the rejection is related to the read implementation.","msgtype":"m.text"},"ts":1679510787906,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$XKi0jlHvpeiEZDm4zOEnfobkdoLuvRkK8xbNucr5LS8"},
{"content":{"body":"yeah, it's not specific to the promise itself","msgtype":"m.text"},"ts":1679510825137,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$DLFRBReBlFuMOlvDaYltreFZpXfHU9BDM-Bi1EAYFDc"},
{"content":{"body":"should the read operation itself capture the current context and make sure that whenever that queued promise is resolved or rejected the captured context is entered","msgtype":"m.text"},"ts":1679510851717,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$eTEn60agbHtfwbwCle92Hev3vMtonldwvYTMLJi379o"},
{"content":{"body":"or should it always be resolved in the context the stream was created... or should it always be resolved in the context that happens to be current whenever start/pull or whatever mechanism internal to the stream causes the promise to be rejected/resolved","msgtype":"m.text"},"ts":1679510920702,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$9ywc-uH-CiuD7NCMhky8rlZlmUh6SqKAUix2VuX4UBQ"},
{"content":{"body":"Here is a question: if the user aborts, which causes the read to be rejected, what context matters? the context in which read was started, or the one in which the operation was aborted. I believe the latter is the meaningful one","msgtype":"m.text"},"ts":1679510928618,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$4wYv0-wrcE8r3j26kRbxs82eBi6bXcPNXbZvNWt7m_I"},
{"content":{"body":"I agree. but in the unhandledrejection handler for an individual read, does the same answer apply?","msgtype":"m.text"},"ts":1679510995468,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$SjgimlCsI414RvQcBUcrCJTuIUKDf6NIX56keZyYvA4"}
]