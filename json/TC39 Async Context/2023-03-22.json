[
{"content":{"body":"I had some quick chats today at TC39 with dminor and bakkot, everyone seemed cautiously positive though a little uncertain about use cases. I am optimistic about the presentation but we might consider adding bonus slides that go in more depth there (eg just taking what was in legendecas’s webperf wg slides)","msgtype":"m.text"},"ts":1679445053389,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Yxvfy8w3YSGiIc_DdrS6kGxHpvJPwjInSAG_covkMpI"},
{"content":{"body":"I didn’t get the feeling that the complexity around what things are wrapped was considered a very bad issue for either (just something to work out) but maybe I misunderstood them","msgtype":"m.text"},"ts":1679445110503,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rQZ4SGbPdgLagMyfPgeA9AtEG-GQaEK081ULM0xmdmE"},
{"content":{"body":"Good luck this week on proposing for Stage 2!","msgtype":"m.text"},"ts":1679445122818,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AdhWFPmEgwRAIoSxF99ccKYIu-267vz_PPzYGjLEoVE"},
{"content":{"body":"So, here's a question. fetch has the `Response` object. This can be created using a `ReadableStream` object, which uses a number of internal promises to manage state. In workerd, we have a method that handles received requests and can return a `Response` object specifying the response to an http request. So, imagine a case like:\n\n```\nconst als = new AsyncLocalStorage(); // or AsyncContext\nexport default {\n  async fetch(req) {\n    const readable = als.run('abc', () => new ReadableStream({\n      pull(c) {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }\n    }));\n    return als.run(123, () => new Response(readable));\n  }\n}\n```\n\nThe actual pipe from the readable happens by the code that calls the `fetch` function handler here, which is running in the root async context where `als` store will be `undefined`.\n\nWhat value would you expect `als.getStore()` to return when the error is constructed?","format":"org.matrix.custom.html","formatted_body":"<p>So, here's a question. fetch has the <code>Response</code> object. This can be created using a <code>ReadableStream</code> object, which uses a number of internal promises to manage state. In workerd, we have a method that handles received requests and can return a <code>Response</code> object specifying the response to an http request. So, imagine a case like:</p>\n<pre><code>const als = new AsyncLocalStorage(); // or AsyncContext\nexport default {\n  async fetch(req) {\n    const readable = als.run('abc', () =&gt; new ReadableStream({\n      pull(c) {\n        c.error(new Error(`boom ${als.getStore()}`));\n      }\n    }));\n    return als.run(123, () =&gt; new Response(readable));\n  }\n}\n</code></pre>\n<p>The actual pipe from the readable happens by the code that calls the <code>fetch</code> function handler here, which is running in the root async context where <code>als</code> store will be <code>undefined</code>.</p>\n<p>What value would you expect <code>als.getStore()</code> to return when the error is constructed?</p>\n","msgtype":"m.text"},"ts":1679498186038,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$nQAhTeyRKcK0qB6P707zCamdJ_dA9CkWMCRsdnEidok"},
{"content":{"body":"Keep in mind that the pull function can be called at different times depending on the value of the `highWaterMark` configured for the readablestream","format":"org.matrix.custom.html","formatted_body":"Keep in mind that the pull function can be called at different times depending on the value of the <code>highWaterMark</code> configured for the readablestream","msgtype":"m.text"},"ts":1679498257762,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$UL02gc_alRTatl78cGHpchLwj1OwM-euX3oHWZwC8Ro"},
{"content":{"body":"specifically, pull might be called when the ReadableStream is created, and any time after while it is being read","msgtype":"m.text"},"ts":1679498598220,"senderName":"James M Snell","senderId":"@jasnell:matrix.org","id":"$xB-zJT3Ozw-gKGyyeBEuCuvdZbCAfxeiLMcXDeeyuXc"},
{"content":{"body":"I don't have a good answer. Just from the use case I recognize that it must be one of the two (and not `undefined` just because the `Response` object is leaked out of the fetch), but I don't have a good idea of which one of these contexts is the \"registration\" context","format":"org.matrix.custom.html","formatted_body":"I don't have a good answer. Just from the use case I recognize that it must be one of the two (and not <code>undefined</code> just because the <code>Response</code> object is leaked out of the fetch), but I don't have a good idea of which one of these contexts is the &quot;registration&quot; context","msgtype":"m.text"},"ts":1679500335163,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$S7IWXre8FNFlTbas966Qbs-7OktIL5uL_qGe9-_3MWs"},
{"content":{"body":"In my experience, the contexts are the same. I create the readable and the response in the same overall context, so the distinction doesn't matter","msgtype":"m.text"},"ts":1679500439839,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$MjYLOfQmdeGFX5V4Eesht0qdblGHZlnvdIPcGdOExR4"}
]