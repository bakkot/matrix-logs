[
{"content":{"body":"If it's limited to scoped `using` and not general mutability, I think you can polyfill on top of `AsyncContext` and only instrument `await` and `yield` statements.","format":"org.matrix.custom.html","formatted_body":"If it's limited to scoped <code>using</code> and not general mutability, I think you can polyfill on top of <code>AsyncContext</code> and only instrument <code>await</code> and <code>yield</code> statements.","m.mentions":{},"msgtype":"m.text"},"ts":1731545289380,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5FFjaRYOlqrM_TGdG-s2UhuAAeaZD5zGySU7REbq2GA"},
{"content":{"body":"I know we talked about this before and I said otherwise, but I can't remember why I said it wasn't possible before.","m.mentions":{},"msgtype":"m.text"},"ts":1731545373024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WNX6R9dS-7uRHHYe3MvJ0ThVAIpbdoTvGQb21PoaOTA"},
{"content":{"body":"But I think that's the problem - it can't be limited to scoped `using` because of composability: you need to be able to write\n```javascript\nfunction enterSpan(id) {\n  const span = new Span({id, parent: currentSpan.get()});\n  span[Symbol.dispose] = currentSpan.enter(span)[Symbol.dispose];\n  log('new span', currentSpan.get());\n  return span;\n}\n```\nThat function gives no syntactic indication that it needs any extra transpilation... in fact, thinking about it further, it violates the principle that functions you call shouldn't be able to change your context.","format":"org.matrix.custom.html","formatted_body":"<p>But I think that's the problem - it can't be limited to scoped <code>using</code> because of composability: you need to be able to write</p>\n<pre><code class=\"language-javascript\">function enterSpan(id) {\n  const span = new Span({id, parent: currentSpan.get()});\n  span[Symbol.dispose] = currentSpan.enter(span)[Symbol.dispose];\n  log('new span', currentSpan.get());\n  return span;\n}\n</code></pre>\n<p>That function gives no syntactic indication that it needs any extra transpilation... in fact, thinking about it further, it violates the principle that functions you call shouldn't be able to change your context.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1731557891411,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h0_UTBu_6Elms7SP15kP3kGx_7D3dz3Nzg0sWaVClt0"},
{"content":{"body":"That example wouldn't be possible, but using `using span = enterSpan(…)` could be","format":"org.matrix.custom.html","formatted_body":"That example wouldn't be possible, but using <code>using span = enterSpan(…)</code> could be","m.mentions":{},"msgtype":"m.text"},"ts":1731558223628,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5dRj2yFit3G5DyDCY24ueWaG5FD9Uhbfzw_BDnI0glg"},
{"content":{"body":"how would you define `enterSpan` in that case?","format":"org.matrix.custom.html","formatted_body":"how would you define <code>enterSpan</code> in that case?","m.mentions":{},"msgtype":"m.text"},"ts":1731558244462,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yiAV-UJEqBZa0Kka2fKkYfuxcaC7PvoqSnf-SdqEEpE"}
]