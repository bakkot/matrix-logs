[
{"content":{"body":"I was thinking that the unhandled rejection context here is `\"foo\"`, not `\"baz\"`:\n```js\nasyncVar.run(\"foo\", main);\n\nasync function main() {\n\tawait asyncVar.run(\"bar\", async () => {\n\t\tawait asyncVar.run(\"baz\", async () => {\n\t\t\tthrow new Error();\n\t\t});\n\t});\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>I was thinking that the unhandled rejection context here is <code>\"foo\"</code>, not <code>\"baz\"</code>:</p>\n<pre><code class=\"language-js\">asyncVar.run(\"foo\", main);\n\nasync function main() {\n\tawait asyncVar.run(\"bar\", async () =&gt; {\n\t\tawait asyncVar.run(\"baz\", async () =&gt; {\n\t\t\tthrow new Error();\n\t\t});\n\t});\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1719839472632,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$-U5pW_mwO2UMMP1Vk6MyBngnvYdRIqW2mImf9P0EW7c"},
{"content":{"body":"so shouldn't it be the same for sync errors?","m.mentions":{},"msgtype":"m.text"},"ts":1719839485492,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YgrG3oIZyR2lNxI06x1Y3mp4fX58uz_zhgq0hl3Qz3s"},
{"content":{"body":" * so shouldn't it be the same for sync unhandled errors?","m.mentions":{},"m.new_content":{"body":"so shouldn't it be the same for sync unhandled errors?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$YgrG3oIZyR2lNxI06x1Y3mp4fX58uz_zhgq0hl3Qz3s","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719839490581,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1ZWcRD_ilkZoYR-RBTETe7ukTcR5vDtONh6-GvvRW3E"},
{"content":{"body":"I don't understand what you're getting at; the async/await case is different since it corresponds to a bunch of nested try/catch/rethrow patterns.","m.mentions":{},"msgtype":"m.text"},"ts":1719840540985,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$G5EfVaC1XLBqkfF1xcEY57jWqk6UAxR6VmxS69ih66s"},
{"content":{"body":"will that be obvious to developers?","m.mentions":{},"msgtype":"m.text"},"ts":1719840651055,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$A-tM9nLg68ht3keXy_TgZBYfN6n-CvrmKUNjbXWoXAI"},
{"content":{"body":"no, developers will expect that the inner place where the error inside the async/await is the source. But making it \"also broken\" for sync exceptions won't fix that expectation.","m.mentions":{},"msgtype":"m.text"},"ts":1719840688305,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9_hZm9hYUv-elAjPwbUicdkIJ356i6F0hBkXDu8kkyQ"},
{"content":{"body":"Are we talking about the callback's context or the one that's hung on the `unhandledrejection`/`error` event?  If the former, I'm arguing it should always be registration context.  Would it be possible for `event.errorSnapshot` to be `\"baz\"` even for the `unhandledrejection` case?","format":"org.matrix.custom.html","formatted_body":"Are we talking about the callback's context or the one that's hung on the <code>unhandledrejection</code>/<code>error</code> event?  If the former, I'm arguing it should always be registration context.  Would it be possible for <code>event.errorSnapshot</code> to be <code>\"baz\"</code> even for the <code>unhandledrejection</code> case?","m.mentions":{},"msgtype":"m.text"},"ts":1719865775348,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$2OWEowMx-8HWEnglQ3kmWP8w9KEJbdsvxEJpA6jRwfE"},
{"content":{"body":"I've come around to the view that one of the advantages of heterogeneous access to causal contexts (which I was arguing against a few weeks ago) is that you can target more clearly exactly which context you get.","m.mentions":{},"msgtype":"m.text"},"ts":1719865957245,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$t9UhJw6pQiSM9yWg0HP3Iajd6kQyXU6oEN7pdHhMhMQ"},
{"content":{"body":"I think we're talking about the supplemental context that exists as a property","m.mentions":{},"msgtype":"m.text"},"ts":1719865958071,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DvQRW4TtK7MlealaPRSZkSfz_4P-0IOuWyqwhWevUek"},
{"content":{"body":"even for that there's a lot of decisions to make!","m.mentions":{},"msgtype":"m.text"},"ts":1719865977470,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$s5KQo0O-o48rNfdy2drqtgbV9yk3OXl_mVrFkVq5WN8"},
{"content":{"body":"yes there are","m.mentions":{},"msgtype":"m.text"},"ts":1719865987685,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$YJHzGCOegfAZV7BNQhdhiPzda5lOAh8sCVRjzgAwdGQ"},
{"content":{"body":"we *could* expose a whole bunch of them, but IMO one of them will probably be good enough to start, and people won't really be so great at choosing between a bunch of them anyway","format":"org.matrix.custom.html","formatted_body":"we <em>could</em> expose a whole bunch of them, but IMO one of them will probably be good enough to start, and people won't really be so great at choosing between a bunch of them anyway","m.mentions":{},"msgtype":"m.text"},"ts":1719866010695,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ttFlFLPd468lxnF9v-3YMRkRPs6pmYEaaF6u7gvPHSc"},
{"content":{"body":"so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is _also_ baz?","format":"org.matrix.custom.html","formatted_body":"so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is <em>also</em> baz?","m.mentions":{},"msgtype":"m.text"},"ts":1719866030641,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$1BIILQ2bISYygUlkWazcKmzh-zxv1HRAv64xm8Nhs-Y"},
{"content":{"body":"right, I don't think we should expose a ton","m.mentions":{},"msgtype":"m.text"},"ts":1719866045267,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$wNai7g_H3AwpeiaZJVhbUMZ0UIJI5PcE7v1axkJxlu0"},
{"content":{"body":"> <@stephenhicks:matrix.org> so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is _also_ baz?\n\nI have a huge amount of trouble understanding how that'd work. BUT we could make it so that error objects have a causal context when they're allocated or thrown for the first time, and maybe that'd solve most of the problem.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$1BIILQ2bISYygUlkWazcKmzh-zxv1HRAv64xm8Nhs-Y?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>so i guess i'm asking, is there a reasonable way to spec it so that the unhandled rejection is <em>also</em> baz?</blockquote></mx-reply>I have a huge amount of trouble understanding how that'd work. BUT we could make it so that error objects have a causal context when they're allocated or thrown for the first time, and maybe that'd solve most of the problem.","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1BIILQ2bISYygUlkWazcKmzh-zxv1HRAv64xm8Nhs-Y"}},"msgtype":"m.text"},"ts":1719866087900,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rH8zFjj0DEn8kjePMivm3hIF7BLyfojBXZhaJKvpmZ0"},
{"content":{"body":"IMO error construction should capture a context snapshot and you can read out of that later by accessing some property on that error.","msgtype":"m.text"},"ts":1719866100275,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$9EWQl1WoHonoFQlkN1T2BkOPXWI--slGnPlar-UNZws"},
{"content":{"body":"jinx","m.mentions":{},"msgtype":"m.text"},"ts":1719866110582,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0nIgbV6PbWJPMdFR1igK08IHIFaZG4fE9Y42wATWXmA"},
{"content":{"body":"Yeah.","msgtype":"m.text"},"ts":1719866125876,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$B-vQ3eV1NyTIGq8e9kjTr7TV2N2OIujWGKIsJjYXc_M"},
{"content":{"body":"(I prefer allocated better than first thrown too)","m.mentions":{},"msgtype":"m.text"},"ts":1719866128026,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mPfy5KAv8RV56gjVM6tfKw5ViE3AXNKnkQ5bn5uxpcU"},
{"content":{"body":"i think that's a good balance","m.mentions":{},"msgtype":"m.text"},"ts":1719866143444,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Wz4lNBpjeN-J_OwAsmbSbnWTUFmAhddr8wM2JfOWr8g"},
{"content":{"body":"First thrown is a bit mysterious but possibly more correct. You need extra logic to detect if it already HAS a context on a rethrow though.","msgtype":"m.text"},"ts":1719866176217,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$Ysl3gQ9OrnZRniinzqkBAbuVy3vqHnDicHAijEreApk"},
{"content":{"body":"first thrown is sad-feeling because it means mutating an object. what if the same thing is thrown twice? anyway that is not very pragmatic knowledge, it's my theorist side talking","m.mentions":{},"msgtype":"m.text"},"ts":1719866212379,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8fXXllBj8Vc_pr-tVinBY8t62rqFTDho2yuyBVE1vEA"},
{"content":{"body":" * first thrown is sad-feeling because it means mutating an object. what if the same thing is thrown twice? anyway that is not very pragmatic motivation, it's my theorist side talking","m.mentions":{},"m.new_content":{"body":"first thrown is sad-feeling because it means mutating an object. what if the same thing is thrown twice? anyway that is not very pragmatic motivation, it's my theorist side talking","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$8fXXllBj8Vc_pr-tVinBY8t62rqFTDho2yuyBVE1vEA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1719866220970,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Bx3U0WFHq5nJPQikNsN5J1tyx7felMwlea9gc7OGIJA"},
{"content":{"body":"Yeah. Almost makes more sense to not be attached to the Error object, but then where would you put it?","msgtype":"m.text"},"ts":1719866269990,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$mEH1lX-C5cEZQlI3JP75z1OPa7tr0ERCRxD9MkDvjjk"},
{"content":{"body":"but we might still need a causative context for unhandled rejections in case they aren't error objects","m.mentions":{},"msgtype":"m.text"},"ts":1719866270577,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gkP3bz4FnJSSfcEeiO3pQ1bER_9rqASF6tKNSH4mjH0"},
{"content":{"body":"True.","msgtype":"m.text"},"ts":1719866284627,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$3llWkZMiuor2QgeLSnq0Q2xHxNzvp0NjpPO8M6bC2AY"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yeah. Almost makes more sense to not be attached to the Error object, but then where would you put it?\n\nit could be on the event (but still, requires extra machinery in implementations)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$mEH1lX-C5cEZQlI3JP75z1OPa7tr0ERCRxD9MkDvjjk?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yeah. Almost makes more sense to not be attached to the Error object, but then where would you put it?</blockquote></mx-reply>it could be on the event (but still, requires extra machinery in implementations)","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$mEH1lX-C5cEZQlI3JP75z1OPa7tr0ERCRxD9MkDvjjk"}},"msgtype":"m.text"},"ts":1719866289280,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-_olYFL9rI88KMnZSvZgjI4g1oJCTLP2gHiTX2Z8nyw"},
{"content":{"body":"For unhandledRejection we probably _would_ need the point it throws and not an Error property given you _can_ throw non-errors and unfortunately sometimes people do. 😐","format":"org.matrix.custom.html","formatted_body":"For unhandledRejection we probably <em>would</em> need the point it throws and not an Error property given you <em>can</em> throw non-errors and unfortunately sometimes people do. 😐","msgtype":"m.text"},"ts":1719866329832,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$MJI8En3XpH4mX4oXowdFcPEJeUNXudeX0bJnljtRgJ4"},
{"content":{"body":"unhandledrejection isn't dispatched synchronously, so it's a little more awkward","m.mentions":{},"msgtype":"m.text"},"ts":1719866343264,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$nfAGQL-k-IjsfM8B-0tIUw62rEnT8Rl6CJGeklQbFcU"},
{"content":{"body":"ideally it could reuse the same mechanism for synchronous events (i.e. dispatchEvent captures the snapshot)","m.mentions":{},"msgtype":"m.text"},"ts":1719866369808,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$98hMcXsLFnTbJutbKMwwrWesdfwr0ClTSFwPASGGu-Q"},
{"content":{"body":"as we've previously reasoned, we could either store the context when the Promise is allocated (as in Node) or rejected (as in the current spec). I guess in either case, it could be in the Promise itself, and then it's only read by the unhandled rejection thing.","m.mentions":{},"msgtype":"m.text"},"ts":1719866422246,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$xXlbvuJHcNqx0DxZLpCzEewfcbbtmWaMKuL5azWID7U"},
{"content":{"body":"Capturing on dispatchEvent also means we could have _anything_ be able to access both register time _and_ call time contexts. 🤔","format":"org.matrix.custom.html","formatted_body":"Capturing on dispatchEvent also means we could have <em>anything</em> be able to access both register time <em>and</em> call time contexts. 🤔","msgtype":"m.text"},"ts":1719866476861,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$iLgi1LA4FjP7YtdqMs2Im_1gEXKoDWGcrIXdYLZF-wk"},
{"content":{"body":"I previously convinced myself that the rejected-time context is definitely way better, but now, with distance, I could see that either could be OK...","m.mentions":{},"msgtype":"m.text"},"ts":1719866480821,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mQ9ZN-yVzGLwy6SYs-mZ8473ewaa_uaaN6eTBtYZ-Mg"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Capturing on dispatchEvent also means we could have _anything_ be able to access both register time _and_ call time contexts. 🤔\n\nlots of stuff isn't dispatchEvent...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$iLgi1LA4FjP7YtdqMs2Im_1gEXKoDWGcrIXdYLZF-wk?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Capturing on dispatchEvent also means we could have <em>anything</em> be able to access both register time <em>and</em> call time contexts. 🤔</blockquote></mx-reply>lots of stuff isn't dispatchEvent...","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$iLgi1LA4FjP7YtdqMs2Im_1gEXKoDWGcrIXdYLZF-wk"}},"msgtype":"m.text"},"ts":1719866498037,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ghMEEa5Trv5FCQfK8Py12Kb9epI0QOjfpplszkOIhCk"},
{"content":{"body":"unless you mean the internal equivalent","m.mentions":{},"msgtype":"m.text"},"ts":1719866504945,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$w2fpJmSTGAsYcQ5MZXIWKqkOWQ7HPykk-YGfKjWBRtg"},
{"content":{"body":"Yes, internal equivalent.","msgtype":"m.text"},"ts":1719866515627,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$ZPQKwahj8IMPqOGfeTKKd1_OjreaxkGgg2mc6bdHMKI"},
{"content":{"body":"reject-time means you're not making as many unused snapshots","m.mentions":{},"msgtype":"m.text"},"ts":1719866520217,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yjsDmufbKDsnNboQHMr6_kHp3eVHpsf1H-IdOEnDuS0"},
{"content":{"body":"> <@stephenbelanger:matrix.org> Yes, internal equivalent.\n\nyeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ZPQKwahj8IMPqOGfeTKKd1_OjreaxkGgg2mc6bdHMKI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>Yes, internal equivalent.</blockquote></mx-reply>yeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ZPQKwahj8IMPqOGfeTKKd1_OjreaxkGgg2mc6bdHMKI"}},"msgtype":"m.text"},"ts":1719866553598,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WiAsxojoUrOE5MSFe9ExIGsGtpzmGd5bF77X1Wu55C8"},
{"content":{"body":"> <@stephenhicks:matrix.org> reject-time means you're not making as many unused snapshots\n\nbut \"making a snapshot\" is copying a pointer","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$yjsDmufbKDsnNboQHMr6_kHp3eVHpsf1H-IdOEnDuS0?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>reject-time means you&#39;re not making as many unused snapshots</blockquote></mx-reply>but \"making a snapshot\" is copying a pointer","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yjsDmufbKDsnNboQHMr6_kHp3eVHpsf1H-IdOEnDuS0"}},"msgtype":"m.text"},"ts":1719866566476,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vdlbGCQoAsaHWIpKRlbS_meBbOMeSvHPx-cMA8UV4p0"},
{"content":{"body":"we're *not* doing an allocation, in particular","format":"org.matrix.custom.html","formatted_body":"we're <em>not</em> doing an allocation, in particular","m.mentions":{},"msgtype":"m.text"},"ts":1719866582838,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QQXJ2ry0ItVKaHf7-7FKN4rF-GAdwlF2OrG5QxEUjRY"},
{"content":{"body":"is there a concern about lifetime management?","m.mentions":{},"msgtype":"m.text"},"ts":1719866588714,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$9jTFiBjKCvK6tRC2rj965hGWMQFw7srYl55VdtU48rs"},
{"content":{"body":"> <@stephenhicks:matrix.org> is there a concern about lifetime management?\n\nwell, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$9jTFiBjKCvK6tRC2rj965hGWMQFw7srYl55VdtU48rs?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>is there a concern about lifetime management?</blockquote></mx-reply>well, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$9jTFiBjKCvK6tRC2rj965hGWMQFw7srYl55VdtU48rs"}},"msgtype":"m.text"},"ts":1719866611951,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L-MBkY0n-ieVJ9YHmjwBoMAU5Hx0FCBE3PAK9MNLSak"},
{"content":{"body":"via the getter","m.mentions":{},"msgtype":"m.text"},"ts":1719866627404,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Z4wECMD9Pr3WzN9uH_y7vOtpFziPbF2w9wt9Q7-ptpA"},
{"content":{"body":"> <@littledan:matrix.org> yeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details\n\nI mean…that’s possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG%3Amatrix.org/%24WiAsxojoUrOE5MSFe9ExIGsGtpzmGd5bF77X1Wu55C8\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>yeah so conversations with DOM people like Anne seemed to point to, we'd only get this little by little, for particular things where it made sense, since it's complicated and depends on that particular API's details</blockquote></mx-reply>I mean…that’s possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?","m.relates_to":{"m.in_reply_to":{"event_id":"$WiAsxojoUrOE5MSFe9ExIGsGtpzmGd5bF77X1Wu55C8"}},"msgtype":"m.text"},"ts":1719866627976,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$aCB3Q_0lTcM6FZS40BY6hz1YxUeZe8vH4jG0QaxBv10"},
{"content":{"body":"or maybe that's too weird and un-getter-like?","m.mentions":{},"msgtype":"m.text"},"ts":1719866637816,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PY_E0ExhWbYZs1fuv_A1vXmVGHZq2bd-ismHZ9wAoCM"},
{"content":{"body":"the alternative is, you eagerly stash a pointer to the underlying data structure, but somehow you can dynamically type check that, and on first access, you replace it with a snapshot in place, and subsequent accesses notice that it's already a snapshot","m.mentions":{},"msgtype":"m.text"},"ts":1719866677878,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$g5MW34pCsbbODtfeGf-2NMdABUs2U_VIUMA_OeUd3PM"},
{"content":{"body":"> <@littledan:matrix.org> well, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that\n\nNot sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$L-MBkY0n-ieVJ9YHmjwBoMAU5Hx0FCBE3PAK9MNLSak?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, IMO we should give a fresh object identity for the snapshot each time you use it, so we don't have to worry about that</blockquote></mx-reply>Not sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$L-MBkY0n-ieVJ9YHmjwBoMAU5Hx0FCBE3PAK9MNLSak"}},"msgtype":"m.text"},"ts":1719866701687,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$kMrqNyHhvPacSYOD-pCpMMcxaEoGcvc-UuYWsCUMdfI"},
{"content":{"body":"> <@stephenbelanger:matrix.org> I mean…that’s possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?\n\nyes, though there's still the question of, \"are we doing this now or 'later'\". IMO we should identify the cases where we believe it's needed *now* (e.g., some of this error stuff) and document why it's needed, and expect that the initially shipped version doesn't include so many of these","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$aCB3Q_0lTcM6FZS40BY6hz1YxUeZe8vH4jG0QaxBv10?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenbelanger:matrix.org\">@stephenbelanger:matrix.org</a><br>I mean…that’s possibly fine? We just need to make a bunch of individual cases for each API, which it seemed like Andreu was already doing the research work for?</blockquote></mx-reply>yes, though there's still the question of, \"are we doing this now or 'later'\". IMO we should identify the cases where we believe it's needed <em>now</em> (e.g., some of this error stuff) and document why it's needed, and expect that the initially shipped version doesn't include so many of these","m.mentions":{"user_ids":["@stephenbelanger:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aCB3Q_0lTcM6FZS40BY6hz1YxUeZe8vH4jG0QaxBv10"}},"msgtype":"m.text"},"ts":1719866750463,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RFvsHedf1bjsGKlvsYxFOvvHAXFiKW-56rX61j1RUhw"},
{"content":{"body":"> <@stephenhicks:matrix.org> Not sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it\n\noh oops I was talking about a superficial object identity issue, totally separate. For lifetime.... yeah just leak?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$kMrqNyHhvPacSYOD-pCpMMcxaEoGcvc-UuYWsCUMdfI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>Not sure we're talking about the same thing?  IIUC there was concern about when a snapshot was no longer reachable (hence all the explicit resource management discussions) and if we've got a never-will-be-used snapshot hanging on a long-lived promise, that could confuse it</blockquote></mx-reply>oh oops I was talking about a superficial object identity issue, totally separate. For lifetime.... yeah just leak?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kMrqNyHhvPacSYOD-pCpMMcxaEoGcvc-UuYWsCUMdfI"}},"msgtype":"m.text"},"ts":1719866784810,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SeFriIUNznxR2-9Eo49fi8ZpBq-MrHatSecFWKBnAws"},
{"content":{"body":"I don't see a solution to this lifetime question","m.mentions":{},"msgtype":"m.text"},"ts":1719866794680,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HKYNwtXARywpkgu7Usi-wmVPI0gmEICM7SgmGVJRiOQ"},
{"content":{"body":"Selfishly, APM’s probably won’t care as we’re focused on servers where most of those APIs don’t exist anyway. 😅","msgtype":"m.text"},"ts":1719866815726,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$yxYQl7eEWscqDigvuevcSA48e739ZxtoAAsUIKiEMJo"},
{"content":{"body":"well, some people care about client-side performance monitoring, but I take it that's not your team","m.mentions":{},"msgtype":"m.text"},"ts":1719866853257,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ncMJqYo5FbcKdqy3Qbdxf2ycLtKm8Kb_BvCPL_qw1JM"},
{"content":{"body":"I guess the lifetime thing might be especially bad for something like Error objects, where it might be really non-obvious what you're keeping around","m.mentions":{},"msgtype":"m.text"},"ts":1719866877653,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JVWnK1R5jE1-HL1H2fz5Q6bIgS1eEGJfRqaR5XJwZFE"},
{"content":{"body":"you could have HostPromiseRejectionHandler add/remove it?","m.mentions":{},"msgtype":"m.text"},"ts":1719866882726,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-IEuhyeRvKgh5qSSMzmf-F4CjvQHq71wKr8pGPRFL4I"},
{"content":{"body":"and you can imagine keeping errors around","m.mentions":{},"msgtype":"m.text"},"ts":1719866885848,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OlLstHujIiWBRnX650z3UdJjB60TS5wjbgy2MiX2MoM"},
{"content":{"body":"> <@stephenhicks:matrix.org> you could have HostPromiseRejectionHandler add/remove it?\n\nit would modify the error?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$-IEuhyeRvKgh5qSSMzmf-F4CjvQHq71wKr8pGPRFL4I?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>you could have HostPromiseRejectionHandler add/remove it?</blockquote></mx-reply>it would modify the error?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-IEuhyeRvKgh5qSSMzmf-F4CjvQHq71wKr8pGPRFL4I"}},"msgtype":"m.text"},"ts":1719866896820,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aEllTqsbj5jLmYG08KXLK4a_Yf0NSTwAagKv8CwsvhI"},
{"content":{"body":"> <@littledan:matrix.org> well, some people care about client-side performance monitoring, but I take it that's not your team\n\nthis is our use case","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$ncMJqYo5FbcKdqy3Qbdxf2ycLtKm8Kb_BvCPL_qw1JM?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>well, some people care about client-side performance monitoring, but I take it that&#39;s not your team</blockquote></mx-reply>this is our use case","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ncMJqYo5FbcKdqy3Qbdxf2ycLtKm8Kb_BvCPL_qw1JM"}},"msgtype":"m.text"},"ts":1719866917602,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$I1kMVYfQzGnE4LrdEy7C-XTNQvDE8DsYDobbgKPzq9A"},
{"content":{"body":"> <@littledan:matrix.org> it would modify the error?\n\nno, the promise","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$aEllTqsbj5jLmYG08KXLK4a_Yf0NSTwAagKv8CwsvhI?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>it would modify the error?</blockquote></mx-reply>no, the promise","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$aEllTqsbj5jLmYG08KXLK4a_Yf0NSTwAagKv8CwsvhI"}},"msgtype":"m.text"},"ts":1719866960500,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$sKpvPs5axdlvac6SK5QPWsAo39ZVFSvtCdSB8NiyY9U"}
]