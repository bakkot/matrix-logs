[
{"content":{"body":"> <@jridgewell:matrix.org> I think we can extend this as well. Imagine the parent is doing a fetch and creates an abort signal, then passes that same signal to the children to perform their fetches. They each setup their own fetch state otherwise, maybe logging. It’d be surprising that the parent aborting their fetch causes the child’s fetch to inherit the parent’s fetch state.\n\nI'm not quite sure what you're saying.  If you pass the same signal to the children, then aborting them is exactly what I'd expect.  It should be a conscious choice which signal to pass, and reusing a signal indicates to me precisely that you want them all to abort together.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$qc4o6xAuLmMGSnqobU-1Kx7gEQxRCIkpOM4xpMz0YOk?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I think we can extend this as well. Imagine the parent is doing a fetch and creates an abort signal, then passes that same signal to the children to perform their fetches. They each setup their own fetch state otherwise, maybe logging. It’d be surprising that the parent aborting their fetch causes the child’s fetch to inherit the parent’s fetch state.</blockquote></mx-reply>I'm not quite sure what you're saying.  If you pass the same signal to the children, then aborting them is exactly what I'd expect.  It should be a conscious choice which signal to pass, and reusing a signal indicates to me precisely that you want them all to abort together.","m.mentions":{"user_ids":["@jridgewell:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$qc4o6xAuLmMGSnqobU-1Kx7gEQxRCIkpOM4xpMz0YOk"}},"msgtype":"m.text"},"ts":1716433802362,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$UqjGMalRo8AwLh-XujP5SubGGKppe7M708cj_bGRkow"},
{"content":{"body":"I expect the children to abort, not for the cleanup code in the children to assume the signaling event’s context.","msgtype":"m.text"},"ts":1716434021796,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$E-G19u7NkdV3GohtoiZSUKvPNhquN_zinFpqk-keRJk"},
{"content":{"body":"Gotcha, I think I misunderstood \"sets up their own fetch state\".  You were saying that they might add some of their own async vars as well, and that it should be encapsulated to the child rather than flowing through from the parent.  I agree.","m.mentions":{},"msgtype":"m.text"},"ts":1716434146479,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$c5POf51babZYOg5iXgBcoOHvffJDIQ5O14-xupfITAU"},
{"content":{"body":"Yes, rereading it now I didn’t word it well.","msgtype":"m.text"},"ts":1716434190455,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Jl6-lnJ8Jo8htU7ffUGX8np8A571vwi-_jcn_slsmIQ"},
{"content":{"body":"Another example where encapsulated (defualt flow-around) approach makes sense is to behave like React's `<Context.Provider>`.  That API is designed to avoid \"prop drilling\", where an outer JSX component needs to pass data to an inner JSX component, but due to JSX's design, this ends up requiring every component in between to accept and pass along that same data.  The generally accepted solution is to put a `<Context>` element around the outside, and then it can be accessed directly by any descendent without adding arguments everywhere in between.  If, for some reason, there were an additional provider for the same context variable, it would override the previous one, but only for the current scope - so it's clean.  It would be very susprising if changes to this context in a child scope ended up affecting other sibling subcomponents.\n\nIn general, this use case of \"implicit parameter propagation without needing to virally change the signatures  in between\" is relevant both in JSX but also in ordinary JS, and it basically always wants the bind-around approach.","format":"org.matrix.custom.html","formatted_body":"<p>Another example where encapsulated (defualt flow-around) approach makes sense is to behave like React's <code>&lt;Context.Provider&gt;</code>.  That API is designed to avoid \"prop drilling\", where an outer JSX component needs to pass data to an inner JSX component, but due to JSX's design, this ends up requiring every component in between to accept and pass along that same data.  The generally accepted solution is to put a <code>&lt;Context&gt;</code> element around the outside, and then it can be accessed directly by any descendent without adding arguments everywhere in between.  If, for some reason, there were an additional provider for the same context variable, it would override the previous one, but only for the current scope - so it's clean.  It would be very susprising if changes to this context in a child scope ended up affecting other sibling subcomponents.</p>\n<p>In general, this use case of \"implicit parameter propagation without needing to virally change the signatures  in between\" is relevant both in JSX but also in ordinary JS, and it basically always wants the bind-around approach.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1716438555406,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$w2wckcaV25TOCAAoDFYoirw763aN2TGBOlIuImy8J-s"}
]