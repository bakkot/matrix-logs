[
{"content":{"body":"so for events in the web integration, the current idea (since we discussed it with various web platform folks in the Web Engines Hackfest) is to add a property to the event object containing the `AsyncContext.Snapshot` for the originating/causal event (possibly `null`)","format":"org.matrix.custom.html","formatted_body":"so for events in the web integration, the current idea (since we discussed it with various web platform folks in the Web Engines Hackfest) is to add a property to the event object containing the <code>AsyncContext.Snapshot</code> for the originating/causal event (possibly <code>null</code>)","m.mentions":{},"msgtype":"m.text"},"ts":1721305597114,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BxwuzZ0RXMm9aAZ9pyHlTT5dj17xkiD2lwh2AhnX5RM"},
{"content":{"body":"does anyone want to pitch in with ideas for the name of that property? `originatingContext`? `causalContext`? `causalContextSnapshot`?","format":"org.matrix.custom.html","formatted_body":"does anyone want to pitch in with ideas for the name of that property? <code>originatingContext</code>? <code>causalContext</code>? <code>causalContextSnapshot</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1721305639611,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OBg0C0TTjp06ijlejU79Qybl47JGsbbrLOziTqhkJU8"},
{"content":{"body":"I'm not sure any of those are great, does anyone have ideas?","m.mentions":{},"msgtype":"m.text"},"ts":1721305648587,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$aTcQVV6ZTbZh4k-T6aoz1WWHEDPq1XDO7BXjmlzvbaQ"},
{"content":{"body":"I vote that we try to consistently use the term “snapshot” when referring to context maps","msgtype":"m.text"},"ts":1721307896887,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PBbVS9JEJvC3CdKL-QacVmKaJavOLzjApLW1JnwYQo0"},
{"content":{"body":"But there are many possible ways to call this while including that word","msgtype":"m.text"},"ts":1721307917514,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iqJfegJC3UxQ1y-IpNy7GpHeuBMPGFCLLV7npE29lHQ"},
{"content":{"body":"Relevant words: origin(al|ating)?, trigger(ing)?, causal, dispatch(-time)?, unrestored, outer, source, init(ial|iating), starting, previous, flow(-through)?","m.mentions":{},"msgtype":"m.text"},"ts":1721320312926,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$pGjOvFTSy6Nk8gnceXPt3aR16CApJ1Llr3HYT8TvV8s"},
{"content":{"body":"I'm partial to `originSnapshot`, `dispatchSnapshot`, or `initialSnapshot`, I think.","format":"org.matrix.custom.html","formatted_body":"I'm partial to <code>originSnapshot</code>, <code>dispatchSnapshot</code>, or <code>initialSnapshot</code>, I think.","m.mentions":{},"msgtype":"m.text"},"ts":1721320384643,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Lqum-ZIvn5Uer4j2bGsWwSu488tpPOeJT6Olsb5SuO0"},
{"content":{"body":"Origin already has a meaning on the web, I would prefer anything else","msgtype":"m.text"},"ts":1721320624780,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Q_mBABVDdZwxAgNO8qfGSs6JfDj_civHE4Xfyb-ii48"},
{"content":{"body":"Ok, then `originalSnapshot`, `originatingSnapshot`, `dispatchSnapshot`, or `initialSnapshot`.","format":"org.matrix.custom.html","formatted_body":"Ok, then <code>originalSnapshot</code>, <code>originatingSnapshot</code>, <code>dispatchSnapshot</code>, or <code>initialSnapshot</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1721321290770,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$5MKJlF8CGgXik4JCNJRV6IWl8KH5Hul_9oq5E1ziqug"},
{"content":{"body":"`asyncContextSnapshot`","format":"org.matrix.custom.html","formatted_body":"<code>asyncContextSnapshot</code>","m.mentions":{},"msgtype":"m.text"},"ts":1721325088544,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$FaaAv2mTm7WL0iqVoYSVy_uHKEQiiz2EUJlDxduwPk4"},
{"content":{"body":"`dispatchContext` makes sense to me in this specific context as it indicates it's specifically when the event dispatch call happened.","format":"org.matrix.custom.html","formatted_body":"<code>dispatchContext</code> makes sense to me in this specific context as it indicates it's specifically when the event dispatch call happened.","m.mentions":{},"msgtype":"m.text"},"ts":1721325507701,"senderName":"Stephen Belanger","senderId":"@stephenbelanger:matrix.org","id":"$SX3-y4zKgti9nH82vVifCDaZ-JjgsHDQTB6AhHJLJ_s"},
{"content":{"body":" * Ok, then (1) `originalSnapshot`, (2) `originatingSnapshot`, (3) `dispatchSnapshot`, or (4) `initialSnapshot`.","format":"org.matrix.custom.html","formatted_body":" * Ok, then (1) <code>originalSnapshot</code>, (2) <code>originatingSnapshot</code>, (3) <code>dispatchSnapshot</code>, or (4) <code>initialSnapshot</code>.","m.mentions":{},"m.new_content":{"body":"Ok, then (1) `originalSnapshot`, (2) `originatingSnapshot`, (3) `dispatchSnapshot`, or (4) `initialSnapshot`.","format":"org.matrix.custom.html","formatted_body":"Ok, then (1) <code>originalSnapshot</code>, (2) <code>originatingSnapshot</code>, (3) <code>dispatchSnapshot</code>, or (4) <code>initialSnapshot</code>.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$5MKJlF8CGgXik4JCNJRV6IWl8KH5Hul_9oq5E1ziqug","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721325639164,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$4Kr6tK8k3EZ0ZJB2VxK0tO_lAGsXLUCwbb1QhdYX6u8"},
{"content":{"body":"i would be extremely sad if this didn't include at least \"async\" in it","m.mentions":{},"msgtype":"m.text"},"ts":1721326006914,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$svxndc7jjIOwt94UlS6ABu0P_7prsZ-Xn0ZOeID2hgw"},
{"content":{"body":"dispatchAsyncContextSnapshotNotAnOriginDoNotConfuseWithAnOrigin","m.mentions":{},"msgtype":"m.text"},"ts":1721326037524,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$Pcs9O90WSMnLhj16HkIe715U_o-_PbwQos3tyMxvFhQ"},
{"content":{"body":" * i would be sad if this didn't include at least \"async\" in it","m.mentions":{},"m.new_content":{"body":"i would be sad if this didn't include at least \"async\" in it","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$svxndc7jjIOwt94UlS6ABu0P_7prsZ-Xn0ZOeID2hgw","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721326600210,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$A_dt9bKT1tfj-uHRjhcl-ZitYz7SHbzJDWvnVcHnUlA"},
{"content":{"body":"The deadline for adding agenda items for advancement at the August plenary is tomorrow - are we still on target to present something?","m.mentions":{},"msgtype":"m.text"},"ts":1721327278856,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ykBqFKmhHkbY4gMQdKuBGIdfhi8pbiLAiYeJyQxs3jU"},
{"content":{"body":" * Tomorrow is the deadline for adding agenda items for advancement at the August plenary - are we still on target to present something?","m.mentions":{},"m.new_content":{"body":"Tomorrow is the deadline for adding agenda items for advancement at the August plenary - are we still on target to present something?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$ykBqFKmhHkbY4gMQdKuBGIdfhi8pbiLAiYeJyQxs3jU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721327332549,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$93keQoPasZIDv9Jo7mU8-S1imX244ZtFjCPAybdqOCs"},
{"content":{"body":"I've seen from the outside how much work has gone in the web integration, I think a status update on that would be very valuable ","msgtype":"m.text"},"ts":1721329857721,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$_lwaF0MAguZF1Ytdg3lV_ZyaZrrWL_efJhs3NUUuJT0"},
{"content":{"body":"To everyone not following the TC39 General room, there’s been some discussion on `AsyncContext`:\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-16\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-17\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-18","format":"org.matrix.custom.html","formatted_body":"To everyone not following the TC39 General room, there’s been some discussion on <code data-md=\"`\">AsyncContext</code>:<br/><ol data-md=\"-\"><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-16</p></li><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-17</p></li><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-18</p></li></ol>","msgtype":"m.text"},"ts":1721330026909,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Dus4PlA6RTXPug6xMyC2Oj2nM3agcWIzoYP3Ooxx_1g"},
{"content":{"body":"In particular, @bakkot has some dislike of through-await continuation semantics in:\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L56\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L67\n- https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L75\n\nWhich had to be resolved in https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L80-L81","format":"org.matrix.custom.html","formatted_body":"In particular, @bakkot has some dislike of through-await continuation semantics in:<br/><ol data-md=\"-\"><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L56</p></li><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L67</p></li><li><p>https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L75</p></li></ol><br/>Which had to be resolved in https://matrixlogs.bakkot.com/TC39_General/2024-07-17#L80-L81","msgtype":"m.text"},"ts":1721330585176,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WX4WHxrVHFvVmqQJfs3WT0DFitAPjpH0CUPtNAZn04I"},
{"content":{"body":"specifically, the thing I don't want:\n\n```js\nasync function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n```\nas long as that's maintained, I'm not worried","format":"org.matrix.custom.html","formatted_body":"<p>specifically, the thing I don't want:</p>\n<pre><code class=\"language-js\">async function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n</code></pre>\n<p>as long as that's maintained, I'm not worried</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721332183317,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$f8rLDrf6N1-c9waJ3EPEHhxGgYNMdDLHaPghdnrk7to"},
{"content":{"body":"obviously if `doWork` closes over an async context variable which has a mutable object or whatever then it can affect it, just like if it closed over a regular variable; that's fine","format":"org.matrix.custom.html","formatted_body":"obviously if <code>doWork</code> closes over an async context variable which has a mutable object or whatever then it can affect it, just like if it closed over a regular variable; that's fine","m.mentions":{},"msgtype":"m.text"},"ts":1721332238397,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Lkkw1buCAeH0f7QROrp2QMD91Hknf0olwwf4la5YTfM"},
{"content":{"body":" * specifically:\n\n```js\nasync function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n```\n\nas long as that's maintained, I'm not worried","format":"org.matrix.custom.html","formatted_body":" * <p>specifically:</p>\n<pre><code class=\"language-js\">async function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n</code></pre>\n<p>as long as that's maintained, I'm not worried</p>\n","m.mentions":{},"m.new_content":{"body":"specifically:\n\n```js\nasync function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n```\n\nas long as that's maintained, I'm not worried","format":"org.matrix.custom.html","formatted_body":"<p>specifically:</p>\n<pre><code class=\"language-js\">async function f() {\n  await scheduler.yield();\n  await someLibrary.doWork();\n  await scheduler.yield(); // this should not be affected by the `doWork` call\n}\n</code></pre>\n<p>as long as that's maintained, I'm not worried</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$f8rLDrf6N1-c9waJ3EPEHhxGgYNMdDLHaPghdnrk7to","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332252778,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SAE9Uz_hY96ScyVY1HzFv9UhaDWGL0RTZqesOVsiNZ8"},
{"content":{"body":"(assuming there aren't any such which exist by default)","m.mentions":{},"msgtype":"m.text"},"ts":1721332278563,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$N5DXt38tAhAH37j53scau-hrF9Qv9w2O-YPe9kLGcWE"},
{"content":{"body":"For the last few weeks, we’ve been discussion Contunation variables which behave differnetly than `AsyncContext.Variable` does: https://github.com/tc39/proposal-async-context/pull/94","format":"org.matrix.custom.html","formatted_body":"For the last few weeks, we’ve been discussion Contunation variables which behave differnetly than <code data-md=\"`\">AsyncContext.Variable</code> does: https://github.com/tc39/proposal-async-context/pull/94","msgtype":"m.text"},"ts":1721332308684,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PvctCSHms7nJdj7mitvAOktqOc71OYvyic1NmCo5mN8"},
{"content":{"body":"* For the last few weeks, we’ve been discussing Contunation variables which behave differnetly than `AsyncContext.Variable` does: https://github.com/tc39/proposal-async-context/pull/94","format":"org.matrix.custom.html","formatted_body":"For the last few weeks, we’ve been discussing Contunation variables which behave differnetly than <code data-md=\"`\">AsyncContext.Variable</code> does: https://github.com/tc39/proposal-async-context/pull/94","m.new_content":{"body":"For the last few weeks, we’ve been discussing Contunation variables which behave differnetly than `AsyncContext.Variable` does: https://github.com/tc39/proposal-async-context/pull/94","format":"org.matrix.custom.html","formatted_body":"For the last few weeks, we’ve been discussing Contunation variables which behave differnetly than <code data-md=\"`\">AsyncContext.Variable</code> does: https://github.com/tc39/proposal-async-context/pull/94","msgtype":"m.text"},"m.relates_to":{"event_id":"$PvctCSHms7nJdj7mitvAOktqOc71OYvyic1NmCo5mN8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332320027,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ROWb3yChglx7gIUM-CdMFYXE5V9EMYUOFIxCu7FWxW4"},
{"content":{"body":"```js\nconst aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nasync function foo() {\n  return aVar.run(2, () => {\n    return cVar.run(2, () => {\n      // aVar.get() === 2\n      // cVar.get() === 2\n    });\n  });\n}\n\naVar.run(1, () => {\n  cVar.run(1, async () => {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n```","format":"org.matrix.custom.html","formatted_body":"<pre data-md=\"```\"><code class=\"language-js\">const aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nasync function foo() {\n  return aVar.run(2, () =&gt; {\n    return cVar.run(2, () =&gt; {\n      // aVar.get() === 2\n      // cVar.get() === 2\n    });\n  });\n}\n\naVar.run(1, () =&gt; {\n  cVar.run(1, async () =&gt; {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n</code></pre>","msgtype":"m.text"},"ts":1721332488337,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IBweCfsEn23PYod1sqGTTfQpE1k5dJOHRzYxHDnLoIo"},
{"content":{"body":"Continuation variables keep the data that’s set when the promise resolves (in this case, the `async foo`’s internal promise), while `AsyncContext.Variable`s keep the data that’s set immediately before awaiting a promise.","format":"org.matrix.custom.html","formatted_body":"Continuation variables keep the data that’s set when the promise resolves (in this case, the <code data-md=\"`\">async foo</code>’s internal promise), while <code data-md=\"`\">AsyncContext.Variable</code>s keep the data that’s set immediately before awaiting a promise.","msgtype":"m.text"},"ts":1721332606940,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$hfmwc3DUi3Z78m2sBH_OyZApRlH1-cvFhzG5mISpxnM"},
{"content":{"body":"* ```js\nconst aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nfunction foo() {\n  return aVar.run(2, () => {\n    return cVar.run(2, () => {\n      // aVar.get() === 2\n      // cVar.get() === 2\n      return Promise.resolve();\n    });\n  });\n}\n\naVar.run(1, () => {\n  cVar.run(1, async () => {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n```","format":"org.matrix.custom.html","formatted_body":"<pre data-md=\"```\"><code class=\"language-js\">const aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nfunction foo() {\n  return aVar.run(2, () =&gt; {\n    return cVar.run(2, () =&gt; {\n      // aVar.get() === 2\n      // cVar.get() === 2\n      return Promise.resolve();\n    });\n  });\n}\n\naVar.run(1, () =&gt; {\n  cVar.run(1, async () =&gt; {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n</code></pre>","m.new_content":{"body":"```js\nconst aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nfunction foo() {\n  return aVar.run(2, () => {\n    return cVar.run(2, () => {\n      // aVar.get() === 2\n      // cVar.get() === 2\n      return Promise.resolve();\n    });\n  });\n}\n\naVar.run(1, () => {\n  cVar.run(1, async () => {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n```","format":"org.matrix.custom.html","formatted_body":"<pre data-md=\"```\"><code class=\"language-js\">const aVar = new AsyncContext.Variable();\nconst cVar = new ContinuationVariable();\n\nfunction foo() {\n  return aVar.run(2, () =&gt; {\n    return cVar.run(2, () =&gt; {\n      // aVar.get() === 2\n      // cVar.get() === 2\n      return Promise.resolve();\n    });\n  });\n}\n\naVar.run(1, () =&gt; {\n  cVar.run(1, async () =&gt; {\n      // aVar.get() === 1\n      // cVar.get() === 1\n\n      await foo();\n\n      // aVar.get() === 1\n      // cVar.get() === 2\n  });\n});\n</code></pre>","msgtype":"m.text"},"m.relates_to":{"event_id":"$IBweCfsEn23PYod1sqGTTfQpE1k5dJOHRzYxHDnLoIo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332655618,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$wORT8TK1P6LQ1CNdiNU6JlJ-mp-592LUcbq-H5m_pgs"},
{"content":{"body":"* Continuation variables keep the data that’s set when the promise resolves, while `AsyncContext.Variable`s keep the data that’s set immediately before awaiting a promise.","format":"org.matrix.custom.html","formatted_body":"Continuation variables keep the data that’s set when the promise resolves, while <code data-md=\"`\">AsyncContext.Variable</code>s keep the data that’s set immediately before awaiting a promise.","m.new_content":{"body":"Continuation variables keep the data that’s set when the promise resolves, while `AsyncContext.Variable`s keep the data that’s set immediately before awaiting a promise.","format":"org.matrix.custom.html","formatted_body":"Continuation variables keep the data that’s set when the promise resolves, while <code data-md=\"`\">AsyncContext.Variable</code>s keep the data that’s set immediately before awaiting a promise.","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfmwc3DUi3Z78m2sBH_OyZApRlH1-cvFhzG5mISpxnM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332671849,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eRbCR0LB29iV1XgRUCbZTaDCoXIl1dkPOaQ6nme5vEw"},
{"content":{"body":"* Continuation variables keep the data that’s set when the promise resolves (like a callback passing data), while `AsyncContext.Variable`s keep the data that’s set immediately before awaiting a promise (like a parameter).","format":"org.matrix.custom.html","formatted_body":"Continuation variables keep the data that’s set when the promise resolves (like a callback passing data), while <code data-md=\"`\">AsyncContext.Variable</code>s keep the data that’s set immediately before awaiting a promise (like a parameter).","m.new_content":{"body":"Continuation variables keep the data that’s set when the promise resolves (like a callback passing data), while `AsyncContext.Variable`s keep the data that’s set immediately before awaiting a promise (like a parameter).","format":"org.matrix.custom.html","formatted_body":"Continuation variables keep the data that’s set when the promise resolves (like a callback passing data), while <code data-md=\"`\">AsyncContext.Variable</code>s keep the data that’s set immediately before awaiting a promise (like a parameter).","msgtype":"m.text"},"m.relates_to":{"event_id":"$hfmwc3DUi3Z78m2sBH_OyZApRlH1-cvFhzG5mISpxnM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332708126,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$VQ92dOez6I26LAXG_HZ2MhfOzcZCMq_o4S-cEqdLyQ8"},
{"content":{"body":"surely it should be called `set` or something in that case, yes? there's no reason to use the `run(val, cb)` pattern if the value is persisted after the callback finishes","format":"org.matrix.custom.html","formatted_body":"surely it should be called <code>set</code> or something in that case, yes? there's no reason to use the <code>run(val, cb)</code> pattern if the value is persisted after the callback finishes","m.mentions":{},"msgtype":"m.text"},"ts":1721332778917,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fA9ZmmE-tLkaflB5VCDpMgUbTmYaimgG66MY1PzATRw"},
{"content":{"body":"It's not \"persist\" as you'd expect after the callback finishes","m.mentions":{},"msgtype":"m.text"},"ts":1721332819899,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$u-LDmQMosTPAxK6Tb9pPLxaypBK0tN_gnfvblzHXvoY"},
{"content":{"body":"Yah, there’s a difference between sync mutation (which SES folks very much disliked) and the Promise holding contex data from it’s resolution (which SES folks maybe won’t object to)","msgtype":"m.text"},"ts":1721332884432,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_4ulu5YewCXQsdNqr5FG_QGFeuvQH4hVco5r0Xl3FzE"},
{"content":{"body":"```js\nconst cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\n\nawait p;\ncv.get();\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\n\nawait p;\ncv.get();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1721332894524,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$hgN3BWQYCpMdK7T-4a68MzSaFf0IOE3d7O9saOSCx5A"},
{"content":{"body":"* Yah, there’s a difference between sync mutation (which SES folks very much disliked) and the Promise holding context data from its resolution (which SES folks maybe won’t object to)","m.new_content":{"body":"Yah, there’s a difference between sync mutation (which SES folks very much disliked) and the Promise holding context data from its resolution (which SES folks maybe won’t object to)","msgtype":"m.text"},"m.relates_to":{"event_id":"$_4ulu5YewCXQsdNqr5FG_QGFeuvQH4hVco5r0Xl3FzE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721332898311,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YyXTIoXIrnyCjrKro04YS0-eLx8Vz5L-Bajidl-uI5M"},
{"content":{"body":"Continuation _could_ be implmemented via mutation, but doesn’t _need_ to be.","format":"org.matrix.custom.html","formatted_body":"Continuation <i data-md=\"_\">could</i> be implmemented via mutation, but doesn’t <i data-md=\"_\">need</i> to be.","msgtype":"m.text"},"ts":1721332972884,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$lfuqu5lZ7KR0BnLl586wmPI2X5TNDV6jWU0u7cdI7pA"},
{"content":{"body":" * ```js\nconst cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\nawait p;\ncv.get();\n```","format":"org.matrix.custom.html","formatted_body":" * <pre><code class=\"language-js\">const cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\nawait p;\ncv.get();\n</code></pre>\n","m.mentions":{},"m.new_content":{"body":"```js\nconst cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\nawait p;\ncv.get();\n```","format":"org.matrix.custom.html","formatted_body":"<pre><code class=\"language-js\">const cv = new ContinuationVariable();\n\nconst p = asyncFunction();\ncv.get();\nawait p;\ncv.get();\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hgN3BWQYCpMdK7T-4a68MzSaFf0IOE3d7O9saOSCx5A","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721333018850,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$4YHWAu1hVkG1S5_GnMPHWWb408rb5Ke1EAD_LFbiSsw"}
]