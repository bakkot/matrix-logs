[
{"content":{"body":"(aside: I assume we did whatever we needed to to get on the agenda for next month?)","m.mentions":{},"msgtype":"m.text"},"ts":1721434756883,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$lJ1tVcCW1UW9gn0DoqAUSmRTm-JMRFdgWOGlbJFmUqA"},
{"content":{"body":"What about null vs \"empty\"?  I think the important example to consider here is the dispatchSnapshot for an event dispatched directly from the event loop, rather than programmatically.  I'll say upfront that I think having it be null for this case is desirable, since there's no good way to determine that some non-null value is \"empty\".  But I can also see a consistency argument for it being `HostGetTopLevelAsyncContextMapping(null)` - this is the initial value for agentRecord.[[AsyncContextMapping]], and is therefore presumably its value at the exact time that the event is created/dispatched.  So any other value (including `null`) is presumably more complicated to spec (and also more challenging to polyfill).","format":"org.matrix.custom.html","formatted_body":"What about null vs \"empty\"?  I think the important example to consider here is the dispatchSnapshot for an event dispatched directly from the event loop, rather than programmatically.  I'll say upfront that I think having it be null for this case is desirable, since there's no good way to determine that some non-null value is \"empty\".  But I can also see a consistency argument for it being <code>HostGetTopLevelAsyncContextMapping(null)</code> - this is the initial value for agentRecord.[[AsyncContextMapping]], and is therefore presumably its value at the exact time that the event is created/dispatched.  So any other value (including <code>null</code>) is presumably more complicated to spec (and also more challenging to polyfill).","m.mentions":{},"msgtype":"m.text"},"ts":1721435312154,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$LLdY51PKB97vLdWqoEeuG_fsYE_1W0a8n5iPyzEpIMI"},
{"content":{"body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to opt into having `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to opt into having <code>dispatchSnapshot</code> be null","m.mentions":{},"msgtype":"m.text"},"ts":1721440670348,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hZR3bPSdwdX4ouiz-0zfdULRwXJmQHdIIjJpAJa2K9g"},
{"content":{"body":" * Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":" * Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have <code>dispatchSnapshot</code> be null","m.mentions":{},"m.new_content":{"body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have <code>dispatchSnapshot</code> be null","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hZR3bPSdwdX4ouiz-0zfdULRwXJmQHdIIjJpAJa2K9g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721440686867,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wEivVvqPN5UZYGz_BiA1nwK1WhLaPK3MxWRkHrtLR7c"},
{"content":{"body":"the event constructor's second argument is an options bag, that could be an additional option there","m.mentions":{},"msgtype":"m.text"},"ts":1721440736412,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OuVqU0BXJgO0mFw_ARZ4gK_SWCLkhuaIhUeKFFqeHFU"},
{"content":{"body":"about challenging to spec, since we're considering a small initial rollout, events would have a null snapshot by default, with an option in the spec to use the current context instead","m.mentions":{},"msgtype":"m.text"},"ts":1721440975956,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$G0H75yR1fFliEAsKt6PmTuD1Bpe2Bmok_59UZ0J_akE"},
{"content":{"body":"so distinguishing null vs the empty context would not be complicated, because only event dispatches that could have a causal context would be updated to use that option","m.mentions":{},"msgtype":"m.text"},"ts":1721441027609,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$WuNR5_PIHfWniiAUzmFPKGV1dauuvGy57j_-kt3OhYA"},
{"content":{"body":"What I was suggesting before was that we might not need to do a small initial rollout if we just scope it narrowly - instead, _every_ event gets a `dispatchSnapshot`, and we handle other use cases with different properties.","format":"org.matrix.custom.html","formatted_body":"What I was suggesting before was that we might not need to do a small initial rollout if we just scope it narrowly - instead, <em>every</em> event gets a <code>dispatchSnapshot</code>, and we handle other use cases with different properties.","m.mentions":{},"msgtype":"m.text"},"ts":1721442804987,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$vVQZZNpaQWsZDl5hWMDThhdPtIQPl0iMMOkS4QXaC9U"},
{"content":{"body":"wouldn't there still have to be a small initial rollout for those other properties?","m.mentions":{},"msgtype":"m.text"},"ts":1721443116502,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CAaxuabWAHHKi4DNCZ0qZ4LWpNdLnu8sjc3WUTtS49E"},
{"content":{"body":"maybe?  but they would also be narrowly-scoped so it should also be possible to roll them out 100%","m.mentions":{},"msgtype":"m.text"},"ts":1721443165340,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$txRVDISVxQ9WYVCs2SqbI4vzzCMa1x7EM3NE8u_mqeA"},
{"content":{"body":"though they would only ever include a small subset of events","m.mentions":{},"msgtype":"m.text"},"ts":1721443199036,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$VkBGqIMvN8FhCpMmFdE3nj6HQ8Y2LplJhSC-a9t94PY"},
{"content":{"body":"i.e. `throwSnapshot` only makes sense on error/rejection events","format":"org.matrix.custom.html","formatted_body":"i.e. <code>throwSnapshot</code> only makes sense on error/rejection events","m.mentions":{},"msgtype":"m.text"},"ts":1721443209614,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$iFBOTsJ3p-kd12c_jyCfdsAH1HRdvrL8LYvoKXspY1A"},
{"content":{"body":"if we think of the future when we've achieved 100% rollout, I don't think the distinction between the different scopes will make sense","m.mentions":{},"msgtype":"m.text"},"ts":1721443296080,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1XNPzI7zTRldncmuuWGjn3N7f-Zxp0xFrBUwuUAa0ww"},
{"content":{"body":"Ultimately the difference is in conceptualizing what `fooSnapshot` means.  What I'm suggesting is that for any given `foo` you can look up _exactly_ what it means, whereas the alternative is that you need to puzzle through \"okay, this is a 'bar' event, so _its_ `fooSnapshot` comes from when such-and-such happened\"","format":"org.matrix.custom.html","formatted_body":"Ultimately the difference is in conceptualizing what <code>fooSnapshot</code> means.  What I'm suggesting is that for any given <code>foo</code> you can look up <em>exactly</em> what it means, whereas the alternative is that you need to puzzle through \"okay, this is a 'bar' event, so <em>its</em> <code>fooSnapshot</code> comes from when such-and-such happened\"","m.mentions":{},"msgtype":"m.text"},"ts":1721443433649,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$C-j-YsO1eUTcu27eyQaXlic0BTjFHKD4YqvotXbdSD0"},
{"content":{"body":"it's an argument for homogeneity and comprehensibility.","m.mentions":{},"msgtype":"m.text"},"ts":1721443541440,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$FkK_A2Yz26TvrwCj4ntOrmUt89NsPj4TnrgB8KTllqI"},
{"content":{"body":"for homogeneity, wouldn't that also have to apply to events which are dispatched synchronously from some API? `el.click` for example","format":"org.matrix.custom.html","formatted_body":"for homogeneity, wouldn't that also have to apply to events which are dispatched synchronously from some API? <code>el.click</code> for example","m.mentions":{},"msgtype":"m.text"},"ts":1721443621458,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UCUT28fG2aCbEhCyN9Ws0805TXLL5IMPSMBomZVBJvY"},
{"content":{"body":"i guess homogeneity is a matter of perspective, because the property names themselves would be heterogeneous, but the meaning of any given property is homogeneous","m.mentions":{},"msgtype":"m.text"},"ts":1721443637503,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$z2BAv9-k9jz_nSfvudI0laxTvcG0y7Z5yQw32nsqJP8"},
{"content":{"body":"but yes, I would include those as well - el.click would set the dispatchSnapshot to the snapshot in which click was called.","m.mentions":{},"msgtype":"m.text"},"ts":1721443666945,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$M-fp7yKd_0GNrQzK5oVbhb31j-SDHPlgU1cq-2qZLng"},
{"content":{"body":"why dispatchSnapshot? why not clickSnapshot?","m.mentions":{},"msgtype":"m.text"},"ts":1721443682860,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YEIljVakyzSCA1pvks3qIr0g7eqtvN3DS5XL2Eed_eI"},
{"content":{"body":"every event gets a dispatch snapshot and it's always defined the same way - since click dispatches synchronously, it doesn't need a separate snapshot","m.mentions":{},"msgtype":"m.text"},"ts":1721443721427,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h7KpXikq2anyWr45mvNd_mpHgTkRYanY2hi5Jn2UUa8"},
{"content":{"body":"but wouldn't you also have to look up what exactly that means for each event if you're trying to use it?","m.mentions":{},"msgtype":"m.text"},"ts":1721443759496,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bDaqWf-v05LGvMLFS1Wb2rzg_jbrhJUq5WTA3GQw3_c"},
{"content":{"body":"No, you just need to know whether the event is dispatched while executing ecmascript code or else by the event loop.  If the former, it's always going to be whatever snapshot was active when the event started dispatching, and if the latter then it's always null (or possibly but hopefully not HostGetTopLevelAsyncContextMapping)","m.mentions":{},"msgtype":"m.text"},"ts":1721443889233,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$7uCsp4Kxc2Gnu1NI9W9-wdZJPuGiech8VV0BCo-_Xus"},
{"content":{"body":"The bit about null is slightly problematic because as it's currently spec'd, the `[[AsyncContextMapping]]` _isn't_ set to null during the event loop, so it would require a bit of special casing, which I'd rather avoid","format":"org.matrix.custom.html","formatted_body":"The bit about null is slightly problematic because as it's currently spec'd, the <code>[[AsyncContextMapping]]</code> <em>isn't</em> set to null during the event loop, so it would require a bit of special casing, which I'd rather avoid","m.mentions":{},"msgtype":"m.text"},"ts":1721443964463,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$yWvEEwJk4C9IgwlFXlp12Aw5kfLbFcuKuigOWnp_e6g"},
{"content":{"body":"if you're a developer trying to use the snapshot of an event for something, you would usually be writing code that works for multiple different event dispatches, and you'd also need to know what web API call dispatches the current event","m.mentions":{},"msgtype":"m.text"},"ts":1721443993199,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lcn4Hu_v7bLnzfRfPTVZr28OjgD-4PU-cIWYcC-PT8k"},
{"content":{"body":"I don't see how that's different for async dispatches","m.mentions":{},"msgtype":"m.text"},"ts":1721444001487,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hPw7Ks6iqc2Jc-NXUvkPMuvFYSlXMzRiNmWVWf-hHTM"},
{"content":{"body":"If the mapping lived on the execution context, it might be easier to make it null during the event loop","m.mentions":{},"msgtype":"m.text"},"ts":1721444003047,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$QWzsCjpKJ5gGdtzdAeWTberwm_IYn3v1H-vE3E5o7rs"},
{"content":{"body":"I assume you already know what event you're responding to, and you certainly know you're in an event handler at all, since you need to read something off of an event object in the first place.  But that's what I was getting at before - are you more likely to just want _whatever_ non-null snapshot you can get, or are you more likely to want fine-grained control to get the snapshot from a particular time?","format":"org.matrix.custom.html","formatted_body":"I assume you already know what event you're responding to, and you certainly know you're in an event handler at all, since you need to read something off of an event object in the first place.  But that's what I was getting at before - are you more likely to just want <em>whatever</em> non-null snapshot you can get, or are you more likely to want fine-grained control to get the snapshot from a particular time?","m.mentions":{},"msgtype":"m.text"},"ts":1721444173700,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$0G6W-lYBX6N_o2VF5BWkzCo6sNh0loT39vqFrrs2OME"},
{"content":{"body":"And as I said above, I don't know the answer to that.","m.mentions":{},"msgtype":"m.text"},"ts":1721444193669,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$-cn-sy9-FDoWqTRYs7WSdJ_gMUCV2R1-BHOf3tnaY2Q"},
{"content":{"body":"but userland code could easily maintain a mapping from event types to property names, if it wanted to","m.mentions":{},"msgtype":"m.text"},"ts":1721444230081,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$4rI6lnWPmmgDQqzPnuCQAuRfGyHDv9y0IGblBklGDRE"},
{"content":{"body":"whereas putting that special casing directly in the engine (and polyfills) is unconditionally expensive and cuts off expressibility and understandability","m.mentions":{},"msgtype":"m.text"},"ts":1721444289431,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$R1-Eq9Mseqwf_82mFHzXl7yDcMlHLxYqjh7d2tzgd2Q"},
{"content":{"body":"Yes, you know you're in an event handler, and you know what event you're responding to. But if you're saying that for async dispatches developers might need to know which web API call's context is the dispatch snapshot, I don't see why that is not also the case for sync dispatches. The fact that the event is dispatched synchronously doesn't change anything other than possibly the current state of non-local variables the event listener might have access to.","m.mentions":{},"msgtype":"m.text"},"ts":1721444423056,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$VgY35bPoBZUcQhRm6RCxkZi_oMUJumTArosztEl_z-c"},
{"content":{"body":"You're registering the event in a completely different place from where it is dispatched in both cases","m.mentions":{},"msgtype":"m.text"},"ts":1721444466768,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$nDBfPShSftTO8C6uskpDZMVuhPGxDR8KJM4fFAMt3dU"},
{"content":{"body":" * You're registering the event in a different place from where it is dispatched in both cases","m.mentions":{},"m.new_content":{"body":"You're registering the event in a different place from where it is dispatched in both cases","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$nDBfPShSftTO8C6uskpDZMVuhPGxDR8KJM4fFAMt3dU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721444477653,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$XyUoSNLM_18CzThhyE9EY-lzQSsLiRtjBBLxXmXDAdU"},
{"content":{"body":"I think the difference is that async dispatches are inherently heterogeneous, whereas sync dispatches have a lot more in common between them.  Also, async dispatches are _much_ more likely to prefer the default registration context anyway.","format":"org.matrix.custom.html","formatted_body":"I think the difference is that async dispatches are inherently heterogeneous, whereas sync dispatches have a lot more in common between them.  Also, async dispatches are <em>much</em> more likely to prefer the default registration context anyway.","m.mentions":{},"msgtype":"m.text"},"ts":1721444534736,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$psMbEaKsGaHf9OVD_PTJMJqVTLomqsq2pdScvKG-OBk"},
{"content":{"body":"One theory I have is that one-time callbacks are more likely to want registration-snapshot, while multiply-called callbacks are more likely to want a causal snapshot.  I also believe async dispatches tend to correlate more with one-time listeners.","m.mentions":{},"msgtype":"m.text"},"ts":1721444696861,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$M2V1QQJ-SKgoD2KFVUuttewgvTf6WzRoV0qXUfOQldA"},
{"content":{"body":"(this isn't a hard rule, of course - abort event is one-time and synchronous, for instance)","m.mentions":{},"msgtype":"m.text"},"ts":1721444733560,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$VPXbwm7dI4eK1t7OF2BJKEW_jLnvhyLYptnCBwGheTU"},
{"content":{"body":"But what it sounds like you're worried about is an async-dispatch event where neither the registration snapshot, nor whatever synchronous dispatch snapshot if there is one, is correct - but I can't come up with any examples of that.","m.mentions":{},"msgtype":"m.text"},"ts":1721444855248,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$XG-i-2FLyDcoJQTWH4Bn-CT5VIB9-g8R9sOBRUGw9Uk"},
{"content":{"body":" * But what it sounds like you're worried about is an async-dispatch event where neither the registration snapshot, nor whatever synchronous dispatch snapshot if there happens to be one, is correct - but I can't come up with any examples of that.","m.mentions":{},"m.new_content":{"body":"But what it sounds like you're worried about is an async-dispatch event where neither the registration snapshot, nor whatever synchronous dispatch snapshot if there happens to be one, is correct - but I can't come up with any examples of that.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$XG-i-2FLyDcoJQTWH4Bn-CT5VIB9-g8R9sOBRUGw9Uk","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721444880539,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$XMC1-msGS7CTysDPtxv0qrcDk7kOI2dekYag5G86Ht8"},
{"content":{"body":"i mean, i guess that's the point of the follow-ups - throwSnapshot, or sendSnapshot, etc","m.mentions":{},"msgtype":"m.text"},"ts":1721444961554,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$ySvK32Ozl9xH7A0b6rPcrWrcKxm3VerOMCc3escq-Bo"},
{"content":{"body":"I don't think there would be any cases where an event would have both non-null synchronous and asynchronous dispatch snapshots","m.mentions":{},"msgtype":"m.text"},"ts":1721444992997,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BT8PCaEJQ651D8rQ8Gyjc4DZI12x4GkxdhBmM1Ltb18"},
{"content":{"body":"but again, I think those are niche cases where you probably know exactly what you need","m.mentions":{},"msgtype":"m.text"},"ts":1721444995925,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Twip1q_5Wq0p5fkRFNYSvPPbROrjvoDUhCsZiDzpsmQ"},
{"content":{"body":"> <@stephenhicks:matrix.org> One theory I have is that one-time callbacks are more likely to want registration-snapshot, while multiply-called callbacks are more likely to want a causal snapshot.  I also believe async dispatches tend to correlate more with one-time listeners.\n\nthat makes sense, but shouldn't it be up to the event listener to use the snapshot or not depending on whether it's one-time?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$M2V1QQJ-SKgoD2KFVUuttewgvTf6WzRoV0qXUfOQldA?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@stephenhicks:matrix.org\">@stephenhicks:matrix.org</a><br>One theory I have is that one-time callbacks are more likely to want registration-snapshot, while multiply-called callbacks are more likely to want a causal snapshot.  I also believe async dispatches tend to correlate more with one-time listeners.</blockquote></mx-reply>that makes sense, but shouldn't it be up to the event listener to use the snapshot or not depending on whether it's one-time?","m.mentions":{"user_ids":["@stephenhicks:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$M2V1QQJ-SKgoD2KFVUuttewgvTf6WzRoV0qXUfOQldA"}},"msgtype":"m.text"},"ts":1721445132578,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$mTUdvXM-Y0i71JPFgry-zhYprCx4KdrSWSUgPWz6mfk"},
{"content":{"body":"the event listener knows that far better than the browser/spec","m.mentions":{},"msgtype":"m.text"},"ts":1721445161413,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$lqqDmLr10cBTVIqdD5fgjExOEn_-Me6UwwdTCnoWC7U"},
{"content":{"body":"I can see how for error and unhandledrejection, using the same property might be confusing, and maybe there it makes sense","m.mentions":{},"msgtype":"m.text"},"ts":1721445255262,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$zotxNZfUwoY3OtjVPEOnAPQ_ou4lmmNC2j_s1KC5u5A"},
{"content":{"body":"huh, I think I see where the disconnect between us is","m.mentions":{},"msgtype":"m.text"},"ts":1721445357896,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$pf9aiIt6TmZBEOAzeTXWe13HSYgjsHPjd_Ri9UVCUSc"},
{"content":{"body":"you're seeing the whole of XHR boilerplate as one single thing that you do to set up the XHR events","m.mentions":{},"msgtype":"m.text"},"ts":1721445371385,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$t3qq7U5vrVFW4KKGso9LLPbt3NG800MC9hU66otUhu0"},
{"content":{"body":"and so creating the XHR object vs `xhr.load()` vs `xhr.send()` are just parts of that process","format":"org.matrix.custom.html","formatted_body":"and so creating the XHR object vs <code>xhr.load()</code> vs <code>xhr.send()</code> are just parts of that process","m.mentions":{},"msgtype":"m.text"},"ts":1721445396901,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$BDirNS1Xmc28JvvTwHIFKH-BGa9u_cI3icS8-rQsk-I"},
{"content":{"body":"and you'd have to look up exactly what part of that causes the event","m.mentions":{},"msgtype":"m.text"},"ts":1721445414910,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$PfRK8oq8pFTE0cEL7__rXSmLVQm2VNtyk-5SGFWV1Qw"},
{"content":{"body":"but in that case, is there any need for developers to distinguish between those snapshots, since they'll almost always happen in the same context?","m.mentions":{},"msgtype":"m.text"},"ts":1721445520857,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$j023U6N4-R7UpdgnwXaLG5O2tRePNPzA85hLXf7nFG8"},
{"content":{"body":"right, which is also the same context that the listener is registered in","m.mentions":{},"msgtype":"m.text"},"ts":1721445545900,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$bdgcVagdGIPZw3GwPVKD9IzVvgJkcarmB1XxNbsGlpU"},
{"content":{"body":"well, I think you can reuse an XHR object for multiple connections","m.mentions":{},"msgtype":"m.text"},"ts":1721445577129,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$sH6jpkaY7T2ngCgT_T_DII1muzZGhDiaDgheqC3nRA4"},
{"content":{"body":"so in most cases, no, the difference is irrelevant - but it's still a difference that people just won't know or have a good sense of","m.mentions":{},"msgtype":"m.text"},"ts":1721445579362,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$frXch8hifoRTns5mHhiI7ASveimSOPAix90skwnl7-M"},
{"content":{"body":"but that's not commonly done","m.mentions":{},"msgtype":"m.text"},"ts":1721445581578,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$xH3WZzKJU0G-_06HLZpROEF0NbwHNNiIVHUwLqTWbNQ"},
{"content":{"body":"you can","m.mentions":{},"msgtype":"m.text"},"ts":1721445582416,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$Q2GFAo49Zr6TQ7V6KpobiSdE-_x95EyQdOrT79lYgYY"},
{"content":{"body":"and in that case, the distinction would matter","m.mentions":{},"msgtype":"m.text"},"ts":1721445603403,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$07HL0l3rKVrSEohi1NUUZqA7zM7KO7Vz3Y-c_Z5jhpM"},
{"content":{"body":"the distinction between registration and load/send, yes, but not between load and send","m.mentions":{},"msgtype":"m.text"},"ts":1721445644855,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$4jLO61TlarU1zCB-jUFA5KrBf-JhVlcZs1DmNdNRz-k"}
]