[
{"content":{"body":"(aside: I assume we did whatever we needed to to get on the agenda for next month?)","m.mentions":{},"msgtype":"m.text"},"ts":1721434756883,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$lJ1tVcCW1UW9gn0DoqAUSmRTm-JMRFdgWOGlbJFmUqA"},
{"content":{"body":"What about null vs \"empty\"?  I think the important example to consider here is the dispatchSnapshot for an event dispatched directly from the event loop, rather than programmatically.  I'll say upfront that I think having it be null for this case is desirable, since there's no good way to determine that some non-null value is \"empty\".  But I can also see a consistency argument for it being `HostGetTopLevelAsyncContextMapping(null)` - this is the initial value for agentRecord.[[AsyncContextMapping]], and is therefore presumably its value at the exact time that the event is created/dispatched.  So any other value (including `null`) is presumably more complicated to spec (and also more challenging to polyfill).","format":"org.matrix.custom.html","formatted_body":"What about null vs \"empty\"?  I think the important example to consider here is the dispatchSnapshot for an event dispatched directly from the event loop, rather than programmatically.  I'll say upfront that I think having it be null for this case is desirable, since there's no good way to determine that some non-null value is \"empty\".  But I can also see a consistency argument for it being <code>HostGetTopLevelAsyncContextMapping(null)</code> - this is the initial value for agentRecord.[[AsyncContextMapping]], and is therefore presumably its value at the exact time that the event is created/dispatched.  So any other value (including <code>null</code>) is presumably more complicated to spec (and also more challenging to polyfill).","m.mentions":{},"msgtype":"m.text"},"ts":1721435312154,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$LLdY51PKB97vLdWqoEeuG_fsYE_1W0a8n5iPyzEpIMI"},
{"content":{"body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to opt into having `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to opt into having <code>dispatchSnapshot</code> be null","m.mentions":{},"msgtype":"m.text"},"ts":1721440670348,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$hZR3bPSdwdX4ouiz-0zfdULRwXJmQHdIIjJpAJa2K9g"},
{"content":{"body":" * Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":" * Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have <code>dispatchSnapshot</code> be null","m.mentions":{},"m.new_content":{"body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have `dispatchSnapshot` be null","format":"org.matrix.custom.html","formatted_body":"Polyfills are a reason why I think, regardless of what we end up doing by default, there needs to be a way to have <code>dispatchSnapshot</code> be null","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$hZR3bPSdwdX4ouiz-0zfdULRwXJmQHdIIjJpAJa2K9g","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1721440686867,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$wEivVvqPN5UZYGz_BiA1nwK1WhLaPK3MxWRkHrtLR7c"},
{"content":{"body":"the event constructor's second argument is an options bag, that could be an additional option there","m.mentions":{},"msgtype":"m.text"},"ts":1721440736412,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$OuVqU0BXJgO0mFw_ARZ4gK_SWCLkhuaIhUeKFFqeHFU"},
{"content":{"body":"about challenging to spec, since we're considering a small initial rollout, events would have a null snapshot by default, with an option in the spec to use the current context instead","m.mentions":{},"msgtype":"m.text"},"ts":1721440975956,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$G0H75yR1fFliEAsKt6PmTuD1Bpe2Bmok_59UZ0J_akE"},
{"content":{"body":"so distinguishing null vs the empty context would not be complicated, because only event dispatches that could have a causal context would be updated to use that option","m.mentions":{},"msgtype":"m.text"},"ts":1721441027609,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$WuNR5_PIHfWniiAUzmFPKGV1dauuvGy57j_-kt3OhYA"},
{"content":{"body":"What I was suggesting before was that we might not need to do a small initial rollout if we just scope it narrowly - instead, _every_ event gets a `dispatchSnapshot`, and we handle other use cases with different properties.","format":"org.matrix.custom.html","formatted_body":"What I was suggesting before was that we might not need to do a small initial rollout if we just scope it narrowly - instead, <em>every</em> event gets a <code>dispatchSnapshot</code>, and we handle other use cases with different properties.","m.mentions":{},"msgtype":"m.text"},"ts":1721442804987,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$vVQZZNpaQWsZDl5hWMDThhdPtIQPl0iMMOkS4QXaC9U"},
{"content":{"body":"wouldn't there still have to be a small initial rollout for those other properties?","m.mentions":{},"msgtype":"m.text"},"ts":1721443116502,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$CAaxuabWAHHKi4DNCZ0qZ4LWpNdLnu8sjc3WUTtS49E"},
{"content":{"body":"maybe?  but they would also be narrowly-scoped so it should also be possible to roll them out 100%","m.mentions":{},"msgtype":"m.text"},"ts":1721443165340,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$txRVDISVxQ9WYVCs2SqbI4vzzCMa1x7EM3NE8u_mqeA"},
{"content":{"body":"though they would only ever include a small subset of events","m.mentions":{},"msgtype":"m.text"},"ts":1721443199036,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$VkBGqIMvN8FhCpMmFdE3nj6HQ8Y2LplJhSC-a9t94PY"},
{"content":{"body":"i.e. `throwSnapshot` only makes sense on error/rejection events","format":"org.matrix.custom.html","formatted_body":"i.e. <code>throwSnapshot</code> only makes sense on error/rejection events","m.mentions":{},"msgtype":"m.text"},"ts":1721443209614,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$iFBOTsJ3p-kd12c_jyCfdsAH1HRdvrL8LYvoKXspY1A"},
{"content":{"body":"if we think of the future when we've achieved 100% rollout, I don't think the distinction between the different scopes will make sense","m.mentions":{},"msgtype":"m.text"},"ts":1721443296080,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$1XNPzI7zTRldncmuuWGjn3N7f-Zxp0xFrBUwuUAa0ww"},
{"content":{"body":"Ultimately the difference is in conceptualizing what `fooSnapshot` means.  What I'm suggesting is that for any given `foo` you can look up _exactly_ what it means, whereas the alternative is that you need to puzzle through \"okay, this is a 'bar' event, so _its_ `fooSnapshot` comes from when such-and-such happened\"","format":"org.matrix.custom.html","formatted_body":"Ultimately the difference is in conceptualizing what <code>fooSnapshot</code> means.  What I'm suggesting is that for any given <code>foo</code> you can look up <em>exactly</em> what it means, whereas the alternative is that you need to puzzle through \"okay, this is a 'bar' event, so <em>its</em> <code>fooSnapshot</code> comes from when such-and-such happened\"","m.mentions":{},"msgtype":"m.text"},"ts":1721443433649,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$C-j-YsO1eUTcu27eyQaXlic0BTjFHKD4YqvotXbdSD0"},
{"content":{"body":"it's an argument for homogeneity and comprehensibility.","m.mentions":{},"msgtype":"m.text"},"ts":1721443541440,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$FkK_A2Yz26TvrwCj4ntOrmUt89NsPj4TnrgB8KTllqI"},
{"content":{"body":"for homogeneity, wouldn't that also have to apply to events which are dispatched synchronously from some API? `el.click` for example","format":"org.matrix.custom.html","formatted_body":"for homogeneity, wouldn't that also have to apply to events which are dispatched synchronously from some API? <code>el.click</code> for example","m.mentions":{},"msgtype":"m.text"},"ts":1721443621458,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$UCUT28fG2aCbEhCyN9Ws0805TXLL5IMPSMBomZVBJvY"},
{"content":{"body":"i guess homogeneity is a matter of perspective, because the property names themselves would be heterogeneous, but the meaning of any given property is homogeneous","m.mentions":{},"msgtype":"m.text"},"ts":1721443637503,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$z2BAv9-k9jz_nSfvudI0laxTvcG0y7Z5yQw32nsqJP8"},
{"content":{"body":"but yes, I would include those as well - el.click would set the dispatchSnapshot to the snapshot in which click was called.","m.mentions":{},"msgtype":"m.text"},"ts":1721443666945,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$M-fp7yKd_0GNrQzK5oVbhb31j-SDHPlgU1cq-2qZLng"},
{"content":{"body":"why dispatchSnapshot? why not clickSnapshot?","m.mentions":{},"msgtype":"m.text"},"ts":1721443682860,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$YEIljVakyzSCA1pvks3qIr0g7eqtvN3DS5XL2Eed_eI"},
{"content":{"body":"every event gets a dispatch snapshot and it's always defined the same way - since click dispatches synchronously, it doesn't need a separate snapshot","m.mentions":{},"msgtype":"m.text"},"ts":1721443721427,"senderName":"Steve Hicks","senderId":"@stephenhicks:matrix.org","id":"$h7KpXikq2anyWr45mvNd_mpHgTkRYanY2hi5Jn2UUa8"},
{"content":{"body":"but wouldn't you also have to look up what exactly that means for each event if you're trying to use it?","m.mentions":{},"msgtype":"m.text"},"ts":1721443759496,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$bDaqWf-v05LGvMLFS1Wb2rzg_jbrhJUq5WTA3GQw3_c"}
]