[
{"content":{"body":"interesting that someone noticed... https://github.com/denoland/deno/issues/25275. i think it's only incidental that it works in nodejs because node happened to implement module loading in js where promise hooks preserved the context.","m.mentions":{},"msgtype":"m.text"},"ts":1724904950353,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$NjaTV7MJMn4CmYm8WPC0HbaARK-c-FhOUO8fcfShrCs"},
{"content":{"body":"We’ve discussed this before, and I think we decided that module evaluation always happens in a clean context?","msgtype":"m.text"},"ts":1724910134871,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$028ctcl8lQyFRidsRdO0qsWswZpKABI_ghldqZu9USg"},
{"content":{"body":"Ie, Deno’s behavior now is correct, and this is an intentional difference from ALS.","msgtype":"m.text"},"ts":1724910154454,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z0S0OWtTL4XzaIpNdX9zTjNsBjd62guWzI1Tn9mT76o"},
{"content":{"body":"the PR currently leaves it to be host defined. but either way noticing how people react to things is always useful i think.","m.mentions":{},"msgtype":"m.text"},"ts":1724910586090,"senderName":"snek","senderId":"@devsnek:matrix.org","id":"$bcQe0n2LcpTLiX9avF8tTrKKYcK-3EVNjiYAp9quTvk"},
{"content":{"body":"> <@devsnek:matrix.org> the PR currently leaves it to be host defined. but either way noticing how people react to things is always useful i think.\n\nwe've been discussing this as part of the web integration","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eQuZUAhGqudVFPodUG:matrix.org/$bcQe0n2LcpTLiX9avF8tTrKKYcK-3EVNjiYAp9quTvk?via=igalia.com&via=matrix.org&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@devsnek:matrix.org\">@devsnek:matrix.org</a><br>the PR currently leaves it to be host defined. but either way noticing how people react to things is always useful i think.</blockquote></mx-reply>we've been discussing this as part of the web integration","m.mentions":{"user_ids":["@devsnek:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bcQe0n2LcpTLiX9avF8tTrKKYcK-3EVNjiYAp9quTvk"}},"msgtype":"m.text"},"ts":1724931394535,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$blvBj3QEybU-gtSqB3lV17ef0Eq2J8m56Xsknqsg-z4"},
{"content":{"body":"nicolo-ribaudo argues that since module evaluation is idempotent, it should depend on ambient state as little as possible","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> argues that since module evaluation is idempotent, it should depend on ambient state as little as possible","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1724931445399,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$VLhp3nQjlz2pWPL4nrV5l0ZbQmR7RANoHeMI5OVCp7I"},
{"content":{"body":" * nicolo-ribaudo argues that since module evaluation is idempotent, it should not depend on ambient state (whenever possible)","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> argues that since module evaluation is idempotent, it should not depend on ambient state (whenever possible)","m.mentions":{},"m.new_content":{"body":"nicolo-ribaudo argues that since module evaluation is idempotent, it should not depend on ambient state (whenever possible)","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> argues that since module evaluation is idempotent, it should not depend on ambient state (whenever possible)","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"m.relates_to":{"event_id":"$VLhp3nQjlz2pWPL4nrV5l0ZbQmR7RANoHeMI5OVCp7I","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724931463822,"senderName":"Andreu Botella","senderId":"@abotella:igalia.com","id":"$oOQz-BZ3cnB7SgXqhcBgoNhPfubp65N14I5dhSfXDgo"},
{"content":{"body":"yeah, we discussed this at module harmony a couple weeks ago","m.mentions":{},"msgtype":"m.text"},"ts":1724933829669,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$vkb_FVJrHds_fxXx_8uBVu7kcYahj2wZfceiXwcT5f8"},
{"content":{"body":"[#98](https://github.com/tc39/proposal-async-context/pull/98) leaves it to be host defined because the \"clean context\" may contain host defined initial entries, like task attribution. However, this does allows host to propogate the context of very first call to `import()` or `import.defer().exported`. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://github.com/tc39/proposal-async-context/pull/98\">#98</a> leaves it to be host defined because the \"clean context\" may contain host defined initial entries, like task attribution. However, this does allows host to propogate the context of very first call to <code>import()</code> or <code>import.defer().exported</code>. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","m.mentions":{},"msgtype":"m.text"},"ts":1724939035726,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$-FMe_MUTge_HlZiCbEwWlUX9G-6GVxJttu6swDzd5eU"},
{"content":{"body":" * [#98](https://github.com/tc39/proposal-async-context/pull/98) leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allows host to propogate the context of very first call to `import()` or `import.defer().exported`. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://github.com/tc39/proposal-async-context/pull/98\">#98</a> leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allows host to propogate the context of very first call to <code>import()</code> or <code>import.defer().exported</code>. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","m.mentions":{},"m.new_content":{"body":"[#98](https://github.com/tc39/proposal-async-context/pull/98) leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allows host to propogate the context of very first call to `import()` or `import.defer().exported`. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://github.com/tc39/proposal-async-context/pull/98\">#98</a> leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allows host to propogate the context of very first call to <code>import()</code> or <code>import.defer().exported</code>. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-FMe_MUTge_HlZiCbEwWlUX9G-6GVxJttu6swDzd5eU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724939052782,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$RLLTRzfIUXPS8wnfYSMMcrWVsKoo8-eXIJTRRu_eiag"},
{"content":{"body":" * [#98](https://github.com/tc39/proposal-async-context/pull/98) leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allow host to propogate the context of very first call to `import()` or `import.defer().exported`. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://github.com/tc39/proposal-async-context/pull/98\">#98</a> leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allow host to propogate the context of very first call to <code>import()</code> or <code>import.defer().exported</code>. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","m.mentions":{},"m.new_content":{"body":"[#98](https://github.com/tc39/proposal-async-context/pull/98) leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allow host to propogate the context of very first call to `import()` or `import.defer().exported`. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://github.com/tc39/proposal-async-context/pull/98\">#98</a> leaves it to be host defined because the \"clean context\" can contain host defined initial entries. However, this does allow host to propogate the context of very first call to <code>import()</code> or <code>import.defer().exported</code>. Maybe an editor's note can clarify that \"it is recommended to not propagate the context\"?","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-FMe_MUTge_HlZiCbEwWlUX9G-6GVxJttu6swDzd5eU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1724939063688,"senderName":"Chengzhong Wu","senderId":"@legendecas:matrix.org","id":"$N6OfNtQhpjZI4y_cpTiKm8rz9szzdxLrS4YZrPGee2M"},
{"content":{"body":"We should normatively enforce the behavior we want","msgtype":"m.text"},"ts":1724939146391,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Rwn5GDkUy8qATniRWBvmc1DfX63-wsTqKk8tSOtPYfc"},
{"content":{"body":"Module and script records could snapshot the context where they run, and run module.Evaluate() in dynamic import using that context ","msgtype":"m.text"},"ts":1724939183748,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XCtKPDV4xDIcnsxQugy8-A3T7CKMsfANvE3Wy1FXWdk"}
]