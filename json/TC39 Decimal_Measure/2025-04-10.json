[
{"content":{"body":"Niocolo's reply does answer my questions, but it doesn't really make me happy about `Decimal.Amount`. According to the current version of the slides it's described as:\n> Today, we propose a new `Decimal.Amount` primordial for storing a (1) decimal value (2) with a precision (3) but without a unit.\n\nThat last part in particular seems rather novel and surprising, and I can't find any mention of such an approach in the repo or meeting notes. I proposed the term \"amount\" as an alternative for \"measure\", but now it's being taken up as a part of Decimal and won't include any units?","format":"org.matrix.custom.html","formatted_body":"<p>Niocolo's reply does answer my questions, but it doesn't really make me happy about <code>Decimal.Amount</code>. According to the current version of the slides it's described as:</p>\n<blockquote>\n<p>Today, we propose a new <code>Decimal.Amount</code> primordial for storing a (1) decimal value (2) with a precision (3) but without a unit.</p>\n</blockquote>\n<p>That last part in particular seems rather novel and surprising, and I can't find any mention of such an approach in the repo or meeting notes. I proposed the term \"amount\" as an alternative for \"measure\", but now it's being taken up as a part of Decimal and won't include any units?</p>\n","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$7KvVVJ_gi_ZBx_Lwx7EhicNB02xg-UVKslH1BAIA_tE"}},"msgtype":"m.text"},"ts":1744263065129,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Hq-t-3RAzTZB_xJ0eysetGpEFK9hOmcSjoz-VpjrfwI"},
{"content":{"body":"My mental model of `Decimal.Amount` is that it contains both a precision and a unit","format":"org.matrix.custom.html","formatted_body":"My mental model of <code>Decimal.Amount</code> is that it contains both a precision and a unit","m.mentions":{},"msgtype":"m.text"},"ts":1744263576205,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$jERFTczpKjXsUu6En8XF01GDtEKwlQQX4h8XpDdnmYQ"},
{"content":{"body":"* My mental model of `Decimal.Amount` is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.","format":"org.matrix.custom.html","formatted_body":"* My mental model of <code>Decimal.Amount</code> is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.","m.mentions":{},"m.new_content":{"body":"My mental model of `Decimal.Amount` is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.","format":"org.matrix.custom.html","formatted_body":"My mental model of <code>Decimal.Amount</code> is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$jERFTczpKjXsUu6En8XF01GDtEKwlQQX4h8XpDdnmYQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744263674124,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$wMmGGTm1ZA50dV6t7oBptO8QkXkBd7PvimRWnVPT-Dg"},
{"content":{"body":"I don't agree with the framing of the motivation on slide 4. There wasn't consensus that the proposals remain separate; I would describe it as skepticism raised by some delegates that the use cases were similar enough to merge them.","m.mentions":{},"msgtype":"m.text"},"ts":1744264000126,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$u1Wd-GZLM9cK6ONrcLno-ElxW2hquu9HXY31l6DDXvE"},
{"content":{"body":"We should highlight that we took home the feedback about building a _protocol_, and we investigated it. We found, however, that only the primordial brings immutability, ergonomics, and interoperability to the table. To address the feedback about a top-level `Amount` not seeming well-motivated, we are coming with an updated proposal that scopes the primordial under `Decimal.Amount`, to make clear that this is a type that is designed to live in the Decimal universe.","format":"org.matrix.custom.html","formatted_body":"We should highlight that we took home the feedback about building a <em>protocol</em>, and we investigated it. We found, however, that only the primordial brings immutability, ergonomics, and interoperability to the table. To address the feedback about a top-level <code>Amount</code> not seeming well-motivated, we are coming with an updated proposal that scopes the primordial under <code>Decimal.Amount</code>, to make clear that this is a type that is designed to live in the Decimal universe.","m.mentions":{},"msgtype":"m.text"},"ts":1744264233422,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$kvFfB33XuVwIE4Tvf8ZXQihTFj2hgCwaBzIlhNKL5kA"},
{"content":{"body":"why would \"amount\" include a unit?","m.mentions":{},"msgtype":"m.text"},"ts":1744268242391,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts"},
{"content":{"body":"amount to me is like a magnitude, it's unitless","m.mentions":{},"msgtype":"m.text"},"ts":1744268251979,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YkPcbhud67l8quOkMTI61SWUdCl-5zV5v1snHQB3zlM"},
{"content":{"body":"> <@ljharb:matrix.org> why would \"amount\" include a unit?\n\nThe idea is that:\n- the decimal proposal introduces plain decimals, exactly as it was for the past year\n- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\n- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\n\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!NnKyFxSjabKpyjbPcL:matrix.org/$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />why would &quot;amount&quot; include a unit?</blockquote></mx-reply><p>The idea is that:<br />- the decimal proposal introduces plain decimals, exactly as it was for the past year<br />- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.<br />- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.</p>\n<p>Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator)</p>","m.relates_to":{"m.in_reply_to":{"event_id":"$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts"}},"msgtype":"m.text"},"ts":1744268965928,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mp7b4vVIMiRc77oMFE46o8ZRgZQ4ybEsyZJrEKqIcKQ"},
{"content":{"body":"* The idea is that:\n- the decimal proposal introduces plain decimals, exactly as it was for the past year\n- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\n- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.\n","m.new_content":{"body":"> <@ljharb:matrix.org> why would \"amount\" include a unit?\n\nThe idea is that:\n- the decimal proposal introduces plain decimals, exactly as it was for the past year\n- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\n- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!NnKyFxSjabKpyjbPcL:matrix.org/$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a><br />why would &quot;amount&quot; include a unit?</blockquote></mx-reply><p>The idea is that:</p>\n<ul>\n<li>the decimal proposal introduces plain decimals, exactly as it was for the past year</li>\n<li>for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.</li>\n<li>the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.<br />Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.</li>\n</ul>","msgtype":"m.text"},"m.relates_to":{"event_id":"$mp7b4vVIMiRc77oMFE46o8ZRgZQ4ybEsyZJrEKqIcKQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744269006906,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aMrdf1mXU95ZDJKMOsEW_F0nacjL4_T4WgsOJvWH6sQ"},
{"content":{"body":"* The idea is that:\nthe decimal proposal introduces plain decimals, exactly as it was for the past year\nfor good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\nthe measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.\n","m.new_content":{"body":"> <@ljharb:matrix.org> why would \"amount\" include a unit?\n\nThe idea is that:\nthe decimal proposal introduces plain decimals, exactly as it was for the past year\nfor good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\nthe measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.\n","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!NnKyFxSjabKpyjbPcL:matrix.org/$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a><br />why would &quot;amount&quot; include a unit?</blockquote></mx-reply>The idea is that:<br />the decimal proposal introduces plain decimals, exactly as it was for the past year<br />for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.<br />the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.<br />Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.","msgtype":"m.text"},"m.relates_to":{"event_id":"$mp7b4vVIMiRc77oMFE46o8ZRgZQ4ybEsyZJrEKqIcKQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744269015365,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$asmJyL7yjD3Jk8sgPEt4N_foMkRtbJjZ1P2e2tEtVBI"},
{"content":{"body":"* The idea is that:\n\n- the decimal proposal introduces plain decimals, exactly as it was for the past year\n\n- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\n\n- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\n\n\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.","m.new_content":{"body":"> <@ljharb:matrix.org> why would \"amount\" include a unit?\n\nThe idea is that:\n\n- the decimal proposal introduces plain decimals, exactly as it was for the past year\n\n- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.\n\n- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.\n\n\nWhether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!NnKyFxSjabKpyjbPcL:matrix.org/$lFWyVd6p7iIi6Q-a84f8RtCt4lGrMamRHk-JQIph-ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a><br />why would &quot;amount&quot; include a unit?</blockquote></mx-reply><p>The idea is that:</p>\n<ul>\n<li>\n<p>the decimal proposal introduces plain decimals, exactly as it was for the past year</p>\n</li>\n<li>\n<p>for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.</p>\n</li>\n<li>\n<p>the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.</p>\n</li>\n</ul>\n<p>Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.</p>","msgtype":"m.text"},"m.relates_to":{"event_id":"$mp7b4vVIMiRc77oMFE46o8ZRgZQ4ybEsyZJrEKqIcKQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744269038824,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YtxeU-aAlOW2TXiy2veehSugNwq0JbEs8yhUMZbJ0YQ"},
{"content":{"body":"Oh well I give up on formatting this as a list","msgtype":"m.text"},"ts":1744269050378,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$yDoUag_duR-_tf4ZdMvdXJxkpSrivg3XrFoOPDOHEUY"},
{"content":{"body":"I was proposing that `Decimal.Amount` adds both precision and unit. There is no middle intermediate type; it is just a `Decimal.Amount` with a null unit. Some delegates were already skeptical of adding 1 type, so I didn't want to push my luck with 2 types (and then we'd have to name them), plus Luca pointed out that there isn't really any JS duck-typing advantage to distinguishing \"null unit\" from \"type does not support a unit\". So it seems simplest to keep them as one type.","format":"org.matrix.custom.html","formatted_body":"I was proposing that <code>Decimal.Amount</code> adds both precision and unit. There is no middle intermediate type; it is just a <code>Decimal.Amount</code> with a null unit. Some delegates were already skeptical of adding 1 type, so I didn't want to push my luck with 2 types (and then we'd have to name them), plus Luca pointed out that there isn't really any JS duck-typing advantage to distinguishing \"null unit\" from \"type does not support a unit\". So it seems simplest to keep them as one type.","m.mentions":{},"msgtype":"m.text"},"ts":1744269154955,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$epCQYF7QU4Zhl7H-DyNwLgAoVpP8a-vgjBifCtJOsqY"},
{"content":{"body":"Yes I've been convinced that we should have them as a single object. The .unit should be on the Decimal.Amount object, and not on a third new one.","msgtype":"m.text"},"ts":1744269225683,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ig1LrSZO7k3m8pbOxZ1d79LvgjlzfVLWsuCiWZcy4Vw"},
{"content":{"body":"This is unrelated to how the proposals are merged/split though, a proposal can add a property/field on an existing object ","msgtype":"m.text"},"ts":1744269250429,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$HaVRY-hhPwvv3y8osmqbA-2jStSr1rqvJ1dVutdZG8I"},
{"content":{"body":"verifies that the Decimal.Amount OP does indeed state that the unit is in the data model of Decimal.Amount","m.mentions":{},"msgtype":"m.emote"},"ts":1744269324760,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$U1kHfLpc8a9TgapJqBvMlx9860rA9KfC8Gsfk22r1J8"},
{"content":{"body":"I see","m.mentions":{},"msgtype":"m.text"},"ts":1744269396326,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$VyMi5gHfzaPj45aVPjZiok_OVSOnrZu6nQ0Uq67TedU"},
{"content":{"body":"Yes I double-checked yesterday too :)\n\nMy mental model of the end state matches exactly what you described there","msgtype":"m.text"},"ts":1744269419649,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$v_GcEod4BwAkqc2QwK3BP7O9kA138jDmP4teCWaPBvU"},
{"content":{"body":"If you think removing the unit field from my formulation of `Decimal.Amount` is more likely to make it palatable in the short term for Stage 2 purposes... okay with me. Not sure about Eemeli.","format":"org.matrix.custom.html","formatted_body":"If you think removing the unit field from my formulation of <code>Decimal.Amount</code> is more likely to make it palatable in the short term for Stage 2 purposes... okay with me. Not sure about Eemeli.","m.mentions":{},"msgtype":"m.text"},"ts":1744269449872,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$L6ITBL07SLJwmXKDczV3kiI5NNRVuNTgQQBK2tYF5Tw"},
{"content":{"body":"I think it's not only good for decimal (keeping the proposal focused on its goal), but it also makes life easier for proposal-that-adds-the-unit: there is no new object to justify, it's just adding a field on an existing one","msgtype":"m.text"},"ts":1744269541064,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$7zhw1F68klbSm20N48WXnfvi8VNYpQgfQrkmPkV7C-g"},
{"content":{"body":"And I think Decimal.Amount should be justified entirely on Intl integration and interop with external systems, without saying \"it will be _needed_ to add units\", even though we must make it clear from the beginning that the plan is the other proposal will slot into that","msgtype":"m.text"},"ts":1744269632529,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$e48w5bpvVMmVL5ezJ9CAp7vmu9dzYPBHB5z-gEl8ju8"},
{"content":{"body":"A question I have for eemeli is: you expressed disappointment with entangling the two proposals in the past. If plain Decimal was much further ahead in the process than Measure (or if decimal was already stage 4!), would you be ok with this design?","format":"org.matrix.custom.html","formatted_body":"A question I have for <a href=\"https://matrix.to/#/@eemeli:mozilla.org\">@eemeli:mozilla.org</a> is: you expressed disappointment with entangling the two proposals in the past. If plain Decimal was much further ahead in the process than Measure (or if decimal was already stage 4!), would you be ok with this design?","msgtype":"m.text"},"ts":1744269838413,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6zO0t3Q8OuTljvy0uc2ecpqqXOsbESLpD-EFh_mgQ8E"},
{"content":{"body":"I continue to think that trying to intermingle these proposals is making the whole situation less rather than more clear. Is \"this design\" the following?\n- A `Decimal` would not carry any precision information.\n- The decimal proposal introduces `Decimal.Amount` as an object that carries precision information, but does not support mathematical operations.\n- The measure proposal adds `unit` to `Decimal.Amount`.","format":"org.matrix.custom.html","formatted_body":"<p>I continue to think that trying to intermingle these proposals is making the whole situation less rather than more clear. Is \"this design\" the following?</p>\n<ul>\n<li>A <code>Decimal</code> would not carry any precision information.</li>\n<li>The decimal proposal introduces <code>Decimal.Amount</code> as an object that carries precision information, but does not support mathematical operations.</li>\n<li>The measure proposal adds <code>unit</code> to <code>Decimal.Amount</code>.</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744271880772,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$0AFPBeFFj9ZYvHI_Ayp4cpG7XRUK3B4xW8-TA-tlE6Q"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1744272796263,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6JL1Qm5QYM1CDGX-HSO9jUcnU4Ma8PIrzZAllJKmyDg"},
{"content":{"body":"Ok, then in a hypothetical future where something like `Decimal.Amount` was already stage 3 or 4, then it would indeed be obvious for measure to be adding `unit` to it. But this is not where we are now, and I don't see the value of the question. More significantly, I don't understand why `Decimal.Amount` needs to be included in the decimal proposal, if `Decimal` itself will not carry precision information.\n\nIn the current slides, the motivation and use cases for `Decimal` and `Decimal.Amount` appear to be orthogonal, with the former serving data exchange, while the latter is for formatting values with precision. Why are both of these mixed into the decimal proposal?\n\nWould it not be simpler to have one proposal (decimal) providing a solution for data exchange, and another proposal (measure) providing a solution for formatting values with precision?","format":"org.matrix.custom.html","formatted_body":"<p>Ok, then in a hypothetical future where something like <code>Decimal.Amount</code> was already stage 3 or 4, then it would indeed be obvious for measure to be adding <code>unit</code> to it. But this is not where we are now, and I don't see the value of the question. More significantly, I don't understand why <code>Decimal.Amount</code> needs to be included in the decimal proposal, if <code>Decimal</code> itself will not carry precision information.</p>\n<p>In the current slides, the motivation and use cases for <code>Decimal</code> and <code>Decimal.Amount</code> appear to be orthogonal, with the former serving data exchange, while the latter is for formatting values with precision. Why are both of these mixed into the decimal proposal?</p>\n<p>Would it not be simpler to have one proposal (decimal) providing a solution for data exchange, and another proposal (measure) providing a solution for formatting values with precision?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744274093337,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$YnQCPjKyBGZvZuyFY0CcjKXGf_CGkF6DK_lXwNPl_qQ"},
{"content":{"body":"I think the current `Decimal.Amount` is also relevant for the data exchange story because part of the story may involve a developer's need to preserve all digits of a number coming over the wire, and/or transmitting a decimal value with that precision","format":"org.matrix.custom.html","formatted_body":"I think the current <code>Decimal.Amount</code> is also relevant for the data exchange story because part of the story may involve a developer's need to preserve all digits of a number coming over the wire, and/or transmitting a decimal value with that precision","m.mentions":{},"msgtype":"m.text"},"ts":1744292045076,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$-plAg0jNydoRV6wgXrfBjgWKxfnY2Eyw9oEkr1qRAk0"},
{"content":{"body":"with `Decimal` alone, that aspect of the data exchange story is harder to sell because you'd need to store a decimal value from a string coming over the wire, and then calculate the precision of it on the side (e.g. by simple parsing, looking for the \".\" character, then counting the digits on the left and right). And that extra information would need to stored separately from the decimal value","format":"org.matrix.custom.html","formatted_body":"with <code>Decimal</code> alone, that aspect of the data exchange story is harder to sell because you'd need to store a decimal value from a string coming over the wire, and then calculate the precision of it on the side (e.g. by simple parsing, looking for the \".\" character, then counting the digits on the left and right). And that extra information would need to stored separately from the decimal value","m.mentions":{},"msgtype":"m.text"},"ts":1744292186986,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$bZP7-Xc3gvXePjuosYU8ilIahAwU9Ep-9nqaw-7ln1I"},
{"content":{"body":"there is another way to understand the data exchange story, which is preservation of mathematical accuracy (i.e., no rounding). That's where `Decimal` fits the bill","format":"org.matrix.custom.html","formatted_body":"there is another way to understand the data exchange story, which is preservation of mathematical accuracy (i.e., no rounding). That's where <code>Decimal</code> fits the bill","m.mentions":{},"msgtype":"m.text"},"ts":1744292262077,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$SrJYXO4ILnLrs66vejv9_f9nh4yhswlFFMhWFlV97CY"}
]