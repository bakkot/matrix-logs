[
{"content":{"body":"do we want Amount to support NaN, -0, and infinity?","m.mentions":{},"msgtype":"m.text"},"ts":1744702154917,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$s89pfXiDbv-Lw5d01aDnCXMQkiHSwQOBPdRqKaW1mPI"},
{"content":{"body":"thinking about measurements or financial quantities, I think you could say that all of those shouldn't be there","m.mentions":{},"msgtype":"m.text"},"ts":1744702190547,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$p9MWe-Zxfs04wpUjj1vPS7ikMZmywHZBOIk1yCNdoB0"},
{"content":{"body":"we could easily support those since decimal supports them. Intl also supports them, so we'd be on solid ground. But we can nonetheless ask whether amount should support them","m.mentions":{},"msgtype":"m.text"},"ts":1744702476127,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$d3fkAIQmuKnkL7VMSg6alcQiEq2_j2prqCKHDKsdyMQ"},
{"content":{"body":"if we do support NaN etc. do also want Amount to have predicates like `isNaN` etc. that decimal has, or do we require the user to query the underlying decimal?","format":"org.matrix.custom.html","formatted_body":"if we do support NaN etc. do also want Amount to have predicates like <code>isNaN</code> etc. that decimal has, or do we require the user to query the underlying decimal?","m.mentions":{},"msgtype":"m.text"},"ts":1744702578140,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$DGEzb9kfX8Z5Bq0RZGNIzOxcW0-azb5jbnom19rFI8U"},
{"content":{"body":"> <@jesse:igalia.com> if we do support NaN etc. do also want Amount to have predicates like `isNaN` etc. that decimal has, or do we require the user to query the underlying decimal?\n\nI think doing `x.decimal.isNaN()` is fine ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!NnKyFxSjabKpyjbPcL:matrix.org/$DGEzb9kfX8Z5Bq0RZGNIzOxcW0-azb5jbnom19rFI8U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jesse:igalia.com\">@jesse:igalia.com</a><br />if we do support NaN etc. do also want Amount to have predicates like <code>isNaN</code> etc. that decimal has, or do we require the user to query the underlying decimal?</blockquote></mx-reply>I think doing <code>x.decimal.isNaN()</code> is fine","m.relates_to":{"m.in_reply_to":{"event_id":"$DGEzb9kfX8Z5Bq0RZGNIzOxcW0-azb5jbnom19rFI8U"}},"msgtype":"m.text"},"ts":1744704327952,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pl7GQnjHs2PxQJp5abXgWKvE0tuKgfdmLfRd3CsFw-8"},
{"content":{"body":"Does the IEEE spec allow defining things like \"infinity with a precision of 3\"?","msgtype":"m.text"},"ts":1744704380886,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LWSNwVQr7tAsAi3dAdvcKXGHTABzr_U-Qw7kYFKUuIg"},
{"content":{"body":"For -0 I think it makes sense to support it. -0.0 and -0.000 seem to me like different numbers (the first one is less than 0 and more that -0.005, the second one less than 0 and more than -0.0005)","msgtype":"m.text"},"ts":1744704445404,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$yTUd0GiXhamYpMtPXdsbUL0YTvB7M0gjcpcgJpQBx9M"},
{"content":{"body":"in IEEE there's no precision for NaN or the infinities","m.mentions":{},"msgtype":"m.text"},"ts":1744704662384,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$q8JChbIGd9zmeQB6gMC6gWCvNaS8zQaRCCEBaZjwbQs"},
{"content":{"body":"but there is precision for -0","m.mentions":{},"msgtype":"m.text"},"ts":1744704668992,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$kPCTnT8Xh5vVZEc4ab9o2Z9jQixs-kOUbzZKP0FkXGA"},
{"content":{"body":"Are example _non-formatting_ use cases for decimal-with-precision available anywhere? I can only find a [wrapper](https://github.com/nicolo-ribaudo/proposal-numeric-with-precision?tab=readme-ov-file#examples) for IEE754 precision propagation in nicolo-ribaudo's proposal-numeric-with-precision, but nothing e.g. within the proposal-decimal repo.\n\nI think the _formatting_ case for a decimal-with-precision is quite clear, but if the intent is to not have that as the only reason for something like Decimal.Amount, then I think the we ought to say something a bit more that the presentation's current assertion:\n> For data exchange, we may need to store exact numeric information we receive (the digits, not just the mathematical value)\n\nIs that an actual demonstrated need, or a theoretical one that might exist?","format":"org.matrix.custom.html","formatted_body":"<p>Are example <em>non-formatting</em> use cases for decimal-with-precision available anywhere? I can only find a <a href=\"https://github.com/nicolo-ribaudo/proposal-numeric-with-precision?tab=readme-ov-file#examples\">wrapper</a> for IEE754 precision propagation in <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a>'s proposal-numeric-with-precision, but nothing e.g. within the proposal-decimal repo.</p>\n<p>I think the <em>formatting</em> case for a decimal-with-precision is quite clear, but if the intent is to not have that as the only reason for something like Decimal.Amount, then I think the we ought to say something a bit more that the presentation's current assertion:</p>\n<blockquote>\n<p>For data exchange, we may need to store exact numeric information we receive (the digits, not just the mathematical value)</p>\n</blockquote>\n<p>Is that an actual demonstrated need, or a theoretical one that might exist?</p>\n","m.mentions":{"user_ids":["@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1744708726513,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ZYI9A39hGjhzV6CA-6Jk7dVsDrNUdHmJKhDY2bJQcRY"},
{"content":{"body":"those use cases in N-ic's proposal should be integrated into decimal; much of the thinking there maps over into amount","m.mentions":{},"msgtype":"m.text"},"ts":1744709955484,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$helGrrN3KaaAFESS1l3Vj1id8jekGkdALv4YU3SpJdk"},
{"content":{"body":"looking ahead (or sideways?) to the measure proposal, the need to have all digits is more clearly motivated","m.mentions":{},"msgtype":"m.text"},"ts":1744710258997,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$3R2mvmhS-LmxUIn62LT63cbsz8tzm_deNN7GVQRcPVk"},
{"content":{"body":"if one temporarily ignores measure, the need for out-of-the-box round-trippability is a nice invariant","m.mentions":{},"msgtype":"m.text"},"ts":1744710374591,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$-sO3CAo5Pd0IYyP-YqRHAkde2OXBK1v1njYQzizVApc"},
{"content":{"body":"btw \"amount\" is currently not the best name; I've updated the slides to use a placeholder name","m.mentions":{},"msgtype":"m.text"},"ts":1744710499194,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$5VaPXjfH18gAlCOEmFdhu7UiCyKX5Eu3fNmH6sqalaI"},
{"content":{"body":"suggestions welcome","m.mentions":{},"msgtype":"m.text"},"ts":1744710502877,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$H7fVW3LD5vAoDRsjrt43ibbpc4GMT00sbW5l_L81M1Y"},
{"content":{"body":"we've thrown around a few ideas here but haven't really settled on one","m.mentions":{},"msgtype":"m.text"},"ts":1744710560397,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$Y66ru9hXRycbqZzW6PtEeU8Sz3Jfca8qYgyBZGxJCDU"},
{"content":{"body":"What does this mean? What's the use case here?","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-sO3CAo5Pd0IYyP-YqRHAkde2OXBK1v1njYQzizVApc"}},"msgtype":"m.text"},"ts":1744720696045,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$sZ_6J1zTYkzRcEx9U186fPUCXcWF_TUDVGHBZpq_m70"},
{"content":{"body":"something like `Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x` for all digit strings `x` with up to 3 decimal digits (where 3 is known out-of-band)","format":"org.matrix.custom.html","formatted_body":"something like <code>Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x</code> for all digit strings <code>x</code> with up to 3 decimal digits (where 3 is known out-of-band)","m.mentions":{},"msgtype":"m.text"},"ts":1744720884056,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$rNQ4mCjCgXid5UGYhFt3bwVnUWyk_oJTGNB49uASM6Y"},
{"content":{"body":"* something like `Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x` for all digit strings `x` with 3 fractional digits (where 3 is known out-of-band)","format":"org.matrix.custom.html","formatted_body":"* something like <code>Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x</code> for all digit strings <code>x</code> with 3 fractional digits (where 3 is known out-of-band)","m.mentions":{},"m.new_content":{"body":"something like `Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x` for all digit strings `x` with 3 fractional digits (where 3 is known out-of-band)","format":"org.matrix.custom.html","formatted_body":"something like <code>Decimal.Something.from(x, 3. \"fractionalDigits\").toString() === x</code> for all digit strings <code>x</code> with 3 fractional digits (where 3 is known out-of-band)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rNQ4mCjCgXid5UGYhFt3bwVnUWyk_oJTGNB49uASM6Y","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744721017316,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$76IP5-9gf2hEm-Dzy98u8UVwSM-OuEsBTrN55Yd_H4Q"},
{"content":{"body":"this could be used for e.g. currency, where a number of fractional digits is known in advance","m.mentions":{},"msgtype":"m.text"},"ts":1744721064621,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$2QRGveUtpfDjEMg6roloVbS_0QhJNwk0h3VtXvd5lFs"},
{"content":{"body":"If that's important in particular for currency values, then we ought to be quite explicit about it, as this has significant implications for the `.toString()` output once we start to consider including a `currency` field as a part of proposal-measure.","format":"org.matrix.custom.html","formatted_body":"If that's important in particular for currency values, then we ought to be quite explicit about it, as this has significant implications for the <code>.toString()</code> output once we start to consider including a <code>currency</code> field as a part of proposal-measure.","m.mentions":{},"msgtype":"m.text"},"ts":1744722473371,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$DQzuraNAk_Vp5hrv6_H0jS59X76YaeW2N15Je8JWoRQ"},
{"content":{"body":"As in, I think it means that either:\n1. `toString()` only encodes the numerical value,\n2. we ought to include a parser for a number+currency or number+unit string format,\n3. we strongly recommend that anyone with a non-formatting reason to represent a number together with a currency or unit not actually do so, or\n4. we reconsider a 3-class solution.\n\nPresuming, of course, that we agree that this sort of round-tripping is important.","format":"org.matrix.custom.html","formatted_body":"<p>As in, I think it means that either:</p>\n<ol>\n<li><code>toString()</code> only encodes the numerical value,</li>\n<li>we ought to include a parser for a number+currency or number+unit string format,</li>\n<li>we strongly recommend that anyone with a non-formatting reason to represent a number together with a currency or unit not actually do so, or</li>\n<li>we reconsider a 3-class solution.</li>\n</ol>\n<p>Presuming, of course, that we agree that this sort of round-tripping is important.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1744722814528,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$VxqaP4d8AjoWHVqPa9wYQSVuYvTnDSIYUtGM9zidCJk"},
{"content":{"body":"Hence my question earlier: Is there an actual demonstrated need for non-formatting use cases for decimal-with-precision that is significant enough that we need to account for it in this API design, or do we only strongly care about the formatting use cases?","m.mentions":{},"msgtype":"m.text"},"ts":1744722956284,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KAAT1I7D3ULUxlR4xgayUqH-yKpSvOV_g7J3XzmiQ0I"},
{"content":{"body":"I'm having trouble following; are we proposing having a parser for Decimal.Amount?","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$VxqaP4d8AjoWHVqPa9wYQSVuYvTnDSIYUtGM9zidCJk"}},"msgtype":"m.text"},"ts":1744722997303,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nvZJ_H-ucr3BodIr6VoDf4aijsJ4D8x8awTK_a2BqXE"},
{"content":{"body":"let's follow the decision for Decimal. The counterarguments are the same in both cases. If we're going with it, let's stick with it for Decimal.Amount","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$s89pfXiDbv-Lw5d01aDnCXMQkiHSwQOBPdRqKaW1mPI"}},"msgtype":"m.text"},"ts":1744723024177,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$O9DkQIURjdcrsB316X2BXioOVNHBKFWA0wLd32bDMbM"},
{"content":{"body":"the most visible usage of a name is on the title slide; you might want to change that","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5VaPXjfH18gAlCOEmFdhu7UiCyKX5Eu3fNmH6sqalaI"}},"msgtype":"m.text"},"ts":1744723054977,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2Cv66m7dItPRVb_QoLSnuwhRhwgybDYVCQaIQ2eoKI8"},
{"content":{"body":"I don't think we ought to have one, but if we seriously care about round-tripping, then that's something we need ot consider.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$nvZJ_H-ucr3BodIr6VoDf4aijsJ4D8x8awTK_a2BqXE"}},"msgtype":"m.text"},"ts":1744723059376,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$7qubdP5Q6zLindRWpjiBb8V8bqhmRJekrFfom2R3tLU"},
{"content":{"body":"my understanding was that the driving motivation was around the formatting use case","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$KAAT1I7D3ULUxlR4xgayUqH-yKpSvOV_g7J3XzmiQ0I"}},"msgtype":"m.text"},"ts":1744723081612,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ksck6RQ1uEP4vt-e7gNpyxO-dUTViV8pPpYgXiYBGUk"},
{"content":{"body":"That's my understanding as well, but e.g. the slides first mention the non-formatting case.","m.mentions":{},"msgtype":"m.text"},"ts":1744723121217,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$2L-Pp2V8d-17Mr4ZEJYbFTYddPvClnbZ6kuxmUCAcBU"},
{"content":{"body":"atm there's no parser for Decimal.Something; using the `.from` static constructor method, the 1st argument is a decimal string, which gets passed to Decimal, which does have a parser","format":"org.matrix.custom.html","formatted_body":"atm there's no parser for Decimal.Something; using the <code>.from</code> static constructor method, the 1st argument is a decimal string, which gets passed to Decimal, which does have a parser","m.mentions":{},"msgtype":"m.text"},"ts":1744723122471,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$zqy0AWv8cTBRtuCudb44enqt7D57bCVUdOHqw1MfPc0"},
{"content":{"body":"where did the demand for round-tripping come from?","m.mentions":{},"msgtype":"m.text"},"ts":1744723143670,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GtOLDIrIfKMvk1Ve6LeAJh068Ug6ay4daAMVJAVzIFs"},
{"content":{"body":"it's mentioned in the issue which kicked off this disucssion: https://github.com/tc39/proposal-measure/issues/26","m.mentions":{},"msgtype":"m.text"},"ts":1744723187907,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$qbphWClHn6z6msWWYOI57yCA1brqm7VjzYndRGhdbog"},
{"content":{"body":"it's not the topmost need, but it is there","m.mentions":{},"msgtype":"m.text"},"ts":1744723216940,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$5plCmxltASsz4f3PgkZWUvvcaPnhKyXhKsoZkLJ9KeQ"},
{"content":{"body":"we can focus on the value Decimal.Something has for i18n -- that's the clearest benefit","m.mentions":{},"msgtype":"m.text"},"ts":1744723316418,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$fH_9bYJxvz7VlTFv4ipHcqneLK-Pu1PWtUg607JBTYM"},
{"content":{"body":"hmm, do you have the .equals method?","m.mentions":{},"msgtype":"m.text"},"ts":1744723365646,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$cO2-DWvYBogsJEJqfDNVLS3XxctBKX6Y7ifO_mwCAiE"},
{"content":{"body":"(I don't really know what the use case is for that)","m.mentions":{},"msgtype":"m.text"},"ts":1744723377010,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XexR2_V72T6002vMFAlB7LK7xKm_U7PkNYJoo4jl-9w"},
{"content":{"body":"Hang on, how could we even have round-tripping unless we have a parser that parses something like `'1.20'` as something more than just the decimal value `1.2`?","format":"org.matrix.custom.html","formatted_body":"Hang on, how could we even have round-tripping unless we have a parser that parses something like <code>'1.20'</code> as something more than just the decimal value <code>1.2</code>?","m.mentions":{},"msgtype":"m.text"},"ts":1744723408282,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$E7Fvx9BRECxnP-6v0n3VHBQJphmZxXwC86gGUJtt93Y"},
{"content":{"body":"we had it, but dropped it because the use case wasn't exactly clear, and it becomes easily user-definable if we expose the underlying value and precision","m.mentions":{},"msgtype":"m.text"},"ts":1744723411665,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$ZT5kWWaZ4COmCpSQBQiuc_1T38HqH1CHGiHE26LSbfs"},
{"content":{"body":"I don't see anything on that thread about round-tripping parsers","m.mentions":{},"msgtype":"m.text"},"ts":1744723434007,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EoXGnXwbVcknX0OTFN81nrKfLoAVkuPfo5lZSGse4Fc"},
{"content":{"body":"let's keep this simple!","m.mentions":{},"msgtype":"m.text"},"ts":1744723436297,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IPIGwAfoiLKYT4y3ORvR52LDloOxSC9XWJMobQMLkgI"},
{"content":{"body":"as minimal as possible","m.mentions":{},"msgtype":"m.text"},"ts":1744723449186,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NeER2gYhyzzXyDObJune0QUwxZ1mUuWPk6YLm-eiVeo"},
{"content":{"body":"just because we can vaguely conceive of a use case for something doesn't mean we should have it","m.mentions":{},"msgtype":"m.text"},"ts":1744723463499,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$HjB0Vd4_K6ih780YRFoB2-Z0Rhjgk-BIAy-9NiGG66c"},
{"content":{"body":"And to therefore explicitly not aim to support round-tripping, or other non-formatting use cases for decimal-with-precision.","m.mentions":{},"msgtype":"m.text"},"ts":1744723474047,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$fzGBQHxkD6xuzrRD5s_xmh5P6AiAgjwpRwE4Ck7hNnk"},
{"content":{"body":"I guess the `from` method is the parser?","format":"org.matrix.custom.html","formatted_body":"I guess the <code>from</code> method is the parser?","m.mentions":{},"msgtype":"m.text"},"ts":1744723496877,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J3oWQP4oVCTnIIvWNFnobWxHBOJJBhm6kJiv0ZCKQKs"},
{"content":{"body":"yeah, `.from` is the parser (though I might say that `from` contains the decimal parser)","format":"org.matrix.custom.html","formatted_body":"yeah, <code>.from</code> is the parser (though I might say that <code>from</code> contains the decimal parser)","m.mentions":{},"msgtype":"m.text"},"ts":1744723583487,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$J0aq0sut6mV-CWBiu4Lv3k7LDxt-iaz8ZJrFjSYfbZg"},
{"content":{"body":"for `.from`, I have in mind taking 3 arguments, no just 1 (a decimal string)","format":"org.matrix.custom.html","formatted_body":"for <code>.from</code>, I have in mind taking 3 arguments, no just 1 (a decimal string)","m.mentions":{},"msgtype":"m.text"},"ts":1744723598784,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$44iLoAvy5vKYfYvgFXKmsJTJwC5r2zvKbz8b8R30NH8"},
{"content":{"body":"I could imagine it taking 2 (a decimal string and a \"precision mode\", indicating either fractional digits or significant digits)","m.mentions":{},"msgtype":"m.text"},"ts":1744723660466,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$DfXUnMD9axG4fj_sWvqeSAgMKJ8F0ydSNaXyLVNnmwc"},
{"content":{"body":"but certainly more than 1","m.mentions":{},"msgtype":"m.text"},"ts":1744723665863,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$Negd0SYVwSLslFK2RgStKqqSD3LbOAQGFlgT_H4XjjY"},
{"content":{"body":"I continue to prefer not having a `.from` factory method, and using `new Amount(value, options)` where the `value` is parsed as the numerical value and the `options` may initially contain `fractionDigits` or `significantDigits`, and be later extended to also support `unit` and `currency`.","format":"org.matrix.custom.html","formatted_body":"I continue to prefer not having a <code>.from</code> factory method, and using <code>new Amount(value, options)</code> where the <code>value</code> is parsed as the numerical value and the <code>options</code> may initially contain <code>fractionDigits</code> or <code>significantDigits</code>, and be later extended to also support <code>unit</code> and <code>currency</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1744723714834,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$t3ayxpWRk5XInb2ZBCwg4XgqD_kuBFcQhFXMFuv-FvI"},
{"content":{"body":"we could certainly go either way -- I'm agnostic about that. I think the idea for a static constructor method came from Temporal. But there, we also have `new`, too","format":"org.matrix.custom.html","formatted_body":"we could certainly go either way -- I'm agnostic about that. I think the idea for a static constructor method came from Temporal. But there, we also have <code>new</code>, too","m.mentions":{},"msgtype":"m.text"},"ts":1744723834738,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$x8ebM9AoQwK-z51mHaKJvQqhhr7xRIdXOnfJClZQ0vU"},
{"content":{"body":"yeah I guess my preference for making this absolutely as minimal as possible is fairly soft","m.mentions":{},"msgtype":"m.text"},"ts":1744723877044,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uBjMs7Jt2UZVzdSdoXCdbDyMDdshEr2x4u2LdMok9XI"},
{"content":{"body":"I was just surprised that this was part of it","m.mentions":{},"msgtype":"m.text"},"ts":1744723898499,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lsxkaJnkTBJnXBwDio1UPC9vd1sQ9ScVnMuB1r5ZxHY"},
{"content":{"body":"If `new Decimal(value)` works with numbers, strings, and decimal `value`s, then I would find it quite surprising for the same proposal to advocate a different approach for `Decimal.Something`.","format":"org.matrix.custom.html","formatted_body":"If <code>new Decimal(value)</code> works with numbers, strings, and decimal <code>value</code>s, then I would find it quite surprising for the same proposal to advocate a different approach for <code>Decimal.Something</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1744723917359,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$fmrKM5Q9FodQFXLT6VshH5sGVrcvIHx2rgbz6dXa8Xg"},
{"content":{"body":"tbh I think we didn't quite have this full discussion for decimal -- values were understood as constructed using `new`, only. There was some discussion of having explicit conversion methods (`toNumber`, `toBigInt`) but IIRC we didn't make a decision about whther to have factory methods. We ended up just stuffing everything into the constructor, taking many possible types of arguments","format":"org.matrix.custom.html","formatted_body":"tbh I think we didn't quite have this full discussion for decimal -- values were understood as constructed using <code>new</code>, only. There was some discussion of having explicit conversion methods (<code>toNumber</code>, <code>toBigInt</code>) but IIRC we didn't make a decision about whther to have factory methods. We ended up just stuffing everything into the constructor, taking many possible types of arguments","m.mentions":{},"msgtype":"m.text"},"ts":1744724071401,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$D5tHRbZKpReUo0gGySDZycP-aJVsXGrfCl7xaySNtHs"},
{"content":{"body":"I might suggest this as a topic for discussion in the next champions call next week","m.mentions":{},"msgtype":"m.text"},"ts":1744724114890,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$rGo1UJHP2-kL_PyChw1pbjBBhsekq72ddyTzp3Qc_lc"},
{"content":{"body":"Shane hinted at a broader topic in the last call, namely whether Temporal-style design (especially concerning constructors) is something we want generally, in TC39; but IIRC we didn't apply that thinking to Decimal","m.mentions":{},"msgtype":"m.text"},"ts":1744724203993,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$xX50A09155tFxcurxctfePKSxNRjVVtI5oQ12tyaHXE"},
{"content":{"body":"MM's question yesterday about membranes and static methods makes me wonder if we should ban the Decimal constructor from taking a Decimal","m.mentions":{},"msgtype":"m.text"},"ts":1744724258828,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$LxXMuhrfqX_dXvzwZ7Vz3ulc0_nwocauSBpmn6-lOuk"},
{"content":{"body":"this is a bit edge case-y but that may come up","m.mentions":{},"msgtype":"m.text"},"ts":1744724272947,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$1urK_m1Hc_1tzvpqwwgNZediAGWos0enDnmfP8CtKZM"},
{"content":{"body":"If the Decimal constructor can't accept a Decimal value, how should one copy a Decimal instance? Also related: If you construct a Decimal.Something with a Decimal value, is the Decimal.Something value the given instance, or a new instance? This matters in particular because Decimal is a class which may be extended.","m.mentions":{},"msgtype":"m.text"},"ts":1744724461053,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$JYk3XbE425m3K4NsZ3IUrsuO0HhobIeMhM6UaaEMmw0"},
{"content":{"body":"one way to copy `x` would be `new Decimal(x.toString()`","format":"org.matrix.custom.html","formatted_body":"one way to copy <code>x</code> would be <code>new Decimal(x.toString()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1744724491201,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$W6XAXrhNB5bV_WMbzgUFBBsKhkYc7hnv8CvzHCJCc0c"},
{"content":{"body":"for constructing a Decimal.Something from a Decimal `x` I was thinking: `new Decimal.Something(x.toString(), n, \"fractionalDigits\")` where `n` is something known out-of-bounds, as is `\"fractionalDigits\"` (the knowledge of how precision to be understood)","format":"org.matrix.custom.html","formatted_body":"for constructing a Decimal.Something from a Decimal <code>x</code> I was thinking: <code>new Decimal.Something(x.toString(), n, \"fractionalDigits\")</code> where <code>n</code> is something known out-of-bounds, as is <code>\"fractionalDigits\"</code> (the knowledge of how precision to be understood)","m.mentions":{},"msgtype":"m.text"},"ts":1744724583342,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$QJzMXW3sAQBZtXG0dlmNjMAAkZFOSgWeq9anrDwmJ0U"},
{"content":{"body":"you could also do e.g. `new Decimal.Something(x.toFixed(n), n, \"fractionalDigits\")` or `new Decimal.Something(x.toPrecision(n), n, \"significantDigits\")`","format":"org.matrix.custom.html","formatted_body":"you could also do e.g. <code>new Decimal.Something(x.toFixed(n), n, \"fractionalDigits\")</code> or <code>new Decimal.Something(x.toPrecision(n), n, \"significantDigits\")</code>","m.mentions":{},"msgtype":"m.text"},"ts":1744724621036,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$Er_1mYWSvm48EZ_6Sn5xPhN9GfgYuLgWMLsQrQ8BiH0"},
{"content":{"body":"Huh, and after yesterday: should a Decimal value be a Composite with a custom prototype? If it's not, how else could one use a Decimal as e.g. a Map key?","m.mentions":{},"msgtype":"m.text"},"ts":1744724681924,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$c3DUCYeJXjbmgimr28Sgw30kDeYH9g5_yhIA3Ob5TAo"},
{"content":{"body":"imo we should try to align Decimal with Composite -- what do we need to add to the prototype?","m.mentions":{},"msgtype":"m.text"},"ts":1744724850925,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$oEPGhuPje4mh4hVSx2hbrlVKMtTJ495wuWyJoBxfCLk"},
{"content":{"body":"I think it's premature to align Decimal with Composite","m.mentions":{},"msgtype":"m.text"},"ts":1744724916979,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Wjv5As3sKmOtKXpsyDyqktk3BQS2imixzLC8rt6qO7w"},
{"content":{"body":"anyway you wouldn't change anything about the prototype, just make it a frozen object","m.mentions":{},"msgtype":"m.text"},"ts":1744724932214,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mbU0nSF0qgOvatSs7UH6wmV6PO91BrXtfoJK0AQXk0s"},
{"content":{"body":"(not frozen prototype but frozen instance)","m.mentions":{},"msgtype":"m.text"},"ts":1744724942305,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JYiT1VkN5KNXWht29fYp-bVJAkbrOOILjqezN_UOFwY"},
{"content":{"body":"agree it's early days for the composite discussion","m.mentions":{},"msgtype":"m.text"},"ts":1744724960289,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$WmHS40eSqaB1YCsnARbGiNxIlzJU0gcb4-gMfeMUBZ0"},
{"content":{"body":"if you're saying Decimal should be a Composite, you're saying one thing should block on the other, and I'm not convinced","m.mentions":{},"msgtype":"m.text"},"ts":1744725058390,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ioVrIC0d5KKl9o-Ux0Ft6zQKW-M_p4KEwH_6TxEouow"},
{"content":{"body":"One relevant part is that I think we can agree that Decimal.Something is not expected to provide a custom equality.","m.mentions":{},"msgtype":"m.text"},"ts":1744725074098,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$3ft09lN7n59yD-JBpmbYVEmdYS-hW_rz8Bjj7kY6azI"},
{"content":{"body":"based on the understading of equality Shane sketched in the issue, I think it's not necessary","m.mentions":{},"msgtype":"m.text"},"ts":1744725128872,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$t7WGOdJQ-OfB91t-MD0GU_-6Yt74YEvfuExSPqUjEsA"},
{"content":{"body":"but if there's something we've overlooked, I'm happy to hear it","m.mentions":{},"msgtype":"m.text"},"ts":1744725138153,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$miCLhqR_hPcuzPtd9EIIaXw9aVVY7RAZNRGSzClLaxA"},
{"content":{"body":"custom?","m.mentions":{},"msgtype":"m.text"},"ts":1744725155920,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-mFjJB4POdNzL6Ahs5v7PN45TlWKx8uFMcBk2Mhu2AA"},
{"content":{"body":"I'm happy to drop that and keep decimal.something really minimal","m.mentions":{},"msgtype":"m.text"},"ts":1744725157438,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$fjUGNTnv8UY8qfPK-585nXw3zHaMgcgp_3cEbCeT1tE"},
{"content":{"body":"there are probably some Intl needs for equality that Shane had in mind that we could dive in to","m.mentions":{},"msgtype":"m.text"},"ts":1744725189348,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$bcK5PVRp6i1qOnOeTC0bKzjMr8mBO-yXO8w-QJmdJaA"},
{"content":{"body":"As in, a built-in way to specifically say if two somethings are equal.","m.mentions":{"user_ids":["@littledan:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$-mFjJB4POdNzL6Ahs5v7PN45TlWKx8uFMcBk2Mhu2AA"}},"msgtype":"m.text"},"ts":1744725209846,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Rb_kAQ29htkD3FIRD3D8WziCBDmKV1khxVSiEl_dR6w"},
{"content":{"body":"Is there pre-existing discussion on whether a non-primitive Decimal ought to be usable in a Set or as a Map key?","m.mentions":{},"msgtype":"m.text"},"ts":1744725250258,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$HNYjkKZo1jS_u44p5UpHW3BzwJgy6_a_RY6mI6-lngo"},
{"content":{"body":"maybe we can just keep this presentatlon slightly ambiguous, and focus on talking about the minimal core, and see if people are up for that? then we can argue about  details","m.mentions":{},"msgtype":"m.text"},"ts":1744725265613,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BL7Y4emI_fD1B3wmhzLq6PsmeZ30VNNBvJ7bWQf3Nv8"},
{"content":{"body":"sffc: this would be helpful; Waldemar seemed to oppose this particular equality operation strongly","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>: this would be helpful; Waldemar seemed to oppose this particular equality operation strongly","m.mentions":{"user_ids":["@jesse:igalia.com","@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$bcK5PVRp6i1qOnOeTC0bKzjMr8mBO-yXO8w-QJmdJaA"}},"msgtype":"m.text"},"ts":1744725292281,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uLJgoVZSCb2F5gMDSwADgi4CIKDscbKq-mwn3LrRHss"},
{"content":{"body":"I haven't seen discussion about this. The assumption has always been that it'd be a normal object","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$HNYjkKZo1jS_u44p5UpHW3BzwJgy6_a_RY6mI6-lngo"}},"msgtype":"m.text"},"ts":1744725344726,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$c4XrtCamV1i5F9o9XSMbssCASlWKMrZC1AJuQGQidng"},
{"content":{"body":"OK, so just the equals method.","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$Rb_kAQ29htkD3FIRD3D8WziCBDmKV1khxVSiEl_dR6w"}},"msgtype":"m.text"},"ts":1744725356182,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wYh7VQix_jgkeI0BSHavqqbtFpR1Lk8Sw-Bwx6gMHxI"}
]