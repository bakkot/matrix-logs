[
{"content":{"body":"the decimal continuatin will be this afternoon (early, not late)","m.mentions":{},"msgtype":"m.text"},"ts":1748505571104,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$mOkyi9Gpes2kaD9IPvAdBUkt0jOEJXAV9L-0rviQKr8"},
{"content":{"body":"here are the continuation topics:","m.mentions":{},"msgtype":"m.text"},"ts":1748508139998,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$HfAq-8UG_kfDfCxSDDmQCBST0e0poSErFHLsJyQpRmo"},
{"content":{"body":"not sure what WH has in mind with pi to 72 significant digits; this isn't one of the (many, many) Number values that are exactly representable in base-10 having > 34 significant digits","m.mentions":{},"msgtype":"m.text"},"ts":1748508510349,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$vSm5lVb2_VtcW6MBpjkMOQH-j0EiW4HpUAvVD9chOeA"},
{"content":{"body":"* not sure what WH has in mind with pi to 72 significant digits; this isn't one of the (many, many) Number values that are exactly representable in base-2 and having > 34 significant (decimal) digits","m.mentions":{},"m.new_content":{"body":"not sure what WH has in mind with pi to 72 significant digits; this isn't one of the (many, many) Number values that are exactly representable in base-2 and having > 34 significant (decimal) digits","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$vSm5lVb2_VtcW6MBpjkMOQH-j0EiW4HpUAvVD9chOeA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748508532281,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$cPB5imbGVsRoc6GjQ43RHr2zzhBKsVUc0U09r5plar8"},
{"content":{"body":"I'd love to hear more about use cases for `equals` for amounts","format":"org.matrix.custom.html","formatted_body":"I'd love to hear more about use cases for <code>equals</code> for amounts","m.mentions":{},"msgtype":"m.text"},"ts":1748508581798,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$joDvm4YgBs7TWFXsDxRIkTe9j5eYFK0dMLC4OmXtQqg"},
{"content":{"body":"it got removed not because of any opposition to it, just ignorance of any concrete need","m.mentions":{},"msgtype":"m.text"},"ts":1748508613235,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$FSMnKMAlJ2IRWNia6hgqhlVj3QTF_FRRGH_AyKvi_6s"},
{"content":{"body":"(I added it in the latest version of the Decimal polyfil, fwiw)","m.mentions":{},"msgtype":"m.text"},"ts":1748508640745,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$X-YwVnD9MwNiHL2pyUtpb3FMXW2WqmYffShJC0l2INY"},
{"content":{"body":"It confounds me how any value type wouldn't have an equals function. As the most basic use case, I would like the ability to store these in a hash set.","m.mentions":{},"msgtype":"m.text"},"ts":1748508761046,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$ssi8LdYXV7libT1ONqWFxWCprolgApGdH_WWIaSd69w"},
{"content":{"body":"MM's question at the top (\"Why is amount tied to decimal?\") might have been answered by N-ic's email","m.mentions":{},"msgtype":"m.text"},"ts":1748508762986,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$2nIxuKTSeZfyxI54j-ar_3hLY-PFTF7esH7JFyZcKc0"},
{"content":{"body":"but it might also be another form of \"why a monomorphic decimal-backed amount instead of a polymorphic one\"","m.mentions":{},"msgtype":"m.text"},"ts":1748508795557,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$b4R6EqzTQcYWTZd3DrcpORF-6LdNIg8PiVBDnBkGWRc"},
{"content":{"body":"I still have to answer again to Mark","msgtype":"m.text"},"ts":1748508797836,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$LTFamCtBPk0PbMagOWqWjrzWBdSULiMwGnVNELn3VYg"},
{"content":{"body":"sgtm -- that's convincing enough","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$ssi8LdYXV7libT1ONqWFxWCprolgApGdH_WWIaSd69w"}},"msgtype":"m.text"},"ts":1748508834318,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$ipVklSPbD6TRU790M1aBfdTFSGAqVsIwvYJPggDypiI"},
{"content":{"body":"for the exponential notation question, I'm not sure if there's any issue. All the examples we listed use decimal digit strings but we intend to support exponential notation, too","m.mentions":{},"msgtype":"m.text"},"ts":1748508888835,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$d_oB_fdqzT3wVkWlWnlEUv6Ue0siKxvKCKmL_9PtflI"},
{"content":{"body":"The Equals function gets a bit more fraught with Polymorphic Amount (are numerically-equal Number, BigInt, and Decimal Amounts .equals to each other?)","m.mentions":{},"msgtype":"m.text"},"ts":1748508902457,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$KPO82O3dC12OHWn0y3W4ZTA3k1uCYtKKzmR3vxP7Mhs"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1748508908118,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Bj7GApUCUNN3XeEuC4FaU9VInwyJI-EaA1YOZ7RFiMc"},
{"content":{"body":"I think that instead of Polymorphic Amount, I like your idea of String Amount. Many of the Polymorphic Amount problems go away.","m.mentions":{},"msgtype":"m.text"},"ts":1748508966075,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$BqNa4-bW1CpOzwSzwpKBMwL9d7vVELvNaj-zheBtJT8"},
{"content":{"body":"So the question should be Decimal Amount or String Amount.","m.mentions":{},"msgtype":"m.text"},"ts":1748508986872,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$lviLNClxYqWCI3PI5kvWiz9cT2ZZVU5mp7c_wzkX5eA"},
{"content":{"body":"a String-backed amount definitely aligns with the main use cases for amount","m.mentions":{},"msgtype":"m.text"},"ts":1748509011935,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$cNdW3Oz_GcADzv3_QcmGTYtzvKIhcJ1nWI3SFD4PRgg"},
{"content":{"body":"conversion function (`toDecimal` etc.) might throw but maybe that's not so bad","format":"org.matrix.custom.html","formatted_body":"conversion function (<code>toDecimal</code> etc.) might throw but maybe that's not so bad","m.mentions":{},"msgtype":"m.text"},"ts":1748509043266,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$rPXQrPfD1p8arMs4MfLWo2hB480_h5RX_7PTDIzSX_0"},
{"content":{"body":"* conversion functions (`toDecimal`, `toBigInt`, `toNumber` etc.) might throw but maybe that's not so bad","format":"org.matrix.custom.html","formatted_body":"* conversion functions (<code>toDecimal</code>, <code>toBigInt</code>, <code>toNumber</code> etc.) might throw but maybe that's not so bad","m.mentions":{},"m.new_content":{"body":"conversion functions (`toDecimal`, `toBigInt`, `toNumber` etc.) might throw but maybe that's not so bad","format":"org.matrix.custom.html","formatted_body":"conversion functions (<code>toDecimal</code>, <code>toBigInt</code>, <code>toNumber</code> etc.) might throw but maybe that's not so bad","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$rPXQrPfD1p8arMs4MfLWo2hB480_h5RX_7PTDIzSX_0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748509076450,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$N8NbE6rJlxrEtfLzw1G4tkt0K217M8ZUYjWXK3H70aA"},
{"content":{"body":"We can discuss that in an issue but I feel like `toDecimal` could have an options argument that tells it whether to round or throw","format":"org.matrix.custom.html","formatted_body":"We can discuss that in an issue but I feel like <code>toDecimal</code> could have an options argument that tells it whether to round or throw","m.mentions":{},"msgtype":"m.text"},"ts":1748509082065,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$4kVbHUuL2bgnvBM-BG32-0sI4uwIEg-sCNtufCNQTKA"},
{"content":{"body":"If we do string amount, I'd prefer conversions to be cast-like operations, e.g. `Decimal(amount)` and `BigInt(amount)` rather than `amount.toDecimal()` and `amount.toBigInt()`","format":"org.matrix.custom.html","formatted_body":"If we do string amount, I'd prefer conversions to be cast-like operations, e.g. <code>Decimal(amount)</code> and <code>BigInt(amount)</code> rather than <code>amount.toDecimal()</code> and <code>amount.toBigInt()</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748509230971,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$b7aL2ONTL5Zw0p7SByBpcsP1oxox6nNT81DUZ0nL0M0"},
{"content":{"body":"I think E-emli suggested this approach, too?","m.mentions":{},"msgtype":"m.text"},"ts":1748509474846,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$AqDnGsmSsAkyHsUWJU5SibIhbHMSAHlhKhdryP_qUKU"},
{"content":{"body":"I would also prefer something like a \"string amount\". Provided that its `.toString()` was a numeric string, then `new Decimal(amount)`, `BigInt(amount)`, and `Number(amount)` would all work.","format":"org.matrix.custom.html","formatted_body":"I would also prefer something like a \"string amount\". Provided that its <code>.toString()</code> was a numeric string, then <code>new Decimal(amount)</code>, <code>BigInt(amount)</code>, and <code>Number(amount)</code> would all work.","m.mentions":{},"msgtype":"m.text"},"ts":1748509497652,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$lvA0Dvb38YMuPKmiRhdR7gvk4fX1dQEvPjUVhaEiaUM"},
{"content":{"body":"a String-backed amount also leaves open the possibility of adding new numeric types","m.mentions":{},"msgtype":"m.text"},"ts":1748509549873,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$m0DASV8qRf-SOGnm11j205L7NTvodmy3I3BlFz7WZEc"},
{"content":{"body":"I don't want to get ahead of ourselves on `.toString()`; I want it to be able to hold a unit annotation","format":"org.matrix.custom.html","formatted_body":"I don't want to get ahead of ourselves on <code>.toString()</code>; I want it to be able to hold a unit annotation","m.mentions":{},"msgtype":"m.text"},"ts":1748509552047,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$7VGSFvDIWAzK9Yx5W0xJvodujGKWKh0yCvMDwAmwU74"},
{"content":{"body":"Or some other syntax for rationals","m.mentions":{},"msgtype":"m.text"},"ts":1748509563686,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$YjIvEtf-jxxMWLv5sAzxRDlo1_M6cmLK2NHXigY_His"},
{"content":{"body":"`\"4/3\"` or `\"1.50[meter]\"` might be valid string outputs","format":"org.matrix.custom.html","formatted_body":"<code>\"4/3\"</code> or <code>\"1.50[meter]\"</code> might be valid string outputs","m.mentions":{},"msgtype":"m.text"},"ts":1748509597404,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$NEuTQ_vsLPa0yxLz8Uw8ex-lNcECZO0TmVKsM6IU92o"},
{"content":{"body":"But not as part of the Decimal proposal","m.mentions":{},"msgtype":"m.text"},"ts":1748509618483,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$W8ljQndm6MozG_jkPuu9SiLPfQvyEiEpD-U0qU-Yng0"},
{"content":{"body":"We should make it future-proof though","m.mentions":{},"msgtype":"m.text"},"ts":1748509630959,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$ruoLdw3gf9qfPNDtl2kvwEJPbknSBB0RC_mdE4VWK0g"},
{"content":{"body":"the decimal continuation might happen after this talk (!)","m.mentions":{},"msgtype":"m.text"},"ts":1748509685952,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$rHuOGAxPsY9lfwok5GM3bLFf-BctNY_yeO-yUcz8FhA"},
{"content":{"body":"As in, before lunch?","m.mentions":{},"msgtype":"m.text"},"ts":1748509769627,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$iiT3Ont2gcRM0HyGhtdFDIFDVfJz35rvWFVSbE9dTUc"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1748509779104,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$sK3y1UrKe6Bsp9baAPsyh262dsAip7slaoLghR-ChII"},
{"content":{"body":"As long as Waldemar and Mark Miller are on the call","m.mentions":{},"msgtype":"m.text"},"ts":1748509798482,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$eIqNg1-j9KWYmXtcJDu8Y2Mi5S2auny_A9-rIsZOxp8"},
{"content":{"body":"WH is here but MM isn't (and he might not be here in the early afternoon, either)","m.mentions":{},"msgtype":"m.text"},"ts":1748509818096,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$lFRDxMRO2F9cLSkECUgYK8QVQkSK2dN2D9UoJWdsSZc"},
{"content":{"body":"but there are too many contraints for the late afternoon","m.mentions":{},"msgtype":"m.text"},"ts":1748509839800,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$DU6zis97tUuA1DgtmQFhvS3rgyLoXoYccAXMoIfKq7Y"},
{"content":{"body":"(that's my understanding from the chairs)","m.mentions":{},"msgtype":"m.text"},"ts":1748509845115,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$NOnpzC3UXLwVBL_4YPbJwAzbKMYtHLTPBxASr6J3MPQ"},
{"content":{"body":"We could do a WH continuation now and a MM continuation later (both shorter and therefore easier to fit in)","m.mentions":{},"msgtype":"m.text"},"ts":1748509855378,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$DccNJy-SgndteR0ks9_DByJrRaLIj44h5XbUzdTvQsk"},
{"content":{"body":"neither expressed a constraint fwiw","m.mentions":{},"msgtype":"m.text"},"ts":1748509867050,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$9wPgtlA7B98w2gYkxk0zZHK-i73lvaHDtL9OD55i21g"},
{"content":{"body":"we have enough constraints explicitly laid out \\","format":"org.matrix.custom.html","formatted_body":"we have enough constraints explicitly laid out \\","m.mentions":{},"msgtype":"m.text"},"ts":1748509880930,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$FNJV4wsmwnTzxS9kMFE3vj4jYiAHr72KGHgHC_M6ggI"},
{"content":{"body":"* we have enough constraints explicitly laid out that it feels a bit harder accommodating implicit constraints","m.mentions":{},"m.new_content":{"body":"we have enough constraints explicitly laid out that it feels a bit harder accommodating implicit constraints","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$FNJV4wsmwnTzxS9kMFE3vj4jYiAHr72KGHgHC_M6ggI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748509911088,"senderName":"ryzokuken","senderId":"@usharma:igalia.com","id":"$s8KiiBT_23-UuQgbBVZnxlB_4RxtW-RXdv_aZAObT9o"},
{"content":{"body":"Based on the queue, it looks like the WH items are most of what's left","m.mentions":{},"msgtype":"m.text"},"ts":1748509926013,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$kXjeQNMD3aX6du2fvrE98FAXPBjwm4JWMkkdqzN8WXU"},
{"content":{"body":"In preparing my slides for the meetup talk this evening, I'm reminded that I still don't recall us getting an answer on whether \"redefine BigInt\" is feasible","m.mentions":{},"msgtype":"m.text"},"ts":1748510251929,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$yes7IcUv-Iqrxu5iBlitfSi6xO7qmQMUq2rzklDBV2s"},
{"content":{"body":"redefine bigint? was that the idea of extending bigint with a new property indicating a decimal point index?","m.mentions":{},"msgtype":"m.text"},"ts":1748510313337,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$ZY1JRGE-MBIeJ_TdrhoZiQXVvb7O9EaqbSY-Dow8ecE"},
{"content":{"body":"IIRC this was an alternative path towards getting \"decimal\" as a primitive","m.mentions":{},"msgtype":"m.text"},"ts":1748510393158,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$MyrT_uAcoXPECw0eewOSfrv_m-wyRBL068yoCVY_gMs"},
{"content":{"body":"Yes. If we did that, then that would also be the Amount type, since it is a superset of the others.","m.mentions":{},"msgtype":"m.text"},"ts":1748510490116,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$IH0ngomXMrMv18Ns5K73ofBIRpjvdsOsHsRKJj5fogA"},
{"content":{"body":"Re \"the Amount type\", do you mean the type of the numerical value within Amount?","m.mentions":{},"msgtype":"m.text"},"ts":1748510532723,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$oFxHz0nyPW7o5qxpPRwz-3txoRV44H4BDdDQVPbXBiY"},
{"content":{"body":"yes","m.mentions":{},"msgtype":"m.text"},"ts":1748510558058,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$K3dhLiv8GVlSpOvhFk7ONmDP6cAUJWkWemfuCmfpFAQ"},
{"content":{"body":"If so, I agree.","m.mentions":{},"msgtype":"m.text"},"ts":1748510558604,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$OzY59N8mrBI4o2PTkaXWYf-UIqBCKg7uxE13qF1Rp-I"},
{"content":{"body":"* Yes. If we did that, then that would also be the [numeric portion of the] Amount type, since it is a superset of the others.","m.mentions":{},"m.new_content":{"body":"Yes. If we did that, then that would also be the [numeric portion of the] Amount type, since it is a superset of the others.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$IH0ngomXMrMv18Ns5K73ofBIRpjvdsOsHsRKJj5fogA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748510572454,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$_fbezOrVVKqS20cDiMiIJGDjueJPM-NOvsz2mqFPxfY"},
{"content":{"body":"one question would be the data model -- BigInt is an unlimited data type but Decimal128 has bounds","m.mentions":{},"msgtype":"m.text"},"ts":1748510654651,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$cb292ObXvda4sQHT8yDIA7sHwJpsyMtHyAUhVEJbDuc"},
{"content":{"body":"I guess Decimal128 wouldn't be the way to go","m.mentions":{},"msgtype":"m.text"},"ts":1748510711377,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Op9pBs7mE9dYJS3XEBfuHx0YFXnbG6FUolcmjmvlUrk"},
{"content":{"body":"(for this approach)","m.mentions":{},"msgtype":"m.text"},"ts":1748510715802,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$8nzQmnjnQnFnFDlI7ujlj7w1m09RkWn6p6a3oF3X-44"},
{"content":{"body":"Yah.","m.mentions":{},"msgtype":"m.text"},"ts":1748510719708,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$xc-0knI9HdR19tFk9y7i378bdatsd5TStoe1EOZMGOs"},
{"content":{"body":"\"Modified BigInt\" is more like \"BigDecimal\" which is closer to String than Decimal","m.mentions":{},"msgtype":"m.text"},"ts":1748510764518,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$35-fc_0x50nUsU7O89t94arG01Jd0CErERVSWhGdJ5E"},
{"content":{"body":"thinking about arithmetic on these values, it's a sort of back-door rational number (but restricted to values that have finite decimal representations)","m.mentions":{},"msgtype":"m.text"},"ts":1748510876275,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$jG6yrCt-ZJDTO3zVwcIq_3wlhvotqGpqD5FcppkM7wU"},
{"content":{"body":"(btw that is definitley doable, and not slow; I'm not raising a performance concern)","m.mentions":{},"msgtype":"m.text"},"ts":1748510933563,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$jUWta8FMcHuARIRRHT5-vqYP67HJv1hbV6kCs2u9IrA"},
{"content":{"body":"Is there any way in which a string-backed Amount could be distinguished from a bigdecimal-backed Amount by a JS user?","m.mentions":{},"msgtype":"m.text"},"ts":1748510935027,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$FVxVi1DaVWeTAARJXjAqRCbrDr1E_Q02xCLTCon5QL4"},
{"content":{"body":"(I don't think there is or should be any difference)","m.mentions":{},"msgtype":"m.text"},"ts":1748510994417,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Y543-O6geMWvpRZZx6VjHgx7e0j6yHk3rdrmwMKCQsg"},
{"content":{"body":"to my mind nothing sticks out; they seem basically interchangeable","m.mentions":{},"msgtype":"m.text"},"ts":1748511055358,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$VnlKSQuQfQTfATyCdK-Ja44Zzek8IRrrKqJVTvfh_io"},
{"content":{"body":"That's mostly correct, yes, except that it may prevent us from supporting rationals where a string like `\"4/3\"` could be a thing we support","format":"org.matrix.custom.html","formatted_body":"That's mostly correct, yes, except that it may prevent us from supporting rationals where a string like <code>\"4/3\"</code> could be a thing we support","m.mentions":{},"msgtype":"m.text"},"ts":1748511135403,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$7DfiCs7tUyq3urJRZtJZUe-xJBQyddwFtSZkxXBkIKc"},
{"content":{"body":"it seems that we're converging toward a String-backed Amount that would support all \"numerics\" via cast-like operations suggested by Eemeli and Nic","m.mentions":{},"msgtype":"m.text"},"ts":1748512863604,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$StUp3d6XOPwXJqO0Ubko3KfQIWcOlEsMftXrHexMNMg"},
{"content":{"body":"Note that string amount is not a solution to all problems, as we might need to redefine that for example 1e+1 and 1e1 are the same number but different strings","msgtype":"m.text"},"ts":1748512918571,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$SK29FtxhtQz1YF3nyomcdxlVIZFpWIQjTK44KpIPBPk"},
{"content":{"body":"right we'd need to settle on normalization here too","m.mentions":{},"msgtype":"m.text"},"ts":1748512938989,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Ho65Afa61q3cC1r9_cdtSWN3iLPyo_00ht4DpsgI_fw"},
{"content":{"body":"decimal does that kind of normalization in the sense that it accepts both of those but outputs only the 1st","m.mentions":{},"msgtype":"m.text"},"ts":1748512971569,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$3b0UGXd5cwDNO5BCgddjhfs555xaS1CXLvRchmOcqOQ"},
{"content":{"body":"I can say with extremely high confidence that redefining bigint is not feasible. It is a primitive type with existing well-defined integer-only semantics, e.g. `4n / 3n === 1n`.","format":"org.matrix.custom.html","formatted_body":"I can say with extremely high confidence that redefining bigint is not feasible. It is a primitive type with existing well-defined integer-only semantics, e.g. <code>4n / 3n === 1n</code>.","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$yes7IcUv-Iqrxu5iBlitfSi6xO7qmQMUq2rzklDBV2s"}},"msgtype":"m.text"},"ts":1748513128936,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$765RFzFD-P86D_Q-_UsewH05fS3Wxh0O9EMfbD6OLmU"},
{"content":{"body":"No, I would say that we're converging on this being a feasible alternative, not necessarily converging on the preferred approach","m.mentions":{"user_ids":["@jesse:igalia.com"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$StUp3d6XOPwXJqO0Ubko3KfQIWcOlEsMftXrHexMNMg"}},"msgtype":"m.text"},"ts":1748513142699,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$zJDj4d4FVyTgrGb9Y1e2ieGMLLDehHjRPf8YpeMRzTo"},
{"content":{"body":"Just add a new operator and define `/` as integer division. I see this as a papercut to be weighed with other pros and cons but not a fatal flaw","format":"org.matrix.custom.html","formatted_body":"Just add a new operator and define <code>/</code> as integer division. I see this as a papercut to be weighed with other pros and cons but not a fatal flaw","m.mentions":{"user_ids":["@gibson042:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$765RFzFD-P86D_Q-_UsewH05fS3Wxh0O9EMfbD6OLmU"}},"msgtype":"m.text"},"ts":1748513242688,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$5vkJKrsPEuBYRIkey0zR2mDk4ty3yuiOpy22sCXiU9o"},
{"content":{"body":"for storage, it might be a bit odd to have bigints be either an integer or a decimal","m.mentions":{},"msgtype":"m.text"},"ts":1748513370704,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$WbDF_R2IQyCJQlTFVwuuy9Yf3GPYY_GUDM2BzomMGp4"},
{"content":{"body":"even if we could smooth out the ergonomics and surface area","m.mentions":{},"msgtype":"m.text"},"ts":1748513390326,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$GLPKsytkCcKCHRridmurzsMBI86B5qAfWk8MbCuk3uY"},
{"content":{"body":"bigints already require a heap, so I don't think it's much cost","m.mentions":{},"msgtype":"m.text"},"ts":1748513411839,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$5b3CHTOX7-_elTOh9kmG7f0Ekgrt5u5tr494OMRC4eA"},
{"content":{"body":"In other words, they are _already_ not particularly efficient in their storage. We're making a slightly-inefficient-and-not-widely-used type into a slightly-more-inefficient-but-more-widely-used type","format":"org.matrix.custom.html","formatted_body":"In other words, they are <em>already</em> not particularly efficient in their storage. We're making a slightly-inefficient-and-not-widely-used type into a slightly-more-inefficient-but-more-widely-used type","m.mentions":{},"msgtype":"m.text"},"ts":1748513449515,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$J-V-UA3hncuB1usT_f5V2wO_AdEwjziL5DibQ0TNeiU"},
{"content":{"body":"oh, \"just\" add a new operator? And it's not only that anyway, there's also existing ecosystem use of bigint for alignment with interoperable data models such as Syrup and CBOR, in which arbitrarily-sized integers constitute a distinct type from arbitrary decimal and/or binary fractions","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$5vkJKrsPEuBYRIkey0zR2mDk4ty3yuiOpy22sCXiU9o"}},"msgtype":"m.text"},"ts":1748513737770,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$F8ML8GDc-jX79i-YMb1UI9zyU_tOtS6EuTT0IPT0JAw"},
{"content":{"body":"Yes, the data model concerns are something worth discussing, the nature of the issues involved there","m.mentions":{},"msgtype":"m.text"},"ts":1748513845138,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$tpioKnDV_f-X6lbKoFo05gCw-IFS3dGC0MWmjI9SVGA"},
{"content":{"body":"to be clear: not only do I have high confidence that redefining bigint is not feasible, but furthermore I am personally inclined to oppose any such attempt","m.mentions":{},"msgtype":"m.text"},"ts":1748513871555,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$e_khaa3TM6q6wB5t0vVrtfDB5zOpWl-hoAD5sBZE1X0"},
{"content":{"body":"Jesse (ðŸ‡ªðŸ‡¸): Should we steer the conversation to one of the questions we need answers from MM","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse (ðŸ‡ªðŸ‡¸)</a>: Should we steer the conversation to one of the questions we need answers from MM","m.mentions":{"user_ids":["@jesse:igalia.com"]},"msgtype":"m.text"},"ts":1748519015173,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$K1zNGvwUO3xu1jXwlh1mboqAsv4-iOBi0ApyN6aH0rs"},
{"content":{"body":"Better use of time than NaN","m.mentions":{},"msgtype":"m.text"},"ts":1748519027085,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$dVTr25xtNDMmGWhx7O2AZt6uYHZVnTSxUBNMk5c1LNI"},
{"content":{"body":"I don't really understand the relevance of the rounding discussions, given that AFAIK the only place where rounding might happen with Amount is when going from a high-precision numeric string to Decimal (if that's what's used as its internal representation). Any Amount-internal fraction/significant digit rounding will presumably happen with respect to the value's internal representation, so all of it will happen consistently.","m.mentions":{},"msgtype":"m.text"},"ts":1748521119820,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$xxzYHK2LzpA3DhY9DJ01FQ5QyNXV_xbzcRcnqw10lgI"},
{"content":{"body":"yes, I also didn't quite detect the substantive issue that we were trying to get at in the rounding discussion","m.mentions":{},"msgtype":"m.text"},"ts":1748521227318,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$t2g1KduTVlGWDnIhAvKmNlvllYMyBdd_XREASqYkNZw"},
{"content":{"body":"surely, such things would be a stage 2 concern","m.mentions":{},"msgtype":"m.text"},"ts":1748521240180,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$NrDQPMu_mK4TLP_r4LsGc0qu_HHo3aSpHUefrDe7cuo"},
{"content":{"body":"even Intl, with its huge limits, surely has to handle rounding, when given massive digit strings","m.mentions":{},"msgtype":"m.text"},"ts":1748521332490,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$dc5xP9YN7NvEVCCBTBooiB5m4HeF03yCurgqID0bRSQ"},
{"content":{"body":"I do think that unless we use something like a numeric strings as the internal representation, then a constructor needs to be able to define the rounding mode. Would the currently-proposed `.from` static method allow for a second argument setting that?","format":"org.matrix.custom.html","formatted_body":"I do think that unless we use something like a numeric strings as the internal representation, then a constructor needs to be able to define the rounding mode. Would the currently-proposed <code>.from</code> static method allow for a second argument setting that?","m.mentions":{},"msgtype":"m.text"},"ts":1748521362674,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$jWvQ9wDIcHix3tMYG2jn2Yc3NCxSFMbNP9z9Ia1QPEU"},
{"content":{"body":"we could add a 2nd argument","m.mentions":{},"msgtype":"m.text"},"ts":1748521389896,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$mwvMj8Ynu98fsKVgOaoqcHQe3Z9eiW3ag_NWz8oODoU"},
{"content":{"body":"Do any of the prior-art Temporal `.from` methods allow for a second argument?","format":"org.matrix.custom.html","formatted_body":"Do any of the prior-art Temporal <code>.from</code> methods allow for a second argument?","m.mentions":{},"msgtype":"m.text"},"ts":1748521417107,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Au8tqPSC6K3InKbxgE-zhD3u1S0fpJm0DzZ1WQNbKGo"},
{"content":{"body":"IIRC those are all single-argument methods","m.mentions":{},"msgtype":"m.text"},"ts":1748521466030,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$NCxfM4qT0VRb6ous6JyYhb-0vXCKP7cS17qwMhQYUAE"},
{"content":{"body":"this reminds me of the discussion of whether we should also have a constructor, not just `.from`","format":"org.matrix.custom.html","formatted_body":"this reminds me of the discussion of whether we should also have a constructor, not just <code>.from</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748521501192,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$fKfuOtBnKFKrZf15V-kufwqPX7lfI3gVFE2zBoliDK8"},
{"content":{"body":"the constructor would be like Temporal's, where every argument is needed","m.mentions":{},"msgtype":"m.text"},"ts":1748521524626,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$LK8pD9AJxO0fdeqBQ9UdOURCrkZ-XHA1wgeZ6YfpLwo"},
{"content":{"body":"to totally specify everything, without fallbacks","m.mentions":{},"msgtype":"m.text"},"ts":1748521537430,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$IBmYP-YVZthZu82qnugTdod3Aq5_8Fhv4hIEa-xW3O8"},
{"content":{"body":"I would think that the Intl.NumberFormat model of value+options bag matches much better, esp. considering future extension for unit/currency support.","m.mentions":{},"msgtype":"m.text"},"ts":1748523039672,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$i2XKUnfmdQRTOuxjGdp91TODeCEFN9aeRihkJbw68-k"},
{"content":{"body":"procedurally, how should we think about presenting a String-backed Amount? would it continue to be part of the decimal proposal?","m.mentions":{},"msgtype":"m.text"},"ts":1748523274418,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$1N-m6rvn2jW3SMyDyldqghFF42oruh5CnAWBvIAHEYA"},
{"content":{"body":"I would think that'd be easier done as a separate refactored proposal-measure.","m.mentions":{},"msgtype":"m.text"},"ts":1748523570375,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$3O8fZ37Awd3czKnZpjaHtN0Sr-1ATENYj0dg-iop_jI"},
{"content":{"body":"(not saying we've totally switched to that approach; at this point, it's an interesting potential alternative. just asking hypothetically)","m.mentions":{},"msgtype":"m.text"},"ts":1748523580272,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$XfLJT9EvzuLC5hEvujgYFzykCzmfLYpZJainiiKsGj8"},
{"content":{"body":"otoh in our current discussions of (Decimal.)Amount, we've had the luxury of not yet worrying about units, the thinking being that Measure will round out the picture","m.mentions":{},"msgtype":"m.text"},"ts":1748523742365,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$fxcm4HLrDewhxzvcLZq5qqRPAV1be-dnLfLb6MoZRjk"},
{"content":{"body":"iow even a String-based Amount could make sense in the Decimal proposal, because it is indeed a kind of numeric value","m.mentions":{},"msgtype":"m.text"},"ts":1748523780378,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$neTbJQEmh_R1_Ty9W16e1tgNb9Htm82C_cb6WsSkdH0"},
{"content":{"body":"and it works","m.mentions":{},"msgtype":"m.text"},"ts":1748523789805,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$VMsK3sNv6DFA5zsgqcPaCMvwLBHm-tdw6559yWXsAK4"},
{"content":{"body":"it's like part 1 of a 2-part movie","m.mentions":{},"msgtype":"m.text"},"ts":1748523804690,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$WKRLZdNpqznNOIAn1BGLuCPr1DM1a7ifVYd4uI86teg"},
{"content":{"body":"it does make sense on its own","m.mentions":{},"msgtype":"m.text"},"ts":1748523856689,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$qWzDkMXnc5K_-u_NOE9usmZmuR59MExjlI1F2NjvbiQ"},
{"content":{"body":"A minimal non-Decimal Amount could start out with `unit` and `currency` as string-valued optional properties, and include special handling in Intl.NumberFormat when an Amount used is used in a `.format()` call.","format":"org.matrix.custom.html","formatted_body":"A minimal non-Decimal Amount could start out with <code>unit</code> and <code>currency</code> as string-valued optional properties, and include special handling in Intl.NumberFormat when an Amount used is used in a <code>.format()</code> call.","m.mentions":{},"msgtype":"m.text"},"ts":1748523869524,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$waQIH7RFb7F-wMCBzmVTCFxqPFboT11w8Z-UKRmuHM0"},
{"content":{"body":"ah, interesting, good point -- I like the idea of pointing to those bits of Intl as prior art","m.mentions":{},"msgtype":"m.text"},"ts":1748523896709,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$syP553NTQpeLrWQIco5DJZMzm2ssGTKeIaIIpWcIBK0"},
{"content":{"body":"As we're proposing a single class for handling both currency and unit formatting, we're going to have the potential for `.format(amount)` throwing no matter what, so gating the supported units at that point rather than in the Amount constructor also makes sense.","format":"org.matrix.custom.html","formatted_body":"As we're proposing a single class for handling both currency and unit formatting, we're going to have the potential for <code>.format(amount)</code> throwing no matter what, so gating the supported units at that point rather than in the Amount constructor also makes sense.","m.mentions":{},"msgtype":"m.text"},"ts":1748523986467,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$qQmHXWwD7rVG9wG5dL8tv5PP4GzLwaR1ARdXAQrKliQ"},
{"content":{"body":"And doesn't introduce a dependency in ECMA-262 on the ECMA-402 list of supported units.","m.mentions":{},"msgtype":"m.text"},"ts":1748524017527,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$FDTjRyPX0XthDWH8kaMIPqR9gTA5b9Hq41NydD6BFck"},
{"content":{"body":"Procedurally, I wonder if we could get Stage 2 on Decimal and Decimal.Amount, followed by the proposal to extend Decimal.Amount to support dimensions and higher prevision","m.mentions":{},"msgtype":"m.text"},"ts":1748527464632,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$1zbnwcBV1m3GIoVzTOQSISpbPTjSAGim6wewfmaDTO8"},
{"content":{"body":"(in which case we would rename it from Decimal.Amount to something else, perhaps in a Numerics namespace)","m.mentions":{},"msgtype":"m.text"},"ts":1748527486526,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$TEKoTKyBc33ekCQu7qbsjN1HsFujAr2dJeaFRuUsMmw"},
{"content":{"body":"this sounds like a reasonable path -- I think the committee understands decimal and decimal.amount fairly well at this point. the motivation for increased limits comes more naturally from a discussion of measurements","m.mentions":{},"msgtype":"m.text"},"ts":1748527585986,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$XSPBEHKPH4VjXPF3toW34vwTuLSKqZhOnjmhRlOu1SY"},
{"content":{"body":"* Procedurally, I wonder if we could get Stage 2 on Decimal and Decimal.Amount, followed by the proposal to extend Decimal.Amount to support dimensions and higher precision","m.mentions":{},"m.new_content":{"body":"Procedurally, I wonder if we could get Stage 2 on Decimal and Decimal.Amount, followed by the proposal to extend Decimal.Amount to support dimensions and higher precision","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1zbnwcBV1m3GIoVzTOQSISpbPTjSAGim6wewfmaDTO8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748527610610,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$syevrnKVYcOiGnUwTqSfOT9Tmj6LWwH64fipxQgbbD4"},
{"content":{"body":"Or we could just leave out Decimal.Amount from the Decimal proposal, and introduce Amount separately under the measure proposal.","m.mentions":{},"msgtype":"m.text"},"ts":1748527800570,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$DjE6_4MToFgbeYFAT54P3MWK-PxbGzdGN6NOwYJ2Hh4"},
{"content":{"body":"My long-standing position is that I don't support the Decimal proposal without the i18n solution","m.mentions":{},"msgtype":"m.text"},"ts":1748527836634,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$l_cHPQigkvHkT8VOz_cISseAv7TRUzpyOgdUuTqDL8M"},
{"content":{"body":"Would those concerns be potentially resolved if we were to propose a non-Decimal Amount for Stage 2 before proposing Decimal for Stage 2?","m.mentions":{},"msgtype":"m.text"},"ts":1748527895034,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ZsgUzAErckfdPMV1p0NGIYkqeJIfHjBzH1Ij7uHUW98"},
{"content":{"body":"I could be reasonably happy with String Amount to Stage 2 and Decimal to Stage 2 later","m.mentions":{},"msgtype":"m.text"},"ts":1748527909743,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$H7AB0_dfMTlGS9eKHcVPY1ZZZ7GiQHhdpxoJTi7G8Eg"},
{"content":{"body":"That sounds like a thing that could be done relatively easily from where we are now.","m.mentions":{},"msgtype":"m.text"},"ts":1748527943854,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$KWHKl6sRGZjZzAhyTcCxrpdgw6ldw4MBR4X7qsJII2g"},
{"content":{"body":"except for the fact that we haven't presented String Amount to committee before and don't have a temperature check on it :) ","m.mentions":{},"msgtype":"m.text"},"ts":1748527996022,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$DBTgoK1c_qk7udx0QztXkzxp9L6egX6Y6ZI5WtUX504"},
{"content":{"body":"if so then I wonder if we need to pivot to <del>measure</del> amount for now","format":"org.matrix.custom.html","formatted_body":"if so then I wonder if we need to pivot to <del>measure</del> amount for now","m.mentions":{},"msgtype":"m.text"},"ts":1748528020393,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$A7eAVBGPTD_7gOIJKEcyiVy91_0tGGJNsg_qCy2O3gs"},
{"content":{"body":"I think the most vocal objections to Decimal.Amount as currently proposed have been from Mark and me, regarding the value limits that Decimal imposes. A string-based Amount would resolve those concerns, so I could well believe it getting through unless wholly new concerns are raised.","m.mentions":{},"msgtype":"m.text"},"ts":1748528141926,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$pExN7cVBA9YSHK1eC6MyTYchrf_CyQFzu_3wRvJACsM"},
{"content":{"body":"And as I discovered with Intl.MessageFormat, asking for Stage 2 might be the only way to surface those.","m.mentions":{},"msgtype":"m.text"},"ts":1748528164111,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$UGSTD6vHxgfv2AzPjSkhL09U2qYYLI0qIbioZaF4N08"},
{"content":{"body":"I think it makes *some* sense to do a String-based amount in decimal (called Amount, not Decimal.Amount)","format":"org.matrix.custom.html","formatted_body":"I think it makes <em>some</em> sense to do a String-based amount in decimal (called Amount, not Decimal.Amount)","m.mentions":{},"msgtype":"m.text"},"ts":1748528179017,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$r1bqUH1QyaD91yZXUJKZ4LzZ7EtrPZ71rRZw6NPPlMM"},
{"content":{"body":"(I think it should be `Numerics.Amount` and `Numerics.Decimal` but that can be resolved pre-2.7)","format":"org.matrix.custom.html","formatted_body":"(I think it should be <code>Numerics.Amount</code> and <code>Numerics.Decimal</code> but that can be resolved pre-2.7)","m.mentions":{},"msgtype":"m.text"},"ts":1748528211012,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$0AbgHqhX3mozKwPz_EqPJ542aAEN88gA4trFuQulgUQ"},
{"content":{"body":"it makes sense because the use cases for decimal, especially the i18n ones, need (Numerics.)Amount","m.mentions":{},"msgtype":"m.text"},"ts":1748528271644,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Y_T0aoMyKQ82pWyjPEJh4DP-jbZ1dS801o6akPIcLPs"},
{"content":{"body":"I would prefer bare `Amount` over `Numerics.Amount`, but I agree that this should not be a stage 2 blocker.","format":"org.matrix.custom.html","formatted_body":"I would prefer bare <code>Amount</code> over <code>Numerics.Amount</code>, but I agree that this should not be a stage 2 blocker.","m.mentions":{},"msgtype":"m.text"},"ts":1748528305624,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$aZJg3wHI7WO7lBLCCLnGnBTFhv3nOxfaMPtIBdbx0uc"},
{"content":{"body":"To calrify, I don't dislike `Numerics.Amount`, but prefer the non-namespaced one.","format":"org.matrix.custom.html","formatted_body":"To calrify, I don't dislike <code>Numerics.Amount</code>, but prefer the non-namespaced one.","m.mentions":{},"msgtype":"m.text"},"ts":1748528344746,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$9IL_M1cnBDz3uVP9b6XJ3Qgkafpz2tIUZF2ywQh8tSI"},
{"content":{"body":"* To clarify, I don't dislike `Numerics.Amount`, but prefer the non-namespaced one.","format":"org.matrix.custom.html","formatted_body":"* To clarify, I don't dislike <code>Numerics.Amount</code>, but prefer the non-namespaced one.","m.mentions":{},"m.new_content":{"body":"To clarify, I don't dislike `Numerics.Amount`, but prefer the non-namespaced one.","format":"org.matrix.custom.html","formatted_body":"To clarify, I don't dislike <code>Numerics.Amount</code>, but prefer the non-namespaced one.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$9IL_M1cnBDz3uVP9b6XJ3Qgkafpz2tIUZF2ywQh8tSI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748528349462,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$bPIIDEOd1OXm-T8xw2UOyECcJ5IoktbyKg-fx2v2owc"},
{"content":{"body":"It's not dissimilar to `SeededPRNG` being better as `Random.Seeded` but probably only if there are other things in the `Random` namespace","format":"org.matrix.custom.html","formatted_body":"It's not dissimilar to <code>SeededPRNG</code> being better as <code>Random.Seeded</code> but probably only if there are other things in the <code>Random</code> namespace","m.mentions":{},"msgtype":"m.text"},"ts":1748528454321,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$id3QaXnaKTUA8Y75paueWyNCrpaO92oIdKtUCsKQBb8"},
{"content":{"body":"imo we've made lots of mistakes by *not* optimistically namespacing things","format":"org.matrix.custom.html","formatted_body":"imo we've made lots of mistakes by <em>not</em> optimistically namespacing things","m.mentions":{},"msgtype":"m.text"},"ts":1748528572211,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$crKUAL6h6F4BnavICYX4F4jnuHnX0wAqwOd9Z3w8zGQ"},
{"content":{"body":"eventually everything gets something else related to it added","m.mentions":{},"msgtype":"m.text"},"ts":1748528587504,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$5q115m_lP2eiRU1lmJA0LqpXoc6yqqHqd7Swkw_LaTM"},
{"content":{"body":"On a separate note, have we considered/discussed whether `Amount.p.valueOf()` should explicitly throw like `Decimal.p.valueOf()` does? For the latter I gather it's primarily done to prevent something like `d1 + d2` from appearing to work, but I'm not sure that the argument made for Decimal wholly applies to Amount. The ergonomics cost of casts like `BigInt(amount)` and `Number(amount)` not working is kinda high.","format":"org.matrix.custom.html","formatted_body":"On a separate note, have we considered/discussed whether <code>Amount.p.valueOf()</code> should explicitly throw like <code>Decimal.p.valueOf()</code> does? For the latter I gather it's primarily done to prevent something like <code>d1 + d2</code> from appearing to work, but I'm not sure that the argument made for Decimal wholly applies to Amount. The ergonomics cost of casts like <code>BigInt(amount)</code> and <code>Number(amount)</code> not working is kinda high.","m.mentions":{},"msgtype":"m.text"},"ts":1748528991762,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$6-OChX3acabrfNGvYBaDa6vaQzZOS4kf-eyMmMfx6RE"},
{"content":{"body":"my initial gut reaction would be for valueOf to return a serialized number","m.mentions":{},"msgtype":"m.text"},"ts":1748529050385,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$7XZSKig1hMgGlYj51pVCkObxhehW7fD2FKG1VoqafUA"},
{"content":{"body":"(without units/currency)","m.mentions":{},"msgtype":"m.text"},"ts":1748529057249,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$HfzIXi_LYhgPAWEm1TIAFdxCY24gE0zyWvPHSL0nh88"},
{"content":{"body":"we should do what Temporal does, which I is to throw on valueOf","m.mentions":{},"msgtype":"m.text"},"ts":1748529073217,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$1uBI_eZysNeQk902bknP_ENEr85Pp9XgRV5uZW29Spo"},
{"content":{"body":"That would work for me, certainly.","m.mentions":{},"msgtype":"m.text"},"ts":1748529073617,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$85TpQ_f6vUcfBJ85e4aqUq8uY5f-LdZO8EW4mGc46KU"},
{"content":{"body":"* we should do what Temporal does, which is to throw on valueOf","m.mentions":{},"m.new_content":{"body":"we should do what Temporal does, which is to throw on valueOf","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$1uBI_eZysNeQk902bknP_ENEr85Pp9XgRV5uZW29Spo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748529087491,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$nvTJWePYd5RpNu93R3Jp9ZOCD_L-8YUL6FeOPGOOZTs"},
{"content":{"body":"(my response was to Jesse's suggestion)","m.mentions":{},"msgtype":"m.text"},"ts":1748529092397,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$RobRP2PgqMUdDhO488fmAGfbZqoEjWzn4Ep6DbY5gIc"},
{"content":{"body":"I'm not in favor of valueOf or toString returning something that is equal if the corresponding Amounts are not equal","m.mentions":{},"msgtype":"m.text"},"ts":1748529117096,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$h49xzsrpB1v6Ws_RqAywd-E14O0suNNhthyEgA0RhQM"},
{"content":{"body":"Why does Temporal's behaviour here matter for Amount?","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$1uBI_eZysNeQk902bknP_ENEr85Pp9XgRV5uZW29Spo"}},"msgtype":"m.text"},"ts":1748529118040,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$kbo8bj-o0cFU8qmPSewWBd5xpx4JhAmWxLr86wG8hiA"},
{"content":{"body":"ah, I meant not exactly the number but the number + precision","m.mentions":{},"msgtype":"m.text"},"ts":1748529153860,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Hj-Uf2GzfKNM2NeRn5uHYyX_pX80cWUQloCP2iRkP7Q"},
{"content":{"body":"digit string iow","m.mentions":{},"msgtype":"m.text"},"ts":1748529159681,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$9BtJepkYhwbbjKmq2CJEulFlsRT9C8X6kxvn2mQC3Gg"},
{"content":{"body":"this should satisfy the constraint you have in mind sffc ","format":"org.matrix.custom.html","formatted_body":"this should satisfy the constraint you have in mind <a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a>","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"ts":1748529178628,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$UMrCmLzW8A0A1_nu7A11TxGeIrcX3NUV-iLKDWyEASQ"},
{"content":{"body":"how important are casts in comparison to explicit method calls?","m.mentions":{},"msgtype":"m.text"},"ts":1748529233250,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$l06kZe0BKY0oJmmcxsQhsgTvkj2yoZm85dA39BwCPPI"},
{"content":{"body":"Temporal decided to throw on valueOf for a number of well-motivated reasons, which I think also apply here. If valueOf returns a string, then people _are_ going to take amt1 + amt2 and get garbage","format":"org.matrix.custom.html","formatted_body":"Temporal decided to throw on valueOf for a number of well-motivated reasons, which I think also apply here. If valueOf returns a string, then people <em>are</em> going to take amt1 + amt2 and get garbage","m.mentions":{},"msgtype":"m.text"},"ts":1748529242532,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$XF0HXmbq1C9DOu4rN4rP61Lp5GvHMHeHVOk-Ig6tKE0"},
{"content":{"body":"Number(amount) vs. amount.toNumber()","m.mentions":{},"msgtype":"m.text"},"ts":1748529244543,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$D_uSBfAesbcNJ0is34_B6-Tft092ItKcENqVQKHDoG0"},
{"content":{"body":"I'm inclined to make valueOf throw, to avoid mixing, following the logic of decimal","m.mentions":{},"msgtype":"m.text"},"ts":1748529565818,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$i-ngtLO3RpB_x9Dm_B1zqE5-hpj0hYmqDpkAMUUG6Gk"},
{"content":{"body":"(I wonder if this thinking was one of the \"stop casting things\" series of talks by KG?)","m.mentions":{},"msgtype":"m.text"},"ts":1748529633340,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$ZR6syqO73frgBNml2pfxy5ODWQVQ5QPk4qdvRMSunn0"},
{"content":{"body":"sorry \"stop coercing things\"","m.mentions":{},"msgtype":"m.text"},"ts":1748529752294,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$1429XUK359DjC9qfeWMDa4t_mu9wj_c-d1SZZ3KsSXA"},
{"content":{"body":"btw I realize this is getting into the weeds but what should we do about (1) NaN, (2) -0, and (3) +/infinity?","m.mentions":{},"msgtype":"m.text"},"ts":1748530033820,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$7LKuszxMm1YZpDnbET5EYLEir4xnuBxE0ynSEsnNsRc"},
{"content":{"body":"one argument is that we should support all of them because decimal does, and so does intl","m.mentions":{},"msgtype":"m.text"},"ts":1748530050475,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$DgxTw9xpIj8TYYXjLYsN0a7diGAWan8oeQ1kk1TrWZE"},
{"content":{"body":"another approach would be to ban them, the thinking being that an \"amount\" is always a *finite* amount","format":"org.matrix.custom.html","formatted_body":"another approach would be to ban them, the thinking being that an \"amount\" is always a <em>finite</em> amount","m.mentions":{},"msgtype":"m.text"},"ts":1748530086086,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$4_TgbytVMd1UE1fHg_k4LHhqYm4wnvf-vzZwHdJKj-0"},
{"content":{"body":"-0 is a finite amount","m.mentions":{},"msgtype":"m.text"},"ts":1748530112309,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N-jpl9CDOJDpKQ6ZgfHSXiCvdDCVQHViuVwVo-P9nKs"},
{"content":{"body":"true","m.mentions":{},"msgtype":"m.text"},"ts":1748530121983,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$V7eKUGA03lTs_Ffnb6TV-5ARmwKPsTszHKbrt8ENBM8"},
{"content":{"body":"banning nan and infinity tho seems fine to me, as long as it throws for them","m.mentions":{},"msgtype":"m.text"},"ts":1748530123575,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Tjg0arGBFql2WqQee4pYE8lf4Wkuj8aER9qrM3AY4LE"},
{"content":{"body":"should we normalize -0 to 0?","m.mentions":{},"msgtype":"m.text"},"ts":1748530146607,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$GovQpt1_dNieWOLCr4BETKBXbP-zFNQ9p9wZ5vEH1AU"},
{"content":{"body":"i strongly dislike doing that (as i'll be talking about in the clamp continuation)","m.mentions":{},"msgtype":"m.text"},"ts":1748530168038,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$sHabtBwpPRxgZj_gJ49sdqFJu1W5PLSW1Jf5z1cmNmo"},
{"content":{"body":"but, tbf, that's probably what most people will want done","m.mentions":{},"msgtype":"m.text"},"ts":1748530174353,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$6mAlGP8BfjqUUMLH5N5U73RGRs5kR2AF3ZsmFjXsY-w"},
{"content":{"body":"yeah","m.mentions":{},"msgtype":"m.text"},"ts":1748530179672,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$8IJqB12VE5592WwijPbyza7-EbO39iYzoJv9dWt-6Hs"},
{"content":{"body":"* i strongly dislike doing that overall (as i'll be talking about in the clamp continuation)","m.mentions":{},"m.new_content":{"body":"i strongly dislike doing that overall (as i'll be talking about in the clamp continuation)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$sHabtBwpPRxgZj_gJ49sdqFJu1W5PLSW1Jf5z1cmNmo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1748530198835,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s6MEt2KxewKZAggryZrfh6eoivoXqAqFiJb91UH8tWc"},
{"content":{"body":"I'd like us to have `Amount(0).equals(Amount(-0))` to be `true`","format":"org.matrix.custom.html","formatted_body":"I'd like us to have <code>Amount(0).equals(Amount(-0))</code> to be <code>true</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748530203623,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$v7quowOohH_5DnysNbDFyclvm8CQQILheSupXKW8j08"},
{"content":{"body":"at a minimum","m.mentions":{},"msgtype":"m.text"},"ts":1748530211803,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$-rlERE9sVECSM_PcR3sY0q8dGwl7Quxlc0VhVZ9P9Yw"},
{"content":{"body":"i also dislike that but i think it's much more defensible given === and the concept of an amount","m.mentions":{},"msgtype":"m.text"},"ts":1748530241132,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$BDzl7q8IBAE-tCuZ8nVfPTCMCIq6RoJVob1-OX_vLSU"},
{"content":{"body":"ah ok interesting","m.mentions":{},"msgtype":"m.text"},"ts":1748530247072,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$lf6Cm_9AoQzHhRifG0Yp531djXGyBjmXXnTTEzIwoXM"},
{"content":{"body":"like, in general i think IEEE's -0 behavior is confusing and bad and we shouldn't constrain ourselves to something whose importance and impact we've long since surpassed","m.mentions":{},"msgtype":"m.text"},"ts":1748530272995,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$9mOHcvbGZjCR1sms6GFV4v18v1XpJeHJq31R-QxYnho"},
{"content":{"body":"but waldemar for sure, and others possibly, would not be happy with deviating from ieee 754","m.mentions":{},"msgtype":"m.text"},"ts":1748530287331,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KxzepnzFNik8gEi8blcruJfTCFJcirRGCKWYFlkyQek"},
{"content":{"body":"right","m.mentions":{},"msgtype":"m.text"},"ts":1748530293376,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$wIUiNbQGvEJ8YLYHizHEPJFVNKBW6rU-k-eRHWKntqg"},
{"content":{"body":"the same line of thinking -- \"don't deviate from IEEE 754\" -- could also be an argument for supporting NaN and infinity","m.mentions":{},"msgtype":"m.text"},"ts":1748530480305,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$3pcQZE5pMuOZdcyAOS_TjVQmDd2buXexTHN7NLQO2_A"},
{"content":{"body":"well, supporting a subset isn't necessarily \"deviation\"","m.mentions":{},"msgtype":"m.text"},"ts":1748530512401,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$KldmjBohhEwGliwq6vkJ50A7UI3w5YrjFIRkmzUtHOg"},
{"content":{"body":"we do have things like `Infinity.toPrecision(5)` --> `\"Infinity\"`","format":"org.matrix.custom.html","formatted_body":"we do have things like <code>Infinity.toPrecision(5)</code> --&gt; <code>\"Infinity\"</code>","m.mentions":{},"msgtype":"m.text"},"ts":1748530533164,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$K-awxyJ6Z4bxhIjkui5dEmaVObh8gIlOMA4QCzcTDSI"},
{"content":{"body":"(rather than throwing)","m.mentions":{},"msgtype":"m.text"},"ts":1748530539326,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$sjh3XxDFhO9juFRRQN6x3-CKgee6Ui01f3KF94mWs1Q"},
{"content":{"body":"I think ensuring that the Amount value was guaranteed to be finite would be a good idea.","m.mentions":{},"msgtype":"m.text"},"ts":1748530549849,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ofbNhvZ5yGofnVF73BFeAhbhfWeRY7HfkeJ5WU1t27Y"},
{"content":{"body":"sure but that's from the olden days when coercing was the thing","m.mentions":{},"msgtype":"m.text"},"ts":1748530555928,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$yKVDF_Zy3J9htCPbgLXI_9W0-I3SwP2shdAC_ffZreg"},
{"content":{"body":"the *golden* olden days","format":"org.matrix.custom.html","formatted_body":"the <em>golden</em> olden days","m.mentions":{},"msgtype":"m.text"},"ts":1748530568469,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$Xb6M8bOtgs91eM4xNg--a_TyHK7u0WHqSg_HG7ynTC0"},
{"content":{"body":"having to account for the special Infinity and NaN strings is gross","m.mentions":{},"msgtype":"m.text"},"ts":1748530569406,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$N8QpKeaTxFD4qcUNJeAIBgyLVZmKbkz-iTdRDo5KpVc"},
{"content":{"body":"agree","m.mentions":{},"msgtype":"m.text"},"ts":1748530574741,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$0MCjZHhwH10yAgWk3RsqwMZqNpXcvmQJDV0NoG1s4Ko"},
{"content":{"body":"ok it sounds like we have consensus on supporting finite values only, as well as -0","m.mentions":{},"msgtype":"m.text"},"ts":1748530599477,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$wCa21Z2gc0RSYpvmjl6iVQ8S055N-bw1nWfJYKDPABM"},
{"content":{"body":"For the interoperability story, an Amount that was able to represent any finite value would be probably the most valuable approach.","m.mentions":{},"msgtype":"m.text"},"ts":1748530639063,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$x1sqB-Qbn-hr9n0Wfu7f74OHeVZyjyETMV0gOi3C1F4"},
{"content":{"body":"I think `-0` should absolutely work as an input value, but normalising it to `0` has precedent in `String(-0) === '0'`.","format":"org.matrix.custom.html","formatted_body":"I think <code>-0</code> should absolutely work as an input value, but normalising it to <code>0</code> has precedent in <code>String(-0) === '0'</code>.","m.mentions":{},"msgtype":"m.text"},"ts":1748530697949,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$aFlkZj5oyC6wMNMjtvQQcx8oCwJece9kdwxFnZpcZXA"},
{"content":{"body":"sgtm","m.mentions":{},"msgtype":"m.text"},"ts":1748530737994,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$St6yNI4vmMzjDje1KlFwc80ZjTU_4LkwM2ZV9sFfgRk"},
{"content":{"body":"seems like a stage 2 concern to me","m.mentions":{},"msgtype":"m.text"},"ts":1748530748309,"senderName":"Jesse (ðŸ‡ªðŸ‡¸)","senderId":"@jesse:igalia.com","id":"$CB3JYQel6hbjc33tfvW6Oqs04WnUyFJb6YYdaYeGNEw"},
{"content":{"body":"Is it already the case that for two Number-s `x` and `y`, that `x === y` implies `String(x) === String(y)` ?","format":"org.matrix.custom.html","formatted_body":"Is it already the case that for two Number-s <code>x</code> and <code>y</code>, that <code>x === y</code> implies <code>String(x) === String(y)</code> ?","m.mentions":{},"msgtype":"m.text"},"ts":1748538505592,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$IH0lnyfVzyoP19r6Kr0L02cMeMoPWmxFiwqktxZY6eQ"}
]