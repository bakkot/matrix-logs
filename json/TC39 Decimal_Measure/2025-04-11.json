[
{"content":{"body":"* What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.\n\nI don't think it is right to position this as a question we ask plenary: \"should we include Decimal.Amount?\" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, we didn't ask \"should we include Temporal.PlainYearMonth?\" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.","m.mentions":{},"m.new_content":{"body":"What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.\n\nI don't think it is right to position this as a question we ask plenary: \"should we include Decimal.Amount?\" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, we didn't ask \"should we include Temporal.PlainYearMonth?\" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$miYENBzw_N5mvCfcRsL3VL6qOgmbtflhsYxak2TDmg4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744329860500,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$VvDK9Gcr0bE0NhE-ZK7SxVoDkbj_dGT7B6O_TLR4lRM"},
{"content":{"body":"* What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.\n\nI don't think it is right to position this as a question we ask plenary: \"should we include Decimal.Amount?\" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, I don't recall us asking \"should we include Temporal.YearMonth?\" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.","m.mentions":{},"m.new_content":{"body":"What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.\n\nI don't think it is right to position this as a question we ask plenary: \"should we include Decimal.Amount?\" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, I don't recall us asking \"should we include Temporal.YearMonth?\" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$miYENBzw_N5mvCfcRsL3VL6qOgmbtflhsYxak2TDmg4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744329918065,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$Cv24Al6Iwu5asmxXkddyK08fToo37YVzZSoij_RPMaY"},
{"content":{"body":"> Decimal but no ergonomic solution for its i18n interop\n\nsffc What would this look like? As we've agreed that Decimal (the one that does math) won't include precision, my understanding is that without any changes in ECMA-402 attempting to format a Decimal with NumberFormat or select its plural category will call its `.toString()` method, and get the user the result that they might expect from the Decimal's numerical value.\n\nThis won't really add any new capabilities for number formatting, but it won't take them away either, so I don't see how the i18n interop of even a minimal Decimal would not have an ergonomic solution.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Decimal but no ergonomic solution for its i18n interop</p>\n</blockquote>\n<p><a href=\"https://matrix.to/#/@sffc:mozilla.org\">sffc</a> What would this look like? As we've agreed that Decimal (the one that does math) won't include precision, my understanding is that without any changes in ECMA-402 attempting to format a Decimal with NumberFormat or select its plural category will call its <code>.toString()</code> method, and get the user the result that they might expect from the Decimal's numerical value.</p>\n<p>This won't really add any new capabilities for number formatting, but it won't take them away either, so I don't see how the i18n interop of even a minimal Decimal would not have an ergonomic solution.</p>\n","m.mentions":{"user_ids":["@sffc:mozilla.org"]},"msgtype":"m.text"},"ts":1744358973158,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$_-bVGqgV7DYHhKvCBjAAcrHR-SKjMvmcH7WxBLHBSdE"},
{"content":{"body":"Also, just to clarify, I am not advocating for a polymorphic Amount, and I'm not aware of anyone else doing so either. I do think that a black-box Amount would be sufficient for i18n purposes, but that's not the same thing.","m.mentions":{},"msgtype":"m.text"},"ts":1744359106694,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$Ap3WybtElFBaA2OOhTrGoFlWF9KcZwnx2wLmWojxsvQ"},
{"content":{"body":"The \"good intl support for decimal\" that Shane would be happy with is something along the lines of https://github.com/nicolo-ribaudo/proposal-numeric-with-precision (but just for decimal). It's what evolved in the discussions of merging decimal and measure, but we can figure out what's the _minimal_ chunk that would need to be added to Decimal that:\n- is good enough for intl\n- can be extended by the measure/amount proposal","msgtype":"m.text"},"ts":1744359343703,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$j7m8K1bbpkvvEWILeNwNRt37Bnuo5L9bviTnn2j9kUo"},
{"content":{"body":"* The \"good intl support for decimal\" that Shane would be happy with is something along the lines of https://github.com/nicolo-ribaudo/proposal-numeric-with-precision (but just for decimal, and without the protocol). It's what evolved in the discussions of merging decimal and measure, but we can figure out what's the _minimal_ chunk that would need to be added to Decimal that:\n- is good enough for intl\n- can be extended by the measure/amount proposal","m.new_content":{"body":"The \"good intl support for decimal\" that Shane would be happy with is something along the lines of https://github.com/nicolo-ribaudo/proposal-numeric-with-precision (but just for decimal, and without the protocol). It's what evolved in the discussions of merging decimal and measure, but we can figure out what's the _minimal_ chunk that would need to be added to Decimal that:\n- is good enough for intl\n- can be extended by the measure/amount proposal","msgtype":"m.text"},"m.relates_to":{"event_id":"$j7m8K1bbpkvvEWILeNwNRt37Bnuo5L9bviTnn2j9kUo","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1744359476173,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$i0YeYztBwN0z8V0x3w_PqcwMeVwxW4Eh75U6WtM9X-w"}
]