[
{"content":{"body":"My understanding of where we got to in post-meeting discussions this week with Jesse and nicolo-ribaudo is that an Amount ought to hold a _mathematical value_ (as defined in '262), parsed from a string input value using the same method as for **ToIntlMathematicalValue ( value )**, but without support for non-finite values or -0. Amount would either have no built-in limits on the value, or it would match the limits imposed by Intl.NumberFormat.\n\nOverall, the intent would be to avoid defining a new numeric type beyond what's already in the spec, even if not easily accessible by users.","format":"org.matrix.custom.html","formatted_body":"<p>My understanding of where we got to in post-meeting discussions this week with <a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a> and <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> is that an Amount ought to hold a <em>mathematical value</em> (as defined in '262), parsed from a string input value using the same method as for <strong>ToIntlMathematicalValue ( value )</strong>, but without support for non-finite values or -0. Amount would either have no built-in limits on the value, or it would match the limits imposed by Intl.NumberFormat.</p>\n<p>Overall, the intent would be to avoid defining a new numeric type beyond what's already in the spec, even if not easily accessible by users.</p>\n","m.mentions":{"user_ids":["@jesse:igalia.com","@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1749026597690,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ADm0BAtMME553DuEMGxp-5pldoomv_WXY1M4TVo-QzU"},
{"content":{"body":"that's my understanding as well -- thanks for sketching it out","m.mentions":{},"msgtype":"m.text"},"ts":1749029392477,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$0Js-Hv6zBYsMKaW98vQSb6E9OsAM9KWWBtc2CQh7JU0"},
{"content":{"body":"there's also an understanding that, if decimal were to advance, intl limits might also have to be adjusted (to account for the full range of decimal128, i.e. up to 34 significant digits and exponent of +/-6144), and ergo amount's limits","m.mentions":{},"msgtype":"m.text"},"ts":1749029466919,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$hE-liUqDnK_pM8LKadAumG_2_gxZcV4MkHQI0Sb6-4I"},
{"content":{"body":"Thinking on what we discussed, I'm kinda tending towards suggesting that we initially propose Amount with no built-in limits on the numerical value, like what's done with BigInt. Then we would only get rounding if fractionDigits or significantDigits were set in the options.","m.mentions":{},"msgtype":"m.text"},"ts":1749031617078,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$vF66qx6IEN5J8HCPsmqXcuAWLerCm12v-72Q-mXNDPY"},
{"content":{"body":"Implementations have their own harder limits. MVs are themselves unlimited, but they are usually bounded when creating an MV from a Number or elsewhere. The ICU4X limit is on the order of 2^16 digits and +/- 2^15 power of ten.","m.mentions":{},"msgtype":"m.text"},"ts":1749044103160,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$QU-QHVz--l2NT1x1usU6P5ujToutEClQoe0cp-xpaCM"},
{"content":{"body":"I think we should try for Stage 2 with _some_ limit, perhaps the Intl.NF limit, and we can work out _exactly what_ limit during Stage 2","format":"org.matrix.custom.html","formatted_body":"I think we should try for Stage 2 with <em>some</em> limit, perhaps the Intl.NF limit, and we can work out <em>exactly what</em> limit during Stage 2","m.mentions":{},"msgtype":"m.text"},"ts":1749044156059,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$18x4Pe52PeC5eeg6d6hoXxfz7C1ztln80-GkOioLTQ0"},
{"content":{"body":"agree -- for now, the spec text I'm working on is working with unlimited mathematical values","m.mentions":{},"msgtype":"m.text"},"ts":1749044356257,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$l_qaO1HUwjQF6OtTdQo824cdrxPxjfJldGWMOYWTvfg"},
{"content":{"body":"One of my biggest regrets about the Temporal design is that we chose limits for things that make it painful to implement. We spend so much time trying to optimize the 64+32 bit ints we need to represent nanoseconds since epoch for 100,000+ years.","m.mentions":{},"msgtype":"m.text"},"ts":1749044667632,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$L6HDHUnPCz706retw7UK_uEpf4ChFVKWxNDB5HN2T0g"},
{"content":{"body":"During lunch today I joked about defining a tagged template literal for Decimal, but tbh it doesn't look _too bad_. Here's one of the Decimal readme examples:\n```\nfunction calculateBill(items, tax) {\n  let total = Decimal`0`;\n  for (let { price, count } of items) {\n    total = Decimal`${total} + ${price} * ${count}`;\n  }\n  return Decimal`${total} * (${tax} + 1)`;\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>During lunch today I joked about defining a tagged template literal for Decimal, but tbh it doesn't look <em>too bad</em>. Here's one of the Decimal readme examples:</p>\n<pre><code>function calculateBill(items, tax) {\n  let total = Decimal`0`;\n  for (let { price, count } of items) {\n    total = Decimal`${total} + ${price} * ${count}`;\n  }\n  return Decimal`${total} * (${tax} + 1)`;\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749045144844,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$aJCXsm5dcyi8KVtzNfkniApXtFwug90BuCbXu8rsAKo"},
{"content":{"body":"https://jsr.io/@nic/decimal-literal","m.mentions":{},"msgtype":"m.text"},"ts":1749045194215,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$pk5VYtEIXAVtdR4PtJRO-Aic4Ebmj7MCu_ASnyCGcyM"},
{"content":{"body":"Is there a reason why that's not being considered for the spec?","m.mentions":{},"msgtype":"m.text"},"ts":1749045453538,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$NXiZ8V-uW23QqfZZtA4AgiuFxdg3kPk-p-875fKUato"},
{"content":{"body":"I think we eventually want `1.2m` but that should return a primitive. It would be surprising for `1.2m !== 1.2m` with object-based decimals.","format":"org.matrix.custom.html","formatted_body":"I think we eventually want <code>1.2m</code> but that should return a primitive. It would be surprising for <code>1.2m !== 1.2m</code> with object-based decimals.","m.mentions":{},"msgtype":"m.text"},"ts":1749045590380,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$meCnWXs87Nqpnf3gqTXeBSiLfbr5zwqmikR9YX-a5UA"},
{"content":{"body":"You presumably meant this?\n```\nm`1.2` !== 1.2m\n```","format":"org.matrix.custom.html","formatted_body":"<p>You presumably meant this?</p>\n<pre><code>m`1.2` !== 1.2m\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749045662992,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$rrI9U6BPsS8Aihnw5q_C7ubboIIKAIoQpMZ84WW84Hs"},
{"content":{"body":"I think it would be cool to have a decimal-based template syntax, where everything gets converted into a decimal.\n\n```\nlet a = new Decimal(\"1\");\nlet b = \"2\";\nlet c = 3;\nlet d = Decimal`a + b + c`; // 6\n```","format":"org.matrix.custom.html","formatted_body":"<p>I think it would be cool to have a decimal-based template syntax, where everything gets converted into a decimal.</p>\n<pre><code>let a = new Decimal(\"1\");\nlet b = \"2\";\nlet c = 3;\nlet d = Decimal`a + b + c`; // 6\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749045670971,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$ePwyTZcoCqX3BI0CNeRXLfVJTJwr8bg7eg1DwoI1QHc"},
{"content":{"body":"That's what I have above and Nicolo in his decimal-literal? but with `${...}` rather than some implicit access to the local context.","format":"org.matrix.custom.html","formatted_body":"That's what I have above and Nicolo in his decimal-literal? but with <code>${...}</code> rather than some implicit access to the local context.","m.mentions":{},"msgtype":"m.text"},"ts":1749045742493,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$5TWRu5U7FdOPSNuKhqVDpCNnojwlIi2plU4YGbeTg60"},
{"content":{"body":"Yes right","m.mentions":{},"msgtype":"m.text"},"ts":1749045766717,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$MGBDAZwDhXegXW0i1pgsgiGc0POTQqdeq1ziItvBXOg"},
{"content":{"body":"This type of template syntax has a special place for me. When I was first learning to program, when I was about 10, I was having problems with number math in ActionScript, and I drafted what a solution would look like, and what I came up with looks remarkably similar to this. It was my first ever proposal. ðŸ˜…","m.mentions":{},"msgtype":"m.text"},"ts":1749045920109,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$OS7M0myfonsbfluYI0e6DoVYwiTIMmnyVewJJK1KBFU"},
{"content":{"body":"I will make the observation that we don't actually need Decimal in order to implement the template syntax. It could use `Math.decimalAdd` as I suggested in issue 181, and return a Number.","format":"org.matrix.custom.html","formatted_body":"I will make the observation that we don't actually need Decimal in order to implement the template syntax. It could use <code>Math.decimalAdd</code> as I suggested in issue 181, and return a Number.","m.mentions":{},"msgtype":"m.text"},"ts":1749046022311,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$eoR_KOQg5bYqt5WpaLMYDnzSVnitVqGaI2QYB7B5syI"},
{"content":{"body":"We don't need to add Decimal if:\n```\nlet a = 0.1;\nD`${a} + 0.2` === 0.3\n```\ndesugars to:\n```\nlet a = 0.1;\nMath.decimalAdd(a, 0.2) === 0.3\n```","format":"org.matrix.custom.html","formatted_body":"<p>We don't need to add Decimal if:</p>\n<pre><code>let a = 0.1;\nD`${a} + 0.2` === 0.3\n</code></pre>\n<p>desugars to:</p>\n<pre><code>let a = 0.1;\nMath.decimalAdd(a, 0.2) === 0.3\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749046294093,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$cJ7gb8eplDTzvnHPSoyxaddiYqpEqhZ5AQZRqKxGnVs"},
{"content":{"body":"A nice property of this direction is that we could have a Decimal mode, a Rational mode, a mode for finance, a mode for scientific computing, etc. We're not limited to Decimal128 and the arcane decisions it makes.","m.mentions":{},"msgtype":"m.text"},"ts":1749046535390,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$acaByVFwO-F1tffIzBFsPsLngCQNmree65Xj8Ls62bE"},
{"content":{"body":"is there any advantage to having this in the spec vs. as an external add-on?","m.mentions":{"user_ids":["@eemeli:mozilla.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$NXiZ8V-uW23QqfZZtA4AgiuFxdg3kPk-p-875fKUato"}},"msgtype":"m.text"},"ts":1749047593505,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$sLLXyBzKGRUhZbuetPF-CPiJRc2AL6Gc9jn-oK2Fxss"},
{"content":{"body":"JSSugar can implement the syntax so long as the primitives like Math.decimalAdd are in the standard library","m.mentions":{},"msgtype":"m.text"},"ts":1749047656953,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$6TdU8alB_AFq_bM2O4kUxKaE-qqp4z-fjOIId-K4gb4"},
{"content":{"body":"Jesse, is your +1 about \"the syntax is JSSugar's problem\" or \"we should expose primitives like Math.decimalAdd\"","m.mentions":{},"msgtype":"m.text"},"ts":1749047780332,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$NwZCThpTpbd7jajPoTdRejh32LzIDmESxlVwlGTM_lA"},
{"content":{"body":"my +1 was to the idea that such syntax would be JSSugar's problem","m.mentions":{},"msgtype":"m.text"},"ts":1749047841463,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$gCyEIS02gWNYyZSTw30K9xC5ggCDwTazj-swSILvn_8"},
{"content":{"body":"imo `Math.decimalAdd` etc. could be considered as fallbacks in case a class-based Decimal fails","format":"org.matrix.custom.html","formatted_body":"imo <code>Math.decimalAdd</code> etc. could be considered as fallbacks in case a class-based Decimal fails","m.mentions":{},"msgtype":"m.text"},"ts":1749047903305,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$2gKwnyCeSBzBSVZubnhp1SbyIzi2a8ay_vm3pXkCpyU"},
{"content":{"body":"but my sense of the temperature poll last week was that most people who follow this want decimal as we've designed it (modulo the discussion of amount & where it should exist)","m.mentions":{},"msgtype":"m.text"},"ts":1749047956553,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$P-xXptgFSQKjPWevBwGLkrfOT9QqcEuKyCSB1MUSrbA"},
{"content":{"body":"* but my sense of the temperature poll last week was that most people who follow this topic do want decimal as we've designed it (modulo the discussion of amount & where it should exist)","m.mentions":{},"m.new_content":{"body":"but my sense of the temperature poll last week was that most people who follow this topic do want decimal as we've designed it (modulo the discussion of amount & where it should exist)","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$P-xXptgFSQKjPWevBwGLkrfOT9QqcEuKyCSB1MUSrbA","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1749047993976,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$5rIFVVIG17VqUoyi0JqXr7_9YBQSqVUB9sWJ04slckk"}
]