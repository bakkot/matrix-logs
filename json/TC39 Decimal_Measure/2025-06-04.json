[
{"content":{"body":"My understanding of where we got to in post-meeting discussions this week with Jesse and nicolo-ribaudo is that an Amount ought to hold a _mathematical value_ (as defined in '262), parsed from a string input value using the same method as for **ToIntlMathematicalValue ( value )**, but without support for non-finite values or -0. Amount would either have no built-in limits on the value, or it would match the limits imposed by Intl.NumberFormat.\n\nOverall, the intent would be to avoid defining a new numeric type beyond what's already in the spec, even if not easily accessible by users.","format":"org.matrix.custom.html","formatted_body":"<p>My understanding of where we got to in post-meeting discussions this week with <a href=\"https://matrix.to/#/@jesse:igalia.com\">Jesse</a> and <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> is that an Amount ought to hold a <em>mathematical value</em> (as defined in '262), parsed from a string input value using the same method as for <strong>ToIntlMathematicalValue ( value )</strong>, but without support for non-finite values or -0. Amount would either have no built-in limits on the value, or it would match the limits imposed by Intl.NumberFormat.</p>\n<p>Overall, the intent would be to avoid defining a new numeric type beyond what's already in the spec, even if not easily accessible by users.</p>\n","m.mentions":{"user_ids":["@jesse:igalia.com","@nicolo-ribaudo:matrix.org"]},"msgtype":"m.text"},"ts":1749026597690,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$ADm0BAtMME553DuEMGxp-5pldoomv_WXY1M4TVo-QzU"},
{"content":{"body":"that's my understanding as well -- thanks for sketching it out","m.mentions":{},"msgtype":"m.text"},"ts":1749029392477,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$0Js-Hv6zBYsMKaW98vQSb6E9OsAM9KWWBtc2CQh7JU0"},
{"content":{"body":"there's also an understanding that, if decimal were to advance, intl limits might also have to be adjusted (to account for the full range of decimal128, i.e. up to 34 significant digits and exponent of +/-6144), and ergo amount's limits","m.mentions":{},"msgtype":"m.text"},"ts":1749029466919,"senderName":"Jesse","senderId":"@jesse:igalia.com","id":"$hE-liUqDnK_pM8LKadAumG_2_gxZcV4MkHQI0Sb6-4I"},
{"content":{"body":"Thinking on what we discussed, I'm kinda tending towards suggesting that we initially propose Amount with no built-in limits on the numerical value, like what's done with BigInt. Then we would only get rounding if fractionDigits or significantDigits were set in the options.","m.mentions":{},"msgtype":"m.text"},"ts":1749031617078,"senderName":"eemeli","senderId":"@eemeli:mozilla.org","id":"$vF66qx6IEN5J8HCPsmqXcuAWLerCm12v-72Q-mXNDPY"},
{"content":{"body":"Implementations have their own harder limits. MVs are themselves unlimited, but they are usually bounded when creating an MV from a Number or elsewhere. The ICU4X limit is on the order of 2^16 digits and +/- 2^15 power of ten.","m.mentions":{},"msgtype":"m.text"},"ts":1749044103160,"senderName":"sffc","senderId":"@sffc:mozilla.org","id":"$QU-QHVz--l2NT1x1usU6P5ujToutEClQoe0cp-xpaCM"}
]