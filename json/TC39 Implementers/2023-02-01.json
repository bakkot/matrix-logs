[
{"content":{"body":"so uh","msgtype":"m.text"},"ts":1675217861250,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$GeNt-Cw1N-uJ0SVANStMmDxeBLOiCZjzWg89OsphIss"},
{"content":{"body":"the note in https://tc39.es/proposal-set-methods/#sec-set.prototype.intersection seems kind of surprising, upon attempting implementation","msgtype":"m.text"},"ts":1675217875134,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UjGgLXXM7OcHgwh5IqjviqD_ffvfNd3la_28WvNtymU"},
{"content":{"body":" * the note in https://tc39.es/proposal-set-methods/#sec-set.prototype.intersection seems kind of surprising, upon attempting implementation","m.new_content":{"body":"the note in https://tc39.es/proposal-set-methods/#sec-set.prototype.intersection seems kind of surprising, upon attempting implementation","msgtype":"m.text"},"m.relates_to":{"event_id":"$UjGgLXXM7OcHgwh5IqjviqD_ffvfNd3la_28WvNtymU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675217890767,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$pcqscqEbWqj7jdQl66ys9nmHWiXBhEWgPmx6dlR73aw"},
{"content":{"body":"because it seems like it's literally saying \"hey V8 and JSC, why don't you redo your existing Set impls to match SM\"","msgtype":"m.text"},"ts":1675217924629,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$JQfSjQHUGLnTGqY-NhuxSJQif3NGYbHSpLJr7XlT3EA"},
{"content":{"body":"given that you're not gonna copy a Set into a new data structure in order to perform an operation on it","msgtype":"m.text"},"ts":1675217988595,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5Pei5eKP9JbauHzjKyEsRIZ0T3Ef-6Onwzsdpb51bkg"},
{"content":{"body":" * given that copying a Set into a new data structure in order to perform an operation on it is not going to constitute a perf win","m.new_content":{"body":"given that copying a Set into a new data structure in order to perform an operation on it is not going to constitute a perf win","msgtype":"m.text"},"m.relates_to":{"event_id":"$5Pei5eKP9JbauHzjKyEsRIZ0T3Ef-6Onwzsdpb51bkg","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675218018107,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$2bG0VyfiRXoN_3_kPo-FzBxRRiQZ-lWSwBPrLyUoLD0"},
{"content":{"body":"I looked into V8's and believed it would work","msgtype":"m.text"},"ts":1675218261359,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$m-s4syq3hhEIL1_jHq3gHTj1gEOoGxjc6cvTsFwi7gI"},
{"content":{"body":"ah damn, or maybe not V8","msgtype":"m.text"},"ts":1675218264226,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$xQzfD9kGi6pTysrskFa4dhxS5ytlewNMrIZQwhmTq1o"},
{"content":{"body":"https://github.com/v8/v8/blob/main/src/objects/ordered-hash-table.h#L30-L32","msgtype":"m.text"},"ts":1675218265636,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$A4wQU5K7wNADnRN66omgRavKq6NHKl-sdSswA7ciN9Q"},
{"content":{"body":"in the same way described there","msgtype":"m.text"},"ts":1675218267356,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X_N4OU95-LouwgefOKEc0WSx0Q6hcA7evYMPEcig8os"},
{"content":{"body":"if JSC's doesn't, that's a good data point and we could consider a different sorting option","msgtype":"m.text"},"ts":1675218277437,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SeqZYaMhmUbNlwxeznAz2vkB-1Hyz-EY5F5CucPA7Oo"},
{"content":{"body":"in JSC a Set is a hashmap with a linked list","msgtype":"m.text"},"ts":1675218287652,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$SJS1AnxFHcNq39SsJ-1mjkDa1LHpxT5qFdWKIt-nXfM"},
{"content":{"body":"hm, how does that... work","msgtype":"m.text"},"ts":1675218344009,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-4_CNF4Wp89YVqbVFJHnxChdeCQlDxeeJQ_knL4tN90"},
{"content":{"body":"ah I mean that like, the buckets have a `next()` (and incidentally `prev()`)","format":"org.matrix.custom.html","formatted_body":"ah I mean that like, the buckets have a <code>next()</code> (and incidentally <code>prev()</code>)","msgtype":"m.text"},"ts":1675218376623,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$UW825TxSOfOhq3W5PmZrb0vk6831bUljFhIwC5r5o6U"},
{"content":{"body":"hm","msgtype":"m.text"},"ts":1675218398157,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JP0vB5yCrCnbqoNLrtqkjLSVZWzGWq0mVR-e5UDE9X8"},
{"content":{"body":"but are not contiguous in memory?","msgtype":"m.text"},"ts":1675218405600,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ene48NQJTWEt9hlq-cCX-n4ymd_CSi4DW1TnvfBgP8M"},
{"content":{"body":"yeah exactly","msgtype":"m.text"},"ts":1675218532001,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$feH-DbUESoj4wwVtjA752CSUUNAuANGP01EF4RRmYKA"},
{"content":{"body":"so how does iterator invalidation work? I guess chasing down all the iterators and updating them?","msgtype":"m.text"},"ts":1675218582741,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$miz6akYf2aJWGmbYdGBeaSVlV4pDCkRYpHT-TaA_IfI"},
{"content":{"body":"or not invalidation _per se_ but if you delete an item that an iterator is pointing to","format":"org.matrix.custom.html","formatted_body":"or not invalidation <em>per se</em> but if you delete an item that an iterator is pointing to","msgtype":"m.text"},"ts":1675218596875,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HuBeSEgT0nikGFucOQ5x7pKU1PocsIyGi9sU6qoHyB0"},
{"content":{"body":"hm. so this is fixable without redoing the entire implementation by e.g. adding uint64_t to each bucket to keep track of when items were added, but that does cost an extra word per item, which is a little unfortunate (and I guess requires you to re-scan the whole list once a total of 2^64 items have been added to a set over its lifetime)","msgtype":"m.text"},"ts":1675218727766,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HZaKp0UGhP78ri_dE_8fAKLyNav28Da0t5lHl3FBtag"},
{"content":{"body":"but the extra word per item is maybe not worth it","msgtype":"m.text"},"ts":1675218734765,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$48O-WMDaIVsJ60WSYZw5fpk7Fo9oVsCPFSs4Rym3LYY"},
{"content":{"body":"I was really hoping this would be easy in all the engines, darn","msgtype":"m.text"},"ts":1675218744424,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$51s5yL1SuMSPySS3Ib68u5em1t2aeRIOSbisjodFP7o"},
{"content":{"body":" * but the extra word per item is maybe not worth it","m.new_content":{"body":"but the extra word per item is maybe not worth it","msgtype":"m.text"},"m.relates_to":{"event_id":"$48O-WMDaIVsJ60WSYZw5fpk7Fo9oVsCPFSs4Rym3LYY","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1675218777379,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$9ZgCtw67m2btlRog9Sjk4ghZiKJ1VL17BeVZS7QBaEg"},
{"content":{"body":"https://github.com/WebKit/WebKit/blob/main/Source/JavaScriptCore/runtime/HashMapImplInlines.h#L279-L304 is what happens upon delete(item)","msgtype":"m.text"},"ts":1675218818635,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$aJh7Sv50hAbpxXzgN_tDOpCBJcinP51vSvwaetn-Aos"},
{"content":{"body":"(that is: with each Set add a uint64_t, which is incremented whenever you add an item to the set, and never decremented; whenever you make a bucket put the value from that uint64_t in a field on the bucket. then you can sort buckets based on that field.)","msgtype":"m.text"},"ts":1675218849781,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$QAzZPVzGPZ4AoybWeLmDXqGT7TtS8zXE6xCSbhYsGas"},
{"content":{"body":"yeah, sorry for the bubble bursting ðŸ˜“","msgtype":"m.text"},"ts":1675218850180,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$EPnPinc8j9-AKn0bMzupBezuIqgBgzoGKUhx6rZ_Eeg"},
{"content":{"body":"> <@bakkot:matrix.org> (that is: with each Set add a uint64_t, which is incremented whenever you add an item to the set, and never decremented; whenever you make a bucket put the value from that uint64_t in a field on the bucket. then you can sort buckets based on that field.)\n\noh I see, yeah","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!eHkwtWesRXuxHVBgDG:matrix.org/$QAzZPVzGPZ4AoybWeLmDXqGT7TtS8zXE6xCSbhYsGas?via=matrix.org&via=mozilla.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>(that is: with each Set add a uint64_t, which is incremented whenever you add an item to the set, and never decremented; whenever you make a bucket put the value from that uint64_t in a field on the bucket. then you can sort buckets based on that field.)</blockquote></mx-reply>oh I see, yeah","m.relates_to":{"m.in_reply_to":{"event_id":"$QAzZPVzGPZ4AoybWeLmDXqGT7TtS8zXE6xCSbhYsGas"}},"msgtype":"m.text"},"ts":1675218875169,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$fWsz2dDujrFQhVHoRSp6-E4tbhfVsM55nhq3GjrEBjY"},
{"content":{"body":"do you happen to know where HashMapImpl is instantiated with a concrete HashMapBucketType, so I can look at the buckets?","msgtype":"m.text"},"ts":1675218980144,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hUW0JGnx68d3b_0ng7l99Vq6NGe8gfZQhT0TUm8xoGk"},
{"content":{"body":"nvm, found it/one","msgtype":"m.text"},"ts":1675219032273,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$6Uy3COUxJHKX2IV0JhtiKrkq3gVC0eR8DwgDK9HMD00"},
{"content":{"body":"yeah, for Set it's HashMapBucket<HashMapBucketDataKey>","msgtype":"m.text"},"ts":1675219136136,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$E89O5ZfMp_6Ba_m1G5ZTydc050mVP9HocV0a4a29r8o"},
{"content":{"body":"so I see there is a `offsetOfNext` method","format":"org.matrix.custom.html","formatted_body":"so I see there is a <code>offsetOfNext</code> method","msgtype":"m.text"},"ts":1675219223276,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$vcoIV7yoqJFZoUc1uM0BAEuLgvD2bMrXWltG2IYlv-c"},
{"content":{"body":"no idea what that's for","msgtype":"m.text"},"ts":1675219225342,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$F1N_JcwYnQ7HoHfHZAEbl6n9HAOUTLZcDgYlZALxi3A"},
{"content":{"body":"oh, it's the offset _of the field_, not the offset of the next bucket, so not the thing you'd need","format":"org.matrix.custom.html","formatted_body":"oh, it's the offset <em>of the field</em>, not the offset of the next bucket, so not the thing you'd need","msgtype":"m.text"},"ts":1675219286326,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XT5wZlhgtWcAZI9dcgBugZk_I4SDH3QsHxLOYhWqVMA"},
{"content":{"body":"right exactly","msgtype":"m.text"},"ts":1675219326396,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$FYAJJyFx3YwwfOoxlwM8ldxj5tZ1hV7JOJo5IHydxkY"},
{"content":{"body":"I got excited about that for a second at first too","msgtype":"m.text"},"ts":1675219334963,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$5_B8nIt8DYNO9j6unc9nFbzWIAkM8NH7ofifnikEq5E"},
{"content":{"body":"but unfortunately those are just helpers for JIT to find exact locations in memory","msgtype":"m.text"},"ts":1675219355328,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$0wM4Ur-6eRoJhG7oJauStrOvkhY6UusXy2P4mt-QEOc"},
{"content":{"body":"yeah, I don't see a way to get constant-time sort order with this implementation as it is :(","msgtype":"m.text"},"ts":1675220138082,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kefVjMx8-O96AIrTkAyqvhBtL4-RIM8tLe-OUcNktZo"},
{"content":{"body":"guess I will bring an item to plenary about choosing some other, worse ordering, vs asking JSC to do a bunch of work","msgtype":"m.text"},"ts":1675220164566,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$b_8ZFcAEHBZYpvhujxGAYPcijTlRerRtO5ePAgalBwo"},
{"content":{"body":"thank you sir ðŸ™‡","msgtype":"m.text"},"ts":1675220225530,"senderName":"rkirsling","senderId":"@rkirsling:matrix.org","id":"$7MbaG9tZnRorrlsVPKMkpiR-1uJGzN--O03Qcnsf8_U"},
{"content":{"body":"(or the third option of iterating both sets, at the cost of twice as many observable `.has()` calls, I guess)","format":"org.matrix.custom.html","formatted_body":"(or the third option of iterating both sets, at the cost of twice as many observable <code>.has()</code> calls, I guess)","msgtype":"m.text"},"ts":1675220243645,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$cOTx1uVlwYj9MvzcidPQx1R8U4k-7MLQ-vPRmziWKis"}
]