[
{"content":{"body":"1000 distinct cases, but are they all _meaningfully_ distinct?","format":"org.matrix.custom.html","formatted_body":"1000 distinct cases, but are they all <em>meaningfully</em> distinct?","m.mentions":{},"msgtype":"m.text"},"ts":1759334142584,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$8yf86SACoHnIvcFlju0J3wNJPHsXHPmMBc5zogE15ig"},
{"content":{"body":"I do quite like exhaustively testing large numbers of cases though! (I've been using that exact technique to search for bugs in Temporal implementations.)","m.mentions":{},"msgtype":"m.text"},"ts":1759334221620,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$9-FeneGNyVW08-dDjGw9iMVXiipvAxhnqvub1vukZ3g"},
{"content":{"body":"I think snapshot testing (like Jest has) is a good tool for that. if I had time, I'd build a snapshot testing facility for test262","m.mentions":{},"msgtype":"m.text"},"ts":1759334276925,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$G-9N4bku5CJ5v36wM2n2lWpLK-MYNxo_e_kiiub3QTU"},
{"content":{"body":"at least that way, IMO it'd be clearer that the intention isn't for implementations to conform to the results of the snapshots, but instead to investigate when a snapshot fails","m.mentions":{},"msgtype":"m.text"},"ts":1759334364904,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$wAeu2s4TJWPt1NjjvOiq3f8RioDfRaG3mz-tDjiZ1w4"},
{"content":{"body":"I think that's the risk with a mini-polyfill in test262 - it basically blesses the mini-polyfill as the reference implementation and says to all other implementations, \"you must match this implementation bug-for-bug\"","m.mentions":{},"msgtype":"m.text"},"ts":1759334422839,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$uZo4mEJON6aatQZvjwDmbE0F2NJcg6-oZF8p1bpZJp0"},
{"content":{"body":"anyway, I'll take another look at that PR and see if I have some suggestions to make it work more like \"checking invariant properties of outputs that must hold across multiple inputs\"","m.mentions":{},"msgtype":"m.text"},"ts":1759334516950,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$8CaFP9r-uuuAfvdrd1lEKYcp--buw3LZLarKiGUlUrY"},
{"content":{"body":"> says to all other implementations, \"you must match this implementation bug-for-bug\"\n\nI'd argue that snapshot tests do the same thing except that you don't get to see the implementation which generated those snapshots, so it's harder to tell where the mismatch comes from.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>says to all other implementations, \"you must match this implementation bug-for-bug\"</p>\n</blockquote>\n<p>I'd argue that snapshot tests do the same thing except that you don't get to see the implementation which generated those snapshots, so it's harder to tell where the mismatch comes from.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1759334580388,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$xtR0GTb0Mv0sG2ddFz8z5AD7FFTmPsnAdcMAET79ULI"},
{"content":{"body":"yes, I agree that's a risk as well. I think snapshots could better communicate the intention, though","m.mentions":{},"msgtype":"m.text"},"ts":1759334635053,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$xz2hwfKSRbkAqnFOGds6Y3oh4aGROg9lHfJBN2zgFDQ"},
{"content":{"body":"In my experience using both kinds of tests, the reference implementation has been a lot more useful for this kind of thing.","m.mentions":{},"msgtype":"m.text"},"ts":1759334658176,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$X-T5aiCYUNHASDAZrsIvgXagZvJ0UvKxxDN71mrjQD0"},
{"content":{"body":"In particular, sometimes there is a mismatch, and being able to track down why the implementations diverge is incredibly useful both in the case that my implementation is wrong and in the case that the one in the tests is wrong","m.mentions":{},"msgtype":"m.text"},"ts":1759334684020,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MvjYrSztrD7x4lEFaI1v63Usuohuizhv9qk7xuk23eY"},
{"content":{"body":"I agree! I have a reference implementation of Temporal and I've found it very useful for writing test262 tests. but I'm not putting that reference implementation into test262","m.mentions":{},"msgtype":"m.text"},"ts":1759334726904,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$iTmLpmb9FwrzWVEVA6hHdjlyfUcynBzIlqGbNMrhb8Y"},
{"content":{"body":"I mean, why not?","msgtype":"m.text"},"ts":1759334837226,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7lxQ431kklmXWokTMyTvzyRmnQvOYL265aHyhOkHp78"},
{"content":{"body":"For Temporal I suppose it's just very large but when it's small enough to be practical to check for correctness I don't see a strong reason not to.","msgtype":"m.text"},"ts":1759334878116,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ay0PRiiKwSOcH7sB_J0w4iBuIdrfDv8j9ztAmsYcYMg"},
{"content":{"body":"Obviously it doesn't substitute for having other tests as well, but having some tests of the form \"compare a wide variety of cases vs a known-good implementation\" is great.","msgtype":"m.text"},"ts":1759334955592,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$kzyapWmVXO_Rs0BqY2QghVFFu9HpW589AsOKfahQVYE"},
{"content":{"body":"there was a ton of pushback about creating test262 in the first place because of the concern it would have reference implementations and be a \"blessed\" implementation; i think pragmatism has to lose out here","m.mentions":{},"msgtype":"m.text"},"ts":1759335689817,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$LiTUQBTh6orfoeMSSIRFshAMHbTVQdc-7z3bTbisf8c"},
{"content":{"body":"oh, I'm absolutely not for pragmatism losing out in any way shape or form","m.mentions":{},"msgtype":"m.text"},"ts":1759336136928,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$x3uS5zSRq9IkHYjd1wiZ1TwSIYiI6PRpNG4S_wMNu4A"},
{"content":{"body":"I think it should be possible to restructure that test like I suggested ^ above. maybe testing one invariant property at a time and making it clear what each of those tests is for.","m.mentions":{},"m.relates_to":{"m.in_reply_to":{"event_id":"$8CaFP9r-uuuAfvdrd1lEKYcp--buw3LZLarKiGUlUrY"}},"msgtype":"m.text"},"ts":1759336422325,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$aHywDziUfV31fpZTpMpOpEWj0OTH1Wi6NN81F-3u1iE"},
{"content":{"body":"Richard may also have some suggestions, we discussed this PR at the last maintainers meeting","m.mentions":{},"msgtype":"m.text"},"ts":1759336448930,"senderName":"ptomato (intermittent availability)","senderId":"@pchimento:igalia.com","id":"$qAaDhkYF43yXxxfpn3G9LVkZE4oFdUrg-RXveZvhFn4"},
{"content":{"body":"So, the test is currently of the form \"for each of these wide variety of cases, all of the following properties should always hold\"","m.mentions":{},"msgtype":"m.text"},"ts":1759336603493,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$1MTPTIUb3i--JTthogdGUvy6Ua6DPrCVzwt1tbe4fBw"},
{"content":{"body":"you would want it to be a bunch of different tests which each repeat all of the setup for the wide variety of cases, and then test one property?","m.mentions":{},"msgtype":"m.text"},"ts":1759336633683,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-FSwhqrkSC3u67-JU0cRrlQN-65_ieQijhpnAOojx8s"},
{"content":{"body":"that seems worse","m.mentions":{},"msgtype":"m.text"},"ts":1759336648233,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$MYI4epaA4AKg2C_7E3enuhQd8sB9ocZcuntA-xyeUa0"},
{"content":{"body":"also it turns out to be somewhat difficult to cleanly separate: e.g. the `strict` option throws when you exhaust the shortest iterator if the iterators are not the same length, so you either need to not pass that option when testing other properties or you need to compute the expected length and catch that error anyway","format":"org.matrix.custom.html","formatted_body":"also it turns out to be somewhat difficult to cleanly separate: e.g. the <code>strict</code> option throws when you exhaust the shortest iterator if the iterators are not the same length, so you either need to not pass that option when testing other properties or you need to compute the expected length and catch that error anyway","m.mentions":{},"msgtype":"m.text"},"ts":1759339018294,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$k19osS6tehGLtZjSzZORtwSWRktSvYruE-3SkmyIPGU"}
]