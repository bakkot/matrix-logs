[
{"content":{"body":"i kind of already have that because test262-harness forces me to make a preprocessor to do anything useful","msgtype":"m.text","org.matrix.msc1767.text":"i kind of already have that because test262-harness forces me to make a preprocessor to do anything useful"},"ts":1650938917116,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uq9-qX2FnUz5D-o20_QR9ODaKA2TuIgM16nez7nvGts"},
{"content":{"body":"but what do yall prefer: a) nothing, jordan is just sad, b) replace all the `parseInt`s with `Function.prototype.call`s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?","format":"org.matrix.custom.html","formatted_body":"but what do yall prefer: a) nothing, jordan is just sad, b) replace all the <code>parseInt</code>s with <code>Function.prototype.call</code>s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but what do yall prefer: a) nothing, jordan is just sad, b) replace all the `parseInt`s with `Function.prototype.call`s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?","mimetype":"text/plain"},{"body":"but what do yall prefer: a) nothing, jordan is just sad, b) replace all the <code>parseInt</code>s with <code>Function.prototype.call</code>s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?","mimetype":"text/html"}]},"ts":1650938978512,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$_E2HSzOP7zc-9GH-nnW_q6icOHm6MMa0pMvQKmjmX4w"},
{"content":{"body":"to me a feature flag doesn't sound out of place; it may not be an engine capability that's being selected for, but a polyfill capability","msgtype":"m.text","org.matrix.msc1767.text":"to me a feature flag doesn't sound out of place; it may not be an engine capability that's being selected for, but a polyfill capability"},"ts":1650942917200,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$I306LNVGZU2QHJAD0_mNBAEXdwHpkRIwEjBAeIIpcXA"},
{"content":{"body":"while a is terribly tempting, I do think a feature flag is more expressive and therefore preferable to implicit changes, like b, where understanding the choice is predicated on deeper knowledge","msgtype":"m.text","org.matrix.msc1767.text":"while a is terribly tempting, I do think a feature flag is more expressive and therefore preferable to implicit changes, like b, where understanding the choice is predicated on deeper knowledge"},"ts":1650943959044,"senderName":"sarahghp","senderId":"@sarahghp:matrix.org","id":"$MfGwGbEogSH9qw_3CC1nGWgQWY2ssDXbfwEl152IcS0"},
{"content":{"body":"sounds good, i'll make a feature flag PR","msgtype":"m.text","org.matrix.msc1767.text":"sounds good, i'll make a feature flag PR"},"ts":1650951647070,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$kwqIWgZrmYwBL7mfBX0ANP-7a7k0L-NnaSVw_p3_qxQ"},
{"content":{"body":"I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","format":"org.matrix.custom.html","formatted_body":"I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","mimetype":"text/plain"},{"body":"I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$_E2HSzOP7zc-9GH-nnW_q6icOHm6MMa0pMvQKmjmX4w"}}},"ts":1651012720910,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$t4cFv1HHNeG8zkrcM4LZX8D3GX4e4B3Qj7nsYVZk-do"},
{"content":{"body":"> <@ljharb:matrix.org> but what do yall prefer: a) nothing, jordan is just sad, b) replace all the `parseInt`s with `Function.prototype.call`s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?\n\n * I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$_E2HSzOP7zc-9GH-nnW_q6icOHm6MMa0pMvQKmjmX4w?via=matrix.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but what do yall prefer: a) nothing, jordan is just sad, b) replace all the <code>parseInt</code>s with <code>Function.prototype.call</code>s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?</blockquote></mx-reply> * I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","m.new_content":{"body":"I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","format":"org.matrix.custom.html","formatted_body":"I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","mimetype":"text/plain"},{"body":"I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$t4cFv1HHNeG8zkrcM4LZX8D3GX4e4B3Qj7nsYVZk-do","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> but what do yall prefer: a) nothing, jordan is just sad, b) replace all the `parseInt`s with `Function.prototype.call`s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?\n\n * I also prefer c, but still have a question about b: what `parseInt`s would be replaced with `Function.prototype.call`?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$_E2HSzOP7zc-9GH-nnW_q6icOHm6MMa0pMvQKmjmX4w?via=matrix.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>but what do yall prefer: a) nothing, jordan is just sad, b) replace all the <code>parseInt</code>s with <code>Function.prototype.call</code>s, c) tag all the tests relying on non-constructibility with a new made-up feature flag?</blockquote></mx-reply> * I also prefer c, but still have a question about b: what <code>parseInt</code>s would be replaced with <code>Function.prototype.call</code>?","mimetype":"text/html"}]},"ts":1651012733273,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$NmF9t-OXCcb4pXRg7JuQHo1D3zdccr1xHnA4UT4Ntu0"},
{"content":{"body":"the `non-ctor` tests mainly","format":"org.matrix.custom.html","formatted_body":"the <code>non-ctor</code> tests mainly","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `non-ctor` tests mainly","mimetype":"text/plain"},{"body":"the <code>non-ctor</code> tests mainly","mimetype":"text/html"}]},"ts":1651012956202,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$qpYTaAPSJJaLQVi3gbfmkDviX9j3kNVkV7JYir7sE0E"}
]