[
{"content":{"body":"> <@gibson042:matrix.org> that's why I asked about observable behavior that becomes shimmable... but `bind(nativeCall, fn)` _does_ cover both non-constructibility (i.e., exceptions from `new`) and absence of an own \"prototype\" property, and does not preclude name preservation: https://runkit.com/rstpflkbkgqetqlavy/bound-call-constructibility\n> \n> it really seems to be the best option in environments that lack Proxy and arrow functions.\n\nok so thanks, this does work as expected in any env where function names are configurable. that precludes IE and node < 3, for example. there's also a few engines where _bound_ functions, specifically, don't have names. so in any of these i'd probably have to just skip the attempt at not having a prototype","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$jeygjvvHwh501gJ42poAd2qAHKzTQK6p85xR7NmZkVI?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>that's why I asked about observable behavior that becomes shimmable... but <code>bind(nativeCall, fn)</code> <em>does</em> cover both non-constructibility (i.e., exceptions from <code>new</code>) and absence of an own \"prototype\" property, and does not preclude name preservation: https://runkit.com/rstpflkbkgqetqlavy/bound-call-constructibility</p>\n<p>it really seems to be the best option in environments that lack Proxy and arrow functions.</p>\n</blockquote></mx-reply>ok so thanks, this does work as expected in any env where function names are configurable. that precludes IE and node &lt; 3, for example. there's also a few engines where <em>bound</em> functions, specifically, don't have names. so in any of these i'd probably have to just skip the attempt at not having a prototype","m.relates_to":{"m.in_reply_to":{"event_id":"$jeygjvvHwh501gJ42poAd2qAHKzTQK6p85xR7NmZkVI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@gibson042:matrix.org> that's why I asked about observable behavior that becomes shimmable... but `bind(nativeCall, fn)` _does_ cover both non-constructibility (i.e., exceptions from `new`) and absence of an own \"prototype\" property, and does not preclude name preservation: https://runkit.com/rstpflkbkgqetqlavy/bound-call-constructibility\n> \n> it really seems to be the best option in environments that lack Proxy and arrow functions.\n\nok so thanks, this does work as expected in any env where function names are configurable. that precludes IE and node < 3, for example. there's also a few engines where _bound_ functions, specifically, don't have names. so in any of these i'd probably have to just skip the attempt at not having a prototype","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$jeygjvvHwh501gJ42poAd2qAHKzTQK6p85xR7NmZkVI?via=matrix.org&via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@gibson042:matrix.org\">@gibson042:matrix.org</a><br><p>that's why I asked about observable behavior that becomes shimmable... but <code>bind(nativeCall, fn)</code> <em>does</em> cover both non-constructibility (i.e., exceptions from <code>new</code>) and absence of an own \"prototype\" property, and does not preclude name preservation: https://runkit.com/rstpflkbkgqetqlavy/bound-call-constructibility</p>\n<p>it really seems to be the best option in environments that lack Proxy and arrow functions.</p>\n</blockquote></mx-reply>ok so thanks, this does work as expected in any env where function names are configurable. that precludes IE and node &lt; 3, for example. there's also a few engines where <em>bound</em> functions, specifically, don't have names. so in any of these i'd probably have to just skip the attempt at not having a prototype","mimetype":"text/html"}]},"ts":1652043252598,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$uoHrsrRtdraZyE9FvpV2yy6ITPOW7seYLauT6BUDpak"}
]