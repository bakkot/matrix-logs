[
{"content":{"body":"any chance we could add a test feature for \"IsConstructor checks\"? basically all of them use `parseInt` as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.\n\ni'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)","format":"org.matrix.custom.html","formatted_body":"<p>any chance we could add a test feature for &quot;IsConstructor checks&quot;? basically all of them use <code>parseInt</code> as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.</p>\n<p>i'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"any chance we could add a test feature for \"IsConstructor checks\"? basically all of them use `parseInt` as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.\n\ni'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)","mimetype":"text/plain"},{"body":"<p>any chance we could add a test feature for &quot;IsConstructor checks&quot;? basically all of them use <code>parseInt</code> as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.</p>\n<p>i'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)</p>\n","mimetype":"text/html"}]},"ts":1650862405557,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$F0LlXFhEfGg6vMNAJLWLM8bu1LUjMa8Tokcix_dmZ04"},
{"content":{"body":"that is a problem that I've heard other polyfills having as well","msgtype":"m.text","org.matrix.msc1767.text":"that is a problem that I've heard other polyfills having as well"},"ts":1650902278306,"senderName":"ptomato","senderId":"@pchimento:igalia.com","id":"$YmCOnWOP2HQ201hrVGO8B4YnSqC01XUin41HBWu40GQ"},
{"content":{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","format":"org.matrix.custom.html","formatted_body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","mimetype":"text/plain"},{"body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$F0LlXFhEfGg6vMNAJLWLM8bu1LUjMa8Tokcix_dmZ04"}}},"ts":1650902554277,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$EsWcn3pSs3-XL_SnMIueDWnaZB8N-G4cebJJMl7jDXI"},
{"content":{"body":" * What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$F0LlXFhEfGg6vMNAJLWLM8bu1LUjMa8Tokcix_dmZ04?via=matrix.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>any chance we could add a test feature for \"IsConstructor checks\"? basically all of them use <code>parseInt</code> as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.</p>\n<p>i'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)</p>\n</blockquote></mx-reply> * <p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","m.new_content":{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","format":"org.matrix.custom.html","formatted_body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","mimetype":"text/plain"},{"body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$EsWcn3pSs3-XL_SnMIueDWnaZB8N-G4cebJJMl7jDXI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!dGIsaFIukRWLdpurvh:matrix.org/$F0LlXFhEfGg6vMNAJLWLM8bu1LUjMa8Tokcix_dmZ04?via=matrix.org&amp;via=igalia.com\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br><p>any chance we could add a test feature for \"IsConstructor checks\"? basically all of them use <code>parseInt</code> as a canonical non-constructor function, but when testing all my polyfills, a) i shim parseInt, and b) non-constructor-ness can't be shimmed, so i'd like to skip all such tests.</p>\n<p>i'd be happy to make the PR if that's the kind of feature flag that's acceptable :-)</p>\n</blockquote></mx-reply> * <p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n  if doc:\\n    print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650902615458,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$dx5DIA4nvTFtT56EYSw5ixqUom8Vy-z0vMtS4I_kPFQ"},
{"content":{"body":" * What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","format":"org.matrix.custom.html","formatted_body":" * <p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","m.new_content":{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","format":"org.matrix.custom.html","formatted_body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","mimetype":"text/plain"},{"body":"<p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$EsWcn3pSs3-XL_SnMIueDWnaZB8N-G4cebJJMl7jDXI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * What do you mean by \"basically all of them use parseInt as a canonical non-constructor function\"? I see only minimal overlap:\n\n```sh\n$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n```\n\nI'm also not sure what you mean by \"can't be shimmed\", because neither arrow functions nor those returned by `Function.prototype.call.bind(fn)` are \\[\\[Construct\\]\\]able (although in both cases access to the receiver is lost, so maybe that's the problem?).\n\nRegardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as `Reflect.construct`?\n\n```sh\n$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c \"$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(\"\\x1F\".join(doc[\"features\"]))\\n')\" | \\\n  awk 'BEGIN { FS=\"\\x1F\" } { for(i=1; i<=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, \"TOTAL\" }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n```","mimetype":"text/plain"},{"body":" * <p>What do you mean by &quot;basically all of them use parseInt as a canonical non-constructor function&quot;? I see only minimal overlap:</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor '*.js' | xargs grep -l parseInt\ntest/built-ins/Number/parseInt/not-a-constructor.js\ntest/built-ins/parseInt/not-a-constructor.js\n</code></pre>\n<p>I'm also not sure what you mean by &quot;can't be shimmed&quot;, because neither arrow functions nor those returned by <code>Function.prototype.call.bind(fn)</code> are [[Construct]]able (although in both cases access to the receiver is lost, so maybe that's the problem?).</p>\n<p>Regardless, it does seem reasonable to have a feature flag for the checks, but doesn't it already exist as <code>Reflect.construct</code>?</p>\n<pre><code class=\"language-sh\">$ git grep -l isConstructor test/ | \\\n  xargs sed -n '/^features:/,/^---/ { s/[*][/]$//; p }' | \\\n  python3 -c &quot;$(printf 'import sys,yaml\\nfor doc in yaml.safe_load_all(sys.stdin):\\n if doc:\\n  print(&quot;\\x1F&quot;.join(doc[&quot;features&quot;]))\\n')&quot; | \\\n  awk 'BEGIN { FS=&quot;\\x1F&quot; } { for(i=1; i&lt;=NF; i++) m[$i]++; } END { for(flag in m) print m[flag], flag; print NR, &quot;TOTAL&quot; }' | \\\n  sort -n | \\\n  tail\n13 SharedArrayBuffer\n14 Reflect\n16 Symbol\n21 DataView\n24 ArrayBuffer\n51 TypedArray\n175 Temporal\n383 arrow-function\n623 Reflect.construct\n623 TOTAL\n</code></pre>\n","mimetype":"text/html"}]},"ts":1650902638443,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$sjHqTTDe3LtR8rbTvQ8jKO_RIcPkvOXzkmKPvk-sLms"},
{"content":{"body":"bound functions are constructible, and arrows can’t be made in polyfills that support older engines","msgtype":"m.text"},"ts":1650902640265,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$f2lRczlkEmAXCvfkuJCV_Nijs70QYG_k76QXPy3ARfg"},
{"content":{"body":"indeed “all” may have been an exaggeration, but there’s a bunch in other filenames - species things, eg","msgtype":"m.text"},"ts":1650902662625,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$rlm5J6QAeoGpMfN0io7DJFGrZhdOjg5wAH01PUt2tsk"},
{"content":{"body":"I’d be happy to use Reflect.construct as the feature flag for those missing it, but that seems specific to that reflect method, versus a generic “non-constructibles” thing","msgtype":"m.text"},"ts":1650902694923,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$82qrcIer4VA-TasTIjrL7aI0JQWob0VreprqmHpmjt4"},
{"content":{"body":"bound functions in general can be constructible, but those returned by `Function.prototype.call.bind(…)` are not because `Function.prototype.call` is not","format":"org.matrix.custom.html","formatted_body":"bound functions in general can be constructible, but those returned by <code>Function.prototype.call.bind(…)</code> are not because <code>Function.prototype.call</code> is not","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bound functions in general can be constructible, but those returned by `Function.prototype.call.bind(…)` are not because `Function.prototype.call` is not","mimetype":"text/plain"},{"body":"bound functions in general can be constructible, but those returned by <code>Function.prototype.call.bind(…)</code> are not because <code>Function.prototype.call</code> is not","mimetype":"text/html"}]},"ts":1650902835847,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$Evd03ENsCDdW1a5IDd_3vQQ8S1WcuNb_v_xlizdqJ1c"},
{"content":{"body":"but at any rate, it is true that the `Reflect.construct` feature is used for more than just isConstructor checks","format":"org.matrix.custom.html","formatted_body":"but at any rate, it is true that the <code>Reflect.construct</code> feature is used for more than just isConstructor checks","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but at any rate, it is true that the `Reflect.construct` feature is used for more than just isConstructor checks","mimetype":"text/plain"},{"body":"but at any rate, it is true that the <code>Reflect.construct</code> feature is used for more than just isConstructor checks","mimetype":"text/html"}]},"ts":1650903032092,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$LQZ8PxinrrkzELinrGoAVGxUctQ3DghF4J_saKXFPn8"},
{"content":{"body":"ooh, good point. perhaps test262 could use call instead of parseint as its non-constructible? nothing ever tries to shim call","msgtype":"m.text","org.matrix.msc1767.text":"ooh, good point. perhaps test262 could use call instead of parseint as its non-constructible? nothing ever tries to shim call"},"ts":1650903188135,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$YGrZdQ7D7BMbzl9BdrGxUGvJ12PYd9Dcbqogswr98MU"},
{"content":{"body":"that would immediately make a bunch of currently failing tests start passing for me","msgtype":"m.text","org.matrix.msc1767.text":"that would immediately make a bunch of currently failing tests start passing for me"},"ts":1650903199986,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$ggwlod5NRsPK4Twim4OKG1DFlJJ6cu5mVPwAJR_vL5k"},
{"content":{"body":"what do you mean by \"as its non-constructible\"—where do you want a switch from `parseInt` to `call`?","format":"org.matrix.custom.html","formatted_body":"what do you mean by &quot;as its non-constructible&quot;—where do you want a switch from <code>parseInt</code> to <code>call</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"what do you mean by \"as its non-constructible\"—where do you want a switch from `parseInt` to `call`?","mimetype":"text/plain"},{"body":"what do you mean by &quot;as its non-constructible&quot;—where do you want a switch from <code>parseInt</code> to <code>call</code>?","mimetype":"text/html"}]},"ts":1650903358421,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$9qV8AdRnWlvn_MCCqfnufpZ1qt9CFHDG_3Cad_CVL0A"},
{"content":{"body":"looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","format":"org.matrix.custom.html","formatted_body":"looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","mimetype":"text/plain"},{"body":"looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","mimetype":"text/html"}]},"ts":1650904291156,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$0fPWiGXPF0jsCZzGRVlFkPAIaXmpRDy2bUO7Df5KXao"},
{"content":{"body":" * looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","format":"org.matrix.custom.html","formatted_body":" * looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","m.new_content":{"body":"looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","format":"org.matrix.custom.html","formatted_body":"looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","mimetype":"text/plain"},{"body":"looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$0fPWiGXPF0jsCZzGRVlFkPAIaXmpRDy2bUO7Df5KXao","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * looking at the 164 test files that include `Reflect.construct` but not `isConstructor` (`git grep -lF 'Reflect.construct' test/ | grep -vF \"$(git grep -l isConstructor test/)\"`), I retract my implication that the `Reflect.construct` flag covers this","mimetype":"text/plain"},{"body":" * looking at the 164 test files that include <code>Reflect.construct</code> but not <code>isConstructor</code> (<code>git grep -lF 'Reflect.construct' test/ | grep -vF &quot;$(git grep -l isConstructor test/)&quot;</code>), I retract my implication that the <code>Reflect.construct</code> flag covers this","mimetype":"text/html"}]},"ts":1650904324268,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$FekPKCX06OiZTaubQwJFG-xEaVuW50OBZokfhrJFh5g"},
{"content":{"body":"but I think I would expect a maximally faithful polyfill to shim like `parseInt = bind(call, myParseInt)` rather than `parseInt = myParseInt` in order to ensure absence of [[Construct]]","format":"org.matrix.custom.html","formatted_body":"but I think I would expect a maximally faithful polyfill to shim like <code>parseInt = bind(call, myParseInt)</code> rather than <code>parseInt = myParseInt</code> in order to ensure absence of [[Construct]]","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"but I think I would expect a maximally faithful polyfill to shim like `parseInt = bind(call, myParseInt)` rather than `parseInt = myParseInt` in order to ensure absence of [[Construct]]","mimetype":"text/plain"},{"body":"but I think I would expect a maximally faithful polyfill to shim like <code>parseInt = bind(call, myParseInt)</code> rather than <code>parseInt = myParseInt</code> in order to ensure absence of [[Construct]]","mimetype":"text/html"}]},"ts":1650905028929,"senderName":"Richard Gibson","senderId":"@gibson042:matrix.org","id":"$hLpi5HIOUy0BiCD8Bp0HTjNdONy6aiDublef84dQFs4"}
]