[
{"content":{"body":"I have a couple of questions/comments on the Scopes proposal:\n- Why is Original Scope `column` absolute?\n- What’s the point of splitting Original Scope’s Start/End? Just encode it together\n- Are Generated Range’s `originalScope` and `callsite` mutually exclusive?\n- I have no idea how to parse Generated Range’s `bindings`.\n    - Is `M` a DATA?\n    - What is “negative number of sub-ranges”?\n    - “Use -1 to indicate that the current variable is unavailable (e.g. due to shadowing) in this sub-range”…\n        - This causes a large delta encoding to jump backwards, then a large delta to jump forwards. Just encode an empty string value into `names` array\n    - [Side note: the note telling you that `line` is relative is in the `column` list item]\n","format":"org.matrix.custom.html","formatted_body":"<p>I have a couple of questions/comments on the Scopes proposal:</p>\n<ul>\n<li>Why is Original Scope <code>column</code> absolute?</li>\n<li>What’s the point of splitting Original Scope’s Start/End? Just encode it together</li>\n<li>Are Generated Range’s <code>originalScope</code> and <code>callsite</code> mutually exclusive?</li>\n<li>I have no idea how to parse Generated Range’s <code>bindings</code>.\n<ul>\n<li>Is <code>M</code> a DATA?</li>\n<li>What is “negative number of sub-ranges”?</li>\n<li>“Use -1 to indicate that the current variable is unavailable (e.g. due to shadowing) in this sub-range”…\n<ul>\n<li>This causes a large delta encoding to jump backwards, then a large delta to jump forwards. Just encode an empty string value into <code>names</code> array</li>\n</ul>\n</li>\n<li>[Side note: the note telling you that <code>line</code> is relative is in the <code>column</code> list item]</li>\n</ul>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709801809155,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AlWdrhjELshPXhYaMabvDyUWThZEptl7BZRYfeVIT4E"},
{"content":{"body":"Thanks for the ideas/feedback! Yeah there are couple of rough edges in the current proposal.\n\n* Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.\n* Encoding start/end items separately gives us the tree structure of scopes immediately and you don't have to nest the scopes manually based on position alone (which could be ambiguous if 2 scopes have the same start, not sure if that occurs in practice though).\n* No, call-site is specifically for inlining. So for a generated range that represents an inlined function the `originalScope` points to the original inlined function scope and call-site points to where that inlined function was actually called in the original code. This is required to get stack traces right.\n* Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently.\n  * We basically distinguish between 2 cases:\n     1) The variable is available for the full range with the same expression, in that case we only need a single offset into the names array.\n     2) The variable requires different expressions for parts of the generated range. In this case the first DATA is again a single offset into the names array. This is the expression from the range start. Then we encode another data `M`, to denote how many more live ranges we have. We encode it negated, so decoders can distinguish between case 1) and 2).\n  * Holger filed a bug about how to encode unavailable here. https://github.com/tc39/source-map-rfc/issues/70. I like your suggestion as well and will add it to the list.\n","format":"org.matrix.custom.html","formatted_body":"<p>Thanks for the ideas/feedback! Yeah there are couple of rough edges in the current proposal.</p>\n<ul>\n<li>Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.</li>\n<li>Encoding start/end items separately gives us the tree structure of scopes immediately and you don't have to nest the scopes manually based on position alone (which could be ambiguous if 2 scopes have the same start, not sure if that occurs in practice though).</li>\n<li>No, call-site is specifically for inlining. So for a generated range that represents an inlined function the <code>originalScope</code> points to the original inlined function scope and call-site points to where that inlined function was actually called in the original code. This is required to get stack traces right.</li>\n<li>Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently.\n<ul>\n<li>We basically distinguish between 2 cases:\n<ol>\n<li>The variable is available for the full range with the same expression, in that case we only need a single offset into the names array.</li>\n<li>The variable requires different expressions for parts of the generated range. In this case the first DATA is again a single offset into the names array. This is the expression from the range start. Then we encode another data <code>M</code>, to denote how many more live ranges we have. We encode it negated, so decoders can distinguish between case 1) and 2).</li>\n</ol>\n</li>\n<li>Holger filed a bug about how to encode unavailable here. https://github.com/tc39/source-map-rfc/issues/70. I like your suggestion as well and will add it to the list.</li>\n</ul>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709803640043,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$mcKsMPqg_daJiDvAIvzJWVw6uRG0R_liZCw2DB9kJDA"},
{"content":{"body":"> Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.\n\nWe could make it relative to the last Original Source Start's `column`, though, meaning indentation would be handled easily with 1 VLQ byte. Because of our crappy 5/8s base64, and the first byte containing the sign bit, we only have only 4 bits of data in the first byte. If a column is at column 16, then we have to use 2 bytes in an absolute encoding. If it's relative, it's just `E`s and `F`s to indent and dedent.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.</p>\n</blockquote>\n<p>We could make it relative to the last Original Source Start's <code>column</code>, though, meaning indentation would be handled easily with 1 VLQ byte. Because of our crappy 5/8s base64, and the first byte containing the sign bit, we only have only 4 bits of data in the first byte. If a column is at column 16, then we have to use 2 bytes in an absolute encoding. If it's relative, it's just <code>E</code>s and <code>F</code>s to indent and dedent.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709804158430,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G3aJRnkeaR6enDwjWIt4jXjgIPfhTwQg37P3BwOxpkA"},
{"content":{"body":"> Encoding start/end items separately gives us the tree structure of scopes immediately\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately<br>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709804345728,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-JoA6UFcfTdrW3hPPP3SOannXrFLnnrt5SpGFSyBGdU"},
{"content":{"body":" * > Encoding start/end items separately gives us the tree structure of scopes immediately\n\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately</p>\n</blockquote>\n<p>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n","m.mentions":{},"m.new_content":{"body":"> Encoding start/end items separately gives us the tree structure of scopes immediately\n\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately</p>\n</blockquote>\n<p>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-JoA6UFcfTdrW3hPPP3SOannXrFLnnrt5SpGFSyBGdU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1709804357931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YJ_i97nA53Xqy8lOJUj90LkSDIzQvJL8JF7HRk6r3kA"}
]