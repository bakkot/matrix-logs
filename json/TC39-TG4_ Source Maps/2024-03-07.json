[
{"content":{"body":"I have a couple of questions/comments on the Scopes proposal:\n- Why is Original Scope `column` absolute?\n- What’s the point of splitting Original Scope’s Start/End? Just encode it together\n- Are Generated Range’s `originalScope` and `callsite` mutually exclusive?\n- I have no idea how to parse Generated Range’s `bindings`.\n    - Is `M` a DATA?\n    - What is “negative number of sub-ranges”?\n    - “Use -1 to indicate that the current variable is unavailable (e.g. due to shadowing) in this sub-range”…\n        - This causes a large delta encoding to jump backwards, then a large delta to jump forwards. Just encode an empty string value into `names` array\n    - [Side note: the note telling you that `line` is relative is in the `column` list item]\n","format":"org.matrix.custom.html","formatted_body":"<p>I have a couple of questions/comments on the Scopes proposal:</p>\n<ul>\n<li>Why is Original Scope <code>column</code> absolute?</li>\n<li>What’s the point of splitting Original Scope’s Start/End? Just encode it together</li>\n<li>Are Generated Range’s <code>originalScope</code> and <code>callsite</code> mutually exclusive?</li>\n<li>I have no idea how to parse Generated Range’s <code>bindings</code>.\n<ul>\n<li>Is <code>M</code> a DATA?</li>\n<li>What is “negative number of sub-ranges”?</li>\n<li>“Use -1 to indicate that the current variable is unavailable (e.g. due to shadowing) in this sub-range”…\n<ul>\n<li>This causes a large delta encoding to jump backwards, then a large delta to jump forwards. Just encode an empty string value into <code>names</code> array</li>\n</ul>\n</li>\n<li>[Side note: the note telling you that <code>line</code> is relative is in the <code>column</code> list item]</li>\n</ul>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709801809155,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$AlWdrhjELshPXhYaMabvDyUWThZEptl7BZRYfeVIT4E"},
{"content":{"body":"Thanks for the ideas/feedback! Yeah there are couple of rough edges in the current proposal.\n\n* Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.\n* Encoding start/end items separately gives us the tree structure of scopes immediately and you don't have to nest the scopes manually based on position alone (which could be ambiguous if 2 scopes have the same start, not sure if that occurs in practice though).\n* No, call-site is specifically for inlining. So for a generated range that represents an inlined function the `originalScope` points to the original inlined function scope and call-site points to where that inlined function was actually called in the original code. This is required to get stack traces right.\n* Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently.\n  * We basically distinguish between 2 cases:\n     1) The variable is available for the full range with the same expression, in that case we only need a single offset into the names array.\n     2) The variable requires different expressions for parts of the generated range. In this case the first DATA is again a single offset into the names array. This is the expression from the range start. Then we encode another data `M`, to denote how many more live ranges we have. We encode it negated, so decoders can distinguish between case 1) and 2).\n  * Holger filed a bug about how to encode unavailable here. https://github.com/tc39/source-map-rfc/issues/70. I like your suggestion as well and will add it to the list.\n","format":"org.matrix.custom.html","formatted_body":"<p>Thanks for the ideas/feedback! Yeah there are couple of rough edges in the current proposal.</p>\n<ul>\n<li>Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.</li>\n<li>Encoding start/end items separately gives us the tree structure of scopes immediately and you don't have to nest the scopes manually based on position alone (which could be ambiguous if 2 scopes have the same start, not sure if that occurs in practice though).</li>\n<li>No, call-site is specifically for inlining. So for a generated range that represents an inlined function the <code>originalScope</code> points to the original inlined function scope and call-site points to where that inlined function was actually called in the original code. This is required to get stack traces right.</li>\n<li>Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently.\n<ul>\n<li>We basically distinguish between 2 cases:\n<ol>\n<li>The variable is available for the full range with the same expression, in that case we only need a single offset into the names array.</li>\n<li>The variable requires different expressions for parts of the generated range. In this case the first DATA is again a single offset into the names array. This is the expression from the range start. Then we encode another data <code>M</code>, to denote how many more live ranges we have. We encode it negated, so decoders can distinguish between case 1) and 2).</li>\n</ol>\n</li>\n<li>Holger filed a bug about how to encode unavailable here. https://github.com/tc39/source-map-rfc/issues/70. I like your suggestion as well and will add it to the list.</li>\n</ul>\n</li>\n</ul>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709803640043,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$mcKsMPqg_daJiDvAIvzJWVw6uRG0R_liZCw2DB9kJDA"},
{"content":{"body":"> Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.\n\nWe could make it relative to the last Original Source Start's `column`, though, meaning indentation would be handled easily with 1 VLQ byte. Because of our crappy 5/8s base64, and the first byte containing the sign bit, we only have only 4 bits of data in the first byte. If a column is at column 16, then we have to use 2 bytes in an absolute encoding. If it's relative, it's just `E`s and `F`s to indent and dedent.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Original files are formatted normally, so I'd imagine that most of the columns are absolute anyway given that not many scopes will start on the same line.</p>\n</blockquote>\n<p>We could make it relative to the last Original Source Start's <code>column</code>, though, meaning indentation would be handled easily with 1 VLQ byte. Because of our crappy 5/8s base64, and the first byte containing the sign bit, we only have only 4 bits of data in the first byte. If a column is at column 16, then we have to use 2 bytes in an absolute encoding. If it's relative, it's just <code>E</code>s and <code>F</code>s to indent and dedent.</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709804158430,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$G3aJRnkeaR6enDwjWIt4jXjgIPfhTwQg37P3BwOxpkA"},
{"content":{"body":"> Encoding start/end items separately gives us the tree structure of scopes immediately\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately<br>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n</blockquote>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709804345728,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$-JoA6UFcfTdrW3hPPP3SOannXrFLnnrt5SpGFSyBGdU"},
{"content":{"body":" * > Encoding start/end items separately gives us the tree structure of scopes immediately\n\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately</p>\n</blockquote>\n<p>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n","m.mentions":{},"m.new_content":{"body":"> Encoding start/end items separately gives us the tree structure of scopes immediately\n\nThis is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's **much** faster to have a flat array","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Encoding start/end items separately gives us the tree structure of scopes immediately</p>\n</blockquote>\n<p>This is gonna hurt serialize/deserialize performance because I'll have to make a tree. It's <strong>much</strong> faster to have a flat array</p>\n","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$-JoA6UFcfTdrW3hPPP3SOannXrFLnnrt5SpGFSyBGdU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1709804357931,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YJ_i97nA53Xqy8lOJUj90LkSDIzQvJL8JF7HRk6r3kA"},
{"content":{"body":"> Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently. We basically distinguish between 2 cases:\n\nCan you give me two example encodings?\n","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Bindings are a bit tricky, maybe we went overboard with trying to encode it efficiently. We basically distinguish between 2 cases:</p>\n</blockquote>\n<p>Can you give me two example encodings?</p>\n","m.mentions":{},"msgtype":"m.text"},"ts":1709804598803,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PsoJ5nS6VE9-H5Mhy-ks8lq2Wlkoey1v0xy50tRwfZc"},
{"content":{"body":"I don't have an example for bindings encoding but holgers impl is here: https://github.com/hbenl/tc39-proposal-scope-mapping/blob/master/src/encodeScopes.ts","m.mentions":{},"msgtype":"m.text"},"ts":1709804724135,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$mkIa-EWRrT12nfdL9PnP8eImdyTm-hqpUI-nmXqBIuU"},
{"content":{"body":"Oh, and should we have the ability to set a binding expression?","m.mentions":{},"msgtype":"m.text"},"ts":1709804756660,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$z4S8tVOvh9bv8_5Gsftrwsm6EFAvPRiTbd9G1EhyM-A"},
{"content":{"body":"Also I don't follow how decoding this is more expensive. The decoder I wrote does this in a single pass. Instead of dumping it into a single array it keeps a stack around to build the tree on the fly","m.mentions":{},"msgtype":"m.text"},"ts":1709804783045,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$kx_lbbpSdt6s7PdmcfbmPOb0ox8lD4CBHGOeoMluyHI"},
{"content":{"body":"encoding might be a different story depending if you already have the tree or not, otherwise it's just a normal depth first traversal","m.mentions":{},"msgtype":"m.text"},"ts":1709804799733,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$omkZKzXjscZJlhqzxh_xdbSBPWez4Zpe41efnfYWn14"},
{"content":{"body":"Eg, if I need an expression to read `JSBI.BigInt(…)`, how do I set it?","format":"org.matrix.custom.html","formatted_body":"Eg, if I need an expression to read <code>JSBI.BigInt(…)</code>, how do I set it?","m.mentions":{},"msgtype":"m.text"},"ts":1709804815659,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SmVl7lJoGZv5MRxvinm0sw_Z0RHkrnpZUXy6mjq-GVA"},
{"content":{"body":"I don't follow fully, can you give a bit more context for an example. Whats the original vs generated","m.mentions":{},"msgtype":"m.text"},"ts":1709804956950,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$WAgsmVLTIZq7yH5fjGwqWabpZgv1ocn6hP5vbuHfUMI"},
{"content":{"body":"> <@szuend:matrix.org> Also I don't follow how decoding this is more expensive. The decoder I wrote does this in a single pass. Instead of dumping it into a single array it keeps a stack around to build the tree on the fly\n\nI'm competing against WASM impls, so the encoding/decoding code I write needs to be absurdly efficient. If I have to create a tree structure to deserialize, then I'm recursing to and my hot loop is jumping around.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!GURLmrBmuNjUaqboWr:matrix.org/$kx_lbbpSdt6s7PdmcfbmPOb0ox8lD4CBHGOeoMluyHI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@szuend:matrix.org\">@szuend:matrix.org</a><br>Also I don&#39;t follow how decoding this is more expensive. The decoder I wrote does this in a single pass. Instead of dumping it into a single array it keeps a stack around to build the tree on the fly</blockquote></mx-reply>I'm competing against WASM impls, so the encoding/decoding code I write needs to be absurdly efficient. If I have to create a tree structure to deserialize, then I'm recursing to and my hot loop is jumping around.","m.mentions":{"user_ids":["@szuend:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$kx_lbbpSdt6s7PdmcfbmPOb0ox8lD4CBHGOeoMluyHI"}},"msgtype":"m.text"},"ts":1709805134677,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$P2_xDXWG1mPH9Kq03fO4f9kvR2E-9QjDwsgMecdki84"},
{"content":{"body":"I need to come up with a way to get a flat array out of all of this for every entry, something like the current segment decoding in https://github.com/jridgewell/sourcemap-codec?tab=readme-ov-file#usage","m.mentions":{},"msgtype":"m.text"},"ts":1709805167385,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$f2bSamr-129suzrR57voKKC2m7I3T1vz8txNg0bR3-w"},
{"content":{"body":"Flat, packed, SMI arrays","m.mentions":{},"msgtype":"m.text"},"ts":1709805198121,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oB8aCO4LP4G9EbgFGLnYBAU84byFaQzUZrZNzgUhxXM"},
{"content":{"body":"I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing `;` delimiters for liens","format":"org.matrix.custom.html","formatted_body":"I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing <code>;</code> delimiters for liens","m.mentions":{},"msgtype":"m.text"},"ts":1709805404903,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$7z0NrVIcHEhy1IUoOim5yZOlmtbYbKPwpMnIh3HDVDE"},
{"content":{"body":" * I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing `;` delimiters for lines","format":"org.matrix.custom.html","formatted_body":" * I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing <code>;</code> delimiters for lines","m.mentions":{},"m.new_content":{"body":"I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing `;` delimiters for lines","format":"org.matrix.custom.html","formatted_body":"I'm going to have deal with it anyways in the Generated side, where at least it makes sense because we're doing <code>;</code> delimiters for lines","m.mentions":{},"msgtype":"m.text"},"m.relates_to":{"event_id":"$7z0NrVIcHEhy1IUoOim5yZOlmtbYbKPwpMnIh3HDVDE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1709805415132,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$HQBg3VkJpsizMiazH-R4r1-emCT8omxbmVlrVwx2kr4"},
{"content":{"body":"It's still flat packed SMI arrays. For original scopes they are delimited by `,` for generated ranges it's `;` and `,`","format":"org.matrix.custom.html","formatted_body":"It's still flat packed SMI arrays. For original scopes they are delimited by <code>,</code> for generated ranges it's <code>;</code> and <code>,</code>","m.mentions":{},"msgtype":"m.text"},"ts":1709805538083,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$U7WhKZHEHaPc34_9MAEV68nV-nhaxYT_aWZ3tf3L5Gk"},
{"content":{"body":"The proposal has an example with `BigInt`. Something like:\n```js\n// input\nconst n = 9007199254740991n;\n\n// output\nconst n = JSBI.BigInt(9007199254740991); // [1073741823, 8388607]\n```\n\nThen explains there's a way run an expression to \"get\" the current value formatted as `\"BigInt(9007199254740991)\"`","format":"org.matrix.custom.html","formatted_body":"<p>The proposal has an example with <code>BigInt</code>. Something like:</p>\n<pre><code class=\"language-js\">// input\nconst n = 9007199254740991n;\n\n// output\nconst n = JSBI.BigInt(9007199254740991); // [1073741823, 8388607]\n</code></pre>\n<p>Then explains there's a way run an expression to \"get\" the current value formatted as <code>\"BigInt(9007199254740991)\"</code></p>\n","m.mentions":{},"m.relates_to":{"event_id":"$WAgsmVLTIZq7yH5fjGwqWabpZgv1ocn6hP5vbuHfUMI","is_falling_back":true,"m.in_reply_to":{"event_id":"$WAgsmVLTIZq7yH5fjGwqWabpZgv1ocn6hP5vbuHfUMI"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1709805550186,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uAy-T6ZX5vihzGYu7lZcZsRDmylaXnRE6wcbTSG0qR4"},
{"content":{"body":"Sematnics is determined by how many elements the SMI arrays has","m.mentions":{},"msgtype":"m.text"},"ts":1709805556507,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$xmxUXKBKXKn1Paegta6ZT9-wcSi2GTkZQhis93CvYvk"},
{"content":{"body":"But what if I want to update that value?","m.mentions":{},"m.relates_to":{"event_id":"$WAgsmVLTIZq7yH5fjGwqWabpZgv1ocn6hP5vbuHfUMI","is_falling_back":true,"m.in_reply_to":{"event_id":"$uAy-T6ZX5vihzGYu7lZcZsRDmylaXnRE6wcbTSG0qR4"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1709805556782,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$piVTo4SCsrPqfwd-7XTQEvqnu-OyF2_vUPHu8GzbKLU"},
{"content":{"body":"Good question, at the moment we only cover reading variables, but not writing them.","m.mentions":{},"m.relates_to":{"event_id":"$WAgsmVLTIZq7yH5fjGwqWabpZgv1ocn6hP5vbuHfUMI","is_falling_back":true,"m.in_reply_to":{"event_id":"$piVTo4SCsrPqfwd-7XTQEvqnu-OyF2_vUPHu8GzbKLU"},"rel_type":"m.thread"},"msgtype":"m.text"},"ts":1709805716932,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$mTraEfyaysBwGlOp5iJetEEzifxHlU-Q_lmMDyntvUI"},
{"content":{"body":"I'm not sure what you mean, the encoding is forced to be nested","m.mentions":{},"msgtype":"m.text"},"ts":1709805910430,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$uWCNeqxCsw2oxT-0rsmKjPdTDVzayvORTyjFy9O3Wqo"},
{"content":{"body":"https://github.com/hbenl/tc39-proposal-scope-mapping/blob/e73d4254d9c258888d37f0889e937aa9b78de04b/src/decodeScopes.ts#L43","m.mentions":{},"msgtype":"m.text"},"ts":1709805916333,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$vjZRac6HYzy3iTPQkdO_1OOBKgksZ25NrTXSq3JDbIM"},
{"content":{"body":"I'm either recursing to pull data into a nested Original Source, or maybe I'm maintaining my own stack to assign values to","m.mentions":{},"msgtype":"m.text"},"ts":1709806042375,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$K1eCOMkEOvQZXh61jPQzRGrN4WAh5oh5uvO_czBLQnM"},
{"content":{"body":"I guess a stack will work, I can pop from it and assign the end line/col when I encounter the End message","m.mentions":{},"msgtype":"m.text"},"ts":1709806129270,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5uVz_q_xJniOxhsYzL_T0foCq7kunOspRf6aYTT8jmo"},
{"content":{"body":"FWIW here is how I implemented it in DevTools for now: https://crrev.com/c/5307620","m.mentions":{},"msgtype":"m.text"},"ts":1709806193941,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$8MweXrzmrWu0qgFaH7wdcdIMdd1KYguzfsQnC4P-Cr8"}
]