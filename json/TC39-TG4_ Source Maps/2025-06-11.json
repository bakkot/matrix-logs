[
{"content":{"body":"Hi everyone. My team recently discovered an interesting technique used by React Server components.\n\nThe React Server components machinery (in particular [react-client](https://github.com/facebook/react/tree/main/packages/react-client)) creates fake scripts with the same source map as a real user code to preserve source mapped traces in the browser. It allows recreating the top stack frame of the server code on the client preserving mapping to the original source code.\n\nConsider an example ([github repo](https://github.com/Soarex16/next-15-server-components-reproduction-app)):\n\n```js\nexport default function Home() {\n  console.log('Home');\n  return <div>\n    <main>\n      <h1>Header</h1>\n      Some text\n    </main>\n    <footer>Footer</footer>\n  </div>;\n}\n```\n\nIf you open this example in a browser, it will print to console the following message (first picture)\nAnd clicking to “page.tsx:3” points to the original source (second picture).\n\nFrom the user perspective, it’s a really neat feature, but unfortunately, this technique confuses js debuggers ([issue on GH](https://github.com/vercel/next.js/issues/77733)). This happens because debuggers think that this piece of code was bundled in different places multiple times.\n\nSo when the user put a breakpoint, the debugger put breakpoints in all these fake scripts causing redundant breaks.\n\nHere is an example of one of the scripts:\n\n```js\n/* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */\n\n({\"Home\":_=>\n\n        _()})\n\n//# sourceURL=rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?0\n\n//# sourceMappingURL=http://localhost:3000/__nextjs_source-map?filename=webpack-internal%3A%2F%2F%2F%28rsc%29%2F.%2Fapp%2Fpage.tsx\n```\n\nWe have several options for solving this problem, and all of them require coordination between debuggers and frameworks. Since it affects all major debuggers – Chrome DevTools, WebStorm, VS Code, I’m asking for your feedback as a starting point for discussion with the community.  \nHere they are:\n\n* Use some heuristics (like matching file structure, comments, etc.) to detect fake scripts that don't need breakpoints. This approach is unreliable and can easily break if React changes scripts structure in the future.  \n* Use some comment similar to \\# sourceMappingURL to indicate that this file should be skipped by the debugger  \n* For fake scripts generate source maps with some extra field (like ignoreList but for generated code):\n\n```json\n{\n  \"version\" : 3,\n  \"file\": \"out.js\",\n  \"ignored\": true,\n  rest of the source map ...\n}\n```","format":"org.matrix.custom.html","formatted_body":"<p>Hi everyone. My team recently discovered an interesting technique used by React Server components.</p>\n<p>The React Server components machinery (in particular <a href=\"https://github.com/facebook/react/tree/main/packages/react-client\">react-client</a>) creates fake scripts with the same source map as a real user code to preserve source mapped traces in the browser. It allows recreating the top stack frame of the server code on the client preserving mapping to the original source code.</p>\n<p>Consider an example (<a href=\"https://github.com/Soarex16/next-15-server-components-reproduction-app\">github repo</a>):</p>\n<pre><code class=\"language-js\">export default function Home() {\n  console.log('Home');\n  return &lt;div&gt;\n    &lt;main&gt;\n      &lt;h1&gt;Header&lt;/h1&gt;\n      Some text\n    &lt;/main&gt;\n    &lt;footer&gt;Footer&lt;/footer&gt;\n  &lt;/div&gt;;\n}\n</code></pre>\n<p>If you open this example in a browser, it will print to console the following message (first picture)<br>And clicking to “page.tsx:3” points to the original source (second picture).</p>\n<p>From the user perspective, it’s a really neat feature, but unfortunately, this technique confuses js debuggers (<a href=\"https://github.com/vercel/next.js/issues/77733\">issue on GH</a>). This happens because debuggers think that this piece of code was bundled in different places multiple times.</p>\n<p>So when the user put a breakpoint, the debugger put breakpoints in all these fake scripts causing redundant breaks.</p>\n<p>Here is an example of one of the scripts:</p>\n<pre><code class=\"language-js\">/* This module was rendered by a Server Component. Turn on Source Maps to see the server source. */\n\n({\"Home\":_=&gt;\n\n        _()})\n\n//# sourceURL=rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?0\n\n//# sourceMappingURL=http://localhost:3000/__nextjs_source-map?filename=webpack-internal%3A%2F%2F%2F%28rsc%29%2F.%2Fapp%2Fpage.tsx\n</code></pre>\n<p>We have several options for solving this problem, and all of them require coordination between debuggers and frameworks. Since it affects all major debuggers – Chrome DevTools, WebStorm, VS Code, I’m asking for your feedback as a starting point for discussion with the community.<br>\nHere they are:</p>\n<ul>\n<li>Use some heuristics (like matching file structure, comments, etc.) to detect fake scripts that don't need breakpoints. This approach is unreliable and can easily break if React changes scripts structure in the future.</li>\n<li>Use some comment similar to # sourceMappingURL to indicate that this file should be skipped by the debugger</li>\n<li>For fake scripts generate source maps with some extra field (like ignoreList but for generated code):</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"version\" : 3,\n  \"file\": \"out.js\",\n  \"ignored\": true,\n  rest of the source map ...\n}\n</code></pre>\n","m.mentions":{},"msgtype":"m.text"},"ts":1749630656677,"senderName":"Shumaf Lovpache","senderId":"@sshumaf:matrix.org","id":"$FteuluBdSuhtJ2jn5ZX3kegXwwIxndXozUIOCrNS5m4"},
{"content":{"body":"Not sure I fully follow, why are the fake scripts needed? Is it because due to the server rendering no JS would actually run on the browser-side?","m.mentions":{},"msgtype":"m.text"},"ts":1749631776490,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$tyms2QOtqxUMwMt4WhgoB6JiQPmi23Vld3jrD1QU0to"},
{"content":{"body":"If I understand correctly, these fake scripts are indeed for the code that runs on the server and it creates problems because the same code can run on both the server (when the component is first rendered) and the client (when the component is rendered after an update), in that case you have a real and a fake script, both pointing to the same original code.","m.mentions":{},"msgtype":"m.text"},"ts":1749632180304,"senderName":"Holger Benl","senderId":"@holger_benl:matrix.org","id":"$R-NuApJSOdTZIQOoVFRlSuBmT-X3kqKPvqpGuZjDReU"},
{"content":{"body":"I don't even understand how the server console.log is injected into the client (from the screenshot)","m.mentions":{},"msgtype":"m.text"},"ts":1749632268622,"senderName":"Simon Zünd","senderId":"@szuend:matrix.org","id":"$SaQUwx-4Mb39-Sn9bsITtnfK9wrdETG-EkadVumiPFs"},
{"content":{"body":"Yes, thats because some `console.log` was actually executed on the server and in the browser we don't have the same code that rendered the page, so we need to construct a fake script with matching lines","format":"org.matrix.custom.html","formatted_body":"Yes, thats because some <code>console.log</code> was actually executed on the server and in the browser we don't have the same code that rendered the page, so we need to construct a fake script with matching lines","m.mentions":{"user_ids":["@szuend:matrix.org"]},"m.relates_to":{"m.in_reply_to":{"event_id":"$tyms2QOtqxUMwMt4WhgoB6JiQPmi23Vld3jrD1QU0to"}},"msgtype":"m.text"},"ts":1749632682799,"senderName":"Shumaf Lovpache","senderId":"@sshumaf:matrix.org","id":"$LcRWNL3xkMtqSIzjE4NdyS1n8JfvIhwQ0BVXpkT5Sck"}
]