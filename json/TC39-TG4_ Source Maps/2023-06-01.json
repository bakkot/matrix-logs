[
{"content":{"body":"Source code:\n\n```js\nimport { x } from 'y'\nx\ndebugger\n```\n\nResult code:\n\n```js\nconst __webpack_harmony_import_y = () => { ... }\n__webpack_harmony_import_y().x\ndebugger\n```\n\nIs it possible for the source map spec we have today to create a sourcemap that, when I type `x`, the debugger translate it back to `__webpack_harmony_import_y().x` and gives me the correct result?","format":"org.matrix.custom.html","formatted_body":"<p>Source code:</p>\n<pre><code class=\"language-js\">import { x } from 'y'\nx\ndebugger\n</code></pre>\n<p>Result code:</p>\n<pre><code class=\"language-js\">const __webpack_harmony_import_y = () =&gt; { ... }\n__webpack_harmony_import_y().x\ndebugger\n</code></pre>\n<p>Is it possible for the source map spec we have today to create a sourcemap that, when I type <code>x</code>, the debugger translate it back to <code>__webpack_harmony_import_y().x</code> and gives me the correct result?</p>\n","msgtype":"m.text"},"ts":1685618744946,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$aMVDo4FZ6llrQt6n8IwJyRz3E4mzTbiCBmOBLrs5V0c"},
{"content":{"body":"I'm investigating if https://github.com/webpack/webpack/issues/3957 is possible to solve. I looked at the `names` field, but seems isn't help much","format":"org.matrix.custom.html","formatted_body":"I'm investigating if https://github.com/webpack/webpack/issues/3957 is possible to solve. I looked at the <code>names</code> field, but seems isn't help much","msgtype":"m.text"},"ts":1685618813595,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$gVSzQOcbCxeftTDEYAAWMRQ5z2-MZ0RMA7Nx8wvpieo"},
{"content":{"body":"> <@jackworks:matrix.org> Source code:\n> \n> ```js\n> import { x } from 'y'\n> x\n> debugger\n> ```\n> \n> Result code:\n> \n> ```js\n> const __webpack_harmony_import_y = () => { ... }\n> __webpack_harmony_import_y().x\n> debugger\n> ```\n> \n> Is it possible for the source map spec we have today to create a sourcemap that, when I type `x`, the debugger translate it back to `__webpack_harmony_import_y().x` and gives me the correct result?\n\nYes, we have identified mapping variable names as a shared goal of this group, and it is great to work on that already in issues like the one you linked, and in this chat.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!GURLmrBmuNjUaqboWr%3Amatrix.org/%24aMVDo4FZ6llrQt6n8IwJyRz3E4mzTbiCBmOBLrs5V0c\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>Source code:</p>\n<pre><code class=\"language-js\">import { x } from 'y'\nx\ndebugger\n</code></pre>\n<p>Result code:</p>\n<pre><code class=\"language-js\">const __webpack_harmony_import_y = () =&gt; { ... }\n__webpack_harmony_import_y().x\ndebugger\n</code></pre>\n<p>Is it possible for the source map spec we have today to create a sourcemap that, when I type <code>x</code>, the debugger translate it back to <code>__webpack_harmony_import_y().x</code> and gives me the correct result?</p>\n</blockquote></mx-reply>Yes, we have identified mapping variable names as a shared goal of this group, and it is great to work on that already in issues like the one you linked, and in this chat.","m.relates_to":{"m.in_reply_to":{"event_id":"$aMVDo4FZ6llrQt6n8IwJyRz3E4mzTbiCBmOBLrs5V0c"}},"msgtype":"m.text"},"ts":1685624723324,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SMGLzWmy7CB3PM-jHqXxAahXn9xE8Z3B-W9cXBfJJfs"},
{"content":{"body":"Or also the names of properties","msgtype":"m.text"},"ts":1685624750470,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zj_EeC2UYUJTwJls7Mx1JYTxFogo1f2dyhkdZJNHfyY"},
{"content":{"body":"Maybe this is actually a third kind of mapping? Anyway I see it as in scope if this is a common/important transformation ","format":"org.matrix.custom.html","formatted_body":"Maybe this is actually a third kind of mapping? Anyway I see it as in scope if this is a common/important transformation","msgtype":"m.text"},"ts":1685624773169,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IDDdw9qI6ZUxzPrCZxY1pS7OKhfq5d4EIEUQNH0AQ5E"},
{"content":{"body":"However, in our calls, new features for improving name mapping will be prioritized after nailing down the details of the current source map specification and capabilities.","msgtype":"m.text"},"ts":1685624809442,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$l1-0tpKuJm6zLZRsn1uT68pH20zYnrozAnuMQ9Nqdro"},
{"content":{"body":"IMO this is one of the reasons i dont think Source Maps are super viable long term (at least as they are)","msgtype":"m.text"},"ts":1685642325351,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$taPX0GF0GegwTPxP38EBbNkzLW9jtCf2Eu4MntcngmQ"},
{"content":{"body":"we've come a _looooong_ way from \"i just merged a bunch of files and want to unmerge them, so please tell me how to translate a location in the unified source to a location in the separated source\"","format":"org.matrix.custom.html","formatted_body":"we've come a <em>looooong</em> way from &quot;i just merged a bunch of files and want to unmerge them, so please tell me how to translate a location in the unified source to a location in the separated source&quot;","msgtype":"m.text"},"ts":1685642366999,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$qpw7CZ52DID8jn_bnYr5SXa6HY-Qb9nGBH9idho6VFU"},
{"content":{"body":"i think if we really want something futureproof (or at least much longer term) we need to have a way to include the some understanding of the context (i.e. \"am i in a statement or expression?\", \"has this been inlined?\", etc.) alongside the location","msgtype":"m.text"},"ts":1685642438884,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$56TOjl6GYI4DIRX6MU9Fxu5mzCJitfossaI9GLrNyV0"},
{"content":{"body":"but even then there's probably a _lot_ of scenarios where even that info wouldn't be enough to allow the developer to have some semblance of reconstruction","format":"org.matrix.custom.html","formatted_body":"but even then there's probably a <em>lot</em> of scenarios where even that info wouldn't be enough to allow the developer to have some semblance of reconstruction","msgtype":"m.text"},"ts":1685642546347,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$boMwrD2gkEoDa3sjPDib0xRaLxlgVdwGyEUe3KaEAcA"},
{"content":{"body":" * for example, if this\n\n```\nclass Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n```\n\ngets simplified into something like this\n\n```\nconsole.log((new Foo).bar())\n```\n\nthen i dont think there's anything sort of mapping/encoding/translation/etc. for `bar` that we could encode into the Source Map that would actually work 😕","format":"org.matrix.custom.html","formatted_body":" * <p>for example, if this</p>\n<pre><code>class Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n</code></pre>\n<p>gets simplified into something like this</p>\n<pre><code>console.log((new Foo).bar())\n</code></pre>\n<p>then i dont think there's anything sort of mapping/encoding/translation/etc. for <code>bar</code> that we could encode into the Source Map that would actually work 😕</p>\n","m.new_content":{"body":"for example, if this\n\n```\nclass Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n```\n\ngets simplified into something like this\n\n```\nconsole.log((new Foo).bar())\n```\n\nthen i dont think there's anything sort of mapping/encoding/translation/etc. for `bar` that we could encode into the Source Map that would actually work 😕","format":"org.matrix.custom.html","formatted_body":"<p>for example, if this</p>\n<pre><code>class Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n</code></pre>\n<p>gets simplified into something like this</p>\n<pre><code>console.log((new Foo).bar())\n</code></pre>\n<p>then i dont think there's anything sort of mapping/encoding/translation/etc. for <code>bar</code> that we could encode into the Source Map that would actually work 😕</p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$9hTHPhhxlYPwB6RHplSDUJfrtQoEvnVuxwbVDTck5qM","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685642652279,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$Kv0V-SkOleNXdYCjiPDUQC2-ZV5-7GIpwTCkZaO1Lew"},
{"content":{"body":"for example, if this\n\n```\nclass Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n```\n\ngets simplified into something like this\n\n```\nconsole.log((new Foo).bar())\n```\n\nthen i dont think there's anything sort of mapping/encoding/translation/etc. for `bar` that we could encode into the Source Map that would actually work 😕","format":"org.matrix.custom.html","formatted_body":"<p>for example, if this</p>\n<pre><code>class Foo {\n\t#bar = [ 42 ];\n\n\ttakeBar() {\n\t\tlet bar = this.#bar;\n\t\tthis.#bar = null;\n\t\treturn bar;\n\t}\n}\n\nlet foo = new Foo;\nlet bar = foo.takeBar();\nconsole.log(bar);\n</code></pre>\n<p>gets simplified into something like this</p>\n<pre><code>console.log((new Foo).bar())\n</code></pre>\n<p>then i dont think there's anything sort of mapping/encoding/translation/etc. for <code>bar</code> that we could encode into the Source Map that would actually work 😕</p>\n","msgtype":"m.text"},"ts":1685642661540,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$400MlpdUFwthBzVjA3GkvCwspEBW7ETsd-VZ_kZhapc"},
{"content":{"body":"in that case, maybe we can encode that there _was_ a variable called _foo_ but it's no longer available in the dev tools due to inline and give understandable error?","msgtype":"m.text"},"ts":1685643215459,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Stf9svzMJFKAqhtKANS_nj2S4NRENIPIDfaKYmfaMH8"},
{"content":{"body":"yeah that's a possibility","msgtype":"m.text"},"ts":1685643282368,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$1Phj4eO9nzkmIF2D2r_zdxCxhW0SwlWTJUpwxgxv0yQ"},
{"content":{"body":"yes and I agree. the location way isn't suitable for today, which we have super complicated transformation and bundling. we even have foreign programming languages translated to JavaScript ","msgtype":"m.text"},"ts":1685643287386,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$GFUB-4WfNaKiJI6NphqcISj27VF2A8_J16ATQkNrNMw"},
{"content":{"body":"but even that might not be the easiest thing to actually explain because of variable shadowing and whatnot 😕","msgtype":"m.text"},"ts":1685643291649,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$HkoCsOjLBxclMo7X_TYKv3MTBKmwuX2VFq3CDi2HF_o"},
{"content":{"body":"tho we might be able to inject a variable with the same name that's an error object in that case?  🤔  but that's really funky","msgtype":"m.text"},"ts":1685643407451,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$nFF6wYo0ilUOuDJVcX5eF7OWpDNwTW6s8avunF0QWGA"},
{"content":{"body":"An example of what I said above is:\n```js\nconst someA = expr\nsetTimeout(() => {\n    const someB = expr2\n    debugger\n})\n```\n \nthat compressed to\n```js\nconst e = expr\nsetTimeout(() => {\n    const e = expr2\n    debugger \n})\n```\n\n1. map e#0 to line 0 col 6, map e#1 to line 2 col 10\n2. map \"someA\" to e#0 in the outer and inner scope, map \"someB\" to e#1 in only inner scope\n3. when dev tools evaluate \"someA\" it first finds e#0, then finds the variable it's referencing. (I don't know if the debugger protocol can do this today but it's possible anyway)","msgtype":"m.text"},"ts":1685644316605,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kioKlokKRirULiXrKcdkYy60KXLcj09Nv3ucDdTxvG0"},
{"content":{"body":"* removed. need more consideration ","m.new_content":{"body":"removed. need more consideration ","msgtype":"m.text"},"m.relates_to":{"event_id":"$kioKlokKRirULiXrKcdkYy60KXLcj09Nv3ucDdTxvG0","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685644508934,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$wsnm94m8gMR_lqvD-D4COKZgdVnsQPb6HUwkvypBUlc"},
{"content":{"body":"Even if there are fundamental limitations of source maps, doesn’t it make sense to attempt to make some improvements locally on what we have right now, given their wide deployment?","msgtype":"m.text"},"ts":1685644519427,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ihtAu6xqdZPZdCPhkauSSaJZ_3HrOtquSLr7vekLfc8"},
{"content":{"body":"oh yeah definitely im not suggesting we abandon them","msgtype":"m.text"},"ts":1685644540003,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$9fvjHSK15pxbq-pyzi0mDlp_yR9w29F8UjtJAfKH_l4"},
{"content":{"body":"Also, couldn’t we squeeze whatever new thing into some other json property?","msgtype":"m.text"},"ts":1685644554383,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h9nJvoh6Na-E7vuJqqM7qKPGMDUsXC2l92faw1jSBkw"},
{"content":{"body":"just that i think trying to chase some of the more complex things is perhaps not the best approach","msgtype":"m.text"},"ts":1685644561628,"senderName":"Devin Rousso","senderId":"@dcrousso:matrix.org","id":"$Y61HJ6h_A66uXH7bKKp3COESU9G8sVif4SDXCruLTAE"},
{"content":{"body":"Yeah I think it is good to think about these possible futures while still focusing on nailing down the basics first","msgtype":"m.text"},"ts":1685644651955,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$o7CwekQwjpE62ZNl__12N9-FHuTCyOGy6svZmIH-xs0"},
{"content":{"body":"And to understand the design space ","format":"org.matrix.custom.html","formatted_body":"And to understand the design space","msgtype":"m.text"},"ts":1685644678106,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$pv1Imkk1hePGJBdr9i0TWzDwPUEHOiRhEZfKFdrI3ac"},
{"content":{"body":"> <@dcrousso:matrix.org> i think if we really want something futureproof (or at least much longer term) we need to have a way to include the some understanding of the context (i.e. \"am i in a statement or expression?\", \"has this been inlined?\", etc.) alongside the location\n\nUltimately, maybe the reparsing approach we heard about in past calls isn’t the worst for this kind of problem…","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!GURLmrBmuNjUaqboWr%3Amatrix.org/%2456TOjl6GYI4DIRX6MU9Fxu5mzCJitfossaI9GLrNyV0\">In reply to</a> <a href=\"https://matrix.to/#/@dcrousso:matrix.org\">@dcrousso:matrix.org</a><br>i think if we really want something futureproof (or at least much longer term) we need to have a way to include the some understanding of the context (i.e. \"am i in a statement or expression?\", \"has this been inlined?\", etc.) alongside the location</blockquote></mx-reply>Ultimately, maybe the reparsing approach we heard about in past calls isn’t the worst for this kind of problem…","m.relates_to":{"m.in_reply_to":{"event_id":"$56TOjl6GYI4DIRX6MU9Fxu5mzCJitfossaI9GLrNyV0"}},"msgtype":"m.text"},"ts":1685644761049,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zGXv5eGQO7cax7seEdPB2eeE2UQe5ueIuHBilug0UhY"},
{"content":{"body":"my thought is, we have 10 even 100 years in the future we need source map, we should really do the correct thing even if that means there will be some compatibility issue or even a redesign.\nipv6, http2 they're both good examples of this.","msgtype":"m.text"},"ts":1685644805849,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$usOlGvse83AUWRWEEN9Pzo2Np9DifnOinHdDkriMCN4"},
{"content":{"body":"* my thought is, we have 10 even 100 years in the future we need source map, we should really do the correct thing even if that means there will be some compatibility issue or even a redesign.\ncompatibility issue will gone, but a insufficient design won't \nipv6, http2 they're both good examples of this.","m.new_content":{"body":"my thought is, we have 10 even 100 years in the future we need source map, we should really do the correct thing even if that means there will be some compatibility issue or even a redesign.\ncompatibility issue will gone, but a insufficient design won't \nipv6, http2 they're both good examples of this.","msgtype":"m.text"},"m.relates_to":{"event_id":"$usOlGvse83AUWRWEEN9Pzo2Np9DifnOinHdDkriMCN4","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1685644843198,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LjuLp-CxQbCYMTW3BZQnWOxfM1DNOE9FQZmi72-QMKU"},
{"content":{"body":"I don’t know if there is a “correct” for all of these things, but yeah, if we introduce a variable mapping feature, we should try to make it reliable rather than best-effort, if that is what you mean.","msgtype":"m.text"},"ts":1685644953719,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GRyqnjgYS6DXvPy8jbifE1VuutXJ-A4na5rt76tyGPg"},
{"content":{"body":"if the current way (location only mapping) can work with modern needs, that's good.\nbut if we eventually found we're adding too much deferents and epicycles, I hope we can drop it and build a new thing","msgtype":"m.text"},"ts":1685645312099,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$2M_rC1LEqX-VboRV0s9EyNgUj0RNnCxWqVLEEKrbWs8"},
{"content":{"body":"I also support a binary format, like http to http2. source map don't need (and it's not) human readable. I'm not saying we must build a new binary format for this, a JSON-like binary format (like CBOR) is good enough.","msgtype":"m.text"},"ts":1685645541963,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$KOA7goUvPFfmOpaVrCo0PjOciMJJFgaW6SzvYtGy6Hc"},
{"content":{"body":"Sorry, what do you mean by deferents and epicycles?","msgtype":"m.text"},"ts":1685646081111,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ftXOHxHNxM_P_ZvWTVY6daAOJm6XHh1rJF4FZSgsqck"},
{"content":{"body":"> <@jackworks:matrix.org> I also support a binary format, like http to http2. source map don't need (and it's not) human readable. I'm not saying we must build a new binary format for this, a JSON-like binary format (like CBOR) is good enough.\n\nWhat do you think the advantage of such a different format would be? Efficiency?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!GURLmrBmuNjUaqboWr%3Amatrix.org/%24KOA7goUvPFfmOpaVrCo0PjOciMJJFgaW6SzvYtGy6Hc\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I also support a binary format, like http to http2. source map don't need (and it's not) human readable. I'm not saying we must build a new binary format for this, a JSON-like binary format (like CBOR) is good enough.</blockquote></mx-reply>What do you think the advantage of such a different format would be? Efficiency?","m.relates_to":{"m.in_reply_to":{"event_id":"$KOA7goUvPFfmOpaVrCo0PjOciMJJFgaW6SzvYtGy6Hc"}},"msgtype":"m.text"},"ts":1685646113463,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K8bLQvMHsAWaK5KgVKUl_tqeuXt9ZDHLoli2d_Xw-TU"},
{"content":{"body":"size? speed? VLQ can be binary instead of Base64?","msgtype":"m.text"},"ts":1685646177106,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$KQpQ-vkdAu3Zkp3OMCdt-KAzjS0nAcBTpKyOt2ECfW8"},
{"content":{"body":"Yeah, I like the idea of a superficial mapping to CBOR with the same data model (to reduce cost of adoption), and then comparing this with benchmarks (of size and/or speed) to see if it would help. Once we know the potential benefit, we can weigh whether that’s worth the upgrade cost","msgtype":"m.text"},"ts":1685646626570,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BHsOUcAwhbGPB1kl2OUXz45_S6dIj3Enr92sXbLbcro"}
]