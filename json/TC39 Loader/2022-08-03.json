[
{"content":{"body":"> <@kriskowal:matrix.org> What’s this? Looks like the future.\n\nInstall `@jackworks/typescript@4.8.0-dev.20220802-2` (do not open source map, it will crash)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$VzjdlQAVg6g6I-1Lh4NRXDEGOIRgXwX7EGkWShvT99E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>What’s this? Looks like the future.</blockquote></mx-reply>Install <code>@jackworks/typescript@4.8.0-dev.20220802-2</code> (do not open source map, it will crash)","m.relates_to":{"m.in_reply_to":{"event_id":"$VzjdlQAVg6g6I-1Lh4NRXDEGOIRgXwX7EGkWShvT99E"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> What’s this? Looks like the future.\n\nInstall `@jackworks/typescript@4.8.0-dev.20220802-2` (do not open source map, it will crash)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$VzjdlQAVg6g6I-1Lh4NRXDEGOIRgXwX7EGkWShvT99E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>What’s this? Looks like the future.</blockquote></mx-reply>Install <code>@jackworks/typescript@4.8.0-dev.20220802-2</code> (do not open source map, it will crash)","mimetype":"text/html"}]},"ts":1659496738150,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RVIYOhdfnxn7RpdRKGT-5OwLP_S2HeUp_gDSC6-6wGc"},
{"content":{"body":"I see. You’re hacking TS :-)","msgtype":"m.text","org.matrix.msc1767.text":"I see. You’re hacking TS :-)"},"ts":1659496778539,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gHOy5APZMgauZrBi5d5cLaMTmrPfyKT0gtagOFUKUkg"},
{"content":{"body":"> <@kriskowal:matrix.org> I also could buy `import x from 'y' as module`, but that doesn’t address the “what’s a module? i thought _module_ was a synecdoche of _module exports namespace exotic objects_.”\n\n`import x from 'y' as uninitialized`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$JrpLkJKu2qPcuMcvudpWqsIt387h-1Ps9EtmTUe7Occ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I also could buy <code>import x from 'y' as module</code>, but that doesn’t address the “what’s a module? i thought <em>module</em> was a synecdoche of <em>module exports namespace exotic objects</em>.”</blockquote></mx-reply><code>import x from 'y' as uninitialized</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$JrpLkJKu2qPcuMcvudpWqsIt387h-1Ps9EtmTUe7Occ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I also could buy `import x from 'y' as module`, but that doesn’t address the “what’s a module? i thought _module_ was a synecdoche of _module exports namespace exotic objects_.”\n\n`import x from 'y' as uninitialized`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$JrpLkJKu2qPcuMcvudpWqsIt387h-1Ps9EtmTUe7Occ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I also could buy <code>import x from 'y' as module</code>, but that doesn’t address the “what’s a module? i thought <em>module</em> was a synecdoche of <em>module exports namespace exotic objects</em>.”</blockquote></mx-reply><code>import x from 'y' as uninitialized</code>","mimetype":"text/html"}]},"ts":1659497396783,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$iUWRi-Qv5F7Bjt4UPiLc8QN-__QTdcPiTDMwNg0Saq0"},
{"content":{"body":"I dislike `uninitialized` because:\n```\nimport x from 'y';\nimport x as xModule from 'y' as uninitialized; // <- actually initialized\n```","format":"org.matrix.custom.html","formatted_body":"<p>I dislike <code>uninitialized</code> because:</p>\n<pre><code>import x from 'y';\nimport x as xModule from 'y' as uninitialized; // &lt;- actually initialized\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I dislike `uninitialized` because:\n```\nimport x from 'y';\nimport x as xModule from 'y' as uninitialized; // <- actually initialized\n```","mimetype":"text/plain"},{"body":"<p>I dislike <code>uninitialized</code> because:</p>\n<pre><code>import x from 'y';\nimport x as xModule from 'y' as uninitialized; // &lt;- actually initialized\n</code></pre>\n","mimetype":"text/html"}]},"ts":1659497473737,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kKjXAUDrvvTBvsYxkHkiIS0XPeyBcabv4XUKpuBDBr0"},
{"content":{"body":"> <@robpalme:matrix.org> Good morning, all. I wanted to reiterate a bit on what I said in plenary and also afterwards direct to Kris last week.\n> \n> The layered modules APIs that Kris presented are great at permitting a bunch of use-cases. In particular I like the idea of using them for achieving mocking in a test runner (avoiding the need for code to use DI patterns or custom host hooks).\n> \n> The bigger win (value proposition) is if we can identify features that will allow the wider ecosystem to adopt ES modules. npm & Node mostly ship and execute CommonJS. No one has provided a compelling or easy migration story. So we have a situation that may even be worse than the Python 2/3 switchover.\n> \n> A key specific use-case that CJS still beats ESM on is the ability to ergonomically/quickly achieve fast load times via lazy loading. Meaning the Babel option \"lazy\" on the ESM->CJS transform that injects conditional synchronous requires to defer loading static imports to instead be just-in-time.\n> \n> ESM has no ergonomic way to achieve this. Instead users are forced to rewrite their app to become async and use dynamic `import() `. Because switching sync->async functions have ripple effects back to the caller.\n> \n> Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.\n> \n> My purpose in conveying this is not to demand sync loading. It is to highlight that, if you can make migration from CJS to ESM easier, then (1) the community/ecosystem will love you and see the value of your work, and (2) it will be easier to fund this work stream.\n\nSorry I am really late on this. I want to call out this part of this:\n\n> Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.\n\nI would need to clarify what \"sync\" means here, but i would say that the proposal is still very much in its original form and goal. The goal is described here: https://docs.google.com/presentation/d/17NsxHzAC2RlP5rB3wrns9O2Z-NduSpcm2_GOVo2TnKE/edit#slide=id.p -- I think it may be worthwhile to go over this proposal with the group again, and talk a bit more about the alternative (that I presented back in 2021, and recently got more feedback on) in light of the discussion in this group","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$sM11Q66L1nUqqKOCMic6H6r_A7Q3v3SRmoI5Ej3yznw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Good morning, all. I wanted to reiterate a bit on what I said in plenary and also afterwards direct to Kris last week.<br/><br/>The layered modules APIs that Kris presented are great at permitting a bunch of use-cases. In particular I like the idea of using them for achieving mocking in a test runner (avoiding the need for code to use DI patterns or custom host hooks).<br/><br/>The bigger win (value proposition) is if we can identify features that will allow the wider ecosystem to adopt ES modules. npm &amp; Node mostly ship and execute CommonJS. No one has provided a compelling or easy migration story. So we have a situation that may even be worse than the Python 2/3 switchover.<br/><br/>A key specific use-case that CJS still beats ESM on is the ability to ergonomically/quickly achieve fast load times via lazy loading. Meaning the Babel option &quot;lazy&quot; on the ESM-&gt;CJS transform that injects conditional synchronous requires to defer loading static imports to instead be just-in-time.<br/><br/>ESM has no ergonomic way to achieve this. Instead users are forced to rewrite their app to become async and use dynamic `import() `. Because switching sync-&gt;async functions have ripple effects back to the caller.<br/><br/>Originally Yulia&#39;s defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.<br/><br/>My purpose in conveying this is not to demand sync loading. It is to highlight that, if you can make migration from CJS to ESM easier, then (1) the community/ecosystem will love you and see the value of your work, and (2) it will be easier to fund this work stream.</blockquote></mx-reply><p>Sorry I am really late on this. I want to call out this part of this:</p>\n<blockquote>\n<p>Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.</p>\n</blockquote>\n<p>I would need to clarify what &quot;sync&quot; means here, but i would say that the proposal is still very much in its original form and goal. The goal is described here: https://docs.google.com/presentation/d/17NsxHzAC2RlP5rB3wrns9O2Z-NduSpcm2_GOVo2TnKE/edit#slide=id.p -- I think it may be worthwhile to go over this proposal with the group again, and talk a bit more about the alternative (that I presented back in 2021, and recently got more feedback on) in light of the discussion in this group</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$sM11Q66L1nUqqKOCMic6H6r_A7Q3v3SRmoI5Ej3yznw"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@robpalme:matrix.org> Good morning, all. I wanted to reiterate a bit on what I said in plenary and also afterwards direct to Kris last week.\n> \n> The layered modules APIs that Kris presented are great at permitting a bunch of use-cases. In particular I like the idea of using them for achieving mocking in a test runner (avoiding the need for code to use DI patterns or custom host hooks).\n> \n> The bigger win (value proposition) is if we can identify features that will allow the wider ecosystem to adopt ES modules. npm & Node mostly ship and execute CommonJS. No one has provided a compelling or easy migration story. So we have a situation that may even be worse than the Python 2/3 switchover.\n> \n> A key specific use-case that CJS still beats ESM on is the ability to ergonomically/quickly achieve fast load times via lazy loading. Meaning the Babel option \"lazy\" on the ESM->CJS transform that injects conditional synchronous requires to defer loading static imports to instead be just-in-time.\n> \n> ESM has no ergonomic way to achieve this. Instead users are forced to rewrite their app to become async and use dynamic `import() `. Because switching sync->async functions have ripple effects back to the caller.\n> \n> Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.\n> \n> My purpose in conveying this is not to demand sync loading. It is to highlight that, if you can make migration from CJS to ESM easier, then (1) the community/ecosystem will love you and see the value of your work, and (2) it will be easier to fund this work stream.\n\nSorry I am really late on this. I want to call out this part of this:\n\n> Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.\n\nI would need to clarify what \"sync\" means here, but i would say that the proposal is still very much in its original form and goal. The goal is described here: https://docs.google.com/presentation/d/17NsxHzAC2RlP5rB3wrns9O2Z-NduSpcm2_GOVo2TnKE/edit#slide=id.p -- I think it may be worthwhile to go over this proposal with the group again, and talk a bit more about the alternative (that I presented back in 2021, and recently got more feedback on) in light of the discussion in this group","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$sM11Q66L1nUqqKOCMic6H6r_A7Q3v3SRmoI5Ej3yznw?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@robpalme:matrix.org\">@robpalme:matrix.org</a><br>Good morning, all. I wanted to reiterate a bit on what I said in plenary and also afterwards direct to Kris last week.<br/><br/>The layered modules APIs that Kris presented are great at permitting a bunch of use-cases. In particular I like the idea of using them for achieving mocking in a test runner (avoiding the need for code to use DI patterns or custom host hooks).<br/><br/>The bigger win (value proposition) is if we can identify features that will allow the wider ecosystem to adopt ES modules. npm &amp; Node mostly ship and execute CommonJS. No one has provided a compelling or easy migration story. So we have a situation that may even be worse than the Python 2/3 switchover.<br/><br/>A key specific use-case that CJS still beats ESM on is the ability to ergonomically/quickly achieve fast load times via lazy loading. Meaning the Babel option &quot;lazy&quot; on the ESM-&gt;CJS transform that injects conditional synchronous requires to defer loading static imports to instead be just-in-time.<br/><br/>ESM has no ergonomic way to achieve this. Instead users are forced to rewrite their app to become async and use dynamic `import() `. Because switching sync-&gt;async functions have ripple effects back to the caller.<br/><br/>Originally Yulia&#39;s defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.<br/><br/>My purpose in conveying this is not to demand sync loading. It is to highlight that, if you can make migration from CJS to ESM easier, then (1) the community/ecosystem will love you and see the value of your work, and (2) it will be easier to fund this work stream.</blockquote></mx-reply><p>Sorry I am really late on this. I want to call out this part of this:</p>\n<blockquote>\n<p>Originally Yulia's defer-eval proposal looked like it might solve this problem. But I understand the sync part of that proposal is now under debate.</p>\n</blockquote>\n<p>I would need to clarify what &quot;sync&quot; means here, but i would say that the proposal is still very much in its original form and goal. The goal is described here: https://docs.google.com/presentation/d/17NsxHzAC2RlP5rB3wrns9O2Z-NduSpcm2_GOVo2TnKE/edit#slide=id.p -- I think it may be worthwhile to go over this proposal with the group again, and talk a bit more about the alternative (that I presented back in 2021, and recently got more feedback on) in light of the discussion in this group</p>\n","mimetype":"text/html"}]},"ts":1659543800093,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$euXMEdP7M0rty73W480m8QYgDRyOQpM4Rpa1edEGdD4"}
]