[
{"content":{"body":"hello everyone, here is a draft of what we intend to present next week regarding import attributes, following up on recent conversations: https://gist.github.com/peetklecha/a55532165dbd4905aa91bbe59e8b1001","msgtype":"m.text","org.matrix.msc1767.text":"hello everyone, here is a draft of what we intend to present next week regarding import attributes, following up on recent conversations: https://gist.github.com/peetklecha/a55532165dbd4905aa91bbe59e8b1001"},"ts":1674161988316,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$rA0AxfF90i9JmkpEokENrtMS7LfgYCyZGYjc82oj02k"},
{"content":{"body":"we would really appreciate input before sharing this more widely","msgtype":"m.text","org.matrix.msc1767.text":"we would really appreciate input before sharing this more widely"},"ts":1674162000333,"senderName":"peetk","senderId":"@peetk:matrix.org","id":"$QELt4DiSI2SLkOZ_NcWgnTPEDnopCv5J49P3RiyOh9o"},
{"content":{"body":"I missed the last few module calls; is this a good summary of what people were thinking there?","msgtype":"m.text"},"ts":1674162899775,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$A7qp3smnjbSAdtsBh_5TPHKdaG3-v3NbRD94O_Yek50"},
{"content":{"body":"a conclusion in March, or in January?","msgtype":"m.text"},"ts":1674167105684,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$b0oUihMzCpeAlKYcO1LPpnWgk1uJUxi_YLnf5DlzsT4"},
{"content":{"body":"We're going to work on a PR to the import assertions repo, but I don't think we have enough time to get consensus on it this meeting (the PR should be up already to achieve that)","msgtype":"m.text"},"ts":1674167150670,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$usEyJpZjM0UQuPNuTac2jKNlLqEw6qBz1Fu4FjIjwnE"},
{"content":{"body":"so the proposal is to sort of have this two month period to continue working it out, hoping to get consensus on some kind of change to import assertions by March","msgtype":"m.text"},"ts":1674167178023,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BRI1MZmCLkXG9M_Xd7b6WFhhEs2H4oXGNRrgBbeMK4Q"},
{"content":{"body":"and the \"conclusion\" from this meeting would be \"please hold on, implementers\"","msgtype":"m.text"},"ts":1674167190796,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rmgEcf6r_b0VbHqt_Gibyxg7Z8jfJkIxyRrdfBYF_20"},
{"content":{"body":" * We're going to work on a PR to the import assertions repo, but I don't think we have enough time to get consensus on it this meeting (the PR should be up already to achieve that)","m.new_content":{"body":"We're going to work on a PR to the import assertions repo, but I don't think we have enough time to get consensus on it this meeting (the PR should be up already to achieve that)","msgtype":"m.text"},"m.relates_to":{"event_id":"$usEyJpZjM0UQuPNuTac2jKNlLqEw6qBz1Fu4FjIjwnE","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1674167205695,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7FXUSqKVQaSbad2qTEMnkac9ddbjuxXbFiSOGJmmYN4"},
{"content":{"body":"makes sense, that's a really good thing to establish asap, to remove the time pressure on figuring things out","msgtype":"m.text"},"ts":1674167585309,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$IdjFZNaKmVg5SOUlRLIwkyRMuuaGtNguGz1TO7Nc-s0"},
{"content":{"body":"well, I think we have significant time pressure either way; if we don't deliver on a solution soon, a fairly likely outcome is that we'll have incoherent things shipping more widely. So I hope we can come to consensus on a way through by March.","msgtype":"m.text"},"ts":1674167786117,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AjREW7gueSmZqGZCBnYeNsJ59iBcJKPNMtrRoHhGR2k"},
{"content":{"body":"true enough","msgtype":"m.text"},"ts":1674167799782,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$w5SSHMxK769zO2LR_pmxUAkl8cH25hhgwnwENRE5aRo"},
{"content":{"body":"> with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions\n\nI think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using `assert`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions</p>\n</blockquote>\n<p>I think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using <code>assert</code></p>\n","msgtype":"m.text"},"ts":1674167812653,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RixYA5iE46TrIpZpTAE4aU5cq3SQmzJEgYo1pqhfcxc"},
{"content":{"body":" * > with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions\n\nI think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using `assert`","format":"org.matrix.custom.html","formatted_body":" * <blockquote>\n<p>with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions</p>\n</blockquote>\n<p>I think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using <code>assert</code></p>\n","m.new_content":{"body":"> with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions\n\nI think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using `assert`","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions</p>\n</blockquote>\n<p>I think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using <code>assert</code></p>\n","msgtype":"m.text"},"m.relates_to":{"event_id":"$RixYA5iE46TrIpZpTAE4aU5cq3SQmzJEgYo1pqhfcxc","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1674167813129,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$yoigDfnOwVOhCQefTphZu1zUJAntLYy2glypa1cBQ_4"},
{"content":{"body":"> <@jridgewell:matrix.org> > with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions\n> \n> I think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using `assert`\n\nThe proposal here is to change the keyword as well as the semantics","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$RixYA5iE46TrIpZpTAE4aU5cq3SQmzJEgYo1pqhfcxc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><blockquote>\n<p>with the understanding that web browsers may violate the semantic requirements of the JavaScript specification, that import assertions behave as assertions</p>\n</blockquote>\n<p>I think that's incorrect from TC39's side. We should remove the restriction if we decide to keep using <code>assert</code></p>\n</blockquote></mx-reply>The proposal here is to change the keyword as well as the semantics","m.relates_to":{"m.in_reply_to":{"event_id":"$RixYA5iE46TrIpZpTAE4aU5cq3SQmzJEgYo1pqhfcxc"}},"msgtype":"m.text"},"ts":1674167847344,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lhGXmP6bkhTsXlR7TbvJ20m3rH2Ru7RGwCVKHofNPk0"},
{"content":{"body":"> An alternative, which we disprefer, is to continue using the assert syntax","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>An alternative, which we disprefer, is to continue using the assert syntax</p>\n</blockquote>\n","msgtype":"m.text"},"ts":1674167860578,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eVgl-rOAekwgN93VdFl-hg_xm48efbferv1731wgAK0"},
{"content":{"body":"It's a stated alternative, which I think badly states the alternative","msgtype":"m.text"},"ts":1674167876402,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Mmy5hg1F-5NubfOarF5RIIanzCJoFY-Qf-3ocT6s4NA"},
{"content":{"body":"sure, in this alternative then we have two sub-alternatives, but they're both bad","msgtype":"m.text"},"ts":1674167886180,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TFtqCoBphx8lyBQDhmRYX6Gq0uMpv39IYZO1jeBK1Yw"},
{"content":{"body":"the sub-alternatives being, relax the invariant or not","msgtype":"m.text"},"ts":1674167905710,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2xvjlzG0cvMDbvdURATZ8PTyCJrrppcDDBGjGN_IyTU"},
{"content":{"body":"(and if relaxed, then how)","msgtype":"m.text"},"ts":1674167913706,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$85xDe4_AR3vz6_dShkCcySOl8s7h7LKLRNTuFEKx8vY"},
{"content":{"body":"this document proposes changing the syntax instead","msgtype":"m.text"},"ts":1674167927332,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$RNbCUBZvAl2fdiyNBUdRSnXIHA5Xx2_TPFjPfqAusRA"},
{"content":{"body":"there's always lots of alternatives which can be considered!","msgtype":"m.text"},"ts":1674167941867,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5ZI3WZUrb-do6ueuLMU0cEZ_OYndFY2CrrqHxuFQ0Ig"},
{"content":{"body":"> Further possible benefits of import attributes\n\nWe can also unnest the dynamic import syntax: `import x from \"y\" with type: \"json\", reflect: \"module\";` -> `import(\"y\", { type: \"json\", reflect: \"module\" })` (instead of `import(\"y\", { assert: { type: \"json\" }, reflect: \"module\" })`)","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>Further possible benefits of import attributes</p>\n</blockquote>\n<p>We can also unnest the dynamic import syntax: <code>import x from &quot;y&quot; with type: &quot;json&quot;, reflect: &quot;module&quot;;</code> -&gt; <code>import(&quot;y&quot;, { type: &quot;json&quot;, reflect: &quot;module&quot; })</code> (instead of <code>import(&quot;y&quot;, { assert: { type: &quot;json&quot; }, reflect: &quot;module&quot; })</code>)</p>\n","msgtype":"m.text"},"ts":1674168046330,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zVW4QPfHyfLn3IzIFvzKg15Ik_WpfwqycrXd8fk-GEM"},
{"content":{"body":"maybe! That's a useful kind of bikeshedding which I'd encourage to happen outside of plenary. In plenary, I'd like to focus on getting a shared understanding of the problem space and vague sympathy with the idea that we'd move back from assertions to something else with different syntax and semantics, maybe more like a previous iteration of the proposal (but with some mitigations to address the issues previously raised about unrestricted import attributes)","msgtype":"m.text"},"ts":1674168230394,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$CGyVaImGac7apmMGRpULnZqd0EpgQIinwumdw5wCxVk"},
{"content":{"body":"I think we can bikeshed at more length on the details in our loader calls. What's harder is getting that agreement in principle in the change in direction.","msgtype":"m.text"},"ts":1674168273741,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$14rv1vJc7oL2WcwKmwYzYTZrsaQc3oqnEMPCC6xpjd4"},
{"content":{"body":"What do people here think about that change in direction?","msgtype":"m.text"},"ts":1674168628948,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WPbdp-O-P_5g25f_dKa91fBcucbtI9j7bA2Xh8iY5js"}
]