[
{"content":{"body":"Come play the top mmorpg https://feetporn.win/ dmcbqw play soon","msgtype":"m.text","org.matrix.msc1767.text":"Come play the top mmorpg https://feetporn.win/ dmcbqw play soon"},"ts":1659065010212,"senderName":"sis3020","senderId":"@sis3020:matrix.org","id":"$ta7u6rbwF3lHLZ57Dww_n6ha_AwAx4GfUrHZAcdpdCc"},
{"content":{"body":"> <@kriskowal:matrix.org> I read the request as one to find a solution to the problem that named imports can’t trigger an export accessor, the way destructuring a module.exports can.\n\nI don't think access a named import _should_ trigger any kind of user code. That's not a good idea.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$UPAxcKmQA7hj1C_hJg57iKs6thRO0JiK6yACVF6C07E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I read the request as one to find a solution to the problem that named imports can’t trigger an export accessor, the way destructuring a module.exports can.</blockquote></mx-reply>I don't think access a named import <em>should</em> trigger any kind of user code. That's not a good idea.","m.relates_to":{"m.in_reply_to":{"event_id":"$UPAxcKmQA7hj1C_hJg57iKs6thRO0JiK6yACVF6C07E"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I read the request as one to find a solution to the problem that named imports can’t trigger an export accessor, the way destructuring a module.exports can.\n\nI don't think access a named import _should_ trigger any kind of user code. That's not a good idea.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$UPAxcKmQA7hj1C_hJg57iKs6thRO0JiK6yACVF6C07E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I read the request as one to find a solution to the problem that named imports can’t trigger an export accessor, the way destructuring a module.exports can.</blockquote></mx-reply>I don't think access a named import <em>should</em> trigger any kind of user code. That's not a good idea.","mimetype":"text/html"}]},"ts":1659070667589,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$g0TarUHbkXSqQlx8n8VTCAQ3-qq9Bx86zsqlR82gIYo"},
{"content":{"body":"> <@littledan:matrix.org> Moddable has also brought up sync loading as an important concern for them\n\nI think maybe XS can implement `Promise` and dynamic `import()` in a way that, \n\n- Promise constructor is not constructable\n- No Async Function\n- dynamic `import` or `Module#import()` will resolve the Promise in sync.\n- Promise.then/catch/finally is not callable\n\nFor the given constraint above, the top level await `await import(\"./some-file.js\")` will looks almost sync (maybe there is some ticking problem?)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ZvxAiN4H_rvvqWCH3Cm6Ac0hUZKFDjVps69OWZkKqMc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Moddable has also brought up sync loading as an important concern for them</blockquote></mx-reply><p>I think maybe XS can implement <code>Promise</code> and dynamic <code>import()</code> in a way that,</p>\n<ul>\n<li>Promise constructor is not constructable</li>\n<li>No Async Function</li>\n<li>dynamic <code>import</code> or <code>Module#import()</code> will resolve the Promise in sync.</li>\n<li>Promise.then/catch/finally is not callable</li>\n</ul>\n<p>For the given constraint above, the top level await <code>await import(&quot;./some-file.js&quot;)</code> will looks almost sync (maybe there is some ticking problem?)</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$ZvxAiN4H_rvvqWCH3Cm6Ac0hUZKFDjVps69OWZkKqMc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Moddable has also brought up sync loading as an important concern for them\n\nI think maybe XS can implement `Promise` and dynamic `import()` in a way that, \n\n- Promise constructor is not constructable\n- No Async Function\n- dynamic `import` or `Module#import()` will resolve the Promise in sync.\n- Promise.then/catch/finally is not callable\n\nFor the given constraint above, the top level await `await import(\"./some-file.js\")` will looks almost sync (maybe there is some ticking problem?)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ZvxAiN4H_rvvqWCH3Cm6Ac0hUZKFDjVps69OWZkKqMc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Moddable has also brought up sync loading as an important concern for them</blockquote></mx-reply><p>I think maybe XS can implement <code>Promise</code> and dynamic <code>import()</code> in a way that,</p>\n<ul>\n<li>Promise constructor is not constructable</li>\n<li>No Async Function</li>\n<li>dynamic <code>import</code> or <code>Module#import()</code> will resolve the Promise in sync.</li>\n<li>Promise.then/catch/finally is not callable</li>\n</ul>\n<p>For the given constraint above, the top level await <code>await import(&quot;./some-file.js&quot;)</code> will looks almost sync (maybe there is some ticking problem?)</p>\n","mimetype":"text/html"}]},"ts":1659071089073,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MnTIKbijjRwUz5kuMjGKzLvo0KKMJNA7TMXaC2NnBao"},
{"content":{"body":"Perhaps I can ask naugtur to put together an example cjs virtual module source. I believe he may have adequately addressed Rob’s request in Endo by linking CJS on the plane of default exports, which allows for lazy accessors","msgtype":"m.text"},"ts":1659076638906,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5SfDFdnN6E7toHhrl_1VLgHJaUZo4J8ABRnVEIeL20g"}
]