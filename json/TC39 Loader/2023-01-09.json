[
{"content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264589072,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264598511,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$8tbx1PubetAQrg6a_qINR2-Td-7_EAsxgSYFwFmQlj4"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264617702,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$W1qTEpsfrSx8HIKF5GmdkVhrESLlevW22PNml3B5zw0"},
{"content":{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","format":"org.matrix.custom.html","formatted_body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/plain"},{"body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/html"}]},"ts":1673264665498,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Qfu-32-DAaetpXFRCchqOwpqoGp55hY0btbDAdxmoh8"},
{"content":{"body":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)","msgtype":"m.text","org.matrix.msc1767.text":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)"},"ts":1673278248834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NxZQ51YSPjLlPqQiVZTzkzBzno5-CrwwG2hr5jwLlzk"},
{"content":{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","mimetype":"text/html"}]},"ts":1673280272926,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tsh2I49FKLNgNGQJeNQUNLmaJAfB1hwb3ZYMHhGr8jc"},
{"content":{"body":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>","msgtype":"m.text","org.matrix.msc1767.text":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>"},"ts":1673285941363,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eR7WZmAnLL7PMD1zAjIOLgr9gSWSwC5QF_IW3K7TIwY"},
{"content":{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","format":"org.matrix.custom.html","formatted_body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/plain"},{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/html"}]},"ts":1673285997301,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7lMzOaPmziqPZNxdTpqmsayfKFJUOdgCcnAt4rS-sss"},
{"content":{"body":"Making it eaiser to make sandboxes has the emergent effect of making sandboxes safer.","msgtype":"m.text","org.matrix.msc1767.text":"Making it eaiser to make sandboxes has the emergent effect of making sandboxes safer."},"ts":1673286042741,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MVyc99jR4_2SYlRL0G2GFojlvlu1LxgZhbF2zH9gIxI"},
{"content":{"body":"And given that the design is compatible with CSP, I feel like this is a win-win.","msgtype":"m.text","org.matrix.msc1767.text":"And given that the design is compatible with CSP, I feel like this is a win-win."},"ts":1673286071697,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1BqVUtOOCS0mX-ZiQr7S0Yrpkux2_UPgvRbbheQIVwc"},
{"content":{"body":"Kris, I'm glad you're describing your actual use case, as this makes it a lot easier to follow","msgtype":"m.text","org.matrix.msc1767.text":"Kris, I'm glad you're describing your actual use case, as this makes it a lot easier to follow"},"ts":1673286077769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SSaa1KccudxMYh-OJbejgO8kRLTLZJkJjJebdPo4VtY"},
{"content":{"body":"It's quite hard for me to follow a use case argument which centers on the censorship mechanism, since I really don't understand what sorts of restrictions you have in how you evolve that.","msgtype":"m.text","org.matrix.msc1767.text":"It's quite hard for me to follow a use case argument which centers on the censorship mechanism, since I really don't understand what sorts of restrictions you have in how you evolve that."},"ts":1673286081417,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y0uIrK0pA_WZIpD3POF3ddW5Sl9yihAduoCBSvPCXzI"},
{"content":{"body":"maybe you could give some more details there?","msgtype":"m.text","org.matrix.msc1767.text":"maybe you could give some more details there?"},"ts":1673286105784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kMBrFenfSEv7-Y__uFrygMw0pHY0y-rUt58-0SrenIo"},
{"content":{"body":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that not entrain rigorous static analysis or on-the-fly transformations.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that not entrain rigorous static analysis or on-the-fly transformations."},"ts":1673286180697,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$c6ipDitNQ8HpOis8S9LTSeFwYA6e6lAJNzQTwldKtE8"},
{"content":{"body":"The heart of the confinement mechanism points four of JavaScript’s sharpest edges at each other: We use use direct eval in sloppy mode inside a with block that puts an opaque proxy on the stack.","msgtype":"m.text","org.matrix.msc1767.text":"The heart of the confinement mechanism points four of JavaScript’s sharpest edges at each other: We use use direct eval in sloppy mode inside a with block that puts an opaque proxy on the stack."},"ts":1673286268620,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O1oyuZvrpSaeSolRjTchKS71YW5A-3pFKGclLlInBYg"},
{"content":{"body":"That’s…a summary.","msgtype":"m.text","org.matrix.msc1767.text":"That’s…a summary."},"ts":1673286288369,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yp0tGASwwqRtIFM8apVDvRLaVz-t9KRPWqxtnB6ODFg"},
{"content":{"body":"In any case, there are a number of obvious ways to escape lexical containment.","msgtype":"m.text","org.matrix.msc1767.text":"In any case, there are a number of obvious ways to escape lexical containment."},"ts":1673286311882,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_vBT6KRAfy2bOrGdUB_-QhnxJWfJxS84albfXXXggjA"},
{"content":{"body":"Collectively “undeniable intrinsics”. So, for example, (async()=>{}) gives you access to the async function prototype. That’s pretty straightforward to confine with the hardening of shared intrinsics.","msgtype":"m.text","org.matrix.msc1767.text":"Collectively “undeniable intrinsics”. So, for example, (async()=>{}) gives you access to the async function prototype. That’s pretty straightforward to confine with the hardening of shared intrinsics."},"ts":1673286375920,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8APLoROdJ_MCjZ_VZTWyZOdHTJQmdw47Za5_shtBHlk"},
{"content":{"body":"In the most basic case, {} and [] give you access to shared intrinsics in ways that can’t be denied with the lexical environment.","msgtype":"m.text","org.matrix.msc1767.text":"In the most basic case, {} and [] give you access to shared intrinsics in ways that can’t be denied with the lexical environment."},"ts":1673286424630,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H4ew5olNQrsVlT2APrhBVL5vjg84b-CFItQ902MgBsg"},
{"content":{"body":"Likewise, `import` escapes confinement. So, we use a careful regex to identify any pattern that *might* be an invocation of import and refuse to evaluate such programs.","format":"org.matrix.custom.html","formatted_body":"Likewise, <code>import</code> escapes confinement. So, we use a careful regex to identify any pattern that <em>might</em> be an invocation of import and refuse to evaluate such programs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Likewise, `import` escapes confinement. So, we use a careful regex to identify any pattern that *might* be an invocation of import and refuse to evaluate such programs.","mimetype":"text/plain"},{"body":"Likewise, <code>import</code> escapes confinement. So, we use a careful regex to identify any pattern that <em>might</em> be an invocation of import and refuse to evaluate such programs.","mimetype":"text/html"}]},"ts":1673286479681,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fBRM-PFcS8kFJOjz0v41NczHEK-cOuGFvv7iedg7GlM"},
{"content":{"body":"The Evaluators proposal would allow us to hook the behavior of `import` for confined programs.","format":"org.matrix.custom.html","formatted_body":"The Evaluators proposal would allow us to hook the behavior of <code>import</code> for confined programs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The Evaluators proposal would allow us to hook the behavior of `import` for confined programs.","mimetype":"text/plain"},{"body":"The Evaluators proposal would allow us to hook the behavior of <code>import</code> for confined programs.","mimetype":"text/html"}]},"ts":1673286513859,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RE_EfF4PrQPdUbCVjS-yfBEV-clh9uwCUG0QghqV0Bo"},
{"content":{"body":"We also ban direct `eval` similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","format":"org.matrix.custom.html","formatted_body":"We also ban direct <code>eval</code> similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We also ban direct `eval` similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","mimetype":"text/plain"},{"body":"We also ban direct <code>eval</code> similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","mimetype":"text/html"}]},"ts":1673286584479,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zrzkNyhpgjx_6pMxKMpuAwYu9jdeNKoNpa2V2ujgrLk"},
{"content":{"body":"In order to support modules, we have no choice but to convert modules into programs at compile time, which is a source-to-source transformation that reduces debuggability. We also eschew source maps because they can be used to confuse auditors.","msgtype":"m.text","org.matrix.msc1767.text":"In order to support modules, we have no choice but to convert modules into programs at compile time, which is a source-to-source transformation that reduces debuggability. We also eschew source maps because they can be used to confuse auditors."},"ts":1673286720850,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PjJu6DNNa93zrNdHZ0iYri2J1fyp9_OGJrhz_mVhpwc"},
{"content":{"body":"So we have a module-to-program transform, which necessarily generates both the module functor source code and the bindings in a JSON envelope, and a runtime that handles these “module sources” reconstructs the linkage from the declared bindings and a sort of calling convention.","msgtype":"m.text","org.matrix.msc1767.text":"So we have a module-to-program transform, which necessarily generates both the module functor source code and the bindings in a JSON envelope, and a runtime that handles these “module sources” reconstructs the linkage from the declared bindings and a sort of calling convention."},"ts":1673286806520,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$t6o4hLPC8vXkyDklPbUut1JwMAKIAh2wp5yTWczCdEA"},
{"content":{"body":"The net result is a Zip file that contains JSON enveloped sources which is not as debuggable or reviewable as we’d like. This is the artifact that must be trusted when you grant capabilities to the guest program, so this is the artifact that gets fingerprinted for integrity checks. It’s also, notably, not hosted on the web, and modules not hosted on the web are not currently possible to evaluate across all JavaScript hosts.","msgtype":"m.text","org.matrix.msc1767.text":"The net result is a Zip file that contains JSON enveloped sources which is not as debuggable or reviewable as we’d like. This is the artifact that must be trusted when you grant capabilities to the guest program, so this is the artifact that gets fingerprinted for integrity checks. It’s also, notably, not hosted on the web, and modules not hosted on the web are not currently possible to evaluate across all JavaScript hosts."},"ts":1673286919271,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RMBTI0-1qcUTSOSO2AnqP47gIqHpcoJcAbCb_HJ8dN0"},
{"content":{"body":"There are hacks, but they are hacks, and hacks and confinement are somewhat inimical.","msgtype":"m.text","org.matrix.msc1767.text":"There are hacks, but they are hacks, and hacks and confinement are somewhat inimical."},"ts":1673286961492,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ewZFvK5akw8dtB0j8235p2hJ4hptBtsDGYRFg6CHJPA"},
{"content":{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact *require* that as a starting point since anything else would preclude evolution of the host environment over time.","format":"org.matrix.custom.html","formatted_body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact <em>require</em> that as a starting point since anything else would preclude evolution of the host environment over time.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact *require* that as a starting point since anything else would preclude evolution of the host environment over time.","mimetype":"text/plain"},{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact <em>require</em> that as a starting point since anything else would preclude evolution of the host environment over time.","mimetype":"text/html"}]},"ts":1673287102315,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qcl50NOdu-0y2O_7ohk13L14ELqPjzQQMsA-heUetCE"},
{"content":{"body":" * Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations.","m.new_content":{"body":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations."},"m.relates_to":{"event_id":"$c6ipDitNQ8HpOis8S9LTSeFwYA6e6lAJNzQTwldKtE8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations."},"ts":1673287213723,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hCKHF4wcGI3q89gRxhuUTEUo_6dbwtGAUy4iIgAIVjo"},
{"content":{"body":"bakkot: so your concern is not that it is a **new** path to eval, but rather that it may make an existing path to eval more ergonomic?\n\nAs for the usecases that can justify an unconstructable `ModuleSource`:\n\n- multiple instantiation modules (including module expressions & declarations)\n- low level `script-src: no-eval` module passing between workers\n- manual instantiation and module instrospection (we've seen this in WASM using `WebAssembly.Module`, for which `ModuleSource` would be the JS equivalent)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so your concern is not that it is a <strong>new</strong> path to eval, but rather that it may make an existing path to eval more ergonomic?</p>\n<p>As for the usecases that can justify an unconstructable <code>ModuleSource</code>:</p>\n<ul>\n<li>multiple instantiation modules (including module expressions &amp; declarations)</li>\n<li>low level <code>script-src: no-eval</code> module passing between workers</li>\n<li>manual instantiation and module instrospection (we've seen this in WASM using <code>WebAssembly.Module</code>, for which <code>ModuleSource</code> would be the JS equivalent)</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: so your concern is not that it is a **new** path to eval, but rather that it may make an existing path to eval more ergonomic?\n\nAs for the usecases that can justify an unconstructable `ModuleSource`:\n\n- multiple instantiation modules (including module expressions & declarations)\n- low level `script-src: no-eval` module passing between workers\n- manual instantiation and module instrospection (we've seen this in WASM using `WebAssembly.Module`, for which `ModuleSource` would be the JS equivalent)","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so your concern is not that it is a <strong>new</strong> path to eval, but rather that it may make an existing path to eval more ergonomic?</p>\n<p>As for the usecases that can justify an unconstructable <code>ModuleSource</code>:</p>\n<ul>\n<li>multiple instantiation modules (including module expressions &amp; declarations)</li>\n<li>low level <code>script-src: no-eval</code> module passing between workers</li>\n<li>manual instantiation and module instrospection (we've seen this in WASM using <code>WebAssembly.Module</code>, for which <code>ModuleSource</code> would be the JS equivalent)</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1673288988363,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$OYiRXa4hENg_Hm8BtrDZHfgbO0RMsqjZLtCrN51G0Yg"}
]