[
{"content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264589072,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264598511,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$8tbx1PubetAQrg6a_qINR2-Td-7_EAsxgSYFwFmQlj4"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264617702,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$W1qTEpsfrSx8HIKF5GmdkVhrESLlevW22PNml3B5zw0"},
{"content":{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","format":"org.matrix.custom.html","formatted_body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/plain"},{"body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/html"}]},"ts":1673264665498,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Qfu-32-DAaetpXFRCchqOwpqoGp55hY0btbDAdxmoh8"},
{"content":{"body":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)","msgtype":"m.text","org.matrix.msc1767.text":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)"},"ts":1673278248834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NxZQ51YSPjLlPqQiVZTzkzBzno5-CrwwG2hr5jwLlzk"},
{"content":{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","mimetype":"text/html"}]},"ts":1673280272926,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tsh2I49FKLNgNGQJeNQUNLmaJAfB1hwb3ZYMHhGr8jc"},
{"content":{"body":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>","msgtype":"m.text","org.matrix.msc1767.text":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>"},"ts":1673285941363,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eR7WZmAnLL7PMD1zAjIOLgr9gSWSwC5QF_IW3K7TIwY"},
{"content":{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","format":"org.matrix.custom.html","formatted_body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/plain"},{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/html"}]},"ts":1673285997301,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7lMzOaPmziqPZNxdTpqmsayfKFJUOdgCcnAt4rS-sss"}
]