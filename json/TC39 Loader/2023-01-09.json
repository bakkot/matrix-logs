[
{"content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264589072,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264598511,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$8tbx1PubetAQrg6a_qINR2-Td-7_EAsxgSYFwFmQlj4"},
{"content":{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","m.new_content":{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","format":"org.matrix.custom.html","formatted_body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":"My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.","mimetype":"text/plain"},{"body":" * My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the &quot;evalness&quot; of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.","mimetype":"text/html"}]},"ts":1673264617702,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$W1qTEpsfrSx8HIKF5GmdkVhrESLlevW22PNml3B5zw0"},
{"content":{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","format":"org.matrix.custom.html","formatted_body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would still like to invite bakkot to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/plain"},{"body":"I would still like to invite <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to a loader meeting so we can discuss this in detail - I am likely missing something, or I am not understanding your concern correctly.","mimetype":"text/html"}]},"ts":1673264665498,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Qfu-32-DAaetpXFRCchqOwpqoGp55hY0btbDAdxmoh8"},
{"content":{"body":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)","msgtype":"m.text","org.matrix.msc1767.text":"I think this is discussed more concretely as we discuss mitigations. Clearly the whole thing (ModuleSource + import()) put together was a path to eval. I guess the question was whether bakkot would accept a mitigation which was, \"ModuleSource produces marked things which cannot be passed to import() but otherwise work\" (but I'm not so convinced the feature is very useful, and we were discussing this above)"},"ts":1673278248834,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NxZQ51YSPjLlPqQiVZTzkzBzno5-CrwwG2hr5jwLlzk"},
{"content":{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: as littledan says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use `data` URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to `eval` and b.) `data` URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to `eval` more usable, not just whether they exist at all.\n\nalso it is not at all clear to me what the use case for ModuleSource is other than `eval`; the cases discussed about were all either `eval`-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than \"we would like it to be easier to do `eval`\" (or there needs to be an extremely strong reason to make it easier to do `eval`).","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: as <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> says, ModuleSource + dynamic import is eval, to my view. yes, in some (but not all) hosts it possible to use <code>data</code> URIs with dynamic import already, but a.) that is not widely supported especially given CSP and so is not a reliable way to <code>eval</code> and b.) <code>data</code> URIs are very obviously a kludge, whereas a ModuleSource constructor would be a first-class part of the language, and we should be concerned about making paths to <code>eval</code> more usable, not just whether they exist at all.</p>\n<p>also it is not at all clear to me what the use case for ModuleSource is other than <code>eval</code>; the cases discussed about were all either <code>eval</code>-like or a desire from a single library to have a built-in way of parsing out bindings. I think an affirmative case needs to be made for this feature (as with any feature), and to convince me personally that case needs to be something other than &quot;we would like it to be easier to do <code>eval</code>&quot; (or there needs to be an extremely strong reason to make it easier to do <code>eval</code>).</p>\n","mimetype":"text/html"}]},"ts":1673280272926,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Tsh2I49FKLNgNGQJeNQUNLmaJAfB1hwb3ZYMHhGr8jc"},
{"content":{"body":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>","msgtype":"m.text","org.matrix.msc1767.text":"<weak-argument>well, it's eval for a module, which is otherwise more or less a missing capability</weak-argument>"},"ts":1673285941363,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$eR7WZmAnLL7PMD1zAjIOLgr9gSWSwC5QF_IW3K7TIwY"},
{"content":{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","format":"org.matrix.custom.html","formatted_body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words `eval` and `import` from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/plain"},{"body":"I would ideally like to find a motivation for this path to eval that does not require others to buy into the SES group’s long-term motivation to make a safe path to eval, that does not rest on CSP, since I know that is contentious. But, that is personally my motivation. Making an easy path to lift text makes it easier to build a sandbox, and making that part of the language makes it easier to write portable sandboxes. One of the drawbacks of the compartment shim is that we have to censor the words <code>eval</code> and <code>import</code> from source text in order to enforce confinement. There are false positives that a native implementation wouldn’t suffer from.","mimetype":"text/html"}]},"ts":1673285997301,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7lMzOaPmziqPZNxdTpqmsayfKFJUOdgCcnAt4rS-sss"},
{"content":{"body":"Making it eaiser to make sandboxes has the emergent effect of making sandboxes safer.","msgtype":"m.text","org.matrix.msc1767.text":"Making it eaiser to make sandboxes has the emergent effect of making sandboxes safer."},"ts":1673286042741,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MVyc99jR4_2SYlRL0G2GFojlvlu1LxgZhbF2zH9gIxI"},
{"content":{"body":"And given that the design is compatible with CSP, I feel like this is a win-win.","msgtype":"m.text","org.matrix.msc1767.text":"And given that the design is compatible with CSP, I feel like this is a win-win."},"ts":1673286071697,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1BqVUtOOCS0mX-ZiQr7S0Yrpkux2_UPgvRbbheQIVwc"},
{"content":{"body":"Kris, I'm glad you're describing your actual use case, as this makes it a lot easier to follow","msgtype":"m.text","org.matrix.msc1767.text":"Kris, I'm glad you're describing your actual use case, as this makes it a lot easier to follow"},"ts":1673286077769,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SSaa1KccudxMYh-OJbejgO8kRLTLZJkJjJebdPo4VtY"},
{"content":{"body":"It's quite hard for me to follow a use case argument which centers on the censorship mechanism, since I really don't understand what sorts of restrictions you have in how you evolve that.","msgtype":"m.text","org.matrix.msc1767.text":"It's quite hard for me to follow a use case argument which centers on the censorship mechanism, since I really don't understand what sorts of restrictions you have in how you evolve that."},"ts":1673286081417,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Y0uIrK0pA_WZIpD3POF3ddW5Sl9yihAduoCBSvPCXzI"},
{"content":{"body":"maybe you could give some more details there?","msgtype":"m.text","org.matrix.msc1767.text":"maybe you could give some more details there?"},"ts":1673286105784,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kMBrFenfSEv7-Y__uFrygMw0pHY0y-rUt58-0SrenIo"},
{"content":{"body":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that not entrain rigorous static analysis or on-the-fly transformations.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that not entrain rigorous static analysis or on-the-fly transformations."},"ts":1673286180697,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$c6ipDitNQ8HpOis8S9LTSeFwYA6e6lAJNzQTwldKtE8"},
{"content":{"body":"The heart of the confinement mechanism points four of JavaScript’s sharpest edges at each other: We use use direct eval in sloppy mode inside a with block that puts an opaque proxy on the stack.","msgtype":"m.text","org.matrix.msc1767.text":"The heart of the confinement mechanism points four of JavaScript’s sharpest edges at each other: We use use direct eval in sloppy mode inside a with block that puts an opaque proxy on the stack."},"ts":1673286268620,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O1oyuZvrpSaeSolRjTchKS71YW5A-3pFKGclLlInBYg"},
{"content":{"body":"That’s…a summary.","msgtype":"m.text","org.matrix.msc1767.text":"That’s…a summary."},"ts":1673286288369,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yp0tGASwwqRtIFM8apVDvRLaVz-t9KRPWqxtnB6ODFg"},
{"content":{"body":"In any case, there are a number of obvious ways to escape lexical containment.","msgtype":"m.text","org.matrix.msc1767.text":"In any case, there are a number of obvious ways to escape lexical containment."},"ts":1673286311882,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_vBT6KRAfy2bOrGdUB_-QhnxJWfJxS84albfXXXggjA"},
{"content":{"body":"Collectively “undeniable intrinsics”. So, for example, (async()=>{}) gives you access to the async function prototype. That’s pretty straightforward to confine with the hardening of shared intrinsics.","msgtype":"m.text","org.matrix.msc1767.text":"Collectively “undeniable intrinsics”. So, for example, (async()=>{}) gives you access to the async function prototype. That’s pretty straightforward to confine with the hardening of shared intrinsics."},"ts":1673286375920,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8APLoROdJ_MCjZ_VZTWyZOdHTJQmdw47Za5_shtBHlk"},
{"content":{"body":"In the most basic case, {} and [] give you access to shared intrinsics in ways that can’t be denied with the lexical environment.","msgtype":"m.text","org.matrix.msc1767.text":"In the most basic case, {} and [] give you access to shared intrinsics in ways that can’t be denied with the lexical environment."},"ts":1673286424630,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H4ew5olNQrsVlT2APrhBVL5vjg84b-CFItQ902MgBsg"},
{"content":{"body":"Likewise, `import` escapes confinement. So, we use a careful regex to identify any pattern that *might* be an invocation of import and refuse to evaluate such programs.","format":"org.matrix.custom.html","formatted_body":"Likewise, <code>import</code> escapes confinement. So, we use a careful regex to identify any pattern that <em>might</em> be an invocation of import and refuse to evaluate such programs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Likewise, `import` escapes confinement. So, we use a careful regex to identify any pattern that *might* be an invocation of import and refuse to evaluate such programs.","mimetype":"text/plain"},{"body":"Likewise, <code>import</code> escapes confinement. So, we use a careful regex to identify any pattern that <em>might</em> be an invocation of import and refuse to evaluate such programs.","mimetype":"text/html"}]},"ts":1673286479681,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fBRM-PFcS8kFJOjz0v41NczHEK-cOuGFvv7iedg7GlM"},
{"content":{"body":"The Evaluators proposal would allow us to hook the behavior of `import` for confined programs.","format":"org.matrix.custom.html","formatted_body":"The Evaluators proposal would allow us to hook the behavior of <code>import</code> for confined programs.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The Evaluators proposal would allow us to hook the behavior of `import` for confined programs.","mimetype":"text/plain"},{"body":"The Evaluators proposal would allow us to hook the behavior of <code>import</code> for confined programs.","mimetype":"text/html"}]},"ts":1673286513859,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RE_EfF4PrQPdUbCVjS-yfBEV-clh9uwCUG0QghqV0Bo"},
{"content":{"body":"We also ban direct `eval` similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","format":"org.matrix.custom.html","formatted_body":"We also ban direct <code>eval</code> similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We also ban direct `eval` similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","mimetype":"text/plain"},{"body":"We also ban direct <code>eval</code> similarly, but not so much because of confinement concerns, but because it is impossible to faithfully emulate the intended behavior in the shim.","mimetype":"text/html"}]},"ts":1673286584479,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zrzkNyhpgjx_6pMxKMpuAwYu9jdeNKoNpa2V2ujgrLk"},
{"content":{"body":"In order to support modules, we have no choice but to convert modules into programs at compile time, which is a source-to-source transformation that reduces debuggability. We also eschew source maps because they can be used to confuse auditors.","msgtype":"m.text","org.matrix.msc1767.text":"In order to support modules, we have no choice but to convert modules into programs at compile time, which is a source-to-source transformation that reduces debuggability. We also eschew source maps because they can be used to confuse auditors."},"ts":1673286720850,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PjJu6DNNa93zrNdHZ0iYri2J1fyp9_OGJrhz_mVhpwc"},
{"content":{"body":"So we have a module-to-program transform, which necessarily generates both the module functor source code and the bindings in a JSON envelope, and a runtime that handles these “module sources” reconstructs the linkage from the declared bindings and a sort of calling convention.","msgtype":"m.text","org.matrix.msc1767.text":"So we have a module-to-program transform, which necessarily generates both the module functor source code and the bindings in a JSON envelope, and a runtime that handles these “module sources” reconstructs the linkage from the declared bindings and a sort of calling convention."},"ts":1673286806520,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$t6o4hLPC8vXkyDklPbUut1JwMAKIAh2wp5yTWczCdEA"},
{"content":{"body":"The net result is a Zip file that contains JSON enveloped sources which is not as debuggable or reviewable as we’d like. This is the artifact that must be trusted when you grant capabilities to the guest program, so this is the artifact that gets fingerprinted for integrity checks. It’s also, notably, not hosted on the web, and modules not hosted on the web are not currently possible to evaluate across all JavaScript hosts.","msgtype":"m.text","org.matrix.msc1767.text":"The net result is a Zip file that contains JSON enveloped sources which is not as debuggable or reviewable as we’d like. This is the artifact that must be trusted when you grant capabilities to the guest program, so this is the artifact that gets fingerprinted for integrity checks. It’s also, notably, not hosted on the web, and modules not hosted on the web are not currently possible to evaluate across all JavaScript hosts."},"ts":1673286919271,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RMBTI0-1qcUTSOSO2AnqP47gIqHpcoJcAbCb_HJ8dN0"},
{"content":{"body":"There are hacks, but they are hacks, and hacks and confinement are somewhat inimical.","msgtype":"m.text","org.matrix.msc1767.text":"There are hacks, but they are hacks, and hacks and confinement are somewhat inimical."},"ts":1673286961492,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ewZFvK5akw8dtB0j8235p2hJ4hptBtsDGYRFg6CHJPA"},
{"content":{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact *require* that as a starting point since anything else would preclude evolution of the host environment over time.","format":"org.matrix.custom.html","formatted_body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact <em>require</em> that as a starting point since anything else would preclude evolution of the host environment over time.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact *require* that as a starting point since anything else would preclude evolution of the host environment over time.","mimetype":"text/plain"},{"body":"And again, our position is not that we hope to capture all JavaScript in hardened JavaScript. Our position is that it should be possible to get to hardened JavaScript from ordinary mutable implicitly permissive one-big-sandbox JavaScript. We in fact <em>require</em> that as a starting point since anything else would preclude evolution of the host environment over time.","mimetype":"text/html"}]},"ts":1673287102315,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qcl50NOdu-0y2O_7ohk13L14ELqPjzQQMsA-heUetCE"},
{"content":{"body":" * Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations.","m.new_content":{"body":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations."},"m.relates_to":{"event_id":"$c6ipDitNQ8HpOis8S9LTSeFwYA6e6lAJNzQTwldKtE8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Yeah, in the SES shim, confinement is enforced at runtime and it’s a production performance and developer-experience requirement that we not entrain rigorous static analysis or on-the-fly transformations."},"ts":1673287213723,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hCKHF4wcGI3q89gRxhuUTEUo_6dbwtGAUy4iIgAIVjo"},
{"content":{"body":"bakkot: so your concern is not that it is a **new** path to eval, but rather that it may make an existing path to eval more ergonomic?\n\nAs for the usecases that can justify an unconstructable `ModuleSource`:\n\n- multiple instantiation modules (including module expressions & declarations)\n- low level `script-src: no-eval` module passing between workers\n- manual instantiation and module instrospection (we've seen this in WASM using `WebAssembly.Module`, for which `ModuleSource` would be the JS equivalent)","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so your concern is not that it is a <strong>new</strong> path to eval, but rather that it may make an existing path to eval more ergonomic?</p>\n<p>As for the usecases that can justify an unconstructable <code>ModuleSource</code>:</p>\n<ul>\n<li>multiple instantiation modules (including module expressions &amp; declarations)</li>\n<li>low level <code>script-src: no-eval</code> module passing between workers</li>\n<li>manual instantiation and module instrospection (we've seen this in WASM using <code>WebAssembly.Module</code>, for which <code>ModuleSource</code> would be the JS equivalent)</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"bakkot: so your concern is not that it is a **new** path to eval, but rather that it may make an existing path to eval more ergonomic?\n\nAs for the usecases that can justify an unconstructable `ModuleSource`:\n\n- multiple instantiation modules (including module expressions & declarations)\n- low level `script-src: no-eval` module passing between workers\n- manual instantiation and module instrospection (we've seen this in WASM using `WebAssembly.Module`, for which `ModuleSource` would be the JS equivalent)","mimetype":"text/plain"},{"body":"<p><a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>: so your concern is not that it is a <strong>new</strong> path to eval, but rather that it may make an existing path to eval more ergonomic?</p>\n<p>As for the usecases that can justify an unconstructable <code>ModuleSource</code>:</p>\n<ul>\n<li>multiple instantiation modules (including module expressions &amp; declarations)</li>\n<li>low level <code>script-src: no-eval</code> module passing between workers</li>\n<li>manual instantiation and module instrospection (we've seen this in WASM using <code>WebAssembly.Module</code>, for which <code>ModuleSource</code> would be the JS equivalent)</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1673288988363,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$OYiRXa4hENg_Hm8BtrDZHfgbO0RMsqjZLtCrN51G0Yg"},
{"content":{"body":"Luca Casonato: it is a new path to eval in many contexts (e.g. anywhere with CSP, and therefore in any library), and also it makes an existing path to eval more ergonomic; both are concerns are important to me","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: it is a new path to eval in many contexts (e.g. anywhere with CSP, and therefore in any library), and also it makes an existing path to eval more ergonomic; both are concerns are important to me","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Luca Casonato: it is a new path to eval in many contexts (e.g. anywhere with CSP, and therefore in any library), and also it makes an existing path to eval more ergonomic; both are concerns are important to me","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a>: it is a new path to eval in many contexts (e.g. anywhere with CSP, and therefore in any library), and also it makes an existing path to eval more ergonomic; both are concerns are important to me","mimetype":"text/html"}]},"ts":1673289283147,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GtzCRCIfA04aGgro_dyrNo-Qoi-yNbdlteYuLAX1W0c"},
{"content":{"body":"I do not think that bakkot objects to the concept of an object that represents a module source, which has intersection semantics relevant to other proposals and does not imply a path to eval. Correct me if I’m wrong.","format":"org.matrix.custom.html","formatted_body":"I do not think that <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> objects to the concept of an object that represents a module source, which has intersection semantics relevant to other proposals and does not imply a path to eval. Correct me if I’m wrong.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I do not think that bakkot objects to the concept of an object that represents a module source, which has intersection semantics relevant to other proposals and does not imply a path to eval. Correct me if I’m wrong.","mimetype":"text/plain"},{"body":"I do not think that <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> objects to the concept of an object that represents a module source, which has intersection semantics relevant to other proposals and does not imply a path to eval. Correct me if I’m wrong.","mimetype":"text/html"}]},"ts":1673289327212,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FKzkK2ucffhTyjWZanxjffZyR1upwxyA1lAqruPQZX4"},
{"content":{"body":"right - none of my `eval` concerns apply to `ModuleSource` which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on","format":"org.matrix.custom.html","formatted_body":"right - none of my <code>eval</code> concerns apply to <code>ModuleSource</code> which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"right - none of my `eval` concerns apply to `ModuleSource` which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on","mimetype":"text/plain"},{"body":"right - none of my <code>eval</code> concerns apply to <code>ModuleSource</code> which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on","mimetype":"text/html"}]},"ts":1673289369121,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$wL8A6p60AaCyUdxUV1TG_poAlEvQlpXhwFPGdN-Uc_k"},
{"content":{"body":"Oh, bakkot our intention is _not_ to be a new path to eval with CSP. `no-unsafe-eval` would render a `ModuleSource` instance lifted from text inert.","format":"org.matrix.custom.html","formatted_body":"Oh, <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> our intention is <em>not</em> to be a new path to eval with CSP. <code>no-unsafe-eval</code> would render a <code>ModuleSource</code> instance lifted from text inert.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Oh, bakkot our intention is _not_ to be a new path to eval with CSP. `no-unsafe-eval` would render a `ModuleSource` instance lifted from text inert.","mimetype":"text/plain"},{"body":"Oh, <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> our intention is <em>not</em> to be a new path to eval with CSP. <code>no-unsafe-eval</code> would render a <code>ModuleSource</code> instance lifted from text inert.","mimetype":"text/html"}]},"ts":1673289378979,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eveOC7ftgzSYMqJ1JKjOgcQRt_pVoSVAKf6jn5cpFV4"},
{"content":{"body":"> <@bakkot:matrix.org> right - none of my `eval` concerns apply to `ModuleSource` which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on\n\nThis is to say we don’t need to convince bakkot of importing module sources or module blocks with sources, again correct me if I’m wrong.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$wL8A6p60AaCyUdxUV1TG_poAlEvQlpXhwFPGdN-Uc_k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>right - none of my <code>eval</code> concerns apply to <code>ModuleSource</code> which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on</blockquote></mx-reply>This is to say we don’t need to convince <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> of importing module sources or module blocks with sources, again correct me if I’m wrong.","m.relates_to":{"m.in_reply_to":{"event_id":"$wL8A6p60AaCyUdxUV1TG_poAlEvQlpXhwFPGdN-Uc_k"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> right - none of my `eval` concerns apply to `ModuleSource` which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on\n\nThis is to say we don’t need to convince bakkot of importing module sources or module blocks with sources, again correct me if I’m wrong.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$wL8A6p60AaCyUdxUV1TG_poAlEvQlpXhwFPGdN-Uc_k?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>right - none of my <code>eval</code> concerns apply to <code>ModuleSource</code> which does not take a string argument; I am fine with a static import syntax which gives you an object you can clone between workers and so on</blockquote></mx-reply>This is to say we don’t need to convince <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> of importing module sources or module blocks with sources, again correct me if I’m wrong.","mimetype":"text/html"}]},"ts":1673289459999,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FDqnlhIWzcxUF9ar05OesFL01DmTt81usO0FQdOiAGA"},
{"content":{"body":"there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","format":"org.matrix.custom.html","formatted_body":"there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","mimetype":"text/plain"},{"body":"there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","mimetype":"text/html"}]},"ts":1673289510498,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8"},
{"content":{"body":" * there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","format":"org.matrix.custom.html","formatted_body":" * there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","m.new_content":{"body":"there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","format":"org.matrix.custom.html","formatted_body":"there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","mimetype":"text/plain"},{"body":"there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts","mimetype":"text/plain"},{"body":" * there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts","mimetype":"text/html"}]},"ts":1673289516085,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$84-j4Z2JwSQonylbYQY5p8oIkD8mur8FjmjY0sRzt6c"},
{"content":{"body":"By inert I mean that `import(new Module(new ModuleSource('')))` would unconditionally return a rejected promise under a `no-unsafe-eval` CSP, and would poison any module that takes it as a transitive dependency as well.","format":"org.matrix.custom.html","formatted_body":"By inert I mean that <code>import(new Module(new ModuleSource('')))</code> would unconditionally return a rejected promise under a <code>no-unsafe-eval</code> CSP, and would poison any module that takes it as a transitive dependency as well.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"By inert I mean that `import(new Module(new ModuleSource('')))` would unconditionally return a rejected promise under a `no-unsafe-eval` CSP, and would poison any module that takes it as a transitive dependency as well.","mimetype":"text/plain"},{"body":"By inert I mean that <code>import(new Module(new ModuleSource('')))</code> would unconditionally return a rejected promise under a <code>no-unsafe-eval</code> CSP, and would poison any module that takes it as a transitive dependency as well.","mimetype":"text/html"}]},"ts":1673289532240,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VOV82lc_N_WJuQXkMIlRsWNo0fM8xSuF67t6Y6oD7uw"},
{"content":{"body":"Otherwise I would agree that would constitute a new path to eval in situations that should have none.","msgtype":"m.text","org.matrix.msc1767.text":"Otherwise I would agree that would constitute a new path to eval in situations that should have none."},"ts":1673289566842,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iwmFq-u8gEihCP6CfKxNVNhzBXh4wKAve9WjG7I7VPQ"},
{"content":{"body":"> <@bakkot:matrix.org> there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts\n\nIs there a way to better communicate an intention that constructible module sources must not create a new path to eval under any existing CSP that should disallow it?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts</blockquote></mx-reply>Is there a way to better communicate an intention that constructible module sources must not create a new path to eval under any existing CSP that should disallow it?","m.relates_to":{"m.in_reply_to":{"event_id":"$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts\n\nIs there a way to better communicate an intention that constructible module sources must not create a new path to eval under any existing CSP that should disallow it?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts</blockquote></mx-reply>Is there a way to better communicate an intention that constructible module sources must not create a new path to eval under any existing CSP that should disallow it?","mimetype":"text/html"}]},"ts":1673289651931,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FP_4R2Qx0Bvk4P7UA_YNXZsyGx7cPXC7_jMYko6RtN0"},
{"content":{"body":"well, if your CSP allows `no-unsafe-eval`, then it _should_ allow `eval`, but I still don't think it is a good idea for the language to provide a new way to `eval` in that context","format":"org.matrix.custom.html","formatted_body":"well, if your CSP allows <code>no-unsafe-eval</code>, then it <em>should</em> allow <code>eval</code>, but I still don't think it is a good idea for the language to provide a new way to <code>eval</code> in that context","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"well, if your CSP allows `no-unsafe-eval`, then it _should_ allow `eval`, but I still don't think it is a good idea for the language to provide a new way to `eval` in that context","mimetype":"text/plain"},{"body":"well, if your CSP allows <code>no-unsafe-eval</code>, then it <em>should</em> allow <code>eval</code>, but I still don't think it is a good idea for the language to provide a new way to <code>eval</code> in that context","mimetype":"text/html"}]},"ts":1673289717564,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XGO9Vlp3UZs3KWh5AEaoXPPjcULLva8h05ZkCEHl3vs"},
{"content":{"body":"and `import` is _not_ a way to `eval` in that context, which is good","format":"org.matrix.custom.html","formatted_body":"and <code>import</code> is <em>not</em> a way to <code>eval</code> in that context, which is good","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and `import` is _not_ a way to `eval` in that context, which is good","mimetype":"text/plain"},{"body":"and <code>import</code> is <em>not</em> a way to <code>eval</code> in that context, which is good","mimetype":"text/html"}]},"ts":1673289741435,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uIZGJGc9BiK52a8lP3lwLJR5tykJ0csonptW2a20t2w"},
{"content":{"body":"I mean disallows `no-unsafe-eval`, to be clear.","format":"org.matrix.custom.html","formatted_body":"I mean disallows <code>no-unsafe-eval</code>, to be clear.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean disallows `no-unsafe-eval`, to be clear.","mimetype":"text/plain"},{"body":"I mean disallows <code>no-unsafe-eval</code>, to be clear.","mimetype":"text/html"}]},"ts":1673289900404,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$U1GgJJTu9qP2IYkQ7SwdqoLdna4ikoc5jGwamktEWKE"},
{"content":{"body":"I agree that if we do end up with a constructible `ModuleSource` it must not be importable in a `no-unsafe-eval` context; I don't think there was any confusion about that","format":"org.matrix.custom.html","formatted_body":"I agree that if we do end up with a constructible <code>ModuleSource</code> it must not be importable in a <code>no-unsafe-eval</code> context; I don't think there was any confusion about that","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I agree that if we do end up with a constructible `ModuleSource` it must not be importable in a `no-unsafe-eval` context; I don't think there was any confusion about that","mimetype":"text/plain"},{"body":"I agree that if we do end up with a constructible <code>ModuleSource</code> it must not be importable in a <code>no-unsafe-eval</code> context; I don't think there was any confusion about that","mimetype":"text/html"}]},"ts":1673289948133,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Sk4XCq9WsbwD0AYVXs86y17GZO2JINwimkKYUMQUuv8"},
{"content":{"body":"There’s a strong possibility I don’t know CSP well enough to have this conversation. I’m hoping for instruction.","msgtype":"m.text","org.matrix.msc1767.text":"There’s a strong possibility I don’t know CSP well enough to have this conversation. I’m hoping for instruction."},"ts":1673289954773,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8bNdYImryPMyO7dJd6M0UbZNAAp0yaXDoBD6zsPVeEg"},
{"content":{"body":"the relevant fact is that `no-unsafe-eval` does _not_ restricted use of `data:` URIs; those are controlled by the use of a `data:` scheme expression in the CSP","format":"org.matrix.custom.html","formatted_body":"the relevant fact is that <code>no-unsafe-eval</code> does <em>not</em> restricted use of <code>data:</code> URIs; those are controlled by the use of a <code>data:</code> scheme expression in the CSP","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the relevant fact is that `no-unsafe-eval` does _not_ restricted use of `data:` URIs; those are controlled by the use of a `data:` scheme expression in the CSP","mimetype":"text/plain"},{"body":"the relevant fact is that <code>no-unsafe-eval</code> does <em>not</em> restricted use of <code>data:</code> URIs; those are controlled by the use of a <code>data:</code> scheme expression in the CSP","mimetype":"text/html"}]},"ts":1673289992698,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$yZU-aGbueGbV4GwI2oIWgqjO2GQDglVgz0ci3vpn7mo"},
{"content":{"body":" * I mean a CSP that disallows use of `eval`, to be clear.","format":"org.matrix.custom.html","formatted_body":" * I mean a CSP that disallows use of <code>eval</code>, to be clear.","m.new_content":{"body":"I mean a CSP that disallows use of `eval`, to be clear.","format":"org.matrix.custom.html","formatted_body":"I mean a CSP that disallows use of <code>eval</code>, to be clear.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean a CSP that disallows use of `eval`, to be clear.","mimetype":"text/plain"},{"body":"I mean a CSP that disallows use of <code>eval</code>, to be clear.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$U1GgJJTu9qP2IYkQ7SwdqoLdna4ikoc5jGwamktEWKE","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I mean a CSP that disallows use of `eval`, to be clear.","mimetype":"text/plain"},{"body":" * I mean a CSP that disallows use of <code>eval</code>, to be clear.","mimetype":"text/html"}]},"ts":1673289996457,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$d3jcAP8-UjQukOj7MTvmcRkEzTpDYXo8jFIS5EKSGac"},
{"content":{"body":"so it is possible to have CSP in which `eval` is allowed and `data:` URIs are not, in which context `ModuleSource` + dynamic import is unambiguously a new path to eval","format":"org.matrix.custom.html","formatted_body":"so it is possible to have CSP in which <code>eval</code> is allowed and <code>data:</code> URIs are not, in which context <code>ModuleSource</code> + dynamic import is unambiguously a new path to eval","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"so it is possible to have CSP in which `eval` is allowed and `data:` URIs are not, in which context `ModuleSource` + dynamic import is unambiguously a new path to eval","mimetype":"text/plain"},{"body":"so it is possible to have CSP in which <code>eval</code> is allowed and <code>data:</code> URIs are not, in which context <code>ModuleSource</code> + dynamic import is unambiguously a new path to eval","mimetype":"text/html"}]},"ts":1673290019941,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VB_sOMI9UekiaKXjydGgLjVgMdlPynUNkPiURdKiYDg"},
{"content":{"body":"Is there a way we can frame it such that it would not be?","msgtype":"m.text","org.matrix.msc1767.text":"Is there a way we can frame it such that it would not be?"},"ts":1673290059950,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$4bHRPQg-Hht7tem2Ia-X-CbRlvxUsSgSJC2ylUSrBpo"},
{"content":{"body":"not that I can think of?","msgtype":"m.text","org.matrix.msc1767.text":"not that I can think of?"},"ts":1673290073385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Jr8jgZaznoCxipQY3fgEB50Zpdt6jjCUjJYwo6pP2uo"},
{"content":{"body":"though all this discussion about CSP is all a little bit outside my main objection. I agree that it is _technically_ true that in at least some contexts `import` can be used for `eval` because of the existence of `data` URIs, though it is also even more technically true that this does not not apply in all contexts in which `ModuleSource` would work (if I understand correctly). however, I don't think this technical point is all that important; even granting it, it seems to me that `import` + constructible `ModuleSource` would a new first-class path to `eval` in a way that `import('data:')` is not , the latter being kludgey and not universally acceptable or available.","format":"org.matrix.custom.html","formatted_body":"though all this discussion about CSP is all a little bit outside my main objection. I agree that it is <em>technically</em> true that in at least some contexts <code>import</code> can be used for <code>eval</code> because of the existence of <code>data</code> URIs, though it is also even more technically true that this does not not apply in all contexts in which <code>ModuleSource</code> would work (if I understand correctly). however, I don't think this technical point is all that important; even granting it, it seems to me that <code>import</code> + constructible <code>ModuleSource</code> would a new first-class path to <code>eval</code> in a way that <code>import('data:')</code> is not , the latter being kludgey and not universally acceptable or available.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"though all this discussion about CSP is all a little bit outside my main objection. I agree that it is _technically_ true that in at least some contexts `import` can be used for `eval` because of the existence of `data` URIs, though it is also even more technically true that this does not not apply in all contexts in which `ModuleSource` would work (if I understand correctly). however, I don't think this technical point is all that important; even granting it, it seems to me that `import` + constructible `ModuleSource` would a new first-class path to `eval` in a way that `import('data:')` is not , the latter being kludgey and not universally acceptable or available.","mimetype":"text/plain"},{"body":"though all this discussion about CSP is all a little bit outside my main objection. I agree that it is <em>technically</em> true that in at least some contexts <code>import</code> can be used for <code>eval</code> because of the existence of <code>data</code> URIs, though it is also even more technically true that this does not not apply in all contexts in which <code>ModuleSource</code> would work (if I understand correctly). however, I don't think this technical point is all that important; even granting it, it seems to me that <code>import</code> + constructible <code>ModuleSource</code> would a new first-class path to <code>eval</code> in a way that <code>import('data:')</code> is not , the latter being kludgey and not universally acceptable or available.","mimetype":"text/html"}]},"ts":1673290087890,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FPIQmtlTAYKkrco4vGpPzN8Crxw4HxTR3Sku7z7P26E"},
{"content":{"body":"That is, how does one describe all CSPs in which `import(new Module(new ModuleSource(text)))` must fail?","format":"org.matrix.custom.html","formatted_body":"That is, how does one describe all CSPs in which <code>import(new Module(new ModuleSource(text)))</code> must fail?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That is, how does one describe all CSPs in which `import(new Module(new ModuleSource(text)))` must fail?","mimetype":"text/plain"},{"body":"That is, how does one describe all CSPs in which <code>import(new Module(new ModuleSource(text)))</code> must fail?","mimetype":"text/html"}]},"ts":1673290168498,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MdB8el6-BkId1aXf1ZFB7FL4tgvr1lDS3QvZ7cXu9NE"},
{"content":{"body":"Yeah, I’m not interested in any contexts where `import('data:')` is a workaround for eval CSP restrictions except insofar as that the proposal should not introduce loopholes in CSP.","format":"org.matrix.custom.html","formatted_body":"Yeah, I’m not interested in any contexts where <code>import('data:')</code> is a workaround for eval CSP restrictions except insofar as that the proposal should not introduce loopholes in CSP.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, I’m not interested in any contexts where `import('data:')` is a workaround for eval CSP restrictions except insofar as that the proposal should not introduce loopholes in CSP.","mimetype":"text/plain"},{"body":"Yeah, I’m not interested in any contexts where <code>import('data:')</code> is a workaround for eval CSP restrictions except insofar as that the proposal should not introduce loopholes in CSP.","mimetype":"text/html"}]},"ts":1673290218028,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ufM7-QWEnE6YW3d-DtuHgq43BVAH7NHT0pZHtRdz4i4"},
{"content":{"body":"and while I am not dead-set against having a new _or new-ish_ first-class path to `eval` I would want it to have a strong justification, which I have not heard yet. whether this is _actually_ new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.","format":"org.matrix.custom.html","formatted_body":"and while I am not dead-set against having a new <em>or new-ish</em> first-class path to <code>eval</code> I would want it to have a strong justification, which I have not heard yet. whether this is <em>actually</em> new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"and while I am not dead-set against having a new _or new-ish_ first-class path to `eval` I would want it to have a strong justification, which I have not heard yet. whether this is _actually_ new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.","mimetype":"text/plain"},{"body":"and while I am not dead-set against having a new <em>or new-ish</em> first-class path to <code>eval</code> I would want it to have a strong justification, which I have not heard yet. whether this is <em>actually</em> new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.","mimetype":"text/html"}]},"ts":1673290225979,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$mRb7P0F3AgKi7G3PGVzxjpLrVdA5jQtR2pb39Jn1rWU"},
{"content":{"body":"I am interested in environment in which there are no such workarounds, ones where import(doesNotEvenTakeURL).","msgtype":"m.text","org.matrix.msc1767.text":"I am interested in environment in which there are no such workarounds, ones where import(doesNotEvenTakeURL)."},"ts":1673290240961,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$b8s7fqGwG8Z42KJpo0HIM-VWgi9SplUiLswVfvZhGH0"},
{"content":{"body":"> <@kriskowal:matrix.org> That is, how does one describe all CSPs in which `import(new Module(new ModuleSource(text)))` must fail?\n\nthose which forbid `unsafe-eval`, I think is an accurate description","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$MdB8el6-BkId1aXf1ZFB7FL4tgvr1lDS3QvZ7cXu9NE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>That is, how does one describe all CSPs in which <code>import(new Module(new ModuleSource(text)))</code> must fail?</blockquote></mx-reply>those which forbid <code>unsafe-eval</code>, I think is an accurate description","m.relates_to":{"m.in_reply_to":{"event_id":"$MdB8el6-BkId1aXf1ZFB7FL4tgvr1lDS3QvZ7cXu9NE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> That is, how does one describe all CSPs in which `import(new Module(new ModuleSource(text)))` must fail?\n\nthose which forbid `unsafe-eval`, I think is an accurate description","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$MdB8el6-BkId1aXf1ZFB7FL4tgvr1lDS3QvZ7cXu9NE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>That is, how does one describe all CSPs in which <code>import(new Module(new ModuleSource(text)))</code> must fail?</blockquote></mx-reply>those which forbid <code>unsafe-eval</code>, I think is an accurate description","mimetype":"text/html"}]},"ts":1673290258081,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$VCr5VxB0YxxirsCA8h0SvnvceZ3uxk8xUn2OM3xED9w"},
{"content":{"body":"So it is possible that the CSP tangent was entirely us talking past each other. Thanks.","msgtype":"m.text","org.matrix.msc1767.text":"So it is possible that the CSP tangent was entirely us talking past each other. Thanks."},"ts":1673290297894,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XXOztWJ0iov7hKTOXxD-xDVgSfclTiu99BQztFFV9jE"},
{"content":{"body":"If I read correctly, we’re generally in agreement that ModuleSource(text) would not introduce a CSP loophole.","msgtype":"m.text","org.matrix.msc1767.text":"If I read correctly, we’re generally in agreement that ModuleSource(text) would not introduce a CSP loophole."},"ts":1673290355089,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xXwnWEsAhQf9oux_Y0gzywZ7W6l3pegFfKcgWPBxTkE"},
{"content":{"body":"right","msgtype":"m.text","org.matrix.msc1767.text":"right"},"ts":1673290362171,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$HeHPIGifGzDa7DyCDRLvxQqDdl19zx0cBGtPdh62qMM"},
{"content":{"body":"> <@bakkot:matrix.org> and while I am not dead-set against having a new _or new-ish_ first-class path to `eval` I would want it to have a strong justification, which I have not heard yet. whether this is _actually_ new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.\n\nThis is my prior understanding and I suggest we focus on articulating a strong justification.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$mRb7P0F3AgKi7G3PGVzxjpLrVdA5jQtR2pb39Jn1rWU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and while I am not dead-set against having a new <em>or new-ish</em> first-class path to <code>eval</code> I would want it to have a strong justification, which I have not heard yet. whether this is <em>actually</em> new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.</blockquote></mx-reply>This is my prior understanding and I suggest we focus on articulating a strong justification.","m.relates_to":{"m.in_reply_to":{"event_id":"$mRb7P0F3AgKi7G3PGVzxjpLrVdA5jQtR2pb39Jn1rWU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> and while I am not dead-set against having a new _or new-ish_ first-class path to `eval` I would want it to have a strong justification, which I have not heard yet. whether this is _actually_ new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.\n\nThis is my prior understanding and I suggest we focus on articulating a strong justification.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$mRb7P0F3AgKi7G3PGVzxjpLrVdA5jQtR2pb39Jn1rWU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>and while I am not dead-set against having a new <em>or new-ish</em> first-class path to <code>eval</code> I would want it to have a strong justification, which I have not heard yet. whether this is <em>actually</em> new or merely new-ish is not all that important to me - either way I still would want there to be a strong justification.</blockquote></mx-reply>This is my prior understanding and I suggest we focus on articulating a strong justification.","mimetype":"text/html"}]},"ts":1673290417603,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$RtQPS6RxSRZg3lQTQQKqhF331wqrjY4uJTuyAxwxxss"},
{"content":{"body":"@bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?","msgtype":"m.text","org.matrix.msc1767.text":"@bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?"},"ts":1673290467774,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$T8o3UsL2IwEzcATkQH1rQt3cdLTePkQUZ4zxwopVe3c"},
{"content":{"body":"(the bit about CSP was just to say that `import` + `data:` URIs does not already constitute a path to `eval` in all contexts - there are CSPs which allow `eval` but do not allow importing `data:` URIs, so adding constructible `ModuleSource` would be in fact granting a path to `eval` via `import` which did not previously exist in that context. but as I say this is all kind of a technical point rather than my main objection.)","format":"org.matrix.custom.html","formatted_body":"(the bit about CSP was just to say that <code>import</code> + <code>data:</code> URIs does not already constitute a path to <code>eval</code> in all contexts - there are CSPs which allow <code>eval</code> but do not allow importing <code>data:</code> URIs, so adding constructible <code>ModuleSource</code> would be in fact granting a path to <code>eval</code> via <code>import</code> which did not previously exist in that context. but as I say this is all kind of a technical point rather than my main objection.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(the bit about CSP was just to say that `import` + `data:` URIs does not already constitute a path to `eval` in all contexts - there are CSPs which allow `eval` but do not allow importing `data:` URIs, so adding constructible `ModuleSource` would be in fact granting a path to `eval` via `import` which did not previously exist in that context. but as I say this is all kind of a technical point rather than my main objection.)","mimetype":"text/plain"},{"body":"(the bit about CSP was just to say that <code>import</code> + <code>data:</code> URIs does not already constitute a path to <code>eval</code> in all contexts - there are CSPs which allow <code>eval</code> but do not allow importing <code>data:</code> URIs, so adding constructible <code>ModuleSource</code> would be in fact granting a path to <code>eval</code> via <code>import</code> which did not previously exist in that context. but as I say this is all kind of a technical point rather than my main objection.)","mimetype":"text/html"}]},"ts":1673290471444,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XPpR303q794wyPrpNlGfFQ237uy4bTe5X6MXkD037m8"},
{"content":{"body":"> <@kriskowal:matrix.org> @bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?\n\nI did read it but am lacking context to understand why your design requires the ability to `eval` modules from within a module, as opposed to having a compartment or something which would allow you to hook `import` within that context and provide a module that way","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$T8o3UsL2IwEzcATkQH1rQt3cdLTePkQUZ4zxwopVe3c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>@bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?</blockquote></mx-reply>I did read it but am lacking context to understand why your design requires the ability to <code>eval</code> modules from within a module, as opposed to having a compartment or something which would allow you to hook <code>import</code> within that context and provide a module that way","m.relates_to":{"m.in_reply_to":{"event_id":"$T8o3UsL2IwEzcATkQH1rQt3cdLTePkQUZ4zxwopVe3c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> @bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?\n\nI did read it but am lacking context to understand why your design requires the ability to `eval` modules from within a module, as opposed to having a compartment or something which would allow you to hook `import` within that context and provide a module that way","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$T8o3UsL2IwEzcATkQH1rQt3cdLTePkQUZ4zxwopVe3c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>@bakkot You would not happen to have seen the bits about confining JavaScript guests without CSP above before they scrolled away?</blockquote></mx-reply>I did read it but am lacking context to understand why your design requires the ability to <code>eval</code> modules from within a module, as opposed to having a compartment or something which would allow you to hook <code>import</code> within that context and provide a module that way","mimetype":"text/html"}]},"ts":1673290672218,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$GMVD9tyUP9fD_sqJndUcZcrOxkRFyqOoI2G6rbMMypA"},
{"content":{"body":"We certainly need both. The key is that the platform is backed by zipped applications (no URLs and no fetch capability)","msgtype":"m.text","org.matrix.msc1767.text":"We certainly need both. The key is that the platform is backed by zipped applications (no URLs and no fetch capability)"},"ts":1673290734120,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VoI26u4QVB2YvHZsfIptRlqKWlquhNdzMUq7cjvJaPE"},
{"content":{"body":"Why does the `import` hook on a compartment (or whatever compartments are called now) not suffice here?","format":"org.matrix.custom.html","formatted_body":"Why does the <code>import</code> hook on a compartment (or whatever compartments are called now) not suffice here?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Why does the `import` hook on a compartment (or whatever compartments are called now) not suffice here?","mimetype":"text/plain"},{"body":"Why does the <code>import</code> hook on a compartment (or whatever compartments are called now) not suffice here?","mimetype":"text/html"}]},"ts":1673290791476,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$P7ZITalvzzEBDKxwy8X3Mzo0U3d6WdpuwZkCx0TvzPw"},
{"content":{"body":"The import hook returns Module instances with ModuleSources, from text dug out of Zip files.","msgtype":"m.text","org.matrix.msc1767.text":"The import hook returns Module instances with ModuleSources, from text dug out of Zip files."},"ts":1673290816296,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mYRID_kHzoqH2Fw3dKWHA244mXdw3g2R4dr38iJTrFo"},
{"content":{"body":"That's one possible design; certainly there are other designs for `import` which don't require a constructible `ModuleSource`, no?","format":"org.matrix.custom.html","formatted_body":"That's one possible design; certainly there are other designs for <code>import</code> which don't require a constructible <code>ModuleSource</code>, no?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That's one possible design; certainly there are other designs for `import` which don't require a constructible `ModuleSource`, no?","mimetype":"text/plain"},{"body":"That's one possible design; certainly there are other designs for <code>import</code> which don't require a constructible <code>ModuleSource</code>, no?","mimetype":"text/html"}]},"ts":1673290872320,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sp7SnRZPMwKpu3ugX06dCw5rmgKklaOZSPanmRSZY4Y"},
{"content":{"body":"you could have a `defineImport(specifier: string, source: string)` capability available to the thing which created the compartment, or something, no?","format":"org.matrix.custom.html","formatted_body":"you could have a <code>defineImport(specifier: string, source: string)</code> capability available to the thing which created the compartment, or something, no?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"you could have a `defineImport(specifier: string, source: string)` capability available to the thing which created the compartment, or something, no?","mimetype":"text/plain"},{"body":"you could have a <code>defineImport(specifier: string, source: string)</code> capability available to the thing which created the compartment, or something, no?","mimetype":"text/html"}]},"ts":1673290916355,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$-J3QH7dPRghz4Eff_QmrvsIXxq5d0uRPuyAXO5ty4vU"},
{"content":{"body":"that would still be eval-like, but I am a lot less concerned about `eval` which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available","format":"org.matrix.custom.html","formatted_body":"that would still be eval-like, but I am a lot less concerned about <code>eval</code> which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that would still be eval-like, but I am a lot less concerned about `eval` which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available","mimetype":"text/plain"},{"body":"that would still be eval-like, but I am a lot less concerned about <code>eval</code> which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available","mimetype":"text/html"}]},"ts":1673290962397,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$54gH5dV73NwQhHMzChS6ggRZjTgBL9lRKGOlPpnfaw0"},
{"content":{"body":"(forgive me if I'm using the wrong terminology here)","msgtype":"m.text","org.matrix.msc1767.text":"(forgive me if I'm using the wrong terminology here)"},"ts":1673290968750,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$nDJqTRU1ac6TXg5xF9tKXfdr0ZVxt_opzEwBPfjmKYE"},
{"content":{"body":"That’s an interesting clarification.","msgtype":"m.text","org.matrix.msc1767.text":"That’s an interesting clarification."},"ts":1673291863583,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Umx6Po6sW-HaEMrjq7yiwnIh8tHoc8UXp6teAN_e4Ys"},
{"content":{"body":"> <@bakkot:matrix.org> there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts\n\nWhat CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts</blockquote></mx-reply>What CSP actually prevents <code>import(&quot;data:...&quot;)</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)","m.relates_to":{"m.in_reply_to":{"event_id":"$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> there are at least some CSPs which allow `no-unsafe-eval` but do not allow `data` URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to `eval` in such contexts\n\nWhat CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rQZnTUfey_7k6pSgV2m5jxkRbu9-OSffvNIqCgHwjS8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>there are at least some CSPs which allow <code>no-unsafe-eval</code> but do not allow <code>data</code> URIs (primarily because there are libraries with this requirement), so constructible ModuleSource + dynamic import would still constitute a new way to <code>eval</code> in such contexts</blockquote></mx-reply>What CSP actually prevents <code>import(&quot;data:...&quot;)</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)","mimetype":"text/html"}]},"ts":1673292597592,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk"},
{"content":{"body":"also if i specify `default-src 'none'` - and same also in FF","format":"org.matrix.custom.html","formatted_body":"also if i specify <code>default-src 'none'</code> - and same also in FF","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also if i specify `default-src 'none'` - and same also in FF","mimetype":"text/plain"},{"body":"also if i specify <code>default-src 'none'</code> - and same also in FF","mimetype":"text/html"}]},"ts":1673292814859,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$NrVqun7eHcdokPqqKeQyvOfdrk2RZZnL2SjTAr8M_I4"},
{"content":{"body":"> <@bakkot:matrix.org> that would still be eval-like, but I am a lot less concerned about `eval` which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available\n\nYeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$54gH5dV73NwQhHMzChS6ggRZjTgBL9lRKGOlPpnfaw0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that would still be eval-like, but I am a lot less concerned about <code>eval</code> which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available</blockquote></mx-reply>Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.","m.relates_to":{"m.in_reply_to":{"event_id":"$54gH5dV73NwQhHMzChS6ggRZjTgBL9lRKGOlPpnfaw0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> that would still be eval-like, but I am a lot less concerned about `eval` which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available\n\nYeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$54gH5dV73NwQhHMzChS6ggRZjTgBL9lRKGOlPpnfaw0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>that would still be eval-like, but I am a lot less concerned about <code>eval</code> which is specifically defined in terms of compartments and which is defined from the outer compartment for use by the inner compartment, as opposed to one which is ambiently available</blockquote></mx-reply>Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.","mimetype":"text/html"}]},"ts":1673292854167,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$K9GPcm8zwAAj41NcmnzFKI3Uie21aQyBmXaZFeDZG0U"},
{"content":{"body":"> <@lucacasonato:matrix.org> What CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)\n\nOh apparently nonce'd script tags have an implicit `script-src 'strict-dynamic'' behavior for imports - TIL!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>What CSP actually prevents <code>import(\"data:...\")</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)</blockquote></mx-reply>Oh apparently nonce'd script tags have an implicit `script-src 'strict-dynamic'' behavior for imports - TIL!","m.relates_to":{"m.in_reply_to":{"event_id":"$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> What CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)\n\nOh apparently nonce'd script tags have an implicit `script-src 'strict-dynamic'' behavior for imports - TIL!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>What CSP actually prevents <code>import(\"data:...\")</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)</blockquote></mx-reply>Oh apparently nonce'd script tags have an implicit `script-src 'strict-dynamic'' behavior for imports - TIL!","mimetype":"text/html"}]},"ts":1673293704735,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$J6_w9tXxlb2I9EkN6jBQxxxW7JHuLwVHj7aobyKMt8U"},
{"content":{"body":"> <@lucacasonato:matrix.org> What CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)\n\nnonces are automatically inherited by imports, I think? try `unsafe-inline` instead of nonces in the CSP","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>What CSP actually prevents <code>import(\"data:...\")</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)</blockquote></mx-reply>nonces are automatically inherited by imports, I think? try <code>unsafe-inline</code> instead of nonces in the CSP","m.relates_to":{"m.in_reply_to":{"event_id":"$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> What CSP actually prevents `import(\"data:...\")`? A no eval `script-src` doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)\n\nnonces are automatically inherited by imports, I think? try `unsafe-inline` instead of nonces in the CSP","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$DswG5I9srFabKjdcbFuBGsZR_dbnBvWREN_uFygnJwk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>What CSP actually prevents <code>import(\"data:...\")</code>? A no eval <code>script-src</code> doesn't in Chrome 👀 (example: https://dash.deno.com/playground/csptest)</blockquote></mx-reply>nonces are automatically inherited by imports, I think? try <code>unsafe-inline</code> instead of nonces in the CSP","mimetype":"text/html"}]},"ts":1673293707331,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$EBih2sDd_CQY22WNBkTzP3YHicRf1VJ5Yko4FiC9f9Y"},
{"content":{"body":"yup, ok with that I can make a CSP that can do eval, but no `import(\"data:...\")`: `script-src 'unsafe-inline' 'unsafe-eval'`","format":"org.matrix.custom.html","formatted_body":"yup, ok with that I can make a CSP that can do eval, but no <code>import(&quot;data:...&quot;)</code>: <code>script-src 'unsafe-inline' 'unsafe-eval'</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yup, ok with that I can make a CSP that can do eval, but no `import(\"data:...\")`: `script-src 'unsafe-inline' 'unsafe-eval'`","mimetype":"text/plain"},{"body":"yup, ok with that I can make a CSP that can do eval, but no <code>import(&quot;data:...&quot;)</code>: <code>script-src 'unsafe-inline' 'unsafe-eval'</code>","mimetype":"text/html"}]},"ts":1673293803623,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$jYLUX2gBc5w2sfTYXSN795QFHUVeizxDSgkx-wASDfk"},
{"content":{"body":"So your concern is that module source would allow `import()` to eval with just `unsafe-eval` specified, whereas right now you need `script-src data:` or `script-src blob:`?","format":"org.matrix.custom.html","formatted_body":"So your concern is that module source would allow <code>import()</code> to eval with just <code>unsafe-eval</code> specified, whereas right now you need <code>script-src data:</code> or <code>script-src blob:</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So your concern is that module source would allow `import()` to eval with just `unsafe-eval` specified, whereas right now you need `script-src data:` or `script-src blob:`?","mimetype":"text/plain"},{"body":"So your concern is that module source would allow <code>import()</code> to eval with just <code>unsafe-eval</code> specified, whereas right now you need <code>script-src data:</code> or <code>script-src blob:</code>?","mimetype":"text/html"}]},"ts":1673293841327,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$xIbCZIjdrC4avFfRwAXYqvJ7PpjmwWXZCfsjDRkvbj0"},
{"content":{"body":"> <@kriskowal:matrix.org> Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.\n\nI mean like any library can use this capability to `eval` in the current context, rather than only being able to do `eval` inside of a specially-constructed box","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$K9GPcm8zwAAj41NcmnzFKI3Uie21aQyBmXaZFeDZG0U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.</blockquote></mx-reply>I mean like any library can use this capability to <code>eval</code> in the current context, rather than only being able to do <code>eval</code> inside of a specially-constructed box","m.relates_to":{"m.in_reply_to":{"event_id":"$K9GPcm8zwAAj41NcmnzFKI3Uie21aQyBmXaZFeDZG0U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.\n\nI mean like any library can use this capability to `eval` in the current context, rather than only being able to do `eval` inside of a specially-constructed box","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$K9GPcm8zwAAj41NcmnzFKI3Uie21aQyBmXaZFeDZG0U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Yeah, re terminology, by ambiently available, do you mean available by reference? An ocap interpretation of the term ambient would mean that it is registered to the parent host and available to all peers by a forgeable name.</blockquote></mx-reply>I mean like any library can use this capability to <code>eval</code> in the current context, rather than only being able to do <code>eval</code> inside of a specially-constructed box","mimetype":"text/html"}]},"ts":1673293859708,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$OnFo9rzWX-02hEN_T5oYMLhlxSHeUrN6fmC4sjHR5mA"},
{"content":{"body":"> <@lucacasonato:matrix.org> So your concern is that module source would allow `import()` to eval with just `unsafe-eval` specified, whereas right now you need `script-src data:` or `script-src blob:`?\n\nwell, again, that is a technical point. yes, I am concerned a little bit about that, but the larger concern is that I do not regard `data:` URIs as being a first-class path to `eval` built in to the language, for this and other reasons, while `ModuleSource` would be.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xIbCZIjdrC4avFfRwAXYqvJ7PpjmwWXZCfsjDRkvbj0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>So your concern is that module source would allow <code>import()</code> to eval with just <code>unsafe-eval</code> specified, whereas right now you need <code>script-src data:</code> or <code>script-src blob:</code>?</blockquote></mx-reply>well, again, that is a technical point. yes, I am concerned a little bit about that, but the larger concern is that I do not regard <code>data:</code> URIs as being a first-class path to <code>eval</code> built in to the language, for this and other reasons, while <code>ModuleSource</code> would be.","m.relates_to":{"m.in_reply_to":{"event_id":"$xIbCZIjdrC4avFfRwAXYqvJ7PpjmwWXZCfsjDRkvbj0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> So your concern is that module source would allow `import()` to eval with just `unsafe-eval` specified, whereas right now you need `script-src data:` or `script-src blob:`?\n\nwell, again, that is a technical point. yes, I am concerned a little bit about that, but the larger concern is that I do not regard `data:` URIs as being a first-class path to `eval` built in to the language, for this and other reasons, while `ModuleSource` would be.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xIbCZIjdrC4avFfRwAXYqvJ7PpjmwWXZCfsjDRkvbj0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>So your concern is that module source would allow <code>import()</code> to eval with just <code>unsafe-eval</code> specified, whereas right now you need <code>script-src data:</code> or <code>script-src blob:</code>?</blockquote></mx-reply>well, again, that is a technical point. yes, I am concerned a little bit about that, but the larger concern is that I do not regard <code>data:</code> URIs as being a first-class path to <code>eval</code> built in to the language, for this and other reasons, while <code>ModuleSource</code> would be.","mimetype":"text/html"}]},"ts":1673293920216,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$7oPpFdEVbI9OaUsNYM2YDkRoBDhtXG4_sGdZo1wlMNM"},
{"content":{"body":"i see - thank you for the clarification.","msgtype":"m.text","org.matrix.msc1767.text":"i see - thank you for the clarification."},"ts":1673293970787,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$FSCawGg3s0IwXRTVlhfFwDZi8ygAx_viW99IjSTxP38"},
{"content":{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","format":"org.matrix.custom.html","formatted_body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","mimetype":"text/plain"},{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","mimetype":"text/html"}]},"ts":1673294185471,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$eD0rIvL_B2r0qyacsqsauD3y7UTD8YF6Cr2k9emIOcA"},
{"content":{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","format":"org.matrix.custom.html","formatted_body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","mimetype":"text/plain"},{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","mimetype":"text/html"}]},"ts":1673294230411,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$nUNOyYNqBNF50L70MercOM7ca3b2wsWJeGEMDk7vQPQ"},
{"content":{"body":"So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, `const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')` is equivalent. The key here is that `Module` is a box.","format":"org.matrix.custom.html","formatted_body":"So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, <code>const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')</code> is equivalent. The key here is that <code>Module</code> is a box.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, `const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')` is equivalent. The key here is that `Module` is a box.","mimetype":"text/plain"},{"body":"So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, <code>const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')</code> is equivalent. The key here is that <code>Module</code> is a box.","mimetype":"text/html"}]},"ts":1673294253861,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yqpMMkUeVqq8dTsRlBgWniz5UBAN6ipu25sIU_btDlg"},
{"content":{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import({\"data:...\")` is subject to today)","format":"org.matrix.custom.html","formatted_body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import({&quot;data:...&quot;)</code> is subject to today)","m.new_content":{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import({\"data:...\")` is subject to today)","format":"org.matrix.custom.html","formatted_body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import({&quot;data:...&quot;)</code> is subject to today)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import({\"data:...\")` is subject to today)","mimetype":"text/plain"},{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import({&quot;data:...&quot;)</code> is subject to today)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nUNOyYNqBNF50L70MercOM7ca3b2wsWJeGEMDk7vQPQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import({\"data:...\")` is subject to today)","mimetype":"text/plain"},{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import({&quot;data:...&quot;)</code> is subject to today)","mimetype":"text/html"}]},"ts":1673294268808,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$eKRHyyq95hHKFcoA_NsddQvJonQLwS9M8wCs0l1t2aY"},
{"content":{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","format":"org.matrix.custom.html","formatted_body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","m.new_content":{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","format":"org.matrix.custom.html","formatted_body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","mimetype":"text/plain"},{"body":"And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nUNOyYNqBNF50L70MercOM7ca3b2wsWJeGEMDk7vQPQ","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct `import(\"data:...\")` is subject to today)","mimetype":"text/plain"},{"body":" * And in these contexts this factory would be subject to CSP - so no new path to eval here (the exact same CSP a direct <code>import(&quot;data:...&quot;)</code> is subject to today)","mimetype":"text/html"}]},"ts":1673294277651,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$b6HzqAicH-uFTwlDmmhxseFg9XF8g4plL9gLiqxwNyg"},
{"content":{"body":" * For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","format":"org.matrix.custom.html","formatted_body":" * For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","m.new_content":{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","format":"org.matrix.custom.html","formatted_body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","mimetype":"text/plain"},{"body":"For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$eD0rIvL_B2r0qyacsqsauD3y7UTD8YF6Cr2k9emIOcA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) `ModuleSource` in the form of `(await import(\"data:application/javascript,abc\", { reflect: \"module\" }).source` anyway, so for me the lack of an explicit `ModuleSource` constructor is not the end of the world","mimetype":"text/plain"},{"body":" * For all intents and purposes contexts with dynamic import and data URLs would have a constructable (all be it async) <code>ModuleSource</code> in the form of <code>(await import(&quot;data:application/javascript,abc&quot;, { reflect: &quot;module&quot; }).source</code> anyway, so for me the lack of an explicit <code>ModuleSource</code> constructor is not the end of the world","mimetype":"text/html"}]},"ts":1673294315769,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$zRQ0uJPWWjSoTJ1ubKy3-Gqng7_AgW1eTDTgQlpqC8g"},
{"content":{"body":"My hope is that `Module` is in fact as much a box as the box you like in `Compartments`! :-)","format":"org.matrix.custom.html","formatted_body":"My hope is that <code>Module</code> is in fact as much a box as the box you like in <code>Compartments</code>! :-)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My hope is that `Module` is in fact as much a box as the box you like in `Compartments`! :-)","mimetype":"text/plain"},{"body":"My hope is that <code>Module</code> is in fact as much a box as the box you like in <code>Compartments</code>! :-)","mimetype":"text/html"}]},"ts":1673294326725,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aINY0LlhKSKaUp7KbBfTodbPUmY86EMZtYzs-asBIrM"},
{"content":{"body":"And `Evaluators` give us another box, where we can capture the dynamic `import` behavior for non-modules. Out of these primitives, `Compartment` can be implemented in user code.","format":"org.matrix.custom.html","formatted_body":"And <code>Evaluators</code> give us another box, where we can capture the dynamic <code>import</code> behavior for non-modules. Out of these primitives, <code>Compartment</code> can be implemented in user code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And `Evaluators` give us another box, where we can capture the dynamic `import` behavior for non-modules. Out of these primitives, `Compartment` can be implemented in user code.","mimetype":"text/plain"},{"body":"And <code>Evaluators</code> give us another box, where we can capture the dynamic <code>import</code> behavior for non-modules. Out of these primitives, <code>Compartment</code> can be implemented in user code.","mimetype":"text/html"}]},"ts":1673294405773,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Cwc9qZApVXDxVkHKJQzDF3nXxUOpE80T2t_MCXp0FL0"},
{"content":{"body":"And hardened JavaScript can be faithfully implemented in user code, as it cannot with a shim.","msgtype":"m.text","org.matrix.msc1767.text":"And hardened JavaScript can be faithfully implemented in user code, as it cannot with a shim."},"ts":1673294438913,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fuYOh1U0A1x2KOQzaeGw0HXzrKiRqhiZ7D_N8iNGA7o"},
{"content":{"body":"> <@kriskowal:matrix.org> So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, `const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')` is equivalent. The key here is that `Module` is a box.\n\nagain, I'm concerned not just with _whether_ the thing is possible, but _how accessible_ it is. I agree that some designs for compartments can be bludgeoned into being a current-context `eval` but that doesn't mean all possible designs are equivalent.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$yqpMMkUeVqq8dTsRlBgWniz5UBAN6ipu25sIU_btDlg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, <code>const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')</code> is equivalent. The key here is that <code>Module</code> is a box.</blockquote></mx-reply>again, I'm concerned not just with <em>whether</em> the thing is possible, but <em>how accessible</em> it is. I agree that some designs for compartments can be bludgeoned into being a current-context <code>eval</code> but that doesn't mean all possible designs are equivalent.","m.relates_to":{"m.in_reply_to":{"event_id":"$yqpMMkUeVqq8dTsRlBgWniz5UBAN6ipu25sIU_btDlg"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, `const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')` is equivalent. The key here is that `Module` is a box.\n\nagain, I'm concerned not just with _whether_ the thing is possible, but _how accessible_ it is. I agree that some designs for compartments can be bludgeoned into being a current-context `eval` but that doesn't mean all possible designs are equivalent.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$yqpMMkUeVqq8dTsRlBgWniz5UBAN6ipu25sIU_btDlg?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>So, Module in this proposal is providing exactly as limiting a scope as Compartments, even if Compartments are framed as a registry of source strings. If you’ll forgive a reductio absurdam, <code>const c = new Compartment({ importHook(specifier) { return import(specifier, {reflect: true}) } ); c.registerSource('name', text); c.import('name')</code> is equivalent. The key here is that <code>Module</code> is a box.</blockquote></mx-reply>again, I'm concerned not just with <em>whether</em> the thing is possible, but <em>how accessible</em> it is. I agree that some designs for compartments can be bludgeoned into being a current-context <code>eval</code> but that doesn't mean all possible designs are equivalent.","mimetype":"text/html"}]},"ts":1673294439877,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hLk7km1xWw888Mjpj9RBZBw9HxKXnoAkiZD8YfNarlI"},
{"content":{"body":"`eval` already exists, but we've largely been able to convince people not to use it. I don't want to make a new `eval` and leave it lying around in another easily accessible form.","format":"org.matrix.custom.html","formatted_body":"<code>eval</code> already exists, but we've largely been able to convince people not to use it. I don't want to make a new <code>eval</code> and leave it lying around in another easily accessible form.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`eval` already exists, but we've largely been able to convince people not to use it. I don't want to make a new `eval` and leave it lying around in another easily accessible form.","mimetype":"text/plain"},{"body":"<code>eval</code> already exists, but we've largely been able to convince people not to use it. I don't want to make a new <code>eval</code> and leave it lying around in another easily accessible form.","mimetype":"text/html"}]},"ts":1673294527915,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$PblN8iM16OyzFzl6ZoVt7NffYbfiJlaycbModDL661s"},
{"content":{"body":"Well, if you’re satisfied by some API impedance, that’s overall good news since we care more about what’s possible than how coherent it is.","msgtype":"m.text","org.matrix.msc1767.text":"Well, if you’re satisfied by some API impedance, that’s overall good news since we care more about what’s possible than how coherent it is."},"ts":1673294541021,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ecRSkyF297ixNrlfNPhVb3kYU2kxUOMcfu5BwryvZEE"},
{"content":{"body":"And Compartments are not all that cumbersome.","msgtype":"m.text","org.matrix.msc1767.text":"And Compartments are not all that cumbersome."},"ts":1673294588877,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hrmQD0LueeBjkb8HGcRFyoh0sElJgFNJjZhcjLHV52Y"},
{"content":{"body":"I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","format":"org.matrix.custom.html","formatted_body":"I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","mimetype":"text/plain"},{"body":"I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","mimetype":"text/html"}]},"ts":1673294598205,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_esHQ8YmxWDKpW0oylPnArMMRNj4fsIykbAV7Qy36H0"},
{"content":{"body":" * I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","format":"org.matrix.custom.html","formatted_body":" * I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","m.new_content":{"body":"I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","format":"org.matrix.custom.html","formatted_body":"I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","mimetype":"text/plain"},{"body":"I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_esHQ8YmxWDKpW0oylPnArMMRNj4fsIykbAV7Qy36H0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * I am certainly _more_ comfortable with less accessible new ways to `eval` but not automatically entirely comfortable with them","mimetype":"text/plain"},{"body":" * I am certainly <em>more</em> comfortable with less accessible new ways to <code>eval</code> but not automatically entirely comfortable with them","mimetype":"text/html"}]},"ts":1673294606702,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$XAkHwfDDopMIeMp3uFyhlp516sDmCguIf-XmFKZeFlY"},
{"content":{"body":"Would this be a sufficiently inaccessible affordance: `new Compartment({ importHook(specifier) { return { source }; } }).import('specifier')`?","format":"org.matrix.custom.html","formatted_body":"Would this be a sufficiently inaccessible affordance: <code>new Compartment({ importHook(specifier) { return { source }; } }).import('specifier')</code>?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Would this be a sufficiently inaccessible affordance: `new Compartment({ importHook(specifier) { return { source }; } }).import('specifier')`?","mimetype":"text/plain"},{"body":"Would this be a sufficiently inaccessible affordance: <code>new Compartment({ importHook(specifier) { return { source }; } }).import('specifier')</code>?","mimetype":"text/html"}]},"ts":1673294694195,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uLULt3RhuD4OrX-ES2j_HfyHL3Ar5szBrWTGMn70b0M"},
{"content":{"body":"though in addition I think if Compartments the use case then a design which exposes the capability only to compartments is more palatable for that reason","msgtype":"m.text","org.matrix.msc1767.text":"though in addition I think if Compartments the use case then a design which exposes the capability only to compartments is more palatable for that reason"},"ts":1673294696170,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$BQe-0bJNwv15J_rM24viFEFd2OjQ5m9ec1gQ8qp4I8M"}
]