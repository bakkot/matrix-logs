[
{"content":{"body":"Reminder: meeting now! Is anyone else joining?","msgtype":"m.text","org.matrix.msc1767.text":"Reminder: meeting now! Is anyone else joining?"},"ts":1676394355383,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$J11n9iMzNFL7Hn6_iPOuB6kPBEILqMre00NpQmFDBwA"},
{"content":{"body":" * Reminder: meeting now! Is anyone else joining?","m.new_content":{"body":"Reminder: meeting now! Is anyone else joining?","msgtype":"m.text","org.matrix.msc1767.text":"Reminder: meeting now! Is anyone else joining?"},"m.relates_to":{"event_id":"$J11n9iMzNFL7Hn6_iPOuB6kPBEILqMre00NpQmFDBwA","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Reminder: meeting now! Is anyone else joining?"},"ts":1676394373774,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$uliQMA9igTUJ7t3IytSSugC7POSKQJUHu4zFGecRpxs"},
{"content":{"body":"oh have any interesting topic?","msgtype":"m.text"},"ts":1676394419097,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$czX49ySIG5SLoDEPVacD1R_kkSnaACaAYhYr93oagEg"},
{"content":{"body":"Talking about next steps with import assertions and integrations with the other proposals","msgtype":"m.text","org.matrix.msc1767.text":"Talking about next steps with import assertions and integrations with the other proposals"},"ts":1676394463538,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$l_6FDrPZZhzw7CnMzWoPGT2MFpdEfbJno8DFhD1y8-8"},
{"content":{"body":"not coming I need to get up early tomorrow ðŸ‘€ have a nice day!","msgtype":"m.text"},"ts":1676394612480,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$RWkg2peicjOeGkQU0leDYRz816xL0rvsCqOQdIPOymw"},
{"content":{"body":"Justin Ridgewell: what happens with:\n```js\nimport module mod from \"./foo\";\nmod instanceof Module;\nawait import(mod,  { with: { foo: \"bar\" } }); // should this throw? I think so!\n```","format":"org.matrix.custom.html","formatted_body":"<p><a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: what happens with:</p>\n<pre><code class=\"language-js\">import module mod from &quot;./foo&quot;;\nmod instanceof Module;\nawait import(mod,  { with: { foo: &quot;bar&quot; } }); // should this throw? I think so!\n</code></pre>\n","msgtype":"m.text"},"ts":1676396060456,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$9dzxLgKhviBe83tu-Yh8U7zAz7cpC1cA8mbILHCkSCM"},
{"content":{"body":"dynamic import must not support `with` while loading a `Module` object instead of a specifier","format":"org.matrix.custom.html","formatted_body":"dynamic import must not support <code>with</code> while loading a <code>Module</code> object instead of a specifier","msgtype":"m.text"},"ts":1676396086251,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$aJqosi1Xis8xkQ4Yn0wC8-g6aK8zke_g5BJNvGq1jiM"},
{"content":{"body":"if reflection is a `with` attribute, this would break if you dynamic defer import a module object. ie `await import mod, { reflect: \"defer\" })` vs `await import mod, { with: { reflect: \"defer\" } })`","format":"org.matrix.custom.html","formatted_body":"if reflection is a <code>with</code> attribute, this would break if you dynamic defer import a module object. ie <code>await import mod, { reflect: &quot;defer&quot; })</code> vs <code>await import mod, { with: { reflect: &quot;defer&quot; } })</code>","msgtype":"m.text"},"ts":1676396144456,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$hwtlWOCb8BA2Wn2yW9wX3BDg2nVAlGn2cFQoeNVFmH8"},
{"content":{"body":" * if reflection is a `with` attribute, this would break if you dynamic defer import a module object. ie `await import mod, { reflect: \"defer\" })` vs `await import mod, { with: { reflect: \"defer\" } })`","format":"org.matrix.custom.html","formatted_body":" * if reflection is a <code>with</code> attribute, this would break if you dynamic defer import a module object. ie <code>await import mod, { reflect: &quot;defer&quot; })</code> vs <code>await import mod, { with: { reflect: &quot;defer&quot; } })</code>","m.new_content":{"body":"if reflection is a `with` attribute, this would break if you dynamic defer import a module object. ie `await import mod, { reflect: \"defer\" })` vs `await import mod, { with: { reflect: \"defer\" } })`","format":"org.matrix.custom.html","formatted_body":"if reflection is a <code>with</code> attribute, this would break if you dynamic defer import a module object. ie <code>await import mod, { reflect: &quot;defer&quot; })</code> vs <code>await import mod, { with: { reflect: &quot;defer&quot; } })</code>","msgtype":"m.text"},"m.relates_to":{"event_id":"$hwtlWOCb8BA2Wn2yW9wX3BDg2nVAlGn2cFQoeNVFmH8","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1676396169285,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$ULx69EHAuuJl3zBceEydsv61jZ3KAv4FziFae22KyH8"},
{"content":{"body":"> <@lucacasonato:matrix.org> dynamic import must not support `with` while loading a `Module` object instead of a specifier\n\nbecause resolution and loading has already occured. the dyn import is a purely ecma262 behaviour.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$aJqosi1Xis8xkQ4Yn0wC8-g6aK8zke_g5BJNvGq1jiM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>dynamic import must not support <code>with</code> while loading a <code>Module</code> object instead of a specifier</blockquote></mx-reply>because resolution and loading has already occured. the dyn import is a purely ecma262 behaviour.","m.relates_to":{"m.in_reply_to":{"event_id":"$aJqosi1Xis8xkQ4Yn0wC8-g6aK8zke_g5BJNvGq1jiM"}},"msgtype":"m.text"},"ts":1676396201875,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$eIvoNcN_1gzuchCo5buhiCiJyj-DVnjp7gNdThaT0gA"},
{"content":{"body":"shoehorning `reflect` into `with` would mean that `with` would have a million edgecases related to `reflect`. like for example `reflect` would be the only `with` attribute allowed on a dynamic import of a module object. this is very confusing","format":"org.matrix.custom.html","formatted_body":"shoehorning <code>reflect</code> into <code>with</code> would mean that <code>with</code> would have a million edgecases related to <code>reflect</code>. like for example <code>reflect</code> would be the only <code>with</code> attribute allowed on a dynamic import of a module object. this is very confusing","msgtype":"m.text"},"ts":1676396271719,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$2YlOiLhBQ0dHF8DwtUwsFKz5vplgodLfo3lapus3Jw8"},
{"content":{"body":"Itâ€™s clear that my opinions donâ€™t match the rest of the groups, which is fine. As long as the syntax space is completely open for bundlers (and the attribute loading restriction thatâ€™s now removed allows bundlers to _use_ the syntax), Iâ€™m happy","format":"org.matrix.custom.html","formatted_body":"Itâ€™s clear that my opinions donâ€™t match the rest of the groups, which is fine. As long as the syntax space is completely open for bundlers (and the attribute loading restriction thatâ€™s now removed allows bundlers to <em>use</em> the syntax), Iâ€™m happy","msgtype":"m.text"},"ts":1676401625311,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kRf6E2N_0eu_96s-KDGye-GWqDWhKFUUyMg5yBKgLcs"},
{"content":{"body":"Justin Ridgewell: I guess the proposal is, the `with` space would be open for bundlers, but the `import <keyword>` space would specifically *not* be open, and just be defined by ECMA-262. Would this work for you?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: I guess the proposal is, the <code>with</code> space would be open for bundlers, but the <code>import &lt;keyword&gt;</code> space would specifically <em>not</em> be open, and just be defined by ECMA-262. Would this work for you?","msgtype":"m.text"},"ts":1676401691229,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_4dFFHp1bfN5dgcJkghXz5wZtnGEfD-lpbQbm_qEaQU"},
{"content":{"body":"Yes","msgtype":"m.text"},"ts":1676401713700,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sexpL-1t5abi8kXKxPzfOpW6W8N4g_A1OV0hDx9mQMA"},
{"content":{"body":"Re future compat concerns, I think we could do either of the following:\n- Open the value syntax so that we can stick bundler concerns into a specific key `assert { turbopack: { foo: 'bar' } }`\n- Reserve `_` prefix for non-TC39 use (alternatively `x-` prefix, but that forces wrapping keys in strings `'x-foo': 'bar'`)","format":"org.matrix.custom.html","formatted_body":"<p>Re future compat concerns, I think we could do either of the following:</p>\n<ul>\n<li>Open the value syntax so that we can stick bundler concerns into a specific key <code>assert { turbopack: { foo: 'bar' } }</code></li>\n<li>Reserve <code>_</code> prefix for non-TC39 use (alternatively <code>x-</code> prefix, but that forces wrapping keys in strings <code>'x-foo': 'bar'</code>)</li>\n</ul>\n","msgtype":"m.text"},"ts":1676411039544,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fKyHwj5AYnYFsHaiFRij4vFAvkBN4slbto1-dsjjIzc"}
]