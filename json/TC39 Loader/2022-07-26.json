[
{"content":{"body":"> <@guybedford:matrix.org> Thanks Rob Palmer for the input, very good points raised. My personal take on this perspective would be to ensure we have lazy execution and sync execution as a possibility of the \"epiche\" (in the spirit of continued mutation of the word). I completely get that these CJS -> ESM scenarios are causing friction for adoption, although a concern here is that this is a Node.js-specific issue that even with a spec unlock won't guarantee progress. Unfortunately Node.js is now caught up in a bind with its own loader system causing asynchronous loading requirements, although there are people actively working on making hooks sync by moving them off thread. Funding on the Node.js side may well speed things up there as well. On the ECMA-262 side, I could imagine a follow-up or new iteration of Yulia's proposal that tackles lazy execution and sync execution to fit into this story and I'd be more than happy to be involved in discussions here. From my perspective I don't see any frictions or concerns regarding the overall picture, short of more features just being more complexity, but I don't personally see an issue with adding complexity to the module system since it also means more control over performance and loading in the hands of users.\n\nfrom my perspective, and also from hearing from developers -- we may want to provide a high level construct that allows sync loading depending on the environment, but which is independently useful","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$40BYk6zAnh3rVda-AfTXACvjcDuvayaM-XDJB_FpCmc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>Thanks <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> for the input, very good points raised. My personal take on this perspective would be to ensure we have lazy execution and sync execution as a possibility of the \"epiche\" (in the spirit of continued mutation of the word). I completely get that these CJS -&gt; ESM scenarios are causing friction for adoption, although a concern here is that this is a Node.js-specific issue that even with a spec unlock won't guarantee progress. Unfortunately Node.js is now caught up in a bind with its own loader system causing asynchronous loading requirements, although there are people actively working on making hooks sync by moving them off thread. Funding on the Node.js side may well speed things up there as well. On the ECMA-262 side, I could imagine a follow-up or new iteration of Yulia's proposal that tackles lazy execution and sync execution to fit into this story and I'd be more than happy to be involved in discussions here. From my perspective I don't see any frictions or concerns regarding the overall picture, short of more features just being more complexity, but I don't personally see an issue with adding complexity to the module system since it also means more control over performance and loading in the hands of users.</blockquote></mx-reply>from my perspective, and also from hearing from developers -- we may want to provide a high level construct that allows sync loading depending on the environment, but which is independently useful","m.relates_to":{"m.in_reply_to":{"event_id":"$40BYk6zAnh3rVda-AfTXACvjcDuvayaM-XDJB_FpCmc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@guybedford:matrix.org> Thanks Rob Palmer for the input, very good points raised. My personal take on this perspective would be to ensure we have lazy execution and sync execution as a possibility of the \"epiche\" (in the spirit of continued mutation of the word). I completely get that these CJS -> ESM scenarios are causing friction for adoption, although a concern here is that this is a Node.js-specific issue that even with a spec unlock won't guarantee progress. Unfortunately Node.js is now caught up in a bind with its own loader system causing asynchronous loading requirements, although there are people actively working on making hooks sync by moving them off thread. Funding on the Node.js side may well speed things up there as well. On the ECMA-262 side, I could imagine a follow-up or new iteration of Yulia's proposal that tackles lazy execution and sync execution to fit into this story and I'd be more than happy to be involved in discussions here. From my perspective I don't see any frictions or concerns regarding the overall picture, short of more features just being more complexity, but I don't personally see an issue with adding complexity to the module system since it also means more control over performance and loading in the hands of users.\n\nfrom my perspective, and also from hearing from developers -- we may want to provide a high level construct that allows sync loading depending on the environment, but which is independently useful","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$40BYk6zAnh3rVda-AfTXACvjcDuvayaM-XDJB_FpCmc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>Thanks <a href=\"https://matrix.to/#/@robpalme:matrix.org\">Rob Palmer</a> for the input, very good points raised. My personal take on this perspective would be to ensure we have lazy execution and sync execution as a possibility of the \"epiche\" (in the spirit of continued mutation of the word). I completely get that these CJS -&gt; ESM scenarios are causing friction for adoption, although a concern here is that this is a Node.js-specific issue that even with a spec unlock won't guarantee progress. Unfortunately Node.js is now caught up in a bind with its own loader system causing asynchronous loading requirements, although there are people actively working on making hooks sync by moving them off thread. Funding on the Node.js side may well speed things up there as well. On the ECMA-262 side, I could imagine a follow-up or new iteration of Yulia's proposal that tackles lazy execution and sync execution to fit into this story and I'd be more than happy to be involved in discussions here. From my perspective I don't see any frictions or concerns regarding the overall picture, short of more features just being more complexity, but I don't personally see an issue with adding complexity to the module system since it also means more control over performance and loading in the hands of users.</blockquote></mx-reply>from my perspective, and also from hearing from developers -- we may want to provide a high level construct that allows sync loading depending on the environment, but which is independently useful","mimetype":"text/html"}]},"ts":1658824599659,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$6hTMtpiuu8MpFoYUvyYLdLMIdWwcmigCnveScfNYoGA"},
{"content":{"body":"This would require loosening early error restrictions, maybe only for modules","msgtype":"m.text","org.matrix.msc1767.text":"This would require loosening early error restrictions, maybe only for modules"},"ts":1658824626511,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$hegAlWrCTxSBOZwnQPZhbqblhpmWeVV5_9sK0XeOXe4"}
]