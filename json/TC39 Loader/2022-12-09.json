[
{"content":{"body":"> <@jridgewell:matrix.org> Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific\n\nIt sounds to me like you're saying, \"the design must be based on type: \"text\" and not asset references because asset references are impossible to make work\"","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ncdKCDenffTn9DEg-cD2MLuDMfeFyjwFMa8rAFdOkac?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific</blockquote></mx-reply>It sounds to me like you're saying, &quot;the design must be based on type: &quot;text&quot; and not asset references because asset references are impossible to make work&quot;","m.relates_to":{"m.in_reply_to":{"event_id":"$ncdKCDenffTn9DEg-cD2MLuDMfeFyjwFMa8rAFdOkac"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific\n\nIt sounds to me like you're saying, \"the design must be based on type: \"text\" and not asset references because asset references are impossible to make work\"","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$ncdKCDenffTn9DEg-cD2MLuDMfeFyjwFMa8rAFdOkac?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific</blockquote></mx-reply>It sounds to me like you're saying, &quot;the design must be based on type: &quot;text&quot; and not asset references because asset references are impossible to make work&quot;","mimetype":"text/html"}]},"ts":1670592006448,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2IRWTyIznJvVowoffLV2waNi_aJn_4F-tftL0uZ2Y6I"},
{"content":{"body":"I was feeling more optimistic about them...","msgtype":"m.text","org.matrix.msc1767.text":"I was feeling more optimistic about them..."},"ts":1670592029875,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ptYyDYJNBbkM_3ErxGxwA3aaAFmPUnsrT-Y6_3VUDis"},
{"content":{"body":"I'd note: If we go for a general key/value pair scheme, but make each key be built-in to JS syntax, maybe we could even handle reflective module imports that can be statically imported later--the problem becomes action at a distance, not logical impossibility","msgtype":"m.text","org.matrix.msc1767.text":"I'd note: If we go for a general key/value pair scheme, but make each key be built-in to JS syntax, maybe we could even handle reflective module imports that can be statically imported later--the problem becomes action at a distance, not logical impossibility"},"ts":1670592143831,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uBRGHnWAb7tYWvdJIqAPA-H60EbkOr-cSVXgaz22w_c"},
{"content":{"body":"e.g., if the syntax is (strawperson!) `import foo from \"./foo.js\", module`","format":"org.matrix.custom.html","formatted_body":"e.g., if the syntax is (strawperson!) <code>import foo from &quot;./foo.js&quot;, module</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"e.g., if the syntax is (strawperson!) `import foo from \"./foo.js\", module`","mimetype":"text/plain"},{"body":"e.g., if the syntax is (strawperson!) <code>import foo from &quot;./foo.js&quot;, module</code>","mimetype":"text/html"}]},"ts":1670592193644,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-vKb1iLJdq4GOhV0NIpePSxDoxkOh1yu86gnZvK0L1I"},
{"content":{"body":"No, in these comments about asset references/URLs vs actual JS values, I'm explicitly saying the using an asset reference is subpar, because it is env specific","msgtype":"m.text","org.matrix.msc1767.text":"No, in these comments about asset references/URLs vs actual JS values, I'm explicitly saying the using an asset reference is subpar, because it is env specific"},"ts":1670601713569,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SUd5YVyE-oED9mSJKvWnNH5wuRvkDKTP-lugY_QlCRk"},
{"content":{"body":"There was no intention of commenting on the syntax of the proposals (though I have opinions on that too)","msgtype":"m.text","org.matrix.msc1767.text":"There was no intention of commenting on the syntax of the proposals (though I have opinions on that too)"},"ts":1670601738688,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$g4dZ6UGREPIzCUfwSqvgBl7ezQ8N3Zg8cirXO4RojEM"},
{"content":{"body":"It's been suggested a few times that asset references are a replacement for the ability to import text","msgtype":"m.text","org.matrix.msc1767.text":"It's been suggested a few times that asset references are a replacement for the ability to import text"},"ts":1670601918281,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$X7y6qA8iJ5uBzmLF7g73GoRN94zzOyWbSdgRAXjNWT8"},
{"content":{"body":"In the strict sense, yes, because they'd allow me to reference and access the asset the same way we currently do for URLs","msgtype":"m.text","org.matrix.msc1767.text":"In the strict sense, yes, because they'd allow me to reference and access the asset the same way we currently do for URLs"},"ts":1670601938060,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$59ub4jdaM9SQNPuH3c1XcRpYMZ6QatEBw9WEJgDTiSE"},
{"content":{"body":"But that doesn't make it a good experience to use, it just means it's better than the current URL approach (which is awful)","msgtype":"m.text","org.matrix.msc1767.text":"But that doesn't make it a good experience to use, it just means it's better than the current URL approach (which is awful)"},"ts":1670601961439,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XeCuROi3hmFgbBEAlw_ETuIe1E0j7IJvyXyhgxHhBWU"},
{"content":{"body":"I like to tease apart the motivating use cases. I think there are cases where URLs are necessary, but the current approaches miss an opportunity to statically express dependency on a URL asset (and its transitive dependencies) in a way that bundlers could see. Embedded binary assets are useful for different things too, not least of which is that they don’t couple a mechanism for reading them, so they’re necessarily more portable.","msgtype":"m.text","org.matrix.msc1767.text":"I like to tease apart the motivating use cases. I think there are cases where URLs are necessary, but the current approaches miss an opportunity to statically express dependency on a URL asset (and its transitive dependencies) in a way that bundlers could see. Embedded binary assets are useful for different things too, not least of which is that they don’t couple a mechanism for reading them, so they’re necessarily more portable."},"ts":1670612228919,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pT8dtYl_7TLCZ0GdypGQsg7Itd_TdFEChvdoqCBX0Uk"},
{"content":{"body":"Then all the remaining embedded asset types follow from the various treatments you can make on the binary, particularly UTF-8 text, but also others. An interesting dimension to that problem is that each of those cases has potentially different treatments at runtime or bundle time, and those treatments can be environment-specific.","msgtype":"m.text","org.matrix.msc1767.text":"Then all the remaining embedded asset types follow from the various treatments you can make on the binary, particularly UTF-8 text, but also others. An interesting dimension to that problem is that each of those cases has potentially different treatments at runtime or bundle time, and those treatments can be environment-specific."},"ts":1670612369604,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$W2OUXJyZ7YDc1Y6xbvKhmxXiDp3HI5sBVUMdADPTosA"},
{"content":{"body":"For example, with Guten Tags, there’s a treatment for HTML. During development, it translates the HTML to JavaScript on the client, but for production, the translation occurs in the bundler (in a compartment that can see the dev dependencies, and ideally producing a module that executes in a corresponding compartment with access to the translator’s prod dependencies). There could be alternate treatments that use virtual module sources and interpret the HTML at runtime. And a key feature here is that the surrounding mechanism dictates whether you get an implementation of the translator that uses the DOM for parsing HTML, or brings in JSDOM for the bundler.","msgtype":"m.text","org.matrix.msc1767.text":"For example, with Guten Tags, there’s a treatment for HTML. During development, it translates the HTML to JavaScript on the client, but for production, the translation occurs in the bundler (in a compartment that can see the dev dependencies, and ideally producing a module that executes in a corresponding compartment with access to the translator’s prod dependencies). There could be alternate treatments that use virtual module sources and interpret the HTML at runtime. And a key feature here is that the surrounding mechanism dictates whether you get an implementation of the translator that uses the DOM for parsing HTML, or brings in JSDOM for the bundler."},"ts":1670612567746,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xUed9O3tWJvO2LT0ihbOD4UivjxLJIfuyayDJ_PDx6I"},
{"content":{"body":"Concretely, bundling with a “text” loader implies very different trade-offs depending on whether you’re compiling to an archive or a bundle. With an archive, it makes sense to keep the original binary and use a virtual module source to decode it to a string on the fly. For a stringy bundle, it makes more sense to translate the asset to JavaScript.","msgtype":"m.text","org.matrix.msc1767.text":"Concretely, bundling with a “text” loader implies very different trade-offs depending on whether you’re compiling to an archive or a bundle. With an archive, it makes sense to keep the original binary and use a virtual module source to decode it to a string on the fly. For a stringy bundle, it makes more sense to translate the asset to JavaScript."},"ts":1670612729927,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Fz9MHCgpy9t8VGnjO34EenWDFRqVpErgjqMDsrEelbE"}
]