[
{"content":{"body":"where is the module instance cache stored? ExecutionContext? Realm?\n\n```js\nconst mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () => mod), {})\nawait import(new ExecutionContext.Module(mod2, async () => mod, {}))\n```","format":"org.matrix.custom.html","formatted_body":"<p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"where is the module instance cache stored? ExecutionContext? Realm?\n\n```js\nconst mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () => mod), {})\nawait import(new ExecutionContext.Module(mod2, async () => mod, {}))\n```","mimetype":"text/plain"},{"body":"<p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657604825201,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nCdXfTUUtMiuXVc0j3wdQaR-dIMtyghODKS1gu71upc"},
{"content":{"body":"how many time `mod` is executed?","format":"org.matrix.custom.html","formatted_body":"how many time <code>mod</code> is executed?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"how many time `mod` is executed?","mimetype":"text/plain"},{"body":"how many time <code>mod</code> is executed?","mimetype":"text/html"}]},"ts":1657604835269,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w6ylYEFiBtG2mci3FZeODzRVH_K5KSgD6i0kqqYcdgQ"},
{"content":{"body":"I would expect it to only be executed once in the original execution context (the one where the module block expression was evaluated).","msgtype":"m.text"},"ts":1657608119001,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$MB4zm90xY4zHragZZxC5EFOkCbtpiX_wk8rcwLYy-qE"},
{"content":{"body":"The cache could be a [[ModuleRecord]] internal slot on the Module object ","msgtype":"m.text"},"ts":1657608146208,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mmVOb6CNdnBhGibjLTdy_u7XLlktjq5mpSdIqtDclDs"},
{"content":{"body":"ok thanks!","msgtype":"m.text","org.matrix.msc1767.text":"ok thanks!"},"ts":1657613027345,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Zh0v_kCxtXCFyirwYJRqiDJAAqwZGqjS--cq3AuQ3ME"},
{"content":{"body":"> <@kriskowal:matrix.org> I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.\n\nYes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.</blockquote></mx-reply>Yes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later.","m.relates_to":{"m.in_reply_to":{"event_id":"$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.\n\nYes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.</blockquote></mx-reply>Yes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later.","mimetype":"text/html"}]},"ts":1657616540578,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ff9m24PEGswl6eI_XlMDK6jvSKzUl2pPO2fWj1CCG-c"},
{"content":{"body":"I found we need a `isAsync` property on the Virtual Module.","format":"org.matrix.custom.html","formatted_body":"I found we need a <code>isAsync</code> property on the Virtual Module.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I found we need a `isAsync` property on the Virtual Module.","mimetype":"text/plain"},{"body":"I found we need a <code>isAsync</code> property on the Virtual Module.","mimetype":"text/html"}]},"ts":1657621749525,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MqWHrnb5ThBcVg-fuHZZ1wBqhdttGKrHZCtrO9ZCCto"},
{"content":{"body":"`Cyclic Module Records` requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","format":"org.matrix.custom.html","formatted_body":"<code>Cyclic Module Records</code> requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Cyclic Module Records` requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","mimetype":"text/plain"},{"body":"<code>Cyclic Module Records</code> requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","mimetype":"text/html"}]},"ts":1657621796412,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vC_szrnFIrxZaX9d_Z5QMXoeQrSkhLWJG2CWDkaiKMY"},
{"content":{"body":"I'm working on a polyfill for `Module`\n\nhttps://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts","format":"org.matrix.custom.html","formatted_body":"<p>I'm working on a polyfill for <code>Module</code></p>\n<p>https://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm working on a polyfill for `Module`\n\nhttps://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts","mimetype":"text/plain"},{"body":"<p>I'm working on a polyfill for <code>Module</code></p>\n<p>https://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts</p>\n","mimetype":"text/html"}]},"ts":1657630527999,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eJv5hWEonVsVJlNyGdq9IkCWWfN83EZ1nZBl_84mHwI"}
]