[
{"content":{"body":"where is the module instance cache stored? ExecutionContext? Realm?\n\n```js\nconst mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () => mod), {})\nawait import(new ExecutionContext.Module(mod2, async () => mod, {}))\n```","format":"org.matrix.custom.html","formatted_body":"<p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"where is the module instance cache stored? ExecutionContext? Realm?\n\n```js\nconst mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () => mod), {})\nawait import(new ExecutionContext.Module(mod2, async () => mod, {}))\n```","mimetype":"text/plain"},{"body":"<p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n","mimetype":"text/html"}]},"ts":1657604825201,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$nCdXfTUUtMiuXVc0j3wdQaR-dIMtyghODKS1gu71upc"},
{"content":{"body":"how many time `mod` is executed?","format":"org.matrix.custom.html","formatted_body":"how many time <code>mod</code> is executed?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"how many time `mod` is executed?","mimetype":"text/plain"},{"body":"how many time <code>mod</code> is executed?","mimetype":"text/html"}]},"ts":1657604835269,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$w6ylYEFiBtG2mci3FZeODzRVH_K5KSgD6i0kqqYcdgQ"},
{"content":{"body":"I would expect it to only be executed once in the original execution context (the one where the module block expression was evaluated).","msgtype":"m.text"},"ts":1657608119001,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$MB4zm90xY4zHragZZxC5EFOkCbtpiX_wk8rcwLYy-qE"},
{"content":{"body":"The cache could be a [[ModuleRecord]] internal slot on the Module object ","msgtype":"m.text"},"ts":1657608146208,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$mmVOb6CNdnBhGibjLTdy_u7XLlktjq5mpSdIqtDclDs"},
{"content":{"body":"ok thanks!","msgtype":"m.text","org.matrix.msc1767.text":"ok thanks!"},"ts":1657613027345,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$Zh0v_kCxtXCFyirwYJRqiDJAAqwZGqjS--cq3AuQ3ME"},
{"content":{"body":"> <@kriskowal:matrix.org> I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.\n\nYes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.</blockquote></mx-reply>Yes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later.","m.relates_to":{"m.in_reply_to":{"event_id":"$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.\n\nYes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later. ","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Wtl1r22xuBuuSQ3XAXS0s_NcCa4_0LsIaxHx1oyWSYU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I think low-level import reflection or deferred import do obviate one complication of the Compartment design (as written right now), regarding how to communicate a module source or module instance from a host compartment to a child compartment. That isn’t possible to express in terms of the low-level parts, which compels the developer to use import reflection or deferred import explicitly. That might be a good outcome, even for XS. Currently XS depends on a manifest to express the full working set, but these features together would allow tooling to take over more of the tedium.</blockquote></mx-reply>Yes, it feels like import reflection and deferred import evaluation are both doing the same thing in that they hide some of the complexity that a full-access low level api would give. Module loading is quite complex, so choosing what should be hidden and how is probably a good idea. I do worry though that we will add a lot of things to the static import statement / dynamic import options bag, and that will confuse people (as i've already had feedback on that). But this is a concern for later.","mimetype":"text/html"}]},"ts":1657616540578,"senderName":"yulia","senderId":"@yulia:mozilla.org","id":"$Ff9m24PEGswl6eI_XlMDK6jvSKzUl2pPO2fWj1CCG-c"},
{"content":{"body":"I found we need a `isAsync` property on the Virtual Module.","format":"org.matrix.custom.html","formatted_body":"I found we need a <code>isAsync</code> property on the Virtual Module.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I found we need a `isAsync` property on the Virtual Module.","mimetype":"text/plain"},{"body":"I found we need a <code>isAsync</code> property on the Virtual Module.","mimetype":"text/html"}]},"ts":1657621749525,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$MqWHrnb5ThBcVg-fuHZZ1wBqhdttGKrHZCtrO9ZCCto"},
{"content":{"body":"`Cyclic Module Records` requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","format":"org.matrix.custom.html","formatted_body":"<code>Cyclic Module Records</code> requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`Cyclic Module Records` requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","mimetype":"text/plain"},{"body":"<code>Cyclic Module Records</code> requires [[isAsync]] which is not possible for Virtual Module because it does not have a source text to be parsed.","mimetype":"text/html"}]},"ts":1657621796412,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vC_szrnFIrxZaX9d_Z5QMXoeQrSkhLWJG2CWDkaiKMY"},
{"content":{"body":"I'm working on a polyfill for `Module`\n\nhttps://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts","format":"org.matrix.custom.html","formatted_body":"<p>I'm working on a polyfill for <code>Module</code></p>\n<p>https://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm working on a polyfill for `Module`\n\nhttps://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts","mimetype":"text/plain"},{"body":"<p>I'm working on a polyfill for <code>Module</code></p>\n<p>https://github.com/DimensionDev/aot-secure-ecmascript/blob/2e45ecaf9d45efce1661b8df106ba421817f0fa5/packages/compartment/src/Module.ts</p>\n","mimetype":"text/html"}]},"ts":1657630527999,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$eJv5hWEonVsVJlNyGdq9IkCWWfN83EZ1nZBl_84mHwI"},
{"content":{"body":"I had wondered about that and XS managed to make it work without it. Very good to know.","msgtype":"m.text","org.matrix.msc1767.text":"I had wondered about that and XS managed to make it work without it. Very good to know."},"ts":1657637607740,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xu6eEIx9JEnrlaDDYsbNPlhfNRTLYbXkXO90eY9amqE"},
{"content":{"body":"It might be a spec bug. 🤷‍♂️","msgtype":"m.text","org.matrix.msc1767.text":"It might be a spec bug. 🤷‍♂️"},"ts":1657637618009,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YGcF5w2q5duo3Thy3xHCrH6n_SX-5preDrN2BHOO3rg"},
{"content":{"body":"> <@kriskowal:matrix.org> I had wondered about that and XS managed to make it work without it. Very good to know.\n\nXS have JS source at build time, they can know if the module has TLA or not.\nWe need to manually mark it for virtual modules (like `needsImportMeta`), otherwise I guess we need to rewrite the spec a lot.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xu6eEIx9JEnrlaDDYsbNPlhfNRTLYbXkXO90eY9amqE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I had wondered about that and XS managed to make it work without it. Very good to know.</blockquote></mx-reply>XS have JS source at build time, they can know if the module has TLA or not.<br>We need to manually mark it for virtual modules (like <code>needsImportMeta</code>), otherwise I guess we need to rewrite the spec a lot.","m.relates_to":{"m.in_reply_to":{"event_id":"$xu6eEIx9JEnrlaDDYsbNPlhfNRTLYbXkXO90eY9amqE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I had wondered about that and XS managed to make it work without it. Very good to know.\n\nXS have JS source at build time, they can know if the module has TLA or not.\nWe need to manually mark it for virtual modules (like `needsImportMeta`), otherwise I guess we need to rewrite the spec a lot.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xu6eEIx9JEnrlaDDYsbNPlhfNRTLYbXkXO90eY9amqE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I had wondered about that and XS managed to make it work without it. Very good to know.</blockquote></mx-reply>XS have JS source at build time, they can know if the module has TLA or not.<br>We need to manually mark it for virtual modules (like <code>needsImportMeta</code>), otherwise I guess we need to rewrite the spec a lot.","mimetype":"text/html"}]},"ts":1657640388197,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$QdYKLH0scdCCAlph-IdafrLRPEbH2CjIsp4v5VG8Mko"},
{"content":{"body":"XS also implemented a draft of the virtual module source protocol.","msgtype":"m.text","org.matrix.msc1767.text":"XS also implemented a draft of the virtual module source protocol."},"ts":1657645547191,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Innihv2VJG2-A1JIxwJriq0gZ0NHlPfbNhIQ4zEnL9c"},
{"content":{"body":"And they are of the opinion that the virtual module source doesn’t have to reveal whether initialize() returns a promise or not.","msgtype":"m.text","org.matrix.msc1767.text":"And they are of the opinion that the virtual module source doesn’t have to reveal whether initialize() returns a promise or not."},"ts":1657645584910,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BKasaUzaqJuxktnVgZZU5LY-B82hkO1LnqT5IulJU78"},
{"content":{"body":"Though, if it is necessary, it is not a problem to require it to be reflected on the virtual module source object.","msgtype":"m.text","org.matrix.msc1767.text":"Though, if it is necessary, it is not a problem to require it to be reflected on the virtual module source object."},"ts":1657645605875,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kaSnyZ6x2d6XNgR-G6G0evTZwKIgYj-S4_M0ZgBiK8c"},
{"content":{"body":"Just might be worth inquiring with vendors whether the spec can be relaxed. Module records capture a lot of details from multiple conflated layers that get initialized at different stages.","msgtype":"m.text","org.matrix.msc1767.text":"Just might be worth inquiring with vendors whether the spec can be relaxed. Module records capture a lot of details from multiple conflated layers that get initialized at different stages."},"ts":1657645651494,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NdqW0ZhMVultbG2IJn-Wlnn0SSiFW71Z3SJnW8R37tI"},
{"content":{"body":"Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","format":"org.matrix.custom.html","formatted_body":"<p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","mimetype":"text/plain"},{"body":"<p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$nCdXfTUUtMiuXVc0j3wdQaR-dIMtyghODKS1gu71upc"}}},"ts":1657646215026,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$cKNgjy2jGpr3Cz_Ca_UyagRpu5zZYOoQwEbhOJYAd8E"},
{"content":{"body":" * Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$nCdXfTUUtMiuXVc0j3wdQaR-dIMtyghODKS1gu71upc?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n</blockquote></mx-reply> * <p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","m.new_content":{"body":"Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","format":"org.matrix.custom.html","formatted_body":"<p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","mimetype":"text/plain"},{"body":"<p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$cKNgjy2jGpr3Cz_Ca_UyagRpu5zZYOoQwEbhOJYAd8E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Clarification:\n\n```js\nconst mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () => mod1);\nawait import(mod1);\nawait import(mod2);\n```\n\nI expect this to log run once from the host execution context.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$nCdXfTUUtMiuXVc0j3wdQaR-dIMtyghODKS1gu71upc?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>where is the module instance cache stored? ExecutionContext? Realm?</p>\n<pre><code class=\"language-js\">const mod = module { console.log('run') }\nconst mod2 = static module { import 'mod' }\n\nawait import(new Module(mod2, async () =&gt; mod), {})\nawait import(new ExecutionContext.Module(mod2, async () =&gt; mod, {}))\n</code></pre>\n</blockquote></mx-reply> * <p>Clarification:</p>\n<pre><code class=\"language-js\">const mod1 = module { console.log('run') };\nconst src2 = static module { import 'mod' };\nconst ctx2 = new ExecutionContext(globalThis);\nconst mod2 = new ctx2.Module(src2, async () =&gt; mod1);\nawait import(mod1);\nawait import(mod2);\n</code></pre>\n<p>I expect this to log run once from the host execution context.</p>\n","mimetype":"text/html"}]},"ts":1657646244848,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pQTj8BburnuInOP88lfNYCkS68eS4lmsyqe_6rlXDhc"},
{"content":{"body":"Linking modules between independent execution contexts is an explicit goal out to full Compartment parity, for supply chain isolation.","msgtype":"m.text","org.matrix.msc1767.text":"Linking modules between independent execution contexts is an explicit goal out to full Compartment parity, for supply chain isolation."},"ts":1657646297045,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kB4qg5hgoHMHxFdMccFsecIPsoAb7JH0yEtJyDebYxI"},
{"content":{"body":"And notably, shared intrinsics between separate execution contexts.","msgtype":"m.text","org.matrix.msc1767.text":"And notably, shared intrinsics between separate execution contexts."},"ts":1657646315517,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7ROQ4oZdRmmINzSSy6x86le6te2aFnWFkyLFztRlEcc"},
{"content":{"body":"262 lawyer question: Is it already the case that there can be multiple execution contexts in a single realm? https://tc39.es/ecma262/#sec-execution-contexts","msgtype":"m.text","org.matrix.msc1767.text":"262 lawyer question: Is it already the case that there can be multiple execution contexts in a single realm? https://tc39.es/ecma262/#sec-execution-contexts"},"ts":1657663452889,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$vsNfSKTar2Lyhv9c1Bc0U0ds8zlly45Lf9UzmrSidnM"},
{"content":{"body":"I suppose the answer might lie in the details of generator, async, async generator functions.","msgtype":"m.text","org.matrix.msc1767.text":"I suppose the answer might lie in the details of generator, async, async generator functions."},"ts":1657663491005,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iEsaLKYEpeT2U_-VPhvQB3n9tKEIJw8IMHeq5htl-Go"},
{"content":{"body":"isn't the callstack a stack of execution contexts?","msgtype":"m.text","org.matrix.msc1767.text":"isn't the callstack a stack of execution contexts?"},"ts":1657663570570,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DRMMswSPKefbuVqfYTqgQJPQIdUhBfOaqbgvjvlPod0"},
{"content":{"body":"(Trying to discover whether “reify execution context” is the right title for the end boss for compartments.)","msgtype":"m.text","org.matrix.msc1767.text":"(Trying to discover whether “reify execution context” is the right title for the end boss for compartments.)"},"ts":1657663571155,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fME6JDimfD0yWtTU1dnVUCem-FBJqa-JHMa0iS9mFK0"},
{"content":{"body":"there's always one active execution context within a Realm, and you keep switching between them","msgtype":"m.text","org.matrix.msc1767.text":"there's always one active execution context within a Realm, and you keep switching between them"},"ts":1657663616596,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zSaMN3Fmxf9UalBp_gk_EqxcbX6C3JmVBJfPZfazKik"},
{"content":{"body":"at most, one active","msgtype":"m.text","org.matrix.msc1767.text":"at most, one active"},"ts":1657663628252,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WFeYxU-3yy9UN0xnlMSLIB70AutSJRv8aT5Wi0ttgA0"},
{"content":{"body":"Got it.","msgtype":"m.text","org.matrix.msc1767.text":"Got it."},"ts":1657663628974,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VDSzFUCXFZSSsdxBwnjS-8n_dMALrrgaF9VSTOTaIck"},
{"content":{"body":"So, “reify execution context” is not yet disqualified.","msgtype":"m.text","org.matrix.msc1767.text":"So, “reify execution context” is not yet disqualified."},"ts":1657663685604,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oMcJtfn23pDEOsmc0uOQnls8ttHHLF-_K0IJNzoATVM"},
{"content":{"body":"well, I'm not sure what you mean","msgtype":"m.text","org.matrix.msc1767.text":"well, I'm not sure what you mean"},"ts":1657663697584,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-vzWrQ3a4unEg3BeJvR8AJicDkJLk9oebHfVMjkUto0"},
{"content":{"body":"whoa, reify execution contexts?","msgtype":"m.text","org.matrix.msc1767.text":"whoa, reify execution contexts?"},"ts":1657663699568,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$fBfNRUV7_oK95bqivTNlbG3YAdY8LBHLTNGWiObnLKg"},
{"content":{"body":"what information are you trying to surface? that seems like not a good idea","msgtype":"m.text","org.matrix.msc1767.text":"what information are you trying to surface? that seems like not a good idea"},"ts":1657663711456,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xFaI0pioKu17_GBvGMK79UI69dJn_CPg9wlcJA5JD5A"},
{"content":{"body":"Yeah, so that’s a hint I’ve got the wrong word.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, so that’s a hint I’ve got the wrong word."},"ts":1657663713471,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$01MHr8CLLNllaRvddcAvSVTPVkF97y2Q89rhdqUMoBc"},
{"content":{"body":"isn't \"reify local scope\" really the final boss?","msgtype":"m.text","org.matrix.msc1767.text":"isn't \"reify local scope\" really the final boss?"},"ts":1657663714172,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_2vOAdhgm-e8M186qLIatui7niLD0-RovbvbTWZav0M"},
{"content":{"body":"`localThis`","format":"org.matrix.custom.html","formatted_body":"<code>localThis</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`localThis`","mimetype":"text/plain"},{"body":"<code>localThis</code>","mimetype":"text/html"}]},"ts":1657663725660,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$ZURfm-XhdnrC6EhkVKIG0CE6M7mk5YWMDNR_Edy0Si0"},
{"content":{"body":"That’s definitely not what we’re looking for.","msgtype":"m.text","org.matrix.msc1767.text":"That’s definitely not what we’re looking for."},"ts":1657663736476,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$garF597PuOnMgpTUmNnTIaZc3IklcVzzZvDZQZ28LLQ"},
{"content":{"body":"Though, when I was young and silly, I used to think that’s exactly what I wanted from my programming language.","msgtype":"m.text","org.matrix.msc1767.text":"Though, when I was young and silly, I used to think that’s exactly what I wanted from my programming language."},"ts":1657663792557,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$zGM4jlPmJ-dmWegT64HuhcckxwVf76sG7hwLYaSBRHM"},
{"content":{"body":"“Prototype chains and scope chains are basically the same thing. Let’s just have one of those.”","msgtype":"m.text","org.matrix.msc1767.text":"“Prototype chains and scope chains are basically the same thing. Let’s just have one of those.”"},"ts":1657663815009,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FVkTeF7XQF6IGcmcoCEEg8o1s7efxHrzP20kRjxlkgs"},
{"content":{"body":"I got better.","msgtype":"m.text","org.matrix.msc1767.text":"I got better."},"ts":1657663820263,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FjuXtWpUotRWt7EXT_h-W3ZU6pt9CeF18lSBg5g-29E"},
{"content":{"body":"too bad you missed out on Io in your youth","msgtype":"m.text","org.matrix.msc1767.text":"too bad you missed out on Io in your youth"},"ts":1657663846994,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$d5j9C0t9La9vYfVIvYTjtNdIn_4n17gME_LdmSucKlQ"},
{"content":{"body":"that's what I played around with before I found Factor","msgtype":"m.text","org.matrix.msc1767.text":"that's what I played around with before I found Factor"},"ts":1657663854846,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qJHRJXdXtj28vRqZb12weHNPR9N4ouZhXoYaV1J1aFI"},
{"content":{"body":"arguments can be sent to functions un-evaluated, and then the function can evaluate them in the context of the calling lexical scope!!! and it's all prototypes","msgtype":"m.text","org.matrix.msc1767.text":"arguments can be sent to functions un-evaluated, and then the function can evaluate them in the context of the calling lexical scope!!! and it's all prototypes"},"ts":1657663894179,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gyR01xm2byB2zTDmZCUbVsfgdwesSOoNRtWiTJUoHKU"},
{"content":{"body":"My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files.","msgtype":"m.text","org.matrix.msc1767.text":"My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files."},"ts":1657663895741,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uPMTS_ALypJWFjlK2kTyoPYbl3RFTHPNF99FHgakYo0"},
{"content":{"body":" * My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files.","m.new_content":{"body":"My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files.","msgtype":"m.text","org.matrix.msc1767.text":"My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files."},"m.relates_to":{"event_id":"$uPMTS_ALypJWFjlK2kTyoPYbl3RFTHPNF99FHgakYo0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * My youth was pretty mundane in terms of PLT, except for the bit with church numerals in DOS 6.2 BAT files."},"ts":1657663900663,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$drboLKZ2fep5OTpcY1tc-bLljrrd7Mx22Bzgob-rLQQ"},
{"content":{"body":"was Tcl around then?","msgtype":"m.text","org.matrix.msc1767.text":"was Tcl around then?"},"ts":1657663909098,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lJbLpko4GDNva7T0gtSlnISeqLGRVOorHM0H3kxFgSY"},
{"content":{"body":"Hey, that’s what Guten Tags does :-)","msgtype":"m.text","org.matrix.msc1767.text":"Hey, that’s what Guten Tags does :-)"},"ts":1657663930222,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GpIu0ufDke3sqsCML7pXk2nW4b72twkfpwEyTdgHeh8"},
{"content":{"body":"Io makes the scope chain *literally* a prototype chain","format":"org.matrix.custom.html","formatted_body":"Io makes the scope chain <em>literally</em> a prototype chain","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Io makes the scope chain *literally* a prototype chain","mimetype":"text/plain"},{"body":"Io makes the scope chain <em>literally</em> a prototype chain","mimetype":"text/html"}]},"ts":1657663936362,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$8abPCuecIk2AaLmwqvYjqhpsCP0z4SwoxbqF8ehxFd8"},
{"content":{"body":"Tcl was definitely on my tour of programming languages.","msgtype":"m.text","org.matrix.msc1767.text":"Tcl was definitely on my tour of programming languages."},"ts":1657663943791,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5-cPZwEn-gDJwXxcH7oAB-Zgmg0KGUViy7_qtuEeo-k"},
{"content":{"body":"> <@littledan:matrix.org> Io makes the scope chain *literally* a prototype chain\n\nI would have enjoyed that, indeed.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$8abPCuecIk2AaLmwqvYjqhpsCP0z4SwoxbqF8ehxFd8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Io makes the scope chain <em>literally</em> a prototype chain</blockquote></mx-reply>I would have enjoyed that, indeed.","m.relates_to":{"m.in_reply_to":{"event_id":"$8abPCuecIk2AaLmwqvYjqhpsCP0z4SwoxbqF8ehxFd8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Io makes the scope chain *literally* a prototype chain\n\nI would have enjoyed that, indeed.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$8abPCuecIk2AaLmwqvYjqhpsCP0z4SwoxbqF8ehxFd8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Io makes the scope chain <em>literally</em> a prototype chain</blockquote></mx-reply>I would have enjoyed that, indeed.","mimetype":"text/html"}]},"ts":1657663957817,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ud33RaeNb6irO0un64jQx0Zmrd1BF7XILHYejc-j0uU"},
{"content":{"body":"see, Tcl isn't as general as Io since the subexpressions just evaluate","msgtype":"m.text","org.matrix.msc1767.text":"see, Tcl isn't as general as Io since the subexpressions just evaluate"},"ts":1657663974291,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yhhHuRUdoNYwtNww_p_jD7XRzvmY7dPzTHV5st--aG4"}
]