[
{"content":{"body":"👋 just discussed module reflection, lazy, and import assertions with my team","msgtype":"m.text","org.matrix.msc1767.text":"👋 just discussed module reflection, lazy, and import assertions with my team"},"ts":1670521236256,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$I5EqHRdkEl0Vj3boWgrqhoiloy205STQcsl98iq4J-Y"},
{"content":{"body":"A few notes we have:\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code></li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A few notes we have:\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code></li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1670521399609,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rIN_CHIIyfFeET-WgtRZzjEweGN-2K0nLRzSxpYsoas"},
{"content":{"body":"So I'm not blocking import reflection anymore, but would still very much like to move it into assertions","msgtype":"m.text","org.matrix.msc1767.text":"So I'm not blocking import reflection anymore, but would still very much like to move it into assertions"},"ts":1670521434882,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XK6VqDYE84b8kIO_hWp3Lb4ebSep6Sh-09Kv84ME_uk"},
{"content":{"body":" * So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions","m.new_content":{"body":"So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions","msgtype":"m.text","org.matrix.msc1767.text":"So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions"},"m.relates_to":{"event_id":"$XK6VqDYE84b8kIO_hWp3Lb4ebSep6Sh-09Kv84ME_uk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions"},"ts":1670522074826,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qp2ivFNukXxsj0USSWumHbhg1yC1SO0dwmy3Kv-qfrc"},
{"content":{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"ts":1670522083815,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fxvS0GGt33c1O7FfX2pkRqqo_cGL7fKlbD-5HuQR2CY"},
{"content":{"body":" * A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":" * <p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","m.new_content":{"body":"A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rIN_CHIIyfFeET-WgtRZzjEweGN-2K0nLRzSxpYsoas","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":" * <p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1670522087273,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UM2Il1p321NHMBRJt6IrGNFkCSruC5g__WU4ROE5__8"},
{"content":{"body":" * At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":" * <p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","m.new_content":{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fxvS0GGt33c1O7FfX2pkRqqo_cGL7fKlbD-5HuQR2CY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":" * <p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"ts":1670522159634,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IdmKzd-5JPrIum-aeG7T0bndMoJTNOZ67JUERxK4Y4c"},
{"content":{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, `import.module`, `import.reflect`, or `import.anything` would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","format":"org.matrix.custom.html","formatted_body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, <code>import.module</code>, <code>import.reflect</code>, or <code>import.anything</code> would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, `import.module`, `import.reflect`, or `import.anything` would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","mimetype":"text/plain"},{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, <code>import.module</code>, <code>import.reflect</code>, or <code>import.anything</code> would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","mimetype":"text/html"}]},"ts":1670522272940,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$c3n4HVTDGySz5gHOGuhgnfs1DOzG168Ubrf74m4SPBw"},
{"content":{"body":"In any case, the behavior of an `importHook` doesn’t depend on the `reflect` parameter, so I don’t think it should be communicated in an options bag. The behavior of `importHook` would also not vary based on yulia’s proposed `lazyInit` (by whatever name) either. There’s an implied `phase` or `goalState` parameter that currently defaults to `\"loaded\"` if `reflect: true` and defaults to `\"evaluated\"` otherwise. Neither of those should be communicated to `importHook`.","format":"org.matrix.custom.html","formatted_body":"In any case, the behavior of an <code>importHook</code> doesn’t depend on the <code>reflect</code> parameter, so I don’t think it should be communicated in an options bag. The behavior of <code>importHook</code> would also not vary based on <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>’s proposed <code>lazyInit</code> (by whatever name) either. There’s an implied <code>phase</code> or <code>goalState</code> parameter that currently defaults to <code>&quot;loaded&quot;</code> if <code>reflect: true</code> and defaults to <code>&quot;evaluated&quot;</code> otherwise. Neither of those should be communicated to <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In any case, the behavior of an `importHook` doesn’t depend on the `reflect` parameter, so I don’t think it should be communicated in an options bag. The behavior of `importHook` would also not vary based on yulia’s proposed `lazyInit` (by whatever name) either. There’s an implied `phase` or `goalState` parameter that currently defaults to `\"loaded\"` if `reflect: true` and defaults to `\"evaluated\"` otherwise. Neither of those should be communicated to `importHook`.","mimetype":"text/plain"},{"body":"In any case, the behavior of an <code>importHook</code> doesn’t depend on the <code>reflect</code> parameter, so I don’t think it should be communicated in an options bag. The behavior of <code>importHook</code> would also not vary based on <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>’s proposed <code>lazyInit</code> (by whatever name) either. There’s an implied <code>phase</code> or <code>goalState</code> parameter that currently defaults to <code>&quot;loaded&quot;</code> if <code>reflect: true</code> and defaults to <code>&quot;evaluated&quot;</code> otherwise. Neither of those should be communicated to <code>importHook</code>.","mimetype":"text/html"}]},"ts":1670522469123,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PPeLVgYJ8q1wvG1znHdp5I3zBdhuot4jZFGskGjP-To"},
{"content":{"body":"If we did expose an options bag, we’d need something analogous to HTTP cache-control headers to dictate what properties of the options bag should be incorporated in the module key and in what order. We don’t have a suitable position to stand for those to be consistent between modules or scopes of modules (like packages).","msgtype":"m.text","org.matrix.msc1767.text":"If we did expose an options bag, we’d need something analogous to HTTP cache-control headers to dictate what properties of the options bag should be incorporated in the module key and in what order. We don’t have a suitable position to stand for those to be consistent between modules or scopes of modules (like packages)."},"ts":1670522565193,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eh_9Jt1YSYa9rVLN7dCeHUBMXLVi2x2OuEkALaAP99Q"},
{"content":{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)","format":"org.matrix.custom.html","formatted_body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)","mimetype":"text/plain"},{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)","mimetype":"text/html"}]},"ts":1670522686758,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4"},
{"content":{"body":"So, my reasoning is that we have to consider _why_ we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., `package.json`) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","format":"org.matrix.custom.html","formatted_body":"So, my reasoning is that we have to consider <em>why</em> we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., <code>package.json</code>) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, my reasoning is that we have to consider _why_ we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., `package.json`) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","mimetype":"text/plain"},{"body":"So, my reasoning is that we have to consider <em>why</em> we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., <code>package.json</code>) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","mimetype":"text/html"}]},"ts":1670522688408,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$o-noks40uSOvInxozthKZKneiXuEOeLhJx7t0d7RSqU"},
{"content":{"body":"> <@jridgewell:matrix.org> (Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)\n\nA concrete case will help me understand your objection.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)</blockquote></mx-reply>A concrete case will help me understand your objection.","m.relates_to":{"m.in_reply_to":{"event_id":"$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> (Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)\n\nA concrete case will help me understand your objection.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)</blockquote></mx-reply>A concrete case will help me understand your objection.","mimetype":"text/html"}]},"ts":1670522711983,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$I5z1qHyPrDjx-6j11S6GfcE4puL1Gb8E0e7JV6bwUNM"},
{"content":{"body":"And to be clear, I mean for a subset of the `with` options to be communicated to `importHook`, specifically `type`.","format":"org.matrix.custom.html","formatted_body":"And to be clear, I mean for a subset of the <code>with</code> options to be communicated to <code>importHook</code>, specifically <code>type</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And to be clear, I mean for a subset of the `with` options to be communicated to `importHook`, specifically `type`.","mimetype":"text/plain"},{"body":"And to be clear, I mean for a subset of the <code>with</code> options to be communicated to <code>importHook</code>, specifically <code>type</code>.","mimetype":"text/html"}]},"ts":1670522742789,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MGil9qPaKXEbRv5OygcNFI1rXKi5AXDIIAknlv1EAH0"},
{"content":{"body":"On the premise that the engine knows to incorporate `type` in the memo key.","format":"org.matrix.custom.html","formatted_body":"On the premise that the engine knows to incorporate <code>type</code> in the memo key.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"On the premise that the engine knows to incorporate `type` in the memo key.","mimetype":"text/plain"},{"body":"On the premise that the engine knows to incorporate <code>type</code> in the memo key.","mimetype":"text/html"}]},"ts":1670522765659,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DVBhlkXp08qNUC0dDxDB0x2vIEtgxuCiDxCYhx0LFDA"},
{"content":{"body":"This doesn't come up until Stage 2 of compartments, right, so I'm not objecting to anything currently","msgtype":"m.text","org.matrix.msc1767.text":"This doesn't come up until Stage 2 of compartments, right, so I'm not objecting to anything currently"},"ts":1670522839068,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y8iUrBqSc_duynWQlxihIJxmjjfsi0qtMZSUxgYdl58"},
{"content":{"body":"Why not pass the full options bag to import hook?","msgtype":"m.text","org.matrix.msc1767.text":"Why not pass the full options bag to import hook?"},"ts":1670522851867,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_cOWgUsU2KYgF-eTalk83X7-OjYEjpLWGwDfLCPuBuo"},
{"content":{"body":"My mental model is that the `lazy` and `module` keywords are evaluators of the imported module, and should be passed to import","format":"org.matrix.custom.html","formatted_body":"My mental model is that the <code>lazy</code> and <code>module</code> keywords are evaluators of the imported module, and should be passed to import","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My mental model is that the `lazy` and `module` keywords are evaluators of the imported module, and should be passed to import","mimetype":"text/plain"},{"body":"My mental model is that the <code>lazy</code> and <code>module</code> keywords are evaluators of the imported module, and should be passed to import","mimetype":"text/html"}]},"ts":1670522913238,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z49xxsJxpeyxkAE5sTIJovEjWK0EuhyXY73KO5mxKyo"},
{"content":{"body":"And it just starts getting weird if TC39 has to standardize the keys that are passed to it","msgtype":"m.text","org.matrix.msc1767.text":"And it just starts getting weird if TC39 has to standardize the keys that are passed to it"},"ts":1670522930024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EMw4VezzgoC2uh21qVoaF-rd4FrN7DKInsjPbAWyXoo"},
{"content":{"body":"Passing arbitrary key values to the options bag creates composition hazards. Consider the case that A imports 'my.ttf' with bold and B imports 'my.ttf' with italic. Application C imports A and B. There is a reasonable expectation that the environment coördinates these such that in general, A and B get the same module instance.","msgtype":"m.text","org.matrix.msc1767.text":"Passing arbitrary key values to the options bag creates composition hazards. Consider the case that A imports 'my.ttf' with bold and B imports 'my.ttf' with italic. Application C imports A and B. There is a reasonable expectation that the environment coördinates these such that in general, A and B get the same module instance."},"ts":1670522977023,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FOh0vj2x6iLl4lGVxL6XTO_WVJlW90asUAYDkEmEvxk"},
{"content":{"body":"A `loaders` option is the case that we're currently interested in, but that's definitely not a TC39 concern (and I'm not sure how it'd be done at runtime so this isn't a perfect use case)","format":"org.matrix.custom.html","formatted_body":"A <code>loaders</code> option is the case that we're currently interested in, but that's definitely not a TC39 concern (and I'm not sure how it'd be done at runtime so this isn't a perfect use case)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A `loaders` option is the case that we're currently interested in, but that's definitely not a TC39 concern (and I'm not sure how it'd be done at runtime so this isn't a perfect use case)","mimetype":"text/plain"},{"body":"A <code>loaders</code> option is the case that we're currently interested in, but that's definitely not a TC39 concern (and I'm not sure how it'd be done at runtime so this isn't a perfect use case)","mimetype":"text/html"}]},"ts":1670523035442,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KGUh1K9LzvkkyqHkBvcESV08nWh2JDKzUqidj3BFhZA"},
{"content":{"body":"Loaders doesn’t require the loader to be expressed in individual modules.","msgtype":"m.text","org.matrix.msc1767.text":"Loaders doesn’t require the loader to be expressed in individual modules."},"ts":1670523075348,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pXZEz95wg1xVMT499M9rsyXkEN0AIyI3tLdtn_R7wrw"},
{"content":{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","format":"org.matrix.custom.html","formatted_body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","mimetype":"text/plain"},{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","mimetype":"text/html"}],"m.relates_to":{"event_id":"$FOh0vj2x6iLl4lGVxL6XTO_WVJlW90asUAYDkEmEvxk","is_falling_back":true,"m.in_reply_to":{"event_id":"$FOh0vj2x6iLl4lGVxL6XTO_WVJlW90asUAYDkEmEvxk"},"rel_type":"m.thread"}},"ts":1670523095151,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nSEPux0zTY_0ZSiy_nnN2_jEx6aO0GnrVzOSLx44FFs"},
{"content":{"body":" * See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","format":"org.matrix.custom.html","formatted_body":" * See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","m.new_content":{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","format":"org.matrix.custom.html","formatted_body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","mimetype":"text/plain"},{"body":"See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$nSEPux0zTY_0ZSiy_nnN2_jEx6aO0GnrVzOSLx44FFs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, _not_ passing the assertions is also a composition hazard","mimetype":"text/plain"},{"body":" * See https://github.com/tc39/proposal-import-assertions/issues/125#issuecomment-1340173901, <em>not</em> passing the assertions is also a composition hazard","mimetype":"text/html"}]},"ts":1670523108114,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6zzDwIKsCgEd937U4qjsPVFGMbmV9Tq5oXoDTqS-kOo"},
{"content":{"body":"It’s straightforward to key the loader off the extension and map it to a behavior out-of-band, in a way that will apply to all modules in the same scope, preserving singleton modules.","msgtype":"m.text","org.matrix.msc1767.text":"It’s straightforward to key the loader off the extension and map it to a behavior out-of-band, in a way that will apply to all modules in the same scope, preserving singleton modules."},"ts":1670523136566,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6dA_8KSBiiwT7vOoKfEZ0uqI_gR-kYWpiYMHlqJlgdw"},
{"content":{"body":"All the more straightforward with Layer 0 in play.","msgtype":"m.text","org.matrix.msc1767.text":"All the more straightforward with Layer 0 in play."},"ts":1670523153233,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-T2CsG3bSH6RnELxJbOcEvSlazpIHoWYNEgdk2ocWKQ"},
{"content":{"body":"Though I will agree that functionality should also be implemented by import maps.","msgtype":"m.text","org.matrix.msc1767.text":"Though I will agree that functionality should also be implemented by import maps."},"ts":1670523172372,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eG_k0Fa34QH774YDz6nrx-9bcbUx_qrldqhRg7_YBh8"},
{"content":{"body":"I don't see these cases as being separate? All assertions are possible out of band, so why have any inline?","msgtype":"m.text","org.matrix.msc1767.text":"I don't see these cases as being separate? All assertions are possible out of band, so why have any inline?"},"ts":1670523179772,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$k9s7J_TrK3lWKFJY7lKxFgZiGraPYqZsKwQnRTbBVm4"},
{"content":{"body":"And specifically in the hardened JavaScript case, we’ll want to isolate the loaders in their own “compartments”. It’s a fun scenario to implement.","msgtype":"m.text","org.matrix.msc1767.text":"And specifically in the hardened JavaScript case, we’ll want to isolate the loaders in their own “compartments”. It’s a fun scenario to implement."},"ts":1670523200876,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$a_QHD2huCnP0gvr69JM-_q1SWAETxN4nzMlncLNQGnM"},
{"content":{"body":"> <@jridgewell:matrix.org> I don't see these cases as being separate? All assertions are possible out of band, so why have any inline?\n\nI agree! My personal preference would be to not entertain assertions. But, I will also not block them, provided they compose well with the module memo.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$k9s7J_TrK3lWKFJY7lKxFgZiGraPYqZsKwQnRTbBVm4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don&#39;t see these cases as being separate? All assertions are possible out of band, so why have any inline?</blockquote></mx-reply>I agree! My personal preference would be to not entertain assertions. But, I will also not block them, provided they compose well with the module memo.","m.relates_to":{"m.in_reply_to":{"event_id":"$k9s7J_TrK3lWKFJY7lKxFgZiGraPYqZsKwQnRTbBVm4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> I don't see these cases as being separate? All assertions are possible out of band, so why have any inline?\n\nI agree! My personal preference would be to not entertain assertions. But, I will also not block them, provided they compose well with the module memo.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$k9s7J_TrK3lWKFJY7lKxFgZiGraPYqZsKwQnRTbBVm4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>I don&#39;t see these cases as being separate? All assertions are possible out of band, so why have any inline?</blockquote></mx-reply>I agree! My personal preference would be to not entertain assertions. But, I will also not block them, provided they compose well with the module memo.","mimetype":"text/html"}]},"ts":1670523262957,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YdugBFnCPCJHaMpNBMpqTXGME_vPhUD8eptYd5qDEAo"},
{"content":{"body":"I _vehemently_ agree.","format":"org.matrix.custom.html","formatted_body":"I <em>vehemently</em> agree.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I _vehemently_ agree.","mimetype":"text/plain"},{"body":"I <em>vehemently</em> agree.","mimetype":"text/html"}]},"ts":1670523290882,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ise35RAIZSHL2ps-8v_Zn1eeWeGCBLqF2SaaZ4iVd6M"},
{"content":{"body":"I agree with the 90% of what you two are saying which overlaps, and I could see things either way for the remaining 10%!","msgtype":"m.text","org.matrix.msc1767.text":"I agree with the 90% of what you two are saying which overlaps, and I could see things either way for the remaining 10%!"},"ts":1670523307018,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$I4AyoIiM3CEh2vU70B-RGumZclOrcr84PIkoX9z5MME"},
{"content":{"body":"I think ergonomics will suffer because of it.","msgtype":"m.text","org.matrix.msc1767.text":"I think ergonomics will suffer because of it."},"ts":1670523312348,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BgSBsX47TL_QirwD_1CxSt46MoqZ6dqHss4aPoxKwX4"},
{"content":{"body":"vehemently so","msgtype":"m.text","org.matrix.msc1767.text":"vehemently so"},"ts":1670523312361,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BhPo5cII9aASWJTvMoLBoLynFB8Xj2gV9oBOL1aYsHY"},
{"content":{"body":"Inline configuration is just easier to do","msgtype":"m.text","org.matrix.msc1767.text":"Inline configuration is just easier to do"},"ts":1670523345675,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$WVDhxOd___8aZgrRzcJCwOQNd1K4bog2nbC1Bd4be9Y"},
{"content":{"body":"I could honestly see things either way on TC39 vs yolo to maintain the space of attribute keys","msgtype":"m.text","org.matrix.msc1767.text":"I could honestly see things either way on TC39 vs yolo to maintain the space of attribute keys"},"ts":1670523349102,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0TqZwgXoXfYdC5hPYdDjFW94_IqV9uRQ8SUCoElYywQ"},
{"content":{"body":"“Faster, easier, more seductive”","msgtype":"m.text","org.matrix.msc1767.text":"“Faster, easier, more seductive”"},"ts":1670523361241,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6hEYyfRFqjudHndQx99DhjaqhB9_rfXcEzhoAwXQT7Q"},
{"content":{"body":"(leaning towards TC39 tbh)","msgtype":"m.text","org.matrix.msc1767.text":"(leaning towards TC39 tbh)"},"ts":1670523364522,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$2_upOeQ0xynYAxbn1Dh4xEh5yIqbijuRnISY_k9LjWg"},
{"content":{"body":"it would be pretty nice to have keys that are entirely handled by the JS spec. Both reflect and lazyInit make sense for this.","msgtype":"m.text","org.matrix.msc1767.text":"it would be pretty nice to have keys that are entirely handled by the JS spec. Both reflect and lazyInit make sense for this."},"ts":1670523438494,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$kLgX2rpkirDiU0HF8FeCHCYm8RBXA1KDufMgl-DUVW8"},
{"content":{"body":"I’m also trying to recapitulate the creation of a closet industry of WebPack Configuration Engineers, which just falls out from failing to allow libraries to configure themselves locally. I think we agree on that.","msgtype":"m.text","org.matrix.msc1767.text":"I’m also trying to recapitulate the creation of a closet industry of WebPack Configuration Engineers, which just falls out from failing to allow libraries to configure themselves locally. I think we agree on that."},"ts":1670523439999,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QFxjUfichRi8T9xFB-0Pzx5uhouyMns_w-rzQgX-qJY"},
{"content":{"body":"Oh man, don't make me go back to specifying loaders in config, I don't want https://esbuild.github.io/api/#loader again","msgtype":"m.text","org.matrix.msc1767.text":"Oh man, don't make me go back to specifying loaders in config, I don't want https://esbuild.github.io/api/#loader again"},"ts":1670523444695,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XHsSzgdEOa7NvfEIZzi8erCtPKj5nrIkQeIGEzoTTAA"},
{"content":{"body":"OK, I think this is actually the core disagreement: some people think it's good to factor the configuration out into a separate file and some people think it should be inline","msgtype":"m.text","org.matrix.msc1767.text":"OK, I think this is actually the core disagreement: some people think it's good to factor the configuration out into a separate file and some people think it should be inline"},"ts":1670523477382,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KpZNRA-vPYmYr0cCgwBEtusYlNmoPJ0rHGI70ckCLRY"},
{"content":{"body":"Static inline is just so nice to deal with during tooling","msgtype":"m.text","org.matrix.msc1767.text":"Static inline is just so nice to deal with during tooling"},"ts":1670523478955,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LO_Mf0xejy3MQYJGOyZBknt0pkjgne99hszCTQU4QSA"},
{"content":{"body":"I think we should dig into this more somehow. We've just been shouting opposite assertions at each other on this topic, so far","msgtype":"m.text","org.matrix.msc1767.text":"I think we should dig into this more somehow. We've just been shouting opposite assertions at each other on this topic, so far"},"ts":1670523511708,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$9UvI8OjvruiyycjiM-dUdPGnrCxZB2AEuPSjPl4fynI"},
{"content":{"body":"I would suffice it to say, have done that differently https://github.com/gutentags/system#extensions","msgtype":"m.text","org.matrix.msc1767.text":"I would suffice it to say, have done that differently https://github.com/gutentags/system#extensions"},"ts":1670523524457,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0FobXi9HmbbOYfmlkDv1k8BMr3jFW_ia_0IOF-WEKwA"},
{"content":{"body":"If we do want inline configuration, this isn't necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose","msgtype":"m.text","org.matrix.msc1767.text":"If we do want inline configuration, this isn't necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose"},"ts":1670523587391,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bg8YEdS7IXFHYjKUMqGYM2rFpTU4QOMWZrLLLPJQ4zA"},
{"content":{"body":"For the record, I agree that inline configuration is nice. I just think it’s an attractive nuisance.","msgtype":"m.text","org.matrix.msc1767.text":"For the record, I agree that inline configuration is nice. I just think it’s an attractive nuisance."},"ts":1670523604263,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$SiPFEsWy65LKMS0AOHWiIByJqHxtVpjPAwwzN1qNhIw"},
{"content":{"body":"this key could be rejected at runtime, or ignored at runtime (or we could have two keys, one with each behavior...)","msgtype":"m.text","org.matrix.msc1767.text":"this key could be rejected at runtime, or ignored at runtime (or we could have two keys, one with each behavior...)"},"ts":1670523604752,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ck5iZUM95TVUyqs2xQ5kfubwjPfdmNQD4LE2AhOzWLA"},
{"content":{"body":"(this is assuming that you can embed further objects inside of that key)","msgtype":"m.text","org.matrix.msc1767.text":"(this is assuming that you can embed further objects inside of that key)"},"ts":1670523626513,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$lrsCQ1ZHBs4KdHHUeav0_R3b7haNLUQi5aYob5NO3mQ"},
{"content":{"body":"(Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","format":"org.matrix.custom.html","formatted_body":"(Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/plain"},{"body":"(Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/html"}]},"ts":1670523629238,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fVlIZCVG4UzbW3HWQbmTuJyXvGUa-7chrxO1SyvGI9c"},
{"content":{"body":"> <@kriskowal:matrix.org> And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.\n\nWe actually do this internally in Bloomberg and it works really well; I totally recommend it.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$fVlIZCVG4UzbW3HWQbmTuJyXvGUa-7chrxO1SyvGI9c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.</blockquote></mx-reply>We actually do this internally in Bloomberg and it works really well; I totally recommend it.","m.relates_to":{"m.in_reply_to":{"event_id":"$fVlIZCVG4UzbW3HWQbmTuJyXvGUa-7chrxO1SyvGI9c"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.\n\nWe actually do this internally in Bloomberg and it works really well; I totally recommend it.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$fVlIZCVG4UzbW3HWQbmTuJyXvGUa-7chrxO1SyvGI9c?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.</blockquote></mx-reply>We actually do this internally in Bloomberg and it works really well; I totally recommend it.","mimetype":"text/html"}]},"ts":1670523654893,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ph-Fg2VrJSft2yjk7ED5z6dS140zo9QRHIaEB_jAiZ8"},
{"content":{"body":" * (Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","format":"org.matrix.custom.html","formatted_body":" * (Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","m.new_content":{"body":"(Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","format":"org.matrix.custom.html","formatted_body":"(Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/plain"},{"body":"(Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fVlIZCVG4UzbW3HWQbmTuJyXvGUa-7chrxO1SyvGI9c","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * (Aside from a prior conversation: And I also agree littledan that having the _major_ version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/plain"},{"body":" * (Aside from a prior conversation: And I also agree <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> that having the <em>major</em> version in a specifier is a good alternate universe, as in Go.)","mimetype":"text/html"}]},"ts":1670523657771,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5igwHRLU-BmpybXliV6LXnhInVMGshzjC_f90f6lPBo"},
{"content":{"body":"but yeah it is too late","msgtype":"m.text","org.matrix.msc1767.text":"but yeah it is too late"},"ts":1670523673186,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nnpfs7vLyp0-Ds2Y44Jlc6-I2CANO8OINmzPYrY_PDk"},
{"content":{"body":"(In the Go ecosystem, incorporating the major version in the name allows libraries to gracefully migrate implementation between major version trains, since applications can have a singleton of both versions.)","msgtype":"m.text","org.matrix.msc1767.text":"(In the Go ecosystem, incorporating the major version in the name allows libraries to gracefully migrate implementation between major version trains, since applications can have a singleton of both versions.)"},"ts":1670523732802,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$O__7KCuNBwl4tYtm3S8G9PPh-cMuZzSOSwciMqpdgVM"},
{"content":{"body":"aside: If we do switch to `with`, we might consider a syntax which is a little nicer, with fewer brackets, like `import json from \"./foo.json\", type: \"json\"`. This could extend to arbitrary keys without ASI hazards.","format":"org.matrix.custom.html","formatted_body":"aside: If we do switch to <code>with</code>, we might consider a syntax which is a little nicer, with fewer brackets, like <code>import json from &quot;./foo.json&quot;, type: &quot;json&quot;</code>. This could extend to arbitrary keys without ASI hazards.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"aside: If we do switch to `with`, we might consider a syntax which is a little nicer, with fewer brackets, like `import json from \"./foo.json\", type: \"json\"`. This could extend to arbitrary keys without ASI hazards.","mimetype":"text/plain"},{"body":"aside: If we do switch to <code>with</code>, we might consider a syntax which is a little nicer, with fewer brackets, like <code>import json from &quot;./foo.json&quot;, type: &quot;json&quot;</code>. This could extend to arbitrary keys without ASI hazards.","mimetype":"text/html"}]},"ts":1670523743031,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ldgDe52Q08PVBpBGd4wb2MmFTRAv2Vw6TTDNvmQS540"},
{"content":{"body":"It’s never too late to make a `name2` package.","format":"org.matrix.custom.html","formatted_body":"It’s never too late to make a <code>name2</code> package.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"It’s never too late to make a `name2` package.","mimetype":"text/plain"},{"body":"It’s never too late to make a <code>name2</code> package.","mimetype":"text/html"}]},"ts":1670523755740,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$4fXTm5bPJ_hoP1EiIq76x4VCtE2Pk7M8HCyupiaff1c"},
{"content":{"body":"`assert` was essential to be explicit, since this was chosen to indicate the mental model. `with` doesn't mean anything in particular.","format":"org.matrix.custom.html","formatted_body":"<code>assert</code> was essential to be explicit, since this was chosen to indicate the mental model. <code>with</code> doesn't mean anything in particular.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`assert` was essential to be explicit, since this was chosen to indicate the mental model. `with` doesn't mean anything in particular.","mimetype":"text/plain"},{"body":"<code>assert</code> was essential to be explicit, since this was chosen to indicate the mental model. <code>with</code> doesn't mean anything in particular.","mimetype":"text/html"}]},"ts":1670523814893,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NJjvohaXz72bqSbteKcn-irQCAE3VLtxioGBGToMTkk"},
{"content":{"body":"The colons might even be unnecessary.","msgtype":"m.text","org.matrix.msc1767.text":"The colons might even be unnecessary."},"ts":1670523818615,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wykFDgmEzp87EG6GfkzD33anIDy4HxFkIiIKCv21fUQ"},
{"content":{"body":"eh I guess so, but the comma is necessary","msgtype":"m.text","org.matrix.msc1767.text":"eh I guess so, but the comma is necessary"},"ts":1670523831317,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-ikmWbvXC3Kcp3ERX1Xw_q7W6m6Hir1b_ePazAbKKJo"},
{"content":{"body":"to avoid ASI hazards","msgtype":"m.text","org.matrix.msc1767.text":"to avoid ASI hazards"},"ts":1670523836815,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Jw5LHCZdVYA2_x2bNmKUV7kkQBVkI0-DSEJG5ph3CXQ"},
{"content":{"body":"it becomes more important if you have multiple things attached; with just one `assert` it is manageable","format":"org.matrix.custom.html","formatted_body":"it becomes more important if you have multiple things attached; with just one <code>assert</code> it is manageable","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it becomes more important if you have multiple things attached; with just one `assert` it is manageable","mimetype":"text/plain"},{"body":"it becomes more important if you have multiple things attached; with just one <code>assert</code> it is manageable","mimetype":"text/html"}]},"ts":1670523851322,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DykWmjFBGTKhaWTesr4-8vwTIDiZOJI8LqPSFTDb9eQ"},
{"content":{"body":"we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\" type(\"json\") {}`","format":"org.matrix.custom.html","formatted_body":"we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot; type(&quot;json&quot;) {}</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\" type(\"json\") {}`","mimetype":"text/plain"},{"body":"we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot; type(&quot;json&quot;) {}</code>","mimetype":"text/html"}]},"ts":1670523894486,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$y3OACr9dP0ntPYeRbAe5Su0d8juMsNI1Fl_sXAyb1I0"},
{"content":{"body":"the `{}` is just for fun","format":"org.matrix.custom.html","formatted_body":"the <code>{}</code> is just for fun","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"the `{}` is just for fun","mimetype":"text/plain"},{"body":"the <code>{}</code> is just for fun","mimetype":"text/html"}]},"ts":1670523898419,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$AM5kCVrbKqYND7xE2hAtNnUvqGDKriwVM9guNkZBybc"},
{"content":{"body":" * we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\", type(\"json\") {}`","format":"org.matrix.custom.html","formatted_body":" * we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot;, type(&quot;json&quot;) {}</code>","m.new_content":{"body":"we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\", type(\"json\") {}`","format":"org.matrix.custom.html","formatted_body":"we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot;, type(&quot;json&quot;) {}</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\", type(\"json\") {}`","mimetype":"text/plain"},{"body":"we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot;, type(&quot;json&quot;) {}</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$y3OACr9dP0ntPYeRbAe5Su0d8juMsNI1Fl_sXAyb1I0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * we could use C++ initializer list syntax! the possibilities are endless! `import json from \"./foo.json\", type(\"json\") {}`","mimetype":"text/plain"},{"body":" * we could use C++ initializer list syntax! the possibilities are endless! <code>import json from &quot;./foo.json&quot;, type(&quot;json&quot;) {}</code>","mimetype":"text/html"}]},"ts":1670523937445,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uMW1cTqSEAW3m2nTgWQ0gVt5F_RUbSSuJAJtphFufPI"},
{"content":{"body":"> <@littledan:matrix.org> the `{}` is just for fun\n\nIt's to incorporate module declarations in that syntax!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$AM5kCVrbKqYND7xE2hAtNnUvqGDKriwVM9guNkZBybc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br />the <code>{}</code> is just for fun</blockquote></mx-reply>It's to incorporate module declarations in that syntax!","m.relates_to":{"m.in_reply_to":{"event_id":"$AM5kCVrbKqYND7xE2hAtNnUvqGDKriwVM9guNkZBybc"}},"msgtype":"m.text"},"ts":1670523986063,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$YEGvAt4-5GHv9ssZfIbjSNITgHRlLCZpYpeIWP25OW0"},
{"content":{"body":"I guess with a colon, it gives an intuition of \"these are arbitrary key/value pairs\" and without, it feels like \"this is a keyword that TC39 made\" (probably I'm overthinking this)","msgtype":"m.text","org.matrix.msc1767.text":"I guess with a colon, it gives an intuition of \"these are arbitrary key/value pairs\" and without, it feels like \"this is a keyword that TC39 made\" (probably I'm overthinking this)"},"ts":1670524010505,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MPzf1eQAvoj0b2i8g8ATpQfp3evYjcRdOjM5rPLyOM0"},
{"content":{"body":"> <@littledan:matrix.org> If we do want inline configuration, this isn't necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose\n\nReturning to the theme, are you concretely suggesting something like `import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}`?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$bg8YEdS7IXFHYjKUMqGYM2rFpTU4QOMWZrLLLPJQ4zA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>If we do want inline configuration, this isn&#39;t necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose</blockquote></mx-reply>Returning to the theme, are you concretely suggesting something like <code>import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}</code>?","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$bg8YEdS7IXFHYjKUMqGYM2rFpTU4QOMWZrLLLPJQ4zA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> If we do want inline configuration, this isn't necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose\n\nReturning to the theme, are you concretely suggesting something like `import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}`?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$bg8YEdS7IXFHYjKUMqGYM2rFpTU4QOMWZrLLLPJQ4zA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>If we do want inline configuration, this isn&#39;t necessarily incompatible with a TC39-curated list of top-level keys. We could, in theory, reserve a particular key for this purpose</blockquote></mx-reply>Returning to the theme, are you concretely suggesting something like <code>import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}</code>?","mimetype":"text/html"}]},"ts":1670524010817,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$VZX3Tf92YJCvNpky5DGbvCwPccjWuSnRLdtfOlNT_OY"},
{"content":{"body":"Lol, one of the suggestions was to not have a keyword `import foo from 'foo' { type: 'json' }`","format":"org.matrix.custom.html","formatted_body":"Lol, one of the suggestions was to not have a keyword <code>import foo from 'foo' { type: 'json' }</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Lol, one of the suggestions was to not have a keyword `import foo from 'foo' { type: 'json' }`","mimetype":"text/plain"},{"body":"Lol, one of the suggestions was to not have a keyword <code>import foo from 'foo' { type: 'json' }</code>","mimetype":"text/html"}]},"ts":1670524025710,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$eKxR__Obyiy_swU1O3rq9KAgjDIleeKEsQhXfIXzEBo"},
{"content":{"body":"> <@kriskowal:matrix.org> Returning to the theme, are you concretely suggesting something like `import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}`?\n\nyeah this is what I was suggesting","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$VZX3Tf92YJCvNpky5DGbvCwPccjWuSnRLdtfOlNT_OY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Returning to the theme, are you concretely suggesting something like <code>import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}</code>?</blockquote></mx-reply>yeah this is what I was suggesting","m.relates_to":{"m.in_reply_to":{"event_id":"$VZX3Tf92YJCvNpky5DGbvCwPccjWuSnRLdtfOlNT_OY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Returning to the theme, are you concretely suggesting something like `import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}`?\n\nyeah this is what I was suggesting","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$VZX3Tf92YJCvNpky5DGbvCwPccjWuSnRLdtfOlNT_OY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Returning to the theme, are you concretely suggesting something like <code>import example from 'example.com', type 'woff2', lazyInit true, etc {bold: true, italic; true}</code>?</blockquote></mx-reply>yeah this is what I was suggesting","mimetype":"text/html"}]},"ts":1670524026666,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$6_yY1U1844YGfHOTGzRw2Rr04MaI1woDiN_5GSY3lvI"},
{"content":{"body":"(with appropriate NLT)","msgtype":"m.text","org.matrix.msc1767.text":"(with appropriate NLT)"},"ts":1670524034837,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$6yLPHuFQaJgTKkDVZcBKs16j-6xSLzdZoKE5ifKAapk"},
{"content":{"body":"Where, `etc` is not incorporated in the memo key?","format":"org.matrix.custom.html","formatted_body":"Where, <code>etc</code> is not incorporated in the memo key?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Where, `etc` is not incorporated in the memo key?","mimetype":"text/plain"},{"body":"Where, <code>etc</code> is not incorporated in the memo key?","mimetype":"text/html"}]},"ts":1670524038537,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0IJWEm4OsLfmn71k8LKWr1RIrKbXXHxv0RLjBvy4Xvk"},
{"content":{"body":"I would argue that anything in etc should be rejected in non-tooling","msgtype":"m.text","org.matrix.msc1767.text":"I would argue that anything in etc should be rejected in non-tooling"},"ts":1670524077623,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1q4-iQbHIBgZSS-sR362cGpIIbzTdOeGvi3yw-TFdJc"},
{"content":{"body":"that is, the whole syntax of `, etc {...}` would be tooling-only syntax","format":"org.matrix.custom.html","formatted_body":"that is, the whole syntax of <code>, etc {...}</code> would be tooling-only syntax","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"that is, the whole syntax of `, etc {...}` would be tooling-only syntax","mimetype":"text/plain"},{"body":"that is, the whole syntax of <code>, etc {...}</code> would be tooling-only syntax","mimetype":"text/html"}]},"ts":1670524088923,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NsVhgnbahmogB4lw-oPR0Vlr7yd08FPjnJCiyAf-YgM"},
{"content":{"body":"Ah, like TypeScript comments.","msgtype":"m.text","org.matrix.msc1767.text":"Ah, like TypeScript comments."},"ts":1670524100392,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gI8H4VEke2ORN8wQKG4m33qVbpYD7_soOMV5H8yrAmw"},
{"content":{"body":"well, maybe it would be ignored at runtime, or maybe rejected. type annotations are based on the \"ignore\" idea.","msgtype":"m.text","org.matrix.msc1767.text":"well, maybe it would be ignored at runtime, or maybe rejected. type annotations are based on the \"ignore\" idea."},"ts":1670524121908,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$NPVQJRGGJvI-N7B0E3_K9UUG5QBke-SPp2RvhDiPX3Q"},
{"content":{"body":"my intuition was rejected but Rob was leaning ignore","msgtype":"m.text","org.matrix.msc1767.text":"my intuition was rejected but Rob was leaning ignore"},"ts":1670524133676,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$KPovAhDoU0hiM8iPloehxEBJgx8HK1klPsYLsdHOB-Y"},
{"content":{"body":"rejected is compatible with just not mentioning the `etc` key in the spec at all :)","format":"org.matrix.custom.html","formatted_body":"rejected is compatible with just not mentioning the <code>etc</code> key in the spec at all :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"rejected is compatible with just not mentioning the `etc` key in the spec at all :)","mimetype":"text/plain"},{"body":"rejected is compatible with just not mentioning the <code>etc</code> key in the spec at all :)","mimetype":"text/html"}]},"ts":1670524152630,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$L4Drhxi1XvkoRqUTuEAqdySOmcMqURx7V2vLkfd93Ts"},
{"content":{"body":"> <@littledan:matrix.org> rejected is compatible with just not mentioning the `etc` key in the spec at all :)\n\nTrue","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$L4Drhxi1XvkoRqUTuEAqdySOmcMqURx7V2vLkfd93Ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>rejected is compatible with just not mentioning the <code>etc</code> key in the spec at all :)</blockquote></mx-reply>True","m.relates_to":{"m.in_reply_to":{"event_id":"$L4Drhxi1XvkoRqUTuEAqdySOmcMqURx7V2vLkfd93Ts"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> rejected is compatible with just not mentioning the `etc` key in the spec at all :)\n\nTrue","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$L4Drhxi1XvkoRqUTuEAqdySOmcMqURx7V2vLkfd93Ts?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>rejected is compatible with just not mentioning the <code>etc</code> key in the spec at all :)</blockquote></mx-reply>True","mimetype":"text/html"}]},"ts":1670524179380,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hlVZ5euKIBpqSRrXMz_PWmEEKZdyrZQBE-VPBsgdZ6E"},
{"content":{"body":"> <@jridgewell:matrix.org> (with appropriate NLT)\n\nPardon my ignorance, NLT?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$6yLPHuFQaJgTKkDVZcBKs16j-6xSLzdZoKE5ifKAapk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(with appropriate NLT)</blockquote></mx-reply>Pardon my ignorance, NLT?","m.relates_to":{"is_falling_back":false,"m.in_reply_to":{"event_id":"$6yLPHuFQaJgTKkDVZcBKs16j-6xSLzdZoKE5ifKAapk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> (with appropriate NLT)\n\nPardon my ignorance, NLT?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$6yLPHuFQaJgTKkDVZcBKs16j-6xSLzdZoKE5ifKAapk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(with appropriate NLT)</blockquote></mx-reply>Pardon my ignorance, NLT?","mimetype":"text/html"}]},"ts":1670524212359,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$CaJXliagLwjkAl6lwpqbL6UQtyRYbKOPXVLlMDgGCG8"},
{"content":{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","format":"org.matrix.custom.html","formatted_body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","mimetype":"text/plain"},{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","mimetype":"text/html"}]},"ts":1670524222882,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ikDhGQkrxwjgMgY5y5n8R8coCIOnzZYEoJV-mQVT6jI"},
{"content":{"body":"No Line Terminator, it's to prevent ASI hazards","msgtype":"m.text","org.matrix.msc1767.text":"No Line Terminator, it's to prevent ASI hazards"},"ts":1670524229225,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UyqsP5gisJE6qp--eGlBrt-NgsaMo4R6B3Hk4Uvlpps"},
{"content":{"body":" * also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","format":"org.matrix.custom.html","formatted_body":" * also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","m.new_content":{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","format":"org.matrix.custom.html","formatted_body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","mimetype":"text/plain"},{"body":"also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$ikDhGQkrxwjgMgY5y5n8R8coCIOnzZYEoJV-mQVT6jI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do `import example from './path', lazyInit`","mimetype":"text/plain"},{"body":" * also, if we have a fixed set of keys, we can say that some of them don't bother with arguments. So we can do <code>import example from './path', lazyInit</code>","mimetype":"text/html"}]},"ts":1670524230580,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$575AriNU1ZAO3y8rJI3yIGXarRBFxsGmSW_wIdwVo74"},
{"content":{"body":"or, to create them!","msgtype":"m.text","org.matrix.msc1767.text":"or, to create them!"},"ts":1670524247662,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$DmCQSxWqtbLqaigGrxdvZveMUq9Sz240T3f7crV767Q"},
{"content":{"body":"https://tc39.es/ecma262/multipage/notational-conventions.html#sec-no-lineterminator-here","msgtype":"m.text","org.matrix.msc1767.text":"https://tc39.es/ecma262/multipage/notational-conventions.html#sec-no-lineterminator-here"},"ts":1670524250694,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Bl87YUPT1AXBg_OpQb6vuvlWfbbuAuRnlITGso4KmvA"},
{"content":{"body":"Yeah, I’m familiar. Just never internalized the initialism. Thank you!","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I’m familiar. Just never internalized the initialism. Thank you!"},"ts":1670524306130,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yDQj3IA0n1Jh4MoJGvmpDwFJhwcUmMGTHzkPy5gX-T8"},
{"content":{"body":"Justin Ridgewell: How do bundlers currently deal with the scenario I presented above, with a diamond dependency and conflicting hints? Do these scenarios just not occur in practice, or just seldom enough that it’s easy to live with arbitrary merge rules?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: How do bundlers currently deal with the scenario I presented above, with a diamond dependency and conflicting hints? Do these scenarios just not occur in practice, or just seldom enough that it’s easy to live with arbitrary merge rules?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Justin Ridgewell: How do bundlers currently deal with the scenario I presented above, with a diamond dependency and conflicting hints? Do these scenarios just not occur in practice, or just seldom enough that it’s easy to live with arbitrary merge rules?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a>: How do bundlers currently deal with the scenario I presented above, with a diamond dependency and conflicting hints? Do these scenarios just not occur in practice, or just seldom enough that it’s easy to live with arbitrary merge rules?","mimetype":"text/html"}]},"ts":1670524432041,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$P2W8KB5pj7R10HUmSDOkWQA6jcqn6Zre2nSrcSWhJ5M"},
{"content":{"body":"I could easily see libraries responding to bugs that emerge from arbitrary conflict resolution with the old “doctor doctor it hurts” / “stop hitting yourself”","msgtype":"m.text","org.matrix.msc1767.text":"I could easily see libraries responding to bugs that emerge from arbitrary conflict resolution with the old “doctor doctor it hurts” / “stop hitting yourself”"},"ts":1670524504366,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yv827Dxjt5bnp4JvQJboZphpyYZfNPrvaNU1nxKovwg"},
{"content":{"body":"In esbuild/turbopack I would be using special specifiers to communicate to the bundler, which means they're individual instances","msgtype":"m.text","org.matrix.msc1767.text":"In esbuild/turbopack I would be using special specifiers to communicate to the bundler, which means they're individual instances"},"ts":1670524541367,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$n8iyOROMH8t_7VjHVcJ2Rs05lnqsp0F-GdEmvhfvHOI"},
{"content":{"body":"I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws"},"ts":1670524564342,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$YOzLI3UpM5d3r6KKLhaGEY8uggqiGY0wdszOVCxt05I"},
{"content":{"body":" * I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws","m.new_content":{"body":"I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws"},"m.relates_to":{"event_id":"$YOzLI3UpM5d3r6KKLhaGEY8uggqiGY0wdszOVCxt05I","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I'm not sure how webpack handles it's inline loader specifier, if it performs dedupe or throws"},"ts":1670524568968,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$q2s6Nghv3HVZ7GrAKb1VRsa6TTqyr0mWemReccWGiek"},
{"content":{"body":"So the specifiers and the meta would need to agree?","msgtype":"m.text","org.matrix.msc1767.text":"So the specifiers and the meta would need to agree?"},"ts":1670524572426,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$cT7GgZh4ALS38_HGW-LcRfwPEWwdP0qMVGk4jDparwU"},
{"content":{"body":"I think such cloning is more acceptable for some kinds of assets than for stateful code","msgtype":"m.text","org.matrix.msc1767.text":"I think such cloning is more acceptable for some kinds of assets than for stateful code"},"ts":1670524574035,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$n1VsWg3UlzlT-yHxZHRMRD0cSfjkEKBwQpULTzJ_BeU"},
{"content":{"body":"people don't really want their stateful modules to be cloned","msgtype":"m.text","org.matrix.msc1767.text":"people don't really want their stateful modules to be cloned"},"ts":1670524587691,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$TJTqZ_qU5qjNgLavpopzPa2vJm16QhJRtD9eFDK_jR4"},
{"content":{"body":"especially if they forget they are stateful","msgtype":"m.text","org.matrix.msc1767.text":"especially if they forget they are stateful"},"ts":1670524597504,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-I5jmEZceZaikTUw3RzqKKJZ0z07rsBdUE9LJGW9kFs"},
{"content":{"body":"This isn't something I usually hit, though, because importing a special loader module is usually handled by one parent module that wraps","msgtype":"m.text","org.matrix.msc1767.text":"This isn't something I usually hit, though, because importing a special loader module is usually handled by one parent module that wraps"},"ts":1670524610684,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$kBdo_TJwcnscryn-wvTPqonDWTtOIfFHxx1YyebcITs"},
{"content":{"body":"or identity discontinuity surprises","msgtype":"m.text","org.matrix.msc1767.text":"or identity discontinuity surprises"},"ts":1670524611515,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$x5hbHDHkYgSMEPCaOIUIAh_gkByzF-2YWkzYuQkCatE"},
{"content":{"body":"right that too","msgtype":"m.text","org.matrix.msc1767.text":"right that too"},"ts":1670524621317,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rko5I5LBdn1K3Gd215SfQg6Jos6SO0WC5YRJTC3YV1M"},
{"content":{"body":"Yeah, I agree that with care, the hazard can be avoided.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, I agree that with care, the hazard can be avoided."},"ts":1670524636668,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6En5LTWYKL6nP1ayGfWuIRNJ5IvY_jlb9qTB4f3azlY"},
{"content":{"body":"Yah, esbuild has no deduping unless the loader plugin specifically does it","msgtype":"m.text","org.matrix.msc1767.text":"Yah, esbuild has no deduping unless the loader plugin specifically does it"},"ts":1670524643505,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$CYrfgnZ8us1b8myVYwytQ0crguNgbI51y768EM8zXWY"},
{"content":{"body":"this is specifically why we didn't want to have arbitrary uninterpreted evaluator attributes that you could access with import.meta.attributes--because the implicit cloning is unintuitive.","msgtype":"m.text","org.matrix.msc1767.text":"this is specifically why we didn't want to have arbitrary uninterpreted evaluator attributes that you could access with import.meta.attributes--because the implicit cloning is unintuitive."},"ts":1670524684259,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7AhN3jV10zK5j_Yj47SepHFw6bRfAz0fHoN0XyW5kFc"},
{"content":{"body":"And also that the `importHook` is in a position where it can implement an arbitrary policy for duplicating, sharing, or rejecting for conflicts, as long as it knows all the keys used by the corresponding user code.","format":"org.matrix.custom.html","formatted_body":"And also that the <code>importHook</code> is in a position where it can implement an arbitrary policy for duplicating, sharing, or rejecting for conflicts, as long as it knows all the keys used by the corresponding user code.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And also that the `importHook` is in a position where it can implement an arbitrary policy for duplicating, sharing, or rejecting for conflicts, as long as it knows all the keys used by the corresponding user code.","mimetype":"text/plain"},{"body":"And also that the <code>importHook</code> is in a position where it can implement an arbitrary policy for duplicating, sharing, or rejecting for conflicts, as long as it knows all the keys used by the corresponding user code.","mimetype":"text/html"}]},"ts":1670524732844,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rdM0ZbZ21-mgKqk0bV8myWOfUuuyn7W6jhOykwP37Uw"},
{"content":{"body":"It sounds like we agree that the specifier should be the only memo key though, which is interesting.","msgtype":"m.text","org.matrix.msc1767.text":"It sounds like we agree that the specifier should be the only memo key though, which is interesting."},"ts":1670524775350,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$knqKjEeYAjZE9TV_S4XKqcw841gDEoP7N7n_T72VWWI"},
{"content":{"body":" * It sounds like we agree that the specifier should be the only memo key though, which is interesting.","m.new_content":{"body":"It sounds like we agree that the specifier should be the only memo key though, which is interesting.","msgtype":"m.text","org.matrix.msc1767.text":"It sounds like we agree that the specifier should be the only memo key though, which is interesting."},"m.relates_to":{"event_id":"$knqKjEeYAjZE9TV_S4XKqcw841gDEoP7N7n_T72VWWI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * It sounds like we agree that the specifier should be the only memo key though, which is interesting."},"ts":1670524785885,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wBhfr-Bt4wXFl5kT6y0dnKVO3ImxaigvlF6L_bXXSUw"},
{"content":{"body":"> <@kriskowal:matrix.org> It sounds like we agree that the specifier should be the only memo key though, which is interesting.\n\nhmm, I'm not sure that's always true, I'd need to think more about it","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$knqKjEeYAjZE9TV_S4XKqcw841gDEoP7N7n_T72VWWI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It sounds like we agree that the specifier should be the only memo key though, which is interesting.</blockquote></mx-reply>hmm, I'm not sure that's always true, I'd need to think more about it","m.relates_to":{"m.in_reply_to":{"event_id":"$knqKjEeYAjZE9TV_S4XKqcw841gDEoP7N7n_T72VWWI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> It sounds like we agree that the specifier should be the only memo key though, which is interesting.\n\nhmm, I'm not sure that's always true, I'd need to think more about it","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$knqKjEeYAjZE9TV_S4XKqcw841gDEoP7N7n_T72VWWI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>It sounds like we agree that the specifier should be the only memo key though, which is interesting.</blockquote></mx-reply>hmm, I'm not sure that's always true, I'd need to think more about it","mimetype":"text/html"}]},"ts":1670524802120,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$BaRkqMuuRv8aoe9FwZQRQcLJ_qjD5DGHcci_QSwZJgw"},
{"content":{"body":"definitely not true if you want to configure assets sometimes","msgtype":"m.text","org.matrix.msc1767.text":"definitely not true if you want to configure assets sometimes"},"ts":1670524810555,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$58NyXbn2nejluNM6AmFfxlK-8Gu4-Cty5OHxQoz8dTE"},
{"content":{"body":"for JS code... maybe...","msgtype":"m.text","org.matrix.msc1767.text":"for JS code... maybe..."},"ts":1670524821064,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$di7JMYY0xOaXQRCQnn-PoSvMDncvYTHCAtEqmu-Yado"},
{"content":{"body":"I mean, it seems like Justin Ridgewell always uses unique memo keys to avoid the hazard, at least.","format":"org.matrix.custom.html","formatted_body":"I mean, it seems like <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> always uses unique memo keys to avoid the hazard, at least.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I mean, it seems like Justin Ridgewell always uses unique memo keys to avoid the hazard, at least.","mimetype":"text/plain"},{"body":"I mean, it seems like <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">Justin Ridgewell</a> always uses unique memo keys to avoid the hazard, at least.","mimetype":"text/html"}]},"ts":1670524827190,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fVj7vfITCZAKI2Hns7l6l6ACUyHCjOZTwKBqIgK8PVg"},
{"content":{"body":"The trouble is that `importHook` is not in a position to choose the memo key based on arbitrary import etcdata.","format":"org.matrix.custom.html","formatted_body":"The trouble is that <code>importHook</code> is not in a position to choose the memo key based on arbitrary import etcdata.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The trouble is that `importHook` is not in a position to choose the memo key based on arbitrary import etcdata.","mimetype":"text/plain"},{"body":"The trouble is that <code>importHook</code> is not in a position to choose the memo key based on arbitrary import etcdata.","mimetype":"text/html"}]},"ts":1670524884597,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$3WwkJ91gFDjYRyyzxt-ITRrpH49ZZcL7Na8P6vdDtUU"},
{"content":{"body":"That's just a side-effect of only the specifier being extensible, not because I specifically designed it that way","msgtype":"m.text","org.matrix.msc1767.text":"That's just a side-effect of only the specifier being extensible, not because I specifically designed it that way"},"ts":1670524916968,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$a0esSMIlZ5l03TbU6rvegO2Oi5VBGUytWIQoEi7cTWo"},
{"content":{"body":"Because the importing module dictates the memo key and uses it to memoize the promise returned by `importHook`.","format":"org.matrix.custom.html","formatted_body":"Because the importing module dictates the memo key and uses it to memoize the promise returned by <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Because the importing module dictates the memo key and uses it to memoize the promise returned by `importHook`.","mimetype":"text/plain"},{"body":"Because the importing module dictates the memo key and uses it to memoize the promise returned by <code>importHook</code>.","mimetype":"text/html"}]},"ts":1670524918530,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eqQq2VijBZBsmxUl0-0qYaYDP_ZcFsqLP2p0zw9zkWg"},
{"content":{"body":"> <@jridgewell:matrix.org> That's just a side-effect of only the specifier being extensible, not because I specifically designed it that way\n\nwell, we're discussing whether the specifier should be extensible...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$a0esSMIlZ5l03TbU6rvegO2Oi5VBGUytWIQoEi7cTWo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>That&#39;s just a side-effect of only the specifier being extensible, not because I specifically designed it that way</blockquote></mx-reply>well, we're discussing whether the specifier should be extensible...","m.relates_to":{"m.in_reply_to":{"event_id":"$a0esSMIlZ5l03TbU6rvegO2Oi5VBGUytWIQoEi7cTWo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> That's just a side-effect of only the specifier being extensible, not because I specifically designed it that way\n\nwell, we're discussing whether the specifier should be extensible...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$a0esSMIlZ5l03TbU6rvegO2Oi5VBGUytWIQoEi7cTWo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>That&#39;s just a side-effect of only the specifier being extensible, not because I specifically designed it that way</blockquote></mx-reply>well, we're discussing whether the specifier should be extensible...","mimetype":"text/html"}]},"ts":1670524945052,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_C-jwjbf5yV4tRN-90k1egQCEKYrbhbp6Qx-AnYJbSk"},
{"content":{"body":"If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe","msgtype":"m.text","org.matrix.msc1767.text":"If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe"},"ts":1670524951557,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$oSWPtBXFCFlXIruI4wqgO-z3gH5hSL9stQyc-ovT_R0"},
{"content":{"body":"Sorry, I'm using \"specifier\" to reference the string literal","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, I'm using \"specifier\" to reference the string literal"},"ts":1670524977160,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$LEZ-ZQY2NEKbTliLWBHsg2TPOOga_aaifLwdVtutX8k"},
{"content":{"body":"If you're including attributes as part of \"specifier\", I was using a different meaning","msgtype":"m.text","org.matrix.msc1767.text":"If you're including attributes as part of \"specifier\", I was using a different meaning"},"ts":1670525008410,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Jy5EtEY5Kat0F7t-IQs6BBYBNRvh4OA8xGnkWlQkXGI"},
{"content":{"body":"I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent.","msgtype":"m.text","org.matrix.msc1767.text":"I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent."},"ts":1670525028561,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XqFaOMOppfpzcj3xGRFRc6WT3rzJmWJVIMUlb2pPMQ0"},
{"content":{"body":" * If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe","m.new_content":{"body":"If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe","msgtype":"m.text","org.matrix.msc1767.text":"If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe"},"m.relates_to":{"event_id":"$oSWPtBXFCFlXIruI4wqgO-z3gH5hSL9stQyc-ovT_R0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe"},"ts":1670525049889,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$1-TZex_82m6jUbYN-TMMSGfauSMU7jNQMQgu8Gy8tz4"},
{"content":{"body":" * I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent.","m.new_content":{"body":"I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent.","msgtype":"m.text","org.matrix.msc1767.text":"I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent."},"m.relates_to":{"event_id":"$XqFaOMOppfpzcj3xGRFRc6WT3rzJmWJVIMUlb2pPMQ0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I only use “specifier” to refer to a string, and use “module memo key” in cases where the specifier might not necessarily be equivalent."},"ts":1670525059889,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$94yAg23NjyTcGnxKLgLDYiOzSVDMwWw5Mt3EfuFAFpk"},
{"content":{"body":"An interesting scenario is `example.woff?bold&italic` vs `example.woff?italic&bold`.","format":"org.matrix.custom.html","formatted_body":"An interesting scenario is <code>example.woff?bold&amp;italic</code> vs <code>example.woff?italic&amp;bold</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"An interesting scenario is `example.woff?bold&italic` vs `example.woff?italic&bold`.","mimetype":"text/plain"},{"body":"An interesting scenario is <code>example.woff?bold&amp;italic</code> vs <code>example.woff?italic&amp;bold</code>.","mimetype":"text/html"}]},"ts":1670525255253,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YO5Y8FFTkKlLXyKrCTJiAPkThn89KtrZZ5EZeiXvBWo"},
{"content":{"body":"Using specifiers leaves a degree of freedom to the import site where, failing to canonicalize the query string, they effectively control whether they load the same asset twice.","msgtype":"m.text","org.matrix.msc1767.text":"Using specifiers leaves a degree of freedom to the import site where, failing to canonicalize the query string, they effectively control whether they load the same asset twice."},"ts":1670525292503,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$veYB8MMhp-vU5KfdIJIGGdCLDHCsuTFnuBaxfXew_GU"},
{"content":{"body":"> <@jridgewell:matrix.org> If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe\n\nright, so, this raises the question: what should be the behavior when we don't have a builder-based loader","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$oSWPtBXFCFlXIruI4wqgO-z3gH5hSL9stQyc-ovT_R0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>If I moved from special specifier to module attributes, I think the output should be similar, which would mean it&#39;s up to the loader to dedupe</blockquote></mx-reply>right, so, this raises the question: what should be the behavior when we don't have a builder-based loader","m.relates_to":{"m.in_reply_to":{"event_id":"$oSWPtBXFCFlXIruI4wqgO-z3gH5hSL9stQyc-ovT_R0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> If I moved from special specifier to module attributes, I think the output should be similar, which would mean it's up to the loader to dedupe\n\nright, so, this raises the question: what should be the behavior when we don't have a builder-based loader","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$oSWPtBXFCFlXIruI4wqgO-z3gH5hSL9stQyc-ovT_R0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>If I moved from special specifier to module attributes, I think the output should be similar, which would mean it&#39;s up to the loader to dedupe</blockquote></mx-reply>right, so, this raises the question: what should be the behavior when we don't have a builder-based loader","mimetype":"text/html"}]},"ts":1670525331817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$PrOM839tOZ4jMw8SGuE9GrH2aHtgK2rHleNigOnSJ-U"},
{"content":{"body":"Perhaps not that interesting. The `importHook` is in a position to canonicalize every key it knows about. It’s also in a position to decide whether to refer to a canonicalized import specifier.","format":"org.matrix.custom.html","formatted_body":"Perhaps not that interesting. The <code>importHook</code> is in a position to canonicalize every key it knows about. It’s also in a position to decide whether to refer to a canonicalized import specifier.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Perhaps not that interesting. The `importHook` is in a position to canonicalize every key it knows about. It’s also in a position to decide whether to refer to a canonicalized import specifier.","mimetype":"text/plain"},{"body":"Perhaps not that interesting. The <code>importHook</code> is in a position to canonicalize every key it knows about. It’s also in a position to decide whether to refer to a canonicalized import specifier.","mimetype":"text/html"}]},"ts":1670525336715,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IHEK_QUdpPp8Tx5r2sx0JEgPmkUKGl7Q62jbqiGUqtE"},
{"content":{"body":"> <@littledan:matrix.org> right, so, this raises the question: what should be the behavior when we don't have a builder-based loader\n\nPresumably, a host loader would ignore the `etc` data.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$PrOM839tOZ4jMw8SGuE9GrH2aHtgK2rHleNigOnSJ-U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>right, so, this raises the question: what should be the behavior when we don't have a builder-based loader</blockquote></mx-reply>Presumably, a host loader would ignore the <code>etc</code> data.","m.relates_to":{"m.in_reply_to":{"event_id":"$PrOM839tOZ4jMw8SGuE9GrH2aHtgK2rHleNigOnSJ-U"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> right, so, this raises the question: what should be the behavior when we don't have a builder-based loader\n\nPresumably, a host loader would ignore the `etc` data.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$PrOM839tOZ4jMw8SGuE9GrH2aHtgK2rHleNigOnSJ-U?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>right, so, this raises the question: what should be the behavior when we don't have a builder-based loader</blockquote></mx-reply>Presumably, a host loader would ignore the <code>etc</code> data.","mimetype":"text/html"}]},"ts":1670525374353,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$CdvaS_NldSPtfPJrhvPwtCCkfjgLJMGlVSspsGbm5Qo"},
{"content":{"body":"Or reject if there are any.","msgtype":"m.text","org.matrix.msc1767.text":"Or reject if there are any."},"ts":1670525389067,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ar_YdgEZ48QM6iyVRO8xtNOb13Pwl_aB2mainGHaRsU"},
{"content":{"body":"> <@kriskowal:matrix.org> Presumably, a host loader would ignore the `etc` data.\n\nthe reason I'm skeptical of this is because it would have different semantics from what the build tool would do. And, if we don't want cloning, the information wouldn't be visible through `import.meta`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$CdvaS_NldSPtfPJrhvPwtCCkfjgLJMGlVSspsGbm5Qo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Presumably, a host loader would ignore the <code>etc</code> data.</blockquote></mx-reply>the reason I'm skeptical of this is because it would have different semantics from what the build tool would do. And, if we don't want cloning, the information wouldn't be visible through <code>import.meta</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$CdvaS_NldSPtfPJrhvPwtCCkfjgLJMGlVSspsGbm5Qo"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Presumably, a host loader would ignore the `etc` data.\n\nthe reason I'm skeptical of this is because it would have different semantics from what the build tool would do. And, if we don't want cloning, the information wouldn't be visible through `import.meta`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$CdvaS_NldSPtfPJrhvPwtCCkfjgLJMGlVSspsGbm5Qo?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Presumably, a host loader would ignore the <code>etc</code> data.</blockquote></mx-reply>the reason I'm skeptical of this is because it would have different semantics from what the build tool would do. And, if we don't want cloning, the information wouldn't be visible through <code>import.meta</code>","mimetype":"text/html"}]},"ts":1670525413299,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$VZHffT-DcFu6pPpKt4Hk3Pt_X7JgFjSMrgrW5p7MNrg"},
{"content":{"body":"With a `importHook`, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.\nWithout a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes","format":"org.matrix.custom.html","formatted_body":"With a <code>importHook</code>, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.<br>Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With a `importHook`, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.\nWithout a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes","mimetype":"text/plain"},{"body":"With a <code>importHook</code>, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.<br>Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes","mimetype":"text/html"}]},"ts":1670525563113,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$RQJXD7E5qRL_vtdxMivhVVOalL3auff9FesiFn_msAQ"},
{"content":{"body":"Deduping here being the controversial part","msgtype":"m.text","org.matrix.msc1767.text":"Deduping here being the controversial part"},"ts":1670525587925,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_uWAC2Pz-0v3XZJ_s30AMh_WZzkeptkOG2POXwhGvBY"},
{"content":{"body":"As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases","msgtype":"m.text","org.matrix.msc1767.text":"As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases"},"ts":1670525669791,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$QKjqwU1U0Jtwqi7m-kIHG2hIzIpvgvK2zdLzZCjxAHI"},
{"content":{"body":" * As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases","m.new_content":{"body":"As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases","msgtype":"m.text","org.matrix.msc1767.text":"As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases"},"m.relates_to":{"event_id":"$QKjqwU1U0Jtwqi7m-kIHG2hIzIpvgvK2zdLzZCjxAHI","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * As I said in https://github.com/tc39/proposal-import-assertions/issues/125, I don't think there must be only one representation of a module, just that it might be a bug to have multiple in some cases"},"ts":1670525682008,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$JtAr6ws5Z9gScwMplmgseAJe9DICOy5VkJnPbuUCmWc"},
{"content":{"body":"We could make that safer by requiring the `importHook` to express what it took into account. The only remaining problem with memo keys is the case that a single module repeatedly imports with the same specifier and varying etc.","format":"org.matrix.custom.html","formatted_body":"We could make that safer by requiring the <code>importHook</code> to express what it took into account. The only remaining problem with memo keys is the case that a single module repeatedly imports with the same specifier and varying etc.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"We could make that safer by requiring the `importHook` to express what it took into account. The only remaining problem with memo keys is the case that a single module repeatedly imports with the same specifier and varying etc.","mimetype":"text/plain"},{"body":"We could make that safer by requiring the <code>importHook</code> to express what it took into account. The only remaining problem with memo keys is the case that a single module repeatedly imports with the same specifier and varying etc.","mimetype":"text/html"}]},"ts":1670525727408,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kCw28moij7IXdtkqdNYK5F-rrZPV7vbSdUqAIWpK-TU"},
{"content":{"body":"Doesn't `importHook` return a module instance, or does it return metadata for the browser to perform the load?","format":"org.matrix.custom.html","formatted_body":"Doesn't <code>importHook</code> return a module instance, or does it return metadata for the browser to perform the load?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Doesn't `importHook` return a module instance, or does it return metadata for the browser to perform the load?","mimetype":"text/plain"},{"body":"Doesn't <code>importHook</code> return a module instance, or does it return metadata for the browser to perform the load?","mimetype":"text/html"}]},"ts":1670525765601,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rCeiDwbTQ3IHuw73LzRgnvmZ3k-6zsmlj-NG4LVnOU8"},
{"content":{"body":"If it returns an instance, why have it return anything else?","msgtype":"m.text","org.matrix.msc1767.text":"If it returns an instance, why have it return anything else?"},"ts":1670525780478,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TUUOMloVdeDuP3whqglj9NDFHj_XxbP5ReVfPWO9H8Y"},
{"content":{"body":"The `importHook` is obliged to return a `Module` instance.","format":"org.matrix.custom.html","formatted_body":"The <code>importHook</code> is obliged to return a <code>Module</code> instance.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The `importHook` is obliged to return a `Module` instance.","mimetype":"text/plain"},{"body":"The <code>importHook</code> is obliged to return a <code>Module</code> instance.","mimetype":"text/html"}]},"ts":1670525788351,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$r3gyLcz8rULMI7mT57SpkVvTzG4G3CZcLDiu18KbBTE"},
{"content":{"body":"> <@jridgewell:matrix.org> With a `importHook`, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.\n> Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes\n\nThis entrains the concern of a specific kind of deep equality.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$RQJXD7E5qRL_vtdxMivhVVOalL3auff9FesiFn_msAQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>With a <code>importHook</code>, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.<br />Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes</blockquote></mx-reply>This entrains the concern of a specific kind of deep equality.","m.relates_to":{"m.in_reply_to":{"event_id":"$RQJXD7E5qRL_vtdxMivhVVOalL3auff9FesiFn_msAQ"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> With a `importHook`, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.\n> Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes\n\nThis entrains the concern of a specific kind of deep equality.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$RQJXD7E5qRL_vtdxMivhVVOalL3auff9FesiFn_msAQ?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>With a <code>importHook</code>, I view that as a loader, so I would pass everything and let it decide the same way my build-time loader does.<br />Without a hook, I kinda think the browser should reject any it doesn't understand, and perform deduping on matching attributes</blockquote></mx-reply>This entrains the concern of a specific kind of deep equality.","mimetype":"text/html"}]},"ts":1670525836878,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5weyHT4aU96QKz3kgeMGqQIR8qOB_czFH16fghSfzzQ"},
{"content":{"body":"That's a loader concern, though, not a browser concern","msgtype":"m.text","org.matrix.msc1767.text":"That's a loader concern, though, not a browser concern"},"ts":1670525859608,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$TqOXlAc_ZhiJrihcSHt0-BIYtX7ssYYxLCbLP7JvURk"},
{"content":{"body":"Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used `etc` for anything, it would fail to load","format":"org.matrix.custom.html","formatted_body":"Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used <code>etc</code> for anything, it would fail to load","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used `etc` for anything, it would fail to load","mimetype":"text/plain"},{"body":"Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used <code>etc</code> for anything, it would fail to load","mimetype":"text/html"}]},"ts":1670525896388,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iDJ0Cc5ScI-Or4DCOr_DEGSENN96GsAnTeBaxVgm-_o"},
{"content":{"body":"Then, the question is: do we want custom import hooks to be able to tie into `etc`, or do we want that to be an error as well?","format":"org.matrix.custom.html","formatted_body":"Then, the question is: do we want custom import hooks to be able to tie into <code>etc</code>, or do we want that to be an error as well?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Then, the question is: do we want custom import hooks to be able to tie into `etc`, or do we want that to be an error as well?","mimetype":"text/plain"},{"body":"Then, the question is: do we want custom import hooks to be able to tie into <code>etc</code>, or do we want that to be an error as well?","mimetype":"text/html"}]},"ts":1670525911600,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ge3gMyxlCf4QbH_jiEEBw_nXT2-dqE3gj0ZeRmLNJ-g"},
{"content":{"body":"> <@littledan:matrix.org> Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used `etc` for anything, it would fail to load\n\nAnd it would be an easy mistake to write an `importHook` that ignores the `etc`. It would in fact be the default first pass at any `importHook`.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$iDJ0Cc5ScI-Or4DCOr_DEGSENN96GsAnTeBaxVgm-_o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used <code>etc</code> for anything, it would fail to load</blockquote></mx-reply>And it would be an easy mistake to write an <code>importHook</code> that ignores the <code>etc</code>. It would in fact be the default first pass at any <code>importHook</code>.","m.relates_to":{"m.in_reply_to":{"event_id":"$iDJ0Cc5ScI-Or4DCOr_DEGSENN96GsAnTeBaxVgm-_o"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used `etc` for anything, it would fail to load\n\nAnd it would be an easy mistake to write an `importHook` that ignores the `etc`. It would in fact be the default first pass at any `importHook`.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$iDJ0Cc5ScI-Or4DCOr_DEGSENN96GsAnTeBaxVgm-_o?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Yeah I agree that, in general, loaders should reject attributes they don't understand, rather than ignoring them. So, on the web by default, if you used <code>etc</code> for anything, it would fail to load</blockquote></mx-reply>And it would be an easy mistake to write an <code>importHook</code> that ignores the <code>etc</code>. It would in fact be the default first pass at any <code>importHook</code>.","mimetype":"text/html"}]},"ts":1670525940180,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QIOTd8CN823YO2TX0Nmfg-T2l32GcgUv0icgUhSWjXQ"},
{"content":{"body":"I think this herds us into a particular solution space, where a translating bundler is already in the only right place to have an opinion about etc metadata, and is also in a position to erase it.","msgtype":"m.text","org.matrix.msc1767.text":"I think this herds us into a particular solution space, where a translating bundler is already in the only right place to have an opinion about etc metadata, and is also in a position to erase it."},"ts":1670526164250,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WoFpU8ZBwXHKh9afsIxQl-AbzGAoFwl5tYw3hhJEua0"},
{"content":{"body":"Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers.","msgtype":"m.text","org.matrix.msc1767.text":"Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers."},"ts":1670526331329,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$6aNCh68iIQuqH8dwiv4lWpjLCBlPecWAzKKfZeVo65Q"},
{"content":{"body":" * Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers.","m.new_content":{"body":"Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers.","msgtype":"m.text","org.matrix.msc1767.text":"Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers."},"m.relates_to":{"event_id":"$6aNCh68iIQuqH8dwiv4lWpjLCBlPecWAzKKfZeVo65Q","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Then, tragically, using etc metadata locks a portion of the ecosystem into using one of a compatible cohort of translating bundlers."},"ts":1670526349968,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7LsPSd4UF6amdKsaM7I_ZQjXNHw12CwFRRHGIt8SZ6w"},
{"content":{"body":"yeah, this is the reason why I lean towards TC39 specifying all of the keys and `etc` not being one of them","format":"org.matrix.custom.html","formatted_body":"yeah, this is the reason why I lean towards TC39 specifying all of the keys and <code>etc</code> not being one of them","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah, this is the reason why I lean towards TC39 specifying all of the keys and `etc` not being one of them","mimetype":"text/plain"},{"body":"yeah, this is the reason why I lean towards TC39 specifying all of the keys and <code>etc</code> not being one of them","mimetype":"text/html"}]},"ts":1670526363434,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mFJOxtTDnRbdaZGvv8iovHLsomza0N-nQrejXw9mZrE"},
{"content":{"body":"it'd be fine for tools to extend the language and make `etc` but it's not something I'm convinced we should encourage","format":"org.matrix.custom.html","formatted_body":"it'd be fine for tools to extend the language and make <code>etc</code> but it's not something I'm convinced we should encourage","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it'd be fine for tools to extend the language and make `etc` but it's not something I'm convinced we should encourage","mimetype":"text/plain"},{"body":"it'd be fine for tools to extend the language and make <code>etc</code> but it's not something I'm convinced we should encourage","mimetype":"text/html"}]},"ts":1670526380904,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$QACjaJzWWYh1kujMDqoRlddgmd2iNtkW_xotmz_N-Wc"},
{"content":{"body":"fundamentally, use of `etc` is not aligned towards unification of the language semantics","format":"org.matrix.custom.html","formatted_body":"fundamentally, use of <code>etc</code> is not aligned towards unification of the language semantics","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"fundamentally, use of `etc` is not aligned towards unification of the language semantics","mimetype":"text/plain"},{"body":"fundamentally, use of <code>etc</code> is not aligned towards unification of the language semantics","mimetype":"text/html"}]},"ts":1670526400647,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$WtOe3zoeIGdPl60_mhJrvuR6vXnFgzrymkWH5WPXktM"},
{"content":{"body":"Agreed, but I think it's helpful to have a syntax reservation for these use cases","msgtype":"m.text","org.matrix.msc1767.text":"Agreed, but I think it's helpful to have a syntax reservation for these use cases"},"ts":1670526802588,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$PSd6vJ7lkMkcqkEXh-1VCL5AUrswAr-bH5c4uEkqYzo"},
{"content":{"body":"maybe the syntax reservation can be similar to how we reserve TS syntax now: it's a parse error, and we promise to keep it that way","msgtype":"m.text","org.matrix.msc1767.text":"maybe the syntax reservation can be similar to how we reserve TS syntax now: it's a parse error, and we promise to keep it that way"},"ts":1670526834214,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JvZS3nJww9BO9LSlf4GkY8HL4qIqwHziy8m4i1H64bU"},
{"content":{"body":"I just had to implement `new URL('foo.txt', import.meta.url)` support, and it's god-awful complication because of the SSR and CSR splits we have to handle","format":"org.matrix.custom.html","formatted_body":"I just had to implement <code>new URL('foo.txt', import.meta.url)</code> support, and it's god-awful complication because of the SSR and CSR splits we have to handle","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I just had to implement `new URL('foo.txt', import.meta.url)` support, and it's god-awful complication because of the SSR and CSR splits we have to handle","mimetype":"text/plain"},{"body":"I just had to implement <code>new URL('foo.txt', import.meta.url)</code> support, and it's god-awful complication because of the SSR and CSR splits we have to handle","mimetype":"text/html"}]},"ts":1670526838562,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zijxsFEDxrELiIq097YIQ4mDB8_-rPZl1sArsBQt0Oo"},
{"content":{"body":"yeah I agree we absolutely need asset references","msgtype":"m.text","org.matrix.msc1767.text":"yeah I agree we absolutely need asset references"},"ts":1670526854907,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1iry_7MdarRmx-NzTGYZ-80a8i8lvjeEftM66zDgPMQ"},
{"content":{"body":"Allowing me to implement `type: 'text'` now without waiting for TC39 to standardize would make this usecase much nicer","format":"org.matrix.custom.html","formatted_body":"Allowing me to implement <code>type: 'text'</code> now without waiting for TC39 to standardize would make this usecase much nicer","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Allowing me to implement `type: 'text'` now without waiting for TC39 to standardize would make this usecase much nicer","mimetype":"text/plain"},{"body":"Allowing me to implement <code>type: 'text'</code> now without waiting for TC39 to standardize would make this usecase much nicer","mimetype":"text/html"}]},"ts":1670526865290,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$bkHJX1M_7zgx-BSLBcmKf4QmDf4APxadnuw4SsmOXzY"},
{"content":{"body":"Same. We need asset references.","msgtype":"m.text","org.matrix.msc1767.text":"Same. We need asset references."},"ts":1670526869774,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lTkkJ0lxjta1Oe1xQwGyhwECrbTIO0s40UfqrBtjiTA"},
{"content":{"body":"Asset references wouldn't solve it","msgtype":"m.text","org.matrix.msc1767.text":"Asset references wouldn't solve it"},"ts":1670526888866,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$nsqW47b8aA7VzMUahIb4SoRjN7C58I9HQ2__ucdajwk"},
{"content":{"body":"so... the \"without waiting\" part is the part that concerns me. Our goal (or, my goal) is to define a common language.","msgtype":"m.text","org.matrix.msc1767.text":"so... the \"without waiting\" part is the part that concerns me. Our goal (or, my goal) is to define a common language."},"ts":1670526890063,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ji16B0WSB8SgcqV0WG8WowoWfxoa1sTuiFtLocRbYNw"},
{"content":{"body":"Because I would still need different references in browser and node","msgtype":"m.text","org.matrix.msc1767.text":"Because I would still need different references in browser and node"},"ts":1670526901600,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z9N-TYDsX1zePoghPn7cahZgdPKNT_qh-R2fozbFRuk"},
{"content":{"body":"I was picturing asset references would resolve to basically the equivalent of what `new URL` returns","format":"org.matrix.custom.html","formatted_body":"I was picturing asset references would resolve to basically the equivalent of what <code>new URL</code> returns","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I was picturing asset references would resolve to basically the equivalent of what `new URL` returns","mimetype":"text/plain"},{"body":"I was picturing asset references would resolve to basically the equivalent of what <code>new URL</code> returns","mimetype":"text/html"}]},"ts":1670526909396,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$bWce0ddn5gNgyh3SESya_XrCEo3gcoH-ss6WjdWtX7Q"},
{"content":{"body":"so, in what way wouldn't it solve it?","msgtype":"m.text","org.matrix.msc1767.text":"so, in what way wouldn't it solve it?"},"ts":1670526916817,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$86C5RSih2Gp8TPeLH7VKk_BPTzj2FpNMQ5HQm_b8Bj8"},
{"content":{"body":"I need to compile the code once for both envs, because the asset reference to address a file is different","msgtype":"m.text","org.matrix.msc1767.text":"I need to compile the code once for both envs, because the asset reference to address a file is different"},"ts":1670526924968,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GUxGfYc9OpP69_dk1aPHjXSBP1VNcprNLos3U0sTvWk"},
{"content":{"body":"could you elaborate on that?","msgtype":"m.text","org.matrix.msc1767.text":"could you elaborate on that?"},"ts":1670526931168,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5QP2XMwJytj1BZfXNyqlck9uQFI_8PLSOY6pxBSJBcc"},
{"content":{"body":"With `type: text`, it's one interpretation and I can do it as if it were a real JS module","format":"org.matrix.custom.html","formatted_body":"With <code>type: text</code>, it's one interpretation and I can do it as if it were a real JS module","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"With `type: text`, it's one interpretation and I can do it as if it were a real JS module","mimetype":"text/plain"},{"body":"With <code>type: text</code>, it's one interpretation and I can do it as if it were a real JS module","mimetype":"text/html"}]},"ts":1670526943498,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$z0uj8s7kTRZqdjJw5gymJMb3JM_tzKd7Q3SDvPrt_ro"},
{"content":{"body":"For what it’s worth, Endo’s bundler already does `text` and `bytes` based on package metadata, for the same reasonable need.","format":"org.matrix.custom.html","formatted_body":"For what it’s worth, Endo’s bundler already does <code>text</code> and <code>bytes</code> based on package metadata, for the same reasonable need.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For what it’s worth, Endo’s bundler already does `text` and `bytes` based on package metadata, for the same reasonable need.","mimetype":"text/plain"},{"body":"For what it’s worth, Endo’s bundler already does <code>text</code> and <code>bytes</code> based on package metadata, for the same reasonable need.","mimetype":"text/html"}]},"ts":1670526949212,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$4WjZ_YnsOAQlpxyZiSKyxHbidMoKyw1Qzt0d7p3C9wU"},
{"content":{"body":"> <@jridgewell:matrix.org> With `type: text`, it's one interpretation and I can do it as if it were a real JS module\n\nso, it sounds like you're not giving the whole code sample for what it is that you are implementing","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$z0uj8s7kTRZqdjJw5gymJMb3JM_tzKd7Q3SDvPrt_ro?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>With <code>type: text</code>, it's one interpretation and I can do it as if it were a real JS module</blockquote></mx-reply>so, it sounds like you're not giving the whole code sample for what it is that you are implementing","m.relates_to":{"m.in_reply_to":{"event_id":"$z0uj8s7kTRZqdjJw5gymJMb3JM_tzKd7Q3SDvPrt_ro"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> With `type: text`, it's one interpretation and I can do it as if it were a real JS module\n\nso, it sounds like you're not giving the whole code sample for what it is that you are implementing","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$z0uj8s7kTRZqdjJw5gymJMb3JM_tzKd7Q3SDvPrt_ro?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>With <code>type: text</code>, it's one interpretation and I can do it as if it were a real JS module</blockquote></mx-reply>so, it sounds like you're not giving the whole code sample for what it is that you are implementing","mimetype":"text/html"}]},"ts":1670527001190,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Wt0IkrTb6vNt36bSzeYoDRpqloj7HdqDGcor6Y7CYHo"},
{"content":{"body":"For Browser, I need to ensure the request handler is prepped to serve the file, and write a `http://localhost/path/to/file`\nFor node, I need a `file://absoltue/path/to/file` and to copy the file to disk somewhere","format":"org.matrix.custom.html","formatted_body":"For Browser, I need to ensure the request handler is prepped to serve the file, and write a <code>http://localhost/path/to/file</code><br>For node, I need a <code>file://absoltue/path/to/file</code> and to copy the file to disk somewhere","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For Browser, I need to ensure the request handler is prepped to serve the file, and write a `http://localhost/path/to/file`\nFor node, I need a `file://absoltue/path/to/file` and to copy the file to disk somewhere","mimetype":"text/plain"},{"body":"For Browser, I need to ensure the request handler is prepped to serve the file, and write a <code>http://localhost/path/to/file</code><br>For node, I need a <code>file://absoltue/path/to/file</code> and to copy the file to disk somewhere","mimetype":"text/html"}]},"ts":1670527009359,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$zmppYjP0ONTJYLL93HWPjRxP2_m-TOtmEVidgrAFeTE"},
{"content":{"body":"And “module subgraph as an asset that needs to be bundled so I can portably hydrate a worker” is also something I’m very interested in.","msgtype":"m.text","org.matrix.msc1767.text":"And “module subgraph as an asset that needs to be bundled so I can portably hydrate a worker” is also something I’m very interested in."},"ts":1670527039951,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kSAVYExYnNLGf3OCHrMaX1tSryUont-L9QRA3p72GTE"},
{"content":{"body":"`type: 'text'` would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON","format":"org.matrix.custom.html","formatted_body":"<code>type: 'text'</code> would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`type: 'text'` would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON","mimetype":"text/plain"},{"body":"<code>type: 'text'</code> would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON","mimetype":"text/html"}]},"ts":1670527056257,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$SMf2C_7KkbI0u5vev4wTyBnEQZIT1mNHxxxGI7F1deY"},
{"content":{"body":"Sorry, that was in reply to Dans' above comment","msgtype":"m.text","org.matrix.msc1767.text":"Sorry, that was in reply to Dans' above comment"},"ts":1670527074088,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$azSHSPjjGFJhlRXe0a0XQPu9mc3xv_zWnzPZOUE-ZMQ"},
{"content":{"body":"(I need to remember the reply feature…)","msgtype":"m.text","org.matrix.msc1767.text":"(I need to remember the reply feature…)"},"ts":1670527079692,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$KcgT0KfhFLfEKb4OW_qSBS514fhxsXCRgvRkjv8Hw78"},
{"content":{"body":"> <@jridgewell:matrix.org> For Browser, I need to ensure the request handler is prepped to serve the file, and write a `http://localhost/path/to/file`\n> For node, I need a `file://absoltue/path/to/file` and to copy the file to disk somewhere\n\nI'm having trouble understanding why asset references don't solve this","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$zmppYjP0ONTJYLL93HWPjRxP2_m-TOtmEVidgrAFeTE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>For Browser, I need to ensure the request handler is prepped to serve the file, and write a <code>http://localhost/path/to/file</code><br />For node, I need a <code>file://absoltue/path/to/file</code> and to copy the file to disk somewhere</blockquote></mx-reply>I'm having trouble understanding why asset references don't solve this","m.relates_to":{"m.in_reply_to":{"event_id":"$zmppYjP0ONTJYLL93HWPjRxP2_m-TOtmEVidgrAFeTE"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> For Browser, I need to ensure the request handler is prepped to serve the file, and write a `http://localhost/path/to/file`\n> For node, I need a `file://absoltue/path/to/file` and to copy the file to disk somewhere\n\nI'm having trouble understanding why asset references don't solve this","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$zmppYjP0ONTJYLL93HWPjRxP2_m-TOtmEVidgrAFeTE?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>For Browser, I need to ensure the request handler is prepped to serve the file, and write a <code>http://localhost/path/to/file</code><br />For node, I need a <code>file://absoltue/path/to/file</code> and to copy the file to disk somewhere</blockquote></mx-reply>I'm having trouble understanding why asset references don't solve this","mimetype":"text/html"}]},"ts":1670527081810,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$XgRLMfkhH5-9kmkO3GEFK-9MkDmauHTd8tDhu1lAv8g"},
{"content":{"body":"> <@jridgewell:matrix.org> `type: 'text'` would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON\n\nSame, but depending on whether Endo’s building a bundle or a zip archive.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$SMf2C_7KkbI0u5vev4wTyBnEQZIT1mNHxxxGI7F1deY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>type: 'text'</code> would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON</blockquote></mx-reply>Same, but depending on whether Endo’s building a bundle or a zip archive.","m.relates_to":{"m.in_reply_to":{"event_id":"$SMf2C_7KkbI0u5vev4wTyBnEQZIT1mNHxxxGI7F1deY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> `type: 'text'` would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON\n\nSame, but depending on whether Endo’s building a bundle or a zip archive.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$SMf2C_7KkbI0u5vev4wTyBnEQZIT1mNHxxxGI7F1deY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br><code>type: 'text'</code> would transform the imported file like https://gist.github.com/jridgewell/fa9754e38299d1f067e8aa8ac9ae336e#file-1-md does for JSON</blockquote></mx-reply>Same, but depending on whether Endo’s building a bundle or a zip archive.","mimetype":"text/html"}]},"ts":1670527092477,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9zsaaWKOLd8Azc-obhGS7FmkniZ5elEF2qRlR0tsBUs"},
{"content":{"body":"Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?","msgtype":"m.text","org.matrix.msc1767.text":"Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?"},"ts":1670527120030,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$90jpHBrYP2dKidDQFzDxYDU449ijt23uOQy6ePtmTv8"},
{"content":{"body":"I’m also interested in assets that entrain further asset dependencies.","msgtype":"m.text","org.matrix.msc1767.text":"I’m also interested in assets that entrain further asset dependencies."},"ts":1670527123086,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$epKQnhpuJ3fuQY_c-BoF_lA4l-h3oc2nxFJx9zphXko"},
{"content":{"body":"The code output would be env dependent, because the way you access the file is env dependent","msgtype":"m.text","org.matrix.msc1767.text":"The code output would be env dependent, because the way you access the file is env dependent"},"ts":1670527136073,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$pPuw6xip7EFmEEI1V7GI6zpGoIU-bOLuBatMPdGJ6CE"},
{"content":{"body":" * Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?","m.new_content":{"body":"Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?","msgtype":"m.text","org.matrix.msc1767.text":"Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?"},"m.relates_to":{"event_id":"$90jpHBrYP2dKidDQFzDxYDU449ijt23uOQy6ePtmTv8","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?"},"ts":1670527177519,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IaZ-l1rycgzR9Gys7ictEMrwFm50Hy1lnX5jLC5PnoA"},
{"content":{"body":"> <@jridgewell:matrix.org> Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?\n\nthere aren't any asset references in ES2022, so that's not a question that can be answered...","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$90jpHBrYP2dKidDQFzDxYDU449ijt23uOQy6ePtmTv8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today&#39;s ES2022?</blockquote></mx-reply>there aren't any asset references in ES2022, so that's not a question that can be answered...","m.relates_to":{"m.in_reply_to":{"event_id":"$90jpHBrYP2dKidDQFzDxYDU449ijt23uOQy6ePtmTv8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today's ES2022?\n\nthere aren't any asset references in ES2022, so that's not a question that can be answered...","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$90jpHBrYP2dKidDQFzDxYDU449ijt23uOQy6ePtmTv8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>Because the asset reference needs to be runtime value that can be used? How do I code an asset reference in today&#39;s ES2022?</blockquote></mx-reply>there aren't any asset references in ES2022, so that's not a question that can be answered...","mimetype":"text/html"}]},"ts":1670527213114,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SZZwfScS9PEQp9EaJoItC7aRLn_UYJcWy6e-yV-bTVU"},
{"content":{"body":"however, I thought asset references would evaluate to a runtime value--that was always the idea, I thought","msgtype":"m.text","org.matrix.msc1767.text":"however, I thought asset references would evaluate to a runtime value--that was always the idea, I thought"},"ts":1670527220218,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$e_9ggD8Oulmo1etC6W5_XTXqTGgAd4L13VcrKZSCBxI"},
{"content":{"body":"it'd be an environment-dependent signifier that you could use in an environment-dependent way","msgtype":"m.text","org.matrix.msc1767.text":"it'd be an environment-dependent signifier that you could use in an environment-dependent way"},"ts":1670527238309,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$FeYoznMy8QDQE_vNDNp85OMOiOsEtGgcto8V55SXybM"},
{"content":{"body":"maybe it'd be the URL or maybe it'd be something else","msgtype":"m.text","org.matrix.msc1767.text":"maybe it'd be the URL or maybe it'd be something else"},"ts":1670527245571,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$0UCLNl81aWF-DbGRgckN9L8x58Gm0jgFM62pk-Z_irQ"},
{"content":{"body":"So during bundling, the chunk which contains that runtime value would be env-dependent","msgtype":"m.text","org.matrix.msc1767.text":"So during bundling, the chunk which contains that runtime value would be env-dependent"},"ts":1670527266256,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$iwrnNziZlvScHC6_Q6z28XIy7BdUN-SltOVCukRjUNw"},
{"content":{"body":"I'd need to compile that twice, and also perform the copying to allow that file to be accesssed","msgtype":"m.text","org.matrix.msc1767.text":"I'd need to compile that twice, and also perform the copying to allow that file to be accesssed"},"ts":1670527290317,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$NYkiNvUNCiQURyHu2sU3wB0abweU_JbZiAeBF0LMBbg"},
{"content":{"body":"Asset references should be accessed synchronously by value.","msgtype":"m.text","org.matrix.msc1767.text":"Asset references should be accessed synchronously by value."},"ts":1670527327761,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$aDZbRzs6-mzXQEGF-aC78GAE6ncV608kgGjpVR8yNLw"},
{"content":{"body":"huh? I really don't understand what transformation you're thinking of","msgtype":"m.text","org.matrix.msc1767.text":"huh? I really don't understand what transformation you're thinking of"},"ts":1670527328231,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$1i2wIIBj_I0Y-LQBHCOtVlgp57eN8DoD9vBCeiwILJo"},
{"content":{"body":"if you need the text, sure, `type \"text\"` seems reasonable, but the example you gave above was implementing `new URL(..., import.meta.url)`","format":"org.matrix.custom.html","formatted_body":"if you need the text, sure, <code>type &quot;text&quot;</code> seems reasonable, but the example you gave above was implementing <code>new URL(..., import.meta.url)</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if you need the text, sure, `type \"text\"` seems reasonable, but the example you gave above was implementing `new URL(..., import.meta.url)`","mimetype":"text/plain"},{"body":"if you need the text, sure, <code>type &quot;text&quot;</code> seems reasonable, but the example you gave above was implementing <code>new URL(..., import.meta.url)</code>","mimetype":"text/html"}]},"ts":1670527374559,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vjQe-tdwW9cI8-kT81yq8TBNPb08_9Yac5lwRol5V28"},
{"content":{"body":"You must be thinking that the transpiled form of an asset might just be a relative URL that the bundler arranges to resolve.","msgtype":"m.text","org.matrix.msc1767.text":"You must be thinking that the transpiled form of an asset might just be a relative URL that the bundler arranges to resolve."},"ts":1670527380183,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lvVIkFkIyRpSmgtCcIRPcCVcs5axbzqhGMTzVn5tbPw"},
{"content":{"body":"Or rather, the transpiled form is alternately a relative path or URL and either a Node.js or Browser API for obtaining the text.","msgtype":"m.text","org.matrix.msc1767.text":"Or rather, the transpiled form is alternately a relative path or URL and either a Node.js or Browser API for obtaining the text."},"ts":1670527440445,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$1qPFukMgX8OkkMsB2T7uAGOAVVQGrk6kVdPp_Odikm4"},
{"content":{"body":"As opposed to encoding as a string.","msgtype":"m.text","org.matrix.msc1767.text":"As opposed to encoding as a string."},"ts":1670527451984,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$GalpvwOgixWHrdSPIMEQW0l8gpfZtWCnHNHHweyRRuU"},
{"content":{"body":"And that’s more germane in the CSS case where the transpiled form is probably just adding a link to the document.","msgtype":"m.text","org.matrix.msc1767.text":"And that’s more germane in the CSS case where the transpiled form is probably just adding a link to the document."},"ts":1670527477240,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Gb37PS4_y9PP31-H4ndcECpPQAu9vj4un5EdT6TwYec"},
{"content":{"body":"Lots of stuff gets intertwingled in this space.","msgtype":"m.text","org.matrix.msc1767.text":"Lots of stuff gets intertwingled in this space."},"ts":1670527589705,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Rhppu5j61bjIedNv2pDDE5B1ywFFjT4cmMhBtmnncKw"},
{"content":{"body":"The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","format":"org.matrix.custom.html","formatted_body":"The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","mimetype":"text/plain"},{"body":"The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","mimetype":"text/html"}]},"ts":1670527637919,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$mq4aQcpvYf2719L4zh11uykpS1Uba9Bx6kualkD3IBc"},
{"content":{"body":" * The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","format":"org.matrix.custom.html","formatted_body":" * The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","m.new_content":{"body":"The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","format":"org.matrix.custom.html","formatted_body":"The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","mimetype":"text/plain"},{"body":"The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$mq4aQcpvYf2719L4zh11uykpS1Uba9Bx6kualkD3IBc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * The point of the `new URL(\"foo.txt\", import.meta.url)` example is that I need to access that file.\nIf I used an asset reference, how would I access that file?\nIn a browser, that reference would need to be `http://localhost:3001/path/to/foo.txt`\nIn node, that reference would need to be an absoulte/relative file path `../path/to/foo.txt`","mimetype":"text/plain"},{"body":" * The point of the <code>new URL(&quot;foo.txt&quot;, import.meta.url)</code> example is that I need to access that file.<br>If I used an asset reference, how would I access that file?<br>In a browser, that reference would need to be <code>http://localhost:3001/path/to/foo.txt</code><br>In node, that reference would need to be an absoulte/relative file path <code>../path/to/foo.txt</code>","mimetype":"text/html"}]},"ts":1670527648340,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$BXLIbOy9lTGrPOtvHhes2h3CA9WYb7VBSniTZhxDQJA"},
{"content":{"body":"So the runtime value is dependent on execution env, right?","msgtype":"m.text","org.matrix.msc1767.text":"So the runtime value is dependent on execution env, right?"},"ts":1670527660480,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$GTL7WKeLhSkU2HWY5UdE5wmaHPxd_7QfdO3bGCQX4vg"},
{"content":{"body":"If I'm a bundler, and bundle that asset reference's runtime value into a larger bundle, that large file is now env dependent","msgtype":"m.text","org.matrix.msc1767.text":"If I'm a bundler, and bundle that asset reference's runtime value into a larger bundle, that large file is now env dependent"},"ts":1670527696576,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Tjfgd-lf75-rgLjmg1a_4Lm1QRdyYxRxg2_MeH6UYjA"},
{"content":{"body":"That is an issue for my bundler, because it means I'm doing repeat work that could have been already cached","msgtype":"m.text","org.matrix.msc1767.text":"That is an issue for my bundler, because it means I'm doing repeat work that could have been already cached"},"ts":1670527752048,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Jm8-R-epKGj0wI2wJiW_VovJCHD6orGMHK_AnuL5Egk"},
{"content":{"body":"So, it’s useful to distinguish an asset module from an asset reference module, I think.","msgtype":"m.text","org.matrix.msc1767.text":"So, it’s useful to distinguish an asset module from an asset reference module, I think."},"ts":1670527781137,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_Xmh9dIQXNCKE_vVHqamKoM69rujURwoAfxTyxGmadk"},
{"content":{"body":"If I could just `type: text` import, then it's no longer env dependent, because the imported `foo.txt` file can be treated like another module without any other runtime value","format":"org.matrix.custom.html","formatted_body":"If I could just <code>type: text</code> import, then it's no longer env dependent, because the imported <code>foo.txt</code> file can be treated like another module without any other runtime value","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If I could just `type: text` import, then it's no longer env dependent, because the imported `foo.txt` file can be treated like another module without any other runtime value","mimetype":"text/plain"},{"body":"If I could just <code>type: text</code> import, then it's no longer env dependent, because the imported <code>foo.txt</code> file can be treated like another module without any other runtime value","mimetype":"text/html"}]},"ts":1670527792832,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$9zry5nuc_nIbAfPAcxpXtdRQ7kRZZybgh4cYp4b71XI"},
{"content":{"body":"Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","format":"org.matrix.custom.html","formatted_body":"Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","mimetype":"text/plain"},{"body":"Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","mimetype":"text/html"}]},"ts":1670527828530,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$aPkaUdD_2TKTrjaw8DG8cfbqosxDYOQUkNgOcdtQHZ0"},
{"content":{"body":" * Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","format":"org.matrix.custom.html","formatted_body":" * Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","m.new_content":{"body":"Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","format":"org.matrix.custom.html","formatted_body":"Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","mimetype":"text/plain"},{"body":"Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$aPkaUdD_2TKTrjaw8DG8cfbqosxDYOQUkNgOcdtQHZ0","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Just a \\`default export \"foo.txt string contents\"`, and bundle that up into the larger file","mimetype":"text/plain"},{"body":" * Just a `default export &quot;foo.txt string contents&quot;`, and bundle that up into the larger file","mimetype":"text/html"}]},"ts":1670527834112,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$sVwmZow2YZO6p6Wk3oRKlaugEwB6TtqCMcOAWqUvGYo"},
{"content":{"body":"There’s only one kind of asset module, but there are in fact environment dependent notions of an asset reference module (path, URL), and then further combinations if the notion is to make the asset reference portable (fetch, url module, fs module, filesystem API).","msgtype":"m.text","org.matrix.msc1767.text":"There’s only one kind of asset module, but there are in fact environment dependent notions of an asset reference module (path, URL), and then further combinations if the notion is to make the asset reference portable (fetch, url module, fs module, filesystem API)."},"ts":1670527846118,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$b9TWF-4XG8uiBFT9HYzgdgbdSHvCqOQHv1PZYwkWgc8"},
{"content":{"body":"Exactly","msgtype":"m.text","org.matrix.msc1767.text":"Exactly"},"ts":1670527868504,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$3U2jOkzkYwXXIuImGViqL7Br-dlKoZopc8UaHIncJm8"},
{"content":{"body":"Shimming an asset module is trivial (albeit gross), either embedding a string or a byte array or a base64 encoded string. Something like that. That covers one case.","msgtype":"m.text","org.matrix.msc1767.text":"Shimming an asset module is trivial (albeit gross), either embedding a string or a byte array or a base64 encoded string. Something like that. That covers one case."},"ts":1670527940758,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZJZ6xYKGiN24Ki7KpHBaRVOyTePDXntihFQQu9Cxvuo"},
{"content":{"body":"And you can shim an asset module today the way you suggest for text.","msgtype":"m.text","org.matrix.msc1767.text":"And you can shim an asset module today the way you suggest for text."},"ts":1670527951402,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uR_LQsnsQ-T3I2AoQJUwfrlEf0gGr31zQ8fyNPSA9Ew"},
{"content":{"body":"Potentially an enormous bundle, and doesn’t capture the asset in a way that’s easy to pass around, like a URL.","msgtype":"m.text","org.matrix.msc1767.text":"Potentially an enormous bundle, and doesn’t capture the asset in a way that’s easy to pass around, like a URL."},"ts":1670527978885,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ytQos49AsuGxYQKNS-3IvEkMOJVXG3Ai7u_sKKuJSbQ"},
{"content":{"body":"Asset reference modules, and asset retrieval modules (a module that closes over both the reference and the means to load it, presumably async) remain…","msgtype":"m.text","org.matrix.msc1767.text":"Asset reference modules, and asset retrieval modules (a module that closes over both the reference and the means to load it, presumably async) remain…"},"ts":1670528035978,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dp33_luKJsKbpfjkFTMg2Guip4PscwuH5LMcEkg_4EU"},
{"content":{"body":"I think the module harmony proposals provide an adequate foundation for these problems as written and having a import `etc` metadata reduces to the same argument we’ve tread today. You in fact have multiple options. With a virtual module source (even the lesser variant), you don’t even need to generate code for any of these cases. The downside is that you have to express an indication of your intent in the specifier. Ultimately, the argument hinges on whether the indication that a module is an asset, asset reference (host-dependent), or asset retriever (host-dependent), can be expressed in-band or out-of-band, and we digress into the argument we’ve already tread.","format":"org.matrix.custom.html","formatted_body":"I think the module harmony proposals provide an adequate foundation for these problems as written and having a import <code>etc</code> metadata reduces to the same argument we’ve tread today. You in fact have multiple options. With a virtual module source (even the lesser variant), you don’t even need to generate code for any of these cases. The downside is that you have to express an indication of your intent in the specifier. Ultimately, the argument hinges on whether the indication that a module is an asset, asset reference (host-dependent), or asset retriever (host-dependent), can be expressed in-band or out-of-band, and we digress into the argument we’ve already tread.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the module harmony proposals provide an adequate foundation for these problems as written and having a import `etc` metadata reduces to the same argument we’ve tread today. You in fact have multiple options. With a virtual module source (even the lesser variant), you don’t even need to generate code for any of these cases. The downside is that you have to express an indication of your intent in the specifier. Ultimately, the argument hinges on whether the indication that a module is an asset, asset reference (host-dependent), or asset retriever (host-dependent), can be expressed in-band or out-of-band, and we digress into the argument we’ve already tread.","mimetype":"text/plain"},{"body":"I think the module harmony proposals provide an adequate foundation for these problems as written and having a import <code>etc</code> metadata reduces to the same argument we’ve tread today. You in fact have multiple options. With a virtual module source (even the lesser variant), you don’t even need to generate code for any of these cases. The downside is that you have to express an indication of your intent in the specifier. Ultimately, the argument hinges on whether the indication that a module is an asset, asset reference (host-dependent), or asset retriever (host-dependent), can be expressed in-band or out-of-band, and we digress into the argument we’ve already tread.","mimetype":"text/html"}]},"ts":1670528648540,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$vd-0bl7LeQ4U5__Grcmrt_8LfG9jGSg62zoNcioqHoI"},
{"content":{"body":"I am still confused by the connection Justin is drawing between whether it is a URL vs the text contents and whether it is cross-platform. It seems completely orthogonal ","format":"org.matrix.custom.html","formatted_body":"I am still confused by the connection Justin is drawing between whether it is a URL vs the text contents and whether it is cross-platform. It seems completely orthogonal","msgtype":"m.text"},"ts":1670533353473,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$OySY977Nn9VEA4yQzChy_Ch9m_YaX9XYADpLDkPfDF0"},
{"content":{"body":"I'm not sure how to clarify it futher?","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure how to clarify it futher?"},"ts":1670534077175,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$X-gW5b1AAHkzD37BGhusJQceCKQOJZ-pn_XleUQMiHw"},
{"content":{"body":"Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific","msgtype":"m.text","org.matrix.msc1767.text":"Text imports and asset references/URLS are orthogonal designs, my comments here are that URLs are a subpar experience because they are env specific"},"ts":1670534136420,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$ncdKCDenffTn9DEg-cD2MLuDMfeFyjwFMa8rAFdOkac"},
{"content":{"body":"A text import is not platform specific","msgtype":"m.text","org.matrix.msc1767.text":"A text import is not platform specific"},"ts":1670534146465,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$fapw85gFYZCkQky6xQTjbcPmhwQlmxo4qm5aLk-Md_M"}
]