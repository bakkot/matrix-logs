[
{"content":{"body":"👋 just discussed module reflection, lazy, and import assertions with my team","msgtype":"m.text","org.matrix.msc1767.text":"👋 just discussed module reflection, lazy, and import assertions with my team"},"ts":1670521236256,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$I5EqHRdkEl0Vj3boWgrqhoiloy205STQcsl98iq4J-Y"},
{"content":{"body":"A few notes we have:\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code></li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A few notes we have:\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code></li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1670521399609,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$rIN_CHIIyfFeET-WgtRZzjEweGN-2K0nLRzSxpYsoas"},
{"content":{"body":"So I'm not blocking import reflection anymore, but would still very much like to move it into assertions","msgtype":"m.text","org.matrix.msc1767.text":"So I'm not blocking import reflection anymore, but would still very much like to move it into assertions"},"ts":1670521434882,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$XK6VqDYE84b8kIO_hWp3Lb4ebSep6Sh-09Kv84ME_uk"},
{"content":{"body":" * So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions","m.new_content":{"body":"So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions","msgtype":"m.text","org.matrix.msc1767.text":"So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions"},"m.relates_to":{"event_id":"$XK6VqDYE84b8kIO_hWp3Lb4ebSep6Sh-09Kv84ME_uk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * So I'm not going to lone block import reflection anymore, but would still very much like to move it into assertions"},"ts":1670522074826,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$qp2ivFNukXxsj0USSWumHbhg1yC1SO0dwmy3Kv-qfrc"},
{"content":{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"ts":1670522083815,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fxvS0GGt33c1O7FfX2pkRqqo_cGL7fKlbD-5HuQR2CY"},
{"content":{"body":" * A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":" * <p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","m.new_content":{"body":"A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","format":"org.matrix.custom.html","formatted_body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":"<p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$rIN_CHIIyfFeET-WgtRZzjEweGN-2K0nLRzSxpYsoas","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * A few notes we have:\n\n- the `import module` syntax is acceptable if we can't move this into the assertions\n- If we do move into assertions, we really should rename `assert` (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)\n- If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of `import(\"\", { assert: { key: value } })`, just make it `import(\"\", { key: value })`)\n- The `module` in `import module` is confusingly named, I'm already importing from ES modules","mimetype":"text/plain"},{"body":" * <p>A few notes we have:</p>\n<ul>\n<li>the <code>import module</code> syntax is acceptable if we can't move this into the assertions</li>\n<li>If we do move into assertions, we really should rename <code>assert</code> (we might need to do this anyways based on implementer feedback in https://github.com/tc39/proposal-import-assertions/issues/125)</li>\n<li>If we move this into assertions, we can simplify the 2nd param to dynamic import (instead of <code>import(&quot;&quot;, { assert: { key: value } })</code>, just make it <code>import(&quot;&quot;, { key: value })</code>)</li>\n<li>The <code>module</code> in <code>import module</code> is confusingly named, I'm already importing from ES modules</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1670522087273,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$UM2Il1p321NHMBRJt6IrGNFkCSruC5g__WU4ROE5__8"},
{"content":{"body":" * At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":" * <p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","m.new_content":{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","format":"org.matrix.custom.html","formatted_body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":"<p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$fxvS0GGt33c1O7FfX2pkRqqo_cGL7fKlbD-5HuQR2CY","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * At this point, I’m in favor of changing the shape of import reflection to `import example from 'example.com' with { reflect: true }` and `import('example', { reflect: true })`, which would imply import assertions would look like `import example from 'example.com' with { type: 'e.g.,destination' }` and `import('example.com', { type: 'e.g.,destination' })`.\n\nIf our constituents demand that the `type` string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the `type` must be threaded thru `importHook`. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the `type` can be ignored and the response content-type dictates what kind of module source it will produce.\n\nI will be difficult to convince that the `with` parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like `reflect`, `lazy`, `phase` or so on, with behaviors that can’t be emulated by an `importHook`.","mimetype":"text/plain"},{"body":" * <p>At this point, I’m in favor of changing the shape of import reflection to <code>import example from 'example.com' with { reflect: true }</code> and <code>import('example', { reflect: true })</code>, which would imply import assertions would look like <code>import example from 'example.com' with { type: 'e.g.,destination' }</code> and <code>import('example.com', { type: 'e.g.,destination' })</code>.</p>\n<p>If our constituents demand that the <code>type</code> string key must be communicated to the import hook, for example to direct content-negotiation, I can be convinced on the condition that the <code>type</code> must be threaded thru <code>importHook</code>. Evidently, the web platform doesn’t wish for this to be an assertion at all, since the <code>type</code> can be ignored and the response content-type dictates what kind of module source it will produce.</p>\n<p>I will be difficult to convince that the <code>with</code> parameters be opened up as an arbitrary key-value space that virtual modules can fiddle with because of the internal complications that implies for memoizing import. I want TC39 to curate this space and be free to extend it with other properties, like <code>reflect</code>, <code>lazy</code>, <code>phase</code> or so on, with behaviors that can’t be emulated by an <code>importHook</code>.</p>\n","mimetype":"text/html"}]},"ts":1670522159634,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IdmKzd-5JPrIum-aeG7T0bndMoJTNOZ67JUERxK4Y4c"},
{"content":{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, `import.module`, `import.reflect`, or `import.anything` would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","format":"org.matrix.custom.html","formatted_body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, <code>import.module</code>, <code>import.reflect</code>, or <code>import.anything</code> would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, `import.module`, `import.reflect`, or `import.anything` would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","mimetype":"text/plain"},{"body":"My opinion shifted in that direction because our SES shim for “hardened JavaScript” censors dynamic import to deny guest programs an escape hatch, and for that to continue being effective going forward, <code>import.module</code>, <code>import.reflect</code>, or <code>import.anything</code> would be problematic. I don’t expect that argument to convince anyone else that we should funnel reflection through dynamic import, but I also don’t expect anyone else to need to be convinced!","mimetype":"text/html"}]},"ts":1670522272940,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$c3n4HVTDGySz5gHOGuhgnfs1DOzG168Ubrf74m4SPBw"},
{"content":{"body":"In any case, the behavior of an `importHook` doesn’t depend on the `reflect` parameter, so I don’t think it should be communicated in an options bag. The behavior of `importHook` would also not vary based on yulia’s proposed `lazyInit` (by whatever name) either. There’s an implied `phase` or `goalState` parameter that currently defaults to `\"loaded\"` if `reflect: true` and defaults to `\"evaluated\"` otherwise. Neither of those should be communicated to `importHook`.","format":"org.matrix.custom.html","formatted_body":"In any case, the behavior of an <code>importHook</code> doesn’t depend on the <code>reflect</code> parameter, so I don’t think it should be communicated in an options bag. The behavior of <code>importHook</code> would also not vary based on <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>’s proposed <code>lazyInit</code> (by whatever name) either. There’s an implied <code>phase</code> or <code>goalState</code> parameter that currently defaults to <code>&quot;loaded&quot;</code> if <code>reflect: true</code> and defaults to <code>&quot;evaluated&quot;</code> otherwise. Neither of those should be communicated to <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In any case, the behavior of an `importHook` doesn’t depend on the `reflect` parameter, so I don’t think it should be communicated in an options bag. The behavior of `importHook` would also not vary based on yulia’s proposed `lazyInit` (by whatever name) either. There’s an implied `phase` or `goalState` parameter that currently defaults to `\"loaded\"` if `reflect: true` and defaults to `\"evaluated\"` otherwise. Neither of those should be communicated to `importHook`.","mimetype":"text/plain"},{"body":"In any case, the behavior of an <code>importHook</code> doesn’t depend on the <code>reflect</code> parameter, so I don’t think it should be communicated in an options bag. The behavior of <code>importHook</code> would also not vary based on <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia</a>’s proposed <code>lazyInit</code> (by whatever name) either. There’s an implied <code>phase</code> or <code>goalState</code> parameter that currently defaults to <code>&quot;loaded&quot;</code> if <code>reflect: true</code> and defaults to <code>&quot;evaluated&quot;</code> otherwise. Neither of those should be communicated to <code>importHook</code>.","mimetype":"text/html"}]},"ts":1670522469123,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PPeLVgYJ8q1wvG1znHdp5I3zBdhuot4jZFGskGjP-To"},
{"content":{"body":"If we did expose an options bag, we’d need something analogous to HTTP cache-control headers to dictate what properties of the options bag should be incorporated in the module key and in what order. We don’t have a suitable position to stand for those to be consistent between modules or scopes of modules (like packages).","msgtype":"m.text","org.matrix.msc1767.text":"If we did expose an options bag, we’d need something analogous to HTTP cache-control headers to dictate what properties of the options bag should be incorporated in the module key and in what order. We don’t have a suitable position to stand for those to be consistent between modules or scopes of modules (like packages)."},"ts":1670522565193,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eh_9Jt1YSYa9rVLN7dCeHUBMXLVi2x2OuEkALaAP99Q"},
{"content":{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)","format":"org.matrix.custom.html","formatted_body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)","mimetype":"text/plain"},{"body":"(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)","mimetype":"text/html"}]},"ts":1670522686758,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4"},
{"content":{"body":"So, my reasoning is that we have to consider _why_ we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., `package.json`) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","format":"org.matrix.custom.html","formatted_body":"So, my reasoning is that we have to consider <em>why</em> we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., <code>package.json</code>) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, my reasoning is that we have to consider _why_ we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., `package.json`) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","mimetype":"text/plain"},{"body":"So, my reasoning is that we have to consider <em>why</em> we’d want an arbitrary options bag, and if there’s a better way to solve the same problem. My reasoning is that it’s relatively straight-forward to construct Node.js-alike behavior in terms of the current harmony state, using out-of-band information (e.g., <code>package.json</code>) that keys most of these choices on the specifier, and imposes coherence across all modules in scope.","mimetype":"text/html"}]},"ts":1670522688408,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$o-noks40uSOvInxozthKZKneiXuEOeLhJx7t0d7RSqU"},
{"content":{"body":"> <@jridgewell:matrix.org> (Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)\n\nA concrete case will help me understand your objection.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)</blockquote></mx-reply>A concrete case will help me understand your objection.","m.relates_to":{"m.in_reply_to":{"event_id":"$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jridgewell:matrix.org> (Can wait till after your current thoughts are down, but I disagree with the not-being communicated to `importHook` and it not affecting the import behavior)\n\nA concrete case will help me understand your objection.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IcZbYwtipCKeUVhfdm8yfiPAOegjL4Y9PNzY_2fh1A4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jridgewell:matrix.org\">@jridgewell:matrix.org</a><br>(Can wait till after your current thoughts are down, but I disagree with the not-being communicated to <code>importHook</code> and it not affecting the import behavior)</blockquote></mx-reply>A concrete case will help me understand your objection.","mimetype":"text/html"}]},"ts":1670522711983,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$I5z1qHyPrDjx-6j11S6GfcE4puL1Gb8E0e7JV6bwUNM"},
{"content":{"body":"And to be clear, I mean for a subset of the `with` options to be communicated to `importHook`, specifically `type`.","format":"org.matrix.custom.html","formatted_body":"And to be clear, I mean for a subset of the <code>with</code> options to be communicated to <code>importHook</code>, specifically <code>type</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And to be clear, I mean for a subset of the `with` options to be communicated to `importHook`, specifically `type`.","mimetype":"text/plain"},{"body":"And to be clear, I mean for a subset of the <code>with</code> options to be communicated to <code>importHook</code>, specifically <code>type</code>.","mimetype":"text/html"}]},"ts":1670522742789,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$MGil9qPaKXEbRv5OygcNFI1rXKi5AXDIIAknlv1EAH0"},
{"content":{"body":"On the premise that the engine knows to incorporate `type` in the memo key.","format":"org.matrix.custom.html","formatted_body":"On the premise that the engine knows to incorporate <code>type</code> in the memo key.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"On the premise that the engine knows to incorporate `type` in the memo key.","mimetype":"text/plain"},{"body":"On the premise that the engine knows to incorporate <code>type</code> in the memo key.","mimetype":"text/html"}]},"ts":1670522765659,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$DVBhlkXp08qNUC0dDxDB0x2vIEtgxuCiDxCYhx0LFDA"},
{"content":{"body":"This doesn't come up until Stage 2 of compartments, right, so I'm not objecting to anything currently","msgtype":"m.text","org.matrix.msc1767.text":"This doesn't come up until Stage 2 of compartments, right, so I'm not objecting to anything currently"},"ts":1670522839068,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$y8iUrBqSc_duynWQlxihIJxmjjfsi0qtMZSUxgYdl58"},
{"content":{"body":"Why not pass the full options bag to import hook?","msgtype":"m.text","org.matrix.msc1767.text":"Why not pass the full options bag to import hook?"},"ts":1670522851867,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$_cOWgUsU2KYgF-eTalk83X7-OjYEjpLWGwDfLCPuBuo"},
{"content":{"body":"My mental model is that the `lazy` and `module` keywords are evaluators of the imported module, and should be passed to import","format":"org.matrix.custom.html","formatted_body":"My mental model is that the <code>lazy</code> and <code>module</code> keywords are evaluators of the imported module, and should be passed to import","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My mental model is that the `lazy` and `module` keywords are evaluators of the imported module, and should be passed to import","mimetype":"text/plain"},{"body":"My mental model is that the <code>lazy</code> and <code>module</code> keywords are evaluators of the imported module, and should be passed to import","mimetype":"text/html"}]},"ts":1670522913238,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$Z49xxsJxpeyxkAE5sTIJovEjWK0EuhyXY73KO5mxKyo"},
{"content":{"body":"And it just starts getting weird if TC39 has to standardize the keys that are passed to it","msgtype":"m.text","org.matrix.msc1767.text":"And it just starts getting weird if TC39 has to standardize the keys that are passed to it"},"ts":1670522930024,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$EMw4VezzgoC2uh21qVoaF-rd4FrN7DKInsjPbAWyXoo"},
{"content":{"body":"Passing arbitrary key values to the options bag creates composition hazards. Consider the case that A imports 'my.ttf' with bold and B imports 'my.ttf' with italic. Application C imports A and B. There is a reasonable expectation that the environment coördinates these such that in general, A and B get the same module instance.","msgtype":"m.text","org.matrix.msc1767.text":"Passing arbitrary key values to the options bag creates composition hazards. Consider the case that A imports 'my.ttf' with bold and B imports 'my.ttf' with italic. Application C imports A and B. There is a reasonable expectation that the environment coördinates these such that in general, A and B get the same module instance."},"ts":1670522977023,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FOh0vj2x6iLl4lGVxL6XTO_WVJlW90asUAYDkEmEvxk"}
]