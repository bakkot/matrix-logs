[
{"content":{"body":"Could anyone summarize the conclusions of this conversation?","msgtype":"m.text","org.matrix.msc1767.text":"Could anyone summarize the conclusions of this conversation?"},"ts":1673313049600,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$-BOZ0Fmr-MMLPCMObqZtQSL6oz1L1osBVXdBj_TVr6w"},
{"content":{"body":"Kevin might be convinced that a path from module text to evaluated behavior is permissible if 1. no new loopholes to CSP are introduced (and we agree that this is not a concern) 2. the capability is not too easy to find or use, for example made possibly only through a Compartment importHook that returns `{ source }` (but presumably not a Module importHook, and with no ModuleSource constructor. We agree that this does not limit expressible behavior.) and 2. motivation more compelling than just Agoric’s use case can be found. The use cases presented as yet are not sufficiently compelling.","format":"org.matrix.custom.html","formatted_body":"Kevin might be convinced that a path from module text to evaluated behavior is permissible if 1. no new loopholes to CSP are introduced (and we agree that this is not a concern) 2. the capability is not too easy to find or use, for example made possibly only through a Compartment importHook that returns <code>{ source }</code> (but presumably not a Module importHook, and with no ModuleSource constructor. We agree that this does not limit expressible behavior.) and 2. motivation more compelling than just Agoric’s use case can be found. The use cases presented as yet are not sufficiently compelling.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kevin might be convinced that a path from module text to evaluated behavior is permissible if 1. no new loopholes to CSP are introduced (and we agree that this is not a concern) 2. the capability is not too easy to find or use, for example made possibly only through a Compartment importHook that returns `{ source }` (but presumably not a Module importHook, and with no ModuleSource constructor. We agree that this does not limit expressible behavior.) and 2. motivation more compelling than just Agoric’s use case can be found. The use cases presented as yet are not sufficiently compelling.","mimetype":"text/plain"},{"body":"Kevin might be convinced that a path from module text to evaluated behavior is permissible if 1. no new loopholes to CSP are introduced (and we agree that this is not a concern) 2. the capability is not too easy to find or use, for example made possibly only through a Compartment importHook that returns <code>{ source }</code> (but presumably not a Module importHook, and with no ModuleSource constructor. We agree that this does not limit expressible behavior.) and 2. motivation more compelling than just Agoric’s use case can be found. The use cases presented as yet are not sufficiently compelling.","mimetype":"text/html"}]},"ts":1673322429449,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fKBJ-qqOZJti4NWo3WQO3eTqxCyqXU3woxkko3mYxMs"},
{"content":{"body":"To that end, I might reach out to the community at large to build a coalition. It seems we need some combination of quantity and quality of use cases that we have not yet presented. I believe these exist and we need testimonials.","msgtype":"m.text","org.matrix.msc1767.text":"To that end, I might reach out to the community at large to build a coalition. It seems we need some combination of quantity and quality of use cases that we have not yet presented. I believe these exist and we need testimonials."},"ts":1673322559406,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0YokgQsahnDrfFB0COfTnZnmDxGbvsjbUU2kKRAT8L8"},
{"content":{"body":"my primary use case is being able to test module-level syntax features, like TLA, without necessarily needing a filesystem to be present. That's already what I use Function for (and potentially AsyncFunction, GeneratorFunction, and AsyncGeneratorFunction as well).","msgtype":"m.text","org.matrix.msc1767.text":"my primary use case is being able to test module-level syntax features, like TLA, without necessarily needing a filesystem to be present. That's already what I use Function for (and potentially AsyncFunction, GeneratorFunction, and AsyncGeneratorFunction as well)."},"ts":1673322877783,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$bZRGpupRW5k5uAtR-EYlFh3CvAKvfHqf_LzCaeIE6dI"},
{"content":{"body":"ljharb, could you elaborate on what the testing is for? I take it that this is for a polyfill, rather than test262-related (where we could add extra host callbacks)","msgtype":"m.text","org.matrix.msc1767.text":"ljharb, could you elaborate on what the testing is for? I take it that this is for a polyfill, rather than test262-related (where we could add extra host callbacks)"},"ts":1673323287250,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vPoxv2K2iFA244_HKN8D9inQF-u2EWo-0SXrgypJvVo"},
{"content":{"body":"I take it that the use case has to be something that bakkot can be convinced is important enough (since he questioned that above); maybe context from ljharb could meet that requirement","format":"org.matrix.custom.html","formatted_body":"I take it that the use case has to be something that <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> can be convinced is important enough (since he questioned that above); maybe context from ljharb could meet that requirement","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I take it that the use case has to be something that bakkot can be convinced is important enough (since he questioned that above); maybe context from ljharb could meet that requirement","mimetype":"text/plain"},{"body":"I take it that the use case has to be something that <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> can be convinced is important enough (since he questioned that above); maybe context from ljharb could meet that requirement","mimetype":"text/html"}]},"ts":1673323356963,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$nO_tZtAonXAVQgn_J89MzDesnq7zuUSA80jyxNZWm_4"},
{"content":{"body":"yes, polyfills or environment testing packages - like “has object spread” or “has top-level await”","msgtype":"m.text"},"ts":1673323610373,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$cmqe0Rl2z7fdUenvlygQeMyyRNJfBKDxKNXejmVwKA8"},
{"content":{"body":"or “has Unicode named exports”, or any new syntax we add to the top level of Modules in the future","msgtype":"m.text"},"ts":1673323639317,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Cc0F1fDpGRVnP-iFLhQd1YvJxfK8DOC4RMPV6xYI3rY"},
{"content":{"body":"until we ship a syntax detection mechanism (which we may never do), eval is the only viable alternative.","msgtype":"m.text"},"ts":1673323676611,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Zut3kSoXPwNy4JhMFZRts6JRx8NFBvKcG1AFduEqMfs"},
{"content":{"body":"Could you say more about why ModuleSource helps you do something that you can't do with plain eval?","msgtype":"m.text","org.matrix.msc1767.text":"Could you say more about why ModuleSource helps you do something that you can't do with plain eval?"},"ts":1673323920204,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EP7vUZxKFskKg-c516Ttyz-1luaGWQLr3bip1190uIk"},
{"content":{"body":"I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)","msgtype":"m.text","org.matrix.msc1767.text":"I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)"},"ts":1673324257874,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$P8Eh5MB_i2Titu0zC9bE863M3EwKwMsVnSdqlYuxaKc"},
{"content":{"body":"nope, because i can’t test for the syntax in an engine that lacks module blocks","msgtype":"m.text"},"ts":1673324287852,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$crsF97Y9rfoSaux7bLilxSvWbXZSx_SG60ZE6TmwcmY"},
{"content":{"body":"i need a purely API-based solution","msgtype":"m.text"},"ts":1673324295457,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$V0N1P8-uOhDzw7w06Y3ko2_-pEwu8oZH16cDotX8SKU"},
{"content":{"body":" * I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)","m.new_content":{"body":"I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)","msgtype":"m.text","org.matrix.msc1767.text":"I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)"},"m.relates_to":{"event_id":"$P8Eh5MB_i2Titu0zC9bE863M3EwKwMsVnSdqlYuxaKc","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * I’m also motivated by ljharb’s use case, but in the interest of demonstrating that I’ve listened to bakkot carefully, I imagine that module blocks + eval are sufficient to that end and would not require ModuleSource(text)"},"ts":1673324296656,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nDfNfc90WUCBGHjsVgyhETK9APlbRjn8ssGsVPfbiQM"},
{"content":{"body":"module blocks would presumably need to contain valid-in-the-current-engine syntax anyway","msgtype":"m.text","org.matrix.msc1767.text":"module blocks would presumably need to contain valid-in-the-current-engine syntax anyway"},"ts":1673324316064,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$uzZh-AyYExrh5-7e41TBDnGQrYsnvS-pFsV31XF0Q5A"},
{"content":{"body":"oh i see what you mean, inside Function, put a module block","msgtype":"m.text"},"ts":1673324317049,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$pUnW8erPZB2RSz_ncJXROiQ4YdoWOXdopRH8VwxowRE"},
{"content":{"body":"oh wait yeah","msgtype":"m.text","org.matrix.msc1767.text":"oh wait yeah"},"ts":1673324327132,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$SQrRr-Av4U2YWhHIbV1f05e2v5DW6RxBXl3Tzy0Llaw"},
{"content":{"body":"yeah that seems adequate for this use case if I understand the use case correctly","msgtype":"m.text","org.matrix.msc1767.text":"yeah that seems adequate for this use case if I understand the use case correctly"},"ts":1673324351005,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$NnuwSWMXDjbhcBXkjUw6fMloGkP_jDDy8uDODWuJbKg"},
{"content":{"body":"That’s not to say I wouldn’t favor ModuleSource(x) over eval('module {' + x + '})') for that purpose, but we would only need one or the other strictly speaking.","msgtype":"m.text","org.matrix.msc1767.text":"That’s not to say I wouldn’t favor ModuleSource(x) over eval('module {' + x + '})') for that purpose, but we would only need one or the other strictly speaking."},"ts":1673324406210,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gv4cC8uRgubOKeYYEMHlOSM1zum0SMoSQpTgSimpsf4"},
{"content":{"body":"Function, to be clear, never eval :-)","msgtype":"m.text"},"ts":1673324419921,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$0BhGF81GBK27-8MSUlB9S2f8s95HDbtaad73IXRWl9g"},
{"content":{"body":"but yeah, same.","msgtype":"m.text"},"ts":1673324428218,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$GnWLLzHTvtzYStiwR-RvFiYh8QsQ27x_hjnSaZg5JZg"},
{"content":{"body":"Yeah, fair.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, fair."},"ts":1673324431452,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$wXPGyAnNyWTX8CXisA6pQMVztJgZH4rl05zLb8OQsnQ"},
{"content":{"body":"Never direct-eval, anyway.","msgtype":"m.text","org.matrix.msc1767.text":"Never direct-eval, anyway."},"ts":1673324445286,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$31z8EOPjDj8d5vVbZN1182JcGMu8VVSDzUmWLG_FSf0"},
{"content":{"body":"i just avoid it like a bad word, direct or not","msgtype":"m.text"},"ts":1673324538716,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$3r2dWaWqru9Y7CokcsbQ5x1aeYgQf8NXCB5ln6owss4"},
{"content":{"body":"ljharb: kind of a tangent, but why do you need to feature-test syntax anyway? is it just to decide which polyfill to load or is there some other case it comes up?","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: kind of a tangent, but why do you need to feature-test syntax anyway? is it just to decide which polyfill to load or is there some other case it comes up?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"ljharb: kind of a tangent, but why do you need to feature-test syntax anyway? is it just to decide which polyfill to load or is there some other case it comes up?","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a>: kind of a tangent, but why do you need to feature-test syntax anyway? is it just to decide which polyfill to load or is there some other case it comes up?","mimetype":"text/html"}]},"ts":1673324567698,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$fYMG4l2Vfn5Q0MDBLwctyXs1zLTJ1vib8IwItQkDY6A"},
{"content":{"body":"(\"deciding which polyfill to load\" is an important use case, I'm just wondering if there's others I'm missing)","msgtype":"m.text","org.matrix.msc1767.text":"(\"deciding which polyfill to load\" is an important use case, I'm just wondering if there's others I'm missing)"},"ts":1673324583706,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Ql42cupZ74MxQMTjScZ_KMIHA9hJEvsQRDTnmiFD3G4"},
{"content":{"body":"i use it constantly in test suites","msgtype":"m.text"},"ts":1673324601243,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s9Piqc2ruz2sXJfS0xkW2n3pudxEMKtDNoUFBhGhRgU"},
{"content":{"body":"(also even if Function + a module block works for me, i still have the consistency argument that every other way of passing around code-to-be-executed has a constructor)","msgtype":"m.text"},"ts":1673324622484,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Fbi_n-NFccmtKuKZcpGvAQqWoJdq7f_paeDgOVkGFCQ"},
{"content":{"body":"We do eval-based syntax testing to discover intrinsics we need to freeze, tame, and trim.","msgtype":"m.text","org.matrix.msc1767.text":"We do eval-based syntax testing to discover intrinsics we need to freeze, tame, and trim."},"ts":1673324628064,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5eDSCSwE2f5KIgFWBcoVYS-hTi2z7S1zUkP99BpbLrA"},
{"content":{"body":"(In `ses` shim.)","format":"org.matrix.custom.html","formatted_body":"(In <code>ses</code> shim.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(In `ses` shim.)","mimetype":"text/plain"},{"body":"(In <code>ses</code> shim.)","mimetype":"text/html"}]},"ts":1673324637833,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0HLcDpJdQb1nDKRHG8dCM-d_KDg5tT8S7pRdLwbERAU"},
{"content":{"body":"I’m sympathetic to the consistency argument, but it doesn’t pass the bakkot test.","msgtype":"m.text","org.matrix.msc1767.text":"I’m sympathetic to the consistency argument, but it doesn’t pass the bakkot test."},"ts":1673324679168,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_Z9ZMNhZR9Q4cbBp1rC5y_ZKao45hotEn9WVdm3Ci3Y"},
{"content":{"body":"I feel very strongly that the best proposals triangulate a void implied by two other features, the way Array.from and async imply the existence of Array.fromAsync.","msgtype":"m.text","org.matrix.msc1767.text":"I feel very strongly that the best proposals triangulate a void implied by two other features, the way Array.from and async imply the existence of Array.fromAsync."},"ts":1673324742695,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$7X32cgsnZrWK7TBa17hJkt0kUoueXbU342xZL1cI7K4"},
{"content":{"body":"Or the way Array and iterators imply iterator helpers.","msgtype":"m.text","org.matrix.msc1767.text":"Or the way Array and iterators imply iterator helpers."},"ts":1673324766343,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HdUcyB8Dq-zBQeEw79-SgYbemM9RojP4GQ6i1DA9OE0"},
{"content":{"body":"if the only goal was to fill the void left by `eval` only handling the Script parse goal, the way to fill it would be `eval(source, { type: 'module' })` or something, which... I mean, I find that instinctively distasteful, but the reason I don't like it is because it's enhancing `eval`, which is also my objection to all of the other options","format":"org.matrix.custom.html","formatted_body":"if the only goal was to fill the void left by <code>eval</code> only handling the Script parse goal, the way to fill it would be <code>eval(source, { type: 'module' })</code> or something, which... I mean, I find that instinctively distasteful, but the reason I don't like it is because it's enhancing <code>eval</code>, which is also my objection to all of the other options","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"if the only goal was to fill the void left by `eval` only handling the Script parse goal, the way to fill it would be `eval(source, { type: 'module' })` or something, which... I mean, I find that instinctively distasteful, but the reason I don't like it is because it's enhancing `eval`, which is also my objection to all of the other options","mimetype":"text/plain"},{"body":"if the only goal was to fill the void left by <code>eval</code> only handling the Script parse goal, the way to fill it would be <code>eval(source, { type: 'module' })</code> or something, which... I mean, I find that instinctively distasteful, but the reason I don't like it is because it's enhancing <code>eval</code>, which is also my objection to all of the other options","mimetype":"text/html"}]},"ts":1673325020312,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Z2G7zsKnD3oChe9YuZOP2kCq4_Pz6UQl3_WzggM5OcQ"},
{"content":{"body":"it at least has the advantage that it would not be _new_ thing that we would need to tell people not to use","format":"org.matrix.custom.html","formatted_body":"it at least has the advantage that it would not be <em>new</em> thing that we would need to tell people not to use","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"it at least has the advantage that it would not be _new_ thing that we would need to tell people not to use","mimetype":"text/plain"},{"body":"it at least has the advantage that it would not be <em>new</em> thing that we would need to tell people not to use","mimetype":"text/html"}]},"ts":1673325036903,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$UYCTXbFM8S7jHzfNXYhy11ooZcn3dLuz7uBBm8TmdGc"},
{"content":{"body":"honestly I kind of appreciate the honesty of it - the fundamental question before the committee, do we want to make `eval`-for-modules? if we would not add `eval(source, { type: 'module' })` then we probably should not add a constructible `ModuleSource` either","format":"org.matrix.custom.html","formatted_body":"honestly I kind of appreciate the honesty of it - the fundamental question before the committee, do we want to make <code>eval</code>-for-modules? if we would not add <code>eval(source, { type: 'module' })</code> then we probably should not add a constructible <code>ModuleSource</code> either","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"honestly I kind of appreciate the honesty of it - the fundamental question before the committee, do we want to make `eval`-for-modules? if we would not add `eval(source, { type: 'module' })` then we probably should not add a constructible `ModuleSource` either","mimetype":"text/plain"},{"body":"honestly I kind of appreciate the honesty of it - the fundamental question before the committee, do we want to make <code>eval</code>-for-modules? if we would not add <code>eval(source, { type: 'module' })</code> then we probably should not add a constructible <code>ModuleSource</code> either","mimetype":"text/html"}]},"ts":1673325150332,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$qJqgxozq-DPR0b64hr_RPR2RJq7fcAr_rHSAMa8hqAs"},
{"content":{"body":"Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","format":"org.matrix.custom.html","formatted_body":"<p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","mimetype":"text/plain"},{"body":"<p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","mimetype":"text/html"}],"m.relates_to":{"m.in_reply_to":{"event_id":"$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U"}}},"ts":1673328780866,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3L2ZHOptPq1n9CUhDknia7HGp6kMg2oJ9tNKIhNfv0A"},
{"content":{"body":"> <@lucacasonato:matrix.org> My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.\n\n * Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.</blockquote></mx-reply> * <p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","m.new_content":{"body":"Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","format":"org.matrix.custom.html","formatted_body":"<p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","mimetype":"text/plain"},{"body":"<p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$3L2ZHOptPq1n9CUhDknia7HGp6kMg2oJ9tNKIhNfv0A","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@lucacasonato:matrix.org> My major open question in response to bakkot's points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a `ModuleSource` constructor was in fact **not** a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself **does not eval** - eval only happens at import - which is already possible right now.\n\n * Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n\ne.g. `script-src: unsafe-module-source`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$xdm65ojtYuR8323guvrBmXpmRCJzo-R0kBzHOJRSo_U?via=matrix.org&amp;via=igalia.com&amp;via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">@lucacasonato:matrix.org</a><br>My major open question in response to <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a>'s points at plenary is how this qualifies as a new path to eval - we discussed this at the last loader meeting and came to the conclusion that a <code>ModuleSource</code> constructor was in fact <strong>not</strong> a new path to eval, because the \"evalness\" of the ModuleSource is done through the existing dynamic import. The constructor itself <strong>does not eval</strong> - eval only happens at import - which is already possible right now.</blockquote></mx-reply> * <p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n","mimetype":"text/html"}]},"ts":1673328879638,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$DFqmGMFDh9m2YKY3sAUr08I93Zbe_7wQnp5ip3nkrTk"},
{"content":{"body":"🤔 Is `ModuleSource` unforgeable? via `(module {}).constructor`","format":"org.matrix.custom.html","formatted_body":"🤔 Is <code>ModuleSource</code> unforgeable? via <code>(module {}).constructor</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"🤔 Is `ModuleSource` unforgeable? via `(module {}).constructor`","mimetype":"text/plain"},{"body":"🤔 Is <code>ModuleSource</code> unforgeable? via <code>(module {}).constructor</code>","mimetype":"text/html"}]},"ts":1673329156388,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$IWmRdOTJyDmbwmoP9xr3tlXuQcwKAMhkSoYNxxZt0Mc"},
{"content":{"body":"What do you mean by unforgeable?","msgtype":"m.text","org.matrix.msc1767.text":"What do you mean by unforgeable?"},"ts":1673329324245,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$t9r0wOislWnQV8lrQl2wujhOnAIYv_mFxqXej76R_N4"},
{"content":{"body":"> <@jackworks:matrix.org> Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n> \n> e.g. `script-src: unsafe-module-source`\n\nAs long as `unsafe-module-source` is a more specific variant of `unsafe-eval` (`unsafe-eval` disables both like it does for `wasm-unsafe-eval`)","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$3L2ZHOptPq1n9CUhDknia7HGp6kMg2oJ9tNKIhNfv0A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n</blockquote></mx-reply>As long as <code>unsafe-module-source</code> is a more specific variant of <code>unsafe-eval</code> (<code>unsafe-eval</code> disables both like it does for <code>wasm-unsafe-eval</code>)","m.relates_to":{"m.in_reply_to":{"event_id":"$3L2ZHOptPq1n9CUhDknia7HGp6kMg2oJ9tNKIhNfv0A"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> Looks like the solution is to add a new directive for `script-src` CSP to limit import from dynamically constructed `ModuleSource` from string.\n> \n> e.g. `script-src: unsafe-module-source`\n\nAs long as `unsafe-module-source` is a more specific variant of `unsafe-eval` (`unsafe-eval` disables both like it does for `wasm-unsafe-eval`)","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$3L2ZHOptPq1n9CUhDknia7HGp6kMg2oJ9tNKIhNfv0A?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>Looks like the solution is to add a new directive for <code>script-src</code> CSP to limit import from dynamically constructed <code>ModuleSource</code> from string.</p>\n<p>e.g. <code>script-src: unsafe-module-source</code></p>\n</blockquote></mx-reply>As long as <code>unsafe-module-source</code> is a more specific variant of <code>unsafe-eval</code> (<code>unsafe-eval</code> disables both like it does for <code>wasm-unsafe-eval</code>)","mimetype":"text/html"}]},"ts":1673329470533,"senderName":"Justin Ridgewell","senderId":"@jridgewell:matrix.org","id":"$5o9Xit2CRl7e6Tjgc6QutgjsxeHlxwRuqtVuNbOScl4"},
{"content":{"body":"> <@kriskowal:matrix.org> Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).\n\nor make `ModuleSource.fromString` a thing and make it potional?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$EE0UF3aRmKPLyyJTcMCsQUh8lmG7fO95D4hNtLA16g4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).</blockquote></mx-reply>or make <code>ModuleSource.fromString</code> a thing and make it potional?","m.relates_to":{"m.in_reply_to":{"event_id":"$EE0UF3aRmKPLyyJTcMCsQUh8lmG7fO95D4hNtLA16g4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).\n\nor make `ModuleSource.fromString` a thing and make it potional?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$EE0UF3aRmKPLyyJTcMCsQUh8lmG7fO95D4hNtLA16g4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).</blockquote></mx-reply>or make <code>ModuleSource.fromString</code> a thing and make it potional?","mimetype":"text/html"}]},"ts":1673329572305,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$cYbDLqmxUxMXnAaRsjuUqvdgGWYKE043GZDSC2g1OYw"},
{"content":{"body":"> <@kriskowal:matrix.org> And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.\n\nfurther split `ModuleSource` into `ParsedModule` and `ImportableModule`?\n\n`ParsedModule` can be used for analyze purpose, but cannot be imported.\n`ImportableModule` constructor accepts `ParsedModule` or an object that implements Virtual Module Source interface. If there is CSP, it will throw when `ParsedModule` is constructed from a string (or any other TrustedType limitations).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$e4A5mLZ6V-6pLaFYXcRgb8VgfRQHK0auJtIhI30IrTs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.</blockquote></mx-reply><p>further split <code>ModuleSource</code> into <code>ParsedModule</code> and <code>ImportableModule</code>?</p>\n<p><code>ParsedModule</code> can be used for analyze purpose, but cannot be imported.<br><code>ImportableModule</code> constructor accepts <code>ParsedModule</code> or an object that implements Virtual Module Source interface. If there is CSP, it will throw when <code>ParsedModule</code> is constructed from a string (or any other TrustedType limitations).</p>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$e4A5mLZ6V-6pLaFYXcRgb8VgfRQHK0auJtIhI30IrTs"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.\n\nfurther split `ModuleSource` into `ParsedModule` and `ImportableModule`?\n\n`ParsedModule` can be used for analyze purpose, but cannot be imported.\n`ImportableModule` constructor accepts `ParsedModule` or an object that implements Virtual Module Source interface. If there is CSP, it will throw when `ParsedModule` is constructed from a string (or any other TrustedType limitations).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$e4A5mLZ6V-6pLaFYXcRgb8VgfRQHK0auJtIhI30IrTs?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.</blockquote></mx-reply><p>further split <code>ModuleSource</code> into <code>ParsedModule</code> and <code>ImportableModule</code>?</p>\n<p><code>ParsedModule</code> can be used for analyze purpose, but cannot be imported.<br><code>ImportableModule</code> constructor accepts <code>ParsedModule</code> or an object that implements Virtual Module Source interface. If there is CSP, it will throw when <code>ParsedModule</code> is constructed from a string (or any other TrustedType limitations).</p>\n","mimetype":"text/html"}]},"ts":1673330035592,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$G3Xtfd0CJyfpMFOGXRO7oJ0kNE9B2MPlXtHTaWw2nOg"},
{"content":{"body":"> <@littledan:matrix.org> https://github.com/guybedford/es-module-lexer\n\nEvery time I want to use es-module-lexer for some fast analyzing it always fails because\n- I want to analyze TypeScript + JSX\n- I want to analyze import bindings","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$7PcsqNdjK3sW-OpuTU6UoVcH9K7vbHyb6Q1sV4dcH6E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>https://github.com/guybedford/es-module-lexer</blockquote></mx-reply><p>Every time I want to use es-module-lexer for some fast analyzing it always fails because</p>\n<ul>\n<li>I want to analyze TypeScript + JSX</li>\n<li>I want to analyze import bindings</li>\n</ul>\n","m.relates_to":{"m.in_reply_to":{"event_id":"$7PcsqNdjK3sW-OpuTU6UoVcH9K7vbHyb6Q1sV4dcH6E"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> https://github.com/guybedford/es-module-lexer\n\nEvery time I want to use es-module-lexer for some fast analyzing it always fails because\n- I want to analyze TypeScript + JSX\n- I want to analyze import bindings","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$7PcsqNdjK3sW-OpuTU6UoVcH9K7vbHyb6Q1sV4dcH6E?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>https://github.com/guybedford/es-module-lexer</blockquote></mx-reply><p>Every time I want to use es-module-lexer for some fast analyzing it always fails because</p>\n<ul>\n<li>I want to analyze TypeScript + JSX</li>\n<li>I want to analyze import bindings</li>\n</ul>\n","mimetype":"text/html"}]},"ts":1673330706447,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$kISb48U8x8PB7KuD06CSWaV0Y6RWJYkwYiVouLt06XU"},
{"content":{"body":"> <@kriskowal:matrix.org> I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that `eval('module {' + text + '}')` is an inevitable work-around for the lack of `ModuleSource`, which is much worse if text is not constrained to be a valid module source.\n\nwhich definitely seems worse `text = '}; run any code; {'`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Bg1CJdpLsFWAlf1unpGdwR8kDSSiUbuRFD6rNHYmSEk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that <code>eval('module {' + text + '}')</code> is an inevitable work-around for the lack of <code>ModuleSource</code>, which is much worse if text is not constrained to be a valid module source.</blockquote></mx-reply>which definitely seems worse <code>text = '}; run any code; {'</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$Bg1CJdpLsFWAlf1unpGdwR8kDSSiUbuRFD6rNHYmSEk"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that `eval('module {' + text + '}')` is an inevitable work-around for the lack of `ModuleSource`, which is much worse if text is not constrained to be a valid module source.\n\nwhich definitely seems worse `text = '}; run any code; {'`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Bg1CJdpLsFWAlf1unpGdwR8kDSSiUbuRFD6rNHYmSEk?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>I assume this is sufficient to accept exactly and only grammatically valid sources. That requires block matching, but not AST generation. The other motivation for a full parse is that <code>eval('module {' + text + '}')</code> is an inevitable work-around for the lack of <code>ModuleSource</code>, which is much worse if text is not constrained to be a valid module source.</blockquote></mx-reply>which definitely seems worse <code>text = '}; run any code; {'</code>","mimetype":"text/html"}]},"ts":1673330996014,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LuZP69N6cA5QCC-hOptDwJvFZCSvUp3XG7199nriWKo"},
{"content":{"body":"> <@jackworks:matrix.org> 🤔 Is `ModuleSource` unforgeable? via `(module {}).constructor`\n\nIn the current module blocks proposal, this is `Module`","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IWmRdOTJyDmbwmoP9xr3tlXuQcwKAMhkSoYNxxZt0Mc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>🤔 Is <code>ModuleSource</code> unforgeable? via <code>(module {}).constructor</code></blockquote></mx-reply>In the current module blocks proposal, this is <code>Module</code>","m.relates_to":{"m.in_reply_to":{"event_id":"$IWmRdOTJyDmbwmoP9xr3tlXuQcwKAMhkSoYNxxZt0Mc"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> 🤔 Is `ModuleSource` unforgeable? via `(module {}).constructor`\n\nIn the current module blocks proposal, this is `Module`","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$IWmRdOTJyDmbwmoP9xr3tlXuQcwKAMhkSoYNxxZt0Mc?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>🤔 Is <code>ModuleSource</code> unforgeable? via <code>(module {}).constructor</code></blockquote></mx-reply>In the current module blocks proposal, this is <code>Module</code>","mimetype":"text/html"}]},"ts":1673360651956,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$dB6YVPXW5XnuX4dyZfcTLKbUdKkMGAs2N8lP2BbApQM"},
{"content":{"body":"> <@ljharb:matrix.org> nope, because i can’t test for the syntax in an engine that lacks module blocks\n\nI guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$crsF97Y9rfoSaux7bLilxSvWbXZSx_SG60ZE6TmwcmY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>nope, because i can’t test for the syntax in an engine that lacks module blocks</blockquote></mx-reply>I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.","m.relates_to":{"m.in_reply_to":{"event_id":"$crsF97Y9rfoSaux7bLilxSvWbXZSx_SG60ZE6TmwcmY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@ljharb:matrix.org> nope, because i can’t test for the syntax in an engine that lacks module blocks\n\nI guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$crsF97Y9rfoSaux7bLilxSvWbXZSx_SG60ZE6TmwcmY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br>nope, because i can’t test for the syntax in an engine that lacks module blocks</blockquote></mx-reply>I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.","mimetype":"text/html"}]},"ts":1673360705394,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$GVmJabtPKq_pQw4F_9b2Zs-vczgF8ZEOw1p6b1HrpnI"},
{"content":{"body":"> <@jackworks:matrix.org> Every time I want to use es-module-lexer for some fast analyzing it always fails because\n> - I want to analyze TypeScript + JSX\n> - I want to analyze import bindings\n\nWhat do you end up doing instead?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$kISb48U8x8PB7KuD06CSWaV0Y6RWJYkwYiVouLt06XU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>Every time I want to use es-module-lexer for some fast analyzing it always fails because</p>\n<ul>\n<li>I want to analyze TypeScript + JSX</li>\n<li>I want to analyze import bindings</li>\n</ul>\n</blockquote></mx-reply>What do you end up doing instead?","m.relates_to":{"m.in_reply_to":{"event_id":"$kISb48U8x8PB7KuD06CSWaV0Y6RWJYkwYiVouLt06XU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> Every time I want to use es-module-lexer for some fast analyzing it always fails because\n> - I want to analyze TypeScript + JSX\n> - I want to analyze import bindings\n\nWhat do you end up doing instead?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$kISb48U8x8PB7KuD06CSWaV0Y6RWJYkwYiVouLt06XU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br><p>Every time I want to use es-module-lexer for some fast analyzing it always fails because</p>\n<ul>\n<li>I want to analyze TypeScript + JSX</li>\n<li>I want to analyze import bindings</li>\n</ul>\n</blockquote></mx-reply>What do you end up doing instead?","mimetype":"text/html"}]},"ts":1673360841397,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$uqMARhYKNbiiDYLhr1oElCLXLhFi5RCoKmjRUjO8Obo"},
{"content":{"body":"> <@littledan:matrix.org> I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.\n\nno, it's also an issue for being able to ship syntax-testing code to an engine that doesn't have either one","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$GVmJabtPKq_pQw4F_9b2Zs-vczgF8ZEOw1p6b1HrpnI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.</blockquote></mx-reply>no, it's also an issue for being able to ship syntax-testing code to an engine that doesn't have either one","m.relates_to":{"m.in_reply_to":{"event_id":"$GVmJabtPKq_pQw4F_9b2Zs-vczgF8ZEOw1p6b1HrpnI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.\n\nno, it's also an issue for being able to ship syntax-testing code to an engine that doesn't have either one","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$GVmJabtPKq_pQw4F_9b2Zs-vczgF8ZEOw1p6b1HrpnI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>I guess this is mostly an issue if there exists any engine that ships constructable Module before module blocks.</blockquote></mx-reply>no, it's also an issue for being able to ship syntax-testing code to an engine that doesn't have either one","mimetype":"text/html"}]},"ts":1673371706361,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$m8IpoDAF7IfU0Nfy0XJYFaGsCUS5Z3UPk1fA20Qdsbg"}
]