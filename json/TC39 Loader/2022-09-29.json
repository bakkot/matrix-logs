[
{"content":{"body":"> <@mkubilayk:matrix.org> could you have used `ModuleSource` constructor instead of the module block here?\n\nYes, but it's better to avoid it for CSP reasons","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24fjFqD7rgkMXers9lw6PLzbYnTcJ5bNKVeixLEFbpIbY\">In risposta a</a> <a href=\"https://matrix.to/#/@mkubilayk:matrix.org\">@mkubilayk:matrix.org</a><br>could you have used <code>ModuleSource</code> constructor instead of the module block here?</blockquote></mx-reply>Yes, but it's better to avoid it for CSP reasons","m.relates_to":{"m.in_reply_to":{"event_id":"$fjFqD7rgkMXers9lw6PLzbYnTcJ5bNKVeixLEFbpIbY"}},"msgtype":"m.text"},"ts":1664445354045,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$0zsSkIsfOkstpx6Vxk6jWbotfg4Hmu2HHeL_whlzZOI"},
{"content":{"body":"and double-parsing reasons!","msgtype":"m.text","org.matrix.msc1767.text":"and double-parsing reasons!"},"ts":1664445505017,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$p8aObeNELf-fz-hJVFli9GfGQUgsbd9L-MjlDlJpy3E"},
{"content":{"body":"(loading performance)","msgtype":"m.text","org.matrix.msc1767.text":"(loading performance)"},"ts":1664445514976,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$aTtrvII0xy0kRcet3HLQBqs5txiFM3edGZAGjV76fTg"},
{"content":{"body":"Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","format":"org.matrix.custom.html","formatted_body":"<p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","mimetype":"text/plain"},{"body":"<p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","mimetype":"text/html"}]},"ts":1664470302933,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$_Dd2Cxw7fJL135nXP9gdqRyYzZGmJg4OaVHE9b0DsDs"},
{"content":{"body":"As I mentioned in July plenary, ESM is kinda failing to take hold in the ecosystem today.  I interpret this \"let's stick to the old ways\" forking as proof of that.  It is not random stubbornness - it is born out of the practicalities of migration.  The migration is painful and costly and is causing some folk to invest in going backwards.","msgtype":"m.text","org.matrix.msc1767.text":"As I mentioned in July plenary, ESM is kinda failing to take hold in the ecosystem today.  I interpret this \"let's stick to the old ways\" forking as proof of that.  It is not random stubbornness - it is born out of the practicalities of migration.  The migration is painful and costly and is causing some folk to invest in going backwards."},"ts":1664470464492,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$e4fHWud6rowCb5pjMCG9g0qaFRh_y95st3GvzFqLxmg"},
{"content":{"body":"The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM.","msgtype":"m.text","org.matrix.msc1767.text":"The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM."},"ts":1664470867010,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$56ew8tfTcE-5uvbjetlvXXisX_92y-Q3IIi5pOxM5Fo"},
{"content":{"body":" * The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM.","m.new_content":{"body":"The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM.","msgtype":"m.text","org.matrix.msc1767.text":"The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM."},"m.relates_to":{"event_id":"$56ew8tfTcE-5uvbjetlvXXisX_92y-Q3IIi5pOxM5Fo","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * The root of this, in my opinion, is a lack of the ability to synchronously load ESM in Node.  Deno does not have this problem because it's all async from day 1.  Bun is potentially going to avoid this problem too by permitting a mixed-mode loader (support both sync and async).  In Bloomberg, our loader does not have this problem for the same reason - it can handle both forms of loading.\n\nWhilst we could just say \"this is a Node-specific problem due to Node's historical choices\", I think the need for sync loading is a more generic and shared need.  A further evidence point that I have cited many times is the need for non-viral lazy loading, i.e. conditional loading that can happen inside normal non-async functions.  This type of lazy loading is widely used in the pre-ESM ecosystem today by large apps.  And we still have no equivalent in ESM."},"ts":1664470883106,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$JSmn3F1MFY_NQc5MstWYHJazBbArS1ANCIEnQVfCMKA"},
{"content":{"body":"I'm not sure I'm saying anything particularly novel here.  Mostly just pointing out there's more evidence of the problem here, so we are all up to date.","msgtype":"m.text","org.matrix.msc1767.text":"I'm not sure I'm saying anything particularly novel here.  Mostly just pointing out there's more evidence of the problem here, so we are all up to date."},"ts":1664470998664,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$iYSKcjUayaz0Rr034ZZ7KvJ3kNtzLBKZgXfVbowr1zM"},
{"content":{"body":" * Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","format":"org.matrix.custom.html","formatted_body":" * <p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","m.new_content":{"body":"Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","format":"org.matrix.custom.html","formatted_body":"<p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","mimetype":"text/plain"},{"body":"<p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_Dd2Cxw7fJL135nXP9gdqRyYzZGmJg4OaVHE9b0DsDs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope `@actuallyworks`.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.\n\nHere is one example:\n\nhttps://www.npmjs.com/package/@actuallyworks/chalk","mimetype":"text/plain"},{"body":" * <p>Pete Hunt (one of the original Facebook crew that created React) has created hostile forks of popular npm modules that decided to convert to ESM.  They are publishing equivalent CJS versions under the npm scope <code>@actuallyworks</code>.  The motivation is to allow CJS modules to pin themselves to the fork, avoiding any of the interop pain that comes from trying to make CJS modules load ESM.</p>\n<p>Here is one example:</p>\n<p>https://www.npmjs.com/package/@actuallyworks/chalk</p>\n","mimetype":"text/html"}]},"ts":1664471190205,"senderName":"Rob Palmer","senderId":"@robpalme:matrix.org","id":"$3V8Ko1xKujnHUaPgJyx4z7PATp6YKOskWDC2hxu7S4k"}
]