[
{"content":{"body":"That in turn is important because one of the things you can do with a module source is relocate it, e.g., from the file system to a bundle, or a zip file.","msgtype":"m.text","org.matrix.msc1767.text":"That in turn is important because one of the things you can do with a module source is relocate it, e.g., from the file system to a bundle, or a zip file."},"ts":1658188865941,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$2x3DJvlKan1uwZxpAgnowgLBTlZFuFB1zKpr0Jx5oHo"},
{"content":{"body":"Oh I see","msgtype":"m.text"},"ts":1658188877480,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$N0c5ygeJNYbQQW1bEdHe30C09_VnxKMkT17SEtGQLsw"},
{"content":{"body":"In which case the `import.meta.url` is not applicable.","format":"org.matrix.custom.html","formatted_body":"In which case the <code>import.meta.url</code> is not applicable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"In which case the `import.meta.url` is not applicable.","mimetype":"text/plain"},{"body":"In which case the <code>import.meta.url</code> is not applicable.","mimetype":"text/html"}]},"ts":1658188882478,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fnmq18RnikxiDgUijkQG_4cvwqvJjJ7BvQPQ3_iN-CQ"},
{"content":{"body":"And this is supposed to be the resolved specifier?","msgtype":"m.text"},"ts":1658188896306,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$h5oPz6VoHgmD2qbup6heSids2iYmDxi87l-oSXP7OHE"},
{"content":{"body":"Not a relative one","msgtype":"m.text"},"ts":1658188901119,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$x_7b3jK42LU33sKgd77s-StUVWjA8GggwG5ysrWulSY"},
{"content":{"body":"Yeah, referrers need to be fully resolved. What that means can vary as well.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, referrers need to be fully resolved. What that means can vary as well."},"ts":1658188917070,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$skC60N1ViiDhZ4zoiA7cm0iogwZZz_gLRZ9UxBAvITY"},
{"content":{"body":"e.g., if you have an `importHook` per scope, `./src/main.js` is a very reasonable fully-resolved specifier, where `./` just distinguishes a module in scope from one that’s from another scope.","format":"org.matrix.custom.html","formatted_body":"e.g., if you have an <code>importHook</code> per scope, <code>./src/main.js</code> is a very reasonable fully-resolved specifier, where <code>./</code> just distinguishes a module in scope from one that’s from another scope.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"e.g., if you have an `importHook` per scope, `./src/main.js` is a very reasonable fully-resolved specifier, where `./` just distinguishes a module in scope from one that’s from another scope.","mimetype":"text/plain"},{"body":"e.g., if you have an <code>importHook</code> per scope, <code>./src/main.js</code> is a very reasonable fully-resolved specifier, where <code>./</code> just distinguishes a module in scope from one that’s from another scope.","mimetype":"text/html"}]},"ts":1658188962776,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$UIBgBi-S6o0A2sgRqHc0vj7ze9sKFKnzLKxKlcaQ8YU"},
{"content":{"body":"OK, then I agree that this is orthogonal. Then, WebAssembly.Module needs a referrer as well as host data","msgtype":"m.text"},"ts":1658188983942,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$gaLTSaQiPP20WzjW05I6c6LsXH29lzCFZ49mV2M-ehY"},
{"content":{"body":"Since, when used in import, it needs to resolve relative references ","format":"org.matrix.custom.html","formatted_body":"Since, when used in import, it needs to resolve relative references","msgtype":"m.text"},"ts":1658189020442,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$B5aSogZbd2Nxw_S_2vpQIHMj7NHNPjsIr2AISYxZTl0"},
{"content":{"body":"My position remains that `Module` needs a referrer and import reflection can produce a `Module` that contains a `WebAssembly.Module` as its source.","format":"org.matrix.custom.html","formatted_body":"My position remains that <code>Module</code> needs a referrer and import reflection can produce a <code>Module</code> that contains a <code>WebAssembly.Module</code> as its source.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"My position remains that `Module` needs a referrer and import reflection can produce a `Module` that contains a `WebAssembly.Module` as its source.","mimetype":"text/plain"},{"body":"My position remains that <code>Module</code> needs a referrer and import reflection can produce a <code>Module</code> that contains a <code>WebAssembly.Module</code> as its source.","mimetype":"text/html"}]},"ts":1658189021867,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5TZpA7Lx8AIvv6eh75AxffEeyzo9py0mwSH0jnrv9yM"},
{"content":{"body":"That would mean that it can’t be multiply instantiated, going against one of the core goals","msgtype":"m.text"},"ts":1658189049842,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wL--BUbOlsiDjCnvKnJMRJSnBzlsPwZquROCtR8D_oU"},
{"content":{"body":"It can be multiply instantiated.","msgtype":"m.text","org.matrix.msc1767.text":"It can be multiply instantiated."},"ts":1658189067247,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eLmsrb4JV4NC8Jmt8YTJ5-WgKnvPuEMzIwO8qAd_2Ms"},
{"content":{"body":"That goal is higher priority than my import() one","msgtype":"m.text"},"ts":1658189067808,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$mlMMM-5Rk_M6-3iKANoj11XqC0RbJHqesOwKbK1EEQk"},
{"content":{"body":"How can a Module be multiply instantiated?","msgtype":"m.text"},"ts":1658189080182,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$rnbXtCNTk_lbIEQpYW5DU5Nklr2_2WTBopztc_xAMJ8"},
{"content":{"body":"`await import(new Module(module.source, module.referrer, etc.))`","format":"org.matrix.custom.html","formatted_body":"<code>await import(new Module(module.source, module.referrer, etc.))</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`await import(new Module(module.source, module.referrer, etc.))`","mimetype":"text/plain"},{"body":"<code>await import(new Module(module.source, module.referrer, etc.))</code>","mimetype":"text/html"}]},"ts":1658189102764,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$UXTPl0TsqvP67WYsitXWGPdgb_WHIyZA-xDytSAQNmM"},
{"content":{"body":"OK, by cloning it","msgtype":"m.text"},"ts":1658189112800,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$JKDasQeQ7VRKuWGmehcVEADuOx37e7Pftq4Lev86Ueo"},
{"content":{"body":"Effectively, yes.","msgtype":"m.text","org.matrix.msc1767.text":"Effectively, yes."},"ts":1658189117619,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5NVKyxaNRwS1Ijk1IaQZClx9i_1fUTraLQPjINeSlu4"},
{"content":{"body":"By projecting away some of the stuff ","format":"org.matrix.custom.html","formatted_body":"By projecting away some of the stuff","msgtype":"m.text"},"ts":1658189127444,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$P6aHG6SddgAmUl6uVSpORKiIvBPHjc92QHMqdOmtMUg"},
{"content":{"body":"Well, these are two coherent points in the design space to consider","msgtype":"m.text"},"ts":1658189152726,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$okVluNkwrqo5La72eoCPVkFj6xrCL9Ym_0J5jDxAXNA"},
{"content":{"body":"Aye.","msgtype":"m.text","org.matrix.msc1767.text":"Aye."},"ts":1658189163339,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$43FThQinW0IRofCILXjtji0JfXOsFbLHU80xFAWntQI"},
{"content":{"body":"I’m just strongly against adding the referrer to the source. There are other coherent ways to meet that criterion too.","msgtype":"m.text","org.matrix.msc1767.text":"I’m just strongly against adding the referrer to the source. There are other coherent ways to meet that criterion too."},"ts":1658189201069,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lKOkhW0sQB6v9iC0gK0R0QcS6sFSN6J4eMvoq0J3Ffc"},
{"content":{"body":"Can you say more about why?","msgtype":"m.text"},"ts":1658189221047,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$qtVL4SAkY0ov1KFxN-kUYxGbjCbqvAj82EQ_2dveiRg"},
{"content":{"body":"Including an intermediate layer between source and instance. I’m weary of that though. Not a naming problem I want to get into.","msgtype":"m.text","org.matrix.msc1767.text":"Including an intermediate layer between source and instance. I’m weary of that though. Not a naming problem I want to get into."},"ts":1658189228303,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$kp3KzxUqj4_-nkek6Hl0a8g_BS2H3Ub9rUU3c6BptA0"},
{"content":{"body":"Yeah, sources are highly reusable.","msgtype":"m.text","org.matrix.msc1767.text":"Yeah, sources are highly reusable."},"ts":1658189254319,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$raT1tLRklaE3haApsfJyoCTIyMXMh26O6zZvdCTplyQ"},
{"content":{"body":"They can be backed by an immutable record that can be safely shared throughout an agent cluster without synchronization.","msgtype":"m.text","org.matrix.msc1767.text":"They can be backed by an immutable record that can be safely shared throughout an agent cluster without synchronization."},"ts":1658189292862,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$t-wxZ9zQKtp1YPaydfgnFh7Jgj0rek60ZdJBGd6Bzio"},
{"content":{"body":"And they represent no authority.","msgtype":"m.text","org.matrix.msc1767.text":"And they represent no authority."},"ts":1658189315581,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$q0VLpHdR37WWDGZDFOR1ogLc_pqxo5q_wQOuCeniIhM"},
{"content":{"body":"Taking referrer onto that does not add authority, but it does make it less clear exactly how cache and share friendly they are.","msgtype":"m.text","org.matrix.msc1767.text":"Taking referrer onto that does not add authority, but it does make it less clear exactly how cache and share friendly they are."},"ts":1658189362943,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tWBkSiRYgISaY0G_H0DyMTiL-WKDtn-8wTUKXbTkbJ8"},
{"content":{"body":"I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?","msgtype":"m.text","org.matrix.msc1767.text":"I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?"},"ts":1658229495625,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$L7_FvIzNlYh_ZQNTctf0KT5R5nvG7wP3NKnt_HjwotY"},
{"content":{"body":"is this a feature or a bug?","msgtype":"m.text","org.matrix.msc1767.text":"is this a feature or a bug?"},"ts":1658229716675,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$uMsXk6wa2RIdDuHMUJnT2hORd8ntTh4ghoPrLZcKzY4"},
{"content":{"body":"A feature! The exact code does not matter, but the amounts does. It's to show that compartments a small implementation on top of all the building blocks (or at least, that's what I remember from when I saw that slide!)","msgtype":"m.text"},"ts":1658229830244,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$rH8zKXQ7YozA-Ii0LvE6ckHTYPwPucU7J7KWZ454sVU"},
{"content":{"body":"> <@jackworks:matrix.org> is this a feature or a bug?\n\nIntentional. I don’t want people to read the whole slide, but I do want to give people an idea about how much code it takes to implement compartment in user code. Whether this is  okay or too much is actually quite subjective. For an inline implementation of import map that gets written into a large portion of the web, might be too much. But, on the other hand, might not be.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$uMsXk6wa2RIdDuHMUJnT2hORd8ntTh4ghoPrLZcKzY4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>is this a feature or a bug?</blockquote></mx-reply>Intentional. I don’t want people to read the whole slide, but I do want to give people an idea about how much code it takes to implement compartment in user code. Whether this is  okay or too much is actually quite subjective. For an inline implementation of import map that gets written into a large portion of the web, might be too much. But, on the other hand, might not be.","m.relates_to":{"m.in_reply_to":{"event_id":"$uMsXk6wa2RIdDuHMUJnT2hORd8ntTh4ghoPrLZcKzY4"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> is this a feature or a bug?\n\nIntentional. I don’t want people to read the whole slide, but I do want to give people an idea about how much code it takes to implement compartment in user code. Whether this is  okay or too much is actually quite subjective. For an inline implementation of import map that gets written into a large portion of the web, might be too much. But, on the other hand, might not be.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$uMsXk6wa2RIdDuHMUJnT2hORd8ntTh4ghoPrLZcKzY4?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>is this a feature or a bug?</blockquote></mx-reply>Intentional. I don’t want people to read the whole slide, but I do want to give people an idea about how much code it takes to implement compartment in user code. Whether this is  okay or too much is actually quite subjective. For an inline implementation of import map that gets written into a large portion of the web, might be too much. But, on the other hand, might not be.","mimetype":"text/html"}]},"ts":1658234714705,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TY751_bK15PVsQydncY_R8-esRnSTuZxO8kPllhOk6g"},
{"content":{"body":"> <@jackworks:matrix.org> I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?\n\nYes, importMeta is mutable and referrer should not be. This is a soft requirement. If we also make importMeta === import.meta, that requirement becomes harder: a module should not be able to alter its own referrer between dynamic imports. I’m leaving these all as open questions for us to settle amongst us and am not going to broach the topic at plenary.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$L7_FvIzNlYh_ZQNTctf0KT5R5nvG7wP3NKnt_HjwotY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?</blockquote></mx-reply>Yes, importMeta is mutable and referrer should not be. This is a soft requirement. If we also make importMeta === import.meta, that requirement becomes harder: a module should not be able to alter its own referrer between dynamic imports. I’m leaving these all as open questions for us to settle amongst us and am not going to broach the topic at plenary.","m.relates_to":{"m.in_reply_to":{"event_id":"$L7_FvIzNlYh_ZQNTctf0KT5R5nvG7wP3NKnt_HjwotY"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@jackworks:matrix.org> I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?\n\nYes, importMeta is mutable and referrer should not be. This is a soft requirement. If we also make importMeta === import.meta, that requirement becomes harder: a module should not be able to alter its own referrer between dynamic imports. I’m leaving these all as open questions for us to settle amongst us and am not going to broach the topic at plenary.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$L7_FvIzNlYh_ZQNTctf0KT5R5nvG7wP3NKnt_HjwotY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@jackworks:matrix.org\">@jackworks:matrix.org</a><br>I feel good with no referrer (current PR design). Is there a summary of why we want to add it back again?</blockquote></mx-reply>Yes, importMeta is mutable and referrer should not be. This is a soft requirement. If we also make importMeta === import.meta, that requirement becomes harder: a module should not be able to alter its own referrer between dynamic imports. I’m leaving these all as open questions for us to settle amongst us and am not going to broach the topic at plenary.","mimetype":"text/html"}]},"ts":1658234851083,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LF7ETnBUf7kzF80_C9xdKrKGv6D69dtduFDqeQiwUgI"},
{"content":{"body":"Could the referrer be in a provate field of importMeta not visible from inside the module?","msgtype":"m.text"},"ts":1658234936918,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$aEC4IqwIx40nlLm3q4-kZImWP-YfsjInev7vTHX0bPs"}
]