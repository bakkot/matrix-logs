[
{"content":{"body":"> <@kriskowal:matrix.org> And of course code splitting and tree shaking are both ESM native solutions in the same space. I’m a fan of linear progressive bundles: where the bundle has disjoint sub-bundles from a sequence of entrypoints.\n\ntreeshaking works just fine for CJS as well - identically well as for ESM - but the only implementation I’m aware of is for browserify; the others haven’t bothered.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24Vc6P157MCBC6LSknmMPwPZZATeXoUZ2wBbcoiBmJUnc\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>And of course code splitting and tree shaking are both ESM native solutions in the same space. I’m a fan of linear progressive bundles: where the bundle has disjoint sub-bundles from a sequence of entrypoints.</blockquote></mx-reply>treeshaking works just fine for CJS as well - identically well as for ESM - but the only implementation I’m aware of is for browserify; the others haven’t bothered.","m.relates_to":{"m.in_reply_to":{"event_id":"$Vc6P157MCBC6LSknmMPwPZZATeXoUZ2wBbcoiBmJUnc"}},"msgtype":"m.text"},"ts":1659259532785,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$Ah89hxOvWAIFeECLnoq8BqrP0f_vgAsoM6QSOdNK5sY"},
{"content":{"body":"> <@ljharb:matrix.org> treeshaking works just fine for CJS as well - identically well as for ESM - but the only implementation I’m aware of is for browserify; the others haven’t bothered.\n\nWe tried to use it at MetaMask and it was not effective. @kumavis started one with a different approach to eliminating unused exports. ","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$Ah89hxOvWAIFeECLnoq8BqrP0f_vgAsoM6QSOdNK5sY?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@ljharb:matrix.org\">@ljharb:matrix.org</a><br />treeshaking works just fine for CJS as well - identically well as for ESM - but the only implementation I’m aware of is for browserify; the others haven’t bothered.</blockquote></mx-reply>We tried to use it at MetaMask and it was not effective. @kumavis started one with a different approach to eliminating unused exports.","m.relates_to":{"m.in_reply_to":{"event_id":"$Ah89hxOvWAIFeECLnoq8BqrP0f_vgAsoM6QSOdNK5sY"}},"msgtype":"m.text"},"ts":1659259711515,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$5cbRTkIBlknINLYJp0aYTBlrUtnkYgiSZSn0qCmgXCE"},
{"content":{"body":"that’s good to know; I’m still not convinced tho since none of the bundlers have seemingly tried.","msgtype":"m.text"},"ts":1659259767639,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$jzq7V6Acejko7z8aRfT2XvGM0Ko-R7ZHc2vFpB9TDXU"},
{"content":{"body":"For now there's no cjs treeshaking we could get to work and provide noticable results ","msgtype":"m.text"},"ts":1659259772272,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$jbPwm2A9TSzZsQZC2OxtljoqtOIXKOMPJY9PBxOQrUk"},
{"content":{"body":"to be fair ESM treeshaking doesn’t work that well either","msgtype":"m.text"},"ts":1659259781042,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$u1n3bftx5udOuyCcXiounqPkb9R_IZ3ATTz4MkzBJFA"},
{"content":{"body":"at Coinbase, we banned re-exporting in favor of deep importing and the RN app’s size dropped like 20% instantly","msgtype":"m.text"},"ts":1659259798933,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$s-zCYADqBI-zazFPX0E-Erkwr-cWZet5VC94V2fCVvQ"},
{"content":{"body":"so i still think the best approach is always “only importing what you need in the first place”, and then you don’t need the crutch of treeshaking at all :-)","msgtype":"m.text"},"ts":1659259859363,"senderName":"ljharb","senderId":"@ljharb:matrix.org","id":"$K4-UseUu3Y4JI3pdoIhra7rlMlMuhOROYKHidLCXEps"},
{"content":{"body":"Own code is less of an issue. Libraries tend to bundle a bunch of related functionality where you only need a small subset (esp. tools like cryptography libs or lodash). These are treeshakeable but a lot of work goes into correctly detecting unreachable code","msgtype":"m.text"},"ts":1659260045916,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$vVk0Cs77MgDYS-AR2nGccT5pxwxU6FJmxghO16KQgnI"},
{"content":{"body":"* Own code is less of an issue. Libraries tend to bundle a bunch of related functionality where you only need a small subset (esp. tools like cryptography libs or lodash). These are treeshakeable but a lot of work goes into correctly detecting unreachable code","m.new_content":{"body":"Own code is less of an issue. Libraries tend to bundle a bunch of related functionality where you only need a small subset (esp. tools like cryptography libs or lodash). These are treeshakeable but a lot of work goes into correctly detecting unreachable code","msgtype":"m.text"},"m.relates_to":{"event_id":"$vVk0Cs77MgDYS-AR2nGccT5pxwxU6FJmxghO16KQgnI","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1659260079738,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$hf9ymYoxpO99FM27iVIczRg0xiSH-JZuxUVL-P575sM"},
{"content":{"body":"And that's what failed with browserify treeshaking. It disconnects unused export and then leaves deleting code to minification step. ","msgtype":"m.text"},"ts":1659260180162,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$dSgo4tOMSeAtI0936CCSebJ6SB0DeAweczgNcTzT13A"},
{"content":{"body":"Meanwhile the way cjs exports tend to be defined they're reachable from module scope and therefore never eliminated by dead code elimination","msgtype":"m.text"},"ts":1659260228508,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$CPxYS_W6dcmL9pu6JThcyZY7iiBZRshVVttmzNBNOmU"},
{"content":{"body":"I doubt it's possible to address with anything we do here though.","msgtype":"m.text"},"ts":1659260264488,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$yDc8EJKjHi6e3hZsSIa01JB2d5shtv3VyNU5sZz5paQ"},
{"content":{"body":"* I doubt it's possible to address with anything we do here though.","m.new_content":{"body":"I doubt it's possible to address with anything we do here though.","msgtype":"m.text"},"m.relates_to":{"event_id":"$yDc8EJKjHi6e3hZsSIa01JB2d5shtv3VyNU5sZz5paQ","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1659260352935,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$ckrDW5y6ai8feWT8gyIbrE2-UbTbUbel44X7V0fpMlQ"},
{"content":{"body":"<del>we don't use minifier in our production because it is delivered by zip file, and we want better debugibility</del>","msgtype":"m.text"},"ts":1659270152049,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$3UD7HB8tt7gWd9BOCvPBnpgOfQ9iBup31leKD2XCqYI"},
{"content":{"body":"> <@naugtur:matrix.org> Own code is less of an issue. Libraries tend to bundle a bunch of related functionality where you only need a small subset (esp. tools like cryptography libs or lodash). These are treeshakeable but a lot of work goes into correctly detecting unreachable code\n\nSome code bundles outdated polyfills (especially regenerator-runtime), that bring a lot of problems when we want to adopt SES lockdown","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$vVk0Cs77MgDYS-AR2nGccT5pxwxU6FJmxghO16KQgnI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@naugtur:matrix.org\">@naugtur:matrix.org</a><br />Own code is less of an issue. Libraries tend to bundle a bunch of related functionality where you only need a small subset (esp. tools like cryptography libs or lodash). These are treeshakeable but a lot of work goes into correctly detecting unreachable code</blockquote></mx-reply>Some code bundles outdated polyfills (especially regenerator-runtime), that bring a lot of problems when we want to adopt SES lockdown","m.relates_to":{"m.in_reply_to":{"event_id":"$vVk0Cs77MgDYS-AR2nGccT5pxwxU6FJmxghO16KQgnI"}},"msgtype":"m.text"},"ts":1659271530296,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$LvWP90-XV7D5gTmzatno3119_9NqcqKaVYjfjGt8_aI"},
{"content":{"body":"This is headed off topic real fast, but maybe we could put noop setters on existing fields we want to protect","msgtype":"m.text"},"ts":1659279423148,"senderName":"naugtur","senderId":"@naugtur:matrix.org","id":"$iVI-b2hBIwzIf6wrPUElwscxGJmYM38bYd5jLcouHic"}
]