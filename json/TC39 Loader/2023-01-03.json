[
{"content":{"body":"I will unfortunately skip the call today, I'll be traveling at that time. See you in two weeks!","msgtype":"m.text"},"ts":1672733122699,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$ZOj7HXdnB7oZSUqFFyjZGLleh9BZe7R3e8sesNisZrQ"},
{"content":{"body":"@annevk wrote in General:\n> yulia | sick:  littledan:  I could make the Module Loading call tonight if that's helpful, please lmk\nhttps://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oeD0yH7tagpCoRrR4gbgusb0fzM1ydOzWLIasu1T2ng?via=matrix.org&via=mozilla.org&via=igalia.com","format":"org.matrix.custom.html","formatted_body":"@annevk wrote in General:\n> <a href=\"https://matrix.to/#/@yulia:mozilla.org\">yulia | sick</a>:  <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>:  I could make the Module Loading call tonight if that's helpful, please lmk\nhttps://matrix.to/#/!wbACpffbfxANskIFZq:matrix.org/$oeD0yH7tagpCoRrR4gbgusb0fzM1ydOzWLIasu1T2ng?via=matrix.org&via=mozilla.org&via=igalia.com","msgtype":"m.text"},"ts":1672736052578,"senderName":"Mathieu Hofman","senderId":"@mhofman:matrix.org","id":"$DfdnJlxLRYaULvQNkiyF_fy-w9sHUJ2ivVNjTJ5rbBc"},
{"content":{"body":"> <@nicolo-ribaudo:matrix.org> I will unfortunately skip the call today, I'll be traveling at that time. See you in two weeks!\n\nMe too!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24ZOj7HXdnB7oZSUqFFyjZGLleh9BZe7R3e8sesNisZrQ\">In reply to</a> <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">@nicolo-ribaudo:matrix.org</a><br>I will unfortunately skip the call today, I'll be traveling at that time. See you in two weeks!</blockquote></mx-reply>Me too!","m.relates_to":{"m.in_reply_to":{"event_id":"$ZOj7HXdnB7oZSUqFFyjZGLleh9BZe7R3e8sesNisZrQ"}},"msgtype":"m.text"},"ts":1672750357102,"senderName":"Luca Casonato","senderId":"@lucacasonato:matrix.org","id":"$Wtl4BEuPJ4AttD6_XFSZMv35fEPjOjSeTDILyDqtP1g"},
{"content":{"body":"Let's declare this time cancelled, if Yulia is also sick","msgtype":"m.text","org.matrix.msc1767.text":"Let's declare this time cancelled, if Yulia is also sick"},"ts":1672757269288,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$Ya2G4w67_CFLQuFl80T1j_Ml087xOhDWGp4ijbJNlCA"},
{"content":{"body":"also let's invite Anne tot his room","msgtype":"m.text","org.matrix.msc1767.text":"also let's invite Anne tot his room"},"ts":1672757278400,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$MV2u7kwqGf3nLEJca98qLCni3tVltP4DVjTMjyjTynY"},
{"content":{"body":"Do we have an agenda today ","msgtype":"m.text"},"ts":1672762767746,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$oxrnxN_USsqWWCNsdeEdnFYIv1ZXm13W2-7bDeP5hNY"},
{"content":{"body":"We do not. I concur with the overall sentiment. We’ll convene in two weeks. I’ll invite Anne to this room.","msgtype":"m.text","org.matrix.msc1767.text":"We do not. I concur with the overall sentiment. We’ll convene in two weeks. I’ll invite Anne to this room."},"ts":1672765271009,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ERauxzVe8Nb0LiCdXKUSW4nLkUtQZo79QzAl-0QUbnM"},
{"content":{"body":"Ok (btw I'm also on a sick leave until Jan 16)","msgtype":"m.text"},"ts":1672765362966,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$A9pCGObzZ56DEVSV5qkfPp79aD1lQkVqJ9R3QV4CSLU"},
{"content":{"body":"* Ok (btw I'm also on a sick leave until Jan 16)","m.new_content":{"body":"Ok (btw I'm also on a sick leave until Jan 16)","msgtype":"m.text"},"m.relates_to":{"event_id":"$A9pCGObzZ56DEVSV5qkfPp79aD1lQkVqJ9R3QV4CSLU","rel_type":"m.replace"},"msgtype":"m.text"},"ts":1672765383946,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$J8X3a6Wl1fUxWWnDS6UqwwS5w6lBy-HtxgMTNCVAijk"},
{"content":{"body":"For agenda building for N*2 weeks from now, I’d like for us to plan to meet with bakkot to improve our understanding of the feedback from the previous plenary. That may be an opportunity to prepare and dry-run a module harmony presentation-of-presentations.","format":"org.matrix.custom.html","formatted_body":"For agenda building for N*2 weeks from now, I’d like for us to plan to meet with <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to improve our understanding of the feedback from the previous plenary. That may be an opportunity to prepare and dry-run a module harmony presentation-of-presentations.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"For agenda building for N*2 weeks from now, I’d like for us to plan to meet with bakkot to improve our understanding of the feedback from the previous plenary. That may be an opportunity to prepare and dry-run a module harmony presentation-of-presentations.","mimetype":"text/plain"},{"body":"For agenda building for N*2 weeks from now, I’d like for us to plan to meet with <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> to improve our understanding of the feedback from the previous plenary. That may be an opportunity to prepare and dry-run a module harmony presentation-of-presentations.","mimetype":"text/html"}]},"ts":1672765513895,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XfGwKCrL1psl-5HlAiKCweufFzZ_8tdDZKYuciYu0Wc"},
{"content":{"body":"I still am on the hook to refactor the compartments proposal into epic-module-harmony and proposal-module-constructor etc.","msgtype":"m.text","org.matrix.msc1767.text":"I still am on the hook to refactor the compartments proposal into epic-module-harmony and proposal-module-constructor etc."},"ts":1672765562440,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JJBizgpfZ342m7sKE8EtTmocwh69GtiabTzEFsxZKUo"},
{"content":{"body":"Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).","format":"org.matrix.custom.html","formatted_body":"Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether <code>import(new Module(new ModuleSource(text)))</code> qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).","mimetype":"text/plain"},{"body":"Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether <code>import(new Module(new ModuleSource(text)))</code> qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).","mimetype":"text/html"}]},"ts":1672766363229,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$b86GORPbcPGwlB1TjYEaEsbtgBV3VWrajwBMzaXRp44"},
{"content":{"body":"I also nominate following up on the import assertions design discussion, as an agenda item next fortnight. And I nominate peetk and nicolo-ribaudo to lead that discussion :)","format":"org.matrix.custom.html","formatted_body":"I also nominate following up on the import assertions design discussion, as an agenda item next fortnight. And I nominate <a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a> and <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> to lead that discussion :)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I also nominate following up on the import assertions design discussion, as an agenda item next fortnight. And I nominate peetk and nicolo-ribaudo to lead that discussion :)","mimetype":"text/plain"},{"body":"I also nominate following up on the import assertions design discussion, as an agenda item next fortnight. And I nominate <a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a> and <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> to lead that discussion :)","mimetype":"text/html"}]},"ts":1672766415414,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$5wSaKWcIha5sGGG_NXetV5_DMaeNdte1sJjEqNd-vSA"},
{"content":{"body":"We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.","msgtype":"m.text","org.matrix.msc1767.text":"We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions."},"ts":1672766423893,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nyqyHJ0z5L4UAif8CbTm0yKcdTslfjYMvZzqHT8m4sA"},
{"content":{"body":"> <@kriskowal:matrix.org> We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.\n\nI'd propose that we organize that like, annevk recaps his understanding of the problem we need to solve, then nicolo-ribaudo / peetk outline the possible solution we've been discussing, then annevk shares thoughts","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$nyqyHJ0z5L4UAif8CbTm0yKcdTslfjYMvZzqHT8m4sA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.</blockquote></mx-reply>I'd propose that we organize that like, <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> recaps his understanding of the problem we need to solve, then <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> / <a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a> outline the possible solution we've been discussing, then <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> shares thoughts","m.relates_to":{"m.in_reply_to":{"event_id":"$nyqyHJ0z5L4UAif8CbTm0yKcdTslfjYMvZzqHT8m4sA"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.\n\nI'd propose that we organize that like, annevk recaps his understanding of the problem we need to solve, then nicolo-ribaudo / peetk outline the possible solution we've been discussing, then annevk shares thoughts","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$nyqyHJ0z5L4UAif8CbTm0yKcdTslfjYMvZzqHT8m4sA?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>We also have a standing invitation to give @annevk the floor to discuss the next steps for import assertions.</blockquote></mx-reply>I'd propose that we organize that like, <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> recaps his understanding of the problem we need to solve, then <a href=\"https://matrix.to/#/@nicolo-ribaudo:matrix.org\">nicolo-ribaudo</a> / <a href=\"https://matrix.to/#/@peetk:matrix.org\">peetk</a> outline the possible solution we've been discussing, then <a href=\"https://matrix.to/#/@annevk:matrix.org\">annevk</a> shares thoughts","mimetype":"text/html"}]},"ts":1672766492044,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$K9jKy27yRTIP0mgd8HajuzzQ2zw476e8pfsgl9LTCdA"},
{"content":{"body":"@annevk are you available +1 fortnight?","msgtype":"m.text","org.matrix.msc1767.text":"@annevk are you available +1 fortnight?"},"ts":1672766529440,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$z1D2Z-T7v257ri86_boxhx3U4rKHoh1FXOJkJFUK8Kk"},
{"content":{"body":"Also, thank you littledan, I’m ecstatic to find company in which biweekly isn’t a word.","format":"org.matrix.custom.html","formatted_body":"Also, thank you <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>, I’m ecstatic to find company in which biweekly isn’t a word.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Also, thank you littledan, I’m ecstatic to find company in which biweekly isn’t a word.","mimetype":"text/plain"},{"body":"Also, thank you <a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>, I’m ecstatic to find company in which biweekly isn’t a word.","mimetype":"text/html"}]},"ts":1672766607076,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oUUfWBUnSyR-jrFXLfyfcHvQfR89HB84LfQwN9gRgQI"},
{"content":{"body":"> <@kriskowal:matrix.org> Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).\n\nTo be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$b86GORPbcPGwlB1TjYEaEsbtgBV3VWrajwBMzaXRp44?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether <code>import(new Module(new ModuleSource(text)))</code> qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).</blockquote></mx-reply>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.","m.relates_to":{"m.in_reply_to":{"event_id":"$b86GORPbcPGwlB1TjYEaEsbtgBV3VWrajwBMzaXRp44"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether `import(new Module(new ModuleSource(text)))` qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).\n\nTo be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$b86GORPbcPGwlB1TjYEaEsbtgBV3VWrajwBMzaXRp44?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Until then, @bakkot, your feedback from plenary, if memory serves is, “no new path to eval”, and when we convene again, we are going to want to break that down and examine whether <code>import(new Module(new ModuleSource(text)))</code> qualifies as a new path to eval in the sense that you mean, and whether it’s fatal given the mitigations we have in mind. Not looking to dig in now, since we’ve got a lot of folks away, but I’d like to prime the pump for the next meeting (or a meeting thereafter).</blockquote></mx-reply>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.","mimetype":"text/html"}]},"ts":1672770390385,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI"},
{"content":{"body":"Kris Kowal: yeah that should work","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: yeah that should work","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: yeah that should work","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: yeah that should work","mimetype":"text/html"}]},"ts":1672771141634,"senderName":"annevk","senderId":"@annevk:matrix.org","id":"$A7Q0AA4ERkld0N5YvzqJzqboydf27J76AhjfE2Viw5Q"},
{"content":{"body":"> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.\n\nI think the decision about whether we expose a ModuleSource constructor which takes a string argument is extremely separable from everything else. We've heard bakkot say he doesn't want it, ljharb say he wants it, and others seem OK multiple ways. I don't think the decision here will affect any other part of the APIs we've been discussing, and I think we have a very clear shared understanding of what it would do if it does exist.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.</blockquote></mx-reply>I think the decision about whether we expose a ModuleSource constructor which takes a string argument is extremely separable from everything else. We've heard <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> say he doesn't want it, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> say he wants it, and others seem OK multiple ways. I don't think the decision here will affect any other part of the APIs we've been discussing, and I think we have a very clear shared understanding of what it would do if it does exist.","m.relates_to":{"m.in_reply_to":{"event_id":"$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.\n\nI think the decision about whether we expose a ModuleSource constructor which takes a string argument is extremely separable from everything else. We've heard bakkot say he doesn't want it, ljharb say he wants it, and others seem OK multiple ways. I don't think the decision here will affect any other part of the APIs we've been discussing, and I think we have a very clear shared understanding of what it would do if it does exist.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.</blockquote></mx-reply>I think the decision about whether we expose a ModuleSource constructor which takes a string argument is extremely separable from everything else. We've heard <a href=\"https://matrix.to/#/@bakkot:matrix.org\">bakkot</a> say he doesn't want it, <a href=\"https://matrix.to/#/@ljharb:matrix.org\">ljharb</a> say he wants it, and others seem OK multiple ways. I don't think the decision here will affect any other part of the APIs we've been discussing, and I think we have a very clear shared understanding of what it would do if it does exist.","mimetype":"text/html"}]},"ts":1672771173196,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zioQAD5vi-BGFb6maHYM8lU1YZgNKPnR6jQHqQIIQnA"},
{"content":{"body":"(so, I think it should be treated as a post-Stage 2, pre-Stage 3 decision, having been fully scoped out)","msgtype":"m.text","org.matrix.msc1767.text":"(so, I think it should be treated as a post-Stage 2, pre-Stage 3 decision, having been fully scoped out)"},"ts":1672771355222,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$foHBXLjpnLDvWac-OK4Lk_4Vm95D5Wn1F0O6Pnx-fEQ"},
{"content":{"body":"(still fine to hear out bakkot more, but I think he was plenty clear in plenary?)","msgtype":"m.text","org.matrix.msc1767.text":"(still fine to hear out bakkot more, but I think he was plenty clear in plenary?)"},"ts":1672771481399,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$O5VEG_D4nKwsqo8SV-Vpb04fTT0tJQGooe74aXc8z8w"},
{"content":{"body":"(I think the answer to the question is: clearly yes)","msgtype":"m.text","org.matrix.msc1767.text":"(I think the answer to the question is: clearly yes)"},"ts":1672771609036,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$_ZyPQn_SMXi8ATPyzVSJsdXr88wuQgIGm263E4tvX1g"},
{"content":{"body":"> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.\n\nGreat, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.</blockquote></mx-reply>Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).","m.relates_to":{"m.in_reply_to":{"event_id":"$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> To be precise, I'm not dead set against having a new path to `eval` - I would just want there to be a very strong reason for it, which I haven't heard yet.\n\nGreat, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$YVwL5RLZMi46DO6s_zyGPrFUfkDgH6dxyh_BJRG4vSI?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>To be precise, I'm not dead set against having a new path to <code>eval</code> - I would just want there to be a very strong reason for it, which I haven't heard yet.</blockquote></mx-reply>Great, this is clear. We can focus on building 1. the strongest reason and 2. the work-arounds other proposals (specifically module binding static analysis) can be recovered in the absence of ModuleSource(text).","mimetype":"text/html"}]},"ts":1672771638543,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EE0UF3aRmKPLyyJTcMCsQUh8lmG7fO95D4hNtLA16g4"},
{"content":{"body":"That is, being able to parse a string’s static imports and exports is currently subsumed by the ModuleSource(text) constructor but does not necessarily need to be on the path to importing the text. That can be recovered either by a parse bindings function sitting somewhere else, or by rendering module source instances constructed by ModuleSource(text) unusable (which is consistent with what a CSP would do anyway)","msgtype":"m.text","org.matrix.msc1767.text":"That is, being able to parse a string’s static imports and exports is currently subsumed by the ModuleSource(text) constructor but does not necessarily need to be on the path to importing the text. That can be recovered either by a parse bindings function sitting somewhere else, or by rendering module source instances constructed by ModuleSource(text) unusable (which is consistent with what a CSP would do anyway)"},"ts":1672771815077,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pC8dT89E1vHmZDJDMVVsMpzoghzz3r6aFYuqNdEvDsk"},
{"content":{"body":"And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.","msgtype":"m.text","org.matrix.msc1767.text":"And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed."},"ts":1672771846051,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$e4A5mLZ6V-6pLaFYXcRgb8VgfRQHK0auJtIhI30IrTs"},
{"content":{"body":" * And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.","m.new_content":{"body":"And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed.","msgtype":"m.text","org.matrix.msc1767.text":"And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed."},"m.relates_to":{"event_id":"$e4A5mLZ6V-6pLaFYXcRgb8VgfRQHK0auJtIhI30IrTs","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * And the motivation for parsing bindings is bundle, web archive, or import map generation, in which case, a path to eval is not needed."},"ts":1672771877304,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$s1pHKjcMHYWsQFXQsM42QoYUsUg5ads7tcWK1zO2kxQ"},
{"content":{"body":"I suspect that the strongest case for a path-to-eval is a debugging environment, with hot module replacement occurring client-side, such that the runtime behavior more closely resembles a production environment than is possible to achieve with the current tooling ecosystem.","msgtype":"m.text","org.matrix.msc1767.text":"I suspect that the strongest case for a path-to-eval is a debugging environment, with hot module replacement occurring client-side, such that the runtime behavior more closely resembles a production environment than is possible to achieve with the current tooling ecosystem."},"ts":1672772037222,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$4nPOZ8AlpFIuxbhlBF86J0-NKi40rfuE_097QzZiW5I"},
{"content":{"body":"> bundle, web archive, or import map generation\n\nThose seem like somewhat niche use cases which would be adequately met by userland parsers, to me? Doesn't seem like support for those things would need to be built into the language.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>bundle, web archive, or import map generation</p>\n</blockquote>\n<p>Those seem like somewhat niche use cases which would be adequately met by userland parsers, to me? Doesn't seem like support for those things would need to be built into the language.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> bundle, web archive, or import map generation\n\nThose seem like somewhat niche use cases which would be adequately met by userland parsers, to me? Doesn't seem like support for those things would need to be built into the language.","mimetype":"text/plain"},{"body":"<blockquote>\n<p>bundle, web archive, or import map generation</p>\n</blockquote>\n<p>Those seem like somewhat niche use cases which would be adequately met by userland parsers, to me? Doesn't seem like support for those things would need to be built into the language.</p>\n","mimetype":"text/html"}]},"ts":1672772551555,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$JKaJhwQ8-1a91r2N80MRZDDID6iM_S-egkKae6HHyA4"},
{"content":{"body":"We already have pure-JS bundlers, after all.","msgtype":"m.text","org.matrix.msc1767.text":"We already have pure-JS bundlers, after all."},"ts":1672772575951,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$TnDmA0QQ4WUUg-BHPfgQgSxBSZkr_plOGUQdEg10l4o"},
{"content":{"body":"(I'm not saying they're niche things for developers to do, just that they're niche things to do _in code which is shipped to users_; when building something into the language the latter is more relevant.)","format":"org.matrix.custom.html","formatted_body":"(I'm not saying they're niche things for developers to do, just that they're niche things to do <em>in code which is shipped to users</em>; when building something into the language the latter is more relevant.)","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"(I'm not saying they're niche things for developers to do, just that they're niche things to do _in code which is shipped to users_; when building something into the language the latter is more relevant.)","mimetype":"text/plain"},{"body":"(I'm not saying they're niche things for developers to do, just that they're niche things to do <em>in code which is shipped to users</em>; when building something into the language the latter is more relevant.)","mimetype":"text/html"}]},"ts":1672772677477,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$sUb0ESgeUWWIxo3awXSKDRcO9wkDzp2SHSPB3d2su_Q"},
{"content":{"body":"I agree that the value is bounded in this way.","msgtype":"m.text","org.matrix.msc1767.text":"I agree that the value is bounded in this way."},"ts":1672772719566,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$LEf87NPeL3Ymwx1ruHhoNtf6RAUgZGeOo_nT8u6kVn4"},
{"content":{"body":"And other motivating use cases I can expound upon do not involve web browsers, so I expect them to be less convincing.","msgtype":"m.text","org.matrix.msc1767.text":"And other motivating use cases I can expound upon do not involve web browsers, so I expect them to be less convincing."},"ts":1672772867218,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Y5hNJyqH7DoD2o4eTymryFLmE9advdAbAWfm0ir_jXg"},
{"content":{"body":"For example, at Agoric, we would like to ship programs to workers as zip files containing the original sources. The workers would use the ModuleSource constructor to build out the module graph. We’re also avoiding source-to-source transforms so that audits are more transparent. The auditor can review the code and not worry about holes that would be opened by generated code. We’re currently unable to do this because our shim has to funnel module code through eval, so we necessarily have to do a module-to-program transform, and since that is prohibitively expensive, our zip files currently contain a JSON blob that contains the program and the bindings.","msgtype":"m.text","org.matrix.msc1767.text":"For example, at Agoric, we would like to ship programs to workers as zip files containing the original sources. The workers would use the ModuleSource constructor to build out the module graph. We’re also avoiding source-to-source transforms so that audits are more transparent. The auditor can review the code and not worry about holes that would be opened by generated code. We’re currently unable to do this because our shim has to funnel module code through eval, so we necessarily have to do a module-to-program transform, and since that is prohibitively expensive, our zip files currently contain a JSON blob that contains the program and the bindings."},"ts":1672773225698,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZuahR9Pg_qX8Hz-jYo7-vqjkabisg8VejTA5QibV8Zc"},
{"content":{"body":"And notably, Agoric/Endo execution environments do not employ CSP but do harden the worker realm and confine guest programs, so the trade-offs are different. It would be fair to call our case niche, but not unimportant.","msgtype":"m.text","org.matrix.msc1767.text":"And notably, Agoric/Endo execution environments do not employ CSP but do harden the worker realm and confine guest programs, so the trade-offs are different. It would be fair to call our case niche, but not unimportant."},"ts":1672773302455,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lUrZrHmzlcuilt3VAym8nL-EnmJOZRmSi9g2AN_o7_o"},
{"content":{"body":"Rather, I’d call it nascent.","msgtype":"m.text","org.matrix.msc1767.text":"Rather, I’d call it nascent."},"ts":1672773335135,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pCm-lC05hNr5AvufSy5JgBqcK2pUihnJRBLGqI_oYuU"},
{"content":{"body":"(For example, the very common babel facebook/regenerator runtime introduces thawn-objects in a way that would not be obvious to an auditor and would open a program to interference that would otherwise not be possible.)","msgtype":"m.text","org.matrix.msc1767.text":"(For example, the very common babel facebook/regenerator runtime introduces thawn-objects in a way that would not be obvious to an auditor and would open a program to interference that would otherwise not be possible.)"},"ts":1672773473622,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hX6CSgarOs4FQfOUuyDCOTyaSrwxYLP3qy2JBQ4bL8A"},
{"content":{"body":"A consequence of the current language limitations is that a debugger attached to a production heap snapshot can’t match stack traces with local code artifacts.","msgtype":"m.text","org.matrix.msc1767.text":"A consequence of the current language limitations is that a debugger attached to a production heap snapshot can’t match stack traces with local code artifacts."},"ts":1672773545665,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$WqGpFDSBGmM5ydCIJK_4cC8NuLdgJmcNF0Divg9J13o"},
{"content":{"body":"If you could import a reified-but-not-evaluated `Module` and structuredClone it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","format":"org.matrix.custom.html","formatted_body":"If you could import a reified-but-not-evaluated <code>Module</code> and structuredClone it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you could import a reified-but-not-evaluated `Module` and structuredClone it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","mimetype":"text/plain"},{"body":"If you could import a reified-but-not-evaluated <code>Module</code> and structuredClone it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","mimetype":"text/html"}]},"ts":1672774464568,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$_n7BeOVU3Nf4rp7My4y0JvxqWYqqSv3XM-zx6HGdrEM"},
{"content":{"body":"(import or otherwise obtain in some manner other than constructing from a string, as would be provided some of these proposals IIUC)","msgtype":"m.text","org.matrix.msc1767.text":"(import or otherwise obtain in some manner other than constructing from a string, as would be provided some of these proposals IIUC)"},"ts":1672774504882,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$FPp3-9gpNdPCsFGeQ0zgB_0t291Yyw42Ba_KnQjeim0"},
{"content":{"body":" * If you could import a reified-but-not-evaluated `Module` and `postMessag` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","format":"org.matrix.custom.html","formatted_body":" * If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessag</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","m.new_content":{"body":"If you could import a reified-but-not-evaluated `Module` and `postMessag` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","format":"org.matrix.custom.html","formatted_body":"If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessag</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you could import a reified-but-not-evaluated `Module` and `postMessag` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","mimetype":"text/plain"},{"body":"If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessag</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_n7BeOVU3Nf4rp7My4y0JvxqWYqqSv3XM-zx6HGdrEM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If you could import a reified-but-not-evaluated `Module` and `postMessag` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","mimetype":"text/plain"},{"body":" * If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessag</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","mimetype":"text/html"}]},"ts":1672774527449,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$tD4DfGy0Xag_ZPvGeyyugVxmZXY6ilGBTqqVnKbyOoA"},
{"content":{"body":" * If you could import a reified-but-not-evaluated `Module` and `postMessage` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","format":"org.matrix.custom.html","formatted_body":" * If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessage</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","m.new_content":{"body":"If you could import a reified-but-not-evaluated `Module` and `postMessage` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","format":"org.matrix.custom.html","formatted_body":"If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessage</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"If you could import a reified-but-not-evaluated `Module` and `postMessage` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","mimetype":"text/plain"},{"body":"If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessage</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$_n7BeOVU3Nf4rp7My4y0JvxqWYqqSv3XM-zx6HGdrEM","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * If you could import a reified-but-not-evaluated `Module` and `postMessage` it to a worker, would that eliminate your need for `eval` and therefore your need to bundle?","mimetype":"text/plain"},{"body":" * If you could import a reified-but-not-evaluated <code>Module</code> and <code>postMessage</code> it to a worker, would that eliminate your need for <code>eval</code> and therefore your need to bundle?","mimetype":"text/html"}]},"ts":1672774531523,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$hYQEOuOdD-YFMiwu5in1vWIeoWOWT2esT6jdlilptcA"},
{"content":{"body":"postMessage is not available in the particular context.","msgtype":"m.text","org.matrix.msc1767.text":"postMessage is not available in the particular context."},"ts":1672774543882,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xARaGgcTN34odWlYuL_e49AT22D8MFkOdKij8_OjtVA"},
{"content":{"body":"Though a suitable postMessage could be implemented in terms of ModuleSource.","msgtype":"m.text","org.matrix.msc1767.text":"Though a suitable postMessage could be implemented in terms of ModuleSource."},"ts":1672774575530,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$sfE3nju44bhgrx9a5xWAN-ZDt8BSJ2_MsLFFWWIPwkc"},
{"content":{"body":"Wait, so how are you getting stuff into a worker without postMessage?","msgtype":"m.text","org.matrix.msc1767.text":"Wait, so how are you getting stuff into a worker without postMessage?"},"ts":1672774608712,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$p7ptpaZciuWavg_gdWy1Le8gtSdBHrPWl16b394ZnYE"},
{"content":{"body":"I’m using the term Worker loosely. This is a Node.js or XS child process.","msgtype":"m.text","org.matrix.msc1767.text":"I’m using the term Worker loosely. This is a Node.js or XS child process."},"ts":1672774625909,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Yj5rLvk1pVr0cpA6Aty4FQJpb1LLLR0r47jHZL-39xM"},
{"content":{"body":"Node has postMessage - though I guess not to actual child processes spawned with `exec` or whatever.","format":"org.matrix.custom.html","formatted_body":"Node has postMessage - though I guess not to actual child processes spawned with <code>exec</code> or whatever.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Node has postMessage - though I guess not to actual child processes spawned with `exec` or whatever.","mimetype":"text/plain"},{"body":"Node has postMessage - though I guess not to actual child processes spawned with <code>exec</code> or whatever.","mimetype":"text/html"}]},"ts":1672774652792,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$WBZMtXQRSFVV9LIwdNCgFL2NAQI3QPGW_pIylZcNc2Q"},
{"content":{"body":"Aye, and process isolation is key. XS too. The application can resume from snapshot.","msgtype":"m.text","org.matrix.msc1767.text":"Aye, and process isolation is key. XS too. The application can resume from snapshot."},"ts":1672774722176,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ITuYY8r2rtDJsrPX3dqxCrgnKwARo4lZMKqpUGrX1QE"},
{"content":{"body":"Since you're targeting specific platforms, can you not hook into the runtime with native code and get at bindings that way? Or roll your own native `ModuleSource`-equivalent constructor, for that matter?","format":"org.matrix.custom.html","formatted_body":"Since you're targeting specific platforms, can you not hook into the runtime with native code and get at bindings that way? Or roll your own native <code>ModuleSource</code>-equivalent constructor, for that matter?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since you're targeting specific platforms, can you not hook into the runtime with native code and get at bindings that way? Or roll your own native `ModuleSource`-equivalent constructor, for that matter?","mimetype":"text/plain"},{"body":"Since you're targeting specific platforms, can you not hook into the runtime with native code and get at bindings that way? Or roll your own native <code>ModuleSource</code>-equivalent constructor, for that matter?","mimetype":"text/html"}]},"ts":1672774981647,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$Mbjqzbw3QfrcVFpu9g8siIcJ8t5LeC62Qspl6ERKX6Q"},
{"content":{"body":"I guess V8 might not expose the things you'd need, though that's in principle solvable.","msgtype":"m.text","org.matrix.msc1767.text":"I guess V8 might not expose the things you'd need, though that's in principle solvable."},"ts":1672775013635,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$InyseYzKnikTpy_8JPXZvXuNBQa7fz05IjaMBatH_QM"},
{"content":{"body":"XS implements ModuleSource effectively. We are working in that direction, yes.","msgtype":"m.text","org.matrix.msc1767.text":"XS implements ModuleSource effectively. We are working in that direction, yes."},"ts":1672775019069,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$YvtXZVqO1EpYwY6Vpg6tO8Mf2mrRL85GCBBDCYwxziY"},
{"content":{"body":"There’s also a course to having these applications portable-to-web using XS on WASM. This is of course, not ideal, but certainly suitable for evidence of motivation :-P ","msgtype":"m.text","org.matrix.msc1767.text":"There’s also a course to having these applications portable-to-web using XS on WASM. This is of course, not ideal, but certainly suitable for evidence of motivation :-P "},"ts":1672775216754,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$nQ84EGHt9iokSQErrZKMN-CThdqWhmvicyRoZ3s7uuY"},
{"content":{"body":"And also the course of using a Service Worker to pop the zip open. My feeling is that’s got its own trade-offs.","msgtype":"m.text","org.matrix.msc1767.text":"And also the course of using a Service Worker to pop the zip open. My feeling is that’s got its own trade-offs."},"ts":1672775742130,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$912dY-m9wWo_ZcBby65iS9G0v9hVwIE4FCYyJPqH83U"},
{"content":{"body":"And of these options, having ModuleSource provided by the language is the most portable.","msgtype":"m.text","org.matrix.msc1767.text":"And of these options, having ModuleSource provided by the language is the most portable."},"ts":1672775863232,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$dDsAwIf6AGsh_NQC_-UUCOj2Miwj7KyB328a5Jj9zq8"},
{"content":{"body":"The alternatives require assumptions of a shared foundation that does not exist.","msgtype":"m.text","org.matrix.msc1767.text":"The alternatives require assumptions of a shared foundation that does not exist."},"ts":1672775900866,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fEtMZ89t9VPdwcWZB0sg7h1c8pp1xEX5y3bUncVLMdU"},
{"content":{"body":"Spawning a new process is fundamentally not portable to begin with, so I'm not sure why portability matters here","msgtype":"m.text","org.matrix.msc1767.text":"Spawning a new process is fundamentally not portable to begin with, so I'm not sure why portability matters here"},"ts":1672783021862,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$ATThxMumgbNFK_cul7RU5aCrZERklAk3KGVBe-nbAbg"},
{"content":{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","format":"org.matrix.custom.html","formatted_body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/plain"},{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/html"}]},"ts":1672783913737,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$8lub3PgMFhr2Dq86pn2jpfFIC1wt6j7XPjOwShbpH3E"},
{"content":{"body":" * Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","format":"org.matrix.custom.html","formatted_body":" * Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","m.new_content":{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","format":"org.matrix.custom.html","formatted_body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/plain"},{"body":"Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$8lub3PgMFhr2Dq86pn2jpfFIC1wt6j7XPjOwShbpH3E","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with `ModuleSource`, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/plain"},{"body":" * Spawning, the conceit that all content everything is a URL backed by an ambient fetch capability, and module loading can (and I reckoon should) be made orthogonal. The portion of the problem pertaining to spawning is expressible in a hook that differs by platform and, with <code>ModuleSource</code>, nothing else is different. Drawing module sources out of an archive doesn’t require any I/O.","mimetype":"text/html"}]},"ts":1672783927846,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$z4pXxH-3tnyWFnxYSF5kD2WLhEay7oauclQsXvgQBhY"},
{"content":{"body":"Well, neither does parsing the bindings out of a string, in principle","msgtype":"m.text","org.matrix.msc1767.text":"Well, neither does parsing the bindings out of a string, in principle"},"ts":1672783959625,"senderName":"bakkot","senderId":"@bakkot:matrix.org","id":"$jl5LQqe3AklbMV6K_6XV1pRFsmrumOxvuIVtv-Ecnb0"},
{"content":{"body":"Not requiring I/O is a pretty big deal. Dynamic import currently creates an exfiltration channel.","msgtype":"m.text","org.matrix.msc1767.text":"Not requiring I/O is a pretty big deal. Dynamic import currently creates an exfiltration channel."},"ts":1672783977242,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$tm1YY-M19MI87F6AJDVZVkT-Yna66OpQpjJbo_C37Cg"},
{"content":{"body":"> <@bakkot:matrix.org> Well, neither does parsing the bindings out of a string, in principle\n\nAnd executing JavaScript, in principle!","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$jl5LQqe3AklbMV6K_6XV1pRFsmrumOxvuIVtv-Ecnb0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Well, neither does parsing the bindings out of a string, in principle</blockquote></mx-reply>And executing JavaScript, in principle!","m.relates_to":{"m.in_reply_to":{"event_id":"$jl5LQqe3AklbMV6K_6XV1pRFsmrumOxvuIVtv-Ecnb0"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@bakkot:matrix.org> Well, neither does parsing the bindings out of a string, in principle\n\nAnd executing JavaScript, in principle!","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$jl5LQqe3AklbMV6K_6XV1pRFsmrumOxvuIVtv-Ecnb0?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@bakkot:matrix.org\">@bakkot:matrix.org</a><br>Well, neither does parsing the bindings out of a string, in principle</blockquote></mx-reply>And executing JavaScript, in principle!","mimetype":"text/html"}]},"ts":1672784000379,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$xWqKCpy8Jnv5jv8-LEUVVULUCQKgjBND0q4DT0Y79uE"}
]