[
{"content":{"body":"Maybe should call it `Compartment` and build up from there.","format":"org.matrix.custom.html","formatted_body":"Maybe should call it <code>Compartment</code> and build up from there.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Maybe should call it `Compartment` and build up from there.","mimetype":"text/plain"},{"body":"Maybe should call it <code>Compartment</code> and build up from there.","mimetype":"text/html"}]},"ts":1657678271799,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$utHSJgIQK9AHKtir98q3WJA81mBdCb1_nncrS6sKOic"},
{"content":{"body":"`new Evaluators({globalThis, importHook}) => {eval, Function, Module}` seems good.","format":"org.matrix.custom.html","formatted_body":"<code>new Evaluators({globalThis, importHook}) =&gt; {eval, Function, Module}</code> seems good.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"`new Evaluators({globalThis, importHook}) => {eval, Function, Module}` seems good.","mimetype":"text/plain"},{"body":"<code>new Evaluators({globalThis, importHook}) =&gt; {eval, Function, Module}</code> seems good.","mimetype":"text/html"}]},"ts":1657702964567,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yeLwVC_vF08GL0ukJeGfQw4RTwfRspQ3MDgBgcxXUF0"},
{"content":{"body":"It’s certainly better than Shire or Fiefdom.","msgtype":"m.text","org.matrix.msc1767.text":"It’s certainly better than Shire or Fiefdom."},"ts":1657703133005,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$gA0B5zU-LZO52UD0nDbGHO_xGJSy3J2kwVa9lEvGCec"},
{"content":{"body":"The latter should obviously be reserved: ”Fiefdom: A Realm that has -DOM”.","msgtype":"m.text","org.matrix.msc1767.text":"The latter should obviously be reserved: ”Fiefdom: A Realm that has -DOM”."},"ts":1657703204277,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ZEQFsSh0OfZA_vuof8mSE1YE7NO0vhuhO4Nqdji-WO0"},
{"content":{"body":"Oh, silly me. That joke works just as well with Kingdom.","msgtype":"m.text","org.matrix.msc1767.text":"Oh, silly me. That joke works just as well with Kingdom."},"ts":1657703258795,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$_6MD1PV5LWdN1QdPNie_TYEEJfotkTuLl1hNL-eNczI"},
{"content":{"body":"What is the purpose of the eval and function hooks? Is this about them leaking the global object?","msgtype":"m.text","org.matrix.msc1767.text":"What is the purpose of the eval and function hooks? Is this about them leaking the global object?"},"ts":1657718516061,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$zCMct3MWyNpFjgr7Ju3lNAtzGw44dKWJjCodc25gkPM"},
{"content":{"body":"I guess if we're not allowing arbitrary hookability, but just making sure they are hooked up to the right global, then the Thing interface you describe above seems fine to me","msgtype":"m.text","org.matrix.msc1767.text":"I guess if we're not allowing arbitrary hookability, but just making sure they are hooked up to the right global, then the Thing interface you describe above seems fine to me"},"ts":1657718544634,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$ucWv0xkDNDTf2L09KOTZuHubtH1zeXnIGrkt60gdXT0"},
{"content":{"body":"I'm trying to understand whether the importHook that you pass into Thing is the same as the one you pass into Module","msgtype":"m.text","org.matrix.msc1767.text":"I'm trying to understand whether the importHook that you pass into Thing is the same as the one you pass into Module"},"ts":1657718668211,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$on0T6FvQu3RV4o6LgCdd5o1BvMrZDMMch4wkw1eXk_o"},
{"content":{"body":"I implemented `ExecutionContext` and `Module` in`@masknet/compartment` `0.2.0`.\n\nNo `eval` `Function` or `ModuleSource` support, only support Virtual Module","format":"org.matrix.custom.html","formatted_body":"<p>I implemented <code>ExecutionContext</code> and <code>Module</code> in<code>@masknet/compartment</code> <code>0.2.0</code>.</p>\n<p>No <code>eval</code> <code>Function</code> or <code>ModuleSource</code> support, only support Virtual Module</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I implemented `ExecutionContext` and `Module` in`@masknet/compartment` `0.2.0`.\n\nNo `eval` `Function` or `ModuleSource` support, only support Virtual Module","mimetype":"text/plain"},{"body":"<p>I implemented <code>ExecutionContext</code> and <code>Module</code> in<code>@masknet/compartment</code> <code>0.2.0</code>.</p>\n<p>No <code>eval</code> <code>Function</code> or <code>ModuleSource</code> support, only support Virtual Module</p>\n","mimetype":"text/html"}]},"ts":1657720101472,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$vQ943pUI3hK0shAGUbCMhM_EA2ce4HaJyY6H5SRol-M"},
{"content":{"body":"plz play around and it will be good to have some feedback","msgtype":"m.text","org.matrix.msc1767.text":"plz play around and it will be good to have some feedback"},"ts":1657720116629,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$sMxVFnWmqOAeeSGPUPzLeSKi0rrgbM1kqKNVPg_gan4"},
{"content":{"body":"littledan The new `eval` executes in a scope that ends with the given global object and in which dynamic import is virtualized by the given `importHook`, just like modules. The new `Function` creates function instances that also execute in a script context captured by the given global and import behavior. The new `Module` constructor creates modules that are captured by the given global, and could conceivably use the given import hook as a default. That would imply that the intrinsic `Module` constructor would by default have the host-defined import behavior.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> The new <code>eval</code> executes in a scope that ends with the given global object and in which dynamic import is virtualized by the given <code>importHook</code>, just like modules. The new <code>Function</code> creates function instances that also execute in a script context captured by the given global and import behavior. The new <code>Module</code> constructor creates modules that are captured by the given global, and could conceivably use the given import hook as a default. That would imply that the intrinsic <code>Module</code> constructor would by default have the host-defined import behavior.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan The new `eval` executes in a scope that ends with the given global object and in which dynamic import is virtualized by the given `importHook`, just like modules. The new `Function` creates function instances that also execute in a script context captured by the given global and import behavior. The new `Module` constructor creates modules that are captured by the given global, and could conceivably use the given import hook as a default. That would imply that the intrinsic `Module` constructor would by default have the host-defined import behavior.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a> The new <code>eval</code> executes in a scope that ends with the given global object and in which dynamic import is virtualized by the given <code>importHook</code>, just like modules. The new <code>Function</code> creates function instances that also execute in a script context captured by the given global and import behavior. The new <code>Module</code> constructor creates modules that are captured by the given global, and could conceivably use the given import hook as a default. That would imply that the intrinsic <code>Module</code> constructor would by default have the host-defined import behavior.","mimetype":"text/html"}]},"ts":1657722451167,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Pc0zNJO_S49GRjvffwyKX41Az8BSaATIjt-BxfvnQ5o"},
{"content":{"body":"An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)","msgtype":"m.text","org.matrix.msc1767.text":"An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)"},"ts":1657722618493,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rx0V3btaK-9QKcIdiNgrFgZ_zQGmEXZLvlIfaH69dN4"},
{"content":{"body":" * An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)","m.new_content":{"body":"An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)","msgtype":"m.text","org.matrix.msc1767.text":"An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)"},"m.relates_to":{"event_id":"$rx0V3btaK-9QKcIdiNgrFgZ_zQGmEXZLvlIfaH69dN4","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * An Evaluators constructor would be necessary and not sufficient to isolate dependencies. Evaluator, Module, and ModuleSource together are sufficient to reconstruct a  much smaller and more perfect SES shim (hardened JavaScript)"},"ts":1657722649902,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$79EBysHmK1wFFIzKznfWan5Ky3Ki_IUyGPKK0R3f6Tg"},
{"content":{"body":"Lockdown and Compartment can be shimmed from those components.","msgtype":"m.text","org.matrix.msc1767.text":"Lockdown and Compartment can be shimmed from those components."},"ts":1657722669444,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$60I5_zjFm2VATs3CQ8t4V9yr36RJQpzYdE7Ni3OK08k"},
{"content":{"body":"And notably, with module blocks or import-module-source syntax, that would even play well with CSP.","msgtype":"m.text","org.matrix.msc1767.text":"And notably, with module blocks or import-module-source syntax, that would even play well with CSP."},"ts":1657722706190,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$pJEbcKj-4CYJzKbQyWDcHyhsIyJyLYqZdNj9dvLLk0I"},
{"content":{"body":"Currently, as Jack Works can testify, isolating dependencies in a no-unsafe-eval environment requires a much larger trusted-compute-base, one that goes out to the bundle generator and its transitive dependencies, naturally including a JavaScript parser and generator framework. Much greater exposure to supply chain attacks.","format":"org.matrix.custom.html","formatted_body":"Currently, as <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> can testify, isolating dependencies in a no-unsafe-eval environment requires a much larger trusted-compute-base, one that goes out to the bundle generator and its transitive dependencies, naturally including a JavaScript parser and generator framework. Much greater exposure to supply chain attacks.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Currently, as Jack Works can testify, isolating dependencies in a no-unsafe-eval environment requires a much larger trusted-compute-base, one that goes out to the bundle generator and its transitive dependencies, naturally including a JavaScript parser and generator framework. Much greater exposure to supply chain attacks.","mimetype":"text/plain"},{"body":"Currently, as <a href=\"https://matrix.to/#/@jackworks:matrix.org\">Jack Works</a> can testify, isolating dependencies in a no-unsafe-eval environment requires a much larger trusted-compute-base, one that goes out to the bundle generator and its transitive dependencies, naturally including a JavaScript parser and generator framework. Much greater exposure to supply chain attacks.","mimetype":"text/html"}]},"ts":1657722806151,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$0azuWcSJqy7Wb4oILO9X07pXGe8AR9b62jGLZDROYh8"},
{"content":{"body":"🤔 actually if we runs in no-unsafe-eval, the runtime will be much simpler because no evaluator is allowed. my trusted base only includes swc (a JS compiler written in Rust)","msgtype":"m.text","org.matrix.msc1767.text":"🤔 actually if we runs in no-unsafe-eval, the runtime will be much simpler because no evaluator is allowed. my trusted base only includes swc (a JS compiler written in Rust)"},"ts":1657725539068,"senderName":"Jack Works","senderId":"@jackworks:matrix.org","id":"$9eHoG3N6_gLkSOizdLjkXYvdmyIuihK1kmXkif9-tlQ"}
]