[
{"content":{"body":"i'm not sure it's reasonable, more that it's the path of least resistance","msgtype":"m.text","org.matrix.msc1767.text":"i'm not sure it's reasonable, more that it's the path of least resistance"},"ts":1657152013649,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mQNd80b8PEq5Fs6PKpEGVqw6cviHjPdseEWDnmjcj8I"},
{"content":{"body":"And taking esm-integration at face value, and stated assumption, there’s already a reasonable interpretation.","msgtype":"m.text","org.matrix.msc1767.text":"And taking esm-integration at face value, and stated assumption, there’s already a reasonable interpretation."},"ts":1657152015471,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$j4uvBsNSOWTo9WIWXMw6kyeA8EmzZlZwWDnFKsiVnts"},
{"content":{"body":"So, the question is whether it can be simultaneously true that `x instanceof ModuleSource` and `x instanceof WebAssembly.Module`, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","format":"org.matrix.custom.html","formatted_body":"So, the question is whether it can be simultaneously true that <code>x instanceof ModuleSource</code> and <code>x instanceof WebAssembly.Module</code>, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, the question is whether it can be simultaneously true that `x instanceof ModuleSource` and `x instanceof WebAssembly.Module`, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","mimetype":"text/plain"},{"body":"So, the question is whether it can be simultaneously true that <code>x instanceof ModuleSource</code> and <code>x instanceof WebAssembly.Module</code>, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","mimetype":"text/html"}]},"ts":1657152097916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H47vcRSfsb9ssLZ28FmmUU2bjL-CDDfmbPG6llJWjcI"},
{"content":{"body":"i don't think that can be done for the existing `WebAssembly.Module`","format":"org.matrix.custom.html","formatted_body":"i don't think that can be done for the existing <code>WebAssembly.Module</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't think that can be done for the existing `WebAssembly.Module`","mimetype":"text/plain"},{"body":"i don't think that can be done for the existing <code>WebAssembly.Module</code>","mimetype":"text/html"}]},"ts":1657152139603,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xOoL8t0c2bRhk8fSaCyJv8MCZpB5SN1iVe7naNyaR5k"},
{"content":{"body":"That seems like a problem.","msgtype":"m.text","org.matrix.msc1767.text":"That seems like a problem."},"ts":1657152154327,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KLF6_i8rFtGJSF3goVABnWshOo_zf--EzPlz-T4RcFk"},
{"content":{"body":"there are solutions the acceptability of which i'm unsure","msgtype":"m.text","org.matrix.msc1767.text":"there are solutions the acceptability of which i'm unsure"},"ts":1657152201839,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AlXWe5G5fUI709s60W9c1vJ6bmr6qLi12OO6pMTakGA"},
{"content":{"body":"WebAssembly.Module.fromModuleSource","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Module.fromModuleSource"},"ts":1657152207906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MS7Wqy39NoVAkQYabOeGpZEZM9vafyy0JMtv1muaj5o"},
{"content":{"body":"WebAssembly.Module2","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Module2"},"ts":1657152216657,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eIkMcv_tHSYWJ2NPt8JkjUCNOaTz_NM7Zr1HTlypKR8"},
{"content":{"body":"WebAssembly.Instance.instantiateFromModuleSource","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Instance.instantiateFromModuleSource"},"ts":1657152252709,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LD740wDDp1x9NkJ86e1MGEweYDRjYwGQVJESDZf962s"},
{"content":{"body":"this was where I was wondering if we might be able to define an internal slot on `WebAssembly.Module` that provided this relation in an internal way to 262","format":"org.matrix.custom.html","formatted_body":"this was where I was wondering if we might be able to define an internal slot on <code>WebAssembly.Module</code> that provided this relation in an internal way to 262","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this was where I was wondering if we might be able to define an internal slot on `WebAssembly.Module` that provided this relation in an internal way to 262","mimetype":"text/plain"},{"body":"this was where I was wondering if we might be able to define an internal slot on <code>WebAssembly.Module</code> that provided this relation in an internal way to 262","mimetype":"text/html"}]},"ts":1657152255353,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Irtd-nchBxsRvyeLtYl61v67uX_7Fii757X6Ux11JoQ"},
{"content":{"body":"that could then be incorporated into the esm integration","msgtype":"m.text","org.matrix.msc1767.text":"that could then be incorporated into the esm integration"},"ts":1657152261465,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HcLINb1ll7InLOzFhYqCl1I9q4exgcGR3FnGlczHbx8"},
{"content":{"body":"yeah, where does the `instanceof` requirement come from","format":"org.matrix.custom.html","formatted_body":"yeah, where does the <code>instanceof</code> requirement come from","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah, where does the `instanceof` requirement come from","mimetype":"text/plain"},{"body":"yeah, where does the <code>instanceof</code> requirement come from","mimetype":"text/html"}]},"ts":1657152281138,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5wd0lW3gGOmrEMFW6w0dFAz7pYL9IoHmMOXigQA2KgY"},
{"content":{"body":"it could be a deep-ish sense of duck typing","msgtype":"m.text","org.matrix.msc1767.text":"it could be a deep-ish sense of duck typing"},"ts":1657152288536,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$45wUbCSexscQN9QY9NhFL9ycZgNBKGBtgtNcvYKl8Xg"},
{"content":{"body":"or the wasm js api","msgtype":"m.text","org.matrix.msc1767.text":"or the wasm js api"},"ts":1657152291203,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$SvaEYIl_43c0Plt5DUZaNkvxN588wvUT7lrieaqT8Eo"},
{"content":{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to `new Module(source, ...rest)` and the prototype chain is not material.","format":"org.matrix.custom.html","formatted_body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to <code>new Module(source, ...rest)</code> and the prototype chain is not material.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to `new Module(source, ...rest)` and the prototype chain is not material.","mimetype":"text/plain"},{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to <code>new Module(source, ...rest)</code> and the prototype chain is not material.","mimetype":"text/html"}]},"ts":1657152348139,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TGjraqiLRt91dsp-w_c_TCo4ap3pHrwoBDavuObki3M"},
{"content":{"body":"ah, then i think that is possible","msgtype":"m.text","org.matrix.msc1767.text":"ah, then i think that is possible"},"ts":1657152383132,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cN3m3hjx0Rn_Iy7qn2HZ7X8paCGn79rFqrj6lBkexps"},
{"content":{"body":"And I’ve got slides in the overflow that `source` should fall through to a protocol.","format":"org.matrix.custom.html","formatted_body":"And I’ve got slides in the overflow that <code>source</code> should fall through to a protocol.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And I’ve got slides in the overflow that `source` should fall through to a protocol.","mimetype":"text/plain"},{"body":"And I’ve got slides in the overflow that <code>source</code> should fall through to a protocol.","mimetype":"text/html"}]},"ts":1657152389256,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$APLiNCKG_6uilGCGME0iqHi33UCa-K5JPC_KL6K3sdo"},
{"content":{"body":"For user virtualized module sources. That’s the escape hatch for defining bindings for, say, CommonJS in userspace.","msgtype":"m.text","org.matrix.msc1767.text":"For user virtualized module sources. That’s the escape hatch for defining bindings for, say, CommonJS in userspace."},"ts":1657152432854,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y2BtExM4oea11MDRcSYvaSMPE27EfRdZJxN6bMMAWzs"},
{"content":{"body":"So, yeah, stuffing an internal slot on `WebAssembly.Module` such that it could be digested by `new Module()` is acceptable to me.","format":"org.matrix.custom.html","formatted_body":"So, yeah, stuffing an internal slot on <code>WebAssembly.Module</code> such that it could be digested by <code>new Module()</code> is acceptable to me.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, yeah, stuffing an internal slot on `WebAssembly.Module` such that it could be digested by `new Module()` is acceptable to me.","mimetype":"text/plain"},{"body":"So, yeah, stuffing an internal slot on <code>WebAssembly.Module</code> such that it could be digested by <code>new Module()</code> is acceptable to me.","mimetype":"text/html"}]},"ts":1657152474722,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JNxhvIJMHGs5lA1xHh6ZWeGreqLzKRncbJZ5gs_BPAc"},
{"content":{"body":"Not just acceptable, a condition of my acceptance.","msgtype":"m.text","org.matrix.msc1767.text":"Not just acceptable, a condition of my acceptance."},"ts":1657152497024,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5zjZi7d5kTG-8G8Ik7sh4H1_tTGcQ79DtjOCi0uzig4"},
{"content":{"body":"And guybedford we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","format":"org.matrix.custom.html","formatted_body":"And <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And guybedford we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","mimetype":"text/plain"},{"body":"And <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","mimetype":"text/html"}]},"ts":1657152539370,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OYq_K9n9VxLRqtYzOs-H_801poqEeM4QIizAyZJvVXs"},
{"content":{"body":"At least, I trust it does.","msgtype":"m.text","org.matrix.msc1767.text":"At least, I trust it does."},"ts":1657152613036,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-AXKPdnTvjSSzu-5Mb2bK9kSk1Ddu4hrulw0_qRgZU0"},
{"content":{"body":"my hope was not to have to flesh out such a protocol as a stage 2 requirement here by treating it as somewhat under-specified for now","msgtype":"m.text","org.matrix.msc1767.text":"my hope was not to have to flesh out such a protocol as a stage 2 requirement here by treating it as somewhat under-specified for now"},"ts":1657152619486,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2_Sjp1G5Xrdn6iI1jFdj5n8yvr4-4zjpxVjnbJNSqOo"},
{"content":{"body":"but if the feedback is to more clearly work this through we can investigate options","msgtype":"m.text","org.matrix.msc1767.text":"but if the feedback is to more clearly work this through we can investigate options"},"ts":1657152629690,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$EpLgy77ACyog1F4VlO3FdOu8FV_C2LQJ6278FGxUfOk"},
{"content":{"body":"I think the protocol likely belongs in the spec for the module source object","msgtype":"m.text","org.matrix.msc1767.text":"I think the protocol likely belongs in the spec for the module source object"},"ts":1657152659984,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$RWHW9LLadIX3RZ1Vv0QTFdCLeR8hUl_v7lnPG5QbxSI"},
{"content":{"body":"For stage 2, I can be satisfied if we know we’re not painting ourself into a corner, regardless of what’s captured in the proposal text.","msgtype":"m.text","org.matrix.msc1767.text":"For stage 2, I can be satisfied if we know we’re not painting ourself into a corner, regardless of what’s captured in the proposal text."},"ts":1657152682187,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IDOBcjqbFMh1fmoSEbDPyt5JLfxH5nOvo-pH-zt9KEU"},
{"content":{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its `source` argument.","format":"org.matrix.custom.html","formatted_body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its <code>source</code> argument.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its `source` argument.","mimetype":"text/plain"},{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its <code>source</code> argument.","mimetype":"text/html"}]},"ts":1657152721916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Kd6bNcFgczFFQ4JCQJBdRdOB6lgB8KvlJivdyiUGaGo"},
{"content":{"body":"Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.","format":"org.matrix.custom.html","formatted_body":"Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.","mimetype":"text/plain"},{"body":"Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.","mimetype":"text/html"}]},"ts":1657152769858,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8"},
{"content":{"body":"The other wrinkle is that implementing a bundler or file watcher for all this is substantially easier of all “module source” types have a uniform way to access the module source’s list of import specifiers.","msgtype":"m.text","org.matrix.msc1767.text":"The other wrinkle is that implementing a bundler or file watcher for all this is substantially easier of all “module source” types have a uniform way to access the module source’s list of import specifiers."},"ts":1657152867968,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oNvFIV7nh4EjcY8z3UGJuBld-6MoaxL5QHLfkF7Thds"},
{"content":{"body":"As currently sketched, `moduleSource.bindings` is the same shape for `ModuleSource` and the protocol for virtual module sources.","format":"org.matrix.custom.html","formatted_body":"As currently sketched, <code>moduleSource.bindings</code> is the same shape for <code>ModuleSource</code> and the protocol for virtual module sources.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As currently sketched, `moduleSource.bindings` is the same shape for `ModuleSource` and the protocol for virtual module sources.","mimetype":"text/plain"},{"body":"As currently sketched, <code>moduleSource.bindings</code> is the same shape for <code>ModuleSource</code> and the protocol for virtual module sources.","mimetype":"text/html"}]},"ts":1657152911898,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QzyZ_liiAVumbmhBT1gOdr4OeFbC8WErRv8F-ITAIuM"},
{"content":{"body":"> <@kriskowal:matrix.org> Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.\n\nOr rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.</blockquote></mx-reply>Or rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","m.relates_to":{"m.in_reply_to":{"event_id":"$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.\n\nOr rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.</blockquote></mx-reply>Or rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","mimetype":"text/html"}]},"ts":1657153275699,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IYuZSd4KDCJHXMWq1lvwaELc2_nLYUBPeLchS86WjHk"},
{"content":{"body":"Yeah so the WebAssembly way of doing this is quite unique - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports","msgtype":"m.text","org.matrix.msc1767.text":"Yeah so the WebAssembly way of doing this is quite unique - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports"},"ts":1657153304096,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$arDZ8DTnNKFdTzEI_s__KRU2nXd461qYhPYuftLAF98"},
{"content":{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"ts":1657153344495,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XKbzW60Zxru80URTpORk9JeK_5JHkIxM9lRY7LtRozk"},
{"content":{"body":" * Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":" * Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","m.new_content":{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$XKbzW60Zxru80URTpORk9JeK_5JHkIxM9lRY7LtRozk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":" * Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"ts":1657153355365,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$v_d2VBLrPO5EQJkTSha4QLfDK8ZjwPiiRSbCCfyOb1M"},
{"content":{"body":"Is there a reason that `WebAssembly.Module.prototype` couldn’t have a `bindings` accessor to throw bundlers a bone?","format":"org.matrix.custom.html","formatted_body":"Is there a reason that <code>WebAssembly.Module.prototype</code> couldn’t have a <code>bindings</code> accessor to throw bundlers a bone?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Is there a reason that `WebAssembly.Module.prototype` couldn’t have a `bindings` accessor to throw bundlers a bone?","mimetype":"text/plain"},{"body":"Is there a reason that <code>WebAssembly.Module.prototype</code> couldn’t have a <code>bindings</code> accessor to throw bundlers a bone?","mimetype":"text/html"}]},"ts":1657153568919,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EUDOYwnzmgIRJ5TEYnKS21j2FCi4LM56uAYDSBGk-6g"},
{"content":{"body":"I don't know, if we're adding branding in theory we could add other things, Dan might know more about what's involved here since he did a lot of the JS API spec work I believe","msgtype":"m.text","org.matrix.msc1767.text":"I don't know, if we're adding branding in theory we could add other things, Dan might know more about what's involved here since he did a lot of the JS API spec work I believe"},"ts":1657153682228,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$WjeCvyuVs1QsVXNu9Kq6n_Y4jKsWFqEyCveisjMfvQA"},
{"content":{"body":"Well, I owe you a review, and I’m at least oriented. I can leave a note.","msgtype":"m.text","org.matrix.msc1767.text":"Well, I owe you a review, and I’m at least oriented. I can leave a note."},"ts":1657153778267,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y_taCiJygT2SDewRChWBBT-mH1y_mwGNH-H15b3YO08"},
{"content":{"body":"Thanks for playing Wheel of Spec Fiction™.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for playing Wheel of Spec Fiction™."},"ts":1657153802060,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$afkQTdTmeJyMdgRyRjfl_o3-z3Cu6ST82doRZ1L5xX0"},
{"content":{"body":"haha sure we've covered a lot! will take the winnings for now indeed","msgtype":"m.text","org.matrix.msc1767.text":"haha sure we've covered a lot! will take the winnings for now indeed"},"ts":1657153895134,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$dkz0rq8ElYZvGc7sju_FigVpvarq_2sHFQvoc_YCKso"},
{"content":{"body":"I have just noticed the pun in spec fiction. Who’s responsible for this!)/","msgtype":"m.text","org.matrix.msc1767.text":"I have just noticed the pun in spec fiction. Who’s responsible for this!)/"},"ts":1657154001310,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PKcf65IQhs-8YGbGNfy0KYibtqh5M0_PINMesYNDmUg"},
{"content":{"body":"well we just call it specification I guess to begin with :P","msgtype":"m.text","org.matrix.msc1767.text":"well we just call it specification I guess to begin with :P"},"ts":1657154221485,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$yZoSxkBXf4PRYFs44gikQYE4BhU2Caq60grufetU5Yc"},
{"content":{"body":"I mean, this is clearly a pun on SpecFic, the category containing both Fantasy and SciFi https://en.wikipedia.org/wiki/Speculative_fiction","msgtype":"m.text","org.matrix.msc1767.text":"I mean, this is clearly a pun on SpecFic, the category containing both Fantasy and SciFi https://en.wikipedia.org/wiki/Speculative_fiction"},"ts":1657155657227,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fLh0f8G8pB-Gh3DZ4uw3BOFPFXh85e6_UyVlw4iv4IA"},
{"content":{"body":"guybedford Luca Casonato I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"guybedford Luca Casonato I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","mimetype":"text/html"}]},"ts":1657162217083,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FRTRIOqz7_pKBuVa6WxlItHVWCpOaSu2C5w7lCcIp5E"},
{"content":{"body":"Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","mimetype":"text/html"}]},"ts":1657168130814,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QxLZNqB8ga0l-dbaA75vz77tZEiMW_akHNs0pvuMIDU"},
{"content":{"body":"Since that is effectively what you get with `WebAssembly.Module` so that would be the symmetric choice","format":"org.matrix.custom.html","formatted_body":"Since that is effectively what you get with <code>WebAssembly.Module</code> so that would be the symmetric choice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since that is effectively what you get with `WebAssembly.Module` so that would be the symmetric choice","mimetype":"text/plain"},{"body":"Since that is effectively what you get with <code>WebAssembly.Module</code> so that would be the symmetric choice","mimetype":"text/html"}]},"ts":1657168146503,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$lC468_FQkYJiMzJl2QkBTHwpWo1LIALzpmPvY_uQJ8U"},
{"content":{"body":"I'm open to the representation options though","msgtype":"m.text","org.matrix.msc1767.text":"I'm open to the representation options though"},"ts":1657168153708,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$S58FGeWO4FPVaFTEO2NTwg7sCjuhVnZq-Z45pXRlUAQ"},
{"content":{"body":"at the moment that object is still a big `?`","format":"org.matrix.custom.html","formatted_body":"at the moment that object is still a big <code>?</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"at the moment that object is still a big `?`","mimetype":"text/plain"},{"body":"at the moment that object is still a big <code>?</code>","mimetype":"text/html"}]},"ts":1657168163378,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$gMqfT_9rJOBrzuHGNFzHaVAmQfY6H5ibBNTBVGp0-kM"},
{"content":{"body":"thanks for the review, I've pushed some updated, do take another look if you have a moment","msgtype":"m.text","org.matrix.msc1767.text":"thanks for the review, I've pushed some updated, do take another look if you have a moment"},"ts":1657168183083,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$bGirTM5Alw1tiByGWZwOBL0j7u-QXH4xvlOH6Tfpk7A"},
{"content":{"body":"> <@guybedford:matrix.org> Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage\n\nI’m not sure what this means. What’s the limitation of what?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$QxLZNqB8ga0l-dbaA75vz77tZEiMW_akHNs0pvuMIDU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage</blockquote></mx-reply>I’m not sure what this means. What’s the limitation of what?","m.relates_to":{"m.in_reply_to":{"event_id":"$QxLZNqB8ga0l-dbaA75vz77tZEiMW_akHNs0pvuMIDU"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@guybedford:matrix.org> Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage\n\nI’m not sure what this means. What’s the limitation of what?","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$QxLZNqB8ga0l-dbaA75vz77tZEiMW_akHNs0pvuMIDU?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br><a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage</blockquote></mx-reply>I’m not sure what this means. What’s the limitation of what?","mimetype":"text/html"}]},"ts":1657168419750,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PdZxEu-4ydK7RhMAzIOHCjmB0Wv3TgdKcv_TImJPrt0"},
{"content":{"body":"Kris Kowal: a `WebAssembly.Module` has imports in its binary","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: a <code>WebAssembly.Module</code> has imports in its binary","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: a `WebAssembly.Module` has imports in its binary","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: a <code>WebAssembly.Module</code> has imports in its binary","mimetype":"text/html"}]},"ts":1657168458272,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$waQbVXs_V6NbmLVO3z81dzXn-UyvON0IO__KviPWL3E"},
{"content":{"body":"which are not yet satisfied and can be linked against arbitrary dependencies","msgtype":"m.text","org.matrix.msc1767.text":"which are not yet satisfied and can be linked against arbitrary dependencies"},"ts":1657168466928,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$fd1iTJedasUe9OWUql2omnO0rLQGB_Zqa7MgrZ1gSxk"},
{"content":{"body":" * which are not yet satisfied and can be linked against arbitrary dependencies","m.new_content":{"body":"which are not yet satisfied and can be linked against arbitrary dependencies","msgtype":"m.text","org.matrix.msc1767.text":"which are not yet satisfied and can be linked against arbitrary dependencies"},"m.relates_to":{"event_id":"$fd1iTJedasUe9OWUql2omnO0rLQGB_Zqa7MgrZ1gSxk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * which are not yet satisfied and can be linked against arbitrary dependencies"},"ts":1657168473746,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$gDSUlR6EXDS5FcAjF_PVbURPWaQ0ayYjW_-BhGjo7Uc"},
{"content":{"body":"So the natural choice would be to aim for symmetry on that with the JS side","msgtype":"m.text","org.matrix.msc1767.text":"So the natural choice would be to aim for symmetry on that with the JS side"},"ts":1657168492421,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2-KBmBFICqlTLnne8z12imZLqcQYaCCP2Ge5dzS8_jY"},
{"content":{"body":"That a JS reflection would not resolve its imports yet, but could still be instrumented against arbitrary dependencies","msgtype":"m.text","org.matrix.msc1767.text":"That a JS reflection would not resolve its imports yet, but could still be instrumented against arbitrary dependencies"},"ts":1657168513654,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$-hTjXXSGCLBYrq5ERBCGNy3e0i8uaBLk9tplociCbTk"},
{"content":{"body":"depending on what hook is passed","msgtype":"m.text","org.matrix.msc1767.text":"depending on what hook is passed"},"ts":1657168525803,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$osVt5fkQPixUE9nzvDm4gFwM3WlteH5Kig-UvPT_wnE"},
{"content":{"body":"we could of course break that symmetry","msgtype":"m.text","org.matrix.msc1767.text":"we could of course break that symmetry"},"ts":1657168538493,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$d3chFjeOqbcaDyKUIyv98MRoVmL9cqLcnxkFGrDiMqA"},
{"content":{"body":"That’s consistent with my interpretation of a module source.","msgtype":"m.text","org.matrix.msc1767.text":"That’s consistent with my interpretation of a module source."},"ts":1657170026122,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$n2lPgTXLxofNvdJNCEnBpMwiDwVr_xZwRH48NRDY-xY"},
{"content":{"body":"That multiple `Module` instances can use a common source and link in different ways according to the provided `importHook`.","format":"org.matrix.custom.html","formatted_body":"That multiple <code>Module</code> instances can use a common source and link in different ways according to the provided <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"That multiple `Module` instances can use a common source and link in different ways according to the provided `importHook`.","mimetype":"text/plain"},{"body":"That multiple <code>Module</code> instances can use a common source and link in different ways according to the provided <code>importHook</code>.","mimetype":"text/html"}]},"ts":1657170124874,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$spUfOVo2TS1VXtasgcXoZMrQBgwnwloAl95Pi4f80w0"},
{"content":{"body":"Caridy’s `Module` object is very similar to the `ModuleInstance` you proposed at the last plenary. The big difference is that dynamic import kicks off the loader / linker, and that uses the import hook to discover the linkage. It has the nice property that a single hook can be used for both static and dynamic import.","format":"org.matrix.custom.html","formatted_body":"Caridy’s <code>Module</code> object is very similar to the <code>ModuleInstance</code> you proposed at the last plenary. The big difference is that dynamic import kicks off the loader / linker, and that uses the import hook to discover the linkage. It has the nice property that a single hook can be used for both static and dynamic import.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Caridy’s `Module` object is very similar to the `ModuleInstance` you proposed at the last plenary. The big difference is that dynamic import kicks off the loader / linker, and that uses the import hook to discover the linkage. It has the nice property that a single hook can be used for both static and dynamic import.","mimetype":"text/plain"},{"body":"Caridy’s <code>Module</code> object is very similar to the <code>ModuleInstance</code> you proposed at the last plenary. The big difference is that dynamic import kicks off the loader / linker, and that uses the import hook to discover the linkage. It has the nice property that a single hook can be used for both static and dynamic import.","mimetype":"text/html"}]},"ts":1657170210067,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$HNYJK4bxdvtel3S2-K-vtUBqQ-YidI6GJGBFiyj-17k"},
{"content":{"body":"So instead of having to provide an `importHook` for dynamic import and a `link` method for static import, you just have `importHook`.","format":"org.matrix.custom.html","formatted_body":"So instead of having to provide an <code>importHook</code> for dynamic import and a <code>link</code> method for static import, you just have <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So instead of having to provide an `importHook` for dynamic import and a `link` method for static import, you just have `importHook`.","mimetype":"text/plain"},{"body":"So instead of having to provide an <code>importHook</code> for dynamic import and a <code>link</code> method for static import, you just have <code>importHook</code>.","mimetype":"text/html"}]},"ts":1657170246503,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$AIgwY7VzmWeU10Jg0u70l8bYhhFT_4JvyyT-QXPGDuw"},
{"content":{"body":"And the small difference is that each `Module` instance has an independent memo for the results of `importHook`.","format":"org.matrix.custom.html","formatted_body":"And the small difference is that each <code>Module</code> instance has an independent memo for the results of <code>importHook</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And the small difference is that each `Module` instance has an independent memo for the results of `importHook`.","mimetype":"text/plain"},{"body":"And the small difference is that each <code>Module</code> instance has an independent memo for the results of <code>importHook</code>.","mimetype":"text/html"}]},"ts":1657170287754,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H4vgdr3tMPJ3Yf6nICWm8EGly7a12iX2rFrWYvDqSJk"},
{"content":{"body":"It doesn’t account for assets and module reflection though, so I imagine we’ll have to revisit that.","msgtype":"m.text","org.matrix.msc1767.text":"It doesn’t account for assets and module reflection though, so I imagine we’ll have to revisit that."},"ts":1657170320978,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$BRxmcwmLavre6EUqQ8mftMrcmz3TqTHrilr5ptyysAc"},
{"content":{"body":"one step at a time I guess","msgtype":"m.text","org.matrix.msc1767.text":"one step at a time I guess"},"ts":1657170573902,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$sTggR-mHNZpFxHbdECAaCXOVI6B-YVUlpHXUbYHLujM"},
{"content":{"body":"Yeah, assets and import reflection imply a different design for virtualized host hooks on `Module`. More like `fetchHook(specifier, importMeta) => Promise<TypedArray>` followed by `reflectHook(bytes, reflectionType) => unknown`","format":"org.matrix.custom.html","formatted_body":"Yeah, assets and import reflection imply a different design for virtualized host hooks on <code>Module</code>. More like <code>fetchHook(specifier, importMeta) =&gt; Promise&lt;TypedArray&gt;</code> followed by <code>reflectHook(bytes, reflectionType) =&gt; unknown</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, assets and import reflection imply a different design for virtualized host hooks on `Module`. More like `fetchHook(specifier, importMeta) => Promise<TypedArray>` followed by `reflectHook(bytes, reflectionType) => unknown`","mimetype":"text/plain"},{"body":"Yeah, assets and import reflection imply a different design for virtualized host hooks on <code>Module</code>. More like <code>fetchHook(specifier, importMeta) =&gt; Promise&lt;TypedArray&gt;</code> followed by <code>reflectHook(bytes, reflectionType) =&gt; unknown</code>","mimetype":"text/html"}]},"ts":1657170606596,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$hZIs_yr047DQehTarG8JEjQF7vaotgWh4RdTDojLzl4"},
{"content":{"body":"right, I want to put some more thought to the cache questions in due course as well around this for reflection","msgtype":"m.text","org.matrix.msc1767.text":"right, I want to put some more thought to the cache questions in due course as well around this for reflection"},"ts":1657170642325,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$XI6hSEB_TRxr0Ekrvk2e-SCFQXUsSywppldj7AzUorU"},
{"content":{"body":"for now it's explicitly flagged as a spec todo to define the exact cache behaviours","msgtype":"m.text","org.matrix.msc1767.text":"for now it's explicitly flagged as a spec todo to define the exact cache behaviours"},"ts":1657170659231,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$RYC9FcyA90rqDGGQfsp1CjB0YUcZJpuwNJninZlwiGI"},
{"content":{"body":"I must say in the quiet of my heart that I’d hoped that virtualized module sources and externalizing the concern of interpretation such that each module has exactly one reification would put the issue of assets to bed.","msgtype":"m.text","org.matrix.msc1767.text":"I must say in the quiet of my heart that I’d hoped that virtualized module sources and externalizing the concern of interpretation such that each module has exactly one reification would put the issue of assets to bed."},"ts":1657170710395,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$9WhvLuDaRpKSYUzn9FTayxvp7GYrR_0sbbdxwzk5dEY"},
{"content":{"body":"And this wakes the old MIME-type / extension mismatch issue that drove import assertions into its current shape.","msgtype":"m.text","org.matrix.msc1767.text":"And this wakes the old MIME-type / extension mismatch issue that drove import assertions into its current shape."},"ts":1657170797413,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mfHuIE66AFq5kp1_ACzRKuY2qgS3hIdJ7IjPPWPwhKo"},
{"content":{"body":"So, perhaps reification of module source is special and not general.","msgtype":"m.text","org.matrix.msc1767.text":"So, perhaps reification of module source is special and not general."},"ts":1657170826930,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$qwCPtMhvsr_QKKYmq3xuOOciHgvfcqnx__8-Hm0id80"},
{"content":{"body":"But even then, the host hooks have to separate loading from instantiation.","msgtype":"m.text","org.matrix.msc1767.text":"But even then, the host hooks have to separate loading from instantiation."},"ts":1657170875488,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$uGDjF4dUF2SLCXxCs27k_irphGQMkhfqZ3MAhiUIYRA"},
{"content":{"body":"e.g., `loadHook(specifier, importMeta) => Promise<AbstractModuleSource>` and `importHook(source, importMeta) => Module`.","format":"org.matrix.custom.html","formatted_body":"e.g., <code>loadHook(specifier, importMeta) =&gt; Promise&lt;AbstractModuleSource&gt;</code> and <code>importHook(source, importMeta) =&gt; Module</code>.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"e.g., `loadHook(specifier, importMeta) => Promise<AbstractModuleSource>` and `importHook(source, importMeta) => Module`.","mimetype":"text/plain"},{"body":"e.g., <code>loadHook(specifier, importMeta) =&gt; Promise&lt;AbstractModuleSource&gt;</code> and <code>importHook(source, importMeta) =&gt; Module</code>.","mimetype":"text/html"}]},"ts":1657170978084,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OfezP-pXb3Me6hIXB8YU8e3rYqEzy7KCK0XypQ-Qdjw"},
{"content":{"body":"the hope is to leave the internal invariants and host hooks in a better state that we found them","msgtype":"m.text","org.matrix.msc1767.text":"the hope is to leave the internal invariants and host hooks in a better state that we found them"},"ts":1657171328732,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HoMxdjmKVV_DTtVUGOlvbajqueDMwS8zEtDYGOgkdbc"},
{"content":{"body":"I think between the specs that is achievable","msgtype":"m.text","org.matrix.msc1767.text":"I think between the specs that is achievable"},"ts":1657171338549,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$9ILFkeOe9iG2Ibr-WTF8-zV-kx0WWu7Bn_gJrCJKB4c"},
{"content":{"body":"but it will take some formalizing yet","msgtype":"m.text","org.matrix.msc1767.text":"but it will take some formalizing yet"},"ts":1657171345939,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QfmMO04ad1lMfBPlyFFLvGBtpKbpMasTnfiLDuqhTpQ"},
{"content":{"body":"> <@guybedford:matrix.org> @littledan thanks for the feedback, we see module reflection as laying down an approach that asset reflection and deferred execution can follow in, as opposed to the original more abstract view of a generical mechanic. Trying to be practical and use case focused while treating generalization as a possibility but not to over-generalize. We are keen to see asset references and deferred module loading move forward, we are just trying to focus our efforts in a way that keeps scope clear in the staging process. We currently are underspecifying what exactly the shape of the reflection object is though, and treating this as a detail to be refined as opposed to prescribing it at this point. The way we do this for now is to entirely delegate it to a host hook, then the hope for Stage 3 would be to follow-up with an exact definition for JS that will hopefully have progressed by then. We need the host hook regardless for Wasm though.\n\nYes, going incrementally via the stage process seems generally good, but could you say more about why you decided to make the cut here exactly? I mean, presumably the host hook underspecification approach you describe would work just as well for asset references. Are there particular anticipated sources of complexity from asset references that you see as simpler for module reflection?","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24jnkP4LOgeDWjVWQX11yFfm9GARo-OkptA9BWGWyZcmE\">In reply to</a> <a href=\"https://matrix.to/#/@guybedford:matrix.org\">@guybedford:matrix.org</a><br>@littledan thanks for the feedback, we see module reflection as laying down an approach that asset reflection and deferred execution can follow in, as opposed to the original more abstract view of a generical mechanic. Trying to be practical and use case focused while treating generalization as a possibility but not to over-generalize. We are keen to see asset references and deferred module loading move forward, we are just trying to focus our efforts in a way that keeps scope clear in the staging process. We currently are underspecifying what exactly the shape of the reflection object is though, and treating this as a detail to be refined as opposed to prescribing it at this point. The way we do this for now is to entirely delegate it to a host hook, then the hope for Stage 3 would be to follow-up with an exact definition for JS that will hopefully have progressed by then. We need the host hook regardless for Wasm though.</blockquote></mx-reply>Yes, going incrementally via the stage process seems generally good, but could you say more about why you decided to make the cut here exactly? I mean, presumably the host hook underspecification approach you describe would work just as well for asset references. Are there particular anticipated sources of complexity from asset references that you see as simpler for module reflection?","m.relates_to":{"m.in_reply_to":{"event_id":"$jnkP4LOgeDWjVWQX11yFfm9GARo-OkptA9BWGWyZcmE"}},"msgtype":"m.text"},"ts":1657193386215,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$yDH2QqFk4OcizUwSA3JQrlIWE2wlyLTQeQoqKgJnrd4"},
{"content":{"body":"> <@kriskowal:matrix.org> My feeling is that trusting the sender and receiver to have identical importHook behavior is possible but fragile. But, if we have blocks, static blocks, `Module` and `ModuleSource` to work with, I think that the ecosystem will have everything it needs to come up with more sensible protocols for sending modules to workers.\n\nIn the web, I’m not sure if we need any “trusting” here: the hooks simply are the same for native modules, and maybe we should just throw a DataCloneError if you try to serialize a Module with any other importHook","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24pcrozUCqlo8e3M0XKHTzQindBjI_Jr2v5kBTKYZAPMs\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>My feeling is that trusting the sender and receiver to have identical importHook behavior is possible but fragile. But, if we have blocks, static blocks, <code>Module</code> and <code>ModuleSource</code> to work with, I think that the ecosystem will have everything it needs to come up with more sensible protocols for sending modules to workers.</blockquote></mx-reply>In the web, I’m not sure if we need any “trusting” here: the hooks simply are the same for native modules, and maybe we should just throw a DataCloneError if you try to serialize a Module with any other importHook","m.relates_to":{"m.in_reply_to":{"event_id":"$pcrozUCqlo8e3M0XKHTzQindBjI_Jr2v5kBTKYZAPMs"}},"msgtype":"m.text"},"ts":1657193536793,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$vJ_p_VVBSQuLrd5cWhtodNE_VQYclvkJhxl8gN29pSM"},
{"content":{"body":"> <@kriskowal:matrix.org> That is to say, I predict that `worker.import(module {})` will look good in examples but will otherwise have limited utility. But, that’s okay with me.\n\nWell… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT%3Amatrix.org/%24Xz8Gr8YONZomurI2hAv_GUVd7f2XBXNwpHvVGKBCVzc\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>That is to say, I predict that <code>worker.import(module {})</code> will look good in examples but will otherwise have limited utility. But, that’s okay with me.</blockquote></mx-reply>Well… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.","m.relates_to":{"m.in_reply_to":{"event_id":"$Xz8Gr8YONZomurI2hAv_GUVd7f2XBXNwpHvVGKBCVzc"}},"msgtype":"m.text"},"ts":1657193684785,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$SqBrbd7I0yVkIx1vQ-Yw7YgdK9IfOagOuckxXBcZ7UM"},
{"content":{"body":"Wasm itself prohibits module import cycles, but the Wasm ESM integration proposal is designed to permit them between JS and Wasm… but maybe it does so in too flaky of a way","msgtype":"m.text"},"ts":1657193871190,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$IERDgaQJGFQfzP5ZURZHDX_rCjyykDBpq2x1Pt9FgOs"},
{"content":{"body":"I guess now that I hear more about how the caching for the import happens within the Module, rather than a single Module producing a separate instance somewhere else… I understand why you all have been calling this construct ModuleInstance over the years ","format":"org.matrix.custom.html","formatted_body":"I guess now that I hear more about how the caching for the import happens within the Module, rather than a single Module producing a separate instance somewhere else… I understand why you all have been calling this construct ModuleInstance over the years","msgtype":"m.text"},"ts":1657195265384,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$wmLLyeFWKxfiFnbKXu4CXO8uvXvjeuOMACTm4DhH0jU"},
{"content":{"body":"I'm re-reading the slides Kris Kowal presented yesterday, and I have a question.\n\nIn the example with a custom module source, I see that the `initialize` method receives `importMeta`. Does it also receive `importHook`? I'm trying do understand if/how Source Text Static Module Records could be expressed in terms of Virtual Static Module Records. For example, how could I create a custom module source that uses my own ecmascript engine and delegates module loading to the ecmascript host it's running in?","format":"org.matrix.custom.html","formatted_body":"<p>I'm re-reading the slides <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> presented yesterday, and I have a question.</p>\n<p>In the example with a custom module source, I see that the <code>initialize</code> method receives <code>importMeta</code>. Does it also receive <code>importHook</code>? I'm trying do understand if/how Source Text Static Module Records could be expressed in terms of Virtual Static Module Records. For example, how could I create a custom module source that uses my own ecmascript engine and delegates module loading to the ecmascript host it's running in?</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I'm re-reading the slides Kris Kowal presented yesterday, and I have a question.\n\nIn the example with a custom module source, I see that the `initialize` method receives `importMeta`. Does it also receive `importHook`? I'm trying do understand if/how Source Text Static Module Records could be expressed in terms of Virtual Static Module Records. For example, how could I create a custom module source that uses my own ecmascript engine and delegates module loading to the ecmascript host it's running in?","mimetype":"text/plain"},{"body":"<p>I'm re-reading the slides <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a> presented yesterday, and I have a question.</p>\n<p>In the example with a custom module source, I see that the <code>initialize</code> method receives <code>importMeta</code>. Does it also receive <code>importHook</code>? I'm trying do understand if/how Source Text Static Module Records could be expressed in terms of Virtual Static Module Records. For example, how could I create a custom module source that uses my own ecmascript engine and delegates module loading to the ecmascript host it's running in?</p>\n","mimetype":"text/html"}]},"ts":1657205043294,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$XlxCWttTiI-aTiAFoqiHLFggf3jNPolZQyT0cCyrfd0"},
{"content":{"body":"I think the answer is yes. JavaScript module sources can be virtualized. It’s also possible to implement `ModuleSource` as an object that satisfies the virtual module source protocol. But, I imagine that would come at a performance cost that isn’t acceptable.","format":"org.matrix.custom.html","formatted_body":"I think the answer is yes. JavaScript module sources can be virtualized. It’s also possible to implement <code>ModuleSource</code> as an object that satisfies the virtual module source protocol. But, I imagine that would come at a performance cost that isn’t acceptable.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I think the answer is yes. JavaScript module sources can be virtualized. It’s also possible to implement `ModuleSource` as an object that satisfies the virtual module source protocol. But, I imagine that would come at a performance cost that isn’t acceptable.","mimetype":"text/plain"},{"body":"I think the answer is yes. JavaScript module sources can be virtualized. It’s also possible to implement <code>ModuleSource</code> as an object that satisfies the virtual module source protocol. But, I imagine that would come at a performance cost that isn’t acceptable.","mimetype":"text/html"}]},"ts":1657205964905,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$eZODkiY43AJHRtt5Ri0vnZReLwMIwRfzS6NXvAB3qfQ"},
{"content":{"body":"For JavaScript to JavaScript bindings, I think engines are free to implement linkage as literal pointers to shared slots. Through the virtual module source protocol, reading and writing bindings would have to pass through the module imports namespace exotic object, which would be slow on top of slow.","msgtype":"m.text","org.matrix.msc1767.text":"For JavaScript to JavaScript bindings, I think engines are free to implement linkage as literal pointers to shared slots. Through the virtual module source protocol, reading and writing bindings would have to pass through the module imports namespace exotic object, which would be slow on top of slow."},"ts":1657206091444,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$iPueAAnW-udEjGotAwUKHyZz3EQzI5nDO8NDkaYvWuA"},
{"content":{"body":"> But, I imagine that would come at a performance cost that isn’t acceptable.\n\nYes, I was thinking about something like eshost rather than a production thing.","format":"org.matrix.custom.html","formatted_body":"<blockquote>\n<p>But, I imagine that would come at a performance cost that isn’t acceptable.</p>\n</blockquote>\n<p>Yes, I was thinking about something like eshost rather than a production thing.</p>\n","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> But, I imagine that would come at a performance cost that isn’t acceptable.\n\nYes, I was thinking about something like eshost rather than a production thing.","mimetype":"text/plain"},{"body":"<blockquote>\n<p>But, I imagine that would come at a performance cost that isn’t acceptable.</p>\n</blockquote>\n<p>Yes, I was thinking about something like eshost rather than a production thing.</p>\n","mimetype":"text/html"}]},"ts":1657206136958,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$T45qmmUKEX4MT-kaXvd7wUNk_yszDmRisTZEmIfRHM8"},
{"content":{"body":"You’re right that `initialize` needs to receive a dynamic import function. It would also have to be the one bound to the module instance’s memo.","format":"org.matrix.custom.html","formatted_body":"You’re right that <code>initialize</code> needs to receive a dynamic import function. It would also have to be the one bound to the module instance’s memo.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"You’re right that `initialize` needs to receive a dynamic import function. It would also have to be the one bound to the module instance’s memo.","mimetype":"text/plain"},{"body":"You’re right that <code>initialize</code> needs to receive a dynamic import function. It would also have to be the one bound to the module instance’s memo.","mimetype":"text/html"}]},"ts":1657206151070,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$o6BXt8wzp9GN07bIZFMjobGqYPt8YTj7JioBEaTVzgw"},
{"content":{"body":"And providing either `importMeta` or `dynamicImport` can be contingent on whether the module declares that it needs them with `needsImport` and `needsImportMeta` on its module source object.","format":"org.matrix.custom.html","formatted_body":"And providing either <code>importMeta</code> or <code>dynamicImport</code> can be contingent on whether the module declares that it needs them with <code>needsImport</code> and <code>needsImportMeta</code> on its module source object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And providing either `importMeta` or `dynamicImport` can be contingent on whether the module declares that it needs them with `needsImport` and `needsImportMeta` on its module source object.","mimetype":"text/plain"},{"body":"And providing either <code>importMeta</code> or <code>dynamicImport</code> can be contingent on whether the module declares that it needs them with <code>needsImport</code> and <code>needsImportMeta</code> on its module source object.","mimetype":"text/html"}]},"ts":1657206199416,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$lqVwK4EPAe6LPRRL9lSCGMlxac1ZV8XlwVh3FIXNEiM"},
{"content":{"body":"So, an options bag.","msgtype":"m.text","org.matrix.msc1767.text":"So, an options bag."},"ts":1657206208278,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QXbDOqxra4ULzv0i3PPPL36KGurKcohm6_cg_rc3J8s"},
{"content":{"body":"I believe they can also participate in cycles.","msgtype":"m.text","org.matrix.msc1767.text":"I believe they can also participate in cycles."},"ts":1657206234227,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$NkvB7d0KZHmNGJUWnUgN2tcmJYaDLPvuy9GJoAczEes"},
{"content":{"body":"The module imports namespace object was an idea that the folks on XS came up with.","msgtype":"m.text","org.matrix.msc1767.text":"The module imports namespace object was an idea that the folks on XS came up with."},"ts":1657206258938,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$v1u35SsjXHD8Xktzi7Y3-RDjuL8mNgC2UnE0s2Fn_Fk"},
{"content":{"body":"It’s quite clever.","msgtype":"m.text","org.matrix.msc1767.text":"It’s quite clever."},"ts":1657206262468,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$ghw-MVBLuTvRquqtntEdCEbBP8IjGT7QYJ1CwXIR2oM"},
{"content":{"body":"And they implemented it, and it works, so my confidence in the idea is pretty high.","msgtype":"m.text","org.matrix.msc1767.text":"And they implemented it, and it works, so my confidence in the idea is pretty high."},"ts":1657206290694,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$bFNet4hovfMdc5aJuUCAqiDisgpAd-s79I2SuRQ8CTI"},
{"content":{"body":"I guess my custom module source would also have to know how the import hook works, because it might need to pass a custom `importMeta` object when calling `importHook` to make sure that the \"base URL\" is correct and not the one of the entrypoint module.","format":"org.matrix.custom.html","formatted_body":"I guess my custom module source would also have to know how the import hook works, because it might need to pass a custom <code>importMeta</code> object when calling <code>importHook</code> to make sure that the &quot;base URL&quot; is correct and not the one of the entrypoint module.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"I guess my custom module source would also have to know how the import hook works, because it might need to pass a custom `importMeta` object when calling `importHook` to make sure that the \"base URL\" is correct and not the one of the entrypoint module.","mimetype":"text/plain"},{"body":"I guess my custom module source would also have to know how the import hook works, because it might need to pass a custom <code>importMeta</code> object when calling <code>importHook</code> to make sure that the &quot;base URL&quot; is correct and not the one of the entrypoint module.","mimetype":"text/html"}]},"ts":1657206294138,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$9vrTh8tzDeOjs5WhLBvj5zMtI3Cx87VJF3fSFN6kP0w"},
{"content":{"body":"Ok well no, because `importHook` would return a _new_ module instance","format":"org.matrix.custom.html","formatted_body":"Ok well no, because <code>importHook</code> would return a <em>new</em> module instance","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Ok well no, because `importHook` would return a _new_ module instance","mimetype":"text/plain"},{"body":"Ok well no, because <code>importHook</code> would return a <em>new</em> module instance","mimetype":"text/html"}]},"ts":1657206355890,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$6CmV2GbyY4EeqZfBnO4eMjv8L3ZWt1k4ZhmdsEC3qQQ"},
{"content":{"body":"Yes.","msgtype":"m.text","org.matrix.msc1767.text":"Yes."},"ts":1657206361463,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$yywp281WX3mWn6nDmZcmAl6QTYE5k2tVvSe5BIJmHcM"},
{"content":{"body":"I'd like to invite Rob Palmer here, but I don't seem to have permission to invite people here","msgtype":"m.text","org.matrix.msc1767.text":"I'd like to invite Rob Palmer here, but I don't seem to have permission to invite people here"},"ts":1657206862641,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$J4cTSULK1habJfEAb-rllNwKQL0OVZCe7MaEm12BbJE"},
{"content":{"body":"Isn't this room public? So Rob just needs the link","msgtype":"m.text","org.matrix.msc1767.text":"Isn't this room public? So Rob just needs the link"},"ts":1657206902158,"senderName":"nicolo-ribaudo","senderId":"@nicolo-ribaudo:matrix.org","id":"$Ng-o1hiN587BC3sYg-uIUrSxsnq9AFIHvMcQKoVk_nQ"},
{"content":{"body":"littledan: it's more about handling the consensus process itself, we don't want to try to do more than absolutely necessary to avoid unnecessary frictions. But yes asset references themselves should be relatively simple to spec and we are aiming to design host invariants that can work with that as well. The shape of the asset object may or may not be specified in ECMA-262, I'd personally like to see it in EMCA-262.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: it's more about handling the consensus process itself, we don't want to try to do more than absolutely necessary to avoid unnecessary frictions. But yes asset references themselves should be relatively simple to spec and we are aiming to design host invariants that can work with that as well. The shape of the asset object may or may not be specified in ECMA-262, I'd personally like to see it in EMCA-262.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"littledan: it's more about handling the consensus process itself, we don't want to try to do more than absolutely necessary to avoid unnecessary frictions. But yes asset references themselves should be relatively simple to spec and we are aiming to design host invariants that can work with that as well. The shape of the asset object may or may not be specified in ECMA-262, I'd personally like to see it in EMCA-262.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:matrix.org\">littledan</a>: it's more about handling the consensus process itself, we don't want to try to do more than absolutely necessary to avoid unnecessary frictions. But yes asset references themselves should be relatively simple to spec and we are aiming to design host invariants that can work with that as well. The shape of the asset object may or may not be specified in ECMA-262, I'd personally like to see it in EMCA-262.","mimetype":"text/html"}]},"ts":1657213865184,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$PpZ1G0XyzgNXvcZmMt6oOB3BcZyi1DfHgOIfznguW5s"},
{"content":{"body":"OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work.","msgtype":"m.text","org.matrix.msc1767.text":"OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work."},"ts":1657214301393,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$iNefNU_OCc-W3AUeboiuWlZjoiNagbvvMzufELH-YfU"},
{"content":{"body":" * OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work.","m.new_content":{"body":"OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work.","msgtype":"m.text","org.matrix.msc1767.text":"OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work."},"m.relates_to":{"event_id":"$iNefNU_OCc-W3AUeboiuWlZjoiNagbvvMzufELH-YfU","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.text":" * OK, I'd prefer to err on the side of trying to understand the full solution we're going after, even if having the design discussion risks some friction. I'm looking forward to hearing more of your thoughts on how asset references should work."},"ts":1657214378221,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$EELOfUgSclGIhGb30W6msMrSa1bXAwWKtGaOiLKNzQM"},
{"content":{"body":"Once we understand that, it will help us prioritize what to push forward in the stage process and ship","msgtype":"m.text","org.matrix.msc1767.text":"Once we understand that, it will help us prioritize what to push forward in the stage process and ship"},"ts":1657214535048,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$inSsH9ano2cLNWjL5EqfiqCQ2nB3vTH9YiGcBjuE7zk"},
{"content":{"body":"I'm fine with Stage 2 for a bunch of this work while we're still in an undetermined state, though","msgtype":"m.text","org.matrix.msc1767.text":"I'm fine with Stage 2 for a bunch of this work while we're still in an undetermined state, though"},"ts":1657214567861,"senderName":"littledan","senderId":"@littledan:matrix.org","id":"$7OSzQ0ZBhFHZ_LziBtmYcjF4OBdHnEoq6Z4_XgQAiRg"},
{"content":{"body":"> <@littledan:matrix.org> Well… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.\n\nimportHooks are not equivalent between workers if they have either different import maps or service workers. Could even vary based on differences in local DNS.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$SqBrbd7I0yVkIx1vQ-Yw7YgdK9IfOagOuckxXBcZ7UM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Well… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.</blockquote></mx-reply>importHooks are not equivalent between workers if they have either different import maps or service workers. Could even vary based on differences in local DNS.","m.relates_to":{"m.in_reply_to":{"event_id":"$SqBrbd7I0yVkIx1vQ-Yw7YgdK9IfOagOuckxXBcZ7UM"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@littledan:matrix.org> Well… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.\n\nimportHooks are not equivalent between workers if they have either different import maps or service workers. Could even vary based on differences in local DNS.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$SqBrbd7I0yVkIx1vQ-Yw7YgdK9IfOagOuckxXBcZ7UM?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@littledan:matrix.org\">@littledan:matrix.org</a><br>Well… this is much of the stated motivation of the proposal that Surma and I presented to committee and that the committee agreed to Stage 2 on. I am surprised to see so much skepticism on this point and interesting in understanding more about why you feel this way; I wonder what went wrong in communication that we didn’t uncover this disagreement sooner.</blockquote></mx-reply>importHooks are not equivalent between workers if they have either different import maps or service workers. Could even vary based on differences in local DNS.","mimetype":"text/html"}]},"ts":1657215561649,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$mpxsCjTsHhgnXsc6ZwLF2GzjvaRKeZM6OH_2zdTsVrI"},
{"content":{"body":"However, consider the possibility that the receiver can create an importHook that calls back to the sender.","msgtype":"m.text","org.matrix.msc1767.text":"However, consider the possibility that the receiver can create an importHook that calls back to the sender."},"ts":1657215683428,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JmpM84YQnkqVZgal47Q40AsqSg6TQCQUT3nStul-IYs"},
{"content":{"body":"Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/html"}]},"ts":1657216756631,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Ck8mQxJeU2I3kZQJav9FonYmHkhQ4-vuwnBFtbnL364"},
{"content":{"body":" * Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","format":"org.matrix.custom.html","formatted_body":" * <a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","m.new_content":{"body":"Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$Ck8mQxJeU2I3kZQJav9FonYmHkhQ4-vuwnBFtbnL364","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Daniel Ehrenberg: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/plain"},{"body":" * <a href=\"https://matrix.to/#/@littledan:mozilla.org\">Daniel Ehrenberg</a>: I don’t mean to communicate an absolutist stance. Even locally, there’s no guarantee that a module graph is consistent over time. But, on one extreme, sending a module to a worker is maximally fragile and on the other (sending a module with an RPC/IPC handle to the original loader) minimally fragile. I believe you and I agree that we’re converging on a foundation that is sufficient for implementing either extreme. And I think that we also agree that sending a worker and depending on out-of-band coordination of importHooks is a maximally fragile solution on that spectrum. And emphatically, I personally don’t object.","mimetype":"text/html"}]},"ts":1657216824764,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$plp9gY2Yfu9a0SmDT-G5fo2LrNtllQ_aeAEkNi9RV-s"},
{"content":{"body":"It’s also possible to have a sender and receiver with different but equivalent import maps, another case in which just sending the source and meta would work fine.","msgtype":"m.text","org.matrix.msc1767.text":"It’s also possible to have a sender and receiver with different but equivalent import maps, another case in which just sending the source and meta would work fine."},"ts":1657216916082,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Hzx1dLzMvjlKSsFKUjKNcMQ4YVlAWqBfftVkMVitAOY"}
]