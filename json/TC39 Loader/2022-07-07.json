[
{"content":{"body":"i'm not sure it's reasonable, more that it's the path of least resistance","msgtype":"m.text","org.matrix.msc1767.text":"i'm not sure it's reasonable, more that it's the path of least resistance"},"ts":1657152013649,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$mQNd80b8PEq5Fs6PKpEGVqw6cviHjPdseEWDnmjcj8I"},
{"content":{"body":"And taking esm-integration at face value, and stated assumption, there’s already a reasonable interpretation.","msgtype":"m.text","org.matrix.msc1767.text":"And taking esm-integration at face value, and stated assumption, there’s already a reasonable interpretation."},"ts":1657152015471,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$j4uvBsNSOWTo9WIWXMw6kyeA8EmzZlZwWDnFKsiVnts"},
{"content":{"body":"So, the question is whether it can be simultaneously true that `x instanceof ModuleSource` and `x instanceof WebAssembly.Module`, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","format":"org.matrix.custom.html","formatted_body":"So, the question is whether it can be simultaneously true that <code>x instanceof ModuleSource</code> and <code>x instanceof WebAssembly.Module</code>, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, the question is whether it can be simultaneously true that `x instanceof ModuleSource` and `x instanceof WebAssembly.Module`, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","mimetype":"text/plain"},{"body":"So, the question is whether it can be simultaneously true that <code>x instanceof ModuleSource</code> and <code>x instanceof WebAssembly.Module</code>, such that the former could be fed back into the JS module graph, and the latter could be used for manual instantiation.","mimetype":"text/html"}]},"ts":1657152097916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$H47vcRSfsb9ssLZ28FmmUU2bjL-CDDfmbPG6llJWjcI"},
{"content":{"body":"i don't think that can be done for the existing `WebAssembly.Module`","format":"org.matrix.custom.html","formatted_body":"i don't think that can be done for the existing <code>WebAssembly.Module</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"i don't think that can be done for the existing `WebAssembly.Module`","mimetype":"text/plain"},{"body":"i don't think that can be done for the existing <code>WebAssembly.Module</code>","mimetype":"text/html"}]},"ts":1657152139603,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$xOoL8t0c2bRhk8fSaCyJv8MCZpB5SN1iVe7naNyaR5k"},
{"content":{"body":"That seems like a problem.","msgtype":"m.text","org.matrix.msc1767.text":"That seems like a problem."},"ts":1657152154327,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$KLF6_i8rFtGJSF3goVABnWshOo_zf--EzPlz-T4RcFk"},
{"content":{"body":"there are solutions the acceptability of which i'm unsure","msgtype":"m.text","org.matrix.msc1767.text":"there are solutions the acceptability of which i'm unsure"},"ts":1657152201839,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$AlXWe5G5fUI709s60W9c1vJ6bmr6qLi12OO6pMTakGA"},
{"content":{"body":"WebAssembly.Module.fromModuleSource","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Module.fromModuleSource"},"ts":1657152207906,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$MS7Wqy39NoVAkQYabOeGpZEZM9vafyy0JMtv1muaj5o"},
{"content":{"body":"WebAssembly.Module2","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Module2"},"ts":1657152216657,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$eIkMcv_tHSYWJ2NPt8JkjUCNOaTz_NM7Zr1HTlypKR8"},
{"content":{"body":"WebAssembly.Instance.instantiateFromModuleSource","msgtype":"m.text","org.matrix.msc1767.text":"WebAssembly.Instance.instantiateFromModuleSource"},"ts":1657152252709,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$LD740wDDp1x9NkJ86e1MGEweYDRjYwGQVJESDZf962s"},
{"content":{"body":"this was where I was wondering if we might be able to define an internal slot on `WebAssembly.Module` that provided this relation in an internal way to 262","format":"org.matrix.custom.html","formatted_body":"this was where I was wondering if we might be able to define an internal slot on <code>WebAssembly.Module</code> that provided this relation in an internal way to 262","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"this was where I was wondering if we might be able to define an internal slot on `WebAssembly.Module` that provided this relation in an internal way to 262","mimetype":"text/plain"},{"body":"this was where I was wondering if we might be able to define an internal slot on <code>WebAssembly.Module</code> that provided this relation in an internal way to 262","mimetype":"text/html"}]},"ts":1657152255353,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$Irtd-nchBxsRvyeLtYl61v67uX_7Fii757X6Ux11JoQ"},
{"content":{"body":"that could then be incorporated into the esm integration","msgtype":"m.text","org.matrix.msc1767.text":"that could then be incorporated into the esm integration"},"ts":1657152261465,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$HcLINb1ll7InLOzFhYqCl1I9q4exgcGR3FnGlczHbx8"},
{"content":{"body":"yeah, where does the `instanceof` requirement come from","format":"org.matrix.custom.html","formatted_body":"yeah, where does the <code>instanceof</code> requirement come from","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"yeah, where does the `instanceof` requirement come from","mimetype":"text/plain"},{"body":"yeah, where does the <code>instanceof</code> requirement come from","mimetype":"text/html"}]},"ts":1657152281138,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$5wd0lW3gGOmrEMFW6w0dFAz7pYL9IoHmMOXigQA2KgY"},
{"content":{"body":"it could be a deep-ish sense of duck typing","msgtype":"m.text","org.matrix.msc1767.text":"it could be a deep-ish sense of duck typing"},"ts":1657152288536,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$45wUbCSexscQN9QY9NhFL9ycZgNBKGBtgtNcvYKl8Xg"},
{"content":{"body":"or the wasm js api","msgtype":"m.text","org.matrix.msc1767.text":"or the wasm js api"},"ts":1657152291203,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$SvaEYIl_43c0Plt5DUZaNkvxN588wvUT7lrieaqT8Eo"},
{"content":{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to `new Module(source, ...rest)` and the prototype chain is not material.","format":"org.matrix.custom.html","formatted_body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to <code>new Module(source, ...rest)</code> and the prototype chain is not material.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to `new Module(source, ...rest)` and the prototype chain is not material.","mimetype":"text/plain"},{"body":"Yeah, I was not precise. I specifically mean that x be a “module source” if it could later be passed to <code>new Module(source, ...rest)</code> and the prototype chain is not material.","mimetype":"text/html"}]},"ts":1657152348139,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$TGjraqiLRt91dsp-w_c_TCo4ap3pHrwoBDavuObki3M"},
{"content":{"body":"ah, then i think that is possible","msgtype":"m.text","org.matrix.msc1767.text":"ah, then i think that is possible"},"ts":1657152383132,"senderName":"shu","senderId":"@shuyuguo:matrix.org","id":"$cN3m3hjx0Rn_Iy7qn2HZ7X8paCGn79rFqrj6lBkexps"},
{"content":{"body":"And I’ve got slides in the overflow that `source` should fall through to a protocol.","format":"org.matrix.custom.html","formatted_body":"And I’ve got slides in the overflow that <code>source</code> should fall through to a protocol.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And I’ve got slides in the overflow that `source` should fall through to a protocol.","mimetype":"text/plain"},{"body":"And I’ve got slides in the overflow that <code>source</code> should fall through to a protocol.","mimetype":"text/html"}]},"ts":1657152389256,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$APLiNCKG_6uilGCGME0iqHi33UCa-K5JPC_KL6K3sdo"},
{"content":{"body":"For user virtualized module sources. That’s the escape hatch for defining bindings for, say, CommonJS in userspace.","msgtype":"m.text","org.matrix.msc1767.text":"For user virtualized module sources. That’s the escape hatch for defining bindings for, say, CommonJS in userspace."},"ts":1657152432854,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y2BtExM4oea11MDRcSYvaSMPE27EfRdZJxN6bMMAWzs"},
{"content":{"body":"So, yeah, stuffing an internal slot on `WebAssembly.Module` such that it could be digested by `new Module()` is acceptable to me.","format":"org.matrix.custom.html","formatted_body":"So, yeah, stuffing an internal slot on <code>WebAssembly.Module</code> such that it could be digested by <code>new Module()</code> is acceptable to me.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"So, yeah, stuffing an internal slot on `WebAssembly.Module` such that it could be digested by `new Module()` is acceptable to me.","mimetype":"text/plain"},{"body":"So, yeah, stuffing an internal slot on <code>WebAssembly.Module</code> such that it could be digested by <code>new Module()</code> is acceptable to me.","mimetype":"text/html"}]},"ts":1657152474722,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$JNxhvIJMHGs5lA1xHh6ZWeGreqLzKRncbJZ5gs_BPAc"},
{"content":{"body":"Not just acceptable, a condition of my acceptance.","msgtype":"m.text","org.matrix.msc1767.text":"Not just acceptable, a condition of my acceptance."},"ts":1657152497024,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$5zjZi7d5kTG-8G8Ik7sh4H1_tTGcQ79DtjOCi0uzig4"},
{"content":{"body":"And guybedford we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","format":"org.matrix.custom.html","formatted_body":"And <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"And guybedford we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","mimetype":"text/plain"},{"body":"And <a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> we can punt on how to link ESM into a JS graph. That’s answered https://github.com/WebAssembly/esm-integration/tree/main/proposals/esm-integration","mimetype":"text/html"}]},"ts":1657152539370,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$OYq_K9n9VxLRqtYzOs-H_801poqEeM4QIizAyZJvVXs"},
{"content":{"body":"At least, I trust it does.","msgtype":"m.text","org.matrix.msc1767.text":"At least, I trust it does."},"ts":1657152613036,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$-AXKPdnTvjSSzu-5Mb2bK9kSk1Ddu4hrulw0_qRgZU0"},
{"content":{"body":"my hope was not to have to flesh out such a protocol as a stage 2 requirement here by treating it as somewhat under-specified for now","msgtype":"m.text","org.matrix.msc1767.text":"my hope was not to have to flesh out such a protocol as a stage 2 requirement here by treating it as somewhat under-specified for now"},"ts":1657152619486,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$2_Sjp1G5Xrdn6iI1jFdj5n8yvr4-4zjpxVjnbJNSqOo"},
{"content":{"body":"but if the feedback is to more clearly work this through we can investigate options","msgtype":"m.text","org.matrix.msc1767.text":"but if the feedback is to more clearly work this through we can investigate options"},"ts":1657152629690,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$EpLgy77ACyog1F4VlO3FdOu8FV_C2LQJ6278FGxUfOk"},
{"content":{"body":"I think the protocol likely belongs in the spec for the module source object","msgtype":"m.text","org.matrix.msc1767.text":"I think the protocol likely belongs in the spec for the module source object"},"ts":1657152659984,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$RWHW9LLadIX3RZ1Vv0QTFdCLeR8hUl_v7lnPG5QbxSI"},
{"content":{"body":"For stage 2, I can be satisfied if we know we’re not painting ourself into a corner, regardless of what’s captured in the proposal text.","msgtype":"m.text","org.matrix.msc1767.text":"For stage 2, I can be satisfied if we know we’re not painting ourself into a corner, regardless of what’s captured in the proposal text."},"ts":1657152682187,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IDOBcjqbFMh1fmoSEbDPyt5JLfxH5nOvo-pH-zt9KEU"},
{"content":{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its `source` argument.","format":"org.matrix.custom.html","formatted_body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its <code>source</code> argument.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its `source` argument.","mimetype":"text/plain"},{"body":"The protocol for virtual modules is orthogonal and I only point it out because I expect the Module constructor to have overloads on its <code>source</code> argument.","mimetype":"text/html"}]},"ts":1657152721916,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$Kd6bNcFgczFFQ4JCQJBdRdOB6lgB8KvlJivdyiUGaGo"},
{"content":{"body":"Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.","format":"org.matrix.custom.html","formatted_body":"Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.","mimetype":"text/plain"},{"body":"Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.","mimetype":"text/html"}]},"ts":1657152769858,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8"},
{"content":{"body":"The other wrinkle is that implementing a bundler or file watcher for all this is substantially easier of all “module source” types have a uniform way to access the module source’s list of import specifiers.","msgtype":"m.text","org.matrix.msc1767.text":"The other wrinkle is that implementing a bundler or file watcher for all this is substantially easier of all “module source” types have a uniform way to access the module source’s list of import specifiers."},"ts":1657152867968,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$oNvFIV7nh4EjcY8z3UGJuBld-6MoaxL5QHLfkF7Thds"},
{"content":{"body":"As currently sketched, `moduleSource.bindings` is the same shape for `ModuleSource` and the protocol for virtual module sources.","format":"org.matrix.custom.html","formatted_body":"As currently sketched, <code>moduleSource.bindings</code> is the same shape for <code>ModuleSource</code> and the protocol for virtual module sources.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"As currently sketched, `moduleSource.bindings` is the same shape for `ModuleSource` and the protocol for virtual module sources.","mimetype":"text/plain"},{"body":"As currently sketched, <code>moduleSource.bindings</code> is the same shape for <code>ModuleSource</code> and the protocol for virtual module sources.","mimetype":"text/html"}]},"ts":1657152911898,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$QzyZ_liiAVumbmhBT1gOdr4OeFbC8WErRv8F-ITAIuM"},
{"content":{"body":"> <@kriskowal:matrix.org> Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.\n\nOr rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","format":"org.matrix.custom.html","formatted_body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.</blockquote></mx-reply>Or rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","m.relates_to":{"m.in_reply_to":{"event_id":"$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8"}},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":"> <@kriskowal:matrix.org> Which is to say that it can brand check for `ModuleSource`, then brand check for `WebAssembly.Module`, then fall through to a virtualized module protocol.\n\nOr rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","mimetype":"text/plain"},{"body":"<mx-reply><blockquote><a href=\"https://matrix.to/#/!RkpmGMjJtqLKXzByOT:matrix.org/$rXL3uGx44GLRWOP3BrIDthMtMPqtpQ74G280D4sqdC8?via=matrix.org&via=igalia.com&via=mozilla.org\">In reply to</a> <a href=\"https://matrix.to/#/@kriskowal:matrix.org\">@kriskowal:matrix.org</a><br>Which is to say that it can brand check for <code>ModuleSource</code>, then brand check for <code>WebAssembly.Module</code>, then fall through to a virtualized module protocol.</blockquote></mx-reply>Or rather, check for [[StaticModuleRecord]] internal slot, which the former two would have.","mimetype":"text/html"}]},"ts":1657153275699,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$IYuZSd4KDCJHXMWq1lvwaELc2_nLYUBPeLchS86WjHk"},
{"content":{"body":"Yeah so the WebAssembly way of doing this is quite unique - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports","msgtype":"m.text","org.matrix.msc1767.text":"Yeah so the WebAssembly way of doing this is quite unique - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports"},"ts":1657153304096,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$arDZ8DTnNKFdTzEI_s__KRU2nXd461qYhPYuftLAF98"},
{"content":{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"ts":1657153344495,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$XKbzW60Zxru80URTpORk9JeK_5JHkIxM9lRY7LtRozk"},
{"content":{"body":" * Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":" * Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","m.new_content":{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","format":"org.matrix.custom.html","formatted_body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":"Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"m.relates_to":{"event_id":"$XKbzW60Zxru80URTpORk9JeK_5JHkIxM9lRY7LtRozk","rel_type":"m.replace"},"msgtype":"m.text","org.matrix.msc1767.message":[{"body":" * Yeah, we’ve discussed a protocol oriented around `source.constructor.imports(source)`, which we agreed would be Special™.","mimetype":"text/plain"},{"body":" * Yeah, we’ve discussed a protocol oriented around <code>source.constructor.imports(source)</code>, which we agreed would be Special™.","mimetype":"text/html"}]},"ts":1657153355365,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$v_d2VBLrPO5EQJkTSha4QLfDK8ZjwPiiRSbCCfyOb1M"},
{"content":{"body":"Is there a reason that `WebAssembly.Module.prototype` couldn’t have a `bindings` accessor to throw bundlers a bone?","format":"org.matrix.custom.html","formatted_body":"Is there a reason that <code>WebAssembly.Module.prototype</code> couldn’t have a <code>bindings</code> accessor to throw bundlers a bone?","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Is there a reason that `WebAssembly.Module.prototype` couldn’t have a `bindings` accessor to throw bundlers a bone?","mimetype":"text/plain"},{"body":"Is there a reason that <code>WebAssembly.Module.prototype</code> couldn’t have a <code>bindings</code> accessor to throw bundlers a bone?","mimetype":"text/html"}]},"ts":1657153568919,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$EUDOYwnzmgIRJ5TEYnKS21j2FCi4LM56uAYDSBGk-6g"},
{"content":{"body":"I don't know, if we're adding branding in theory we could add other things, Dan might know more about what's involved here since he did a lot of the JS API spec work I believe","msgtype":"m.text","org.matrix.msc1767.text":"I don't know, if we're adding branding in theory we could add other things, Dan might know more about what's involved here since he did a lot of the JS API spec work I believe"},"ts":1657153682228,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$WjeCvyuVs1QsVXNu9Kq6n_Y4jKsWFqEyCveisjMfvQA"},
{"content":{"body":"Well, I owe you a review, and I’m at least oriented. I can leave a note.","msgtype":"m.text","org.matrix.msc1767.text":"Well, I owe you a review, and I’m at least oriented. I can leave a note."},"ts":1657153778267,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$y_taCiJygT2SDewRChWBBT-mH1y_mwGNH-H15b3YO08"},
{"content":{"body":"Thanks for playing Wheel of Spec Fiction™.","msgtype":"m.text","org.matrix.msc1767.text":"Thanks for playing Wheel of Spec Fiction™."},"ts":1657153802060,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$afkQTdTmeJyMdgRyRjfl_o3-z3Cu6ST82doRZ1L5xX0"},
{"content":{"body":"haha sure we've covered a lot! will take the winnings for now indeed","msgtype":"m.text","org.matrix.msc1767.text":"haha sure we've covered a lot! will take the winnings for now indeed"},"ts":1657153895134,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$dkz0rq8ElYZvGc7sju_FigVpvarq_2sHFQvoc_YCKso"},
{"content":{"body":"I have just noticed the pun in spec fiction. Who’s responsible for this!)/","msgtype":"m.text","org.matrix.msc1767.text":"I have just noticed the pun in spec fiction. Who’s responsible for this!)/"},"ts":1657154001310,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$PKcf65IQhs-8YGbGNfy0KYibtqh5M0_PINMesYNDmUg"},
{"content":{"body":"well we just call it specification I guess to begin with :P","msgtype":"m.text","org.matrix.msc1767.text":"well we just call it specification I guess to begin with :P"},"ts":1657154221485,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$yZoSxkBXf4PRYFs44gikQYE4BhU2Caq60grufetU5Yc"},
{"content":{"body":"I mean, this is clearly a pun on SpecFic, the category containing both Fantasy and SciFi https://en.wikipedia.org/wiki/Speculative_fiction","msgtype":"m.text","org.matrix.msc1767.text":"I mean, this is clearly a pun on SpecFic, the category containing both Fantasy and SciFi https://en.wikipedia.org/wiki/Speculative_fiction"},"ts":1657155657227,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$fLh0f8G8pB-Gh3DZ4uw3BOFPFXh85e6_UyVlw4iv4IA"},
{"content":{"body":"guybedford Luca Casonato I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"guybedford Luca Casonato I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@guybedford:matrix.org\">guybedford</a> <a href=\"https://matrix.to/#/@lucacasonato:matrix.org\">Luca Casonato</a> I provided a review. I think it would be good to settle the question before plenary, whether a reflected module captures a module instance or a module source instance. I am pretty sure it must be the latter and the front matter for the proposal states the former. https://github.com/tc39/proposal-import-reflection/pull/21#pullrequestreview-1030806802","mimetype":"text/html"}]},"ts":1657162217083,"senderName":"Kris Kowal","senderId":"@kriskowal:matrix.org","id":"$FRTRIOqz7_pKBuVa6WxlItHVWCpOaSu2C5w7lCcIp5E"},
{"content":{"body":"Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","format":"org.matrix.custom.html","formatted_body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Kris Kowal: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","mimetype":"text/plain"},{"body":"<a href=\"https://matrix.to/#/@kriskowal:matrix.org\">Kris Kowal</a>: I think it would align with Wasm better if the JS reflection can be treated as supporting arbitrary linkage as opposed to only host linkage","mimetype":"text/html"}]},"ts":1657168130814,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$QxLZNqB8ga0l-dbaA75vz77tZEiMW_akHNs0pvuMIDU"},
{"content":{"body":"Since that is effectively what you get with `WebAssembly.Module` so that would be the symmetric choice","format":"org.matrix.custom.html","formatted_body":"Since that is effectively what you get with <code>WebAssembly.Module</code> so that would be the symmetric choice","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"Since that is effectively what you get with `WebAssembly.Module` so that would be the symmetric choice","mimetype":"text/plain"},{"body":"Since that is effectively what you get with <code>WebAssembly.Module</code> so that would be the symmetric choice","mimetype":"text/html"}]},"ts":1657168146503,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$lC468_FQkYJiMzJl2QkBTHwpWo1LIALzpmPvY_uQJ8U"},
{"content":{"body":"I'm open to the representation options though","msgtype":"m.text","org.matrix.msc1767.text":"I'm open to the representation options though"},"ts":1657168153708,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$S58FGeWO4FPVaFTEO2NTwg7sCjuhVnZq-Z45pXRlUAQ"},
{"content":{"body":"at the moment that object is still a big `?`","format":"org.matrix.custom.html","formatted_body":"at the moment that object is still a big <code>?</code>","msgtype":"m.text","org.matrix.msc1767.message":[{"body":"at the moment that object is still a big `?`","mimetype":"text/plain"},{"body":"at the moment that object is still a big <code>?</code>","mimetype":"text/html"}]},"ts":1657168163378,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$gMqfT_9rJOBrzuHGNFzHaVAmQfY6H5ibBNTBVGp0-kM"},
{"content":{"body":"thanks for the review, I've pushed some updated, do take another look if you have a moment","msgtype":"m.text","org.matrix.msc1767.text":"thanks for the review, I've pushed some updated, do take another look if you have a moment"},"ts":1657168183083,"senderName":"guybedford","senderId":"@guybedford:matrix.org","id":"$bGirTM5Alw1tiByGWZwOBL0j7u-QXH4xvlOH6Tfpk7A"}
]